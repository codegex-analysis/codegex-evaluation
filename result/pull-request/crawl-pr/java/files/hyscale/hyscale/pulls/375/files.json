[
  {
    "sha": "9f85fd3684d5ea79eaf9679260ac62b83986c515",
    "filename": "commons/src/main/java/io/hyscale/commons/commands/CommandExecutor.java",
    "status": "modified",
    "additions": 22,
    "deletions": 1,
    "changes": 23,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/main/java/io/hyscale/commons/commands/CommandExecutor.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/main/java/io/hyscale/commons/commands/CommandExecutor.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/commons/src/main/java/io/hyscale/commons/commands/CommandExecutor.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -17,6 +17,7 @@\n \n import java.io.*;\n import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n \n import org.apache.commons.exec.CommandLine;\n import org.apache.commons.exec.DefaultExecutor;\n@@ -100,6 +101,10 @@ public static boolean execute(String command) {\n     public static boolean execute(String command, File commandOutputFile) {\n         return executeInDir(command, commandOutputFile, null);\n     }\n+    \n+    public static boolean executeInDir(String command, String dir) {\n+        return executeInDir(command, null, dir);\n+    }\n \n     /**\n      * @param command           to be executed\n@@ -140,7 +145,7 @@ private static CommandResult execute(String command, File outputFile, String dir\n         if (StringUtils.isBlank(dir) || dir.equals(\".\")) {\n             dir = SetupConfig.CURRENT_WORKING_DIR;\n         }\n-        CommandLine commandToExecute = CommandLine.parse(command);\n+        CommandLine commandToExecute = getCommandLine(command);\n \n         Executor executor = new DefaultExecutor();\n \n@@ -180,6 +185,22 @@ private static String getCommandOutput(OutputStream outputStream)  {\n         }\n         return null;\n     }\n+    \n+    // To process quotes separately, since they are not required \n+    private static CommandLine getCommandLine(String command) {\n+\n+        CommandLine oldCommandLine = CommandLine.parse(command);\n+\n+        CommandLine newCommandLine = new CommandLine(oldCommandLine.getExecutable());\n+\n+        Arrays.asList(oldCommandLine.getArguments()).forEach(each -> {\n+            if (each.startsWith(\"'\") && each.endsWith(\"'\")) {\n+                each = each.substring(1, each.length() - 1);\n+            }\n+            newCommandLine.addArgument(each, false);\n+        });\n+        return newCommandLine;\n+    }\n \n     private static InputStream getInputStream(String stdInput) {\n         if (StringUtils.isBlank(stdInput)) {"
  },
  {
    "sha": "138207428302bcf6541b1dce7930921cc54650bb",
    "filename": "commons/src/main/java/io/hyscale/commons/commands/provider/ImageCommandProvider.java",
    "status": "modified",
    "additions": 70,
    "deletions": 31,
    "changes": 101,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/main/java/io/hyscale/commons/commands/provider/ImageCommandProvider.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/main/java/io/hyscale/commons/commands/provider/ImageCommandProvider.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/commons/src/main/java/io/hyscale/commons/commands/provider/ImageCommandProvider.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -25,10 +25,13 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n import io.hyscale.commons.config.SetupConfig;\n import io.hyscale.commons.constants.ToolConstants;\n import io.hyscale.commons.utils.ImageMetadataProvider;\n import io.hyscale.commons.utils.NormalizationUtil;\n+import io.hyscale.commons.utils.ObjectMapperFactory;\n \n @Component\n public class ImageCommandProvider {\n@@ -44,7 +47,7 @@\n \tprivate static final String INSPECT_COMMAND = \"inspect\";\n \tprivate static final String TAG_COMMAND = \"tag\";\n \tprivate static final String SPACE = \" \";\n-\tprivate static final String DOCKER_BUILD = \"docker build\";\n+\tprivate static final String BUILD_COMMAND = \"build\";\n \tprivate static final String TAG_ARG = \" -t \";\n \tprivate static final String FILE_ARG = \" -f \";\n \tprivate static final String BUILD_ARGS = \" --build-arg \";\n@@ -55,31 +58,35 @@\n \tprivate static final String FORCE_FLAG = \"f\";\n \tprivate static final String QUIET = \"q\";\n \tprivate static final String FILTER = \"--filter\";\n+\tprivate static final String TARGET_ARGS = \" --target \";\n+\tprivate static final String LOGIN = \" login \";\n+\tprivate static final String CONFIG = \" --config \";\n+\tprivate static final String USER_ARG = \" -u \";\n+\tprivate static final String PASS_ARG = \" -p \";\n \tprivate static final boolean USE_SUDO = false;\n-\tprivate static final String TARGET = \"target\";\n+\tprivate static final boolean USE_CONFIG = true;\n \t\n \t@Autowired\n \tprivate ImageMetadataProvider imageMetadataProvider;\n-\n+\t\n \t/**\n-\t * Provides docker build command based on user input\n-\t * If buildPath is provided than dockerfilePath should refer to the Dockerfile and not directory\n-\t * Ex docker build -t hyscale.io/appName/serviceName:tag --label “imageowner=hyscale\" -f dockerfilePath buildPath\n-\t * @param appName: used to generate image name\n-\t * @param serviceName: used to generate image name\n-\t * @param tag\n-\t * @param dockerFilePath: Path to dockerfile: Can be directory where dockerfile is or complete path\n-\t * @param buildPath: Build Path \n-\t * @param target\n-\t * @param buildArgs\n-\t * @return docker build command\n-\t */\n-    public String dockerBuildCommand(String appName, String serviceName, String tag, String dockerFilePath,\n-            String buildPath, String target, Map<String, String> buildArgs) {\n-        StringBuilder buildCommand = new StringBuilder();\n-        buildCommand.append(DOCKER_BUILD);\n+     * Provides docker build command based on user input\n+     * If buildPath is provided than dockerfilePath should refer to the Dockerfile and not directory\n+     * Ex docker build -t imageName:tag --label “imageowner=hyscale\" -f dockerfilePath buildPath\n+     * @param imageName\n+     * @param tag\n+     * @param dockerFilePath Path to dockerfile: Can be directory where dockerfile is or complete path\n+     * @param buildPath\n+     * @param target\n+     * @param buildArgs\n+     * @return docker build command\n+     */\n+    public String dockerBuildCommand(String imageName, String tag, String dockerFilePath, String buildPath,\n+            String target, Map<String, String> buildArgs) {\n+        StringBuilder buildCommand = new StringBuilder(docker(USE_CONFIG));\n+        buildCommand.append(BUILD_COMMAND);\n         if (target != null) {\n-            buildCommand.append(SPACE).append(HYPHEN).append(HYPHEN).append(TARGET).append(SPACE).append(target);\n+            buildCommand.append(TARGET_ARGS).append(target);\n         }\n         buildCommand.append(SPACE).append(HYPHEN).append(HYPHEN).append(LABEL_ARGS).append(SPACE).append(IMAGE_OWNER)\n                 .append(EQUALS).append(HYSCALE);\n@@ -88,7 +95,8 @@ public String dockerBuildCommand(String appName, String serviceName, String tag,\n             buildCommand.append(getBuildArgs(buildArgs));\n         }\n         buildCommand.append(TAG_ARG);\n-        buildCommand.append(imageMetadataProvider.getBuildImageNameWithTag(appName, serviceName, tag));\n+        String imageNameWithTag = StringUtils.isNotBlank(tag) ? imageName + ToolConstants.COLON + tag : imageName;\n+        buildCommand.append(imageNameWithTag);\n         if (StringUtils.isNotBlank(buildPath)) {\n             buildCommand.append(FILE_ARG).append(dockerFilePath).append(SPACE).append(buildPath);\n         } else {\n@@ -103,7 +111,8 @@ public String dockerBuildCommand(String appName, String serviceName, String tag,\n     \n     private String getBuildArgs(Map<String, String> buildArgs) {\n         StringBuilder buildArgsCmd = new StringBuilder();\n-        buildArgs.entrySet().stream().forEach(each -> buildArgsCmd.append(BUILD_ARGS).append(each.getKey() + EQUALS + each.getValue()));\n+        buildArgs.entrySet().stream()\n+                .forEach(each -> buildArgsCmd.append(BUILD_ARGS).append(each.getKey() + EQUALS + each.getValue()));\n         return buildArgsCmd.toString();\n     }\n \n@@ -117,7 +126,7 @@ public String dockerImages() {\n \n     public String dockerPush(String imageFullPath) {\n         imageFullPath = NormalizationUtil.normalizeImageName(imageFullPath);\n-        StringBuilder pushCommand = new StringBuilder(docker());\n+        StringBuilder pushCommand = new StringBuilder(docker(USE_CONFIG));\n         pushCommand.append(PUSH_COMMAND).append(SPACE).append(imageFullPath);\n         return pushCommand.toString();\n     }\n@@ -136,18 +145,11 @@ public String dockerPull(String imageName) {\n             return null;\n         }\n         imageName = NormalizationUtil.normalizeImageName(imageName);\n-        StringBuilder imagePullCmd = new StringBuilder(docker());\n+        StringBuilder imagePullCmd = new StringBuilder(docker(USE_CONFIG));\n         imagePullCmd.append(PULL_COMMAND).append(SPACE).append(imageName);\n         return imagePullCmd.toString();\n     }\n \n-    public String getImageCleanUpCommand(String appName, String serviceName, String tag) {\n-        StringBuilder imageCleanCommand = new StringBuilder(docker());\n-        imageCleanCommand.append(REMOVE_IMAGE).append(SPACE)\n-                .append(imageMetadataProvider.getBuildImageNameWithTag(appName, serviceName, tag));\n-        return imageCleanCommand.toString();\n-    }\n-\n     public String dockerInspect(String imageFullPath) {\n         imageFullPath = NormalizationUtil.normalizeImageName(imageFullPath);\n         StringBuilder inspectCommand = new StringBuilder(docker());\n@@ -161,6 +163,14 @@ private String docker() {\n         }\n         return DOCKER_COMMAND + SPACE;\n     }\n+    \n+    private String docker(boolean withConfig) {\n+        StringBuilder sb = new StringBuilder(docker());\n+        if (withConfig) {\n+            sb.append(CONFIG).append(SetupConfig.getTemporaryDockerConfigDir()).append(SPACE);\n+        }\n+        return sb.toString();\n+    }\n \n     // docker rmi <id1> <id2> <id3>\n     public String removeDockerImages(Set<String> imageIds, boolean force) {\n@@ -176,6 +186,35 @@ public String removeDockerImages(Set<String> imageIds, boolean force) {\n         return removeDockerImages.toString();\n     }\n \n+    /**\n+     * \n+     * @param registry\n+     * @param username\n+     * @param password\n+     * @return docker --config ConfigFile login registry -u username -p password\n+     */\n+    public String dockerLogin(String registry, String username, String password) {\n+        StringBuilder sb = new StringBuilder(docker(USE_CONFIG));\n+        sb.append(LOGIN).append(SPACE).append(registry).append(SPACE);\n+        if (StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {\n+            sb.append(USER_ARG).append(username);\n+            if (isPasswordJson(password)) {\n+                password = \"'\" + password + \"'\";\n+            }\n+            sb.append(PASS_ARG).append(password);\n+        }\n+        return sb.toString();\n+    }\n+    \n+    private boolean isPasswordJson(String password) {\n+        try {\n+            ObjectMapperFactory.jsonMapper().readTree(password);\n+        } catch (JsonProcessingException e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n     // docker rmi <id1> <id2> <id3>\n     public String removeDockerImages(String[] imageIds, boolean force) {\n         if (imageIds == null || imageIds.length == 0) {"
  },
  {
    "sha": "5ce546471a4683ee1941acfa33377e82811c7345",
    "filename": "commons/src/main/java/io/hyscale/commons/config/SetupConfig.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/main/java/io/hyscale/commons/config/SetupConfig.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/main/java/io/hyscale/commons/config/SetupConfig.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/commons/src/main/java/io/hyscale/commons/config/SetupConfig.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -27,6 +27,7 @@\n \n     public static final String HYSCALE_CTL_HOME = \"HYSCALECTL_HOME\";\n     public static final String USER_HOME_DIR = System.getProperty(\"user.home\");\n+    public static final String TEMP_DIR = System.getProperty(\"java.io.tmpdir\");\n     public static final String CURRENT_WORKING_DIR = System.getProperty(\"user.dir\");\n     public static final String FILE_SEPARATOR = System.getProperty(\"file.separator\");\n     public static final String INSTALLATION_DIR = USER_HOME_DIR;\n@@ -42,6 +43,7 @@\n     private static final String LOGS_DIR = \"logs\";\n     private static final String APPS_DIR = \"apps\";\n     private static final String HYSCALE_DIR = \"hyscale\";\n+    private static final String TEMPORARY_CONFIG_DIR = \"hyscale-docker-config\";\n \n     private static final ThreadLocal<String> absolutePathTL = new ThreadLocal<>();\n \n@@ -50,7 +52,7 @@ public static void setAbsolutePath(String path) {\n             absolutePathTL.set(path);\n         }\n     }\n-\n+    \n     public static String getToolLogDir() {\n         return INSTALLATION_DIR + FILE_SEPARATOR + HYSCALE_DIR + FILE_SEPARATOR + LOGS_DIR;\n     }\n@@ -162,4 +164,8 @@ public static boolean hasExternalRegistryConf() {\n         }\n         return Boolean.valueOf(hyscaleregistryConf);\n     }\n+    \n+    public static String getTemporaryDockerConfigDir() {\n+        return TEMP_DIR + FILE_SEPARATOR + TEMPORARY_CONFIG_DIR;\n+    }\n }"
  },
  {
    "sha": "6355c7a5429230bcfcc31070373fd13bc9edb2b1",
    "filename": "commons/src/main/java/io/hyscale/commons/utils/EncodeDecodeUtil.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/main/java/io/hyscale/commons/utils/EncodeDecodeUtil.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/main/java/io/hyscale/commons/utils/EncodeDecodeUtil.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/commons/src/main/java/io/hyscale/commons/utils/EncodeDecodeUtil.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.commons.utils;\n+\n+import java.util.Base64;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import io.hyscale.commons.constants.ToolConstants;\n+\n+public class EncodeDecodeUtil {\n+\n+    private EncodeDecodeUtil() {\n+    }\n+\n+    public static String encode(String userName, String password) {\n+        if (StringUtils.isBlank(userName) || StringUtils.isBlank(password)) {\n+            return null;\n+        }\n+        String tokenString = userName + ToolConstants.COLON + password;\n+        return Base64.getEncoder().encodeToString(tokenString.getBytes());\n+    }\n+\n+    public static String decode(String encodedString) {\n+        if (StringUtils.isBlank(encodedString)) {\n+            return encodedString;\n+        }\n+        return new String(Base64.getDecoder().decode(encodedString));\n+    }\n+\n+}"
  },
  {
    "sha": "611db9af396f65b9a9838c5ac196e94f5db674ae",
    "filename": "commons/src/test/java/io/hyscale/commons/utils/EncodeDecodeUtilTests.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/test/java/io/hyscale/commons/utils/EncodeDecodeUtilTests.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/commons/src/test/java/io/hyscale/commons/utils/EncodeDecodeUtilTests.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/commons/src/test/java/io/hyscale/commons/utils/EncodeDecodeUtilTests.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.commons.utils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Base64;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+class EncodeDecodeUtilTests {\n+\n+    private static Stream<Arguments> encodeInput() {\n+        return Stream.of(Arguments.of(null, null, null),\n+                Arguments.of(null, \"\", null),\n+                Arguments.of(\"\", null, null),\n+                Arguments.of(\"test\", \"test\", Base64.getEncoder().encodeToString((\"test\" + \":\" + \"test\").getBytes()))\n+                );\n+    }\n+    \n+    @ParameterizedTest\n+    @MethodSource(\"encodeInput\")\n+    void testEncode(String userName, String password, String expectedResult) {\n+        assertEquals(expectedResult, EncodeDecodeUtil.encode(userName, password));\n+    }\n+    \n+    private static Stream<Arguments> decodeInput() {\n+        return Stream.of(Arguments.of(null, null),\n+                Arguments.of(\"\", \"\"),\n+                Arguments.of(\"dGVzdDp0ZXN0\", \"test:test\")\n+                );\n+    }\n+    \n+    @ParameterizedTest\n+    @MethodSource(\"decodeInput\")\n+    void testDecode(String input, String expectedResult) {\n+        assertEquals(expectedResult, EncodeDecodeUtil.decode(input));\n+    }\n+}"
  },
  {
    "sha": "8d4bf758b9c1e4c5f99e5ba5e78692838a3e4d23",
    "filename": "dockerfile-generator/dockerfile-gen-services/src/main/java/io/hyscale/dockerfile/gen/services/generator/impl/DockerfileGeneratorImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/dockerfile-generator/dockerfile-gen-services/src/main/java/io/hyscale/dockerfile/gen/services/generator/impl/DockerfileGeneratorImpl.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/dockerfile-generator/dockerfile-gen-services/src/main/java/io/hyscale/dockerfile/gen/services/generator/impl/DockerfileGeneratorImpl.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/dockerfile-generator/dockerfile-gen-services/src/main/java/io/hyscale/dockerfile/gen/services/generator/impl/DockerfileGeneratorImpl.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -48,6 +48,7 @@\n import io.hyscale.dockerfile.gen.services.manager.impl.DockerScriptManagerImpl;\n import io.hyscale.servicespec.commons.fields.HyscaleSpecFields;\n import io.hyscale.servicespec.commons.model.service.ServiceSpec;\n+import io.hyscale.servicespec.commons.predicates.ServiceSpecPredicates;\n \n /**\n  * Implementation to @see {@link DockerfileGenerator}\n@@ -189,7 +190,7 @@ private boolean skipDockerfileGen(ServiceSpec serviceSpec, DockerfileGenContext\n         if (DockerfileGenPredicates.skipDockerfileGen().test(serviceSpec)) {\n             WorkflowLogger.startActivity(DockerfileActivity.DOCKERFILE_GENERATION);\n             WorkflowLogger.endActivity(Status.SKIPPING);\n-            if (DockerfileGenPredicates.stackAsServiceImage().test(serviceSpec)) {\n+            if (ServiceSpecPredicates.stackAsServiceImage().test(serviceSpec)) {\n                 context.setStackAsServiceImage(true);\n             }\n             return false;"
  },
  {
    "sha": "da518a5b2f6c215822030448f50214ef8014054d",
    "filename": "dockerfile-generator/dockerfile-gen-services/src/main/java/io/hyscale/dockerfile/gen/services/predicates/DockerfileGenPredicates.java",
    "status": "modified",
    "additions": 5,
    "deletions": 74,
    "changes": 79,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/dockerfile-generator/dockerfile-gen-services/src/main/java/io/hyscale/dockerfile/gen/services/predicates/DockerfileGenPredicates.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/dockerfile-generator/dockerfile-gen-services/src/main/java/io/hyscale/dockerfile/gen/services/predicates/DockerfileGenPredicates.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/dockerfile-generator/dockerfile-gen-services/src/main/java/io/hyscale/dockerfile/gen/services/predicates/DockerfileGenPredicates.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -20,13 +20,16 @@\n import io.hyscale.servicespec.commons.model.service.Dockerfile;\n import io.hyscale.servicespec.commons.fields.HyscaleSpecFields;\n import io.hyscale.servicespec.commons.model.service.ServiceSpec;\n-import org.apache.commons.lang3.StringUtils;\n+import io.hyscale.servicespec.commons.predicates.ServiceSpecPredicates;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.util.function.Predicate;\n \n public class DockerfileGenPredicates {\n+    \n+    private DockerfileGenPredicates() {}\n \n     private static final Logger logger = LoggerFactory.getLogger(DockerfileGenPredicates.class);\n \n@@ -55,81 +58,9 @@\n                 return true;\n             }\n             \n-            return stackAsServiceImage().test(serviceSpec);\n-\n-        };\n-    }\n-\n-    public static Predicate<ServiceSpec> stackAsServiceImage() {\n-        return serviceSpec -> {\n-            if (serviceSpec == null) {\n-                return false;\n-            }\n-            BuildSpec buildSpec = null;\n-            try {\n-                buildSpec = serviceSpec.get(\n-                        HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.buildSpec),\n-                        BuildSpec.class);\n-            } catch (HyscaleException e) {\n-                logger.error(\"Error while fetching dockerfile from  image\", e);\n-            }\n+            return ServiceSpecPredicates.stackAsServiceImage().test(serviceSpec);\n \n-            if (buildSpec == null) {\n-                return false;\n-            }\n-            \n-            return (!haveArtifacts().test(buildSpec) && !haveConfigCommands().test(buildSpec)\n-                    && !haveConfigScript().test(buildSpec) && !haveRunScript().test(buildSpec)\n-                    && !haveRunCommands().test(buildSpec));\n         };\n     }\n \n-    /**\n-     * @return true if artifacts exist in buildspec\n-     */\n-\n-    public static Predicate<BuildSpec> haveArtifacts() {\n-        return buildSpec -> {\n-            if (buildSpec == null) {\n-                return false;\n-            }\n-            return buildSpec.getArtifacts() != null && !(buildSpec.getArtifacts().isEmpty());\n-        };\n-    }\n-\n-    public static Predicate<BuildSpec> haveConfigCommands() {\n-        return buildSpec -> {\n-            if (buildSpec == null) {\n-                return false;\n-            }\n-            return StringUtils.isNotBlank(buildSpec.getConfigCommands());\n-        };\n-    }\n-\n-    public static Predicate<BuildSpec> haveRunCommands() {\n-        return buildSpec -> {\n-            if (buildSpec == null) {\n-                return false;\n-            }\n-            return StringUtils.isNotBlank(buildSpec.getRunCommands());\n-        };\n-    }\n-\n-    public static Predicate<BuildSpec> haveConfigScript() {\n-        return buildSpec -> {\n-            if (buildSpec == null) {\n-                return false;\n-            }\n-            return StringUtils.isNotBlank(buildSpec.getConfigCommandsScript());\n-        };\n-    }\n-\n-    public static Predicate<BuildSpec> haveRunScript() {\n-        return buildSpec -> {\n-            if (buildSpec == null) {\n-                return false;\n-            }\n-            return StringUtils.isNotBlank(buildSpec.getRunCommandsScript());\n-        };\n-    }\n }"
  },
  {
    "sha": "c9ea0b89930b6b942468028033af1ad2e68476c5",
    "filename": "dockerfile-generator/dockerfile-gen-services/src/test/java/io/hyscale/dockerfile/gen/services/predicates/DockerfileGenPredicatesTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 8,
    "changes": 9,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/dockerfile-generator/dockerfile-gen-services/src/test/java/io/hyscale/dockerfile/gen/services/predicates/DockerfileGenPredicatesTest.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/dockerfile-generator/dockerfile-gen-services/src/test/java/io/hyscale/dockerfile/gen/services/predicates/DockerfileGenPredicatesTest.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/dockerfile-generator/dockerfile-gen-services/src/test/java/io/hyscale/dockerfile/gen/services/predicates/DockerfileGenPredicatesTest.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -37,14 +37,7 @@\n                 Arguments.of(DockerfileGenPredicates.skipDockerfileGen(), \"/input/skip-generation/stack-as-service.hspec\", true),\n                 Arguments.of(DockerfileGenPredicates.skipDockerfileGen(), \"/input/skip-generation/only-image.hspec\", true),\n                 Arguments.of(DockerfileGenPredicates.skipDockerfileGen(), \"/input/skip-generation/invalid-spec.hspec\", true),\n-                Arguments.of(DockerfileGenPredicates.skipDockerfileGen(), \"/input/skip-generation/dont-skip.hspec\", false),\n-                Arguments.of(DockerfileGenPredicates.stackAsServiceImage(), null, false),\n-                Arguments.of(DockerfileGenPredicates.stackAsServiceImage(), \"/input/skip-generation/dockerfile.hspec\", false),\n-                Arguments.of(DockerfileGenPredicates.stackAsServiceImage(), \"/input/skip-generation/only-image.hspec\", false),\n-                Arguments.of(DockerfileGenPredicates.stackAsServiceImage(), \"/input/skip-generation/dont-skip.hspec\", false),\n-                Arguments.of(DockerfileGenPredicates.stackAsServiceImage(), \"/input/skip-generation/invalid-spec.hspec\", false),\n-                Arguments.of(DockerfileGenPredicates.stackAsServiceImage(), \"/input/skip-generation/stack-as-service.hspec\", true)\n-                );\n+                Arguments.of(DockerfileGenPredicates.skipDockerfileGen(), \"/input/skip-generation/dont-skip.hspec\", false));\n     }\n     \n     @ParameterizedTest"
  },
  {
    "sha": "f08af55378c2188c3533d51843d1aab2cb55f9d3",
    "filename": "image-builder/builder-core/src/main/java/io/hyscale/builder/core/models/BuildContext.java",
    "status": "modified",
    "additions": 19,
    "deletions": 27,
    "changes": 46,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-core/src/main/java/io/hyscale/builder/core/models/BuildContext.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-core/src/main/java/io/hyscale/builder/core/models/BuildContext.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-core/src/main/java/io/hyscale/builder/core/models/BuildContext.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -15,6 +15,7 @@\n  */\n package io.hyscale.builder.core.models;\n \n+import java.util.HashMap;\n import java.util.Map;\n \n import io.hyscale.commons.models.DockerfileEntity;\n@@ -24,22 +25,15 @@\n \n \tprivate DockerfileEntity dockerfileEntity;\n \tprivate DockerImage dockerImage;\n-\t/**\n-\t * Push registry refer to one where hyscale will push the final image\n-\t */\n-\tprivate ImageRegistry pushRegistry;\n-\t/**\n-\t * Pull registry is required to pull intermediate image\n-\t * Ex: In case stack image refers to image in private registry\n-\t */\n-\tprivate ImageRegistry pullRegistry;\n+\t// Registry credentials for pull and push registries\n+\tprivate Map<String, ImageRegistry> registriesMap = new HashMap<>();\n \tprivate String serviceName;\n \tprivate String appName;\n \tprivate String version;\n \tprivate Map<String, String> buildArgs;\n \tprivate boolean verbose;\n \tprivate boolean tail;\n-\tprivate boolean stackAsServiceImage;\n+\tprivate Boolean stackAsServiceImage;\n \tprivate String imageShaSum;\n \tprivate String buildLogs;\n \tprivate String pushLogs;\n@@ -84,23 +78,21 @@ public void setDockerImage(DockerImage dockerImage) {\n \t\tthis.dockerImage = dockerImage;\n \t}\n \n-\tpublic ImageRegistry getPushRegistry() {\n-\t\treturn pushRegistry;\n-\t}\n-\n-\tpublic void setPushRegistry(ImageRegistry pushRegistry) {\n-\t\tthis.pushRegistry = pushRegistry;\n-\t}\n+\tpublic Map<String, ImageRegistry> getRegistriesMap() {\n+        return registriesMap;\n+    }\n \n-\tpublic ImageRegistry getPullRegistry() {\n-\t    return pullRegistry;\n-\t}\n-\n-\tpublic void setPullRegistry(ImageRegistry pullRegistry) {\n-\t    this.pullRegistry = pullRegistry;\n-\t}\n+    public void addRegistry(ImageRegistry imageRegistry) {\n+        if (imageRegistry != null) {\n+            this.addRegistry(imageRegistry.getUrl(), imageRegistry);\n+        }\n+    }\n+    \n+    public void addRegistry(String registry, ImageRegistry imageRegistry) {\n+        this.registriesMap.put(registry, imageRegistry);\n+    }\n \n-\tpublic Map<String, String> getBuildArgs() {\n+    public Map<String, String> getBuildArgs() {\n \t    return buildArgs;\n \t}\n \n@@ -124,11 +116,11 @@ public void setTail(boolean tail) {\n \t\tthis.tail = tail;\n \t}\n \n-\tpublic boolean isStackAsServiceImage() {\n+\tpublic Boolean isStackAsServiceImage() {\n \t\treturn stackAsServiceImage;\n \t}\n \n-\tpublic void setStackAsServiceImage(boolean stackAsServiceImage) {\n+\tpublic void setStackAsServiceImage(Boolean stackAsServiceImage) {\n \t\tthis.stackAsServiceImage = stackAsServiceImage;\n \t}\n "
  },
  {
    "sha": "66102741e1464363f7634b2646bfcb54ab2dff93",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/HyscaleDockerClient.java",
    "status": "modified",
    "additions": 42,
    "deletions": 9,
    "changes": 51,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/HyscaleDockerClient.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/HyscaleDockerClient.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/HyscaleDockerClient.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -18,9 +18,9 @@\n import java.util.List;\n import java.util.Map;\n \n-import io.hyscale.builder.core.models.BuildContext;\n import io.hyscale.builder.core.models.DockerImage;\n import io.hyscale.commons.exception.HyscaleException;\n+import io.hyscale.commons.models.ImageRegistry;\n import io.hyscale.servicespec.commons.model.service.Dockerfile;\n import io.hyscale.servicespec.commons.model.service.Image;\n \n@@ -31,7 +31,18 @@\n  *\n  */\n public interface HyscaleDockerClient {\n-\n+    \n+    /**\n+     * @return true if manual login is required for the client\n+     */\n+    boolean loginRequired();\n+    \n+    /**\n+     * @return true if clean up temporary files are required\n+     */\n+    default boolean cleanUp(){\n+        return false;\n+    }\n     /**\n      * @return true if docker is running, else false\n      */\n@@ -70,30 +81,46 @@\n     void deleteImage(String imageId, boolean force) throws HyscaleException;\n \n     /**\n-     * Build image based on docker\n+     * Build image based on dockerfile\n      * @param dockerfile\n+     * @param imageName\n      * @param tag\n-     * @param context\n+     * @param registryMap\n+     * @param logfile\n+     * @param isVerbose\n      * @return {@link DockerImage} built image details\n      * @throws HyscaleException\n      */\n-    DockerImage build(Dockerfile dockerfile, String tag, BuildContext context) throws HyscaleException;\n+    DockerImage build(Dockerfile dockerfile, String imageName, String tag, Map<String, ImageRegistry> registryMap,\n+            String logfile, boolean isVerbose) throws HyscaleException;\n \n     /**\n      * Push image to registry\n      * @param image\n-     * @param buildContext\n+     * @param imageRegistry\n+     * @return ShaSum of pushed image\n      * @throws HyscaleException\n      */\n-    void push(Image image, BuildContext buildContext) throws HyscaleException;\n+    String push(Image image, ImageRegistry imageRegistry) throws HyscaleException;\n+    \n+    /**\n+     * Push image to registry\n+     * @param image\n+     * @param imageRegistry\n+     * @param logfile\n+     * @param isVerbose\n+     * @return ShaSum of pushed image\n+     * @throws HyscaleException\n+     */\n+    String push(Image image, ImageRegistry imageRegistry, String logfile, boolean isVerbose) throws HyscaleException;\n \n     /**\n      * Pull image from registry\n      * @param image\n-     * @param context\n+     * @param imageRegistry\n      * @throws HyscaleException\n      */\n-    void pull(String image, BuildContext context) throws HyscaleException;\n+    void pull(String image, ImageRegistry imageRegistry) throws HyscaleException;\n \n     /**\n      * Tag image based on destination\n@@ -103,4 +130,10 @@\n      */\n     void tag(String source, Image dest) throws HyscaleException;\n     \n+    /**\n+     * Login to registry\n+     * @param registry\n+     * @throws HyscaleException\n+     */\n+    default void login(ImageRegistry registry) throws HyscaleException {}\n }"
  },
  {
    "sha": "85637dc9bb9cd5ea32452eaad426b0ca02df54b1",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/impl/DockerBinaryClient.java",
    "status": "modified",
    "additions": 42,
    "deletions": 35,
    "changes": 77,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/impl/DockerBinaryClient.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/impl/DockerBinaryClient.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/impl/DockerBinaryClient.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -34,6 +34,7 @@\n import io.hyscale.commons.config.SetupConfig;\n import io.hyscale.commons.constants.ToolConstants;\n import io.hyscale.commons.models.CommandResult;\n+import io.hyscale.commons.models.ImageRegistry;\n import io.hyscale.commons.utils.ImageMetadataProvider;\n import io.hyscale.commons.utils.ObjectMapperFactory;\n import io.hyscale.servicespec.commons.model.service.Image;\n@@ -48,7 +49,6 @@\n import io.hyscale.builder.services.config.ImageBuilderConfig;\n import io.hyscale.builder.services.docker.HyscaleDockerClient;\n import io.hyscale.builder.services.exception.ImageBuilderErrorCodes;\n-import io.hyscale.builder.core.models.BuildContext;\n import io.hyscale.builder.core.models.DockerImage;\n import io.hyscale.builder.core.models.ImageBuilderActivity;\n import io.hyscale.commons.commands.CommandExecutor;\n@@ -119,86 +119,78 @@ public void deleteImage(String imageId, boolean force) {\n     }\n \n     @Override\n-    public DockerImage build(Dockerfile dockerfile, String tag, BuildContext context) throws HyscaleException {\n+    public DockerImage build(Dockerfile dockerfile, String imageName, String tag,\n+            Map<String, ImageRegistry> registryMap, String logfile, boolean isVerbose) throws HyscaleException {\n+       \n         WorkflowLogger.startActivity(ImageBuilderActivity.IMAGE_BUILD);\n-        String appName = context.getAppName();\n-        String serviceName = context.getServiceName();\n-        boolean verbose = context.isVerbose();\n         String buildPath = dockerfile.getPath() != null ? SetupConfig.getAbsolutePath(dockerfile.getPath()) : null;\n         String dockerfilePath = dockerfile.getDockerfilePath();\n-        String dockerBuildCommand = imageCommandProvider.dockerBuildCommand(appName, serviceName, tag, dockerfilePath,\n-                buildPath, dockerfile.getTarget(), dockerfile.getArgs());\n+        String dockerBuildCommand = imageCommandProvider.dockerBuildCommand(imageName, tag, dockerfilePath, buildPath,\n+                dockerfile.getTarget(), dockerfile.getArgs());\n \n         logger.debug(\"Docker build command {}\", dockerBuildCommand);\n \n-        String logFilePath = imageBuilderConfig.getDockerBuildlog(appName, serviceName);\n-        File logFile = new File(logFilePath);\n-        context.setBuildLogs(logFilePath);\n-\n-        // TODO keep continuation activity for user\n-        boolean status = CommandExecutor.executeInDir(dockerBuildCommand, logFile, buildPath);\n+        boolean status = logfile != null\n+                ? CommandExecutor.executeInDir(dockerBuildCommand, new File(logfile), buildPath)\n+                : CommandExecutor.executeInDir(dockerBuildCommand, buildPath);\n         if (!status) {\n             WorkflowLogger.endActivity(Status.FAILED);\n             logger.error(\"Failed to build docker image\");\n         } else {\n             WorkflowLogger.endActivity(Status.DONE);\n         }\n \n-        if (verbose) {\n-            imageLogUtil.readBuildLogs(appName, serviceName);\n+        if (isVerbose) {\n+            imageLogUtil.readLogs(logfile, ImageBuilderActivity.BUILD_LOGS);\n         }\n \n         if (!status) {\n             throw new HyscaleException(ImageBuilderErrorCodes.FAILED_TO_BUILD_IMAGE);\n         }\n \n         DockerImage dockerImage = new DockerImage();\n-        dockerImage.setName(imageMetadataProvider.getBuildImageName(appName, serviceName));\n+        dockerImage.setName(imageName);\n         dockerImage.setTag(tag);\n \n         return dockerImage;\n     }\n \n-    /**\n-     * Check docker exists, If stack image as service image pull, tag\n-     * Push image if required else return\n-     *\n-     * @throws HyscaleException\n-     */\n     @Override\n-    public void push(Image image, BuildContext buildContext) throws HyscaleException {\n+    public String push(Image image, ImageRegistry imageRegistry) throws HyscaleException {\n+        return push(image, imageRegistry, null, false);\n+    }\n+\n+    @Override\n+    public String push(Image image, ImageRegistry imageRegistry, String logfile, boolean isVerbose)\n+            throws HyscaleException {\n+        String shaSum = null;\n         WorkflowLogger.startActivity(ImageBuilderActivity.IMAGE_PUSH);\n-        String appName = buildContext.getAppName();\n-        String serviceName = buildContext.getServiceName();\n-        boolean verbose = buildContext.isVerbose();\n         String imageFullPath = ImageUtil.getImage(image);\n         String pushImageCommand = imageCommandProvider.dockerPush(imageFullPath);\n-        String logFilePath = imageBuilderConfig.getDockerPushLogDir(appName, serviceName);\n-        File logFile = new File(logFilePath);\n-        buildContext.setPushLogs(logFilePath);\n-        // TODO keep continuation activity for user , launch a new thread & waitFor\n-        boolean status = CommandExecutor.execute(pushImageCommand, logFile);\n+        boolean status = logfile == null ? CommandExecutor.execute(pushImageCommand)\n+                : CommandExecutor.execute(pushImageCommand, new File(logfile));\n         if (!status) {\n             WorkflowLogger.endActivity(Status.FAILED);\n             logger.error(\"Failed to push docker image\");\n         } else {\n             String inspectCommand = imageCommandProvider.dockerInspect(imageFullPath);\n             CommandResult result = CommandExecutor.executeAndGetResults(inspectCommand);\n-            buildContext.setImageShaSum(getImageDigest(result));\n+            shaSum = getImageDigest(result);\n             WorkflowLogger.endActivity(Status.DONE);\n         }\n \n-        if (verbose) {\n-            imageLogUtil.readPushLogs(appName, serviceName);\n+        if (isVerbose) {\n+            imageLogUtil.readLogs(logfile, ImageBuilderActivity.IMAGE_PUSH_LOG);\n         }\n \n         if (!status) {\n             throw new HyscaleException(ImageBuilderErrorCodes.FAILED_TO_PUSH_IMAGE);\n         }\n+        return shaSum;\n     }\n \n     @Override\n-    public void pull(String image, BuildContext context) throws HyscaleException {\n+    public void pull(String image, ImageRegistry imageRegistry) throws HyscaleException {\n         WorkflowLogger.startActivity(ImageBuilderActivity.IMAGE_PULL);\n \n         if (StringUtils.isBlank(image)) {\n@@ -283,4 +275,19 @@ private String getImageDigest(CommandResult result) {\n         // Need to preserve the order of output, hence a LinkedHashset\n         return new LinkedList<>(Arrays.asList(imageIds));\n     }\n+    \n+    @Override\n+    public void login(ImageRegistry imageRegistry) throws HyscaleException {\n+        dockerImageUtil.dockerLogin(imageRegistry);\n+    }\n+\n+    @Override\n+    public boolean loginRequired() {\n+        return true;\n+    }\n+    \n+    @Override\n+    public boolean cleanUp(){\n+        return true;\n+    }\n }"
  },
  {
    "sha": "d2c23ab4bb2a60a2e5f7382ccf6d7e1aed325a09",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/impl/DockerRESTClient.java",
    "status": "modified",
    "additions": 67,
    "deletions": 44,
    "changes": 111,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/impl/DockerRESTClient.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/impl/DockerRESTClient.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/docker/impl/DockerRESTClient.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -17,7 +17,6 @@\n \n import java.io.File;\n import java.util.Arrays;\n-import java.util.Base64;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.LinkedList;\n@@ -41,6 +40,7 @@\n import com.github.dockerjava.api.command.*;\n import com.github.dockerjava.api.exception.DockerException;\n import com.github.dockerjava.api.model.AuthConfig;\n+import com.github.dockerjava.api.model.AuthConfigurations;\n import com.github.dockerjava.api.model.BuildResponseItem;\n import com.github.dockerjava.api.model.PullResponseItem;\n import com.github.dockerjava.api.model.PushResponseItem;\n@@ -51,12 +51,12 @@\n import com.github.dockerjava.core.command.PullImageResultCallback;\n import com.github.dockerjava.core.command.PushImageResultCallback;\n \n-import io.hyscale.builder.core.models.BuildContext;\n import io.hyscale.builder.core.models.DockerImage;\n import io.hyscale.builder.core.models.ImageBuilderActivity;\n import io.hyscale.builder.services.config.ImageBuilderConfig;\n import io.hyscale.builder.services.docker.HyscaleDockerClient;\n import io.hyscale.builder.services.exception.ImageBuilderErrorCodes;\n+import io.hyscale.builder.services.predicates.ImageBuilderPredicates;\n import io.hyscale.builder.services.spring.DockerClientCondition;\n import io.hyscale.commons.constants.ToolConstants;\n import io.hyscale.commons.exception.HyscaleException;\n@@ -65,6 +65,7 @@\n import io.hyscale.commons.logger.WorkflowLogger;\n import io.hyscale.commons.models.ImageRegistry;\n import io.hyscale.commons.models.Status;\n+import io.hyscale.commons.utils.EncodeDecodeUtil;\n import io.hyscale.commons.utils.ImageMetadataProvider;\n import io.hyscale.servicespec.commons.model.service.Dockerfile;\n import io.hyscale.servicespec.commons.model.service.Image;\n@@ -157,7 +158,8 @@ public void deleteImage(String imageId, boolean force) {\n     }\n \n     @Override\n-    public DockerImage build(Dockerfile dockerfile, String tag, BuildContext buildContext) throws HyscaleException {\n+    public DockerImage build(Dockerfile dockerfile, String imageName, String tag,\n+            Map<String, ImageRegistry> registryMap, String logfile, boolean isVerbose) throws HyscaleException {\n         ActivityContext buildActivity = new ActivityContext(ImageBuilderActivity.IMAGE_BUILD);\n         WorkflowLogger.startActivity(buildActivity);\n         // validate dockerfile\n@@ -168,23 +170,19 @@ public DockerImage build(Dockerfile dockerfile, String tag, BuildContext buildCo\n             logger.error(\"Failed to validate dockerfile before build\", e);\n             throw e;\n         }\n-        String appName = buildContext.getAppName();\n-        String serviceName = buildContext.getServiceName();\n+        String buildImageName = StringUtils.isNotBlank(tag) ? imageName + ToolConstants.COLON + tag : imageName;\n+        BuildImageCmd buildImageCmd = getBuildCommand(dockerfile, buildImageName, registryMap);\n \n-        String buildImageName = imageMetadataProvider.getBuildImageNameWithTag(appName, serviceName, tag);\n-        BuildImageCmd buildImageCmd = getBuildCommand(dockerfile, buildImageName);\n-\n-        String logFilePath = imageBuilderConfig.getDockerBuildlog(appName, serviceName);\n-        buildContext.setBuildLogs(logFilePath);\n-        if (buildContext.isVerbose()) {\n+        if (isVerbose) {\n             WorkflowLogger.header(ImageBuilderActivity.BUILD_LOGS);\n         }\n         BuildImageResultCallback callback = new BuildImageResultCallback() {\n             @Override\n             public void onNext(BuildResponseItem item) {\n                 ErrorDetail errorDetail = item.getErrorDetail();\n-                String message = item.isErrorIndicated() && errorDetail != null ? errorDetail.getMessage() : item.getStream();\n-                handleOutput(message, logFilePath, buildActivity, buildContext.isVerbose());\n+                String message = item.isErrorIndicated() && errorDetail != null ? errorDetail.getMessage()\n+                        : item.getStream();\n+                handleOutput(message, logfile, buildActivity, isVerbose);\n                 if (item.isErrorIndicated()) {\n                     logger.error(\"Error while building image: {}\", errorDetail);\n                     onError(new HyscaleException(ImageBuilderErrorCodes.FAILED_TO_BUILD_IMAGE));\n@@ -195,17 +193,17 @@ public void onNext(BuildResponseItem item) {\n         try {\n             buildImageCmd.exec(callback).awaitCompletion();\n         } catch (RuntimeException e) {\n-            handleOutput(buildContext.isVerbose(), buildActivity, Status.FAILED);\n+            handleOutput(isVerbose, buildActivity, Status.FAILED);\n             throw new HyscaleException(e, ImageBuilderErrorCodes.FAILED_TO_BUILD_IMAGE);\n         } catch (InterruptedException e) {\n             Thread.currentThread().interrupt();\n-            handleOutput(buildContext.isVerbose(), buildActivity, Status.FAILED);\n+            handleOutput(isVerbose, buildActivity, Status.FAILED);\n             throw new HyscaleException(e, ImageBuilderErrorCodes.FAILED_TO_BUILD_IMAGE);\n         }\n \n-        handleOutput(buildContext.isVerbose(), buildActivity, Status.DONE);\n+        handleOutput(isVerbose, buildActivity, Status.DONE);\n         DockerImage dockerImage = new DockerImage();\n-        dockerImage.setName(imageMetadataProvider.getBuildImageName(appName, serviceName));\n+        dockerImage.setName(imageName);\n         dockerImage.setTag(tag);\n         return dockerImage;\n     }\n@@ -214,13 +212,12 @@ private void validate(Dockerfile dockerfileModel) throws HyscaleException {\n         if (dockerfileModel == null) {\n             throw new HyscaleException(ImageBuilderErrorCodes.DOCKERFILE_REQUIRED);\n         }\n-        File dockerfile = new File(dockerfileModel.getDockerfilePath());\n-        if (!dockerfile.exists() || dockerfile.isDirectory()) {\n-            throw new HyscaleException(ImageBuilderErrorCodes.DOCKERFILE_NOT_FOUND, dockerfile.getAbsolutePath());\n+        if (!ImageBuilderPredicates.getDockerfileExistsPredicate().test(dockerfileModel.getDockerfilePath())) {\n+            throw new HyscaleException(ImageBuilderErrorCodes.DOCKERFILE_NOT_FOUND, dockerfileModel.getDockerfilePath());\n         }\n     }\n \n-    private BuildImageCmd getBuildCommand(Dockerfile dockerfile, String tag) {\n+    private BuildImageCmd getBuildCommand(Dockerfile dockerfile, String tag, Map<String, ImageRegistry> registryMap) {\n         Set<String> tags = new HashSet<>();\n         tags.add(tag);\n         Map<String, String> labels = imageMetadataProvider.getImageOwnerLabel();\n@@ -230,6 +227,11 @@ private BuildImageCmd getBuildCommand(Dockerfile dockerfile, String tag) {\n         if (dockerfile.getPath() != null) {\n             buildImageCmd.withBaseDirectory(new File(dockerfile.getPath()));\n         }\n+        if (registryMap != null) {\n+            AuthConfigurations authConfigs = getAuthConfigs(registryMap);\n+            buildImageCmd.withBuildAuthConfigs(authConfigs);\n+            \n+        }\n         buildImageCmd.withDockerfile(new File(dockerfile.getDockerfilePath()))\n                 .withPull(true)\n                 .withNoCache(true)\n@@ -243,17 +245,17 @@ private BuildImageCmd getBuildCommand(Dockerfile dockerfile, String tag) {\n     }\n \n     @Override\n-    public void pull(String image, BuildContext context) throws HyscaleException {\n+    public void pull(String image, ImageRegistry imageRegistry) throws HyscaleException {\n         ActivityContext pullActivity = new ActivityContext(ImageBuilderActivity.IMAGE_PULL);\n         WorkflowLogger.startActivity(pullActivity);\n         if (StringUtils.isBlank(image)) {\n             handleOutput(false, pullActivity, Status.SKIPPING);\n             return;\n         }\n         DockerClient dockerClient = getDockerClient();\n-        AuthConfig authConfig = getAuthConfig(context.getPullRegistry());\n         PullImageCmd pullImageCmd = dockerClient.pullImageCmd(image);\n-        if (authConfig != null) {\n+        if (imageRegistry != null) {\n+            AuthConfig authConfig = getAuthConfig(imageRegistry);\n             pullImageCmd.withAuthConfig(authConfig);\n         }\n         try {\n@@ -268,12 +270,12 @@ public void onNext(PullResponseItem item) {\n         } catch (RuntimeException e) {\n             logger.error(\"Error while pulling the image {}\", image, e);\n             handleOutput(false, pullActivity, Status.FAILED);\n-            throw new HyscaleException(e, ImageBuilderErrorCodes.FAILED_TO_PULL_IMAGE);\n+            throw new HyscaleException(e, ImageBuilderErrorCodes.FAILED_TO_PULL_IMAGE, image);\n         } catch (InterruptedException e) {\n             logger.error(\"Error while pulling the image {}\", image, e);\n             Thread.currentThread().interrupt();\n             handleOutput(false, pullActivity, Status.FAILED);\n-            throw new HyscaleException(e, ImageBuilderErrorCodes.FAILED_TO_PULL_IMAGE);\n+            throw new HyscaleException(e, ImageBuilderErrorCodes.FAILED_TO_PULL_IMAGE, image);\n         }\n         handleOutput(false, pullActivity, Status.DONE);\n     }\n@@ -298,39 +300,44 @@ public void tag(String source, Image dest) throws HyscaleException {\n         WorkflowLogger.endActivity(Status.DONE);\n     }\n \n-\n     @Override\n-    public void push(Image image, BuildContext buildContext) throws HyscaleException {\n+    public String push(Image image, ImageRegistry imageRegistry) throws HyscaleException {\n+        return push(image, imageRegistry, null, false);\n+    }\n \n+    @Override\n+    public String push(Image image, ImageRegistry imageRegistry, String logfile, boolean isVerbose)\n+            throws HyscaleException {\n+        StringBuilder sb = new StringBuilder();\n         ActivityContext pushActivity = new ActivityContext(ImageBuilderActivity.IMAGE_PUSH);\n         WorkflowLogger.startActivity(pushActivity);\n-        \n-        AuthConfig authConfig = getAuthConfig(buildContext.getPushRegistry());\n+\n+        AuthConfig authConfig = getAuthConfig(imageRegistry);\n \n         DockerClient dockerClient = getDockerClient();\n \n         // Push image\n-        String logFilePath = imageBuilderConfig.getDockerPushLogDir(buildContext.getAppName(), buildContext.getServiceName());\n-        buildContext.setPushLogs(logFilePath);\n         String tag = StringUtils.isNotBlank(image.getTag()) ? image.getTag() : ImageUtil.DEFAULT_TAG;\n-        PushImageCmd pushImageCmd = dockerClient\n-                .pushImageCmd(ImageUtil.getImageWithoutTag(image)).withTag(tag).withAuthConfig(authConfig);\n-        \n-        if (buildContext.isVerbose()) {\n+        PushImageCmd pushImageCmd = dockerClient.pushImageCmd(ImageUtil.getImageWithoutTag(image)).withTag(tag)\n+                .withAuthConfig(authConfig);\n+\n+        if (isVerbose) {\n             WorkflowLogger.header(ImageBuilderActivity.IMAGE_PUSH_LOG);\n         }\n         PushImageResultCallback callback = new PushImageResultCallback() {\n             @Override\n             public void onNext(PushResponseItem item) {\n                 ErrorDetail errorDetail = item.getErrorDetail();\n-                String message = item.isErrorIndicated() && errorDetail != null ? errorDetail.getMessage() : item.getStatus();\n-                handleOutput(message, logFilePath, pushActivity, buildContext.isVerbose());\n+                String message = item.isErrorIndicated() && errorDetail != null ? errorDetail.getMessage()\n+                        : item.getStatus();\n+                handleOutput(message, logfile, pushActivity, isVerbose);\n                 if (item.isErrorIndicated()) {\n                     logger.error(\"Error while pushing image: {}\", errorDetail);\n                     onError(new HyscaleException(ImageBuilderErrorCodes.FAILED_TO_PUSH_IMAGE));\n                 }\n                 if (StringUtils.isNotBlank(message) && message.contains(SHA256)) {\n-                    buildContext.setImageShaSum(getImageDigest(message));\n+                    sb.setLength(0);\n+                    sb.append(getImageDigest(message));\n                 }\n                 super.onNext(item);\n             }\n@@ -339,14 +346,16 @@ public void onNext(PushResponseItem item) {\n         try {\n             pushImageCmd.exec(callback).awaitCompletion();\n         } catch (RuntimeException e) {\n-            handleOutput(buildContext.isVerbose(), pushActivity, Status.FAILED);\n+            handleOutput(isVerbose, pushActivity, Status.FAILED);\n             throw new HyscaleException(e, ImageBuilderErrorCodes.FAILED_TO_PUSH_IMAGE);\n-        } catch (InterruptedException  e) {\n+        } catch (InterruptedException e) {\n             Thread.currentThread().interrupt();\n-            handleOutput(buildContext.isVerbose(), pushActivity, Status.FAILED);\n+            handleOutput(isVerbose, pushActivity, Status.FAILED);\n             throw new HyscaleException(e, ImageBuilderErrorCodes.FAILED_TO_PUSH_IMAGE);\n         }\n-        handleOutput(buildContext.isVerbose(), pushActivity, Status.DONE);\n+        handleOutput(isVerbose, pushActivity, Status.DONE);\n+        String shaSum = sb.toString();\n+        return StringUtils.isNotBlank(shaSum) ? shaSum : null;\n     }\n     \n     private void handleOutput(String output, String filePath, ActivityContext context, boolean isVerbose) {\n@@ -374,13 +383,22 @@ private void handleOutput(boolean isVerbose, ActivityContext activityContext, St\n         }\n     }\n \n+    private AuthConfigurations getAuthConfigs(Map<String, ImageRegistry> registryMap) {\n+        if (registryMap == null) {\n+            return null;\n+        }\n+        AuthConfigurations authConfigs = new AuthConfigurations();\n+        registryMap.entrySet().forEach(registryEntry -> authConfigs.addConfig(getAuthConfig(registryEntry.getValue())));\n+        return authConfigs;\n+    }\n+\n     private AuthConfig getAuthConfig(ImageRegistry imageRegistry) {\n         if (imageRegistry == null) {\n             return null;\n         }\n         AuthConfig authConfig = new AuthConfig();\n         authConfig.withRegistryAddress(imageRegistry.getUrl());\n-        String decodedAuth = new String(Base64.getDecoder().decode(imageRegistry.getToken()));\n+        String decodedAuth = EncodeDecodeUtil.decode(imageRegistry.getToken());\n         int delimiter = decodedAuth.indexOf(':');\n         if (delimiter > 0) {\n             authConfig.withUsername(decodedAuth.substring(0,delimiter));\n@@ -416,4 +434,9 @@ private String getImageDigest(String status) {\n         return imageList.stream().map(com.github.dockerjava.api.model.Image::getId).collect(Collectors.toCollection(LinkedList::new));\n     }\n \n+    @Override\n+    public boolean loginRequired() {\n+        return false;\n+    }\n+\n }"
  },
  {
    "sha": "41af7d242b0b9ec12ea200bc715255c65bc9849a",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/exception/ImageBuilderErrorCodes.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/exception/ImageBuilderErrorCodes.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/exception/ImageBuilderErrorCodes.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/exception/ImageBuilderErrorCodes.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -23,7 +23,7 @@\n     FAILED_TO_TAG_IMAGE(\"Failed to tag image \",HyscaleErrorGroup.IMAGE_BUILD),\n     FAILED_TO_BUILD_IMAGE(\"Failed to build image\",HyscaleErrorGroup.IMAGE_BUILD),\n     FAILED_TO_PUSH_IMAGE(\"Failed to push image\",HyscaleErrorGroup.IMAGE_PUSH),\n-    FAILED_TO_LOGIN(\"Failed to authenticate with the docker registry\"),\n+    FAILED_TO_LOGIN(\"Failed to authenticate with the docker registry {}\"),\n     FAILED_TO_PULL_IMAGE(\"Failed to pull image {}\",HyscaleErrorGroup.IMAGE_BUILD),\n     FIELDS_MISSING(\"Found {} missing\",HyscaleErrorGroup.IMAGE_BUILD),\n     DOCKER_DAEMON_NOT_RUNNING(\"Docker daemon is not running\",HyscaleErrorGroup.IMAGE_BUILD),"
  },
  {
    "sha": "906c154498db364036cba6c5bd8ff9e24dd0635b",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/impl/LocalImageBuildPushServiceImpl.java",
    "status": "modified",
    "additions": 89,
    "deletions": 68,
    "changes": 157,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/impl/LocalImageBuildPushServiceImpl.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/impl/LocalImageBuildPushServiceImpl.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/impl/LocalImageBuildPushServiceImpl.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -16,7 +16,9 @@\n package io.hyscale.builder.services.impl;\n \n import java.io.File;\n+import java.util.Map;\n \n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -32,21 +34,26 @@\n import io.hyscale.builder.events.model.ImageTagEvent;\n import io.hyscale.builder.services.cleanup.ImageCleanUpProcessor;\n import io.hyscale.builder.services.config.ImageBuilderConfig;\n-import io.hyscale.builder.services.constants.DockerImageConstants;\n import io.hyscale.builder.services.docker.HyscaleDockerClient;\n import io.hyscale.builder.services.exception.ImageBuilderErrorCodes;\n+import io.hyscale.builder.services.predicates.ImageBuilderPredicates;\n+import io.hyscale.builder.services.provider.StackImageProvider;\n import io.hyscale.builder.services.service.ImageBuildPushService;\n+import io.hyscale.builder.services.util.DockerfileUtil;\n import io.hyscale.commons.config.SetupConfig;\n import io.hyscale.commons.constants.ToolConstants;\n import io.hyscale.commons.exception.HyscaleException;\n import io.hyscale.commons.framework.events.model.ActivityState;\n import io.hyscale.commons.framework.events.publisher.EventPublisher;\n import io.hyscale.commons.logger.WorkflowLogger;\n+import io.hyscale.commons.models.ImageRegistry;\n import io.hyscale.commons.models.Status;\n+import io.hyscale.commons.utils.ImageMetadataProvider;\n import io.hyscale.servicespec.commons.fields.HyscaleSpecFields;\n import io.hyscale.servicespec.commons.model.service.Dockerfile;\n import io.hyscale.servicespec.commons.model.service.Image;\n import io.hyscale.servicespec.commons.model.service.ServiceSpec;\n+import io.hyscale.servicespec.commons.predicates.ServiceSpecPredicates;\n import io.hyscale.servicespec.commons.util.ImageUtil;\n \n @Component\n@@ -59,17 +66,26 @@\n \n     @Autowired\n     private ImageBuilderConfig imageBuilderConfig;\n+    \n+    @Autowired\n+    private ImageMetadataProvider imageMetadataProvider;\n \n     @Autowired\n     private ImageCleanUpProcessor imageCleanUp;\n \n     @Autowired\n     private EventPublisher publisher;\n+    \n+    @Autowired\n+    private DockerfileUtil dockerfileUtil;\n+    \n+    @Autowired\n+    private StackImageProvider stackImageProvider;\n \n     @Override\n     public void buildAndPush(ServiceSpec serviceSpec, BuildContext context) throws HyscaleException {\n         validate(serviceSpec, context);\n-        if (!isImageBuildPushRequired(serviceSpec, context)) {\n+        if (!ImageBuilderPredicates.getBuildPushRequiredPredicate().test(serviceSpec, context)) {\n             WorkflowLogger.startActivity(ImageBuilderActivity.IMAGE_BUILD_PUSH);\n             WorkflowLogger.endActivity(Status.SKIPPING);\n             return;\n@@ -83,32 +99,63 @@ public void buildAndPush(ServiceSpec serviceSpec, BuildContext context) throws H\n         if (!hyscaleDockerClient.isDockerRunning()) {\n             throw new HyscaleException(ImageBuilderErrorCodes.DOCKER_DAEMON_NOT_RUNNING);\n         }\n-\n-        buildImage(serviceSpec, context);\n+        \n+        Map<String, ImageRegistry> registryMap = context.getRegistriesMap();\n+        if (hyscaleDockerClient.loginRequired()) {\n+            for (ImageRegistry imageRegistry : registryMap.values()) {\n+                hyscaleDockerClient.login(imageRegistry);\n+            }\n+        }\n+        \n+        updateContext(serviceSpec, context);\n+        \n+        buildImage(serviceSpec, registryMap, context);\n \n         String sourceImage = getSourceImageName(serviceSpec, context);\n \n-        pullImage(sourceImage, context);\n+        if (context.isStackAsServiceImage().booleanValue()) {\n+            pullImage(sourceImage, serviceSpec, registryMap);\n+        }\n \n         Image image = serviceSpec.get(HyscaleSpecFields.image, Image.class);\n \n         tagImage(sourceImage, image);\n \n-        pushImage(image, context);\n+        pushImage(image, serviceSpec, context);\n \n         // Clean up images based on clean up policy\n         imageCleanUp.cleanUp(serviceSpec, context);\n     }\n \n-    private void buildImage(ServiceSpec serviceSpec, BuildContext context) throws HyscaleException {\n+    private void updateContext(ServiceSpec serviceSpec, BuildContext context) throws HyscaleException {\n+        if (context.isStackAsServiceImage() == null) {\n+            // Check if stack as service image condition\n+            context.setStackAsServiceImage(ServiceSpecPredicates.stackAsServiceImage().test(serviceSpec));\n+        }\n+        if (StringUtils.isEmpty(context.getServiceName())) {\n+            context.setServiceName(serviceSpec.get(HyscaleSpecFields.name, String.class));\n+        }\n+    }\n+\n+    private ImageRegistry getStackImagePullRegistry(ServiceSpec serviceSpec, Map<String, ImageRegistry> registryMap) {\n+        String stackImage = stackImageProvider.getStackImageFromBuildSpec(serviceSpec);\n+        if (stackImage != null) {\n+            return registryMap.get(stackImage.split(\"/\")[0]);\n+        }\n+        return null;\n+    }\n+\n+    private void buildImage(ServiceSpec serviceSpec, Map<String, ImageRegistry> registryMap, BuildContext context)\n+            throws HyscaleException {\n         Dockerfile userDockerfile = serviceSpec.get(\n                 HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.dockerfile), Dockerfile.class);\n         //Skip Image Build if neither dockerfile from buildSpec nor user dockerfile is available\n-        if (skipBuild(userDockerfile, context)) {\n+        if (ImageBuilderPredicates.getSkipBuildPredicate().test(userDockerfile, context)) {\n             WorkflowLogger.startActivity(ImageBuilderActivity.IMAGE_BUILD);\n             WorkflowLogger.endActivity(Status.SKIPPING);\n             return;\n         }\n+        String imageName = imageMetadataProvider.getBuildImageName(context.getAppName(), context.getServiceName());\n         String tag = serviceSpec.get(HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.tag),\n                 String.class);\n         //Prepare Dockerfile for Image build\n@@ -117,25 +164,36 @@ private void buildImage(ServiceSpec serviceSpec, BuildContext context) throws Hy\n         publisher.publishEvent(event);\n         String logFilePath = imageBuilderConfig.getDockerBuildlog(context.getAppName(), context.getServiceName());\n         try {\n-            DockerImage dockerImage = hyscaleDockerClient.build(dockerfile, tag, context);\n+            DockerImage dockerImage = hyscaleDockerClient.build(dockerfile, imageName, tag, registryMap, logFilePath,\n+                    context.isVerbose());\n             context.setDockerImage(dockerImage);\n             event = new ImageBuildEvent(ActivityState.DONE, new File(dockerfile.getDockerfilePath()), logFilePath);\n         } catch (HyscaleException ex) {\n             event = new ImageBuildEvent(ActivityState.FAILED, new File(dockerfile.getDockerfilePath()), logFilePath);\n             throw ex;\n         } finally {\n             publisher.publishEvent(event);\n+            context.setBuildLogs(logFilePath);\n         }\n     }\n \n-    private void pullImage(String sourceImage, BuildContext context) throws HyscaleException {\n-        if (!context.isStackAsServiceImage()) {\n-            return;\n-        }\n+    /**\n+     *  Only need to pull in case of stack as service image for tagging\n+     *  In other cases docker build will internally take care of pulling the image\n+     *  \n+     * @param sourceImage\n+     * @param registryMap \n+     * @param context\n+     * @throws HyscaleException\n+     */\n+    private void pullImage(String sourceImage, ServiceSpec serviceSpec, Map<String, ImageRegistry> registryMap)\n+            throws HyscaleException {\n+        ImageRegistry pullRegistry = getStackImagePullRegistry(serviceSpec, registryMap);\n         ImagePullEvent event = new ImagePullEvent(ActivityState.STARTED, sourceImage);\n         publisher.publishEvent(event);\n+\n         try {\n-            hyscaleDockerClient.pull(sourceImage, context);\n+            hyscaleDockerClient.pull(sourceImage, pullRegistry);\n             event = new ImagePullEvent(ActivityState.DONE, sourceImage);\n         } catch (HyscaleException ex) {\n             event = new ImagePullEvent(ActivityState.FAILED, sourceImage);\n@@ -163,24 +221,29 @@ private void tagImage(String sourceImage, Image image) throws HyscaleException {\n         }\n     }\n \n-    private void pushImage(Image image, BuildContext context) throws HyscaleException {\n-        String logFilePath = imageBuilderConfig.getDockerPushLogDir(context.getAppName(), context.getServiceName());\n-        String pushImage = ImageUtil.getImage(image);\n-        ImagePushEvent event = new ImagePushEvent(ActivityState.STARTED, pushImage, logFilePath);\n-        publisher.publishEvent(event);\n-        if (context.getPushRegistry() == null) {\n+    private void pushImage(Image image, ServiceSpec serviceSpec, BuildContext context) throws HyscaleException {\n+        String registryUrl = serviceSpec\n+                .get(HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.registry), String.class);\n+        ImageRegistry pushRegistry = context.getRegistriesMap().get(registryUrl);\n+        if (pushRegistry == null) {\n             WorkflowLogger.startActivity(ImageBuilderActivity.IMAGE_PUSH);\n             WorkflowLogger.endActivity(Status.SKIPPING);\n             return;\n         }\n+        String logFilePath = imageBuilderConfig.getDockerPushLogDir(context.getAppName(), context.getServiceName());\n+        String pushImage = ImageUtil.getImage(image);\n+        ImagePushEvent event = new ImagePushEvent(ActivityState.STARTED, pushImage, logFilePath);\n+        publisher.publishEvent(event);\n         try {\n-            hyscaleDockerClient.push(image, context);\n+            String shaSum = hyscaleDockerClient.push(image, pushRegistry, logFilePath, context.isVerbose());\n+            context.setImageShaSum(shaSum);\n             event = new ImagePushEvent(ActivityState.DONE, pushImage, logFilePath);\n         } catch (HyscaleException e) {\n             event = new ImagePushEvent(ActivityState.FAILED, pushImage, logFilePath);\n             throw e;\n         } finally {\n             publisher.publishEvent(event);\n+            context.setPushLogs(logFilePath);\n         }\n     }\n \n@@ -207,50 +270,14 @@ private Dockerfile getDockerfile(Dockerfile userDockerfile, BuildContext context\n     private String getDockerfilePath(Dockerfile userDockerfile, BuildContext context) {\n         String dockerfilePath;\n         if (userDockerfile != null) {\n-            StringBuilder sb = new StringBuilder();\n-            String path = userDockerfile.getPath();\n-            if (StringUtils.isNotBlank(path)) {\n-                sb.append(path);\n-                if (!path.endsWith(ToolConstants.FILE_SEPARATOR)) {\n-                    sb.append(ToolConstants.FILE_SEPARATOR);\n-                }\n-            }\n-            String dockerfileDir = userDockerfile.getDockerfilePath();\n-            if (StringUtils.isNotBlank(dockerfileDir)) {\n-                sb.append(dockerfileDir);\n-            }\n-            dockerfilePath = sb.toString();\n-            dockerfilePath = StringUtils.isNotBlank(dockerfilePath) ? SetupConfig.getAbsolutePath(dockerfilePath)\n-                    : SetupConfig.getAbsolutePath(\".\");\n-            dockerfilePath = dockerfilePath + ToolConstants.LINUX_FILE_SEPARATOR + DockerImageConstants.DOCKERFILE_NAME;\n+            dockerfilePath = dockerfileUtil.getDockerfileAbsolutePath(userDockerfile);\n         } else {\n             dockerfilePath = context.getDockerfileEntity().getDockerfile().getAbsolutePath();\n         }\n \n         return dockerfilePath;\n     }\n \n-    /**\n-     * Not required if dockerSpec and dockerfile are not available.\n-     * In case its just a stack image, need to push only\n-     *\n-     * @param serviceSpec\n-     * @param context\n-     * @return boolean\n-     * @throws HyscaleException\n-     */\n-    private boolean isImageBuildPushRequired(ServiceSpec serviceSpec, BuildContext context) throws HyscaleException {\n-\n-        if (context.isStackAsServiceImage()) {\n-            return true;\n-        }\n-\n-        // No dockerfile\n-        return (serviceSpec.get(HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.dockerfile),\n-                Dockerfile.class) != null)\n-                || (context.getDockerfileEntity() != null && context.getDockerfileEntity().getDockerfile() != null);\n-    }\n-\n     /**\n      * Source image is either the stack image being used as service image or\n      * Local image build through dockerfile\n@@ -262,7 +289,7 @@ private boolean isImageBuildPushRequired(ServiceSpec serviceSpec, BuildContext c\n      */\n     public String getSourceImageName(ServiceSpec serviceSpec, BuildContext buildContext) throws HyscaleException {\n \n-        if (buildContext.isStackAsServiceImage()) {\n+        if (BooleanUtils.toBoolean(buildContext.isStackAsServiceImage())) {\n             return serviceSpec.get(HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.buildSpec,\n                     HyscaleSpecFields.stackImage), String.class);\n         }\n@@ -273,12 +300,6 @@ public String getSourceImageName(ServiceSpec serviceSpec, BuildContext buildCont\n                 : dockerImage.getName();\n     }\n \n-    public boolean skipBuild(Dockerfile userDockerfile, BuildContext context) {\n-        return ((context.getDockerfileEntity() == null || context.getDockerfileEntity().getDockerfile() == null)\n-                && (userDockerfile == null));\n-    }\n-\n-\n     private boolean validate(ServiceSpec serviceSpec, BuildContext context) throws HyscaleException {\n         String imageName = serviceSpec.get(HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.name),\n                 String.class);\n@@ -287,18 +308,18 @@ private boolean validate(ServiceSpec serviceSpec, BuildContext context) throws H\n         }\n         String registryUrl = serviceSpec\n                 .get(HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.registry), String.class);\n-        if (context.getPushRegistry() == null && registryUrl != null) {\n+        if (registryUrl != null && context.getRegistriesMap().get(registryUrl) == null) {\n             throw new HyscaleException(ImageBuilderErrorCodes.MISSING_DOCKER_REGISTRY_CREDENTIALS, registryUrl,\n                     registryUrl);\n         }\n         return true;\n     }\n \n     private void validateDockerfilePath(String dockerfilePath) throws HyscaleException {\n-        File dockerfile = new File(dockerfilePath);\n-        if (!dockerfile.exists() || dockerfile.isDirectory()) {\n+        if (!ImageBuilderPredicates.getDockerfileExistsPredicate().test(dockerfilePath)) {\n             WorkflowLogger.startActivity(ImageBuilderActivity.IMAGE_BUILD);\n             WorkflowLogger.endActivity(Status.FAILED);\n+            File dockerfile = new File(dockerfilePath);\n             throw new HyscaleException(ImageBuilderErrorCodes.DOCKERFILE_NOT_FOUND, dockerfile.getAbsolutePath());\n         }\n     }"
  },
  {
    "sha": "808f8951424d411c470126ff3ba98c36cf870670",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/predicates/ImageBuilderPredicates.java",
    "status": "added",
    "additions": 85,
    "deletions": 0,
    "changes": 85,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/predicates/ImageBuilderPredicates.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/predicates/ImageBuilderPredicates.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/predicates/ImageBuilderPredicates.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.builder.services.predicates;\n+\n+import java.io.File;\n+import java.util.function.BiPredicate;\n+import java.util.function.Predicate;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import io.hyscale.builder.core.models.BuildContext;\n+import io.hyscale.commons.exception.HyscaleException;\n+import io.hyscale.servicespec.commons.fields.HyscaleSpecFields;\n+import io.hyscale.servicespec.commons.model.service.Dockerfile;\n+import io.hyscale.servicespec.commons.model.service.ServiceSpec;\n+\n+public class ImageBuilderPredicates {\n+\n+    private ImageBuilderPredicates() {\n+    }\n+\n+    /**\n+     * Build should be skipped if dockerfile is not available\n+     */\n+    public static BiPredicate<Dockerfile, BuildContext> getSkipBuildPredicate() {\n+        return (dockerfile, context) -> ((dockerfile == null)\n+                && (context == null || context.getDockerfileEntity() == null || context.getDockerfileEntity().getDockerfile() == null));\n+    }\n+\n+    /**\n+     * Build or push required when:\n+     * User provides docker file, or tool generates dockerfile\n+     * In case of stack as service image need to pull and push the image\n+     */\n+    public static BiPredicate<ServiceSpec, BuildContext> getBuildPushRequiredPredicate() {\n+        return (serviceSpec, context) -> {\n+            if (context != null) {\n+                if (BooleanUtils.toBoolean(context.isStackAsServiceImage())) {\n+                    return true;\n+                }\n+                if (context.getDockerfileEntity() != null && context.getDockerfileEntity().getDockerfile() != null) {\n+                    return true;\n+                }\n+            }\n+            if (serviceSpec == null) {\n+                return false;\n+            }\n+            Dockerfile dockerfile = null;\n+            try {\n+                dockerfile = serviceSpec.get(\n+                        HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.dockerfile),\n+                        Dockerfile.class);\n+            } catch (HyscaleException e) {\n+                return false;\n+            }\n+\n+            return dockerfile != null;\n+        };\n+    }\n+\n+    public static Predicate<String> getDockerfileExistsPredicate() {\n+        return dockerfilePath -> {\n+            if (StringUtils.isBlank(dockerfilePath)) {\n+                return false;\n+            }\n+            File dockerfile = new File(dockerfilePath);\n+            return dockerfile.exists() && dockerfile.isFile();\n+        };\n+    }\n+\n+}"
  },
  {
    "sha": "0077ae7a421f3097da1a163835779c11b80d9d9d",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/provider/StackImageProvider.java",
    "status": "added",
    "additions": 127,
    "deletions": 0,
    "changes": 127,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/provider/StackImageProvider.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/provider/StackImageProvider.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/provider/StackImageProvider.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.builder.services.provider;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.hyscale.builder.services.predicates.ImageBuilderPredicates;\n+import io.hyscale.builder.services.util.DockerfileUtil;\n+import io.hyscale.commons.exception.HyscaleException;\n+import io.hyscale.servicespec.commons.fields.HyscaleSpecFields;\n+import io.hyscale.servicespec.commons.model.service.BuildSpec;\n+import io.hyscale.servicespec.commons.model.service.Dockerfile;\n+import io.hyscale.servicespec.commons.model.service.ServiceSpec;\n+\n+@Component\n+public class StackImageProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(StackImageProvider.class);\n+\n+    private static final String FROM_TAG = \"FROM\";\n+\n+    @Autowired\n+    private DockerfileUtil dockerfileUtil;\n+\n+    public List<String> getStackImages(ServiceSpec serviceSpec) {\n+        List<String> stackImages = new ArrayList<>();\n+\n+        String stackImageFromBuildSpec = getStackImageFromBuildSpec(serviceSpec);\n+        if (stackImageFromBuildSpec != null) {\n+            stackImages.add(stackImageFromBuildSpec);\n+        } else {\n+            stackImages.addAll(getStackImagesFromDockerfile(serviceSpec));\n+        }\n+        return stackImages;\n+    }\n+\n+    public String getStackImageFromBuildSpec(ServiceSpec serviceSpec) {\n+        if (serviceSpec == null) {\n+            return null;\n+        }\n+        BuildSpec buildSpec = null;\n+        try {\n+            buildSpec = serviceSpec.get(HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.buildSpec),\n+                    BuildSpec.class);\n+        } catch (HyscaleException e) {\n+            logger.error(\"Error while getting build spec for stack image\");\n+        }\n+        return getStackImage(buildSpec);\n+    }\n+\n+    public List<String> getStackImagesFromDockerfile(ServiceSpec serviceSpec) {\n+        if (serviceSpec == null) {\n+            return new ArrayList<>();\n+        }\n+        Dockerfile dockerfile = null;\n+        try {\n+            dockerfile = serviceSpec.get(\n+                    HyscaleSpecFields.getPath(HyscaleSpecFields.image, HyscaleSpecFields.dockerfile), Dockerfile.class);\n+        } catch (HyscaleException e) {\n+            logger.error(\"Error while getting dockerfile for stack image\");\n+        }\n+        return getStackImages(dockerfile);\n+    }\n+\n+    public String getStackImage(BuildSpec buildSpec) {\n+        if (buildSpec == null) {\n+            return null;\n+        }\n+        return buildSpec.getStackImage();\n+    }\n+\n+    public List<String> getStackImages(Dockerfile dockerfile) {\n+        // Read dockerfile and get all images after FROM tag, include multistage dockerfile\n+        // Example FROM alpine:3.0\n+\n+        if (dockerfile == null) {\n+            return Collections.emptyList();\n+        }\n+        String dockerfilePath = dockerfileUtil.getDockerfileAbsolutePath(dockerfile);\n+        if (!ImageBuilderPredicates.getDockerfileExistsPredicate().test(dockerfilePath)) {\n+            return Collections.emptyList();\n+        }\n+        Set<String> stackImages = new HashSet<>();\n+        try {\n+            List<String> fileData = Files.readAllLines(Paths.get(dockerfilePath));\n+            stackImages.addAll(fileData.stream().filter(each -> StringUtils.isNotBlank(each) && each.contains(FROM_TAG))\n+                    .map(fromLine -> {\n+                        //  FROM alpine:3.0\n+                        String[] items = fromLine.split(\" \");\n+                        if (items.length >= 2) {\n+                            return items[1];\n+                        }\n+                        return null;\n+                    }).filter(StringUtils::isNotBlank).collect(Collectors.toSet()));\n+        } catch (IOException e) {\n+            logger.error(\"Error while getting stack images from dockerfile\");\n+        }\n+        return new ArrayList<>(stackImages);\n+    }\n+}"
  },
  {
    "sha": "24865f506604333bf9c4a1d6c22d9f992717d61e",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/DockerImageUtil.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/DockerImageUtil.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/DockerImageUtil.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/DockerImageUtil.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -26,6 +26,8 @@\n import io.hyscale.commons.commands.provider.ImageCommandProvider;\n import io.hyscale.commons.exception.HyscaleException;\n import io.hyscale.commons.logger.WorkflowLogger;\n+import io.hyscale.commons.models.ImageRegistry;\n+import io.hyscale.commons.utils.EncodeDecodeUtil;\n \n @Component\n public class DockerImageUtil {\n@@ -74,4 +76,21 @@ public void pullImage(String imageName) throws HyscaleException {\n             throw new HyscaleException(ImageBuilderErrorCodes.FAILED_TO_PULL_IMAGE, imageName);\n         }\n     }\n+    \n+    public void dockerLogin(ImageRegistry imageRegistry) throws HyscaleException {\n+        String decodedAuth = EncodeDecodeUtil.decode(imageRegistry.getToken());\n+        int delimiter = decodedAuth.indexOf(':');\n+        String username = null;\n+        String password = null;\n+        if (delimiter > 0) {\n+            username = decodedAuth.substring(0,delimiter);\n+            password = decodedAuth.substring(delimiter+1);\n+        }\n+        logger.debug(\"Docker login to registry: {}\", imageRegistry.getUrl());\n+        String loginCommand = commandGenerator.dockerLogin(imageRegistry.getUrl(), username, password);\n+        boolean success = CommandExecutor.execute(loginCommand);\n+        if (!success) {\n+            throw new HyscaleException(ImageBuilderErrorCodes.FAILED_TO_LOGIN, imageRegistry.getUrl());\n+        }\n+    }\n }"
  },
  {
    "sha": "1048bec72c64ee426a71c69df87a3b409933696f",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/DockerfileUtil.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/DockerfileUtil.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/DockerfileUtil.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/DockerfileUtil.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.builder.services.util;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import io.hyscale.builder.services.constants.DockerImageConstants;\n+import io.hyscale.commons.config.SetupConfig;\n+import io.hyscale.commons.constants.ToolConstants;\n+import io.hyscale.servicespec.commons.model.service.Dockerfile;\n+\n+@Component\n+public class DockerfileUtil {\n+\n+    public String getDockerfileAbsolutePath(Dockerfile dockerfile) {\n+        if (dockerfile == null) {\n+            return null;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        String path = dockerfile.getPath();\n+        if (StringUtils.isNotBlank(path)) {\n+            sb.append(path);\n+            if (!path.endsWith(ToolConstants.FILE_SEPARATOR)) {\n+                sb.append(ToolConstants.FILE_SEPARATOR);\n+            }\n+        }\n+        String dockerfileDir = dockerfile.getDockerfilePath();\n+        if (StringUtils.isNotBlank(dockerfileDir)) {\n+            sb.append(dockerfileDir);\n+        }\n+        String dockerfilePath = sb.toString();\n+        dockerfilePath = StringUtils.isNotBlank(dockerfilePath) ? SetupConfig.getAbsolutePath(dockerfilePath)\n+                : SetupConfig.getAbsolutePath(\".\");\n+        return dockerfilePath.endsWith(ToolConstants.FILE_SEPARATOR)\n+                ? dockerfilePath + DockerImageConstants.DOCKERFILE_NAME\n+                : dockerfilePath + ToolConstants.FILE_SEPARATOR + DockerImageConstants.DOCKERFILE_NAME;\n+    }\n+}"
  },
  {
    "sha": "189ce6040a599c943ea301a79160b8f3ecf213ef",
    "filename": "image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/ImageLogUtil.java",
    "status": "modified",
    "additions": 25,
    "deletions": 26,
    "changes": 51,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/ImageLogUtil.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/ImageLogUtil.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/io/hyscale/builder/services/util/ImageLogUtil.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -16,6 +16,7 @@\n package io.hyscale.builder.services.util;\n \n import java.io.File;\n+import java.io.OutputStream;\n \n import io.hyscale.commons.exception.HyscaleException;\n import io.hyscale.commons.io.LogProcessor;\n@@ -30,18 +31,22 @@\n import io.hyscale.builder.core.models.BuildContext;\n import io.hyscale.builder.core.models.ImageBuilderActivity;\n import io.hyscale.commons.logger.WorkflowLogger;\n+import io.hyscale.commons.models.Activity;\n import io.hyscale.builder.services.handler.BuildLogHandler;\n import io.hyscale.builder.services.handler.PushLogHandler;\n import io.hyscale.builder.services.constants.DockerImageConstants;\n \n @Component\n public class ImageLogUtil {\n \n+    private static final Logger logger = LoggerFactory.getLogger(ImageLogUtil.class);\n+    \n+    @SuppressWarnings(\"java:S106\")\n+    private static final OutputStream SYSTEM_OUTPUT_STREAM = System.out;\n+    \n \t@Autowired\n \tprivate LogProcessor processLogFile;\n \n-\tprivate static final Logger logger = LoggerFactory.getLogger(ImageLogUtil.class);\n-\n \t@Autowired\n \tprivate ImageBuilderConfig imageBuilderConfig;\n \n@@ -86,34 +91,28 @@ public void tailLogs(BuildContext context){\n \tpublic void readLogs(BuildContext context) throws HyscaleException {\n \t\tString appName = context.getAppName();\n \t\tString serviceName = context.getServiceName();\n+\t\t\n \t\t// build logs\n-\t\treadBuildLogs(appName, serviceName);\n+\t\tString logFilePath = imageBuilderConfig.getDockerBuildlog(appName, serviceName);\n+\t\treadLogs(logFilePath, ImageBuilderActivity.BUILD_LOGS);\n+\t\t\n \t\t// push logs\n-\t\treadPushLogs(appName, serviceName);\n-\t}\n-\n-\tpublic void readBuildLogs(String appName, String serviceName) throws HyscaleException {\n-\t\tFile buildLogFile = new File(imageBuilderConfig.getDockerBuildlog(appName, serviceName));\n-\t\tboolean fileExists = buildLogFile.exists();\n-\t\tif (fileExists) {\n-\t\t\tWorkflowLogger.header(ImageBuilderActivity.BUILD_LOGS);\n-\n-\t\t\t\tprocessLogFile.readLogFile(buildLogFile, System.out);\n-\n-\t\t\tlogger.debug(\"Reading Build logs for app {} and service {}\",appName,serviceName);\n-\t\t}\n-\t}\n-\n-\tpublic void readPushLogs(String appName, String serviceName) throws HyscaleException{\n-\t\tFile pushLogFile = new File(imageBuilderConfig.getDockerPushLogDir(appName, serviceName));\n-\t\tboolean pushLogExists = pushLogFile.exists();\n-\t\tif (pushLogExists) {\n-\t\t\tWorkflowLogger.header(ImageBuilderActivity.IMAGE_PUSH_LOG);\n-\t\t\t\tprocessLogFile.readLogFile(pushLogFile, System.out);\n-\t\t\tlogger.debug(\"Reading push logs for app {} and service {}\",appName,serviceName);\n-\t\t}\n+\t\tlogFilePath = imageBuilderConfig.getDockerPushLogDir(appName, serviceName);\n+        readLogs(logFilePath, ImageBuilderActivity.IMAGE_PUSH_LOG);\n \t}\n \n+    public void readLogs(String logFilePath, Activity activity) throws HyscaleException {\n+        if (logFilePath == null) {\n+            return;\n+        }\n+        File logFile = new File(logFilePath);\n+        if (logFile.exists() && logFile.isFile()) {\n+            WorkflowLogger.header(activity);\n+            logger.debug(\"Reading logs file {}\", logFilePath);\n+            processLogFile.readLogFile(logFile, SYSTEM_OUTPUT_STREAM);\n+        }\n+    }\n+    \n \tpublic TailLogFile tailBuildLogs(String appName, String serviceName){\n \t\tBuildLogHandler buildLogHandler = new BuildLogHandler();\n \t\tFile logFile = new File(imageBuilderConfig.getDockerBuildlog(appName, serviceName));"
  },
  {
    "sha": "5c79944ef1c1af61908efba8dc93b8380f12083b",
    "filename": "image-builder/builder-services/src/main/java/module-info.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/module-info.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/main/java/module-info.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/main/java/module-info.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -20,7 +20,9 @@\n \texports io.hyscale.builder.services.exception;\n \texports io.hyscale.builder.services.impl;\n \texports io.hyscale.builder.services.docker;\n+\texports io.hyscale.builder.services.docker.impl;\n \texports io.hyscale.builder.services.service;\n+\texports io.hyscale.builder.services.provider;\n \n \trequires transitive commons;\n \trequires transitive service_spec_commons;"
  },
  {
    "sha": "f2a494f299f594b685885b81b93b8b54650653d6",
    "filename": "image-builder/builder-services/src/test/java/io/hyscale/builder/services/ImageBuilderTestConfiguration.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/ImageBuilderTestConfiguration.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/ImageBuilderTestConfiguration.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/java/io/hyscale/builder/services/ImageBuilderTestConfiguration.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.builder.services;\n+\n+import org.springframework.boot.SpringBootConfiguration;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+\n+@SpringBootConfiguration\n+@ComponentScan(basePackages = {\"io.hyscale.builder\", \"io.hyscale.commons\"})\n+@EnableAutoConfiguration\n+public class ImageBuilderTestConfiguration {\n+\n+}"
  },
  {
    "sha": "4d680e792807945bc07016235715ed72d0abcf44",
    "filename": "image-builder/builder-services/src/test/java/io/hyscale/builder/services/ImageBuilderTestInitializer.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/ImageBuilderTestInitializer.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/ImageBuilderTestInitializer.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/java/io/hyscale/builder/services/ImageBuilderTestInitializer.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,24 @@\n+package io.hyscale.builder.services;\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest(classes = ImageBuilderTestConfiguration.class)\n+public class ImageBuilderTestInitializer {\n+\n+}"
  },
  {
    "sha": "640d7ab744e6728edfe2888c4fc5f0eef9968faf",
    "filename": "image-builder/builder-services/src/test/java/io/hyscale/builder/services/predicates/ImageBuilderPredicatesTest.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/predicates/ImageBuilderPredicatesTest.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/predicates/ImageBuilderPredicatesTest.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/java/io/hyscale/builder/services/predicates/ImageBuilderPredicatesTest.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.builder.services.predicates;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.File;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import io.hyscale.builder.core.models.BuildContext;\n+import io.hyscale.builder.services.util.ServiceSpecTestUtil;\n+import io.hyscale.commons.exception.HyscaleException;\n+import io.hyscale.commons.models.DockerfileEntity;\n+import io.hyscale.servicespec.commons.model.service.Dockerfile;\n+import io.hyscale.servicespec.commons.model.service.ServiceSpec;\n+\n+class ImageBuilderPredicatesTest {\n+    \n+    private static BuildContext contextWithDockerfile;\n+    private static BuildContext contextWithDockerEntity;\n+    \n+\n+    @BeforeAll\n+    public static void init() {\n+        contextWithDockerfile = new BuildContext();\n+        DockerfileEntity entity = new DockerfileEntity();\n+        entity.setDockerfile(new File(\"Dockerfile\"));\n+        contextWithDockerfile.setDockerfileEntity(entity);\n+        contextWithDockerEntity = new BuildContext();\n+        contextWithDockerEntity.setDockerfileEntity(new DockerfileEntity());\n+    }\n+    \n+    private static Stream<Arguments> skipBuildInput() {\n+        return Stream.of(Arguments.of(null, null, true),\n+                Arguments.of(null, new BuildContext(), true),\n+                Arguments.of(null, contextWithDockerEntity, true),\n+                Arguments.of(new Dockerfile(), null, false),\n+                Arguments.of(null, contextWithDockerfile, false));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"skipBuildInput\")\n+    void testSkipBuild(Dockerfile dockerfile, BuildContext context, boolean result) {\n+        assertEquals(result, ImageBuilderPredicates.getSkipBuildPredicate().test(dockerfile, context));\n+    }\n+    \n+    private static Stream<Arguments> buildPushRequiredInput() throws HyscaleException {\n+        BuildContext stackImageContext = new BuildContext();\n+        stackImageContext.setStackAsServiceImage(true);\n+        return Stream.of(Arguments.of(null, null, false),\n+                Arguments.of(ServiceSpecTestUtil.getServiceSpec(\"/servicespec/buildSpec.hspec\"), null, false),\n+                Arguments.of(ServiceSpecTestUtil.getServiceSpec(\"/servicespec/dockerfile.hspec\"), null, true),\n+                Arguments.of(null, new BuildContext(), false),\n+                Arguments.of(null, stackImageContext, true),\n+                Arguments.of(null, contextWithDockerfile, true),\n+                Arguments.of(null, contextWithDockerEntity, false));\n+    }\n+    \n+    @ParameterizedTest\n+    @MethodSource(\"buildPushRequiredInput\")\n+    void testBuildPushRequired(ServiceSpec serviceSpec, BuildContext context, boolean result) {\n+        assertEquals(result, ImageBuilderPredicates.getBuildPushRequiredPredicate().test(serviceSpec, context));\n+    }\n+    \n+}"
  },
  {
    "sha": "24b3b79d5605fa97cb171e43e0886caf01158872",
    "filename": "image-builder/builder-services/src/test/java/io/hyscale/builder/services/provider/StackImageProviderTest.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/provider/StackImageProviderTest.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/provider/StackImageProviderTest.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/java/io/hyscale/builder/services/provider/StackImageProviderTest.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.builder.services.provider;\n+\n+import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+import io.hyscale.builder.services.util.ServiceSpecTestUtil;\n+import io.hyscale.commons.exception.HyscaleException;\n+import io.hyscale.servicespec.commons.model.service.ServiceSpec;\n+\n+@SpringBootTest\n+class StackImageProviderTest {\n+\n+    @Autowired\n+    private StackImageProvider stackImageProvider;\n+\n+    private static Stream<Arguments> input() throws HyscaleException {\n+        return Stream.of(Arguments.of(null, Collections.EMPTY_LIST),\n+                Arguments.of(ServiceSpecTestUtil.getServiceSpec(\"/servicespec/no-stack-image.hspec\"),\n+                        Collections.EMPTY_LIST),\n+                Arguments.of(ServiceSpecTestUtil.getServiceSpec(\"/servicespec/dockerfile-not-found.hspec\"),\n+                        Collections.EMPTY_LIST),\n+                Arguments.of(ServiceSpecTestUtil.getServiceSpec(\"/servicespec/buildSpec.hspec\"),\n+                        Arrays.asList(\"abc/testimg:1.0\")),\n+                Arguments.of(ServiceSpecTestUtil.getServiceSpec(\"/servicespec/dockerfile.hspec\"),\n+                        Arrays.asList(\"testimg:1.0\", \"testimg:2.0\", \"testimg:3.0\")));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"input\")\n+    void testGetStackImages(ServiceSpec serviceSpec, List<String> stackImages) {\n+        List<String> availableStackImages = stackImageProvider.getStackImages(serviceSpec);\n+        if (stackImages == null) {\n+            assertNull(availableStackImages);\n+        } else {\n+            assertThat(stackImages, containsInAnyOrder(availableStackImages.toArray()));\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "ab3dae657883c2ea1ef2458e501b1125852d5a33",
    "filename": "image-builder/builder-services/src/test/java/io/hyscale/builder/services/util/DockerfileUtilTest.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/util/DockerfileUtilTest.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/util/DockerfileUtilTest.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/java/io/hyscale/builder/services/util/DockerfileUtilTest.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.builder.services.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+import io.hyscale.builder.services.constants.DockerImageConstants;\n+import io.hyscale.commons.config.SetupConfig;\n+import io.hyscale.commons.constants.ToolConstants;\n+import io.hyscale.commons.exception.HyscaleException;\n+import io.hyscale.servicespec.commons.model.service.Dockerfile;\n+\n+@SpringBootTest\n+class DockerfileUtilTest {\n+\n+    private static final String PATH = \"path\";\n+    private static final String DOCKERFILE_PATH = \"dockerfilePath\";\n+\n+    @Autowired\n+    private DockerfileUtil dockerfileUtil;\n+\n+    @Autowired\n+    private static SetupConfig setupConfig;\n+\n+    private static Stream<Arguments> input() {\n+        Dockerfile dockerfileOnlyPath = new Dockerfile();\n+        dockerfileOnlyPath.setPath(PATH);\n+        Dockerfile dockerfile = new Dockerfile();\n+        dockerfile.setDockerfilePath(DOCKERFILE_PATH);\n+        Dockerfile dockerfileComplete = new Dockerfile();\n+        dockerfileComplete.setPath(PATH);\n+        dockerfileComplete.setDockerfilePath(DOCKERFILE_PATH);\n+        return Stream.of(Arguments.of(null, null),\n+                Arguments.of(new Dockerfile(), getPath(setupConfig.getAbsolutePath(\".\"))),\n+                Arguments.of(dockerfileOnlyPath, getPath(setupConfig.getAbsolutePath(PATH))),\n+                Arguments.of(dockerfile, getPath(setupConfig.getAbsolutePath(DOCKERFILE_PATH))),\n+                Arguments.of(dockerfileComplete,\n+                        getPath(setupConfig.getAbsolutePath(PATH + ToolConstants.FILE_SEPARATOR + DOCKERFILE_PATH))));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"input\")\n+    void testDockerfilePath(Dockerfile dockerfile, String dockerfilePath) {\n+        assertEquals(dockerfilePath, dockerfileUtil.getDockerfileAbsolutePath(dockerfile));\n+    }\n+\n+    private static String getPath(String path) {\n+        return path + ToolConstants.LINUX_FILE_SEPARATOR + DockerImageConstants.DOCKERFILE_NAME;\n+    }\n+\n+}"
  },
  {
    "sha": "88a671bbc86aa3d04e63113e1d922ffd702eb427",
    "filename": "image-builder/builder-services/src/test/java/io/hyscale/builder/services/util/ServiceSpecTestUtil.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/util/ServiceSpecTestUtil.java",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/java/io/hyscale/builder/services/util/ServiceSpecTestUtil.java",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/java/io/hyscale/builder/services/util/ServiceSpecTestUtil.java?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright 2019 Pramati Prism, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.hyscale.builder.services.util;\n+\n+import java.io.File;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import io.hyscale.commons.exception.HyscaleException;\n+import io.hyscale.servicespec.commons.model.service.ServiceSpec;\n+\n+public class ServiceSpecTestUtil {\n+\n+    public static ServiceSpec getServiceSpec(String serviceSpecPath) throws HyscaleException {\n+        if (StringUtils.isBlank(serviceSpecPath)) {\n+            return null;\n+        }\n+        return new ServiceSpec(new File(ServiceSpecTestUtil.class.getResource(serviceSpecPath).getFile()));\n+    }\n+\n+}"
  },
  {
    "sha": "b6b497cfb3426e30c20356727926df4a86906e3a",
    "filename": "image-builder/builder-services/src/test/resources/application.properties",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/resources/application.properties",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/resources/application.properties",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/resources/application.properties?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1 @@\n+spring.main.banner-mode=off\n\\ No newline at end of file"
  },
  {
    "sha": "adfa02c68cfa750b96e818b582edc6368541f29f",
    "filename": "image-builder/builder-services/src/test/resources/logback-test.xml",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/resources/logback-test.xml",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/resources/logback-test.xml",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/resources/logback-test.xml?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1 @@\n+<configuration />\n\\ No newline at end of file"
  },
  {
    "sha": "e468335012830a430c4f5f6ba9b674c52ab0736d",
    "filename": "image-builder/builder-services/src/test/resources/servicespec/Dockerfile",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/resources/servicespec/Dockerfile",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/resources/servicespec/Dockerfile",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/resources/servicespec/Dockerfile?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,5 @@\n+FROM testimg:1.0\n+\n+FROM testimg:2.0\n+\n+FROM testimg:3.0 AS test\n\\ No newline at end of file"
  },
  {
    "sha": "c9515e557dabb8a9319830c6da70811fbbcc533b",
    "filename": "image-builder/builder-services/src/test/resources/servicespec/buildSpec.hspec",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/hyscale/hyscale/blob/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/resources/servicespec/buildSpec.hspec",
    "raw_url": "https://github.com/hyscale/hyscale/raw/8e05b65f95902a342ef4638f61932cd574289c69/image-builder/builder-services/src/test/resources/servicespec/buildSpec.hspec",
    "contents_url": "https://api.github.com/repos/hyscale/hyscale/contents/image-builder/builder-services/src/test/resources/servicespec/buildSpec.hspec?ref=8e05b65f95902a342ef4638f61932cd574289c69",
    "patch": "@@ -0,0 +1,16 @@\n+name: myservice\n+image:\n+  registry: x.y.z\n+  name: myServiceImage\n+  tag: 1.2.3\n+  buildSpec:\n+    stackImage: abc/testimg:1.0\n+    artifacts:\n+      - name: sample\n+        source: sample.war\n+        destination: /abc/def/ghi/sample.txt\n+    configCommands: |-\n+      echo \"Hello, I'm configure commands\"\n+    runCommandsScript: /abc/def/run.sh\n+    runCommands: |-\n+      echo \"Hello, I'm run commands\""
  }
]
