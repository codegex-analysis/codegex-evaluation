[
  {
    "sha": "511383698a6bdbfd1f1b57ddfc2a62d844af9cf2",
    "filename": "src/main/java/org/mitre/synthea/export/CSVExporter.java",
    "status": "modified",
    "additions": 252,
    "deletions": 0,
    "changes": 252,
    "blob_url": "https://github.com/synthetichealth/synthea/blob/1640e70f98554d6804609b27357cfcf964b269ed/src/main/java/org/mitre/synthea/export/CSVExporter.java",
    "raw_url": "https://github.com/synthetichealth/synthea/raw/1640e70f98554d6804609b27357cfcf964b269ed/src/main/java/org/mitre/synthea/export/CSVExporter.java",
    "contents_url": "https://api.github.com/repos/synthetichealth/synthea/contents/src/main/java/org/mitre/synthea/export/CSVExporter.java?ref=1640e70f98554d6804609b27357cfcf964b269ed",
    "patch": "@@ -19,6 +19,7 @@\n import java.util.Calendar;\n import java.util.Collections;\n import java.util.GregorianCalendar;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -36,6 +37,7 @@\n import org.mitre.synthea.world.agents.Payer;\n import org.mitre.synthea.world.agents.Person;\n import org.mitre.synthea.world.agents.Provider;\n+import org.mitre.synthea.world.concepts.Claim;\n import org.mitre.synthea.world.concepts.HealthRecord;\n import org.mitre.synthea.world.concepts.HealthRecord.CarePlan;\n import org.mitre.synthea.world.concepts.HealthRecord.Code;\n@@ -126,6 +128,14 @@\n    * Writer for payerTransitions.csv\n    */\n   private OutputStreamWriter payerTransitions;\n+  /**\n+   * Writer for claims.csv\n+   */\n+  private OutputStreamWriter claims;\n+  /**\n+   * Writer for claims_transactions.csv\n+   */\n+  private OutputStreamWriter claimsTransactions;\n \n   /**\n    * Charset for specifying the character set of the output files.\n@@ -225,6 +235,11 @@ void init() {\n       payerTransitions = getWriter(outputDirectory, \"payer_transitions.csv\", append, includedFiles,\n           excludedFiles);\n \n+      claims = getWriter(outputDirectory, \"claims.csv\", append, includedFiles, excludedFiles);\n+\n+      claimsTransactions = getWriter(outputDirectory, \"claims_transactions.csv\", append,\n+          includedFiles, excludedFiles);\n+\n       if (!append) {\n         writeCSVHeaders();\n       }\n@@ -308,6 +323,19 @@ private void writeCSVHeaders() throws IOException {\n     payers.write(NEWLINE);\n     payerTransitions.write(\"PATIENT,START_YEAR,END_YEAR,PAYER,OWNERSHIP\");\n     payerTransitions.write(NEWLINE);\n+    claims.write(\"Id,PATIENTID,PROVIDERID,PRIMARYPATIENTINSURANCEID,SECONDARYPATIENTINSURANCEID,\"\n+        + \"DEPARTMENTID,PATIENTDEPARTMENTID,DIAGNOSIS1,DIAGNOSIS2,DIAGNOSIS3,DIAGNOSIS4,\"\n+        + \"DIAGNOSIS5,DIAGNOSIS6,DIAGNOSIS7,DIAGNOSIS8,REFERRINGPROVIDERID,APPOINTMENTID,\"\n+        + \"CURRENTILLNESSDATE,SERVICEDATE,SUPERVISINGPROVIDERID,STATUS1,STATUS2,STATUSP,\"\n+        + \"OUTSTANDING1,OUTSTANDING2,OUTSTANDINGP,LASTBILLEDDATE1,LASTBILLEDDATE2,LASTBILLEDDATEP,\"\n+        + \"HEALTHCARECLAIMTYPEID1,HEALTHCARECLAIMTYPEID2\");\n+    claims.write(NEWLINE);\n+    claimsTransactions.write(\"ID,CLAIMID,CHARGEID,PATIENTID,TYPE,AMOUNT,METHOD,FROMDATE,TODATE,\"\n+        + \"PLACEOFSERVICE,PROCEDURECODE,MODIFIER1,MODIFIER2,DIAGNOSISREF1,DIAGNOSISREF2,\"\n+        + \"DIAGNOSISREF3,DIAGNOSISREF4,UNITS,DEPARTMENTID,NOTES,UNITAMOUNT,TRANSFEROUTID,\"\n+        + \"TRANSFERTYPE,PAYMENTS,ADJUSTMENTS,TRANSFERS,OUTSTANDING,APPOINTMENTID,LINENOTE,\"\n+        + \"PATIENTINSURANCEID,FEESCHEDULEID,PROVIDERID,SUPERVISINGPROVIDERID\");\n+    claimsTransactions.write(NEWLINE);\n   }\n \n   /**\n@@ -426,6 +454,8 @@ public void export(Person person, long time) throws IOException {\n       String encounterID = encounter(person, personID, encounter);\n       String payerID = encounter.claim.payer.uuid;\n \n+      claim(person, encounter.claim, encounter, encounterID);\n+\n       for (HealthRecord.Entry condition : encounter.conditions) {\n         /* condition to ignore codes other then retrieved from terminology url */\n         if (!StringUtils.isEmpty(Config.get(\"generate.terminology_service_url\"))\n@@ -524,6 +554,8 @@ public void export(Person person, long time) throws IOException {\n     imagingStudies.flush();\n     devices.flush();\n     supplies.flush();\n+    claims.flush();\n+    claimsTransactions.flush();\n   }\n \n   /**\n@@ -1217,6 +1249,226 @@ private void payerTransition(Person person, Payer payer, int startYear, int endY\n     write(s.toString(), payerTransitions);\n   }\n \n+  /**\n+   * Write a single claim to claims.csv.\n+   *\n+   * @param claim The claim to be exported.\n+   * @throws IOException if any IO error occurs.\n+   */\n+  private void claim(RandomNumberGenerator rand, Claim claim, Encounter encounter,\n+      String encounterID) throws IOException {\n+    // Id,PATIENTID,PROVIDERID,PRIMARYPATIENTINSURANCEID,SECONDARYPATIENTINSURANCEID,\n+    // DEPARTMENTID,PATIENTDEPARTMENTID,DIAGNOSIS1,DIAGNOSIS2,DIAGNOSIS3,DIAGNOSIS4,\n+    // DIAGNOSIS5,DIAGNOSIS6,DIAGNOSIS7,DIAGNOSIS8,REFERRINGPROVIDERID,APPOINTMENTID,\n+    // CURRENTILLNESSDATE,SERVICEDATE,SUPERVISINGPROVIDERID,STATUS1,STATUS2,STATUSP,\n+    // OUTSTANDING1,OUTSTANDING2,OUTSTANDINGP,LASTBILLEDDATE1,LASTBILLEDDATE2,LASTBILLEDDATEP,\n+    // HEALTHCARECLAIMTYPEID1,HEALTHCARECLAIMTYPEID2\n+\n+    // Institutional or Professional?\n+    boolean institutional = true;\n+    if (encounter.provider != null) {\n+      institutional = encounter.provider.institutional;\n+    }\n+\n+    StringBuilder s = new StringBuilder();\n+    // Claim Id. Should be a number.\n+    String claimId = rand.randUUID().toString();\n+    s.append(claimId).append(',');\n+    // PATIENTID\n+    s.append(claim.person.attributes.get(Person.ID)).append(',');\n+    // Organization provider, should not be null.\n+    if (encounter.provider != null) {\n+      s.append(encounter.provider.getResourceID()).append(',');\n+    } else {\n+      s.append(',');\n+    }\n+    // PRIMARYPATIENTINSURANCEID\n+    if (encounter.claim.payer == null || encounter.claim.payer == Payer.noInsurance) {\n+      s.append(\"0,\"); // 0 == No Insurance\n+    } else {\n+      s.append(claim.payer.getResourceID()).append(',');\n+    }\n+    // TODO SECONDARYPATIENTINSURANCEID (0 default if none)\n+    s.append(\"0,\");\n+    // TODO DEPARTMENTID\n+    s.append(\"11\").append(',');\n+    s.append(\"11\").append(',');\n+    // Diagnosis codes\n+    int dxCode = 0;\n+    String[] diagnosisCodes = new String[8];\n+    if (encounter.reason != null) {\n+      diagnosisCodes[dxCode] = encounter.reason.code;\n+      dxCode++;\n+    }\n+    Iterator<HealthRecord.Entry> items = encounter.conditions.iterator();\n+    while ((dxCode < diagnosisCodes.length) && items.hasNext()) {\n+      Entry item = items.next();\n+      diagnosisCodes[dxCode] = item.codes.get(0).code;\n+      dxCode++;\n+    }\n+    for (String diagnosisCode : diagnosisCodes) {\n+      if (diagnosisCode != null && !diagnosisCode.isEmpty()) {\n+        s.append(diagnosisCode).append(',');\n+      } else {\n+        s.append(',');\n+      }\n+    }\n+    // TODO REFERRINGPROVIDERID\n+    s.append(',');\n+    // APPOINTMENTID\n+    s.append(encounterID).append(',');\n+    // TODO CURRENTILLNESSDATE\n+    s.append(iso8601Timestamp(encounter.start)).append(',');\n+    // SERVICEDATE\n+    s.append(iso8601Timestamp(encounter.start)).append(',');\n+    // SUPERVISINGPROVIDERID\n+    if (encounter.clinician != null) {\n+      s.append(encounter.clinician.getResourceID()).append(',');\n+    } else {\n+      s.append(',');\n+    }\n+    // TODO STATUS1 for Payer1\n+    s.append(\"CLOSED,\");\n+    // TODO STATUS2 for Payer2\n+    s.append(',');\n+    // STATUSP for Patient as Payer\n+    s.append(\"CLOSED,\");\n+    // OUTSTANDING1\n+    s.append(String.format(Locale.US, \"%.2f\", encounter.claim.getCoveredCost())).append(',');\n+    // TODO OUTSTANDING2\n+    s.append(',');\n+    // OUTSTANDINGP\n+    double patientCost = claim.getTotalClaimCost() - claim.getCoveredCost();\n+    s.append(String.format(Locale.US, \"%.2f\", patientCost)).append(',');\n+    // LASTBILLEDDATE1\n+    s.append(iso8601Timestamp(encounter.start)).append(',');\n+    // TODO LASTBILLEDDATE2\n+    s.append(',');\n+    // LASTBILLEDDATEP\n+    s.append(iso8601Timestamp(encounter.start)).append(',');\n+    // HEALTHCARECLAIMTYPEID1\n+    if (institutional) {\n+      s.append('2');\n+    } else {\n+      s.append('1');\n+    }\n+    s.append(',');\n+    // HEALTHCARECLAIMTYPEID2\n+    s.append('0');\n+    s.append(NEWLINE);\n+    write(s.toString(), claims);\n+\n+    claimTransaction(rand, claim, claimId, encounter, encounterID, claim.mainEntry, 1);\n+    for (int i = 0; i < claim.items.size(); i++) {\n+      Entry entry = claim.items.get(i);\n+      claimTransaction(rand, claim, claimId, encounter, encounterID, entry, i + 1);\n+    }\n+  }\n+\n+  /**\n+   * Write a single claim transaction to claims_transactions.csv.\n+   *\n+   * @param payer The claim to be exported.\n+   * @throws IOException if any IO error occurs.\n+   */\n+  private void claimTransaction(RandomNumberGenerator rand, Claim claim, String claimID,\n+      Encounter encounter, String encounterID, Entry entry, int charge) throws IOException {\n+    // ID,CLAIMID,CHARGEID,PATIENTID,TYPE,AMOUNT,METHOD,FROMDATE,TODATE,\n+    // PLACEOFSERVICE,PROCEDURECODE,MODIFIER1,MODIFIER2,DIAGNOSISREF1,DIAGNOSISREF2,\n+    // DIAGNOSISREF3,DIAGNOSISREF4,UNITS,DEPARTMENTID,NOTES,UNITAMOUNT,TRANSFEROUTID,\n+    // TRANSFERTYPE,PAYMENTS,ADJUSTMENTS,TRANSFERS,OUTSTANDING,APPOINTMENTID,LINENOTE,\n+    // PATIENTINSURANCEID,FEESCHEDULEID,PROVIDERID,SUPERVISINGPROVIDERID\n+    StringBuilder s = new StringBuilder();\n+    // ID\n+    s.append(rand.randUUID().toString()).append(',');\n+    // CLAIMID\n+    s.append(claimID).append(',');\n+    // CHARGEID\n+    s.append(charge).append(',');\n+    // PATIENTID\n+    s.append(claim.person.attributes.get(Person.ID)).append(',');\n+    // TYPE: CHARGE, PAYMENT, ADJUSTMENT, TRANSFERIN, TRANSFEROUT\n+    s.append(\"CHARGE\").append(',');\n+    // AMOUNT TODO multiple by units\n+    s.append(String.format(Locale.US, \"%.2f\", entry.getCost())).append(',');\n+    // METHOD\n+    String[] methods = { \"CASH\", \"CHECK\", \"COPAY\", \"SYSTEM\", \"CC\", \"ECHECK\" };\n+    s.append(methods[rand.randInt(methods.length)]).append(',');\n+    // FROMDATE\n+    s.append(iso8601Timestamp(entry.start)).append(',');\n+    // TODATE\n+    s.append(iso8601Timestamp(entry.stop)).append(',');\n+    // TODO PLACEOFSERVICE\n+    s.append(\"11\").append(',');\n+    // PROCEDURECODE\n+    s.append(entry.codes.get(0).code).append(',');\n+    // MODIFIER1\n+    s.append(',');\n+    // MODIFIER2\n+    s.append(',');\n+    // DIAGNOSISREF1, DIAGNOSISREF2, DIAGNOSISREF3, DIAGNOSISREF4\n+    // Diagnosis codes\n+    int dxCode = 0;\n+    String[] diagnosisCodes = new String[4];\n+    if (encounter.reason != null) {\n+      diagnosisCodes[dxCode] = encounter.reason.code;\n+      dxCode++;\n+    }\n+    Iterator<HealthRecord.Entry> items = encounter.conditions.iterator();\n+    while ((dxCode < diagnosisCodes.length) && items.hasNext()) {\n+      Entry item = items.next();\n+      diagnosisCodes[dxCode] = item.codes.get(0).code;\n+      dxCode++;\n+    }\n+    for (String diagnosisCode : diagnosisCodes) {\n+      if (diagnosisCode != null && !diagnosisCode.isEmpty()) {\n+        s.append(diagnosisCode).append(',');\n+      } else {\n+        s.append(',');\n+      }\n+    }\n+    // TODO UNITS\n+    s.append(\"1\").append(',');\n+    // TODO DEPARTMENTID\n+    s.append(\"11\").append(',');\n+    // NOTES\n+    s.append(clean(entry.codes.get(0).display)).append(',');\n+    // UNITAMOUNT\n+    s.append(String.format(Locale.US, \"%.2f\", entry.getCost())).append(',');\n+    // TODO TRANSFEROUTID\n+    s.append(',');\n+    // TRANSFERTYPE. 1=primary insurance, 2=secondary, p==patient\n+    s.append('1').append(',');\n+    // PAYMENTS\n+    s.append(String.format(Locale.US, \"%.2f\", entry.getCost())).append(',');\n+    // ADJUSTMENTS\n+    s.append(\"0\").append(',');\n+    // TRANSFERS\n+    s.append(\"0\").append(',');\n+    // OUTSTANDING\n+    s.append(\"0\").append(',');\n+    // APPOINTMENTID\n+    s.append(encounterID).append(',');\n+    // LINENOTE\n+    s.append(',');\n+    // PATIENTINSURANCEID\n+    s.append(claim.person.attributes.get(Person.ID)).append(',');\n+    // TODO FEESCHEDULEID\n+    s.append(\"1\").append(',');\n+    // PROVIDERID\n+    if (encounter.provider != null) {\n+      s.append(encounter.provider.getResourceID()).append(',');\n+    } else {\n+      s.append(',');\n+    }\n+    // SUPERVISINGPROVIDERID\n+    if (encounter.clinician != null) {\n+      s.append(encounter.clinician.getResourceID());\n+    }\n+    s.append(NEWLINE);\n+    write(s.toString(), claimsTransactions);\n+  }\n+\n   /**\n    * Replaces commas and line breaks in the source string with a single space.\n    * Null is replaced with the empty string."
  },
  {
    "sha": "b57b86a49b3916a2c259d5603a289af8cce1ec9c",
    "filename": "src/main/java/org/mitre/synthea/world/agents/Provider.java",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/synthetichealth/synthea/blob/1640e70f98554d6804609b27357cfcf964b269ed/src/main/java/org/mitre/synthea/world/agents/Provider.java",
    "raw_url": "https://github.com/synthetichealth/synthea/raw/1640e70f98554d6804609b27357cfcf964b269ed/src/main/java/org/mitre/synthea/world/agents/Provider.java",
    "contents_url": "https://api.github.com/repos/synthetichealth/synthea/contents/src/main/java/org/mitre/synthea/world/agents/Provider.java?ref=1640e70f98554d6804609b27357cfcf964b269ed",
    "patch": "@@ -74,6 +74,8 @@\n   public String phone;\n   public String type;\n   public String ownership;\n+  /** institutional (e.g. hospital) else professional (e.g. PCP) */\n+  public boolean institutional;\n   public int quality;\n   private double revenue;\n   private Point2D.Double coordinates;\n@@ -314,21 +316,21 @@ public static void loadProviders(Location location, long clinicianSeed) {\n         servicesProvided.add(EncounterType.INPATIENT);\n \n         String hospitalFile = Config.get(\"generate.providers.hospitals.default_file\");\n-        loadProviders(location, hospitalFile, servicesProvided, clinicianSeed);\n+        loadProviders(location, hospitalFile, servicesProvided, true, clinicianSeed);\n \n         servicesProvided.add(EncounterType.WELLNESS);\n         String vaFile = Config.get(\"generate.providers.veterans.default_file\");\n-        loadProviders(location, vaFile, servicesProvided, clinicianSeed);\n+        loadProviders(location, vaFile, servicesProvided, true, clinicianSeed);\n \n         servicesProvided.clear();\n         servicesProvided.add(EncounterType.WELLNESS);\n         String primaryCareFile = Config.get(\"generate.providers.primarycare.default_file\");\n-        loadProviders(location, primaryCareFile, servicesProvided, clinicianSeed);\n+        loadProviders(location, primaryCareFile, servicesProvided, false, clinicianSeed);\n         \n         servicesProvided.clear();\n         servicesProvided.add(EncounterType.URGENTCARE);\n         String urgentcareFile = Config.get(\"generate.providers.urgentcare.default_file\");\n-        loadProviders(location, urgentcareFile, servicesProvided, clinicianSeed);\n+        loadProviders(location, urgentcareFile, servicesProvided, true, clinicianSeed);\n       \n         statesLoaded.add(location.state);\n         statesLoaded.add(Location.getAbbreviation(location.state));\n@@ -347,10 +349,11 @@ public static void loadProviders(Location location, long clinicianSeed) {\n    * @param location the state being loaded\n    * @param filename Location of the file, relative to src/main/resources\n    * @param servicesProvided Set of services provided by these facilities\n+   * @param institutional If the provider is institutional (true) or professional (false)\n    * @throws IOException if the file cannot be read\n    */\n   public static void loadProviders(Location location, String filename,\n-      Set<EncounterType> servicesProvided, long clinicianSeed)\n+      Set<EncounterType> servicesProvided, boolean institutional, long clinicianSeed)\n       throws IOException {\n     String resource = Utilities.readResource(filename);\n     Iterator<? extends Map<String,String>> csv = SimpleCSV.parseLineByLine(resource);\n@@ -367,6 +370,7 @@ public static void loadProviders(Location location, String filename,\n           || (abbreviation != null && abbreviation.equalsIgnoreCase(currState))) {\n \n         Provider parsed = csvLineToProvider(row);\n+        parsed.institutional = institutional;\n         parsed.servicesProvided.addAll(servicesProvided);\n \n         if (\"Yes\".equals(row.remove(\"emergency\"))) {"
  },
  {
    "sha": "c21372da1f6e1e2e3426b08201889fa6bca627b4",
    "filename": "src/main/java/org/mitre/synthea/world/concepts/Claim.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/synthetichealth/synthea/blob/1640e70f98554d6804609b27357cfcf964b269ed/src/main/java/org/mitre/synthea/world/concepts/Claim.java",
    "raw_url": "https://github.com/synthetichealth/synthea/raw/1640e70f98554d6804609b27357cfcf964b269ed/src/main/java/org/mitre/synthea/world/concepts/Claim.java",
    "contents_url": "https://api.github.com/repos/synthetichealth/synthea/contents/src/main/java/org/mitre/synthea/world/concepts/Claim.java?ref=1640e70f98554d6804609b27357cfcf964b269ed",
    "patch": "@@ -12,7 +12,7 @@\n \n public class Claim implements Serializable {\n \n-  private Entry mainEntry;\n+  public Entry mainEntry;\n   // The Entries have the actual cost, so the claim has the amount that the payer covered.\n   private double coveredCost;\n   public Payer payer;"
  },
  {
    "sha": "82566aa60ef771c433c91a9d268a5c3ee1be2d1d",
    "filename": "src/test/java/org/mitre/synthea/export/CSVExporterTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/synthetichealth/synthea/blob/1640e70f98554d6804609b27357cfcf964b269ed/src/test/java/org/mitre/synthea/export/CSVExporterTest.java",
    "raw_url": "https://github.com/synthetichealth/synthea/raw/1640e70f98554d6804609b27357cfcf964b269ed/src/test/java/org/mitre/synthea/export/CSVExporterTest.java",
    "contents_url": "https://api.github.com/repos/synthetichealth/synthea/contents/src/test/java/org/mitre/synthea/export/CSVExporterTest.java?ref=1640e70f98554d6804609b27357cfcf964b269ed",
    "patch": "@@ -29,7 +29,7 @@\n   \n   private static File exportDir;\n \n-  private static final int NUMBER_OF_FILES = 16;\n+  private static final int NUMBER_OF_FILES = 18;\n \n   /**\n    * Global setup for export tests."
  },
  {
    "sha": "8d2ed75870c437e7e6c506f382dbe42c919b37c8",
    "filename": "src/test/java/org/mitre/synthea/world/agents/ProviderTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/synthetichealth/synthea/blob/1640e70f98554d6804609b27357cfcf964b269ed/src/test/java/org/mitre/synthea/world/agents/ProviderTest.java",
    "raw_url": "https://github.com/synthetichealth/synthea/raw/1640e70f98554d6804609b27357cfcf964b269ed/src/test/java/org/mitre/synthea/world/agents/ProviderTest.java",
    "contents_url": "https://api.github.com/repos/synthetichealth/synthea/contents/src/test/java/org/mitre/synthea/world/agents/ProviderTest.java?ref=1640e70f98554d6804609b27357cfcf964b269ed",
    "patch": "@@ -223,7 +223,7 @@ public void testAllFiles() throws Exception {\n            try {\n              Provider.clear();\n              Provider.loadProviders(location, \"providers/\" + t.getFileName(),\n-                 providerServices, 1L);\n+                 providerServices, true, 1L);\n            } catch (Exception e) {\n              throw new RuntimeException(\"Failed to load provider file \" + t, e);\n            }"
  }
]
