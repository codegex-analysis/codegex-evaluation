[
  {
    "sha": "1e56eef18e74b0676853b29b8ad6fb276e7bb427",
    "filename": "src/main/java/redis/embedded/AbstractRedisInstance.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/AbstractRedisInstance.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/AbstractRedisInstance.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/AbstractRedisInstance.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -3,7 +3,11 @@\n import org.apache.commons.io.IOUtils;\n import redis.embedded.exceptions.EmbeddedRedisException;\n \n-import java.io.*;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n@@ -55,22 +59,19 @@ private void logErrors() {\n     }\n \n     private void awaitRedisServerReady() throws IOException {\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(redisProcess.getInputStream()));\n-        try {\n-            StringBuffer outputStringBuffer = new StringBuffer();\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(redisProcess.getInputStream()))) {\n+            StringBuilder outputStringBuffer = new StringBuilder();\n             String outputLine;\n             do {\n                 outputLine = reader.readLine();\n                 if (outputLine == null) {\n                     //Something goes wrong. Stream is ended before server was activated.\n-                    throw new RuntimeException(\"Can't start redis server. Check logs for details. Redis process log: \" + outputStringBuffer.toString());\n+                    throw new EmbeddedRedisException(\"Can't start redis server. Check logs for details. Redis process log: \" + outputStringBuffer.toString());\n                 } else {\n-                    outputStringBuffer.append(\"\\n\");\n+                    outputStringBuffer.append('\\n');\n                     outputStringBuffer.append(outputLine);\n                 }\n             } while (!outputLine.matches(redisReadyPattern()));\n-        } finally {\n-            IOUtils.closeQuietly(reader);\n         }\n     }\n "
  },
  {
    "sha": "fdc1aa036725d4599ee49a1fc9140efafe79f797",
    "filename": "src/main/java/redis/embedded/RedisCluster.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisCluster.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisCluster.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/RedisCluster.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -8,8 +8,8 @@\n import java.util.List;\n \n public class RedisCluster implements Redis {\n-    private final List<Redis> sentinels = new LinkedList<Redis>();\n-    private final List<Redis> servers = new LinkedList<Redis>();\n+    private final List<Redis> sentinels = new LinkedList<>();\n+    private final List<Redis> servers = new LinkedList<>();\n \n     RedisCluster(List<Redis> sentinels, List<Redis> servers) {\n         this.servers.addAll(servers);\n@@ -53,7 +53,7 @@ public void stop() throws EmbeddedRedisException {\n \n     @Override\n     public List<Integer> ports() {\n-        List<Integer> ports = new ArrayList<Integer>();\n+        List<Integer> ports = new ArrayList<>();\n         ports.addAll(sentinelPorts());\n         ports.addAll(serverPorts());\n         return ports;\n@@ -64,7 +64,7 @@ public void stop() throws EmbeddedRedisException {\n     }\n \n     public List<Integer> sentinelPorts() {\n-        List<Integer> ports = new ArrayList<Integer>();\n+        List<Integer> ports = new ArrayList<>();\n         for(Redis redis : sentinels) {\n             ports.addAll(redis.ports());\n         }\n@@ -76,7 +76,7 @@ public void stop() throws EmbeddedRedisException {\n     }\n \n     public List<Integer> serverPorts() {\n-        List<Integer> ports = new ArrayList<Integer>();\n+        List<Integer> ports = new ArrayList<>();\n         for(Redis redis : servers) {\n             ports.addAll(redis.ports());\n         }"
  },
  {
    "sha": "20938f0c6ce776556775b08f0d3a72554e88066a",
    "filename": "src/main/java/redis/embedded/RedisClusterBuilder.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisClusterBuilder.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisClusterBuilder.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/RedisClusterBuilder.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -16,7 +16,7 @@\n     private int quorumSize = 1;\n     private PortProvider sentinelPortProvider = new SequencePortProvider(26379);\n     private PortProvider replicationGroupPortProvider = new SequencePortProvider(6379);\n-    private final List<ReplicationGroup> groups = new LinkedList<ReplicationGroup>();\n+    private final List<ReplicationGroup> groups = new LinkedList<>();\n \n     public RedisClusterBuilder withSentinelBuilder(RedisSentinelBuilder sentinelBuilder) {\n         this.sentinelBuilder = sentinelBuilder;\n@@ -83,7 +83,7 @@ public RedisCluster build() {\n     }\n \n     private List<Redis> buildServers() {\n-        List<Redis> servers = new ArrayList<Redis>();\n+        List<Redis> servers = new ArrayList<>();\n         for(ReplicationGroup g : groups) {\n             servers.add(buildMaster(g));\n             buildSlaves(servers, g);\n@@ -108,7 +108,7 @@ private Redis buildMaster(ReplicationGroup g) {\n \n     private List<Redis> buildSentinels() {\n         int toBuild = this.sentinelCount;\n-        final List<Redis> sentinels = new LinkedList<Redis>();\n+        final List<Redis> sentinels = new LinkedList<>();\n         while (toBuild-- > 0) {\n             sentinels.add(buildSentinel());\n         }\n@@ -134,7 +134,7 @@ private int nextSentinelPort() {\n     private static class ReplicationGroup {\n         private final String masterName;\n         private final int masterPort;\n-        private final List<Integer> slavePorts = new LinkedList<Integer>();\n+        private final List<Integer> slavePorts = new LinkedList<>();\n \n         private ReplicationGroup(String masterName, int slaveCount, PortProvider portProvider) {\n             this.masterName = masterName;"
  },
  {
    "sha": "ab6b383f610c2317b1520358e2d3f400b03a86fe",
    "filename": "src/main/java/redis/embedded/RedisSentinel.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisSentinel.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisSentinel.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/RedisSentinel.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -8,7 +8,7 @@\n \n     public RedisSentinel(List<String> args, int port) {\n         super(port);\n-        this.args = new ArrayList<String>(args);\n+        this.args = new ArrayList<>(args);\n     }\n \n     public static RedisSentinelBuilder builder() { return new RedisSentinelBuilder(); }"
  },
  {
    "sha": "2113a9218803dc6b3c1808a8d835cdccfb9094a6",
    "filename": "src/main/java/redis/embedded/RedisSentinelBuilder.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisSentinelBuilder.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisSentinelBuilder.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/RedisSentinelBuilder.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -6,7 +6,7 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -139,7 +139,7 @@ private void resolveSentinelConf() throws IOException {\n \n         File redisConfigFile = File.createTempFile(resolveConfigName(), \".conf\");\n         redisConfigFile.deleteOnExit();\n-        Files.write(configString, redisConfigFile, Charset.forName(\"UTF-8\"));\n+        Files.asCharSink(redisConfigFile, StandardCharsets.UTF_8).write(configString);\n         sentinelConf = redisConfigFile.getAbsolutePath();\n     }\n \n@@ -150,7 +150,7 @@ private String resolveConfigName() {\n     private List<String> buildCommandArgs() {\n         Preconditions.checkNotNull(sentinelConf);\n \n-        List<String> args = new ArrayList<String>();\n+        List<String> args = new ArrayList<>();\n         args.add(executable.getAbsolutePath());\n         args.add(sentinelConf);\n         args.add(\"--sentinel\");"
  },
  {
    "sha": "67009bb93470f5047e7ce2f5e1dff303547ef1e1",
    "filename": "src/main/java/redis/embedded/RedisServer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisServer.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisServer.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/RedisServer.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -37,7 +37,7 @@ public RedisServer(RedisExecProvider redisExecProvider, int port) throws IOExcep\n \n     RedisServer(List<String> args, int port) {\n         super(port);\n-        this.args = new ArrayList<String>(args);\n+        this.args = new ArrayList<>(args);\n     }\n \n     public static RedisServerBuilder builder() {"
  },
  {
    "sha": "3f54dbf6f8434011afd57d928b3671cce841cb32",
    "filename": "src/main/java/redis/embedded/RedisServerBuilder.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisServerBuilder.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/RedisServerBuilder.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/RedisServerBuilder.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -8,6 +8,7 @@\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -97,7 +98,7 @@ private void resolveConfAndExec() throws IOException {\n         if (redisConf == null && redisConfigBuilder != null) {\n             File redisConfigFile = File.createTempFile(resolveConfigName(), \".conf\");\n             redisConfigFile.deleteOnExit();\n-            Files.write(redisConfigBuilder.toString(), redisConfigFile, Charset.forName(\"UTF-8\"));\n+            Files.asCharSink(redisConfigFile, StandardCharsets.UTF_8).write(redisConfigBuilder.toString());\n             redisConf = redisConfigFile.getAbsolutePath();\n         }\n \n@@ -113,7 +114,7 @@ private String resolveConfigName() {\n     }\n \n     private List<String> buildCommandArgs() {\n-        List<String> args = new ArrayList<String>();\n+        List<String> args = new ArrayList<>();\n         args.add(executable.getAbsolutePath());\n \n         if (!Strings.isNullOrEmpty(redisConf)) {"
  },
  {
    "sha": "dae576539b93d6a73faf24eb1f30945a87b2d19b",
    "filename": "src/main/java/redis/embedded/ports/EphemeralPortProvider.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/ports/EphemeralPortProvider.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/ports/EphemeralPortProvider.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/ports/EphemeralPortProvider.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -7,6 +7,7 @@\n import java.net.ServerSocket;\n \n public class EphemeralPortProvider implements PortProvider {\n+\n     @Override\n     public int next() {\n         try {"
  },
  {
    "sha": "5518d94b52f32aef34d0bb64fb1e5f1f960165b2",
    "filename": "src/main/java/redis/embedded/ports/PredefinedPortProvider.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/ports/PredefinedPortProvider.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/ports/PredefinedPortProvider.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/ports/PredefinedPortProvider.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -9,12 +9,12 @@\n import java.util.List;\n \n public class PredefinedPortProvider implements PortProvider {\n-    private final List<Integer> ports = new LinkedList<Integer>();\n+\n     private final Iterator<Integer> current;\n \n     public PredefinedPortProvider(Collection<Integer> ports) {\n-        this.ports.addAll(ports);\n-        this.current = this.ports.iterator();\n+        List<Integer> _ports = new LinkedList<>(ports);\n+        this.current = _ports.iterator();\n     }\n \n     @Override"
  },
  {
    "sha": "95c726a527faa81114fdd70a8c867b2af2a9c9a0",
    "filename": "src/main/java/redis/embedded/ports/SequencePortProvider.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/ports/SequencePortProvider.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/ports/SequencePortProvider.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/ports/SequencePortProvider.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -5,7 +5,8 @@\n import java.util.concurrent.atomic.AtomicInteger;\n \n public class SequencePortProvider implements PortProvider {\n-    private AtomicInteger currentPort = new AtomicInteger(26379);\n+\n+    private final AtomicInteger currentPort = new AtomicInteger(26379);\n \n     public SequencePortProvider() {\n     }"
  },
  {
    "sha": "f001eaa97f796be7f5f28597d943c96bd9ac6714",
    "filename": "src/main/java/redis/embedded/util/JedisUtil.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/util/JedisUtil.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/main/java/redis/embedded/util/JedisUtil.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/main/java/redis/embedded/util/JedisUtil.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -19,7 +19,7 @@\n     }\n \n     public static Set<String> portsToJedisHosts(List<Integer> ports) {\n-        Set<String> hosts = new HashSet<String>();\n+        Set<String> hosts = new HashSet<>();\n         for(Integer p : ports) {\n             hosts.add(\"localhost:\" + p);\n         }"
  },
  {
    "sha": "530084a97826f928c6ee049d3e8bc0f8cddae0c1",
    "filename": "src/test/java/redis/embedded/RedisClusterTest.java",
    "status": "modified",
    "additions": 80,
    "deletions": 35,
    "changes": 115,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/test/java/redis/embedded/RedisClusterTest.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/test/java/redis/embedded/RedisClusterTest.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/test/java/redis/embedded/RedisClusterTest.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -12,6 +12,7 @@\n import java.util.Set;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n@@ -25,7 +26,7 @@\n     private RedisCluster instance;\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp() {\n         sentinel1 = mock(Redis.class);\n         sentinel2 = mock(Redis.class);\n         master1 = mock(Redis.class);\n@@ -34,7 +35,7 @@ public void setUp() throws Exception {\n \n \n     @Test\n-    public void stopShouldStopEntireCluster() throws Exception {\n+    public void stopShouldStopEntireCluster() {\n         //given\n         final List<Redis> sentinels = Arrays.asList(sentinel1, sentinel2);\n         final List<Redis> servers = Arrays.asList(master1, master2);\n@@ -53,7 +54,7 @@ public void stopShouldStopEntireCluster() throws Exception {\n     }\n \n     @Test\n-    public void startShouldStartEntireCluster() throws Exception {\n+    public void startShouldStartEntireCluster() {\n         //given\n         final List<Redis> sentinels = Arrays.asList(sentinel1, sentinel2);\n         final List<Redis> servers = Arrays.asList(master1, master2);\n@@ -72,7 +73,7 @@ public void startShouldStartEntireCluster() throws Exception {\n     }\n \n     @Test\n-    public void isActiveShouldCheckEntireClusterIfAllActive() throws Exception {\n+    public void isActiveShouldCheckEntireClusterIfAllActive() {\n         //given\n         given(sentinel1.isActive()).willReturn(true);\n         given(sentinel2.isActive()).willReturn(true);\n@@ -95,7 +96,7 @@ public void isActiveShouldCheckEntireClusterIfAllActive() throws Exception {\n     }\n \n     @Test\n-    public void testSimpleOperationsAfterRunWithSingleMasterNoSlavesCluster() throws Exception {\n+    public void testSimpleOperationsAfterRunWithSingleMasterNoSlavesCluster() {\n         //given\n         final RedisCluster cluster = RedisCluster.builder().sentinelCount(1).replicationGroup(\"ourmaster\", 0).build();\n         cluster.start();\n@@ -107,14 +108,18 @@ public void testSimpleOperationsAfterRunWithSingleMasterNoSlavesCluster() throws\n             pool = new JedisSentinelPool(\"ourmaster\", Sets.newHashSet(\"localhost:26379\"));\n             jedis = testPool(pool);\n         } finally {\n-            if (jedis != null)\n-                pool.returnResource(jedis);\n+            if (jedis != null) {\n+                jedis.close();\n+            }\n+            if (pool != null) {\n+                pool.destroy();\n+            }\n             cluster.stop();\n         }\n     }\n \n     @Test\n-    public void testSimpleOperationsAfterRunWithSingleMasterAndOneSlave() throws Exception {\n+    public void testSimpleOperationsAfterRunWithSingleMasterAndOneSlave() {\n         //given\n         final RedisCluster cluster = RedisCluster.builder().sentinelCount(1).replicationGroup(\"ourmaster\", 1).build();\n         cluster.start();\n@@ -126,14 +131,18 @@ public void testSimpleOperationsAfterRunWithSingleMasterAndOneSlave() throws Exc\n             pool = new JedisSentinelPool(\"ourmaster\", Sets.newHashSet(\"localhost:26379\"));\n             jedis = testPool(pool);\n         } finally {\n-            if (jedis != null)\n-                pool.returnResource(jedis);\n+            if (jedis != null) {\n+                jedis.close();\n+            }\n+            if (pool != null) {\n+                pool.destroy();\n+            }\n             cluster.stop();\n         }\n     }\n \n     @Test\n-    public void testSimpleOperationsAfterRunWithSingleMasterMultipleSlaves() throws Exception {\n+    public void testSimpleOperationsAfterRunWithSingleMasterMultipleSlaves() {\n         //given\n         final RedisCluster cluster = RedisCluster.builder().sentinelCount(1).replicationGroup(\"ourmaster\", 2).build();\n         cluster.start();\n@@ -145,14 +154,18 @@ public void testSimpleOperationsAfterRunWithSingleMasterMultipleSlaves() throws\n             pool = new JedisSentinelPool(\"ourmaster\", Sets.newHashSet(\"localhost:26379\"));\n             jedis = testPool(pool);\n         } finally {\n-            if (jedis != null)\n-                pool.returnResource(jedis);\n+            if (jedis != null) {\n+                jedis.close();\n+            }\n+            if (pool != null) {\n+                pool.destroy();\n+            }\n             cluster.stop();\n         }\n     }\n \n     @Test\n-    public void testSimpleOperationsAfterRunWithTwoSentinelsSingleMasterMultipleSlaves() throws Exception {\n+    public void testSimpleOperationsAfterRunWithTwoSentinelsSingleMasterMultipleSlaves() {\n         //given\n         final RedisCluster cluster = RedisCluster.builder().sentinelCount(2).replicationGroup(\"ourmaster\", 2).build();\n         cluster.start();\n@@ -164,14 +177,18 @@ public void testSimpleOperationsAfterRunWithTwoSentinelsSingleMasterMultipleSlav\n             pool = new JedisSentinelPool(\"ourmaster\", Sets.newHashSet(\"localhost:26379\", \"localhost:26380\"));\n             jedis = testPool(pool);\n         } finally {\n-            if (jedis != null)\n-                pool.returnResource(jedis);\n+            if (jedis != null) {\n+                jedis.close();\n+            }\n+            if (pool != null) {\n+                pool.destroy();\n+            }\n             cluster.stop();\n         }\n     }\n \n     @Test\n-    public void testSimpleOperationsAfterRunWithTwoPredefinedSentinelsSingleMasterMultipleSlaves() throws Exception {\n+    public void testSimpleOperationsAfterRunWithTwoPredefinedSentinelsSingleMasterMultipleSlaves()  {\n         //given\n         List<Integer> sentinelPorts = Arrays.asList(26381, 26382);\n         final RedisCluster cluster = RedisCluster.builder().sentinelPorts(sentinelPorts).replicationGroup(\"ourmaster\", 2).build();\n@@ -185,14 +202,18 @@ public void testSimpleOperationsAfterRunWithTwoPredefinedSentinelsSingleMasterMu\n             pool = new JedisSentinelPool(\"ourmaster\", sentinelHosts);\n             jedis = testPool(pool);\n         } finally {\n-            if (jedis != null)\n-                pool.returnResource(jedis);\n+            if (jedis != null) {\n+                jedis.close();\n+            }\n+            if (pool != null) {\n+                pool.destroy();\n+            }\n             cluster.stop();\n         }\n     }\n \n     @Test\n-    public void testSimpleOperationsAfterRunWithThreeSentinelsThreeMastersOneSlavePerMasterCluster() throws Exception {\n+    public void testSimpleOperationsAfterRunWithThreeSentinelsThreeMastersOneSlavePerMasterCluster() {\n         //given\n         final String master1 = \"master1\";\n         final String master2 = \"master2\";\n@@ -219,18 +240,30 @@ public void testSimpleOperationsAfterRunWithThreeSentinelsThreeMastersOneSlavePe\n             jedis2 = testPool(pool2);\n             jedis3 = testPool(pool3);\n         } finally {\n-            if (jedis1 != null)\n-                pool1.returnResource(jedis1);\n-            if (jedis2 != null)\n-                pool2.returnResource(jedis2);\n-            if (jedis3 != null)\n-                pool3.returnResource(jedis3);\n+            if (jedis1 != null) {\n+                jedis1.close();\n+            }\n+            if (pool1 != null) {\n+                pool1.destroy();\n+            }\n+            if (jedis2 != null) {\n+                jedis2.close();\n+            }\n+            if (pool2 != null) {\n+                pool2.destroy();\n+            }\n+            if (jedis3 != null) {\n+                jedis3.close();\n+            }\n+            if (pool3 != null) {\n+                pool3.destroy();\n+            }\n             cluster.stop();\n         }\n     }\n \n     @Test\n-    public void testSimpleOperationsAfterRunWithThreeSentinelsThreeMastersOneSlavePerMasterEphemeralCluster() throws Exception {\n+    public void testSimpleOperationsAfterRunWithThreeSentinelsThreeMastersOneSlavePerMasterEphemeralCluster() {\n         //given\n         final String master1 = \"master1\";\n         final String master2 = \"master2\";\n@@ -258,12 +291,24 @@ public void testSimpleOperationsAfterRunWithThreeSentinelsThreeMastersOneSlavePe\n             jedis2 = testPool(pool2);\n             jedis3 = testPool(pool3);\n         } finally {\n-            if (jedis1 != null)\n-                pool1.returnResource(jedis1);\n-            if (jedis2 != null)\n-                pool2.returnResource(jedis2);\n-            if (jedis3 != null)\n-                pool3.returnResource(jedis3);\n+            if (jedis1 != null) {\n+                jedis1.close();\n+            }\n+            if (pool1 != null) {\n+                pool1.destroy();\n+            }\n+            if (jedis2 != null) {\n+                jedis2.close();\n+            }\n+            if (pool2 != null) {\n+                pool2.destroy();\n+            }\n+            if (jedis3 != null) {\n+                jedis3.close();\n+            }\n+            if (pool3 != null) {\n+                pool3.destroy();\n+            }\n             cluster.stop();\n         }\n     }\n@@ -276,7 +321,7 @@ private Jedis testPool(JedisSentinelPool pool) {\n         //then\n         assertEquals(\"1\", jedis.mget(\"abc\").get(0));\n         assertEquals(\"2\", jedis.mget(\"def\").get(0));\n-        assertEquals(null, jedis.mget(\"xyz\").get(0));\n+        assertNull(jedis.mget(\"xyz\").get(0));\n         return jedis;\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "3e28ab293025a0317a83cc8b6ab8accd4673d495",
    "filename": "src/test/java/redis/embedded/RedisSentinelTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 11,
    "changes": 25,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/test/java/redis/embedded/RedisSentinelTest.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/test/java/redis/embedded/RedisSentinelTest.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/test/java/redis/embedded/RedisSentinelTest.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -10,7 +10,9 @@\n import java.io.InputStreamReader;\n import java.util.concurrent.TimeUnit;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n public class RedisSentinelTest {\n     private RedisSentinel sentinel;\n@@ -28,7 +30,7 @@ public void testSimpleRun() throws Exception {\n     }\n \n     @Test\n-    public void shouldAllowSubsequentRuns() throws Exception {\n+    public void shouldAllowSubsequentRuns() {\n         sentinel = RedisSentinel.builder().build();\n         sentinel.start();\n         sentinel.stop();\n@@ -62,8 +64,12 @@ public void testSimpleOperationsAfterRun() throws Exception {\n             assertEquals(\"2\", jedis.mget(\"def\").get(0));\n             assertNull(jedis.mget(\"xyz\").get(0));\n         } finally {\n-            if (jedis != null)\n-                pool.returnResource(jedis);\n+            if (jedis != null) {\n+                jedis.close();\n+            }\n+            if (pool != null) {\n+                pool.destroy();\n+            }\n             sentinel.stop();\n             server.stop();\n         }\n@@ -75,20 +81,17 @@ public void testAwaitRedisSentinelReady() throws Exception {\n \n         assertReadyPattern(new BufferedReader(\n                         new InputStreamReader(getClass()\n-                                .getClassLoader()\n-                                .getResourceAsStream(\"redis-2.x-sentinel-startup-output.txt\"))),\n+                                .getResourceAsStream(\"/redis-2.x-sentinel-startup-output.txt\"))),\n                 readyPattern);\n \n         assertReadyPattern(new BufferedReader(\n                         new InputStreamReader(getClass()\n-                                .getClassLoader()\n-                                .getResourceAsStream(\"redis-3.x-sentinel-startup-output.txt\"))),\n+                                .getResourceAsStream(\"/redis-3.x-sentinel-startup-output.txt\"))),\n                 readyPattern);\n \n         assertReadyPattern(new BufferedReader(\n                         new InputStreamReader(getClass()\n-                                .getClassLoader()\n-                                .getResourceAsStream(\"redis-4.x-sentinel-startup-output.txt\"))),\n+                                .getResourceAsStream(\"/redis-4.x-sentinel-startup-output.txt\"))),\n                 readyPattern);\n     }\n \n@@ -99,4 +102,4 @@ private void assertReadyPattern(BufferedReader reader, String readyPattern) thro\n             assertNotNull(outputLine);\n         } while (!outputLine.matches(readyPattern));\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "902971b70f8e56e18124ff09cb35c18a8f87291a",
    "filename": "src/test/java/redis/embedded/RedisServerClusterTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 6,
    "changes": 17,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/test/java/redis/embedded/RedisServerClusterTest.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/test/java/redis/embedded/RedisServerClusterTest.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/test/java/redis/embedded/RedisServerClusterTest.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -7,14 +7,15 @@\n import redis.clients.jedis.JedisPool;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n \n public class RedisServerClusterTest {\n \n     private RedisServer redisServer1;\n     private RedisServer redisServer2;\n \n     @Before\n-    public void setUp() throws Exception {\n+    public void setUp()  {\n         redisServer1 = RedisServer.builder()\n                 .port(6300)\n                 .build();\n@@ -29,7 +30,7 @@ public void setUp() throws Exception {\n     }\n \n     @Test\n-    public void testSimpleOperationsAfterRun() throws Exception {\n+    public void testSimpleOperationsAfterRun()  {\n         JedisPool pool = null;\n         Jedis jedis = null;\n         try {\n@@ -39,16 +40,20 @@ public void testSimpleOperationsAfterRun() throws Exception {\n \n             assertEquals(\"1\", jedis.mget(\"abc\").get(0));\n             assertEquals(\"2\", jedis.mget(\"def\").get(0));\n-            assertEquals(null, jedis.mget(\"xyz\").get(0));\n+            assertNull(jedis.mget(\"xyz\").get(0));\n         } finally {\n-            if (jedis != null)\n-                pool.returnResource(jedis);\n+            if (jedis != null) {\n+                jedis.close();\n+            }\n+            if (pool != null) {\n+                pool.destroy();\n+            }\n         }\n     }\n \n \n     @After\n-    public void tearDown() throws Exception {\n+    public void tearDown() {\n         redisServer1.stop();\n         redisServer2.stop();\n     }"
  },
  {
    "sha": "748fe5bc152ae8f0d6691c96c3ce0d21bee6c8ca",
    "filename": "src/test/java/redis/embedded/RedisServerTest.java",
    "status": "modified",
    "additions": 23,
    "deletions": 19,
    "changes": 42,
    "blob_url": "https://github.com/signalapp/embedded-redis/blob/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/test/java/redis/embedded/RedisServerTest.java",
    "raw_url": "https://github.com/signalapp/embedded-redis/raw/6ad854abd1fd430ae66475c6d65b18c52a83ca20/src/test/java/redis/embedded/RedisServerTest.java",
    "contents_url": "https://api.github.com/repos/signalapp/embedded-redis/contents/src/test/java/redis/embedded/RedisServerTest.java?ref=6ad854abd1fd430ae66475c6d65b18c52a83ca20",
    "patch": "@@ -12,7 +12,11 @@\n import java.io.IOException;\n import java.io.InputStreamReader;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n public class RedisServerTest {\n \n@@ -27,7 +31,7 @@ public void testSimpleRun() throws Exception {\n \t}\n \n \t@Test(expected = RuntimeException.class)\n-\tpublic void shouldNotAllowMultipleRunsWithoutStop() throws Exception {\n+\tpublic void shouldNotAllowMultipleRunsWithoutStop() {\n \t\ttry {\n \t\t\tredisServer = new RedisServer(6379);\n \t\t\tredisServer.start();\n@@ -38,7 +42,7 @@ public void shouldNotAllowMultipleRunsWithoutStop() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void shouldAllowSubsequentRuns() throws Exception {\n+\tpublic void shouldAllowSubsequentRuns() {\n \t\tredisServer = new RedisServer(6379);\n \t\tredisServer.start();\n \t\tredisServer.stop();\n@@ -51,7 +55,7 @@ public void shouldAllowSubsequentRuns() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void testSimpleOperationsAfterRun() throws Exception {\n+\tpublic void testSimpleOperationsAfterRun() {\n \t\tredisServer = new RedisServer(6379);\n \t\tredisServer.start();\n \n@@ -66,36 +70,40 @@ public void testSimpleOperationsAfterRun() throws Exception {\n \t\t\tassertEquals(\"2\", jedis.mget(\"def\").get(0));\n \t\t\tassertNull(jedis.mget(\"xyz\").get(0));\n \t\t} finally {\n-\t\t\tif (jedis != null)\n-\t\t\t\tpool.returnResource(jedis);\n+\t\t\tif (jedis != null) {\n+\t\t\t\tjedis.close();\n+\t\t\t}\n+\t\t\tif (pool != null) {\n+\t\t\t\tpool.destroy();\n+\t\t\t}\n \t\t\tredisServer.stop();\n \t\t}\n \t}\n \n     @Test\n-    public void shouldIndicateInactiveBeforeStart() throws Exception {\n+    public void shouldIndicateInactiveBeforeStart() {\n         redisServer = new RedisServer(6379);\n         assertFalse(redisServer.isActive());\n     }\n \n     @Test\n-    public void shouldIndicateActiveAfterStart() throws Exception {\n+    public void shouldIndicateActiveAfterStart() {\n         redisServer = new RedisServer(6379);\n         redisServer.start();\n         assertTrue(redisServer.isActive());\n         redisServer.stop();\n     }\n \n     @Test\n-    public void shouldIndicateInactiveAfterStop() throws Exception {\n+    public void shouldIndicateInactiveAfterStop() {\n         redisServer = new RedisServer(6379);\n         redisServer.start();\n         redisServer.stop();\n         assertFalse(redisServer.isActive());\n     }\n \n     @Test\n-    public void shouldOverrideDefaultExecutable() throws Exception {\n+    public void shouldOverrideDefaultExecutable() {\n         RedisExecProvider customProvider = RedisExecProvider.defaultProvider()\n                 .override(OS.UNIX, Architecture.x86, Resources.getResource(\"redis-server-6.0.5-32\").getFile())\n                 .override(OS.UNIX, Architecture.x86_64, Resources.getResource(\"redis-server-6.0.5\").getFile())\n@@ -107,7 +115,7 @@ public void shouldOverrideDefaultExecutable() throws Exception {\n     }\n \n     @Test(expected = RedisBuildingException.class)\n-    public void shouldFailWhenBadExecutableGiven() throws Exception {\n+    public void shouldFailWhenBadExecutableGiven() {\n         RedisExecProvider buggyProvider = RedisExecProvider.defaultProvider()\n                 .override(OS.UNIX, \"some\")\n                 .override(OS.WINDOWS, Architecture.x86, \"some\")\n@@ -125,26 +133,22 @@ public void testAwaitRedisServerReady() throws Exception {\n \n \t\tassertReadyPattern(new BufferedReader(\n \t\t\t\t\t\tnew InputStreamReader(getClass()\n-\t\t\t\t\t\t\t\t.getClassLoader()\n-\t\t\t\t\t\t\t\t.getResourceAsStream(\"redis-2.x-standalone-startup-output.txt\"))),\n+\t\t\t\t\t\t\t\t.getResourceAsStream(\"/redis-2.x-standalone-startup-output.txt\"))),\n \t\t\t\treadyPattern);\n \n \t\tassertReadyPattern(new BufferedReader(\n \t\t\t\t\t\tnew InputStreamReader(getClass()\n-\t\t\t\t\t\t\t\t.getClassLoader()\n-\t\t\t\t\t\t\t\t.getResourceAsStream(\"redis-3.x-standalone-startup-output.txt\"))),\n+\t\t\t\t\t\t\t\t.getResourceAsStream(\"/redis-3.x-standalone-startup-output.txt\"))),\n \t\t\t\treadyPattern);\n \n \t\tassertReadyPattern(new BufferedReader(\n \t\t\t\t\t\tnew InputStreamReader(getClass()\n-\t\t\t\t\t\t\t\t.getClassLoader()\n-\t\t\t\t\t\t\t\t.getResourceAsStream(\"redis-4.x-standalone-startup-output.txt\"))),\n+\t\t\t\t\t\t\t\t.getResourceAsStream(\"/redis-4.x-standalone-startup-output.txt\"))),\n \t\t\t\treadyPattern);\n \n \t\tassertReadyPattern(new BufferedReader(\n \t\t\t\t\t\tnew InputStreamReader(getClass()\n-\t\t\t\t\t\t\t\t.getClassLoader()\n-\t\t\t\t\t\t\t\t.getResourceAsStream(\"redis-6.x-standalone-startup-output.txt\"))),\n+\t\t\t\t\t\t\t\t.getResourceAsStream(\"/redis-6.x-standalone-startup-output.txt\"))),\n \t\t\t\treadyPattern);\n \t}\n "
  }
]
