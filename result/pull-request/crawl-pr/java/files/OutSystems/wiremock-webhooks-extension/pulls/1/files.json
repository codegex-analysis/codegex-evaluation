[
  {
    "sha": "5bb97becc94661b86dadf8ea6ab33500c9789f1a",
    "filename": "src/main/java/org/wiremock/webhooks/AddRequestIdWebhookTransformer.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/OutSystems/wiremock-webhooks-extension/blob/107ee83e91e45429ae77acb6907d6adefc0aeda3/src/main/java/org/wiremock/webhooks/AddRequestIdWebhookTransformer.java",
    "raw_url": "https://github.com/OutSystems/wiremock-webhooks-extension/raw/107ee83e91e45429ae77acb6907d6adefc0aeda3/src/main/java/org/wiremock/webhooks/AddRequestIdWebhookTransformer.java",
    "contents_url": "https://api.github.com/repos/OutSystems/wiremock-webhooks-extension/contents/src/main/java/org/wiremock/webhooks/AddRequestIdWebhookTransformer.java?ref=107ee83e91e45429ae77acb6907d6adefc0aeda3",
    "patch": "@@ -0,0 +1,33 @@\n+package org.wiremock.webhooks;\n+\n+import com.github.tomakehurst.wiremock.common.Notifier;\n+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;\n+import org.wiremock.webhooks.interceptors.WebhookTransformer;\n+import org.wiremock.webhooks.WebhookDefinition;\n+import wiremock.com.jayway.jsonpath.JsonPath;\n+\n+public class AddRequestIdWebhookTransformer implements WebhookTransformer {\n+\n+    private Notifier notifier;\n+  \n+    public AddRequestIdWebhookTransformer(Notifier notifier) {\n+        this.notifier = notifier;\n+    }\n+  \n+    @Override\n+    public WebhookDefinition transform(ServeEvent serveEvent, WebhookDefinition webhookDefinition) {\n+        this.notifier.info(\"Running the AddRequestIdWebhookTransformer\");\n+\n+        String body = serveEvent.getResponse().getBodyAsString();\n+        this.notifier.info(\"Response body = \" + body);\n+\n+        String requestId = JsonPath.read(body, \"$.request_id\");\n+        this.notifier.info(\"RequestId = \" + requestId);\n+\n+        String finalBody = webhookDefinition.getBody().replace(\"{{request_id}}\", requestId);\n+\n+        this.notifier.info(\"Callback body = \" + finalBody);\n+  \n+        return webhookDefinition.withBody(finalBody);\n+    }\n+  }\n\\ No newline at end of file"
  },
  {
    "sha": "fb9975460d96370c5ef237d229c8735fcc69d800",
    "filename": "src/main/java/org/wiremock/webhooks/CognitoHttpHeaderWebhookTransformer.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/OutSystems/wiremock-webhooks-extension/blob/107ee83e91e45429ae77acb6907d6adefc0aeda3/src/main/java/org/wiremock/webhooks/CognitoHttpHeaderWebhookTransformer.java",
    "raw_url": "https://github.com/OutSystems/wiremock-webhooks-extension/raw/107ee83e91e45429ae77acb6907d6adefc0aeda3/src/main/java/org/wiremock/webhooks/CognitoHttpHeaderWebhookTransformer.java",
    "contents_url": "https://api.github.com/repos/OutSystems/wiremock-webhooks-extension/contents/src/main/java/org/wiremock/webhooks/CognitoHttpHeaderWebhookTransformer.java?ref=107ee83e91e45429ae77acb6907d6adefc0aeda3",
    "patch": "@@ -0,0 +1,119 @@\n+package org.wiremock.webhooks;\n+\n+\n+import com.github.tomakehurst.wiremock.client.BasicCredentials;\n+import com.github.tomakehurst.wiremock.common.Notifier;\n+import com.github.tomakehurst.wiremock.http.HttpClientFactory;\n+import com.github.tomakehurst.wiremock.http.HttpHeader;\n+import com.github.tomakehurst.wiremock.stubbing.ServeEvent;\n+import org.wiremock.webhooks.interceptors.WebhookTransformer;\n+import org.wiremock.webhooks.WebhookDefinition;\n+import wiremock.com.jayway.jsonpath.JsonPath;\n+import wiremock.org.apache.commons.io.IOUtils;\n+import wiremock.org.apache.http.client.HttpClient;\n+import wiremock.org.apache.http.client.methods.*;\n+import wiremock.org.apache.http.entity.ContentType;\n+import wiremock.org.apache.http.entity.StringEntity;\n+import wiremock.org.apache.http.Header;\n+import wiremock.org.apache.http.HttpResponse;\n+import com.github.tomakehurst.wiremock.verification.LoggedRequest;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+\n+public class CognitoHttpHeaderWebhookTransformer implements WebhookTransformer {\n+\n+    private Notifier notifier;\n+\n+    public CognitoHttpHeaderWebhookTransformer(Notifier notifier) {\n+        this.notifier = notifier;\n+    }\n+\n+    @Override\n+    public WebhookDefinition transform(ServeEvent serveEvent, WebhookDefinition webhookDefinition) {\n+        return webhookDefinition.withHeader(\"Authorization\", this.getAccessToken(serveEvent));\n+    }\n+\n+    private String getAccessToken(ServeEvent serveEvent) {\n+        try {\n+\n+            LoggedRequest loggedRequest = serveEvent.getRequest();\n+            this.notifier.info(\"url = \" + loggedRequest.getUrl());\n+            this.notifier.info(\"absoluteUrl = \" + loggedRequest.getAbsoluteUrl());\n+\n+            String suffix = loggedRequest.getUrl().split(\"\\\\/\")[1].toUpperCase();\n+            this.notifier.info(\"suffix to use for callback = \" + suffix);\n+\n+            // Reads cognito configurations from environment variables\n+            String cognitoUrl = System.getenv(\"COGNITO_URL_\" + suffix);\n+            String cognitoClientId = System.getenv(\"COGNITO_CLIENT_ID_\" + suffix);\n+            String cognitoClientSecret = System.getenv(\"COGNITO_CLIENT_SECRET_\" + suffix);\n+\n+            // Fallback in case the prefix variables are not defined\n+            if (cognitoUrl == null || cognitoUrl.length() == 0) {\n+                this.notifier.info(\"cognitoUrl not defined, using fallback\");\n+                cognitoUrl = System.getenv(\"COGNITO_URL\");\n+            }\n+            if (cognitoClientId == null || cognitoClientId.length() == 0) {\n+                this.notifier.info(\"cognitoClientId not defined, using fallback\");\n+                cognitoClientId = System.getenv(\"COGNITO_CLIENT_ID\");\n+            }\n+            if (cognitoClientSecret == null || cognitoUrl.length() == 0) {\n+                this.notifier.info(\"cognitoClientSecret not defined, using fallback\");\n+                cognitoClientSecret = System.getenv(\"COGNITO_CLIENT_SECRET\");\n+            }\n+\n+            this.notifier.info(\"COGNITO_URL = \" + cognitoUrl);\n+            this.notifier.info(\"COGNITO_CLIENT_ID = \" + cognitoClientId);\n+            this.notifier.info(\"COGNITO_CLIENT_SECRET size = \" + (\"\" + cognitoClientSecret).length());\n+\n+            // Add headers\n+            ArrayList<HttpHeader> headers = new ArrayList<HttpHeader>();\n+            headers.add(new HttpHeader(\"Content-Type\", \"application/x-www-form-urlencoded\"));\n+            BasicCredentials basicCredentials = new BasicCredentials(cognitoClientId, cognitoClientSecret);\n+            headers.add(new HttpHeader(\"Authorization\", basicCredentials.asAuthorizationHeaderValue()));\n+\n+            // Builds the body\n+            String body = \"grant_type=client_credentials&client_id=\" +  cognitoClientId + \"&scope=\";\n+            \n+            // Calls cognito\n+            HttpUriRequest request = buildRequestWithHeaders(cognitoUrl, headers, body);\n+            HttpClient httpClient = HttpClientFactory.createClient();\n+            HttpResponse response = httpClient.execute(request);\n+            this.notifier.info(\"Cognito call done\");\n+            this.notifier.info(\"Status code: \" + response.getStatusLine().getStatusCode());\n+\n+            // Checks the response\n+            if (response.getStatusLine().getStatusCode() != 200) {\n+                throw new RuntimeException(\"Error getting cognito token\");\n+            }\n+\n+            // Returns the token\n+            String getTokenResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n+            String accessToken = JsonPath.read(getTokenResponse, \"$.access_token\");\n+\n+            this.notifier.info(\"Authorization token is: \" + accessToken.substring(0, 10) + \"...\");\n+\n+            return accessToken;\n+\n+        } catch (IOException e) {\n+            this.notifier.info(\"Error: \" + e.getMessage());\n+            throw new RuntimeException(e);\n+        }        \n+    }\n+\n+    private static HttpUriRequest buildRequestWithHeaders(String url, ArrayList<HttpHeader> headers, String body) {\n+        HttpUriRequest request = new HttpPost(url);\n+\n+        for (HttpHeader header: headers) {\n+            request.addHeader(header.key(), header.firstValue());\n+        }\n+\n+        HttpEntityEnclosingRequestBase entityRequest = (HttpEntityEnclosingRequestBase) request;\n+        entityRequest.setEntity(new StringEntity(body, ContentType.create(\"application/json\")));\n+\n+        return request;\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "c4c5608ba043de27bdaca4e0b0b10ea0a854d34b",
    "filename": "src/main/java/org/wiremock/webhooks/WebhookDefinition.java",
    "status": "modified",
    "additions": 26,
    "deletions": 1,
    "changes": 27,
    "blob_url": "https://github.com/OutSystems/wiremock-webhooks-extension/blob/107ee83e91e45429ae77acb6907d6adefc0aeda3/src/main/java/org/wiremock/webhooks/WebhookDefinition.java",
    "raw_url": "https://github.com/OutSystems/wiremock-webhooks-extension/raw/107ee83e91e45429ae77acb6907d6adefc0aeda3/src/main/java/org/wiremock/webhooks/WebhookDefinition.java",
    "contents_url": "https://api.github.com/repos/OutSystems/wiremock-webhooks-extension/contents/src/main/java/org/wiremock/webhooks/WebhookDefinition.java?ref=107ee83e91e45429ae77acb6907d6adefc0aeda3",
    "patch": "@@ -20,20 +20,26 @@\n     private List<HttpHeader> headers;\n     private Body body = Body.none();\n     private String delayInSeconds;\n+    private String setRequestId;\n+    private String useCognitoAuthentication;\n \n     @JsonCreator\n     public WebhookDefinition(@JsonProperty(\"method\") RequestMethod method,\n                              @JsonProperty(\"url\") URI url,\n                              @JsonProperty(\"headers\") HttpHeaders headers,\n                              @JsonProperty(\"body\") String body,\n                              @JsonProperty(\"base64Body\") String base64Body,\n-                             @JsonProperty(\"delayInSeconds\") String delayInSeconds) {\n+                             @JsonProperty(\"delayInSeconds\") String delayInSeconds,\n+                             @JsonProperty(\"setRequestId\") String setRequestId,\n+                             @JsonProperty(\"useCognitoAuthentication\") String useCognitoAuthentication) {\n         this.method = method;\n         this.url = url;\n         this.headers = newArrayList(headers.all());\n         this.body = Body.fromOneOf(null, body, null, base64Body);\n \n         this.delayInSeconds = delayInSeconds;\n+        this.setRequestId = setRequestId != null ? setRequestId : \"false\";\n+        this.useCognitoAuthentication = useCognitoAuthentication != null ? useCognitoAuthentication : \"false\";\n     }\n \n     public WebhookDefinition() {\n@@ -73,6 +79,14 @@ public String getDelayInSeconds() {\n         return this.delayInSeconds;\n     }\n \n+    public String getSetRequestId() {\n+        return this.setRequestId;\n+    }\n+\n+    public String getUseCognitoAuthentication() {\n+        return this.useCognitoAuthentication;\n+    }\n+\n     public WebhookDefinition withUrl(URI url) {\n         this.url = url;\n         return this;\n@@ -112,4 +126,15 @@ public WebhookDefinition withDelayInSeconds(String delayInSeconds) {\n         return this;\n     }\n \n+    public WebhookDefinition withSetRequestId(String setRequestId) {\n+        this.setRequestId = setRequestId;\n+        return this;\n+    }\n+\n+    public WebhookDefinition withUseCognitoAuthentication(String useCognitoAuthentication) {\n+        this.useCognitoAuthentication = useCognitoAuthentication;\n+        return this;\n+    }\n+\n }\n+"
  },
  {
    "sha": "2efafed99eecd2ba5ac58e87307d9c52e9ac3a5a",
    "filename": "src/main/java/org/wiremock/webhooks/Webhooks.java",
    "status": "modified",
    "additions": 54,
    "deletions": 20,
    "changes": 74,
    "blob_url": "https://github.com/OutSystems/wiremock-webhooks-extension/blob/107ee83e91e45429ae77acb6907d6adefc0aeda3/src/main/java/org/wiremock/webhooks/Webhooks.java",
    "raw_url": "https://github.com/OutSystems/wiremock-webhooks-extension/raw/107ee83e91e45429ae77acb6907d6adefc0aeda3/src/main/java/org/wiremock/webhooks/Webhooks.java",
    "contents_url": "https://api.github.com/repos/OutSystems/wiremock-webhooks-extension/contents/src/main/java/org/wiremock/webhooks/Webhooks.java?ref=107ee83e91e45429ae77acb6907d6adefc0aeda3",
    "patch": "@@ -14,6 +14,8 @@\n import wiremock.org.apache.http.entity.ByteArrayEntity;\n import wiremock.org.apache.http.util.EntityUtils;\n import org.wiremock.webhooks.interceptors.WebhookTransformer;\n+import org.wiremock.webhooks.CognitoHttpHeaderWebhookTransformer;\n+import org.wiremock.webhooks.AddRequestIdWebhookTransformer;\n \n import java.io.IOException;\n import java.util.ArrayList;\n@@ -59,27 +61,58 @@ public String getName() {\n     public void doAction(final ServeEvent serveEvent, final Admin admin, final Parameters parameters) {\n         final Notifier notifier = notifier();\n \n-        notifier.info(\"doAction on Webhooks\");\n+        List<WebhookTransformer> localTransformers = new ArrayList<WebhookTransformer>();\n \n-        WebhookDefinition definition = parameters.as(WebhookDefinition.class);\n-        for (WebhookTransformer transformer: transformers) {\n-            definition = transformer.transform(serveEvent, definition);\n-        }\n-\n-        notifier.info(\"Delay in seconds is \" + definition.getDelayInSeconds());\n-        Long delayInSeconds = \n-            definition.getDelayInSeconds() == null || definition.getDelayInSeconds().isEmpty()\n-            ? 0L\n-            : Long.valueOf(definition.getDelayInSeconds());\n-\n-        HttpUriRequest request = buildRequest(definition);\n+        notifier.info(\"doAction on Webhooks: \" + serveEvent.getResponse().getBodyAsString());\n \n-        notifier.info(\"Scheduling...\");\n-        scheduler.schedule(\n-            (Runnable)(new WebhookRunner(definition, request, this.httpClient, notifier)),\n-            delayInSeconds.longValue(),\n-            SECONDS\n-        );\n+        try {\n+            WebhookDefinition definition = parameters.as(WebhookDefinition.class);\n+\n+            // Adds the custom transformers\n+            notifier.info(\"Adding custom transformers\");\n+            notifier.info(\"Set request id: \" + definition.getSetRequestId());\n+            if (definition.getSetRequestId() != null && definition.getSetRequestId().equals(\"true\")) {\n+                notifier.info(\"Adding AddRequestIdWebhookTransformer\"); \n+                localTransformers.add(new AddRequestIdWebhookTransformer(notifier));\n+            }\n+\n+            notifier.info(\"Use Cognito Authentication: \" + definition.getUseCognitoAuthentication());\n+            if (definition.getUseCognitoAuthentication() != null && definition.getUseCognitoAuthentication().equals(\"true\")) {\n+                notifier.info(\"Adding CognitoHttpHeaderWebhookTransformer\"); \n+                localTransformers.add(new CognitoHttpHeaderWebhookTransformer(notifier));\n+            }\n+\n+            // Runs the custom transformers\n+            for (WebhookTransformer transformer: localTransformers) {\n+                notifier.info(\"Executing custom transformer...\");\n+                definition = transformer.transform(serveEvent, definition);\n+            }\n+\n+            // Runs the transformers (legacy code)\n+            for (WebhookTransformer transformer: transformers) {\n+                notifier.info(\"Executing transformer...\");\n+                definition = transformer.transform(serveEvent, definition);\n+            }\n+            \n+            // Handles the delay in seconds\n+            notifier.info(\"Delay in seconds is \" + definition.getDelayInSeconds());\n+            Long delayInSeconds = \n+                definition.getDelayInSeconds() == null || definition.getDelayInSeconds().isEmpty()\n+                ? 0L\n+                : Long.valueOf(definition.getDelayInSeconds());\n+\n+            // Executes the webhook\n+            HttpUriRequest request = buildRequest(definition);\n+            notifier.info(\"Scheduling...\");\n+            scheduler.schedule(\n+                (Runnable)(new WebhookRunner(definition, request, this.httpClient, notifier)),\n+                delayInSeconds.longValue(),\n+                SECONDS\n+            );\n+        } catch (Exception e) {\n+            notifier.info(\"Error on Webhooks: \" + e.getMessage());\n+            throw e;\n+        }\n     }\n \n     private static HttpUriRequest buildRequest(WebhookDefinition definition) {\n@@ -105,7 +138,6 @@ public static WebhookDefinition webhook() {\n     }\n }\n \n-\n class WebhookRunner implements Runnable {\n \n     private WebhookDefinition definition;\n@@ -139,3 +171,5 @@ public void run() {\n         }\n     }\n }\n+\n+"
  }
]
