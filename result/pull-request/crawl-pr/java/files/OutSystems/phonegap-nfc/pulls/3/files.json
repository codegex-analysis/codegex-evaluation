[
  {
    "sha": "3450b670fd4c0852581f3d69e57f2fbfd14ae2ef",
    "filename": "CHANGES.txt",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/OutSystems/phonegap-nfc/blob/31bfc11d75333c913cf930790466bf89a3907236/CHANGES.txt",
    "raw_url": "https://github.com/OutSystems/phonegap-nfc/raw/31bfc11d75333c913cf930790466bf89a3907236/CHANGES.txt",
    "contents_url": "https://api.github.com/repos/OutSystems/phonegap-nfc/contents/CHANGES.txt?ref=31bfc11d75333c913cf930790466bf89a3907236",
    "patch": "@@ -1,3 +1,18 @@\n+= 0.7.3 =\n+Bump version for npm issues\n+\n+= 0.7.2 =\n+Add support for WKWebView #288 Thanks andreamaioli\n+\n+= 0.7.1 =\n+Automatically Add NFC entitlement for iOS #285 Thanks andreamaioli\n+\n+= 0.7.0 =\n+Add iOS support #139\n+Fixed language code field length detection #219 Thanks homer-jay\n+Fixed java.util.ConcurrentModificationException #231 Thanks João Gonçalves (Chuckytuh)\n+Documentation fixes #224 Thanks Tom Brückner (derwaldgeist)\n+\n = 0.6.6 =\n Update Windows platforms (includes Windows Phone 8.1)\n  * tag event contains nested ndefMessage object #215"
  },
  {
    "sha": "69a241c6543cbf8f7740407567e4f599dd802909",
    "filename": "LICENSE.txt",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/OutSystems/phonegap-nfc/blob/31bfc11d75333c913cf930790466bf89a3907236/LICENSE.txt",
    "raw_url": "https://github.com/OutSystems/phonegap-nfc/raw/31bfc11d75333c913cf930790466bf89a3907236/LICENSE.txt",
    "contents_url": "https://api.github.com/repos/OutSystems/phonegap-nfc/contents/LICENSE.txt?ref=31bfc11d75333c913cf930790466bf89a3907236",
    "patch": "@@ -1,6 +1,6 @@\n The MIT License\n \n-Copyright (c) 2011-2015 Chariot Solutions\n+Copyright (c) 2011-2017 Chariot Solutions\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
  },
  {
    "sha": "67ff098a600c2bc780847e956f30e77702acea4f",
    "filename": "README.md",
    "status": "modified",
    "additions": 70,
    "deletions": 4,
    "changes": 74,
    "blob_url": "https://github.com/OutSystems/phonegap-nfc/blob/31bfc11d75333c913cf930790466bf89a3907236/README.md",
    "raw_url": "https://github.com/OutSystems/phonegap-nfc/raw/31bfc11d75333c913cf930790466bf89a3907236/README.md",
    "contents_url": "https://api.github.com/repos/OutSystems/phonegap-nfc/contents/README.md?ref=31bfc11d75333c913cf930790466bf89a3907236",
    "patch": "@@ -14,6 +14,7 @@ This plugin uses NDEF (NFC Data Exchange Format) for maximum compatibilty betwee\n Supported Platforms\n -------------------\n * Android\n+* [iOS 11](#ios-notes)\n * Windows (includes Windows Phone 8.1, Windows 8.1, Windows 10)\n * BlackBerry 10\n * Windows Phone 8\n@@ -59,6 +60,16 @@ BlackBerry 7 support is only available for Cordova 2.x. For applications targeti\n \n See [Getting Started](https://github.com/chariotsolutions/phonegap-nfc/blob/master/doc/GettingStartedCLI.md) and [Getting Started BlackBerry 10](https://github.com/chariotsolutions/phonegap-nfc/blob/master/doc/GettingStartedBlackberry10.md)for more details.\n \n+## iOS Notes\n+\n+Reading NFC NDEF tags is supported on iPhone 7 and iPhone 7 Plus running iOS 11. To enable your app to detect NFC tags, the plugin adds the Near Field Communication Tag Reading capability in your Xcode project. You must build your application with XCode 9. See the [Apple Documentation](http://help.apple.com/xcode/mac/current/#/dev88ff319e7) for more info.\n+\n+Use [nfc.addNdefListener](#nfcaddndeflistener) to read NDEF NFC tags with iOS. Unfortunately, iOS also requires you to begin a session before scanning NFC tag. The JavaScript API contains two new iOS specific functions [nfc.beginSession](#nfcbeginsession) and [nfc.invalidateSession](#nfcinvalidatesession).\n+\n+You must call [nfc.beginSession](#nfcbeginsession) before every scan. \n+\n+The initial iOS version plugin does not support scanning multiple tags (invalidateAfterFirstRead:FALSE) or setting the alertMessage. If you have use cases or suggestions on the best way to support multi-read or alert messages, open a ticket for discussion.\n+\n # NFC\n \n > The nfc object provides access to the device's NFC sensor.\n@@ -81,6 +92,8 @@ See [Getting Started](https://github.com/chariotsolutions/phonegap-nfc/blob/mast\n - [nfc.stopHandover](#nfcstophandover)\n - [nfc.enabled](#nfcenabled)\n - [nfc.showSettings](#nfcshowsettings)\n+- [nfc.beginSession](#nfcbeginsession)\n+- [nfc.invalidateSession](#nfcinvalidatesession)\n \n ## nfc.addNdefListener\n \n@@ -104,9 +117,12 @@ For BlackBerry 10, you must configure the type of tags your application will rea\n \n On Android registered [mimeTypeListeners](#nfcaddmimetypelistener) takes precedence over this more generic NDEF listener.\n \n+On iOS you must call [beingSession](#nfcbeginsession) before scanning a tag.\n+\n ### Supported Platforms\n \n - Android\n+- iOS\n - Windows\n - BlackBerry 7\n - BlackBerry 10\n@@ -127,6 +143,7 @@ Removes the previously registered event listener for NDEF tags added via `nfc.ad\n ### Supported Platforms\n \n - Android\n+- iOS\n - Windows\n - BlackBerry 7\n \n@@ -154,6 +171,8 @@ This event occurs when any tag is detected by the phone.\n - Windows\n - BlackBerry 7\n \n+Note that Windows Phones need the newere NXP PN427 chipset to read non-NDEF tags. That tag will be read, but no tag meta-data is available.\n+\n ## nfc.removeTagDiscoveredListener\n \n Removes the previously registered event listener added via `nfc.addTagDiscoveredListener`.\n@@ -201,7 +220,6 @@ On Android, MIME types for filtering should always be lower case. (See [IntentFi\n ### Supported Platforms\n \n - Android\n-- Windows\n - BlackBerry 7\n \n ## nfc.removeMimeTypeListener\n@@ -506,8 +524,56 @@ Windows will return **NO_NFC_OR_NFC_DISABLED** when NFC is not present or disabl\n ### Supported Platforms\n \n - Android\n+- iOS\n - Windows\n \n+## nfc.beginSession\n+\n+iOS requires you to begin a session before scanning a NFC tag.\n+\n+    nfc.beginSession(success, failure);\n+\n+### Description\n+\n+Function `beginSession` starts the [NFCNDEFReaderSession](https://developer.apple.com/documentation/corenfc/nfcndefreadersession) allowing iOS to scan NFC tags.\n+\n+### Parameters\n+\n+- __success__: Success callback function called when the session begins [optional]\n+- __failure__: Error callback function, invoked when error occurs. [optional]\n+\n+### Quick Example\n+\n+    nfc.beginSession();\n+\n+### Supported Platforms\n+\n+- iOS\n+\n+## nfc.invalidateSession\n+\n+Invalidate the NFC session.\n+\n+    nfc.invalidateSession(success, failure);\n+\n+### Description\n+\n+Function `invalidateSession` stops the [NFCNDEFReaderSession](https://developer.apple.com/documentation/corenfc/nfcndefreadersession) returning control to your app.\n+\n+### Parameters\n+\n+- __success__: Success callback function called when the session in invalidated [optional]\n+- __failure__: Error callback function, invoked when error occurs. [optional]\n+\n+### Quick Example\n+\n+    nfc.invalidateSession();\n+\n+### Supported Platforms\n+\n+- iOS\n+\n+\n # NDEF\n \n > The `ndef` object provides NDEF constants, functions for creating NdefRecords, and functions for converting data.\n@@ -588,7 +654,7 @@ The tag contents are platform dependent.\n \n `id` and `techTypes` may be included when scanning a tag on Android.  `serialNumber` may be included on BlackBerry 7.\n \n-`id` and `serialNumber` are different names for the same value.  `id` is typically displayed as a hex string `ndef.bytesToHexString(tag.id)`.\n+`id` and `serialNumber` are different names for the same value.  `id` is typically displayed as a hex string `nfc.bytesToHexString(tag.id)`.\n \n Windows, Windows Phone 8, and BlackBerry 10 read the NDEF information from a tag, but do not have access to the tag id or other meta data like capacity, read-only status or tag technologies.\n \n@@ -663,7 +729,7 @@ You can also log the tag contents in your event handlers.  `console.log(JSON.str\n \n ## Non-NDEF Tags\n \n-Only Android and BlackBerry 7 can read data from non-NDEF NFC tags.\n+Only Android and BlackBerry 7 can read data from non-NDEF NFC tags. Newer Windows Phones with NXP PN427 chipset can read non-NDEF tags, but can not get any tag meta data.\n \n ## Mifare Classic Tags\n \n@@ -833,7 +899,7 @@ License\n \n The MIT License\n \n-Copyright (c) 2011-2015 Chariot Solutions\n+Copyright (c) 2011-2017 Chariot Solutions\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
  },
  {
    "sha": "fd8bf98d3ded665e1c81f211062cbcf0e728c970",
    "filename": "package.json",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/OutSystems/phonegap-nfc/blob/31bfc11d75333c913cf930790466bf89a3907236/package.json",
    "raw_url": "https://github.com/OutSystems/phonegap-nfc/raw/31bfc11d75333c913cf930790466bf89a3907236/package.json",
    "contents_url": "https://api.github.com/repos/OutSystems/phonegap-nfc/contents/package.json?ref=31bfc11d75333c913cf930790466bf89a3907236",
    "patch": "@@ -1,14 +1,15 @@\n {\n   \"name\": \"phonegap-nfc\",\n-  \"version\": \"0.6.6\",\n+  \"version\": \"0.7.3\",\n   \"description\": \"Near Field Communication (NFC) Plugin. Read and write NDEF messages to NFC tags and share NDEF messages with peers.\",\n   \"cordova\": {\n     \"id\": \"phonegap-nfc\",\n     \"platforms\": [\n       \"android\",\n       \"wp8\",\n       \"windows\",\n-      \"blackberry10\"\n+      \"blackberry10\",\n+      \"ios\"\n     ]\n   },\n   \"repository\": {\n@@ -23,7 +24,8 @@\n     \"cordova-android\",\n     \"cordova-wp8\",\n     \"cordova-windows\",\n-    \"cordova-blackberry10\"\n+    \"cordova-blackberry10\",\n+    \"cordova-ios\"\n   ],\n   \"author\": \"Don Coleman <don.coleman@gmail.com>\",\n   \"license\": \"MIT\","
  },
  {
    "sha": "4f40be217ba4cae83e7c7eae2310f052b16eba1b",
    "filename": "plugin.xml",
    "status": "modified",
    "additions": 36,
    "deletions": 1,
    "changes": 37,
    "blob_url": "https://github.com/OutSystems/phonegap-nfc/blob/31bfc11d75333c913cf930790466bf89a3907236/plugin.xml",
    "raw_url": "https://github.com/OutSystems/phonegap-nfc/raw/31bfc11d75333c913cf930790466bf89a3907236/plugin.xml",
    "contents_url": "https://api.github.com/repos/OutSystems/phonegap-nfc/contents/plugin.xml?ref=31bfc11d75333c913cf930790466bf89a3907236",
    "patch": "@@ -3,7 +3,7 @@\n     xmlns=\"http://www.phonegap.com/ns/plugins/1.0\"\n     xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     id=\"phonegap-nfc\"\n-    version=\"0.6.6\">\n+    version=\"0.7.3\">\n \n     <name>NFC</name>\n \n@@ -103,5 +103,40 @@\n         </config-file>\n     </platform>\n \n+    <platform name=\"ios\">\n+        <js-module src=\"www/phonegap-nfc.js\" name=\"NFC\">\n+            <runs />\n+        </js-module>\n+\n+        <config-file parent=\"/*\" target=\"config.xml\">\n+            <feature name=\"NfcPlugin\">\n+                <param name=\"ios-package\" value=\"NfcPlugin\" />\n+            </feature>\n+        </config-file>\n+\n+        <config-file platform=\"ios\" target=\"*-Debug.plist\" parent=\"com.apple.developer.nfc.readersession.formats\">\n+            <array>\n+                <string>NDEF</string>\n+            </array>\n+        </config-file>\n+\n+        <config-file platform=\"ios\" target=\"*-Release.plist\" parent=\"com.apple.developer.nfc.readersession.formats\">\n+            <array>\n+                <string>NDEF</string>\n+            </array>\n+        </config-file>\n+        \n+        <header-file src=\"src/ios/NfcPlugin.h\" />\n+        <source-file src=\"src/ios/NfcPlugin.m\" />\n+\n+        <!-- frameworks -->\n+        <framework src=\"CoreNFC.framework\" />\n+\n+        <preference name=\"NFC_USAGE_DESCRIPTION\" default=\"Read NFC Tags\" />\n+        <config-file target=\"*-Info.plist\" parent=\"NFCReaderUsageDescription\">\n+            <string>$NFC_USAGE_DESCRIPTION</string>\n+        </config-file>\n+    </platform>\n+\n \n </plugin>"
  },
  {
    "sha": "e74f679b604b6ce869210794285970c96249ed64",
    "filename": "src/ios/NfcPlugin.h",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/OutSystems/phonegap-nfc/blob/31bfc11d75333c913cf930790466bf89a3907236/src/ios/NfcPlugin.h",
    "raw_url": "https://github.com/OutSystems/phonegap-nfc/raw/31bfc11d75333c913cf930790466bf89a3907236/src/ios/NfcPlugin.h",
    "contents_url": "https://api.github.com/repos/OutSystems/phonegap-nfc/contents/src/ios/NfcPlugin.h?ref=31bfc11d75333c913cf930790466bf89a3907236",
    "patch": "@@ -0,0 +1,28 @@\n+//\n+//  NfcPlugin.h\n+//  PhoneGap NFC - Cordova Plugin\n+//\n+//  (c) 2107 Don Coleman\n+\n+#ifndef NfcPlugin_h\n+#define NfcPlugin_h\n+\n+#import <Cordova/CDV.h>\n+#import <CoreNFC/CoreNFC.h>\n+#import <WebKit/WebKit.h>\n+\n+@interface NfcPlugin : CDVPlugin <NFCNDEFReaderSessionDelegate> {\n+}\n+\n+// iOS Specific API\n+- (void)beginSession:(CDVInvokedUrlCommand *)command;\n+- (void)invalidateSession:(CDVInvokedUrlCommand *)command;\n+\n+// Standard PhoneGap NFC API\n+- (void)registerNdef:(CDVInvokedUrlCommand *)command;\n+- (void)removeNdef:(CDVInvokedUrlCommand *)command;\n+- (void)enabled:(CDVInvokedUrlCommand *)command;\n+\n+@end\n+\n+#endif"
  },
  {
    "sha": "742e1ca398afab68de425d76e2183d59e210eeea",
    "filename": "src/ios/NfcPlugin.m",
    "status": "added",
    "additions": 173,
    "deletions": 0,
    "changes": 173,
    "blob_url": "https://github.com/OutSystems/phonegap-nfc/blob/31bfc11d75333c913cf930790466bf89a3907236/src/ios/NfcPlugin.m",
    "raw_url": "https://github.com/OutSystems/phonegap-nfc/raw/31bfc11d75333c913cf930790466bf89a3907236/src/ios/NfcPlugin.m",
    "contents_url": "https://api.github.com/repos/OutSystems/phonegap-nfc/contents/src/ios/NfcPlugin.m?ref=31bfc11d75333c913cf930790466bf89a3907236",
    "patch": "@@ -0,0 +1,173 @@\n+//\n+//  NfcPlugin.m\n+//  PhoneGap NFC - Cordova Plugin\n+//\n+//  (c) 2107 Don Coleman\n+\n+#import \"NfcPlugin.h\"\n+\n+@interface NfcPlugin() {\n+    NSString* ndefStartSessionCallbackId;\n+}\n+@property (strong, nonatomic) NFCNDEFReaderSession *nfcSession;\n+@end\n+\n+@implementation NfcPlugin\n+\n+- (void)pluginInitialize {\n+\n+    NSLog(@\"PhoneGap NFC - Cordova Plugin\");\n+    NSLog(@\"(c)2017 Don Coleman\");\n+\n+    [super pluginInitialize];\n+    \n+    // TODO fail quickly if not supported\n+    if (![NFCNDEFReaderSession readingAvailable]) {\n+        NSLog(@\"NFC Support is NOT available\");\n+    }\n+}\n+\n+#pragma mark -= Cordova Plugin Methods\n+\n+// Unfortunately iOS users need to start a session to read tags\n+- (void)beginSession:(CDVInvokedUrlCommand*)command {\n+    NSLog(@\"beginSession\");\n+\n+    _nfcSession = [[NFCNDEFReaderSession new]initWithDelegate:self queue:nil invalidateAfterFirstRead:TRUE];\n+    ndefStartSessionCallbackId = [command.callbackId copy];\n+    [_nfcSession beginSession];\n+}\n+\n+- (void)invalidateSession:(CDVInvokedUrlCommand*)command {\n+    NSLog(@\"invalidateSession\");\n+    if (_nfcSession) {\n+        [_nfcSession invalidateSession];\n+    }\n+    // Always return OK. Alternately could send status from the NFCNDEFReaderSessionDelegate\n+    CDVPluginResult *pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];\n+    [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];\n+}\n+\n+// Nothing happens here, the event listener is registered in JavaScript\n+- (void)registerNdef:(CDVInvokedUrlCommand *)command {\n+    NSLog(@\"registerNdef\");\n+    CDVPluginResult *pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];\n+    [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];\n+}\n+\n+// Nothing happens here, the event listener is removed in JavaScript\n+- (void)removeNdef:(CDVInvokedUrlCommand *)command {\n+    NSLog(@\"removeNdef\");\n+    CDVPluginResult *pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];\n+    [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];\n+}\n+\n+- (void)enabled:(CDVInvokedUrlCommand *)command {\n+    NSLog(@\"enabled\");\n+    CDVPluginResult *pluginResult;\n+    if ([NFCNDEFReaderSession readingAvailable]) {\n+        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];\n+    } else {\n+        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:@\"NO_NFC\"];\n+    }\n+    [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];\n+}\n+\n+#pragma mark - NFCNDEFReaderSessionDelegate\n+\n+- (void) readerSession:(NFCNDEFReaderSession *)session didDetectNDEFs:(NSArray<NFCNDEFMessage *> *)messages {\n+    NSLog(@\"NFCNDEFReaderSession didDetectNDEFs\");\n+    \n+    for (NFCNDEFMessage *message in messages) {\n+        [self fireNdefEvent: message];\n+    }\n+}\n+\n+- (void) readerSession:(NFCNDEFReaderSession *)session didInvalidateWithError:(NSError *)error {\n+    NSLog(@\"didInvalidateWithError %@ %@\", error.localizedDescription, error.localizedFailureReason);\n+    if (ndefStartSessionCallbackId) {\n+        NSString* errorMessage = [NSString stringWithFormat:@\"error: %@\", error.localizedDescription];\n+        CDVPluginResult *pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:errorMessage];\n+        [self.commandDelegate sendPluginResult:pluginResult callbackId:ndefStartSessionCallbackId];\n+    }\n+}\n+\n+- (void) readerSessionDidBecomeActive:(nonnull NFCReaderSession *)session {\n+    NSLog(@\"readerSessionDidBecomeActive\");\n+    if (ndefStartSessionCallbackId) {\n+        CDVPluginResult *pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];\n+        //[pluginResult setKeepCallback:[NSNumber numberWithBool:YES]];\n+        [self.commandDelegate sendPluginResult:pluginResult callbackId:ndefStartSessionCallbackId];\n+        ndefStartSessionCallbackId = NULL;\n+    }\n+}\n+\n+#pragma mark - internal implementation\n+\n+// Create a JSON description of the NFC NDEF tag and call a JavaScript function fireNfcTagEvent.\n+// The event handler registered by addNdefListener will handle the JavaScript event fired by fireNfcTagEvent().\n+// This is a bit convoluted and based on how PhoneGap 0.9 worked. A new implementation would send the data\n+// in a success callback.\n+-(void) fireNdefEvent:(NFCNDEFMessage *) ndefMessage {\n+    NSString *ndefMessageAsJSONString = [self ndefMessagetoJSONString:ndefMessage];\n+    NSLog(@\"%@\", ndefMessageAsJSONString);\n+\n+    // construct string to call JavaScript function fireNfcTagEvent(eventType, tagAsJson);\n+    NSString *function = [NSString stringWithFormat:@\"fireNfcTagEvent('ndef', '%@')\", ndefMessageAsJSONString];\n+    dispatch_async(dispatch_get_main_queue(), ^{\n+        if ([[self webView] isKindOfClass:WKWebView.class])\n+          [(WKWebView*)[self webView] evaluateJavaScript:function completionHandler:^(id result, NSError *error) {}];\n+        else\n+          [(UIWebView*)[self webView] stringByEvaluatingJavaScriptFromString: function];\n+    });\n+}\n+\n+-(NSString *) ndefMessagetoJSONString:(NFCNDEFMessage *) ndefMessage {\n+    \n+    NSMutableArray *array = [NSMutableArray new];\n+    for (NFCNDEFPayload *record in ndefMessage.records){\n+        NSDictionary* recordDictionary = [self ndefRecordToNSDictionary:record];\n+        [array addObject:recordDictionary];\n+    }\n+    \n+    // The JavaScript tag object expects a key with ndefMessage\n+    NSMutableDictionary *wrapper = [NSMutableDictionary new];\n+    [wrapper setObject:array forKey:@\"ndefMessage\"];\n+    return dictionaryAsJSONString(wrapper);\n+}\n+\n+-(NSDictionary *) ndefRecordToNSDictionary:(NFCNDEFPayload *) ndefRecord {\n+    NSMutableDictionary *dict = [NSMutableDictionary new];\n+    dict[@\"tnf\"] = [NSNumber numberWithInt:(int)ndefRecord.typeNameFormat];\n+    dict[@\"type\"] = uint8ArrayFromNSData(ndefRecord.type);\n+    dict[@\"id\"] = uint8ArrayFromNSData(ndefRecord.identifier);\n+    dict[@\"payload\"] = uint8ArrayFromNSData(ndefRecord.payload);\n+    NSDictionary *copy = [dict copy];\n+    return copy;\n+}\n+\n+// returns an NSArray of uint8_t representing the bytes in the NSData object.\n+NSArray *uint8ArrayFromNSData(NSData *data) {\n+    const void *bytes = [data bytes];\n+    NSMutableArray *array = [NSMutableArray array];\n+    for (NSUInteger i = 0; i < [data length]; i += sizeof(uint8_t)) {\n+        uint8_t elem = OSReadLittleInt(bytes, i);\n+        [array addObject:[NSNumber numberWithInt:elem]];\n+    }\n+    return array;\n+}\n+\n+NSString* dictionaryAsJSONString(NSDictionary *dict) {\n+    NSError *error;\n+    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dict options:0 error:&error];\n+    NSString *jsonString;\n+    if (! jsonData) {\n+        jsonString = [NSString stringWithFormat:@\"Error creating JSON for NDEF Message: %@\", error];\n+        NSLog(@\"%@\", jsonString);\n+    } else {\n+        jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n+    }\n+    return jsonString;\n+}\n+\n+@end"
  },
  {
    "sha": "11197f55615ebf7398051a7d49662f5e1c7d6ffc",
    "filename": "www/phonegap-nfc.js",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/OutSystems/phonegap-nfc/blob/31bfc11d75333c913cf930790466bf89a3907236/www/phonegap-nfc.js",
    "raw_url": "https://github.com/OutSystems/phonegap-nfc/raw/31bfc11d75333c913cf930790466bf89a3907236/www/phonegap-nfc.js",
    "contents_url": "https://api.github.com/repos/OutSystems/phonegap-nfc/contents/www/phonegap-nfc.js?ref=31bfc11d75333c913cf930790466bf89a3907236",
    "patch": "@@ -485,6 +485,16 @@ var nfc = {\n \n     showSettings: function (win, fail) {\n         cordova.exec(win, fail, \"NfcPlugin\", \"showSettings\", []);\n+    },\n+\n+    // iOS only\n+    beginSession: function (win, fail) {\n+        cordova.exec(win, fail, \"NfcPlugin\", \"beginSession\", []);\n+    },\n+\n+    // iOS only\n+    invalidateSession: function (win, fail) {\n+        cordova.exec(win, fail, \"NfcPlugin\", \"invalidateSession\", []);\n     }\n \n };\n@@ -641,7 +651,7 @@ var textHelper = {\n \n     decodePayload: function (data) {\n \n-        var languageCodeLength = (data[0] & 0x1F), // 5 bits\n+        var languageCodeLength = (data[0] & 0x3F), // 6 LSBs\n             languageCode = data.slice(1, 1 + languageCodeLength),\n             utf16 = (data[0] & 0x80) !== 0; // assuming UTF-16BE\n \n@@ -712,7 +722,7 @@ var uriHelper = {\n     }\n };\n \n-// added since WP8 must call a named function\n+// added since WP8 must call a named function, also used by iOS\n // TODO consider switching NFC events from JS events to using the PG callbacks\n function fireNfcTagEvent(eventType, tagAsJson) {\n     setTimeout(function () {"
  }
]
