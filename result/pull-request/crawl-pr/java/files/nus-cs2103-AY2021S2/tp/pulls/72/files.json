[
  {
    "sha": "787379e19d0cfdab3879f4861299a6f7464e86e5",
    "filename": "README.md",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/README.md",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/README.md",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/README.md?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -1,14 +1,15 @@\n-[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)\n+[![CI Status](https://github.com/AY2021S2-CS2103T-W10-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W10-3/tp/actions)\n \n ![Ui](docs/images/Ui.png)\n \n-* This is **a sample project for Software Engineering (SE) students**.<br>\n+* This is a sample student Software Engineering for delivery drivers to manage their orders efficiently.<br>\n   Example usages:\n-  * as a starting point of a course project (as opposed to writing everything from scratch)\n-  * as a case study\n-* The project simulates an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details.\n-  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big.\n-  * It comes with a **reasonable level of user and developer documentation**.\n-* It is named `AddressBook Level 3` (`AB3` for short) because it was initially created as a part of a series of `AddressBook` projects (`Level 1`, `Level 2`, `Level 3` ...).\n-* For the detailed documentation of this project, see the **[Address Book Product Website](https://se-education.org/addressbook-level3)**.\n-* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.\n+  * as a delivery driver for a logistic company looking to better manage their work schedule\n+  * as a delivery driver for an F&B shop looking to better manage their food delivery operations\n+  \n+* The project simulates an ongoing software project for a desktop application (called _TimeforWheels_) used for managing delivery orders.\n+  * It is **written in Java OOP fashion**. \n+* It is named `TimeforWheels` since the goal of the app is to help delivey drivers better manage their time.\n+* For the detailed documentation of this project, see the **[TimeforWheels Developer Guide](https://ay2021s2-cs2103t-w10-3.github.io/tp/DeveloperGuide.html)**.\n+* For Users who want to know how to use the app, see the **[TimeforWheels User Guide](https://ay2021s2-cs2103t-w10-3.github.io/tp/UserGuide.html)**.\n+"
  },
  {
    "sha": "38d9438c737d33c7a725dbdaaf4a0dcb29b6e560",
    "filename": "copyright.txt",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/copyright.txt",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/copyright.txt",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/copyright.txt?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -4,6 +4,9 @@ Copyright by Susumu Yoshida - http://www.mcdodesign.com/\n - address_book_32.png\n - AddressApp.ico\n \n+\n+\n+\n Copyright by Jan Jan Kovařík - http://glyphicons.com/\n - calendar.png\n - edit.png"
  },
  {
    "sha": "53fbbad9953386614d744a1b3ad0171c164ee7e0",
    "filename": "docs/AboutUs.md",
    "status": "modified",
    "additions": 19,
    "deletions": 28,
    "changes": 47,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/AboutUs.md",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/AboutUs.md",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/AboutUs.md?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -5,55 +5,46 @@ title: About Us\n \n We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).\n \n-You can reach us at the email `seer[at]comp.nus.edu.sg`\n+You can reach us at the email `jdlian505[at]gmail.com`, `juhaeradittya2000[at]gmail.com`, `galencheung97@gmail.com`\n \n ## Project team\n \n-### John Doe\n+### Lian Jiade\n \n-<img src=\"images/johndoe.png\" width=\"200px\">\n+<img src=\"images/csjiade.png\" width=\"200px\">\n \n-[[homepage](http://www.comp.nus.edu.sg/~damithch)]\n-[[github](https://github.com/johndoe)]\n-[[portfolio](team/johndoe.md)]\n+[[github](https://github.com/CSjiade)]\n+[[portfolio](team/lianjiade.md)]\n \n-* Role: Project Advisor\n+* Role: Developer\n+* Responsibilities: In charge of UI, Logic, Storage\n \n-### Jane Doe\n+###  Md Juhaer Adittya Pasha\n \n-<img src=\"images/johndoe.png\" width=\"200px\">\n+<img src=\"images/pasha-292.png\" width=\"200px\">\n \n [[github](http://github.com/johndoe)]\n-[[portfolio](team/johndoe.md)]\n+[[portfolio]()]\n \n-* Role: Team Lead\n-* Responsibilities: UI\n+* Role: Developer\n+* Responsibilities: UI, Logic\n \n-### Johnny Doe\n+### Galen Cheung\n \n-<img src=\"images/johndoe.png\" width=\"200px\">\n+<img src=\"images/cheunggalen.png\" width=\"200px\">\n \n-[[github](http://github.com/johndoe)] [[portfolio](team/johndoe.md)]\n+[[github](http://github.com/cheunggalen)] [[portfolio]()]\n \n * Role: Developer\n-* Responsibilities: Data\n+* Responsibilities: UI, Logic\n \n-### Jean Doe\n+### Ng Han Poh Jacob\n \n-<img src=\"images/johndoe.png\" width=\"200px\">\n+<img src=\"images/jacob-109.png\" width=\"200px\">\n \n [[github](http://github.com/johndoe)]\n-[[portfolio](team/johndoe.md)]\n+[[portfolio]()]\n \n * Role: Developer\n * Responsibilities: Dev Ops + Threading\n \n-### James Doe\n-\n-<img src=\"images/johndoe.png\" width=\"200px\">\n-\n-[[github](http://github.com/johndoe)]\n-[[portfolio](team/johndoe.md)]\n-\n-* Role: Developer\n-* Responsibilities: UI"
  },
  {
    "sha": "15f076b5bc1751c4f2d503faa6fda2b78de04405",
    "filename": "docs/DeveloperGuide.md",
    "status": "modified",
    "additions": 654,
    "deletions": 28,
    "changes": 682,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/DeveloperGuide.md",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/DeveloperGuide.md",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/DeveloperGuide.md?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -236,71 +236,697 @@ _{Explain here how the data archiving feature will be implemented}_\n \n **Target user profile**:\n \n-* has a need to manage a significant number of contacts\n-* prefer desktop apps over other types\n-* can type fast\n-* prefers typing to mouse interactions\n-* is reasonably comfortable using CLI apps\n-\n-**Value proposition**: manage contacts faster than a typical mouse/GUI driven app\n+* Companies that have delivery operations and freelance delivery drivers\n+* Need to manage many delivery entries and their respective details\n+* Prefers typing to mouse interactions\n+* Can type fast\n+* Is reasonably comfortable using CLI apps\n+* Looking for a desktop app over other types to better manage their workflow\n \n+**Value proposition**: manage delivery workflows and details faster than a typical mouse/GUI driven app for greater efficiency\n \n ### User stories\n \n Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`\n \n-| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |\n-| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |\n-| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |\n-| `* * *`  | user                                       | add a new person               |                                                                        |\n-| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |\n-| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |\n-| `* *`    | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                |\n-| `*`      | user with many persons in the address book | sort persons by name           | locate a person easily                                                 |\n+| Priority | As a …​                   | I want to …​                                                                                | So that I can…​                                           |\n+| -------- | --------------------------| ------------------------------------------------------------------------------------------- | --------------------------------------------------------- |\n+| `* * *`  | delivery driver           | add a delivery entry to the list (product, pickup/drop off time and address, route)         | make the delivery immediately/later                       |\n+| `* * *`  | delivery driver           | mark a delivery entry in the list as done                                                   | know which deliveries I've done                           |\n+| `* * *`  | delivery driver           | delete a delivery entry from the list                                                       | remove the delivery entry from the list                   |\n+| `* * *`  | delivery driver           | delete all delivery entries from the list                                                   | remove all delivery entries from the list                 |\n+| `* * *`  | delivery driver           | edit a delivery entry in the list                                                           | make necessary changes to the delivery details            |\n+| `* * *`  | delivery driver           | get the list of delivery entries                                                            | see all the deliveries I have to make                     |\n+| `* * *`  | delivery driver           | get the list of completed delivery entries                                                  | see all the deliveries I have done                        |\n+| `* * *`  | delivery driver           | get the list of delivery entries ranked by urgency/timing                                   | see which are the more urgent deliveries to be made first |\n+| `* * *`  | delivery driver           | find all delivery entries associated with a time (pickup/drop off time)                     | see the deliveries with the pickup/drop off times         |\n+| `* * *`  | delivery driver           | find all delivery entries associated with a location (pickup/drop off address)              | see the deliveries with the pickup/drop off addresses     |\n+| `* * *`  | delivery driver           | find all delivery entries associated with a keyword or phrase                               | see the deliveries with the specific keyword/phrase       |\n+| `* * *`  | delivery driver           | exit the app                                                                                | exit the app                                              |\n+| `* *`    | delivery driver           | be notified of a duplicate delivery entry                                                   | avoid adding a duplicate delivery entry to the list       |\n+| `* *`    | delivery driver           | to set reminders for each delivery                                                          | be notified prior to each delivery                        |\n+| `* *`    | delivery driver           | get a pre-planned route for the delivery                                                    | make the delivery faster and more efficiently             |\n+| `* *`    | delivery driver           | get details of the delivery good (fragile, etc.)                                            | take necessary preparations/precautions for various goods |\n+| `*`      | delivery driver           | get basic customer details of the delivery (contact details, delivery frequency, business)  | understand my customers better                            |\n+| `*`      | delivery driver           | to have an estimated delivery duration for a delivery entry                                 | plan my time better                                       |\n+| `*`      | new delivery driver       | see samples of deliveries entries                                                           | familiar myself with the app and process                  |\n+| `*`      | new delivery driver       | receive easier deliveries (shorter distance)                                                | transition into using the app more easily                 |\n+| `*`      | part-time delivery driver | choose specific delivery timings and receive delivery notifications during specific timings | make deliveries during my free time                       |\n \n *{More to be added}*\n \n ### Use cases\n \n-(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)\n+**Software System: Delivery App**\n+\n+**Use case: UC01 - add a delivery entry to the list**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* A new delivery entry will be added to the list of deliveries.\n+\n+**MSS**\n+\n+1.  User indicates that they will be adding a delivery entry.\n+2.  Delivery App requests for details of the delivery entry.\n+3.  User enters the delivery entry to be added to the list.\n+4.  Delivery App adds the delivery entry to the list and informs the User.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 3a. The delivery entry to be added has an invalid format.\n+    * 3a1. Delivery App requests for a valid delivery entry.\n+    * 3a2. User enters new delivery entry details.\n+      \n+    Steps 3a1-3a2 are repeated until the valid details are entered.\n+\n+    Use case resumes from step 4.\n+\n+* 3b. The delivery entry to be added already exists in the list.\n+    * 3b1. Delivery App informs the User of the duplicate.\n+\n+    Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC02 - mark a delivery entry in the list as done**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* A delivery entry in the list will be marked as done.\n+\n+**MSS**\n+\n+1.  User requests to see the list of delivery entries.\n+2.  Delivery App shows the list.\n+3.  User indicates which delivery entry to mark as done by entering the entry number.\n+4.  Delivery App marks that delivery entry as done and informs the User.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+    Use case ends.\n+\n+* 3a. The number of the delivery entry is invalid.\n+    * 3a1. Delivery App requests for a valid entry number.\n+    * 3a2. User enters new entry number.\n+\n+    Steps 3a1-3a2 are repeated until the valid entry number is entered.\n+\n+    Use case resumes from step 4.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC03 - delete a delivery entry from the list**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* An existing delivery entry will be deleted from the list of deliveries.\n+\n+**MSS**\n+\n+1.  User requests to see the list of delivery entries.\n+2.  Delivery App shows the list.\n+3.  User indicates which delivery entry to be deleted by entering the entry number.\n+4.  Delivery App removes that delivery entry from the list and informs the User.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 3a. The number of the delivery entry is invalid.\n+    * 3a1. Delivery App requests for a valid entry number.\n+    * 3a2. User enters new entry number.\n+\n+  Steps 3a1-3a2 are repeated until the valid entry number is entered.\n+\n+  Use case resumes from step 4.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC04 - delete all delivery entries from the list**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* All existing delivery entries will be deleted from the list of deliveries.\n+\n+**MSS**\n+\n+1.  User indicates to delete all delivery entries from the list.\n+2.  Delivery App removes all delivery entries from the list and informs the User.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that there are no delivery entries to delete.\n+\n+  Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC05 - edit a delivery entry in the list**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* An existing delivery entry will be updated in the list of deliveries.\n+\n+**MSS**\n+\n+1.  User requests to see the list of delivery entries.\n+2.  Delivery App shows the list.\n+3.  User indicates which delivery entry to edit by entering the entry number.\n+4.  Delivery App requests for updated details of the delivery entry.\n+5.  User enters the updated details.\n+6.  Delivery App replaces the old delivery entry with the updated one and informs the User.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 3a. The number of the delivery entry is invalid.\n+    * 3a1. Delivery App requests for a valid entry number.\n+    * 3a2. User enters new entry number.\n \n-**Use case: Delete a person**\n+  Steps 3a1-3a2 are repeated until the valid entry number is entered.\n+\n+  Use case resumes from step 4.\n+\n+* 5a. The updated details have an invalid format.\n+    * 5a1. Delivery App requests for a valid format.\n+    * 5a2. User enters new details.\n+\n+  Steps 3a1-3a2 are repeated until the valid details are entered.\n+\n+  Use case resumes from step 6.\n+\n+* 5b. The edited entry already exists in the list.\n+    * 5b1. Delivery App informs the User of the duplicate.\n+\n+  Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC06 - get the list of delivery entries**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* a list of all existing delivery entries.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries from the list.\n+2.  Delivery App lists out all existing delivery entries.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC07 - get the list of completed delivery entries**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* a list of all completed delivery entries.\n+\n+**MSS**\n+\n+1.  User requests to see all completed delivery entries from the list.\n+2.  Delivery App lists out all delivery entries that were marked as done.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The completed list is empty.\n+    * 1a1. Delivery App informs the User that the completed list is empty.\n+\n+  Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC08 - get the list of delivery entries ranked by urgency**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* a list of existing delivery entries ranked by urgency.\n \n **MSS**\n \n-1.  User requests to list persons\n-2.  AddressBook shows a list of persons\n-3.  User requests to delete a specific person in the list\n-4.  AddressBook deletes the person\n+1.  User requests to see all delivery entries from the list ranked by urgency.\n+2.  Delivery App lists out all existing delivery entries ranked by urgency, starting from most to least urgent.\n \n     Use case ends.\n \n **Extensions**\n \n-* 2a. The list is empty.\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+  \n+  Use case ends.\n+\n+* 1b. There are more than 1 delivery entry with the same urgency.\n+    * 1b1. Delivery App ranks them based on timing then alphabetical order.\n+\n+  Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC09 - get the list of delivery entries ranked by timing**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* a list of existing delivery entries ranked by timing.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries from the list ranked by timing.\n+2.  Delivery App lists out all existing delivery entries ranked by timing, starting from oldest to latest.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 1b. There are more than 1 delivery entry with the same timing.\n+    * 1b1. Delivery App ranks them based on urgency then alphabetical order.\n+\n+  Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC10 - find all delivery entries associated with a time (pickup/drop off time)**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* a list of existing delivery entries associated with a time.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries from the list associated with a pickup/drop off time.\n+2.  Delivery App lists out all existing delivery entries associated with the pickup/drop off time.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 1b. There are no delivery entries associated with the time.\n+    * 1b1. Delivery App informs the User that there are no delivery entries associated with that time.\n \n   Use case ends.\n \n-* 3a. The given index is invalid.\n+**Software System: Delivery App**\n+\n+**Use case: UC11 - find all delivery entries associated with a location (pickup/drop off address)**\n+\n+**Actor: User (delivery person)**\n \n-    * 3a1. AddressBook shows an error message.\n+**Guarantees:**\n \n-      Use case resumes at step 2.\n+* a list of existing delivery entries associated with an address.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries from the list associated with a pickup/drop off address.\n+2.  Delivery App lists out all existing delivery entries associated with the pickup/drop off address.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 1b. There are no delivery entries associated with the address.\n+    * 1b1. Delivery App informs the User that there are no delivery entries associated with that address.\n+\n+  Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC12 - find all delivery entries associated with a keyword or phrase**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* a list of existing delivery entries with details containing the keyword/phrase.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries with matching keywords/phrases.\n+2.  Delivery App lists out all existing delivery entries with details containing the keyword/phrase.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 1b. There are no delivery entries with matching keywords/phrases.\n+    * 1b1. Delivery App informs the User that there are no delivery entries with details containing the keyword/phrase.\n+\n+  Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC13 - exit the app**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* the app exits.\n+\n+**MSS**\n+\n+1.  User indicates to quit the app.\n+2.  Delivery App exits.\n+\n+    Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC14 - to set reminders for each delivery**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* be notified prior to each delivery.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries in the list.\n+2.  Delivery App lists out all existing delivery entries.\n+3.  User indicates which delivery entry to set a reminder for by entering the entry number.\n+4.  Delivery App requests for reminder date/time.\n+5.  User enters the date/time.\n+6.  Delivery App sets the reminder for that delivery entry.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 3a. The number of the delivery entry is invalid.\n+    * 3a1. Delivery App requests for a valid entry number.\n+    * 3a2. User enters new entry number.\n+\n+  Steps 3a1-3a2 are repeated until the valid entry number is entered.\n+\n+  Use case resumes from step 4.\n+\n+* 5a. The reminder date/time have an invalid format.\n+    * 5a1. Delivery App requests for a valid format.\n+    * 5a2. User enters new date/time.\n+\n+  Steps 3a1-3a2 are repeated until the valid date/time are entered.\n+\n+  Use case resumes from step 6.\n+\n+* 5b. The delivery entry already has the same reminder.\n+    * 5b1. Delivery App informs the User of the duplicate reminder.\n+\n+  Use case ends.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC15 - get a pre-planned route for the delivery**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* to get a delivery route for the delivery.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries in the list.\n+2.  Delivery App lists out all existing delivery entries.\n+3.  User requests to see the delivery route of an entry by entering the entry number.\n+4.  Delivery App shows the delivery route for the chosen entry.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 3a. The number of the delivery entry is invalid.\n+    * 3a1. Delivery App requests for a valid entry number.\n+    * 3a2. User enters new entry number.\n+\n+  Steps 3a1-3a2 are repeated until the valid entry number is entered.\n+\n+  Use case resumes from step 4.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC16 - get details of the delivery good**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* to get details of the delivery good.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries in the list.\n+2.  Delivery App lists out all existing delivery entries.\n+3.  User requests to see the details of a delivery entry by entering the entry number.\n+4.  Delivery App shows the details of the chosen delivery entry.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 3a. The number of the delivery entry is invalid.\n+    * 3a1. Delivery App requests for a valid entry number.\n+    * 3a2. User enters new entry number.\n+\n+  Steps 3a1-3a2 are repeated until the valid entry number is entered.\n+\n+  Use case resumes from step 4.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC17 - get basic customer details of the delivery**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* to get basic details of the customer of the delivery.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries in the list.\n+2.  Delivery App lists out all existing delivery entries.\n+3.  User requests to see the customer details of a delivery entry by entering the entry number.\n+4.  Delivery App shows the customer details of the chosen delivery entry.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 3a. The number of the delivery entry is invalid.\n+    * 3a1. Delivery App requests for a valid entry number.\n+    * 3a2. User enters new entry number.\n+\n+  Steps 3a1-3a2 are repeated until the valid entry number is entered.\n+\n+  Use case resumes from step 4.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC18 - get basic customer details of the delivery**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* to get basic details of the customer of the delivery.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries in the list.\n+2.  Delivery App lists out all existing delivery entries.\n+3.  User requests to see the customer details of a delivery entry by entering the entry number.\n+4.  Delivery App shows the customer details of the chosen delivery entry.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 3a. The number of the delivery entry is invalid.\n+    * 3a1. Delivery App requests for a valid entry number.\n+    * 3a2. User enters new entry number.\n+\n+  Steps 3a1-3a2 are repeated until the valid entry number is entered.\n+\n+  Use case resumes from step 4.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC19 - to have an estimated delivery duration for a delivery entry**\n+\n+**Actor: User (delivery person)**\n+\n+**Guarantees:**\n+\n+* to get an estimated delivery duration of a delivery.\n+\n+**MSS**\n+\n+1.  User requests to see all delivery entries in the list.\n+2.  Delivery App lists out all existing delivery entries.\n+3.  User requests to get the estimated delivery duration of a delivery entry by entering the entry number.\n+4.  Delivery App provides the estimated delivery duration of the chosen delivery entry.\n+\n+    Use case ends.\n+\n+**Extensions**\n+\n+* 1a. The list is empty.\n+    * 1a1. Delivery App informs the User that the list is empty.\n+\n+  Use case ends.\n+\n+* 3a. The number of the delivery entry is invalid.\n+    * 3a1. Delivery App requests for a valid entry number.\n+    * 3a2. User enters new entry number.\n+\n+  Steps 3a1-3a2 are repeated until the valid entry number is entered.\n+\n+  Use case resumes from step 4.\n+\n+**Software System: Delivery App**\n+\n+**Use case: UC20 - see samples of deliveries made**\n+\n+**Actor: New User (new delivery person)**\n+\n+**Guarantees:**\n+\n+* to get samples of delivery entries.\n+\n+**MSS**\n+\n+1.  User requests to see samples of delivery entries.\n+2.  Delivery App shows samples of delivery entries.\n+\n+    Use case ends.\n \n *{More to be added}*\n \n ### Non-Functional Requirements\n \n-1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.\n-2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.\n-3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.\n+1. **Usability**:\n+    - Should work on any _mainstream OS_ as long as it has Java `11` or above installed.\n+    - A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.\n+\n+2. **Reliability**:\n+    - Should be able to hold up to 1000 delivery entries and display all data if requested by the user in less than 5 seconds\n+    - Should be able to detect and inform users of duplicate delivery entries and confirm with user if they wish to proceed in adding them to the list\n+\n+3. **Security:**\n+    - Users that request for any delivery entry data to be deleted will have the data permanently erased from memory\n+\n+4. **Integrity**\n+    - For any time-related data presented to the user, the date formats will be `DD-MM-YYYY`\n+    - Delivery entries made by the user will be stored in a _JSON_ file inside the hard disks\n+\n+5. **Flexibility**\n+    - TimeforWheels should be able to handle as many date format inputs as possible by the user and convert the date format to `DD-MM-YYYY`\n \n *{More to be added}*\n \n ### Glossary\n \n * **Mainstream OS**: Windows, Linux, Unix, OS-X\n * **Private contact detail**: A contact detail that is not meant to be shared with others\n+* **JSON:** JavaScript Object Notation\n \n --------------------------------------------------------------------------------------------------------------------\n "
  },
  {
    "sha": "c89e347e481b02f4414b432e143de16bffeba9c4",
    "filename": "docs/UserGuide.md",
    "status": "modified",
    "additions": 78,
    "deletions": 95,
    "changes": 173,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/UserGuide.md",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/UserGuide.md",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/UserGuide.md?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -3,36 +3,48 @@ layout: page\n title: User Guide\n ---\n \n-AddressBook Level 3 (AB3) is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact management tasks done faster than traditional GUI apps.\n-\n-* Table of Contents\n-{:toc}\n+TimeForWheels is an app for delivery drivers to manage their orders efficiently. It is optimized for use via a Command\n+Line Interface while still having the benefits of a Graphical User Interface(GUI). Overall, TimeForWheels aims to\n+increase work productivity for delivery drivers by simplifying the delivery management and planning process.\n+\n+* **Table of Contents**\n+    * Quick Start\n+    * Features\n+        * Viewing help\n+        * Add delivery points\n+        * Delete delivery points\n+        * List all delivery points\n+        * Mark delivery as Done\n+        * Exit application\n \n --------------------------------------------------------------------------------------------------------------------\n \n ## Quick start\n \n 1. Ensure you have Java `11` or above installed in your Computer.\n \n-1. Download the latest `addressbook.jar` from [here](https://github.com/se-edu/addressbook-level3/releases).\n+1. Download the latest `TimeforWheels.jar` from [here](https://github.com/AY2021S2-CS2103T-W10-3/tp/releases).\n \n-1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook.\n+1. Copy the file to the folder you want to use as the _home folder_ for your TimeforWheels.\n \n-1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.<br>\n+1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app\n+   contains some sample data.<br>\n    ![Ui](images/Ui.png)\n \n-1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.<br>\n+1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will\n+   open the help window.<br>\n    Some example commands you can try:\n \n-   * **`list`** : Lists all contacts.\n+    * **`list`** : Lists all delivery points\n \n-   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.\n+    * **`add`**`a/John street, block 123, #01-01` : Adds a delivery point called `John street, block 123, #01-01` to the\n+      Delivery list.\n \n-   * **`delete`**`3` : Deletes the 3rd contact shown in the current list.\n+    * **`delete`**`3` : Deletes the 3rd delivery point shown in the current list.\n \n-   * **`clear`** : Deletes all contacts.\n+    * **`done`**`3` : Marks the 3rd delivery task as done.\n \n-   * **`exit`** : Exits the app.\n+    * **`exit`** : Exits the app.\n \n 1. Refer to the [Features](#features) below for details of each command.\n \n@@ -56,137 +68,108 @@ AddressBook Level 3 (AB3) is a **desktop app for managing contacts, optimized fo\n * Parameters can be in any order.<br>\n   e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.\n \n-* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.<br>\n+* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of\n+  the parameter will be taken.<br>\n   e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.\n \n-* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.<br>\n+* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be\n+  ignored.<br>\n   e.g. if the command specifies `help 123`, it will be interpreted as `help`.\n \n </div>\n \n ### Viewing help : `help`\n \n-Shows a message explaning how to access the help page.\n-\n-![help message](images/helpMessage.png)\n-\n-Format: `help`\n-\n+**Purpose:** Shows all the available commands and how to use them\n \n-### Adding a person: `add`\n+**Format:** `help`\n \n-Adds a person to the address book.\n+**Examples:**\n \n-Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`\n+* `help` - Help returns Adding a delivery task: add Deleting a delivery task: delete Listing the delivery task: list\n+  Finding a delivery task: find Seeking for tech-support: help\n \n-<div markdown=\"span\" class=\"alert alert-primary\">:bulb: **Tip:**\n-A person can have any number of tags (including 0)\n-</div>\n-\n-Examples:\n-* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`\n-* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`\n+### Viewing all delivery points : `list`\n \n-### Listing all persons : `list`\n+**Purpose:** Shows all the delivery points\n \n-Shows a list of all persons in the address book.\n+**Format:** `list`\n \n-Format: `list`\n+**Examples:**\n \n-### Editing a person : `edit`\n+* `list` - Lists all the delivery points\n \n-Edits an existing person in the address book.\n+### Adding a delivery point: `add`\n \n-Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\n+**Purpose:** Adds a delivery task to the delivery list.\n \n-* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​\n-* At least one of the optional fields must be provided.\n-* Existing values will be updated to the input values.\n-* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.\n-* You can remove all the person’s tags by typing `t/` without\n-    specifying any tags after it.\n+**Format:** `add a/ADDRESS d/DATETIME`\n \n-Examples:\n-*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.\n-*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.\n+**Examples:**\n \n-### Locating persons by name: `find`\n+* `add a/John street, block 123, #01-01 d/2021-03-01 1000\n+  `\n+* `add a/Newgate Prison d/2022-05-01 1200\n+  `\n \n-Finds persons whose names contain any of the given keywords.\n+### Deleting a delivery task : `delete`\n \n-Format: `find KEYWORD [MORE_KEYWORDS]`\n+**Purpose:** Deletes the specified delivery location from the delivery list.\n \n-* The search is case-insensitive. e.g `hans` will match `Hans`\n-* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`\n-* Only the name is searched.\n-* Only full words will be matched e.g. `Han` will not match `Hans`\n-* Persons matching at least one keyword will be returned (i.e. `OR` search).\n-  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`\n+**Format:** `delete INDEX`\n \n-Examples:\n-* `find John` returns `john` and `John Doe`\n-* `find alex david` returns `Alex Yeoh`, `David Li`<br>\n-  ![result for 'find alex david'](images/findAlexDavidResult.png)\n+* Deletes the delivery at the specified INDEX.\n+* The index refers to the index number shown in the displayed delivery list.\n+* The index must be a positive integer 1, 2, 3,\n \n-### Deleting a person : `delete`\n+**Examples:**\n \n-Deletes the specified person from the address book.\n+* `delete 2` - delete 2 will delete the second delivery location in the delivery list.\n \n-Format: `delete INDEX`\n+### Mark a delivery as done : `done`\n \n-* Deletes the person at the specified `INDEX`.\n-* The index refers to the index number shown in the displayed person list.\n-* The index **must be a positive integer** 1, 2, 3, …​\n+**Purpose:** Set a delivery task in the delivery list to done\n \n-Examples:\n-* `list` followed by `delete 2` deletes the 2nd person in the address book.\n-* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.\n+**Format:** `done INDEX`\n \n-### Clearing all entries : `clear`\n+* Sets the delivery at the specified INDEX to done.\n+* The index refers to the index number shown in the displayed delivery list.\n+* The index must be a positive integer 1, 2, 3,\n \n-Clears all entries from the address book.\n+**Example:**\n \n-Format: `clear`\n+* `done 2` - done 2 will set the second delivery location in the delivery list as done.\n \n ### Exiting the program : `exit`\n \n-Exits the program.\n-\n-Format: `exit`\n-\n-### Saving the data\n+**Purpose:** Exits the program.\n \n-AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.\n+**Format:** `exit`\n \n-### Editing the data file\n+**Examples:**\n \n-AddressBook data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.\n-\n-<div markdown=\"span\" class=\"alert alert-warning\">:exclamation: **Caution:**\n-If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.\n-</div>\n-\n-### Archiving data files `[coming in v2.0]`\n-\n-_Details coming soon ..._\n+* `exit` - Exits the program\n \n --------------------------------------------------------------------------------------------------------------------\n \n ## FAQ\n \n **Q**: How do I transfer my data to another Computer?<br>\n-**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.\n+**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains\n+the data of your previous AddressBook home folder.\n \n --------------------------------------------------------------------------------------------------------------------\n \n ## Command summary\n \n-Action | Format, Examples\n+Action | Format,<br> Example(s)\n --------|------------------\n-**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` <br> e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`\n-**Clear** | `clear`\n+**Help** | `help`<br> e.g., `help`\n+**Add** | `add a/ADDRESS d/DATETIME` <br> e.g., `add `a/123, Clementi Rd, 1234665 d/01-02-2021`\n **Delete** | `delete INDEX`<br> e.g., `delete 3`\n-**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`<br> e.g.,`edit 2 n/James Lee e/jameslee@example.com`\n-**Find** | `find KEYWORD [MORE_KEYWORDS]`<br> e.g., `find James Jake`\n-**List** | `list`\n-**Help** | `help`\n+**List** | `list`<br> e.g., `list`\n+**Done** | `done INDEX`<br> e.g., `done 2`\n+**Exit** | `exit`<br> e.g., `exit`\n+\n+\n+"
  },
  {
    "sha": "dba59d1a4d6298870f58904760141a65b5251fb8",
    "filename": "docs/_config.yml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/_config.yml",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/_config.yml",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/_config.yml?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -1,5 +1,5 @@\n-title: \"AB-3\"\n-theme: minima\n+title: \"TimeforWheels\"\n+theme: jekyll-theme-cayman\n \n header_pages:\n   - UserGuide.md\n@@ -8,7 +8,7 @@ header_pages:\n \n markdown: kramdown\n \n-repository: \"se-edu/addressbook-level3\"\n+repository: \"AY2021S2-CS2103T-W10-3/tp\"\n github_icon: \"images/github-icon.png\"\n \n plugins:"
  },
  {
    "sha": "a6c62b88990520e33c90e57556bd0c1b909e96d3",
    "filename": "docs/images/Ui.png",
    "status": "modified",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/Ui.png",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/Ui.png",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/images/Ui.png?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c"
  },
  {
    "sha": "a5a0f03c50fdd312c52d2e4f6ff71f0a8617e232",
    "filename": "docs/images/cheunggalen.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/cheunggalen.png",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/cheunggalen.png",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/images/cheunggalen.png?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c"
  },
  {
    "sha": "a33881f2626b6c508b421219dee41d1df3dfe92c",
    "filename": "docs/images/csjiade.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/csjiade.png",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/csjiade.png",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/images/csjiade.png?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c"
  },
  {
    "sha": "96e984692242e2f5ec760a3433cef0b096f57e64",
    "filename": "docs/images/jacob-109.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/jacob-109.png",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/jacob-109.png",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/images/jacob-109.png?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c"
  },
  {
    "sha": "76ff31bd2753d3dc74c9e45d4a002ef6899dbf3c",
    "filename": "docs/images/pasha-292.png",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/pasha-292.png",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/images/pasha-292.png",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/images/pasha-292.png?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c"
  },
  {
    "sha": "cf175ed8b8652a424b5ff251b40d64635e5949c8",
    "filename": "docs/index.md",
    "status": "modified",
    "additions": 10,
    "deletions": 8,
    "changes": 18,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/index.md",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/index.md",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/index.md?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -1,17 +1,19 @@\n----\n+\n layout: page\n-title: AddressBook Level-3\n----\n+title: TimeforWheels\n+\n+\n+\n+[![CI Status](https://github.com/AY2021S2-CS2103T-W10-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W10-3/tp/actions)\n+[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-W10-3/tp)\n \n-[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)\n-[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)\n \n ![Ui](images/Ui.png)\n \n-**AddressBook is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).\n+**TimeforWheels is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).\n \n-* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).\n-* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.\n+* If you are interested in using TimeforWheels, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).\n+* If you are interested about developing TimeforWheels, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.\n \n \n **Acknowledgements**"
  },
  {
    "sha": "1f1e9e6f6db3e9100bad651cbc47b2804bff7681",
    "filename": "docs/team/johndoe.md",
    "status": "removed",
    "additions": 0,
    "deletions": 46,
    "changes": 46,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/c36220c210a210a9ae4a2f3eb6fb73f395f500cc/docs/team/johndoe.md",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/c36220c210a210a9ae4a2f3eb6fb73f395f500cc/docs/team/johndoe.md",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/team/johndoe.md?ref=c36220c210a210a9ae4a2f3eb6fb73f395f500cc",
    "patch": "@@ -1,46 +0,0 @@\n----\n-layout: page\n-title: John Doe's Project Portfolio Page\n----\n-\n-## Project: AddressBook Level 3\n-\n-AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.\n-\n-Given below are my contributions to the project.\n-\n-* **New Feature**: Added the ability to undo/redo previous commands.\n-  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.\n-  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.\n-  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.\n-  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*\n-\n-* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.\n-\n-* **Code contributed**: [RepoSense link]()\n-\n-* **Project management**:\n-  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub\n-\n-* **Enhancements to existing features**:\n-  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())\n-  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())\n-\n-* **Documentation**:\n-  * User Guide:\n-    * Added documentation for the features `delete` and `find` [\\#72]()\n-    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()\n-  * Developer Guide:\n-    * Added implementation details of the `delete` feature.\n-\n-* **Community**:\n-  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()\n-  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())\n-  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())\n-  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())\n-\n-* **Tools**:\n-  * Integrated a third party library (Natty) to the project ([\\#42]())\n-  * Integrated a new Github plugin (CircleCI) to the team repo\n-\n-* _{you can add/remove categories in the list above}_"
  },
  {
    "sha": "060957e320e835d84573cd39a60b515347e062dc",
    "filename": "docs/team/lianjiade.md",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/team/lianjiade.md",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/docs/team/lianjiade.md",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/docs/team/lianjiade.md?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -0,0 +1,21 @@\n+---\n+layout: page\n+title: Lian Jiade's Project Portfolio Page\n+---\n+\n+## Project: TimeForWheels\n+\n+TimeForWheels is an app for delivery drivers to manage their orders efficiently. It is optimized\n+for use via a Command Line Interface while still having the benefits of a Graphical User\n+Interface(GUI). Overall, TimeForWheels aims to increase work productivity for delivery drivers\n+by simplifying the delivery management and planning process.\n+\n+Given below are my contributions to the project.\n+\n+\n+* **Code contributed**: [RepoSense link]()\n+\n+* **Project management**:\n+  * Managed releases `v1.1` - `v1.4` (3 releases) on GitHub\n+\n+"
  },
  {
    "sha": "84b937c3ea1189e50e0da8fb787b224cf76ff675",
    "filename": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/AddCommand.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/AddCommand.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/commands/AddCommand.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -11,6 +11,7 @@\n import seedu.address.model.Model;\n import seedu.address.model.person.Person;\n \n+\n /**\n  * Adds a person to the address book.\n  */\n@@ -33,7 +34,7 @@\n             + PREFIX_TAG + \"friends \"\n             + PREFIX_TAG + \"owesMoney\";\n \n-    public static final String MESSAGE_SUCCESS = \"New person added: %1$s\";\n+    public static final String MESSAGE_SUCCESS = \"The following new person has been added: %1$s\";\n     public static final String MESSAGE_DUPLICATE_PERSON = \"This person already exists in the address book\";\n \n     private final Person toAdd;"
  },
  {
    "sha": "b6f6cfca420a6a442909b07c15cbbe5f35730b92",
    "filename": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/commands/ClearCommand.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -11,7 +11,7 @@\n public class ClearCommand extends Command {\n \n     public static final String COMMAND_WORD = \"clear\";\n-    public static final String MESSAGE_SUCCESS = \"Address book has been cleared!\";\n+    public static final String MESSAGE_SUCCESS = \"TimeForWheels' entries has been cleared!\";\n \n \n     @Override"
  },
  {
    "sha": "bf5a1e59a98df065a4acdf47ccc6eb7b3fa9f0f1",
    "filename": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/commands/DeleteCommand.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -10,6 +10,7 @@\n import seedu.address.model.Model;\n import seedu.address.model.person.Person;\n \n+\n /**\n  * Deletes a person identified using it's displayed index from the address book.\n  */\n@@ -22,7 +23,7 @@\n             + \"Parameters: INDEX (must be a positive integer)\\n\"\n             + \"Example: \" + COMMAND_WORD + \" 1\";\n \n-    public static final String MESSAGE_DELETE_PERSON_SUCCESS = \"Deleted Person: %1$s\";\n+    public static final String MESSAGE_DELETE_PERSON_SUCCESS = \"The following Person has been deleted: %1$s\";\n \n     private final Index targetIndex;\n "
  },
  {
    "sha": "810e3498d02bf4865f5ea1e9ad499e3e6fa91b20",
    "filename": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/commands/DoneCommand.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -0,0 +1,74 @@\n+package seedu.address.logic.commands;\n+\n+import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n+import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.core.Messages;\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.logic.commands.exceptions.CommandException;\n+import seedu.address.model.Model;\n+import seedu.address.model.person.Done;\n+import seedu.address.model.person.Person;\n+\n+/**\n+ * Edits the details of an existing person in the address book.\n+ */\n+public class DoneCommand extends Command {\n+\n+    public static final String COMMAND_WORD = \"done\";\n+\n+    public static final String MESSAGE_USAGE = COMMAND_WORD\n+            + \": Marks a task as done with a tick \"\n+            + \"by the index number used in the listing. \\n\"\n+            + \"Parameters: INDEX (must be a positive integer) \"\n+            + \"Example: \" + COMMAND_WORD + \" 1 \";\n+\n+\n+    public static final String MESSAGE_DONE_PERSON_SUCCESS = \"The following Delivery Order has been checkmarked : %1$s\";\n+    public static final String checkMark = \"[✓]\";\n+    private final Index targetIndex;\n+    private final Done done;\n+\n+    /**\n+     * @param targetIndex of the person in the filtered person list to edit\n+     */\n+    public DoneCommand(Index targetIndex) {\n+        requireAllNonNull(targetIndex);\n+        this.targetIndex = targetIndex;\n+        this.done = new Done(checkMark);\n+\n+    }\n+\n+\n+    @Override\n+    public CommandResult execute(Model model) throws CommandException {\n+        List<Person> lastShownList = model.getFilteredPersonList();\n+        if (targetIndex.getZeroBased() >= lastShownList.size()) {\n+            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+        }\n+        Person personToEdit = lastShownList.get(targetIndex.getZeroBased());\n+\n+        Person editedPerson;\n+\n+        if (personToEdit.getDone().toString().equals(\"\")) {\n+            editedPerson = new Person(personToEdit.getName(), personToEdit.getPhone(),\n+                    personToEdit.getEmail(), personToEdit.getAddress(),\n+                    personToEdit.getRemark(), personToEdit.getTags(), done);\n+\n+        } else {\n+            editedPerson = new Person(personToEdit.getName(), personToEdit.getPhone(),\n+                    personToEdit.getEmail(), personToEdit.getAddress(),\n+                    personToEdit.getRemark(), personToEdit.getTags(), new Done(\"\"));\n+\n+        }\n+\n+        model.setPerson(personToEdit, editedPerson);\n+        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n+        return new CommandResult(String.format(MESSAGE_DONE_PERSON_SUCCESS, personToEdit));\n+    }\n+\n+\n+}\n+"
  },
  {
    "sha": "bf290f4ca90ff1a01306921cfe835aa813729584",
    "filename": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "status": "modified",
    "additions": 29,
    "deletions": 4,
    "changes": 33,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/commands/EditCommand.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -20,12 +20,15 @@\n import seedu.address.logic.commands.exceptions.CommandException;\n import seedu.address.model.Model;\n import seedu.address.model.person.Address;\n+import seedu.address.model.person.Done;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n+\n /**\n  * Edits the details of an existing person in the address book.\n  */\n@@ -98,8 +101,10 @@ private static Person createEditedPerson(Person personToEdit, EditPersonDescript\n         Email updatedEmail = editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());\n         Address updatedAddress = editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());\n         Set<Tag> updatedTags = editPersonDescriptor.getTags().orElse(personToEdit.getTags());\n-\n-        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);\n+        Remark updatedRemark = editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());\n+        Done updatedDone = editPersonDescriptor.getDone().orElse(personToEdit.getDone());\n+        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,\n+                updatedRemark, updatedTags, updatedDone);\n     }\n \n     @Override\n@@ -108,7 +113,6 @@ public boolean equals(Object other) {\n         if (other == this) {\n             return true;\n         }\n-\n         // instanceof handles nulls\n         if (!(other instanceof EditCommand)) {\n             return false;\n@@ -130,6 +134,8 @@ public boolean equals(Object other) {\n         private Email email;\n         private Address address;\n         private Set<Tag> tags;\n+        private Remark remark;\n+        private Done done;\n \n         public EditPersonDescriptor() {}\n \n@@ -143,6 +149,8 @@ public EditPersonDescriptor(EditPersonDescriptor toCopy) {\n             setEmail(toCopy.email);\n             setAddress(toCopy.address);\n             setTags(toCopy.tags);\n+            setRemark(toCopy.remark);\n+            setDone(toCopy.done);\n         }\n \n         /**\n@@ -184,6 +192,22 @@ public void setAddress(Address address) {\n             return Optional.ofNullable(address);\n         }\n \n+        public void setRemark(Remark remark) {\n+            this.remark = remark;\n+        }\n+\n+        public Optional<Remark> getRemark() {\n+            return Optional.ofNullable(remark);\n+        }\n+\n+        public void setDone(Done done) {\n+            this.done = done;\n+        }\n+\n+        public Optional<Done> getDone() {\n+            return Optional.ofNullable(done);\n+        }\n+\n         /**\n          * Sets {@code tags} to this object's {@code tags}.\n          * A defensive copy of {@code tags} is used internally.\n@@ -220,7 +244,8 @@ public boolean equals(Object other) {\n                     && getPhone().equals(e.getPhone())\n                     && getEmail().equals(e.getEmail())\n                     && getAddress().equals(e.getAddress())\n-                    && getTags().equals(e.getTags());\n+                    && getTags().equals(e.getTags())\n+                    && getDone().equals(e.getDone());\n         }\n     }\n }"
  },
  {
    "sha": "b4aa1d7796cf35585da209dedb7e21d52ca8b291",
    "filename": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/commands/ExitCommand.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -9,7 +9,7 @@\n \n     public static final String COMMAND_WORD = \"exit\";\n \n-    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT = \"Exiting Address Book as requested ...\";\n+    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT = \"Exiting TimeForWheels as requested ...\";\n \n     @Override\n     public CommandResult execute(Model model) {"
  },
  {
    "sha": "63f9a76320e3b488506c3063366565c006bd685b",
    "filename": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/FindCommand.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/FindCommand.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/commands/FindCommand.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -6,6 +6,7 @@\n import seedu.address.model.Model;\n import seedu.address.model.person.NameContainsKeywordsPredicate;\n \n+\n /**\n  * Finds and lists all persons in address book whose name contains any of the argument keywords.\n  * Keyword matching is case insensitive."
  },
  {
    "sha": "e1d5b5ba9e82f929e3406a5285d2b1657de95834",
    "filename": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/commands/RemarkCommand.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -0,0 +1,89 @@\n+package seedu.address.logic.commands;\n+\n+import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n+import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.core.Messages;\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.logic.commands.exceptions.CommandException;\n+import seedu.address.model.Model;\n+import seedu.address.model.person.Person;\n+import seedu.address.model.person.Remark;\n+\n+\n+\n+public class RemarkCommand extends Command {\n+\n+    public static final String COMMAND_WORD = \"remark\";\n+\n+    public static final String MESSAGE_USAGE = COMMAND_WORD\n+            + \": Edits the remark of the person identified \"\n+            + \"by the index number used in the last person listing. \"\n+            + \"Existing remark will be overwritten by the input.\\n\"\n+            + \"Parameters: INDEX (must be a positive integer) \"\n+            + \"r/ [REMARK]\\n\"\n+            + \"Example: \" + COMMAND_WORD + \" 1 \"\n+            + \"r/ Likes to swim.\";\n+\n+    public static final String MESSAGE_ADD_REMARK_SUCCESS = \"Added remark to Person: %1$s\";\n+    public static final String MESSAGE_DELETE_REMARK_SUCCESS = \"Removed remark from Person: %1$s\";\n+\n+    private final Index index;\n+    private final Remark remark;\n+\n+\n+    /**\n+     * @param index of the person in the filtered person list to edit the remark\n+     * @param remark of the person to be updated to\n+     */\n+    public RemarkCommand(Index index, Remark remark) {\n+        requireAllNonNull(index, remark);\n+        this.index = index;\n+        this.remark = remark;\n+    }\n+\n+\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        // short circuit if same object\n+        if (other == this) {\n+            return true;\n+        }\n+\n+        // instanceof handles nulls\n+        if (!(other instanceof RemarkCommand)) {\n+            return false;\n+        }\n+\n+        // state check\n+        RemarkCommand e = (RemarkCommand) other;\n+        return index.equals(e.index)\n+                && remark.equals(e.remark);\n+    }\n+\n+    @Override\n+    public CommandResult execute(Model model) throws CommandException {\n+        List<Person> lastShownList = model.getFilteredPersonList();\n+\n+        if (index.getZeroBased() >= lastShownList.size()) {\n+            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+        }\n+        Person personToEdit = lastShownList.get(index.getZeroBased());\n+        Person editedPerson = new Person(personToEdit.getName(), personToEdit.getPhone(),\n+                personToEdit.getEmail(), personToEdit.getAddress(), remark,\n+                personToEdit.getTags(), personToEdit.getDone());\n+        model.setPerson(personToEdit, editedPerson);\n+        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n+        return new CommandResult(generateSuccessMessage(editedPerson));\n+    }\n+\n+    private String generateSuccessMessage(Person editedPerson) {\n+        String message = !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS\n+                : MESSAGE_DELETE_REMARK_SUCCESS;\n+        return String.format(message, editedPerson);\n+    }\n+}\n+"
  },
  {
    "sha": "af554e3f652535ecd94a4e952df7d54b2699b3f7",
    "filename": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "status": "modified",
    "additions": 15,
    "deletions": 9,
    "changes": 24,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/parser/AddCommandParser.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -13,14 +13,19 @@\n import seedu.address.logic.commands.AddCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n import seedu.address.model.person.Address;\n+import seedu.address.model.person.Done;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n+\n+\n+\n /**\n- * Parses input arguments and creates a new AddCommand object\n+ * Parses input arguments and creates a new AddCommand object.\n  */\n public class AddCommandParser implements Parser<AddCommand> {\n \n@@ -31,21 +36,22 @@\n      */\n     public AddCommand parse(String args) throws ParseException {\n         ArgumentMultimap argMultimap =\n-                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);\n-\n-        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)\n-                || !argMultimap.getPreamble().isEmpty()) {\n-            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));\n+                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,\n+                        PREFIX_ADDRESS, PREFIX_TAG);\n+        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE,\n+                PREFIX_EMAIL) || !argMultimap.getPreamble().isEmpty()) {\n+            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,\n+                    AddCommand.MESSAGE_USAGE));\n         }\n \n         Name name = ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());\n         Phone phone = ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());\n         Email email = ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());\n         Address address = ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());\n         Set<Tag> tagList = ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));\n-\n-        Person person = new Person(name, phone, email, address, tagList);\n-\n+        Remark remark = new Remark(\"\"); // add command does not allow adding remarks straight away\n+        Done done = new Done(\"\"); // add command does not allow adding done straight away\n+        Person person = new Person(name, phone, email, address, remark, tagList, done);\n         return new AddCommand(person);\n     }\n "
  },
  {
    "sha": "f64e4fced40c3b5c26cc4e8f3735fd402d4bc33f",
    "filename": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/parser/AddressBookParser.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -10,13 +10,16 @@\n import seedu.address.logic.commands.ClearCommand;\n import seedu.address.logic.commands.Command;\n import seedu.address.logic.commands.DeleteCommand;\n+import seedu.address.logic.commands.DoneCommand;\n import seedu.address.logic.commands.EditCommand;\n import seedu.address.logic.commands.ExitCommand;\n import seedu.address.logic.commands.FindCommand;\n import seedu.address.logic.commands.HelpCommand;\n import seedu.address.logic.commands.ListCommand;\n+import seedu.address.logic.commands.RemarkCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n \n+\n /**\n  * Parses user input.\n  */\n@@ -68,6 +71,12 @@ public Command parseCommand(String userInput) throws ParseException {\n         case HelpCommand.COMMAND_WORD:\n             return new HelpCommand();\n \n+        case RemarkCommand.COMMAND_WORD:\n+            return new RemarkCommandParser().parse(arguments);\n+\n+        case DoneCommand.COMMAND_WORD:\n+            return new DoneCommandParser().parse(arguments);\n+\n         default:\n             throw new ParseException(MESSAGE_UNKNOWN_COMMAND);\n         }"
  },
  {
    "sha": "74957c36805488c5203cf0e972c7bd0448d76eb6",
    "filename": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/parser/CliSyntax.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -10,6 +10,8 @@\n     public static final Prefix PREFIX_PHONE = new Prefix(\"p/\");\n     public static final Prefix PREFIX_EMAIL = new Prefix(\"e/\");\n     public static final Prefix PREFIX_ADDRESS = new Prefix(\"a/\");\n+    public static final Prefix PREFIX_REMARK = new Prefix(\"r/\");\n     public static final Prefix PREFIX_TAG = new Prefix(\"t/\");\n \n+\n }"
  },
  {
    "sha": "43200fdc97274f0705a604582e185d6b7ee79669",
    "filename": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/parser/DoneCommandParser.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -0,0 +1,28 @@\n+package seedu.address.logic.parser;\n+\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n+\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.logic.commands.DoneCommand;\n+import seedu.address.logic.parser.exceptions.ParseException;\n+\n+/**\n+ * Parses input arguments and creates a new DoneCommand object.\n+ */\n+public class DoneCommandParser implements Parser<DoneCommand> {\n+\n+    /**\n+     * Parses the given {@code String} of arguments in the context of the DoneCommand\n+     * and returns a DoneCommand object for execution.\n+     * @throws ParseException if the user input does not conform the expected format\n+     */\n+    public DoneCommand parse(String args) throws ParseException {\n+        try {\n+            Index index = ParserUtil.parseIndex(args);\n+            return new DoneCommand(index);\n+        } catch (ParseException pe) {\n+            throw new ParseException(\n+                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);\n+        }\n+    }\n+}"
  },
  {
    "sha": "23635e6c545d810aa7989f3b0bc94f19a784fa54",
    "filename": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -0,0 +1,35 @@\n+package seedu.address.logic.parser;\n+import static java.util.Objects.requireNonNull;\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n+\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.commons.exceptions.IllegalValueException;\n+import seedu.address.logic.commands.RemarkCommand;\n+import seedu.address.logic.parser.exceptions.ParseException;\n+import seedu.address.model.person.Remark;\n+\n+\n+public class RemarkCommandParser implements Parser<RemarkCommand> {\n+    /**\n+     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}\n+     * and returns a {@code RemarkCommand} object for execution.\n+     * @throws ParseException if the user input does not conform the expected format\n+     */\n+    public RemarkCommand parse(String args) throws ParseException {\n+        requireNonNull(args);\n+        ArgumentMultimap argMultimap = ArgumentTokenizer.tokenize(args, PREFIX_REMARK);\n+\n+        Index index;\n+        try {\n+            index = ParserUtil.parseIndex(argMultimap.getPreamble());\n+        } catch (IllegalValueException ive) {\n+            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), ive);\n+        }\n+\n+        String remark = argMultimap.getValue(PREFIX_REMARK).orElse(\"\");\n+\n+        return new RemarkCommand(index, new Remark(remark));\n+    }\n+\n+}"
  },
  {
    "sha": "ac30aa320579786030fe04208e4c4f38c8d45deb",
    "filename": "src/main/java/seedu/address/model/person/Done.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/model/person/Done.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/model/person/Done.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/model/person/Done.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -0,0 +1,42 @@\n+package seedu.address.model.person;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Represents a Person's remark in the address book.\n+ * Guarantees: immutable; is always valid\n+ */\n+public class Done {\n+\n+    public final String value;\n+\n+    /**\n+     * Constructs an {@code Remark}.\n+     *\n+     * @param done A valid string.\n+     */\n+    public Done(String done) {\n+        requireNonNull(done);\n+        value = done;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return value;\n+    }\n+\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return other == this // short circuit if same object\n+                || (other instanceof Done // instanceof handles nulls\n+                && value.equals(((Done) other).value)); // state check\n+    }\n+\n+\n+    @Override\n+    public int hashCode() {\n+        return value.hashCode();\n+    }\n+\n+}"
  },
  {
    "sha": "7486444eac0b1d0adee74711fa872f4ed690e61e",
    "filename": "src/main/java/seedu/address/model/person/Name.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/model/person/Name.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/model/person/Name.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/model/person/Name.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -10,7 +10,7 @@\n public class Name {\n \n     public static final String MESSAGE_CONSTRAINTS =\n-            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";\n+            \"Names should only contain alphanumeric characters and spaces. It should not be blank\";\n \n     /*\n      * The first character of the address must not be a whitespace,"
  },
  {
    "sha": "9f9030db35a740c6b859ba024a195ed4ce0838aa",
    "filename": "src/main/java/seedu/address/model/person/Person.java",
    "status": "modified",
    "additions": 16,
    "deletions": 3,
    "changes": 19,
    "blob_url": "https://github.com/nus-cs2103-AY2021S2/tp/blob/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/model/person/Person.java",
    "raw_url": "https://github.com/nus-cs2103-AY2021S2/tp/raw/99bc244b2cabf27630c21ea7bb404c21b360ab3c/src/main/java/seedu/address/model/person/Person.java",
    "contents_url": "https://api.github.com/repos/nus-cs2103-AY2021S2/tp/contents/src/main/java/seedu/address/model/person/Person.java?ref=99bc244b2cabf27630c21ea7bb404c21b360ab3c",
    "patch": "@@ -19,6 +19,8 @@\n     private final Name name;\n     private final Phone phone;\n     private final Email email;\n+    private final Remark remark;\n+    private final Done done;\n \n     // Data fields\n     private final Address address;\n@@ -27,13 +29,15 @@\n     /**\n      * Every field must be present and not null.\n      */\n-    public Person(Name name, Phone phone, Email email, Address address, Set<Tag> tags) {\n+    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set<Tag> tags, Done done) {\n         requireAllNonNull(name, phone, email, address, tags);\n         this.name = name;\n         this.phone = phone;\n         this.email = email;\n         this.address = address;\n+        this.remark = remark;\n         this.tags.addAll(tags);\n+        this.done = done;\n     }\n \n     public Name getName() {\n@@ -52,6 +56,14 @@ public Address getAddress() {\n         return address;\n     }\n \n+    public Remark getRemark() {\n+        return remark;\n+    }\n+\n+    public Done getDone() {\n+        return done;\n+    }\n+\n     /**\n      * Returns an immutable tag set, which throws {@code UnsupportedOperationException}\n      * if modification is attempted.\n@@ -98,7 +110,7 @@ public boolean equals(Object other) {\n     @Override\n     public int hashCode() {\n         // use this method for custom fields hashing instead of implementing your own\n-        return Objects.hash(name, phone, email, address, tags);\n+        return Objects.hash(name, phone, email, address, tags, done);\n     }\n \n     @Override\n@@ -110,7 +122,8 @@ public String toString() {\n                 .append(\"; Email: \")\n                 .append(getEmail())\n                 .append(\"; Address: \")\n-                .append(getAddress());\n+                .append(getAddress())\n+                .append(getDone());\n \n         Set<Tag> tags = getTags();\n         if (!tags.isEmpty()) {"
  }
]
