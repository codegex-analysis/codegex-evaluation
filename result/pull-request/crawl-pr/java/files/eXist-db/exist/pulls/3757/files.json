[
  {
    "sha": "3e53d2b72d17f4042002153108b987a23f19108e",
    "filename": "exist-core/src/main/java/org/exist/http/urlrewrite/XQueryURLRewrite.java",
    "status": "modified",
    "additions": 29,
    "deletions": 9,
    "changes": 38,
    "blob_url": "https://github.com/eXist-db/exist/blob/69301b28b3d78825c31ae996c7c2e7aa9bf95d5f/exist-core/src/main/java/org/exist/http/urlrewrite/XQueryURLRewrite.java",
    "raw_url": "https://github.com/eXist-db/exist/raw/69301b28b3d78825c31ae996c7c2e7aa9bf95d5f/exist-core/src/main/java/org/exist/http/urlrewrite/XQueryURLRewrite.java",
    "contents_url": "https://api.github.com/repos/eXist-db/exist/contents/exist-core/src/main/java/org/exist/http/urlrewrite/XQueryURLRewrite.java?ref=69301b28b3d78825c31ae996c7c2e7aa9bf95d5f",
    "patch": "@@ -107,8 +107,10 @@\n     private static final String DRIVER = \"org.exist.xmldb.DatabaseImpl\";\n     private static final Pattern NAME_REGEX = Pattern.compile(\"^.*/([^/]+)$\", 0);\n \n-    public static final String XQUERY_CONTROLLER_FILENAME = \"controller.xql\";\n+    public static final String XQUERY_CONTROLLER_FILENAME = \"controller.xq\";\n+    public static final String LEGACY_XQUERY_CONTROLLER_FILENAME = \"controller.xql\";\n     public static final XmldbURI XQUERY_CONTROLLER_URI = XmldbURI.create(XQUERY_CONTROLLER_FILENAME);\n+    public static final XmldbURI LEGACY_XQUERY_CONTROLLER_URI = XmldbURI.create(LEGACY_XQUERY_CONTROLLER_FILENAME);\n \n     public static final String RQ_ATTR = \"org.exist.forward\";\n     public static final String RQ_ATTR_REQUEST_URI = \"org.exist.forward.request-uri\";\n@@ -763,21 +765,22 @@ SourceInfo findSourceFromDb(final DBBroker broker, final String basePath, final\n     }\n \n     /**\n-     * Finds a `controller.xql` file within a Collection hierarchy.\n+     * Finds a `controller.xq` (or legacy `controller.xql`)\n+     * file within a Collection hierarchy.\n      * Most specific collections are considered first.\n      *\n      * For example, given the collectionUri `/db/apps`\n      * and the resourceUri /db/apps/myapp/data, the\n      * order or search will be:\n      *\n-     * /db/apps/myapp/data/controller.xql\n-     * /db/apps/myapp/controller.xql\n-     * /db/apps/controller.xql\n+     * /db/apps/myapp/data/controller.xq\n+     * /db/apps/myapp/controller.xq\n+     * /db/apps/controller.xq\n      *\n      * @param broker         The database broker\n      * @param collectionUri  The root collection URI, below which we should not descend\n      * @param resourceUri The path to the most specific document or collection for which we should find a controller\n-     * @return The most relevant controller.xql document (with a READ_LOCK), or null if it could not be found.\n+     * @return The most relevant controller.xq document (with a READ_LOCK), or null if it could not be found.\n      */\n     //@tailrec\n     private @Nullable\n@@ -788,12 +791,19 @@ LockedDocument findDbControllerXql(final DBBroker broker, final XmldbURI collect\n \n         try (final Collection collection = broker.openCollection(resourceUri, LockMode.READ_LOCK)) {\n             if (collection != null) {\n-                final LockedDocument lockedDoc = collection.getDocumentWithLock(broker, XQUERY_CONTROLLER_URI, LockMode.READ_LOCK);\n+                LockedDocument lockedDoc = collection.getDocumentWithLock(broker, XQUERY_CONTROLLER_URI, LockMode.READ_LOCK);\n+\n+                if (lockedDoc == null) {\n+                    lockedDoc = collection.getDocumentWithLock(broker, LEGACY_XQUERY_CONTROLLER_URI, LockMode.READ_LOCK);\n+                }\n+\n                 if (lockedDoc != null) {\n                     // NOTE: early release of Collection lock inline with Asymmetrical Locking scheme\n                     // collection lock will be released by the try-with-resources before the locked document is returned by this function\n                     return lockedDoc;\n                 }\n+\n+\n             }\n         } catch (final PermissionDeniedException e) {\n             if (LOG.isDebugEnabled()) {\n@@ -829,7 +839,12 @@ private SourceInfo findSourceFromFs(final String basePath, final String[] compon\n             if (!component.isEmpty()) {\n                 subDir = subDir.resolve(component);\n                 if (Files.isDirectory(subDir)) {\n-                    final Path cf = subDir.resolve(XQUERY_CONTROLLER_FILENAME);\n+                    Path cf = subDir.resolve(XQUERY_CONTROLLER_FILENAME);\n+\n+                    if (!Files.isReadable(cf)) {\n+                        cf = subDir.resolve(LEGACY_XQUERY_CONTROLLER_FILENAME);\n+                    }\n+\n                     if (Files.isReadable(cf)) {\n                         controllerFile = cf;\n                     }\n@@ -840,7 +855,12 @@ private SourceInfo findSourceFromFs(final String basePath, final String[] compon\n         }\n \n         if (controllerFile == null) {\n-            final Path cf = baseDir.resolve(XQUERY_CONTROLLER_FILENAME);\n+            Path cf = baseDir.resolve(XQUERY_CONTROLLER_FILENAME);\n+\n+            if (!Files.isReadable(cf)) {\n+                cf = subDir.resolve(LEGACY_XQUERY_CONTROLLER_FILENAME);\n+            }\n+\n             if (Files.isReadable(cf)) {\n                 controllerFile = cf;\n             }"
  },
  {
    "sha": "b7d69f5f4bd5510080aa84adcf8b69a73cf93044",
    "filename": "exist-core/src/test/java/org/exist/http/AbstractHttpTest.java",
    "status": "added",
    "additions": 113,
    "deletions": 0,
    "changes": 113,
    "blob_url": "https://github.com/eXist-db/exist/blob/69301b28b3d78825c31ae996c7c2e7aa9bf95d5f/exist-core/src/test/java/org/exist/http/AbstractHttpTest.java",
    "raw_url": "https://github.com/eXist-db/exist/raw/69301b28b3d78825c31ae996c7c2e7aa9bf95d5f/exist-core/src/test/java/org/exist/http/AbstractHttpTest.java",
    "contents_url": "https://api.github.com/repos/eXist-db/exist/contents/exist-core/src/test/java/org/exist/http/AbstractHttpTest.java?ref=69301b28b3d78825c31ae996c7c2e7aa9bf95d5f",
    "patch": "@@ -0,0 +1,113 @@\n+/*\n+ * eXist-db Open Source Native XML Database\n+ * Copyright (C) 2001 The eXist-db Authors\n+ *\n+ * info@exist-db.org\n+ * http://www.exist-db.org\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package org.exist.http;\n+\n+import com.evolvedbinary.j8fu.function.FunctionE;\n+import org.apache.http.HttpHost;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.fluent.Executor;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.exist.TestUtils;\n+import org.exist.test.ExistWebServer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * @author <a href=\"mailto:adam@evolvedbinary.com\">Adam Retter</a>\n+ */\n+public abstract class AbstractHttpTest {\n+\n+    /**\n+     * Get the Server URI.\n+     *\n+     * @param existWebServer the eXist-db Web Server.\n+     *\n+     * @return the Server URI.\n+     */\n+    protected static String getServerUri(final ExistWebServer existWebServer) {\n+        return \"http://localhost:\" + existWebServer.getPort() + \"/exist\";\n+    }\n+\n+    /**\n+     * Get the URI of the Server's REST end-point.\n+     *\n+     * @param existWebServer the eXist-db Web Server.\n+     *\n+     * @return the URI of the Server's REST end-point.\n+     */\n+    protected static String getRestUri(final ExistWebServer existWebServer) {\n+        return getServerUri(existWebServer) + \"/rest\";\n+    }\n+\n+    /**\n+     * Get the URI of the Server's Apps end-point.\n+     *\n+     * @param existWebServer the eXist-db Web Server.\n+     *\n+     * @return the URI of the Server's Apps end-point.\n+     */\n+    protected static String getAppsUri(final ExistWebServer existWebServer) {\n+        return getServerUri(existWebServer) + \"/apps\";\n+    }\n+\n+    /**\n+     * Execute a function with a HTTP Client.\n+     *\n+     * @param <T> the return type of the <code>fn</code> function.\n+     * @param fn the function which accepts the HTTP Client.\n+     *\n+     * @return the result of the <code>fn</code> function.\n+     *\n+     * @throws IOException if an I/O error occurs\n+     */\n+    protected static <T> T withHttpClient(final FunctionE<HttpClient, T, IOException> fn) throws IOException {\n+        try (final CloseableHttpClient client = HttpClientBuilder\n+                .create()\n+                .disableAutomaticRetries()\n+                .build()) {\n+            return fn.apply(client);\n+        }\n+    }\n+\n+    /**\n+     * Execute a function with a HTTP Executor.\n+     *\n+     * @param <T> the return type of the <code>fn</code> function.\n+     * @param existWebServer the eXist-db Web Server.\n+     * @param fn the function which accepts the HTTP Executor.\n+     *\n+     * @return the result of the <code>fn</code> function.\n+     *\n+     * @throws IOException if an I/O error occurs\n+     */\n+    protected static <T> T withHttpExecutor(final ExistWebServer existWebServer, final FunctionE<Executor, T, IOException> fn) throws IOException {\n+        return withHttpClient(client -> {\n+            final Executor executor = Executor\n+                    .newInstance(client)\n+                    .auth(TestUtils.ADMIN_DB_USER, TestUtils.ADMIN_DB_PWD)\n+                    .authPreemptive(new HttpHost(\"localhost\", existWebServer.getPort()));\n+            return fn.apply(executor);\n+        });\n+    }\n+}"
  },
  {
    "sha": "a8089d3df52f74483f77bb79903c5c774f5667fa",
    "filename": "exist-core/src/test/java/org/exist/http/urlrewrite/ControllerTest.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/eXist-db/exist/blob/69301b28b3d78825c31ae996c7c2e7aa9bf95d5f/exist-core/src/test/java/org/exist/http/urlrewrite/ControllerTest.java",
    "raw_url": "https://github.com/eXist-db/exist/raw/69301b28b3d78825c31ae996c7c2e7aa9bf95d5f/exist-core/src/test/java/org/exist/http/urlrewrite/ControllerTest.java",
    "contents_url": "https://api.github.com/repos/eXist-db/exist/contents/exist-core/src/test/java/org/exist/http/urlrewrite/ControllerTest.java?ref=69301b28b3d78825c31ae996c7c2e7aa9bf95d5f",
    "patch": "@@ -0,0 +1,119 @@\n+/*\n+ * eXist-db Open Source Native XML Database\n+ * Copyright (C) 2001 The eXist-db Authors\n+ *\n+ * info@exist-db.org\n+ * http://www.exist-db.org\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package org.exist.http.urlrewrite;\n+\n+import com.evolvedbinary.j8fu.tuple.Tuple2;\n+import org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.fluent.Request;\n+import org.apache.http.entity.ContentType;\n+import org.exist.http.AbstractHttpTest;\n+import org.exist.test.ExistWebServer;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static com.evolvedbinary.j8fu.tuple.Tuple.Tuple;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.exist.http.urlrewrite.XQueryURLRewrite.LEGACY_XQUERY_CONTROLLER_FILENAME;\n+import static org.exist.http.urlrewrite.XQueryURLRewrite.XQUERY_CONTROLLER_FILENAME;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * @author <a href=\"mailto:adam@evolvedbinary.com\">Adam Retter</a>\n+ */\n+public class ControllerTest extends AbstractHttpTest {\n+\n+    private static final String CONTROLLER_XQUERY = \"<controller>xq</controller>\";\n+    private static final String LEGACY_CONTROLLER_XQUERY = \"<controller>xql</controller>\";\n+    private static final String TEST_DOCUMENT_NAME = \"test.xml\";\n+\n+    @Rule\n+    public final ExistWebServer existWebServer = new ExistWebServer(true, false, true, true, false);\n+\n+    @Test\n+    public void findsLegacyController() throws IOException {\n+        final String testCollectionName = \"test-finds-legacy-controller\";\n+\n+        // store the legacy controller\n+        store(testCollectionName, \"application/xquery\", LEGACY_XQUERY_CONTROLLER_FILENAME, LEGACY_CONTROLLER_XQUERY);\n+\n+        // make a request and see if the legacy controller responds\n+        final Tuple2<Integer, String> responseCodeAndBody = get(testCollectionName, TEST_DOCUMENT_NAME);\n+        assertEquals(HttpStatus.SC_OK, (int)responseCodeAndBody._1);\n+        assertEquals(LEGACY_CONTROLLER_XQUERY, responseCodeAndBody._2);\n+    }\n+\n+    @Test\n+    public void findsController() throws IOException {\n+        final String testCollectionName = \"test-finds-controller\";\n+\n+        // store the controller\n+        store(testCollectionName, \"application/xquery\", XQUERY_CONTROLLER_FILENAME, CONTROLLER_XQUERY);\n+\n+        // make a request and see if the controller responds\n+        final Tuple2<Integer, String> responseCodeAndBody = get(testCollectionName, TEST_DOCUMENT_NAME);\n+        assertEquals(HttpStatus.SC_OK, (int)responseCodeAndBody._1);\n+        assertEquals(CONTROLLER_XQUERY, responseCodeAndBody._2);\n+    }\n+\n+    @Test\n+    public void prefersNonLegacyController() throws IOException {\n+        final String testCollectionName = \"test-prefers-non-legacy-controller\";\n+\n+        // store the controller and the legacy controller\n+        store(testCollectionName, \"application/xquery\", XQUERY_CONTROLLER_FILENAME, CONTROLLER_XQUERY);\n+        store(testCollectionName, \"application/xquery\", LEGACY_XQUERY_CONTROLLER_FILENAME, LEGACY_CONTROLLER_XQUERY);\n+\n+        // make a request and see if the (non-legacy) controller responds\n+        final Tuple2<Integer, String> responseCodeAndBody = get(testCollectionName, TEST_DOCUMENT_NAME);\n+        assertEquals(HttpStatus.SC_OK, (int)responseCodeAndBody._1);\n+        assertEquals(CONTROLLER_XQUERY, responseCodeAndBody._2);\n+    }\n+\n+    private void store(final String testCollectionName, final String documentMediaType, final String documentName, final String documentContent) throws IOException {\n+        final Request request = Request\n+                .Put(getRestUri(existWebServer) + \"/db/apps/\" + testCollectionName + \"/\" + documentName)\n+                .bodyString(documentContent, ContentType.create(documentMediaType));\n+        int statusCode = withHttpExecutor(existWebServer, executor ->\n+                executor.execute(request).returnResponse().getStatusLine().getStatusCode()\n+        );\n+        assertEquals(HttpStatus.SC_CREATED, statusCode);\n+    }\n+\n+    private Tuple2<Integer, String> get(final String testCollectionName, final String documentName) throws IOException {\n+        final Request request = Request\n+                .Get(getAppsUri(existWebServer) + \"/\" + testCollectionName + \"/\" + documentName);\n+        final Tuple2<Integer, String> responseCodeAndBody = withHttpExecutor(existWebServer, executor -> {\n+            final HttpResponse response = executor.execute(request).returnResponse();\n+            final int sc = response.getStatusLine().getStatusCode();\n+            try (final UnsynchronizedByteArrayOutputStream baos = new UnsynchronizedByteArrayOutputStream()) {\n+                response.getEntity().writeTo(baos);\n+                return Tuple(sc, baos.toString(UTF_8));\n+            }\n+        });\n+        return responseCodeAndBody;\n+    }\n+}"
  },
  {
    "sha": "d52ec6735477e49e52c074593dc5ce3dfc7ee582",
    "filename": "exist-core/src/test/java/org/exist/http/urlrewrite/URLRewritingTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 47,
    "changes": 60,
    "blob_url": "https://github.com/eXist-db/exist/blob/69301b28b3d78825c31ae996c7c2e7aa9bf95d5f/exist-core/src/test/java/org/exist/http/urlrewrite/URLRewritingTest.java",
    "raw_url": "https://github.com/eXist-db/exist/raw/69301b28b3d78825c31ae996c7c2e7aa9bf95d5f/exist-core/src/test/java/org/exist/http/urlrewrite/URLRewritingTest.java",
    "contents_url": "https://api.github.com/repos/eXist-db/exist/contents/exist-core/src/test/java/org/exist/http/urlrewrite/URLRewritingTest.java?ref=69301b28b3d78825c31ae996c7c2e7aa9bf95d5f",
    "patch": "@@ -22,18 +22,12 @@\n \n package org.exist.http.urlrewrite;\n \n-import com.evolvedbinary.j8fu.function.FunctionE;\n import com.evolvedbinary.j8fu.tuple.Tuple2;\n-import org.apache.http.HttpHost;\n import org.apache.http.HttpResponse;\n import org.apache.http.HttpStatus;\n-import org.apache.http.client.HttpClient;\n-import org.apache.http.client.fluent.Executor;\n import org.apache.http.client.fluent.Request;\n import org.apache.http.entity.ContentType;\n-import org.apache.http.impl.client.CloseableHttpClient;\n-import org.apache.http.impl.client.HttpClientBuilder;\n-import org.exist.TestUtils;\n+import org.exist.http.AbstractHttpTest;\n import org.exist.test.ExistWebServer;\n import org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;\n import org.exist.xmldb.XmldbURI;\n@@ -50,7 +44,10 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n-public class URLRewritingTest {\n+/**\n+ * @author <a href=\"mailto:adam@evolvedbinary.com\">Adam Retter</a>\n+ */\n+public class URLRewritingTest extends AbstractHttpTest {\n \n     private static final XmldbURI TEST_COLLECTION_NAME = XmldbURI.create(\"controller-test\");\n     private static final XmldbURI TEST_COLLECTION = XmldbURI.create(\"/db/apps\").append(TEST_COLLECTION_NAME);\n@@ -66,17 +63,17 @@ public void findsParentController() throws IOException {\n         final XmldbURI docName = XmldbURI.create(\"test.xml\");\n         final String testDocument = \"<hello>world</hello>\";\n \n-        final String storeDocUri = getRestUri() + TEST_COLLECTION.append(nestedCollectionName).append(docName);\n+        final String storeDocUri = getRestUri(existWebServer) + TEST_COLLECTION.append(nestedCollectionName).append(docName);\n         final Request storeRequest = Request\n                 .Put(storeDocUri)\n                 .bodyString(testDocument, ContentType.APPLICATION_XML);\n-        final int storeResponseStatusCode = withHttpExecutor(executor -> executor.execute(storeRequest).returnResponse().getStatusLine().getStatusCode());\n+        final int storeResponseStatusCode = withHttpExecutor(existWebServer, executor -> executor.execute(storeRequest).returnResponse().getStatusLine().getStatusCode());\n         assertEquals(HttpStatus.SC_CREATED, storeResponseStatusCode);\n \n-        final String retrieveDocUri = getAppsUri() + \"/\" + TEST_COLLECTION_NAME.append(nestedCollectionName).append(docName);\n+        final String retrieveDocUri = getAppsUri(existWebServer) + \"/\" + TEST_COLLECTION_NAME.append(nestedCollectionName).append(docName);\n         final Request retrieveRequest = Request\n                 .Get(retrieveDocUri);\n-        final Tuple2<Integer, String> retrieveResponseStatusCodeAndBody = withHttpExecutor(executor -> {\n+        final Tuple2<Integer, String> retrieveResponseStatusCodeAndBody = withHttpExecutor(existWebServer,  executor -> {\n             final HttpResponse response = executor.execute(retrieveRequest).returnResponse();\n             final String responseBody;\n             try (final UnsynchronizedByteArrayOutputStream baos = new UnsynchronizedByteArrayOutputStream((int)response.getEntity().getContentLength())) {\n@@ -92,10 +89,10 @@ public void findsParentController() throws IOException {\n     @BeforeClass\n     public static void setup() throws IOException {\n         final Request request = Request\n-                .Put(getRestUri() + TEST_COLLECTION + \"/\" + XQUERY_CONTROLLER_FILENAME)\n+                .Put(getRestUri(existWebServer) + TEST_COLLECTION + \"/\" + XQUERY_CONTROLLER_FILENAME)\n                 .bodyString(TEST_CONTROLLER, ContentType.create(\"application/xquery\"));\n \n-        final int statusCode = withHttpExecutor(executor ->\n+        final int statusCode = withHttpExecutor(existWebServer, executor ->\n                 executor.execute(request).returnResponse().getStatusLine().getStatusCode()\n         );\n \n@@ -105,43 +102,12 @@ public static void setup() throws IOException {\n     @AfterClass\n     public static void cleanup() throws IOException {\n         final Request request = Request\n-                .Delete(getRestUri() + TEST_COLLECTION);\n+                .Delete(getRestUri(existWebServer) + TEST_COLLECTION);\n \n-        final int statusCode = withHttpExecutor(executor ->\n+        final int statusCode = withHttpExecutor(existWebServer, executor ->\n                 executor.execute(request).returnResponse().getStatusLine().getStatusCode()\n         );\n \n         assertEquals(HttpStatus.SC_OK, statusCode);\n     }\n-\n-    private static String getServerUri() {\n-        return \"http://localhost:\" + existWebServer.getPort() + \"/exist\";\n-    }\n-\n-    private static String getRestUri() {\n-        return getServerUri() + \"/rest\";\n-    }\n-\n-    private static String getAppsUri() {\n-        return getServerUri() + \"/apps\";\n-    }\n-\n-    private static <T> T withHttpClient(final FunctionE<HttpClient, T, IOException> fn) throws IOException {\n-        try (final CloseableHttpClient client = HttpClientBuilder\n-                .create()\n-                .disableAutomaticRetries()\n-                .build()) {\n-            return fn.apply(client);\n-        }\n-    }\n-\n-    private static <T> T withHttpExecutor(final FunctionE<Executor, T, IOException> fn) throws IOException {\n-        return withHttpClient(client -> {\n-            final Executor executor = Executor\n-                    .newInstance(client)\n-                    .auth(TestUtils.ADMIN_DB_USER, TestUtils.ADMIN_DB_PWD)\n-                    .authPreemptive(new HttpHost(\"localhost\", existWebServer.getPort()));\n-            return fn.apply(executor);\n-        });\n-    }\n }"
  }
]
