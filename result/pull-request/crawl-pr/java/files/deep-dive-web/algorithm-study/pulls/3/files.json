[
  {
    "sha": "c99d75ed77c8ed6f6f4dbff0765fc8dcca040645",
    "filename": "hyunkyung/sorting/BigNumber.js",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/deep-dive-web/algorithm-study/blob/d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b/hyunkyung/sorting/BigNumber.js",
    "raw_url": "https://github.com/deep-dive-web/algorithm-study/raw/d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b/hyunkyung/sorting/BigNumber.js",
    "contents_url": "https://api.github.com/repos/deep-dive-web/algorithm-study/contents/hyunkyung/sorting/BigNumber.js?ref=d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b",
    "patch": "@@ -0,0 +1,4 @@\n+function solution(numbers) {\n+    var answer = numbers.map((number) => number.toString()).sort((a, b) => (b+a) - (a+b)).join(\"\");\n+    return answer.replace(/^0+/, \"0\");\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ada182f27b328140bea2c3ff46bc2b9ba4edc8e9",
    "filename": "hyunkyung/sorting/HIndex.js",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/deep-dive-web/algorithm-study/blob/d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b/hyunkyung/sorting/HIndex.js",
    "raw_url": "https://github.com/deep-dive-web/algorithm-study/raw/d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b/hyunkyung/sorting/HIndex.js",
    "contents_url": "https://api.github.com/repos/deep-dive-web/algorithm-study/contents/hyunkyung/sorting/HIndex.js?ref=d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b",
    "patch": "@@ -0,0 +1,6 @@\n+function solution(citations) {\n+    citations = citations.sort((a,b)=>b-a);\n+    let idx = 1;\n+    while(idx <= citations[idx-1]) idx += 1;\n+    return idx-1;\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7a11d91162d781ee1be2759125609b2b8ae0e3bf",
    "filename": "hyunkyung/sorting/KNumber.js",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/deep-dive-web/algorithm-study/blob/d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b/hyunkyung/sorting/KNumber.js",
    "raw_url": "https://github.com/deep-dive-web/algorithm-study/raw/d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b/hyunkyung/sorting/KNumber.js",
    "contents_url": "https://api.github.com/repos/deep-dive-web/algorithm-study/contents/hyunkyung/sorting/KNumber.js?ref=d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b",
    "patch": "@@ -0,0 +1,9 @@\n+function solution(array, commands) {\n+    const answer = commands.map(command =>{\n+        const newArray = array\n+            .slice(command[0]-1,command[1])\n+            .sort((a,b) => {return a-b});\n+        return newArray[command[2]-1];\n+    } )\n+    return answer;\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0e873c1b16842cee665827d257991c39eec14b32",
    "filename": "hyunkyung/sorting/sorting.md",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/deep-dive-web/algorithm-study/blob/d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b/hyunkyung/sorting/sorting.md",
    "raw_url": "https://github.com/deep-dive-web/algorithm-study/raw/d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b/hyunkyung/sorting/sorting.md",
    "contents_url": "https://api.github.com/repos/deep-dive-web/algorithm-study/contents/hyunkyung/sorting/sorting.md?ref=d9c10e002fef7cb5d8c00fa7a6162cae69a0e08b",
    "patch": "@@ -0,0 +1,90 @@\n+## 선택 정렬\n+\n+- 제자리 정렬(in-place sorting) 알고리즘의 하나\n+    - 입력 배열(정렬되지 않은 값들) 이외에 다른 추가 메모리를 요구하지 않는 정렬 방법\n+    - 해당 순서에 원소를 넣을 위치는 이미 정해져 있고, 어떤 원소를 넣을지 선택하는 알고리즘\n+    - 첫 번째 순서에는 첫 번째 위치에 가장 최솟값을 넣는다.\n+    - 두 번째 순서에는 두 번째 위치에 남은 값 중에서의 최솟값을 넣는다.\n+    \n+- 과정 설명\n+    1. 주어진 배열 중에서 최솟값을 찾는다.\n+    2. 그 값을 맨 앞에 위치한 값과 교체한다(패스(pass)).\n+    3. 맨 처음 위치를 뺀 나머지 리스트를 같은 방법으로 교체한다.\n+    4. 하나의 원소만 남을 때까지 위의 1~3 과정을 반복한다.\n+\n+- 장점\n+    - 자료 이동 횟수가 미리 결정된다.\n+- 단점\n+    - 안정성을 만족하지 않는다.\n+    - 즉, 값이 같은 레코드가 있는 경우에 상대적인 위치가 변경될 수 있다.\n+  \n+- 시간 복잡도\n+  - 비교 횟수\n+  - 두 개의 for 루프의 실행 횟수\n+  - 외부 루프: (n-1)번\n+  - 내부 루프(최솟값 찾기): n-1, n-2, … , 2, 1 번\n+  - 교환 횟수\n+    - 외부 루프의 실행 횟수와 동일. 즉, 상수 시간 작업\n+    - 한 번 교환하기 위하여 3번의 이동(SWAP 함수의 작업)이 필요하므로 3(n-1)번\n+    - T(n) = (n-1) + (n-2) + … + 2 + 1 = n(n-1)/2 = O(n^2)\n+  \n+## 버블 정렬\n+- 서로 인접한 두 원소를 검사하여 정렬하는 알고리즘\n+- 인접한 2개의 레코드를 비교하여 크기가 순서대로 되어 있지 않으면 서로 교환한다.\n+- 선택 정렬과 기본 개념이 유사하다.\n+  \n+- 과정\n+  - 버블 정렬은 첫 번째 자료와 두 번째 자료를, 두 번째 자료와 세 번째 자료를, 세 번째와 네 번째를, … 이런 식으로 (마지막-1)번째 자료와 마지막 자료를 비교하여 교환하면서 자료를 정렬한다.\n+  - 1회전을 수행하고 나면 가장 큰 자료가 맨 뒤로 이동하므로 2회전에서는 맨 끝에 있는 자료는 정렬에서 제외되고, 2회전을 수행하고 나면 끝에서 두 번째 자료까지는 정렬에서 제외된다. 이렇게 정렬을 1회전 수행할 때마다 정렬에서 제외되는 데이터가 하나씩 늘어난다.\n+\n+- 장점\n+  - 구현이 매우 간단하다.\n+- 단점\n+  - 순서에 맞지 않은 요소를 인접한 요소와 교환한다.\n+  - 하나의 요소가 가장 왼쪽에서 가장 오른쪽으로 이동하기 위해서는 배열에서 모든 다른 요소들과 교환되어야 한다.\n+  - 특히 특정 요소가 최종 정렬 위치에 이미 있는 경우라도 교환되는 일이 일어난다.\n+  - 일반적으로 자료의 교환 작업(SWAP)이 자료의 이동 작업(MOVE)보다 더 복잡하기 때문에 버블 정렬은 단순성에도 불구하고 거의 쓰이지 않는다.\n+    \n+- 시간 복잡도\n+  - 교환 횟수\n+  - 입력 자료가 역순으로 정렬되어 있는 최악의 경우, 한 번 교환하기 위하여 3번의 이동(SWAP 함수의 작업)이 필요하므로 (비교 횟수 * 3) 번 = 3n(n-1)/2\n+  - 입력 자료가 이미 정렬되어 있는 최상의 경우, 자료의 이동이 발생하지 않는다.\n+  - T(n) = O(n^2)\n+    \n+## 합병정렬\n+- ‘존 폰 노이만(John von Neumann)’이라는 사람이 제안한 방법\n+- 일반적인 방법으로 구현했을 때 이 정렬은 안정 정렬 에 속하며, 분할 정복 알고리즘의 하나 이다.\n+- 분할 정복(divide and conquer) 방법\n+  - 문제를 작은 2개의 문제로 분리하고 각각을 해결한 다음, 결과를 모아서 원래의 문제를 해결하는 전략이다.\n+  - 분할 정복 방법은 대개 순환 호출을 이용하여 구현한다.\n+- 과정 설명\n+  1. 리스트의 길이가 0 또는 1이면 이미 정렬된 것으로 본다. 그렇지 않은 경우에는\n+  2. 정렬되지 않은 리스트를 절반으로 잘라 비슷한 크기의 두 부분 리스트로 나눈다.\n+  3. 각 부분 리스트를 재귀적으로 합병 정렬을 이용해 정렬한다.\n+  4. 두 부분 리스트를 다시 하나의 정렬된 리스트로 합병한다.\n+\n+- 하나의 리스트를 두 개의 균등한 크기로 분할하고 분할된 부분 리스트를 정렬한 다음, 두 개의 정렬된 부분 리스트를 합하여 전체가 정렬된 리스트가 되게 하는 방법이다.\n+- 합병 정렬은 다음의 단계들로 이루어진다.\n+  - 분할(Divide): 입력 배열을 같은 크기의 2개의 부분 배열로 분할한다.\n+  - 정복(Conquer): 부분 배열을 정렬한다. 부분 배열의 크기가 충분히 작지 않으면 순환 호출 을 이용하여 다시 분할 정복 방법을 적용한다.\n+  - 결합(Combine): 정렬된 부분 배열들을 하나의 배열에 합병한다.\n+\n+- 합병 정렬의 과정\n+  - 추가적인 리스트가 필요하다.\n+  - 각 부분 배열을 정렬할 때도 합병 정렬을 순환적으로 호출하여 적용한다.\n+  - 합병 정렬에서 실제로 정렬이 이루어지는 시점은 2개의 리스트를 합병(merge)하는 단계 이다.\n+\n+- 단점\n+  - 만약 레코드를 배열(Array)로 구성하면, 임시 배열이 필요하다.\n+  - 제자리 정렬(in-place sorting)이 아니다.\n+  - 레코드들의 크기가 큰 경우에는 이동 횟수가 많으므로 매우 큰 시간적 낭비를 초래한다.\n+- 장점\n+  - 안정적인 정렬 방법\n+  - 데이터의 분포에 영향을 덜 받는다. 즉, 입력 데이터가 무엇이든 간에 정렬되는 시간은 동일하다. (O(nlog₂n)로 동일)\n+\n+- 시간복잡도\n+  - T(n) = nlog₂n(비교) + 2nlog₂n(이동) = 3nlog₂n = O(nlog₂n)\n+출처\n+https://gmlwjd9405.github.io/2018/05/06/algorithm-selection-sort.html\n+https://gmlwjd9405.github.io/2018/05/06/algorithm-bubble-sort.html\n+https://gmlwjd9405.github.io/2018/05/08/algorithm-merge-sort.html"
  }
]
