[
  {
    "sha": "1acc86e9fd8d3e3887d38514b5a5ea08053c08d5",
    "filename": "src/test/java/edu/ifrs/vvs/AppTest.java",
    "status": "modified",
    "additions": 134,
    "deletions": 15,
    "changes": 149,
    "blob_url": "https://github.com/rodrigoprestesmachado/bubblesort/blob/fc00413ba5d7653377b08cf0b2535964bd69d1e4/src/test/java/edu/ifrs/vvs/AppTest.java",
    "raw_url": "https://github.com/rodrigoprestesmachado/bubblesort/raw/fc00413ba5d7653377b08cf0b2535964bd69d1e4/src/test/java/edu/ifrs/vvs/AppTest.java",
    "contents_url": "https://api.github.com/repos/rodrigoprestesmachado/bubblesort/contents/src/test/java/edu/ifrs/vvs/AppTest.java?ref=fc00413ba5d7653377b08cf0b2535964bd69d1e4",
    "patch": "@@ -1,22 +1,24 @@\n /**\n- * @License\n- * Copyright 2020 Bubble Sort Application\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n+ * @License Copyright 2020 Bubble Sort Application\n+ * <p>\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n  */\n \n package edu.ifrs.vvs;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -28,8 +30,125 @@\n     /**\n      * Rigorous Test.\n      */\n+    private static final Integer ZERO = 0;\n+    private static final Integer MENOS_DOZE = -12;\n+    private static final Integer MENOS_OITO = -8;\n+    private static final Integer MENOS_SEIS = -6;\n+    private static final Integer MENOS_UM = -1;\n+    private static final Integer UM = 1;\n+    private static final Integer DOIS = 2;\n+    private static final Integer TRES = 3;\n+    private static final Integer QUATRO = 4;\n+    private static final Integer CINCO = 5;\n+    private static final Integer SEIS = 6;\n+    private static final Integer SETE = 7;\n+    private static final Integer OITO = 8;\n+    private static final Integer NOVE = 9;\n+    private static final Integer DEZ = 10;\n+\n+    private final BubbleSort bubbleSort = new BubbleSort();\n+    private final List<Integer> array = new ArrayList<>();\n+\n+    @BeforeEach\n+    void init() {\n+        array.add(DOIS);\n+        array.add(OITO);\n+        array.add(TRES);\n+        array.add(QUATRO);\n+        array.add(NOVE);\n+    }\n+\n+    @AfterEach\n+    public void restoreList() {\n+        array.clear();\n+    }\n+\n+    @Test\n+    @DisplayName(\"Testing BubbleSort with positive numbers\")\n+    void testPositiveNumbers() {\n+        int[] test = new int[array.size()];\n+\n+        for (int i = ZERO; i < array.size(); i++) {\n+            test[i] = array.get(i);\n+        }\n+\n+        bubbleSort.sort(test);\n+\n+        List<Integer> result = Arrays.stream(test)\n+                                     .map(Integer::new)\n+                                     .collect(ArrayList::new, ArrayList::add, ArrayList::addAll);\n+\n+        assertEquals(CINCO, result.size());\n+\n+        assertEquals(DOIS, result.get(ZERO));\n+        assertEquals(TRES, result.get(UM));\n+        assertEquals(QUATRO, result.get(DOIS));\n+        assertEquals(OITO, result.get(TRES));\n+        assertEquals(NOVE, result.get(QUATRO));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Testing BubbleSort with positive and negative numbers\")\n+    void testPositiveAndNegativeNumbers() {\n+        array.add(MENOS_UM);\n+        array.add(MENOS_SEIS);\n+        array.add(MENOS_OITO);\n+        array.add(MENOS_DOZE);\n+        array.add(ZERO);\n+\n+        int[] test = new int[array.size()];\n+\n+        for (int i = 0; i < array.size(); i++) {\n+            test[i] = array.get(i);\n+        }\n+\n+        bubbleSort.sort(test);\n+\n+        List<Integer> result = Arrays.stream(test)\n+                                     .map(Integer::new)\n+                                     .collect(ArrayList::new, ArrayList::add, ArrayList::addAll);\n+\n+        assertEquals(DEZ, result.size());\n+\n+        assertEquals(MENOS_DOZE, result.get(ZERO));\n+        assertEquals(MENOS_OITO, result.get(UM));\n+        assertEquals(MENOS_SEIS, result.get(DOIS));\n+        assertEquals(MENOS_UM, result.get(TRES));\n+        assertEquals(ZERO, result.get(QUATRO));\n+\n+        assertEquals(DOIS, result.get(CINCO));\n+        assertEquals(TRES, result.get(SEIS));\n+        assertEquals(QUATRO, result.get(SETE));\n+        assertEquals(OITO, result.get(OITO));\n+        assertEquals(NOVE, result.get(NOVE));\n+    }\n+\n     @Test\n-    void testApp() {\n-        assertEquals(1, 1);\n+    @DisplayName(\"Testing BubbleSort with duplicate numbers\")\n+    void testDuplicateNumbers() {\n+        array.add(NOVE);\n+        array.add(NOVE);\n+\n+        int[] test = new int[array.size()];\n+\n+        for (int i = ZERO; i < array.size(); i++) {\n+            test[i] = array.get(i);\n+        }\n+\n+        bubbleSort.sort(test);\n+\n+        List<Integer> result = Arrays.stream(test)\n+                                     .map(Integer::new)\n+                                     .collect(ArrayList::new, ArrayList::add, ArrayList::addAll);\n+\n+        assertEquals(SETE, result.size());\n+\n+        assertEquals(DOIS, result.get(ZERO));\n+        assertEquals(TRES, result.get(UM));\n+        assertEquals(QUATRO, result.get(DOIS));\n+        assertEquals(OITO, result.get(TRES));\n+        assertEquals(NOVE, result.get(QUATRO));\n+        assertEquals(NOVE, result.get(CINCO));\n+        assertEquals(NOVE, result.get(SEIS));\n     }\n }"
  }
]
