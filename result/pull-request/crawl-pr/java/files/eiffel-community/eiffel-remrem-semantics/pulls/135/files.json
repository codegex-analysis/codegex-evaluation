[
  {
    "sha": "deb3250175d99f910a4f53fd8f324bd21985bd78",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/blob/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/pom.xml",
    "raw_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/raw/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/pom.xml",
    "contents_url": "https://api.github.com/repos/eiffel-community/eiffel-remrem-semantics/contents/pom.xml?ref=b9e98523fdd45a2cc951c1f028a85bbd8388d02e",
    "patch": "@@ -42,6 +42,11 @@\n             <artifactId>jackson-databind</artifactId>\r\n             <scope>compile</scope>\r\n         </dependency>\r\n+        <dependency>\r\n+            <groupId>com.vdurmont</groupId>\r\n+            <artifactId>semver4j</artifactId>\r\n+            <version>3.1.0</version>\r\n+        </dependency>\r\n         <dependency>\r\n             <groupId>org.glassfish.hk2.external</groupId>\r\n             <artifactId>javax.inject</artifactId>\r"
  },
  {
    "sha": "3e6b2086af842cef9774f4587173f4df07327096",
    "filename": "src/main/java/com/ericsson/eiffel/remrem/semantics/clone/PrepareLocalEiffelSchemas.java",
    "status": "modified",
    "additions": 20,
    "deletions": 26,
    "changes": 46,
    "blob_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/blob/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/src/main/java/com/ericsson/eiffel/remrem/semantics/clone/PrepareLocalEiffelSchemas.java",
    "raw_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/raw/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/src/main/java/com/ericsson/eiffel/remrem/semantics/clone/PrepareLocalEiffelSchemas.java",
    "contents_url": "https://api.github.com/repos/eiffel-community/eiffel-remrem-semantics/contents/src/main/java/com/ericsson/eiffel/remrem/semantics/clone/PrepareLocalEiffelSchemas.java?ref=b9e98523fdd45a2cc951c1f028a85bbd8388d02e",
    "patch": "@@ -14,7 +14,6 @@\n */\n package com.ericsson.eiffel.remrem.semantics.clone;\n \n-import java.io.File;\n import java.io.IOException;\n import java.net.Authenticator;\n import java.net.InetSocketAddress;\n@@ -23,10 +22,12 @@\n import java.net.ProxySelector;\n import java.net.SocketAddress;\n import java.net.URI;\n-import java.util.ArrayList;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.ResourceBundle;\n \n import org.apache.commons.io.FileUtils;\n@@ -64,17 +65,17 @@\n      * @param localEiffelRepoPath\n      *            destination path to clone the repo.\n      */\n-    private void cloneEiffelRepo(final String repoURL, final String branch, final File localEiffelRepoPath) {\n+    private void cloneEiffelRepo(final String repoURL, final String branch, final Path localEiffelRepoPath) {\n         Git localGitRepo = null;\n         \n         // checking for repository exists or not in the localEiffelRepoPath\n         try {\n-            if (!localEiffelRepoPath.exists()) {\n+            if (Files.notExists(localEiffelRepoPath)) {\n                 // cloning github repository by using URL and branch name into local\n-                localGitRepo = Git.cloneRepository().setURI(repoURL).setBranch(\"master\").setDirectory(localEiffelRepoPath).call();\n+                localGitRepo = Git.cloneRepository().setURI(repoURL).setBranch(\"master\").setDirectory(localEiffelRepoPath.toFile()).call();\n             } else {\n                 // If required repository already exists\n-                localGitRepo = Git.open(localEiffelRepoPath);\n+                localGitRepo = Git.open(localEiffelRepoPath.toFile());\n \n                 // Reset to normal if uncommitted changes are present\n                 localGitRepo.reset().call();\n@@ -152,12 +153,12 @@ public PasswordAuthentication getPasswordAuthentication() {\n      * @param eiffelRepoPath\n      *            local eiffel repository url\n      */\n-    private void copyOperationSchemas(final String operationsRepoPath, final String eiffelRepoPath) {\n-        final File operationSchemas = new File(operationsRepoPath + File.separator + EiffelConstants.SCHEMA_LOCATION);\n-        final File eiffelSchemas = new File(eiffelRepoPath + File.separator + EiffelConstants.SCHEMA_LOCATION);\n-        if (operationSchemas.isDirectory()) {\n+    private void copyOperationSchemas(final Path operationsRepoPath, final Path eiffelRepoPath) {\n+        final Path operationSchemas = operationsRepoPath.resolve(EiffelConstants.SCHEMA_LOCATION);\n+        final Path eiffelSchemas = eiffelRepoPath.resolve(EiffelConstants.SCHEMA_LOCATION);\n+        if (Files.isDirectory(operationSchemas)) {\n             try {\n-                FileUtils.copyDirectory(operationSchemas, eiffelSchemas);\n+                FileUtils.copyDirectory(operationSchemas.toFile(), eiffelSchemas.toFile());\n             } catch (IOException e) {\n                 System.out.println(\"Exception occurred while copying schemas from operations repository to eiffel repository\");\n                 e.printStackTrace();\n@@ -176,9 +177,8 @@ public static void main(String[] args) throws IOException {\n         final String operationRepoUrl = args[2];\n         final String operationRepoBranch = args[3];\n \n-        final File localEiffelRepoPath = new File(System.getProperty(EiffelConstants.USER_HOME) + File.separator + EiffelConstants.EIFFEL);\n-        final File localOperationsRepoPath = new File(\n-                System.getProperty(EiffelConstants.USER_HOME) + File.separator + EiffelConstants.OPERATIONS_REPO_NAME);\n+        final Path localEiffelRepoPath = EiffelConstants.USER_HOME.resolve(EiffelConstants.EIFFEL);\n+        final Path localOperationsRepoPath = EiffelConstants.USER_HOME.resolve(EiffelConstants.OPERATIONS_REPO_NAME);\n \n         // Clone Eiffel Repo from GitHub \n         prepareLocalSchema.cloneEiffelRepo(eiffelRepoUrl, eiffelRepoBranch, localEiffelRepoPath);\n@@ -187,24 +187,18 @@ public static void main(String[] args) throws IOException {\n         prepareLocalSchema.cloneEiffelRepo(operationRepoUrl, operationRepoBranch, localOperationsRepoPath);\n \n         //Copy operations repo Schemas to location where Eiffel repo schemas available\n-        prepareLocalSchema.copyOperationSchemas(localOperationsRepoPath.getAbsolutePath(), localEiffelRepoPath.getAbsolutePath());\n+        prepareLocalSchema.copyOperationSchemas(localOperationsRepoPath.toAbsolutePath(), localEiffelRepoPath.toAbsolutePath());\n \n         // Read and Load JsonSchemas from Cloned Directory \n         final LocalRepo localRepo = new LocalRepo(localEiffelRepoPath);\n         localRepo.readSchemas();\n \n-        final ArrayList<String> jsonEventNames = localRepo.getJsonEventNames();\n-        final ArrayList<File> jsonEventSchemas = localRepo.getJsonEventSchemas();\n-\n-        // Schema changes \n+        // Schema changes\n         final SchemaFile schemaFile = new SchemaFile();\n \n-        // Iterate the Each jsonSchema file to Add and Modify the necessary properties \n-        if (jsonEventNames != null && jsonEventSchemas != null) {\n-            for (int i = 0; i < jsonEventNames.size(); i++) {\n-                schemaFile.modify(jsonEventSchemas.get(i), jsonEventNames.get(i));\n-            }\n+        // Iterate over available input schemas and create new and patched files\n+        for (Map.Entry<String, Path> event : localRepo.getJsonEventSchemas().entrySet()) {\n+             schemaFile.modify(event.getValue().toFile(), event.getKey());\n         }\n-\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "8230a58e0eba33795152b1dd602dbf2fefd7e238",
    "filename": "src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/EiffelConstants.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/blob/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/EiffelConstants.java",
    "raw_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/raw/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/EiffelConstants.java",
    "contents_url": "https://api.github.com/repos/eiffel-community/eiffel-remrem-semantics/contents/src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/EiffelConstants.java?ref=b9e98523fdd45a2cc951c1f028a85bbd8388d02e",
    "patch": "@@ -14,6 +14,9 @@\n */\n package com.ericsson.eiffel.remrem.semantics.schemas;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n /**\n  * This is a constants class used in other classes\n  * \n@@ -41,13 +44,13 @@\n     public static String COM_ERICSSON_EIFFEL_SEMANTICS_EVENTS = \"com.ericsson.eiffel.semantics.events.\";\n     public static String TYPE = \"type\";\n     public static String OBJECTTYPE = \"object\";\n-    public static String INPUT_EIFFEL_SCHEMAS = \"src\\\\main\\\\resources\\\\schemas\\\\input\";\n+    public static Path INPUT_EIFFEL_SCHEMAS = Paths.get(\"src\", \"main\", \"resources\", \"schemas\", \"input\");\n     public static String EIFFEL = \"eiffel\";\n     public static String OPERATIONS_REPO_NAME = \"eiffel-operations-extension\";\n-    public static String USER_DIR = System.getProperty(\"user.dir\");\n-    public static String SCHEMA_LOCATION = \"\\\\schemas\";\n+    public static Path USER_DIR = Paths.get(System.getProperty(\"user.dir\"));\n+    public static Path SCHEMA_LOCATION = Paths.get(\"schemas\");\n     public static String JSON_MIME_TYPE = \".json\";\n-    public static String USER_HOME = \"user.home\";\n+    public static Path USER_HOME = Paths.get(System.getProperty(\"user.home\"));\n     public static String ACTIVITY = \"activity\";\n     public static String ARTIFACT = \"artifact\";\n     public static String SERVICE = \"service\";"
  },
  {
    "sha": "0f77a5567b5ae77dc32f6e064d209bb7581c31be",
    "filename": "src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/LocalRepo.java",
    "status": "modified",
    "additions": 29,
    "deletions": 34,
    "changes": 63,
    "blob_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/blob/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/LocalRepo.java",
    "raw_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/raw/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/LocalRepo.java",
    "contents_url": "https://api.github.com/repos/eiffel-community/eiffel-remrem-semantics/contents/src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/LocalRepo.java?ref=b9e98523fdd45a2cc951c1f028a85bbd8388d02e",
    "patch": "@@ -14,11 +14,16 @@\n */\n package com.ericsson.eiffel.remrem.semantics.schemas;\n \n-import java.io.File;\n+import com.vdurmont.semver4j.Semver;\n import java.io.IOException;\n-import java.util.ArrayList;\n-\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.StreamSupport;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n \n /**\n  * This class is used to Iterate over the Eiffel schemas that are cloned from\n@@ -28,11 +33,10 @@\n  *\n  */\n public class LocalRepo {\n-\tprivate ArrayList<File> jsonEventSchemas;\n-\tprivate File localSchemasPath;\n-\tprivate ArrayList<String> jsonEventNames;\n+\tprivate final Map<String, Path> jsonEventSchemas = new HashMap<>();\n+\tprivate Path localSchemasPath;\n \n-\tpublic LocalRepo(File localSchemasPath) {\n+\tpublic LocalRepo(Path localSchemasPath) {\n \t\tthis.localSchemasPath = localSchemasPath;\n \t}\n \n@@ -41,16 +45,13 @@ public LocalRepo(File localSchemasPath) {\n \t * Repo\n \t */\n \n-\tpublic void readSchemas() {\n+\tpublic void readSchemas() throws IOException {\n \t\ttry {\n-\t\t\tFileUtils.cleanDirectory(new File(EiffelConstants.USER_DIR + File.separator + EiffelConstants.INPUT_EIFFEL_SCHEMAS));\n+\t\t\tFileUtils.cleanDirectory(EiffelConstants.USER_DIR.resolve(EiffelConstants.INPUT_EIFFEL_SCHEMAS).toFile());\n \t\t} catch (IOException e) {\n \t\t\te.printStackTrace();\n \t\t}\n-\t\tjsonEventNames = new ArrayList<String>();\n-\t\tjsonEventSchemas = new ArrayList<File>();\n-\t\tString filePath = localSchemasPath + EiffelConstants.SCHEMA_LOCATION;\n-\t\tloadEiffelSchemas(filePath, \"\");\n+\t\tloadEiffelSchemas(localSchemasPath.resolve(EiffelConstants.SCHEMA_LOCATION));\n \t}\n \n \t/**\n@@ -60,32 +61,26 @@ public void readSchemas() {\n \t * @param jsonFilePath\n \t *            - This parameter is used to pass Location of the Schemas\n \t *            Directory\n-\t * @param directoryName\n-\t *            - This parameter is used to rename the File with corresponding\n-\t *            event name.\n-\t * \n \t */\n-\tprivate void loadEiffelSchemas(String jsonFilePath, String directoryName) {\n-\t\tFile file = new File(jsonFilePath);\n-\t\tFile[] files = file.listFiles();\n-\t\tfor (File jsonFile : files) {\n-\t\t\tif (jsonFile.isDirectory()) {\n-\t\t\t\tloadEiffelSchemas(jsonFile.getAbsolutePath(), jsonFile.getName());\n-\t\t\t} else {\n-\t\t\t\tjsonEventNames.add(directoryName);\n-\t\t\t\tjsonEventSchemas.add(jsonFile);\n+\tprivate void loadEiffelSchemas(final Path jsonFilePath) throws IOException {\n+\t\ttry (DirectoryStream<Path> schemaDirStream =\n+\t\t\t\t\t Files.newDirectoryStream(jsonFilePath, Files::isDirectory)) {\n+\t\t\tfor (Path eventDir : schemaDirStream) {\n+\t\t\t\ttry (DirectoryStream<Path> eventDirStream =\n+\t\t\t\t\t\t\t Files.newDirectoryStream(eventDir, file -> file.toString().endsWith(\".json\"))) {\n+\t\t\t\t\t// Turn the filenames into versions and find the greatest version\n+\t\t\t\t\tSemver latestSchemaVersion = StreamSupport.stream(eventDirStream.spliterator(), false)\n+\t\t\t\t\t\t\t.map(path -> new Semver(FilenameUtils.removeExtension(path.getFileName().toString())))\n+\t\t\t\t\t\t\t.max(Semver::compareTo)\n+\t\t\t\t\t\t\t.get();\n+\t\t\t\t\tjsonEventSchemas.put(eventDir.getFileName().toString(),\n+\t\t\t\t\t\t\teventDir.resolve(latestSchemaVersion.toString() + \".json\"));\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n \n-\tpublic ArrayList<File> getJsonEventSchemas() {\n+\tpublic Map<String, Path> getJsonEventSchemas() {\n \t\treturn jsonEventSchemas;\n \t}\n-\n-\tpublic ArrayList<String> getJsonEventNames() {\n-\t\treturn jsonEventNames;\n-\t}\n-\t\n-\t\n-\n }"
  },
  {
    "sha": "113aa9a54d949d4290d22c0503ab94d3559cad4f",
    "filename": "src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/SchemaFile.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/blob/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/SchemaFile.java",
    "raw_url": "https://github.com/eiffel-community/eiffel-remrem-semantics/raw/b9e98523fdd45a2cc951c1f028a85bbd8388d02e/src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/SchemaFile.java",
    "contents_url": "https://api.github.com/repos/eiffel-community/eiffel-remrem-semantics/contents/src/main/java/com/ericsson/eiffel/remrem/semantics/schemas/SchemaFile.java?ref=b9e98523fdd45a2cc951c1f028a85bbd8388d02e",
    "patch": "@@ -17,6 +17,7 @@\n import java.io.File;\n import java.io.FileWriter;\n import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Iterator;\n import java.util.Map.Entry;\n@@ -236,16 +237,15 @@ private void addingItemsProperties(String elementName, JsonElement jsonValue, Js\n      *            an input parameter to this method\n      */\n     public void createNewInputJsonSchema(String jsonFileName, JsonObject jsonObject) {\n-        String currentWorkingDir = EiffelConstants.USER_DIR;\n         FileWriter writer = null;\n-        String copyFilePath = currentWorkingDir + File.separator + EiffelConstants.INPUT_EIFFEL_SCHEMAS;\n-        String newFileName = copyFilePath + File.separator + jsonFileName + EiffelConstants.JSON_MIME_TYPE;\n+        Path newFileName = EiffelConstants.USER_DIR.resolve(EiffelConstants.INPUT_EIFFEL_SCHEMAS)\n+                .resolve(jsonFileName + EiffelConstants.JSON_MIME_TYPE);\n         Gson gson = new GsonBuilder().setPrettyPrinting().create();\n         JsonParser jp = new JsonParser();\n         JsonElement je = jp.parse(jsonObject.toString());\n         String prettyJsonString = gson.toJson(je);\n         try {\n-            writer = new FileWriter(newFileName);\n+            writer = new FileWriter(newFileName.toFile());\n             writer.write(prettyJsonString);\n         } catch (Exception e) {\n             e.printStackTrace();"
  }
]
