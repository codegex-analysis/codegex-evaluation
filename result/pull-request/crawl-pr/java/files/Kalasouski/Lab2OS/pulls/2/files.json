[
  {
    "sha": "2499014b283b7ea6e824f74b1246a85e4b117156",
    "filename": "src/main/java/BlockingList.java",
    "status": "modified",
    "additions": 28,
    "deletions": 35,
    "changes": 63,
    "blob_url": "https://github.com/Kalasouski/Lab2OS/blob/921417a94ab0a7e8b3ba5a0e1d6e5309b4fac5bb/src/main/java/BlockingList.java",
    "raw_url": "https://github.com/Kalasouski/Lab2OS/raw/921417a94ab0a7e8b3ba5a0e1d6e5309b4fac5bb/src/main/java/BlockingList.java",
    "contents_url": "https://api.github.com/repos/Kalasouski/Lab2OS/contents/src/main/java/BlockingList.java?ref=921417a94ab0a7e8b3ba5a0e1d6e5309b4fac5bb",
    "patch": "@@ -2,12 +2,15 @@\n import java.util.concurrent.locks.Condition;\n import java.util.concurrent.locks.ReentrantLock;\n \n-public class BlockingList<T>  {\n+public class BlockingList<T> {\n \n-  private class Node{\n+  private class Node {\n     T item;\n     Node next;\n-    Node(T item){this.item = item;}\n+\n+    Node(T item) {\n+      this.item = item;\n+    }\n   }\n \n   private final ReentrantLock lock = new ReentrantLock();\n@@ -18,8 +21,8 @@\n \n   private int size;\n \n-   private Node head;\n-   private Node last;\n+  private Node head;\n+  private Node last;\n \n \n   private void enqueue(Node node) {\n@@ -33,7 +36,7 @@ public BlockingList(int capacity) {\n     size = 0;\n   }\n \n-  public BlockingList(){\n+  public BlockingList() {\n     this(Integer.MAX_VALUE);\n   }\n \n@@ -54,7 +57,7 @@ public void add(T item) throws InterruptedException {\n \n       enqueue(node);\n       size++;\n-      if(size==1)\n+      if (size == 1)\n         head = node;\n \n       if (size < capacity)\n@@ -64,79 +67,69 @@ public void add(T item) throws InterruptedException {\n     }\n   }\n \n-  public T get(int index){\n+  public T get(int index) {\n     final ReentrantLock lock = this.lock;\n     lock.lock();\n-    try{\n-      if(index >= size)\n+    try {\n+      if (index >= size)\n         throw new IllegalArgumentException();\n \n       Node node = head;\n-      for(int i = 0;i<index;i++)\n+      for (int i = 0; i < index; i++)\n         node = node.next;\n       return node.item;\n \n-    }\n-    finally{\n+    } finally {\n       lock.unlock();\n     }\n   }\n \n-  public void remove(int index){\n+  public void remove(int index) {\n \n     final ReentrantLock lock = this.lock;\n     lock.lock();\n \n-    try{\n-      if(index >= size || index<0)\n+    try {\n+      if (index >= size || index < 0)\n         throw new IllegalArgumentException();\n \n       size--;\n \n-      if(size==0){\n+      if (size == 0) {\n         head = last = new Node(null);\n         return;\n       }\n-      if(index == 0){\n+      if (index == 0) {\n         head = head.next;\n \n-      }\n-      else{\n+      } else {\n         Node prev = null;\n         Node node = head;\n \n \n-        for(int i = 0;i<index;i++){\n+        for (int i = 0; i < index; i++) {\n           prev = node;\n           node = node.next;\n         }\n \n         prev.next = node.next;\n \n-        if(index==size)\n+        if (index == size)\n           last = prev;\n       }\n-      if(capacity>=size)\n+      if (capacity >= size)\n         notFull.signal();\n-    }\n-    finally{\n+    } finally {\n       lock.unlock();\n     }\n   }\n \n-  void order(){\n+  void order() {\n     Node node = head;\n-    for(int i = 0;i<size;i++){\n-      System.out.print(node.item+\" \");\n+    for (int i = 0; i < size; i++) {\n+      System.out.print(node.item + \" \");\n       node = node.next;\n \n     }\n   }\n-\n-\n-\n-\n-\n-\n-\n }"
  },
  {
    "sha": "996463b250d459d49536882b10eefb829ff9ffcc",
    "filename": "src/test/java/ListTest.java",
    "status": "modified",
    "additions": 46,
    "deletions": 38,
    "changes": 84,
    "blob_url": "https://github.com/Kalasouski/Lab2OS/blob/921417a94ab0a7e8b3ba5a0e1d6e5309b4fac5bb/src/test/java/ListTest.java",
    "raw_url": "https://github.com/Kalasouski/Lab2OS/raw/921417a94ab0a7e8b3ba5a0e1d6e5309b4fac5bb/src/test/java/ListTest.java",
    "contents_url": "https://api.github.com/repos/Kalasouski/Lab2OS/contents/src/test/java/ListTest.java?ref=921417a94ab0a7e8b3ba5a0e1d6e5309b4fac5bb",
    "patch": "@@ -5,19 +5,21 @@\n import static org.junit.Assert.*;\n \n public class ListTest {\n-\n   BlockingList<Integer> testList = null;\n-\n   class TestThread extends Thread {\n \n     int[] arr;\n-    TestThread(int[] arr){ this.arr = arr;}\n-    TestThread(){this.arr = null;}\n \n+    TestThread(int[] arr) {\n+      this.arr = arr;\n+    }\n \n+    TestThread() {\n+      this.arr = null;\n+    }\n     @Override\n     public void run() {\n-      if(arr==null){\n+      if (arr == null) {\n         try {\n           sleep(100);\n         } catch (InterruptedException e) {\n@@ -28,11 +30,11 @@ public void run() {\n         testList.remove(5);\n         return;\n       }\n-      for(int num : arr) {\n+      for (int num : arr) {\n         try {\n           testList.add(num);\n         } catch (InterruptedException e) {\n-          System.out.println(\"Thread \"+this.getName()+\" was interrupted\");\n+          System.out.println(\"Thread \" + this.getName() + \" was interrupted\");\n         }\n       }\n     }\n@@ -41,57 +43,63 @@ public void run() {\n \n   @Test\n   public void addGetTest() throws InterruptedException {\n-\n     testList = new BlockingList<>(10);\n-    TestThread thread1 = new TestThread(new int[]{1,2});\n-    TestThread thread2 = new TestThread(new int[]{2,3,4});\n-    TestThread thread3 = new TestThread(new int[]{4,5});\n+    TestThread thread1 = new TestThread(new int[]{1, 2});\n+    TestThread thread2 = new TestThread(new int[]{2, 3, 4});\n+    TestThread thread3 = new TestThread(new int[]{4, 5});\n \n-    thread1.start(); thread2.start(); thread3.start();\n-    thread1.join(); thread2.join(); thread3.join();\n+    thread1.start();\n+    thread2.start();\n+    thread3.start();\n+    thread1.join();\n+    thread2.join();\n+    thread3.join();\n \n-    int[] rightAnswer = new int[]{1,2,1,2,1};\n+    int[] rightAnswer = new int[]{1, 2, 1, 2, 1};\n \n     int[] answer = new int[5];\n \n-    for(int i = 0;i< testList.size();i++)\n-      answer[testList.get(i)-1]++;\n-\n-    assertArrayEquals(rightAnswer,answer);\n+    for (int i = 0; i < testList.size(); i++)\n+      answer[testList.get(i) - 1]++;\n \n+    assertArrayEquals(rightAnswer, answer);\n   }\n \n   @Test\n   public void sizeTest() throws InterruptedException {\n-\n     testList = new BlockingList<>(100);\n-    TestThread thread1 = new TestThread(new int[]{1,-22,2,4,6,5,7,88,45,24,67,35,-35});\n-    TestThread thread2 = new TestThread(new int[]{2,3,4,5,77,2,57,88,554});\n-    TestThread thread3 = new TestThread(new int[]{4,5,-567,446,45,-3});\n-\n-    thread1.start(); thread2.start(); thread3.start();\n-    thread1.join(); thread2.join(); thread3.join();\n-\n-    assertEquals(28,testList.size());\n-\n+    TestThread thread1 = new TestThread(new int[]{1, -22, 2, 4, 6, 5, 7, 88, 45, 24, 67, 35, -35});\n+    TestThread thread2 = new TestThread(new int[]{2, 3, 4, 5, 77, 2, 57, 88, 554});\n+    TestThread thread3 = new TestThread(new int[]{4, 5, -567, 446, 45, -3});\n+\n+    thread1.start();\n+    thread2.start();\n+    thread3.start();\n+    thread1.join();\n+    thread2.join();\n+    thread3.join();\n+\n+    assertEquals(28, testList.size());\n   }\n \n   @Test\n   public void removeTest() throws InterruptedException {\n-\n-\n     testList = new BlockingList<>(20);\n-    TestThread thread1 = new TestThread(new int[]{1,2,-10});\n-    TestThread thread2 = new TestThread(new int[]{2,3,4,11,56});\n-    TestThread thread3 = new TestThread(new int[]{4,5,8,7});\n+    TestThread thread1 = new TestThread(new int[]{1, 2, -10});\n+    TestThread thread2 = new TestThread(new int[]{2, 3, 4, 11, 56});\n+    TestThread thread3 = new TestThread(new int[]{4, 5, 8, 7});\n \n     TestThread threadRemove = new TestThread();\n \n-    thread1.start(); thread2.start(); thread3.start(); threadRemove.start();\n-    thread1.join(); thread2.join(); thread3.join(); threadRemove.join();\n-\n-    assertEquals(9,testList.size());\n-\n+    thread1.start();\n+    thread2.start();\n+    thread3.start();\n+    threadRemove.start();\n+    thread1.join();\n+    thread2.join();\n+    thread3.join();\n+    threadRemove.join();\n \n+    assertEquals(9, testList.size());\n   }\n }\n\\ No newline at end of file"
  }
]
