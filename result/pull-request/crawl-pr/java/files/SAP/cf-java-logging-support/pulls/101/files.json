[
  {
    "sha": "4ac9bc1031a67172e12a25763f083907859834c2",
    "filename": "cf-java-logging-support-core/src/main/java/com/sap/hcp/cf/logging/common/DateTimeValue.java",
    "status": "removed",
    "additions": 0,
    "deletions": 72,
    "changes": 72,
    "blob_url": "https://github.com/SAP/cf-java-logging-support/blob/2f003f7ca872147ef9c0d9b0087d0f4c159c1028/cf-java-logging-support-core/src/main/java/com/sap/hcp/cf/logging/common/DateTimeValue.java",
    "raw_url": "https://github.com/SAP/cf-java-logging-support/raw/2f003f7ca872147ef9c0d9b0087d0f4c159c1028/cf-java-logging-support-core/src/main/java/com/sap/hcp/cf/logging/common/DateTimeValue.java",
    "contents_url": "https://api.github.com/repos/SAP/cf-java-logging-support/contents/cf-java-logging-support-core/src/main/java/com/sap/hcp/cf/logging/common/DateTimeValue.java?ref=2f003f7ca872147ef9c0d9b0087d0f4c159c1028",
    "patch": "@@ -1,72 +0,0 @@\n-package com.sap.hcp.cf.logging.common;\n-\n-import java.text.DateFormat;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.TimeZone;\n-\n-/**\n- * A {@link Value} implementation representing a <i>date</i>.\n- * <p>\n- * When serialized into a String, the value will be formatted using timezone\n- * \"UTC\" and format <code>\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"</code>.\n- *\n- */\n-public class DateTimeValue implements Value {\n-    private static final TimeZone UTC_TZ = TimeZone.getTimeZone(\"UTC\");\n-    private static final DateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n-\n-    static {\n-        DATE_FORMAT.setTimeZone(UTC_TZ);\n-    }\n-\n-    private long timestamp;\n-\n-    public DateTimeValue(long timestamp) {\n-        this.timestamp = timestamp;\n-    }\n-\n-    public DateTimeValue(String dt) {\n-        try {\n-            synchronized (DATE_FORMAT) {\n-                timestamp = DATE_FORMAT.parse(dt).getTime();\n-            }\n-        } catch (ParseException pex) {\n-            timestamp = 0;\n-        }\n-    }\n-\n-    @Override\n-    public String toString() {\n-        synchronized (DATE_FORMAT) {\n-            return DATE_FORMAT.format(timestamp);\n-        }\n-    }\n-\n-    @Override\n-    public Object getValue() {\n-        try {\n-            synchronized (DATE_FORMAT) {\n-                return DATE_FORMAT.parse(DATE_FORMAT.format(timestamp));\n-            }\n-        } catch (ParseException pex) {\n-            return null;\n-        }\n-    }\n-\n-    @Override\n-    public long asLong() {\n-        return timestamp;\n-    }\n-\n-    @Override\n-    public double asDouble() {\n-        return timestamp;\n-    }\n-\n-    @Override\n-    public String asString() {\n-        return toString();\n-    }\n-\n-}"
  },
  {
    "sha": "b253cb627aa8ee553208c8a6e95e020c062e9741",
    "filename": "cf-java-logging-support-core/src/main/java/com/sap/hcp/cf/logging/common/request/RequestRecord.java",
    "status": "modified",
    "additions": 22,
    "deletions": 20,
    "changes": 42,
    "blob_url": "https://github.com/SAP/cf-java-logging-support/blob/cf4a92d6f8cb2ca91873f5c4ae20b593f221327e/cf-java-logging-support-core/src/main/java/com/sap/hcp/cf/logging/common/request/RequestRecord.java",
    "raw_url": "https://github.com/SAP/cf-java-logging-support/raw/cf4a92d6f8cb2ca91873f5c4ae20b593f221327e/cf-java-logging-support-core/src/main/java/com/sap/hcp/cf/logging/common/request/RequestRecord.java",
    "contents_url": "https://api.github.com/repos/SAP/cf-java-logging-support/contents/cf-java-logging-support-core/src/main/java/com/sap/hcp/cf/logging/common/request/RequestRecord.java?ref=cf4a92d6f8cb2ca91873f5c4ae20b593f221327e",
    "patch": "@@ -1,5 +1,8 @@\n package com.sap.hcp.cf.logging.common.request;\n \n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -11,7 +14,6 @@\n import com.fasterxml.jackson.jr.ob.JSON;\n import com.fasterxml.jackson.jr.ob.JSONComposer;\n import com.fasterxml.jackson.jr.ob.comp.ObjectComposer;\n-import com.sap.hcp.cf.logging.common.DateTimeValue;\n import com.sap.hcp.cf.logging.common.Defaults;\n import com.sap.hcp.cf.logging.common.DoubleValue;\n import com.sap.hcp.cf.logging.common.Fields;\n@@ -67,10 +69,8 @@\n                            IN, OUT\n     }\n \n-    private long startNano = 0;\n-    private long endNano = 0;\n-    private long startMs = 0;\n-    private long endMs = 0;\n+    private Instant start;\n+    private Instant end;\n \n     private Direction direction = Direction.IN;\n \n@@ -184,12 +184,8 @@ public void resetContext() {\n      * @return the assigned start time.\n      */\n     public long start() {\n-        startMs = System.currentTimeMillis();\n-        startNano = System.nanoTime();\n-        if (startNano > endNano) {\n-            endNano = startNano;\n-        }\n-        return startMs;\n+        start = Instant.now(ClockHolder.getInstance());\n+        return start.toEpochMilli();\n     }\n \n     /**\n@@ -198,10 +194,8 @@ public long start() {\n      * @return the assigned end time.\n      */\n     public long stop() {\n-        endMs = System.currentTimeMillis();\n-        endNano = System.nanoTime();\n-\n-        return endMs;\n+        end = Instant.now(ClockHolder.getInstance());\n+        return end.toEpochMilli();\n     }\n \n     @Override\n@@ -239,11 +233,11 @@ private void finish() {\n          * sure, we stopped the timer and then compute the delta\n          */\n         if (!fields.containsKey(Fields.RESPONSE_TIME_MS)) {\n-            if (endMs == 0) {\n+            if (end == null) {\n                 stop();\n             }\n-            setEndTimingTag(new DateTimeValue(endMs).toString());\n-            addValue(Fields.RESPONSE_TIME_MS, new DoubleValue((endNano - startNano) / 1000000.0));\n+            setEndTimingTag(end.toString());\n+            addValue(Fields.RESPONSE_TIME_MS, new DoubleValue(Duration.between(start, end).toNanos() / 1_000_000.0));\n         } else {\n             Value respTime = fields.get(Fields.RESPONSE_TIME_MS);\n             if (respTime != null) {\n@@ -253,10 +247,10 @@ private void finish() {\n                 } else if (LongValue.class.isAssignableFrom(respTime.getClass())) {\n                     delta = ((Long) respTime.getValue()).longValue();\n                 }\n-                setEndTimingTag(new DateTimeValue(startMs + delta).toString());\n+                setEndTimingTag(start.plusMillis(delta).toString());\n             }\n         }\n-        setStartTimingTag(new DateTimeValue(startMs).toString());\n+        setStartTimingTag(start.toString());\n     }\n \n     private void setStartTimingTag(String dateValue) {\n@@ -280,4 +274,12 @@ private void setEndTimingTag(String dateValue) {\n         addTag(tag, dateValue);\n \n     }\n+\n+    static class ClockHolder {\n+        static Clock instance = Clock.systemUTC();\n+\n+        public static Clock getInstance() {\n+            return ClockHolder.instance;\n+        }\n+    }\n }"
  },
  {
    "sha": "6806d264311bd5186c306e319fc002506ef8cf76",
    "filename": "cf-java-logging-support-core/src/test/java/com/sap/hcp/cf/logging/common/TestDateTimeValue.java",
    "status": "removed",
    "additions": 0,
    "deletions": 29,
    "changes": 29,
    "blob_url": "https://github.com/SAP/cf-java-logging-support/blob/2f003f7ca872147ef9c0d9b0087d0f4c159c1028/cf-java-logging-support-core/src/test/java/com/sap/hcp/cf/logging/common/TestDateTimeValue.java",
    "raw_url": "https://github.com/SAP/cf-java-logging-support/raw/2f003f7ca872147ef9c0d9b0087d0f4c159c1028/cf-java-logging-support-core/src/test/java/com/sap/hcp/cf/logging/common/TestDateTimeValue.java",
    "contents_url": "https://api.github.com/repos/SAP/cf-java-logging-support/contents/cf-java-logging-support-core/src/test/java/com/sap/hcp/cf/logging/common/TestDateTimeValue.java?ref=2f003f7ca872147ef9c0d9b0087d0f4c159c1028",
    "patch": "@@ -1,29 +0,0 @@\n-package com.sap.hcp.cf.logging.common;\n-\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n-import java.text.DateFormat;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-import java.util.TimeZone;\n-\n-import org.junit.Test;\n-\n-public class TestDateTimeValue {\n-\n-    @Test\n-    public void test() {\n-        DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n-        df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-        long ts = System.currentTimeMillis();\n-        DateTimeValue dtv = new DateTimeValue(ts);\n-        try {\n-            assertTrue(dtv.getValue().equals(df.parse(df.format(new Date(ts)))));\n-        } catch (ParseException pex) {\n-            fail(pex.getMessage());\n-        }\n-    }\n-\n-}"
  },
  {
    "sha": "47e440fe5d910e370bfe62f83038c1a51c7bc02e",
    "filename": "cf-java-logging-support-core/src/test/java/com/sap/hcp/cf/logging/common/request/RequestRecordTest.java",
    "status": "renamed",
    "additions": 39,
    "deletions": 26,
    "changes": 65,
    "blob_url": "https://github.com/SAP/cf-java-logging-support/blob/cf4a92d6f8cb2ca91873f5c4ae20b593f221327e/cf-java-logging-support-core/src/test/java/com/sap/hcp/cf/logging/common/request/RequestRecordTest.java",
    "raw_url": "https://github.com/SAP/cf-java-logging-support/raw/cf4a92d6f8cb2ca91873f5c4ae20b593f221327e/cf-java-logging-support-core/src/test/java/com/sap/hcp/cf/logging/common/request/RequestRecordTest.java",
    "contents_url": "https://api.github.com/repos/SAP/cf-java-logging-support/contents/cf-java-logging-support-core/src/test/java/com/sap/hcp/cf/logging/common/request/RequestRecordTest.java?ref=cf4a92d6f8cb2ca91873f5c4ae20b593f221327e",
    "patch": "@@ -1,14 +1,19 @@\n package com.sap.hcp.cf.logging.common.request;\n \n-import static org.hamcrest.Matchers.greaterThan;\n-import static org.hamcrest.Matchers.lessThanOrEqualTo;\n-import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.hamcrest.Matchers.is;\n import static org.hamcrest.core.IsNot.not;\n import static org.hamcrest.core.IsNull.nullValue;\n-import static org.junit.Assert.assertThat;\n \n import java.io.IOException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n \n+import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.MDC;\n \n@@ -17,13 +22,20 @@\n import com.sap.hcp.cf.logging.common.Defaults;\n import com.sap.hcp.cf.logging.common.DoubleValue;\n import com.sap.hcp.cf.logging.common.Fields;\n-import com.sap.hcp.cf.logging.common.request.RequestRecord;\n import com.sap.hcp.cf.logging.common.request.RequestRecord.Direction;\n \n-public class TestRequestRecord {\n+public class RequestRecordTest {\n+\n+    private static final Clock FIXED_CLOCK_EPOCH = Clock.fixed(Instant.EPOCH, ZoneOffset.UTC);\n+    private static final Duration RESPONSE_DELAY = Duration.ofMillis(150);\n \n     private RequestRecord rrec;\n \n+    @Before\n+    public void resetRequestRecordClock() {\n+        setRequestRecordClock(FIXED_CLOCK_EPOCH);\n+    }\n+\n     @Test\n     public void testDefaults() throws JSONObjectException, IOException {\n         String layer = \"testDefaults\";\n@@ -34,7 +46,7 @@ public void testDefaults() throws JSONObjectException, IOException {\n         assertThat(getField(Fields.REQUEST_SIZE_B), is(\"-1\"));\n         assertThat(getField(Fields.REQUEST_RECEIVED_AT), not(nullValue()));\n         assertThat(getField(Fields.REQUEST_RECEIVED_AT), not(nullValue()));\n-        assertThat(Double.valueOf(getField(Fields.RESPONSE_TIME_MS)), greaterThan(new Double(0.0)));\n+        assertThat(Double.valueOf(getField(Fields.RESPONSE_TIME_MS)), greaterThanOrEqualTo(0.0d));\n \n         assertThat(getField(Fields.REQUEST), is(Defaults.UNKNOWN));\n         assertThat(getField(Fields.REMOTE_IP), is(Defaults.UNKNOWN));\n@@ -101,41 +113,42 @@ public void testResponseTimeIn() throws JSONObjectException, IOException {\n         MDC.clear();\n         String layer = \"testResponseTimeIn\";\n         rrec = new RequestRecord(layer);\n-        long start = rrec.start();\n-        doWait(150);\n-        long end = rrec.stop();\n+        rrec.start();\n+        advanceRequestRecordClock(RESPONSE_DELAY);\n+        rrec.stop();\n         assertThat(getField(Fields.LAYER), is(layer));\n         assertThat(getField(Fields.DIRECTION), is(Direction.IN.toString()));\n-        assertThat(Double.valueOf(getField(Fields.RESPONSE_TIME_MS)).longValue(), lessThanOrEqualTo(Double.valueOf(end -\n-                                                                                                                   start)\n-                                                                                                          .longValue()));\n-        assertThat(getField(Fields.RESPONSE_SENT_AT), not(nullValue()));\n-        assertThat(getField(Fields.REQUEST_RECEIVED_AT), not(nullValue()));\n+        assertThat(Double.valueOf(getField(Fields.RESPONSE_TIME_MS)), is(RESPONSE_DELAY.getNano() / 1_000_000.0));\n+        assertThat(getField(Fields.RESPONSE_SENT_AT), is(equalTo(Instant.EPOCH.plus(RESPONSE_DELAY).toString())));\n+        assertThat(getField(Fields.REQUEST_RECEIVED_AT), is(equalTo(Instant.EPOCH.toString())));\n     }\n \n     @Test\n     public void testResponseTimeOut() throws JSONObjectException, IOException {\n         MDC.clear();\n         String layer = \"testResponseTimeOut\";\n         rrec = new RequestRecord(layer, Direction.OUT);\n-        long start = rrec.start();\n-        doWait(150);\n-        long end = rrec.stop();\n+        rrec.start();\n+        advanceRequestRecordClock(RESPONSE_DELAY);\n+        rrec.stop();\n         assertThat(getField(Fields.LAYER), is(layer));\n         assertThat(getField(Fields.DIRECTION), is(Direction.OUT.toString()));\n-        assertThat(Double.valueOf(getField(Fields.RESPONSE_TIME_MS)).longValue(), lessThanOrEqualTo(Double.valueOf(end -\n-                                                                                                                   start)\n-                                                                                                          .longValue()));\n+        assertThat(Double.valueOf(getField(Fields.RESPONSE_TIME_MS)), is(RESPONSE_DELAY.getNano() / 1_000_000.0));\n         assertThat(getField(Fields.RESPONSE_RECEIVED_AT), not(nullValue()));\n         assertThat(getField(Fields.REQUEST_SENT_AT), not(nullValue()));\n     }\n \n-    private void doWait(long p) {\n-        try {\n-            Thread.sleep(p);\n-        } catch (Exception e) {\n+    private Clock getRequestRecordClock() {\n+        return RequestRecord.ClockHolder.getInstance();\n+    }\n+\n+    private void setRequestRecordClock(Clock clock) {\n+        RequestRecord.ClockHolder.instance = clock;\n+    }\n \n-        }\n+    private void advanceRequestRecordClock(Duration duration) {\n+        Clock advancedClock = Clock.offset(getRequestRecordClock(), duration);\n+        setRequestRecordClock(advancedClock);\n     }\n \n     private String getField(String fieldName) throws JSONObjectException, IOException {",
    "previous_filename": "cf-java-logging-support-core/src/test/java/com/sap/hcp/cf/logging/common/request/TestRequestRecord.java"
  },
  {
    "sha": "66c509535fabf47f8a009eaf41d57b314d1a0a22",
    "filename": "cf-java-logging-support-log4j2/src/test/java/com/sap/hcp/cf/logging/common/request/TestRequestRecord.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SAP/cf-java-logging-support/blob/cf4a92d6f8cb2ca91873f5c4ae20b593f221327e/cf-java-logging-support-log4j2/src/test/java/com/sap/hcp/cf/logging/common/request/TestRequestRecord.java",
    "raw_url": "https://github.com/SAP/cf-java-logging-support/raw/cf4a92d6f8cb2ca91873f5c4ae20b593f221327e/cf-java-logging-support-log4j2/src/test/java/com/sap/hcp/cf/logging/common/request/TestRequestRecord.java",
    "contents_url": "https://api.github.com/repos/SAP/cf-java-logging-support/contents/cf-java-logging-support-log4j2/src/test/java/com/sap/hcp/cf/logging/common/request/TestRequestRecord.java?ref=cf4a92d6f8cb2ca91873f5c4ae20b593f221327e",
    "patch": "@@ -26,7 +26,7 @@\n \n public class TestRequestRecord extends AbstractTest {\n \n-    private final Logger logger = LoggerFactory.getLogger(TestRequestRecord.class);\n+    private final Logger logger = LoggerFactory.getLogger(RequestRecordTest.class);\n     private RequestRecord rrec;\n \n     @Test"
  },
  {
    "sha": "fd323a8a20e3795a2b11e867e00d15224852e064",
    "filename": "cf-java-logging-support-logback/src/test/java/com/sap/hcp/cf/logging/common/request/TestRequestRecord.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SAP/cf-java-logging-support/blob/cf4a92d6f8cb2ca91873f5c4ae20b593f221327e/cf-java-logging-support-logback/src/test/java/com/sap/hcp/cf/logging/common/request/TestRequestRecord.java",
    "raw_url": "https://github.com/SAP/cf-java-logging-support/raw/cf4a92d6f8cb2ca91873f5c4ae20b593f221327e/cf-java-logging-support-logback/src/test/java/com/sap/hcp/cf/logging/common/request/TestRequestRecord.java",
    "contents_url": "https://api.github.com/repos/SAP/cf-java-logging-support/contents/cf-java-logging-support-logback/src/test/java/com/sap/hcp/cf/logging/common/request/TestRequestRecord.java?ref=cf4a92d6f8cb2ca91873f5c4ae20b593f221327e",
    "patch": "@@ -22,12 +22,12 @@\n import com.sap.hcp.cf.logging.common.Fields;\n import com.sap.hcp.cf.logging.common.Markers;\n import com.sap.hcp.cf.logging.common.request.RequestRecord;\n-import com.sap.hcp.cf.logging.common.request.TestRequestRecord;\n+import com.sap.hcp.cf.logging.common.request.RequestRecordTest;\n import com.sap.hcp.cf.logging.common.request.RequestRecord.Direction;\n \n public class TestRequestRecord extends AbstractTest {\n \n-    private final Logger logger = LoggerFactory.getLogger(TestRequestRecord.class);\n+    private final Logger logger = LoggerFactory.getLogger(RequestRecordTest.class);\n     private RequestRecord rrec;\n \n     @Test"
  }
]
