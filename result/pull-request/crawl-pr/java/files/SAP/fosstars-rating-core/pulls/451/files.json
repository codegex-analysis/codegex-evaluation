[
  {
    "sha": "9370f9d25ac0fd6308d2814480a92fa9ba0ca222",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/pom.xml",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/pom.xml",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/pom.xml?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -70,17 +70,17 @@\n \n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <version.jackson>2.12.1</version.jackson>\n+    <version.jackson>2.12.2</version.jackson>\n     <version.commons-math3>3.6.1</version.commons-math3>\n     <version.commons-cli>1.4</version.commons-cli>\n-    <version.github-api>1.116</version.github-api>\n+    <version.github-api>1.123</version.github-api>\n     <version.log4j-api>2.13.1</version.log4j-api>\n     <version.log4j-core>2.13.2</version.log4j-core>\n     <version.nist-data-mirror>1.4.0</version.nist-data-mirror>\n     <version.maven-model>3.6.2</version.maven-model>\n-    <version.httpclient>4.5.10</version.httpclient>\n-    <version.junit>4.13.1</version.junit>\n-    <version.mockito-core>3.2.4</version.mockito-core>\n+    <version.httpclient>4.5.13</version.httpclient>\n+    <version.junit>4.13.2</version.junit>\n+    <version.mockito-core>3.8.0</version.mockito-core>\n     <version.commons-collections4>4.4</version.commons-collections4>\n     <version.org.eclipse.jgit>5.7.0.202003110725-r</version.org.eclipse.jgit>\n     <version.commons-text>1.8</version.commons-text>"
  },
  {
    "sha": "d96393fe740a848d8db1a44cf06f453412586576",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/data/github/ContributingGuidelineInfo.java",
    "status": "added",
    "additions": 160,
    "deletions": 0,
    "changes": 160,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/ContributingGuidelineInfo.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/ContributingGuidelineInfo.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/data/github/ContributingGuidelineInfo.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,160 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_CONTRIBUTING_GUIDELINE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE;\n+import static com.sap.oss.phosphor.fosstars.model.other.Utils.setOf;\n+\n+import com.sap.oss.phosphor.fosstars.model.Feature;\n+import com.sap.oss.phosphor.fosstars.model.Value;\n+import com.sap.oss.phosphor.fosstars.model.ValueSet;\n+import com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import com.sap.oss.phosphor.fosstars.model.value.ValueHashSet;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * This data provider gathers info about project's contributing guidelines.\n+ * It fills out the following features:\n+ * <ul>\n+ *   <li>{@link OssFeatures#HAS_CONTRIBUTING_GUIDELINE}</li>\n+ *   <li>{@link OssFeatures#HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE}</li>\n+ * </ul>\n+ */\n+public class ContributingGuidelineInfo extends GitHubCachingDataProvider {\n+\n+  /**\n+   * A list of files that may be a contributing guideline.\n+   */\n+  private static final List<String> DEFAULT_KNOWN_CONTRIBUTING_GUIDELINE_FILES\n+      = Arrays.asList(\"CONTRIBUTING\", \"CONTRIBUTING.md\", \"CONTRIBUTING.txt\");\n+\n+  /**\n+   * A list of paths to contributing guidelines.\n+   */\n+  private final List<String> knownContributingGuidelineFiles = new ArrayList<>();\n+\n+  /**\n+   * A list of patterns that describe required content in contributing guidelines.\n+   */\n+  private final List<String> requiredContentPatterns = new ArrayList<>();\n+\n+  /**\n+   * Initializes a data provider.\n+   *\n+   * @param fetcher An interface to GitHub.\n+   */\n+  public ContributingGuidelineInfo(GitHubDataFetcher fetcher) {\n+    super(fetcher);\n+    this.knownContributingGuidelineFiles.addAll(DEFAULT_KNOWN_CONTRIBUTING_GUIDELINE_FILES);\n+  }\n+\n+  /**\n+   * Set a list of file that may be a contributing guideline.\n+   *\n+   * @param files The files.\n+   * @return This data provider.\n+   */\n+  public ContributingGuidelineInfo knownContributingGuidelineFiles(String... files) {\n+    Objects.requireNonNull(files, \"Oops! Files can't be null\");\n+\n+    if (files.length == 0) {\n+      throw new IllegalArgumentException(\"Oops! Files can't be empty!\");\n+    }\n+\n+    knownContributingGuidelineFiles.clear();\n+    knownContributingGuidelineFiles.addAll(Arrays.asList(files));\n+\n+    return this;\n+  }\n+\n+  /**\n+   * Set a list of patterns that describe required content in contributing guidelines.\n+   *\n+   * @param patterns The patterns.\n+   * @return This data provider.\n+   */\n+  public ContributingGuidelineInfo requiredContentPatterns(String... patterns) {\n+    Objects.requireNonNull(patterns, \"Oops! Patterns can't be null!\");\n+    requiredContentPatterns.clear();\n+    requiredContentPatterns.addAll(Arrays.asList(patterns));\n+    return this;\n+  }\n+\n+  @Override\n+  public Set<Feature<?>> supportedFeatures() {\n+    return setOf(HAS_CONTRIBUTING_GUIDELINE, HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE);\n+  }\n+\n+  @Override\n+  protected ValueSet fetchValuesFor(GitHubProject project) throws IOException {\n+    logger.info(\"Gathering info about project's contributing guidelines ...\");\n+\n+    Optional<List<String>> content = lookForContributingGuideline(project);\n+    if (!content.isPresent()) {\n+      return ValueHashSet.from(\n+          HAS_CONTRIBUTING_GUIDELINE.value(false),\n+          HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE.value(false));\n+    }\n+\n+    ValueSet values = new ValueHashSet();\n+    values.update(HAS_CONTRIBUTING_GUIDELINE.value(true));\n+    values.update(infoAboutContributingGuideline(content.get()));\n+\n+    return values;\n+  }\n+\n+  /**\n+   * Looks for a contributing guideline in a project.\n+   *\n+   * @param project The project.\n+   * @return Content of a contributing guideline if found.\n+   * @throws IOException If something went wrong.\n+   */\n+  private Optional<List<String>> lookForContributingGuideline(GitHubProject project)\n+      throws IOException {\n+\n+    LocalRepository repository = GitHubDataFetcher.localRepositoryFor(project);\n+\n+    for (String path : knownContributingGuidelineFiles) {\n+      Optional<List<String>> content = repository.readLinesOf(path);\n+      if (content.isPresent()) {\n+        return content;\n+      }\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Extract info about a contributing guideline.\n+   *\n+   * @param content Content of the contributing guideline.\n+   * @return A value of {@link OssFeatures#HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE}.\n+   */\n+  private Value<Boolean> infoAboutContributingGuideline(List<String> content) {\n+    if (requiredContentPatterns.isEmpty()) {\n+      return HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE.value(true);\n+    }\n+\n+    return HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE.value(\n+        requiredContentPatterns.stream().allMatch(pattern -> contains(content, pattern)));\n+  }\n+\n+  /**\n+   * Looks for a string in a list of strings.\n+   *\n+   * @param content The list of strings.\n+   * @param string The string.\n+   * @return True if the string is found, false otherwise.\n+   */\n+  private static boolean contains(List<String> content, String string) {\n+    String pattern = string.toLowerCase();\n+    return content.stream().anyMatch(line -> line.toLowerCase().contains(pattern));\n+  }\n+}"
  },
  {
    "sha": "c198dee22b8b1866ccc7bd7b3ae9f055e46668bb",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/data/github/GitHubDataFetcher.java",
    "status": "modified",
    "additions": 14,
    "deletions": 7,
    "changes": 21,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/GitHubDataFetcher.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/GitHubDataFetcher.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/data/github/GitHubDataFetcher.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -116,7 +116,12 @@\n   /**\n    * An interface to the GitHub API.\n    */\n-  private GitHub github;\n+  private final GitHub github;\n+\n+  /**\n+   * A token for accessing the GitHub API.\n+   */\n+  private final String token;\n \n   /**\n    * A limited capacity cache to store the repository of a {@link GitHubProject}.\n@@ -127,10 +132,12 @@\n    * Initializes a new data fetcher.\n    *\n    * @param github An interface to the GitHub API.\n+   * @param token A token for accessing the GitHub API.\n    * @throws IOException If something went wrong.\n    */\n-  public GitHubDataFetcher(GitHub github) throws IOException {\n+  public GitHubDataFetcher(GitHub github, String token) throws IOException {\n     Objects.requireNonNull(github, \"Hey! An interface to GitHub can not be null!\");\n+    Objects.requireNonNull(token, \"Hey! Token can't be null!\");\n \n     if (!Files.exists(REPOSITORIES_BASE_PATH)) {\n       Files.createDirectories(REPOSITORIES_BASE_PATH);\n@@ -141,6 +148,7 @@ public GitHubDataFetcher(GitHub github) throws IOException {\n     }\n \n     this.github = github;\n+    this.token = token;\n   }\n \n   /**\n@@ -153,13 +161,12 @@ public synchronized GitHub github() {\n   }\n \n   /**\n-   * Set an interface to the GitHub API.\n+   * Get a token for accessing the GitHub API.\n    *\n-   * @param github The interface to the GitHub API.\n+   * @return A token for accessing the GitHub API.\n    */\n-  public synchronized void set(GitHub github) {\n-    Objects.requireNonNull(github, \"Hey! An interface to GitHub can not be null!\");\n-    this.github = github;\n+  public synchronized String token() {\n+    return token;\n   }\n \n   /**"
  },
  {
    "sha": "7e1868f53b7660aa900ba53d924010ebbc4b824d",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/data/github/LicenseInfo.java",
    "status": "added",
    "additions": 195,
    "deletions": 0,
    "changes": 195,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/LicenseInfo.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/LicenseInfo.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/data/github/LicenseInfo.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,195 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.ALLOWED_LICENSE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_LICENSE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.LICENSE_HAS_DISALLOWED_CONTENT;\n+import static com.sap.oss.phosphor.fosstars.model.other.Utils.setOf;\n+\n+import com.sap.oss.phosphor.fosstars.model.Feature;\n+import com.sap.oss.phosphor.fosstars.model.ValueSet;\n+import com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import com.sap.oss.phosphor.fosstars.model.value.ValueHashSet;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * This data provider gathers info about project's license. It fills out the following features:\n+ * <ul>\n+ *   <li>{@link OssFeatures#HAS_LICENSE}</li>\n+ *   <li>{@link OssFeatures#ALLOWED_LICENSE}</li>\n+ *   <li>{@link OssFeatures#LICENSE_HAS_DISALLOWED_CONTENT}</li>\n+ * </ul>\n+ */\n+public class LicenseInfo extends GitHubCachingDataProvider {\n+\n+  /**\n+   * A list of files that may be a license.\n+   */\n+  private static final List<String> DEFAULT_KNOWN_LICENSE_FILES\n+      = Arrays.asList(\"LICENSE\", \"LICENSE.txt\");\n+\n+  /**\n+   * A list of paths to licenses.\n+   */\n+  private final List<String> knownLicenseFiles = new ArrayList<>();\n+\n+  /**\n+   * A list of allowed license headers.\n+   */\n+  private final List<String> allowedLicenseHeaders = new ArrayList<>();\n+\n+  /**\n+   * A list of patterns that are not allowed in licenses.\n+   */\n+  private final List<String> disallowedLicenseContentPatterns = new ArrayList<>();\n+\n+  /**\n+   * Initializes a data provider.\n+   *\n+   * @param fetcher An interface to GitHub.\n+   */\n+  public LicenseInfo(GitHubDataFetcher fetcher) {\n+    super(fetcher);\n+    this.knownLicenseFiles.addAll(DEFAULT_KNOWN_LICENSE_FILES);\n+  }\n+\n+  /**\n+   * Set a list of file that may be a license.\n+   *\n+   * @param files The files.\n+   * @return This data provider.\n+   */\n+  public LicenseInfo knownLicenseFiles(String... files) {\n+    Objects.requireNonNull(files, \"Oops! Files can't be null\");\n+\n+    if (files.length == 0) {\n+      throw new IllegalArgumentException(\"Oops! Files can't be empty!\");\n+    }\n+\n+    knownLicenseFiles.clear();\n+    knownLicenseFiles.addAll(Arrays.asList(files));\n+\n+    return this;\n+  }\n+\n+  /**\n+   * Set a list of allowed license headers.\n+   *\n+   * @param headers The headers.\n+   * @return This data provider.\n+   */\n+  public LicenseInfo allowedLicenseHeaders(String... headers) {\n+    Objects.requireNonNull(headers, \"Oops! Headers is null\");\n+    allowedLicenseHeaders.clear();\n+    allowedLicenseHeaders.addAll(Arrays.asList(headers));\n+    return this;\n+  }\n+\n+  /**\n+   * Set a list of patterns that are not allowed in licenses.\n+   *\n+   * @param patterns The patterns.\n+   * @return This data provider.\n+   */\n+  public LicenseInfo disallowedLicenseContentPatterns(String... patterns) {\n+    Objects.requireNonNull(patterns, \"Oops! Patterns can't be null!\");\n+    disallowedLicenseContentPatterns.clear();\n+    disallowedLicenseContentPatterns.addAll(Arrays.asList(patterns));\n+    return this;\n+  }\n+\n+  @Override\n+  public Set<Feature<?>> supportedFeatures() {\n+    return setOf(HAS_LICENSE, ALLOWED_LICENSE, LICENSE_HAS_DISALLOWED_CONTENT);\n+  }\n+\n+  @Override\n+  protected ValueSet fetchValuesFor(GitHubProject project) throws IOException {\n+    logger.info(\"Gathering info about project's license ...\");\n+\n+    Optional<List<String>> license = lookForLicenseIn(project);\n+    if (!license.isPresent()) {\n+      return ValueHashSet.from(HAS_LICENSE.value(false), ALLOWED_LICENSE.unknown(),\n+          LICENSE_HAS_DISALLOWED_CONTENT.unknown());\n+    }\n+\n+    ValueSet values = new ValueHashSet();\n+    values.update(HAS_LICENSE.value(true));\n+    values.update(infoAboutLicense(license.get()));\n+\n+    return values;\n+  }\n+\n+  /**\n+   * Looks for license in a project.\n+   *\n+   * @param project The project.\n+   * @return Content of the license if found.\n+   * @throws IOException If something went wrong.\n+   */\n+  private Optional<List<String>> lookForLicenseIn(GitHubProject project) throws IOException {\n+    LocalRepository repository = GitHubDataFetcher.localRepositoryFor(project);\n+\n+    for (String path : knownLicenseFiles) {\n+      Optional<List<String>> content = repository.readLinesOf(path);\n+      if (content.isPresent()) {\n+        return content;\n+      }\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+  /**\n+   * Extract info about license.\n+   *\n+   * @param content Content of the license.\n+   * @return A set of values.\n+   */\n+  ValueSet infoAboutLicense(List<String> content) {\n+    ValueSet values = ValueHashSet.from(\n+        ALLOWED_LICENSE.value(false), LICENSE_HAS_DISALLOWED_CONTENT.value(false));\n+\n+    String header = headerOf(content).toLowerCase();\n+    values.update(ALLOWED_LICENSE.value(\n+        allowedLicenseHeaders.stream().map(String::toLowerCase).anyMatch(header::contains)));\n+    values.update(LICENSE_HAS_DISALLOWED_CONTENT.value(content.stream().anyMatch(this::isWrong)));\n+\n+    return values;\n+  }\n+\n+  /**\n+   * Looks for the first not-empty string in a text.\n+   *\n+   * @param content The text.\n+   * @return The first not-empty string.\n+   * @throws IllegalArgumentException If nothing found.\n+   */\n+  static String headerOf(List<String> content) {\n+    for (String line : content) {\n+      if (!line.trim().isEmpty()) {\n+        return line;\n+      }\n+    }\n+\n+    throw new IllegalArgumentException(\"Oops! No header found!\");\n+  }\n+\n+  /**\n+   * Checks if a line contains {@link #disallowedLicenseContentPatterns disallowed patterns}.\n+   *\n+   * @param line The line to check.\n+   * @return True if the line contains disallowed patterns, false otherwise.\n+   */\n+  boolean isWrong(String line) {\n+    line = line.toLowerCase();\n+    return disallowedLicenseContentPatterns.stream()\n+        .map(String::toLowerCase).anyMatch(line::contains);\n+  }\n+}"
  },
  {
    "sha": "b46553595975ebba360d27a3caad92190a1c069b",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/data/github/LocalRepository.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/LocalRepository.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/LocalRepository.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/data/github/LocalRepository.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -27,6 +27,7 @@\n /**\n  * The class holds information about repository that was cloned with JGit.\n  */\n+// TODO: make sure that all methods accept and expect relative paths from the repository root\n public class LocalRepository implements AutoCloseable {\n \n   /**\n@@ -248,6 +249,17 @@ public boolean hasFile(String file) {\n     return Optional.of(Files.newInputStream(path));\n   }\n \n+  /**\n+   * Read lines in a file.\n+   *\n+   * @param file A path to the file.\n+   * @return A list of lines in the file if it exists.\n+   * @throws IOException If something went wrong.\n+   */\n+  public Optional<List<String>> readLinesOf(String file) throws IOException {\n+    return readLinesOf(Paths.get(file));\n+  }\n+\n   /**\n    * Read lines in a file.\n    *"
  },
  {
    "sha": "22e81a2f4edd8fb94610959097d7e8ce3a618bbf",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/data/github/ReadmeInfo.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/ReadmeInfo.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/ReadmeInfo.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/data/github/ReadmeInfo.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,62 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_README;\n+\n+import com.sap.oss.phosphor.fosstars.model.Feature;\n+import com.sap.oss.phosphor.fosstars.model.Value;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This data provider gathers info about project's README file.\n+ * It fills out {@link com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures#HAS_README}.\n+ */\n+public class ReadmeInfo extends CachedSingleFeatureGitHubDataProvider<Boolean> {\n+\n+  /**\n+   * A list of known README file names.\n+   */\n+  private static final List<String> KNOWN_README_FILES\n+      = Arrays.asList(\"README\", \"README.txt\", \"README.md\");\n+\n+  /**\n+   * Initializes a data provider.\n+   *\n+   * @param fetcher An interface to GitHub.\n+   */\n+  public ReadmeInfo(GitHubDataFetcher fetcher) {\n+    super(fetcher);\n+  }\n+\n+  @Override\n+  protected Feature<Boolean> supportedFeature() {\n+    return HAS_README;\n+  }\n+\n+  @Override\n+  protected Value<Boolean> fetchValueFor(GitHubProject project) throws IOException {\n+    logger.info(\"Gathering info about project's README file ...\");\n+    LocalRepository repository = GitHubDataFetcher.localRepositoryFor(project);\n+    return HAS_README.value(readmeIn(repository).isPresent());\n+  }\n+\n+  /**\n+   * Looks for a README file in a repository.\n+   *\n+   * @param repository The repository.\n+   * @return A file name of README.\n+   */\n+  static Optional<String> readmeIn(LocalRepository repository) {\n+    for (String filename : KNOWN_README_FILES) {\n+      if (repository.hasFile(filename)) {\n+        return Optional.of(filename);\n+      }\n+    }\n+\n+    return Optional.empty();\n+  }\n+\n+}"
  },
  {
    "sha": "9128627cc5d985a2e60d6881de8d9df849c8266c",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/data/github/TeamsInfo.java",
    "status": "added",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/TeamsInfo.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/TeamsInfo.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/data/github/TeamsInfo.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,140 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ADMIN_TEAM_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ENOUGH_ADMINS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ENOUGH_TEAMS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.other.Utils.setOf;\n+\n+import com.sap.oss.phosphor.fosstars.model.Feature;\n+import com.sap.oss.phosphor.fosstars.model.ValueSet;\n+import com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import com.sap.oss.phosphor.fosstars.model.value.ValueHashSet;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import org.kohsuke.github.GHRepository;\n+import org.kohsuke.github.GHTeam;\n+\n+/**\n+ * This data provider gathers info about project's teams on GitHub.\n+ * It fills out the following features:\n+ * <ul>\n+ *   <li>{@link OssFeatures#HAS_ENOUGH_TEAMS_ON_GITHUB}</li>\n+ *   <li>{@link OssFeatures#HAS_ADMIN_TEAM_ON_GITHUB}</li>\n+ *   <li>{@link OssFeatures#HAS_ENOUGH_ADMINS_ON_GITHUB}</li>\n+ *   <li>{@link OssFeatures#HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB}</li>\n+ *   <li>{@link OssFeatures#HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB}</li>\n+ * </ul>\n+ */\n+public class TeamsInfo extends GitHubCachingDataProvider {\n+\n+  /**\n+   * A list of permissions that allows pushing to a repository on GitHub.\n+   */\n+  private static final List<String> PUSH_PRIVILEGES = Arrays.asList(\"admin\", \"push\");\n+\n+  /**\n+   * A minimal number of teams to fulfill {@link OssFeatures#HAS_ENOUGH_TEAMS_ON_GITHUB}.\n+   */\n+  private int minTeams = 2;\n+\n+  /**\n+   * A minimal number of admins to fulfill {@link OssFeatures#HAS_ADMIN_TEAM_ON_GITHUB}.\n+   */\n+  private int minAdmins = 2;\n+\n+  /**\n+   * A minimal number of members in a team\n+   * to fulfill {@link OssFeatures#HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB}.\n+   */\n+  private int minMembers = 2;\n+\n+  /**\n+   * Initializes a data provider.\n+   *\n+   * @param fetcher An interface to GitHub.\n+   */\n+  public TeamsInfo(GitHubDataFetcher fetcher) {\n+    super(fetcher);\n+  }\n+\n+  /**\n+   * Set a minimal number of teams to fulfill {@link OssFeatures#HAS_ENOUGH_TEAMS_ON_GITHUB}.\n+   *\n+   * @param n The number.\n+   * @return This data provider.\n+   */\n+  public TeamsInfo minTeams(int n) {\n+    this.minTeams = n;\n+    return this;\n+  }\n+\n+  /**\n+   * Set a minimal number of admins to fulfill {@link OssFeatures#HAS_ADMIN_TEAM_ON_GITHUB}.\n+   *\n+   * @param n The number.\n+   * @return This data provider.\n+   */\n+  public TeamsInfo minAdmins(int n) {\n+    this.minAdmins = n;\n+    return this;\n+  }\n+\n+  /**\n+   * Set a minimal number of members in a team\n+   * to fulfill {@link OssFeatures#HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB}.\n+   *\n+   * @param n The number.\n+   * @return This data provider.\n+   */\n+  public TeamsInfo minMembers(int n) {\n+    this.minMembers = n;\n+    return this;\n+  }\n+\n+  @Override\n+  public Set<Feature<?>> supportedFeatures() {\n+    return setOf(\n+        HAS_ENOUGH_TEAMS_ON_GITHUB,\n+        HAS_ADMIN_TEAM_ON_GITHUB,\n+        HAS_ENOUGH_ADMINS_ON_GITHUB,\n+        HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB,\n+        HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB);\n+  }\n+\n+  @Override\n+  protected ValueSet fetchValuesFor(GitHubProject project) throws IOException {\n+    logger.info(\"Fetching info about project's teams ...\");\n+\n+    GHRepository repository = fetcher.repositoryFor(project);\n+    ValueSet values = new ValueHashSet();\n+\n+    values.update(HAS_ENOUGH_TEAMS_ON_GITHUB.value(repository.getTeams().size() >= minTeams));\n+    values.update(HAS_ADMIN_TEAM_ON_GITHUB.value(false));\n+    values.update(HAS_ENOUGH_ADMINS_ON_GITHUB.value(false));\n+    values.update(HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB.value(false));\n+    values.update(HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB.value(false));\n+\n+    for (GHTeam team : repository.getTeams()) {\n+      if (\"admin\".equals(team.getPermission())) {\n+        values.update(HAS_ADMIN_TEAM_ON_GITHUB.value(true));\n+        if (team.getMembers().size() >= minAdmins) {\n+          values.update(HAS_ENOUGH_ADMINS_ON_GITHUB.value(true));\n+        }\n+      }\n+      if (PUSH_PRIVILEGES.contains(team.getPermission())) {\n+        values.update(HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB.value(true));\n+        if (team.getMembers().size() >= minMembers) {\n+          values.update(HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB.value(true));\n+        }\n+      }\n+    }\n+\n+    return values;\n+  }\n+\n+}"
  },
  {
    "sha": "cc1eef2359f494d3b763d6a16fb7be9f49f4a578",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/data/github/UseReuseDataProvider.java",
    "status": "modified",
    "additions": 198,
    "deletions": 5,
    "changes": 203,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/UseReuseDataProvider.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/UseReuseDataProvider.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/data/github/UseReuseDataProvider.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -1,24 +1,57 @@\n package com.sap.oss.phosphor.fosstars.data.github;\n \n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_REUSE_LICENSES;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.IS_REUSE_COMPLIANT;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.README_HAS_REUSE_INFO;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.REGISTERED_IN_REUSE;\n import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.USES_REUSE;\n+import static com.sap.oss.phosphor.fosstars.model.other.Utils.setOf;\n+import static java.nio.file.LinkOption.NOFOLLOW_LINKS;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.sap.oss.phosphor.fosstars.model.Feature;\n import com.sap.oss.phosphor.fosstars.model.Value;\n+import com.sap.oss.phosphor.fosstars.model.ValueSet;\n import com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures;\n import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import com.sap.oss.phosphor.fosstars.model.value.ValueHashSet;\n+import com.sap.oss.phosphor.fosstars.util.Json;\n import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.kohsuke.github.GitHub;\n+import org.kohsuke.github.GitHubBuilder;\n \n /**\n  * The data provider gathers info about how a project uses Reuse tool.\n- * In particular, it fills out the {@link OssFeatures#USES_REUSE} feature.\n+ * It fills out the following features:\n+ * <ul>\n+ *   <li>{@link OssFeatures#USES_REUSE}</li>\n+ *   <li>{@link OssFeatures#README_HAS_REUSE_INFO}</li>\n+ *   <li>{@link OssFeatures#HAS_REUSE_LICENSES}</li>\n+ *   <li>{@link OssFeatures#REGISTERED_IN_REUSE}</li>\n+ *   <li>{@link OssFeatures#IS_REUSE_COMPLIANT}</li>\n+ * </ul>\n  */\n-public class UseReuseDataProvider extends CachedSingleFeatureGitHubDataProvider<Boolean> {\n+public class UseReuseDataProvider extends GitHubCachingDataProvider {\n \n   /**\n    * A path to a Reuse config.\n    */\n   static final String REUSE_CONFIG = \".reuse/dep5\";\n \n+  /**\n+   * A directory where Reuse stores all licenses.\n+   */\n+  static final String REUSE_LICENCES_DIRECTORY = \"LICENSES\";\n+\n   /**\n    * Initializes a data provider.\n    *\n@@ -29,13 +62,173 @@ public UseReuseDataProvider(GitHubDataFetcher fetcher) {\n   }\n \n   @Override\n-  protected Feature<Boolean> supportedFeature() {\n-    return USES_REUSE;\n+  public Set<Feature<?>> supportedFeatures() {\n+    return setOf(USES_REUSE, README_HAS_REUSE_INFO, HAS_REUSE_LICENSES, REGISTERED_IN_REUSE,\n+        IS_REUSE_COMPLIANT);\n   }\n \n   @Override\n-  protected Value<Boolean> fetchValueFor(GitHubProject project) throws IOException {\n+  protected ValueSet fetchValuesFor(GitHubProject project) throws IOException {\n     logger.info(\"Figuring out how the project uses Reuse ...\");\n+    ValueSet values = ValueHashSet.from(\n+        useReuse(project),\n+        readmeHasReuseInfo(project),\n+        hasReuseLicenses(project));\n+    values.update(reuseInfo(project));\n+    return values;\n+  }\n+\n+  /**\n+   * Check whether a project uses Reuse or not.\n+   *\n+   * @param project The project.\n+   * @return A value of {@link OssFeatures#USES_REUSE} feature.\n+   * @throws IOException If something went wrong.\n+   */\n+  static Value<Boolean> useReuse(GitHubProject project) throws IOException {\n     return USES_REUSE.value(GitHubDataFetcher.localRepositoryFor(project).hasFile(REUSE_CONFIG));\n   }\n+\n+  /**\n+   * Checks whether project's README file contains info about Reuse or not.\n+   *\n+   * @param project The project.\n+   * @return A value of {@link OssFeatures#README_HAS_REUSE_INFO} feature.\n+   * @throws IOException If something went wrong.\n+   */\n+  static Value<Boolean> readmeHasReuseInfo(GitHubProject project) throws IOException {\n+    LocalRepository repository = GitHubDataFetcher.localRepositoryFor(project);\n+\n+    Optional<String> filename = ReadmeInfo.readmeIn(repository);\n+    if (!filename.isPresent()) {\n+      return README_HAS_REUSE_INFO.value(false);\n+    }\n+\n+    Optional<String> content = repository.file(filename.get());\n+    if (!content.isPresent()) {\n+      return README_HAS_REUSE_INFO.value(false);\n+    }\n+\n+    String reuseUrl = String.format(\"https://api.reuse.software/info/github.com/%s/%s\",\n+        project.organization().name(), project.name());\n+    return README_HAS_REUSE_INFO.value(content.get().contains(reuseUrl));\n+  }\n+\n+  /**\n+   * Checks whether a project has a not-empty directory with licences or not.\n+   *\n+   * @param project The project.\n+   * @return A value of {@link OssFeatures#HAS_REUSE_LICENSES} feature.\n+   * @throws IOException If something went wrong.\n+   */\n+  static Value<Boolean> hasReuseLicenses(GitHubProject project) throws IOException {\n+    LocalRepository repository = GitHubDataFetcher.localRepositoryFor(project);\n+    Path licenseDirectory = Paths.get(REUSE_LICENCES_DIRECTORY);\n+    if (!repository.hasDirectory(licenseDirectory)) {\n+      return HAS_REUSE_LICENSES.value(false);\n+    }\n+\n+    return HAS_REUSE_LICENSES.value(\n+        !repository.files(licenseDirectory, UseReuseDataProvider::isFile).isEmpty());\n+  }\n+\n+  /**\n+   * Check if a project is registered in Reuse and its status.\n+   *\n+   * @param project The project.\n+   * @return A {@link ValueSet} with {@link OssFeatures#REGISTERED_IN_REUSE}\n+   *         and {@link OssFeatures#IS_REUSE_COMPLIANT} features.\n+   */\n+  ValueSet reuseInfo(GitHubProject project) {\n+    try (CloseableHttpClient client = httpClient()) {\n+      String url = String.format(\"https://api.reuse.software/status/github.com/%s/%s\",\n+          project.organization().name(), project.name());\n+      HttpGet request = new HttpGet(url);\n+      try (CloseableHttpResponse response = client.execute(request)) {\n+        if (response.getStatusLine().getStatusCode() != 200) {\n+          logger.warn(\"Oops! Could not fetch info from Reuse API ({})\",\n+              response.getStatusLine().getStatusCode());\n+          return ValueHashSet.from(REGISTERED_IN_REUSE.unknown(), IS_REUSE_COMPLIANT.unknown());\n+        }\n+\n+        JsonNode root = Json.mapper().readTree(response.getEntity().getContent());\n+        if (!root.has(\"status\")) {\n+          logger.warn(\"Oops! Could not get Reuse status!\");\n+          return ValueHashSet.from(REGISTERED_IN_REUSE.unknown(), IS_REUSE_COMPLIANT.unknown());\n+        }\n+\n+        String status = root.get(\"status\").asText();\n+        switch (status) {\n+          case \"unregistered\":\n+            return ValueHashSet.from(\n+                REGISTERED_IN_REUSE.value(false), IS_REUSE_COMPLIANT.value(false));\n+          case \"compliant\":\n+            return ValueHashSet.from(\n+                REGISTERED_IN_REUSE.value(true), IS_REUSE_COMPLIANT.value(true));\n+          case \"non-compliant\":\n+            return ValueHashSet.from(\n+                REGISTERED_IN_REUSE.value(true), IS_REUSE_COMPLIANT.value(false));\n+          default:\n+            logger.warn(\"Oops! Unknown REUSE status ({})\", status);\n+            return ValueHashSet.from(REGISTERED_IN_REUSE.unknown(), IS_REUSE_COMPLIANT.unknown());\n+        }\n+      }\n+    } catch (IOException e) {\n+      logger.warn(\"Oops! Could not check whether vulnerability alerts are enabled or not\", e);\n+      return ValueHashSet.from(REGISTERED_IN_REUSE.unknown(), IS_REUSE_COMPLIANT.unknown());\n+    }\n+  }\n+\n+  /**\n+   * Creates an HTTP client.\n+   *\n+   * @return A new HTTP client.\n+   */\n+  CloseableHttpClient httpClient() {\n+    return HttpClients.createDefault();\n+  }\n+\n+  /**\n+   * Checks if a path is a regular file.\n+   *\n+   * @param path The path.\n+   * @return True if the path is a regular file, false otherwise.\n+   */\n+  private static boolean isFile(Path path) {\n+    return Files.isRegularFile(path, NOFOLLOW_LINKS) && !Files.isSymbolicLink(path);\n+  }\n+\n+  /**\n+   * Command-line interface for testing.\n+   *\n+   * @param args Command-line options.\n+   * @throws Exception If something went wrong.\n+   */\n+  public static void main(String... args) throws Exception {\n+    String token = args[0];\n+    String url = args[1];\n+    GitHub github = new GitHubBuilder().withOAuthToken(token).build();\n+    GitHubDataFetcher fetcher = new GitHubDataFetcher(github, token);\n+    UseReuseDataProvider provider = new UseReuseDataProvider(fetcher);\n+    GitHubProject project = GitHubProject.parse(url);\n+    ValueSet values = provider.fetchValuesFor(project);\n+    print(values, USES_REUSE);\n+    print(values, README_HAS_REUSE_INFO);\n+    print(values, HAS_REUSE_LICENSES);\n+    print(values, REGISTERED_IN_REUSE);\n+    print(values, IS_REUSE_COMPLIANT);\n+  }\n+\n+  /**\n+   * Looks for a feature in a set of values and prints it out.\n+   *\n+   * @param values The values.\n+   * @param feature The feature.\n+   */\n+  private static void print(ValueSet values, Feature<Boolean> feature) {\n+    String string;\n+    Optional<Value<Boolean>> something = values.of(feature);\n+    System.out.printf(\"%s: %s%n\",\n+        feature.name(), something.map(Value::toString).orElse(\"not found\"));\n+  }\n }"
  },
  {
    "sha": "8cc5cfa1ccc8d9b9637da8077fa51fc7a1ff522e",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/data/github/VulnerabilityAlertsInfo.java",
    "status": "added",
    "additions": 155,
    "deletions": 0,
    "changes": 155,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/VulnerabilityAlertsInfo.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/data/github/VulnerabilityAlertsInfo.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/data/github/VulnerabilityAlertsInfo.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,155 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.ENABLED_VULNERABILITY_ALERTS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_UNRESOLVED_VULNERABILITY_ALERTS;\n+import static com.sap.oss.phosphor.fosstars.model.other.Utils.setOf;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sap.oss.phosphor.fosstars.model.Feature;\n+import com.sap.oss.phosphor.fosstars.model.Value;\n+import com.sap.oss.phosphor.fosstars.model.ValueSet;\n+import com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import com.sap.oss.phosphor.fosstars.model.value.ValueHashSet;\n+import com.sap.oss.phosphor.fosstars.util.Json;\n+import java.io.IOException;\n+import java.util.Set;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.kohsuke.github.GitHub;\n+import org.kohsuke.github.GitHubBuilder;\n+\n+/**\n+ * This data provider gather info about vulnerability alerts in a project.\n+ * The provider fills out the following features:\n+ * <ul>\n+ *   <li>{@link OssFeatures#ENABLED_VULNERABILITY_ALERTS_ON_GITHUB}</li>\n+ *   <li>{@link OssFeatures#HAS_UNRESOLVED_VULNERABILITY_ALERTS}</li>\n+ * </ul>\n+ */\n+public class VulnerabilityAlertsInfo extends GitHubCachingDataProvider {\n+\n+  /**\n+   * A template for GraphQL query for getting a number of unresolved vulnerability alerts\n+   * in a project.\n+   */\n+  private static final String VULNERABILITY_ALERT_TOTAL_COUNT_QUERY_TEMPLATE\n+      = \"query { \"\n+      + \"repository (owner: \\\\\\\"%s\\\\\\\", name: \\\\\\\"%s\\\\\\\") { vulnerabilityAlerts { totalCount } } }\";\n+\n+  /**\n+   * Initializes a data provider.\n+   *\n+   * @param fetcher An interface to GitHub.\n+   */\n+  public VulnerabilityAlertsInfo(GitHubDataFetcher fetcher) {\n+    super(fetcher);\n+  }\n+\n+  @Override\n+  public Set<Feature<?>> supportedFeatures() {\n+    return setOf(ENABLED_VULNERABILITY_ALERTS_ON_GITHUB, HAS_UNRESOLVED_VULNERABILITY_ALERTS);\n+  }\n+\n+  @Override\n+  protected ValueSet fetchValuesFor(GitHubProject project) {\n+    logger.info(\"Gathering info about vulnerability alerts ...\");\n+    return ValueHashSet.from(\n+        enabledVulnerabilityAlerts(project),\n+        hasUnresolvedVulnerabilityAlerts(project));\n+  }\n+\n+  /**\n+   * Check if vulnerability alerts are enabled for a project.\n+   *\n+   * @param project The project.\n+   * @return A value of {@link OssFeatures#ENABLED_VULNERABILITY_ALERTS_ON_GITHUB}.\n+   * @see <a href=\"https://docs.github.com/en/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository\">Check if vulnerability alerts are enabled for a repository</a>\n+   */\n+  private Value<Boolean> enabledVulnerabilityAlerts(GitHubProject project) {\n+    try (CloseableHttpClient client = httpClient()) {\n+      String url = String.format(\"https://api.github.com/repos/%s/%s/vulnerability-alerts\",\n+          project.organization().name(), project.name());\n+      HttpGet request = new HttpGet(url);\n+      request.addHeader(HttpHeaders.ACCEPT, \"application/vnd.github.dorian-preview+json\");\n+      request.addHeader(HttpHeaders.AUTHORIZATION, String.format(\"Bearer %s\", fetcher.token()));\n+      try (CloseableHttpResponse response = client.execute(request)) {\n+        return ENABLED_VULNERABILITY_ALERTS_ON_GITHUB.value(\n+            response.getStatusLine().getStatusCode() == 204);\n+      }\n+    } catch (IOException e) {\n+      logger.warn(\"Oops! Could not check whether vulnerability alerts are enabled or not\", e);\n+    }\n+\n+    return ENABLED_VULNERABILITY_ALERTS_ON_GITHUB.unknown();\n+  }\n+\n+  /**\n+   * Check whether a project has unresolved vulnerability alerts or not.\n+   *\n+   * @param project The project.\n+   * @return A value of {@link OssFeatures#HAS_UNRESOLVED_VULNERABILITY_ALERTS}.\n+   */\n+  private Value<Boolean> hasUnresolvedVulnerabilityAlerts(GitHubProject project) {\n+    try (CloseableHttpClient client = httpClient()) {\n+      HttpPost request = new HttpPost(\"https://api.github.com/graphql\");\n+      request.addHeader(HttpHeaders.ACCEPT, ContentType.APPLICATION_JSON.getMimeType());\n+      request.addHeader(HttpHeaders.AUTHORIZATION, String.format(\"bearer %s\", fetcher.token()));\n+      String query = String.format(VULNERABILITY_ALERT_TOTAL_COUNT_QUERY_TEMPLATE,\n+          project.organization().name(), project.name());\n+      String body = String.format(\"{ \\\"query\\\": \\\"%s\\\" }\", query);\n+      request.setEntity(new StringEntity(body));\n+      try (CloseableHttpResponse response = client.execute(request)) {\n+        if (response.getStatusLine().getStatusCode() != 200) {\n+          return HAS_UNRESOLVED_VULNERABILITY_ALERTS.unknown();\n+        }\n+\n+        JsonNode root = Json.mapper().readTree(response.getEntity().getContent());\n+        JsonNode node = root.at(\"/data/repository/vulnerabilityAlerts/totalCount\");\n+        if (!node.canConvertToInt()) {\n+          return HAS_UNRESOLVED_VULNERABILITY_ALERTS.unknown();\n+        }\n+\n+        return HAS_UNRESOLVED_VULNERABILITY_ALERTS.value(node.asInt() > 0);\n+      }\n+    } catch (IOException e) {\n+      logger.warn(\"Oops! Could not check whether the project has vulnerability alerts or not\", e);\n+    }\n+\n+    return HAS_UNRESOLVED_VULNERABILITY_ALERTS.unknown();\n+  }\n+\n+  /**\n+   * Creates an HTTP client.\n+   *\n+   * @return A new HTTP client.\n+   */\n+  CloseableHttpClient httpClient() {\n+    return HttpClients.createDefault();\n+  }\n+\n+  /**\n+   * Command-line interface for testing.\n+   *\n+   * @param args Command-line options.\n+   * @throws Exception If something went wrong.\n+   */\n+  public static void main(String... args) throws Exception {\n+    String token = args[0];\n+    String url = args[1];\n+    GitHub github = new GitHubBuilder().withOAuthToken(token).build();\n+    GitHubDataFetcher fetcher = new GitHubDataFetcher(github, token);\n+    VulnerabilityAlertsInfo provider = new VulnerabilityAlertsInfo(fetcher);\n+    GitHubProject project = GitHubProject.parse(url);\n+    ValueSet values = provider.fetchValuesFor(project);\n+    System.out.println(values.of(ENABLED_VULNERABILITY_ALERTS_ON_GITHUB));\n+    System.out.println(values.of(HAS_UNRESOLVED_VULNERABILITY_ALERTS));\n+  }\n+\n+}"
  },
  {
    "sha": "6569b50c629e2ccf6bd63bca91000a37da16dc89",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/model/feature/oss/OssFeatures.java",
    "status": "modified",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/model/feature/oss/OssFeatures.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/model/feature/oss/OssFeatures.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/model/feature/oss/OssFeatures.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -295,4 +295,110 @@ private OssFeatures() {\n    */\n   public static final BooleanFeature USES_REUSE\n       = new BooleanFeature(\"If a project uses Reuse tool\");\n+\n+  /**\n+   * Shows whether a project has info about Reuse in its README file or not.\n+   */\n+  public static final BooleanFeature README_HAS_REUSE_INFO\n+      = new BooleanFeature(\"If project's README has info about Reuse\");\n+\n+  /**\n+   * Shows whether a project has a LICENSES folder with licenses or not.\n+   */\n+  public static final BooleanFeature HAS_REUSE_LICENSES\n+      = new BooleanFeature(\"If a project has a LICENSES folder with licenses\");\n+\n+  /**\n+   * Shows whether a project is registered in Reuse or not.\n+   *\n+   * @see <a href=\"https://api.reuse.software/register\">Register a project in Reuse</a>\n+   */\n+  public static final BooleanFeature REGISTERED_IN_REUSE\n+      = new BooleanFeature(\"If a project is registered in Reuse\");\n+\n+  /**\n+   * Shows whether a project is compliant with Reuse rules or not.\n+   */\n+  public static final BooleanFeature IS_REUSE_COMPLIANT\n+      = new BooleanFeature(\"If a project is compliant with Reuse rules\");\n+\n+  /**\n+   * Shows whether an open source project has a licence or not.\n+   */\n+  public static final BooleanFeature HAS_LICENSE\n+      = new BooleanFeature(\"If a project has a license\");\n+\n+  /**\n+   * Shows whether an open source project has an allowed licence or not.\n+   */\n+  public static final BooleanFeature ALLOWED_LICENSE\n+      = new BooleanFeature(\"If a project uses an allowed license\");\n+\n+  /**\n+   * Shows whether a licence has disallowed text or not.\n+   */\n+  public static final BooleanFeature LICENSE_HAS_DISALLOWED_CONTENT\n+      = new BooleanFeature(\"If a license has disallowed text\");\n+\n+  /**\n+   * Shows whether an open source project has a README file or not.\n+   */\n+  public static final BooleanFeature HAS_README\n+      = new BooleanFeature(\"If a project has a README file\");\n+\n+  /**\n+   * Shows whether an open source project has a contributing guideline or not.\n+   */\n+  public static final BooleanFeature HAS_CONTRIBUTING_GUIDELINE\n+      = new BooleanFeature(\"If a project has a contributing guideline\");\n+\n+  /**\n+   * Shows whether a project's contributing guideline has required text or not.\n+   */\n+  public static final BooleanFeature HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE\n+      = new BooleanFeature(\"If a project's contributing guideline has required text\");\n+\n+  /**\n+   * Shows whether a project has enough teams on GitHub or not.\n+   */\n+  public static final BooleanFeature HAS_ENOUGH_TEAMS_ON_GITHUB\n+      = new BooleanFeature(\"If a project has enough teams on GitHub\");\n+\n+  /**\n+   * Shows whether a project has an admin team on GitHub or not.\n+   */\n+  public static final BooleanFeature HAS_ADMIN_TEAM_ON_GITHUB\n+      = new BooleanFeature(\"If a project has an admin team on GitHub\");\n+\n+  /**\n+   * Shows whether a project has enough admins on GitHub or not.\n+   */\n+  public static final BooleanFeature HAS_ENOUGH_ADMINS_ON_GITHUB\n+      = new BooleanFeature(\"If a project has enough admins on GitHub\");\n+\n+  /**\n+   * Shows whether a project has a team with push privileges on GitHub.\n+   */\n+  public static final BooleanFeature HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB\n+      = new BooleanFeature(\"If a project has a team with push privileges\");\n+\n+  /**\n+   * Shows whether a project has enough team members on GitHub.\n+   */\n+  public static final BooleanFeature HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB\n+      = new BooleanFeature(\"If a project has tool less members on GitHub\");\n+\n+  /**\n+   * Shows whether vulnerability alerts are enabled for a project on GitHub.\n+   *\n+   * @see <a href=\"https://docs.github.com/en/github/managing-security-vulnerabilities/about-alerts-for-vulnerable-dependencies\">About alerts for vulnerable dependencies</a>\n+   */\n+  public static final BooleanFeature ENABLED_VULNERABILITY_ALERTS_ON_GITHUB\n+      = new BooleanFeature(\"If vulnerability alerts are enabled for a project on GitHub\");\n+\n+  /**\n+   * Shows whether a project has unresolved vulnerability alerts or not.\n+   */\n+  public static final BooleanFeature HAS_UNRESOLVED_VULNERABILITY_ALERTS\n+      = new BooleanFeature(\"If a project has unresolved vulnerability alerts\");\n }\n\\ No newline at end of file"
  },
  {
    "sha": "6fa2d1a807794cf6e3e2f203c880c9ed9d15971c",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/model/score/oss/OssRulesOfPlayScore.java",
    "status": "modified",
    "additions": 39,
    "deletions": 6,
    "changes": 45,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/model/score/oss/OssRulesOfPlayScore.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/model/score/oss/OssRulesOfPlayScore.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/model/score/oss/OssRulesOfPlayScore.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -1,8 +1,23 @@\n package com.sap.oss.phosphor.fosstars.model.score.oss;\n \n-import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_OPEN_PULL_REQUEST_FROM_DEPENDABOT;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.ALLOWED_LICENSE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.ENABLED_VULNERABILITY_ALERTS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ADMIN_TEAM_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_CONTRIBUTING_GUIDELINE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ENOUGH_ADMINS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ENOUGH_TEAMS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_LICENSE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_README;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_REUSE_LICENSES;\n import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_SECURITY_POLICY;\n-import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.USES_REUSE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_UNRESOLVED_VULNERABILITY_ALERTS;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.IS_REUSE_COMPLIANT;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.LICENSE_HAS_DISALLOWED_CONTENT;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.README_HAS_REUSE_INFO;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.REGISTERED_IN_REUSE;\n import static com.sap.oss.phosphor.fosstars.model.other.Utils.setOf;\n \n import com.sap.oss.phosphor.fosstars.model.Feature;\n@@ -27,14 +42,32 @@\n   /**\n    * A list of features that are expected to be true.\n    */\n-  public static final Set<Feature<Boolean>> EXPECTED_TRUE\n-      = Collections.unmodifiableSet(setOf(USES_REUSE, HAS_SECURITY_POLICY));\n+  public static final Set<Feature<Boolean>> EXPECTED_TRUE = Collections.unmodifiableSet(setOf(\n+      HAS_LICENSE,\n+      ALLOWED_LICENSE,\n+      HAS_README,\n+      HAS_CONTRIBUTING_GUIDELINE,\n+      HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE,\n+      HAS_ENOUGH_TEAMS_ON_GITHUB,\n+      HAS_ADMIN_TEAM_ON_GITHUB,\n+      HAS_ENOUGH_ADMINS_ON_GITHUB,\n+      HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB,\n+      HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB,\n+      ENABLED_VULNERABILITY_ALERTS_ON_GITHUB,\n+      HAS_SECURITY_POLICY,\n+      README_HAS_REUSE_INFO,\n+      HAS_REUSE_LICENSES,\n+      REGISTERED_IN_REUSE,\n+      IS_REUSE_COMPLIANT\n+  ));\n \n   /**\n    * A list of features that are expected to be false.\n    */\n-  public static final Set<Feature<Boolean>> EXPECTED_FALSE\n-      = Collections.singleton(HAS_OPEN_PULL_REQUEST_FROM_DEPENDABOT);\n+  public static final Set<Feature<Boolean>> EXPECTED_FALSE = Collections.unmodifiableSet(setOf(\n+      LICENSE_HAS_DISALLOWED_CONTENT,\n+      HAS_UNRESOLVED_VULNERABILITY_ALERTS\n+  ));\n \n   /**\n    * Initializes a new score."
  },
  {
    "sha": "b64b1928d58dbe866771d0f95ba28db79efc7248",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/tool/github/Application.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/tool/github/Application.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/tool/github/Application.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/tool/github/Application.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -263,9 +263,9 @@ public static void main(String... args) {\n     UserCallback callback = commandLine.hasOption(\"interactive\")\n         ? new Terminal() : NoUserCallback.INSTANCE;\n \n-    String githubToken = commandLine.getOptionValue(\"token\");\n+    String githubToken = commandLine.getOptionValue(\"token\", \"\");\n \n-    fetcher = new GitHubDataFetcher(connectToGithub(githubToken, callback));\n+    fetcher = new GitHubDataFetcher(connectToGithub(githubToken, callback), githubToken);\n     List<DataProvider<GitHubProject>> providers\n         = new DataProviderSelector(fetcher, new NVD()).providersFor(rating);\n "
  },
  {
    "sha": "f133127045d9f037808691c1923423f1fa8557ab",
    "filename": "src/main/java/com/sap/oss/phosphor/fosstars/tool/github/DataProviderSelector.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/tool/github/DataProviderSelector.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/main/java/com/sap/oss/phosphor/fosstars/tool/github/DataProviderSelector.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/main/java/com/sap/oss/phosphor/fosstars/tool/github/DataProviderSelector.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -2,6 +2,7 @@\n \n import com.sap.oss.phosphor.fosstars.data.DataProvider;\n import com.sap.oss.phosphor.fosstars.data.github.CodeqlDataProvider;\n+import com.sap.oss.phosphor.fosstars.data.github.ContributingGuidelineInfo;\n import com.sap.oss.phosphor.fosstars.data.github.FuzzedInOssFuzz;\n import com.sap.oss.phosphor.fosstars.data.github.GitHubDataFetcher;\n import com.sap.oss.phosphor.fosstars.data.github.HasBugBountyProgram;\n@@ -12,14 +13,17 @@\n import com.sap.oss.phosphor.fosstars.data.github.IsApache;\n import com.sap.oss.phosphor.fosstars.data.github.IsEclipse;\n import com.sap.oss.phosphor.fosstars.data.github.LgtmDataProvider;\n+import com.sap.oss.phosphor.fosstars.data.github.LicenseInfo;\n import com.sap.oss.phosphor.fosstars.data.github.NumberOfCommits;\n import com.sap.oss.phosphor.fosstars.data.github.NumberOfContributors;\n import com.sap.oss.phosphor.fosstars.data.github.NumberOfStars;\n import com.sap.oss.phosphor.fosstars.data.github.NumberOfWatchers;\n import com.sap.oss.phosphor.fosstars.data.github.OwaspSecurityLibraries;\n import com.sap.oss.phosphor.fosstars.data.github.PackageManagement;\n import com.sap.oss.phosphor.fosstars.data.github.ProgrammingLanguages;\n+import com.sap.oss.phosphor.fosstars.data.github.ReadmeInfo;\n import com.sap.oss.phosphor.fosstars.data.github.SignsJarArtifacts;\n+import com.sap.oss.phosphor.fosstars.data.github.TeamsInfo;\n import com.sap.oss.phosphor.fosstars.data.github.UseReuseDataProvider;\n import com.sap.oss.phosphor.fosstars.data.github.UsesDependabot;\n import com.sap.oss.phosphor.fosstars.data.github.UsesFindSecBugs;\n@@ -28,6 +32,7 @@\n import com.sap.oss.phosphor.fosstars.data.github.UsesOwaspDependencyCheck;\n import com.sap.oss.phosphor.fosstars.data.github.UsesSanitizers;\n import com.sap.oss.phosphor.fosstars.data.github.UsesSignedCommits;\n+import com.sap.oss.phosphor.fosstars.data.github.VulnerabilityAlertsInfo;\n import com.sap.oss.phosphor.fosstars.data.interactive.AskAboutSecurityTeam;\n import com.sap.oss.phosphor.fosstars.data.interactive.AskAboutUnpatchedVulnerabilities;\n import com.sap.oss.phosphor.fosstars.model.Feature;\n@@ -88,6 +93,11 @@\n         new SignsJarArtifacts(fetcher),\n         new OwaspSecurityLibraries(fetcher),\n         new UseReuseDataProvider(fetcher),\n+        new LicenseInfo(fetcher),\n+        new ReadmeInfo(fetcher),\n+        new TeamsInfo(fetcher),\n+        new ContributingGuidelineInfo(fetcher),\n+        new VulnerabilityAlertsInfo(fetcher),\n \n         // currently interactive data provider have to be added to the end, see issue #133\n         new AskAboutSecurityTeam<>(),"
  },
  {
    "sha": "6b159a0c2f6be96b25f647a9c103559a15b13189",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/data/github/CodeqlDataProviderTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/CodeqlDataProviderTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/CodeqlDataProviderTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/data/github/CodeqlDataProviderTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -90,7 +90,7 @@ private void testCodeqlRuns(String filename, InputStream content, Value<?>... ex\n \n     Path file = repositoryDirectory.resolve(filename);\n     Files.createDirectories(file.getParent());\n-    when(localRepository.hasDirectory(any())).thenReturn(true);\n+    when(localRepository.hasDirectory(any(Path.class))).thenReturn(true);\n     IOUtils.copy(content, Files.newOutputStream(file));\n     when(localRepository.files(any(), any())).thenReturn(Collections.singletonList(file));\n "
  },
  {
    "sha": "7f2661d034c89997b37211db661a67e903960ab8",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/data/github/ContributingGuidelineInfoTest.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/ContributingGuidelineInfoTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/ContributingGuidelineInfoTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/data/github/ContributingGuidelineInfoTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,77 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_CONTRIBUTING_GUIDELINE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.sap.oss.phosphor.fosstars.model.Feature;\n+import com.sap.oss.phosphor.fosstars.model.Value;\n+import com.sap.oss.phosphor.fosstars.model.ValueSet;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import org.junit.Test;\n+\n+public class ContributingGuidelineInfoTest extends TestGitHubDataFetcherHolder {\n+\n+  @Test\n+  public void testSupportedFeatures() {\n+    ContributingGuidelineInfo provider = new ContributingGuidelineInfo(fetcher);\n+    assertTrue(provider.supportedFeatures().contains(HAS_CONTRIBUTING_GUIDELINE));\n+    assertTrue(provider.supportedFeatures().contains(HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE));\n+  }\n+\n+  @Test\n+  public void testProjectWithContributingGuideline() throws IOException {\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    LocalRepository localRepository = mock(LocalRepository.class);\n+    when(localRepository.readLinesOf(\"CONTRIBUTING.md\"))\n+        .thenReturn(Optional.of(Arrays.asList(\n+            \"Here is how to contribute to the project.\", \"This is the text.\", \"Extra text\")));\n+    TestGitHubDataFetcher.addForTesting(project, localRepository);\n+\n+    ContributingGuidelineInfo provider = new ContributingGuidelineInfo(fetcher);\n+\n+    provider.requiredContentPatterns(\"Extra text\");\n+    ValueSet values = provider.fetchValuesFor(project);\n+    checkValue(values, HAS_CONTRIBUTING_GUIDELINE, true);\n+    checkValue(values, HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE, true);\n+\n+    when(localRepository.readLinesOf(\"HOW_TO_CONTRIBUTE.md\"))\n+        .thenReturn(Optional.of(Arrays.asList(\n+            \"Here is how to contribute to the project.\", \"This is the text.\")));\n+\n+    provider.knownContributingGuidelineFiles(\"HOW_TO_CONTRIBUTE.md\");\n+    provider.requiredContentPatterns(\"Extra text.\");\n+    values = provider.fetchValuesFor(project);\n+    checkValue(values, HAS_CONTRIBUTING_GUIDELINE, true);\n+    checkValue(values, HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE, false);\n+  }\n+\n+  @Test\n+  public void testProjectWithoutContributingGuideline() throws IOException {\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    LocalRepository localRepository = mock(LocalRepository.class);\n+    when(localRepository.readLinesOf(anyString())).thenReturn(Optional.empty());\n+    TestGitHubDataFetcher.addForTesting(project, localRepository);\n+\n+    ContributingGuidelineInfo provider = new ContributingGuidelineInfo(fetcher);\n+\n+    ValueSet values = provider.fetchValuesFor(project);\n+    checkValue(values, HAS_CONTRIBUTING_GUIDELINE, false);\n+    checkValue(values, HAS_REQUIRED_TEXT_IN_CONTRIBUTING_GUIDELINE, false);\n+  }\n+\n+  private static void checkValue(ValueSet values, Feature<Boolean> feature, boolean expected) {\n+    Optional<Value<Boolean>> something = values.of(feature);\n+    assertTrue(something.isPresent());\n+    Value<Boolean> value = something.get();\n+    assertEquals(expected, value.get());\n+  }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ea1b6c39d331bc237e840c03bc2ec33df253e47f",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/data/github/GitHubDataFetcherTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/GitHubDataFetcherTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/GitHubDataFetcherTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/data/github/GitHubDataFetcherTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -102,12 +102,12 @@ public void testShouldUpdate() throws IOException {\n   @Test\n   public void testUpdateGithubInstance() throws IOException {\n     GitHub github = mock(GitHub.class);\n-    GitHubDataFetcher fetcher = new GitHubDataFetcher(github);\n+    GitHubDataFetcher fetcher = new GitHubDataFetcher(github, \"test token\");\n     assertEquals(fetcher.github(), github);\n \n     // create the second GitHub mock bean\n     GitHub anotherGithub = mock(GitHub.class);\n-    fetcher = new GitHubDataFetcher(anotherGithub);\n+    fetcher = new GitHubDataFetcher(anotherGithub, \"test token\");\n     assertEquals(fetcher.github(), anotherGithub);\n   }\n "
  },
  {
    "sha": "a783aebbb2b7beb0b696acb1f5a15ca5ea709fd2",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/data/github/LicenseInfoTest.java",
    "status": "added",
    "additions": 135,
    "deletions": 0,
    "changes": 135,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/LicenseInfoTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/LicenseInfoTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/data/github/LicenseInfoTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,135 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.ALLOWED_LICENSE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_LICENSE;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.LICENSE_HAS_DISALLOWED_CONTENT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.sap.oss.phosphor.fosstars.model.Feature;\n+import com.sap.oss.phosphor.fosstars.model.Value;\n+import com.sap.oss.phosphor.fosstars.model.ValueSet;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Optional;\n+import org.junit.Test;\n+\n+public class LicenseInfoTest extends TestGitHubDataFetcherHolder {\n+\n+  @Test\n+  public void testIsWrong() {\n+    LicenseInfo provider = new LicenseInfo(fetcher);\n+    provider.disallowedLicenseContentPatterns(\"stop word\", \"wrong\");\n+    assertTrue(provider.isWrong(\"This is a stop word.\"));\n+    assertTrue(provider.isWrong(\"Wrong content\"));\n+    assertFalse(provider.isWrong(\"This is okay\"));\n+    assertFalse(provider.isWrong(\"\"));\n+  }\n+\n+  @Test\n+  public void testHeaderOf() {\n+    assertEquals(\n+        \"This is a header\",\n+        LicenseInfo.headerOf(Collections.singletonList(\"This is a header\")));\n+    assertEquals(\n+        \"This is a header\",\n+        LicenseInfo.headerOf(Arrays.asList(\"  \", \"This is a header\", \"This is not a header\")));\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testHeaderOfWithNoHeader() {\n+    LicenseInfo.headerOf(Collections.singletonList(\"   \"));\n+  }\n+\n+  @Test\n+  public void testInfoAboutLicense() {\n+    LicenseInfo provider = new LicenseInfo(fetcher);\n+    provider.allowedLicenseHeaders(\"Apache License\");\n+    provider.disallowedLicenseContentPatterns(\"Don't trouble trouble till trouble troubles you\");\n+\n+    ValueSet values = provider.infoAboutLicense(\n+        Arrays.asList(\"\", \"Apache License\", \"\", \"Here should be the text.\", \"\"));\n+    checkValue(values, ALLOWED_LICENSE, true);\n+    checkValue(values, LICENSE_HAS_DISALLOWED_CONTENT, false);\n+\n+    values = provider.infoAboutLicense(\n+        Arrays.asList(\"\", \"MIT License\", \"\", \"Here should be the text.\", \"\"));\n+    checkValue(values, ALLOWED_LICENSE, false);\n+    checkValue(values, LICENSE_HAS_DISALLOWED_CONTENT, false);\n+\n+    values = provider.infoAboutLicense(\n+        Arrays.asList(\"\", \"MIT License\", \"\", \"Here should be the text.\",\n+            \"Don't trouble trouble till trouble troubles you\", \"\"));\n+    checkValue(values, ALLOWED_LICENSE, false);\n+    checkValue(values, LICENSE_HAS_DISALLOWED_CONTENT, true);\n+  }\n+\n+  private static void checkValue(ValueSet values, Feature<Boolean> feature, boolean expected) {\n+    Optional<Value<Boolean>> something = values.of(feature);\n+    assertTrue(something.isPresent());\n+    Value<Boolean> value = something.get();\n+    assertEquals(expected, value.get());\n+  }\n+\n+  @Test\n+  public void testSupportedFeatures() {\n+    LicenseInfo provider = new LicenseInfo(fetcher);\n+    assertTrue(provider.supportedFeatures().contains(HAS_LICENSE));\n+    assertTrue(provider.supportedFeatures().contains(ALLOWED_LICENSE));\n+    assertTrue(provider.supportedFeatures().contains(LICENSE_HAS_DISALLOWED_CONTENT));\n+  }\n+\n+  @Test\n+  public void testProjectWithLicense() throws IOException {\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    LocalRepository localRepository = mock(LocalRepository.class);\n+    when(localRepository.readLinesOf(\"LICENSE\"))\n+        .thenReturn(Optional.of(\n+            Arrays.asList(\"\", \"Apache License\", \"\", \"This is the text.\", \"Extra text\")));\n+    TestGitHubDataFetcher.addForTesting(project, localRepository);\n+\n+    LicenseInfo provider = new LicenseInfo(fetcher);\n+\n+    provider.allowedLicenseHeaders(\"Apache License\");\n+    provider.disallowedLicenseContentPatterns(\"Don't trouble trouble till trouble troubles you\");\n+    ValueSet values = provider.fetchValuesFor(project);\n+    checkValue(values, HAS_LICENSE, true);\n+    checkValue(values, ALLOWED_LICENSE, true);\n+    checkValue(values, LICENSE_HAS_DISALLOWED_CONTENT, false);\n+\n+    provider.allowedLicenseHeaders(\"MIT License\");\n+    provider.disallowedLicenseContentPatterns(\"Extra text\");\n+    values = provider.fetchValuesFor(project);\n+    checkValue(values, HAS_LICENSE, true);\n+    checkValue(values, ALLOWED_LICENSE, false);\n+    checkValue(values, LICENSE_HAS_DISALLOWED_CONTENT, true);\n+  }\n+\n+  @Test\n+  public void testProjectWithoutLicense() throws IOException {\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    LocalRepository localRepository = mock(LocalRepository.class);\n+    when(localRepository.readLinesOf(Paths.get(\"LICENSE\"))).thenReturn(Optional.empty());\n+    TestGitHubDataFetcher.addForTesting(project, localRepository);\n+\n+    LicenseInfo provider = new LicenseInfo(fetcher);\n+\n+    provider.knownLicenseFiles(\"LICENSE\");\n+    provider.allowedLicenseHeaders(\"Apache License\");\n+    provider.disallowedLicenseContentPatterns(\"Don't trouble trouble till trouble troubles you\");\n+    ValueSet values = provider.fetchValuesFor(project);\n+    checkValue(values, HAS_LICENSE, false);\n+    Optional<Value<Boolean>> something = values.of(ALLOWED_LICENSE);\n+    assertTrue(something.isPresent());\n+    assertTrue(something.get().isUnknown());\n+    something = values.of(LICENSE_HAS_DISALLOWED_CONTENT);\n+    assertTrue(something.isPresent());\n+    assertTrue(something.get().isUnknown());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f5db51c27cdf98e27d7c53c91e84d289216acc53",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/data/github/ReadmeInfoTest.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/ReadmeInfoTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/ReadmeInfoTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/data/github/ReadmeInfoTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,50 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_README;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.sap.oss.phosphor.fosstars.model.Value;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import java.io.IOException;\n+import org.junit.Test;\n+\n+public class ReadmeInfoTest extends TestGitHubDataFetcherHolder {\n+\n+  @Test\n+  public void testSupportedFeature() {\n+    assertEquals(HAS_README, new ReadmeInfo(fetcher).supportedFeature());\n+  }\n+\n+  @Test\n+  public void testWithReadme() throws IOException {\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    LocalRepository localRepository = mock(LocalRepository.class);\n+    when(localRepository.hasFile(\"README\")).thenReturn(true);\n+    TestGitHubDataFetcher.addForTesting(project, localRepository);\n+\n+    ReadmeInfo provider = new ReadmeInfo(fetcher);\n+    Value<Boolean> value = provider.fetchValueFor(project);\n+    assertEquals(HAS_README, value.feature());\n+    assertFalse(value.isUnknown());\n+    assertTrue(value.get());\n+  }\n+\n+  @Test\n+  public void testWithoutReadme() throws IOException {\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    LocalRepository localRepository = mock(LocalRepository.class);\n+    when(localRepository.hasFile(any())).thenReturn(false);\n+    TestGitHubDataFetcher.addForTesting(project, localRepository);\n+\n+    ReadmeInfo provider = new ReadmeInfo(fetcher);\n+    Value<Boolean> value = provider.fetchValueFor(project);\n+    assertEquals(HAS_README, value.feature());\n+    assertFalse(value.isUnknown());\n+    assertFalse(value.get());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4a3537dc59a929078c26cbcc0b3178997ec5fc0c",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/data/github/TeamsInfoTest.java",
    "status": "added",
    "additions": 151,
    "deletions": 0,
    "changes": 151,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/TeamsInfoTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/TeamsInfoTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/data/github/TeamsInfoTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,151 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ADMIN_TEAM_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ENOUGH_ADMINS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ENOUGH_TEAMS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.sap.oss.phosphor.fosstars.model.Feature;\n+import com.sap.oss.phosphor.fosstars.model.Value;\n+import com.sap.oss.phosphor.fosstars.model.ValueSet;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.junit.Test;\n+import org.kohsuke.github.GHRepository;\n+import org.kohsuke.github.GHTeam;\n+import org.kohsuke.github.GHUser;\n+\n+public class TeamsInfoTest extends TestGitHubDataFetcherHolder {\n+\n+  @Test\n+  public void testSupportedFeatures() {\n+    TeamsInfo provider = new TeamsInfo(fetcher);\n+    assertTrue(provider.supportedFeatures().contains(HAS_ENOUGH_TEAMS_ON_GITHUB));\n+    assertTrue(provider.supportedFeatures().contains(HAS_ADMIN_TEAM_ON_GITHUB));\n+    assertTrue(provider.supportedFeatures().contains(HAS_ENOUGH_ADMINS_ON_GITHUB));\n+    assertTrue(provider.supportedFeatures().contains(HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB));\n+    assertTrue(provider.supportedFeatures().contains(HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB));\n+  }\n+\n+  @Test\n+  public void testWithPerfectProject() throws IOException {\n+    Set<GHUser> admins = new HashSet<>();\n+    admins.add(mock(GHUser.class));\n+    admins.add(mock(GHUser.class));\n+\n+    Set<GHUser> maintainers = new HashSet<>();\n+    maintainers.add(mock(GHUser.class));\n+    maintainers.add(mock(GHUser.class));\n+\n+    GHTeam adminTeam = mock(GHTeam.class);\n+    when(adminTeam.getMembers()).thenReturn(admins);\n+    when(adminTeam.getPermission()).thenReturn(\"admin\");\n+\n+    GHTeam otherTeam = mock(GHTeam.class);\n+    when(otherTeam.getMembers()).thenReturn(maintainers);\n+    when(otherTeam.getPermission()).thenReturn(\"push\");\n+\n+    Set<GHTeam> teams = new HashSet<>();\n+    teams.add(adminTeam);\n+    teams.add(otherTeam);\n+\n+    GHRepository repository = mock(GHRepository.class);\n+    when(repository.getTeams()).thenReturn(teams);\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    fetcher.addForTesting(project, repository);\n+\n+    TeamsInfo provider = new TeamsInfo(fetcher);\n+    ValueSet values = provider.fetchValuesFor(project);\n+    checkValue(values, HAS_ENOUGH_TEAMS_ON_GITHUB, true);\n+    checkValue(values, HAS_ADMIN_TEAM_ON_GITHUB, true);\n+    checkValue(values, HAS_ENOUGH_ADMINS_ON_GITHUB, true);\n+    checkValue(values, HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB, true);\n+    checkValue(values, HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB, true);\n+  }\n+\n+  @Test\n+  public void testWithHigherRequirements() throws IOException {\n+    Set<GHUser> admins = new HashSet<>();\n+    admins.add(mock(GHUser.class));\n+    admins.add(mock(GHUser.class));\n+\n+    Set<GHUser> maintainers = new HashSet<>();\n+    maintainers.add(mock(GHUser.class));\n+    maintainers.add(mock(GHUser.class));\n+\n+    GHTeam adminTeam = mock(GHTeam.class);\n+    when(adminTeam.getMembers()).thenReturn(admins);\n+    when(adminTeam.getPermission()).thenReturn(\"admin\");\n+\n+    GHTeam otherTeam = mock(GHTeam.class);\n+    when(otherTeam.getMembers()).thenReturn(maintainers);\n+    when(otherTeam.getPermission()).thenReturn(\"push\");\n+\n+    Set<GHTeam> teams = new HashSet<>();\n+    teams.add(adminTeam);\n+    teams.add(otherTeam);\n+\n+    GHRepository repository = mock(GHRepository.class);\n+    when(repository.getTeams()).thenReturn(teams);\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    fetcher.addForTesting(project, repository);\n+\n+    TeamsInfo provider = new TeamsInfo(fetcher);\n+    provider.minTeams(3);\n+    provider.minAdmins(3);\n+    provider.minMembers(3);\n+\n+    ValueSet values = provider.fetchValuesFor(project);\n+    checkValue(values, HAS_ENOUGH_TEAMS_ON_GITHUB, false);\n+    checkValue(values, HAS_ADMIN_TEAM_ON_GITHUB, true);\n+    checkValue(values, HAS_ENOUGH_ADMINS_ON_GITHUB, false);\n+    checkValue(values, HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB, true);\n+    checkValue(values, HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB, false);\n+  }\n+\n+  @Test\n+  public void testWithBadProject() throws IOException {\n+    Set<GHUser> maintainers = new HashSet<>();\n+    maintainers.add(mock(GHUser.class));\n+    maintainers.add(mock(GHUser.class));\n+\n+    GHTeam otherTeam = mock(GHTeam.class);\n+    when(otherTeam.getMembers()).thenReturn(maintainers);\n+    when(otherTeam.getPermission()).thenReturn(\"read\");\n+\n+    GHRepository repository = mock(GHRepository.class);\n+    when(repository.getTeams()).thenReturn(Collections.singleton(otherTeam));\n+\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    fetcher.addForTesting(project, repository);\n+\n+    TeamsInfo provider = new TeamsInfo(fetcher);\n+\n+    when(otherTeam.getPermission()).thenReturn(\"read\");\n+    ValueSet values = provider.fetchValuesFor(project);\n+    checkValue(values, HAS_ENOUGH_TEAMS_ON_GITHUB, false);\n+    checkValue(values, HAS_ADMIN_TEAM_ON_GITHUB, false);\n+    checkValue(values, HAS_ENOUGH_ADMINS_ON_GITHUB, false);\n+    checkValue(values, HAS_TEAM_WITH_PUSH_PRIVILEGES_ON_GITHUB, false);\n+    checkValue(values, HAS_ENOUGH_TEAM_MEMBERS_ON_GITHUB, false);\n+  }\n+\n+  private static void checkValue(ValueSet values, Feature<Boolean> feature, boolean expected) {\n+    Optional<Value<Boolean>> something = values.of(feature);\n+    assertTrue(something.isPresent());\n+    Value<Boolean> value = something.get();\n+    assertFalse(value.isUnknown());\n+    assertFalse(value.isNotApplicable());\n+    assertEquals(expected, value.get());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "76bcd0225dcfdf44f44da5195ceee0860344f9a8",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/data/github/TestGitHubDataFetcherHolder.java",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/TestGitHubDataFetcherHolder.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/TestGitHubDataFetcherHolder.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/data/github/TestGitHubDataFetcherHolder.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -17,6 +17,7 @@\n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n import org.junit.Before;\n+import org.kohsuke.github.GHRepository;\n import org.kohsuke.github.GitHub;\n \n /**\n@@ -69,7 +70,17 @@ public void cleanup() throws IOException {\n      * Test class constructor.\n      */\n     public TestGitHubDataFetcher(GitHub github) throws IOException {\n-      super(github);\n+      super(github, \"test token\");\n+    }\n+\n+    /**\n+     * Adds {@link GitHubProject} and its {@link GHRepository repository on Github} to the cache.\n+     *\n+     * @param project The {@link GitHubProject}.\n+     * @param repository The {@link GHRepository repository on GitHub}.\n+     */\n+    void addForTesting(GitHubProject project, GHRepository repository) {\n+      repositoryCache().put(project, repository);\n     }\n \n     /**"
  },
  {
    "sha": "0d12a9bf77b79cead0f0eeca78d4ebf3922115ba",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/data/github/UseReuseDataProviderTest.java",
    "status": "modified",
    "additions": 145,
    "deletions": 11,
    "changes": 156,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/UseReuseDataProviderTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/UseReuseDataProviderTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/data/github/UseReuseDataProviderTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -1,17 +1,35 @@\n package com.sap.oss.phosphor.fosstars.data.github;\n \n import static com.sap.oss.phosphor.fosstars.data.github.UseReuseDataProvider.REUSE_CONFIG;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_REUSE_LICENSES;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.IS_REUSE_COMPLIANT;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.README_HAS_REUSE_INFO;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.REGISTERED_IN_REUSE;\n import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.USES_REUSE;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n \n import com.sap.oss.phosphor.fosstars.model.Value;\n import com.sap.oss.phosphor.fosstars.model.ValueSet;\n import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import com.sap.oss.phosphor.fosstars.model.value.ValueHashSet;\n import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n import java.util.Optional;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n import org.junit.Test;\n \n public class UseReuseDataProviderTest extends TestGitHubDataFetcherHolder {\n@@ -20,31 +38,147 @@\n \n   @Test\n   public void testSupportedFeature() {\n-    assertEquals(USES_REUSE, new UseReuseDataProvider(fetcher).supportedFeature());\n+    UseReuseDataProvider provider = new UseReuseDataProvider(fetcher);\n+    assertTrue(provider.supportedFeatures().contains(USES_REUSE));\n+    assertTrue(provider.supportedFeatures().contains(README_HAS_REUSE_INFO));\n+    assertTrue(provider.supportedFeatures().contains(HAS_REUSE_LICENSES));\n+    assertTrue(provider.supportedFeatures().contains(REGISTERED_IN_REUSE));\n+    assertTrue(provider.supportedFeatures().contains(IS_REUSE_COMPLIANT));\n   }\n \n   @Test\n-  public void testFetchValueFor() throws IOException {\n+  public void testUseReuse() throws IOException {\n     LocalRepository localRepository = mock(LocalRepository.class);\n     TestGitHubDataFetcher.addForTesting(PROJECT, localRepository);\n \n     when(localRepository.hasFile(REUSE_CONFIG)).thenReturn(false);\n-    UseReuseDataProvider provider = new UseReuseDataProvider(fetcher);\n-    check(provider, false);\n+    Value<Boolean> value = UseReuseDataProvider.useReuse(PROJECT);\n+    assertFalse(value.isUnknown());\n+    assertFalse(value.get());\n \n     when(localRepository.hasFile(REUSE_CONFIG)).thenReturn(true);\n-    check(provider, true);\n+    value = UseReuseDataProvider.useReuse(PROJECT);\n+    assertEquals(USES_REUSE, value.feature());\n+    assertFalse(value.isUnknown());\n+    assertTrue(value.get());\n+  }\n+\n+  @Test\n+  public void testReadmeHasReuseInfo() throws IOException {\n+    LocalRepository localRepository = mock(LocalRepository.class);\n+    TestGitHubDataFetcher.addForTesting(PROJECT, localRepository);\n+\n+    when(localRepository.hasFile(anyString())).thenReturn(false);\n+    Value<Boolean> value = UseReuseDataProvider.readmeHasReuseInfo(PROJECT);\n+    assertEquals(README_HAS_REUSE_INFO, value.feature());\n+    assertFalse(value.isUnknown());\n+    assertFalse(value.get());\n+\n+    when(localRepository.hasFile(\"README.md\")).thenReturn(true);\n+    when(localRepository.file(\"README.md\")).thenReturn(Optional.of(\"This is README.\"));\n+    value = UseReuseDataProvider.readmeHasReuseInfo(PROJECT);\n+    assertEquals(README_HAS_REUSE_INFO, value.feature());\n+    assertFalse(value.isUnknown());\n+    assertFalse(value.get());\n+\n+    when(localRepository.hasFile(\"README.md\")).thenReturn(true);\n+    when(localRepository.file(\"README.md\"))\n+        .thenReturn(Optional.of(String.format(\n+            \"Yes, README has a link to REUSE: https://api.reuse.software/info/github.com/%s/%s\",\n+            PROJECT.organization().name(), PROJECT.name())));\n+    value = UseReuseDataProvider.readmeHasReuseInfo(PROJECT);\n+    assertEquals(README_HAS_REUSE_INFO, value.feature());\n+    assertFalse(value.isUnknown());\n+    assertTrue(value.get());\n   }\n \n-  private static void check(UseReuseDataProvider provider, boolean expectedValue)\n+  @Test\n+  public void testHasReuseLicenses() throws IOException {\n+    LocalRepository localRepository = mock(LocalRepository.class);\n+    TestGitHubDataFetcher.addForTesting(PROJECT, localRepository);\n+\n+    Path licensesDirectory = Paths.get(\"LICENSES\");\n+\n+    when(localRepository.hasDirectory(licensesDirectory)).thenReturn(false);\n+    Value<Boolean> value = UseReuseDataProvider.hasReuseLicenses(PROJECT);\n+    assertEquals(HAS_REUSE_LICENSES, value.feature());\n+    assertFalse(value.isUnknown());\n+    assertFalse(value.get());\n+\n+    when(localRepository.hasDirectory(licensesDirectory)).thenReturn(true);\n+    when(localRepository.files(any(), any())).thenReturn(Collections.emptyList());\n+    value = UseReuseDataProvider.hasReuseLicenses(PROJECT);\n+    assertEquals(HAS_REUSE_LICENSES, value.feature());\n+    assertFalse(value.isUnknown());\n+    assertFalse(value.get());\n+\n+    when(localRepository.hasDirectory(licensesDirectory)).thenReturn(true);\n+    when(localRepository.files(any(), any()))\n+        .thenReturn(Collections.singletonList(licensesDirectory.resolve(Paths.get(\"LICENSE\"))));\n+    value = UseReuseDataProvider.hasReuseLicenses(PROJECT);\n+    assertEquals(HAS_REUSE_LICENSES, value.feature());\n+    assertFalse(value.isUnknown());\n+    assertTrue(value.get());\n+  }\n+\n+  @Test\n+  public void testReuseInfoWithError() throws IOException {\n+    testReuseInfo(404, null,\n+        ValueHashSet.from(REGISTERED_IN_REUSE.unknown(), IS_REUSE_COMPLIANT.unknown()));\n+  }\n+\n+  @Test\n+  public void testReuseInfoWithUnregisteredProject() throws IOException {\n+    testReuseInfo(200, \"unregistered\",\n+        ValueHashSet.from(REGISTERED_IN_REUSE.value(false), IS_REUSE_COMPLIANT.value(false)));\n+  }\n+\n+  @Test\n+  public void testReuseInfoWithNonCompliantProject() throws IOException {\n+    testReuseInfo(200, \"non-compliant\",\n+        ValueHashSet.from(REGISTERED_IN_REUSE.value(true), IS_REUSE_COMPLIANT.value(false)));\n+  }\n+\n+  @Test\n+  public void testReuseInfoWithCompliantProject() throws IOException {\n+    testReuseInfo(200, \"compliant\",\n+        ValueHashSet.from(REGISTERED_IN_REUSE.value(true), IS_REUSE_COMPLIANT.value(true)));\n+  }\n+\n+  public void testReuseInfo(int responseCode, String status, ValueSet expectedValues)\n       throws IOException {\n \n+    StatusLine statusLine = mock(StatusLine.class);\n+    when(statusLine.getStatusCode()).thenReturn(responseCode);\n+\n+    CloseableHttpResponse response = mock(CloseableHttpResponse.class);\n+    when(response.getStatusLine()).thenReturn(statusLine);\n+\n+    CloseableHttpClient client = mock(CloseableHttpClient.class);\n+    when(client.execute(any(HttpGet.class)))\n+        .thenReturn(response)\n+        .thenThrow(new AssertionError(\"Only one GET request was expected!\"));\n+\n+    HttpEntity entity = mock(HttpEntity.class);\n+    when(entity.getContent())\n+        .thenReturn(IOUtils.toInputStream(String.format(\"{ \\\"status\\\" : \\\"%s\\\"}\", status)));\n+\n+    statusLine = mock(StatusLine.class);\n+    when(statusLine.getStatusCode()).thenReturn(200);\n+\n+    response = mock(CloseableHttpResponse.class);\n+    when(response.getStatusLine()).thenReturn(statusLine);\n+    when(response.getEntity()).thenReturn(entity);\n+\n+    when(client.execute(any(HttpGet.class)))\n+        .thenReturn(response)\n+        .thenThrow(new AssertionError(\"Only one GET request was expected!\"));\n+\n+    UseReuseDataProvider provider = spy(new UseReuseDataProvider(fetcher));\n+    when(provider.httpClient()).thenReturn(client);\n+\n     ValueSet values = provider.fetchValuesFor(PROJECT);\n-    assertEquals(1, values.size());\n-    Optional<Value<Boolean>> something = values.of(USES_REUSE);\n-    assertTrue(something.isPresent());\n-    Value<Boolean> value = something.get();\n-    assertEquals(expectedValue, value.get());\n+    values.toSet().containsAll(expectedValues.toSet());\n   }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "65046e296d54a7514cd7604681330ef377896899",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/data/github/VulnerabilityAlertsInfoTest.java",
    "status": "added",
    "additions": 180,
    "deletions": 0,
    "changes": 180,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/VulnerabilityAlertsInfoTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/data/github/VulnerabilityAlertsInfoTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/data/github/VulnerabilityAlertsInfoTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -0,0 +1,180 @@\n+package com.sap.oss.phosphor.fosstars.data.github;\n+\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.ENABLED_VULNERABILITY_ALERTS_ON_GITHUB;\n+import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_UNRESOLVED_VULNERABILITY_ALERTS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import com.sap.oss.phosphor.fosstars.model.Feature;\n+import com.sap.oss.phosphor.fosstars.model.Value;\n+import com.sap.oss.phosphor.fosstars.model.ValueSet;\n+import com.sap.oss.phosphor.fosstars.model.subject.oss.GitHubProject;\n+import java.io.IOException;\n+import java.util.Optional;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.junit.Test;\n+\n+public class VulnerabilityAlertsInfoTest extends TestGitHubDataFetcherHolder {\n+\n+  private static final String VULNERABILITY_ALERTS_GRAPHQL_RESPONSE_BODY_TEMPLATE\n+      = \"{\\n\"\n+      + \"  \\\"data\\\": {\\n\"\n+      + \"    \\\"repository\\\": {\\n\"\n+      + \"      \\\"vulnerabilityAlerts\\\": {\\n\"\n+      + \"        \\\"totalCount\\\": %d\\n\"\n+      + \"      }\\n\"\n+      + \"    }\\n\"\n+      + \"  }\\n\"\n+      + \"}\";\n+\n+  private static final String VULNERABILITY_ALERTS_GRAPHQL_RESPONSE_BODY_WITH_ERROR\n+      = \"{\\n\"\n+      + \"  \\\"errors\\\": [\\n\"\n+      + \"    {\\n\"\n+      + \"      \\\"type\\\": \\\"SOME_ERROR\\\",\\n\"\n+      + \"      \\\"path\\\": [\\n\"\n+      + \"        \\\"something\\\"\\n\"\n+      + \"      ],\\n\"\n+      + \"      \\\"locations\\\": [\\n\"\n+      + \"        {\\n\"\n+      + \"          \\\"line\\\": 1,\\n\"\n+      + \"          \\\"column\\\": 1\\n\"\n+      + \"        }\\n\"\n+      + \"      ],\\n\"\n+      + \"      \\\"message\\\": \\\"This is a error message.\\\"\\n\"\n+      + \"    }\\n\"\n+      + \"  ]\\n\"\n+      + \"}\";\n+\n+  @Test\n+  public void testSupportedFeatures() {\n+    VulnerabilityAlertsInfo provider = new VulnerabilityAlertsInfo(fetcher);\n+    assertTrue(provider.supportedFeatures().contains(ENABLED_VULNERABILITY_ALERTS_ON_GITHUB));\n+    assertTrue(provider.supportedFeatures().contains(HAS_UNRESOLVED_VULNERABILITY_ALERTS));\n+  }\n+\n+  @Test\n+  public void testWithEnabledAlertsAndNoUnresolvedVulnerabilities() throws IOException {\n+    testWithEnabledAlerts(0);\n+  }\n+\n+  @Test\n+  public void testWithEnabledAlertsAndOneUnresolvedVulnerability() throws IOException {\n+    testWithEnabledAlerts(1);\n+  }\n+\n+  private void testWithEnabledAlerts(int vulnerabilities) throws IOException {\n+    StatusLine statusLine = mock(StatusLine.class);\n+    when(statusLine.getStatusCode()).thenReturn(204);\n+\n+    CloseableHttpResponse response = mock(CloseableHttpResponse.class);\n+    when(response.getStatusLine()).thenReturn(statusLine);\n+\n+    CloseableHttpClient client = mock(CloseableHttpClient.class);\n+    when(client.execute(any(HttpGet.class)))\n+        .thenReturn(response)\n+        .thenThrow(new AssertionError(\"Only one GET request was expected!\"));\n+\n+    HttpEntity entity = mock(HttpEntity.class);\n+    when(entity.getContent()).thenReturn(\n+        IOUtils.toInputStream(\n+            String.format(VULNERABILITY_ALERTS_GRAPHQL_RESPONSE_BODY_TEMPLATE, vulnerabilities)));\n+\n+    statusLine = mock(StatusLine.class);\n+    when(statusLine.getStatusCode()).thenReturn(200);\n+\n+    response = mock(CloseableHttpResponse.class);\n+    when(response.getStatusLine()).thenReturn(statusLine);\n+    when(response.getEntity()).thenReturn(entity);\n+\n+    when(client.execute(any(HttpPost.class)))\n+        .thenReturn(response)\n+        .thenThrow(new AssertionError(\"Only one POST request was expected!\"));\n+\n+    VulnerabilityAlertsInfo provider = spy(new VulnerabilityAlertsInfo(fetcher));\n+    when(provider.httpClient()).thenReturn(client);\n+\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    ValueSet values = provider.fetchValuesFor(project);\n+    checkValue(values, ENABLED_VULNERABILITY_ALERTS_ON_GITHUB, true);\n+    checkValue(values, HAS_UNRESOLVED_VULNERABILITY_ALERTS, vulnerabilities > 0);\n+  }\n+\n+  @Test\n+  public void testWithDisabledAlerts() throws IOException {\n+    StatusLine statusLine = mock(StatusLine.class);\n+    when(statusLine.getStatusCode()).thenReturn(404);\n+\n+    CloseableHttpResponse response = mock(CloseableHttpResponse.class);\n+    when(response.getStatusLine()).thenReturn(statusLine);\n+\n+    CloseableHttpClient client = mock(CloseableHttpClient.class);\n+    when(client.execute(any(HttpGet.class)))\n+        .thenReturn(response)\n+        .thenThrow(new AssertionError(\"Only one GET request was expected!\"));\n+\n+    HttpEntity entity = mock(HttpEntity.class);\n+    when(entity.getContent()).thenReturn(\n+        IOUtils.toInputStream(VULNERABILITY_ALERTS_GRAPHQL_RESPONSE_BODY_WITH_ERROR));\n+\n+    statusLine = mock(StatusLine.class);\n+    when(statusLine.getStatusCode()).thenReturn(200);\n+\n+    response = mock(CloseableHttpResponse.class);\n+    when(response.getStatusLine()).thenReturn(statusLine);\n+    when(response.getEntity()).thenReturn(entity);\n+\n+    when(client.execute(any(HttpPost.class)))\n+        .thenReturn(response)\n+        .thenThrow(new AssertionError(\"Only one POST request was expected!\"));\n+\n+    VulnerabilityAlertsInfo provider = spy(new VulnerabilityAlertsInfo(fetcher));\n+    when(provider.httpClient()).thenReturn(client);\n+\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    ValueSet values = provider.fetchValuesFor(project);\n+\n+    checkValue(values, ENABLED_VULNERABILITY_ALERTS_ON_GITHUB, false);\n+\n+    Optional<Value<Boolean>> something = values.of(HAS_UNRESOLVED_VULNERABILITY_ALERTS);\n+    assertTrue(something.isPresent());\n+    assertTrue(something.get().isUnknown());\n+  }\n+\n+  @Test\n+  public void testWithError() throws IOException {\n+    CloseableHttpClient client = mock(CloseableHttpClient.class);\n+    when(client.execute(any())).thenThrow(new IOException(\"Test I/O error\"));\n+\n+    VulnerabilityAlertsInfo provider = spy(new VulnerabilityAlertsInfo(fetcher));\n+    when(provider.httpClient()).thenReturn(client);\n+\n+    GitHubProject project = new GitHubProject(\"test\", \"project\");\n+    ValueSet values = provider.fetchValuesFor(project);\n+\n+    Optional<Value<Boolean>> something = values.of(ENABLED_VULNERABILITY_ALERTS_ON_GITHUB);\n+    assertTrue(something.isPresent());\n+    assertTrue(something.get().isUnknown());\n+\n+    something = values.of(HAS_UNRESOLVED_VULNERABILITY_ALERTS);\n+    assertTrue(something.isPresent());\n+    assertTrue(something.get().isUnknown());\n+  }\n+\n+  private static void checkValue(ValueSet values, Feature<Boolean> feature, boolean expected) {\n+    Optional<Value<Boolean>> something = values.of(feature);\n+    assertTrue(something.isPresent());\n+    Value<Boolean> value = something.get();\n+    assertEquals(expected, value.get());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0eb4ec7ff7136e1489a5c0ee83d956d866aad3ec",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/model/rating/oss/OssRulesOfPlayRatingTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 11,
    "changes": 12,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/model/rating/oss/OssRulesOfPlayRatingTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/model/rating/oss/OssRulesOfPlayRatingTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/model/rating/oss/OssRulesOfPlayRatingTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -1,8 +1,6 @@\n package com.sap.oss.phosphor.fosstars.model.rating.oss;\n \n-import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_OPEN_PULL_REQUEST_FROM_DEPENDABOT;\n-import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_SECURITY_POLICY;\n-import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.USES_REUSE;\n+import static com.sap.oss.phosphor.fosstars.model.score.oss.OssRulesOfPlayScoreTest.allRulesPassed;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotEquals;\n@@ -24,7 +22,6 @@\n import com.sap.oss.phosphor.fosstars.model.value.RatingValue;\n import com.sap.oss.phosphor.fosstars.model.value.ScoreValue;\n import com.sap.oss.phosphor.fosstars.model.value.UnknownValue;\n-import com.sap.oss.phosphor.fosstars.model.value.ValueHashSet;\n import com.sap.oss.phosphor.fosstars.util.Json;\n import com.sap.oss.phosphor.fosstars.util.Yaml;\n import java.io.IOException;\n@@ -166,11 +163,4 @@ public void testCalculateWithOneUnknownValue() {\n       assertEquals(OssRulesOfPlayLabel.UNCLEAR, ratingValue.label());\n     }\n   }\n-\n-  private static ValueSet allRulesPassed() {\n-    return new ValueHashSet()\n-        .update(USES_REUSE.value(true))\n-        .update(HAS_SECURITY_POLICY.value(true))\n-        .update(HAS_OPEN_PULL_REQUEST_FROM_DEPENDABOT.value(false));\n-  }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "1f2ba21d192c61b1cc764c40c9482c9ba6912566",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/model/score/oss/OssRulesOfPlayScoreTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 8,
    "changes": 13,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/model/score/oss/OssRulesOfPlayScoreTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/model/score/oss/OssRulesOfPlayScoreTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/model/score/oss/OssRulesOfPlayScoreTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -1,8 +1,5 @@\n package com.sap.oss.phosphor.fosstars.model.score.oss;\n \n-import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_OPEN_PULL_REQUEST_FROM_DEPENDABOT;\n-import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.HAS_SECURITY_POLICY;\n-import static com.sap.oss.phosphor.fosstars.model.feature.oss.OssFeatures.USES_REUSE;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotEquals;\n@@ -126,11 +123,11 @@ public void testCalculateWithOneUnknownValue() {\n     }\n   }\n \n-  private static ValueSet allRulesPassed() {\n-    return new ValueHashSet()\n-        .update(USES_REUSE.value(true))\n-        .update(HAS_SECURITY_POLICY.value(true))\n-        .update(HAS_OPEN_PULL_REQUEST_FROM_DEPENDABOT.value(false));\n+  public static ValueSet allRulesPassed() {\n+    ValueSet values = new ValueHashSet();\n+    OssRulesOfPlayScore.EXPECTED_TRUE.forEach(feature -> values.update(feature.value(true)));\n+    OssRulesOfPlayScore.EXPECTED_FALSE.forEach(feature -> values.update(feature.value(false)));\n+    return values;\n   }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "6ec4ae2ba25c26167b9b9d2bd2ed31114fe93730",
    "filename": "src/test/java/com/sap/oss/phosphor/fosstars/tool/github/ApplicationTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/SAP/fosstars-rating-core/blob/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/tool/github/ApplicationTest.java",
    "raw_url": "https://github.com/SAP/fosstars-rating-core/raw/045113676093fb0d9888fc85778ea5e318621cd0/src/test/java/com/sap/oss/phosphor/fosstars/tool/github/ApplicationTest.java",
    "contents_url": "https://api.github.com/repos/SAP/fosstars-rating-core/contents/src/test/java/com/sap/oss/phosphor/fosstars/tool/github/ApplicationTest.java?ref=045113676093fb0d9888fc85778ea5e318621cd0",
    "patch": "@@ -2,30 +2,29 @@\n \n import static com.sap.oss.phosphor.fosstars.tool.github.GitHubProjectFinder.EMPTY_EXCLUDE_LIST;\n import static org.hamcrest.CoreMatchers.hasItem;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertThat;\n import static org.junit.Assert.fail;\n \n import com.sap.oss.phosphor.fosstars.tool.github.Application.ReportConfig;\n import com.sap.oss.phosphor.fosstars.tool.github.GitHubProjectFinder.OrganizationConfig;\n import com.sap.oss.phosphor.fosstars.tool.github.GitHubProjectFinder.ProjectConfig;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.URISyntaxException;\n import java.util.Arrays;\n import java.util.Collections;\n import org.junit.Test;\n \n public class ApplicationTest {\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testNoParameters() throws IOException, URISyntaxException {\n+  public void testNoParameters() throws IOException {\n     new Application().run();\n   }\n \n   @Test\n-  public void testHelp() throws IOException, URISyntaxException {\n+  public void testHelp() throws IOException {\n     new Application(\"-help\").run();\n     new Application(\"-h\").run();\n   }"
  }
]
