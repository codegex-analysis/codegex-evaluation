[
  {
    "sha": "72d423908687269df8b590bc6228e5fa212cd888",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -109,6 +109,11 @@\n \tpublic static String stream_consumer_page_settings_description;\n \tpublic static String stream_consumer_page_settings_item_text_none;\n \tpublic static String stream_consumer_page_warning_not_enough_sources_chosen;\n+\tpublic static String stream_consumer_page_mapping_title;\n+\tpublic static String stream_consumer_page_mapping_button_configure;\n+\tpublic static String stream_consumer_page_mapping_name_column_name;\n+\tpublic static String stream_consumer_page_mapping_mapping_column_name;\n+\tpublic static String stream_consumer_page_mapping_label_error_no_columns_selected_text;\n \n \tpublic static String data_transfer_task_configurator_group_label_export_tables;\n \tpublic static String data_transfer_task_configurator_group_label_import_into;"
  },
  {
    "sha": "1798c7fef709d38567ca2789c11e39595b4b50b6",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages.properties",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages.properties",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages.properties",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages.properties?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -80,6 +80,11 @@ stream_consumer_page_settings_title = Format settings\n stream_consumer_page_settings_description = File format settings\n stream_consumer_page_settings_item_text_none = <none>\n stream_consumer_page_warning_not_enough_sources_chosen = Not enough source files chosen\n+stream_consumer_page_mapping_title=Configure exported columns\n+stream_consumer_page_mapping_button_configure=Configure Columns ...\n+stream_consumer_page_mapping_name_column_name=Name\n+stream_consumer_page_mapping_mapping_column_name=Action\n+stream_consumer_page_mapping_label_error_no_columns_selected_text=At least one column for each table must be selected\n data_transfer_task_configurator_group_label_export_tables = Export tables\n data_transfer_task_configurator_group_label_import_into = Import into\n data_transfer_task_configurator_table_column_text_object = Object"
  },
  {
    "sha": "410fe81bb6c0231404ea75a3485004d2e60507db",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages_ru.properties",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages_ru.properties",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages_ru.properties",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/internal/DTUIMessages_ru.properties?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -75,6 +75,11 @@ stream_consumer_page_output_tooltip_process_command_line = \\u041A\\u043E\\u043C\\u0\n stream_consumer_page_settings_title = \\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438 \\u0444\\u043E\\u0440\\u043C\\u0430\\u0442\\u0430\n stream_consumer_page_settings_description = \\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438 \\u0444\\u043E\\u0440\\u043C\\u0430\\u0442\\u0430 \\u0444\\u0430\\u0439\\u043B\\u0430\n stream_consumer_page_settings_item_text_none = <\\u043F\\u0443\\u0441\\u0442\\u043E>\n+stream_consumer_page_mapping_title= \\u041A\\u043E\\u043D\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u044F \\u044D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u0443\\u0435\\u043C\\u044B\\u0445 \\u043A\\u043E\\u043B\\u043E\\u043D\\u043E\\u043A\n+stream_consumer_page_mapping_button_configure=\\u041A\\u043E\\u043D\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u044F \\u043A\\u043E\\u043B\\u043E\\u043D\\u043E\\u043A ...\n+stream_consumer_page_mapping_name_column_name=\\u0418\\u043C\\u044F\n+stream_consumer_page_mapping_mapping_column_name=\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0435\n+stream_consumer_page_mapping_label_error_no_columns_selected_text=\\u0414\\u043B\\u044F \\u043A\\u0430\\u0436\\u0434\\u043E\\u0439 \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u044B \\u0434\\u043E\\u043B\\u0436\\u043D\\u0430 \\u0431\\u044B\\u0442\\u044C \\u0432\\u044B\\u0431\\u0440\\u0430\\u043D\\u0430 \\u043C\\u0438\\u043D\\u0438\\u043C\\u0443\\u043C \\u043E\\u0434\\u043D\\u0430 \\u043A\\u043E\\u043B\\u043E\\u043D\\u043A\\u0430\n data_transfer_task_configurator_group_label_export_tables = \\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u044B\n data_transfer_task_configurator_group_label_import_into = \\u0418\\u043C\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u0432\n data_transfer_task_configurator_table_column_text_object = \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442"
  },
  {
    "sha": "48e32e2e35e0484920237d8e5defcb47f05d012c",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/pages/stream/StreamConsumerPageSettings.java",
    "status": "modified",
    "additions": 232,
    "deletions": 7,
    "changes": 239,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/pages/stream/StreamConsumerPageSettings.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/pages/stream/StreamConsumerPageSettings.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer.ui/src/org/jkiss/dbeaver/tools/transfer/ui/pages/stream/StreamConsumerPageSettings.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -16,31 +16,55 @@\n  */\n package org.jkiss.dbeaver.tools.transfer.ui.pages.stream;\n \n+import org.eclipse.jface.dialogs.Dialog;\n+import org.eclipse.jface.dialogs.IDialogConstants;\n import org.eclipse.jface.preference.PreferenceDialog;\n+import org.eclipse.jface.resource.JFaceResources;\n+import org.eclipse.jface.viewers.*;\n import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.CLabel;\n import org.eclipse.swt.events.SelectionAdapter;\n import org.eclipse.swt.events.SelectionEvent;\n import org.eclipse.swt.layout.GridData;\n-import org.eclipse.swt.layout.GridLayout;\n-import org.eclipse.swt.widgets.Combo;\n-import org.eclipse.swt.widgets.Composite;\n-import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.*;\n import org.eclipse.ui.dialogs.PreferencesUtil;\n+import org.jkiss.code.NotNull;\n+import org.jkiss.dbeaver.Log;\n+import org.jkiss.dbeaver.model.DBPNamedObject;\n+import org.jkiss.dbeaver.model.DBValueFormatting;\n import org.jkiss.dbeaver.model.app.DBPDataFormatterRegistry;\n import org.jkiss.dbeaver.model.data.DBDDataFormatterProfile;\n+import org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;\n+import org.jkiss.dbeaver.model.runtime.VoidProgressMonitor;\n+import org.jkiss.dbeaver.model.struct.DBSDataContainer;\n import org.jkiss.dbeaver.runtime.DBWorkbench;\n import org.jkiss.dbeaver.runtime.properties.PropertySourceCustom;\n+import org.jkiss.dbeaver.tools.transfer.DataTransferPipe;\n import org.jkiss.dbeaver.tools.transfer.internal.DTMessages;\n import org.jkiss.dbeaver.tools.transfer.registry.DataTransferProcessorDescriptor;\n import org.jkiss.dbeaver.tools.transfer.stream.StreamConsumerSettings;\n+import org.jkiss.dbeaver.tools.transfer.stream.StreamMappingAttribute;\n+import org.jkiss.dbeaver.tools.transfer.stream.StreamMappingContainer;\n+import org.jkiss.dbeaver.tools.transfer.stream.StreamMappingType;\n import org.jkiss.dbeaver.tools.transfer.ui.internal.DTUIMessages;\n import org.jkiss.dbeaver.tools.transfer.ui.wizard.DataTransferWizard;\n+import org.jkiss.dbeaver.ui.DBeaverIcons;\n+import org.jkiss.dbeaver.ui.SharedTextColors;\n import org.jkiss.dbeaver.ui.UIUtils;\n+import org.jkiss.dbeaver.ui.controls.CustomComboBoxCellEditor;\n+import org.jkiss.dbeaver.ui.controls.TreeContentProvider;\n import org.jkiss.dbeaver.ui.dialogs.ActiveWizardPage;\n+import org.jkiss.dbeaver.ui.dialogs.BaseDialog;\n import org.jkiss.dbeaver.ui.properties.PropertyTreeViewer;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class StreamConsumerPageSettings extends ActiveWizardPage<DataTransferWizard> {\n \n+    private static final Log log = Log.getLog(StreamConsumerPageSettings.class);\n+\n     private static final int EXTRACT_LOB_SKIP = 0;\n     private static final int EXTRACT_LOB_FILES = 1;\n     private static final int EXTRACT_LOB_INLINE = 2;\n@@ -50,6 +74,7 @@\n     private static final int LOB_ENCODING_BINARY = 2;\n     private static final int LOB_ENCODING_NATIVE = 3;\n \n+    private final List<StreamMappingContainer> mappings = new ArrayList<>();\n     private PropertyTreeViewer propsEditor;\n     private Combo lobExtractType;\n     private Label lobEncodingLabel;\n@@ -75,9 +100,6 @@ public void createControl(Composite parent) {\n \n         {\n             Composite generalSettings = UIUtils.createControlGroup(composite, DTMessages.data_transfer_wizard_settings_group_general, 5, GridData.FILL_HORIZONTAL, 0);\n-            ((GridLayout)generalSettings.getLayout()).verticalSpacing = 0;\n-            ((GridLayout)generalSettings.getLayout()).marginHeight = 0;\n-            ((GridLayout)generalSettings.getLayout()).marginWidth = 0;\n             {\n                 formatProfilesCombo = UIUtils.createLabelCombo(generalSettings, DTMessages.data_transfer_wizard_settings_label_formatting, SWT.DROP_DOWN | SWT.READ_ONLY);\n                 GridData gd = new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);\n@@ -156,6 +178,35 @@ public void widgetSelected(SelectionEvent e) {\n                         }\n                     }\n                 });\n+\n+                {\n+                    Composite columnsPanel = UIUtils.createComposite(generalSettings, 5);\n+                    columnsPanel.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 5, 1));\n+\n+                    UIUtils.createDialogButton(columnsPanel, DTUIMessages.stream_consumer_page_mapping_button_configure, new SelectionAdapter() {\n+                        @Override\n+                        public void widgetSelected(SelectionEvent event) {\n+                            if (mappings.isEmpty()) {\n+                                try {\n+                                    getWizard().getRunnableContext().run(true, true, monitor -> {\n+                                        refreshMappings(monitor);\n+                                        UIUtils.asyncExec(() -> new ConfigureColumnsPopup(getShell()).open());\n+                                    });\n+                                } catch (InvocationTargetException e) {\n+                                    DBWorkbench.getPlatformUI().showError(\n+                                        DTMessages.stream_transfer_consumer_title_configuration_load_failed,\n+                                        DTMessages.stream_transfer_consumer_message_cannot_load_configuration,\n+                                        e\n+                                    );\n+                                } catch (InterruptedException e) {\n+                                    log.debug(\"Canceled by user\", e);\n+                                }\n+                            } else {\n+                                new ConfigureColumnsPopup(getShell()).open();\n+                            }\n+                        }\n+                    });\n+                }\n             }\n         }\n \n@@ -248,4 +299,178 @@ protected boolean determinePageCompletion()\n         return true;\n     }\n \n+    private final class ConfigureColumnsPopup extends BaseDialog {\n+        private TreeViewer viewer;\n+        private CLabel errorLabel;\n+\n+        public ConfigureColumnsPopup(@NotNull Shell shell) {\n+            super(shell, DTUIMessages.stream_consumer_page_mapping_title, null);\n+            this.setShellStyle(SWT.TITLE | SWT.MAX | SWT.RESIZE | SWT.APPLICATION_MODAL);\n+        }\n+\n+        @Override\n+        protected Composite createDialogArea(Composite parent) {\n+            Composite group = super.createDialogArea(parent);\n+\n+            GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);\n+            gd.widthHint = 400;\n+            gd.heightHint = 450;\n+\n+            Composite composite = UIUtils.createComposite(group, 1);\n+            composite.setLayoutData(gd);\n+\n+            viewer = new TreeViewer(composite, SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);\n+            viewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));\n+            viewer.getTree().setLinesVisible(true);\n+            viewer.getTree().setHeaderVisible(true);\n+            viewer.getTree().setLayoutData(gd);\n+\n+            viewer.setContentProvider(new TreeContentProvider() {\n+                @Override\n+                public Object[] getChildren(Object element) {\n+                    // We have preloaded the attributes before, so it is 'safe' to use void monitor here\n+                    return ((StreamMappingContainer) element).getAttributes(new VoidProgressMonitor()).toArray();\n+                }\n+\n+                @Override\n+                public boolean hasChildren(Object element) {\n+                    return element instanceof StreamMappingContainer;\n+                }\n+            });\n+\n+            {\n+                TreeViewerColumn column = new TreeViewerColumn(viewer, SWT.LEFT);\n+                column.setLabelProvider(new CellLabelProvider() {\n+                    @Override\n+                    public void update(ViewerCell cell) {\n+                        final Object element = cell.getElement();\n+                        final DBPNamedObject object = (DBPNamedObject) element;\n+                        cell.setText(object.getName());\n+                        cell.setImage(DBeaverIcons.getImage(DBValueFormatting.getObjectImage(object)));\n+                    }\n+                });\n+                column.getColumn().setText(DTUIMessages.stream_consumer_page_mapping_name_column_name);\n+            }\n+\n+            {\n+                TreeViewerColumn column = new TreeViewerColumn(viewer, SWT.LEFT);\n+                column.setLabelProvider(new CellLabelProvider() {\n+                    @Override\n+                    public void update(ViewerCell cell) {\n+                        final Object element = cell.getElement();\n+                        if (element instanceof StreamMappingAttribute) {\n+                            final StreamMappingAttribute attribute = (StreamMappingAttribute) element;\n+                            cell.setText(attribute.getMappingType().name());\n+                            cell.setBackground(attribute.getContainer().isComplete() ? null : UIUtils.getSharedTextColors().getColor(SharedTextColors.COLOR_WARNING));\n+                        }\n+                    }\n+                });\n+                column.setEditingSupport(new EditingSupport(viewer) {\n+                    @Override\n+                    protected CellEditor getCellEditor(Object element) {\n+                        final String[] items = {\n+                            StreamMappingType.export.name(),\n+                            StreamMappingType.skip.name()\n+                        };\n+\n+                        return new CustomComboBoxCellEditor(\n+                            viewer,\n+                            viewer.getTree(),\n+                            items,\n+                            SWT.DROP_DOWN | SWT.READ_ONLY\n+                        );\n+                    }\n+\n+                    @Override\n+                    protected boolean canEdit(Object element) {\n+                        return element instanceof StreamMappingAttribute;\n+                    }\n+\n+                    @Override\n+                    protected Object getValue(Object element) {\n+                        return ((StreamMappingAttribute) element).getMappingType().name();\n+                    }\n+\n+                    @Override\n+                    protected void setValue(Object element, Object value) {\n+                        ((StreamMappingAttribute) element).setMappingType(StreamMappingType.valueOf(value.toString()));\n+                        viewer.refresh();\n+                        updateCompletion();\n+                    }\n+                });\n+                column.getColumn().setText(DTUIMessages.stream_consumer_page_mapping_mapping_column_name);\n+            }\n+\n+            errorLabel = new CLabel(group, SWT.NONE);\n+            errorLabel.setText(DTUIMessages.stream_consumer_page_mapping_label_error_no_columns_selected_text);\n+            errorLabel.setImage(JFaceResources.getImage(Dialog.DLG_IMG_MESSAGE_ERROR));\n+            errorLabel.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false));\n+\n+            UIUtils.asyncExec(() -> {\n+                viewer.setInput(mappings);\n+                viewer.expandAll(true);\n+                UIUtils.packColumns(viewer.getTree(), false, new float[]{0.75f, 0.25f});\n+                updateCompletion();\n+            });\n+\n+            return group;\n+        }\n+\n+        @Override\n+        protected void createButtonsForButtonBar(Composite parent) {\n+            createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);\n+            createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);\n+        }\n+\n+        @Override\n+        protected void okPressed() {\n+            final StreamConsumerSettings settings = getWizard().getPageSettings(StreamConsumerPageSettings.this, StreamConsumerSettings.class);\n+\n+            settings.getDataMappings().clear();\n+\n+            for (StreamMappingContainer mapping : mappings) {\n+                settings.addDataMapping(mapping);\n+            }\n+\n+            super.okPressed();\n+        }\n+\n+        private void updateCompletion() {\n+            final boolean isComplete = mappings.stream().allMatch(StreamMappingContainer::isComplete);\n+            final Button okButton = getButton(IDialogConstants.OK_ID);\n+            errorLabel.setVisible(!isComplete);\n+            okButton.setEnabled(isComplete);\n+        }\n+    }\n+\n+    private void refreshMappings(@NotNull DBRProgressMonitor monitor) {\n+        final StreamConsumerSettings settings = getWizard().getPageSettings(StreamConsumerPageSettings.this, StreamConsumerSettings.class);\n+        final List<DataTransferPipe> pipes = getWizard().getSettings().getDataPipes();\n+\n+        mappings.clear();\n+\n+        try {\n+            monitor.beginTask(\"Load mappings\", pipes.size());\n+            for (DataTransferPipe pipe : pipes) {\n+                DBSDataContainer source = (DBSDataContainer) pipe.getProducer().getDatabaseObject();\n+                StreamMappingContainer mapping = settings.getDataMapping(source);\n+\n+                if (mapping == null) {\n+                    mapping = new StreamMappingContainer(source);\n+\n+                    for (StreamMappingAttribute attribute : mapping.getAttributes(monitor)) {\n+                        attribute.setMappingType(StreamMappingType.export);\n+                    }\n+                } else {\n+                    // Create a copy to avoid direct modifications\n+                    mapping = new StreamMappingContainer(mapping);\n+                }\n+\n+                mappings.add(mapping);\n+                monitor.worked(1);\n+            }\n+        } finally {\n+            monitor.done();\n+        }\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "4e709c5d67161115c85cfb49e1b1cbe5c49df525",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/DTUtils.java",
    "status": "modified",
    "additions": 79,
    "deletions": 8,
    "changes": 87,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/DTUtils.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/DTUtils.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/DTUtils.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -17,20 +17,25 @@\n package org.jkiss.dbeaver.tools.transfer;\n \n import org.eclipse.core.runtime.IAdaptable;\n-import org.jkiss.dbeaver.model.DBPDataSource;\n-import org.jkiss.dbeaver.model.DBPEvaluationContext;\n-import org.jkiss.dbeaver.model.DBPNamedObject;\n-import org.jkiss.dbeaver.model.DBUtils;\n-import org.jkiss.dbeaver.model.exec.DBCEntityMetaData;\n+import org.jkiss.code.NotNull;\n+import org.jkiss.dbeaver.DBException;\n+import org.jkiss.dbeaver.model.*;\n+import org.jkiss.dbeaver.model.data.DBDAttributeBinding;\n+import org.jkiss.dbeaver.model.data.DBDDataReceiver;\n+import org.jkiss.dbeaver.model.exec.*;\n+import org.jkiss.dbeaver.model.impl.AbstractExecutionSource;\n import org.jkiss.dbeaver.model.preferences.DBPPropertyDescriptor;\n+import org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;\n import org.jkiss.dbeaver.model.sql.SQLQuery;\n import org.jkiss.dbeaver.model.sql.SQLQueryContainer;\n import org.jkiss.dbeaver.model.sql.SQLScriptElement;\n-import org.jkiss.dbeaver.model.struct.DBSDataContainer;\n-import org.jkiss.dbeaver.model.struct.DBSEntity;\n-import org.jkiss.dbeaver.model.struct.DBSObject;\n+import org.jkiss.dbeaver.model.struct.*;\n import org.jkiss.dbeaver.tools.transfer.registry.DataTransferProcessorDescriptor;\n+import org.jkiss.utils.CommonUtils;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n \n /**\n@@ -105,4 +110,70 @@ public static String getTableNameFromQuery(DBPDataSource dataSource, SQLQueryCon\n         }\n         return null;\n     }\n+\n+    @NotNull\n+    public static List<DBSAttributeBase> getAttributes(@NotNull DBRProgressMonitor monitor, @NotNull DBSDataContainer container, @NotNull Object controller) throws DBException {\n+        final List<DBSAttributeBase> attributes = new ArrayList<>();\n+        if (container instanceof DBSEntity && !(container instanceof DBSDocumentContainer)) {\n+            for (DBSEntityAttribute attr : CommonUtils.safeList(((DBSEntity) container).getAttributes(monitor))) {\n+                if (DBUtils.isHiddenObject(attr)) {\n+                    continue;\n+                }\n+                attributes.add(attr);\n+            }\n+        } else {\n+            // Seems to be a dynamic query. Execute it to get metadata\n+            final DBCExecutionContext context = container instanceof DBPContextProvider\n+                ? ((DBPContextProvider) container).getExecutionContext()\n+                : DBUtils.getDefaultContext(container, false);\n+            if (context == null) {\n+                throw new DBCException(\"No execution context\");\n+            }\n+            DBExecUtils.tryExecuteRecover(monitor, context.getDataSource(), monitor1 -> {\n+                final MetadataReceiver receiver = new MetadataReceiver(container);\n+                try (DBCSession session = context.openSession(monitor1, DBCExecutionPurpose.META, \"Read query meta data\")) {\n+                    container.readData(new AbstractExecutionSource(container, session.getExecutionContext(), controller), session, receiver, null, 0, 1, DBSDataContainer.FLAG_NONE, 1);\n+                } catch (DBException e) {\n+                    throw new InvocationTargetException(e);\n+                }\n+                if (receiver.attributes == null) {\n+                    throw new InvocationTargetException(new DBCException(\"Query does not contain any attributes\"));\n+                }\n+                for (DBDAttributeBinding attr : receiver.attributes) {\n+                    if (DBUtils.isHiddenObject(attr)) {\n+                        continue;\n+                    }\n+                    attributes.add(attr);\n+                }\n+            });\n+        }\n+\n+        return attributes;\n+    }\n+\n+    private static class MetadataReceiver implements DBDDataReceiver {\n+        private final DBSDataContainer container;\n+        private DBDAttributeBinding[] attributes;\n+\n+        public MetadataReceiver(DBSDataContainer container) {\n+            this.container = container;\n+        }\n+\n+        @Override\n+        public void fetchStart(DBCSession session, DBCResultSet resultSet, long offset, long maxRows) throws DBCException {\n+            attributes = DBUtils.makeLeafAttributeBindings(session, container, resultSet);\n+        }\n+\n+        @Override\n+        public void fetchRow(DBCSession session, DBCResultSet resultSet) throws DBCException {\n+        }\n+\n+        @Override\n+        public void fetchEnd(DBCSession session, DBCResultSet resultSet) throws DBCException {\n+        }\n+\n+        @Override\n+        public void close() {\n+        }\n+    }\n }"
  },
  {
    "sha": "81b202946890db113b0b4d9edc8cd76ebc91bec4",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseMappingContainer.java",
    "status": "modified",
    "additions": 3,
    "deletions": 63,
    "changes": 66,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseMappingContainer.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseMappingContainer.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseMappingContainer.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -23,10 +23,6 @@\n import org.jkiss.dbeaver.DBException;\n import org.jkiss.dbeaver.Log;\n import org.jkiss.dbeaver.model.*;\n-import org.jkiss.dbeaver.model.data.DBDAttributeBinding;\n-import org.jkiss.dbeaver.model.data.DBDDataReceiver;\n-import org.jkiss.dbeaver.model.exec.*;\n-import org.jkiss.dbeaver.model.impl.AbstractExecutionSource;\n import org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;\n import org.jkiss.dbeaver.model.runtime.DBRRunnableContext;\n import org.jkiss.dbeaver.model.runtime.VoidProgressMonitor;\n@@ -37,10 +33,10 @@\n import org.jkiss.dbeaver.model.struct.rdb.DBSCatalog;\n import org.jkiss.dbeaver.model.struct.rdb.DBSSchema;\n import org.jkiss.dbeaver.runtime.DBWorkbench;\n+import org.jkiss.dbeaver.tools.transfer.DTUtils;\n import org.jkiss.dbeaver.tools.transfer.internal.DTMessages;\n import org.jkiss.utils.CommonUtils;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.util.*;\n \n /**\n@@ -219,42 +215,8 @@ public DatabaseMappingAttribute getAttributeMapping(DBSAttributeBase sourceAttr)\n     }\n \n     private void readAttributes(DBRProgressMonitor monitor) throws DBException {\n-        if (source instanceof DBSEntity && !(source instanceof DBSDocumentContainer)) {\n-            for (DBSEntityAttribute attr : CommonUtils.safeCollection(((DBSEntity) source).getAttributes(monitor))) {\n-                if (DBUtils.isHiddenObject(attr)) {\n-                    continue;\n-                }\n-                addAttributeMapping(monitor, attr);\n-            }\n-        } else {\n-            // Seems to be a dynamic query. Execute it to get metadata\n-            DBPDataSource dataSource = source.getDataSource();\n-            assert (dataSource != null);\n-            DBCExecutionContext context;\n-            if (source instanceof DBPContextProvider) {\n-                context = ((DBPContextProvider) source).getExecutionContext();\n-            } else {\n-                context = DBUtils.getDefaultContext(source, false);\n-            }\n-            if (context == null) {\n-                throw new DBCException(\"No execution context\");\n-            }\n-            DBExecUtils.tryExecuteRecover(monitor, context.getDataSource(), monitor1 -> {\n-                try (DBCSession session = context.openSession(monitor1, DBCExecutionPurpose.META, \"Read query meta data\")) {\n-                    MetadataReceiver receiver = new MetadataReceiver();\n-                    try {\n-                        source.readData(new AbstractExecutionSource(source, session.getExecutionContext(), this), session, receiver, null, 0, 1, DBSDataContainer.FLAG_NONE, 1);\n-                        for (DBDAttributeBinding attr : receiver.attributes) {\n-                            if (DBUtils.isHiddenObject(attr)) {\n-                                continue;\n-                            }\n-                            addAttributeMapping(monitor1, attr);\n-                        }\n-                    } catch (Exception e) {\n-                        throw new InvocationTargetException(e);\n-                    }\n-                }\n-            });\n+        for (DBSAttributeBase attr : DTUtils.getAttributes(monitor, source, this)) {\n+            addAttributeMapping(monitor, attr);\n         }\n     }\n \n@@ -353,26 +315,4 @@ public String getTargetFullName() {\n         }\n         return targetName;\n     }\n-\n-    private class MetadataReceiver implements DBDDataReceiver {\n-\n-        private DBDAttributeBinding[] attributes;\n-\n-        @Override\n-        public void fetchStart(DBCSession session, DBCResultSet resultSet, long offset, long maxRows) throws DBCException {\n-            attributes = DBUtils.makeLeafAttributeBindings(session, source, resultSet);\n-        }\n-\n-        @Override\n-        public void fetchRow(DBCSession session, DBCResultSet resultSet) throws DBCException {\n-        }\n-\n-        @Override\n-        public void fetchEnd(DBCSession session, DBCResultSet resultSet) throws DBCException {\n-        }\n-\n-        @Override\n-        public void close() {\n-        }\n-    }\n }"
  },
  {
    "sha": "60866d74aba7253e52692da49b7e455cf10e6768",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -139,6 +139,10 @@\n \tpublic static String database_transfer_consumer_task_error_occurred_during_batch_insert;\n \tpublic static String stream_transfer_consumer_title_run_process;\n \tpublic static String stream_transfer_consumer_message_error_running_process;\n+\tpublic static String stream_transfer_consumer_title_attributes_read_failed;\n+\tpublic static String stream_transfer_consumer_message_cannot_get_attributes_from;\n+\tpublic static String stream_transfer_consumer_title_configuration_load_failed;\n+\tpublic static String stream_transfer_consumer_message_cannot_load_configuration;\n \n \tpublic static String data_transfer_task_handler_unexpected_error_title;\n \tpublic static String data_transfer_task_handler_unexpected_error_message;"
  },
  {
    "sha": "65815785a14b3a36a8e52df01d5dbace2fdaedb9",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages.properties",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages.properties",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages.properties",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages.properties?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -117,6 +117,10 @@ database_transfer_consumer_task_error_occurred_during_data_load = data load\n database_transfer_consumer_task_error_occurred_during_batch_insert = batch insert\\n(you can disable batch insert in order to skip particular rows).\n stream_transfer_consumer_title_run_process = Run process\n stream_transfer_consumer_message_error_running_process = Error running process [{0}]\n+stream_transfer_consumer_title_attributes_read_failed = Attributes read failed\n+stream_transfer_consumer_message_cannot_get_attributes_from = Can't get attributes from {0}\n+stream_transfer_consumer_title_configuration_load_failed = Configuration load failed\n+stream_transfer_consumer_message_cannot_load_configuration = Can't load data transfer configuration\n \n data_transfer_task_handler_unexpected_error_title = Unexpected error during data transfer\n data_transfer_task_handler_unexpected_error_message = Unable to finish data transfer properly due to unexpected error"
  },
  {
    "sha": "684b9ebea6254b52d7f7248d8c2548124f042460",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages_ru.properties",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages_ru.properties",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages_ru.properties",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/internal/DTMessages_ru.properties?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -105,3 +105,7 @@ database_mapping_container_title_attributes_read_failed = \\u0421\\u0431\\u043E\\u04\n database_transfer_consumer_task_error_occurred_during_data_load = \\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0432\\u043E \\u0432\\u0440\\u0435\\u043C\\u044F \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\n stream_transfer_consumer_title_run_process = \\u0417\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u043F\\u0440\\u043E\\u0446\\u0435\\u0441\\u0441\n stream_transfer_consumer_message_error_running_process = \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0437\\u0430\\u043F\\u0443\\u0441\\u043A\\u0430 \\u043F\\u0440\\u043E\\u0446\\u0435\\u0441\\u0441\\u0430 [{0}]\n+stream_transfer_consumer_title_attributes_read_failed = \\u0421\\u0431\\u043E\\u0439 \\u0447\\u0442\\u0435\\u043D\\u0438\\u044F \\u0430\\u0442\\u0440\\u0438\\u0431\\u0443\\u0442\\u043E\\u0432\n+stream_transfer_consumer_message_cannot_get_attributes_from = \\u041D\\u0435 \\u0443\\u0434\\u0430\\u0435\\u0442\\u0441\\u044F \\u043F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u0430\\u0442\\u0440\\u0438\\u0431\\u0443\\u0442\\u044B \\u043E\\u0442 {0}\n+stream_transfer_consumer_title_configuration_load_failed = \\u0421\\u0431\\u043E\\u0439 \\u0447\\u0442\\u0435\\u043D\\u0438\\u044F \\u043A\\u043E\\u043D\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u0438\n+stream_transfer_consumer_message_cannot_load_configuration = \\u041D\\u0435 \\u0443\\u0434\\u0430\\u0435\\u0442\\u0441\\u044F \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u043A\\u043E\\u043D\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u044E \\u0442\\u0440\\u0430\\u043D\\u0441\\u0444\\u0435\\u0440\\u0430"
  },
  {
    "sha": "83fcfb1c5d49a65acea10929c88f3dc920d62c69",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamConsumerSettings.java",
    "status": "modified",
    "additions": 71,
    "deletions": 3,
    "changes": 74,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamConsumerSettings.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamConsumerSettings.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamConsumerSettings.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -16,24 +16,35 @@\n  */\n package org.jkiss.dbeaver.tools.transfer.stream;\n \n+import org.jkiss.code.NotNull;\n+import org.jkiss.code.Nullable;\n+import org.jkiss.dbeaver.Log;\n+import org.jkiss.dbeaver.model.DBUtils;\n import org.jkiss.dbeaver.model.data.DBDDataFormatterProfile;\n+import org.jkiss.dbeaver.model.data.json.JSONUtils;\n import org.jkiss.dbeaver.model.runtime.DBRRunnableContext;\n+import org.jkiss.dbeaver.model.runtime.VoidProgressMonitor;\n+import org.jkiss.dbeaver.model.struct.DBSDataContainer;\n+import org.jkiss.dbeaver.model.struct.DBSObject;\n import org.jkiss.dbeaver.runtime.DBWorkbench;\n-import org.jkiss.dbeaver.tools.transfer.DTUtils;\n-import org.jkiss.dbeaver.tools.transfer.DataTransferSettings;\n-import org.jkiss.dbeaver.tools.transfer.IDataTransferSettings;\n+import org.jkiss.dbeaver.tools.transfer.*;\n import org.jkiss.dbeaver.tools.transfer.internal.DTMessages;\n import org.jkiss.dbeaver.utils.GeneralUtils;\n import org.jkiss.utils.CommonUtils;\n import org.jkiss.utils.StandardConstants;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n \n /**\n  * Stream transfer settings\n  */\n public class StreamConsumerSettings implements IDataTransferSettings {\n \n+    private static final Log log = Log.getLog(StreamConsumerSettings.class);\n+\n     public enum LobExtractType {\n         SKIP,\n         FILES,\n@@ -70,6 +81,7 @@\n     private boolean openFolderOnFinish = true;\n     private boolean executeProcessOnFinish = false;\n     private String finishProcessCommand = null;\n+    private final Map<DBSDataContainer, StreamMappingContainer> dataMappings = new LinkedHashMap<>();\n \n     public LobExtractType getLobExtractType() {\n         return lobExtractType;\n@@ -191,6 +203,20 @@ public void setFinishProcessCommand(String finishProcessCommand) {\n         this.finishProcessCommand = finishProcessCommand;\n     }\n \n+    @NotNull\n+    public Map<DBSDataContainer, StreamMappingContainer> getDataMappings() {\n+        return dataMappings;\n+    }\n+\n+    @Nullable\n+    public StreamMappingContainer getDataMapping(@NotNull DBSDataContainer container) {\n+        return dataMappings.get(container);\n+    }\n+\n+    public void addDataMapping(@NotNull StreamMappingContainer container) {\n+        dataMappings.put(container.getSource(), container);\n+    }\n+\n     public DBDDataFormatterProfile getFormatterProfile() {\n         return formatterProfile;\n     }\n@@ -227,6 +253,38 @@ public void loadSettings(DBRRunnableContext runnableContext, DataTransferSetting\n         if (!CommonUtils.isEmpty(formatterProfile)) {\n             this.formatterProfile = DBWorkbench.getPlatform().getDataFormatterRegistry().getCustomProfile(formatterProfile);\n         }\n+\n+        final Map<String, Object> mappings = JSONUtils.getObjectOrNull(settings, \"mappings\");\n+        if (mappings != null && !mappings.isEmpty()) {\n+            try {\n+                runnableContext.run(true, true, monitor -> {\n+                    final List<DataTransferPipe> pipes = dataTransferSettings.getDataPipes();\n+                    for (DataTransferPipe pipe : pipes) {\n+                        final IDataTransferProducer<?> producer = pipe.getProducer();\n+                        if (producer != null) {\n+                            final DBSObject object = producer.getDatabaseObject();\n+                            if (object instanceof DBSDataContainer) {\n+                                final DBSDataContainer container = (DBSDataContainer) object;\n+                                final Map<String, Object> containerSettings = JSONUtils.getObjectOrNull(mappings, DBUtils.getObjectFullId(container));\n+                                if (containerSettings != null) {\n+                                    final StreamMappingContainer mappingContainer = new StreamMappingContainer(container);\n+                                    mappingContainer.loadSettings(monitor, containerSettings);\n+                                    addDataMapping(mappingContainer);\n+                                }\n+                            }\n+                        }\n+                    }\n+                });\n+            } catch (InvocationTargetException e) {\n+                DBWorkbench.getPlatformUI().showError(\n+                    DTMessages.stream_transfer_consumer_title_configuration_load_failed,\n+                    DTMessages.stream_transfer_consumer_message_cannot_load_configuration,\n+                    e\n+                );\n+            } catch (InterruptedException e) {\n+                log.debug(\"Canceled by user\", e);\n+            }\n+        }\n     }\n \n     @Override\n@@ -255,6 +313,16 @@ public void saveSettings(Map<String, Object> settings) {\n         } else {\n             settings.put(\"formatterProfile\", \"\");\n         }\n+\n+        if (!dataMappings.isEmpty()) {\n+            final Map<String, Object> mappings = new LinkedHashMap<>();\n+            for (StreamMappingContainer container : dataMappings.values()) {\n+                final Map<String, Object> containerSettings = new LinkedHashMap<>();\n+                container.saveSettings(containerSettings);\n+                mappings.put(DBUtils.getObjectFullId(container.getSource()), containerSettings);\n+            }\n+            settings.put(\"mappings\", mappings);\n+        }\n     }\n \n     @Override"
  },
  {
    "sha": "bafad48c7a312283660325d4b9f0b7e728d4af13",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingAttribute.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingAttribute.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingAttribute.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingAttribute.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * DBeaver - Universal Database Manager\n+ * Copyright (C) 2010-2021 DBeaver Corp and others\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jkiss.dbeaver.tools.transfer.stream;\n+\n+import org.jkiss.code.NotNull;\n+import org.jkiss.dbeaver.model.*;\n+import org.jkiss.dbeaver.model.data.json.JSONUtils;\n+import org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;\n+import org.jkiss.dbeaver.model.struct.DBSAttributeBase;\n+import org.jkiss.utils.CommonUtils;\n+\n+import java.util.Map;\n+\n+public class StreamMappingAttribute implements DBPNamedObject, DBPImageProvider {\n+    private final StreamMappingContainer container;\n+    private final DBSAttributeBase attribute;\n+    private StreamMappingType mappingType;\n+\n+    public StreamMappingAttribute(@NotNull StreamMappingContainer container, @NotNull DBSAttributeBase attribute, @NotNull StreamMappingType mappingType) {\n+        this.container = container;\n+        this.attribute = attribute;\n+        this.mappingType = mappingType;\n+    }\n+\n+    public StreamMappingAttribute(@NotNull StreamMappingContainer container, @NotNull StreamMappingAttribute other) {\n+        this.container = container;\n+        this.attribute = other.attribute;\n+        this.mappingType = other.mappingType;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getName() {\n+        return DBUtils.getObjectFullName(attribute, DBPEvaluationContext.UI);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public DBPImage getObjectImage() {\n+        return DBValueFormatting.getObjectImage(attribute);\n+    }\n+\n+    @NotNull\n+    public StreamMappingContainer getContainer() {\n+        return container;\n+    }\n+\n+    @NotNull\n+    public DBSAttributeBase getAttribute() {\n+        return attribute;\n+    }\n+\n+    @NotNull\n+    public StreamMappingType getMappingType() {\n+        return mappingType;\n+    }\n+\n+    public void setMappingType(@NotNull StreamMappingType mappingType) {\n+        this.mappingType = mappingType;\n+    }\n+\n+    public void loadSettings(@NotNull DBRProgressMonitor monitor, @NotNull Map<String, Object> attributeSettings) {\n+        final String type = JSONUtils.getString(attributeSettings, \"mappingType\");\n+        if (CommonUtils.isNotEmpty(type)) {\n+            this.mappingType = CommonUtils.valueOf(StreamMappingType.class, type, StreamMappingType.unspecified);\n+        }\n+    }\n+\n+    public void saveSettings(@NotNull Map<String, Object> attributeSettings) {\n+        attributeSettings.put(\"mappingType\", mappingType.name());\n+    }\n+}"
  },
  {
    "sha": "f2b69e2bdfa3d9508d4b64c6100c6351388ad406",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingContainer.java",
    "status": "added",
    "additions": 139,
    "deletions": 0,
    "changes": 139,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingContainer.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingContainer.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingContainer.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -0,0 +1,139 @@\n+/*\n+ * DBeaver - Universal Database Manager\n+ * Copyright (C) 2010-2021 DBeaver Corp and others\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jkiss.dbeaver.tools.transfer.stream;\n+\n+import org.eclipse.osgi.util.NLS;\n+import org.jkiss.code.NotNull;\n+import org.jkiss.code.Nullable;\n+import org.jkiss.dbeaver.DBException;\n+import org.jkiss.dbeaver.model.*;\n+import org.jkiss.dbeaver.model.data.json.JSONUtils;\n+import org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;\n+import org.jkiss.dbeaver.model.struct.DBSAttributeBase;\n+import org.jkiss.dbeaver.model.struct.DBSDataContainer;\n+import org.jkiss.dbeaver.runtime.DBWorkbench;\n+import org.jkiss.dbeaver.tools.transfer.DTUtils;\n+import org.jkiss.dbeaver.tools.transfer.internal.DTMessages;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class StreamMappingContainer implements DBPNamedObject, DBPImageProvider {\n+    private final DBSDataContainer source;\n+    private final List<StreamMappingAttribute> attributes;\n+\n+    public StreamMappingContainer(@NotNull DBSDataContainer source) {\n+        this.source = source;\n+        this.attributes = new ArrayList<>();\n+    }\n+\n+    public StreamMappingContainer(@NotNull StreamMappingContainer other) {\n+        this.source = other.source;\n+        this.attributes = new ArrayList<>();\n+        for (StreamMappingAttribute attribute : other.attributes) {\n+            this.attributes.add(new StreamMappingAttribute(this, attribute));\n+        }\n+    }\n+\n+    public boolean isComplete() {\n+        boolean valid = false;\n+\n+        for (StreamMappingAttribute attribute : attributes) {\n+            if (attribute.getMappingType() == StreamMappingType.unspecified) {\n+                return false;\n+            }\n+\n+            if (attribute.getMappingType() == StreamMappingType.export) {\n+                valid = true;\n+            }\n+        }\n+\n+        return valid;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public DBPImage getObjectImage() {\n+        return DBIcon.TREE_TABLE;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getName() {\n+        return DBUtils.getObjectFullName(source, DBPEvaluationContext.UI);\n+    }\n+\n+    @NotNull\n+    public DBSDataContainer getSource() {\n+        return source;\n+    }\n+\n+    @Nullable\n+    public StreamMappingAttribute getAttribute(@NotNull DBSAttributeBase sourceAttribute) {\n+        for (StreamMappingAttribute mappingAttribute : attributes) {\n+            if (mappingAttribute.getAttribute().getName().equals(sourceAttribute.getName())) {\n+                return mappingAttribute;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @NotNull\n+    public List<StreamMappingAttribute> getAttributes(@NotNull DBRProgressMonitor monitor) {\n+        if (attributes.isEmpty()) {\n+            try {\n+                monitor.beginTask(\"Load attributes from '\" + getName() + \"'\", 1);\n+                for (DBSAttributeBase attribute : DTUtils.getAttributes(monitor, source, this)) {\n+                    attributes.add(new StreamMappingAttribute(this, attribute, StreamMappingType.unspecified));\n+                }\n+            } catch (DBException e) {\n+                DBWorkbench.getPlatformUI().showError(\n+                    DTMessages.stream_transfer_consumer_title_attributes_read_failed,\n+                    NLS.bind(DTMessages.stream_transfer_consumer_message_cannot_get_attributes_from, getName()),\n+                    e\n+                );\n+            } finally {\n+                monitor.done();\n+            }\n+        }\n+        return attributes;\n+    }\n+\n+    public void loadSettings(@NotNull DBRProgressMonitor monitor, @NotNull Map<String, Object> containerSettings) {\n+        final Map<String, Object> attributes = JSONUtils.getObject(containerSettings, \"attributes\");\n+        for (StreamMappingAttribute attribute : getAttributes(monitor)) {\n+            final Map<String, Object> attributeSettings = JSONUtils.getObjectOrNull(attributes, attribute.getName());\n+            if (attributeSettings != null) {\n+                attribute.loadSettings(monitor, attributeSettings);\n+            }\n+        }\n+    }\n+\n+    public void saveSettings(@NotNull Map<String, Object> containerSettings) {\n+        final Map<String, Object> attributesSettings = new LinkedHashMap<>();\n+        for (StreamMappingAttribute attribute : attributes) {\n+            final Map<String, Object> attributeSettings = new LinkedHashMap<>();\n+            attribute.saveSettings(attributeSettings);\n+            attributesSettings.put(attribute.getName(), attributeSettings);\n+        }\n+        containerSettings.put(\"attributes\", attributesSettings);\n+    }\n+}\n+"
  },
  {
    "sha": "3b828b15f73304aa7508edcd3837085e3adb642b",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingType.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingType.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingType.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamMappingType.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * DBeaver - Universal Database Manager\n+ * Copyright (C) 2010-2021 DBeaver Corp and others\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jkiss.dbeaver.tools.transfer.stream;\n+\n+public enum StreamMappingType {\n+    export,\n+    skip,\n+    unspecified\n+}"
  },
  {
    "sha": "394799bdfa6ffbdf6ced7a73fabf275bd7e8f93b",
    "filename": "plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamTransferConsumer.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamTransferConsumer.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamTransferConsumer.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamTransferConsumer.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -53,6 +53,7 @@\n import java.io.*;\n import java.nio.charset.StandardCharsets;\n import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n import java.util.Date;\n import java.util.Locale;\n import java.util.Map;\n@@ -121,6 +122,17 @@ public void fetchStart(DBCSession session, DBCResultSet resultSet, long offset,\n             columnBindings = DBUtils.makeLeafAttributeBindings(session, dataContainer, resultSet);\n         }\n \n+        final StreamMappingContainer mapping = settings.getDataMapping(dataContainer);\n+        if (mapping != null && mapping.isComplete()) {\n+            // That's a dirty way of doing things ...\n+            columnBindings = Arrays.stream(columnBindings)\n+                .filter(attr -> {\n+                    final StreamMappingAttribute attribute = mapping.getAttribute(attr);\n+                    return attribute == null || attribute.getMappingType() == StreamMappingType.export;\n+                })\n+                .toArray(DBDAttributeBinding[]::new);\n+        }\n+\n         if (!initialized) {\n             /*// For multi-streams export header only once\n             if (!settings.isUseSingleFile() || parameters.orderNumber == 0) */{"
  },
  {
    "sha": "8f2c16c807d565834900db89b01b124526e2f8b5",
    "filename": "plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreAttribute.java",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/Mu-L/dbeaver/blob/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreAttribute.java",
    "raw_url": "https://github.com/Mu-L/dbeaver/raw/e16d277f521990bf3af4536b3f989a8ed774a168/plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreAttribute.java",
    "contents_url": "https://api.github.com/repos/Mu-L/dbeaver/contents/plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreAttribute.java?ref=e16d277f521990bf3af4536b3f989a8ed774a168",
    "patch": "@@ -39,9 +39,7 @@\n import org.jkiss.dbeaver.model.struct.DBSTypedObjectExt4;\n import org.jkiss.utils.CommonUtils;\n \n-import java.util.Comparator;\n-import java.util.Set;\n-import java.util.TreeSet;\n+import java.util.*;\n \n /**\n  * PostgreAttribute\n@@ -421,7 +419,16 @@ public boolean allowCustomValue()\n         public Object[] getPossibleValues(PostgreAttribute column)\n         {\n             Set<PostgreDataType> types = new TreeSet<>(Comparator.comparing(JDBCDataType::getTypeName));\n-            types.addAll(column.getDatabase().getLocalDataTypes());\n+            try {\n+                Collection<PostgreSchema> schemas = column.getDatabase().getSchemas(new VoidProgressMonitor());\n+                for (PostgreSchema schema : schemas) {\n+                    List<PostgreDataType> dataTypes = schema.getDataTypeCache().getCachedObjects();\n+                    types.addAll(dataTypes);\n+                }\n+            } catch (DBException e) {\n+                log.debug(\"Can't get data types from database schemas\", e);\n+                types.addAll(column.getDatabase().getLocalDataTypes());\n+            }\n             return types.toArray(new PostgreDataType[0]);\n         }\n     }"
  }
]
