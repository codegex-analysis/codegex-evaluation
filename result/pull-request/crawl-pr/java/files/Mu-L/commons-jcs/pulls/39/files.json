[
  {
    "sha": "163e3f969799f416194d9777e732cd2771621b7b",
    "filename": ".github/workflows/maven.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/.github/workflows/maven.yml",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/.github/workflows/maven.yml",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/.github/workflows/maven.yml?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -25,15 +25,9 @@ jobs:\n     strategy:\n       matrix:\n         os: [ubuntu-latest, windows-latest]\n-        java: [ 8, 11, 15 ]\n+        java: [ 8, 11, 16 ]\n         experimental: [false]\n         include:\n-          - java: 16-ea\n-            os: ubuntu-latest\n-            experimental: true        \n-          - java: 16-ea\n-            os: windows-latest\n-            experimental: true        \n           - java: 17-ea\n             os: ubuntu-latest\n             experimental: true        "
  },
  {
    "sha": "a44197ef8c4be2f06d8c7e0985c022d181fbf87c",
    "filename": "commons-jcs-core/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/pom.xml",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/pom.xml",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/pom.xml?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -44,7 +44,7 @@\n     <dependency>\n       <groupId>org.apache.logging.log4j</groupId>\n       <artifactId>log4j-api</artifactId>\n-      <version>2.13.2</version>\n+      <version>2.14.0</version>\n       <optional>true</optional>\n     </dependency>\n \n@@ -190,7 +190,7 @@\n         <dependency>\n           <groupId>org.apache.logging.log4j</groupId>\n           <artifactId>log4j-core</artifactId>\n-          <version>2.13.2</version>\n+          <version>2.14.0</version>\n           <scope>test</scope>\n         </dependency>\n       </dependencies>"
  },
  {
    "sha": "d7c70790283ee0a48d0f1d2493a375eb8adc0305",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/AbstractDiskCache.java",
    "status": "modified",
    "additions": 15,
    "deletions": 26,
    "changes": 41,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/AbstractDiskCache.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/AbstractDiskCache.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/AbstractDiskCache.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -425,37 +425,26 @@ public final void removeAll()\n     public final void dispose()\n         throws IOException\n     {\n-        final Thread t = new Thread(() ->\n+        // wait up to 60 seconds for dispose and then quit if not done.\n+        long shutdownSpoolTime = this.diskCacheAttributes.getShutdownSpoolTimeLimit() * 1000L;\n+\n+        while (!cacheEventQueue.isEmpty() && shutdownSpoolTime > 0)\n         {\n-            boolean keepGoing = true;\n-            // long total = 0;\n-            final long interval = 100;\n-            while ( keepGoing )\n+            try\n             {\n-                keepGoing = !cacheEventQueue.isEmpty();\n-                try\n-                {\n-                    Thread.sleep( interval );\n-                    // total += interval;\n-                    // log.info( \"total = \" + total );\n-                }\n-                catch ( final InterruptedException e )\n-                {\n-                    break;\n-                }\n+                Thread.sleep(100);\n+                shutdownSpoolTime -= 100;\n+            }\n+            catch ( final InterruptedException e )\n+            {\n+                break;\n             }\n-            log.info( \"No longer waiting for event queue to finish: {0}\",\n-                    () -> cacheEventQueue.getStatistics() );\n-        });\n-        t.start();\n-        // wait up to 60 seconds for dispose and then quit if not done.\n-        try\n-        {\n-            t.join( this.diskCacheAttributes.getShutdownSpoolTimeLimit() * 1000L );\n         }\n-        catch ( final InterruptedException ex )\n+\n+        if (shutdownSpoolTime <= 0)\n         {\n-            log.error( \"The Shutdown Spool Process was interrupted.\", ex );\n+            log.info( \"No longer waiting for event queue to finish: {0}\",\n+                    () -> cacheEventQueue.getStatistics() );\n         }\n \n         log.info( \"In dispose, destroying event queue.\" );"
  },
  {
    "sha": "85fc988cab7cbe27d7390a6f0aa3cda759bcf251",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskCache.java",
    "status": "modified",
    "additions": 2,
    "deletions": 5,
    "changes": 7,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskCache.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskCache.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskCache.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -47,6 +47,7 @@\n import org.apache.commons.jcs3.engine.stats.behavior.IStats;\n import org.apache.commons.jcs3.log.Log;\n import org.apache.commons.jcs3.log.LogManager;\n+import org.apache.commons.jcs3.utils.serialization.StandardSerializer;\n \n /**\n  * There is one BlockDiskCache per region. It manages the key and data store.\n@@ -93,7 +94,7 @@\n      */\n     public BlockDiskCache( final BlockDiskCacheAttributes cacheAttributes )\n     {\n-        this( cacheAttributes, null );\n+        this( cacheAttributes, new StandardSerializer() );\n     }\n \n     /**\n@@ -581,10 +582,6 @@ protected void disposeInternal()\n                 log.debug(\"{0}: Closing files, base filename: {1}\", logCacheName, fileName );\n                 dataFile.close();\n                 // dataFile = null;\n-\n-                // TOD make a close\n-                // keyFile.close();\n-                // keyFile = null;\n             }\n             catch ( final IOException e )\n             {"
  },
  {
    "sha": "71b19212839282ed36cbcc72e6974825c51153ee",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskElementDescriptor.java",
    "status": "modified",
    "additions": 23,
    "deletions": 4,
    "changes": 27,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskElementDescriptor.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskElementDescriptor.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskElementDescriptor.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -24,6 +24,7 @@\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n import java.io.Serializable;\n+import java.util.Arrays;\n \n /**\n  * This represents an element on disk. This is used when we persist the keys. We only store the\n@@ -44,6 +45,27 @@\n     /** The array of block numbers */\n     private int[] blocks;\n \n+    /**\n+     * Default constructor\n+     */\n+    public BlockDiskElementDescriptor()\n+    {\n+        super();\n+    }\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param key the key\n+     * @param blocks the data\n+     */\n+    public BlockDiskElementDescriptor(K key, int[] blocks)\n+    {\n+        super();\n+        this.key = key;\n+        this.blocks = blocks;\n+    }\n+\n     /**\n      * @param key The key to set.\n      */\n@@ -92,10 +114,7 @@ public String toString()\n         buf.append( \"\\n blocks [\" );\n         if ( this.getBlocks() != null )\n         {\n-            for ( int i = 0; i < blocks.length; i++ )\n-            {\n-                buf.append( this.getBlocks()[i] );\n-            }\n+            Arrays.stream(this.getBlocks()).forEach(buf::append);\n         }\n         buf.append( \"]\" );\n         return buf.toString();"
  },
  {
    "sha": "a2fa63a51711ad5175badc552a076dbbff7eafcc",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskKeyStore.java",
    "status": "modified",
    "additions": 125,
    "deletions": 59,
    "changes": 184,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskKeyStore.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskKeyStore.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/disk/block/BlockDiskKeyStore.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -1,5 +1,7 @@\n package org.apache.commons.jcs3.auxiliary.disk.block;\n \n+import java.io.EOFException;\n+\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -19,15 +21,14 @@\n  * under the License.\n  */\n \n-import java.io.BufferedInputStream;\n-import java.io.BufferedOutputStream;\n-import java.io.EOFException;\n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.Files;\n+import java.nio.file.StandardOpenOption;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -37,9 +38,11 @@\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.commons.jcs3.auxiliary.disk.behavior.IDiskCacheAttributes.DiskLimitType;\n+import org.apache.commons.jcs3.engine.behavior.IElementSerializer;\n import org.apache.commons.jcs3.io.ObjectInputStreamClassLoaderAware;\n import org.apache.commons.jcs3.log.Log;\n import org.apache.commons.jcs3.log.LogManager;\n+import org.apache.commons.jcs3.utils.serialization.StandardSerializer;\n import org.apache.commons.jcs3.utils.struct.AbstractLRUMap;\n import org.apache.commons.jcs3.utils.struct.LRUMap;\n import org.apache.commons.jcs3.utils.timing.ElapsedTimer;\n@@ -221,6 +224,9 @@ private void subLengthFromCacheSize(final int[] value)\n     /** The file where we persist the keys */\n     private final File keyFile;\n \n+    /** The key file signature for new-style key files */\n+    private final static int KEY_FILE_SIGNATURE = 0x6A63734B; // \"jcsK\"\n+\n     /** The name to prefix log messages with. */\n     protected final String logCacheName;\n \n@@ -240,6 +246,11 @@ private void subLengthFromCacheSize(final int[] value)\n \n     private final int blockSize;\n \n+    /**\n+     * Serializer for reading and writing key file\n+     */\n+    private final IElementSerializer serializer;\n+\n     /**\n      * Set the configuration options.\n      * <p>\n@@ -258,6 +269,15 @@ public BlockDiskKeyStore(final BlockDiskCacheAttributes cacheAttributes, final B\n         this.diskLimitType = cacheAttributes.getDiskLimitType();\n         this.blockSize = cacheAttributes.getBlockSizeBytes();\n \n+        if (blockDiskCache == null)\n+        {\n+            this.serializer = new StandardSerializer();\n+        }\n+        else\n+        {\n+            this.serializer = blockDiskCache.getElementSerializer();\n+        }\n+\n         final File rootDirectory = cacheAttributes.getDiskPath();\n \n         log.info(\"{0}: Cache file root directory [{1}]\", logCacheName, rootDirectory);\n@@ -366,25 +386,66 @@ public boolean isEmpty()\n \n     /**\n      * Loads the keys from the .key file. The keys are stored individually on\n-     * disk. They are added one by one to an LRUMap..\n+     * disk. They are added one by one to an LRUMap.\n      */\n     protected void loadKeys()\n     {\n         log.info(\"{0}: Loading keys for {1}\", () -> logCacheName, () -> keyFile.toString());\n \n-        try\n+        // create a key map to use.\n+        initKeyMap();\n+\n+        final HashMap<K, int[]> keys = new HashMap<>();\n+\n+        synchronized (keyFile)\n         {\n-            // create a key map to use.\n-            initKeyMap();\n+            // Check file type\n+            int fileSignature = 0;\n+\n+            try (SeekableByteChannel bc = Files.newByteChannel(keyFile.toPath(),\n+                    StandardOpenOption.READ))\n+            {\n+                final ByteBuffer signature = ByteBuffer.allocate(4);\n+                bc.read(signature);\n+                signature.rewind();\n+                fileSignature = signature.getInt();\n+\n+                if (fileSignature == KEY_FILE_SIGNATURE)\n+                {\n+                    while (true)\n+                    {\n+                        final ByteBuffer bufferSize = ByteBuffer.allocate(4);\n+                        int read = bc.read(bufferSize);\n+                        if (read < 0)\n+                        {\n+                            break;\n+                        }\n+                        assert read == bufferSize.capacity();\n+                        bufferSize.rewind();\n \n-            final HashMap<K, int[]> keys = new HashMap<>();\n+                        final ByteBuffer serialized = ByteBuffer.allocate(bufferSize.getInt());\n+                        read = bc.read(serialized);\n+                        assert read == serialized.capacity();\n+                        serialized.rewind();\n \n-            synchronized (keyFile)\n+                        final BlockDiskElementDescriptor<K> descriptor =\n+                                serializer.deSerialize(serialized.array(), null);\n+                        if (descriptor != null)\n+                        {\n+                            keys.put(descriptor.getKey(), descriptor.getBlocks());\n+                        }\n+                    }\n+                }\n+            }\n+            catch (final IOException | ClassNotFoundException e)\n             {\n-                final FileInputStream fis = new FileInputStream(keyFile);\n-                final BufferedInputStream bis = new BufferedInputStream(fis, 65536);\n+                log.error(\"{0}: Problem loading keys for file {1}\", logCacheName, fileName, e);\n+            }\n \n-                try (ObjectInputStream ois = new ObjectInputStreamClassLoaderAware(bis, null))\n+            if (fileSignature != KEY_FILE_SIGNATURE)\n+            {\n+                try (final InputStream fis = Files.newInputStream(keyFile.toPath());\n+                     final ObjectInputStream ois = new ObjectInputStreamClassLoaderAware(fis, null))\n                 {\n                     while (true)\n                     {\n@@ -402,21 +463,21 @@ protected void loadKeys()\n                 {\n                     // nothing\n                 }\n-            }\n-\n-            if (!keys.isEmpty())\n-            {\n-                keyHash.putAll(keys);\n-\n-                log.debug(\"{0}: Found {1} in keys file.\", logCacheName, keys.size());\n-                log.info(\"{0}: Loaded keys from [{1}], key count: {2}; up to {3} will be available.\",\n-                        () -> logCacheName, () -> fileName, () -> keyHash.size(),\n-                        () -> maxKeySize);\n+                catch (final IOException | ClassNotFoundException e)\n+                {\n+                    log.error(\"{0}: Problem loading keys (old style) for file {1}\", logCacheName, fileName, e);\n+                }\n             }\n         }\n-        catch (final Exception e)\n+\n+        if (!keys.isEmpty())\n         {\n-            log.error(\"{0}: Problem loading keys for file {1}\", logCacheName, fileName, e);\n+            keyHash.putAll(keys);\n+\n+            log.debug(\"{0}: Found {1} in keys file.\", logCacheName, keys.size());\n+            log.info(\"{0}: Loaded keys from [{1}], key count: {2}; up to {3} will be available.\",\n+                    () -> logCacheName, () -> fileName, () -> keyHash.size(),\n+                    () -> maxKeySize);\n         }\n     }\n \n@@ -462,45 +523,50 @@ protected void reset()\n      */\n     protected void saveKeys()\n     {\n-        try\n-        {\n-            final ElapsedTimer timer = new ElapsedTimer();\n-            final int numKeys = keyHash.size();\n-            log.info(\"{0}: Saving keys to [{1}], key count [{2}]\", () -> logCacheName,\n-                    () -> this.keyFile.getAbsolutePath(), () -> numKeys);\n+        final ElapsedTimer timer = new ElapsedTimer();\n+        log.info(\"{0}: Saving keys to [{1}], key count [{2}]\", () -> logCacheName,\n+                () -> this.keyFile.getAbsolutePath(), () -> keyHash.size());\n \n-            synchronized (keyFile)\n+        synchronized (keyFile)\n+        {\n+            try (SeekableByteChannel bc = Files.newByteChannel(keyFile.toPath(),\n+                    StandardOpenOption.CREATE, StandardOpenOption.WRITE))\n             {\n-                final FileOutputStream fos = new FileOutputStream(keyFile);\n-                final BufferedOutputStream bos = new BufferedOutputStream(fos, 65536);\n+                if (!verify())\n+                {\n+                    throw new IOException(\"Inconsistent key file\");\n+                }\n+\n+                // Write signature to distinguish old format from new one\n+                ByteBuffer signature = ByteBuffer.allocate(4);\n+                signature.putInt(KEY_FILE_SIGNATURE).flip();\n+                bc.write(signature);\n \n-                try (ObjectOutputStream oos = new ObjectOutputStream(bos))\n+                // don't need to synchronize, since the underlying\n+                // collection makes a copy\n+                for (final Map.Entry<K, int[]> entry : keyHash.entrySet())\n                 {\n-                    if (!verify())\n-                    {\n-                        throw new IOException(\"Inconsistent key file\");\n-                    }\n-                    // don't need to synchronize, since the underlying\n-                    // collection makes a copy\n-                    for (final Map.Entry<K, int[]> entry : keyHash.entrySet())\n-                    {\n-                        final BlockDiskElementDescriptor<K> descriptor = new BlockDiskElementDescriptor<>();\n-                        descriptor.setKey(entry.getKey());\n-                        descriptor.setBlocks(entry.getValue());\n-                        // stream these out in the loop.\n-                        oos.writeUnshared(descriptor);\n-                    }\n+                    final BlockDiskElementDescriptor<K> descriptor =\n+                            new BlockDiskElementDescriptor<>(entry.getKey(),entry.getValue());\n+                    // stream these out in the loop.\n+                    byte[] serialized = serializer.serialize(descriptor);\n+                    final ByteBuffer buffer = ByteBuffer.allocate(4 + serialized.length);\n+                    buffer.putInt(serialized.length);\n+                    buffer.put(serialized);\n+                    buffer.flip();\n+                    final int written = bc.write(buffer);\n+                    assert written == buffer.capacity();\n                 }\n             }\n-\n-            log.info(\"{0}: Finished saving keys. It took {1} to store {2} keys. Key file length [{3}]\",\n-                    () -> logCacheName, () -> timer.getElapsedTimeString(), () -> numKeys,\n-                    () -> keyFile.length());\n-        }\n-        catch (final IOException e)\n-        {\n-            log.error(\"{0}: Problem storing keys.\", logCacheName, e);\n+            catch (final IOException e)\n+            {\n+                log.error(\"{0}: Problem storing keys.\", logCacheName, e);\n+            }\n         }\n+\n+        log.info(\"{0}: Finished saving keys. It took {1} to store {2} keys. Key file length [{3}]\",\n+                () -> logCacheName, () -> timer.getElapsedTimeString(), () -> keyHash.size(),\n+                () -> keyFile.length());\n     }\n \n     /**"
  },
  {
    "sha": "c1cec010274e2de11b5feb06ca71ea1d860130d4",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/lateral/LateralCacheNoWaitFacade.java",
    "status": "modified",
    "additions": 22,
    "deletions": 4,
    "changes": 26,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/lateral/LateralCacheNoWaitFacade.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/lateral/LateralCacheNoWaitFacade.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/lateral/LateralCacheNoWaitFacade.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -83,15 +83,33 @@\n     /**\n      * Constructs with the given lateral cache, and fires events to any listeners.\n      * <p>\n-     * @param noWaits\n-     * @param cattr\n+     * @param listener the cache listener\n+     * @param noWaits the array of noWaits\n+     * @param cattr the configuration\n+     *\n+     * @deprecated Use list constructor\n      */\n+    @Deprecated\n     public LateralCacheNoWaitFacade(final ILateralCacheListener<K, V> listener, final LateralCacheNoWait<K, V>[] noWaits, final ILateralCacheAttributes cattr )\n+    {\n+        this(listener, Arrays.asList(noWaits), cattr);\n+    }\n+\n+    /**\n+     * Constructs with the given lateral cache, and fires events to any listeners.\n+     * <p>\n+     * @param listener the cache listener\n+     * @param noWaits the list of noWaits\n+     * @param cattr the configuration\n+     */\n+    @SuppressWarnings(\"unchecked\") // No generic arrays in java\n+    public LateralCacheNoWaitFacade(final ILateralCacheListener<K, V> listener,\n+            final List<LateralCacheNoWait<K, V>> noWaits, final ILateralCacheAttributes cattr )\n     {\n         log.debug( \"CONSTRUCTING NO WAIT FACADE\" );\n         this.listener = listener;\n-        this.noWaits = noWaits;\n-        this.noWaitSet = new CopyOnWriteArraySet<>(Arrays.asList(noWaits));\n+        this.noWaits = noWaits.toArray(new LateralCacheNoWait[0]);\n+        this.noWaitSet = new CopyOnWriteArraySet<>(noWaits);\n         this.cacheName = cattr.getCacheName();\n         this.lateralCacheAttributes = cattr;\n     }"
  },
  {
    "sha": "7a4f35b672e6aabc82e6c022d9b8091b9cc681d5",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/lateral/socket/tcp/LateralTCPCacheFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 6,
    "changes": 8,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/lateral/socket/tcp/LateralTCPCacheFactory.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/lateral/socket/tcp/LateralTCPCacheFactory.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/lateral/socket/tcp/LateralTCPCacheFactory.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -34,7 +34,6 @@\n import org.apache.commons.jcs3.engine.CacheWatchRepairable;\n import org.apache.commons.jcs3.engine.ZombieCacheServiceNonLocal;\n import org.apache.commons.jcs3.engine.ZombieCacheWatch;\n-import org.apache.commons.jcs3.engine.behavior.ICache;\n import org.apache.commons.jcs3.engine.behavior.ICacheServiceNonLocal;\n import org.apache.commons.jcs3.engine.behavior.ICompositeCacheManager;\n import org.apache.commons.jcs3.engine.behavior.IElementSerializer;\n@@ -88,7 +87,7 @@\n            final ICacheEventLogger cacheEventLogger, final IElementSerializer elementSerializer )\n     {\n         final ITCPLateralCacheAttributes lac = (ITCPLateralCacheAttributes) iaca;\n-        final ArrayList<ICache<K, V>> noWaits = new ArrayList<>();\n+        final ArrayList<LateralCacheNoWait<K, V>> noWaits = new ArrayList<>();\n \n         // pairs up the tcp servers and set the tcpServer value and\n         // get the manager and then get the cache\n@@ -115,11 +114,8 @@\n         final ILateralCacheListener<K, V> listener = createListener( lac, cacheMgr );\n \n         // create the no wait facade.\n-        @SuppressWarnings(\"unchecked\") // No generic arrays in java\n-        final\n-        LateralCacheNoWait<K, V>[] lcnwArray = noWaits.toArray( new LateralCacheNoWait[0] );\n         final LateralCacheNoWaitFacade<K, V> lcnwf =\n-            new LateralCacheNoWaitFacade<>(listener, lcnwArray, lac );\n+            new LateralCacheNoWaitFacade<>(listener, noWaits, lac);\n \n         // create udp discovery if available.\n         createDiscoveryService( lac, lcnwf, cacheMgr, cacheEventLogger, elementSerializer );"
  },
  {
    "sha": "fbb3de269d291bce1708bde4f14f0b4b787f0451",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/remote/RemoteUtils.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/remote/RemoteUtils.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/remote/RemoteUtils.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/auxiliary/remote/RemoteUtils.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -19,14 +19,15 @@\n  * under the License.\n  */\n \n-import java.io.File;\n-import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.InetSocketAddress;\n import java.net.ServerSocket;\n import java.net.Socket;\n import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.rmi.RemoteException;\n import java.rmi.registry.LocateRegistry;\n import java.rmi.registry.Registry;\n@@ -127,10 +128,11 @@ public static Properties loadProps(final String propFile)\n \n         if (null == is) // not found in class path\n         {\n-            if (new File(propFile).exists())\n+            Path propPath = Paths.get(propFile);\n+            if (Files.exists(propPath))\n             {\n                 // file found\n-                is = new FileInputStream(propFile);\n+                is = Files.newInputStream(propPath);\n             }\n             else\n             {"
  },
  {
    "sha": "9e0f5e3585b5eecc497621d625bcccd1a3d5b091",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/CacheEventQueue.java",
    "status": "modified",
    "additions": 8,
    "deletions": 14,
    "changes": 22,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/CacheEventQueue.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/CacheEventQueue.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/CacheEventQueue.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -1,5 +1,7 @@\n package org.apache.commons.jcs3.engine;\n \n+import java.util.concurrent.ExecutorService;\n+\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -21,8 +23,8 @@\n \n import org.apache.commons.jcs3.engine.behavior.ICacheListener;\n import org.apache.commons.jcs3.utils.threadpool.PoolConfiguration;\n-import org.apache.commons.jcs3.utils.threadpool.ThreadPoolManager;\n import org.apache.commons.jcs3.utils.threadpool.PoolConfiguration.WhenBlockedPolicy;\n+import org.apache.commons.jcs3.utils.threadpool.ThreadPoolManager;\n \n /**\n  * An event queue is used to propagate ordered cache events to one and only one target listener.\n@@ -61,25 +63,17 @@ public CacheEventQueue( final ICacheListener<K, V> listener, final long listener\n     }\n \n     /**\n-     * Initializes the queue.\n+     * Create the thread pool.\n      * <p>\n-     * @param listener\n-     * @param listenerId\n-     * @param cacheName\n-     * @param maxFailure\n-     * @param waitBeforeRetry\n      * @param threadPoolName\n      */\n     @Override\n-    protected void initialize( final ICacheListener<K, V> listener, final long listenerId, final String cacheName, final int maxFailure,\n-                            final int waitBeforeRetry, final String threadPoolName )\n+    protected ExecutorService createPool(final String threadPoolName)\n     {\n-        super.initialize(listener, listenerId, cacheName, maxFailure, waitBeforeRetry);\n-\n         // create a default pool with one worker thread to mimic the SINGLE queue behavior\n-        pool = ThreadPoolManager.getInstance().createPool(\n-        \t\tnew PoolConfiguration(false, 0, 1, 0, getWaitToDieMillis(), WhenBlockedPolicy.RUN, 0),\n-        \t\t\"CacheEventQueue.QProcessor-\" + getCacheName());\n+        return ThreadPoolManager.getInstance().createPool(\n+                new PoolConfiguration(false, 0, 1, 1, getWaitToDieMillis(), WhenBlockedPolicy.BLOCK, 1),\n+                \"CacheEventQueue.QProcessor-\" + getCacheName());\n     }\n \n     /**"
  },
  {
    "sha": "24b709db1a4822800efe2cbc29b0d542ca4845b8",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/PooledCacheEventQueue.java",
    "status": "modified",
    "additions": 13,
    "deletions": 4,
    "changes": 17,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/PooledCacheEventQueue.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/PooledCacheEventQueue.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/PooledCacheEventQueue.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -89,16 +89,26 @@ protected void initialize( final ICacheListener<K, V> listener, final long liste\n     {\n         super.initialize(listener, listenerId, cacheName, maxFailure, waitBeforeRetry);\n \n-        // this will share the same pool with other event queues by default.\n-        pool = ThreadPoolManager.getInstance().getExecutorService(\n-                (threadPoolName == null) ? \"cache_event_queue\" : threadPoolName );\n+        pool = createPool(threadPoolName);\n \n         if (pool instanceof ThreadPoolExecutor)\n         {\n         \tqueue = ((ThreadPoolExecutor) pool).getQueue();\n         }\n     }\n \n+    /**\n+     * Create the thread pool.\n+     * <p>\n+     * @param threadPoolName\n+     */\n+    protected ExecutorService createPool(final String threadPoolName)\n+    {\n+        // this will share the same pool with other event queues by default.\n+        return ThreadPoolManager.getInstance().getExecutorService(\n+                (threadPoolName == null) ? \"cache_event_queue\" : threadPoolName );\n+    }\n+\n     /**\n      * @return the queue type\n      */\n@@ -117,7 +127,6 @@ public synchronized void destroy()\n         if ( isWorking() )\n         {\n             setWorking(false);\n-            pool.shutdownNow();\n             log.info( \"Cache event queue destroyed: {0}\", this );\n         }\n     }"
  },
  {
    "sha": "9785e8f218f706a89c054ed140dcbb16c51c124d",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/control/CompositeCacheManager.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/control/CompositeCacheManager.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/control/CompositeCacheManager.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/control/CompositeCacheManager.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -47,12 +47,12 @@\n import org.apache.commons.jcs3.engine.CompositeCacheAttributes;\n import org.apache.commons.jcs3.engine.ElementAttributes;\n import org.apache.commons.jcs3.engine.behavior.ICache;\n+import org.apache.commons.jcs3.engine.behavior.ICacheType.CacheType;\n import org.apache.commons.jcs3.engine.behavior.ICompositeCacheAttributes;\n import org.apache.commons.jcs3.engine.behavior.ICompositeCacheManager;\n import org.apache.commons.jcs3.engine.behavior.IElementAttributes;\n import org.apache.commons.jcs3.engine.behavior.IProvideScheduler;\n import org.apache.commons.jcs3.engine.behavior.IShutdownObserver;\n-import org.apache.commons.jcs3.engine.behavior.ICacheType.CacheType;\n import org.apache.commons.jcs3.engine.control.event.ElementEventQueue;\n import org.apache.commons.jcs3.engine.control.event.behavior.IElementEventQueue;\n import org.apache.commons.jcs3.engine.stats.CacheStats;\n@@ -595,12 +595,6 @@ public void shutDown()\n                 this.elementEventQueue.dispose();\n             }\n \n-            // shutdown all scheduled jobs\n-            this.scheduledExecutor.shutdownNow();\n-\n-            // shutdown all thread pools\n-            ThreadPoolManager.dispose();\n-\n             // notify any observers\n             IShutdownObserver observer = null;\n             while ((observer = shutdownObservers.poll()) != null)\n@@ -647,6 +641,12 @@ public void shutDown()\n             auxiliaryAttributeRegistry.clear();\n             auxiliaryFactoryRegistry.clear();\n \n+            // shutdown all scheduled jobs\n+            this.scheduledExecutor.shutdownNow();\n+\n+            // shutdown all thread pools\n+            ThreadPoolManager.dispose();\n+\n             if (shutdownHook != null)\n             {\n                 try"
  },
  {
    "sha": "332e994bd978dfc7ef9ea7bec8ab8cb245ebbf9f",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/control/event/ElementEventQueue.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/control/event/ElementEventQueue.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/control/event/ElementEventQueue.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/engine/control/event/ElementEventQueue.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -68,8 +68,8 @@ public void dispose()\n     {\n         if (destroyed.compareAndSet(false, true))\n         {\n-            // shut down the QueueProcessor\n-            queueProcessor.shutdownNow();\n+            // Pool will be shut down by the ThreadPoolManager\n+            // queueProcessor.shutdownNow();\n             log.info( \"Element event queue destroyed: {0}\", this );\n         }\n     }"
  },
  {
    "sha": "66a575445ddf1a2bcfd4f11bab8b38baf71ab972",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/discovery/UDPDiscoveryReceiver.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/discovery/UDPDiscoveryReceiver.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/discovery/UDPDiscoveryReceiver.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/discovery/UDPDiscoveryReceiver.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -345,7 +345,6 @@ public void shutdown()\n             {\n                 mSocket.leaveGroup( multicastAddress );\n                 mSocket.close();\n-                pooledExecutor.shutdownNow();\n             }\n             catch ( final IOException e )\n             {"
  },
  {
    "sha": "01eecafda28e09e957a3269d3800f69b23db2f37",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/serialization/EncryptingSerializer.java",
    "status": "modified",
    "additions": 89,
    "deletions": 22,
    "changes": 111,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/serialization/EncryptingSerializer.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/serialization/EncryptingSerializer.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/serialization/EncryptingSerializer.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -20,34 +20,43 @@\n  */\n \n import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.security.MessageDigest;\n+import java.nio.ByteBuffer;\n import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.spec.InvalidKeySpecException;\n \n import javax.crypto.Cipher;\n+import javax.crypto.SecretKey;\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.GCMParameterSpec;\n+import javax.crypto.spec.PBEKeySpec;\n import javax.crypto.spec.SecretKeySpec;\n \n import org.apache.commons.jcs3.engine.behavior.IElementSerializer;\n-import org.apache.commons.jcs3.log.Log;\n-import org.apache.commons.jcs3.log.LogManager;\n \n /**\n  * Performs serialization and de-serialization. It encrypts and decrypts the\n  * value.\n  */\n public class EncryptingSerializer extends StandardSerializer\n {\n-    /** The logger */\n-    private static final Log log = LogManager.getLog( EncryptingSerializer.class );\n-\n     private static final String DEFAULT_CIPHER = \"AES/ECB/PKCS5Padding\";\n+    private static final int TAG_LENGTH = 128;\n+    private static final int IV_LENGTH = 12;\n+    private static final int SALT_LENGTH = 16;\n \n     /** The pre-shared key */\n-    private SecretKeySpec secretKey;\n+    private String psk;\n \n     /** The cipher transformation */\n     private String cipherTransformation = DEFAULT_CIPHER;\n \n+    /** The random source */\n+    private final SecureRandom secureRandom;\n+\n+    /** The secret-key factory */\n+    private final SecretKeyFactory secretKeyFactory;\n+\n     /** Wrapped serializer */\n     private final IElementSerializer serializer;\n \n@@ -68,6 +77,16 @@ public EncryptingSerializer()\n     public EncryptingSerializer(IElementSerializer serializer)\n     {\n         this.serializer = serializer;\n+\n+        try\n+        {\n+            this.secureRandom = SecureRandom.getInstanceStrong();\n+            this.secretKeyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n+        }\n+        catch (NoSuchAlgorithmException e)\n+        {\n+            throw new RuntimeException(\"Could not set up encryption tools\", e);\n+        }\n     }\n \n     /**\n@@ -77,16 +96,7 @@ public EncryptingSerializer(IElementSerializer serializer)\n      */\n     public void setPreSharedKey(String psk)\n     {\n-        try\n-        {\n-            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n-            byte[] key = sha.digest(psk.getBytes(StandardCharsets.UTF_8));\n-            secretKey = new SecretKeySpec(key, 0, 16, \"AES\");\n-        }\n-        catch (NoSuchAlgorithmException e)\n-        {\n-            log.error(\"Cannot set pre-shared key\", e);\n-        }\n+        this.psk = psk;\n     }\n \n     /**\n@@ -100,13 +110,48 @@ public void setAesCipherTransformation(String transformation)\n         this.cipherTransformation = transformation;\n     }\n \n+    private byte[] getRandomBytes(int length) throws NoSuchAlgorithmException\n+    {\n+        byte[] bytes = new byte[length];\n+        secureRandom.nextBytes(bytes);\n+\n+        return bytes;\n+    }\n+\n+    private SecretKey createSecretKey(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException\n+    {\n+        /* Derive the key, given password and salt. */\n+        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 1000, 256);\n+        SecretKey tmp = secretKeyFactory.generateSecret(spec);\n+        return new SecretKeySpec(tmp.getEncoded(), \"AES\");\n+    }\n+\n     private byte[] encrypt(byte[] source) throws IOException\n     {\n         try\n         {\n+            byte[] salt = getRandomBytes(SALT_LENGTH);\n+            byte[] iv = getRandomBytes(IV_LENGTH);\n+\n+            SecretKey secretKey = createSecretKey(psk, salt);\n             Cipher cipher = Cipher.getInstance(cipherTransformation);\n-            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n-            return cipher.doFinal(source);\n+            if (cipher.getAlgorithm().startsWith(\"AES/GCM\"))\n+            {\n+                cipher.init(Cipher.ENCRYPT_MODE, secretKey, new GCMParameterSpec(TAG_LENGTH, iv));\n+            }\n+            else\n+            {\n+                cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n+            }\n+\n+            byte[] encrypted = cipher.doFinal(source);\n+\n+            // join initial vector, salt and encrypted data for later decryption\n+            return ByteBuffer.allocate(IV_LENGTH + SALT_LENGTH + encrypted.length)\n+                    .put(iv)\n+                    .put(salt)\n+                    .put(encrypted)\n+                    .array();\n         }\n         catch (Exception e)\n         {\n@@ -118,9 +163,31 @@ public void setAesCipherTransformation(String transformation)\n     {\n         try\n         {\n+            // split data in initial vector, salt and encrypted data\n+            ByteBuffer wrapped = ByteBuffer.wrap(source);\n+\n+            byte[] iv = new byte[IV_LENGTH];\n+            wrapped.get(iv);\n+\n+            byte[] salt = new byte[SALT_LENGTH];\n+            wrapped.get(salt);\n+\n+            byte[] encrypted = new byte[wrapped.remaining()];\n+            wrapped.get(encrypted);\n+\n+            SecretKey secretKey = createSecretKey(psk, salt);\n             Cipher cipher = Cipher.getInstance(cipherTransformation);\n-            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n-            return cipher.doFinal(source);\n+\n+            if (cipher.getAlgorithm().startsWith(\"AES/GCM\"))\n+            {\n+                cipher.init(Cipher.DECRYPT_MODE, secretKey, new GCMParameterSpec(TAG_LENGTH, iv));\n+            }\n+            else\n+            {\n+                cipher.init(Cipher.DECRYPT_MODE, secretKey);\n+            }\n+\n+            return cipher.doFinal(encrypted);\n         }\n         catch (Exception e)\n         {"
  },
  {
    "sha": "c1c23b8f2abb27e35d9b74f37a1ceb46162a7e5e",
    "filename": "commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/serialization/StandardSerializer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/serialization/StandardSerializer.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/serialization/StandardSerializer.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/main/java/org/apache/commons/jcs3/utils/serialization/StandardSerializer.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -51,7 +51,7 @@\n \n         try (ObjectOutputStream oos = new ObjectOutputStream(baos))\n         {\n-            oos.writeObject(obj);\n+            oos.writeUnshared(obj);\n         }\n \n         return baos.toByteArray();"
  },
  {
    "sha": "ca34e020a48106b74417b3fcf7663d076eb1b278",
    "filename": "commons-jcs-core/src/test/java/org/apache/commons/jcs3/auxiliary/disk/indexed/IndexDiskCacheUnitTestAbstract.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/test/java/org/apache/commons/jcs3/auxiliary/disk/indexed/IndexDiskCacheUnitTestAbstract.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/test/java/org/apache/commons/jcs3/auxiliary/disk/indexed/IndexDiskCacheUnitTestAbstract.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/test/java/org/apache/commons/jcs3/auxiliary/disk/indexed/IndexDiskCacheUnitTestAbstract.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -960,7 +960,7 @@ public void oneLoadFromDisk() throws Exception\n         final IndexedDiskCacheAttributes cattr = getCacheAttributes();\n         cattr.setCacheName(cacheName);\n         cattr.setMaxKeySize(100);\n-        cattr.setDiskPath(\"target/test-sandbox/BlockDiskCacheUnitTest\");\n+        cattr.setDiskPath(\"target/test-sandbox/IndexDiskCacheUnitTest\");\n         IndexedDiskCache<String, String> diskCache = new IndexedDiskCache<>(cattr);\n \n         // DO WORK"
  },
  {
    "sha": "2c2537e0a91bb48e1444b102e7fdace3c261d0e0",
    "filename": "commons-jcs-core/src/test/java/org/apache/commons/jcs3/utils/serialization/EncryptingSerializerUnitTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 5,
    "changes": 47,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/test/java/org/apache/commons/jcs3/utils/serialization/EncryptingSerializerUnitTest.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/test/java/org/apache/commons/jcs3/utils/serialization/EncryptingSerializerUnitTest.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/test/java/org/apache/commons/jcs3/utils/serialization/EncryptingSerializerUnitTest.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -1,7 +1,5 @@\n package org.apache.commons.jcs3.utils.serialization;\n \n-import java.io.IOException;\n-\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -21,6 +19,10 @@\n  * under the License.\n  */\n \n+import static org.junit.Assert.assertThrows;\n+\n+import java.io.IOException;\n+\n import junit.framework.TestCase;\n \n /**\n@@ -36,11 +38,10 @@ protected void setUp() throws Exception\n     {\n         this.serializer = new EncryptingSerializer();\n         this.serializer.setPreSharedKey(\"my_secret_key\");\n-        this.serializer.setAesCipherTransformation(\"AES\");\n     }\n \n     /**\n-     * Verify that we don't get any erorrs for null input.\n+     * Verify that we don't get any errors for null input.\n      * <p>\n      * @throws ClassNotFoundException\n      * @throws IOException\n@@ -67,12 +68,48 @@ public void testSimpleBackAndForth()\n     {\n         // DO WORK\n         final String before = \"adsfdsafdsafdsafdsafdsafdsafdsagfdsafdsafdsfdsafdsafsa333 31231\";\n-        final String after = (String) serializer.deSerialize( serializer.serialize( before ), null );\n+        final String after = serializer.deSerialize( serializer.serialize( before ), null );\n \n         // VERIFY\n         assertEquals( \"Before and after should be the same.\", before, after );\n     }\n \n+    /**\n+     * Test simple back and forth with a string.\n+     * <p>\n+     * ))&lt;=&gt;((\n+     * <p>\n+     * @throws Exception on error\n+     */\n+    public void testGCMBackAndForth()\n+        throws Exception\n+    {\n+        this.serializer.setAesCipherTransformation(\"AES/GCM/NoPadding\");\n+\n+        // DO WORK\n+        final String before = \"adsfdsafdsafdsafdsafdsafdsafdsagfdsafdsafdsfdsafdsafsa333 31231\";\n+        final String after = serializer.deSerialize( serializer.serialize( before ), null );\n+\n+        // VERIFY\n+        assertEquals( \"Before and after should be the same.\", before, after );\n+    }\n+\n+    /**\n+     * Test different key.\n+     * <p>\n+     * @throws Exception on error\n+     */\n+    public void testDifferentKey()\n+        throws Exception\n+    {\n+        // DO WORK\n+        final String before = \"adsfdsafdsafdsafdsafdsafdsafdsagfdsafdsafdsfdsafdsafsa333 31231\";\n+        byte[] serialized = serializer.serialize(before);\n+        serializer.setPreSharedKey(\"another_key\");\n+\n+        assertThrows(IOException.class, () -> serializer.deSerialize(serialized, null));\n+    }\n+\n     /**\n      * Test serialization with a null object. Verify that we don't get an error.\n      * <p>"
  },
  {
    "sha": "85242e29bdb452be948622b76aa0eb9047dd8dd7",
    "filename": "commons-jcs-core/src/test/java/org/apache/commons/jcs3/utils/serialization/SerializerUnitTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 2,
    "changes": 24,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/test/java/org/apache/commons/jcs3/utils/serialization/SerializerUnitTest.java",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/test/java/org/apache/commons/jcs3/utils/serialization/SerializerUnitTest.java",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/test/java/org/apache/commons/jcs3/utils/serialization/SerializerUnitTest.java?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -61,6 +61,12 @@ public void setUp()\n         JCS.setConfigFilename( \"/TestElementSerializer.ccf\" );\n     }\n \n+    @Override\n+    protected void tearDown() throws Exception\n+    {\n+        JCS.shutdown();\n+    }\n+\n     /**\n      * Verify that object reading and writing works\n      * <p>\n@@ -70,30 +76,44 @@ public void testReadWrite()\n         throws Exception\n     {\n         final int count = 500; // 100 fit in memory\n+        // CompressingSerializer\n         final CacheAccess<String, String> jcs1 = JCS.getInstance( \"blockRegion1\" );\n \n         for ( int i = 0; i < count; i++ )\n         {\n             jcs1.put( \"key:\" + i, \"data\" + i );\n         }\n \n-        for ( int i = count-1; i >= 0; i-- )\n+        for ( int i = 0; i < count; i++ )\n         {\n             final String res = jcs1.get( \"key:\" + i );\n             assertNotNull( \"[key:\" + i + \"] should not be null, \" + jcs1.getStats(), res );\n         }\n \n+        // EncryptingSerializer\n         final CacheAccess<String, String> jcs2 = JCS.getInstance( \"blockRegion2\" );\n \n         for ( int i = 0; i < count; i++ )\n         {\n             jcs2.put( \"key:\" + i, \"data\" + i );\n         }\n \n-        for ( int i = count-1; i >= 0; i-- )\n+        for ( int i = 0; i < count; i++ )\n         {\n             final String res = jcs2.get( \"key:\" + i );\n             assertNotNull( \"[key:\" + i + \"] should not be null, \" + jcs2.getStats(), res );\n         }\n+\n+        JCS.shutdown();\n+\n+        // Re-init\n+        // EncryptingSerializer\n+        final CacheAccess<String, String> jcs3 = JCS.getInstance( \"blockRegion2\" );\n+\n+        for ( int i = 0; i < count; i++ )\n+        {\n+            final String res = jcs3.get( \"key:\" + i );\n+            assertNotNull( \"[key:\" + i + \"] should not be null, \" + jcs3.getStats(), res );\n+        }\n     }\n }"
  },
  {
    "sha": "dbf5ec0886b5e33fffd3358d4d33f2e1fbe4b1fb",
    "filename": "commons-jcs-core/src/test/test-conf/TestElementSerializer.ccf",
    "status": "modified",
    "additions": 5,
    "deletions": 22,
    "changes": 27,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/test/test-conf/TestElementSerializer.ccf",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-core/src/test/test-conf/TestElementSerializer.ccf",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-core/src/test/test-conf/TestElementSerializer.ccf?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -54,33 +54,16 @@ jcs.auxiliary.blockDiskCache.serializer=org.apache.commons.jcs3.utils.serializat\n jcs.auxiliary.blockDiskCache2=org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCacheFactory\n jcs.auxiliary.blockDiskCache2.attributes=org.apache.commons.jcs3.auxiliary.disk.block.BlockDiskCacheAttributes\n jcs.auxiliary.blockDiskCache2.attributes.DiskPath=target/test-sandbox/block-disk-cache2\n+jcs.auxiliary.blockDiskCache2.attributes.EventQueueType=POOLED\n jcs.auxiliary.blockDiskCache2.serializer=org.apache.commons.jcs3.utils.serialization.EncryptingSerializer\n jcs.auxiliary.blockDiskCache2.serializer.attributes.preSharedKey=my_secret\n-\n-# #############################################################\n-# ################# THREAD POOL CONFIGURATION ###################\n-# Default thread pool config\n-thread_pool.default.boundarySize=2000\n-thread_pool.default.maximumPoolSize=150\n-thread_pool.default.minimumPoolSize=4\n-thread_pool.default.keepAliveTime=350000\n-# RUN ABORT WAIT BLOCK DISCARDOLDEST\n-thread_pool.default.whenBlockedPolicy=RUN\n-thread_pool.default.startUpSize=4\n+jcs.auxiliary.blockDiskCache2.serializer.attributes.aesCipherTransformation=AES/GCM/NoPadding\n \n # Default Cache Event Queue thread pool config, used by auxiliaries\n thread_pool.cache_event_queue.useBoundary=false\n-# thread_pool.cache_event_queue.boundarySize=2000\n-# thread_pool.cache_event_queue.maximumPoolSize=10\n+#thread_pool.cache_event_queue.boundarySize=2000\n+thread_pool.cache_event_queue.maximumPoolSize=10\n thread_pool.cache_event_queue.minimumPoolSize=5\n thread_pool.cache_event_queue.keepAliveTime=3500\n-# thread_pool.cache_event_queue.whenBlockedPolicy=RUN\n+thread_pool.cache_event_queue.whenBlockedPolicy=BLOCK\n thread_pool.cache_event_queue.startUpSize=5\n-\n-# Remote cache client thread pool config\n-thread_pool.remote_cache_client.boundarySize=75\n-thread_pool.remote_cache_client.maximumPoolSize=150\n-thread_pool.remote_cache_client.minimumPoolSize=4\n-thread_pool.remote_cache_client.keepAliveTime=350000\n-thread_pool.remote_cache_client.whenBlockedPolicy=RUN\n-thread_pool.remote_cache_client.startUpSize=4"
  },
  {
    "sha": "f5f11f1bd9e99297df134ffc466a41e6b6cf8f02",
    "filename": "commons-jcs-dist/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-dist/pom.xml",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/commons-jcs-dist/pom.xml",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/commons-jcs-dist/pom.xml?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -83,7 +83,7 @@\n           <plugin>\n             <groupId>org.apache.maven.plugins</groupId>\n             <artifactId>maven-assembly-plugin</artifactId>\n-            <version>3.1.1</version>\n+            <version>3.3.0</version>\n             <executions>\n               <execution>\n                 <id>create-distribution</id>"
  },
  {
    "sha": "c0a43736751291d2ce4da05d1d3324abd44cb469",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/pom.xml",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/pom.xml",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/pom.xml?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -21,7 +21,7 @@\n   <parent>\n     <groupId>org.apache.commons</groupId>\n     <artifactId>commons-parent</artifactId>\n-    <version>50</version>\n+    <version>52</version>\n   </parent>\n \n   <artifactId>commons-jcs3</artifactId>\n@@ -307,7 +307,7 @@\n       <dependency>\n         <groupId>org.apache.commons</groupId>\n         <artifactId>commons-dbcp2</artifactId>\n-        <version>2.7.0</version>\n+        <version>2.8.0</version>\n         <optional>true</optional>\n       </dependency>\n \n@@ -357,7 +357,7 @@\n       <dependency>\n         <groupId>org.apache.httpcomponents</groupId>\n         <artifactId>httpclient</artifactId>\n-        <version>4.5.12</version>\n+        <version>4.5.13</version>\n         <optional>true</optional>\n       </dependency>\n "
  },
  {
    "sha": "f5fdbb235c4c1f9ff77f0cd05994babeb1e1fb6d",
    "filename": "src/changes/changes.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/src/changes/changes.xml",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/src/changes/changes.xml",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/src/changes/changes.xml?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -20,6 +20,17 @@\n \t</properties>\n \t<body>\n         <release version=\"3.1\" date=\"20YY-MM-DD\">\n+            <action dev=\"tv\" type=\"update\">\n+               IMPORTANT CHANGE\n+               Use IElementSerializer for Block disk key storage\n+            </action>\n+            <action dev=\"tv\" type=\"update\">\n+               IMPORTANT CHANGE\n+               Use IElementSerializer for UDP service discovery\n+            </action>\n+            <action dev=\"tv\" type=\"fix\">\n+               Fix shutdown race conditions\n+            </action>\n             <action dev=\"tv\" type=\"add\">\n                Add EncryptingSerializer and some documentation\n             </action>"
  },
  {
    "sha": "1b14d66dff2e14af5aed65168ef0d0f549b0aa37",
    "filename": "xdocs/ElementSerializers.xml",
    "status": "modified",
    "additions": 10,
    "deletions": 4,
    "changes": 14,
    "blob_url": "https://github.com/Mu-L/commons-jcs/blob/794ad88d5834fb7567be4d0af29658155e1eeda5/xdocs/ElementSerializers.xml",
    "raw_url": "https://github.com/Mu-L/commons-jcs/raw/794ad88d5834fb7567be4d0af29658155e1eeda5/xdocs/ElementSerializers.xml",
    "contents_url": "https://api.github.com/repos/Mu-L/commons-jcs/contents/xdocs/ElementSerializers.xml?ref=794ad88d5834fb7567be4d0af29658155e1eeda5",
    "patch": "@@ -56,8 +56,10 @@ jcs.auxiliary.blockDiskCache.serializer=org.apache.commons.jcs3.utils.serializat\n                 a Java object. The class can also be used as a wrapper around an\n                 arbitrary class implementing <code>IElementSerializer</code>.</p>\n \n-            <p> The implementation uses a symmetrical pre-shared key for encrypting\n-                and decrypting the data.</p>\n+            <p> The implementation uses a symmetrical pre-shared key phrase for \n+                encrypting and decrypting the data. The key is salted separately\n+                for each object and the salt is stored together with the serialized\n+                data.</p>\n                 \n             <p> The configuration for a typical application looks like this:</p>\n             <source>\n@@ -71,10 +73,14 @@ jcs.auxiliary.blockDiskCache2.serializer.attributes.preSharedKey=my_secret\n                 ]]>\n             </source>\n             \n-            <p> The AES cipher transformation to be used can be configured like this:</p>\n+            <p> The AES cipher transformation default is AES/ECB/PKCS5Padding as this \n+                algorithm must be supported by every JDK 8, according to the \n+                <a href=\"https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html\">docs</a>. \n+                Special handling is provided for the AES/GCM/NoPadding algorithm which \n+                can be activated like this:</p>\n             <source>\n                 <![CDATA[\n-jcs.auxiliary.blockDiskCache.serializer.attributes.aesCipherTransformation=AES/ECB/PKCS5Padding\n+jcs.auxiliary.blockDiskCache2.serializer.attributes.aesCipherTransformation=AES/GCM/NoPadding\n                 ]]>\n             </source>\n         </section>"
  }
]
