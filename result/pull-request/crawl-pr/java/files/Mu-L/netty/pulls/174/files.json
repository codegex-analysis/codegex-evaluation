[
  {
    "sha": "ecba4f728051704abb45e7adbc27e569cb62cc31",
    "filename": ".github/workflows/ci-pr-reports.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/.github/workflows/ci-pr-reports.yml",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/.github/workflows/ci-pr-reports.yml",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/.github/workflows/ci-pr-reports.yml?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -20,6 +20,7 @@ jobs:\n         with:\n           github_token: ${{ secrets.GITHUB_TOKEN }}\n           workflow: ${{ github.event.workflow_run.workflow_id }}\n+          workflow_conclusion: completed\n           commit: ${{ github.event.workflow_run.head_commit.id }}\n           # File location set in ci-pr.yml and must be coordinated.\n           name: test-results-${{ matrix.setup }}"
  },
  {
    "sha": "8daa59c594e18a54768921dc42ae7cb2764045c3",
    "filename": ".github/workflows/codeql-analysis.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/.github/workflows/codeql-analysis.yml",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/.github/workflows/codeql-analysis.yml",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/.github/workflows/codeql-analysis.yml?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -58,7 +58,7 @@ jobs:\n       with:\n         languages: ${{ matrix.language }}\n         # If you wish to specify custom queries, you can do so here or in a config file.\n-        # By default, queries listed here will override any specified in a config file. \n+        # By default, queries listed here will override any specified in a config file.\n         # Prefix the list here with \"+\" to use these queries and those in the config file.\n         # queries: ./path/to/local/query, your-org/your-repo/queries@main\n "
  },
  {
    "sha": "6dc0a2cbf731da00423caca424827d86934eee24",
    "filename": "buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -1601,6 +1601,10 @@ private Component findIt(int offset) {\n         for (int low = 0, high = componentCount; low <= high;) {\n             int mid = low + high >>> 1;\n             Component c = components[mid];\n+            if (c == null) {\n+                throw new IllegalStateException(\"No component found for offset. \" +\n+                        \"Composite buffer layout might be outdated, e.g. from a discardReadBytes call.\");\n+            }\n             if (offset >= c.endOffset) {\n                 low = mid + 1;\n             } else if (offset < c.offset) {"
  },
  {
    "sha": "4af2e2efbd485624d50930ee95d7a1824e3d8323",
    "filename": "buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -1614,4 +1614,24 @@ public void testOverflowWhileAddingComponentsViaIterable() {\n             compositeByteBuf.release();\n         }\n     }\n+\n+    @Test\n+    public void sliceOfCompositeBufferMustThrowISEAfterDiscardBytes() {\n+        CompositeByteBuf composite = compositeBuffer();\n+        composite.addComponent(true, buffer(8).writeZero(8));\n+\n+        ByteBuf slice = composite.retainedSlice();\n+        composite.skipBytes(slice.readableBytes());\n+        composite.discardSomeReadBytes();\n+\n+        try {\n+            slice.readByte();\n+            fail(\"Expected readByte of discarded slice to throw.\");\n+        } catch (IllegalStateException ignore) {\n+            // Good.\n+        } finally {\n+            slice.release();\n+            composite.release();\n+        }\n+    }\n }"
  },
  {
    "sha": "abef31287cc9835e33f675b717a628947da335aa",
    "filename": "common/src/main/java/io/netty/util/internal/Hidden.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/common/src/main/java/io/netty/util/internal/Hidden.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/common/src/main/java/io/netty/util/internal/Hidden.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/common/src/main/java/io/netty/util/internal/Hidden.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -24,7 +24,7 @@\n import java.util.function.Predicate;\n \n /**\n- * Contains classes that must be have public visibility but are not public API.\n+ * Contains classes that must have public visibility but are not public API.\n  */\n class Hidden {\n "
  },
  {
    "sha": "ab8ec805dee363012793bd63484b56f60d790549",
    "filename": "transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java",
    "status": "modified",
    "additions": 25,
    "deletions": 18,
    "changes": 43,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -35,6 +35,7 @@\n import io.netty.channel.unix.Socket;\n import io.netty.channel.unix.UnixChannelUtil;\n import io.netty.util.ReferenceCountUtil;\n+import io.netty.util.UncheckedBooleanSupplier;\n import io.netty.util.internal.ObjectUtil;\n import io.netty.util.internal.RecyclableArrayList;\n import io.netty.util.internal.StringUtil;\n@@ -287,11 +288,11 @@ protected void doBind(SocketAddress localAddress) throws Exception {\n \n     @Override\n     protected void doWrite(ChannelOutboundBuffer in) throws Exception {\n-        for (;;) {\n+        int maxMessagesPerWrite = maxMessagesPerWrite();\n+        while (maxMessagesPerWrite > 0) {\n             Object msg = in.current();\n             if (msg == null) {\n                 // Wrote all messages.\n-                clearFlag(Native.EPOLLOUT);\n                 break;\n             }\n \n@@ -301,27 +302,23 @@ protected void doWrite(ChannelOutboundBuffer in) throws Exception {\n                         // We only handle UDP_SEGMENT in sendmmsg.\n                         in.current() instanceof SegmentedDatagramPacket) {\n                     NativeDatagramPacketArray array = cleanDatagramPacketArray();\n-                    array.add(in, isConnected());\n+                    array.add(in, isConnected(), maxMessagesPerWrite);\n                     int cnt = array.count();\n \n                     if (cnt >= 1) {\n                         // Try to use gathering writes via sendmmsg(...) syscall.\n                         int offset = 0;\n                         NativeDatagramPacketArray.NativeDatagramPacket[] packets = array.packets();\n \n-                        while (cnt > 0) {\n-                            int send = socket.sendmmsg(packets, offset, cnt);\n-                            if (send == 0) {\n-                                // Did not write all messages.\n-                                setFlag(Native.EPOLLOUT);\n-                                return;\n-                            }\n-                            for (int i = 0; i < send; i++) {\n-                                in.remove();\n-                            }\n-                            cnt -= send;\n-                            offset += send;\n+                        int send = socket.sendmmsg(packets, offset, cnt);\n+                        if (send == 0) {\n+                            // Did not write all messages.\n+                            break;\n+                        }\n+                        for (int i = 0; i < send; i++) {\n+                            in.remove();\n                         }\n+                        maxMessagesPerWrite -= send;\n                         continue;\n                     }\n                 }\n@@ -335,18 +332,26 @@ protected void doWrite(ChannelOutboundBuffer in) throws Exception {\n \n                 if (done) {\n                     in.remove();\n+                    maxMessagesPerWrite --;\n                 } else {\n-                    // Did not write all messages.\n-                    setFlag(Native.EPOLLOUT);\n                     break;\n                 }\n             } catch (IOException e) {\n+                maxMessagesPerWrite --;\n                 // Continue on write error as a DatagramChannel can write to multiple remote peers\n                 //\n                 // See https://github.com/netty/netty/issues/2665\n                 in.remove(e);\n             }\n         }\n+\n+        if (in.isEmpty()) {\n+            // Did write all messages.\n+            clearFlag(Native.EPOLLOUT);\n+        } else {\n+            // Did not write all messages.\n+            setFlag(Native.EPOLLOUT);\n+        }\n     }\n \n     private boolean doWriteMessage(Object msg) throws Exception {\n@@ -494,7 +499,9 @@ void epollInReady() {\n                         } else {\n                             break;\n                         }\n-                    } while (allocHandle.continueReading());\n+                    // We use the TRUE_SUPPLIER as it is also ok to read less then what we did try to read (as long\n+                    // as we read anything).\n+                    } while (allocHandle.continueReading(UncheckedBooleanSupplier.TRUE_SUPPLIER));\n                 } catch (Throwable t) {\n                     exception = t;\n                 }"
  },
  {
    "sha": "bca61f3a45f0e942e967840d8ec645649468083e",
    "filename": "transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannelConfig.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannelConfig.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannelConfig.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannelConfig.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -17,6 +17,7 @@\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelConfig;\n import io.netty.channel.ChannelException;\n import io.netty.channel.ChannelOption;\n import io.netty.channel.FixedRecvByteBufAllocator;\n@@ -526,4 +527,10 @@ public EpollDatagramChannelConfig setMaxDatagramPayloadSize(int maxDatagramSize)\n     public int getMaxDatagramPayloadSize() {\n         return maxDatagramSize;\n     }\n+\n+    @Override\n+    public EpollDatagramChannelConfig setMaxMessagesPerWrite(int maxMessagesPerWrite) {\n+        super.setMaxMessagesPerWrite(maxMessagesPerWrite);\n+        return this;\n+    }\n }"
  },
  {
    "sha": "6e3e7b1d7f0cf84686a2ec44d3e9938becf37d00",
    "filename": "transport-native-epoll/src/main/java/io/netty/channel/epoll/NativeDatagramPacketArray.java",
    "status": "modified",
    "additions": 13,
    "deletions": 5,
    "changes": 18,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-epoll/src/main/java/io/netty/channel/epoll/NativeDatagramPacketArray.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-epoll/src/main/java/io/netty/channel/epoll/NativeDatagramPacketArray.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport-native-epoll/src/main/java/io/netty/channel/epoll/NativeDatagramPacketArray.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -79,8 +79,9 @@ private boolean add0(ByteBuf buf, int index, int len, int segmentLen, InetSocket\n         return true;\n     }\n \n-    void add(ChannelOutboundBuffer buffer, boolean connected) throws Exception {\n+    void add(ChannelOutboundBuffer buffer, boolean connected, int maxMessagesPerWrite) throws Exception {\n         processor.connected = connected;\n+        processor.maxMessagesPerWrite = maxMessagesPerWrite;\n         buffer.forEachFlushedMessage(processor);\n     }\n \n@@ -109,9 +110,11 @@ void release() {\n \n     private final class MyMessageProcessor implements MessageProcessor {\n         private boolean connected;\n+        private int maxMessagesPerWrite;\n \n         @Override\n         public boolean processMessage(Object msg) {\n+            final boolean added;\n             if (msg instanceof DatagramPacket) {\n                 DatagramPacket packet = (DatagramPacket) msg;\n                 ByteBuf buf = packet.content();\n@@ -124,11 +127,16 @@ public boolean processMessage(Object msg) {\n                         segmentSize = seg;\n                     }\n                 }\n-                return add0(buf, buf.readerIndex(), buf.readableBytes(), segmentSize, packet.recipient());\n-            }\n-            if (msg instanceof ByteBuf && connected) {\n+                added = add0(buf, buf.readerIndex(), buf.readableBytes(), segmentSize, packet.recipient());\n+            } else if (msg instanceof ByteBuf && connected) {\n                 ByteBuf buf = (ByteBuf) msg;\n-                return add0(buf, buf.readerIndex(), buf.readableBytes(), 0, null);\n+                added = add0(buf, buf.readerIndex(), buf.readableBytes(), 0, null);\n+            } else {\n+                added = false;\n+            }\n+            if (added) {\n+                maxMessagesPerWrite--;\n+                return maxMessagesPerWrite > 0;\n             }\n             return false;\n         }"
  },
  {
    "sha": "147523d7d0e506937374ed350346ac76633dcdc3",
    "filename": "transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueDatagramChannel.java",
    "status": "modified",
    "additions": 14,
    "deletions": 7,
    "changes": 21,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueDatagramChannel.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueDatagramChannel.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueDatagramChannel.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -31,6 +31,7 @@\n import io.netty.channel.unix.Errors;\n import io.netty.channel.unix.IovArray;\n import io.netty.channel.unix.UnixChannelUtil;\n+import io.netty.util.UncheckedBooleanSupplier;\n import io.netty.util.internal.ObjectUtil;\n import io.netty.util.internal.StringUtil;\n import io.netty.util.internal.UnstableApi;\n@@ -245,11 +246,10 @@ protected void doBind(SocketAddress localAddress) throws Exception {\n \n     @Override\n     protected void doWrite(ChannelOutboundBuffer in) throws Exception {\n-        for (;;) {\n+        int maxMessagesPerWrite = maxMessagesPerWrite();\n+        while (maxMessagesPerWrite > 0) {\n             Object msg = in.current();\n             if (msg == null) {\n-                // Wrote all messages.\n-                writeFilter(false);\n                 break;\n             }\n \n@@ -264,18 +264,22 @@ protected void doWrite(ChannelOutboundBuffer in) throws Exception {\n \n                 if (done) {\n                     in.remove();\n+                    maxMessagesPerWrite --;\n                 } else {\n-                    // Did not write all messages.\n-                    writeFilter(true);\n-                    break;\n+                   break;\n                 }\n             } catch (IOException e) {\n+                maxMessagesPerWrite --;\n+\n                 // Continue on write error as a DatagramChannel can write to multiple remote peers\n                 //\n                 // See https://github.com/netty/netty/issues/2665\n                 in.remove(e);\n             }\n         }\n+\n+        // Whether all messages were written or not.\n+        writeFilter(in.isEmpty());\n     }\n \n     private boolean doWriteMessage(Object msg) throws Exception {\n@@ -468,7 +472,10 @@ void readReady(KQueueRecvByteAllocatorHandle allocHandle) {\n                         pipeline.fireChannelRead(packet);\n \n                         byteBuf = null;\n-                    } while (allocHandle.continueReading());\n+\n+                    // We use the TRUE_SUPPLIER as it is also ok to read less then what we did try to read (as long\n+                    // as we read anything).\n+                    } while (allocHandle.continueReading(UncheckedBooleanSupplier.TRUE_SUPPLIER));\n                 } catch (Throwable t) {\n                     if (byteBuf != null) {\n                         byteBuf.release();"
  },
  {
    "sha": "ee6b070e6650cbb09164dbd8ca344808d3ea334c",
    "filename": "transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueDatagramChannelConfig.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueDatagramChannelConfig.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueDatagramChannelConfig.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueDatagramChannelConfig.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -382,4 +382,10 @@ public NetworkInterface getNetworkInterface() {\n     public KQueueDatagramChannelConfig setNetworkInterface(NetworkInterface networkInterface) {\n         throw new UnsupportedOperationException(\"Multicast not supported\");\n     }\n+\n+    @Override\n+    public KQueueDatagramChannelConfig setMaxMessagesPerWrite(int maxMessagesPerWrite) {\n+        super.setMaxMessagesPerWrite(maxMessagesPerWrite);\n+        return this;\n+    }\n }"
  },
  {
    "sha": "6589cd5bd5028ec6dd9187073e60055caac15d3f",
    "filename": "transport/src/main/java/io/netty/channel/AbstractChannel.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/AbstractChannel.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/AbstractChannel.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport/src/main/java/io/netty/channel/AbstractChannel.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -88,6 +88,18 @@ protected AbstractChannel(Channel parent, ChannelId id) {\n         pipeline = newChannelPipeline();\n     }\n \n+    protected final int maxMessagesPerWrite() {\n+        ChannelConfig config = config();\n+        if (config instanceof DefaultChannelConfig) {\n+            return ((DefaultChannelConfig) config).getMaxMessagesPerWrite();\n+        }\n+        Integer value = config.getOption(ChannelOption.MAX_MESSAGES_PER_WRITE);\n+        if (value == null) {\n+            return Integer.MAX_VALUE;\n+        }\n+        return value;\n+    }\n+\n     @Override\n     public final ChannelId id() {\n         return id;"
  },
  {
    "sha": "c08cd28f91db52802a08de52664e8d984720966f",
    "filename": "transport/src/main/java/io/netty/channel/ChannelOption.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/ChannelOption.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/ChannelOption.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport/src/main/java/io/netty/channel/ChannelOption.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -86,6 +86,8 @@ public static boolean exists(String name) {\n      */\n     @Deprecated\n     public static final ChannelOption<Integer> MAX_MESSAGES_PER_READ = valueOf(\"MAX_MESSAGES_PER_READ\");\n+    public static final ChannelOption<Integer> MAX_MESSAGES_PER_WRITE = valueOf(\"MAX_MESSAGES_PER_WRITE\");\n+\n     public static final ChannelOption<Integer> WRITE_SPIN_COUNT = valueOf(\"WRITE_SPIN_COUNT\");\n     /**\n      * @deprecated Use {@link #WRITE_BUFFER_WATER_MARK}"
  },
  {
    "sha": "e303a668e1cffe1ac957f87fdc44902a19e57f37",
    "filename": "transport/src/main/java/io/netty/channel/DefaultChannelConfig.java",
    "status": "modified",
    "additions": 26,
    "deletions": 1,
    "changes": 27,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -29,6 +29,7 @@\n import static io.netty.channel.ChannelOption.AUTO_READ;\n import static io.netty.channel.ChannelOption.CONNECT_TIMEOUT_MILLIS;\n import static io.netty.channel.ChannelOption.MAX_MESSAGES_PER_READ;\n+import static io.netty.channel.ChannelOption.MAX_MESSAGES_PER_WRITE;\n import static io.netty.channel.ChannelOption.MESSAGE_SIZE_ESTIMATOR;\n import static io.netty.channel.ChannelOption.RCVBUF_ALLOCATOR;\n import static io.netty.channel.ChannelOption.SINGLE_EVENTEXECUTOR_PER_GROUP;\n@@ -62,6 +63,8 @@\n \n     private volatile int connectTimeoutMillis = DEFAULT_CONNECT_TIMEOUT;\n     private volatile int writeSpinCount = 16;\n+    private volatile int maxMessagesPerWrite = Integer.MAX_VALUE;\n+\n     @SuppressWarnings(\"FieldMayBeFinal\")\n     private volatile int autoRead = 1;\n     private volatile boolean autoClose = true;\n@@ -85,7 +88,7 @@ protected DefaultChannelConfig(Channel channel, RecvByteBufAllocator allocator)\n                 CONNECT_TIMEOUT_MILLIS, MAX_MESSAGES_PER_READ, WRITE_SPIN_COUNT,\n                 ALLOCATOR, AUTO_READ, AUTO_CLOSE, RCVBUF_ALLOCATOR, WRITE_BUFFER_HIGH_WATER_MARK,\n                 WRITE_BUFFER_LOW_WATER_MARK, WRITE_BUFFER_WATER_MARK, MESSAGE_SIZE_ESTIMATOR,\n-                SINGLE_EVENTEXECUTOR_PER_GROUP);\n+                SINGLE_EVENTEXECUTOR_PER_GROUP, MAX_MESSAGES_PER_WRITE);\n     }\n \n     protected Map<ChannelOption<?>, Object> getOptions(\n@@ -155,6 +158,9 @@ public boolean setOptions(Map<ChannelOption<?>, ?> options) {\n         if (option == SINGLE_EVENTEXECUTOR_PER_GROUP) {\n             return (T) Boolean.valueOf(getPinEventExecutorPerGroup());\n         }\n+        if (option == MAX_MESSAGES_PER_WRITE) {\n+            return (T) Integer.valueOf(getMaxMessagesPerWrite());\n+        }\n         return null;\n     }\n \n@@ -187,6 +193,8 @@ public boolean setOptions(Map<ChannelOption<?>, ?> options) {\n             setMessageSizeEstimator((MessageSizeEstimator) value);\n         } else if (option == SINGLE_EVENTEXECUTOR_PER_GROUP) {\n             setPinEventExecutorPerGroup((Boolean) value);\n+        } else if (option == MAX_MESSAGES_PER_WRITE) {\n+            setMaxMessagesPerWrite((Integer) value);\n         } else {\n             return false;\n         }\n@@ -247,6 +255,23 @@ public ChannelConfig setMaxMessagesPerRead(int maxMessagesPerRead) {\n         }\n     }\n \n+    /**\n+     * Get the maximum number of message to write per eventloop run. Once this limit is\n+     * reached we will continue to process other events before trying to write the remaining messages.\n+     */\n+    public int getMaxMessagesPerWrite() {\n+        return maxMessagesPerWrite;\n+    }\n+\n+     /**\n+     * Set the maximum number of message to write per eventloop run. Once this limit is\n+     * reached we will continue to process other events before trying to write the remaining messages.\n+     */\n+    public ChannelConfig setMaxMessagesPerWrite(int maxMessagesPerWrite) {\n+        this.maxMessagesPerWrite = ObjectUtil.checkPositive(maxMessagesPerWrite, \"maxMessagesPerWrite\");\n+        return this;\n+    }\n+\n     @Override\n     public int getWriteSpinCount() {\n         return writeSpinCount;"
  },
  {
    "sha": "996d7b165a758bfc7f2a36d3489d84a222fcbfd5",
    "filename": "transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java",
    "status": "modified",
    "additions": 20,
    "deletions": 10,
    "changes": 30,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -55,6 +55,10 @@ protected void doBeginRead() throws Exception {\n         super.doBeginRead();\n     }\n \n+    protected boolean continueReading(RecvByteBufAllocator.Handle allocHandle) {\n+        return allocHandle.continueReading();\n+    }\n+\n     private final class NioMessageUnsafe extends AbstractNioUnsafe {\n \n         private final List<Object> readBuf = new ArrayList<Object>();\n@@ -82,7 +86,7 @@ public void read() {\n                         }\n \n                         allocHandle.incMessagesRead(localRead);\n-                    } while (allocHandle.continueReading());\n+                    } while (continueReading(allocHandle));\n                 } catch (Throwable t) {\n                     exception = t;\n                 }\n@@ -127,13 +131,10 @@ protected void doWrite(ChannelOutboundBuffer in) throws Exception {\n         final SelectionKey key = selectionKey();\n         final int interestOps = key.interestOps();\n \n-        for (;;) {\n+        int maxMessagesPerWrite = maxMessagesPerWrite();\n+        while (maxMessagesPerWrite > 0) {\n             Object msg = in.current();\n             if (msg == null) {\n-                // Wrote all messages.\n-                if ((interestOps & SelectionKey.OP_WRITE) != 0) {\n-                    key.interestOps(interestOps & ~SelectionKey.OP_WRITE);\n-                }\n                 break;\n             }\n             try {\n@@ -146,22 +147,31 @@ protected void doWrite(ChannelOutboundBuffer in) throws Exception {\n                 }\n \n                 if (done) {\n+                    maxMessagesPerWrite--;\n                     in.remove();\n                 } else {\n-                    // Did not write all messages.\n-                    if ((interestOps & SelectionKey.OP_WRITE) == 0) {\n-                        key.interestOps(interestOps | SelectionKey.OP_WRITE);\n-                    }\n                     break;\n                 }\n             } catch (Exception e) {\n                 if (continueOnWriteError()) {\n+                    maxMessagesPerWrite--;\n                     in.remove(e);\n                 } else {\n                     throw e;\n                 }\n             }\n         }\n+        if (in.isEmpty()) {\n+            // Wrote all messages.\n+            if ((interestOps & SelectionKey.OP_WRITE) != 0) {\n+                key.interestOps(interestOps & ~SelectionKey.OP_WRITE);\n+            }\n+        } else {\n+            // Did not write all messages.\n+            if ((interestOps & SelectionKey.OP_WRITE) == 0) {\n+                key.interestOps(interestOps | SelectionKey.OP_WRITE);\n+            }\n+        }\n     }\n \n     /**"
  },
  {
    "sha": "32a804950163338b559899ed64444406e3e14c58",
    "filename": "transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -426,4 +426,10 @@ public DatagramChannelConfig setMessageSizeEstimator(MessageSizeEstimator estima\n         super.setMessageSizeEstimator(estimator);\n         return this;\n     }\n+\n+    @Override\n+    public DatagramChannelConfig setMaxMessagesPerWrite(int maxMessagesPerWrite) {\n+        super.setMaxMessagesPerWrite(maxMessagesPerWrite);\n+        return this;\n+    }\n }"
  },
  {
    "sha": "701e873cd7e5502aa7455ed513ca30ae62d7a1b4",
    "filename": "transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/Mu-L/netty/blob/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java",
    "raw_url": "https://github.com/Mu-L/netty/raw/aea9e381a7470d33323ccfa0d4377aea3e1f7323/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java",
    "contents_url": "https://api.github.com/repos/Mu-L/netty/contents/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java?ref=aea9e381a7470d33323ccfa0d4377aea3e1f7323",
    "patch": "@@ -30,6 +30,7 @@\n import io.netty.channel.socket.DatagramChannelConfig;\n import io.netty.channel.socket.DatagramPacket;\n import io.netty.channel.socket.InternetProtocolFamily;\n+import io.netty.util.UncheckedBooleanSupplier;\n import io.netty.util.internal.ObjectUtil;\n import io.netty.util.internal.SocketUtils;\n import io.netty.util.internal.PlatformDependent;\n@@ -598,4 +599,15 @@ protected boolean closeOnReadError(Throwable cause) {\n         }\n         return super.closeOnReadError(cause);\n     }\n+\n+    @Override\n+    protected boolean continueReading(RecvByteBufAllocator.Handle allocHandle) {\n+        if (allocHandle instanceof RecvByteBufAllocator.ExtendedHandle) {\n+            // We use the TRUE_SUPPLIER as it is also ok to read less then what we did try to read (as long\n+            // as we read anything).\n+            return ((RecvByteBufAllocator.ExtendedHandle) allocHandle)\n+                    .continueReading(UncheckedBooleanSupplier.TRUE_SUPPLIER);\n+        }\n+        return allocHandle.continueReading();\n+    }\n }"
  }
]
