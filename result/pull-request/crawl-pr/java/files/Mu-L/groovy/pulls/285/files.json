[
  {
    "sha": "6d70de18637865dfeb2b61e4ae5e0669e25571d1",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/build.gradle",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/build.gradle",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/build.gradle?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -111,7 +111,7 @@ dependencies {\n     implementation \"org.ow2.asm:asm-commons:${versions.asm}\"\n     implementation \"org.ow2.asm:asm-tree:${versions.asm}\"\n     implementation \"org.ow2.asm:asm-util:${versions.asm}\"\n-    implementation \"com.googlecode:openbeans:${versions.openbeans}\"\n+    implementation \"me.champeau.openbeans:openbeans:${versions.openbeans}\"\n     implementation \"com.tunnelvisionlabs:antlr4-runtime:${versions.antlr4}\"\n \n     antlr \"com.tunnelvisionlabs:antlr4:${versions.antlr4}\"\n@@ -252,7 +252,6 @@ if (file('user.gradle').exists()) {\n \n licenseReport {\n     excludeGroups = [\n-            'com.googlecode', // openbeans has no pom but is ASLv2\n             'org.multiverse'  // we never include this optional dependency of an optional dependency\n     ]\n }"
  },
  {
    "sha": "e234b9ad38920151b182f7d5e1eae7ca59cd7d29",
    "filename": "buildSrc/src/main/groovy/org.apache.groovy-common.gradle",
    "status": "modified",
    "additions": 0,
    "deletions": 13,
    "changes": 13,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/buildSrc/src/main/groovy/org.apache.groovy-common.gradle",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/buildSrc/src/main/groovy/org.apache.groovy-common.gradle",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/buildSrc/src/main/groovy/org.apache.groovy-common.gradle?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -47,19 +47,6 @@ repositories {\n         maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }\n     }\n     mavenCentral()\n-    exclusiveContent {\n-        forRepository {\n-            maven { // openbeans\n-                url 'https://dl.bintray.com/melix/thirdparty-apache'\n-                metadataSources {\n-                    artifact()\n-                }\n-            }\n-        }\n-        filter {\n-            includeModule('com.googlecode', 'openbeans')\n-        }\n-    }\n }\n \n tasks.named('rat') {"
  },
  {
    "sha": "21732a358d38f947730a9a88fc773352e1ce27fa",
    "filename": "gradle/verification-metadata.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/gradle/verification-metadata.xml",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/gradle/verification-metadata.xml",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/gradle/verification-metadata.xml?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -615,6 +615,11 @@\n             <sha512 value=\"84c4330b4677c21a5cea0337b9e9946b70bb6f5a7c52b87db165c30905a026b7c6b833249a43364b211049cfb21f033c64106fc6335618e4c75f8f77309f8dc3\" origin=\"Generated by Gradle because artifact wasn't signed\"/>\n          </artifact>\n       </component>\n+      <component group=\"me.champeau.openbeans\" name=\"openbeans\" version=\"1.0.2\">\n+         <artifact name=\"openbeans-1.0.2.jar\">\n+            <pgp value=\"0191e61acbbe76323ac15c83b5ad94bdd6bdb924\"/>\n+         </artifact>\n+      </component>\n       <component group=\"net.bytebuddy\" name=\"byte-buddy\" version=\"1.10.16\">\n          <artifact name=\"byte-buddy-1.10.16.jar\">\n             <pgp value=\"a7892505cf1a58076453e52d7999befba1039e8b\"/>"
  },
  {
    "sha": "72593e1307cf6967843ce5bc00b71f80ad0bed72",
    "filename": "src/main/java/org/codehaus/groovy/classgen/EnumCompletionVisitor.java",
    "status": "modified",
    "additions": 22,
    "deletions": 41,
    "changes": 63,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/classgen/EnumCompletionVisitor.java",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/classgen/EnumCompletionVisitor.java",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/main/java/org/codehaus/groovy/classgen/EnumCompletionVisitor.java?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -23,8 +23,6 @@\n import org.codehaus.groovy.ast.ClassNode;\n import org.codehaus.groovy.ast.CodeVisitorSupport;\n import org.codehaus.groovy.ast.ConstructorNode;\n-import org.codehaus.groovy.ast.EnumConstantClassNode;\n-import org.codehaus.groovy.ast.InnerClassNode;\n import org.codehaus.groovy.ast.Parameter;\n import org.codehaus.groovy.ast.expr.ArgumentListExpression;\n import org.codehaus.groovy.ast.expr.ConstructorCallExpression;\n@@ -41,67 +39,61 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n-\n /**\n  * Enums have a parent constructor with two arguments from java.lang.Enum.\n  * This visitor adds those two arguments into manually created constructors\n  * and performs the necessary super call.\n  */\n public class EnumCompletionVisitor extends ClassCodeVisitorSupport {\n+\n     private final SourceUnit sourceUnit;\n \n-    public EnumCompletionVisitor(CompilationUnit cu, SourceUnit su) {\n+    public EnumCompletionVisitor(final CompilationUnit cu, final SourceUnit su) {\n         sourceUnit = su;\n     }\n \n     @Override\n-    public void visitClass(ClassNode node) {\n-        if (!node.isEnum()) return;\n-        completeEnum(node);\n+    protected SourceUnit getSourceUnit() {\n+        return sourceUnit;\n     }\n \n     @Override\n-    protected SourceUnit getSourceUnit() {\n-        return sourceUnit;\n+    public void visitClass(final ClassNode node) {\n+        if (node.isEnum()) completeEnum(node);\n     }\n \n-    private void completeEnum(ClassNode enumClass) {\n-        boolean isAic = isAnonymousInnerClass(enumClass);\n+    private void completeEnum(final ClassNode enumClass) {\n         if (enumClass.getDeclaredConstructors().isEmpty()) {\n-            addImplicitConstructors(enumClass, isAic);\n+            addImplicitConstructors(enumClass);\n         }\n \n         for (ConstructorNode ctor : enumClass.getDeclaredConstructors()) {\n-            transformConstructor(ctor, isAic);\n+            transformConstructor(ctor);\n         }\n     }\n \n     /**\n      * Add map and no-arg constructor or mirror those of the superclass (i.e. base enum).\n      */\n-    private static void addImplicitConstructors(ClassNode enumClass, boolean aic) {\n-        if (aic) {\n-            ClassNode sn = enumClass.getSuperClass();\n-            List<ConstructorNode> sctors = new ArrayList<ConstructorNode>(sn.getDeclaredConstructors());\n-            if (sctors.isEmpty()) {\n-                addMapConstructors(enumClass);\n-            } else {\n-                for (ConstructorNode constructorNode : sctors) {\n-                    ConstructorNode init = new ConstructorNode(ACC_PUBLIC, constructorNode.getParameters(), ClassNode.EMPTY_ARRAY, new BlockStatement());\n-                    enumClass.addConstructor(init);\n+    private static void addImplicitConstructors(final ClassNode enumClass) {\n+        if (EnumVisitor.isAnonymousInnerClass(enumClass)) {\n+            List<ConstructorNode> superCtors = enumClass.getSuperClass().getDeclaredConstructors();\n+            if (!superCtors.isEmpty()) {\n+                for (ConstructorNode ctor : superCtors) {\n+                    enumClass.addConstructor(0, ctor.getParameters(), ClassNode.EMPTY_ARRAY, new BlockStatement());\n                 }\n+                return;\n             }\n-        } else {\n-            addMapConstructors(enumClass);\n         }\n+        TupleConstructorASTTransformation.addSpecialMapConstructors(0, enumClass, \"One of the enum constants for enum \" +\n+                enumClass.getName() + \" was initialized with null. Please use a non-null value or define your own constructor.\", true);\n     }\n \n     /**\n      * If constructor does not define a call to super, then transform constructor\n      * to get String,int parameters at beginning and add call super(String,int).\n      */\n-    private void transformConstructor(ConstructorNode ctor, boolean isAic) {\n+    private void transformConstructor(final ConstructorNode ctor) {\n         boolean chainedThisConstructorCall = false;\n         ConstructorCallExpression cce = null;\n         if (ctor.firstStatementIsSpecialConstructorCall()) {\n@@ -129,10 +121,10 @@ private void transformConstructor(ConstructorNode ctor, boolean isAic) {\n             argsExprs.add(1, intVariable);\n         } else {\n             // add a super call\n-            List<Expression> args = new ArrayList<Expression>();\n+            List<Expression> args = new ArrayList<>();\n             args.add(stringVariable);\n             args.add(intVariable);\n-            if (isAic) {\n+            if (EnumVisitor.isAnonymousInnerClass(ctor.getDeclaringClass())) {\n                 for (Parameter parameter : oldP) {\n                     args.add(new VariableExpression(parameter.getName()));\n                 }\n@@ -146,12 +138,7 @@ private void transformConstructor(ConstructorNode ctor, boolean isAic) {\n         }\n     }\n \n-    private static void addMapConstructors(ClassNode enumClass) {\n-        TupleConstructorASTTransformation.addSpecialMapConstructors(ACC_PUBLIC, enumClass, \"One of the enum constants for enum \" + enumClass.getName() +\n-                \" was initialized with null. Please use a non-null value or define your own constructor.\", true);\n-    }\n-\n-    private String getUniqueVariableName(final String name, Statement code) {\n+    private String getUniqueVariableName(final String name, final Statement code) {\n         if (code == null) return name;\n         final Object[] found = new Object[1];\n         CodeVisitorSupport cv = new CodeVisitorSupport() {\n@@ -164,10 +151,4 @@ public void visitVariableExpression(VariableExpression expression) {\n         if (found[0] != null) return getUniqueVariableName(\"_\" + name, code);\n         return name;\n     }\n-\n-    private static boolean isAnonymousInnerClass(ClassNode enumClass) {\n-        if (!(enumClass instanceof EnumConstantClassNode)) return false;\n-        InnerClassNode ic = (InnerClassNode) enumClass;\n-        return ic.getVariableScope() == null;\n-    }\n }"
  },
  {
    "sha": "2556f6a74e6996971e6f13b594b9b0d61c78ddb7",
    "filename": "src/main/java/org/codehaus/groovy/classgen/EnumVisitor.java",
    "status": "modified",
    "additions": 14,
    "deletions": 18,
    "changes": 32,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/classgen/EnumVisitor.java",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/classgen/EnumVisitor.java",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/main/java/org/codehaus/groovy/classgen/EnumVisitor.java?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -84,30 +84,26 @@ protected SourceUnit getSourceUnit() {\n \n     @Override\n     public void visitClass(final ClassNode node) {\n-        if (!node.isEnum()) return;\n-        completeEnum(node);\n+        if (node.isEnum()) completeEnum(node);\n     }\n \n     private void completeEnum(final ClassNode enumClass) {\n+        // create MIN_VALUE, MAX_VALUE and $VALUES fields\n         FieldNode minValue = null, maxValue = null, values = null;\n \n-        boolean isAic = isAnonymousInnerClass(enumClass);\n-        if (!isAic) {\n-            ClassNode enumRef = enumClass.getPlainNodeReference();\n-\n-            // create $VALUES field\n-            values = new FieldNode(\"$VALUES\", ACC_FINAL | ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC, enumRef.makeArray(), enumClass, null);\n+        boolean isAIC = isAnonymousInnerClass(enumClass);\n+        if (!isAIC) {\n+            ClassNode enumPlain = enumClass.getPlainNodeReference();\n+            minValue = new FieldNode(\"MIN_VALUE\", ACC_FINAL | ACC_PUBLIC | ACC_STATIC, enumPlain, enumClass, null);\n+            maxValue = new FieldNode(\"MAX_VALUE\", ACC_FINAL | ACC_PUBLIC | ACC_STATIC, enumPlain, enumClass, null);\n+            values = new FieldNode(\"$VALUES\", ACC_FINAL | ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC, enumPlain.makeArray(), enumClass, null);\n             values.setSynthetic(true);\n \n             addMethods(enumClass, values);\n             checkForAbstractMethods(enumClass);\n-\n-            // create MIN_VALUE and MAX_VALUE fields\n-            minValue = new FieldNode(\"MIN_VALUE\", ACC_FINAL | ACC_PUBLIC | ACC_STATIC, enumRef, enumClass, null);\n-            maxValue = new FieldNode(\"MAX_VALUE\", ACC_FINAL | ACC_PUBLIC | ACC_STATIC, enumRef, enumClass, null);\n         }\n \n-        addInit(enumClass, minValue, maxValue, values, isAic);\n+        addInit(enumClass, minValue, maxValue, values, isAIC);\n     }\n \n     private static void checkForAbstractMethods(final ClassNode enumClass) {\n@@ -289,7 +285,7 @@ private static void addMethods(final ClassNode enumClass, final FieldNode values\n         }\n     }\n \n-    private void addInit(final ClassNode enumClass, final FieldNode minValue, final FieldNode maxValue, final FieldNode values, final boolean isAic) {\n+    private void addInit(final ClassNode enumClass, final FieldNode minValue, final FieldNode maxValue, final FieldNode values, final boolean isAIC) {\n         // constructor helper\n         // This method is used instead of calling the constructor as\n         // calling the constructor may require a table with MetaClass\n@@ -395,7 +391,7 @@ private void addInit(final ClassNode enumClass, final FieldNode minValue, final\n             arrayInit.add(new FieldExpression(field));\n         }\n \n-        if (!isAic) {\n+        if (!isAIC) {\n             if (tempMin != null) {\n                 block.add(\n                         new ExpressionStatement(\n@@ -438,8 +434,8 @@ private void addError(final AnnotatedNode exp, final String msg) {\n         );\n     }\n \n-    private static boolean isAnonymousInnerClass(final ClassNode enumClass) {\n-        if (!(enumClass instanceof EnumConstantClassNode)) return false;\n-        return (((EnumConstantClassNode) enumClass).getVariableScope() == null);\n+    static boolean isAnonymousInnerClass(final ClassNode enumClass) {\n+        return enumClass instanceof EnumConstantClassNode\n+            && ((EnumConstantClassNode) enumClass).getVariableScope() == null;\n     }\n }"
  },
  {
    "sha": "8d571bd38ad92074dab03296c74826e3802974d2",
    "filename": "src/main/java/org/codehaus/groovy/classgen/Verifier.java",
    "status": "modified",
    "additions": 47,
    "deletions": 43,
    "changes": 90,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/classgen/Verifier.java",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/classgen/Verifier.java",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/main/java/org/codehaus/groovy/classgen/Verifier.java?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -1020,34 +1020,24 @@ public void visit(MethodVisitor mv) {\n \n     protected void addInitialization(final ClassNode node, final ConstructorNode constructorNode) {\n         Statement firstStatement = constructorNode.getFirstStatement();\n-        // if some transformation decided to generate constructor then it probably knows who it does\n-        if (firstStatement instanceof BytecodeSequence)\n-            return;\n \n-        ConstructorCallExpression first = getFirstIfSpecialConstructorCall(firstStatement);\n+        // if some transformation decided to generate constructor then it probably knows best\n+        if (firstStatement instanceof BytecodeSequence) return;\n \n-        // in case of this(...) let the other constructor do the init\n-        if (first != null && (first.isThisCall())) return;\n+        ConstructorCallExpression specialCtorCall = getFirstIfSpecialConstructorCall(firstStatement);\n \n-        List<Statement> statements = new ArrayList<Statement>();\n-        List<Statement> staticStatements = new ArrayList<Statement>();\n-        final boolean isEnum = node.isEnum();\n-        List<Statement> initStmtsAfterEnumValuesInit = new ArrayList<Statement>();\n-        Set<String> explicitStaticPropsInEnum = new HashSet<String>();\n-        if (isEnum) {\n-            for (PropertyNode propNode : node.getProperties()) {\n-                if (!propNode.isSynthetic() && propNode.getField().isStatic()) {\n-                    explicitStaticPropsInEnum.add(propNode.getField().getName());\n-                }\n-            }\n-            for (FieldNode fieldNode : node.getFields()) {\n-                if (!fieldNode.isSynthetic() && fieldNode.isStatic() && fieldNode.getType() != node) {\n-                    explicitStaticPropsInEnum.add(fieldNode.getName());\n-                }\n-            }\n-        }\n+        // in case of this(...) let the other constructor initialize\n+        if (specialCtorCall != null && (specialCtorCall.isThisCall())) return;\n+\n+        boolean isEnum = node.isEnum();\n+        List<Statement> statements = new ArrayList<>();\n+        List<Statement> staticStatements = new ArrayList<>();\n+        List<Statement> initStmtsAfterEnumValuesInit = new ArrayList<>();\n \n         if (!Traits.isTrait(node)) {\n+            Set<String> explicitStaticPropsInEnum = !isEnum\n+                    ? Collections.emptySet() : getExplicitStaticProperties(node);\n+\n             for (FieldNode fn : node.getFields()) {\n                 addFieldInitialization(statements, staticStatements, fn, isEnum,\n                         initStmtsAfterEnumValuesInit, explicitStaticPropsInEnum);\n@@ -1057,31 +1047,31 @@ protected void addInitialization(final ClassNode node, final ConstructorNode con\n         statements.addAll(node.getObjectInitializerStatements());\n \n         BlockStatement block = getCodeAsBlock(constructorNode);\n-        List<Statement> otherStatements = block.getStatements();\n-        if (!otherStatements.isEmpty()) {\n-            if (first != null) {\n-                // it is super(..) since this(..) is already covered\n-                otherStatements.remove(0);\n+        List<Statement> blockStatements = block.getStatements();\n+        if (!blockStatements.isEmpty()) {\n+            if (specialCtorCall != null) {\n+                blockStatements.remove(0);\n                 statements.add(0, firstStatement);\n             }\n-            Statement stmtThis$0 = getImplicitThis$0StmtIfInnerClass(otherStatements);\n-            if (stmtThis$0 != null) {\n-                // since there can be field init statements that depend on method/property dispatching\n-                // that uses this$0, it needs to bubble up before the super call itself (GROOVY-4471)\n-                statements.add(0, stmtThis$0);\n+            if (node instanceof InnerClassNode) {\n+                // GROOVY-4471: place this$0 init above other field init and super ctor call;\n+                // there can be field initializers that depend on method/property dispatching\n+                Statement initThis$0 = getImplicitThis$0Stmt(blockStatements);\n+                if (initThis$0 != null) {\n+                    statements.add(0, initThis$0);\n+                }\n             }\n-            statements.addAll(otherStatements);\n+            statements.addAll(blockStatements);\n         }\n+\n         BlockStatement newBlock = new BlockStatement(statements, block.getVariableScope());\n         newBlock.setSourcePosition(block);\n         constructorNode.setCode(newBlock);\n \n         if (!staticStatements.isEmpty()) {\n             if (isEnum) {\n-                /*\n-                 * GROOVY-3161: initialize statements for explicitly declared static fields\n-                 * inside an enum should come after enum values are initialized\n-                 */\n+                // GROOVY-3161: initialization statements for explicitly declared static\n+                // fields inside an enum should come after enum values are initialized\n                 staticStatements.removeAll(initStmtsAfterEnumValuesInit);\n                 node.addStaticInitializerStatements(staticStatements, true);\n                 if (!initStmtsAfterEnumValuesInit.isEmpty()) {\n@@ -1093,13 +1083,27 @@ protected void addInitialization(final ClassNode node, final ConstructorNode con\n         }\n     }\n \n-    /*\n+    private static Set<String> getExplicitStaticProperties(final ClassNode cn) {\n+        Set<String> staticProperties = new HashSet<>();\n+        for (PropertyNode pn : cn.getProperties()) {\n+            if (!pn.isSynthetic() && pn.getField().isStatic()) {\n+                staticProperties.add(pn.getField().getName());\n+            }\n+        }\n+        for (FieldNode fn : cn.getFields()) {\n+            if (!fn.isSynthetic() && fn.isStatic() && fn.getType() != cn) {\n+                staticProperties.add(fn.getName());\n+            }\n+        }\n+        return staticProperties;\n+    }\n+\n+    /**\n      * When InnerClassVisitor adds <code>this.this$0 = $p$n</code>, it adds it\n      * as a BlockStatement having that ExpressionStatement.\n      */\n-    private Statement getImplicitThis$0StmtIfInnerClass(final List<Statement> otherStatements) {\n-        if (!(classNode instanceof InnerClassNode)) return null;\n-        for (Statement stmt : otherStatements) {\n+    private static Statement getImplicitThis$0Stmt(final List<Statement> statements) {\n+        for (Statement stmt : statements) {\n             if (stmt instanceof BlockStatement) {\n                 List<Statement> stmts = ((BlockStatement) stmt).getStatements();\n                 for (Statement bstmt : stmts) {\n@@ -1108,7 +1112,7 @@ protected void addInitialization(final ClassNode node, final ConstructorNode con\n                     }\n                 }\n             } else if (stmt instanceof ExpressionStatement) {\n-                if (extractImplicitThis$0StmtIfInnerClassFromExpression(otherStatements, stmt)) return stmt;\n+                if (extractImplicitThis$0StmtIfInnerClassFromExpression(statements, stmt)) return stmt;\n             }\n         }\n         return null;"
  },
  {
    "sha": "978fcec160e534e03086ae73d4141800e924d366",
    "filename": "src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/main/java/org/codehaus/groovy/transform/sc/transformers/VariableExpressionTransformer.java?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -26,6 +26,7 @@\n import org.codehaus.groovy.transform.sc.StaticCompilationMetadataKeys;\n import org.codehaus.groovy.transform.stc.StaticTypesMarker;\n \n+import static org.codehaus.groovy.ast.tools.GeneralUtils.classX;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.propX;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.thisPropX;\n import static org.codehaus.groovy.ast.tools.GeneralUtils.varX;\n@@ -79,7 +80,7 @@ private static Expression tryTransformPrivateFieldAccess(final VariableExpressio\n         }\n         if (field != null) {\n             // access to a private field from a section of code that normally doesn't have access to it, like a closure or an inner class\n-            PropertyExpression pexp = thisPropX(true, expr.getName());\n+            PropertyExpression pexp = !field.isStatic() ? thisPropX(true, expr.getName()) : propX(classX(field.getDeclaringClass()), expr.getName());\n             // store the declaring class so that the class writer knows that it will have to call a bridge method\n             pexp.getObjectExpression().putNodeMetaData(StaticTypesMarker.INFERRED_TYPE, field.getDeclaringClass());\n             pexp.putNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE, field.getOriginType());"
  },
  {
    "sha": "de4ac83e35e96f0eb999c733c26fb4000924c104",
    "filename": "src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/main/java/org/codehaus/groovy/transform/stc/StaticTypeCheckingVisitor.java?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -49,6 +49,7 @@\n import org.codehaus.groovy.ast.Variable;\n import org.codehaus.groovy.ast.expr.AnnotationConstantExpression;\n import org.codehaus.groovy.ast.expr.ArgumentListExpression;\n+import org.codehaus.groovy.ast.expr.ArrayExpression;\n import org.codehaus.groovy.ast.expr.AttributeExpression;\n import org.codehaus.groovy.ast.expr.BinaryExpression;\n import org.codehaus.groovy.ast.expr.BitwiseNegationExpression;\n@@ -4050,6 +4051,19 @@ private void restoreTypeBeforeConditional() {\n         return oldTracker;\n     }\n \n+    @Override\n+    public void visitArrayExpression(ArrayExpression source) {\n+        super.visitArrayExpression(source);\n+        ClassNode elementType = source.getElementType();\n+        for (Expression expression : source.getExpressions()) {\n+            if (!checkCast(elementType, expression)) {\n+                addStaticTypeError(\"Cannot assign value of type \" +\n+                        prettyPrintType(getType(expression)) + \" into array of type \" +\n+                        prettyPrintType(source.getType()), expression);\n+            }\n+        }\n+    }\n+\n     @Override\n     public void visitCastExpression(final CastExpression expression) {\n         super.visitCastExpression(expression);\n@@ -5147,6 +5161,8 @@ protected ClassNode inferReturnTypeGenerics(final ClassNode receiver, final Meth\n         int paramLength = parameters.length;\n         if (expressions.size() >= paramLength) {\n             for (int i = 0; i < paramLength; i += 1) {\n+                if (isNullConstant(expressions.get(i)))\n+                    continue; // GROOVY-9984: skip null\n                 boolean lastArg = (i == paramLength - 1);\n                 ClassNode paramType = parameters[i].getType();\n                 ClassNode argumentType = getType(expressions.get(i));"
  },
  {
    "sha": "e913b88230dc2e245c8ee19cfeb525e25e4db73c",
    "filename": "src/resources/groovy/grape/defaultGrapeConfig.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/resources/groovy/grape/defaultGrapeConfig.xml",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/resources/groovy/grape/defaultGrapeConfig.xml",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/resources/groovy/grape/defaultGrapeConfig.xml?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -28,7 +28,6 @@\n       </filesystem>\n       <ibiblio name=\"localm2\" root=\"${user.home.url}/.m2/repository/\" checkmodified=\"true\" changingPattern=\".*\" changingMatcher=\"regexp\" m2compatible=\"true\"/>\n       <!-- TODO: add 'endorsed groovy extensions' resolver here -->\n-      <ibiblio name=\"jcenter\" root=\"https://jcenter.bintray.com/\" m2compatible=\"true\"/>\n       <ibiblio name=\"ibiblio\" m2compatible=\"true\"/>\n     </chain>\n   </resolvers>"
  },
  {
    "sha": "542b4bf17ae21e0c56bb589f7239f86726812cb5",
    "filename": "src/test/gls/enums/EnumTest.groovy",
    "status": "modified",
    "additions": 93,
    "deletions": 86,
    "changes": 179,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/test/gls/enums/EnumTest.groovy",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/test/gls/enums/EnumTest.groovy",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/test/gls/enums/EnumTest.groovy?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -115,7 +115,7 @@ class EnumTest extends CompilableTestSupport {\n     void testEnumWithSingleListInConstructor() {\n         def sh = new GroovyShell();\n         def enumStr;\n-        \n+\n         enumStr = \"\"\"\n             enum ListEnum1 {\n                 ONE([111, 222])\n@@ -127,7 +127,7 @@ class EnumTest extends CompilableTestSupport {\n             println ListEnum1.ONE\n         \"\"\"\n         sh.evaluate(enumStr);\n-            \n+\n         enumStr = \"\"\"\n             enum ListEnum2 {\n                 TWO([234, [567,12]])\n@@ -140,14 +140,14 @@ class EnumTest extends CompilableTestSupport {\n         \"\"\"\n         sh.evaluate(enumStr)\n     }\n-    \n+\n+    // GROOVY-3214\n     void testSingleListDoesNoInfluenceMaps() {\n-        // the fix for GROOVY-2933 caused map[\"taku\"]\n-        // to become map[([\"take])] instead. -> GROOVY-3214\n+        // the fix for GROOVY-2933 caused map[\"taku\"] to become map[([\"take])] instead\n         assertScript \"\"\"\n             enum FontFamily {\n                 ARIAL\n-            \n+\n                 static void obtainMyMap() {\n                     Map map = [:]\n                     map[\"taku\"] = \"dio\"\n@@ -157,28 +157,28 @@ class EnumTest extends CompilableTestSupport {\n             FontFamily.obtainMyMap()\n         \"\"\"\n     }\n- \n+\n+    // GROOVY-3276\n     void testMutipleValuesDontGetWronglyWrappedInList() {\n-        // the fix for GROOVY-3214 caused multiple values passed in an enum const\n-        // to get wrapped in an extra ListExpression. -> GROOVY-3276\n+        // the fix for GROOVY-3214 caused multiple values passed in an enum const to get wrapped in an extra ListExpression\n         assertScript \"\"\"\n             enum GROOVY3276 {\n                A(1,2), B(3,4)\n-           \n-               GROOVY3276(int xx, int yy) { \n-                   x=xx \n-                   y=yy \n+\n+               GROOVY3276(int xx, int yy) {\n+                   x=xx\n+                   y=yy\n                }\n                public int x\n                public int y\n            }\n-           \n+\n            assert GROOVY3276.A.x == 1\n            assert GROOVY3276.B.y == 4\n         \"\"\"\n     }\n \n-    // the fix for GROOVY-3161\n+    // GROOVY-3161\n     void testStaticEnumFieldWithEnumValues() {\n         def allColors = GroovyColors3161.ALL_COLORS\n         assert allColors.size() == 3\n@@ -187,21 +187,22 @@ class EnumTest extends CompilableTestSupport {\n         assert allColors[2] == GroovyColors3161.green\n     }\n \n-    // the fix for GROOVY-3283\n+    // GROOVY-3283\n     void testImportStaticMoreThanOneEnum() {\n         assertScript \"\"\"\n             enum Foo3283 { A,B }\n             enum Bar3283 { X,Y }\n-            \n+\n             import static Foo3283.*\n             import static Bar3283.*\n-            \n+\n             a = A\n             x = X\n         \"\"\"\n     }\n \n-    void testCallBehaviorOnEnumForGROOVY3284() {\n+    // GROOVY-3284\n+    void testCallBehaviorOnEnum() {\n         // test the usage in a non-script class first\n         for (f in Foo3284) {\n             assert f() == \"A\"\n@@ -223,38 +224,38 @@ class EnumTest extends CompilableTestSupport {\n             for (f in Foo32842) {\n                 assert f() == \"B\"\n             }\n-    \n+\n             assert Foo32842.B.call() == \"B\"\n-    \n+\n             assert Foo32842.B() == \"B\"\n             b = Foo32842.B\n             assert b() == \"B\"\n         \"\"\"\n     }\n \n-    void testClassResolutionForInnerEnumsWithPackageNameGROOVY3483() {\n-\n+    // GROOVY-3483\n+    void testClassResolutionForInnerEnumsWithPackageName() {\n         assertScript \"\"\"\n             package familie\n-            \n+\n             class Mother3483 {\n                 Mother3483.Child child\n-                \n+\n                 enum Child{\n                     Franz,\n                     Ferdi,\n                     Nand\n                 }\n             }\n-            \n+\n             def mother = new Mother3483(child: Mother3483.Child.Franz)\n-            \n+\n             assert mother.child as String == 'Franz'\n         \"\"\"\n     }\n \n+    // GROOVY-3110\n     void testInnerEnumUsedInDefiningClassWithUnqualifiedEnumNameUsed() {\n-        //GROOVY-3110\n         assertScript \"\"\"\n             class Class3110 {\n                 enum Enum3110{FOO, BAR}\n@@ -266,60 +267,60 @@ class EnumTest extends CompilableTestSupport {\n                     var\n                 }\n             }\n-            \n+\n             def obj = new Class3110()\n             obj.setEnumVar()\n             assert obj.getEnumVar() == Class3110.Enum3110.FOO\n         \"\"\"\n     }\n \n+    // GROOVY-3693\n     void testStaticFieldInitValuesInAStaticBlock() {\n-        // GROOVY-3693 - trigger enum class load to test it - asserts are present in the enum \n+        // trigger enum class load to test it - asserts are present in the enum\n         GroovyColors3693.r\n     }\n-    \n+\n+    // GROOVY-2443\n     void testCustomMethodOnEnum() {\n-        // GROOVY-2443\n-        assertScript \"\"\"\n+        assertScript '''\n             enum Day {\n-                SUNDAY {\n-                    String activity() { 'Relax' }\n-                }, MONDAY, TUESDAY, WEDNESDAY,\n-                THURSDAY, FRIDAY, SATURDAY\n+                SUNDAY { @Override String activity() { 'Relax' } },\n+                MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY\n                 String activity() { 'Work' }\n             }\n-            assert \"Work\" == Day.MONDAY.activity() \n-            assert \"Relax\" == Day.SUNDAY.activity()\n-        \"\"\"\n+            assert 'Work' == Day.MONDAY.activity()\n+            assert 'Relax' == Day.SUNDAY.activity()\n+        '''\n     }\n \n+    // GROOVY-3985\n     void testEnumConstantSubClassINITMethodOverrideINITOfEnumClass() {\n         try {\n-            // cause loading of enum that causes its fields to be set and \n+            // cause loading of enum that causes its fields to be set and\n             // their instance initializer to be executed\n             println Color3985\n         }catch(ExceptionInInitializerError err) {\n             assert err.cause.message == 'Color3985 RED instance initializer called successfully'\n         }\n     }\n \n+    // GROOVY-3996\n     void testEnumStaticInitWithAFieldUsingEnumValues() {\n-        //GROOVY-3996\n         assertScript \"\"\"\n             enum Color3996 {\n                 R, G, B\n                 public static Color3996[] ALL_COLORS = [R, G, B]\n             }\n-            \n+\n             assert Color3996.ALL_COLORS.size() == 3\n             assert Color3996.ALL_COLORS[0] == Color3996.R\n             assert Color3996.ALL_COLORS[1] == Color3996.G\n             assert Color3996.ALL_COLORS[2] == Color3996.B\n         \"\"\"\n     }\n \n+    // GROOVY-3986\n     void testEnumWithTopLevelNoBracketsMethodCall() {\n-        // GROOVY-3986\n         assertScript \"\"\"\n             enum Color3986 {\n                 RED {\n@@ -330,8 +331,8 @@ class EnumTest extends CompilableTestSupport {\n         \"\"\"\n     }\n \n+    // GROOVY-3047\n     void testEnumConstantSeparators() {\n-        // GROOVY-3047\n         shouldCompile \"\"\"\n             enum Foo0 { X }\n             enum Foo1 {\n@@ -367,8 +368,8 @@ class EnumTest extends CompilableTestSupport {\n         \"\"\"\n     }\n \n+    // GROOVY-4268\n     void testEnumWithSingleValueAndClassField() {\n-        // GROOVY-4268\n         shouldCompile \"\"\"\n             enum EnumWithSingleValueAndClassField {\n                 VALUE\n@@ -377,55 +378,55 @@ class EnumTest extends CompilableTestSupport {\n         \"\"\"\n     }\n \n+    // GROOVY-4444\n     void testConstructorChainingInEnum() {\n-        // GROOVY-4444\n         assertScript \"\"\"\n             enum Foo4444 {\n                 ONE(1), TWO(1, 2)\n-              \n+\n                 int i\n                 int j\n-              \n+\n                 Foo4444(int i) {\n                     this(i, 0)\n                 }\n-            \n+\n                 Foo4444(int i, int j) {\n                     this.i = i\n                     this.j = j\n                 }\n             }\n-            \n+\n             def foos = [Foo4444.ONE, Foo4444.TWO]\n-            \n+\n             assert foos.size() == 2\n-            \n+\n             assert foos[0].i == 1\n             assert foos[0].j == 0\n-            \n+\n             assert foos[1].i == 1\n             assert foos[1].j == 2\n         \"\"\"\n     }\n \n+    // GROOVY-6065\n     void testOverridingMethodsWithExplicitConstructor() {\n-        // GROOVY-6065\n-        assertScript \"\"\"\n+        assertScript '''\n             enum Country {\n                 Hungary(9_939_000), Italy(61_482_000), Poland(38_383_000) { String getCountryCode() { 'pl' } }\n-                int population\n+                final int population\n                 Country(population) { this.population = population }\n                 String getCountryCode() { name()[0..1].toLowerCase() }\n             }\n \n             assert Country.Hungary.countryCode == 'hu'\n             assert Country.Italy.countryCode == 'it'\n             assert Country.Poland.countryCode == 'pl'\n-        \"\"\"\n+        '''\n     }\n \n+    // GROOVY-4641\n     void testAbstractMethodOverriding() {\n-        // GROOVY-4641\n         assertScript \"\"\"\n             enum Day {\n                SUNDAY {\n@@ -460,8 +461,8 @@ class EnumTest extends CompilableTestSupport {\n         \"\"\"\n     }\n \n+    // GROOVY-5756\n     void testInnerClosureDefinitions() {\n-        // GROOVY-5756\n         assertScript \"\"\"\n             enum MyEnum {\n                 INSTANCE {\n@@ -478,8 +479,8 @@ class EnumTest extends CompilableTestSupport {\n         \"\"\"\n     }\n \n+    // GROOVY-4794\n     void testLenientTypeDefinitions() {\n-        // GROOVY-4794\n         assertScript \"\"\"\n             enum E {\n               enConst {\n@@ -494,8 +495,8 @@ class EnumTest extends CompilableTestSupport {\n         \"\"\"\n     }\n \n+    // GROOVY-4485\n     void testNamedArgs() {\n-        // GROOVY-4485\n         assertScript \"\"\"\n             enum ExportFormat {\n                 EXCEL_OOXML(mime: \"application/vnd.ms-excel\", extension: \"xlsx\"),\n@@ -514,8 +515,8 @@ class EnumTest extends CompilableTestSupport {\n         \"\"\"\n     }\n \n+    // GROOVY-6250\n     void testGenericMethodOverriding() {\n-        // GROOVY-6250\n         assertScript \"\"\"\n             interface IVisitor<InputType, OutputType> {\n                 OutputType visitMe(InputType input)\n@@ -553,7 +554,8 @@ class EnumTest extends CompilableTestSupport {\n         '''\n     }\n \n-    void testLastEnumValueIsAnnotatedWithoutTrailingComma_GROOVY_7342() {\n+    // GROOVY-7342\n+    void testLastEnumValueIsAnnotatedWithoutTrailingComma() {\n         assertScript '''\n             import java.lang.annotation.ElementType;\n             import java.lang.annotation.Target;\n@@ -574,7 +576,8 @@ class EnumTest extends CompilableTestSupport {\n         '''\n     }\n \n-    void testEnumWithPropertiesAndDanglingComma_GROOVY_7773() {\n+    // GROOVY-7773\n+    void testEnumWithPropertiesAndDanglingComma() {\n         assertScript '''\n             enum UsState {\n                 ID('Idaho'),\n@@ -600,7 +603,8 @@ class EnumTest extends CompilableTestSupport {\n           '''\n     }\n \n-    void testNestedEnumHasStaticModifier_GROOVY_8360() {\n+    // GROOVY-8360\n+    void testNestedEnumHasStaticModifier() {\n         assertScript '''\n             class Foo {\n                 enum Bar {\n@@ -609,30 +613,32 @@ class EnumTest extends CompilableTestSupport {\n                     Bar(String s) { this.s = s }\n                     Bar() {}\n                 }\n-            }            \n+            }\n             assert java.lang.reflect.Modifier.isStatic(Foo.Bar.modifiers)\n             assert Foo.Bar.X.s == 'x'\n         '''\n     }\n \n-    void testEnumWithinInnerClassHasStaticModifier_GROOVY_8360() {\n+    // GROOVY-8360\n+    void testEnumWithinInnerClassHasStaticModifier() {\n         assertScript '''\n             class Foo {\n                 class Baz {\n                     enum Bar {\n-                        X('x'), Y                                                                        \n-                        String s                                                                                                \n+                        X('x'), Y\n+                        String s\n                         Bar(String s) { this.s = s }\n-                        Bar() {}                                                \n-                    }                \n+                        Bar() {}\n+                    }\n                 }\n-            }            \n+            }\n             assert java.lang.reflect.Modifier.isStatic(Foo.Baz.Bar.modifiers)\n             assert Foo.Baz.Bar.X.s == 'x'\n         '''\n     }\n \n-    void testNestedEnumHasStaticModifierSC_GROOVY_8360() {\n+    // GROOVY-8360\n+    void testNestedEnumHasStaticModifierSC() {\n         assertScript '''\n             @groovy.transform.CompileStatic\n             class Foo {\n@@ -642,7 +648,7 @@ class EnumTest extends CompilableTestSupport {\n                     Bar(String s) { this.s = s }\n                     Bar() {}\n                 }\n-            }          \n+            }\n             @groovy.transform.CompileStatic\n             void test() {\n                 assert java.lang.reflect.Modifier.isStatic(Foo.Bar.getModifiers())\n@@ -652,25 +658,26 @@ class EnumTest extends CompilableTestSupport {\n         '''\n     }\n \n-    void testEnumWithinInnerClassHasStaticModifierSC_GROOVY_8360() {\n+    // GROOVY-8360\n+    void testEnumWithinInnerClassHasStaticModifierSC() {\n         assertScript '''\n             @groovy.transform.CompileStatic\n             class Foo {\n                 class Baz {\n                     enum Bar {\n-                        X('x'), Y                                                                        \n-                        String s                                                                                                \n+                        X('x'), Y\n+                        String s\n                         Bar(String s) { this.s = s }\n-                        Bar() {}                                                \n-                    }                \n+                        Bar() {}\n+                    }\n                 }\n             }\n             @groovy.transform.CompileStatic\n             void test() {\n                 assert java.lang.reflect.Modifier.isStatic(Foo.Baz.Bar.getModifiers())\n-                assert Foo.Baz.Bar.X.s == 'x'            \n+                assert Foo.Baz.Bar.X.s == 'x'\n             }\n-            test()                       \n+            test()\n         '''\n     }\n }\n@@ -708,15 +715,15 @@ enum GroovyColors3693 {\n     static init() {\n         assert list == [1, 2]\n     }\n-    static { \n-        init() \n+    static {\n+        init()\n     }\n }\n \n enum Color3985 {\n     RED {\n-        { \n-            throw new RuntimeException('Color3985 RED instance initializer called successfully') \n+        {\n+            throw new RuntimeException('Color3985 RED instance initializer called successfully')\n         }\n     },GREEN,BLUE\n }"
  },
  {
    "sha": "fb0d2ab916aab66ae129984359a0339683a1ffa3",
    "filename": "src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/test/groovy/transform/stc/ArraysAndCollectionsSTCTest.groovy?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -44,6 +44,12 @@ class ArraysAndCollectionsSTCTest extends StaticTypeCheckingTestCase {\n         ''', 'Cannot assign value of type java.lang.String into array of type int[]'\n     }\n \n+    void testWrongComponentTypeInArrayInitializer() {\n+        shouldFailWithMessages '''\n+            int[] intArray = new int[]{'a'}\n+        ''', 'Cannot assign value of type java.lang.String into array of type int[]'\n+    }\n+\n     void testAssignValueInArrayWithCorrectType() {\n         assertScript '''\n             int[] arr2 = [1, 2, 3]"
  },
  {
    "sha": "75a6cea01dbbffe598832de07b047b5c8ce73a0b",
    "filename": "src/test/groovy/transform/stc/FieldsAndPropertiesSTCTest.groovy",
    "status": "modified",
    "additions": 55,
    "deletions": 30,
    "changes": 85,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/test/groovy/transform/stc/FieldsAndPropertiesSTCTest.groovy",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/test/groovy/transform/stc/FieldsAndPropertiesSTCTest.groovy",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/test/groovy/transform/stc/FieldsAndPropertiesSTCTest.groovy?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -562,35 +562,6 @@ class FieldsAndPropertiesSTCTest extends StaticTypeCheckingTestCase {\n         ''', 'No such property: p for class: Outer$Inner'\n     }\n \n-    void testPrivateFieldAccessInClosure1() {\n-        assertScript '''\n-            class A {\n-                private int x\n-                void test() {\n-                    def c = { -> x = 666 }\n-                    c()\n-                    assert x == 666\n-                }\n-            }\n-            new A().test()\n-        '''\n-    }\n-\n-    // GROOVY-9683\n-    void testPrivateFieldAccessInClosure2() {\n-        assertScript '''\n-            class A {\n-                private static X = 'xxx'\n-                void test() {\n-                    [:].withDefault { throw new MissingPropertyException(it.toString()) }.with {\n-                        assert X == 'xxx'\n-                    }\n-                }\n-            }\n-            new A().test()\n-        '''\n-    }\n-\n     void testPrivateFieldAccessInAIC() {\n         assertScript '''\n             class A {\n@@ -636,8 +607,37 @@ class FieldsAndPropertiesSTCTest extends StaticTypeCheckingTestCase {\n         '''\n     }\n \n+    void testPrivateFieldAccessInClosure1() {\n+        assertScript '''\n+            class A {\n+                private int x\n+                void test() {\n+                    def c = { -> x = 666 }\n+                    c()\n+                    assert x == 666\n+                }\n+            }\n+            new A().test()\n+        '''\n+    }\n+\n+    // GROOVY-9683\n+    void testPrivateFieldAccessInClosure2() {\n+        assertScript '''\n+            class A {\n+                private static X = 'xxx'\n+                void test() {\n+                    [:].withDefault { throw new MissingPropertyException(it.toString()) }.with {\n+                        assert X == 'xxx'\n+                    }\n+                }\n+            }\n+            new A().test()\n+        '''\n+    }\n+\n     // GROOVY-5737\n-    void testAccessGeneratedFieldFromClosure() {\n+    void testGeneratedFieldAccessInClosure() {\n         assertScript '''\n             import groovy.transform.*\n             import groovy.util.logging.*\n@@ -654,6 +654,31 @@ class FieldsAndPropertiesSTCTest extends StaticTypeCheckingTestCase {\n             '''\n     }\n \n+    // GROOVY-6610\n+    void testPrivateStaticFieldAccessBeforeThis() {\n+        assertScript '''\n+            class Outer {\n+                static class Inner {\n+                    public final String value\n+\n+                    Inner(String string) {\n+                        value = string\n+                    }\n+\n+                    Inner() {\n+                        this(VALUE.toString())\n+                    }\n+                }\n+\n+                private static Integer VALUE = 42\n+\n+                static main(args) {\n+                    assert new Inner().value == '42'\n+                }\n+            }\n+        '''\n+    }\n+\n     // GROOVY-5872\n     void testAssignNullToFieldWithGenericsShouldNotThrowError() {\n         assertScript '''"
  },
  {
    "sha": "acf01052f0994f7b02503f35fa0c497678fca3ab",
    "filename": "src/test/groovy/transform/stc/GenericsSTCTest.groovy",
    "status": "modified",
    "additions": 26,
    "deletions": 2,
    "changes": 28,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/src/test/groovy/transform/stc/GenericsSTCTest.groovy",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/src/test/groovy/transform/stc/GenericsSTCTest.groovy?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -231,11 +231,22 @@ class GenericsSTCTest extends StaticTypeCheckingTestCase {\n         assertScript '''\n             Set<Number> set = new HashSet<Number>(Arrays.asList(0L))\n         '''\n+\n+        assertScript '''\n+            Set<? super Number> set = new HashSet<>(Arrays.asList(0L))\n+        '''\n+\n+        assertScript '''\n+            Set<? extends Number> set = new HashSet<>(Arrays.asList(0L))\n+        '''\n     }\n \n+    // GROOVY-7419\n     void testDiamondInferrenceFromConstructor4() {\n         assertScript '''\n-            Set<? extends Number> set = new HashSet<>(Arrays.asList(0L))\n+            Map<Thread.State, Object> map = new EnumMap<>(Thread.State)\n+            assert map.size() == 0\n+            assert map.isEmpty()\n         '''\n     }\n \n@@ -270,7 +281,7 @@ class GenericsSTCTest extends StaticTypeCheckingTestCase {\n     // GROOVY-9948\n     void testDiamondInferrenceFromConstructor7() {\n         assertScript '''\n-            @groovy.transform.TupleConstructor\n+            @groovy.transform.TupleConstructor(defaults=false)\n             class C<T> {\n                 T p\n             }\n@@ -280,6 +291,19 @@ class GenericsSTCTest extends StaticTypeCheckingTestCase {\n         '''\n     }\n \n+    // GROOVY-9984\n+    void testDiamondInferrenceFromConstructor7a() {\n+        assertScript '''\n+            @groovy.transform.TupleConstructor(defaults=false)\n+            class C<T> {\n+                T p\n+            }\n+\n+            C<Integer> c = new C<>(null)\n+            assert c.p === null\n+        '''\n+    }\n+\n     // GROOVY-9956\n     void testDiamondInferrenceFromConstructor8() {\n         assertScript '''"
  },
  {
    "sha": "addfb2af26f22ac41a6b1ce163aba85702146425",
    "filename": "versions.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/groovy/blob/ba81d2de1077c9cea87d05188b44bae169f81ec0/versions.properties",
    "raw_url": "https://github.com/Mu-L/groovy/raw/ba81d2de1077c9cea87d05188b44bae169f81ec0/versions.properties",
    "contents_url": "https://api.github.com/repos/Mu-L/groovy/contents/versions.properties?ref=ba81d2de1077c9cea87d05188b44bae169f81ec0",
    "patch": "@@ -39,7 +39,7 @@ logback = 1.2.3\n junit = 4.13.2\n log4j = 1.2.17\n log4j2 = 2.14.0\n-openbeans = 1.0\n+openbeans = 1.0.2\n picocli = 4.5.2\n qdox = 1.12.1\n slf4j = 1.7.30"
  }
]
