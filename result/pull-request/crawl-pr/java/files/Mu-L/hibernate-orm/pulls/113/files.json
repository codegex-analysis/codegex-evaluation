[
  {
    "sha": "9d9ad649deb6df1f9ebedf8c4752357819d5b12a",
    "filename": ".github/hibernate-github-bot.yml",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/.github/hibernate-github-bot.yml",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/.github/hibernate-github-bot.yml",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/.github/hibernate-github-bot.yml?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -0,0 +1,3 @@\n+---\n+jira:\n+  projectKey: \"HHH\""
  },
  {
    "sha": "eee8c47bd58d93d2e332051b541368a2afe14cdc",
    "filename": "docker_db.sh",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/docker_db.sh",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/docker_db.sh",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/docker_db.sh?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -200,7 +200,7 @@ hana() {\n       --ulimit nofile=1048576:1048576 \\\n       --sysctl kernel.shmmax=1073741824 \\\n       --sysctl net.ipv4.ip_local_port_range='40000 60999' \\\n-      --sysctl kernel.shmmni=524288 \\\n+      --sysctl kernel.shmmni=4096 \\\n       --sysctl kernel.shmall=8388608 \\\n       -v $temp_dir:/config \\\n       store/saplabs/hanaexpress:2.00.045.00.20200121.1 \\\n@@ -225,6 +225,12 @@ cockroachdb() {\n         sleep 10\n         OUTPUT=$(docker logs cockroach)\n   done\n+  echo \"Enabling experimental box2d operators\"\n+  docker exec -it cockroach bash -c \"cat <<EOF | ./cockroach sql --insecure\n+SET CLUSTER SETTING sql.spatial.experimental_box2d_comparison_operators.enabled = on;\n+quit\n+EOF\n+\"\n   echo \"Cockroachdb successfully started\"\n \n }"
  },
  {
    "sha": "578048ac4d0107f97c4e6588492ed866219dced8",
    "filename": "documentation/src/main/asciidoc/userguide/chapters/query/spatial/Spatial.adoc",
    "status": "modified",
    "additions": 43,
    "deletions": 35,
    "changes": 78,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/documentation/src/main/asciidoc/userguide/chapters/query/spatial/Spatial.adoc",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/documentation/src/main/asciidoc/userguide/chapters/query/spatial/Spatial.adoc",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/documentation/src/main/asciidoc/userguide/chapters/query/spatial/Spatial.adoc?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -86,42 +86,42 @@ relevant section.\n :no: icon:times[role=\"red\"]\n [[spatial-configuration-dialect-features]]\n .Hibernate Spatial dialect function support\n-[cols=\",,,,,,,\" |options=\"header\",]\n+[cols=\",,,,,,,,\" |options=\"header\",]\n |================================\n-|Function | Description | PostgresSQL | Oracle 10g/11g | MySQL | SQLServer | GeoDB (H2) | DB2\n-|Basic functions on Geometry | | | | | | |\n-|`int dimension(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`String geometrytype(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`int srid(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`Geometry envelope(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`String astext(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`byte[] asbinary(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean isempty(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean issimple(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`Geometry boundary(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}\n-|Functions for testing Spatial Relations between geometric objects | | | | | | |\n-|`boolean equals(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean disjoint(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean intersects(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean touches(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean crosses(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean within(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean contains(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean overlaps(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n-|`boolean relate(Geometry, Geometry, String)` | SFS §2.1.1.2 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}\n-|Functions that support Spatial Analysis | | | | | | |\n-|`double distance(Geometry, Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}\n-|`Geometry buffer(Geometry, double)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}\n-|`Geometry convexhull(Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^\n-|`Geometry intersection(Geometry, Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^\n-|`Geometry geomunion(Geometry, Geometry)` | SFS §2.1.1.3 (renamed from union) | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^\n-|`Geometry difference(Geometry, Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^\n-|`Geometry symdifference(Geometry, Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^\n-|Common non-SFS functions | | | | | | |\n-|`boolean dwithin(Geometry, Geometry, double)` | Returns true if the geometries are within the specified distance of one another | {yes} | {yes} | {no} | {no} | {yes} | {yes}\n-|`Geometry transform(Geometry, int)` | Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter | {yes} | {yes} | {no} | {no} | {no} | {no}\n-|Spatial aggregate Functions | | | | | | |\n-|`Geometry extent(Geometry)` | Returns a bounding box that bounds the set of returned geometries | {yes} | {yes} | {no} | {no} | {no} | {no}\n+|Function | Description | PostgresSQL | Oracle 10g/11g | MySQL | SQLServer | GeoDB (H2) | DB2 | CockroachDB\n+|Basic functions on Geometry | | | | | | | |\n+|`int dimension(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`String geometrytype(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`int srid(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`Geometry envelope(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`String astext(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`byte[] asbinary(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean isempty(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean issimple(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`Geometry boundary(Geometry)` | SFS §2.1.1.1 | {yes} | {yes} | {no} | {yes} | {yes} | {yes} | {yes}\n+|Functions for testing Spatial Relations between geometric objects | | | | | | | |\n+|`boolean equals(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean disjoint(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean intersects(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean touches(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean crosses(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean within(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean contains(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean overlaps(Geometry, Geometry)` | SFS §2.1.1.2 | {yes} | {yes} | {yes} | {yes} | {yes} | {yes} | {yes}\n+|`boolean relate(Geometry, Geometry, String)` | SFS §2.1.1.2 | {yes} | {yes} | {no} | {yes} | {yes} | {yes} | {yes}\n+|Functions that support Spatial Analysis | | | | | | | |\n+|`double distance(Geometry, Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes} | {yes}\n+|`Geometry buffer(Geometry, double)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes} | {yes}\n+|`Geometry convexhull(Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^ | {no}\n+|`Geometry intersection(Geometry, Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^ | {yes}\n+|`Geometry geomunion(Geometry, Geometry)` | SFS §2.1.1.3 (renamed from union) | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^ | {yes}\n+|`Geometry difference(Geometry, Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^ | {yes}\n+|`Geometry symdifference(Geometry, Geometry)` | SFS §2.1.1.3 | {yes} | {yes} | {no} | {yes} | {yes} | {yes}^(1)^ | {yes}\n+|Common non-SFS functions | | | | | | | |\n+|`boolean dwithin(Geometry, Geometry, double)` | Returns true if the geometries are within the specified distance of one another | {yes} | {yes} | {no} | {no} | {yes} | {yes}  | {yes}\n+|`Geometry transform(Geometry, int)` | Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter | {yes} | {yes} | {no} | {no} | {no} | {no}  | {yes}\n+|Spatial aggregate Functions | | | | | | | |\n+|`Geometry extent(Geometry)` | Returns a bounding box that bounds the set of returned geometries | {yes} | {yes} | {no} | {no} | {no} | {no} | {yes}\n |================================\n ^(1)^ Argument Geometries need to have the same dimensionality.\n \n@@ -191,6 +191,14 @@ The dialect `SqlServer2008Dialect` supports the `GEOMETRY` type in SQL Server 20\n The `GEOGRAPHY` type is not currently supported.\n ====\n \n+CockroachDB::\n+The dialect `CockroachDB202SpatialDialect` support the `GEOMETRY` type in CockroachDB v20.2 and later.\n+\n+[NOTE]\n+====\n+The `GEOGRAPHY` type is not currently supported.\n+====\n+\n GeoDB (H2)::\n The `GeoDBDialect` supports the GeoDB a spatial extension of the H2 in-memory database.\n [NOTE]"
  },
  {
    "sha": "8f0795dae05d1756598329685745af9a6cde1c0f",
    "filename": "gradle/databases.gradle",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/gradle/databases.gradle",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/gradle/databases.gradle",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/gradle/databases.gradle?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -226,5 +226,14 @@ ext {\n                         // Disable prepared statement caching due to https://www.postgresql.org/message-id/CAEcMXhmmRd4-%2BNQbnjDT26XNdUoXdmntV9zdr8%3DTu8PL9aVCYg%40mail.gmail.com\n                         'jdbc.url'   : 'jdbc:postgresql://localhost:26257/defaultdb?sslmode=disable&preparedStatementCacheQueries=0'\n                 ],\n+                cockroachdb_spatial : [\n+                        'db.dialect' : 'org.hibernate.spatial.dialect.cockroachdb.CockroachDB202SpatialDialect',\n+                        // CockroachDB uses the same pgwire protocol as PostgreSQL, so the driver is the same.\n+                        'jdbc.driver': 'org.postgresql.Driver',\n+                        'jdbc.user'  : 'root',\n+                        'jdbc.pass'  : '',\n+                        // Disable prepared statement caching due to https://www.postgresql.org/message-id/CAEcMXhmmRd4-%2BNQbnjDT26XNdUoXdmntV9zdr8%3DTu8PL9aVCYg%40mail.gmail.com\n+                        'jdbc.url'   : 'jdbc:postgresql://localhost:26257/defaultdb?sslmode=disable&preparedStatementCacheQueries=0'\n+                ]\n         ]\n }"
  },
  {
    "sha": "c97a65f5b4cabf997dcb467535fb8154298e3733",
    "filename": "gradle/libraries.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/gradle/libraries.gradle",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/gradle/libraries.gradle",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/gradle/libraries.gradle?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -29,7 +29,7 @@ ext {\n \n     assertjVersion = '3.14.0'\n \n-    geolatteVersion = '1.6.1'\n+    geolatteVersion = '1.8.0'\n \n     shrinkwrapVersion = '1.2.6'\n     shrinkwrapDescriptorsVersion = '2.0.0'"
  },
  {
    "sha": "e7b4e609463cc48c6282b5f572c4e67868242940",
    "filename": "hibernate-core/src/main/java/org/hibernate/boot/model/source/internal/annotations/AnnotationMetadataSourceProcessorImpl.java",
    "status": "modified",
    "additions": 21,
    "deletions": 9,
    "changes": 30,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/boot/model/source/internal/annotations/AnnotationMetadataSourceProcessorImpl.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/boot/model/source/internal/annotations/AnnotationMetadataSourceProcessorImpl.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/main/java/org/hibernate/boot/model/source/internal/annotations/AnnotationMetadataSourceProcessorImpl.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -252,7 +252,7 @@ public void processEntityHierarchies(Set<String> processedEntityNames) {\n \t}\n \n \tprivate List<XClass> orderAndFillHierarchy(List<XClass> original) {\n-\t\tList<XClass> copy = new ArrayList<XClass>( original );\n+\t\tList<XClass> copy = new ArrayList<>( original.size() );\n \t\tinsertMappedSuperclasses( original, copy );\n \n \t\t// order the hierarchy\n@@ -266,16 +266,28 @@ public void processEntityHierarchies(Set<String> processedEntityNames) {\n \t}\n \n \tprivate void insertMappedSuperclasses(List<XClass> original, List<XClass> copy) {\n+\t\tfinal boolean debug = log.isDebugEnabled();\n \t\tfor ( XClass clazz : original ) {\n-\t\t\tXClass superClass = clazz.getSuperclass();\n-\t\t\twhile ( superClass != null\n-\t\t\t\t\t&& !reflectionManager.equals( superClass, Object.class )\n-\t\t\t\t\t&& !copy.contains( superClass ) ) {\n-\t\t\t\tif ( superClass.isAnnotationPresent( Entity.class )\n-\t\t\t\t\t\t|| superClass.isAnnotationPresent( javax.persistence.MappedSuperclass.class ) ) {\n-\t\t\t\t\tcopy.add( superClass );\n+\t\t\tif ( clazz.isAnnotationPresent( javax.persistence.MappedSuperclass.class ) ) {\n+\t\t\t\tif ( debug ) {\n+\t\t\t\t\tlog.debugf(\n+\t\t\t\t\t\t\t\"Skipping explicit MappedSuperclass %s, the class will be discovered analyzing the implementing class\",\n+\t\t\t\t\t\t\tclazz\n+\t\t\t\t\t);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tcopy.add( clazz );\n+\t\t\t\tXClass superClass = clazz.getSuperclass();\n+\t\t\t\twhile ( superClass != null\n+\t\t\t\t\t\t&& !reflectionManager.equals( superClass, Object.class )\n+\t\t\t\t\t\t&& !copy.contains( superClass ) ) {\n+\t\t\t\t\tif ( superClass.isAnnotationPresent( Entity.class )\n+\t\t\t\t\t\t\t|| superClass.isAnnotationPresent( javax.persistence.MappedSuperclass.class ) ) {\n+\t\t\t\t\t\tcopy.add( superClass );\n+\t\t\t\t\t}\n+\t\t\t\t\tsuperClass = superClass.getSuperclass();\n \t\t\t\t}\n-\t\t\t\tsuperClass = superClass.getSuperclass();\n \t\t\t}\n \t\t}\n \t}"
  },
  {
    "sha": "a1e0f7c7799fb77e4421fe2cd96322c732b10075",
    "filename": "hibernate-core/src/main/java/org/hibernate/cfg/AnnotationBinder.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/cfg/AnnotationBinder.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/cfg/AnnotationBinder.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/main/java/org/hibernate/cfg/AnnotationBinder.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -1500,8 +1500,7 @@ static int addElementsOfClass(\n \t\t\tMetadataBuildingContext context) {\n \t\tint idPropertyCounter = 0;\n \n-\t\tCollection<XProperty> properties = propertyContainer.getProperties();\n-\t\tfor ( XProperty p : properties ) {\n+\t\tfor ( XProperty p : propertyContainer.propertyIterator() ) {\n \t\t\tfinal int currentIdPropertyCounter = addProperty(\n \t\t\t\t\tpropertyContainer,\n \t\t\t\t\tp,"
  },
  {
    "sha": "02e3e50b34eae6668f9fe52a3273eb2611385514",
    "filename": "hibernate-core/src/main/java/org/hibernate/cfg/PropertyContainer.java",
    "status": "modified",
    "additions": 29,
    "deletions": 10,
    "changes": 39,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/cfg/PropertyContainer.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/cfg/PropertyContainer.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/main/java/org/hibernate/cfg/PropertyContainer.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -9,6 +9,7 @@\n \n package org.hibernate.cfg;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -35,6 +36,7 @@\n import org.hibernate.cfg.annotations.HCANNHelper;\n import org.hibernate.internal.CoreMessageLogger;\n import org.hibernate.internal.util.StringHelper;\n+import org.hibernate.internal.util.collections.CollectionHelper;\n \n import org.jboss.logging.Logger;\n \n@@ -63,7 +65,7 @@\n \t */\n \tprivate final AccessType classLevelAccessType;\n \n-\tprivate final TreeMap<String, XProperty> persistentAttributeMap;\n+\tprivate final List<XProperty> persistentAttributes;\n \n \tPropertyContainer(XClass clazz, XClass entityAtStake, AccessType defaultClassLevelAccessType) {\n \t\tthis.xClass = clazz;\n@@ -83,7 +85,6 @@\n \t\t\t\t: defaultClassLevelAccessType;\n \t\tassert classLevelAccessType == AccessType.FIELD || classLevelAccessType == AccessType.PROPERTY;\n \n-\t\tthis.persistentAttributeMap = new TreeMap<String, XProperty>();\n \n \t\tfinal List<XProperty> fields = xClass.getDeclaredProperties( AccessType.FIELD.getType() );\n \t\tfinal List<XProperty> getters = xClass.getDeclaredProperties( AccessType.PROPERTY.getType() );\n@@ -92,18 +93,23 @@\n \n \t\tfinal Map<String,XProperty> persistentAttributesFromGetters = new HashMap<String, XProperty>();\n \n+\t\tfinal TreeMap<String, XProperty> localAttributeMap = new TreeMap<>();\n \t\tcollectPersistentAttributesUsingLocalAccessType(\n-\t\t\t\tpersistentAttributeMap,\n+\t\t\t\txClass,\n+\t\t\t\tlocalAttributeMap,\n \t\t\t\tpersistentAttributesFromGetters,\n \t\t\t\tfields,\n \t\t\t\tgetters\n \t\t);\n \t\tcollectPersistentAttributesUsingClassLevelAccessType(\n-\t\t\t\tpersistentAttributeMap,\n+\t\t\t\txClass,\n+\t\t\t\tclassLevelAccessType,\n+\t\t\t\tlocalAttributeMap,\n \t\t\t\tpersistentAttributesFromGetters,\n \t\t\t\tfields,\n \t\t\t\tgetters\n \t\t);\n+\t\tthis.persistentAttributes = verifyAndInitializePersistentAttributes( xClass, localAttributeMap );\n \t}\n \n \tprivate void preFilter(List<XProperty> fields, List<XProperty> getters) {\n@@ -124,7 +130,8 @@ private void preFilter(List<XProperty> fields, List<XProperty> getters) {\n \t\t}\n \t}\n \n-\tprivate void collectPersistentAttributesUsingLocalAccessType(\n+\tprivate static void collectPersistentAttributesUsingLocalAccessType(\n+\t\t\tXClass xClass,\n \t\t\tTreeMap<String, XProperty> persistentAttributeMap,\n \t\t\tMap<String,XProperty> persistentAttributesFromGetters,\n \t\t\tList<XProperty> fields,\n@@ -176,7 +183,9 @@ private void collectPersistentAttributesUsingLocalAccessType(\n \t\t}\n \t}\n \n-\tprivate void collectPersistentAttributesUsingClassLevelAccessType(\n+\tprivate static void collectPersistentAttributesUsingClassLevelAccessType(\n+\t\t\tXClass xClass,\n+\t\t\tAccessType classLevelAccessType,\n \t\t\tTreeMap<String, XProperty> persistentAttributeMap,\n \t\t\tMap<String,XProperty> persistentAttributesFromGetters,\n \t\t\tList<XProperty> fields,\n@@ -229,20 +238,30 @@ public AccessType getClassLevelAccessType() {\n \t\treturn classLevelAccessType;\n \t}\n \n+\t/**\n+\t * @deprecated Use the {@link #propertyIterator()} method instead.\n+\t */\n+\t@Deprecated\n \tpublic Collection<XProperty> getProperties() {\n-\t\tassertTypesAreResolvable();\n-\t\treturn Collections.unmodifiableCollection( persistentAttributeMap.values() );\n+\t\treturn Collections.unmodifiableCollection( this.persistentAttributes );\n+\t}\n+\n+\tpublic Iterable<XProperty> propertyIterator() {\n+\t\treturn persistentAttributes;\n \t}\n \n-\tprivate void assertTypesAreResolvable() {\n-\t\tfor ( XProperty xProperty : persistentAttributeMap.values() ) {\n+\tprivate static List<XProperty> verifyAndInitializePersistentAttributes(XClass xClass, Map<String, XProperty> localAttributeMap) {\n+\t\tArrayList<XProperty> output = new ArrayList( localAttributeMap.size() );\n+\t\tfor ( XProperty xProperty : localAttributeMap.values() ) {\n \t\t\tif ( !xProperty.isTypeResolved() && !discoverTypeWithoutReflection( xProperty ) ) {\n \t\t\t\tString msg = \"Property \" + StringHelper.qualify( xClass.getName(), xProperty.getName() ) +\n \t\t\t\t\t\t\" has an unbound type and no explicit target entity. Resolve this Generic usage issue\" +\n \t\t\t\t\t\t\" or set an explicit target attribute (eg @OneToMany(target=) or use an explicit @Type\";\n \t\t\t\tthrow new AnnotationException( msg );\n \t\t\t}\n+\t\t\toutput.add( xProperty );\n \t\t}\n+\t\treturn CollectionHelper.toSmallList( output );\n \t}\n //\n //\tprivate void considerExplicitFieldAndPropertyAccess() {"
  },
  {
    "sha": "170a7288a2cca1a0ed1e91c1b99aede67b155027",
    "filename": "hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -1584,12 +1584,10 @@ protected ScrollableResultsImplementor doScroll(ScrollMode scrollMode) {\n \t\tfinal ScrollableResultsIterator<R> iterator = new ScrollableResultsIterator<>( scrollableResults );\n \t\tfinal Spliterator<R> spliterator = Spliterators.spliteratorUnknownSize( iterator, Spliterator.NONNULL );\n \n-\t\tfinal Stream<R> stream = new StreamDecorator(\n+\t\treturn new StreamDecorator<>(\n \t\t\t\tStreamSupport.stream( spliterator, false ),\n-\t\t\t\tscrollableResults::close\n+\t\t\t\titerator::close\n \t\t);\n-\n-\t\treturn stream;\n \t}\n \n \t@Override"
  },
  {
    "sha": "00a02d069977ca546d4d808d6393e7fc8e1fe061",
    "filename": "hibernate-core/src/main/java/org/hibernate/query/spi/DoubleStreamDecorator.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/spi/DoubleStreamDecorator.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/spi/DoubleStreamDecorator.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/main/java/org/hibernate/query/spi/DoubleStreamDecorator.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -41,15 +41,13 @@\n public class DoubleStreamDecorator implements DoubleStream {\n \n \tprivate final DoubleStream delegate;\n-\n-\tprivate Runnable closeHandler;\n+\tprivate final Runnable closeHandler;\n \n \tpublic DoubleStreamDecorator(\n \t\t\tDoubleStream delegate,\n \t\t\tRunnable closeHandler) {\n-\t\tthis.delegate = delegate;\n \t\tthis.closeHandler = closeHandler;\n-\t\tthis.delegate.onClose( closeHandler );\n+\t\tthis.delegate = delegate.onClose( closeHandler );\n \t}\n \n \t@Override\n@@ -292,7 +290,7 @@ public DoubleStream unordered() {\n \n \t@Override\n \tpublic DoubleStream onClose(Runnable closeHandler) {\n-\t\tthis.closeHandler = closeHandler;\n+\t\tthis.delegate.onClose( closeHandler );\n \t\treturn this;\n \t}\n "
  },
  {
    "sha": "470128b2c97ea7da9db13abb5bda4360107b5409",
    "filename": "hibernate-core/src/main/java/org/hibernate/query/spi/IntStreamDecorator.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/spi/IntStreamDecorator.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/spi/IntStreamDecorator.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/main/java/org/hibernate/query/spi/IntStreamDecorator.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -42,15 +42,13 @@\n public class IntStreamDecorator implements IntStream {\n \n \tprivate final IntStream delegate;\n-\n-\tprivate Runnable closeHandler;\n+\tprivate final Runnable closeHandler;\n \n \tpublic IntStreamDecorator(\n \t\t\tIntStream delegate,\n \t\t\tRunnable closeHandler) {\n-\t\tthis.delegate = delegate;\n \t\tthis.closeHandler = closeHandler;\n-\t\tthis.delegate.onClose( closeHandler );\n+\t\tthis.delegate = delegate.onClose( closeHandler );\n \t}\n \n \t@Override\n@@ -307,7 +305,7 @@ public IntStream unordered() {\n \n \t@Override\n \tpublic IntStream onClose(Runnable closeHandler) {\n-\t\tthis.closeHandler = closeHandler;\n+\t\tthis.delegate.onClose( closeHandler );\n \t\treturn this;\n \t}\n "
  },
  {
    "sha": "befd5a16f29d7a6706b89ddb9cef3c47c1f5dfe7",
    "filename": "hibernate-core/src/main/java/org/hibernate/query/spi/LongStreamDecorator.java",
    "status": "modified",
    "additions": 6,
    "deletions": 8,
    "changes": 14,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/spi/LongStreamDecorator.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/spi/LongStreamDecorator.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/main/java/org/hibernate/query/spi/LongStreamDecorator.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -42,15 +42,13 @@\n public class LongStreamDecorator implements LongStream {\n \n \tprivate final LongStream delegate;\n-\n-\tprivate Runnable closeHandler;\n+\tprivate final Runnable closeHandler;\n \n \tpublic LongStreamDecorator(\n \t\t\tLongStream delegate,\n \t\t\tRunnable closeHandler) {\n-\t\tthis.delegate = delegate;\n \t\tthis.closeHandler = closeHandler;\n-\t\tthis.delegate.onClose( closeHandler );\n+\t\tthis.delegate = delegate.onClose( closeHandler );\n \t}\n \n \t@Override\n@@ -226,21 +224,21 @@ public LongSummaryStatistics summaryStatistics() {\n \n \t@Override\n \tpublic boolean anyMatch(LongPredicate predicate) {\n-\t\tboolean result = delegate.anyMatch(predicate);\n+\t\tboolean result = delegate.anyMatch( predicate );\n \t\tclose();\n \t\treturn result;\n \t}\n \n \t@Override\n \tpublic boolean allMatch(LongPredicate predicate) {\n-\t\tboolean result = delegate.allMatch(predicate);\n+\t\tboolean result = delegate.allMatch( predicate );\n \t\tclose();\n \t\treturn result;\n \t}\n \n \t@Override\n \tpublic boolean noneMatch(LongPredicate predicate) {\n-\t\tboolean result = delegate.noneMatch(predicate);\n+\t\tboolean result = delegate.noneMatch( predicate );\n \t\tclose();\n \t\treturn result;\n \t}\n@@ -300,7 +298,7 @@ public LongStream unordered() {\n \n \t@Override\n \tpublic LongStream onClose(Runnable closeHandler) {\n-\t\tthis.closeHandler = closeHandler;\n+\t\tthis.delegate.onClose( closeHandler );\n \t\treturn this;\n \t}\n "
  },
  {
    "sha": "9d862396b7f4041958c0f283f1839fa868e0d6de",
    "filename": "hibernate-core/src/main/java/org/hibernate/query/spi/StreamDecorator.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/spi/StreamDecorator.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/main/java/org/hibernate/query/spi/StreamDecorator.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/main/java/org/hibernate/query/spi/StreamDecorator.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -46,15 +46,13 @@\n public class StreamDecorator<R> implements Stream<R> {\n \n \tprivate final Stream<R> delegate;\n-\n-\tprivate Runnable closeHandler;\n+\tprivate final Runnable closeHandler;\n \n \tpublic StreamDecorator(\n \t\t\tStream<R> delegate,\n \t\t\tRunnable closeHandler) {\n-\t\tthis.delegate = delegate;\n \t\tthis.closeHandler = closeHandler;\n-\t\tthis.delegate.onClose( closeHandler );\n+\t\tthis.delegate = delegate.onClose( closeHandler );\n \t}\n \n \t@Override\n@@ -301,7 +299,7 @@ public boolean isParallel() {\n \n \t@Override\n \tpublic Stream<R> onClose(Runnable closeHandler) {\n-\t\tthis.closeHandler = closeHandler;\n+\t\tthis.delegate.onClose( closeHandler );\n \t\treturn this;\n \t}\n "
  },
  {
    "sha": "fe49221bce275eed00c8f7d1f685b99f08d065d3",
    "filename": "hibernate-core/src/test/java/org/hibernate/test/mapping/MappedSuperclassWithGenericsTest.java",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/test/java/org/hibernate/test/mapping/MappedSuperclassWithGenericsTest.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/test/java/org/hibernate/test/mapping/MappedSuperclassWithGenericsTest.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/test/java/org/hibernate/test/mapping/MappedSuperclassWithGenericsTest.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.test.mapping;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.MappedSuperclass;\n+\n+import org.hibernate.testing.TestForIssue;\n+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n+import org.junit.Test;\n+\n+@TestForIssue(jiraKey = \"HHH-14499\")\n+public class MappedSuperclassWithGenericsTest extends BaseCoreFunctionalTestCase {\n+\n+\t@Override\n+\tprotected Class<?>[] getAnnotatedClasses() {\n+\t\treturn new Class[] {\n+\t\t\t\tIntermediateAbstractMapped.class,\n+\t\t\t\tBaseEntity.class,\n+\t\t\t\tAbstractGenericMappedSuperType.class,\n+\t\t};\n+\t}\n+\n+\t@Test\n+\tpublic void testIt() {\n+\n+\t}\n+\n+\t@MappedSuperclass\n+\tpublic static abstract class AbstractGenericMappedSuperType<T> {\n+\n+\t\tprivate T whateverType;\n+\n+\t}\n+\n+\t@MappedSuperclass\n+\t@IdClass(PK.class)\n+\tpublic static abstract class IntermediateAbstractMapped<T> extends AbstractGenericMappedSuperType<T> {\n+\n+\t\t@Id\n+\t\tprivate String keyOne;\n+\t\t@Id\n+\t\tprivate String keyTwo;\n+\t\t@Id\n+\t\tprivate String keyThree;\n+\t}\n+\n+\t@SuppressWarnings(\"UnusedDeclaration\")\n+\tpublic static class PK implements Serializable {\n+\n+\t\tprivate String keyOne;\n+\t\tprivate String keyTwo;\n+\t\tprivate String keyThree;\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object o) {\n+\t\t\tif ( this == o ) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif ( o == null || getClass() != o.getClass() ) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tPK pk = (PK) o;\n+\t\t\treturn Objects.equals( keyOne, pk.keyOne ) &&\n+\t\t\t\t\tObjects.equals( keyTwo, pk.keyTwo ) &&\n+\t\t\t\t\tObjects.equals( keyThree, pk.keyThree );\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn Objects.hash( keyOne, keyTwo, keyThree );\n+\t\t}\n+\t}\n+\n+\t@Entity(name = \"BaseEntity\")\n+\tpublic static class BaseEntity<T> extends IntermediateAbstractMapped<byte[]> {\n+\n+\t\tString aString;\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "79adf7b4218e6417696800935b0f31b0c4f9029b",
    "filename": "hibernate-core/src/test/java/org/hibernate/test/stream/basic/BasicStreamTest.java",
    "status": "modified",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/test/java/org/hibernate/test/stream/basic/BasicStreamTest.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/test/java/org/hibernate/test/stream/basic/BasicStreamTest.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/test/java/org/hibernate/test/stream/basic/BasicStreamTest.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -6,6 +6,7 @@\n  */\n package org.hibernate.test.stream.basic;\n \n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.stream.Stream;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n@@ -25,6 +26,7 @@\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsEqual.equalTo;\n import static org.hibernate.testing.junit4.ExtraAssertions.assertTyping;\n import static org.hibernate.testing.transaction.TransactionUtil.doInHibernate;\n \n@@ -123,6 +125,53 @@ public void testTupleStream() {\n \t\t} );\n \t}\n \n+\t@Test\n+\tpublic void basicStreamTestWithExplicitOnClose() {\n+\t\tSession session = openSession();\n+\t\tsession.getTransaction().begin();\n+\n+\t\tAtomicInteger onCloseCount = new AtomicInteger();\n+\n+\t\t// mainly we want to make sure that closing the Stream releases the ScrollableResults too\n+\t\tassertThat( ( (SessionImplementor) session ).getJdbcCoordinator()\n+\t\t\t\t\t\t\t.getLogicalConnection()\n+\t\t\t\t\t\t\t.getResourceRegistry()\n+\t\t\t\t\t\t\t.hasRegisteredResources(), is( false ) );\n+\n+\t\tassertThat( onCloseCount.get(), equalTo( 0 ) );\n+\n+\t\tfinal Stream<MyEntity> stream = session.createQuery( \"from MyEntity\", MyEntity.class ).stream().onClose(\n+\t\t\t\tonCloseCount::incrementAndGet );\n+\n+\t\tassertThat( ( (SessionImplementor) session ).getJdbcCoordinator()\n+\t\t\t\t\t\t\t.getLogicalConnection()\n+\t\t\t\t\t\t\t.getResourceRegistry()\n+\t\t\t\t\t\t\t.hasRegisteredResources(), is( true ) );\n+\n+\t\tassertThat( onCloseCount.get(), equalTo( 0 ) );\n+\n+\t\tstream.forEach( System.out::println );\n+\n+\t\tassertThat( ( (SessionImplementor) session ).getJdbcCoordinator()\n+\t\t\t\t\t\t\t.getLogicalConnection()\n+\t\t\t\t\t\t\t.getResourceRegistry()\n+\t\t\t\t\t\t\t.hasRegisteredResources(), is( false ) );\n+\n+\t\tassertThat( onCloseCount.get(), equalTo( 1 ) );\n+\n+\t\tstream.close();\n+\n+\t\tassertThat( ( (SessionImplementor) session ).getJdbcCoordinator()\n+\t\t\t\t\t\t\t.getLogicalConnection()\n+\t\t\t\t\t\t\t.getResourceRegistry()\n+\t\t\t\t\t\t\t.hasRegisteredResources(), is( false ) );\n+\n+\t\tassertThat( onCloseCount.get(), equalTo( 1 ) );\n+\n+\t\tsession.getTransaction().commit();\n+\t\tsession.close();\n+\t}\n+\n \t@Entity(name = \"MyEntity\")\n \t@Table(name=\"MyEntity\")\n \tpublic static class MyEntity {"
  },
  {
    "sha": "dc7f72e1765e2f36b4cdeac42541210a80d32810",
    "filename": "hibernate-core/src/test/java/org/hibernate/test/stream/basic/JpaStreamTest.java",
    "status": "modified",
    "additions": 272,
    "deletions": 22,
    "changes": 294,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/test/java/org/hibernate/test/stream/basic/JpaStreamTest.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-core/src/test/java/org/hibernate/test/stream/basic/JpaStreamTest.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-core/src/test/java/org/hibernate/test/stream/basic/JpaStreamTest.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -8,7 +8,12 @@\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -28,6 +33,7 @@\n import org.hibernate.testing.junit4.BaseNonConfigCoreFunctionalTestCase;\n import org.junit.Test;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.hibernate.testing.junit4.ExtraAssertions.assertTyping;\n import static org.hibernate.testing.transaction.TransactionUtil.doInHibernate;\n import static org.junit.Assert.assertEquals;\n@@ -78,8 +84,8 @@ public void testQueryStream() {\n \t}\n \n \t@Test\n-\t@TestForIssue( jiraKey = \"HHH-13872\")\n \t@RequiresDialect(H2Dialect.class)\n+\t@TestForIssue( jiraKey = {\"HHH-13872\", \"HHH-14449\"})\n \tpublic void testStreamCloseOnTerminalOperation() {\n \t\tdoInHibernate( this::sessionFactory, session -> {\n \t\t\tsession.createQuery( \"delete from MyEntity\" ).executeUpdate();\n@@ -92,10 +98,116 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\t}\n \t\t} );\n \n+\t\tRunnable noOp = () -> {\n+\t\t\t// do nothing\n+\t\t};\n+\n+\t\t// run without onClose callbacks\n+\n+\t\tthis.runTerminalOperationTests(noOp, Collections.emptyList(), noOp, false, false);\n+\n+\t\tAtomicInteger onClose1Count = new AtomicInteger();\n+\t\tAtomicInteger onClose2Count = new AtomicInteger();\n+\t\tAtomicInteger onClose3Count = new AtomicInteger();\n+\n+\t\t// run with chained onClose callbacks\n+\n+\t\tthis.runTerminalOperationTests(\n+\t\t\t\t() -> {\n+\t\t\t\t\t// prepare\n+\t\t\t\t\tonClose1Count.set( 0 );\n+\t\t\t\t\tonClose2Count.set( 0 );\n+\t\t\t\t\tonClose3Count.set( 0 );\n+\t\t\t\t},\n+\t\t\t\tArrays.asList(\n+\t\t\t\t\t\tonClose1Count::incrementAndGet, // onClose1 logic\n+\t\t\t\t\t\tonClose2Count::incrementAndGet, // onClose2 logic\n+\t\t\t\t\t\tonClose3Count::incrementAndGet // onClose3 logic\n+\t\t\t\t),\n+\t\t\t\t() -> {\n+\t\t\t\t\t// assertion\n+\t\t\t\t\tassertThat( onClose1Count ).hasValue( 1 );\n+\t\t\t\t\tassertThat( onClose2Count ).hasValue( 1 );\n+\t\t\t\t\tassertThat( onClose3Count ).hasValue( 1 );\n+\t\t\t\t},\n+\t\t\t\tfalse, // no flatMap before onClose\n+\t\t\t\tfalse // no flatMap after onClose\n+\t\t);\n+\n+\t\tthis.runTerminalOperationTests(\n+\t\t\t\t() -> {\n+\t\t\t\t\t// prepare\n+\t\t\t\t\tonClose1Count.set( 0 );\n+\t\t\t\t\tonClose2Count.set( 0 );\n+\t\t\t\t\tonClose3Count.set( 0 );\n+\t\t\t\t},\n+\t\t\t\tArrays.asList(\n+\t\t\t\t\t\tonClose1Count::incrementAndGet, // onClose1 logic\n+\t\t\t\t\t\tonClose2Count::incrementAndGet, // onClose2 logic\n+\t\t\t\t\t\tonClose3Count::incrementAndGet // onClose3 logic\n+\t\t\t\t),\n+\t\t\t\t() -> {\n+\t\t\t\t\t// assertion\n+\t\t\t\t\tassertThat( onClose1Count ).hasValue( 1 );\n+\t\t\t\t\tassertThat( onClose2Count ).hasValue( 1 );\n+\t\t\t\t\tassertThat( onClose3Count ).hasValue( 1 );\n+\t\t\t\t},\n+\t\t\t\ttrue, // run a flatMap operation before onClose\n+\t\t\t\tfalse // no flatMap after onClose\n+\t\t);\n+\n+\t\tthis.runTerminalOperationTests(\n+\t\t\t\t() -> {\n+\t\t\t\t\t// prepare\n+\t\t\t\t\tonClose1Count.set( 0 );\n+\t\t\t\t\tonClose2Count.set( 0 );\n+\t\t\t\t\tonClose3Count.set( 0 );\n+\t\t\t\t},\n+\t\t\t\tArrays.asList(\n+\t\t\t\t\t\tonClose1Count::incrementAndGet, // onClose1 logic\n+\t\t\t\t\t\tonClose2Count::incrementAndGet, // onClose2 logic\n+\t\t\t\t\t\tonClose3Count::incrementAndGet // onClose3 logic\n+\t\t\t\t),\n+\t\t\t\t() -> {\n+\t\t\t\t\t// assertion\n+\t\t\t\t\tassertThat( onClose1Count ).hasValue( 1 );\n+\t\t\t\t\tassertThat( onClose2Count ).hasValue( 1 );\n+\t\t\t\t\tassertThat( onClose3Count ).hasValue( 1 );\n+\t\t\t\t},\n+\t\t\t\tfalse, // no flatMap before onClose\n+\t\t\t\ttrue // run a flatMap operation after onClose\n+\t\t);\n+\n+\t\tthis.runTerminalOperationTests(\n+\t\t\t\t() -> {\n+\t\t\t\t\t// prepare\n+\t\t\t\t\tonClose1Count.set( 0 );\n+\t\t\t\t\tonClose2Count.set( 0 );\n+\t\t\t\t\tonClose3Count.set( 0 );\n+\t\t\t\t},\n+\t\t\t\tArrays.asList(\n+\t\t\t\t\t\tonClose1Count::incrementAndGet, // onClose1 logic\n+\t\t\t\t\t\tonClose2Count::incrementAndGet, // onClose2 logic\n+\t\t\t\t\t\tonClose3Count::incrementAndGet // onClose3 logic\n+\t\t\t\t),\n+\t\t\t\t() -> {\n+\t\t\t\t\t// assertion\n+\t\t\t\t\tassertThat( onClose1Count ).hasValue( 1 );\n+\t\t\t\t\tassertThat( onClose2Count ).hasValue( 1 );\n+\t\t\t\t\tassertThat( onClose3Count ).hasValue( 1 );\n+\t\t\t\t},\n+\t\t\t\ttrue, // run a flatMap operation before onClose\n+\t\t\t\ttrue // run a flatMap operation after onClose\n+\t\t);\n+\t}\n+\n+\tprivate void runTerminalOperationTests(\n+\t\t\tRunnable prepare, List<Runnable> onCloseCallbacks, Runnable onCloseAssertion,\n+\t\t\tboolean flatMapBefore, boolean flatMapAfter) {\n+\n+\t\t// collect as list\n \t\tdoInHibernate( this::sessionFactory, session -> {\n-\t\t\tStream<MyEntity> stream = session\n-\t\t\t\t\t.createQuery( \"SELECT me FROM MyEntity me\" )\n-\t\t\t\t\t.getResultStream();\n+\t\t\tStream<MyEntity> stream = getMyEntityStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter);\n \n \t\t\tResourceRegistry resourceRegistry = resourceRegistry(session);\n \t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n@@ -104,12 +216,90 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\tassertEquals(10, entities.size());\n \n \t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tonCloseAssertion.run();\n \t\t} );\n \n+\t\t// forEach (TestCase based on attachment EntityManagerIllustrationTest.java in HHH-14449)\n \t\tdoInHibernate( this::sessionFactory, session -> {\n-\t\t\tStream<MyEntity> stream = session\n-\t\t\t\t\t.createQuery( \"SELECT me FROM MyEntity me\" )\n-\t\t\t\t\t.getResultStream();\n+\t\t\tStream<MyEntity> stream = getMyEntityStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter);\n+\n+\t\t\tResourceRegistry resourceRegistry = resourceRegistry(session);\n+\t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tAtomicInteger count = new AtomicInteger();\n+\n+\t\t\tstream.forEach(myEntity -> count.incrementAndGet());\n+\n+\t\t\tassertEquals(10, count.get());\n+\n+\t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tonCloseAssertion.run();\n+\t\t} );\n+\n+\t\t// filter (always true) + forEach (TestCase based on attachment EntityManagerIllustrationTest.java in HHH-14449)\n+\t\tdoInHibernate( this::sessionFactory, session -> {\n+\t\t\tStream<MyEntity> stream = getMyEntityStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter);\n+\n+\t\t\tResourceRegistry resourceRegistry = resourceRegistry(session);\n+\t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tAtomicInteger count = new AtomicInteger();\n+\n+\t\t\tstream.filter(Objects::nonNull).forEach(myEntity -> count.incrementAndGet());\n+\n+\t\t\tassertEquals(10, count.get());\n+\n+\t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tonCloseAssertion.run();\n+\t\t} );\n+\n+\t\t// filter (partially true) + forEach (TestCase based on attachment EntityManagerIllustrationTest.java in HHH-14449)\n+\t\tdoInHibernate( this::sessionFactory, session -> {\n+\t\t\tStream<MyEntity> stream = getMyEntityStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter);\n+\n+\t\t\tResourceRegistry resourceRegistry = resourceRegistry(session);\n+\t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tAtomicInteger count = new AtomicInteger();\n+\n+\t\t\tstream.filter(entity -> entity.getId() % 2 == 0).forEach(myEntity -> count.incrementAndGet());\n+\n+\t\t\tassertEquals(5, count.get());\n+\n+\t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tonCloseAssertion.run();\n+\t\t} );\n+\n+\t\t// multiple chained operations (TestCase based on attachment EntityManagerIllustrationTest.java in HHH-14449)\n+\t\tdoInHibernate( this::sessionFactory, session -> {\n+\t\t\tStream<MyEntity> stream = getMyEntityStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter);\n+\n+\t\t\tResourceRegistry resourceRegistry = resourceRegistry(session);\n+\t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tAtomicInteger count = new AtomicInteger();\n+\n+\t\t\tstream\n+\t\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t\t.map(Optional::of)\n+\t\t\t\t\t.filter(Optional::isPresent)\n+\t\t\t\t\t.map(Optional::get)\n+\t\t\t\t\t.forEach(myEntity -> count.incrementAndGet());\n+\n+\t\t\tassertEquals(10, count.get());\n+\n+\t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tonCloseAssertion.run();\n+\t\t} );\n+\n+\t\t// mapToInt\n+\t\tdoInHibernate( this::sessionFactory, session -> {\n+\t\t\tStream<MyEntity> stream = getMyEntityStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter);\n \n \t\t\tResourceRegistry resourceRegistry = resourceRegistry(session);\n \t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n@@ -118,12 +308,13 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\tassertEquals(55, sum);\n \n \t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tonCloseAssertion.run();\n \t\t} );\n \n+\t\t// mapToLong\n \t\tdoInHibernate( this::sessionFactory, session -> {\n-\t\t\tStream<MyEntity> stream = session\n-\t\t\t\t\t.createQuery( \"SELECT me FROM MyEntity me\" )\n-\t\t\t\t\t.getResultStream();\n+\t\t\tStream<MyEntity> stream = getMyEntityStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter);\n \n \t\t\tResourceRegistry resourceRegistry = resourceRegistry(session);\n \t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n@@ -132,12 +323,13 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\tassertEquals(10, result);\n \n \t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tonCloseAssertion.run();\n \t\t} );\n \n+\t\t// mapToDouble\n \t\tdoInHibernate( this::sessionFactory, session -> {\n-\t\t\tStream<MyEntity> stream = session\n-\t\t\t\t\t.createQuery( \"SELECT me FROM MyEntity me\" )\n-\t\t\t\t\t.getResultStream();\n+\t\t\tStream<MyEntity> stream = getMyEntityStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter);\n \n \t\t\tResourceRegistry resourceRegistry = resourceRegistry(session);\n \t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n@@ -146,14 +338,14 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\tassertEquals(1, result, 0.1);\n \n \t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\tonCloseAssertion.run();\n \t\t} );\n \n \t\t//Test call close explicitly\n \t\tdoInHibernate( this::sessionFactory, session -> {\n \n-\t\t\ttry (Stream<Long> stream = session\n-\t\t\t\t\t.createQuery( \"SELECT me.id FROM MyEntity me\" )\n-\t\t\t\t\t.getResultStream()) {\n+\t\t\ttry (Stream<Long> stream = getLongStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter)) {\n \n \t\t\t\tResourceRegistry resourceRegistry = resourceRegistry( session );\n \t\t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n@@ -164,6 +356,8 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\t\tassertEquals( 10, result[4] );\n \n \t\t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\t\tonCloseAssertion.run();\n \t\t\t}\n \t\t} );\n \n@@ -172,9 +366,7 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\tMethod takeWhileMethod = ReflectHelper.getMethod( Stream.class, \"takeWhile\", Predicate.class );\n \n \t\t\tif ( takeWhileMethod != null ) {\n-\t\t\t\ttry (Stream<Long> stream = session\n-\t\t\t\t\t\t.createQuery( \"SELECT me.id FROM MyEntity me\" )\n-\t\t\t\t\t\t.getResultStream()) {\n+\t\t\t\ttry (Stream<Long> stream = getLongStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter)) {\n \n \t\t\t\t\tResourceRegistry resourceRegistry = resourceRegistry( session );\n \t\t\t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n@@ -191,6 +383,8 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\t\t\tassertTrue( result.contains( 5 ) );\n \n \t\t\t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\t\t\tonCloseAssertion.run();\n \t\t\t\t}\n \t\t\t\tcatch (IllegalAccessException | InvocationTargetException e) {\n \t\t\t\t\tfail( \"Could not execute takeWhile because of \" + e.getMessage() );\n@@ -202,9 +396,7 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\tMethod dropWhileMethod = ReflectHelper.getMethod( Stream.class, \"dropWhile\", Predicate.class );\n \n \t\t\tif ( dropWhileMethod != null ) {\n-\t\t\t\ttry (Stream<Long> stream = session\n-\t\t\t\t\t\t.createQuery( \"SELECT me.id FROM MyEntity me\" )\n-\t\t\t\t\t\t.getResultStream()) {\n+\t\t\t\ttry (Stream<Long> stream = getLongStream(prepare, session, onCloseCallbacks, flatMapBefore, flatMapAfter)) {\n \n \t\t\t\t\tResourceRegistry resourceRegistry = resourceRegistry( session );\n \t\t\t\t\tassertTrue( resourceRegistry.hasRegisteredResources() );\n@@ -221,6 +413,8 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t\t\t\tassertTrue( result.contains( 10 ) );\n \n \t\t\t\t\tassertFalse( resourceRegistry.hasRegisteredResources() );\n+\n+\t\t\t\t\tonCloseAssertion.run();\n \t\t\t\t}\n \t\t\t\tcatch (IllegalAccessException | InvocationTargetException e) {\n \t\t\t\t\tfail( \"Could not execute takeWhile because of \" + e.getMessage() );\n@@ -229,6 +423,62 @@ public void testStreamCloseOnTerminalOperation() {\n \t\t} );\n \t}\n \n+\tprivate static Stream<MyEntity> getMyEntityStream(\n+\t\t\tRunnable prepare,\n+\t\t\tSession session,\n+\t\t\tList<Runnable> onCloseCallbacks,\n+\t\t\tboolean flatMapBefore,\n+\t\t\tboolean flatMapAfter) {\n+\t\treturn getStream(\n+\t\t\t\tprepare,\n+\t\t\t\tsession,\n+\t\t\t\t\"SELECT me FROM MyEntity me\",\n+\t\t\t\tonCloseCallbacks,\n+\t\t\t\tflatMapBefore,\n+\t\t\t\tflatMapAfter\n+\t\t);\n+\t}\n+\n+\tprivate static Stream<Long> getLongStream(\n+\t\t\tRunnable prepare,\n+\t\t\tSession session,\n+\t\t\tList<Runnable> onCloseCallbacks,\n+\t\t\tboolean flatMapBefore,\n+\t\t\tboolean flatMapAfter) {\n+\t\treturn getStream(\n+\t\t\t\tprepare,\n+\t\t\t\tsession,\n+\t\t\t\t\"SELECT me.id FROM MyEntity me\",\n+\t\t\t\tonCloseCallbacks,\n+\t\t\t\tflatMapBefore,\n+\t\t\t\tflatMapAfter\n+\t\t);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate static <T> Stream<T> getStream(\n+\t\t\tRunnable prepare, Session session, String queryString,\n+\t\t\tList<Runnable> onCloseCallbacks, boolean flatMapBefore, boolean flatMapAfter) {\n+\n+\t\tprepare.run();\n+\n+\t\tStream<T> stream = session.createQuery( queryString ).getResultStream();\n+\n+\t\tif ( flatMapBefore ) {\n+\t\t\tstream = stream.flatMap( Stream::of );\n+\t\t}\n+\n+\t\tfor ( Runnable callback : onCloseCallbacks ) {\n+\t\t\tstream = stream.onClose( callback );\n+\t\t}\n+\n+\t\tif ( flatMapAfter ) {\n+\t\t\tstream = stream.flatMap( Stream::of );\n+\t\t}\n+\n+\t\treturn stream;\n+\t}\n+\n \tprivate ResourceRegistry resourceRegistry(Session session) {\n \t\tSharedSessionContractImplementor sharedSessionContractImplementor = (SharedSessionContractImplementor) session;\n \t\tJdbcCoordinator jdbcCoordinator = sharedSessionContractImplementor.getJdbcCoordinator();"
  },
  {
    "sha": "d5ba27617a3b2a90250dcc4b5ca76ba674079c66",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachDB202SpatialDialect.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachDB202SpatialDialect.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachDB202SpatialDialect.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachDB202SpatialDialect.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+\n+package org.hibernate.spatial.dialect.cockroachdb;\n+\n+import java.util.Map;\n+\n+import org.hibernate.boot.model.TypeContributions;\n+import org.hibernate.dialect.CockroachDB201Dialect;\n+import org.hibernate.dialect.function.SQLFunction;\n+import org.hibernate.service.ServiceRegistry;\n+import org.hibernate.spatial.dialect.postgis.PGGeometryTypeDescriptor;\n+\n+/**\n+ * An @{code SpatialDialect} for CockroachDB 20.2 and later. CockroachDB's spatial features where introduced in\n+ * that version.\n+ */\n+public class CockroachDB202SpatialDialect extends CockroachDB201Dialect implements CockroachSpatialDialectTrait {\n+\n+\n+\tpublic CockroachDB202SpatialDialect() {\n+\t\tsuper();\n+\t\tregisterColumnType(\n+\t\t\t\tPGGeometryTypeDescriptor.INSTANCE_WKB_2.getSqlType(),\n+\t\t\t\t\"GEOMETRY\"\n+\t\t);\n+\t\tfor ( Map.Entry<String, SQLFunction> entry : functionsToRegister() ) {\n+\t\t\tregisterFunction( entry.getKey(), entry.getValue() );\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void contributeTypes(TypeContributions typeContributions, ServiceRegistry serviceRegistry) {\n+\t\tsuper.contributeTypes(\n+\t\t\t\ttypeContributions,\n+\t\t\t\tserviceRegistry\n+\t\t);\n+\t\tdelegateContributeTypes( typeContributions, serviceRegistry );\n+\t}\n+\n+}"
  },
  {
    "sha": "7389598d5e6f115fe9bed082cf0568d821bc64ad",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachDBSpatialSupport.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachDBSpatialSupport.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachDBSpatialSupport.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachDBSpatialSupport.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+\n+package org.hibernate.spatial.dialect.cockroachdb;\n+\n+import org.hibernate.boot.model.TypeContributions;\n+import org.hibernate.service.ServiceRegistry;\n+import org.hibernate.spatial.GeolatteGeometryJavaTypeDescriptor;\n+import org.hibernate.spatial.GeolatteGeometryType;\n+import org.hibernate.spatial.JTSGeometryJavaTypeDescriptor;\n+import org.hibernate.spatial.JTSGeometryType;\n+import org.hibernate.spatial.SpatialDialect;\n+import org.hibernate.spatial.dialect.postgis.PGGeometryTypeDescriptor;\n+import org.hibernate.spatial.dialect.postgis.PostgisFunctions;\n+import org.hibernate.spatial.dialect.postgis.PostgisSupport;\n+\n+public class CockroachDBSpatialSupport extends PostgisSupport implements SpatialDialect {\n+\n+\tCockroachDBSpatialSupport() {\n+\t\tsuper( new CockroachDBSpatialFunctions() );\n+\t}\n+\n+\t@Override\n+\tpublic void contributeTypes(TypeContributions typeContributions, ServiceRegistry serviceRegistry) {\n+\t\ttypeContributions.contributeType( new GeolatteGeometryType( PGGeometryTypeDescriptor.INSTANCE_WKB_2 ) );\n+\t\ttypeContributions.contributeType( new JTSGeometryType( PGGeometryTypeDescriptor.INSTANCE_WKB_2 ) );\n+\n+\t\ttypeContributions.contributeJavaTypeDescriptor( GeolatteGeometryJavaTypeDescriptor.INSTANCE );\n+\t\ttypeContributions.contributeJavaTypeDescriptor( JTSGeometryJavaTypeDescriptor.INSTANCE );\n+\t}\n+\n+}\n+\n+class CockroachDBSpatialFunctions extends PostgisFunctions {\n+\n+\tCockroachDBSpatialFunctions() {\n+\t\tsuper();\n+\t\tthis.functionMap.remove( \"geomunion\" );\n+\t}\n+\n+}\n+"
  },
  {
    "sha": "17ffb69b7e8ee4c2defb807461704adc9b3e8f49",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachSpatialDialectTrait.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachSpatialDialectTrait.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachSpatialDialectTrait.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/CockroachSpatialDialectTrait.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+\n+package org.hibernate.spatial.dialect.cockroachdb;\n+\n+import org.hibernate.boot.model.TypeContributions;\n+import org.hibernate.service.ServiceRegistry;\n+import org.hibernate.spatial.SpatialDialect;\n+import org.hibernate.spatial.SpatialFunction;\n+import org.hibernate.spatial.dialect.SpatialFunctionsRegistry;\n+\n+public interface CockroachSpatialDialectTrait extends SpatialDialect {\n+\n+\tCockroachDBSpatialSupport DELEGATE = new CockroachDBSpatialSupport();\n+\n+\tdefault SpatialFunctionsRegistry functionsToRegister() {\n+\t\treturn DELEGATE.functionsToRegister();\n+\n+\t}\n+\n+\tdefault String getSpatialRelateSQL(String columnName, int spatialRelation) {\n+\t\treturn DELEGATE.getSpatialRelateSQL( columnName, spatialRelation );\n+\t}\n+\n+\tdefault void delegateContributeTypes(TypeContributions typeContributions, ServiceRegistry serviceRegistry) {\n+\t\tDELEGATE.contributeTypes( typeContributions, serviceRegistry );\n+\t}\n+\n+\t/**\n+\t * Returns the SQL fragment for the SQL WHERE-expression when parsing\n+\t * <code>org.hibernate.spatial.criterion.SpatialFilterExpression</code>s\n+\t * into prepared statements.\n+\t *\n+\t * @param columnName The name of the geometry-typed column to which the filter is\n+\t * be applied\n+\t *\n+\t * @return Rhe SQL fragment for the {@code SpatialFilterExpression}\n+\t */\n+\tdefault String getSpatialFilterExpression(String columnName) {\n+\t\treturn DELEGATE.getSpatialFilterExpression( columnName );\n+\t}\n+\n+\t@Override\n+\tdefault String getSpatialAggregateSQL(String columnName, int aggregation) {\n+\t\treturn DELEGATE.getSpatialAggregateSQL( columnName, aggregation );\n+\t}\n+\n+\t@Override\n+\tdefault String getDWithinSQL(String columnName) {\n+\t\treturn DELEGATE.getDWithinSQL( columnName );\n+\t}\n+\n+\t@Override\n+\tdefault String getHavingSridSQL(String columnName) {\n+\t\treturn DELEGATE.getHavingSridSQL( columnName );\n+\t}\n+\n+\t@Override\n+\tdefault String getIsEmptySQL(String columnName, boolean isEmpty) {\n+\t\treturn DELEGATE.getIsEmptySQL( columnName, isEmpty );\n+\t}\n+\n+\t@Override\n+\tdefault boolean supportsFiltering() {\n+\t\treturn DELEGATE.supportsFiltering();\n+\t}\n+\n+\t@Override\n+\tdefault boolean supports(SpatialFunction function) {\n+\t\treturn DELEGATE.supports( function );\n+\t}\n+\n+}"
  },
  {
    "sha": "94f58799a86a7e89ff2bbb9bb3847ee3930bf0a4",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/package-info.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/package-info.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/package-info.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/cockroachdb/package-info.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -0,0 +1,13 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+\n+/**\n+ * {@code SpatialDialect}s for CockroachDB\n+ */\n+package org.hibernate.spatial.dialect.cockroachdb;\n+\n+"
  },
  {
    "sha": "af4ebc86b3c2aa50c612638bb9ffc6b9db9bdd10",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGGeometryTypeDescriptor.java",
    "status": "modified",
    "additions": 12,
    "deletions": 7,
    "changes": 19,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGGeometryTypeDescriptor.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGGeometryTypeDescriptor.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGGeometryTypeDescriptor.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -39,12 +39,18 @@\n public class PGGeometryTypeDescriptor implements SqlTypeDescriptor {\n \n \n-\t/**\n-\t * An instance of this class\n-\t */\n-\tpublic static final PGGeometryTypeDescriptor INSTANCE = new PGGeometryTypeDescriptor();\n+\tfinal private Wkb.Dialect wkbDialect;\n \n-\tpublic static Geometry<?> toGeometry(Object object) {\n+\t// Type descriptor instance using EWKB v1 (postgis versions < 2.2.2)\n+\tpublic static final PGGeometryTypeDescriptor INSTANCE_WKB_1 = new PGGeometryTypeDescriptor( Wkb.Dialect.POSTGIS_EWKB_1);\n+\t// Type descriptor instance using EWKB v2 (postgis versions >= 2.2.2, see: https://trac.osgeo.org/postgis/ticket/3181)\n+\tpublic static final PGGeometryTypeDescriptor INSTANCE_WKB_2 = new PGGeometryTypeDescriptor(Wkb.Dialect.POSTGIS_EWKB_2);\n+\n+\tprivate PGGeometryTypeDescriptor(Wkb.Dialect dialect) {\n+\t\twkbDialect = dialect;\n+\t}\n+\n+\tpublic Geometry<?> toGeometry(Object object) {\n \t\tif ( object == null ) {\n \t\t\treturn null;\n \t\t}\n@@ -55,9 +61,8 @@\n \t\t\tif ( pgValue.startsWith( \"00\" ) || pgValue.startsWith( \"01\" ) ) {\n \t\t\t\t//we have a WKB because this pgValue starts with the bit-order byte\n \t\t\t\tbuffer = ByteBuffer.from( pgValue );\n-\t\t\t\tfinal WkbDecoder decoder = Wkb.newDecoder( Wkb.Dialect.POSTGIS_EWKB_1 );\n+\t\t\t\tfinal WkbDecoder decoder = Wkb.newDecoder( wkbDialect );\n \t\t\t\treturn decoder.decode( buffer );\n-\n \t\t\t}\n \t\t\telse {\n \t\t\t\treturn parseWkt( pgValue );"
  },
  {
    "sha": "2c6dd2edf10c91b08cf2eb3044345d55f7dff325",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGSpatialDialectTrait.java",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGSpatialDialectTrait.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGSpatialDialectTrait.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGSpatialDialectTrait.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -0,0 +1,128 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+\n+package org.hibernate.spatial.dialect.postgis;\n+\n+import org.hibernate.spatial.SpatialDialect;\n+import org.hibernate.spatial.SpatialFunction;\n+import org.hibernate.spatial.dialect.SpatialFunctionsRegistry;\n+\n+interface PGSpatialDialectTrait extends SpatialDialect {\n+\n+\tPostgisSupport support = new PostgisSupport();\n+\n+\n+\tdefault SpatialFunctionsRegistry functionsToRegister() {\n+\t\treturn support.functionsToRegister();\n+\t}\n+\t/**\n+\t * Returns the SQL fragment for the SQL WHERE-clause when parsing\n+\t * <code>org.hibernatespatial.criterion.SpatialRelateExpression</code>s\n+\t * into prepared statements.\n+\t * <p/>\n+\t *\n+\t * @param columnName The name of the geometry-typed column to which the relation is\n+\t * applied\n+\t * @param spatialRelation The type of spatial relation (as defined in\n+\t * <code>SpatialRelation</code>).\n+\t *\n+\t * @return SQL fragment  {@code SpatialRelateExpression}\n+\t */\n+\t@Override\n+\tdefault String getSpatialRelateSQL(String columnName, int spatialRelation) {\n+\t\treturn support.getSpatialRelateSQL( columnName, spatialRelation );\n+\t}\n+\n+\t/**\n+\t * Returns the SQL fragment for the SQL WHERE-expression when parsing\n+\t * <code>org.hibernate.spatial.criterion.SpatialFilterExpression</code>s\n+\t * into prepared statements.\n+\t *\n+\t * @param columnName The name of the geometry-typed column to which the filter is\n+\t * be applied\n+\t *\n+\t * @return Rhe SQL fragment for the {@code SpatialFilterExpression}\n+\t */\n+\t@Override\n+\tdefault String getSpatialFilterExpression(String columnName) {\n+\t\treturn support.getSpatialFilterExpression( columnName );\n+\t}\n+\n+\t/**\n+\t * Returns the SQL fragment for the specfied Spatial aggregate expression.\n+\t *\n+\t * @param columnName The name of the Geometry property\n+\t * @param aggregation The type of <code>SpatialAggregate</code>\n+\t *\n+\t * @return The SQL fragment for the projection\n+\t */\n+\t@Override\n+\tdefault String getSpatialAggregateSQL(String columnName, int aggregation) {\n+\t\treturn support.getSpatialAggregateSQL( columnName, aggregation );\n+\t}\n+\n+\t/**\n+\t * Returns The SQL fragment when parsing a <code>DWithinExpression</code>.\n+\t *\n+\t * @param columnName The geometry column to test against\n+\t *\n+\t * @return The SQL fragment when parsing a <code>DWithinExpression</code>.\n+\t */\n+\t@Override\n+\tdefault String getDWithinSQL(String columnName) {\n+\t\treturn support.getDWithinSQL( columnName );\n+\t}\n+\n+\t/**\n+\t * Returns the SQL fragment when parsing a <code>HavingSridExpression</code>.\n+\t *\n+\t * @param columnName The geometry column to test against\n+\t *\n+\t * @return The SQL fragment for a <code>HavingSridExpression</code>.\n+\t */\n+\t@Override\n+\tdefault String getHavingSridSQL(String columnName) {\n+\t\treturn support.getHavingSridSQL( columnName );\n+\t}\n+\n+\t/**\n+\t * Returns the SQL fragment when parsing a <code>IsEmptyExpression</code> or\n+\t * <code>IsNotEmpty</code> expression.\n+\t *\n+\t * @param columnName The geometry column\n+\t * @param isEmpty Whether the geometry is tested for empty or non-empty\n+\t *\n+\t * @return The SQL fragment for the isempty function\n+\t */\n+\t@Override\n+\tdefault String getIsEmptySQL(String columnName, boolean isEmpty) {\n+\t\treturn support.getIsEmptySQL( columnName, isEmpty );\n+\t}\n+\n+\t/**\n+\t * Returns true if this <code>SpatialDialect</code> supports a specific filtering function.\n+\t * <p> This is intended to signal DB-support for fast window queries, or MBR-overlap queries.</p>\n+\t *\n+\t * @return True if filtering is supported\n+\t */\n+\t@Override\n+\tdefault boolean supportsFiltering() {\n+\t\treturn support.supportsFiltering();\n+\t}\n+\n+\t/**\n+\t * Does this dialect supports the specified <code>SpatialFunction</code>.\n+\t *\n+\t * @param function <code>SpatialFunction</code>\n+\t *\n+\t * @return True if this <code>SpatialDialect</code> supports the spatial function specified by the function parameter.\n+\t */\n+\t@Override\n+\tdefault boolean supports(SpatialFunction function) {\n+\t\treturn support.supports( function );\n+\t}\n+}"
  },
  {
    "sha": "baec7a21f9ede0a5e2c3cbe07fdb45695b22ba82",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisFunctions.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisFunctions.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisFunctions.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisFunctions.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -24,9 +24,9 @@\n  * <p>\n  * Created by Karel Maesen, Geovise BVBA on 29/10/16.\n  */\n-class PostgisFunctions extends SpatialFunctionsRegistry {\n+public class PostgisFunctions extends SpatialFunctionsRegistry {\n \n-\tPostgisFunctions() {\n+\tpublic PostgisFunctions() {\n \n \t\tput(\n \t\t\t\t\"dimension\", new StandardSQLFunction("
  },
  {
    "sha": "ab3cf5ce60d6b099840622cc27b28b9cf3357753",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisNoSQLMM.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisNoSQLMM.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisNoSQLMM.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisNoSQLMM.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -23,7 +23,7 @@\n \tpublic PostgisNoSQLMM() {\n \n \t\tregisterColumnType(\n-\t\t\t\tPGGeometryTypeDescriptor.INSTANCE.getSqlType(),\n+\t\t\t\tPGGeometryTypeDescriptor.INSTANCE_WKB_1.getSqlType(),\n \t\t\t\t\"GEOMETRY\"\n \t\t);\n "
  },
  {
    "sha": "e7c9412b635ae22f886d39eb62d39f74e1a80596",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG10Dialect.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG10Dialect.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG10Dialect.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG10Dialect.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+\n+package org.hibernate.spatial.dialect.postgis;\n+\n+import java.util.Map;\n+\n+import org.hibernate.boot.model.TypeContributions;\n+import org.hibernate.dialect.PostgreSQL10Dialect;\n+import org.hibernate.dialect.function.SQLFunction;\n+import org.hibernate.service.ServiceRegistry;\n+\n+public class PostgisPG10Dialect extends PostgreSQL10Dialect implements PGSpatialDialectTrait {\n+\n+\tpublic PostgisPG10Dialect() {\n+\t\tsuper();\n+\t\tregisterColumnType(\n+\t\t\t\tPGGeometryTypeDescriptor.INSTANCE_WKB_1.getSqlType(),\n+\t\t\t\t\"GEOMETRY\"\n+\t\t);\n+\t\tfor ( Map.Entry<String, SQLFunction> entry : functionsToRegister() ) {\n+\t\t\tregisterFunction( entry.getKey(), entry.getValue() );\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void contributeTypes(TypeContributions typeContributions, ServiceRegistry serviceRegistry) {\n+\t\tsuper.contributeTypes(\n+\t\t\t\ttypeContributions,\n+\t\t\t\tserviceRegistry\n+\t\t);\n+\t\tsupport.contributeTypes( typeContributions, serviceRegistry );\n+\t}\n+\n+}"
  },
  {
    "sha": "f1fa67c919c31ef52badc49f8a8e0e40dc984004",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG82Dialect.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG82Dialect.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG82Dialect.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG82Dialect.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -31,7 +31,7 @@\n \tpublic PostgisPG82Dialect() {\n \t\tsuper();\n \t\tregisterColumnType(\n-\t\t\t\tPGGeometryTypeDescriptor.INSTANCE.getSqlType(),\n+\t\t\t\tPGGeometryTypeDescriptor.INSTANCE_WKB_1.getSqlType(),\n \t\t\t\t\"GEOMETRY\"\n \t\t);\n \t\tfor ( Map.Entry<String, SQLFunction> entry : support.functionsToRegister() ) {"
  },
  {
    "sha": "ca871af1df126cc79774936dc54fe312a8b5b4f2",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG91Dialect.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG91Dialect.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG91Dialect.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG91Dialect.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -31,7 +31,7 @@\n \tpublic PostgisPG91Dialect() {\n \t\tsuper();\n \t\tregisterColumnType(\n-\t\t\t\tPGGeometryTypeDescriptor.INSTANCE.getSqlType(),\n+\t\t\t\tPGGeometryTypeDescriptor.INSTANCE_WKB_1.getSqlType(),\n \t\t\t\t\"GEOMETRY\"\n \t\t);\n \t\tfor ( Map.Entry<String, SQLFunction> entry : support.functionsToRegister() ) {"
  },
  {
    "sha": "c94d2e902109bde5e7f6bdea5711e1ee63ca34f4",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG92Dialect.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG92Dialect.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG92Dialect.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG92Dialect.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -31,7 +31,7 @@\n \tpublic PostgisPG92Dialect() {\n \t\tsuper();\n \t\tregisterColumnType(\n-\t\t\t\tPGGeometryTypeDescriptor.INSTANCE.getSqlType(),\n+\t\t\t\tPGGeometryTypeDescriptor.INSTANCE_WKB_1.getSqlType(),\n \t\t\t\t\"GEOMETRY\"\n \t\t);\n \t\tfor ( Map.Entry<String, SQLFunction> entry : support.functionsToRegister() ) {"
  },
  {
    "sha": "f8ac29a1a00ec1edb8451c30cec84983d642c35a",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG93Dialect.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG93Dialect.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG93Dialect.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG93Dialect.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -31,7 +31,7 @@\n \tpublic PostgisPG93Dialect() {\n \t\tsuper();\n \t\tregisterColumnType(\n-\t\t\t\tPGGeometryTypeDescriptor.INSTANCE.getSqlType(),\n+\t\t\t\tPGGeometryTypeDescriptor.INSTANCE_WKB_1.getSqlType(),\n \t\t\t\t\"GEOMETRY\"\n \t\t);\n \t\tfor ( Map.Entry<String, SQLFunction> entry : support.functionsToRegister() ) {"
  },
  {
    "sha": "c267cf6d8c46fd2930e45aaea98253243e1b1240",
    "filename": "hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG94Dialect.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Mu-L/hibernate-orm/blob/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG94Dialect.java",
    "raw_url": "https://github.com/Mu-L/hibernate-orm/raw/b4bf58188c578927a238a791973975d23a92bfd9/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG94Dialect.java",
    "contents_url": "https://api.github.com/repos/Mu-L/hibernate-orm/contents/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG94Dialect.java?ref=b4bf58188c578927a238a791973975d23a92bfd9",
    "patch": "@@ -31,7 +31,7 @@\n \tpublic PostgisPG94Dialect() {\n \t\tsuper();\n \t\tregisterColumnType(\n-\t\t\t\tPGGeometryTypeDescriptor.INSTANCE.getSqlType(),\n+\t\t\t\tPGGeometryTypeDescriptor.INSTANCE_WKB_1.getSqlType(),\n \t\t\t\t\"GEOMETRY\"\n \t\t);\n \t\tfor ( Map.Entry<String, SQLFunction> entry : support.functionsToRegister() ) {"
  }
]
