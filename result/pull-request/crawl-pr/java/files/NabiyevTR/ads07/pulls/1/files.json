[
  {
    "sha": "937ecb8c904e805b5c7f4a1240c862d75677bb96",
    "filename": "src/ru/geekbrains/ntr_ads07/City.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/NabiyevTR/ads07/blob/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/City.java",
    "raw_url": "https://github.com/NabiyevTR/ads07/raw/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/City.java",
    "contents_url": "https://api.github.com/repos/NabiyevTR/ads07/contents/src/ru/geekbrains/ntr_ads07/City.java?ref=690414465aab135974cb9995e6dd831cf5c491e2",
    "patch": "@@ -0,0 +1,15 @@\n+package ru.geekbrains.ntr_ads07;\n+\n+public class City {\n+    public static final String MOSCOW = \"Москва\";\n+    public static final String TULA = \"Тула\";\n+    public static final String LIPETSK = \"Липецк\";\n+    public static final String VORONEZH = \"Воронеж\";\n+    public static final String RYAZAN = \"Рязань\";\n+    public static final String TAMBOV = \"Тамбов\";\n+    public static final String SARATOV = \"Саратов\";\n+    public static final String KALUGA = \"Калуга\";\n+    public static final String OREL = \"Орел\";\n+    public static final String KURSK = \"Курск\";\n+    public static final String PALERMO= \"Палермо\";\n+}"
  },
  {
    "sha": "64dd51336e2d741c805036dcf58a932be666759f",
    "filename": "src/ru/geekbrains/ntr_ads07/Graph.java",
    "status": "modified",
    "additions": 78,
    "deletions": 7,
    "changes": 85,
    "blob_url": "https://github.com/NabiyevTR/ads07/blob/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/Graph.java",
    "raw_url": "https://github.com/NabiyevTR/ads07/raw/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/Graph.java",
    "contents_url": "https://api.github.com/repos/NabiyevTR/ads07/contents/src/ru/geekbrains/ntr_ads07/Graph.java?ref=690414465aab135974cb9995e6dd831cf5c491e2",
    "patch": "@@ -1,4 +1,5 @@\n package ru.geekbrains.ntr_ads07;\n+\n import java.util.*;\n \n public class Graph implements IGraph {\n@@ -18,8 +19,8 @@ public void addVertex(String label) {\n \n     @Override\n     public void addEdge(String startLabel, String endLabel) {\n-        int startIndex  = indexOf(startLabel);\n-        int endIndex    = indexOf(endLabel);\n+        int startIndex = indexOf(startLabel);\n+        int endIndex = indexOf(endLabel);\n \n         if (startIndex == -1 || endIndex == -1) {\n             throw new IllegalArgumentException(\"Invalid label for vertex\");\n@@ -75,11 +76,11 @@ public void dfs(String startLabel) {\n         Stack<Vertex> stack = new Stack<>();\n         Vertex vertex = vertexList.get(startIndex);\n \n-        visitVertex(stack, vertex);\n+        visitVertexAndDisplay(stack, vertex);\n         while (!stack.isEmpty()) {\n             vertex = getNearUnvisitedVertex(stack.peek());\n             if (vertex != null) {\n-                visitVertex(stack, vertex);\n+                visitVertexAndDisplay(stack, vertex);\n             } else {\n                 stack.pop();\n             }\n@@ -98,22 +99,80 @@ public void bfs(String startLabel) {\n         Queue<Vertex> queue = new LinkedList<>();\n         Vertex vertex = vertexList.get(startIndex);\n \n+        visitVertexAndDisplay(queue, vertex);\n+        while (!queue.isEmpty()) {\n+            vertex = getNearUnvisitedVertex(queue.peek());\n+            if (vertex != null) {\n+                visitVertexAndDisplay(queue, vertex);\n+            } else {\n+                queue.remove();\n+            }\n+        }\n+\n+        resetVertexState();\n+    }\n+\n+    @Override\n+    public void shortestRoute(String startLabel, String endLabel) {\n+        int startIndex = indexOf(startLabel);\n+        if (startIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid start label.\");\n+        }\n+\n+        int endIndex = indexOf(endLabel);\n+        if (endIndex == -1) {\n+            throw new IllegalArgumentException(\"Invalid end label.\");\n+        }\n+\n+        if (startIndex == endIndex) {\n+            System.out.println(\"Start label is equals to end label.\");\n+            return;\n+        }\n+\n+        Queue<Vertex> queue = new LinkedList<>();\n+        Vertex vertex = vertexList.get(startIndex);\n+\n         visitVertex(queue, vertex);\n         while (!queue.isEmpty()) {\n             vertex = getNearUnvisitedVertex(queue.peek());\n             if (vertex != null) {\n                 visitVertex(queue, vertex);\n+                if (vertex.getLabel().equals(endLabel)) {\n+                    break;\n+                }\n             } else {\n                 queue.remove();\n             }\n         }\n-\n+        if (queue.isEmpty()) {\n+            System.out.printf(\"The path between %s and %s was not found.\\n\",\n+                    vertexList.get(startIndex), vertexList.get(endIndex));\n+        } else {\n+            displayPath(getShortestPath(vertexList.get(endIndex)));\n+        }\n         resetVertexState();\n     }\n \n+    private List<Vertex> getShortestPath(Vertex endVertex) {\n+        Deque<Vertex> path = new LinkedList<>();\n+        Vertex vertex = endVertex;\n+        path.addFirst(vertex);\n+\n+        while (vertex.getPreviousVertex() != null) {\n+            vertex = vertex.getPreviousVertex();\n+            path.addFirst(vertex);\n+        }\n+        return new ArrayList<>(path);\n+    }\n+\n+    private void displayPath(List<Vertex> vertexList) {\n+        vertexList.forEach(System.out::println);\n+    }\n+\n     private void resetVertexState() {\n         for (Vertex vertex : vertexList) {\n             vertex.setVisited(false);\n+            vertex.setPreviousVertex(null);\n         }\n     }\n \n@@ -127,14 +186,26 @@ private Vertex getNearUnvisitedVertex(Vertex current) {\n         return null;\n     }\n \n-    private void visitVertex(Stack<Vertex> stack, Vertex vertex) {\n+    private void visitVertexAndDisplay(Stack<Vertex> stack, Vertex vertex) {\n         System.out.println(vertex);\n         vertex.setVisited(true);\n         stack.push(vertex);\n     }\n-    private void visitVertex(Queue<Vertex> queue, Vertex vertex) {\n+\n+    private void visitVertexAndDisplay(Queue<Vertex> queue, Vertex vertex) {\n         System.out.println(vertex);\n         vertex.setVisited(true);\n         queue.add(vertex);\n     }\n+\n+    private void visitVertex(Stack<Vertex> stack, Vertex vertex) {\n+        vertex.setVisited(true);\n+        stack.push(vertex);\n+    }\n+\n+    private void visitVertex(Queue<Vertex> queue, Vertex vertex) {\n+        vertex.setPreviousVertex(queue.peek());\n+        vertex.setVisited(true);\n+        queue.add(vertex);\n+    }\n }"
  },
  {
    "sha": "1307530d022ace47deb0c26589ae143bf5f03a95",
    "filename": "src/ru/geekbrains/ntr_ads07/IGraph.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/NabiyevTR/ads07/blob/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/IGraph.java",
    "raw_url": "https://github.com/NabiyevTR/ads07/raw/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/IGraph.java",
    "contents_url": "https://api.github.com/repos/NabiyevTR/ads07/contents/src/ru/geekbrains/ntr_ads07/IGraph.java?ref=690414465aab135974cb9995e6dd831cf5c491e2",
    "patch": "@@ -21,4 +21,6 @@\n      * англ. breadth-first search, BFS\n      */\n     void bfs(String startLabel);\n+\n+    void shortestRoute(String startLabel, String endLabel);\n }"
  },
  {
    "sha": "c40b9ceaf83ba4d6ce13056a9d7cc4b3170951ed",
    "filename": "src/ru/geekbrains/ntr_ads07/Test7.java",
    "status": "modified",
    "additions": 56,
    "deletions": 49,
    "changes": 105,
    "blob_url": "https://github.com/NabiyevTR/ads07/blob/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/Test7.java",
    "raw_url": "https://github.com/NabiyevTR/ads07/raw/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/Test7.java",
    "contents_url": "https://api.github.com/repos/NabiyevTR/ads07/contents/src/ru/geekbrains/ntr_ads07/Test7.java?ref=690414465aab135974cb9995e6dd831cf5c491e2",
    "patch": "@@ -1,65 +1,72 @@\n package ru.geekbrains.ntr_ads07;\n \n+import static ru.geekbrains.ntr_ads07.City.*;\n+\n public class Test7 {\n \n     public static void main(String[] args) {\n-//        testGraph();\n-//        testDfs();\n-        testBfs();\n-    }\n \n-    private static void testGraph() {\n-        IGraph graph = new Graph(4);\n-        graph.addVertex(\"A\");\n-        graph.addVertex(\"B\");\n-        graph.addVertex(\"C\");\n-        graph.addVertex(\"D\");\n+        IGraph graph = new Graph(11);\n+        graph.addVertex(MOSCOW);\n+        graph.addVertex(TULA);\n+        graph.addVertex(LIPETSK);\n+        graph.addVertex(VORONEZH);\n+        graph.addVertex(RYAZAN);\n+        graph.addVertex(TAMBOV);\n+        graph.addVertex(SARATOV);\n+        graph.addVertex(KALUGA);\n+        graph.addVertex(OREL);\n+        graph.addVertex(KURSK);\n \n-        graph.addEdges(\"A\", \"B\", \"C\");\n-        graph.addEdges(\"B\", \"A\", \"C\", \"D\");\n-        graph.addEdges(\"C\", \"A\", \"B\", \"D\");\n-        graph.addEdges(\"D\", \"B\", \"C\");\n \n-        System.out.println(\"Size of graph is \" + graph.getSize());\n-        graph.display();\n-    }\n+        graph.addEdges(MOSCOW, TULA, RYAZAN, KALUGA);\n+        graph.addEdges(TULA, LIPETSK);\n+        graph.addEdges(TAMBOV, RYAZAN, SARATOV);\n+        graph.addEdges(OREL, KALUGA, KURSK);\n+        graph.addEdges(VORONEZH, LIPETSK, SARATOV, KURSK);\n \n-    private static void testDfs() {\n-        Graph graph = new Graph(7);\n-        graph.addVertex(\"A\");\n-        graph.addVertex(\"B\");\n-        graph.addVertex(\"C\");\n-        graph.addVertex(\"D\");\n-        graph.addVertex(\"E\");\n-        graph.addVertex(\"F\");\n-        graph.addVertex(\"G\");\n+        graph.shortestRoute(MOSCOW, VORONEZH);\n+        /*\n+        Vertex{label='Москва'}\n+        Vertex{label='Тула'}\n+        Vertex{label='Липецк'}\n+        Vertex{label='Воронеж'}\n \n-        graph.addEdges(\"A\", \"B\", \"C\", \"D\");\n-        graph.addEdges(\"B\", \"E\");\n-        graph.addEdges(\"D\", \"F\");\n-        graph.addEdges(\"F\", \"G\");\n+         */\n+        graph.shortestRoute(MOSCOW, MOSCOW);\n+        //Start label is equals to end label.\n \n-        graph.dfs(\"A\");\n-        //A B E C D F G\n-    }\n+        graph.shortestRoute(MOSCOW, OREL);\n+        /*\n+        Vertex{label='Москва'}\n+        Vertex{label='Калуга'}\n+        Vertex{label='Орел'}\n+         */\n+        graph.shortestRoute(MOSCOW, SARATOV);\n+        /*\n+        Vertex{label='Москва'}\n+        Vertex{label='Рязань'}\n+        Vertex{label='Тамбов'}\n+        Vertex{label='Саратов'}\n+         */\n \n-    private static void testBfs() {\n-        Graph graph = new Graph(8);\n-        graph.addVertex(\"A\");\n-        graph.addVertex(\"B\");\n-        graph.addVertex(\"C\");\n-        graph.addVertex(\"D\");\n-        graph.addVertex(\"E\");\n-        graph.addVertex(\"F\");\n-        graph.addVertex(\"G\");\n-        graph.addVertex(\"H\");\n+        graph.addVertex(PALERMO);\n+        graph.shortestRoute(MOSCOW, PALERMO);\n+        // The path between Vertex{label='Москва'} and Vertex{label='Палермо'} was not found.\n \n-        graph.addEdges(\"A\", \"B\", \"C\", \"D\");\n-        graph.addEdges(\"B\", \"E\");\n-        graph.addEdges(\"E\", \"H\");\n-        graph.addEdges(\"C\", \"F\");\n-        graph.addEdges(\"D\", \"G\");\n+        graph.addEdges(PALERMO, MOSCOW, VORONEZH);\n+        graph.shortestRoute(MOSCOW, VORONEZH);\n+        /*\n+        Vertex{label='Москва'}\n+        Vertex{label='Палермо'}\n+        Vertex{label='Воронеж'}\n+         */\n \n-        graph.bfs(\"A\");\n+        graph.shortestRoute(SARATOV, PALERMO);\n+        /*\n+        Vertex{label='Саратов'}\n+        Vertex{label='Воронеж'}\n+        Vertex{label='Палермо'}\n+         */\n     }\n }"
  },
  {
    "sha": "25fc869c9e8f41d233e742b82707491d2491db84",
    "filename": "src/ru/geekbrains/ntr_ads07/Vertex.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/NabiyevTR/ads07/blob/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/Vertex.java",
    "raw_url": "https://github.com/NabiyevTR/ads07/raw/690414465aab135974cb9995e6dd831cf5c491e2/src/ru/geekbrains/ntr_ads07/Vertex.java",
    "contents_url": "https://api.github.com/repos/NabiyevTR/ads07/contents/src/ru/geekbrains/ntr_ads07/Vertex.java?ref=690414465aab135974cb9995e6dd831cf5c491e2",
    "patch": "@@ -6,6 +6,7 @@\n \n     private final String label;\n     private boolean isVisited;\n+    private Vertex previousVertex;\n \n     public Vertex(String label) {\n         this.label = label;\n@@ -23,6 +24,14 @@ public void setVisited(boolean visited) {\n         isVisited = visited;\n     }\n \n+    public Vertex getPreviousVertex() {\n+        return previousVertex;\n+    }\n+\n+    public void setPreviousVertex(Vertex previousVertex) {\n+        this.previousVertex = previousVertex;\n+    }\n+\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;"
  }
]
