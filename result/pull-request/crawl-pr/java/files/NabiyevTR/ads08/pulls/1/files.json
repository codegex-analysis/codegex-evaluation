[
  {
    "sha": "88a9900a02662d4e2a21c22e3c8f48a718474a27",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/NabiyevTR/ads08/blob/68432825fb6a84dbea4459ea6d01097be425e45c/.gitignore",
    "raw_url": "https://github.com/NabiyevTR/ads08/raw/68432825fb6a84dbea4459ea6d01097be425e45c/.gitignore",
    "contents_url": "https://api.github.com/repos/NabiyevTR/ads08/contents/.gitignore?ref=68432825fb6a84dbea4459ea6d01097be425e45c",
    "patch": "@@ -2,3 +2,5 @@\n .idea/\n \n *.iml\n+\n+*.class"
  },
  {
    "sha": "33fc381fc019cf6715559041a664baf642a7533e",
    "filename": "src/ru/geekbrains/ntr_ads08/HashTable.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/NabiyevTR/ads08/blob/68432825fb6a84dbea4459ea6d01097be425e45c/src/ru/geekbrains/ntr_ads08/HashTable.java",
    "raw_url": "https://github.com/NabiyevTR/ads08/raw/68432825fb6a84dbea4459ea6d01097be425e45c/src/ru/geekbrains/ntr_ads08/HashTable.java",
    "contents_url": "https://api.github.com/repos/NabiyevTR/ads08/contents/src/ru/geekbrains/ntr_ads08/HashTable.java?ref=68432825fb6a84dbea4459ea6d01097be425e45c",
    "patch": "@@ -0,0 +1,29 @@\n+package ru.geekbrains.ntr_ads08;\n+\n+\n+public interface HashTable<K, V> {\n+\n+    boolean put(K key, V value);\n+\n+    V get(K key);\n+\n+    V remove(K key);\n+\n+    int size();\n+\n+    boolean isEmpty();\n+\n+    void display();\n+\n+\n+    interface Entry<K, V> {\n+\n+        K getKey();\n+\n+        V getValue();\n+\n+        void setValue(V value);\n+    }\n+\n+}\n+"
  },
  {
    "sha": "d54c031a4bfea29bf72a8131c08b7aaec3431954",
    "filename": "src/ru/geekbrains/ntr_ads08/HashTableImpl.java",
    "status": "added",
    "additions": 137,
    "deletions": 0,
    "changes": 137,
    "blob_url": "https://github.com/NabiyevTR/ads08/blob/68432825fb6a84dbea4459ea6d01097be425e45c/src/ru/geekbrains/ntr_ads08/HashTableImpl.java",
    "raw_url": "https://github.com/NabiyevTR/ads08/raw/68432825fb6a84dbea4459ea6d01097be425e45c/src/ru/geekbrains/ntr_ads08/HashTableImpl.java",
    "contents_url": "https://api.github.com/repos/NabiyevTR/ads08/contents/src/ru/geekbrains/ntr_ads08/HashTableImpl.java?ref=68432825fb6a84dbea4459ea6d01097be425e45c",
    "patch": "@@ -0,0 +1,137 @@\n+package ru.geekbrains.ntr_ads08;\n+\n+import java.util.LinkedList;\n+\n+public class HashTableImpl<K, V> implements HashTable<K, V> {\n+\n+    static class Item<K, V> implements Entry<K, V> {\n+        private final K key;\n+        private V value;\n+\n+        public Item(K key, V value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Item{\" +\n+                    \"key=\" + key +\n+                    \", value=\" + value +\n+                    '}';\n+        }\n+\n+        @Override\n+        public K getKey() {\n+            return key;\n+        }\n+\n+        @Override\n+        public V getValue() {\n+            return value;\n+        }\n+\n+        @Override\n+        public void setValue(V value) {\n+            this.value = value;\n+        }\n+\n+    }\n+\n+    private final LinkedList<Item<K, V>>[] data;\n+    private int size;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public HashTableImpl(int maxSize) {\n+        this.data = new LinkedList[maxSize * 2];\n+    }\n+\n+    private int hashFunc(K key) {\n+        return Math.abs(key.hashCode() % data.length);\n+    }\n+\n+    @Override\n+    public boolean put(K key, V value) {\n+        int index = hashFunc(key);\n+        if (data[index] == null) {\n+            data[index] = new LinkedList<>();\n+        } else {\n+            for (Item item : data[index]) {\n+                if (item.getKey().equals(key)) {\n+                    item.setValue(value);\n+                    return true;\n+                }\n+            }\n+        }\n+        data[index].add(new Item<>(key, value));\n+        size++;\n+        return true;\n+    }\n+\n+    @Override\n+    public V get(K key) {\n+        int index = hashFunc(key);\n+\n+        if (data[index] == null) return null;\n+\n+        for (Item item : data[index]) {\n+            if (item.getKey().equals(key)) {\n+                return (V)item.getValue();\n+            }\n+        }\n+\n+        return  null;\n+    }\n+\n+    @Override\n+    public V remove(K key) {\n+        int index = hashFunc(key);\n+\n+        if (data[index] == null) return null;\n+\n+        for (Item item : data[index]) {\n+            if (item.getKey().equals(key)) {\n+                data[index].remove(item);\n+\n+                if (data[index].size() == 0) {\n+                    data[index] = null;\n+                }\n+                size --;\n+                return (V)item.getValue();\n+            }\n+        }\n+        return null;\n+\n+    }\n+\n+    @Override\n+    public int size() {\n+        return size;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return size==0;\n+    }\n+\n+    @Override\n+    public void display() {\n+        System.out.println(\"----------\");\n+        for (int i = 0; i < data.length; i++) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(i).append(\" = \");\n+            if (data[i] == null) {\n+                sb.append(\"null\");\n+            } else {\n+                for (int j = 0; j < data[i].size(); j++) {\n+                    sb.append(data[i].get(j));\n+                    if (j < data[i].size()-1) {\n+                        sb.append(\", \");\n+                    }\n+                }\n+            }\n+            System.out.println(sb.toString());\n+        }\n+        System.out.println(\"----------\");\n+    }\n+}"
  },
  {
    "sha": "f141e87723f5792bf8e6687ebd4724160b4eb839",
    "filename": "src/ru/geekbrains/ntr_ads08/Main.java",
    "status": "modified",
    "additions": 213,
    "deletions": 1,
    "changes": 214,
    "blob_url": "https://github.com/NabiyevTR/ads08/blob/68432825fb6a84dbea4459ea6d01097be425e45c/src/ru/geekbrains/ntr_ads08/Main.java",
    "raw_url": "https://github.com/NabiyevTR/ads08/raw/68432825fb6a84dbea4459ea6d01097be425e45c/src/ru/geekbrains/ntr_ads08/Main.java",
    "contents_url": "https://api.github.com/repos/NabiyevTR/ads08/contents/src/ru/geekbrains/ntr_ads08/Main.java?ref=68432825fb6a84dbea4459ea6d01097be425e45c",
    "patch": "@@ -1,8 +1,220 @@\n package ru.geekbrains.ntr_ads08;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Random;\n+\n public class Main {\n+    private static final int SYMBOL_COUNT = 20;\n+    private static final int STRING_COUNT = 20;\n+    private static final int SIZE = 20;\n+\n \n     public static void main(String[] args) {\n-\t// write your code here\n+\n+        List<String> keys = generateRandomStrings(STRING_COUNT, SYMBOL_COUNT);\n+        List<String> values = generateRandomStrings(STRING_COUNT, SYMBOL_COUNT);\n+\n+        HashTable<String, String> hashTable  = new HashTableImpl<>(SIZE);\n+\n+        for (int i = 0; i < STRING_COUNT ; i++) {\n+            hashTable.put(keys.get(i) ,values.get(i));\n+        }\n+        hashTable.display();\n+        /*\n+        ----------\n+        0 = Item{key=tuphwxswklnvubgfpouk, value=ifqddllsdjifinkmijrq}, Item{key=zehhenrtwtwzudzdqrzz, value=nposorforiqkiaonjyav}\n+        1 = null\n+        2 = null\n+        3 = Item{key=saxkubatfeyypoqgvklm, value=efxjuxizkocpfphcaazw}\n+        4 = null\n+        5 = null\n+        6 = Item{key=qpmmcttogdevdznnilui, value=xdsvnilkrdkiupbvkwut}, Item{key=tdqhfewzsdnepzfgbdyi, value=icphbhorruioglpsmabg}\n+        7 = null\n+        8 = null\n+        9 = null\n+        10 = Item{key=newmwlnkynwkqveamxnx, value=ojvfpilntnkevresikts}, Item{key=kpmekzghdbpamwsqrgkh, value=onhhudkbhqupvyxpoisx}\n+        11 = null\n+        12 = Item{key=gylnzyaliwqrtwkygrit, value=hpqiatvzpgyswmcgdbxa}, Item{key=amsglcwizzvqorcnxrrr, value=kepiblqtylixgmehearw}, Item{key=ldnjtgdjgjpceyxmhbtb, value=vmlhqjfmgqmwcwdyarfy}\n+        13 = Item{key=whdgjpljpjiuwnteocwr, value=fuzzutyjhmsqcqjddjgo}\n+        14 = null\n+        15 = null\n+        16 = null\n+        17 = null\n+        18 = Item{key=rsreiluuzkefdyvuewmh, value=tsvzmjyvhiupbpreicxe}\n+        19 = null\n+        20 = null\n+        21 = null\n+        22 = Item{key=tqhindvrgrqlxgixksio, value=gamiamvnqtkwwzsfelof}\n+        23 = Item{key=itdaauflyvqyhvbfyhmt, value=zbuhmvoivbjadfxkakpf}\n+        24 = Item{key=rlxmmcfvajgipshmhvpr, value=fwotggljcdirjtpkttgl}\n+        25 = null\n+        26 = null\n+        27 = Item{key=zxyeyzczomvxzuphmgvb, value=bhzapnhefsyqxxzlwxxa}\n+        28 = null\n+        29 = null\n+        30 = null\n+        31 = Item{key=fppsbtdtdrxklvlerxsc, value=cirlacqcgogjeesanocl}, Item{key=vmmnstclvornruvpoify, value=ovprxickfjurtyjbsffj}\n+        32 = null\n+        33 = null\n+        34 = null\n+        35 = null\n+        36 = Item{key=hqejdsqpkazasklywaqe, value=gcroqddsaacavtmpmdxb}\n+        37 = null\n+        38 = null\n+        39 = Item{key=lzctiscxsrokdxihdxzy, value=xkitnkdjpomohbdgimsb}\n+----------\n+         */\n+\n+\n+        System.out.println(hashTable.get(keys.get(STRING_COUNT/3)).equals(values.get(STRING_COUNT/3)));\n+        /*\n+        true\n+         */\n+        System.out.println(hashTable.size());\n+        System.out.println(hashTable.remove(\"MyKey\"));\n+        System.out.println(hashTable.size());\n+        System.out.println(hashTable.put(keys.get(0), values.get(0)));\n+        System.out.println(hashTable.size());\n+        /*\n+        20\n+        null\n+        20\n+        true\n+        20\n+         */\n+\n+        for (int i = STRING_COUNT/2; i < STRING_COUNT; i++) {\n+            hashTable.remove(keys.get(i));\n+        }\n+        System.out.println(hashTable.size());\n+        hashTable.display();\n+\n+        /*\n+        10\n+        ----------\n+        0 = Item{key=tuphwxswklnvubgfpouk, value=ifqddllsdjifinkmijrq}Item{key=zehhenrtwtwzudzdqrzz, value=nposorforiqkiaonjyav}\n+        1 = null\n+        2 = null\n+        3 = Item{key=saxkubatfeyypoqgvklm, value=efxjuxizkocpfphcaazw}\n+        4 = null\n+        5 = null\n+        6 = Item{key=qpmmcttogdevdznnilui, value=xdsvnilkrdkiupbvkwut}\n+        7 = null\n+        8 = null\n+        9 = null\n+        10 = Item{key=newmwlnkynwkqveamxnx, value=ojvfpilntnkevresikts}, Item{key=kpmekzghdbpamwsqrgkh, value=onhhudkbhqupvyxpoisx}\n+        11 = null\n+        12 = Item{key=gylnzyaliwqrtwkygrit, value=hpqiatvzpgyswmcgdbxa}\n+        13 = null\n+        14 = null\n+        15 = null\n+        16 = null\n+        17 = null\n+        18 = null\n+        19 = null\n+        20 = null\n+        21 = null\n+        22 = Item{key=tqhindvrgrqlxgixksio, value=gamiamvnqtkwwzsfelof}\n+        23 = null\n+        24 = null\n+        25 = null\n+        26 = null\n+        27 = Item{key=zxyeyzczomvxzuphmgvb, value=bhzapnhefsyqxxzlwxxa}\n+        28 = null\n+        29 = null\n+        30 = null\n+        31 = Item{key=fppsbtdtdrxklvlerxsc, value=cirlacqcgogjeesanocl}\n+        32 = null\n+        33 = null\n+        34 = null\n+        35 = null\n+        36 = null\n+        37 = null\n+        38 = null\n+        39 = null\n+        ----------\n+         */\n+\n+        for (int i = 0; i < STRING_COUNT; i++) {\n+            hashTable.remove(keys.get(i));\n+        }\n+        System.out.println(hashTable.size());\n+        hashTable.display();\n+\n+        /*\n+        0\n+        ----------\n+        0 = null\n+        1 = null\n+        2 = null\n+        3 = null\n+        4 = null\n+        5 = null\n+        6 = null\n+        7 = null\n+        8 = null\n+        9 = null\n+        10 = null\n+        11 = null\n+        12 = null\n+        13 = null\n+        14 = null\n+        15 = null\n+        16 = null\n+        17 = null\n+        18 = null\n+        19 = null\n+        20 = null\n+        21 = null\n+        22 = null\n+        23 = null\n+        24 = null\n+        25 = null\n+        26 = null\n+        27 = null\n+        28 = null\n+        29 = null\n+        30 = null\n+        31 = null\n+        32 = null\n+        33 = null\n+        34 = null\n+        35 = null\n+        36 = null\n+        37 = null\n+        38 = null\n+        39 = null\n+        ----------\n+         */\n+\n+        System.out.println(hashTable.isEmpty());\n+        /*\n+        true\n+         */\n+\n+    }\n+\n+    private static List<String> generateRandomStrings(int stringCount, int symbolsCount) {\n+\n+        List<String> stringList = new ArrayList<>();\n+        for (int i = 0; i < stringCount; i++) {\n+            stringList.add(generateRandomString(symbolsCount));\n+        }\n+        return stringList;\n+    }\n+\n+    private static String generateRandomString(int symbolsCount) {\n+        char[] symbols = new char[symbolsCount];\n+        for (int i = 0; i < symbolsCount; i++) {\n+            symbols[i] = (char) getRandomValueInRange(97, 122);\n+        }\n+        return new String(symbols);\n+    }\n+\n+    private static int getRandomValueInRange(int a, int b) {\n+        Random random = new Random();\n+        return random.nextInt(b - a + 1) + a;\n     }\n }"
  }
]
