[
  {
    "sha": "741254aa7ae9eede52539a3c57a8f3a1926959e0",
    "filename": ".gitignore",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/.gitignore",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/.gitignore",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/.gitignore?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -144,3 +144,5 @@ build\n /packs/\n /config.yml\n /region/\n+/platforms/region/testDir/\n+/.idea/"
  },
  {
    "sha": "f583c0e756b257e2b745e3296e3e6f9f7607d890",
    "filename": "build.gradle.kts",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/build.gradle.kts",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/build.gradle.kts",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/build.gradle.kts?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -1,6 +1,7 @@\n import com.dfsek.terra.getGitHash\n \n val versionObj = Version(\"5\", \"0\", \"0\", true)\n+version = versionObj\n \n allprojects {\n     version = versionObj"
  },
  {
    "sha": "9923834e4d687c7dc17970376bcaa80bee347086",
    "filename": "buildSrc/src/main/kotlin/com/dfsek/terra/CommonConfig.kt",
    "status": "modified",
    "additions": 19,
    "deletions": 2,
    "changes": 21,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/buildSrc/src/main/kotlin/com/dfsek/terra/CommonConfig.kt",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/buildSrc/src/main/kotlin/com/dfsek/terra/CommonConfig.kt",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/buildSrc/src/main/kotlin/com/dfsek/terra/CommonConfig.kt?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -30,11 +30,28 @@ fun Project.configureCommon() {\n }\n \n fun Project.getGitHash(): String {\n-    val stdout = java.io.ByteArrayOutputStream()\n-    exec {\n+    val stdout = ByteArrayOutputStream()\n+    val result = exec {\n+        isIgnoreExitValue = true\n         commandLine = mutableListOf(\"git\", \"rev-parse\", \"--short\", \"HEAD\")\n         standardOutput = stdout\n     }\n+    when (result.exitValue) {\n+        128 -> {\n+            project.logger.error(\"You must git clone the repository. You cannot build from a zip/tarball of the sources.\")\n+            result.rethrowFailure().assertNormalExitValue()\n+        }\n+        127 -> {\n+            project.logger.error(\"Could not find git executable. Please install git. https://git-scm.com/downloads\")\n+            result.rethrowFailure().assertNormalExitValue()\n+        }\n+        0 -> { // do nothing\n+        }\n+        else -> {\n+            project.logger.error(\"An error may or may not have occurred. The exit code was not zero.\")\n+            result.rethrowFailure().assertNormalExitValue()\n+        }\n+    }\n     return stdout.toString().trim()\n }\n "
  },
  {
    "sha": "74e90d8bf9da19fc562f03684cf3e1727d08ff2f",
    "filename": "buildSrc/src/main/kotlin/com/dfsek/terra/DistributionConfig.kt",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/buildSrc/src/main/kotlin/com/dfsek/terra/DistributionConfig.kt",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/buildSrc/src/main/kotlin/com/dfsek/terra/DistributionConfig.kt",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/buildSrc/src/main/kotlin/com/dfsek/terra/DistributionConfig.kt?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -61,6 +61,7 @@ fun Project.configureDistribution() {\n     }\n \n     tasks.named<ShadowJar>(\"shadowJar\") {\n+        mergeServiceFiles()\n         // Tell shadow to download the packs\n         dependsOn(downloadDefaultPacks)\n \n@@ -71,7 +72,8 @@ fun Project.configureDistribution() {\n         relocate(\"org.apache.commons\", \"com.dfsek.terra.lib.commons\")\n         relocate(\"parsii\", \"com.dfsek.terra.lib.parsii\")\n         relocate(\"net.jafama\", \"com.dfsek.terra.lib.jafama\")\n-        minimize()\n+        minimize {\n+        }\n     }\n     convention.getPlugin<BasePluginConvention>().archivesBaseName = project.name\n "
  },
  {
    "sha": "d01a42b8dbbfdf6956c3c39711bb88928d3fc321",
    "filename": "platforms/region/build.gradle.kts",
    "status": "modified",
    "additions": 73,
    "deletions": 1,
    "changes": 74,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/build.gradle.kts",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/build.gradle.kts",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/build.gradle.kts?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -1,13 +1,55 @@\n+@file:Suppress(\"UnstableApiUsage\")\n+\n import com.dfsek.terra.configureCommon\n import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar\n \n plugins {\n     `java-library`\n+    application\n }\n \n configureCommon()\n \n group = \"com.dfsek.terra\"\n+val regionVersion = \"0.0.0\"\n+\n+application {\n+//    mainClassName = \"com.dfsek.terra.RegionGenerator\"\n+    mainClass.set(\"com.dfsek.terra.cmd.RegionCliInterface\")\n+    executableDir = \"./exec_dir\"\n+}\n+\n+tasks.named<JavaExec>(\"run\") {\n+    standardInput = System.`in`\n+    val dir = file(\"testDir\")\n+    dir.mkdirs()\n+    workingDir = dir\n+//    args = listOf(\"--carver-cache-size\", \"1024\", \"--max-recursions\", \"1024\", \"--seed\", \"0000\", \"--sampler-cache-size\", \"1024\", \"--structure-cache-size\", \"256\")\n+    args = listOf(\"--debug\", \"circle\", \"r=64\", \"x=0\", \"z=0\")\n+//    args = listOf(\"square\", \"s=128\", \"x=0\", \"z=0\")\n+//    jvmArgs = listOf(\"-Djava.awt.headless=true\")\n+}\n+\n+tasks.named<JavaExec>(\"runShadow\") {\n+    val dir = file(\"testDir\")\n+    dir.mkdirs()\n+    workingDir = dir\n+    args = listOf(\"--help\")\n+    jvmArgs = listOf(\"-Djava.awt.headless=true\")\n+\n+}\n+\n+distributions {\n+    create(\"region\") {\n+        @Suppress(\"DEPRECATION\")\n+        baseName = \"region\"\n+        contents {\n+            from(tasks.named(\"shadowJar\")) {\n+                into(\"lib\")\n+            }\n+        }\n+    }\n+}\n \n repositories {\n     mavenCentral()\n@@ -16,11 +58,41 @@ repositories {\n \n dependencies {\n     \"shadedApi\"(project(\":common\"))\n-    \"shadedImplementation\"(\"com.github.Querz:NBT:5.2\") // Standalone NBT API\n+    \"shadedImplementation\"(\"com.github.Querz:NBT:6.0\") // Standalone NBT API\n+\n     \"shadedImplementation\"(\"org.yaml:snakeyaml:1.27\")\n     \"shadedImplementation\"(\"com.googlecode.json-simple:json-simple:1.1.1\")\n+    \"shadedImplementation\"(\"commons-cli:commons-cli:1.4\") // Used for command line argument parsing\n+    \"shadedImplementation\"(\"com.googlecode.lanterna:lanterna:3.1.1\") // Used for the terminal UI\n+    \"shadedImplementation\"(\"info.picocli:picocli:4.6.1\")\n+    // logging\n+    \"shadedImplementation\"(\"org.slf4j:jul-to-slf4j:1.7.30\")\n+    \"shadedImplementation\"(\"org.slf4j:slf4j-api:1.7.+\")\n+    \"shadedImplementation\"(\"ch.qos.logback:logback-classic:1.2.3\")\n+    \"shadedImplementation\"(\"org.fusesource.jansi:jansi:1.18\")\n+    \"shadedImplementation\"(\"com.google.guava:guava:30.0-jre\")\n+//    \"shadedImplementation\" (\"org.tuxdude.logback.extensions:logback-colorizer:1.0.1\")\n+}\n+\n+tasks.named<ShadowJar>(\"shadowJar\") {\n+//    from(sourceSets[\"main\"].allSource)\n+//    include(\"**/*.xml\")\n+//    include(\"**/*.xml\")\n }\n \n tasks.named<ShadowJar>(\"shadowJar\") {\n     relocate(\"net.querz\", \"com.dfsek.terra.libs.nbt\")\n+    minimize {\n+        exclude(dependency(\"ch.qos.logback:.*\"))\n+        exclude(dependency(\"org.slf4j:.*\"))\n+    }\n+}\n+tasks.withType<ProcessResources> {\n+    include(\"**/*.properties\")\n+    filter<org.apache.tools.ant.filters.ReplaceTokens>(\n+            \"tokens\" to mapOf(\n+                    \"TerraVersion\" to project.version.toString(),\n+                    \"RegionVersion\" to regionVersion\n+            )\n+    )\n }\n\\ No newline at end of file"
  },
  {
    "sha": "e051987d962d3c3130b2a7edfceffc4a098f0c98",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/RegionGenerator.java",
    "status": "modified",
    "additions": 8,
    "deletions": 5,
    "changes": 13,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/RegionGenerator.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/RegionGenerator.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/RegionGenerator.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -1,19 +1,22 @@\n package com.dfsek.terra;\n \n-import com.dfsek.terra.region.Generator;\n-\n import java.io.IOException;\n import java.util.concurrent.ThreadLocalRandom;\n \n+/**\n+ * Unused.\n+ * <p>\n+ * This was the original class that did shit. It no longer does shit.\n+ */\n public class RegionGenerator {\n     public static void main(String[] args) throws IOException {\n         long seed;\n         if(args.length == 1) seed = Long.parseLong(args[0]);\n         else seed = ThreadLocalRandom.current().nextLong();\n \n-        StandalonePlugin plugin = new StandalonePlugin();\n-        Generator generator = new Generator(seed, plugin);\n+//        StandalonePlugin plugin = new StandalonePlugin(configBuilder.build());\n+//        Generator generator = new Generator(seed, plugin);\n \n-        generator.generate();\n+//        generator.generate();\n     }\n }"
  },
  {
    "sha": "8991381847b2b03522904be2e59bc720c5502f5c",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/StandalonePlugin.java",
    "status": "modified",
    "additions": 14,
    "deletions": 3,
    "changes": 17,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/StandalonePlugin.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/StandalonePlugin.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/StandalonePlugin.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -24,29 +24,40 @@\n import com.dfsek.terra.registry.master.AddonRegistry;\n import com.dfsek.terra.registry.master.ConfigRegistry;\n import com.dfsek.terra.world.TerraWorld;\n+import org.slf4j.LoggerFactory;\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.logging.Logger;\n \n public class StandalonePlugin implements TerraPlugin {\n+    private final org.slf4j.Logger logger = LoggerFactory.getLogger(StandalonePlugin.class);\n     private final ConfigRegistry registry = new ConfigRegistry();\n     private final AddonRegistry addonRegistry = new AddonRegistry(this);\n \n     private final LockedRegistry<TerraAddon> addonLockedRegistry = new LockedRegistry<>(addonRegistry);\n \n-    private final PluginConfig config = new PluginConfig();\n+    private final PluginConfig config;\n     private final RawWorldHandle worldHandle = new RawWorldHandle();\n+    private final Map<World, TerraWorld> worldMap;\n     private final EventManager eventManager = new TerraEventManager(this);\n \n+    public StandalonePlugin(PluginConfig config) {\n+        this.config = config;\n+        logger.debug(\"{}\", config);\n+        worldMap = new ConcurrentHashMap<>();\n+    }\n+\n     @Override\n     public WorldHandle getWorldHandle() {\n         return worldHandle;\n     }\n \n     @Override\n     public TerraWorld getWorld(World world) {\n-        return new TerraWorld(world, registry.get(\"DEFAULT\"), this);\n+        return worldMap.computeIfAbsent(world, w -> new TerraWorld(w, registry.get(\"DEFAULT\"), this));\n     }\n \n     @Override\n@@ -100,7 +111,7 @@ public ItemHandle getItemHandle() {\n \n     @Override\n     public void saveDefaultConfig() {\n-\n+        // no\n     }\n \n     @Override"
  },
  {
    "sha": "fa571542f56f11576010b22813b563468e3ee639",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/cmd/CircleGenerationCommand.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/cmd/CircleGenerationCommand.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/cmd/CircleGenerationCommand.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/cmd/CircleGenerationCommand.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,89 @@\n+package com.dfsek.terra.cmd;\n+\n+import com.dfsek.terra.region.Generator;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.ParentCommand;\n+\n+import java.io.IOException;\n+\n+import static picocli.CommandLine.Option;\n+\n+@SuppressWarnings({\"unused\", \"DefaultAnnotationParam\"})\n+@Command(\n+        name = \"circle\",\n+        separator = \"=\",\n+        usageHelpAutoWidth = true,\n+        version = {\n+                \"Circle Command\",\n+                \"Region Generator: ${bundle:region.version:-Unknown Region Version}\",\n+                \"Terra: ${bundle:terra.version:-Unknown Terra Version}\",\n+                \"JVM: ${java.version} (${java.vm.name} ${java.vm.version})\",\n+                \"OS: ${os.name} ${os.version} ${os.arch}\"\n+        },\n+        headerHeading = \"\",\n+        synopsisHeading = \"Usage:%n\",\n+//        abbreviateSynopsis = true,\n+        parameterListHeading = \"%nParameters:%n\",\n+        optionListHeading = \"%nOptions:%n\",\n+        sortOptions = true,\n+        exitCodeListHeading = \"%nExit Status:%n\",\n+        exitCodeList = {\n+                \"0:No issues. No issues. Exited successfully.\",\n+                \"1:Execution resulted in failure.\",\n+                \"2:Invalid arguments.\"\n+        },\n+        descriptionHeading = \"%nDescription:%n\",\n+        description = \"Generates terrain in a circular shape.\",\n+        footerHeading = \"%n\",\n+        footer = {\n+                \"This software is licensed under GNU GPLv3. Copyright(c) 2021\",\n+                \"The sources can be found on github at https://github.com/PolyhedralDev/Terra.\",\n+                \"Please report all bugs and issues to the Terra discord server, or the github issues page.\"\n+        },\n+        commandListHeading = \"%nCommands:%n%n\",\n+        resourceBundle = \"region\"\n+)\n+public class CircleGenerationCommand implements Runnable {\n+    @ParentCommand\n+    RegionCliInterface cliInterface;\n+\n+    @Option(names = {\"r\", \"radius\"}, required = true, description = \"Sets the radius\", paramLabel = \"<radius>\")\n+    int radius;\n+    @Option(names = {\"x\", \"xOrigin\"}, description = \"Sets the origin on the x axis.\", paramLabel = \"<x>\")\n+    int centerX = 0;\n+    @Option(names = {\"z\", \"zOrigin\"}, description = \"Sets the origin on the z axis.\", paramLabel = \"<z>\")\n+    int centerZ = 0;\n+\n+    @SuppressWarnings(\"DuplicatedCode\")\n+    @Override\n+    public void run() {\n+        Generator generator = cliInterface.buildGenerator();\n+\n+        for(int i = centerZ - radius; i <= centerZ + radius; i++) {\n+            // test upper half of circle, stopping when top reached\n+            for(int j = centerX; (j - centerX) * (j - centerX) + (i - centerZ) * (i - centerZ) <= radius * radius; j--) {\n+                generator.addChunk(j, i);\n+            }\n+            // test bottom half of circle, stopping when bottom reached\n+            for(int j = centerX + 1; (j - centerZ) * (j - centerZ) + (i - centerZ) * (i - centerZ) <= radius * radius; j++) {\n+                generator.addChunk(j, i);\n+            }\n+        }\n+\n+        try {\n+            generator.generate();\n+        } catch(IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CircleGenerationCommand{\" +\n+                \"cliInterface=\" + cliInterface +\n+                \", radius=\" + radius +\n+                \", x=\" + centerX +\n+                \", z=\" + centerZ +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "beb666cf6479c1dcd2a40ecc27e1f85a5368dcef",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/cmd/RectangleGenerationCommand.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/cmd/RectangleGenerationCommand.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/cmd/RectangleGenerationCommand.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/cmd/RectangleGenerationCommand.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,93 @@\n+package com.dfsek.terra.cmd;\n+\n+import com.dfsek.terra.region.Generator;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.ParentCommand;\n+\n+import java.io.IOException;\n+\n+@SuppressWarnings({\"unused\", \"DefaultAnnotationParam\"})\n+@Command(\n+        name = \"rectangle\",\n+        aliases = \"rect\",\n+        separator = \"=\",\n+        usageHelpAutoWidth = true,\n+        version = {\n+                \"Rectangle Command\",\n+                \"Region Generator: ${bundle:region.version:-Unknown Region Version}\",\n+                \"Terra: ${bundle:terra.version:-Unknown Terra Version}\",\n+                \"JVM: ${java.version} (${java.vm.name} ${java.vm.version})\",\n+                \"OS: ${os.name} ${os.version} ${os.arch}\"\n+        },\n+        headerHeading = \"\",\n+        synopsisHeading = \"Usage:%n\",\n+//        abbreviateSynopsis = true,\n+        parameterListHeading = \"%nParameters:%n\",\n+        optionListHeading = \"%nOptions:%n\",\n+        sortOptions = true,\n+        exitCodeListHeading = \"%nExit Status:%n\",\n+        exitCodeList = {\n+                \"0:No issues. No issues. Exited successfully.\",\n+                \"1:Execution resulted in failure.\",\n+                \"2:Invalid arguments.\"\n+        },\n+        descriptionHeading = \"%nDescription:%n\",\n+        description = \"Generates terrain in a rectangular shape.\",\n+        footerHeading = \"%n\",\n+        footer = {\n+                \"This software is licensed under GNU GPLv3. Copyright(c) 2021\",\n+                \"The sources can be found on github at https://github.com/PolyhedralDev/Terra.\",\n+                \"Please report all bugs and issues to the Terra discord server, or the github issues page.\"\n+        },\n+        commandListHeading = \"%nCommands:%n%n\",\n+        resourceBundle = \"region\"\n+)\n+public class RectangleGenerationCommand implements Runnable {\n+    @ParentCommand\n+    RegionCliInterface cliInterface;\n+\n+    @Option(names = {\"w\", \"width\"}, required = true, description = \"Sets the width.\", paramLabel = \"<width>\")\n+    int width;\n+    @Option(names = {\"h\", \"height\"}, required = true, description = \"Sets the height.\", paramLabel = \"<height>\")\n+    int height;\n+    @Option(names = {\"x\", \"xOrigin\"}, description = \"Sets the origin on the x axis.\", paramLabel = \"<x>\")\n+    int x = 0;\n+    @Option(names = {\"z\", \"zOrigin\"}, description = \"Sets the origin on the z axis.\", paramLabel = \"<z>\")\n+    int z = 0;\n+    @Option(names = {\"c\", \"centered\"}, description = \"Sets whether or not the x and z origin are relative to the center or to the top left corner.\")\n+    boolean centered = true;\n+\n+    @Override\n+    public void run() {\n+        Generator generator = cliInterface.buildGenerator();\n+        if(centered) {\n+            for(int cx = (-width / 2); cx <= (width / 2); cx++)\n+                for(int cz = (-height / 2); cz <= (height / 2); cz++)\n+                    generator.addChunk(cx, cz);\n+        } else {\n+            for(int cx = x; cx < width; cx++) {\n+                for(int cz = z; cz < height; cz++) {\n+                    generator.addChunk(cx, cz);\n+                }\n+            }\n+        }\n+\n+        try {\n+            generator.generate();\n+        } catch(IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RectangleGenerationCommand{\" +\n+                \"cliInterface=\" + cliInterface +\n+                \", width=\" + width +\n+                \", height=\" + height +\n+                \", x=\" + x +\n+                \", z=\" + z +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "fe5771c1d3bcddd3d869514dbb36d00413daa1d1",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/cmd/RegionCliInterface.java",
    "status": "added",
    "additions": 127,
    "deletions": 0,
    "changes": 127,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/cmd/RegionCliInterface.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/cmd/RegionCliInterface.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/cmd/RegionCliInterface.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,127 @@\n+package com.dfsek.terra.cmd;\n+\n+import com.dfsek.terra.StandalonePlugin;\n+import com.dfsek.terra.config.WrapperPluginConfig;\n+import com.dfsek.terra.region.Generator;\n+import org.slf4j.bridge.SLF4JBridgeHandler;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Spec;\n+\n+import java.io.File;\n+\n+import static picocli.CommandLine.ParameterException;\n+\n+@SuppressWarnings({\"FieldMayBeFinal\", \"unused\", \"DefaultAnnotationParam\"})\n+@Command(\n+        name = \"region\",\n+        usageHelpAutoWidth = true,\n+        version = {\n+                \"Region Generator: ${bundle:region.version:-Unknown Region Version}\",\n+                \"Terra: ${bundle:terra.version:-Unknown Terra Version}\",\n+                \"JVM: ${java.version} (${java.vm.name} ${java.vm.version})\",\n+                \"OS: ${os.name} ${os.version} ${os.arch}\"\n+        },\n+        separator = \" \",\n+        headerHeading = \"\",\n+        synopsisHeading = \"Usage:%n\",\n+//        abbreviateSynopsis = true,\n+        parameterListHeading = \"%nParameters:%n\",\n+        optionListHeading = \"%nOptions:%n\",\n+        sortOptions = true,\n+        exitCodeListHeading = \"%nExit Status:%n\",\n+        exitCodeList = {\n+                \"0:No issues. No issues. Exited successfully.\",\n+                \"1:Execution resulted in failure.\",\n+                \"2:Invalid arguments.\"\n+        },\n+        descriptionHeading = \"%nDescription:%n\",\n+        description = \"Generates terrain using the Terra generator, without depending on an implementation of minecraft.\",\n+        footerHeading = \"%n\",\n+        footer = {\n+                \"This software is licensed under GNU GPLv3. Copyright(c) 2021\",\n+                \"The sources can be found on github at https://github.com/PolyhedralDev/Terra.\",\n+                \"Please report all bugs and issues to the Terra discord server, or the github issues page.\"\n+        },\n+        commandListHeading = \"%nCommands:%n%n\",\n+        subcommands = {\n+                CircleGenerationCommand.class,\n+                RectangleGenerationCommand.class,\n+                SquareGenerationCommand.class\n+        },\n+        resourceBundle = \"region\"\n+//        scope = CommandLine.ScopeType.INHERIT\n+)\n+public class RegionCliInterface implements Runnable {\n+    @Option(names = {\"-s\", \"--seed\"}, description = \"The seed ot use for generation.\", paramLabel = \"<seed>\")\n+    long seed = 0L;\n+    @Option(names = {\"-d\", \"--dir\", \"--directory\"}, description = \"The directory to generate the files in.\", paramLabel = \"<directory>\", defaultValue = \".\")\n+    File directory;\n+    @Option(names = \"--debug\", description = \"Enables debug mode for Terra. This will enable structure logging statements.\")\n+    boolean debug = false;\n+    @Option(names = {\"-l\", \"--language\"}, description = \"Changes the language for logging statements.\", paramLabel = \"<language>\")\n+    String language = \"en_us\";\n+    @Option(names = \"--carver-cache-size\", description = \"Sets the size for the carver cache.\", paramLabel = \"<size>\")\n+    int carverCacheSize = 512;\n+    @Option(names = \"--structure-cache-size\", description = \"Sets the size for the structure cache.\", paramLabel = \"<size>\")\n+    int structureCacheSize = 128;\n+    @Option(names = \"--sampler-cache-size\", description = \"Sets the size for the sample cache.\", paramLabel = \"<size>\")\n+    int samplerCacheSize = 512;\n+    @Option(names = {\"-r\", \"--max-recursions\"}, description = \"Sets the maximum number of recursions.\", paramLabel = \"<recursions>\")\n+    int maxRecursions = 1024;\n+    @Option(names = {\"-p\", \"--profile\", \"--profiler\"}, description = \"Enables the profiler.\")\n+    boolean profiler = false;\n+    /*\n+        @Option(names = \"--force-file-encoding\",\n+                description = {\n+                        \"Forces the file encoding for the terminal UI. Use either UTF-8 or iso-8859-1.\",\n+                        \"Valid values: ${COMPLETION-CANDIDATES}\"\n+                }, paramLabel = \"<fileEncoding>\")\n+        FileEncodings encodings = FileEncodings.UTF_8;\n+    */\n+    @Option(names = {\"-c\", \"--config\", \"--config-id\"}, description = \"Selects which config ID to use for the generator. The ID may be namespaced (eg. \\\"Terra:DEFAULT\\\") or not namespaced. (eg. \\\"DEFAULT\\\")\", paramLabel = \"<configId>\")\n+    String configId = \"DEFAULT\";\n+    @Option(names = {\"-t\", \"--threads\"}, description = \"Sets the amount of threads to be used for the generator. Defaults to -1, or as many as needed.\", paramLabel = \"<threads>\")\n+    int threads = -1;\n+    @Option(names = {\"-h\", \"--help\"}, usageHelp = true, description = \"Prints the help menu.\", scope = CommandLine.ScopeType.INHERIT)\n+    boolean help = false;\n+    @Option(names = {\"-v\", \"--version\"}, versionHelp = true, description = \"Prints the version.\", scope = CommandLine.ScopeType.INHERIT)\n+    boolean version = false;\n+    @Spec\n+    CommandSpec spec;\n+\n+    public static void main(String[] args) {\n+        SLF4JBridgeHandler.removeHandlersForRootLogger();\n+        SLF4JBridgeHandler.install();\n+\n+        System.setProperty(\"picocli.usage.width\", \"AUTO\");\n+//        new CommandLine(new RegionCliInterface()).usage(System.out);\n+        int exitCode = new CommandLine(new RegionCliInterface()).execute(args);\n+        System.exit(exitCode);\n+    }\n+\n+    @Override\n+    public void run() {\n+        throw new ParameterException(spec.commandLine(), \"Must specify sub command!\");\n+    }\n+\n+    public Generator buildGenerator() {\n+        StandalonePlugin plugin = new StandalonePlugin(WrapperPluginConfig.builder()\n+                .setDebug(debug)\n+                .setLanguage(language)\n+                .setCarverCacheSize(carverCacheSize)\n+                .setStructureCache(structureCacheSize)\n+                .setSamplerCache(samplerCacheSize)\n+                .setMaxRecursions(maxRecursions).build());\n+        return new Generator(seed, plugin);\n+    }\n+\n+/*\n+    public enum FileEncodings {\n+        UTF_8,\n+        iso_8859_1\n+    }\n+*/\n+}"
  },
  {
    "sha": "b87fbbb66199fef490ba6eefb39497ced85b8558",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/cmd/SquareGenerationCommand.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/cmd/SquareGenerationCommand.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/cmd/SquareGenerationCommand.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/cmd/SquareGenerationCommand.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,89 @@\n+package com.dfsek.terra.cmd;\n+\n+import com.dfsek.terra.region.Generator;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.ParentCommand;\n+\n+import java.io.IOException;\n+\n+@SuppressWarnings({\"unused\", \"DefaultAnnotationParam\"})\n+@Command(\n+        name = \"square\",\n+        separator = \"=\",\n+        usageHelpAutoWidth = true,\n+        version = {\n+                \"Square Command\",\n+                \"Region Generator: ${bundle:region.version:-Unknown Region Version}\",\n+                \"Terra: ${bundle:terra.version:-Unknown Terra Version}\",\n+                \"JVM: ${java.version} (${java.vm.name} ${java.vm.version})\",\n+                \"OS: ${os.name} ${os.version} ${os.arch}\"\n+        },\n+        headerHeading = \"\",\n+        synopsisHeading = \"Usage:%n\",\n+//        abbreviateSynopsis = true,\n+        parameterListHeading = \"%nParameters:%n\",\n+        optionListHeading = \"%nOptions:%n\",\n+        sortOptions = true,\n+        exitCodeListHeading = \"%nExit Status:%n\",\n+        exitCodeList = {\n+                \"0:No issues. No issues. Exited successfully.\",\n+                \"1:Execution resulted in failure.\",\n+                \"2:Invalid arguments.\"\n+        },\n+        descriptionHeading = \"%nDescription:%n\",\n+        description = \"Generates terrain in a square shape.\",\n+        footerHeading = \"%n\",\n+        footer = {\n+                \"This software is licensed under GNU GPLv3. Copyright(c) 2021\",\n+                \"The sources can be found on github at https://github.com/PolyhedralDev/Terra.\",\n+                \"Please report all bugs and issues to the Terra discord server, or the github issues page.\"\n+        },\n+        commandListHeading = \"%nCommands:%n%n\",\n+        resourceBundle = \"region\"\n+)\n+public class SquareGenerationCommand implements Runnable {\n+    @ParentCommand\n+    RegionCliInterface cliInterface;\n+\n+    @Option(names = {\"s\", \"size\"}, required = true, description = \"Sets the size.\", paramLabel = \"<size>\")\n+    int size;\n+    @Option(names = {\"x\", \"xOrigin\"}, description = \"Sets the origin on the x axis.\", paramLabel = \"<x>\")\n+    int x = 0;\n+    @Option(names = {\"z\", \"zOrigin\"}, description = \"Sets the origin on the z axis.\", paramLabel = \"<z>\")\n+    int z = 0;\n+    @Option(names = {\"c\", \"centered\"}, description = \"Sets whether or not the x and z origin are relative to the center or to the top left corner.\")\n+    boolean centered = true;\n+\n+    @Override\n+    public void run() {\n+        Generator generator = cliInterface.buildGenerator();\n+        if(centered) {\n+            for(int cx = (-size / 2); cx <= (size / 2); cx++)\n+                for(int cz = (-size / 2); cz <= (size / 2); cz++)\n+                    generator.addChunk(cx, cz);\n+        } else {\n+            for(int cx = x; cx < size; cx++) {\n+                for(int cz = z; cz < size; cz++) {\n+                    generator.addChunk(cx, cz);\n+                }\n+            }\n+        }\n+\n+        try {\n+            generator.generate();\n+        } catch(IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RectangleGenerationCommand{\" +\n+                \"cliInterface=\" + cliInterface +\n+                \", size=\" + size +\n+                \", x=\" + x +\n+                \", z=\" + z +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "74ed12fae46451ed4eabeace25d897eef9dbb1d0",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/config/WrapperPluginConfig.java",
    "status": "added",
    "additions": 143,
    "deletions": 0,
    "changes": 143,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/config/WrapperPluginConfig.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/config/WrapperPluginConfig.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/config/WrapperPluginConfig.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,143 @@\n+package com.dfsek.terra.config;\n+\n+import com.dfsek.terra.api.TerraPlugin;\n+\n+public class WrapperPluginConfig extends PluginConfig {\n+    private final String language;\n+    private final boolean debug;\n+    private final long dataSaveInterval = 0L;\n+    private final int biomeSearchResolution;\n+    private final int carverCacheSize;\n+    private final int structureCache;\n+    private final int samplerCache;\n+    private final int maxRecursions;\n+\n+    protected WrapperPluginConfig(String language, boolean debug, int biomeSearchResolution, int carverCacheSize, int structureCache, int samplerCache, int maxRecursions) {\n+        this.language = language;\n+        this.debug = debug;\n+        this.biomeSearchResolution = biomeSearchResolution;\n+        this.carverCacheSize = carverCacheSize;\n+        this.structureCache = structureCache;\n+        this.samplerCache = samplerCache;\n+        this.maxRecursions = maxRecursions;\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @Override\n+    public void load(TerraPlugin main) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public String getLanguage() {\n+        return language;\n+    }\n+\n+    @Override\n+    public boolean isDebug() {\n+        return debug;\n+    }\n+\n+    @Override\n+    public long getDataSaveInterval() {\n+        return dataSaveInterval;\n+    }\n+\n+    @Override\n+    public int getBiomeSearchResolution() {\n+        return biomeSearchResolution;\n+    }\n+\n+    @Override\n+    public int getCarverCacheSize() {\n+        return carverCacheSize;\n+    }\n+\n+    @Override\n+    public int getStructureCache() {\n+        return structureCache;\n+    }\n+\n+    @Override\n+    public int getSamplerCache() {\n+        return samplerCache;\n+    }\n+\n+    @Override\n+    public int getMaxRecursion() {\n+        return maxRecursions;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"WrapperPluginConfig{\" +\n+                \"language='\" + language + '\\'' +\n+                \", debug=\" + debug +\n+                \", dataSaveInterval=\" + dataSaveInterval +\n+                \", biomeSearchResolution=\" + biomeSearchResolution +\n+                \", carverCacheSize=\" + carverCacheSize +\n+                \", structureCache=\" + structureCache +\n+                \", samplerCache=\" + samplerCache +\n+                \", maxRecursions=\" + maxRecursions +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+        private String language = \"en_us\";\n+        private boolean debug = false;\n+        private int biomeSearchResolution = 4;\n+        private int carverCacheSize = 512;\n+        private int structureCache = 128;\n+        private int samplerCache = 512;\n+        private int maxRecursions = 1000;\n+\n+        private Builder() {\n+        }\n+\n+        public static Builder aWrapperPluginConfig() {\n+            return new Builder();\n+        }\n+\n+        public Builder setLanguage(String language) {\n+            this.language = language;\n+            return this;\n+        }\n+\n+        public Builder setDebug(boolean debug) {\n+            this.debug = debug;\n+            return this;\n+        }\n+\n+        public Builder setBiomeSearchResolution(int biomeSearchResolution) {\n+            this.biomeSearchResolution = biomeSearchResolution;\n+            return this;\n+        }\n+\n+        public Builder setCarverCacheSize(int carverCacheSize) {\n+            this.carverCacheSize = carverCacheSize;\n+            return this;\n+        }\n+\n+        public Builder setStructureCache(int structureCache) {\n+            this.structureCache = structureCache;\n+            return this;\n+        }\n+\n+        public Builder setSamplerCache(int samplerCache) {\n+            this.samplerCache = samplerCache;\n+            return this;\n+        }\n+\n+        public Builder setMaxRecursions(int maxRecursions) {\n+            this.maxRecursions = maxRecursions;\n+            return this;\n+        }\n+\n+        public WrapperPluginConfig build() {\n+            return new WrapperPluginConfig(language, debug, biomeSearchResolution, carverCacheSize, structureCache, samplerCache, maxRecursions);\n+        }\n+    }\n+}"
  },
  {
    "sha": "a0d69c1aa027a6171e39955ab8579fd8d61df1d1",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/InternalChunk.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/InternalChunk.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/InternalChunk.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/InternalChunk.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,9 @@\n+package com.dfsek.terra.internal;\n+\n+import com.dfsek.terra.api.platform.world.Chunk;\n+import com.dfsek.terra.api.platform.world.generator.ChunkData;\n+\n+public interface InternalChunk extends ChunkData, Chunk {\n+    @Override\n+    InternalWorld getWorld();\n+}"
  },
  {
    "sha": "57a8d7725276cd4040f6a7fbd85f80138529853d",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/InternalData.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/InternalData.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/InternalData.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/InternalData.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,7 @@\n+package com.dfsek.terra.internal;\n+\n+import com.dfsek.terra.api.platform.block.BlockData;\n+import com.dfsek.terra.api.platform.block.BlockType;\n+\n+public interface InternalData extends BlockType, BlockData {\n+}"
  },
  {
    "sha": "2d454564703835c450bd6747b705acce00e3094f",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/InternalGeneratorWrapper.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/InternalGeneratorWrapper.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/InternalGeneratorWrapper.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/InternalGeneratorWrapper.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,95 @@\n+package com.dfsek.terra.internal;\n+\n+import com.dfsek.terra.api.TerraPlugin;\n+import com.dfsek.terra.api.platform.world.BiomeGrid;\n+import com.dfsek.terra.api.platform.world.World;\n+import com.dfsek.terra.api.platform.world.generator.ChunkData;\n+import com.dfsek.terra.api.world.biome.provider.BiomeProvider;\n+import com.dfsek.terra.api.world.generation.TerraChunkGenerator;\n+import com.dfsek.terra.config.pack.ConfigPack;\n+import com.dfsek.terra.world.generation.math.samplers.Sampler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Random;\n+\n+public class InternalGeneratorWrapper implements TerraChunkGenerator {\n+    private final TerraChunkGenerator generator;\n+\n+    public InternalGeneratorWrapper(TerraChunkGenerator generator) {\n+        this.generator = generator;\n+    }\n+\n+//    @Override\n+//    public Object getHandle() {\n+//        return generator;\n+//    }\n+\n+    @Override\n+    public ChunkData generateChunkData(@NotNull World world, Random random, int x, int z,\n+                                       ChunkData original) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void generateBiomes(@NotNull World world, @NotNull Random random, int x, int z,\n+                               @NotNull BiomeGrid biome) {\n+\n+    }\n+\n+    @Override\n+    public boolean isParallelCapable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean shouldGenerateCaves() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean shouldGenerateDecorations() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean shouldGenerateMobs() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean shouldGenerateStructures() {\n+        return true;\n+    }\n+\n+    @Override\n+    public ConfigPack getConfigPack() {\n+        return null;\n+    }\n+\n+    @Override\n+    public TerraPlugin getMain() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Sampler createSampler(int chunkX, int chunkZ,\n+                                 BiomeProvider provider,\n+                                 World world, int elevationSmooth) {\n+        return null;\n+    }\n+\n+//    @Override\n+//    public ChunkData generateChunkData(@NotNull World world, @NotNull Random random, int x, int z, @NotNull BiomeGrid biome) {\n+//        throw new UnsupportedOperationException(); // gen is directly handled by Generator\n+//    }\n+//\n+//    @Override\n+//    public List<BlockPopulator> getDefaultPopulators(World world) {\n+//        return Collections.emptyList();\n+//    }\n+//\n+//    @Override\n+//    public @Nullable TerraChunkGenerator getTerraGenerator() {\n+//        return generator;\n+//    }\n+}"
  },
  {
    "sha": "e4a1cd3d5acb5b0bf888caafbd67856be23dca6d",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/InternalWorld.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/InternalWorld.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/InternalWorld.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/InternalWorld.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,8 @@\n+package com.dfsek.terra.internal;\n+\n+import com.dfsek.terra.api.platform.world.World;\n+\n+public interface InternalWorld extends World {\n+    @Override\n+    InternalChunk getChunkAt(int x, int z);\n+}"
  },
  {
    "sha": "b3b576fd3765cab18e0606070731347d1dcdf098",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionBlock.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionBlock.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionBlock.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionBlock.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,88 @@\n+package com.dfsek.terra.internal.impl;\n+\n+import com.dfsek.terra.api.math.vector.Location;\n+import com.dfsek.terra.api.math.vector.Vector3;\n+import com.dfsek.terra.api.platform.block.Block;\n+import com.dfsek.terra.api.platform.block.BlockData;\n+import com.dfsek.terra.api.platform.block.BlockFace;\n+import com.dfsek.terra.api.platform.block.BlockType;\n+import com.dfsek.terra.api.platform.block.state.BlockState;\n+\n+public class RegionBlock implements Block {\n+    private final RegionWorld world;\n+    private final RegionChunk chunk;\n+    private final Vector3 pos;\n+    private RegionData data = null;\n+    private RegionBlockState state = null;\n+\n+    public RegionBlock(RegionWorld world, RegionChunk chunk, Vector3 pos) {\n+        this.world = world;\n+        this.chunk = chunk;\n+        this.pos = pos;\n+    }\n+\n+    @Override\n+    public Object getHandle() {\n+        return data;\n+    }\n+\n+    @Override\n+    public void setBlockData(BlockData data, boolean physics) {\n+        this.data = (RegionData) data;\n+    }\n+\n+    @Override\n+    public BlockData getBlockData() {\n+        return data == null ? data = chunk.getBlockData(pos.getBlockX() % 16, pos.getBlockY(), pos.getBlockZ() % 16) : data;\n+    }\n+\n+    @Override\n+    public BlockState getState() {\n+        return state == null ? state = new RegionBlockState(this) : state;\n+    }\n+\n+    @Override\n+    public Block getRelative(BlockFace face) {\n+        return world.getBlockAt(pos.getBlockX() + face.getModX(), pos.getBlockY() + face.getModY(), pos.getBlockZ() + face.getModZ());\n+    }\n+\n+    @Override\n+    public Block getRelative(BlockFace face, int len) {\n+        return world.getBlockAt(pos.getBlockX() + face.getModX() * len, pos.getBlockY() + face.getModY() * len, pos.getBlockZ() + face.getModZ() * len);\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return getBlockData().isAir();\n+    }\n+\n+    @Override\n+    public Location getLocation() {\n+        return pos.toLocation(world);\n+    }\n+\n+    @Override\n+    public BlockType getType() {\n+        return getBlockData().getBlockType();\n+    }\n+\n+    @Override\n+    public int getX() {\n+        return pos.getBlockX();\n+    }\n+\n+    @Override\n+    public int getZ() {\n+        return pos.getBlockZ();\n+    }\n+\n+    @Override\n+    public int getY() {\n+        return pos.getBlockY();\n+    }\n+\n+    @Override\n+    public boolean isPassable() {\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "2a1772595a11a683d1836ec75efdce7d0c337c8c",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionBlockState.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionBlockState.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionBlockState.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionBlockState.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,55 @@\n+package com.dfsek.terra.internal.impl;\n+\n+import com.dfsek.terra.api.platform.block.Block;\n+import com.dfsek.terra.api.platform.block.BlockData;\n+import com.dfsek.terra.api.platform.block.state.BlockState;\n+\n+public class RegionBlockState implements BlockState {\n+    private final RegionBlock block;\n+    private String state;\n+\n+    public RegionBlockState(RegionBlock block) {\n+        this.block = block;\n+        state = \"\";\n+    }\n+\n+    @Override\n+    public Object getHandle() {\n+        return state;\n+    }\n+\n+    @Override\n+    public Block getBlock() {\n+        return block;\n+    }\n+\n+    @Override\n+    public int getX() {\n+        return block.getX();\n+    }\n+\n+    @Override\n+    public int getY() {\n+        return block.getY();\n+    }\n+\n+    @Override\n+    public int getZ() {\n+        return block.getZ();\n+    }\n+\n+    @Override\n+    public BlockData getBlockData() {\n+        return block.getBlockData();\n+    }\n+\n+    @Override\n+    public boolean update(boolean applyPhysics) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void applyState(String state) {\n+        this.state = state;\n+    }\n+}"
  },
  {
    "sha": "67f6317a0ba32bf7d3f027ae9dd461038f42ec3b",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionChunk.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionChunk.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionChunk.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionChunk.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,79 @@\n+package com.dfsek.terra.internal.impl;\n+\n+import com.dfsek.terra.api.math.vector.Vector3;\n+import com.dfsek.terra.api.platform.block.Block;\n+import com.dfsek.terra.api.platform.block.BlockData;\n+import com.dfsek.terra.internal.InternalChunk;\n+import com.dfsek.terra.internal.InternalWorld;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Arrays;\n+\n+public class RegionChunk implements InternalChunk {\n+    //    private final RegionData[] regionData = new RegionData[16 * 16 * 255];\n+    private final RegionData[][][] regionData = new RegionData[16][16][256];\n+    private final RegionWorld world;\n+    private final int x;\n+    private final int z;\n+\n+    public RegionChunk(RegionWorld world, int x, int z) {\n+        this.world = world;\n+        this.x = x;\n+        this.z = z;\n+    }\n+\n+\n+    @Override\n+    public Object getHandle() {\n+        return null;\n+    }\n+\n+    @Override\n+    public int getMaxHeight() {\n+        return 255;\n+    }\n+\n+    @Override\n+    public void setBlock(int x, int y, int z, @NotNull BlockData blockData) {\n+        if(x >= 0 && x < 16 && y >= 0 && y < getMaxHeight() && z >= 0 && z < 16) {\n+            regionData[x][z][y] = (RegionData) blockData;\n+        }\n+    }\n+\n+    @Override\n+    public @NotNull RegionData getBlockData(int x, int y, int z) {\n+        if(x >= 0 && x < 16 && y >= 0 && y < getMaxHeight() && z >= 0 && z < 16)\n+            return regionData[x][z][y];\n+        else\n+            return null; // haha\n+    }\n+\n+    @Override\n+    public int getX() {\n+        return x;\n+    }\n+\n+    @Override\n+    public int getZ() {\n+        return z;\n+    }\n+\n+    @Override\n+    public Block getBlock(int x, int y, int z) {\n+        return new RegionBlock(world, this, new Vector3(x, y, z));\n+    }\n+\n+    @Override\n+    public InternalWorld getWorld() {\n+        return world;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RegionChunk{\" +\n+                \"regionData=\" + Arrays.deepToString(regionData) +\n+                \", x=\" + x +\n+                \", z=\" + z +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "41f5249324685257392123a2325f8fb6bd0015eb",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionData.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionData.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionData.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionData.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,78 @@\n+package com.dfsek.terra.internal.impl;\n+\n+import com.dfsek.terra.api.platform.block.BlockData;\n+import com.dfsek.terra.api.platform.block.BlockType;\n+import com.dfsek.terra.internal.InternalData;\n+import com.dfsek.terra.platform.Data;\n+\n+import java.util.Objects;\n+\n+public class RegionData implements InternalData {\n+    private final String data;\n+\n+    public RegionData(String data) {\n+        this.data = data;\n+    }\n+\n+    @Override\n+    public BlockType getBlockType() {\n+        return this;\n+    }\n+\n+    @Override\n+    public boolean matches(BlockData other) {\n+        return ((RegionData) other).data.equals(data);\n+    }\n+\n+    @Override\n+    public String getAsString() {\n+        return data;\n+    }\n+\n+    @Override\n+    public boolean isAir() {\n+        return data.contains(\"minecraft:air\");\n+    }\n+\n+    @Override\n+    public BlockData getDefaultData() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isSolid() {\n+        return !isAir(); //TODO: actual implementation\n+    }\n+\n+    @Override\n+    public Object getHandle() {\n+        return data;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if(this == o)\n+            return true;\n+        if(o == null || o.getClass() == Data.class) {\n+            return false;\n+        }\n+        RegionData that = (RegionData) o;\n+        return Objects.equals(data, that.data);\n+    }\n+\n+    @Override\n+    public BlockData clone() {\n+        try {\n+            return (BlockData) super.clone();\n+        } catch(CloneNotSupportedException e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RegionData{\" +\n+                \"data='\" + data + '\\'' +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "33920fb9b39b26a1fee0a780c1e1562526ecd5d1",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionTree.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionTree.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionTree.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionTree.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,25 @@\n+package com.dfsek.terra.internal.impl;\n+\n+import com.dfsek.terra.api.math.vector.Location;\n+import com.dfsek.terra.api.util.collections.MaterialSet;\n+import com.dfsek.terra.api.world.tree.Tree;\n+\n+import java.util.Random;\n+\n+public class RegionTree implements Tree {\n+    private final String id;\n+\n+    public RegionTree(String id) {\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public boolean plant(Location l, Random r) {\n+        return false;\n+    }\n+\n+    @Override\n+    public MaterialSet getSpawnable() {\n+        return MaterialSet.empty();\n+    }\n+}"
  },
  {
    "sha": "602e95dbdbce548a654ff94746bc296692b707b9",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionWorld.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionWorld.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionWorld.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionWorld.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,105 @@\n+package com.dfsek.terra.internal.impl;\n+\n+import com.dfsek.terra.api.math.vector.Location;\n+import com.dfsek.terra.api.platform.block.Block;\n+import com.dfsek.terra.api.platform.entity.Entity;\n+import com.dfsek.terra.api.platform.entity.EntityType;\n+import com.dfsek.terra.api.platform.world.generator.ChunkGenerator;\n+import com.dfsek.terra.api.util.GlueList;\n+import com.dfsek.terra.internal.InternalChunk;\n+import com.dfsek.terra.internal.InternalWorld;\n+import com.dfsek.terra.platform.GenWrapper;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class RegionWorld implements InternalWorld {\n+    private final long seed;\n+    private final GenWrapper wrapper;\n+    private final List<RegionChunk> chunkList;\n+\n+    public RegionWorld(long seed, GenWrapper wrapper) {\n+        this.seed = seed;\n+        this.wrapper = wrapper;\n+        chunkList = new GlueList<>();\n+    }\n+\n+    public List<RegionChunk> getChunkList() {\n+        return chunkList;\n+    }\n+\n+    @Override\n+    public Object getHandle() {\n+        return null;\n+    }\n+\n+    @Override\n+    public long getSeed() {\n+        return seed;\n+    }\n+\n+    @Override\n+    public int getMaxHeight() {\n+        return 255;\n+    }\n+\n+    @Override\n+    public ChunkGenerator getGenerator() {\n+        return wrapper;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return null;\n+    }\n+\n+    @Override\n+    public UUID getUID() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isChunkGenerated(int x, int z) {\n+        return chunkList.parallelStream()\n+                .anyMatch(chunk -> chunk.getX() == x && chunk.getZ() == z);\n+    }\n+\n+    @Override\n+    public File getWorldFolder() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Block getBlockAt(int x, int y, int z) {\n+        return getChunkAt(x >> 4, z >> 4).getBlock(x % 16, y, z % 16);\n+    }\n+\n+    @Override\n+    public Block getBlockAt(Location l) {\n+        return getBlockAt(l.getBlockX(), l.getBlockY(), l.getBlockZ());\n+    }\n+\n+    @Override\n+    public Entity spawnEntity(Location location,\n+                              EntityType entityType) {\n+        return null;\n+    }\n+\n+    @Override\n+    public int getMinHeight() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public InternalChunk getChunkAt(int x, int z) {\n+        return chunkList.parallelStream()\n+                .filter(chunkList1 -> chunkList1.getX() == x && chunkList1.getZ() == z)\n+                .findAny()\n+                .orElseGet(() -> {\n+                    RegionChunk chunk = new RegionChunk(this, x, z);\n+                    chunkList.add(chunk);\n+                    return chunk;\n+                });\n+    }\n+}"
  },
  {
    "sha": "63dfc250b970b2f09e300c84e16f5b7886f0cc11",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionWorldHandle.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionWorldHandle.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionWorldHandle.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/internal/impl/RegionWorldHandle.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,40 @@\n+package com.dfsek.terra.internal.impl;\n+\n+import com.dfsek.terra.api.platform.block.Block;\n+import com.dfsek.terra.api.platform.block.BlockData;\n+import com.dfsek.terra.api.platform.entity.EntityType;\n+import com.dfsek.terra.api.platform.handle.WorldHandle;\n+import com.dfsek.terra.internal.InternalData;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class RegionWorldHandle implements WorldHandle {\n+    private final Map<String, InternalData> dataMap;\n+\n+    public RegionWorldHandle() {\n+        this.dataMap = new HashMap<>();\n+    }\n+\n+    @Override\n+\n+    public void setBlockData(Block block, BlockData data, boolean physics) {\n+        block.setBlockData(data, physics);\n+    }\n+\n+    @Override\n+    public BlockData getBlockData(Block block) {\n+        return block.getBlockData();\n+    }\n+\n+    @Override\n+    public BlockData createBlockData(String data) {\n+        return dataMap.computeIfAbsent(data, RegionData::new);\n+    }\n+\n+    @Override\n+    public EntityType getEntity(String id) {\n+        return null;\n+    }\n+\n+}"
  },
  {
    "sha": "a9e2afc84ce81c696ea7457b3c177edb6d098ffb",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/platform/DirectWorld.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/platform/DirectWorld.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/platform/DirectWorld.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/platform/DirectWorld.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -6,13 +6,14 @@\n import com.dfsek.terra.api.platform.block.Block;\n import com.dfsek.terra.api.platform.entity.Entity;\n import com.dfsek.terra.api.platform.entity.EntityType;\n-import com.dfsek.terra.api.platform.world.Chunk;\n import com.dfsek.terra.api.platform.world.World;\n import com.dfsek.terra.api.platform.world.generator.ChunkGenerator;\n import net.jafama.FastMath;\n import net.querz.mca.MCAFile;\n import net.querz.mca.MCAUtil;\n import net.querz.nbt.tag.CompoundTag;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.File;\n import java.io.IOException;\n@@ -22,6 +23,7 @@\n import java.util.UUID;\n \n public class DirectWorld implements World {\n+    private final Logger logger = LoggerFactory.getLogger(DirectWorld.class);\n     private final long seed;\n     private final GenWrapper generator;\n     private final Map<Long, MCAFile> files = Collections.synchronizedMap(new HashMap<>());\n@@ -62,7 +64,7 @@ public boolean isChunkGenerated(int x, int z) {\n     }\n \n     @Override\n-    public Chunk getChunkAt(int x, int z) {\n+    public DirectChunkData getChunkAt(int x, int z) {\n         MCAFile file = compute(x, z);\n         net.querz.mca.Chunk chunk = file.getChunk(x, z);\n         if(chunk == null) {\n@@ -108,7 +110,7 @@ public MCAFile compute(int x, int z) {\n                 File test = new File(\"region\", MCAUtil.createNameFromChunkLocation(x, z));\n                 if(test.exists()) {\n                     try {\n-                        System.out.println(\"Re-loading \" + MCAUtil.createNameFromChunkLocation(x, z));\n+                        logger.info(\"Re-loading {}\", MCAUtil.createNameFromChunkLocation(x, z));\n                         return MCAUtil.read(test);\n                     } catch(IOException e) {\n                         e.printStackTrace();"
  },
  {
    "sha": "ed3b818e01d43d5fbf26adad7dc34f6494b14e5c",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/region/ChunkCoordinate.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/ChunkCoordinate.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/ChunkCoordinate.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/region/ChunkCoordinate.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,19 @@\n+package com.dfsek.terra.region;\n+\n+public class ChunkCoordinate {\n+    private final int x;\n+    private final int z;\n+\n+    public ChunkCoordinate(int x, int z) {\n+        this.x = x;\n+        this.z = z;\n+    }\n+\n+    public int getX() {\n+        return x;\n+    }\n+\n+    public int getZ() {\n+        return z;\n+    }\n+}"
  },
  {
    "sha": "08f45f217b13d69525cc92c61576994a1592f61d",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/region/GenerationManager.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/GenerationManager.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/GenerationManager.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/region/GenerationManager.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,57 @@\n+package com.dfsek.terra.region;\n+\n+import com.dfsek.terra.api.platform.world.Chunk;\n+import com.dfsek.terra.platform.DirectWorld;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class GenerationManager {\n+    private final org.slf4j.Logger logger = LoggerFactory.getLogger(GenerationManager.class);\n+    private final ExecutorService executor;\n+    private final AtomicLong generatedChunks;\n+    private final DirectWorld world;\n+    private final AtomicLong time;\n+\n+    public GenerationManager(DirectWorld world) {\n+        this.world = world;\n+        executor = Executors.newFixedThreadPool((int) (Runtime.getRuntime().availableProcessors() * 1.5));\n+        generatedChunks = new AtomicLong();\n+        time = new AtomicLong(System.nanoTime());\n+    }\n+\n+    public void registerGenerationTask(GenerationTask task, int x, int z) {\n+        this.executor.submit(new GenerationTaskWrapper(this, task, world, x, z));\n+    }\n+\n+    public void submitCompletedChunk(Chunk chunk) {\n+        long count = generatedChunks.incrementAndGet();\n+\n+        if(count % 200 == 0) {\n+            long n = System.nanoTime();\n+\n+            logger.info(\"Generated {} chunks. {} cps.\", count, 200 / ((double) (n - time.get()) / 1000000) * 1000);\n+\n+            time.set(System.nanoTime());\n+        }\n+        // do nothing with generated chunk for now.\n+    }\n+\n+    public void awaitTermination() throws InterruptedException {\n+        executor.shutdown();\n+\n+        //noinspection ResultOfMethodCallIgnored\n+        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public long getGeneratedChunks() {\n+        return generatedChunks.get();\n+    }\n+\n+//    public GenerationManager() {\n+//\n+//    }\n+}"
  },
  {
    "sha": "213eb85a6bbc5d89ec9bbeb1c293424e2265b0f1",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/region/GenerationTask.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/GenerationTask.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/GenerationTask.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/region/GenerationTask.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,8 @@\n+package com.dfsek.terra.region;\n+\n+import com.dfsek.terra.platform.DirectChunkData;\n+\n+@FunctionalInterface\n+public interface GenerationTask {\n+    DirectChunkData generate(DirectChunkData chunk);\n+}"
  },
  {
    "sha": "2d33fe2902e66c3b158fdb6e1a4992afc5277d18",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/region/GenerationTaskWrapper.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/GenerationTaskWrapper.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/GenerationTaskWrapper.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/region/GenerationTaskWrapper.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,39 @@\n+package com.dfsek.terra.region;\n+\n+import com.dfsek.terra.api.platform.world.Chunk;\n+import com.dfsek.terra.platform.DirectChunkData;\n+import com.dfsek.terra.platform.DirectWorld;\n+\n+public class GenerationTaskWrapper implements Runnable {\n+    private final GenerationManager manager;\n+    private final GenerationTask task;\n+    private final DirectWorld world;\n+    private final int x;\n+    private final int z;\n+\n+    public GenerationTaskWrapper(GenerationManager manager, GenerationTask task, DirectWorld world, int x, int z) {\n+        this.manager = manager;\n+        this.task = task;\n+        this.world = world;\n+        this.x = x;\n+        this.z = z;\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            DirectChunkData chunk = prepare();\n+\n+            Chunk finalChunk = task.generate(chunk);\n+\n+            manager.submitCompletedChunk(finalChunk);\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    public DirectChunkData prepare() {\n+        return world.getChunkAt(x, z);\n+    }\n+}"
  },
  {
    "sha": "54d6759e8685b12d8bf62e0919dc862044f1a390",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/region/Generator.java",
    "status": "modified",
    "additions": 39,
    "deletions": 29,
    "changes": 68,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/Generator.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/region/Generator.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/region/Generator.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -1,89 +1,99 @@\n package com.dfsek.terra.region;\n \n import com.dfsek.terra.StandalonePlugin;\n-import com.dfsek.terra.api.platform.world.World;\n-import com.dfsek.terra.platform.DirectChunkData;\n+import com.dfsek.terra.api.util.GlueList;\n import com.dfsek.terra.platform.DirectWorld;\n import com.dfsek.terra.platform.GenWrapper;\n import com.dfsek.terra.world.generation.generators.DefaultChunkGenerator3D;\n-import com.dfsek.terra.world.generation.math.SamplerCache;\n import com.dfsek.terra.world.population.FloraPopulator;\n import com.dfsek.terra.world.population.OrePopulator;\n import com.dfsek.terra.world.population.StructurePopulator;\n import com.dfsek.terra.world.population.TreePopulator;\n import net.querz.mca.MCAFile;\n import net.querz.mca.MCAUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.Comparator;\n+import java.util.List;\n import java.util.Map;\n \n public class Generator {\n+    private final Logger logger = LoggerFactory.getLogger(Generator.class);\n     private final long seed;\n+    private final List<ChunkCoordinate> chunkList;\n     FloraPopulator floraPopulator;\n     StructurePopulator structurePopulator;\n     TreePopulator treePopulator;\n     OrePopulator orePopulator;\n-    DefaultChunkGenerator3D generator;\n+    DefaultChunkGenerator3D chunkGenerator;\n \n     public Generator(long seed, StandalonePlugin plugin) {\n         plugin.load();\n         floraPopulator = new FloraPopulator(plugin);\n         structurePopulator = new StructurePopulator(plugin);\n         treePopulator = new TreePopulator(plugin);\n         orePopulator = new OrePopulator(plugin);\n-        generator = new DefaultChunkGenerator3D(plugin.getConfigRegistry().get(\"DEFAULT\"), plugin);\n+        chunkGenerator = new DefaultChunkGenerator3D(plugin.getConfigRegistry().get(\"DEFAULT\"), plugin);\n         this.seed = seed;\n+\n+        chunkList = new GlueList<>();\n     }\n \n-    public void generate() throws IOException {\n+    public void addChunk(int x, int z) {\n+        this.chunkList.add(new ChunkCoordinate(x, z));\n+    }\n \n-        int rad = 64;\n-        System.out.println(\"Total mem: \" + Runtime.getRuntime().maxMemory() / 1024 / 1024 / 1024 + \"GB\");\n+    public void generate() throws IOException {\n+        logger.info(\"Total mem: {}GB\", ((double) Runtime.getRuntime().maxMemory() / 1024 / 1024) / 1024);\n \n \n-        GenWrapper wrapper = new GenWrapper(generator);\n+//        GenWrapper wrapper = new GenWrapper(generator);\n+//        DirectWorld world = new DirectWorld(seed, wrapper);\n+        GenWrapper wrapper = new GenWrapper(chunkGenerator);\n         DirectWorld world = new DirectWorld(seed, wrapper);\n \n-        long l = System.nanoTime();\n-        int count = 0;\n+        GenerationManager manager = new GenerationManager(world);\n \n-        for(int cx = -rad; cx <= rad; cx++) {\n-            for(int cz = -rad; cz <= rad; cz++) {\n-                DirectChunkData chunkData = (DirectChunkData) world.getChunkAt(cx, cz);\n-                generator.generateChunkData(world, null, cx, cz, chunkData);\n+        long l = System.nanoTime();\n \n-                structurePopulator.populate(world, chunkData);\n-                orePopulator.populate(world, chunkData);\n-                floraPopulator.populate(world, chunkData);\n-                treePopulator.populate(world, chunkData);\n-                count++;\n+        chunkList.parallelStream()\n+                .sorted(Comparator.comparingDouble(c -> Math.sqrt(((double) c.getX() * c.getX()) + ((double) c.getZ() * c.getZ()))))\n+                .forEach(c -> manager.registerGenerationTask(chunk -> {\n+                    chunkGenerator.generateChunkData(world, null, chunk.getX(), chunk.getZ(), chunk);\n \n-                if(count % 200 == 0) {\n-                    long n = System.nanoTime();\n+                    structurePopulator.populate(world, chunk);\n+                    orePopulator.populate(world, chunk);\n+                    floraPopulator.populate(world, chunk);\n+                    treePopulator.populate(world, chunk);\n \n-                    System.out.println(\"Generated \" + count + \" chunks. \" + 200 / ((double) (n - l) / 1000000) * 1000 + \"cps.\");\n+                    return chunk;\n+                }, c.getX(), c.getZ()));\n \n-                    l = System.nanoTime();\n+        logger.info(\"Successfully registered all generation tasks!\");\n \n-                }\n-            }\n+        try {\n+            manager.awaitTermination();\n+        } catch(InterruptedException e) {\n+            e.printStackTrace();\n         }\n \n \n-\n-        System.out.println(\"Saving...\");\n+        logger.info(\"Saving...\");\n \n         for(Map.Entry<Long, MCAFile> entry : world.getFiles().entrySet()) {\n             if(entry.getValue() == null) continue;\n             entry.getValue().cleanupPalettesAndBlockStates();\n             int x = (int) (entry.getKey() >> 32);\n             int z = (int) (long) entry.getKey();\n             File file = new File(\"region\", MCAUtil.createNameFromRegionLocation(x, z));\n+            //noinspection ResultOfMethodCallIgnored\n             file.getParentFile().mkdirs();\n             MCAUtil.write(entry.getValue(), file);\n         }\n \n-        System.out.println(\"Done in \" + (System.nanoTime() - l) / 1000000000 + \"s\");\n+        logger.info(\"Done in {}s\", (System.nanoTime() - l) / 1000000000);\n     }\n }"
  },
  {
    "sha": "886263358f55d4d5e9a83fc404e1ca07314862e7",
    "filename": "platforms/region/src/main/java/com/dfsek/terra/ui/TerminalUIEngine.java",
    "status": "added",
    "additions": 142,
    "deletions": 0,
    "changes": 142,
    "blob_url": "https://github.com/PolyhedralDev/Terra/blob/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/ui/TerminalUIEngine.java",
    "raw_url": "https://github.com/PolyhedralDev/Terra/raw/2db245680b371e5cd5cc3c72356f96878cbbb9fc/platforms/region/src/main/java/com/dfsek/terra/ui/TerminalUIEngine.java",
    "contents_url": "https://api.github.com/repos/PolyhedralDev/Terra/contents/platforms/region/src/main/java/com/dfsek/terra/ui/TerminalUIEngine.java?ref=2db245680b371e5cd5cc3c72356f96878cbbb9fc",
    "patch": "@@ -0,0 +1,142 @@\n+package com.dfsek.terra.ui;\n+\n+import com.googlecode.lanterna.Symbols;\n+import com.googlecode.lanterna.TextCharacter;\n+import com.googlecode.lanterna.graphics.TextGraphics;\n+import com.googlecode.lanterna.input.KeyStroke;\n+import com.googlecode.lanterna.input.KeyType;\n+import com.googlecode.lanterna.screen.Screen;\n+import com.googlecode.lanterna.terminal.DefaultTerminalFactory;\n+import com.googlecode.lanterna.terminal.ansi.UnixLikeTerminal;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Unused.\n+ * <p>\n+ * Was originally going to do a terminal UI, but decided not to.\n+ * May still do that in the future.\n+ */\n+public class TerminalUIEngine {\n+    private final Screen screen;\n+\n+    public TerminalUIEngine() throws IOException {\n+        this(new DefaultTerminalFactory());\n+//        System.setProperty(\"com.googlecode.lanterna.terminal.UnixTerminal.catchSpecialCharacters\", \"false\");\n+    }\n+\n+    public TerminalUIEngine(DefaultTerminalFactory factory) throws IOException {\n+        factory.setUnixTerminalCtrlCBehaviour(UnixLikeTerminal.CtrlCBehaviour.TRAP);\n+\n+//        TerminalSize size = new TerminalSize(80, 24);\n+//        factory.setInitialTerminalSize(size);\n+        screen = factory.createScreen();\n+        screen.startScreen();\n+\n+        Runtime.getRuntime().addShutdownHook(new TerminalShutdownHook(screen));\n+    }\n+\n+    @SuppressWarnings(\"RedundantThrows\")\n+    public void startMainUi() throws IOException, InterruptedException {\n+        drawBaseUi();\n+\n+        while(true) {\n+//            screen.refresh();\n+            // Handle exit keystroke first\n+            KeyStroke keystroke = screen.pollInput();\n+            if(keystroke != null &&\n+                    (keystroke.getKeyType() == KeyType.Escape || keystroke.getKeyType() == KeyType.EOF ||\n+                            (keystroke.isCtrlDown() && keystroke.getKeyType() == KeyType.Character && keystroke.getCharacter() == 'c'))) {\n+                screen.close();\n+                System.exit(0);\n+                break;\n+            }\n+\n+            if(screen.doResizeIfNecessary() != null)\n+                drawBaseUi();\n+        }\n+\n+    }\n+\n+    private void drawBaseUi() throws IOException {\n+        int width = screen.getTerminalSize().getColumns() - 1;\n+        int height = screen.getTerminalSize().getRows() - 1;\n+\n+        if(width + 1 < 80 || height + 1 < 24) {\n+            screen.close();\n+            System.err.println(\"Your terminal must be at least 80x24. Please run with --no-gui if this is not possible.\");\n+            System.exit(1);\n+        }\n+\n+        screen.setCursorPosition(null);\n+\n+        screen.clear();\n+\n+        TextGraphics graphics = screen.newTextGraphics();\n+\n+        // Progress box\n+        drawBoxWithText(0, 0, width, 2, \"progress\", graphics);\n+\n+        // Threads box\n+        int threadWidth = width * 5 / 16;\n+        int threadHeight = (height - 3) * 5 / 11;\n+        drawBoxWithText(0, 3, threadWidth, threadHeight, \"threads\", graphics);\n+\n+        // Profiler box\n+        int profilerWidth = width * 17 / 40;\n+        drawBoxWithText(threadWidth + 1, 3, threadWidth + profilerWidth, threadHeight, \"profiler\", graphics);\n+\n+        // Graph box\n+        drawBoxWithText(threadWidth + profilerWidth + 1, 3, width, threadHeight, \"graph\", graphics);\n+\n+        // Advanced statistics box\n+        int statisticsHeight = (height - 3) * 5 / 22;\n+        drawBoxWithText(0, threadHeight + 1, width / 2, threadHeight + statisticsHeight, \"advanced statistics\", graphics);\n+\n+        // Performance statistics box\n+        drawBoxWithText(width / 2 + 1, threadHeight + 1, width, threadHeight + statisticsHeight, \"performance statistics\", graphics);\n+\n+        // Logs box\n+        drawBoxWithText(0, threadHeight + statisticsHeight + 1, width, height, \"logs\", graphics);\n+\n+        screen.refresh();\n+    }\n+\n+    private void drawBoxWithText(int fromX, int fromY, int toX, int toY, String text, TextGraphics graphics) {\n+        graphics.setCharacter(fromX, fromY, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_TOP_LEFT_CORNER)[0]); // top left corner\n+        graphics.setCharacter(toX, fromY, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_TOP_RIGHT_CORNER)[0]); // top right corner\n+        graphics.setCharacter(fromX, toY, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_BOTTOM_LEFT_CORNER)[0]); // bottom left corner\n+        graphics.setCharacter(toX, toY, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_BOTTOM_RIGHT_CORNER)[0]); // bottom right corner\n+\n+\n+        graphics.setCharacter(fromX + 1, fromY, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_HORIZONTAL)[0]); // mini line\n+        graphics.setCharacter(fromX + 2, fromY, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_T_LEFT)[0]); // text left delimiter\n+        graphics.putCSIStyledString(fromX + 3, fromY, text); // text\n+        graphics.setCharacter(fromX + 3 + text.length(), fromY, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_T_RIGHT)[0]); // text right delimiter\n+\n+        graphics.drawLine(fromX + text.length() + 4, fromY, toX - 1, fromY, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_HORIZONTAL)[0]); // top line\n+\n+        graphics.drawLine(fromX + 1, toY, toX - 1, toY, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_HORIZONTAL)[0]); // bottom line\n+\n+        graphics.drawLine(fromX, fromY + 1, fromX, toY - 1, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_VERTICAL)[0]); // left line\n+\n+        graphics.drawLine(toX, fromY + 1, toX, toY - 1, TextCharacter.fromCharacter(Symbols.SINGLE_LINE_VERTICAL)[0]); // right line\n+    }\n+\n+    public static class TerminalShutdownHook extends Thread {\n+        private final Screen screen;\n+\n+        public TerminalShutdownHook(Screen screen) {\n+            this.screen = screen;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                screen.close();\n+            } catch(IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+}"
  }
]
