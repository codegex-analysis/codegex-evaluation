[
  {
    "sha": "51837ce0caa93f56594820ac81799d3d5407223d",
    "filename": "src/GU/Java/TikTacToe.java",
    "status": "added",
    "additions": 214,
    "deletions": 0,
    "changes": 214,
    "blob_url": "https://github.com/rsbulddakov/Java/blob/4f6ea88a2ceaaeb36ae1eaeb8d777a73b3fa0ceb/src/GU/Java/TikTacToe.java",
    "raw_url": "https://github.com/rsbulddakov/Java/raw/4f6ea88a2ceaaeb36ae1eaeb8d777a73b3fa0ceb/src/GU/Java/TikTacToe.java",
    "contents_url": "https://api.github.com/repos/rsbulddakov/Java/contents/src/GU/Java/TikTacToe.java?ref=4f6ea88a2ceaaeb36ae1eaeb8d777a73b3fa0ceb",
    "patch": "@@ -0,0 +1,214 @@\n+package GU.Java;\n+\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class TikTacToe {\n+    private static int fieldSize = 5;\n+    private static int dotsToWin = 4;\n+\n+    private static char emptyDot = '_';\n+    private static char playerChar = 'X';\n+    private static char aiChar = 'O';\n+\n+    private static Scanner input = new Scanner(System.in);\n+    private static char[][] gameField;\n+\n+    public static void main(String[] args) {\n+        playGame();\n+    }\n+\n+    static void playGame() {\n+        createField();\n+        drawFiled();\n+        while (true) {\n+            if (!checkNextPlayerMove()) {\n+                return;\n+            }\n+            if (!checkNextAIMove()) {\n+                return;\n+            }\n+        }\n+\n+    }\n+\n+    static boolean checkNextPlayerMove() {\n+        doPlayerMove();\n+        drawFiled();\n+        return isNextMoveAvailable(playerChar, \"Sorry, AI is winner!\");\n+    }\n+\n+    static boolean checkNextAIMove() {\n+        doAIMove();\n+        drawFiled();\n+        return isNextMoveAvailable(aiChar, \"Congrats! You are winner!\");\n+    }\n+\n+    public static boolean isWin(char playerDot) {\n+        int hor, ver;\n+        int diagMain, diagReverse;\n+        for (int i = 0; i < fieldSize; i++) {\n+            hor = 0;\n+            ver = 0;\n+            for (int j = 0; j < fieldSize; j++) {\n+                if (gameField[i][j] == playerDot) {\n+                    hor++;\n+                } else if (gameField[i][j] != playerDot && hor < dotsToWin) {\n+                    hor = 0;\n+                }\n+                if (gameField[j][i] == playerDot) {\n+                    ver++;\n+                }   else if (gameField[j][i] != playerDot && ver < dotsToWin) {\n+                    ver = 0;\n+                }\n+            }\n+            if (hor >= dotsToWin || ver >= dotsToWin) {\n+                return true;\n+            }\n+        }\n+\n+        for (int j = 0; j < fieldSize; j++) {\n+            diagMain = 0;\n+            for (int i = 0; i < fieldSize; i++) {\n+                int k = j + i;\n+                if (k < fieldSize) {\n+                    if (gameField[i][k] == playerDot) {\n+                        diagMain++;\n+                    } else if (gameField[i][k] != playerDot && diagMain < dotsToWin) {\n+                        diagMain = 0;\n+                    }\n+                }\n+                if (diagMain >= dotsToWin) {\n+                    return true;\n+                }\n+            }\n+        }\n+        for (int j = 1; j < fieldSize; j++) {\n+            diagMain = 0;\n+            for (int i = 0; i < fieldSize; i++) {\n+                int k = j + i;\n+                if (k < fieldSize) {\n+                    if (gameField[k][i] == playerDot) {\n+                        diagMain++;\n+                    } else if (gameField[k][i] != playerDot && diagMain < dotsToWin) {\n+                        diagMain = 0;\n+                    }\n+                }\n+                if (diagMain >= dotsToWin) {\n+                    return true;\n+                }\n+            }\n+        }\n+        for (int j = 0; j < fieldSize; j++) {\n+            diagReverse = 0;\n+            for (int i = 0; i < fieldSize; i++) {\n+                int k = (fieldSize - 1) - i;\n+                int l = j + i;\n+                if (k >= 0 && l < fieldSize) {\n+                    if (gameField[l][k] == playerDot) {\n+                        diagReverse++;\n+                    } else if (gameField[l][k] != playerDot && diagReverse < dotsToWin) {\n+                        diagReverse = 0;\n+                    }\n+                }\n+                if (diagReverse >= dotsToWin) {\n+                    return true;\n+                }\n+            }\n+        }\n+        for (int j = 1; j < fieldSize; j++) {\n+            diagReverse = 0;\n+            for (int i = 0; i < fieldSize; i++) {\n+                int k = (fieldSize - 1) - j - i;\n+                if (k >= 0) {\n+                    if (gameField[i][k] == playerDot) {\n+                        diagReverse++;\n+                    } else if (gameField[i][k] != playerDot && diagReverse < dotsToWin) {\n+                        diagReverse = 0;\n+                    }\n+                }\n+                if (diagReverse >= dotsToWin) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    static void doAIMove() {\n+        Random random = new Random();\n+        int x, y;\n+        do {\n+            x = random.nextInt(gameField.length);\n+            y = random.nextInt(gameField.length);\n+        } while (isCellFree(x, y));\n+\n+        gameField[x][y] = playerChar;\n+    }\n+\n+    static void doPlayerMove() {\n+        int x, y;\n+\n+        do {\n+            x = checkCoordinateRange('X');\n+            y = checkCoordinateRange('Y');\n+        } while (isCellFree(x, y));\n+\n+        gameField[x][y] = aiChar;\n+    }\n+\n+    static int checkCoordinateRange(char coordName) {\n+        int val;\n+        do {\n+            System.out.printf(\"Please input %s-coordinate in range [1-%s]...\", coordName, fieldSize);\n+            val = input.nextInt() - 1;\n+        } while (val < 0 || val > fieldSize);\n+        return val;\n+    }\n+\n+    static boolean isDraw() {\n+        for (int i = 0; i < gameField.length; i++) {\n+            for (int j = 0; j < gameField[i].length; j++) {\n+                if (gameField[i][j] == emptyDot) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static void createField() {\n+        gameField = new char[fieldSize][fieldSize];\n+        for (int i = 0; i < fieldSize; i++) {\n+            for (int j = 0; j < fieldSize; j++) {\n+                gameField[i][j] = emptyDot;\n+            }\n+        }\n+    }\n+\n+    static void drawFiled() {\n+        for (int i = 0; i < gameField.length; i++) {\n+            for (int j = 0; j < gameField.length; j++) {\n+                System.out.print(gameField[i][j] + \" \");\n+            }\n+            System.out.println();\n+        }\n+        System.out.println();\n+    }\n+\n+    static boolean isCellFree(int x, int y) {\n+        return gameField[x][y] != emptyDot;\n+    }\n+\n+    static boolean isNextMoveAvailable(char sign, String winMessage) {\n+        if (isDraw()) {\n+            System.out.println(\"There is draw detected. Finish!\");\n+            return false;\n+        }\n+        if (isWin(sign)) {\n+            System.out.println(winMessage);\n+            return false;\n+        }\n+        return true;\n+    }\n+}"
  }
]
