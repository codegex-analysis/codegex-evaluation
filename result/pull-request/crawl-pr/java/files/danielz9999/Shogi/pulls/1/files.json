[
  {
    "sha": "0d21a333dd3bf7baf4896fa69d2d2ea825d3247d",
    "filename": "Bishop.java",
    "status": "added",
    "additions": 169,
    "deletions": 0,
    "changes": 169,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Bishop.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Bishop.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Bishop.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -0,0 +1,169 @@\n+import java.util.ArrayList;\r\n+\r\n+public class Bishop extends piece{\r\n+    public Bishop(int player, int xCor, int yCor) {\r\n+        super(player, xCor, yCor);\r\n+    }\r\n+    @Override\r\n+    public String getType() {\r\n+        return \"bishop\";\r\n+    }\r\n+    @Override\r\n+    public ArrayList<Coordinates> getMoves(int x, int y, ArrayList<Coordinates> whitePositions, ArrayList<Coordinates> blackPositions) {\r\n+        ArrayList<Coordinates> moves =  new ArrayList<Coordinates>();;\r\n+        int northWestReps = 10;\r\n+        int southWestReps = 10;\r\n+        int northEastReps = 10;\r\n+        int southEastReps = 10;\r\n+        int breaker = 0;\r\n+\r\n+        for (int w = 0;  w < 9; w++) {\r\n+            int xCheck;\r\n+            int yCheck;\r\n+            xCheck = x - w;\r\n+            yCheck = y - w;\r\n+            System.out.println(xCheck);\r\n+            if (xCheck == 0 || yCheck == 0) {\r\n+                northWestReps = w;\r\n+                break;\r\n+            }\r\n+        }\r\n+        for (int wc = 0;  wc < 9; wc++) {\r\n+            int xCheck;\r\n+            int yCheck;\r\n+            xCheck = x + wc;\r\n+            yCheck = y - wc;\r\n+            if (xCheck == 8 || yCheck == 0) {\r\n+                southWestReps = wc;\r\n+                break;\r\n+            }\r\n+        }\r\n+        for (int wa = 0;  wa < 9; wa++) {\r\n+            int xCheck;\r\n+            int yCheck;\r\n+            xCheck = x + wa;\r\n+            yCheck = y + wa;\r\n+            if (xCheck == 8 || yCheck == 8) {\r\n+                southEastReps = wa;\r\n+                break;\r\n+            }\r\n+        }\r\n+        for (int wb = 0;  wb < 9; wb++) {\r\n+            int xCheck;\r\n+            int yCheck;\r\n+            xCheck = x - wb;\r\n+            yCheck = y + wb;\r\n+            if (xCheck == 0 || yCheck == 8) {\r\n+                northEastReps = wb;\r\n+                break;\r\n+            }\r\n+        }\r\n+        System.out.println(\"northwest: \" + northWestReps + \" southwest: \" + southWestReps + \" southeast: \" + southEastReps + \" northeast: \" + northEastReps);\r\n+\r\n+        //northwest move\r\n+        for (int i = 0; i < northWestReps; i++) {\r\n+            int xAdjust = x - i - 1;\r\n+            int yAdjust = y - i - 1;\r\n+            moves.add(new Coordinates(xAdjust,yAdjust));\r\n+            for (int j = 0; j < blackPositions.size(); j++) {\r\n+                if (blackPositions.get(j).firstHalf() == xAdjust && blackPositions.get(j).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            for (int k = 0; k < whitePositions.size(); k++) {\r\n+                if (whitePositions.get(k).firstHalf() == xAdjust && whitePositions.get(k).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (breaker == 1) {\r\n+\r\n+                break;\r\n+            }\r\n+        }\r\n+        breaker = 0;\r\n+        //southwest move\r\n+        for (int i = 0; i < southWestReps; i++) {\r\n+            int xAdjust = x + i + 1;\r\n+            int yAdjust = y - i - 1;\r\n+            moves.add(new Coordinates(xAdjust,yAdjust));\r\n+            for (int j = 0; j < blackPositions.size(); j++) {\r\n+                if (blackPositions.get(j).firstHalf() == xAdjust && blackPositions.get(j).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            for (int k = 0; k < whitePositions.size(); k++) {\r\n+                if (whitePositions.get(k).firstHalf() == xAdjust && whitePositions.get(k).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (breaker == 1) {\r\n+\r\n+                break;\r\n+            }\r\n+        }\r\n+        breaker = 0;\r\n+        //southeast move\r\n+        for (int i = 0; i < southEastReps; i++) {\r\n+            int xAdjust = x + i + 1;\r\n+            int yAdjust = y + i + 1;\r\n+            moves.add(new Coordinates(xAdjust,yAdjust));\r\n+            for (int j = 0; j < blackPositions.size(); j++) {\r\n+                if (blackPositions.get(j).firstHalf() == xAdjust && blackPositions.get(j).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            for (int k = 0; k < whitePositions.size(); k++) {\r\n+                if (whitePositions.get(k).firstHalf() == xAdjust && whitePositions.get(k).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (breaker == 1) {\r\n+\r\n+                break;\r\n+            }\r\n+        }\r\n+        breaker = 0;\r\n+        //northeast move\r\n+        for (int i = 0; i < northEastReps; i++) {\r\n+            int xAdjust = x - i - 1;\r\n+            int yAdjust = y + i + 1;\r\n+            moves.add(new Coordinates(xAdjust,yAdjust));\r\n+            for (int j = 0; j < blackPositions.size(); j++) {\r\n+                if (blackPositions.get(j).firstHalf() == xAdjust && blackPositions.get(j).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            for (int k = 0; k < whitePositions.size(); k++) {\r\n+                if (whitePositions.get(k).firstHalf() == xAdjust && whitePositions.get(k).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (breaker == 1) {\r\n+\r\n+                break;\r\n+            }\r\n+        }\r\n+        if (this.getOwner() == 0) {\r\n+            moves = friendBlock(moves, whitePositions);\r\n+        } else if (this.getOwner() == 1) {\r\n+            moves = friendBlock(moves, blackPositions);\r\n+        }\r\n+        return moves;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "c857848c363845062112c40a8b9ff1aead89ae97",
    "filename": "Board.java",
    "status": "modified",
    "additions": 202,
    "deletions": 69,
    "changes": 271,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Board.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Board.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Board.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,94 +1,227 @@\n import javax.swing.*;\r\n-//třída která se stará o JPanel plocha a o vytvoření a spravování políček\r\n-\r\n+import java.awt.*;\r\n+import java.awt.event.ActionEvent;\r\n+import java.awt.event.ActionListener;\r\n+import java.util.ArrayList;\r\n \r\n public class Board {\r\n+    JButton allButtons[][] = new TheButtons[9][9];\r\n+    Space allSpaces[][] = new Space[9][9];\r\n \r\n-    public pole vsechnyPole[][] = new pole[9][9];\r\n-    JButton vsechnyButtons[][] = new TheButtons[9][9];\r\n-\r\n-    //JFrame plocha = new JFrame(\"Hrací plocha\");\r\n+    private ArrayList<Coordinates> moveList = null;\r\n+    GameRules g = new GameRules();\r\n \r\n+    private int oldX;\r\n+    private int oldY;\r\n \r\n-    public Board() {\r\n+    ArrayList<Coordinates> whitePiecesPositions = new ArrayList<Coordinates>();\r\n+    ArrayList<Coordinates> blackPiecesPositions = new ArrayList<Coordinates>();\r\n \r\n \r\n-\r\n-        /*plocha.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n-        plocha.setSize(800, 800);\r\n-        plocha.setLocationRelativeTo(null);\r\n-        plocha.setLayout(new GridLayout(9, 9));\r\n-        */\r\n+    public Board() {\r\n         for (int i = 0; i < 9; i++) {\r\n             for (int j = 0; j < 9; j++) {\r\n                 int l = i + 1;\r\n                 int k = j + 1;\r\n-                nullPiece NULL = new nullPiece();\r\n-                vsechnyPole[i][j] = new pole(l, k, NULL);\r\n-                vsechnyPole[i][j].whereAmI();\r\n-\r\n \r\n+                //vytvoří se 81 tlačítek, která jsou rozmístěna na plochu v 9x9 síti\r\n+                TheButtons buttons = new TheButtons(i, j);\r\n+                allButtons[i][j] = buttons;\r\n+                allSpaces[i][j] = new Space();\r\n+                allSpaces[i][j].changePiece(new NullPiece(i,j));\r\n+                buttons.addActionListener(new ActionListener() {\r\n+                    @Override\r\n+                    public void actionPerformed(ActionEvent e) {\r\n+\r\n+                        if (moveList != null && g.isMovePossible(buttons.getA(), buttons.getB(), moveList, allSpaces[oldX][oldY].getCurrentPiece().getMoves(oldX,oldY,whitePiecesPositions,blackPiecesPositions).size()) && allSpaces[oldX][oldY].getCurrentPiece().getOwner() == g.currentTurn) {\r\n+                            movePiece(allSpaces[oldX][oldY].getCurrentPiece(),buttons.getA(), buttons.getB());\r\n+                            moveList = null;\r\n+                            if (g.currentTurn == 0) {\r\n+                                g.currentTurn = 1;\r\n+                            } else if (g.currentTurn == 1) {\r\n+                                g.currentTurn = 0;\r\n+                            }\r\n+                        } else if (moveList != null && !g.isMovePossible(buttons.getA(), buttons.getB(), moveList, allSpaces[oldX][oldY].getCurrentPiece().getMoves(oldX,oldY,whitePiecesPositions,blackPiecesPositions).size()) && !allSpaces[buttons.getA()][buttons.getB()].getCurrentPiece().getType().equals(\"null\")) {\r\n+                            oldX = buttons.getA();\r\n+                            oldY = buttons.getB();\r\n+                            moveList = allSpaces[oldX][oldY].getCurrentPiece().getMoves(oldX,oldY,whitePiecesPositions,blackPiecesPositions);\r\n+\r\n+                        } else if (moveList == null && !allSpaces[buttons.getA()][buttons.getB()].getCurrentPiece().getType().equals(\"null\")) {\r\n+                            oldX = buttons.getA();\r\n+                            oldY = buttons.getB();\r\n+                            moveList = allSpaces[oldX][oldY].getCurrentPiece().getMoves(oldX,oldY,whitePiecesPositions,blackPiecesPositions);\r\n+                        }\r\n+\r\n+                        else if (allSpaces[buttons.getA()][buttons.getB()].getCurrentPiece().getType().equals(\"null\")) {\r\n+                            moveList = null;\r\n+\r\n+                        }\r\n+\r\n+\r\n+                    }\r\n+                });\r\n             }\r\n         }\r\n+        standardSetup();\r\n \r\n+    }\r\n \r\n-        /*vsechnyPole[4][4].currentPiece = new testPiece();\r\n-        vsechnyPole[4][4].whereAmI();\r\n-        System.out.println(vsechnyPole[4][4].currentPiece.x);\r\n-        plocha.setVisible(true);\r\n-        poleUpdate(vsechnyPole[4][4]);\r\n-\r\n-        moveTo(vsechnyPole[4][4].currentPiece, vsechnyPole[5][5]);\r\n-        */\r\n+    public void movePiece(piece movingPiece, int x, int y) {\r\n+        //removal of the original position of the moving piece from the positions list\r\n+        if (movingPiece.getOwner() == 0) {\r\n+            for (int i = 0; i < whitePiecesPositions.size(); i++) {\r\n+                if (whitePiecesPositions.get(i).firstHalf() == movingPiece.getX() && whitePiecesPositions.get(i).secondHalf() == movingPiece.getY()) {\r\n+                    whitePiecesPositions.remove(i);\r\n+                    break;\r\n+                }\r\n+            }\r\n+        } else if (movingPiece.getOwner() == 1) {\r\n+            for (int i = 0; i < blackPiecesPositions.size(); i++) {\r\n+                if (blackPiecesPositions.get(i).firstHalf() == movingPiece.getX() && blackPiecesPositions.get(i).secondHalf() == movingPiece.getY()) {\r\n+                    blackPiecesPositions.remove(i);\r\n+                    break;\r\n+                }\r\n+            }\r\n+        }\r\n+        //removal of the taken piece's position from the positions list\r\n+        for (int i = 0; i < whitePiecesPositions.size(); i++) {\r\n+            if (whitePiecesPositions.get(i).firstHalf() == x && whitePiecesPositions.get(i).secondHalf() == y) {\r\n+                whitePiecesPositions.remove(i);\r\n+                break;\r\n+            }\r\n+        }\r\n \r\n+        for (int i = 0; i < blackPiecesPositions.size(); i++) {\r\n+            if (blackPiecesPositions.get(i).firstHalf() == x && blackPiecesPositions.get(i).secondHalf() == y) {\r\n+                blackPiecesPositions.remove(i);\r\n+                break;\r\n+            }\r\n+        }\r\n \r\n+        //adding the new position of the moved piece to the corresponding positions list\r\n+        if (movingPiece.getOwner() == 0) {\r\n+            whitePiecesPositions.add(new Coordinates(x,y));\r\n+        } else if (movingPiece.getOwner() == 1) {\r\n+            blackPiecesPositions.add(new Coordinates(x,y));\r\n+        }\r\n+        allSpaces[movingPiece.getX()][movingPiece.getY()].changePiece(new NullPiece(movingPiece.getX(),movingPiece.getY()));\r\n+        buttonUpdate(movingPiece.getX(),movingPiece.getY());\r\n+        movingPiece.moveTo(x,y);\r\n+        allSpaces[x][y].changePiece(movingPiece);\r\n+        buttonUpdate(x,y);\r\n+        if (x < 3 && movingPiece.getOwner() == 0) {\r\n+            pieceUpgrade(allSpaces[x][y]);\r\n+        } else if (x > 5 && movingPiece.getOwner() == 1) {\r\n+            pieceUpgrade(allSpaces[x][y]);\r\n+        }\r\n     }\r\n-\r\n-   /* public void poleUpdate(pole p) {\r\n-        int x = p.coorX - 1;\r\n-        int y = p.coorY - 1;\r\n-\r\n-        if (p.currentPiece.isTest == true) {\r\n-            vsechnyButtons[x][y].setBackground(Color.BLACK);\r\n-            vsechnyButtons[x][y].setOpaque(true);\r\n-        } else if (p.currentPiece.isTest == false) {\r\n-            vsechnyButtons[x][y].setBackground(Color.RED);\r\n-            vsechnyButtons[x][y].setOpaque(true);\r\n+    public void buttonUpdate(int x, int y) {\r\n+        if (allSpaces[x][y].getCurrentPiece().getType().equals(\"pawn\")) {\r\n+            allButtons[x][y].setBackground(Color.BLACK);\r\n+            allButtons[x][y].setOpaque(true);\r\n+        } else if (allSpaces[x][y].getCurrentPiece().getType().equals(\"null\")) {\r\n+            allButtons[x][y].setBackground(Color.RED);\r\n+            allButtons[x][y].setOpaque(true);\r\n+        } else if (allSpaces[x][y].getCurrentPiece().getType().equals(\"knight\")) {\r\n+            allButtons[x][y].setBackground(Color.BLUE);\r\n+            allButtons[x][y].setOpaque(true);\r\n+        } else if (allSpaces[x][y].getCurrentPiece().getType().equals(\"silver\")) {\r\n+            allButtons[x][y].setBackground(Color.GRAY);\r\n+            allButtons[x][y].setOpaque(true);\r\n+        } else if (allSpaces[x][y].getCurrentPiece().getType().equals(\"gold\")) {\r\n+            allButtons[x][y].setBackground(Color.YELLOW);\r\n+            allButtons[x][y].setOpaque(true);\r\n+        } else if (allSpaces[x][y].getCurrentPiece().getType().equals(\"king\")) {\r\n+            allButtons[x][y].setBackground(Color.PINK);\r\n+            allButtons[x][y].setOpaque(true);\r\n+        } else if (allSpaces[x][y].getCurrentPiece().getType().equals(\"lancer\")) {\r\n+            allButtons[x][y].setBackground(Color.ORANGE);\r\n+            allButtons[x][y].setOpaque(true);\r\n+        } else if (allSpaces[x][y].getCurrentPiece().getType().equals(\"rook\")) {\r\n+            allButtons[x][y].setBackground(Color.DARK_GRAY);\r\n+            allButtons[x][y].setOpaque(true);\r\n+        } else if (allSpaces[x][y].getCurrentPiece().getType().equals(\"bishop\")) {\r\n+            allButtons[x][y].setBackground(Color.GREEN);\r\n+            allButtons[x][y].setOpaque(true);\r\n         }\r\n     }\r\n-*/\r\n-    //funkce která hýbe s figurkami\r\n-    public void moveTo(piece a, pole b) {\r\n-        int x = a.currentPole.coorX - 1;\r\n-        int y = a.currentPole.coorY - 1;\r\n-        int c = b.coorX - 1;\r\n-        int d = b.coorY - 1;\r\n-\r\n-        a.currentPole = vsechnyPole[c][d];\r\n-        vsechnyPole[c][d].currentPiece.isTaken = true;\r\n-        vsechnyPole[x][y].currentPiece = new nullPiece();\r\n-        vsechnyPole[c][d].currentPiece = a;\r\n-        //poleUpdate(vsechnyPole[c][d]);\r\n-        //poleUpdate(vsechnyPole[x][y]);\r\n-\r\n+    public void makePawn(int owner, int x, int y) {\r\n+        allSpaces[x][y].changePiece(new Pawn(owner,x,y));\r\n+        buttonUpdate(x,y);\r\n+        pieceCreationLog(owner, x, y);\r\n     }\r\n-\r\n- //pokus o přepsání moveTo2 funkce, momentálně nevyužita\r\n-   /* public void moveTo2(pole a, pole b) {\r\n-        int x = a.coorX - 1;\r\n-        int y = a.coorY - 1;\r\n-        int c = b.coorX - 1;\r\n-        int d = b.coorY - 1;\r\n-\r\n-        vsechnyPole[c][d] = a;\r\n-        //vsechnyPole[c][d].currentPiece.isTaken = true;\r\n-        vsechnyPole[c][d].currentPiece = a.currentPiece;\r\n-        vsechnyPole[x][y] = new pole(x+1,y+1,new nullPiece());\r\n-\r\n+    public void makeKnight(int owner, int x, int y) {\r\n+        allSpaces[x][y].changePiece(new Knight(owner,x,y));\r\n+        buttonUpdate(x,y);\r\n+        pieceCreationLog(owner, x, y);\r\n+    }\r\n+    public void makeSilverGeneral(int owner, int x, int y) {\r\n+        allSpaces[x][y].changePiece(new SilverGeneral(owner,x,y));\r\n+        buttonUpdate(x,y);\r\n+        pieceCreationLog(owner, x, y);\r\n+    }\r\n+    public void makeGoldenGeneral(int owner, int x, int y) {\r\n+        allSpaces[x][y].changePiece(new GoldenGeneral(owner,x,y));\r\n+        buttonUpdate(x,y);\r\n+        pieceCreationLog(owner, x, y);\r\n+    }\r\n+    public void makeKing(int owner, int x, int y) {\r\n+        allSpaces[x][y].changePiece(new King(owner,x,y));\r\n+        buttonUpdate(x,y);\r\n+        pieceCreationLog(owner, x, y);\r\n+    }\r\n+    public void makeLancer(int owner, int x, int y) {\r\n+        allSpaces[x][y].changePiece(new Lancer(owner,x,y));\r\n+        buttonUpdate(x,y);\r\n+        pieceCreationLog(owner, x, y);\r\n+    }\r\n+    public void makeRook(int owner, int x, int y) {\r\n+        allSpaces[x][y].changePiece(new Rook(owner,x,y));\r\n+        buttonUpdate(x,y);\r\n+        pieceCreationLog(owner, x, y);\r\n+    }\r\n+    public void makeBishop(int owner, int x, int y) {\r\n+        allSpaces[x][y].changePiece(new Bishop(owner,x,y));\r\n+        buttonUpdate(x,y);\r\n+        pieceCreationLog(owner, x, y);\r\n+    }\r\n+    public void standardSetup() {\r\n+        for (int i = 0; i < 9; i++) {\r\n+            makePawn(0,6,i);\r\n+            makePawn(1,2,i);\r\n+        }\r\n+        makeRook(1,1,1);\r\n+        makeBishop(1,1,7);\r\n+        makeLancer(1,0,0);\r\n+        makeLancer(1,0,8);\r\n+        makeKnight(1,0,1);\r\n+        makeKnight(1,0,7);\r\n+        makeSilverGeneral(1,0,2);\r\n+        makeSilverGeneral(1,0,6);\r\n+        makeGoldenGeneral(1,0,3);\r\n+        makeGoldenGeneral(1,0,5);\r\n+        makeKing(1,0,4);\r\n+\r\n+        makeRook(0,7,7);\r\n+        makeBishop(0,7,1);\r\n+        makeLancer(0,8,0);\r\n+        makeLancer(0,8,8);\r\n+        makeKnight(0,8,1);\r\n+        makeKnight(0,8,7);\r\n+        makeSilverGeneral(0,8,2);\r\n+        makeSilverGeneral(0,8,6);\r\n+        makeGoldenGeneral(0,8,3);\r\n+        makeGoldenGeneral(0,8,5);\r\n+        makeKing(0,8,4);\r\n+    }\r\n+    public void pieceUpgrade(Space p) {\r\n+        System.out.println(\"UPGRADE TIME!\");\r\n+    }\r\n+    public void pieceCreationLog(int owner, int x, int y) {\r\n+        if (owner == 0) {\r\n+            whitePiecesPositions.add(new Coordinates(x,y));\r\n+        } else if (owner == 1) {\r\n+            blackPiecesPositions.add(new Coordinates(x,y));\r\n+        }\r\n     }\r\n-\r\n-\r\n-    */\r\n-\r\n-\r\n }\r"
  },
  {
    "sha": "d9feb35ca28e83489e4138fe3383a9532eec7543",
    "filename": "Coordinates.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Coordinates.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Coordinates.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Coordinates.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -0,0 +1,16 @@\n+public class Coordinates {\r\n+    private int a;\r\n+    private int b;\r\n+\r\n+    public Coordinates(int partA, int partB) {\r\n+        a = partA;\r\n+        b = partB;\r\n+    }\r\n+    public int firstHalf() {\r\n+        return a;\r\n+    }\r\n+    public int secondHalf() {\r\n+        return b;\r\n+    }\r\n+\r\n+}\r"
  },
  {
    "sha": "e73cf018ef3b11f28dc8e9cec87b0011511c3d2f",
    "filename": "Dvojice.java",
    "status": "removed",
    "additions": 0,
    "deletions": 17,
    "changes": 17,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/Dvojice.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/Dvojice.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Dvojice.java?ref=2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb",
    "patch": "@@ -1,17 +0,0 @@\n-//tato třída slouží k uložení dvojice souřadnic pro jednoduché porovnání v funkci moveTo() ve třídě board\r\n-\r\n-public class Dvojice {\r\n-    private int a;\r\n-    private int b;\r\n-\r\n-    public Dvojice(int prvekA, int prvekB) {\r\n-        a = prvekA;\r\n-        b = prvekB;\r\n-    }\r\n-    public int firstHalf() {\r\n-        return a;\r\n-    }\r\n-    public int secondHalf() {\r\n-        return b;\r\n-    }\r\n-}\r"
  },
  {
    "sha": "db8613cd2e50edf0831cad31b5806cfc0b1fbd1a",
    "filename": "GameRules.java",
    "status": "modified",
    "additions": 7,
    "deletions": 54,
    "changes": 61,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/GameRules.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/GameRules.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/GameRules.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,68 +1,21 @@\n-//třída se stará o dodržení pravidel\r\n+import java.util.ArrayList;\r\n \r\n public class GameRules {\r\n-    //private pole[][] b = new pole[8][8];\r\n-\r\n-    private pole[] moves;\r\n-    public boolean isClicked;\r\n-    public int currentTurn;\r\n-    Board gameSpace = new Board();\r\n-\r\n-    public GameRules() {\r\n-        isClicked  = false;\r\n+    int currentTurn;\r\n+    public GameRules(){\r\n+        currentTurn = 0;\r\n     }\r\n-    //generuje pole dvojic souřadnic políček, na které se daná figurka z daného pole může hýbat\r\n-    public Dvojice[] possibleMoves(int x, int y) {\r\n-        System.out.println(x + \" \" + y);\r\n-        System.out.println(gameSpace.vsechnyPole[x][y].currentPiece.toString());\r\n-\r\n-        // pokud true projít jestli v moves je momentalní políčko s x,y, pokud ano, tak moveTo z last click do daného pole\r\n-\r\n-            if (gameSpace.vsechnyPole[x][y].currentPiece.isNull == false && gameSpace.vsechnyPole[x][y].currentPiece.isTest) {\r\n-                int xLess = x - 1;\r\n-                int yLess = y - 1;\r\n-                int xMore = x + 1;\r\n-                int yMore = y + 1;\r\n-\r\n-                int[] xMoves;\r\n-                int[] yMoves;\r\n-                xMoves = new int[]{xMore, x, xLess, x, xMore, xLess, xMore, xLess};\r\n-                yMoves = new int[]{y, yMore, y, yLess, yMore, yLess, yLess, yMore};\r\n-\r\n-                Dvojice[] outcomeMoves = new Dvojice[xMoves.length];\r\n-                for (int i = 0; i < 8; i++) {\r\n-                    outcomeMoves[i] = new Dvojice(xMoves[i], yMoves[i]);\r\n-                }\r\n-                //pole[][] outcomeMoves;\r\n-                //outcomeMoves = new pole[8][2]{xMore, x, xLess, x, xMore, xLess, xMore, xLess, y, yMore, y, yLess, yMore, yLess, yLess, yMore};\r\n-                //outcomeMoves = new pole[]{gameSpace.vsechnyPole[xMore][y], gameSpace.vsechnyPole[x][yMore], gameSpace.vsechnyPole[xLess][y], gameSpace.vsechnyPole[x][yLess], gameSpace.vsechnyPole[xMore][yMore], gameSpace.vsechnyPole[xLess][yLess], gameSpace.vsechnyPole[xMore][yLess], gameSpace.vsechnyPole[xLess][yMore]};\r\n-                return outcomeMoves;\r\n-            } else if (!gameSpace.vsechnyPole[x][y].currentPiece.isNull && !gameSpace.vsechnyPole[x][y].currentPiece.isTest) {\r\n+    public boolean isMovePossible(int x, int y, ArrayList<Coordinates> p, int moves) {\r\n \r\n-                Dvojice[] outcomeMoves;\r\n-                outcomeMoves = gameSpace.vsechnyPole[x][y].currentPiece.getMoves(x, y);\r\n-                return outcomeMoves;\r\n-            } else {\r\n-                Dvojice[] prazdna = new Dvojice[0];\r\n-                return prazdna;\r\n-            }\r\n-\r\n-\r\n-    /*public void getBoard(pole[][] p) {\r\n-        //b = p;\r\n-    */}\r\n-    //funkce, která zjišťuje, zda je tah možný tím, že zkoumá, jestli jsou souřadnice daného cílového políčka součástí pole souřadic možnýhc pohybů původního políčka\r\n-    public boolean isMovePossible(int x, int y, Dvojice[] p, int moves) {\r\n         for (int i = 0; i < moves; i++) {\r\n \r\n-            if (x == p[i].firstHalf() && y == p[i].secondHalf()) {\r\n+            if (x == p.get(i).firstHalf() && y == p.get(i).secondHalf()) {\r\n                 return true;\r\n             }\r\n \r\n         }\r\n+        System.out.println(\"Move is not possible\");\r\n         return false;\r\n     }\r\n \r\n-\r\n-\r\n }\r"
  },
  {
    "sha": "3adeaf8a062bda28f0e08fb12511d6dd649ee44e",
    "filename": "GoldGeneral.java",
    "status": "removed",
    "additions": 0,
    "deletions": 45,
    "changes": 45,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/GoldGeneral.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/GoldGeneral.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/GoldGeneral.java?ref=2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb",
    "patch": "@@ -1,45 +0,0 @@\n-public class GoldGeneral extends piece{\r\n-    public GoldGeneral (int hrac) {\r\n-        super(hrac);\r\n-        isTest = false;\r\n-        numberOfMoves = 6;\r\n-        isTaken = false;\r\n-        isNull = false;\r\n-\r\n-    }\r\n-    @Override\r\n-    public Dvojice[] getMoves(int x, int y) {\r\n-        if (owner == 0) {\r\n-            Dvojice[] ara = new Dvojice[numberOfMoves];\r\n-            int Xless = x - 1;\r\n-            int Xmore = x + 1;\r\n-            int Yless = y - 1;\r\n-            int Ymore = y + 1;\r\n-            ara[0] = new Dvojice(Xless, Yless);\r\n-            ara[1] = new Dvojice(Xless, y);\r\n-            ara[2] = new Dvojice(x, Yless);\r\n-            ara[3] = new Dvojice(Xless, Ymore);\r\n-            ara[4] = new Dvojice(Xmore, y);\r\n-            ara[5] = new Dvojice(x,Ymore);\r\n-            return ara;\r\n-\r\n-        } else if (owner == 1) {\r\n-            Dvojice[] ara = new Dvojice[numberOfMoves];\r\n-            int Xmore = x + 1;\r\n-            int Xless = x - 1;\r\n-            int Yless = y - 1;\r\n-            int Ymore = y + 1;\r\n-            ara[0] = new Dvojice(Xmore, Yless);\r\n-            ara[1] = new Dvojice(Xless, y);\r\n-            ara[2] = new Dvojice(x, Yless);\r\n-            ara[3] = new Dvojice(Xmore, Ymore);\r\n-            ara[4] = new Dvojice(Xmore, y);\r\n-            ara[5] = new Dvojice(x,Ymore);\r\n-            return ara;\r\n-\r\n-        } else {\r\n-            Dvojice[] ara = new Dvojice[0];\r\n-            return ara;\r\n-        }\r\n-    }\r\n-}\r"
  },
  {
    "sha": "9483dea506902b5c043a09327a5ede1ca5d77066",
    "filename": "GoldenGeneral.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/GoldenGeneral.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/GoldenGeneral.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/GoldenGeneral.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -0,0 +1,44 @@\n+import java.util.ArrayList;\r\n+\r\n+public class GoldenGeneral extends piece{\r\n+    public GoldenGeneral(int player, int xCor, int yCor) {\r\n+        super(player, xCor, yCor);\r\n+    }\r\n+    @Override\r\n+    public String getType() {\r\n+        return \"gold\";\r\n+    }\r\n+    @Override\r\n+    public ArrayList<Coordinates> getMoves(int x, int y, ArrayList<Coordinates> whitePositions, ArrayList<Coordinates> blackPositions) {\r\n+        if (this.getOwner() == 0) {\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n+            int Xless = x - 1;\r\n+            int Xmore = x + 1;\r\n+            int Yless = y - 1;\r\n+            int Ymore = y + 1;\r\n+            moves.add(new Coordinates(Xless, Yless));\r\n+            moves.add(new Coordinates(Xless, y));\r\n+            moves.add(new Coordinates(x, Yless));\r\n+            moves.add(new Coordinates(Xless, Ymore));\r\n+            moves.add(new Coordinates(Xmore, y));\r\n+            moves.add(new Coordinates(x,Ymore));\r\n+            moves = friendBlock(moves, whitePositions);\r\n+            return moves;\r\n+        } else if (this.getOwner() == 1) {\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n+            int Xless = x - 1;\r\n+            int Xmore = x + 1;\r\n+            int Yless = y - 1;\r\n+            int Ymore = y + 1;\r\n+            moves.add(new Coordinates(Xmore, Yless));\r\n+            moves.add(new Coordinates(Xless, y));\r\n+            moves.add(new Coordinates(x, Yless));\r\n+            moves.add(new Coordinates(Xmore, Ymore));\r\n+            moves.add(new Coordinates(Xmore, y));\r\n+            moves.add(new Coordinates(x,Ymore));\r\n+            moves = friendBlock(moves, blackPositions);\r\n+            return moves;\r\n+        }\r\n+        return null;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "b0bbd953be7845db14fdf996034ed432744a88f1",
    "filename": "Graphics.java",
    "status": "modified",
    "additions": 11,
    "deletions": 125,
    "changes": 136,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Graphics.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Graphics.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Graphics.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,148 +1,34 @@\n import javax.swing.*;\r\n import java.awt.*;\r\n-import java.awt.event.ActionEvent;\r\n-import java.awt.event.ActionListener;\r\n \r\n-//klíčová a hlavní třída, stará se o zobrozování věci na JPanel plocha, spravuje tlačitka na obrazovce a prozatím zde má public static void main\r\n public class Graphics {\r\n-    GameRules g = new GameRules();\r\n-    JButton vsechnyButtons[][] = new TheButtons[9][9];\r\n \r\n-    JFrame plocha = new JFrame(\"Hrací plocha\");\r\n+    JFrame playspace = new JFrame(\"Playing board\");\r\n \r\n-    Dvojice[] moveList = null;\r\n-\r\n-    int stareX;\r\n-    int stareY;\r\n+    public Graphics() {\r\n+        Board board = new Board();\r\n+        playspace.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n+        playspace.setSize(800, 800);\r\n+        playspace.setLocationRelativeTo(null);\r\n+        playspace.setLayout(new GridLayout(9, 9));\r\n \r\n \r\n-    public Graphics() {\r\n-        g.currentTurn = 0;\r\n-        //generování figurek\r\n-        g.gameSpace.vsechnyPole[4][4].currentPiece = new testPiece(1);\r\n-        g.gameSpace.vsechnyPole[4][4].whereAmI();\r\n-        g.gameSpace.vsechnyPole[5][5].currentPiece = new testPiece(0);\r\n-        g.gameSpace.vsechnyPole[5][5].whereAmI();\r\n-        //nastavení JPanelu plocha\r\n-        plocha.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n-        plocha.setSize(800, 800);\r\n-        plocha.setLocationRelativeTo(null);\r\n-        plocha.setLayout(new GridLayout(9, 9));\r\n \r\n         for (int i = 0; i < 9; i++) {\r\n             for (int j = 0; j < 9; j++) {\r\n                 int l = i + 1;\r\n                 int k = j + 1;\r\n-\r\n-\r\n-                //vytvoří se 81 tlačítek, která jsou rozmístěna na plochu v 9x9 síti\r\n-                TheButtons buttons = new TheButtons(i, j);\r\n-                vsechnyButtons[i][j] = buttons;\r\n-                plocha.add(vsechnyButtons[i][j]);\r\n-                //System.out.println(buttons.x + \" \" + buttons.y);\r\n-                //click event tlačítka\r\n-                buttons.addActionListener(new ActionListener() {\r\n-                    @Override\r\n-                    public void actionPerformed(ActionEvent e) {\r\n-\r\n-                        if (moveList != null && g.isMovePossible(buttons.x, buttons.y, moveList, g.gameSpace.vsechnyPole[stareX][stareY].currentPiece.numberOfMoves) && g.gameSpace.vsechnyPole[stareX][stareY].currentPiece.owner == g.currentTurn) {\r\n-                            g.gameSpace.moveTo(g.gameSpace.vsechnyPole[stareX][stareY].currentPiece, g.gameSpace.vsechnyPole[buttons.x][buttons.y]);\r\n-                            poleUpdate(g.gameSpace.vsechnyPole[stareX][stareY]);\r\n-                            poleUpdate(g.gameSpace.vsechnyPole[buttons.x][buttons.y]);\r\n-                            moveList = null;\r\n-                            if (g.currentTurn == 0) {\r\n-                                    g.currentTurn = 1;\r\n-\r\n-                            } else if (g.currentTurn == 1) {\r\n-                                    g.currentTurn = 0;\r\n-\r\n-                            }\r\n-                        } else if (moveList != null && !g.isMovePossible(buttons.x, buttons.y, moveList, g.gameSpace.vsechnyPole[stareX][stareY].currentPiece.numberOfMoves) && !g.gameSpace.vsechnyPole[buttons.x][buttons.y].currentPiece.isNull == true) {\r\n-                            stareX = buttons.x;\r\n-                            stareY = buttons.y;\r\n-                            moveList = g.possibleMoves(stareX, stareY);\r\n-                        } else if (moveList == null && g.gameSpace.vsechnyPole[buttons.x][buttons.y].currentPiece.isNull == false) {\r\n-                            stareX = buttons.x;\r\n-                            stareY = buttons.y;\r\n-                            moveList = g.possibleMoves(stareX, stareY);\r\n-                        }\r\n-\r\n-                        else if (g.gameSpace.vsechnyPole[buttons.x][buttons.y].currentPiece.isNull == true) {\r\n-                            moveList = null;\r\n-\r\n-                        }\r\n-\r\n-\r\n-\r\n-                    }\r\n-                });\r\n-\r\n+                playspace.add(board.allButtons[i][j]);\r\n             }\r\n         }\r\n-        poleUpdate(g.gameSpace.vsechnyPole[4][4]);\r\n-        poleUpdate(g.gameSpace.vsechnyPole[5][5]);\r\n-        makePawn(1,1,1);\r\n-        makePawn(7,7,0);\r\n-        makeKnight(1,4,1);\r\n-        makeSilverGeneral(2,2,0);\r\n-        makeSilverGeneral(2,8,1);\r\n-        makeGoldGeneral(3,3, 1);\r\n-        plocha.setVisible(true);\r\n \r\n-        /*System.out.println(g.gameSpace.vsechnyPole[4][4].currentPiece.owner);\r\n-        System.out.println(g.gameSpace.vsechnyPole[5][5].currentPiece.owner);\r\n-        System.out.println(g.currentTurn);\r\n-        */\r\n+        playspace.setVisible(true);\r\n \r\n-\r\n-    }\r\n-    //kontroluje zda má pole figurku, pokud ano tak ji zobrazí\r\n-    public void poleUpdate(pole p) {\r\n-        int x = p.coorX - 1;\r\n-        int y = p.coorY - 1;\r\n-\r\n-        if (p.currentPiece.isTest == true && !p.currentPiece.isTaken) {\r\n-            vsechnyButtons[x][y].setBackground(Color.BLACK);\r\n-            vsechnyButtons[x][y].setOpaque(true);\r\n-        } else if (p.currentPiece.isNull == true) {\r\n-            vsechnyButtons[x][y].setBackground(Color.RED);\r\n-            vsechnyButtons[x][y].setOpaque(true);\r\n-        } else if (p.currentPiece.numberOfMoves == 2) {\r\n-            vsechnyButtons[x][y].setBackground(Color.DARK_GRAY);\r\n-        } else if (p.currentPiece.numberOfMoves == 5) {\r\n-            vsechnyButtons[x][y].setBackground(Color.cyan);\r\n-        }  else if (p.currentPiece.numberOfMoves == 6) {\r\n-            vsechnyButtons[x][y].setBackground(Color.magenta);\r\n-        } else {\r\n-            vsechnyButtons[x][y].setBackground(Color.BLUE);\r\n-        }\r\n-    }\r\n-\r\n-    public void makePawn(int x, int y, int owner) {\r\n-        g.gameSpace.vsechnyPole[x][y].currentPiece = new Pawn(owner);\r\n-        g.gameSpace.vsechnyPole[x][y].whereAmI();\r\n-        poleUpdate(g.gameSpace.vsechnyPole[x][y]);\r\n-    }\r\n-    public void makeKnight(int x, int y, int owner) {\r\n-        g.gameSpace.vsechnyPole[x][y].currentPiece = new Knight(owner);\r\n-        g.gameSpace.vsechnyPole[x][y].whereAmI();\r\n-        poleUpdate(g.gameSpace.vsechnyPole[x][y]);\r\n     }\r\n-    public void makeSilverGeneral(int x, int y, int owner) {\r\n-        g.gameSpace.vsechnyPole[x][y].currentPiece = new SilverGeneral(owner);\r\n-        g.gameSpace.vsechnyPole[x][y].whereAmI();\r\n-        poleUpdate(g.gameSpace.vsechnyPole[x][y]);\r\n-    }\r\n-    public void makeGoldGeneral(int x, int y, int owner) {\r\n-        g.gameSpace.vsechnyPole[x][y].currentPiece = new GoldGeneral(owner);\r\n-        g.gameSpace.vsechnyPole[x][y].whereAmI();\r\n-        poleUpdate(g.gameSpace.vsechnyPole[x][y]);\r\n-    }\r\n-\r\n     public static void main(String[] args) {\r\n-;\r\n+\r\n         Graphics gr = new Graphics();\r\n \r\n+\r\n     }\r\n }\r\n-\r"
  },
  {
    "sha": "10370accd8e520e9e850e2b758c98e4bdadecd5d",
    "filename": "King.java",
    "status": "modified",
    "additions": 26,
    "deletions": 21,
    "changes": 47,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/King.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/King.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/King.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,28 +1,33 @@\n-public class King extends piece{\r\n-    public King (int hrac) {\r\n-        super(hrac);\r\n-        isTest = false;\r\n-        numberOfMoves = 8;\r\n-        isTaken = false;\r\n-        isNull = false;\r\n+import java.util.ArrayList;\r\n \r\n+public class King extends piece{\r\n+    public King(int player, int xCor, int yCor) {\r\n+        super(player, xCor, yCor);\r\n+    }\r\n+    @Override\r\n+    public String getType() {\r\n+        return \"king\";\r\n     }\r\n     @Override\r\n-    public Dvojice[] getMoves(int x, int y) {\r\n-        int xLess = x - 1;\r\n-        int yLess = y - 1;\r\n-        int xMore = x + 1;\r\n-        int yMore = y + 1;\r\n+    public ArrayList<Coordinates> getMoves(int x, int y, ArrayList<Coordinates> whitePositions, ArrayList<Coordinates> blackPositions) {\r\n+\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n+            int Xless = x - 1;\r\n+            int Xmore = x + 1;\r\n+            int Yless = y - 1;\r\n+            int Ymore = y + 1;\r\n+            moves.add(new Coordinates(Xless, Yless));\r\n+            moves.add(new Coordinates(Xless, y));\r\n+            moves.add(new Coordinates(x, Yless));\r\n+            moves.add(new Coordinates(Xless, Ymore));\r\n+            moves.add(new Coordinates(Xmore, y));\r\n+            moves.add(new Coordinates(x,Ymore));\r\n+            moves.add(new Coordinates(Xmore,Yless));\r\n+            moves.add(new Coordinates(Xmore,Ymore));\r\n+            moves = friendBlock(moves, whitePositions);\r\n+            return moves;\r\n+\r\n \r\n-        int[] xMoves;\r\n-        int[] yMoves;\r\n-        xMoves = new int[]{xMore, x, xLess, x, xMore, xLess, xMore, xLess};\r\n-        yMoves = new int[]{y, yMore, y, yLess, yMore, yLess, yLess, yMore};\r\n \r\n-        Dvojice[] outcomeMoves = new Dvojice[xMoves.length];\r\n-        for (int i = 0; i < 8; i++) {\r\n-            outcomeMoves[i] = new Dvojice(xMoves[i], yMoves[i]);\r\n-        }\r\n-        return outcomeMoves;\r\n     }\r\n }\r"
  },
  {
    "sha": "928c091bcc33ec97741beea43791c38212e88884",
    "filename": "Knight.java",
    "status": "modified",
    "additions": 25,
    "deletions": 23,
    "changes": 48,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Knight.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Knight.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Knight.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,35 +1,37 @@\n-public class Knight extends piece{\r\n-    public Knight (int hrac) {\r\n-        super(hrac);\r\n-        isTest = false;\r\n-        numberOfMoves = 2;\r\n-        isTaken = false;\r\n-        isNull = false;\r\n+import java.util.ArrayList;\r\n \r\n+public class Knight extends piece {\r\n+    public Knight(int player, int xCor, int yCor) {\r\n+        super(player, xCor, yCor);\r\n     }\r\n+\r\n     @Override\r\n-    public Dvojice[] getMoves(int x, int y) {\r\n-        if (owner == 0) {\r\n-            Dvojice[] ara = new Dvojice[numberOfMoves];\r\n+    public String getType() {\r\n+        return \"knight\";\r\n+    }\r\n+\r\n+    ;\r\n+    @Override\r\n+    public ArrayList<Coordinates> getMoves(int x, int y, ArrayList<Coordinates> whitePositions, ArrayList<Coordinates> blackPositions) {\r\n+        if (this.getOwner() == 0) {\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n             int newX = x - 2;\r\n             int Yless = y - 1;\r\n             int Ymore = y + 1;\r\n-            ara[0] = new Dvojice(newX, Yless);\r\n-            ara[1] = new Dvojice(newX, Ymore);\r\n-            return ara;\r\n-\r\n-        } else if (owner == 1) {\r\n-            Dvojice[] ara = new Dvojice[numberOfMoves];\r\n+            moves.add(new Coordinates(newX,Yless));\r\n+            moves.add(new Coordinates(newX,Ymore));\r\n+            moves = friendBlock(moves, whitePositions);\r\n+            return moves;\r\n+        } else {\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n             int newX = x + 2;\r\n             int Yless = y - 1;\r\n             int Ymore = y + 1;\r\n-            ara[0] = new Dvojice(newX, Yless);\r\n-            ara[1] = new Dvojice(newX, Ymore);\r\n-            return ara;\r\n-\r\n-        } else {\r\n-            Dvojice[] ara = new Dvojice[0];\r\n-            return ara;\r\n+            moves.add(new Coordinates(newX,Yless));\r\n+            moves.add(new Coordinates(newX,Ymore));\r\n+            moves = friendBlock(moves, blackPositions);\r\n+            return moves;\r\n         }\r\n+\r\n     }\r\n }\r"
  },
  {
    "sha": "4be47cab48320f7e010292d20b8ea71be19e04ed",
    "filename": "Lancer.java",
    "status": "modified",
    "additions": 76,
    "deletions": 6,
    "changes": 82,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Lancer.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Lancer.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Lancer.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,10 +1,80 @@\n+import java.util.ArrayList;\r\n+\r\n public class Lancer extends piece{\r\n-    public Lancer (int hrac) {\r\n-        super(hrac);\r\n-        isTest = false;\r\n-        numberOfMoves = 2;\r\n-        isTaken = false;\r\n-        isNull = false;\r\n+    public Lancer(int player, int xCor, int yCor) {\r\n+        super(player, xCor, yCor);\r\n+    }\r\n+    @Override\r\n+    public String getType() {\r\n+        return \"lancer\";\r\n+    }\r\n+    @Override\r\n+    public ArrayList<Coordinates> getMoves(int x, int y, ArrayList<Coordinates> whitePositions, ArrayList<Coordinates> blackPositions) {\r\n+\r\n+        if (this.getOwner() == 0) {\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n+            int Xless = x - 1;\r\n+            int breaker = 0;\r\n+            if (Xless == 0) {\r\n+                moves = null;\r\n+                return  moves;\r\n+            }\r\n+            for (int i = 0; i <= Xless; i++) {\r\n+                int xAdjust = x - i - 1;\r\n+                moves.add(new Coordinates(xAdjust,y));\r\n+                for (int j = 0; j < whitePositions.size(); j++) {\r\n+                    if (whitePositions.get(j).firstHalf() == xAdjust && whitePositions.get(j).secondHalf() == y) {\r\n+                        moves.remove(i);\r\n+                        breaker = 1;\r\n+                        break;\r\n+                    }\r\n+                }\r\n+                for (int k = 0; k < blackPositions.size(); k++) {\r\n+                    if (blackPositions.get(k).firstHalf() == xAdjust && blackPositions.get(k).secondHalf() == y) {\r\n+                        breaker = 1;\r\n+                        break;\r\n+                    }\r\n+                }\r\n+                if (breaker == 1) {\r\n+                    break;\r\n+                }\r\n+            }\r\n+            moves = friendBlock(moves, whitePositions);\r\n+            System.out.println(moves.size());\r\n+            return moves;\r\n+        } else if (this.getOwner() == 1){\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n+            int Xless = 8 - x;\r\n+            int breaker = 0;\r\n+            if (Xless == 0) {\r\n+                moves = null;\r\n+                return  moves;\r\n+            }\r\n+            for (int i = 0; i < Xless; i++) {\r\n+                int xAdjust = x + i + 1;\r\n+                moves.add(new Coordinates(xAdjust,y));\r\n+                for (int j = 0; j < blackPositions.size(); j++) {\r\n+                    if (blackPositions.get(j).firstHalf() == xAdjust && blackPositions.get(j).secondHalf() == y) {\r\n+                        moves.remove(i);\r\n+                        breaker = 1;\r\n+                        break;\r\n+                    }\r\n+                }\r\n+                for (int k = 0; k < whitePositions.size(); k++) {\r\n+                    if (whitePositions.get(k).firstHalf() == xAdjust && whitePositions.get(k).secondHalf() == y) {\r\n+                        breaker = 1;\r\n+                        break;\r\n+                    }\r\n+                }\r\n+                if (breaker == 1) {\r\n \r\n+                    break;\r\n+                }\r\n+            }\r\n+            moves = friendBlock(moves, blackPositions);\r\n+            System.out.println(moves.size());\r\n+            return moves;\r\n+        }\r\n+        return null;\r\n     }\r\n }\r"
  },
  {
    "sha": "4c2b875c26363c0bba2f8d96a13c3c3b8a46e012",
    "filename": "NullPiece.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/NullPiece.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/NullPiece.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/NullPiece.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -0,0 +1,11 @@\n+public class NullPiece extends piece {\r\n+\r\n+    public NullPiece(int xCor, int yCor) {\r\n+        super(2,xCor,yCor);\r\n+\r\n+    }\r\n+    @Override\r\n+    public String getType() {\r\n+        return \"null\";\r\n+    }\r\n+}\r"
  },
  {
    "sha": "aa7cb37a3204cfe87f8ccbfb1c004b23902b9391",
    "filename": "Pawn.java",
    "status": "modified",
    "additions": 21,
    "deletions": 23,
    "changes": 44,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Pawn.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Pawn.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Pawn.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,31 +1,29 @@\n-public class Pawn extends piece {\r\n-    public Pawn (int hrac) {\r\n-        super(hrac);\r\n-        isTest = false;\r\n-        numberOfMoves = 1;\r\n-        isTaken = false;\r\n-        isNull = false;\r\n+import java.util.ArrayList;\r\n \r\n+public class Pawn extends piece{\r\n+    public Pawn(int player, int xCor, int yCor) {\r\n+        super(player,xCor,yCor);\r\n     }\r\n     @Override\r\n-    public Dvojice[] getMoves(int x, int y) {\r\n-        if (owner == 0) {\r\n-            Dvojice[] ara = new Dvojice[1];\r\n-            int newX = x - 1;\r\n-            ara[0] = new Dvojice(newX, y);\r\n-            System.out.println(\"UP\");\r\n-            return ara;\r\n-\r\n-        } else if (owner == 1) {\r\n-           Dvojice[] ara = new Dvojice[1];\r\n-           int newX = x + 1;\r\n-           ara[0] = new Dvojice(newX, y);\r\n-           System.out.println(\"DOWN\");\r\n-           return ara;\r\n+    public String getType() {\r\n+        return \"pawn\";\r\n+    }\r\n \r\n+    @Override\r\n+    public ArrayList<Coordinates> getMoves(int x, int y, ArrayList<Coordinates> whitePositions, ArrayList<Coordinates> blackPositions) {\r\n+        if (this.getOwner() == 0) {\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n+            int newX = x - 1;\r\n+            moves.add(new Coordinates(newX,y));\r\n+            moves = friendBlock(moves, whitePositions);\r\n+            return moves;\r\n         } else {\r\n-            Dvojice[] ara = new Dvojice[0];\r\n-            return ara;\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n+            int newX = x + 1;\r\n+            moves.add(new Coordinates(newX,y));\r\n+            moves = friendBlock(moves, blackPositions);\r\n+            return moves;\r\n         }\r\n+\r\n     }\r\n }\r"
  },
  {
    "sha": "0eb878968053bb87ab7cd7bc85133b3304dd3c58",
    "filename": "Rook.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Rook.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Rook.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Rook.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -0,0 +1,124 @@\n+import java.util.ArrayList;\r\n+\r\n+public class Rook extends piece{\r\n+    public Rook(int player, int xCor, int yCor) {\r\n+        super(player, xCor, yCor);\r\n+    }\r\n+    @Override\r\n+    public String getType() {\r\n+        return \"rook\";\r\n+    }\r\n+    @Override\r\n+    public ArrayList<Coordinates> getMoves(int x, int y, ArrayList<Coordinates> whitePositions, ArrayList<Coordinates> blackPositions) {\r\n+        ArrayList<Coordinates> moves =  new ArrayList<Coordinates>();;\r\n+        int northReps = x;\r\n+        int southReps = 8 - x;\r\n+        int eastReps = 8 - y;\r\n+        int westReps = y;\r\n+        int breaker = 0;\r\n+        System.out.println(\"north: \" + northReps + \" south: \" + southReps + \" west: \" + westReps + \" east: \" + eastReps);\r\n+\r\n+\r\n+        //north move\r\n+        for (int i = 0; i < northReps; i++) {\r\n+            int xAdjust = x - i - 1;\r\n+            moves.add(new Coordinates(xAdjust,y));\r\n+            for (int j = 0; j < blackPositions.size(); j++) {\r\n+                if (blackPositions.get(j).firstHalf() == xAdjust && blackPositions.get(j).secondHalf() == y) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            for (int k = 0; k < whitePositions.size(); k++) {\r\n+                if (whitePositions.get(k).firstHalf() == xAdjust && whitePositions.get(k).secondHalf() == y) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (breaker == 1) {\r\n+\r\n+                break;\r\n+            }\r\n+        }\r\n+        breaker = 0;\r\n+        //south move\r\n+        for (int i = 0; i < southReps; i++) {\r\n+            int xAdjust = x + i + 1;\r\n+            moves.add(new Coordinates(xAdjust,y));\r\n+            for (int j = 0; j < blackPositions.size(); j++) {\r\n+                if (blackPositions.get(j).firstHalf() == xAdjust && blackPositions.get(j).secondHalf() == y) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            for (int k = 0; k < whitePositions.size(); k++) {\r\n+                if (whitePositions.get(k).firstHalf() == xAdjust && whitePositions.get(k).secondHalf() == y) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (breaker == 1) {\r\n+\r\n+                break;\r\n+            }\r\n+        }\r\n+        breaker = 0;\r\n+        //west move\r\n+        for (int i = 0; i < westReps; i++) {\r\n+            int yAdjust = y - i - 1;\r\n+            moves.add(new Coordinates(x,yAdjust));\r\n+            for (int j = 0; j < blackPositions.size(); j++) {\r\n+                if (blackPositions.get(j).firstHalf() == x && blackPositions.get(j).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            for (int k = 0; k < whitePositions.size(); k++) {\r\n+                if (whitePositions.get(k).firstHalf() == x && whitePositions.get(k).secondHalf() == yAdjust) {\r\n+\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (breaker == 1) {\r\n+\r\n+                break;\r\n+            }\r\n+        }\r\n+        breaker = 0;\r\n+        //east move\r\n+        for (int i = 0; i < eastReps; i++) {\r\n+            int yAdjust = y + i + 1;\r\n+            moves.add(new Coordinates(x,yAdjust));\r\n+            for (int j = 0; j < blackPositions.size(); j++) {\r\n+                if (blackPositions.get(j).firstHalf() == x && blackPositions.get(j).secondHalf() == yAdjust) {\r\n+                    System.out.println(i + j);\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            for (int k = 0; k < whitePositions.size(); k++) {\r\n+                if (whitePositions.get(k).firstHalf() == x && whitePositions.get(k).secondHalf() == yAdjust) {\r\n+                    System.out.println(i + \" \" + k);\r\n+                    breaker = 1;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (breaker == 1) {\r\n+\r\n+                break;\r\n+            }\r\n+        }\r\n+        if (this.getOwner() == 0) {\r\n+            moves = friendBlock(moves, whitePositions);\r\n+        } else if (this.getOwner() == 1) {\r\n+            moves = friendBlock(moves, blackPositions);\r\n+        }\r\n+        return moves;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "1de981c3876717f0a0c0cb65f0c6c74a1ca7500b",
    "filename": "Shogi2.iml",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Shogi2.iml",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Shogi2.iml",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Shogi2.iml?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<module type=\"JAVA_MODULE\" version=\"4\">\r\n+  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n+    <exclude-output />\r\n+    <content url=\"file://$MODULE_DIR$\">\r\n+      <sourceFolder url=\"file://$MODULE_DIR$\" isTestSource=\"false\" />\r\n+    </content>\r\n+    <orderEntry type=\"inheritedJdk\" />\r\n+    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n+  </component>\r\n+</module>\n\\ No newline at end of file"
  },
  {
    "sha": "5a8dd3971cf706ea8d6a8d1b22ae8921967b2a5a",
    "filename": "SilverGeneral.java",
    "status": "modified",
    "additions": 29,
    "deletions": 30,
    "changes": 59,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/SilverGeneral.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/SilverGeneral.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/SilverGeneral.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,43 +1,42 @@\n-public class SilverGeneral extends piece{\r\n-    public SilverGeneral (int hrac) {\r\n-        super(hrac);\r\n-        isTest = false;\r\n-        numberOfMoves = 5;\r\n-        isTaken = false;\r\n-        isNull = false;\r\n+import java.util.ArrayList;\r\n \r\n+public class SilverGeneral extends piece{\r\n+    public SilverGeneral(int player, int xCor, int yCor) {\r\n+        super(player, xCor, yCor);\r\n+    }\r\n+    @Override\r\n+    public String getType() {\r\n+        return \"silver\";\r\n     }\r\n     @Override\r\n-    public Dvojice[] getMoves(int x, int y) {\r\n-        if (owner == 0) {\r\n-            Dvojice[] ara = new Dvojice[numberOfMoves];\r\n+    public ArrayList<Coordinates> getMoves(int x, int y, ArrayList<Coordinates> whitePositions, ArrayList<Coordinates> blackPositions) {\r\n+        if (this.getOwner() == 0) {\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n             int Xless = x - 1;\r\n             int Xmore = x + 1;\r\n             int Yless = y - 1;\r\n             int Ymore = y + 1;\r\n-            ara[0] = new Dvojice(Xless, Yless);\r\n-            ara[1] = new Dvojice(Xmore, Ymore);\r\n-            ara[2] = new Dvojice(Xmore, Yless);\r\n-            ara[3] = new Dvojice(Xless, Ymore);\r\n-            ara[4] = new Dvojice(Xless, y);\r\n-            return ara;\r\n-\r\n-        } else if (owner == 1) {\r\n-            Dvojice[] ara = new Dvojice[numberOfMoves];\r\n-            int Xmore = x + 1;\r\n+            moves.add(new Coordinates(Xmore,Yless));\r\n+            moves.add(new Coordinates(Xmore,Ymore));\r\n+            moves.add(new Coordinates(Xless,Ymore));\r\n+            moves.add(new Coordinates(Xless,Yless));\r\n+            moves.add(new Coordinates(Xless,y));\r\n+            moves = friendBlock(moves, whitePositions);\r\n+            return moves;\r\n+        } else {\r\n+            ArrayList<Coordinates> moves = new ArrayList<Coordinates>();\r\n             int Xless = x - 1;\r\n+            int Xmore = x + 1;\r\n             int Yless = y - 1;\r\n             int Ymore = y + 1;\r\n-            ara[0] = new Dvojice(Xless, Yless);\r\n-            ara[1] = new Dvojice(Xmore, Ymore);\r\n-            ara[2] = new Dvojice(Xmore, Yless);\r\n-            ara[3] = new Dvojice(Xless, Ymore);\r\n-            ara[4] = new Dvojice(Xmore, y);\r\n-            return ara;\r\n-\r\n-        } else {\r\n-            Dvojice[] ara = new Dvojice[0];\r\n-            return ara;\r\n+            moves.add(new Coordinates(Xmore,Yless));\r\n+            moves.add(new Coordinates(Xmore,Ymore));\r\n+            moves.add(new Coordinates(Xless,Ymore));\r\n+            moves.add(new Coordinates(Xless,Yless));\r\n+            moves.add(new Coordinates(Xmore,y));\r\n+            moves = friendBlock(moves, blackPositions);\r\n+            return moves;\r\n         }\r\n+\r\n     }\r\n }\r"
  },
  {
    "sha": "cc4a3f430693c6f791dbcfdc923a6c523590d740",
    "filename": "Space.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Space.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Space.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Space.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -0,0 +1,12 @@\n+public class Space {\r\n+    private piece currentPiece;\r\n+    public Space() {\r\n+\r\n+    }\r\n+    public void changePiece(piece newPiece) {\r\n+        currentPiece = newPiece;\r\n+    }\r\n+    public piece getCurrentPiece() {\r\n+        return currentPiece;\r\n+    }\r\n+}\r"
  },
  {
    "sha": "43565bef9d515a7f15b90f51f84954c57c522a9b",
    "filename": "Spaces.java",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Spaces.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/Spaces.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/Spaces.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -0,0 +1,2 @@\n+public class Spaces {\r\n+}\r"
  },
  {
    "sha": "3f8bec1b3e251e33b86eca5ddfd7169d4df6e241",
    "filename": "TheButtons.java",
    "status": "modified",
    "additions": 11,
    "deletions": 6,
    "changes": 17,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/TheButtons.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/TheButtons.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/TheButtons.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,11 +1,16 @@\n import javax.swing.*;\r\n \r\n public class TheButtons extends JButton {\r\n-    public int x;\r\n-    public int y;\r\n-\r\n-    public TheButtons(int a, int b) {\r\n-        x = a;\r\n-        y = b;\r\n+    private int partA;\r\n+    private int partB;\r\n+    public TheButtons(int first, int second) {\r\n+        partA = first;\r\n+        partB = second;\r\n+    }\r\n+    public int getA() {\r\n+        return partA;\r\n+    }\r\n+    public int getB() {\r\n+        return partB;\r\n     }\r\n }\r"
  },
  {
    "sha": "b9b78dab4d5ec0a7af2c6978749a19a41e991292",
    "filename": "nullPiece.java",
    "status": "removed",
    "additions": 0,
    "deletions": 15,
    "changes": 15,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/nullPiece.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/nullPiece.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/nullPiece.java?ref=2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb",
    "patch": "@@ -1,15 +0,0 @@\n-//prázndá figurka, která se nachází na všech prázdných polích\r\n-\r\n-public class nullPiece extends piece {\r\n-    public nullPiece() {\r\n-        super(2);\r\n-        isTest = false;\r\n-        isNull = true;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString() {\r\n-        return \"null piece\";\r\n-    }\r\n-\r\n-}\r"
  },
  {
    "sha": "ea12e1a097b4a1821fc6cec03b92a3c2f5bad74a",
    "filename": "piece.java",
    "status": "modified",
    "additions": 46,
    "deletions": 22,
    "changes": 68,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/piece.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb/piece.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/piece.java?ref=47a04513b29b441d6edfeb2a8dbfb1baa7bbb2fb",
    "patch": "@@ -1,30 +1,54 @@\n-//obecná parent třída všech figurek\r\n+import java.util.ArrayList;\r\n \r\n public class piece {\r\n-    public int owner;\r\n-    pole currentPole;\r\n-    boolean isTest;\r\n-    int x;\r\n-    int y;\r\n-    int numberOfMoves;\r\n-    String typFigurky;\r\n-    boolean isTaken;\r\n-    boolean isNull;\r\n-    Dvojice[] moves = new Dvojice[numberOfMoves];\r\n+    private int x;\r\n+    private int y;\r\n+    private int owner;\r\n \r\n-    public piece(int hrac) {\r\n-        owner = hrac;\r\n+    public piece(int player, int xCor, int yCor) {\r\n+        owner = player;\r\n+        x = xCor;\r\n+        y = yCor;\r\n     }\r\n-    public void whereIsPiece() {\r\n-        x = this.currentPole.coorX;\r\n-        y = this.currentPole.coorY;\r\n+    public void moveTo(int destinationX, int destinationY) {\r\n+        x = destinationX;\r\n+        y = destinationY;\r\n     }\r\n-    public void polePieceUpdate() {\r\n-        currentPole.currentPiece = this;\r\n+    public int getX() {\r\n+        return x;\r\n     }\r\n+    public int getY() {\r\n+        return y;\r\n+    }\r\n+    public String getType() {\r\n+        return null;\r\n+    }\r\n+    public int getOwner() {\r\n+        return owner;\r\n+    }\r\n+\r\n+    public ArrayList<Coordinates> getMoves(int x, int y, ArrayList<Coordinates> whitePositions, ArrayList<Coordinates> blackPositions) {\r\n+        return null;\r\n+    }\r\n+    public ArrayList<Coordinates> friendBlock(ArrayList<Coordinates> moves, ArrayList<Coordinates> friendlyPositions) {\r\n+        ArrayList<Coordinates> finalMoves;\r\n \r\n-   public Dvojice[] getMoves(int x, int y) {\r\n-        Dvojice[] ara = new Dvojice[0];\r\n-        return ara;\r\n-   }\r\n+        for (int i = 0; i < moves.size(); i++) {\r\n+            for (int j = 0; j < friendlyPositions.size() && i < moves.size(); j++) {\r\n+\r\n+                if (moves.get(i).firstHalf() == friendlyPositions.get(j).firstHalf() && moves.get(i).secondHalf() == friendlyPositions.get(j).secondHalf()) {\r\n+                    moves.remove(i);\r\n+                    //i = i - 1;\r\n+                    j = 0;\r\n+                    if (moves.size() == 0) {\r\n+                        break;\r\n+                    }\r\n+\r\n+                } else {\r\n+\r\n+                }\r\n+            }\r\n+        }\r\n+        return moves;\r\n+    }\r\n }\r"
  },
  {
    "sha": "b4c82a6517c334aef7a62db157247d21264b18e8",
    "filename": "pole.java",
    "status": "removed",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/pole.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/pole.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/pole.java?ref=2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb",
    "patch": "@@ -1,19 +0,0 @@\n-//třída, která reprezentuje jednotlivá políčka, visuálně je potom reprezentována tlačítky TheButtons (obou je jich 81 a jsou ve dvourozměrném poli, tedy jejich indexy se shodují)\r\n-\r\n-public class pole {\r\n-    public int coorX;\r\n-    public int coorY;\r\n-    public piece currentPiece;\r\n-\r\n-    public pole (int indexA, int indexB, piece Piece) {\r\n-        coorX = indexA;\r\n-        coorY = indexB;\r\n-        currentPiece = Piece;\r\n-    }\r\n-\r\n-    public void whereAmI() {\r\n-        this.currentPiece.currentPole = this;\r\n-    }\r\n-\r\n-\r\n-}\r"
  },
  {
    "sha": "40f0bfdbc864c300b71aff09733fe72c11cdd986",
    "filename": "testPiece.java",
    "status": "removed",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/danielz9999/Shogi/blob/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/testPiece.java",
    "raw_url": "https://github.com/danielz9999/Shogi/raw/2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb/testPiece.java",
    "contents_url": "https://api.github.com/repos/danielz9999/Shogi/contents/testPiece.java?ref=2764fe72ca7ce6da523dbc6e662ea94bf4a0d8bb",
    "patch": "@@ -1,18 +0,0 @@\n-//prozatimní testovací třída,reprezentována černým čtverečkem, která se může hýbat do všech směrů o jedno pole\r\n-\r\n-\r\n-public class testPiece extends piece {\r\n-\r\n-    public testPiece(int hrac) {\r\n-        super(hrac);\r\n-        isTest = true;\r\n-        numberOfMoves = 8;\r\n-        isTaken = false;\r\n-        isNull = false;\r\n-\r\n-    }\r\n-    @Override\r\n-    public String toString() {\r\n-        return \"test piece\";\r\n-    }\r\n-}\r"
  }
]
