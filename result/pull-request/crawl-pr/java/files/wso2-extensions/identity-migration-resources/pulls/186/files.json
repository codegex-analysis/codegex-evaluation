[
  {
    "sha": "086e4e899c492ff8987945cce6976c970b58a9bb",
    "filename": "components/org.wso2.is.migration/migration-resources/5.12.0/data/5/claim-config.xml",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/wso2-extensions/identity-migration-resources/blob/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-resources/5.12.0/data/5/claim-config.xml",
    "raw_url": "https://github.com/wso2-extensions/identity-migration-resources/raw/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-resources/5.12.0/data/5/claim-config.xml",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-migration-resources/contents/components/org.wso2.is.migration/migration-resources/5.12.0/data/5/claim-config.xml?ref=9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8",
    "patch": "@@ -0,0 +1,70 @@\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  ~\n+  -->\n+\n+<ClaimConfig>\n+    <Dialects>\n+        <Dialect dialectURI=\"http://wso2.org/claims\">\n+            <Claim>\n+                <ClaimURI>http://wso2.org/claims/roles</ClaimURI>\n+                <DisplayName>Roles</DisplayName>\n+                <AttributeID>roles</AttributeID>\n+                <Description>Roles</Description>\n+                <SupportedByDefault/>\n+                <ReadOnly />\n+            </Claim>\n+            <Claim>\n+                <ClaimURI>http://wso2.org/claims/groups</ClaimURI>\n+                <DisplayName>Groups</DisplayName>\n+                <AttributeID>groups</AttributeID>\n+                <Description>Groups</Description>\n+                <SupportedByDefault />\n+                <ReadOnly />\n+            </Claim>\n+            <Claim>\n+                <ClaimURI>http://wso2.org/claims/role</ClaimURI>\n+                <DisplayName>Roles and groups</DisplayName>\n+                <AttributeID>role</AttributeID>\n+                <Description>Include both userstore groups and internal roles</Description>\n+                <ReadOnly />\n+            </Claim>\n+        </Dialect>\n+        <Dialect dialectURI=\"urn:ietf:params:scim:schemas:core:2.0:User\">\n+            <Claim>\n+                <ClaimURI>urn:ietf:params:scim:schemas:core:2.0:User:roles.default</ClaimURI>\n+                <DisplayName>Roles</DisplayName>\n+                <AttributeID>roles</AttributeID>\n+                <Description>Roles</Description>\n+                <DisplayOrder>5</DisplayOrder>\n+                <SupportedByDefault />\n+                <MappedLocalClaim>http://wso2.org/claims/roles</MappedLocalClaim>\n+            </Claim>\n+        </Dialect>\n+        <Dialect dialectURI=\"http://wso2.org/oidc/claim\">\n+            <Claim>\n+                <ClaimURI>groups</ClaimURI>\n+                <DisplayName>User Groups</DisplayName>\n+                <AttributeID>role</AttributeID>\n+                <Description>List of group names that have been assigned to the principal. This typically will require a mapping at the application container level to application deployment roles.</Description>\n+                <DisplayOrder>12</DisplayOrder>\n+                <SupportedByDefault />\n+                <MappedLocalClaim>http://wso2.org/claims/groups</MappedLocalClaim>\n+            </Claim>\n+        </Dialect>\n+    </Dialects>\n+</ClaimConfig>"
  },
  {
    "sha": "a8295dc8251eabc62ff7ac1be5e3bc6a30b47895",
    "filename": "components/org.wso2.is.migration/migration-resources/migration-config.yaml",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/wso2-extensions/identity-migration-resources/blob/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-resources/migration-config.yaml",
    "raw_url": "https://github.com/wso2-extensions/identity-migration-resources/raw/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-resources/migration-config.yaml",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-migration-resources/contents/components/org.wso2.is.migration/migration-resources/migration-config.yaml?ref=9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8",
    "patch": "@@ -498,3 +498,10 @@ versions:\n      parameters:\n        location: \"step3\"\n        schema: \"consent\"\n+\n+   - name: \"ClaimDataMigrator\"\n+     order: 5\n+     parameters:\n+       name: \"GroupsVsRolesSeparationImprovementsClaimDataMigrator\"\n+       overrideExistingClaims: \"true\"\n+       useOwnDataFile: \"true\""
  },
  {
    "sha": "1e51accb6f83b464514e04650f6570abfac86975",
    "filename": "components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/service/ClaimDataMigrator.java",
    "status": "modified",
    "additions": 78,
    "deletions": 17,
    "changes": 95,
    "blob_url": "https://github.com/wso2-extensions/identity-migration-resources/blob/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/service/ClaimDataMigrator.java",
    "raw_url": "https://github.com/wso2-extensions/identity-migration-resources/raw/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/service/ClaimDataMigrator.java",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-migration-resources/contents/components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/service/ClaimDataMigrator.java?ref=9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8",
    "patch": "@@ -45,6 +45,7 @@\n import org.wso2.carbon.user.core.claim.inmemory.ClaimConfig;\n \n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -78,7 +79,8 @@ public void dryRun() throws MigrationClientException {\n     @Override\n     public void migrate() throws MigrationClientException {\n \n-        String filePath = Utility.getDataFilePath(Constant.CLAIM_CONFIG, getVersionConfig().getVersion());\n+        String filePath = getDataFilePath();\n+\n         try {\n             claimConfig = FileBasedClaimBuilder.buildClaimMappingsFromConfigFile(filePath);\n         } catch (IOException | XMLStreamException | UserStoreException e) {\n@@ -169,13 +171,20 @@ private void migrateClaimData(int tenantId) throws UserStoreException, ClaimMeta\n                 if (existingLocalClaimURIs.isEmpty()) {\n                     existingLocalClaimURIs = getExistingLocalClaimURIs(tenantId);\n                 }\n-                if (existingLocalClaimURIs.contains(claimURI)) {\n-                    log.warn(Constant.MIGRATION_LOG + \"Local claim: \" + claimURI +\n-                            \" already exists in the system for tenant: \" + tenantId);\n-                    continue;\n+\n+                if (existingLocalClaimURIs.contains(claimURI) && isOverrideExistingClaimEnabled()) {\n+                    log.info(Constant.MIGRATION_LOG + \"Overriding local claim: \" + claimURI + \", for the tenant: \" +\n+                            tenantId);\n+                    updateLocalClaimMapping(tenantId, primaryDomainName, claimURI, claimMapping);\n+                } else {\n+                    if (existingLocalClaimURIs.contains(claimURI)) {\n+                        log.warn(Constant.MIGRATION_LOG + \"Local claim: \" + claimURI +\n+                                \" already exists in the system for tenant: \" + tenantId);\n+                        continue;\n+                    }\n+                    addLocalClaimMapping(tenantId, primaryDomainName, claimURI, claimMapping);\n                 }\n \n-                addLocalClaimMapping(tenantId, primaryDomainName, claimURI, claimMapping);\n                 existingLocalClaimURIs.add(claimURI);\n             } else {\n                 externalClaims.put(entry.getKey(), entry.getValue());\n@@ -197,14 +206,19 @@ private void migrateClaimData(int tenantId) throws UserStoreException, ClaimMeta\n             if (existingExternalClaimURIs.get(claimDialectURI) == null) {\n                 existingExternalClaimURIs.put(claimDialectURI, getExistingExternalClaimURIs(tenantId, claimDialectURI));\n             }\n-            if (existingExternalClaimURIs.get(claimDialectURI).contains(claimURI)) {\n-                log.warn(Constant.MIGRATION_LOG + \"External claim: \" + claimURI +\n-                        \" already exists in the system for dialect: \" + claimDialectURI + \" in tenant: \" + tenantId);\n-                continue;\n-            }\n \n-            addExternalClaimMapping(tenantId, claimURI, claimDialectURI);\n-            existingExternalClaimURIs.get(claimDialectURI).add(claimURI);\n+            if (existingExternalClaimURIs.get(claimDialectURI).contains(claimURI) && isOverrideExistingClaimEnabled()) {\n+                updateExternalClaimMapping(tenantId, claimURI, claimDialectURI);\n+            } else {\n+                if (existingExternalClaimURIs.get(claimDialectURI).contains(claimURI)) {\n+                    log.warn(Constant.MIGRATION_LOG + \"External claim: \" + claimURI +\n+                            \" already exists in the system for dialect: \" + claimDialectURI + \" in tenant: \" +\n+                            tenantId);\n+                    continue;\n+                }\n+                addExternalClaimMapping(tenantId, claimURI, claimDialectURI);\n+                existingExternalClaimURIs.get(claimDialectURI).add(claimURI);\n+            }\n         }\n     }\n \n@@ -254,6 +268,19 @@ private void migrateClaimData(int tenantId) throws UserStoreException, ClaimMeta\n     private void addLocalClaimMapping(int tenantId, String primaryDomainName, String claimURI,\n                                       ClaimMapping claimMapping) throws ClaimMetadataException {\n \n+        LocalClaim localClaim = getPreparedLocalClaim(primaryDomainName, claimURI, claimMapping);\n+        localClaimDAO.addLocalClaim(localClaim, tenantId);\n+    }\n+\n+    private void updateLocalClaimMapping(int tenantId, String primaryDomainName, String claimURI,\n+                                      ClaimMapping claimMapping) throws ClaimMetadataException {\n+\n+        LocalClaim localClaim = getPreparedLocalClaim(primaryDomainName, claimURI, claimMapping);\n+        localClaimDAO.updateLocalClaim(localClaim, tenantId);\n+    }\n+\n+    private LocalClaim getPreparedLocalClaim(String primaryDomainName, String claimURI, ClaimMapping claimMapping) {\n+\n         List<AttributeMapping> mappedAttributes = new ArrayList<>();\n         if (StringUtils.isNotBlank(claimMapping.getMappedAttribute())) {\n             mappedAttributes.add(new AttributeMapping(primaryDomainName, claimMapping.getMappedAttribute()));\n@@ -285,8 +312,7 @@ private void addLocalClaimMapping(int tenantId, String primaryDomainName, String\n             claimProperties.put(ClaimConstants.REQUIRED_PROPERTY, \"true\");\n         }\n \n-        LocalClaim localClaim = new LocalClaim(claimURI, mappedAttributes, claimProperties);\n-        localClaimDAO.addLocalClaim(localClaim, tenantId);\n+        return new LocalClaim(claimURI, mappedAttributes, claimProperties);\n     }\n \n     /**\n@@ -300,9 +326,44 @@ private void addLocalClaimMapping(int tenantId, String primaryDomainName, String\n     private void addExternalClaimMapping(int tenantId, String claimURI, String claimDialectURI) throws\n             ClaimMetadataException {\n \n+        ExternalClaim externalClaim = getPreparedExternalClaim(claimURI, claimDialectURI);\n+        externalClaimDAO.addExternalClaim(externalClaim, tenantId);\n+    }\n+\n+    private void updateExternalClaimMapping(int tenantId, String claimURI, String claimDialectURI) throws\n+            ClaimMetadataException {\n+\n+        ExternalClaim externalClaim = getPreparedExternalClaim(claimURI, claimDialectURI);\n+        externalClaimDAO.updateExternalClaim(externalClaim, tenantId);\n+    }\n+\n+    private ExternalClaim getPreparedExternalClaim(String claimURI, String claimDialectURI) {\n+\n         String mappedLocalClaimURI = claimConfig.getPropertyHolder().get(claimURI)\n                 .get(ClaimConstants.MAPPED_LOCAL_CLAIM_PROPERTY);\n-        ExternalClaim externalClaim = new ExternalClaim(claimDialectURI, claimURI, mappedLocalClaimURI);\n-        externalClaimDAO.addExternalClaim(externalClaim, tenantId);\n+        return new ExternalClaim(claimDialectURI, claimURI, mappedLocalClaimURI);\n+    }\n+\n+    private String getDataFilePath() {\n+\n+        boolean isUseOwnDataFile = false;\n+        if (getMigratorConfig() != null && getMigratorConfig().getParameters() != null) {\n+            isUseOwnDataFile = Boolean.parseBoolean(getMigratorConfig().getParameters().getProperty(Constant\n+                            .ClaimDataMigratorConstants.MIGRATOR_PARAMETER_USE_OWN_DATA_FILE));\n+        }\n+\n+        return isUseOwnDataFile ?\n+                Utility.getDataFilePathWithFolderLocation(Paths.get(String.valueOf(getMigratorConfig().getOrder())),\n+                        Constant.CLAIM_CONFIG, getVersionConfig().getVersion()) :\n+                Utility.getDataFilePath(Constant.CLAIM_CONFIG, getVersionConfig().getVersion());\n+    }\n+\n+    private boolean isOverrideExistingClaimEnabled() {\n+\n+        if (getMigratorConfig() != null && getMigratorConfig().getParameters() != null) {\n+            return Boolean.parseBoolean(getMigratorConfig().getParameters().getProperty(Constant\n+                    .ClaimDataMigratorConstants.MIGRATOR_PARAMETER_OVERRIDE_EXISTING_CLAIMS));\n+        }\n+        return false;\n     }\n }"
  },
  {
    "sha": "b0779313fa8cbc91da33f0f0b0f721fb72b88a0d",
    "filename": "components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/util/Constant.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/wso2-extensions/identity-migration-resources/blob/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/util/Constant.java",
    "raw_url": "https://github.com/wso2-extensions/identity-migration-resources/raw/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/util/Constant.java",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-migration-resources/contents/components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/util/Constant.java?ref=9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8",
    "patch": "@@ -80,4 +80,10 @@\n     public static final String SERVER_SYMMETRIC_KEY = \"CryptoService.Secret\";\n     public static final String SYMMETRIC_KEY_CRYPTO_PROVIDER = \"org.wso2.carbon.crypto.provider\" +\n             \".SymmetricKeyInternalCryptoProvider\";\n+\n+    public static class ClaimDataMigratorConstants {\n+\n+        public static final String MIGRATOR_PARAMETER_USE_OWN_DATA_FILE = \"useOwnDataFile\";\n+        public static final String MIGRATOR_PARAMETER_OVERRIDE_EXISTING_CLAIMS = \"overrideExistingClaims\";\n+    }\n }"
  },
  {
    "sha": "da3e6c33156bb0d0baf30e710add6da96748a8c7",
    "filename": "components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/util/Utility.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/wso2-extensions/identity-migration-resources/blob/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/util/Utility.java",
    "raw_url": "https://github.com/wso2-extensions/identity-migration-resources/raw/9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8/components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/util/Utility.java",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-migration-resources/contents/components/org.wso2.is.migration/migration-service/src/main/java/org/wso2/carbon/is/migration/util/Utility.java?ref=9bf04a5874a8bd0b42eadbfb73e17ccfe31ffef8",
    "patch": "@@ -68,6 +68,13 @@ public static String getDataFilePath(String dataFileName, String version) {\n         return path.toString();\n     }\n \n+    public static String getDataFilePathWithFolderLocation(Path dataFileFolder, String dataFileName, String version) {\n+\n+        Path path = Paths.get(getMigrationResourceDirectoryPath(), version, Constant\n+                        .MIGRATION_RESOURCE_DATA_FILES, dataFileFolder.toString(), dataFileName);\n+        return path.toString();\n+    }\n+\n     public static String getSchemaPath(String schema, String databaseType, String location, String version) {\n \n         Path path = Paths.get(getMigrationResourceDirectoryPath(), version, Constant.MIGRATION_RESOURCE_DBSCRIPTS,"
  }
]
