[
  {
    "sha": "15b3fa455f35e575e71ab23131baf69f6ed52c6a",
    "filename": "component/org.wso2.carbon.identity.dpop/pom.xml",
    "status": "added",
    "additions": 108,
    "deletions": 0,
    "changes": 108,
    "blob_url": "https://github.com/wso2-extensions/identity-oauth-addons/blob/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/pom.xml",
    "raw_url": "https://github.com/wso2-extensions/identity-oauth-addons/raw/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/pom.xml",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-oauth-addons/contents/component/org.wso2.carbon.identity.dpop/pom.xml?ref=944845f7a853dac2fe03323f414d6da705750a41",
    "patch": "@@ -0,0 +1,108 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>identity-oauth2-extenstions</artifactId>\n+        <groupId>org.wso2.carbon.extension.identity.oauth.addons</groupId>\n+        <version>2.3.6-SNAPSHOT</version>\n+        <relativePath>../../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>org.wso2.carbon.identity.dpop</artifactId>\n+    <packaging>bundle</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.felix</groupId>\n+            <artifactId>org.apache.felix.scr.ds-annotations</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.eclipse.osgi</groupId>\n+            <artifactId>org.eclipse.osgi.services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.orbit.com.nimbusds</groupId>\n+            <artifactId>nimbus-jose-jwt</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.inbound.auth.oauth2</groupId>\n+            <artifactId>org.wso2.carbon.identity.oauth</artifactId>\n+            <version>6.4.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.inbound.auth.oauth2</groupId>\n+            <artifactId>org.wso2.carbon.identity.oauth.common</artifactId>\n+            <version>6.4.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon.identity.framework</groupId>\n+            <artifactId>org.wso2.carbon.identity.event</artifactId>\n+            <version>5.17.5</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>net.minidev</groupId>\n+            <artifactId>json-smart</artifactId>\n+            <version>2.3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.wso2.carbon</groupId>\n+            <artifactId>org.wso2.carbon.core.common</artifactId>\n+            <version>4.6.0</version>\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-scr-plugin</artifactId>\n+                <version>1.22.0</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.felix</groupId>\n+                <artifactId>maven-bundle-plugin</artifactId>\n+                <version>3.2.0</version>\n+                <extensions>true</extensions>\n+                <configuration>\n+                    <instructions>\n+                        <Bundle-SymbolicName>org.wso2.carbon.identity.dpop</Bundle-SymbolicName>\n+                        <Bundle-Name>org.wso2.carbon.identity.dpop</Bundle-Name>\n+                        <Private-Package>\n+                            org.wso2.carbon.identity.dpop.internal,\n+                        </Private-Package>\n+                        <Import-Package>\n+                            com.nimbusds.jose;version=\"${nimbusds.osgi.version.range}\",\n+                            org.osgi.framework; version=\"${osgi.framework.imp.pkg.version.range}\",\n+                            org.osgi.service.component; version=\"${osgi.service.component.imp.pkg.version.range}\",\n+                            org.wso2.carbon.identity.oauth.event; version=\"${identity.inbound.auth.oauth.exp.pkg.version}\",\n+                            org.wso2.carbon.identity.oauth2; version=\"${identity.inbound.auth.oauth.exp.pkg.version}\",\n+                            org.wso2.carbon.identity.oauth2.dto; version=\"${identity.inbound.auth.oauth.exp.pkg.version}\",\n+                            org.wso2.carbon.identity.oauth2.model; version=\"${identity.inbound.auth.oauth.exp.pkg.version}\",\n+                            org.wso2.carbon.identity.oauth2.token; version=\"${identity.inbound.auth.oauth.exp.pkg.version}\",\n+                            org.wso2.carbon.identity.oauth2.token.bindings; version=\"${identity.inbound.auth.oauth.exp.pkg.version}\"\n+                        </Import-Package>\n+                        <Export-Package>\n+                            !org.wso2.carbon.identity.dpop.internal,\n+                            org.wso2.carbon.identity.dpop.listener.*,\n+                            org.wso2.carbon.identity.dpop.util.*;\n+                            version=\"${project.version}\"\n+                        </Export-Package>\n+                        <DynamicImport-Package>*</DynamicImport-Package>\n+                    </instructions>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <properties>\n+        <nimbusds.osgi.version.range>[7.3.0,8.0.0)</nimbusds.osgi.version.range>\n+        <identity.inbound.auth.oauth.exp.pkg.version>6.4.2</identity.inbound.auth.oauth.exp.pkg.version>\n+        <osgi.framework.imp.pkg.version.range>[1.7.0, 2.0.0)</osgi.framework.imp.pkg.version.range>\n+        <osgi.service.component.imp.pkg.version.range>[1.2.0, 2.0.0)</osgi.service.component.imp.pkg.version.range>\n+    </properties>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "4e70f6c36dc09b962bb0556488b4fc41f84463f4",
    "filename": "component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/internal/DPoPServiceComponent.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/wso2-extensions/identity-oauth-addons/blob/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/internal/DPoPServiceComponent.java",
    "raw_url": "https://github.com/wso2-extensions/identity-oauth-addons/raw/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/internal/DPoPServiceComponent.java",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-oauth-addons/contents/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/internal/DPoPServiceComponent.java?ref=944845f7a853dac2fe03323f414d6da705750a41",
    "patch": "@@ -0,0 +1,31 @@\n+package org.wso2.carbon.identity.dpop.internal;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.wso2.carbon.identity.dpop.listener.OauthDPoPInterceptorHandlerProxy;\n+import org.wso2.carbon.identity.oauth.event.OAuthEventInterceptor;\n+\n+@Component(\n+        name = \"org.wso2.carbon.identity.oauth.dpop.internal.DPoPServiceComponent\",\n+        immediate = true\n+)\n+public class DPoPServiceComponent {\n+    private static final Log log = LogFactory.getLog(DPoPServiceComponent.class);\n+\n+    @Activate\n+    protected void activate(ComponentContext context) {\n+        context.getBundleContext().registerService(OAuthEventInterceptor.class, new OauthDPoPInterceptorHandlerProxy(), null);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"DPoP Interceptor is Activated\");\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deActivate(ComponentContext context) {\n+\n+    }\n+}"
  },
  {
    "sha": "42191c903c768b22a0fdc68642448cbf88c8e451",
    "filename": "component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/listener/OauthDPoPInterceptorHandlerProxy.java",
    "status": "added",
    "additions": 318,
    "deletions": 0,
    "changes": 318,
    "blob_url": "https://github.com/wso2-extensions/identity-oauth-addons/blob/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/listener/OauthDPoPInterceptorHandlerProxy.java",
    "raw_url": "https://github.com/wso2-extensions/identity-oauth-addons/raw/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/listener/OauthDPoPInterceptorHandlerProxy.java",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-oauth-addons/contents/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/listener/OauthDPoPInterceptorHandlerProxy.java?ref=944845f7a853dac2fe03323f414d6da705750a41",
    "patch": "@@ -0,0 +1,318 @@\n+package org.wso2.carbon.identity.dpop.listener;\n+\n+import com.nimbusds.jose.JOSEException;\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.JWSHeader;\n+import com.nimbusds.jose.JWSVerifier;\n+import com.nimbusds.jose.crypto.ECDSAVerifier;\n+import com.nimbusds.jose.crypto.RSASSAVerifier;\n+import com.nimbusds.jose.jwk.ECKey;\n+import com.nimbusds.jose.jwk.JWK;\n+import com.nimbusds.jose.jwk.RSAKey;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.core.handler.AbstractIdentityHandler;\n+import org.wso2.carbon.identity.core.model.IdentityEventListenerConfig;\n+import org.wso2.carbon.identity.core.util.IdentityConfigParser;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.dpop.util.DPoPConstants;\n+import org.wso2.carbon.identity.dpop.util.OuthTokenType;\n+import org.wso2.carbon.identity.oauth.common.DPoPTokenState;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth.dao.OAuthAppDO;\n+import org.wso2.carbon.identity.oauth.event.AbstractOAuthEventInterceptor;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenReqDTO;\n+import org.wso2.carbon.identity.oauth2.model.HttpRequestHeader;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinding;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import javax.ws.rs.HttpMethod;\n+import javax.xml.namespace.QName;\n+import java.security.interfaces.ECPublicKey;\n+import java.security.interfaces.RSAPublicKey;\n+import java.sql.*;\n+import java.text.ParseException;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.dpop.util.DPoPConstants.INVALID_DPOP_ERROR;\n+\n+/**\n+ * This class extends AbstractOAuthEventInterceptor and listen to oauth token related events. In this class, DPoP proof validation\n+ * will be handle for DPoP token requests\n+ */\n+public class OauthDPoPInterceptorHandlerProxy extends AbstractOAuthEventInterceptor {\n+\n+    private static final Log log = LogFactory.getLog(OauthDPoPInterceptorHandlerProxy.class);\n+    private int dPopValidity;\n+    private static final String ECDSA_ENCRYPTION = \"EC\";\n+    private static final String RSA_ENCRYPTION = \"RSA\";\n+    private boolean isRefreshRequest = false;\n+\n+    /**\n+     * This method handles dpop proof validation during pre token issuance.\n+     *\n+     * @param tokenReqDTO  OAuth2AccessTokenReqDTO.\n+     * @param tokReqMsgCtx OAuthTokenReqMessageContext.\n+     * @param params       Map of parameters.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    @Override\n+    public void onPreTokenIssue(OAuth2AccessTokenReqDTO tokenReqDTO, OAuthTokenReqMessageContext tokReqMsgCtx,\n+                                Map<String, Object> params) throws IdentityOAuth2Exception {\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Listening to the pre token issue event with the DPoP proof for the \" +\n+                    \"application: %s\", tokenReqDTO.getClientId()));\n+        }\n+        isRefreshRequest = false;\n+        String dPopProof = getDPoPHeader(tokReqMsgCtx.getOauth2AccessTokenReqDTO().getHttpRequestHeaders());\n+\n+        try {\n+            String dpopStateOfOAuthApplication = getDpopStateOfOAuthApplication(tokenReqDTO.getClientId());\n+            if (DPoPTokenState.ENABLED.toString().equalsIgnoreCase(dpopStateOfOAuthApplication)\n+                    || DPoPTokenState.MANDATORY.toString().equalsIgnoreCase(dpopStateOfOAuthApplication)) {\n+                if (!StringUtils.isBlank(dPopProof)) {\n+                    /*\n+                     * if the DPoP proof is provided then it will be handle as DPoP token request\n+                     */\n+                    if (!dPoPValidation(dPopProof, tokReqMsgCtx)) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"DPoP proof validation failed, Application ID: \" + tokenReqDTO.getClientId());\n+                        }\n+                        throw new IdentityOAuth2Exception(INVALID_DPOP_ERROR);\n+                    }\n+                } else {\n+                    if (DPoPTokenState.MANDATORY.toString().equalsIgnoreCase(dpopStateOfOAuthApplication)) {\n+                        throw new IdentityOAuth2Exception(\"DPoP Header is Required\");\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Bearer access token request received from: \" + tokenReqDTO.getClientId());\n+                    }\n+                }\n+            }\n+        } catch (InvalidOAuthClientException e) {\n+            throw new IdentityOAuth2Exception(\"Invalid OAuth Client\");\n+        }\n+    }\n+\n+    /**\n+     * This method handles DPoP proof validation during pre token renewal.\n+     *\n+     * @param tokenReqDTO  OAuth2AccessTokenReqDTO.\n+     * @param tokReqMsgCtx OAuthTokenReqMessageContext.\n+     * @param params       Map of parameters.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    @Override\n+    public void onPreTokenRenewal(OAuth2AccessTokenReqDTO tokenReqDTO, OAuthTokenReqMessageContext tokReqMsgCtx,\n+                                  Map<String, Object> params) throws IdentityOAuth2Exception {\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Listening to the pre token renewal event with the DPoP proof for the \" +\n+                    \"application: %s\", tokenReqDTO.getClientId()));\n+        }\n+        boolean isDPopBinding = false;\n+        isRefreshRequest = true;\n+        try {\n+            TokenBinding tokenBinding = getBindingFromRefreshToken(tokenReqDTO.getRefreshToken());\n+            if (\"DPoP\".equalsIgnoreCase(tokenBinding.getBindingType())) {\n+                isDPopBinding = true;\n+            }\n+\n+\n+            String dPopProof = getDPoPHeader(tokReqMsgCtx.getOauth2AccessTokenReqDTO().getHttpRequestHeaders());\n+\n+            if (isDPopBinding && !StringUtils.isBlank(dPopProof)) {\n+                /*\n+                 * if the DPoP proof is provided then it will be handle as DPoP token request\n+                 */\n+                if (!dPoPValidation(dPopProof, tokReqMsgCtx)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"DPoP proof validation failed, Application ID: \" + tokenReqDTO.getClientId());\n+                    }\n+                    throw new IdentityOAuth2Exception(INVALID_DPOP_ERROR);\n+                }\n+                if (!tokReqMsgCtx.getTokenBinding().getBindingValue().equalsIgnoreCase(tokenBinding.getBindingValue())) {\n+                    throw new IdentityOAuth2Exception(INVALID_DPOP_ERROR);\n+                }\n+\n+            } else {\n+                if (isDPopBinding) {\n+                    throw new IdentityOAuth2Exception(\"DPoP proof is required\");\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Bearer access token renewal request received from: \" + tokenReqDTO.getClientId());\n+                }\n+            }\n+        } catch (SQLException throwables) {\n+            throw new IdentityOAuth2Exception(throwables.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        IdentityEventListenerConfig identityEventListenerConfig = IdentityUtil.readEventListenerProperty\n+                (AbstractIdentityHandler.class.getName(), this.getClass().getName());\n+        return identityEventListenerConfig == null ||\n+                Boolean.parseBoolean(identityEventListenerConfig.getEnable());\n+    }\n+\n+    private boolean dPoPValidation(String dPopProof, OAuthTokenReqMessageContext tokReqMsgCtx)\n+            throws IdentityOAuth2Exception {\n+        try {\n+            Timestamp currentTimestamp = new Timestamp(new Date().getTime());\n+            SignedJWT signedJwt = SignedJWT.parse(dPopProof);\n+            JWSHeader header = signedJwt.getHeader();\n+            dPoPHeaderCheck(header);\n+            dPoPPayloadCheck(signedJwt.getJWTClaimsSet(), currentTimestamp);\n+            return isValidSignature(header.getJWK().toString(), signedJwt, tokReqMsgCtx);\n+\n+        } catch (ParseException e) {\n+            throw new IdentityOAuth2Exception(INVALID_DPOP_ERROR);\n+        } catch (JOSEException e) {\n+            throw new IdentityOAuth2Exception(e.getMessage());\n+        }\n+    }\n+\n+    private boolean isValidSignature(String jwk, SignedJWT signedJwt, OAuthTokenReqMessageContext tokReqMsgCtx)\n+            throws ParseException, JOSEException {\n+        JWK parseJwk = JWK.parse(jwk);\n+        TokenBinding tokenBinding = new TokenBinding();\n+        tokenBinding.setBindingType(DPoPConstants.DPOP_TOKEN_TYPE);\n+        boolean validSignature = false;\n+\n+        if (ECDSA_ENCRYPTION.equalsIgnoreCase(String.valueOf(parseJwk.getKeyType()))) {\n+            ECKey ecKey = (ECKey) parseJwk;\n+            ECPublicKey ecPublicKey = ecKey.toECPublicKey();\n+            validSignature = verifySignatureWithPublicKey(new ECDSAVerifier(ecPublicKey), signedJwt);\n+            if (validSignature) {\n+                String publicKey = computeThumbprintOfKey(ecKey);\n+                tokenBinding.setBindingValue(publicKey);\n+                tokenBinding.setBindingReference(DigestUtils.md5Hex(publicKey));\n+            }\n+        } else if (RSA_ENCRYPTION.equalsIgnoreCase(String.valueOf(parseJwk.getKeyType()))) {\n+            RSAKey rsaKey = (RSAKey) parseJwk;\n+            RSAPublicKey rsaPublicKey = rsaKey.toRSAPublicKey();\n+            validSignature = verifySignatureWithPublicKey(new RSASSAVerifier(rsaPublicKey), signedJwt);\n+            if (validSignature) {\n+                String publicKey = computeThumbprintOfKey(rsaKey);\n+                tokenBinding.setBindingValue(publicKey);\n+                tokenBinding.setBindingReference(DigestUtils.md5Hex(publicKey));\n+            }\n+        }\n+        tokReqMsgCtx.setTokenBinding(tokenBinding);\n+        return validSignature;\n+    }\n+\n+    private void dPoPHeaderCheck(JWSHeader header) throws IdentityOAuth2Exception {\n+        if (header.getJWK() == null) {\n+            throw new IdentityOAuth2Exception(INVALID_DPOP_ERROR);\n+        }\n+        JWSAlgorithm algorithm = header.getAlgorithm();\n+        if (algorithm == null) {\n+            throw new IdentityOAuth2Exception(\"DPoP Proof validation failed, Encryption algorithm is not found\");\n+        }\n+        if (!DPoPConstants.DPOP_JWT_TYPE.equalsIgnoreCase(header.getType().toString())) {\n+            throw new IdentityOAuth2Exception(INVALID_DPOP_ERROR);\n+        }\n+    }\n+\n+    private String computeThumbprintOfKey(JWK rsaKey) throws JOSEException {\n+        return rsaKey.computeThumbprint().toString();\n+    }\n+\n+    private boolean verifySignatureWithPublicKey(JWSVerifier jwsVerifier, SignedJWT signedJwt) throws JOSEException {\n+        return signedJwt.verify(jwsVerifier);\n+    }\n+\n+    private void dPoPPayloadCheck(JWTClaimsSet jwtClaimsSet, Timestamp currentTimestamp) throws IdentityOAuth2Exception {\n+        if (jwtClaimsSet == null) {\n+            throw new IdentityOAuth2Exception(\"DPoP proof payload is invalid\");\n+        } else {\n+            if (jwtClaimsSet.getClaim(DPoPConstants.DPOP_HTTP_METHOD) == null || !HttpMethod.POST.equalsIgnoreCase(jwtClaimsSet.getClaim(DPoPConstants.DPOP_HTTP_METHOD).toString())) {\n+                throw new IdentityOAuth2Exception(INVALID_DPOP_ERROR);\n+            }\n+            if (jwtClaimsSet.getClaim(DPoPConstants.DPOP_HTTP_URI) == null) {\n+                throw new IdentityOAuth2Exception(INVALID_DPOP_ERROR);\n+            }\n+            if (jwtClaimsSet.getClaim(DPoPConstants.DPOP_ISSUE_AT) == null) {\n+                throw new IdentityOAuth2Exception(INVALID_DPOP_ERROR);\n+            }\n+\n+            Date issueAt = (Date) jwtClaimsSet.getClaim(DPoPConstants.DPOP_ISSUE_AT);\n+            issueAt.getTime();\n+\n+            IdentityConfigParser configParser = IdentityConfigParser.getInstance();\n+            OMElement oauthElem = configParser.getConfigElement(DPoPConstants.OAUTH_CONFIG_ELEMENT);\n+            getDPoPConfig(oauthElem);\n+            if (!isRefreshRequest && (((currentTimestamp.getTime() - issueAt.getTime()) / 1000) > dPopValidity)) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"DPoP Proof expired\");\n+                }\n+                throw new IdentityOAuth2Exception(\"Expired DPoP Proof\");\n+            }\n+        }\n+    }\n+\n+    private void getDPoPConfig(OMElement oauthElem) {\n+        OMElement dPopConfigElem = oauthElem\n+                .getFirstChildWithName(getQNameWithIdentityNS(DPoPConstants.DPOP_CONFIG_ELEMENT));\n+        if (dPopConfigElem != null) {\n+            OMElement dpopHeaderValidity =\n+                    dPopConfigElem.getFirstChildWithName(getQNameWithIdentityNS(DPoPConstants.DPOP_CONFIG_HEADER_VALIDITY));\n+            if (dpopHeaderValidity != null && StringUtils.isNotBlank(dpopHeaderValidity.getText())) {\n+                dPopValidity = Integer.parseInt(dpopHeaderValidity.getText().trim());\n+                return;\n+            }\n+        }\n+        dPopValidity = 60;\n+    }\n+\n+    private QName getQNameWithIdentityNS(String localPart) {\n+        return new QName(IdentityCoreConstants.IDENTITY_DEFAULT_NAMESPACE, localPart);\n+    }\n+\n+    private String getDPoPHeader(HttpRequestHeader[] httpRequestHeaders) {\n+        for (HttpRequestHeader httpRequestHeader : httpRequestHeaders) {\n+            if (OuthTokenType.DPOP.name().equalsIgnoreCase(httpRequestHeader.getName())) {\n+                return httpRequestHeader.getValue()[0];\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private TokenBinding getBindingFromRefreshToken(String refreshToken) throws IdentityOAuth2Exception, SQLException {\n+        //   AccessTokenDO accessTokenDO = OAuth2Util.findAccessToken(refreshToken, false);\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        PreparedStatement prepStmt = null;\n+        ResultSet resultSet = null;\n+        String sql = \"SELECT TOKEN_BINDING_TYPE,TOKEN_BINDING_VALUE FROM IDN_OAUTH2_TOKEN_BINDING \" +\n+                \"WHERE TOKEN_BINDING_REF = (SELECT TOKEN_BINDING_REF \" +\n+                \"FROM IDN_OAUTH2_ACCESS_TOKEN WHERE REFRESH_TOKEN = ?)\";\n+        prepStmt = connection.prepareStatement(sql);\n+        prepStmt.setString(1, refreshToken);\n+        TokenBinding tokenBinding = new TokenBinding();\n+        resultSet = prepStmt.executeQuery();\n+        while (resultSet.next()) {\n+            tokenBinding.setBindingType(resultSet.getString(1));\n+            tokenBinding.setBindingValue(resultSet.getString(2));\n+        }\n+        return tokenBinding;\n+    }\n+\n+    private String getDpopStateOfOAuthApplication(String consumerKey) throws InvalidOAuthClientException,\n+            IdentityOAuth2Exception {\n+\n+        OAuthAppDO authAppDO = OAuth2Util.getAppInformationByClientId(consumerKey);\n+        String appState = authAppDO.getState();\n+        return authAppDO.getDpopState() != null ? authAppDO.getDpopState() : DPoPTokenState.DISABLED.toString();\n+    }\n+}"
  },
  {
    "sha": "c1575ea2a1fe9fa08cfafd0608b0d7e96b2012c9",
    "filename": "component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/util/DPoPConstants.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/wso2-extensions/identity-oauth-addons/blob/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/util/DPoPConstants.java",
    "raw_url": "https://github.com/wso2-extensions/identity-oauth-addons/raw/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/util/DPoPConstants.java",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-oauth-addons/contents/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/util/DPoPConstants.java?ref=944845f7a853dac2fe03323f414d6da705750a41",
    "patch": "@@ -0,0 +1,13 @@\n+package org.wso2.carbon.identity.dpop.util;\n+\n+public class DPoPConstants {\n+    public static final String OAUTH_CONFIG_ELEMENT = \"OAuth\";\n+    public static final String DPOP_CONFIG_ELEMENT = \"DPoPConfig\";\n+    public static final String DPOP_CONFIG_HEADER_VALIDITY = \"HeaderValidity\";\n+    public static final String DPOP_ISSUE_AT = \"iat\";\n+    public static final String DPOP_HTTP_URI = \"htu\";\n+    public static final String DPOP_HTTP_METHOD = \"htm\";\n+    public static final String DPOP_JWT_TYPE = \"dpop+jwt\";\n+    public static final String DPOP_TOKEN_TYPE = \"DPoP\";\n+    public static final String INVALID_DPOP_ERROR = \"Invalid DPoP Proof\";\n+}"
  },
  {
    "sha": "a857eeb3022c440186b1b5913031566d8ea1d6a1",
    "filename": "component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/util/OuthTokenType.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/wso2-extensions/identity-oauth-addons/blob/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/util/OuthTokenType.java",
    "raw_url": "https://github.com/wso2-extensions/identity-oauth-addons/raw/944845f7a853dac2fe03323f414d6da705750a41/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/util/OuthTokenType.java",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-oauth-addons/contents/component/org.wso2.carbon.identity.dpop/src/main/java/org/wso2/carbon/identity/dpop/util/OuthTokenType.java?ref=944845f7a853dac2fe03323f414d6da705750a41",
    "patch": "@@ -0,0 +1,18 @@\n+package org.wso2.carbon.identity.dpop.util;\n+\n+public enum OuthTokenType {\n+\n+    BEARER(\"Bearer\"),\n+    DPOP(\"DPoP\");\n+\n+    private String tokenTypeName;\n+\n+    OuthTokenType(String tokenTypeName) {\n+        this.tokenTypeName = tokenTypeName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return tokenTypeName;\n+    }\n+}"
  },
  {
    "sha": "964819caead0cc4108f1da0cf0acf2ba6465f03b",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wso2-extensions/identity-oauth-addons/blob/944845f7a853dac2fe03323f414d6da705750a41/pom.xml",
    "raw_url": "https://github.com/wso2-extensions/identity-oauth-addons/raw/944845f7a853dac2fe03323f414d6da705750a41/pom.xml",
    "contents_url": "https://api.github.com/repos/wso2-extensions/identity-oauth-addons/contents/pom.xml?ref=944845f7a853dac2fe03323f414d6da705750a41",
    "patch": "@@ -38,6 +38,7 @@\n         <module>features/org.wso2.carbon.identity.oauth2.token.handler.clientauth.jwt.feature</module>\n         <module>features/org.wso2.carbon.identity.oauth2.validators.xacml.server.feature</module>\n         <module>component/org.wso2.carbon.identity.oauth2.clientauth.privilegeduser</module>\n+        <module>component/org.wso2.carbon.identity.dpop</module>\n     </modules>\n \n     <profiles>"
  }
]
