[
  {
    "sha": "694c789152677f38767d41e6f6c1149b9aa5e783",
    "filename": ".jhipster/Attachment.json",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Attachment.json",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Attachment.json",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/.jhipster/Attachment.json?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,39 @@\n+{\n+  \"name\": \"Attachment\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\",\n+        \"minlength\"\n+      ],\n+      \"fieldValidateRulesMinlength\": \"3\"\n+    },\n+    {\n+      \"fieldName\": \"file\",\n+      \"fieldType\": \"byte[]\",\n+      \"fieldTypeBlobContent\": \"any\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"ticket\",\n+      \"otherEntityRelationshipName\": \"attachment\",\n+      \"relationshipName\": \"ticket\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210307141408\",\n+  \"entityTableName\": \"attachment\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "8c131762dbec492a3793628877930621ef41989c",
    "filename": ".jhipster/Comment.json",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Comment.json",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Comment.json",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/.jhipster/Comment.json?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,46 @@\n+{\n+  \"name\": \"Comment\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"date\",\n+      \"fieldType\": \"ZonedDateTime\"\n+    },\n+    {\n+      \"fieldName\": \"text\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"comment\",\n+      \"otherEntityRelationshipName\": \"child\",\n+      \"relationshipName\": \"parent\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"user\",\n+      \"otherEntityRelationshipName\": \"comment\",\n+      \"relationshipName\": \"login\",\n+      \"otherEntityField\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"comment\",\n+      \"otherEntityRelationshipName\": \"parent\",\n+      \"relationshipName\": \"child\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210307141508\",\n+  \"entityTableName\": \"comment\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "ba5e34e3e9c967c1ac07522786e029f3bf295198",
    "filename": ".jhipster/Label.json",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Label.json",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Label.json",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/.jhipster/Label.json?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,35 @@\n+{\n+  \"name\": \"Label\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"label\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\",\n+        \"minlength\"\n+      ],\n+      \"fieldValidateRulesMinlength\": \"3\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-many\",\n+      \"otherEntityName\": \"ticket\",\n+      \"otherEntityRelationshipName\": \"label\",\n+      \"relationshipName\": \"ticket\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": false\n+    }\n+  ],\n+  \"changelogDate\": \"20210307141208\",\n+  \"entityTableName\": \"label\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "1cf1192ab455f1a829acee0a3bb2c70eec723717",
    "filename": ".jhipster/Project.json",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Project.json",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Project.json",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/.jhipster/Project.json?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,21 @@\n+{\n+  \"name\": \"Project\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"name\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210307141108\",\n+  \"entityTableName\": \"project\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "2b03f5f502894b5a6cd3636356b2b3adb05959b7",
    "filename": ".jhipster/Ticket.json",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Ticket.json",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/.jhipster/Ticket.json",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/.jhipster/Ticket.json?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,87 @@\n+{\n+  \"name\": \"Ticket\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"title\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    },\n+    {\n+      \"fieldName\": \"description\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"dueDate\",\n+      \"fieldType\": \"LocalDate\"\n+    },\n+    {\n+      \"fieldName\": \"date\",\n+      \"fieldType\": \"ZonedDateTime\"\n+    },\n+    {\n+      \"fieldName\": \"status\",\n+      \"fieldType\": \"Status\",\n+      \"fieldValues\": \"OPEN (Open),WAITING_FOR_RESPONSE (Waiting for Customer Response),CLOSED (Closed),DUPLICATE (Duplicate),IN_PROGRESS (In Progress),REOPENED (Reopened),CANNOT_REPRODUCE (Cannot Reproduce),SOLVED (Solved),WONT_IMPLEMENT (Won't Implement),VERIFIED (Verified)\"\n+    },\n+    {\n+      \"fieldName\": \"type\",\n+      \"fieldType\": \"Type\",\n+      \"fieldValues\": \"BUG (Bug),FEATURE (Feature)\"\n+    },\n+    {\n+      \"fieldName\": \"priority\",\n+      \"fieldType\": \"Priority\",\n+      \"fieldValues\": \"HIGHEST (Highest),HIGHER (Higher),HIGH (High),NORMAL (Normal),LOW (Low),LOWER (Lower),LOWERST (Lowest)\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"attachment\",\n+      \"otherEntityRelationshipName\": \"ticket\",\n+      \"relationshipName\": \"attachment\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"project\",\n+      \"otherEntityRelationshipName\": \"ticket\",\n+      \"relationshipName\": \"project\",\n+      \"otherEntityField\": \"name\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"user\",\n+      \"otherEntityRelationshipName\": \"ticket\",\n+      \"relationshipName\": \"assignedTo\",\n+      \"otherEntityField\": \"login\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"user\",\n+      \"otherEntityRelationshipName\": \"ticket\",\n+      \"relationshipName\": \"reportedBy\",\n+      \"otherEntityField\": \"login\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-many\",\n+      \"otherEntityName\": \"label\",\n+      \"otherEntityRelationshipName\": \"ticket\",\n+      \"relationshipName\": \"label\",\n+      \"otherEntityField\": \"label\",\n+      \"ownerSide\": true\n+    }\n+  ],\n+  \"changelogDate\": \"20210307141308\",\n+  \"entityTableName\": \"ticket\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"pagination\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "f3d88b7a03e5ae6f937b70b13b5f585971e3909d",
    "filename": "bugtracker.jh",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/bugtracker.jh",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/bugtracker.jh",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/bugtracker.jh?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,77 @@\n+\n+entity Project {\n+  name String\n+}\n+\n+entity Label {\n+  label String required minlength(3)\n+}\n+\n+\n+\n+entity Ticket {\n+  title String required\n+  description String\n+  dueDate LocalDate\n+  date ZonedDateTime\n+  status Status\n+  type Type\n+  priority Priority\n+}\n+\n+entity Attachment {\n+  name String required minlength(3)\n+  file Blob\n+}\n+\n+relationship ManyToMany {\n+  Ticket{label(label)} to Label{ticket}\n+}\n+\n+relationship ManyToOne {\n+  Ticket{project(name)} to Project\n+  Ticket{assignedTo(login)} to User\n+  Ticket{reportedBy(login)} to User\n+  Comment{login} to User\n+}\n+\n+relationship OneToMany {\n+  Comment{parent} to Comment{child}\n+  Ticket to Attachment \n+}\n+\n+enum Status {\n+  OPEN(\"Open\")\n+  WAITING_FOR_RESPONSE(\"Waiting for Customer Response\")\n+  CLOSED(\"Closed\")\n+  DUPLICATE(\"Duplicate\")\n+  IN_PROGRESS(\"In Progress\")\n+  REOPENED(\"Reopened\")\n+  CANNOT_REPRODUCE(\"Cannot Reproduce\")\n+  SOLVED(\"Solved\")\n+  WONT_IMPLEMENT(\"Won't Implement\")\n+  VERIFIED(\"Verified\")\n+  \n+}\n+\n+enum Type {\n+  BUG(\"Bug\"),\n+  FEATURE(\"Feature\")\n+}\n+\n+enum Priority {\n+  HIGHEST(\"Highest\")\n+  HIGHER(\"Higher\")\n+  HIGH(\"High\")\n+  NORMAL(\"Normal\")\n+  LOW(\"Low\")\n+  LOWER(\"Lower\")\n+  LOWERST(\"Lowest\")\n+}\n+\n+entity Comment {\n+  date ZonedDateTime\n+  text String\n+}\n+\n+paginate Ticket with pagination\n\\ No newline at end of file"
  },
  {
    "sha": "18c05f936904aa89dccb6a5dea888086de627fbd",
    "filename": "src/main/java/com/seizosystems/bugtracker/config/CacheConfiguration.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/config/CacheConfiguration.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/config/CacheConfiguration.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/config/CacheConfiguration.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -47,6 +47,15 @@ public JCacheManagerCustomizer cacheManagerCustomizer() {\n             createCache(cm, com.seizosystems.bugtracker.domain.User.class.getName());\n             createCache(cm, com.seizosystems.bugtracker.domain.Authority.class.getName());\n             createCache(cm, com.seizosystems.bugtracker.domain.User.class.getName() + \".authorities\");\n+            createCache(cm, com.seizosystems.bugtracker.domain.Project.class.getName());\n+            createCache(cm, com.seizosystems.bugtracker.domain.Label.class.getName());\n+            createCache(cm, com.seizosystems.bugtracker.domain.Label.class.getName() + \".tickets\");\n+            createCache(cm, com.seizosystems.bugtracker.domain.Ticket.class.getName());\n+            createCache(cm, com.seizosystems.bugtracker.domain.Ticket.class.getName() + \".attachments\");\n+            createCache(cm, com.seizosystems.bugtracker.domain.Ticket.class.getName() + \".labels\");\n+            createCache(cm, com.seizosystems.bugtracker.domain.Attachment.class.getName());\n+            createCache(cm, com.seizosystems.bugtracker.domain.Comment.class.getName());\n+            createCache(cm, com.seizosystems.bugtracker.domain.Comment.class.getName() + \".parents\");\n             // jhipster-needle-ehcache-add-entry\n         };\n     }"
  },
  {
    "sha": "069534a6ef4dbeee45bbe4ea4d292cf4ce24b16e",
    "filename": "src/main/java/com/seizosystems/bugtracker/domain/Attachment.java",
    "status": "added",
    "additions": 130,
    "deletions": 0,
    "changes": 130,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Attachment.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Attachment.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/domain/Attachment.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,130 @@\n+package com.seizosystems.bugtracker.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Attachment.\n+ */\n+@Entity\n+@Table(name = \"attachment\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Attachment implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @NotNull\n+    @Size(min = 3)\n+    @Column(name = \"name\", nullable = false)\n+    private String name;\n+\n+    @Lob\n+    @Column(name = \"file\")\n+    private byte[] file;\n+\n+    @Column(name = \"file_content_type\")\n+    private String fileContentType;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"attachments\", allowSetters = true)\n+    private Ticket ticket;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Attachment name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public byte[] getFile() {\n+        return file;\n+    }\n+\n+    public Attachment file(byte[] file) {\n+        this.file = file;\n+        return this;\n+    }\n+\n+    public void setFile(byte[] file) {\n+        this.file = file;\n+    }\n+\n+    public String getFileContentType() {\n+        return fileContentType;\n+    }\n+\n+    public Attachment fileContentType(String fileContentType) {\n+        this.fileContentType = fileContentType;\n+        return this;\n+    }\n+\n+    public void setFileContentType(String fileContentType) {\n+        this.fileContentType = fileContentType;\n+    }\n+\n+    public Ticket getTicket() {\n+        return ticket;\n+    }\n+\n+    public Attachment ticket(Ticket ticket) {\n+        this.ticket = ticket;\n+        return this;\n+    }\n+\n+    public void setTicket(Ticket ticket) {\n+        this.ticket = ticket;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Attachment)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Attachment) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Attachment{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \", file='\" + getFile() + \"'\" +\n+            \", fileContentType='\" + getFileContentType() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "ce9b70944a62fd2c97324b9bb413b63d061cbb27",
    "filename": "src/main/java/com/seizosystems/bugtracker/domain/Comment.java",
    "status": "added",
    "additions": 158,
    "deletions": 0,
    "changes": 158,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Comment.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Comment.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/domain/Comment.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,158 @@\n+package com.seizosystems.bugtracker.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Comment.\n+ */\n+@Entity\n+@Table(name = \"comment\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Comment implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"date\")\n+    private ZonedDateTime date;\n+\n+    @Column(name = \"text\")\n+    private String text;\n+\n+    @OneToMany(mappedBy = \"child\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    private Set<Comment> parents = new HashSet<>();\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"comments\", allowSetters = true)\n+    private User login;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"parents\", allowSetters = true)\n+    private Comment child;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public ZonedDateTime getDate() {\n+        return date;\n+    }\n+\n+    public Comment date(ZonedDateTime date) {\n+        this.date = date;\n+        return this;\n+    }\n+\n+    public void setDate(ZonedDateTime date) {\n+        this.date = date;\n+    }\n+\n+    public String getText() {\n+        return text;\n+    }\n+\n+    public Comment text(String text) {\n+        this.text = text;\n+        return this;\n+    }\n+\n+    public void setText(String text) {\n+        this.text = text;\n+    }\n+\n+    public Set<Comment> getParents() {\n+        return parents;\n+    }\n+\n+    public Comment parents(Set<Comment> comments) {\n+        this.parents = comments;\n+        return this;\n+    }\n+\n+    public Comment addParent(Comment comment) {\n+        this.parents.add(comment);\n+        comment.setChild(this);\n+        return this;\n+    }\n+\n+    public Comment removeParent(Comment comment) {\n+        this.parents.remove(comment);\n+        comment.setChild(null);\n+        return this;\n+    }\n+\n+    public void setParents(Set<Comment> comments) {\n+        this.parents = comments;\n+    }\n+\n+    public User getLogin() {\n+        return login;\n+    }\n+\n+    public Comment login(User user) {\n+        this.login = user;\n+        return this;\n+    }\n+\n+    public void setLogin(User user) {\n+        this.login = user;\n+    }\n+\n+    public Comment getChild() {\n+        return child;\n+    }\n+\n+    public Comment child(Comment comment) {\n+        this.child = comment;\n+        return this;\n+    }\n+\n+    public void setChild(Comment comment) {\n+        this.child = comment;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Comment)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Comment) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Comment{\" +\n+            \"id=\" + getId() +\n+            \", date='\" + getDate() + \"'\" +\n+            \", text='\" + getText() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "f1fc9a082aa961d89b257fe07dedaf5855a49111",
    "filename": "src/main/java/com/seizosystems/bugtracker/domain/Label.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Label.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Label.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/domain/Label.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,110 @@\n+package com.seizosystems.bugtracker.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.*;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Label.\n+ */\n+@Entity\n+@Table(name = \"label\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Label implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @NotNull\n+    @Size(min = 3)\n+    @Column(name = \"label\", nullable = false)\n+    private String label;\n+\n+    @ManyToMany(mappedBy = \"labels\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    @JsonIgnore\n+    private Set<Ticket> tickets = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getLabel() {\n+        return label;\n+    }\n+\n+    public Label label(String label) {\n+        this.label = label;\n+        return this;\n+    }\n+\n+    public void setLabel(String label) {\n+        this.label = label;\n+    }\n+\n+    public Set<Ticket> getTickets() {\n+        return tickets;\n+    }\n+\n+    public Label tickets(Set<Ticket> tickets) {\n+        this.tickets = tickets;\n+        return this;\n+    }\n+\n+    public Label addTicket(Ticket ticket) {\n+        this.tickets.add(ticket);\n+        ticket.getLabels().add(this);\n+        return this;\n+    }\n+\n+    public Label removeTicket(Ticket ticket) {\n+        this.tickets.remove(ticket);\n+        ticket.getLabels().remove(this);\n+        return this;\n+    }\n+\n+    public void setTickets(Set<Ticket> tickets) {\n+        this.tickets = tickets;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Label)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Label) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Label{\" +\n+            \"id=\" + getId() +\n+            \", label='\" + getLabel() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "e3928b979382c51f32f637aea54f42e9dc947bf7",
    "filename": "src/main/java/com/seizosystems/bugtracker/domain/Project.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Project.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Project.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/domain/Project.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,74 @@\n+package com.seizosystems.bugtracker.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Project.\n+ */\n+@Entity\n+@Table(name = \"project\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Project implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"name\")\n+    private String name;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Project name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Project)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Project) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Project{\" +\n+            \"id=\" + getId() +\n+            \", name='\" + getName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "472bf3a7e7bc74a5f820ccb50c74020dcdef9493",
    "filename": "src/main/java/com/seizosystems/bugtracker/domain/Ticket.java",
    "status": "added",
    "additions": 304,
    "deletions": 0,
    "changes": 304,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Ticket.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/Ticket.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/domain/Ticket.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,304 @@\n+package com.seizosystems.bugtracker.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.*;\n+\n+import java.io.Serializable;\n+import java.time.LocalDate;\n+import java.time.ZonedDateTime;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.seizosystems.bugtracker.domain.enumeration.Status;\n+\n+import com.seizosystems.bugtracker.domain.enumeration.Type;\n+\n+import com.seizosystems.bugtracker.domain.enumeration.Priority;\n+\n+/**\n+ * A Ticket.\n+ */\n+@Entity\n+@Table(name = \"ticket\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Ticket implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @NotNull\n+    @Column(name = \"title\", nullable = false)\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @Column(name = \"due_date\")\n+    private LocalDate dueDate;\n+\n+    @Column(name = \"date\")\n+    private ZonedDateTime date;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"status\")\n+    private Status status;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"type\")\n+    private Type type;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"priority\")\n+    private Priority priority;\n+\n+    @OneToMany(mappedBy = \"ticket\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    private Set<Attachment> attachments = new HashSet<>();\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"tickets\", allowSetters = true)\n+    private Project project;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"tickets\", allowSetters = true)\n+    private User assignedTo;\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"tickets\", allowSetters = true)\n+    private User reportedBy;\n+\n+    @ManyToMany\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    @JoinTable(name = \"ticket_label\",\n+               joinColumns = @JoinColumn(name = \"ticket_id\", referencedColumnName = \"id\"),\n+               inverseJoinColumns = @JoinColumn(name = \"label_id\", referencedColumnName = \"id\"))\n+    private Set<Label> labels = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public Ticket title(String title) {\n+        this.title = title;\n+        return this;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public Ticket description(String description) {\n+        this.description = description;\n+        return this;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public LocalDate getDueDate() {\n+        return dueDate;\n+    }\n+\n+    public Ticket dueDate(LocalDate dueDate) {\n+        this.dueDate = dueDate;\n+        return this;\n+    }\n+\n+    public void setDueDate(LocalDate dueDate) {\n+        this.dueDate = dueDate;\n+    }\n+\n+    public ZonedDateTime getDate() {\n+        return date;\n+    }\n+\n+    public Ticket date(ZonedDateTime date) {\n+        this.date = date;\n+        return this;\n+    }\n+\n+    public void setDate(ZonedDateTime date) {\n+        this.date = date;\n+    }\n+\n+    public Status getStatus() {\n+        return status;\n+    }\n+\n+    public Ticket status(Status status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    public Ticket type(Type type) {\n+        this.type = type;\n+        return this;\n+    }\n+\n+    public void setType(Type type) {\n+        this.type = type;\n+    }\n+\n+    public Priority getPriority() {\n+        return priority;\n+    }\n+\n+    public Ticket priority(Priority priority) {\n+        this.priority = priority;\n+        return this;\n+    }\n+\n+    public void setPriority(Priority priority) {\n+        this.priority = priority;\n+    }\n+\n+    public Set<Attachment> getAttachments() {\n+        return attachments;\n+    }\n+\n+    public Ticket attachments(Set<Attachment> attachments) {\n+        this.attachments = attachments;\n+        return this;\n+    }\n+\n+    public Ticket addAttachment(Attachment attachment) {\n+        this.attachments.add(attachment);\n+        attachment.setTicket(this);\n+        return this;\n+    }\n+\n+    public Ticket removeAttachment(Attachment attachment) {\n+        this.attachments.remove(attachment);\n+        attachment.setTicket(null);\n+        return this;\n+    }\n+\n+    public void setAttachments(Set<Attachment> attachments) {\n+        this.attachments = attachments;\n+    }\n+\n+    public Project getProject() {\n+        return project;\n+    }\n+\n+    public Ticket project(Project project) {\n+        this.project = project;\n+        return this;\n+    }\n+\n+    public void setProject(Project project) {\n+        this.project = project;\n+    }\n+\n+    public User getAssignedTo() {\n+        return assignedTo;\n+    }\n+\n+    public Ticket assignedTo(User user) {\n+        this.assignedTo = user;\n+        return this;\n+    }\n+\n+    public void setAssignedTo(User user) {\n+        this.assignedTo = user;\n+    }\n+\n+    public User getReportedBy() {\n+        return reportedBy;\n+    }\n+\n+    public Ticket reportedBy(User user) {\n+        this.reportedBy = user;\n+        return this;\n+    }\n+\n+    public void setReportedBy(User user) {\n+        this.reportedBy = user;\n+    }\n+\n+    public Set<Label> getLabels() {\n+        return labels;\n+    }\n+\n+    public Ticket labels(Set<Label> labels) {\n+        this.labels = labels;\n+        return this;\n+    }\n+\n+    public Ticket addLabel(Label label) {\n+        this.labels.add(label);\n+        label.getTickets().add(this);\n+        return this;\n+    }\n+\n+    public Ticket removeLabel(Label label) {\n+        this.labels.remove(label);\n+        label.getTickets().remove(this);\n+        return this;\n+    }\n+\n+    public void setLabels(Set<Label> labels) {\n+        this.labels = labels;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Ticket)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Ticket) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Ticket{\" +\n+            \"id=\" + getId() +\n+            \", title='\" + getTitle() + \"'\" +\n+            \", description='\" + getDescription() + \"'\" +\n+            \", dueDate='\" + getDueDate() + \"'\" +\n+            \", date='\" + getDate() + \"'\" +\n+            \", status='\" + getStatus() + \"'\" +\n+            \", type='\" + getType() + \"'\" +\n+            \", priority='\" + getPriority() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "a795c9e10842deb7ddcef2f7d755f49efb882b93",
    "filename": "src/main/java/com/seizosystems/bugtracker/domain/enumeration/Priority.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/enumeration/Priority.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/enumeration/Priority.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/domain/enumeration/Priority.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,25 @@\n+package com.seizosystems.bugtracker.domain.enumeration;\n+\n+/**\n+ * The Priority enumeration.\n+ */\n+public enum Priority {\n+    HIGHEST(\"Highest\"),\n+    HIGHER(\"Higher\"),\n+    HIGH(\"High\"),\n+    NORMAL(\"Normal\"),\n+    LOW(\"Low\"),\n+    LOWER(\"Lower\"),\n+    LOWERST(\"Lowest\");\n+\n+    private final String value;\n+\n+\n+    Priority(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+}"
  },
  {
    "sha": "d1f9d666bfb25c23a7536b79094f50d0d13151c8",
    "filename": "src/main/java/com/seizosystems/bugtracker/domain/enumeration/Status.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/enumeration/Status.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/enumeration/Status.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/domain/enumeration/Status.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,28 @@\n+package com.seizosystems.bugtracker.domain.enumeration;\n+\n+/**\n+ * The Status enumeration.\n+ */\n+public enum Status {\n+    OPEN(\"Open\"),\n+    WAITING_FOR_RESPONSE(\"Waiting for Customer Response\"),\n+    CLOSED(\"Closed\"),\n+    DUPLICATE(\"Duplicate\"),\n+    IN_PROGRESS(\"In Progress\"),\n+    REOPENED(\"Reopened\"),\n+    CANNOT_REPRODUCE(\"Cannot Reproduce\"),\n+    SOLVED(\"Solved\"),\n+    WONT_IMPLEMENT(\"Won&#39;t Implement\"),\n+    VERIFIED(\"Verified\");\n+\n+    private final String value;\n+\n+\n+    Status(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+}"
  },
  {
    "sha": "0e467325f9fbcb0a97915c36c4cb7808a3fafd1d",
    "filename": "src/main/java/com/seizosystems/bugtracker/domain/enumeration/Type.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/enumeration/Type.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/domain/enumeration/Type.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/domain/enumeration/Type.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,20 @@\n+package com.seizosystems.bugtracker.domain.enumeration;\n+\n+/**\n+ * The Type enumeration.\n+ */\n+public enum Type {\n+    BUG(\"Bug\"),\n+    FEATURE(\"Feature\");\n+\n+    private final String value;\n+\n+\n+    Type(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+}"
  },
  {
    "sha": "bb6767091cd0a0a4033e67fafe2adc512e525466",
    "filename": "src/main/java/com/seizosystems/bugtracker/repository/AttachmentRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/AttachmentRepository.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/AttachmentRepository.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/repository/AttachmentRepository.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,14 @@\n+package com.seizosystems.bugtracker.repository;\n+\n+import com.seizosystems.bugtracker.domain.Attachment;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Attachment entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface AttachmentRepository extends JpaRepository<Attachment, Long> {\n+}"
  },
  {
    "sha": "5f54c30fc5bc248c857df63424bdfbd27c9f1de0",
    "filename": "src/main/java/com/seizosystems/bugtracker/repository/CommentRepository.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/CommentRepository.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/CommentRepository.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/repository/CommentRepository.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,19 @@\n+package com.seizosystems.bugtracker.repository;\n+\n+import com.seizosystems.bugtracker.domain.Comment;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.List;\n+\n+/**\n+ * Spring Data  repository for the Comment entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface CommentRepository extends JpaRepository<Comment, Long> {\n+\n+    @Query(\"select comment from Comment comment where comment.login.login = ?#{principal.username}\")\n+    List<Comment> findByLoginIsCurrentUser();\n+}"
  },
  {
    "sha": "bab09b8efcb8f76cf5a491c332ecf1bc23a0de68",
    "filename": "src/main/java/com/seizosystems/bugtracker/repository/LabelRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/LabelRepository.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/LabelRepository.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/repository/LabelRepository.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,14 @@\n+package com.seizosystems.bugtracker.repository;\n+\n+import com.seizosystems.bugtracker.domain.Label;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Label entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface LabelRepository extends JpaRepository<Label, Long> {\n+}"
  },
  {
    "sha": "40e57dc3b25f16955a4c5e436faa1c18d114a91f",
    "filename": "src/main/java/com/seizosystems/bugtracker/repository/ProjectRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/ProjectRepository.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/ProjectRepository.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/repository/ProjectRepository.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,14 @@\n+package com.seizosystems.bugtracker.repository;\n+\n+import com.seizosystems.bugtracker.domain.Project;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Project entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface ProjectRepository extends JpaRepository<Project, Long> {\n+}"
  },
  {
    "sha": "ccaf323cd55e8146a54be3d4eaafce3990247bf5",
    "filename": "src/main/java/com/seizosystems/bugtracker/repository/TicketRepository.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/TicketRepository.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/repository/TicketRepository.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/repository/TicketRepository.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,35 @@\n+package com.seizosystems.bugtracker.repository;\n+\n+import com.seizosystems.bugtracker.domain.Ticket;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Spring Data  repository for the Ticket entity.\n+ */\n+@Repository\n+public interface TicketRepository extends JpaRepository<Ticket, Long> {\n+\n+    @Query(\"select ticket from Ticket ticket where ticket.assignedTo.login = ?#{principal.username}\")\n+    List<Ticket> findByAssignedToIsCurrentUser();\n+\n+    @Query(\"select ticket from Ticket ticket where ticket.reportedBy.login = ?#{principal.username}\")\n+    List<Ticket> findByReportedByIsCurrentUser();\n+\n+    @Query(value = \"select distinct ticket from Ticket ticket left join fetch ticket.labels\",\n+        countQuery = \"select count(distinct ticket) from Ticket ticket\")\n+    Page<Ticket> findAllWithEagerRelationships(Pageable pageable);\n+\n+    @Query(\"select distinct ticket from Ticket ticket left join fetch ticket.labels\")\n+    List<Ticket> findAllWithEagerRelationships();\n+\n+    @Query(\"select ticket from Ticket ticket left join fetch ticket.labels where ticket.id =:id\")\n+    Optional<Ticket> findOneWithEagerRelationships(@Param(\"id\") Long id);\n+}"
  },
  {
    "sha": "cac400b02f6c27ad259c4dbf11bdbd981d1fca64",
    "filename": "src/main/java/com/seizosystems/bugtracker/web/rest/AttachmentResource.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/AttachmentResource.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/AttachmentResource.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/web/rest/AttachmentResource.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,119 @@\n+package com.seizosystems.bugtracker.web.rest;\n+\n+import com.seizosystems.bugtracker.domain.Attachment;\n+import com.seizosystems.bugtracker.repository.AttachmentRepository;\n+import com.seizosystems.bugtracker.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import javax.validation.Valid;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * REST controller for managing {@link com.seizosystems.bugtracker.domain.Attachment}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class AttachmentResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(AttachmentResource.class);\n+\n+    private static final String ENTITY_NAME = \"attachment\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final AttachmentRepository attachmentRepository;\n+\n+    public AttachmentResource(AttachmentRepository attachmentRepository) {\n+        this.attachmentRepository = attachmentRepository;\n+    }\n+\n+    /**\n+     * {@code POST  /attachments} : Create a new attachment.\n+     *\n+     * @param attachment the attachment to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new attachment, or with status {@code 400 (Bad Request)} if the attachment has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/attachments\")\n+    public ResponseEntity<Attachment> createAttachment(@Valid @RequestBody Attachment attachment) throws URISyntaxException {\n+        log.debug(\"REST request to save Attachment : {}\", attachment);\n+        if (attachment.getId() != null) {\n+            throw new BadRequestAlertException(\"A new attachment cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Attachment result = attachmentRepository.save(attachment);\n+        return ResponseEntity.created(new URI(\"/api/attachments/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /attachments} : Updates an existing attachment.\n+     *\n+     * @param attachment the attachment to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated attachment,\n+     * or with status {@code 400 (Bad Request)} if the attachment is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the attachment couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/attachments\")\n+    public ResponseEntity<Attachment> updateAttachment(@Valid @RequestBody Attachment attachment) throws URISyntaxException {\n+        log.debug(\"REST request to update Attachment : {}\", attachment);\n+        if (attachment.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Attachment result = attachmentRepository.save(attachment);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, attachment.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /attachments} : get all the attachments.\n+     *\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of attachments in body.\n+     */\n+    @GetMapping(\"/attachments\")\n+    public List<Attachment> getAllAttachments() {\n+        log.debug(\"REST request to get all Attachments\");\n+        return attachmentRepository.findAll();\n+    }\n+\n+    /**\n+     * {@code GET  /attachments/:id} : get the \"id\" attachment.\n+     *\n+     * @param id the id of the attachment to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the attachment, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/attachments/{id}\")\n+    public ResponseEntity<Attachment> getAttachment(@PathVariable Long id) {\n+        log.debug(\"REST request to get Attachment : {}\", id);\n+        Optional<Attachment> attachment = attachmentRepository.findById(id);\n+        return ResponseUtil.wrapOrNotFound(attachment);\n+    }\n+\n+    /**\n+     * {@code DELETE  /attachments/:id} : delete the \"id\" attachment.\n+     *\n+     * @param id the id of the attachment to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/attachments/{id}\")\n+    public ResponseEntity<Void> deleteAttachment(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Attachment : {}\", id);\n+        attachmentRepository.deleteById(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();\n+    }\n+}"
  },
  {
    "sha": "7690285d9782a68a5301b1dc815f672fad73a88c",
    "filename": "src/main/java/com/seizosystems/bugtracker/web/rest/CommentResource.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/CommentResource.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/CommentResource.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/web/rest/CommentResource.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,118 @@\n+package com.seizosystems.bugtracker.web.rest;\n+\n+import com.seizosystems.bugtracker.domain.Comment;\n+import com.seizosystems.bugtracker.repository.CommentRepository;\n+import com.seizosystems.bugtracker.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * REST controller for managing {@link com.seizosystems.bugtracker.domain.Comment}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class CommentResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(CommentResource.class);\n+\n+    private static final String ENTITY_NAME = \"comment\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final CommentRepository commentRepository;\n+\n+    public CommentResource(CommentRepository commentRepository) {\n+        this.commentRepository = commentRepository;\n+    }\n+\n+    /**\n+     * {@code POST  /comments} : Create a new comment.\n+     *\n+     * @param comment the comment to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new comment, or with status {@code 400 (Bad Request)} if the comment has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/comments\")\n+    public ResponseEntity<Comment> createComment(@RequestBody Comment comment) throws URISyntaxException {\n+        log.debug(\"REST request to save Comment : {}\", comment);\n+        if (comment.getId() != null) {\n+            throw new BadRequestAlertException(\"A new comment cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Comment result = commentRepository.save(comment);\n+        return ResponseEntity.created(new URI(\"/api/comments/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /comments} : Updates an existing comment.\n+     *\n+     * @param comment the comment to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated comment,\n+     * or with status {@code 400 (Bad Request)} if the comment is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the comment couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/comments\")\n+    public ResponseEntity<Comment> updateComment(@RequestBody Comment comment) throws URISyntaxException {\n+        log.debug(\"REST request to update Comment : {}\", comment);\n+        if (comment.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Comment result = commentRepository.save(comment);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, comment.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /comments} : get all the comments.\n+     *\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of comments in body.\n+     */\n+    @GetMapping(\"/comments\")\n+    public List<Comment> getAllComments() {\n+        log.debug(\"REST request to get all Comments\");\n+        return commentRepository.findAll();\n+    }\n+\n+    /**\n+     * {@code GET  /comments/:id} : get the \"id\" comment.\n+     *\n+     * @param id the id of the comment to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the comment, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/comments/{id}\")\n+    public ResponseEntity<Comment> getComment(@PathVariable Long id) {\n+        log.debug(\"REST request to get Comment : {}\", id);\n+        Optional<Comment> comment = commentRepository.findById(id);\n+        return ResponseUtil.wrapOrNotFound(comment);\n+    }\n+\n+    /**\n+     * {@code DELETE  /comments/:id} : delete the \"id\" comment.\n+     *\n+     * @param id the id of the comment to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/comments/{id}\")\n+    public ResponseEntity<Void> deleteComment(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Comment : {}\", id);\n+        commentRepository.deleteById(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();\n+    }\n+}"
  },
  {
    "sha": "2b52c00cee6583a1968cb89d261ec649e209b179",
    "filename": "src/main/java/com/seizosystems/bugtracker/web/rest/LabelResource.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/LabelResource.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/LabelResource.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/web/rest/LabelResource.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,119 @@\n+package com.seizosystems.bugtracker.web.rest;\n+\n+import com.seizosystems.bugtracker.domain.Label;\n+import com.seizosystems.bugtracker.repository.LabelRepository;\n+import com.seizosystems.bugtracker.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import javax.validation.Valid;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * REST controller for managing {@link com.seizosystems.bugtracker.domain.Label}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class LabelResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(LabelResource.class);\n+\n+    private static final String ENTITY_NAME = \"label\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final LabelRepository labelRepository;\n+\n+    public LabelResource(LabelRepository labelRepository) {\n+        this.labelRepository = labelRepository;\n+    }\n+\n+    /**\n+     * {@code POST  /labels} : Create a new label.\n+     *\n+     * @param label the label to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new label, or with status {@code 400 (Bad Request)} if the label has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/labels\")\n+    public ResponseEntity<Label> createLabel(@Valid @RequestBody Label label) throws URISyntaxException {\n+        log.debug(\"REST request to save Label : {}\", label);\n+        if (label.getId() != null) {\n+            throw new BadRequestAlertException(\"A new label cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Label result = labelRepository.save(label);\n+        return ResponseEntity.created(new URI(\"/api/labels/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /labels} : Updates an existing label.\n+     *\n+     * @param label the label to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated label,\n+     * or with status {@code 400 (Bad Request)} if the label is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the label couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/labels\")\n+    public ResponseEntity<Label> updateLabel(@Valid @RequestBody Label label) throws URISyntaxException {\n+        log.debug(\"REST request to update Label : {}\", label);\n+        if (label.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Label result = labelRepository.save(label);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, label.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /labels} : get all the labels.\n+     *\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of labels in body.\n+     */\n+    @GetMapping(\"/labels\")\n+    public List<Label> getAllLabels() {\n+        log.debug(\"REST request to get all Labels\");\n+        return labelRepository.findAll();\n+    }\n+\n+    /**\n+     * {@code GET  /labels/:id} : get the \"id\" label.\n+     *\n+     * @param id the id of the label to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the label, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/labels/{id}\")\n+    public ResponseEntity<Label> getLabel(@PathVariable Long id) {\n+        log.debug(\"REST request to get Label : {}\", id);\n+        Optional<Label> label = labelRepository.findById(id);\n+        return ResponseUtil.wrapOrNotFound(label);\n+    }\n+\n+    /**\n+     * {@code DELETE  /labels/:id} : delete the \"id\" label.\n+     *\n+     * @param id the id of the label to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/labels/{id}\")\n+    public ResponseEntity<Void> deleteLabel(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Label : {}\", id);\n+        labelRepository.deleteById(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();\n+    }\n+}"
  },
  {
    "sha": "66d1a1a65182cd4b7cc5f8fcabaccace3cbe71ef",
    "filename": "src/main/java/com/seizosystems/bugtracker/web/rest/ProjectResource.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/ProjectResource.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/ProjectResource.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/web/rest/ProjectResource.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,118 @@\n+package com.seizosystems.bugtracker.web.rest;\n+\n+import com.seizosystems.bugtracker.domain.Project;\n+import com.seizosystems.bugtracker.repository.ProjectRepository;\n+import com.seizosystems.bugtracker.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * REST controller for managing {@link com.seizosystems.bugtracker.domain.Project}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class ProjectResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(ProjectResource.class);\n+\n+    private static final String ENTITY_NAME = \"project\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final ProjectRepository projectRepository;\n+\n+    public ProjectResource(ProjectRepository projectRepository) {\n+        this.projectRepository = projectRepository;\n+    }\n+\n+    /**\n+     * {@code POST  /projects} : Create a new project.\n+     *\n+     * @param project the project to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new project, or with status {@code 400 (Bad Request)} if the project has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/projects\")\n+    public ResponseEntity<Project> createProject(@RequestBody Project project) throws URISyntaxException {\n+        log.debug(\"REST request to save Project : {}\", project);\n+        if (project.getId() != null) {\n+            throw new BadRequestAlertException(\"A new project cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Project result = projectRepository.save(project);\n+        return ResponseEntity.created(new URI(\"/api/projects/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /projects} : Updates an existing project.\n+     *\n+     * @param project the project to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated project,\n+     * or with status {@code 400 (Bad Request)} if the project is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the project couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/projects\")\n+    public ResponseEntity<Project> updateProject(@RequestBody Project project) throws URISyntaxException {\n+        log.debug(\"REST request to update Project : {}\", project);\n+        if (project.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Project result = projectRepository.save(project);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, project.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /projects} : get all the projects.\n+     *\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of projects in body.\n+     */\n+    @GetMapping(\"/projects\")\n+    public List<Project> getAllProjects() {\n+        log.debug(\"REST request to get all Projects\");\n+        return projectRepository.findAll();\n+    }\n+\n+    /**\n+     * {@code GET  /projects/:id} : get the \"id\" project.\n+     *\n+     * @param id the id of the project to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the project, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/projects/{id}\")\n+    public ResponseEntity<Project> getProject(@PathVariable Long id) {\n+        log.debug(\"REST request to get Project : {}\", id);\n+        Optional<Project> project = projectRepository.findById(id);\n+        return ResponseUtil.wrapOrNotFound(project);\n+    }\n+\n+    /**\n+     * {@code DELETE  /projects/:id} : delete the \"id\" project.\n+     *\n+     * @param id the id of the project to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/projects/{id}\")\n+    public ResponseEntity<Void> deleteProject(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Project : {}\", id);\n+        projectRepository.deleteById(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();\n+    }\n+}"
  },
  {
    "sha": "ee3d42d52cfa186f72a7f1726b8411d85bbd5733",
    "filename": "src/main/java/com/seizosystems/bugtracker/web/rest/TicketResource.java",
    "status": "added",
    "additions": 134,
    "deletions": 0,
    "changes": 134,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/TicketResource.java",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/java/com/seizosystems/bugtracker/web/rest/TicketResource.java",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/java/com/seizosystems/bugtracker/web/rest/TicketResource.java?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,134 @@\n+package com.seizosystems.bugtracker.web.rest;\n+\n+import com.seizosystems.bugtracker.domain.Ticket;\n+import com.seizosystems.bugtracker.repository.TicketRepository;\n+import com.seizosystems.bugtracker.web.rest.errors.BadRequestAlertException;\n+\n+import io.github.jhipster.web.util.HeaderUtil;\n+import io.github.jhipster.web.util.PaginationUtil;\n+import io.github.jhipster.web.util.ResponseUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import javax.validation.Valid;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * REST controller for managing {@link com.seizosystems.bugtracker.domain.Ticket}.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+@Transactional\n+public class TicketResource {\n+\n+    private final Logger log = LoggerFactory.getLogger(TicketResource.class);\n+\n+    private static final String ENTITY_NAME = \"ticket\";\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    private final TicketRepository ticketRepository;\n+\n+    public TicketResource(TicketRepository ticketRepository) {\n+        this.ticketRepository = ticketRepository;\n+    }\n+\n+    /**\n+     * {@code POST  /tickets} : Create a new ticket.\n+     *\n+     * @param ticket the ticket to create.\n+     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new ticket, or with status {@code 400 (Bad Request)} if the ticket has already an ID.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PostMapping(\"/tickets\")\n+    public ResponseEntity<Ticket> createTicket(@Valid @RequestBody Ticket ticket) throws URISyntaxException {\n+        log.debug(\"REST request to save Ticket : {}\", ticket);\n+        if (ticket.getId() != null) {\n+            throw new BadRequestAlertException(\"A new ticket cannot already have an ID\", ENTITY_NAME, \"idexists\");\n+        }\n+        Ticket result = ticketRepository.save(ticket);\n+        return ResponseEntity.created(new URI(\"/api/tickets/\" + result.getId()))\n+            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code PUT  /tickets} : Updates an existing ticket.\n+     *\n+     * @param ticket the ticket to update.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated ticket,\n+     * or with status {@code 400 (Bad Request)} if the ticket is not valid,\n+     * or with status {@code 500 (Internal Server Error)} if the ticket couldn't be updated.\n+     * @throws URISyntaxException if the Location URI syntax is incorrect.\n+     */\n+    @PutMapping(\"/tickets\")\n+    public ResponseEntity<Ticket> updateTicket(@Valid @RequestBody Ticket ticket) throws URISyntaxException {\n+        log.debug(\"REST request to update Ticket : {}\", ticket);\n+        if (ticket.getId() == null) {\n+            throw new BadRequestAlertException(\"Invalid id\", ENTITY_NAME, \"idnull\");\n+        }\n+        Ticket result = ticketRepository.save(ticket);\n+        return ResponseEntity.ok()\n+            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, ticket.getId().toString()))\n+            .body(result);\n+    }\n+\n+    /**\n+     * {@code GET  /tickets} : get all the tickets.\n+     *\n+     * @param pageable the pagination information.\n+     * @param eagerload flag to eager load entities from relationships (This is applicable for many-to-many).\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of tickets in body.\n+     */\n+    @GetMapping(\"/tickets\")\n+    public ResponseEntity<List<Ticket>> getAllTickets(Pageable pageable, @RequestParam(required = false, defaultValue = \"false\") boolean eagerload) {\n+        log.debug(\"REST request to get a page of Tickets\");\n+        Page<Ticket> page;\n+        if (eagerload) {\n+            page = ticketRepository.findAllWithEagerRelationships(pageable);\n+        } else {\n+            page = ticketRepository.findAll(pageable);\n+        }\n+        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);\n+        return ResponseEntity.ok().headers(headers).body(page.getContent());\n+    }\n+\n+    /**\n+     * {@code GET  /tickets/:id} : get the \"id\" ticket.\n+     *\n+     * @param id the id of the ticket to retrieve.\n+     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the ticket, or with status {@code 404 (Not Found)}.\n+     */\n+    @GetMapping(\"/tickets/{id}\")\n+    public ResponseEntity<Ticket> getTicket(@PathVariable Long id) {\n+        log.debug(\"REST request to get Ticket : {}\", id);\n+        Optional<Ticket> ticket = ticketRepository.findOneWithEagerRelationships(id);\n+        return ResponseUtil.wrapOrNotFound(ticket);\n+    }\n+\n+    /**\n+     * {@code DELETE  /tickets/:id} : delete the \"id\" ticket.\n+     *\n+     * @param id the id of the ticket to delete.\n+     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.\n+     */\n+    @DeleteMapping(\"/tickets/{id}\")\n+    public ResponseEntity<Void> deleteTicket(@PathVariable Long id) {\n+        log.debug(\"REST request to delete Ticket : {}\", id);\n+        ticketRepository.deleteById(id);\n+        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();\n+    }\n+}"
  },
  {
    "sha": "b95ba9198737c032bc7b0ff229d95984e0004699",
    "filename": "src/main/resources/config/liquibase/changelog/20210307141108_added_entity_Project.xml",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141108_added_entity_Project.xml",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141108_added_entity_Project.xml",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/resources/config/liquibase/changelog/20210307141108_added_entity_Project.xml?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+        <property name=\"autoIncrement\" value=\"true\"/>\n+\n+    <!--\n+        Added the entity Project.\n+    -->\n+    <changeSet id=\"20210307141108-1\" author=\"jhipster\">\n+        <createTable tableName=\"project\">\n+            <column name=\"id\" type=\"bigint\" autoIncrement=\"${autoIncrement}\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"name\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+    </changeSet>\n+\n+    <changeSet id=\"20210307141108-1-relations\" author=\"jhipster\">\n+\n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210307141108-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/project.csv\"\n+                  separator=\";\"\n+                  tableName=\"project\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"name\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "49494142f17538c4ddde78dc940e2a8e07b27701",
    "filename": "src/main/resources/config/liquibase/changelog/20210307141208_added_entity_Label.xml",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141208_added_entity_Label.xml",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141208_added_entity_Label.xml",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/resources/config/liquibase/changelog/20210307141208_added_entity_Label.xml?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+        <property name=\"autoIncrement\" value=\"true\"/>\n+\n+    <!--\n+        Added the entity Label.\n+    -->\n+    <changeSet id=\"20210307141208-1\" author=\"jhipster\">\n+        <createTable tableName=\"label\">\n+            <column name=\"id\" type=\"bigint\" autoIncrement=\"${autoIncrement}\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"label\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+    </changeSet>\n+\n+    <changeSet id=\"20210307141208-1-relations\" author=\"jhipster\">\n+\n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210307141208-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/label.csv\"\n+                  separator=\";\"\n+                  tableName=\"label\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"label\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "1dae8b57336cf7ea90cbcd60bf77afdec21d3c1e",
    "filename": "src/main/resources/config/liquibase/changelog/20210307141308_added_entity_Ticket.xml",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141308_added_entity_Ticket.xml",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141308_added_entity_Ticket.xml",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/resources/config/liquibase/changelog/20210307141308_added_entity_Ticket.xml?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,95 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+        <property name=\"autoIncrement\" value=\"true\"/>\n+\n+    <!--\n+        Added the entity Ticket.\n+    -->\n+    <changeSet id=\"20210307141308-1\" author=\"jhipster\">\n+        <createTable tableName=\"ticket\">\n+            <column name=\"id\" type=\"bigint\" autoIncrement=\"${autoIncrement}\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"title\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"description\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"due_date\" type=\"date\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"date\" type=\"datetime\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"status\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"type\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"priority\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"project_id\" type=\"bigint\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"assigned_to_id\" type=\"bigint\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"reported_by_id\" type=\"bigint\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+        <dropDefaultValue tableName=\"ticket\" columnName=\"date\" columnDataType=\"datetime\"/>\n+    </changeSet>\n+\n+    <changeSet id=\"20210307141308-1-relations\" author=\"jhipster\">\n+\n+        <createTable tableName=\"ticket_label\">\n+            <column name=\"label_id\" type=\"bigint\">\n+                <constraints nullable=\"false\"/>\n+            </column>\n+            <column name=\"ticket_id\" type=\"bigint\">\n+                <constraints nullable=\"false\"/>\n+            </column>\n+        </createTable>\n+\n+        <addPrimaryKey columnNames=\"ticket_id, label_id\" tableName=\"ticket_label\"/>\n+        \n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210307141308-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/ticket.csv\"\n+                  separator=\";\"\n+                  tableName=\"ticket\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"title\" type=\"string\"/>\n+            <column name=\"description\" type=\"string\"/>\n+            <column name=\"due_date\" type=\"date\"/>\n+            <column name=\"date\" type=\"datetime\"/>\n+            <column name=\"status\" type=\"string\"/>\n+            <column name=\"type\" type=\"string\"/>\n+            <column name=\"priority\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  },
  {
    "sha": "cc4d7ecb38532abfc4eaee6a5aae0da1ec3e005e",
    "filename": "src/main/resources/config/liquibase/changelog/20210307141308_added_entity_constraints_Ticket.xml",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141308_added_entity_constraints_Ticket.xml",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141308_added_entity_constraints_Ticket.xml",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/resources/config/liquibase/changelog/20210307141308_added_entity_constraints_Ticket.xml?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n+    <!--\n+        Added the constraints for entity Ticket.\n+    -->\n+    <changeSet id=\"20210307141308-2\" author=\"jhipster\">\n+        \n+        <addForeignKeyConstraint baseColumnNames=\"project_id\"\n+                                 baseTableName=\"ticket\"\n+                                 constraintName=\"fk_ticket_project_id\"\n+                                 referencedColumnNames=\"id\"\n+                                 referencedTableName=\"project\"/>\n+\n+        <addForeignKeyConstraint baseColumnNames=\"assigned_to_id\"\n+                                 baseTableName=\"ticket\"\n+                                 constraintName=\"fk_ticket_assigned_to_id\"\n+                                 referencedColumnNames=\"id\"\n+                                 referencedTableName=\"jhi_user\"/>\n+\n+        <addForeignKeyConstraint baseColumnNames=\"reported_by_id\"\n+                                 baseTableName=\"ticket\"\n+                                 constraintName=\"fk_ticket_reported_by_id\"\n+                                 referencedColumnNames=\"id\"\n+                                 referencedTableName=\"jhi_user\"/>\n+\n+        <addForeignKeyConstraint baseColumnNames=\"ticket_id\"\n+                                 baseTableName=\"ticket_label\"\n+                                 constraintName=\"fk_ticket_label_ticket_id\"\n+                                 referencedColumnNames=\"id\"\n+                                 referencedTableName=\"ticket\"/>\n+\n+        <addForeignKeyConstraint baseColumnNames=\"label_id\"\n+                                 baseTableName=\"ticket_label\"\n+                                 constraintName=\"fk_ticket_label_label_id\"\n+                                 referencedColumnNames=\"id\"\n+                                 referencedTableName=\"label\"/>\n+        \n+    </changeSet>\n+</databaseChangeLog>"
  },
  {
    "sha": "1a2725cab5054eb0c2aae57e482eaa8b47c3b857",
    "filename": "src/main/resources/config/liquibase/changelog/20210307141408_added_entity_Attachment.xml",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/mgyuri/jhipster-bugtracker/blob/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141408_added_entity_Attachment.xml",
    "raw_url": "https://github.com/mgyuri/jhipster-bugtracker/raw/8560c6b6e147891fd8cd4db438cb428b83a8544d/src/main/resources/config/liquibase/changelog/20210307141408_added_entity_Attachment.xml",
    "contents_url": "https://api.github.com/repos/mgyuri/jhipster-bugtracker/contents/src/main/resources/config/liquibase/changelog/20210307141408_added_entity_Attachment.xml?ref=8560c6b6e147891fd8cd4db438cb428b83a8544d",
    "patch": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+    xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\n+                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd\">\n+\n+        <property name=\"autoIncrement\" value=\"true\"/>\n+\n+    <!--\n+        Added the entity Attachment.\n+    -->\n+    <changeSet id=\"20210307141408-1\" author=\"jhipster\">\n+        <createTable tableName=\"attachment\">\n+            <column name=\"id\" type=\"bigint\" autoIncrement=\"${autoIncrement}\">\n+                <constraints primaryKey=\"true\" nullable=\"false\"/>\n+            </column>\n+            <column name=\"name\" type=\"varchar(255)\">\n+                <constraints nullable=\"false\" />\n+            </column>\n+            <column name=\"file\" type=\"longblob\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"file_content_type\" type=\"varchar(255)\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <column name=\"ticket_id\" type=\"bigint\">\n+                <constraints nullable=\"true\" />\n+            </column>\n+            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->\n+        </createTable>\n+    </changeSet>\n+\n+    <changeSet id=\"20210307141408-1-relations\" author=\"jhipster\">\n+\n+    </changeSet>\n+    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->\n+\n+    <!--\n+        Load sample data generated with Faker.js\n+        - This data can be easily edited using a CSV editor (or even MS Excel) and\n+          is located in the 'src/main/resources/config/liquibase/fake-data' directory\n+        - By default this data is applied when running with the JHipster 'dev' profile.\n+          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'\n+          Spring Boot configuration key.\n+    -->\n+    <changeSet id=\"20210307141408-1-data\" author=\"jhipster\" context=\"faker\">\n+        <loadData\n+                  file=\"config/liquibase/fake-data/attachment.csv\"\n+                  separator=\";\"\n+                  tableName=\"attachment\">\n+            <column name=\"id\" type=\"numeric\"/>\n+            <column name=\"name\" type=\"string\"/>\n+            <column name=\"file\" type=\"blob\"/>\n+            <column name=\"file_content_type\" type=\"string\"/>\n+            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->\n+        </loadData>\n+    </changeSet>\n+\n+</databaseChangeLog>"
  }
]
