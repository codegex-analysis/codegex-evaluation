[
  {
    "sha": "c65ce8736165e207d15e87ffcb1bbbc7fc3ae444",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/build.gradle",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/build.gradle",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/build.gradle?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -186,10 +186,9 @@ task fatJar(type: Jar) {\n }\n ext {\n \tslf4jApiVersion = '1.7.30'\n-\tokHttpVersion = '4.9.0'\n+\tokHttpVersion = '4.9.1'\n \tmoshiVersion = '1.11.0'\n \tmoshiAdaptersVersion = '1.11.0'\n-\tokIoVersion = '2.9.0'\n \tcommonsLangVersion = '3.11'\n \tjavaWebSocketVersion = '1.5.1'\n \tcache2kVersion = '1.6.0.Final'\n@@ -208,10 +207,12 @@ ext {\n // https://docs.gradle.org/current/userguide/java_library_plugin.html\n dependencies {\n \timplementation(\"org.slf4j:slf4j-api:${slf4jApiVersion}\")\n-\timplementation(\"com.squareup.okhttp3:okhttp:${okHttpVersion}\")\n+\tapi(\"com.squareup.okhttp3:okhttp:${okHttpVersion}\")\n+\timplementation(\"com.squareup.okio:okio\") {\n+\t\tbecause \"OkHttpClient requires okio\"\n+\t}\n \timplementation(\"com.squareup.moshi:moshi:${moshiVersion}\")\n \timplementation(\"com.squareup.moshi:moshi-adapters:${moshiAdaptersVersion}\")\n-\timplementation(\"com.squareup.okio:okio:${okIoVersion}\")\n \timplementation(\"org.apache.commons:commons-lang3:${commonsLangVersion}\")\n \timplementation(\"org.java-websocket:Java-WebSocket:${javaWebSocketVersion}\") {\n \t\texclude group: 'org.slf4j', module: 'slf4j-api'"
  },
  {
    "sha": "630cccc125a40bc51778a54f7262c88bc8fc2c89",
    "filename": "src/integrationTest/groovy/com/streamr/client/StreamrClientSpec.groovy",
    "status": "modified",
    "additions": 26,
    "deletions": 14,
    "changes": 40,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/groovy/com/streamr/client/StreamrClientSpec.groovy",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/groovy/com/streamr/client/StreamrClientSpec.groovy",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/integrationTest/groovy/com/streamr/client/StreamrClientSpec.groovy?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -17,13 +17,14 @@ import com.streamr.client.protocol.control_layer.SubscribeResponse\n import com.streamr.client.protocol.control_layer.UnicastMessage\n import com.streamr.client.protocol.message_layer.MessageId\n import com.streamr.client.protocol.message_layer.StreamMessage\n-import com.streamr.client.rest.AuthenticationMethod\n-import com.streamr.client.rest.EthereumAuthenticationMethod\n+import com.streamr.client.rest.ResourceNotFoundException\n import com.streamr.client.rest.Stream\n+import com.streamr.client.rest.StreamrRestClient\n import com.streamr.client.subs.Subscription\n import com.streamr.client.testing.TestWebSocketServer\n import com.streamr.client.testing.TestingAddresses\n import com.streamr.client.testing.TestingContent\n+import com.streamr.client.testing.TestingMeta\n import com.streamr.client.testing.TestingStreamrClient\n import com.streamr.client.utils.Address\n import com.streamr.client.utils.EncryptionUtil\n@@ -80,24 +81,35 @@ class StreamrClientSpec extends Specification {\n \n     void setup() {\n         server.clear()\n-\n-        AuthenticationMethod authenticationMethod = new EthereumAuthenticationMethod(\"d462a6f2ccd995a346a841d110e8c6954930a1c22851c0032d3116d8ccd2296a\") {\n-            // Override login so that this doesn't call the REST API\n-            @Override\n-            protected AuthenticationMethod.LoginResponse login(String restApiUrl) throws IOException {\n-                return new AuthenticationMethod.LoginResponse(\"sessionToken\", new Date() + 365)\n-            }\n-        }\n-\n+        final BigInteger privateKey = new BigInteger(\"d462a6f2ccd995a346a841d110e8c6954930a1c22851c0032d3116d8ccd2296a\", 16)\n         // Turn off autoRevoke, otherwise it will try and to REST API calls\n         EncryptionOptions encryptionOptions = new EncryptionOptions(new InMemoryGroupKeyStore(), null, null, false)\n-\n-        StreamrClientOptions options = new StreamrClientOptions(authenticationMethod, SigningOptions.getDefault(), encryptionOptions, server.getWsUrl(), \"dont-call-this-rest-api-url\", gapFillTimeout, retryResendAfter, false)\n+        StreamrClientOptions options = new StreamrClientOptions(\n+                SigningOptions.getDefault(),\n+                encryptionOptions,\n+                server.getWsUrl(),\n+                gapFillTimeout,\n+                retryResendAfter,\n+                false)\n         options.reconnectRetryInterval = 1000\n         options.connectionTimeoutMillis = 1000\n \n-        client = new TestingStreamrClient(options)\n+        //client = new TestingStreamrClient(options, privateKey)\n+        client = new TestingStreamrClient(options, new StreamrRestClient(TestingMeta.REST_URL, privateKey) {\n+            @Override\n+            public Stream getStream(String streamId) throws IOException, ResourceNotFoundException {\n+                return new Stream.Builder()\n+                        .withName(\"default mock stream from TestingStreamrClient\")\n+                        .withDescription(\"\")\n+                        .withId(streamId)\n+                        .withRequireSignedData(false)\n+                        .withRequireEncryptedData(false)\n+                        .createStream();\n+            }\n+        })\n         client.connect()\n+        // TODO: client.login(privateKey)\n+        client.getSessionToken()\n \n         expect:\n         // The client subscribes to key exchange stream on connect"
  },
  {
    "sha": "0bd95e2608095ccad7990a9a193567a8ffa4757d",
    "filename": "src/integrationTest/groovy/com/streamr/client/rest/EthereumAuthenticationMethodSpec.groovy",
    "status": "removed",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/aa1dc4b15f2e3a035404b4584ca5709b2c85742f/src/integrationTest/groovy/com/streamr/client/rest/EthereumAuthenticationMethodSpec.groovy",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/aa1dc4b15f2e3a035404b4584ca5709b2c85742f/src/integrationTest/groovy/com/streamr/client/rest/EthereumAuthenticationMethodSpec.groovy",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/integrationTest/groovy/com/streamr/client/rest/EthereumAuthenticationMethodSpec.groovy?ref=aa1dc4b15f2e3a035404b4584ca5709b2c85742f",
    "patch": "@@ -1,18 +0,0 @@\n-package com.streamr.client.rest\n-\n-import com.streamr.client.testing.TestingKeys\n-import com.streamr.client.testing.TestingMeta\n-import spock.lang.Specification\n-\n-class EthereumAuthenticationMethodSpec extends Specification {\n-\n-    void \"newSessionToken() fetches a new sessionToken by signing a challenge\"() {\n-        EthereumAuthenticationMethod auth = new EthereumAuthenticationMethod(TestingKeys.generatePrivateKey())\n-\n-        when:\n-        String sessionToken = auth.newSessionToken(TestingMeta.REST_URL)\n-\n-        then:\n-        sessionToken != null\n-    }\n-}"
  },
  {
    "sha": "b692de6ccb5b0a2e00ad3984fd72eff6a976e40a",
    "filename": "src/integrationTest/groovy/com/streamr/client/rest/PermissionEndpointsSpec.groovy",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/groovy/com/streamr/client/rest/PermissionEndpointsSpec.groovy",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/groovy/com/streamr/client/rest/PermissionEndpointsSpec.groovy",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/integrationTest/groovy/com/streamr/client/rest/PermissionEndpointsSpec.groovy?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -13,7 +13,7 @@ class PermissionEndpointsSpec extends Specification {\n \n     void setup() {\n         grantor = TestingStreamrClient.createClientWithPrivateKey(TestingKeys.generatePrivateKey())\n-        grantee = TestingStreamrClient.createClientWithPrivateKey(TestingKeys.generatePrivateKey())\n+        grantee = TestingStreamrClient.createClientWithPrivateKey(new BigInteger(\"12beab9b499af21c4c16e4511b3b6b08c3e22e76e0591f5ab5ba8d4c3a5b1820\", 16))\n     }\n \n     void cleanup() {"
  },
  {
    "sha": "a73cba2cef1b21d78e3f0be1e67be7f0e73190aa",
    "filename": "src/integrationTest/groovy/com/streamr/client/rest/StreamEndpointsSpec.groovy",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/groovy/com/streamr/client/rest/StreamEndpointsSpec.groovy",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/groovy/com/streamr/client/rest/StreamEndpointsSpec.groovy",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/integrationTest/groovy/com/streamr/client/rest/StreamEndpointsSpec.groovy?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,17 +1,18 @@\n package com.streamr.client.rest\n \n import com.streamr.client.StreamrClient\n+import com.streamr.client.crypto.Keys\n import com.streamr.client.testing.TestingKeys\n import com.streamr.client.testing.TestingStreamrClient\n import com.streamr.client.testing.TestingStreams\n import spock.lang.Specification\n \n class StreamEndpointsSpec extends Specification {\n-\n+    private final BigInteger privateKey = TestingKeys.generatePrivateKey()\n     private StreamrClient client\n \n     void setup() {\n-        client = TestingStreamrClient.createClientWithPrivateKey(TestingKeys.generatePrivateKey())\n+        client = TestingStreamrClient.createClientWithPrivateKey(privateKey)\n     }\n \n     void cleanup() {\n@@ -171,13 +172,12 @@ class StreamEndpointsSpec extends Specification {\n     }\n \n     void \"getUserInfo()\"() {\n-        EthereumAuthenticationMethod method = (EthereumAuthenticationMethod) client.getOptions().getAuthenticationMethod()\n         when:\n         UserInfo info = client.getUserInfo()\n \n         then:\n         info.getName() == \"Anonymous User\"\n-        info.getUsername() == method.address\n+        info.getUsername() == Keys.privateKeyToAddressWithPrefix(privateKey)\n     }\n \n     void \"getPublishers()\"() {"
  },
  {
    "sha": "b1bedd44ce8f7659fc12a72d2e779c2949851472",
    "filename": "src/integrationTest/groovy/com/streamr/client/rest/StreamrWebsocketSpec.groovy",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/groovy/com/streamr/client/rest/StreamrWebsocketSpec.groovy",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/groovy/com/streamr/client/rest/StreamrWebsocketSpec.groovy",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/integrationTest/groovy/com/streamr/client/rest/StreamrWebsocketSpec.groovy?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -17,9 +17,8 @@ import spock.lang.Specification\n import spock.util.concurrent.PollingConditions\n \n class StreamrWebsocketSpec extends Specification {\n-\n-    private String publisherPrivateKey\n-    private String subscriberPrivateKey\n+    private BigInteger publisherPrivateKey\n+    private BigInteger subscriberPrivateKey\n     private StreamrClient publisher\n     private StreamrClient subscriber\n     private Stream stream\n@@ -29,7 +28,7 @@ class StreamrWebsocketSpec extends Specification {\n         publisherPrivateKey = TestingKeys.generatePrivateKey()\n         subscriberPrivateKey = TestingKeys.generatePrivateKey()\n         publisher = TestingStreamrClient.createClientWithPrivateKey(publisherPrivateKey)\n-        subscriber = TestingStreamrClient.createClientWithPrivateKey(subscriberPrivateKey)\n+        subscriber = TestingStreamrClient.createClientWithPrivateKey(publisherPrivateKey)\n \n         Stream proto = new Stream.Builder()\n                 .withName(TestingStreams.generateName())"
  },
  {
    "sha": "d7a60c2e5aeace7fc553a3fe0b58ff82526d4cf7",
    "filename": "src/integrationTest/java/com/streamr/client/dataunion/DataUnionClientTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 6,
    "changes": 9,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/java/com/streamr/client/dataunion/DataUnionClientTest.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/java/com/streamr/client/dataunion/DataUnionClientTest.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/integrationTest/java/com/streamr/client/dataunion/DataUnionClientTest.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -9,6 +9,7 @@\n import com.streamr.client.options.EncryptionOptions;\n import com.streamr.client.options.SigningOptions;\n import com.streamr.client.options.StreamrClientOptions;\n+import com.streamr.client.rest.StreamrRestClient;\n import com.streamr.client.testing.TestingMeta;\n import java.math.BigInteger;\n import java.util.Arrays;\n@@ -71,16 +72,12 @@ void setup() throws Exception {\n \n     StreamrClientOptions opts =\n         new StreamrClientOptions(\n-            null,\n-            SigningOptions.getDefault(),\n-            EncryptionOptions.getDefault(),\n-            TestingMeta.WEBSOCKET_URL,\n-            TestingMeta.REST_URL);\n+            SigningOptions.getDefault(), EncryptionOptions.getDefault(), TestingMeta.WEBSOCKET_URL);\n     opts.setSidechainRpcUrl(DEV_SIDECHAIN_RPC);\n     opts.setMainnetRpcUrl(DEV_MAINCHAIN_RPC);\n     opts.setDataUnionMainnetFactoryAddress(DEV_MAINCHAIN_FACTORY);\n     opts.setDataUnionSidechainFactoryAddress(DEV_SIDECHAIN_FACTORY);\n-    streamrClient = new StreamrClient(opts);\n+    streamrClient = new StreamrClient(opts, new StreamrRestClient(TestingMeta.REST_URL, null));\n   }\n \n   @AfterAll"
  },
  {
    "sha": "66f33daaf3495d64a3540eb4524e66a201d2b1cd",
    "filename": "src/integrationTest/java/com/streamr/client/rest/StreamrRestClientTest.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/java/com/streamr/client/rest/StreamrRestClientTest.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/java/com/streamr/client/rest/StreamrRestClientTest.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/integrationTest/java/com/streamr/client/rest/StreamrRestClientTest.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -0,0 +1,19 @@\n+package com.streamr.client.rest;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import com.streamr.client.testing.TestingKeys;\n+import com.streamr.client.testing.TestingMeta;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.junit.jupiter.api.Test;\n+\n+class StreamrRestClientTest {\n+  @Test\n+  void newSessionTokenFetchesNewSessionTokenBySigningChallenge() throws IOException {\n+    final BigInteger privateKey = TestingKeys.generatePrivateKey();\n+    final StreamrRestClient auth = new StreamrRestClient(TestingMeta.REST_URL, privateKey);\n+    final LoginResponse loginResponse = auth.login(privateKey);\n+    assertNotNull(loginResponse.getToken());\n+  }\n+}"
  },
  {
    "sha": "5cc4824e46cf2ffeb59385337f6f95688045a47f",
    "filename": "src/integrationTest/java/com/streamr/client/testing/TestWebSocketServer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/java/com/streamr/client/testing/TestWebSocketServer.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/java/com/streamr/client/testing/TestWebSocketServer.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/integrationTest/java/com/streamr/client/testing/TestWebSocketServer.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -26,7 +26,7 @@\n public class TestWebSocketServer extends WebSocketServer {\n   private static final Logger log = LoggerFactory.getLogger(TestWebSocketServer.class);\n   private final MessageCreationUtil msgCreationUtil =\n-      new MessageCreationUtil(TestingAddresses.PUBLISHER_ID, null);\n+      new MessageCreationUtil(null, TestingAddresses.PUBLISHER_ID);\n   private final List<ReceivedControlMessage> receivedControlMessages =\n       Collections.synchronizedList(new LinkedList<>());\n   private final String wsUrl;"
  },
  {
    "sha": "0352ca092782d085761e7a1a5dfd0e02a5eb973b",
    "filename": "src/integrationTest/java/com/streamr/client/testing/TestingStreamrClient.java",
    "status": "modified",
    "additions": 50,
    "deletions": 63,
    "changes": 113,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/java/com/streamr/client/testing/TestingStreamrClient.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/integrationTest/java/com/streamr/client/testing/TestingStreamrClient.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/integrationTest/java/com/streamr/client/testing/TestingStreamrClient.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -8,47 +8,74 @@\n import com.streamr.client.options.StreamrClientOptions;\n import com.streamr.client.protocol.control_layer.ControlMessage;\n import com.streamr.client.protocol.message_layer.StreamMessage;\n-import com.streamr.client.rest.EthereumAuthenticationMethod;\n import com.streamr.client.rest.ResourceNotFoundException;\n import com.streamr.client.rest.Stream;\n+import com.streamr.client.rest.StreamrRestClient;\n import com.streamr.client.rest.UserInfo;\n import com.streamr.client.subs.Subscription;\n import java.io.IOException;\n+import java.math.BigInteger;\n import java.util.ArrayList;\n-import java.util.LinkedHashMap;\n import java.util.List;\n-import java.util.Map;\n \n public class TestingStreamrClient extends StreamrClient {\n+  public static StreamrClient createUnauthenticatedClient() {\n+    return new StreamrClient(\n+        new StreamrClientOptions(\n+            SigningOptions.getDefault(), EncryptionOptions.getDefault(), TestingMeta.WEBSOCKET_URL),\n+        new StreamrRestClient(TestingMeta.REST_URL, null));\n+  }\n+\n+  public static StreamrClient createClientWithPrivateKey(final BigInteger privateKey) {\n+    return new StreamrClient(\n+        createOptions(), new StreamrRestClient(TestingMeta.REST_URL, privateKey));\n+  }\n+\n+  private static StreamrClientOptions createOptions() {\n+    return new StreamrClientOptions(\n+        SigningOptions.getDefault(), EncryptionOptions.getDefault(), TestingMeta.WEBSOCKET_URL);\n+  }\n \n   List<StreamMessage> receivedStreamMessages = new ArrayList<>();\n-  Map<String, Stream> mockStreams = new LinkedHashMap<>();\n \n-  public TestingStreamrClient(final StreamrClientOptions options) {\n-    super(options);\n+  public TestingStreamrClient(final StreamrClientOptions options, final BigInteger privateKey) {\n+    super(\n+        options,\n+        new StreamrRestClient(TestingMeta.REST_URL, privateKey) {\n+          @Override\n+          public UserInfo getUserInfo() {\n+            return new UserInfo(\"name\", \"username\");\n+          }\n+\n+          @Override\n+          public String getSessionToken() {\n+            return \"sessionToken\";\n+          }\n+\n+          @Override\n+          public Stream getStream(String streamId) throws IOException, ResourceNotFoundException {\n+            return new Stream.Builder()\n+                .withName(\"default mock stream from TestingStreamrClient\")\n+                .withDescription(\"\")\n+                .withId(streamId)\n+                .withRequireSignedData(false)\n+                .withRequireEncryptedData(false)\n+                .createStream();\n+          }\n+        });\n   }\n \n-  public static StreamrClient createUnauthenticatedClient() {\n-    return new StreamrClient(\n-        new StreamrClientOptions(\n-            null,\n-            SigningOptions.getDefault(),\n-            EncryptionOptions.getDefault(),\n-            TestingMeta.WEBSOCKET_URL,\n-            TestingMeta.REST_URL));\n+  public TestingStreamrClient(\n+      final StreamrClientOptions options, final StreamrRestClient restClient) {\n+    super(options, restClient);\n   }\n \n-  public static StreamrClient createClientWithPrivateKey(final String privateKey) {\n-    return new StreamrClient(createOptionsWithPrivateKey(privateKey));\n+  public void receiveMessage(ControlMessage msg) {\n+    handleMessage(msg.toJson());\n   }\n \n-  private static StreamrClientOptions createOptionsWithPrivateKey(final String privateKey) {\n-    return new StreamrClientOptions(\n-        new EthereumAuthenticationMethod(privateKey),\n-        SigningOptions.getDefault(),\n-        EncryptionOptions.getDefault(),\n-        TestingMeta.WEBSOCKET_URL,\n-        TestingMeta.REST_URL);\n+  public List<StreamMessage> getReceivedStreamMessages() {\n+    return receivedStreamMessages;\n   }\n \n   @Override\n@@ -66,44 +93,4 @@ public Subscription subscribe(\n         };\n     return super.subscribe(stream, partition, loggingHandler, resendOption, isExplicitResend);\n   }\n-\n-  @Override\n-  public UserInfo getUserInfo() {\n-    return new UserInfo(\"name\", \"username\");\n-  }\n-\n-  @Override\n-  public String getSessionToken() {\n-    return \"sessionToken\";\n-  }\n-\n-  public void receiveMessage(ControlMessage msg) {\n-    handleMessage(msg.toJson());\n-  }\n-\n-  public List<StreamMessage> getReceivedStreamMessages() {\n-    return receivedStreamMessages;\n-  }\n-\n-  public void addMockStream(Stream stream) {\n-    mockStreams.put(stream.getId(), stream);\n-  }\n-\n-  @Override\n-  public Stream getStream(String streamId) throws IOException, ResourceNotFoundException {\n-    if (mockStreams.containsKey(streamId)) {\n-      return mockStreams.get(streamId);\n-    } else {\n-      // Return a default mock\n-      Stream stream =\n-          new Stream.Builder()\n-              .withName(\"default mock stream from TestingStreamrClient\")\n-              .withDescription(\"\")\n-              .withId(streamId)\n-              .withRequireSignedData(false)\n-              .withRequireEncryptedData(false)\n-              .createStream();\n-      return stream;\n-    }\n-  }\n }"
  },
  {
    "sha": "cf5061a9d8b68ddf379c2e88febdd9b2066373d5",
    "filename": "src/main/java/com/streamr/client/Streamr.java",
    "status": "added",
    "additions": 116,
    "deletions": 0,
    "changes": 116,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/Streamr.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/Streamr.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/Streamr.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -0,0 +1,116 @@\n+package com.streamr.client;\n+\n+import com.streamr.client.dataunion.DataUnionClient;\n+import com.streamr.client.options.ResendOption;\n+import com.streamr.client.rest.AmbiguousResultsException;\n+import com.streamr.client.rest.Permission;\n+import com.streamr.client.rest.Stream;\n+import com.streamr.client.rest.StreamrRestClient;\n+import com.streamr.client.rest.UserInfo;\n+import com.streamr.client.subs.Subscription;\n+import com.streamr.client.utils.Address;\n+import com.streamr.client.utils.GroupKey;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+\n+interface Streamr {\n+  /** Build unauthenticated Streamr client. */\n+  static Streamr build() {\n+    return null;\n+  }\n+  /** Build authenticated Streamr client. */\n+  static Streamr build(final String privateKey) {\n+    return null;\n+  }\n+  /**\n+   * Build authenticated Streamr client with given {@code StreamrRestClient} and {@code\n+   * StreamrWebSocketClient} implementations.\n+   */\n+  static Streamr build(\n+      final String privateKey,\n+      final StreamrRestClient restClient,\n+      final StreamrClient.StreamrWebSocketClient wsClient) {\n+    return null;\n+  }\n+\n+  Stream createStream(final Stream stream) throws IOException;\n+\n+  Stream getStream(final String streamId) throws IOException;\n+\n+  Stream getStreamByName(final String name) throws IOException, AmbiguousResultsException;\n+\n+  Permission grant(final Stream stream, final Permission.Operation operation, final String user)\n+      throws IOException;\n+\n+  Permission grantPublic(final Stream stream, final Permission.Operation operation)\n+      throws IOException;\n+\n+  UserInfo getUserInfo() throws IOException;\n+\n+  List<String> getPublishers(final String streamId) throws IOException;\n+\n+  boolean isPublisher(final String streamId, final Address address) throws IOException;\n+\n+  boolean isPublisher(final String streamId, final String ethAddress) throws IOException;\n+\n+  List<String> getSubscribers(final String streamId) throws IOException;\n+\n+  boolean isSubscriber(final String streamId, final Address address) throws IOException;\n+\n+  boolean isSubscriber(final String streamId, final String ethAddress) throws IOException;\n+\n+  DataUnionClient dataUnionClient(\n+      final String mainnetAdminPrvKey, final String sidechainAdminPrvKey);\n+\n+  void logout() throws IOException;\n+\n+  void newLogin(final BigInteger privateKey) throws IOException;\n+\n+  String getSessionToken();\n+\n+  void publish(final Stream stream, final Map<String, Object> payload);\n+\n+  void publish(final Stream stream, final Map<String, Object> payload, final GroupKey groupKey);\n+\n+  void publish(final Stream stream, final Map<String, Object> payload, final Date timestamp);\n+\n+  void publish(\n+      final Stream stream,\n+      final Map<String, Object> payload,\n+      final Date timestamp,\n+      final GroupKey groupKey);\n+\n+  void publish(\n+      final Stream stream,\n+      final Map<String, Object> payload,\n+      final Date timestamp,\n+      final String partitionKey);\n+\n+  void publish(\n+      final Stream stream,\n+      final Map<String, Object> payload,\n+      final Date timestamp,\n+      final String partitionKey,\n+      final GroupKey newGroupKey);\n+\n+  GroupKey rekey(final Stream stream);\n+\n+  Subscription subscribe(final Stream stream, final MessageHandler handler);\n+\n+  Subscription subscribe(\n+      final Stream stream,\n+      final int partition,\n+      final MessageHandler handler,\n+      final ResendOption resendOption);\n+\n+  void resend(\n+      final Stream stream,\n+      final int partition,\n+      final MessageHandler handler,\n+      final ResendOption resendOption);\n+\n+  void unsubscribe(final Subscription sub);\n+}"
  },
  {
    "sha": "4e14a547c7a5df8d398a3b7cb8f8f298f5459e16",
    "filename": "src/main/java/com/streamr/client/StreamrClient.java",
    "status": "modified",
    "additions": 113,
    "deletions": 34,
    "changes": 147,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/StreamrClient.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/StreamrClient.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/StreamrClient.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,9 +1,11 @@\n package com.streamr.client;\n \n+import com.streamr.client.crypto.Keys;\n import com.streamr.client.dataunion.DataUnionClient;\n import com.streamr.client.exceptions.ConnectionTimeoutException;\n import com.streamr.client.exceptions.PartitionNotSpecifiedException;\n import com.streamr.client.exceptions.SubscriptionNotFoundException;\n+import com.streamr.client.java.util.Objects;\n import com.streamr.client.options.ResendOption;\n import com.streamr.client.options.StreamrClientOptions;\n import com.streamr.client.protocol.common.MessageRef;\n@@ -25,10 +27,11 @@\n import com.streamr.client.protocol.message_layer.MalformedMessageException;\n import com.streamr.client.protocol.message_layer.StreamMessage;\n import com.streamr.client.protocol.message_layer.StreamMessageValidator;\n-import com.streamr.client.rest.AuthenticationMethod;\n-import com.streamr.client.rest.EthereumAuthenticationMethod;\n+import com.streamr.client.rest.AmbiguousResultsException;\n+import com.streamr.client.rest.Permission;\n import com.streamr.client.rest.Stream;\n-import com.streamr.client.rest.StreamrRESTClient;\n+import com.streamr.client.rest.StreamrRestClient;\n+import com.streamr.client.rest.UserInfo;\n import com.streamr.client.subs.BasicSubscription;\n import com.streamr.client.subs.CombinedSubscription;\n import com.streamr.client.subs.HistoricalSubscription;\n@@ -43,12 +46,13 @@\n import com.streamr.client.utils.KeyExchangeUtil;\n import com.streamr.client.utils.MessageCreationUtil;\n import com.streamr.client.utils.OneTimeResend;\n-import com.streamr.client.utils.SigningUtil;\n import com.streamr.client.utils.Subscriptions;\n import java.io.IOException;\n+import java.math.BigInteger;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.channels.NotYetConnectedException;\n+import java.time.Clock;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n@@ -69,10 +73,11 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-/** Extends the StreamrRESTClient with methods for using the websocket protocol. */\n-public class StreamrClient extends StreamrRESTClient {\n+/** Extends the StreamrRestClient with methods for using the websocket protocol. */\n+public class StreamrClient implements Streamr {\n \n   private static final Logger log = LoggerFactory.getLogger(StreamrClient.class);\n+  private final StreamrRestClient restClient;\n \n   // Underlying websocket implementation\n   private WebSocketClient websocket = null;\n@@ -102,9 +107,16 @@\n   private final ScheduledExecutorService executorService =\n       Executors.newSingleThreadScheduledExecutor();\n   private int requestCounter = 0;\n+  private final StreamrClientOptions options;\n \n-  public StreamrClient(StreamrClientOptions options) {\n-    super(options);\n+  public StreamrClientOptions getOptions() {\n+    return options;\n+  }\n+\n+  public StreamrClient(StreamrClientOptions options, final StreamrRestClient restClient) {\n+    this.options = options;\n+    Objects.requireNonNull(restClient);\n+    this.restClient = restClient;\n     AddressValidityUtil addressValidityUtil =\n         new AddressValidityUtil(\n             streamId -> {\n@@ -151,10 +163,9 @@ public StreamrClient(StreamrClientOptions options) {\n             addressValidityUtil,\n             options.getSigningOptions().getVerifySignatures());\n \n-    if (options.getAuthenticationMethod() instanceof EthereumAuthenticationMethod) {\n-      publisherId =\n-          new Address(\n-              ((EthereumAuthenticationMethod) options.getAuthenticationMethod()).getAddress());\n+    BigInteger privateKey = restClient.getPrivateKey();\n+    if (privateKey != null) {\n+      publisherId = new Address(Keys.privateKeyToAddressWithPrefix(privateKey));\n \n       // The key exchange stream is a system stream.\n       // It doesn't explicitly exist, but as per spec, we can subscribe to it anyway.\n@@ -166,17 +177,11 @@ public StreamrClient(StreamrClientOptions options) {\n               .withPartitions(1)\n               .createStream();\n     }\n-    SigningUtil signingUtil = null;\n-    if (options.getPublishSignedMsgs()) {\n-      signingUtil =\n-          new SigningUtil(\n-              ((EthereumAuthenticationMethod) options.getAuthenticationMethod()).getAccount());\n-    }\n \n     // Create key storage\n     keyStore = options.getEncryptionOptions().getKeyStore();\n \n-    msgCreationUtil = new MessageCreationUtil(publisherId, signingUtil);\n+    msgCreationUtil = new MessageCreationUtil(privateKey, publisherId);\n     encryptionUtil =\n         new EncryptionUtil(\n             options.getEncryptionOptions().getRsaPublicKey(),\n@@ -193,15 +198,8 @@ public StreamrClient(StreamrClientOptions options) {\n               for (Subscription sub : subs.getAllForStreamId(streamId)) {\n                 sub.onNewKeysAdded(publisherId, keys);\n               }\n-            });\n-  }\n-\n-  public StreamrClient(AuthenticationMethod authenticationMethod) {\n-    this(new StreamrClientOptions(authenticationMethod));\n-  }\n-\n-  public StreamrClient() {\n-    this(new StreamrClientOptions());\n+            },\n+            Clock.systemDefaultZone());\n   }\n \n   private void initWebsocket() {\n@@ -392,6 +390,69 @@ public GroupKeyStore getKeyStore() {\n     return keyStore;\n   }\n \n+  @Override\n+  public Stream createStream(final Stream stream) throws IOException {\n+    return restClient.createStream(stream);\n+  }\n+\n+  @Override\n+  public Stream getStream(final String streamId) throws IOException {\n+    return restClient.getStream(streamId);\n+  }\n+\n+  @Override\n+  public Stream getStreamByName(final String name) throws IOException, AmbiguousResultsException {\n+    return restClient.getStreamByName(name);\n+  }\n+\n+  @Override\n+  public Permission grant(\n+      final Stream stream, final Permission.Operation operation, final String user)\n+      throws IOException {\n+    return restClient.grant(stream, operation, user);\n+  }\n+\n+  @Override\n+  public Permission grantPublic(final Stream stream, final Permission.Operation operation)\n+      throws IOException {\n+    return restClient.grantPublic(stream, operation);\n+  }\n+\n+  @Override\n+  public UserInfo getUserInfo() throws IOException {\n+    return restClient.getUserInfo();\n+  }\n+\n+  @Override\n+  public List<String> getPublishers(final String streamId) throws IOException {\n+    return restClient.getPublishers(streamId);\n+  }\n+\n+  @Override\n+  public boolean isPublisher(final String streamId, final Address address) throws IOException {\n+    return restClient.isPublisher(streamId, address);\n+  }\n+\n+  @Override\n+  public boolean isPublisher(final String streamId, final String ethAddress) throws IOException {\n+    return restClient.isPublisher(streamId, ethAddress);\n+  }\n+\n+  @Override\n+  public List<String> getSubscribers(final String streamId) throws IOException {\n+    return restClient.getSubscribers(streamId);\n+  }\n+\n+  @Override\n+  public boolean isSubscriber(final String streamId, final Address address) throws IOException {\n+    return restClient.isSubscriber(streamId, address);\n+  }\n+\n+  @Override\n+  public boolean isSubscriber(final String streamId, final String ethAddress) throws IOException {\n+    return restClient.isSubscriber(streamId, ethAddress);\n+  }\n+\n   public DataUnionClient dataUnionClient(String mainnetAdminPrvKey, String sidechainAdminPrvKey) {\n     return new DataUnionClient(\n         options.getMainnetRpcUrl(),\n@@ -402,6 +463,20 @@ public DataUnionClient dataUnionClient(String mainnetAdminPrvKey, String sidecha\n         sidechainAdminPrvKey);\n   }\n \n+  @Override\n+  public void logout() throws IOException {\n+    restClient.logout();\n+  }\n+\n+  @Override\n+  public void newLogin(final BigInteger privateKey) throws IOException {\n+    restClient.login(privateKey); // getSessionToken();\n+  }\n+\n+  @Override\n+  public String getSessionToken() {\n+    return restClient.getSessionToken();\n+  }\n   /*\n    * Message handling\n    */\n@@ -546,7 +621,7 @@ public void publish(\n   }\n \n   private void publish(StreamMessage streamMessage) {\n-    send(new PublishRequest(newRequestId(\"pub\"), streamMessage, getSessionToken()));\n+    send(new PublishRequest(newRequestId(\"pub\"), streamMessage, restClient.getSessionToken()));\n   }\n \n   public GroupKey rekey(Stream stream) {\n@@ -580,7 +655,8 @@ protected Subscription subscribe(\n     }\n \n     SubscribeRequest subscribeRequest =\n-        new SubscribeRequest(newRequestId(\"sub\"), stream.getId(), partition, getSessionToken());\n+        new SubscribeRequest(\n+            newRequestId(\"sub\"), stream.getId(), partition, restClient.getSessionToken());\n \n     Subscription sub;\n     BasicSubscription.GroupKeyRequestFunction requestFunction =\n@@ -635,7 +711,7 @@ protected Subscription subscribe(\n                   to,\n                   publisherId,\n                   msgChainId,\n-                  getSessionToken());\n+                  restClient.getSessionToken());\n           sub.setResending(true);\n           send(req);\n         });\n@@ -648,7 +724,10 @@ protected Subscription subscribe(\n   private void resubscribe(Subscription sub) {\n     SubscribeRequest subscribeRequest =\n         new SubscribeRequest(\n-            newRequestId(\"resub\"), sub.getStreamId(), sub.getPartition(), getSessionToken());\n+            newRequestId(\"resub\"),\n+            sub.getStreamId(),\n+            sub.getPartition(),\n+            restClient.getSessionToken());\n     sub.setState(Subscription.State.SUBSCRIBING);\n     send(subscribeRequest);\n   }\n@@ -697,7 +776,7 @@ private void handleSubscribeResponse(SubscribeResponse res) throws SubscriptionN\n               newRequestId(\"resend\"),\n               res.getStreamId(),\n               res.getStreamPartition(),\n-              this.getSessionToken());\n+              restClient.getSessionToken());\n       send(req);\n       OneTimeResend resend =\n           new OneTimeResend(getWebsocket(), req, options.getResendTimeout(), sub);\n@@ -775,7 +854,7 @@ public void setWebsocket(WebSocketClient websocket) {\n     }\n   }\n \n-  private static class StreamrWebSocketClient extends WebSocketClient {\n+  public static class StreamrWebSocketClient extends WebSocketClient {\n     private final Logger log = LoggerFactory.getLogger(StreamrWebSocketClient.class);\n     private final StreamrClient streamrClient;\n "
  },
  {
    "sha": "39406fee15e916d05097c433401afe2e7ca669ff",
    "filename": "src/main/java/com/streamr/client/crypto/Keys.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/crypto/Keys.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/crypto/Keys.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/crypto/Keys.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -0,0 +1,20 @@\n+package com.streamr.client.crypto;\n+\n+import java.math.BigInteger;\n+import org.web3j.crypto.Sign;\n+import org.web3j.utils.Numeric;\n+\n+public final class Keys {\n+  private Keys() {}\n+\n+  public static String privateKeyToAddressWithPrefix(final BigInteger privateKey) {\n+    final String address = privateKeyToAddressWithoutPrefix(privateKey);\n+    return Numeric.prependHexPrefix(address);\n+  }\n+\n+  public static String privateKeyToAddressWithoutPrefix(final BigInteger privateKey) {\n+    final BigInteger publicKey = Sign.publicKeyFromPrivate(privateKey);\n+    final String address = org.web3j.crypto.Keys.getAddress(publicKey);\n+    return address;\n+  }\n+}"
  },
  {
    "sha": "21f3f40bbf11c643c21f673d1ec917fadff82387",
    "filename": "src/main/java/com/streamr/client/dataunion/EthereumTransactionReceipt.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/dataunion/EthereumTransactionReceipt.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/dataunion/EthereumTransactionReceipt.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/dataunion/EthereumTransactionReceipt.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,6 +1,6 @@\n package com.streamr.client.dataunion;\n \n-import java.util.Objects;\n+import com.streamr.client.java.util.Objects;\n import org.web3j.protocol.core.methods.response.TransactionReceipt;\n \n /** Streamr Ethereum transaction receipt. */"
  },
  {
    "sha": "0d741a6e7a41f6fdfaec2f6bc678f94b33544b3c",
    "filename": "src/main/java/com/streamr/client/java/util/Objects.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/java/util/Objects.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/java/util/Objects.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/java/util/Objects.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -0,0 +1,27 @@\n+package com.streamr.client.java.util;\n+\n+public final class Objects {\n+  private Objects() {\n+    throw new AssertionError(\"No com.streamr.client.java.util.Objects instances for you!\");\n+  }\n+\n+  public static <T> T requireNonNull(final T obj) {\n+    return java.util.Objects.<T>requireNonNull(obj);\n+  }\n+\n+  public static <T> T requireNonNull(final T obj, final String message) {\n+    return java.util.Objects.<T>requireNonNull(obj, message);\n+  }\n+\n+  public static boolean equals(final Object a, final Object b) {\n+    return java.util.Objects.equals(a, b);\n+  }\n+\n+  public static int hash(final Object... values) {\n+    return java.util.Objects.hash(values);\n+  }\n+\n+  public static boolean nonNull(final Object obj) {\n+    return java.util.Objects.nonNull(obj);\n+  }\n+}"
  },
  {
    "sha": "90b2d2c38b7d5691b01eca94a896bec771d17386",
    "filename": "src/main/java/com/streamr/client/options/StreamrClientOptions.java",
    "status": "modified",
    "additions": 2,
    "deletions": 60,
    "changes": 62,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/options/StreamrClientOptions.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/options/StreamrClientOptions.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/options/StreamrClientOptions.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,18 +1,11 @@\n package com.streamr.client.options;\n \n-import com.streamr.client.exceptions.InvalidOptionsException;\n-import com.streamr.client.rest.AuthenticationMethod;\n-import com.streamr.client.rest.EthereumAuthenticationMethod;\n import com.streamr.client.ws.WebsocketUrl;\n \n public class StreamrClientOptions {\n-\n-  private AuthenticationMethod authenticationMethod = null;\n   private SigningOptions signingOptions = SigningOptions.getDefault();\n   private EncryptionOptions encryptionOptions = EncryptionOptions.getDefault();\n-  private boolean publishSignedMsgs = false;\n   private WebsocketUrl websocketApiUrl = new WebsocketUrl();\n-  private String restApiUrl = \"https://www.streamr.com/api/v1\";\n \n   private String mainnetRpcUrl = \"http://localhost:8545\";\n   private String sidechainRpcUrl = \"http://localhost:8546\";\n@@ -27,69 +20,30 @@\n \n   public StreamrClientOptions() {}\n \n-  public StreamrClientOptions(AuthenticationMethod authenticationMethod) {\n-    this.authenticationMethod = authenticationMethod;\n-    this.publishSignedMsgs = authenticationMethod instanceof EthereumAuthenticationMethod;\n-  }\n-\n   public StreamrClientOptions(\n-      AuthenticationMethod authenticationMethod, SigningOptions signingOptions) {\n-    this.authenticationMethod = authenticationMethod;\n+      SigningOptions signingOptions, EncryptionOptions encryptionOptions, String websocketApiUrl) {\n     this.signingOptions = signingOptions;\n-    if (this.signingOptions.getPublishSigned()\n-        == SigningOptions.SignatureComputationPolicy.ALWAYS) {\n-      if (authenticationMethod instanceof EthereumAuthenticationMethod) {\n-        this.publishSignedMsgs = true;\n-      } else {\n-        throw new InvalidOptionsException(\n-            \"SigningOptions.SignatureComputationPolicy.ALWAYS requires an EthereumAuthenticationMethod as\"\n-                + \"AuthenticationMethod.(Need a private key to be able to sign).\");\n-      }\n-    } else if (this.signingOptions.getPublishSigned()\n-        == SigningOptions.SignatureComputationPolicy.AUTO) {\n-      this.publishSignedMsgs = authenticationMethod instanceof EthereumAuthenticationMethod;\n-    }\n-  }\n-\n-  public StreamrClientOptions(\n-      AuthenticationMethod authenticationMethod,\n-      SigningOptions signingOptions,\n-      EncryptionOptions encryptionOptions,\n-      String websocketApiUrl,\n-      String restApiUrl) {\n-    this(authenticationMethod, signingOptions);\n     this.encryptionOptions = encryptionOptions;\n     this.websocketApiUrl = new WebsocketUrl(websocketApiUrl);\n-    this.restApiUrl = restApiUrl;\n   }\n \n   public StreamrClientOptions(\n-      AuthenticationMethod authenticationMethod,\n       SigningOptions signingOptions,\n       EncryptionOptions encryptionOptions,\n       String websocketApiUrl,\n-      String restApiUrl,\n       int propagationTimeout,\n       int resendTimeout,\n       boolean skipGapsOnFullQueue) {\n-    this(authenticationMethod, signingOptions, encryptionOptions, websocketApiUrl, restApiUrl);\n+    this(signingOptions, encryptionOptions, websocketApiUrl);\n     this.propagationTimeout = propagationTimeout;\n     this.resendTimeout = resendTimeout;\n     this.skipGapsOnFullQueue = skipGapsOnFullQueue;\n   }\n \n-  public AuthenticationMethod getAuthenticationMethod() {\n-    return authenticationMethod;\n-  }\n-\n   public String getWebsocketApiUrl() {\n     return websocketApiUrl.toString();\n   }\n \n-  public String getRestApiUrl() {\n-    return restApiUrl;\n-  }\n-\n   public String getMainnetRpcUrl() {\n     return mainnetRpcUrl;\n   }\n@@ -106,10 +60,6 @@ public void setSidechainRpcUrl(String sidechainRpcUrl) {\n     this.sidechainRpcUrl = sidechainRpcUrl;\n   }\n \n-  public void setRestApiUrl(String restApiUrl) {\n-    this.restApiUrl = restApiUrl;\n-  }\n-\n   public long getConnectionTimeoutMillis() {\n     return connectionTimeoutMillis;\n   }\n@@ -126,10 +76,6 @@ public void setReconnectRetryInterval(long reconnectRetryInterval) {\n     this.reconnectRetryInterval = reconnectRetryInterval;\n   }\n \n-  public boolean getPublishSignedMsgs() {\n-    return publishSignedMsgs;\n-  }\n-\n   public SigningOptions getSigningOptions() {\n     return signingOptions;\n   }\n@@ -150,10 +96,6 @@ public boolean getSkipGapsOnFullQueue() {\n     return skipGapsOnFullQueue;\n   }\n \n-  public void setSkipGapsOnFullQueue(boolean skipGapsOnFullQueue) {\n-    this.skipGapsOnFullQueue = skipGapsOnFullQueue;\n-  }\n-\n   public String getDataUnionSidechainFactoryAddress() {\n     return dataUnionSidechainFactoryAddress;\n   }"
  },
  {
    "sha": "dd7736f8368df733211fbda6042358b6a5a0d90e",
    "filename": "src/main/java/com/streamr/client/protocol/common/MessageRef.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/common/MessageRef.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/common/MessageRef.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/common/MessageRef.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,7 +1,7 @@\n package com.streamr.client.protocol.common;\n \n+import com.streamr.client.java.util.Objects;\n import java.util.Date;\n-import java.util.Objects;\n import org.jetbrains.annotations.NotNull;\n \n public final class MessageRef implements Comparable<MessageRef> {"
  },
  {
    "sha": "54ed821537c115f7739666b97e79b2087b516546",
    "filename": "src/main/java/com/streamr/client/protocol/control_layer/BroadcastMessage.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/control_layer/BroadcastMessage.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/control_layer/BroadcastMessage.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/control_layer/BroadcastMessage.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,7 +1,7 @@\n package com.streamr.client.protocol.control_layer;\n \n+import com.streamr.client.java.util.Objects;\n import com.streamr.client.protocol.message_layer.StreamMessage;\n-import java.util.Objects;\n \n public final class BroadcastMessage extends ControlMessage {\n   public static final int TYPE = 0;"
  },
  {
    "sha": "7ea409ca00040b6d1943542711c6917267c7813d",
    "filename": "src/main/java/com/streamr/client/protocol/control_layer/ControlMessage.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/control_layer/ControlMessage.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/control_layer/ControlMessage.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/control_layer/ControlMessage.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -2,9 +2,9 @@\n \n import com.squareup.moshi.JsonReader;\n import com.squareup.moshi.JsonWriter;\n+import com.streamr.client.java.util.Objects;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n-import java.util.Objects;\n import okio.Buffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"
  },
  {
    "sha": "41b2bbc3a667889ebcacceac65dfb98852f2c474",
    "filename": "src/main/java/com/streamr/client/protocol/message_layer/AbstractGroupKeyMessage.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/AbstractGroupKeyMessage.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/AbstractGroupKeyMessage.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/message_layer/AbstractGroupKeyMessage.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,5 +1,6 @@\n package com.streamr.client.protocol.message_layer;\n \n+import com.streamr.client.java.util.Objects;\n import com.streamr.client.protocol.common.MessageRef;\n import com.streamr.client.protocol.message_layer.StreamMessage.MessageType;\n import java.io.IOException;\n@@ -22,7 +23,7 @@\n   }\n \n   public AbstractGroupKeyMessage(String streamId) {\n-    ValidationUtil.checkNotNull(streamId, \"streamId\");\n+    Objects.requireNonNull(streamId, \"streamId\");\n     this.streamId = streamId;\n   }\n "
  },
  {
    "sha": "2b0c5e64ea91259add6249fd4b6c285cf3076a86",
    "filename": "src/main/java/com/streamr/client/protocol/message_layer/GroupKeyAnnounce.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyAnnounce.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyAnnounce.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyAnnounce.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,15 +1,15 @@\n package com.streamr.client.protocol.message_layer;\n \n+import com.streamr.client.java.util.Objects;\n import com.streamr.client.utils.EncryptedGroupKey;\n import java.util.List;\n-import java.util.Objects;\n \n public final class GroupKeyAnnounce extends AbstractGroupKeyMessage {\n   private final List<EncryptedGroupKey> groupKeys;\n \n   public GroupKeyAnnounce(String streamId, List<EncryptedGroupKey> groupKeys) {\n     super(streamId);\n-    ValidationUtil.checkNotNull(groupKeys, \"groupKeys\");\n+    Objects.requireNonNull(groupKeys, \"groupKeys\");\n     this.groupKeys = groupKeys;\n   }\n "
  },
  {
    "sha": "5414094ddcf11b34043f2fd8843dd7580b58c92f",
    "filename": "src/main/java/com/streamr/client/protocol/message_layer/GroupKeyErrorResponse.java",
    "status": "modified",
    "additions": 5,
    "deletions": 7,
    "changes": 12,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyErrorResponse.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyErrorResponse.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyErrorResponse.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,7 +1,7 @@\n package com.streamr.client.protocol.message_layer;\n \n+import com.streamr.client.java.util.Objects;\n import java.util.List;\n-import java.util.Objects;\n \n public final class GroupKeyErrorResponse extends AbstractGroupKeyMessage {\n   private final String requestId;\n@@ -12,15 +12,13 @@\n   public GroupKeyErrorResponse(\n       String requestId, String streamId, String code, String message, List<String> groupKeyIds) {\n     super(streamId);\n-    ValidationUtil.checkNotNull(requestId, \"requestId\");\n-    ValidationUtil.checkNotNull(code, \"code\");\n-    ValidationUtil.checkNotNull(message, \"message\");\n-    ValidationUtil.checkNotNull(groupKeyIds, \"groupKeyIds\");\n-    ValidationUtil.checkNotEmpty(groupKeyIds, \"groupKeyIds\");\n-\n+    Objects.requireNonNull(requestId, \"requestId\");\n     this.requestId = requestId;\n+    Objects.requireNonNull(code, \"code\");\n     this.code = code;\n+    Objects.requireNonNull(message, \"message\");\n     this.message = message;\n+    ValidationUtil.checkNotEmpty(groupKeyIds, \"groupKeyIds\");\n     this.groupKeyIds = groupKeyIds;\n   }\n "
  },
  {
    "sha": "8d3cc4904a4728a0867518cfe061cb2f8e80cb4a",
    "filename": "src/main/java/com/streamr/client/protocol/message_layer/GroupKeyRequest.java",
    "status": "modified",
    "additions": 12,
    "deletions": 14,
    "changes": 26,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyRequest.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyRequest.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyRequest.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,32 +1,30 @@\n package com.streamr.client.protocol.message_layer;\n \n+import com.streamr.client.java.util.Objects;\n import java.util.List;\n-import java.util.Objects;\n \n public final class GroupKeyRequest extends AbstractGroupKeyMessage {\n   private final String requestId;\n-  private final String publicKey;\n+  private final String rsaPublicKey;\n   private final List<String> groupKeyIds;\n \n   public GroupKeyRequest(\n       String requestId, String streamId, String rsaPublicKey, List<String> groupKeyIds) {\n     super(streamId);\n-    ValidationUtil.checkNotNull(requestId, \"requestId\");\n-    ValidationUtil.checkNotNull(rsaPublicKey, \"rsaPublicKey\");\n-    ValidationUtil.checkNotNull(groupKeyIds, \"groupKeyIds\");\n-    ValidationUtil.checkNotEmpty(groupKeyIds, \"groupKeyIds\");\n-\n+    Objects.requireNonNull(requestId, \"requestId\");\n     this.requestId = requestId;\n-    this.publicKey = rsaPublicKey;\n+    Objects.requireNonNull(rsaPublicKey, \"rsaPublicKey\");\n+    this.rsaPublicKey = rsaPublicKey;\n+    ValidationUtil.checkNotEmpty(groupKeyIds, \"groupKeyIds\");\n     this.groupKeyIds = groupKeyIds;\n   }\n \n   public String getRequestId() {\n     return requestId;\n   }\n \n-  public String getPublicKey() {\n-    return publicKey;\n+  public String getRsaPublicKey() {\n+    return rsaPublicKey;\n   }\n \n   public List<String> getGroupKeyIds() {\n@@ -44,20 +42,20 @@ public boolean equals(final Object obj) {\n     if (obj == null || getClass() != obj.getClass()) return false;\n     final GroupKeyRequest that = (GroupKeyRequest) obj;\n     return Objects.equals(requestId, that.requestId)\n-        && Objects.equals(publicKey, that.publicKey)\n+        && Objects.equals(rsaPublicKey, that.rsaPublicKey)\n         && Objects.equals(groupKeyIds, that.groupKeyIds)\n         && Objects.equals(streamId, that.streamId);\n   }\n \n   @Override\n   public int hashCode() {\n-    return Objects.hash(requestId, publicKey, groupKeyIds, streamId);\n+    return Objects.hash(requestId, rsaPublicKey, groupKeyIds, streamId);\n   }\n \n   @Override\n   public String toString() {\n     return String.format(\n-        \"GroupKeyRequest{requestId=%s, streamId=%s, keys=%s, publicKey=%s}\",\n-        requestId, streamId, groupKeyIds, publicKey);\n+        \"GroupKeyRequest{requestId=%s, streamId=%s, keys=%s, rsaPublicKey=%s}\",\n+        requestId, streamId, groupKeyIds, rsaPublicKey);\n   }\n }"
  },
  {
    "sha": "254f8bffb73cdb75a4fbb8ba1698b3cd663186fd",
    "filename": "src/main/java/com/streamr/client/protocol/message_layer/GroupKeyRequestAdapter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyRequestAdapter.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyRequestAdapter.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyRequestAdapter.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -30,7 +30,7 @@ public void toJson(JsonWriter writer, @Nullable GroupKeyRequest message) throws\n     writer.beginArray();\n     writer.value(message.getRequestId());\n     writer.value(message.getStreamId());\n-    writer.value(message.getPublicKey());\n+    writer.value(message.getRsaPublicKey());\n     listOfStrings.toJson(writer, message.getGroupKeyIds());\n     writer.endArray();\n   }"
  },
  {
    "sha": "7fe474fb69d13db2e3d166ebac5e8f7560e13a49",
    "filename": "src/main/java/com/streamr/client/protocol/message_layer/GroupKeyResponse.java",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyResponse.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyResponse.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/message_layer/GroupKeyResponse.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,21 +1,19 @@\n package com.streamr.client.protocol.message_layer;\n \n+import com.streamr.client.java.util.Objects;\n import com.streamr.client.utils.EncryptedGroupKey;\n import java.util.List;\n-import java.util.Objects;\n \n public final class GroupKeyResponse extends AbstractGroupKeyMessage {\n   private final String requestId;\n   private final List<EncryptedGroupKey> keys;\n \n   public GroupKeyResponse(String requestId, String streamId, List<EncryptedGroupKey> keys) {\n     super(streamId);\n-\n-    ValidationUtil.checkNotNull(requestId, \"requestId\");\n-    ValidationUtil.checkNotNull(keys, \"keys\");\n-    ValidationUtil.checkNotEmpty(keys, \"keys\");\n-\n+    Objects.requireNonNull(requestId, \"requestId\");\n     this.requestId = requestId;\n+    Objects.requireNonNull(keys, \"keys\");\n+    Objects.requireNonNull(keys, \"keys\");\n     this.keys = keys;\n   }\n "
  },
  {
    "sha": "287e03e6a61f4283a83e8ed8a7e448e6a48f0b96",
    "filename": "src/main/java/com/streamr/client/protocol/message_layer/MessageId.java",
    "status": "modified",
    "additions": 4,
    "deletions": 10,
    "changes": 14,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/MessageId.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/MessageId.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/message_layer/MessageId.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,8 +1,8 @@\n package com.streamr.client.protocol.message_layer;\n \n+import com.streamr.client.java.util.Objects;\n import com.streamr.client.utils.Address;\n import java.util.Date;\n-import java.util.Objects;\n \n public final class MessageId {\n   private final String streamId;\n@@ -19,20 +19,14 @@ private MessageId(\n       final long sequenceNumber,\n       final Address publisherId,\n       final String msgChainId) {\n-    if (streamId == null) {\n-      throw new MalformedMessageException(\"'streamId' cannot be null.\");\n-    }\n-    if (publisherId == null) {\n-      throw new MalformedMessageException(\"'publisherId' cannot be null.\");\n-    }\n-    if (msgChainId == null) {\n-      throw new MalformedMessageException(\"'msgChainId' cannot be null.\");\n-    }\n+    Objects.requireNonNull(streamId, \"'streamId' cannot be null.\");\n     this.streamId = streamId;\n     this.streamPartition = streamPartition;\n     this.timestamp = timestamp;\n     this.sequenceNumber = sequenceNumber;\n+    Objects.requireNonNull(publisherId, \"'publisherId' cannot be null.\");\n     this.publisherId = publisherId;\n+    Objects.requireNonNull(msgChainId, \"'msgChainId' cannot be null.\");\n     this.msgChainId = msgChainId;\n   }\n "
  },
  {
    "sha": "32c17efb8584b8a692639475741feec7dc08bd69",
    "filename": "src/main/java/com/streamr/client/protocol/message_layer/StreamMessage.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/StreamMessage.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/StreamMessage.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/message_layer/StreamMessage.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,5 +1,6 @@\n package com.streamr.client.protocol.message_layer;\n \n+import com.streamr.client.java.util.Objects;\n import com.streamr.client.protocol.common.MessageRef;\n import com.streamr.client.protocol.common.UnsupportedMessageException;\n import com.streamr.client.utils.Address;\n@@ -11,7 +12,6 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Objects;\n import okio.Buffer;\n \n public final class StreamMessage implements ITimestamped {"
  },
  {
    "sha": "5c6ced05077cca7eb0eab9832b72d7dd660b2b1a",
    "filename": "src/main/java/com/streamr/client/protocol/message_layer/ValidationUtil.java",
    "status": "modified",
    "additions": 4,
    "deletions": 8,
    "changes": 12,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/ValidationUtil.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/protocol/message_layer/ValidationUtil.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/protocol/message_layer/ValidationUtil.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,17 +1,13 @@\n package com.streamr.client.protocol.message_layer;\n \n+import com.streamr.client.java.util.Objects;\n import java.util.Collection;\n \n class ValidationUtil {\n-  static void checkNotNull(Object value, String fieldName) {\n-    if (value == null) {\n-      throw new MalformedMessageException(fieldName + \" can not be null\");\n-    }\n-  }\n-\n-  static <T> void checkNotEmpty(Collection<T> collection, String fieldName) {\n+  static <T> void checkNotEmpty(final Collection<T> collection, final String fieldName) {\n+    Objects.requireNonNull(collection, fieldName);\n     if (collection.isEmpty()) {\n-      throw new MalformedMessageException(fieldName + \" can not be empty\");\n+      throw new IllegalArgumentException(fieldName + \" can not be empty\");\n     }\n   }\n }"
  },
  {
    "sha": "5bbc8c1b5db7bf706cf9b41d368980c80d6ff7a5",
    "filename": "src/main/java/com/streamr/client/rest/AbstractStreamrClient.java",
    "status": "removed",
    "additions": 0,
    "deletions": 62,
    "changes": 62,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/aa1dc4b15f2e3a035404b4584ca5709b2c85742f/src/main/java/com/streamr/client/rest/AbstractStreamrClient.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/aa1dc4b15f2e3a035404b4584ca5709b2c85742f/src/main/java/com/streamr/client/rest/AbstractStreamrClient.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/rest/AbstractStreamrClient.java?ref=aa1dc4b15f2e3a035404b4584ca5709b2c85742f",
    "patch": "@@ -1,62 +0,0 @@\n-package com.streamr.client.rest;\n-\n-import com.streamr.client.options.StreamrClientOptions;\n-import com.streamr.client.utils.Address;\n-import java.io.IOException;\n-import java.util.List;\n-\n-/**\n- * Provides the barebones of a StreamrClient, including holding the config, providing JSON\n- * serializers etc.\n- */\n-public abstract class AbstractStreamrClient {\n-  protected final StreamrClientOptions options;\n-\n-  protected final Session session;\n-\n-  public AbstractStreamrClient(StreamrClientOptions options) {\n-    this.options = options;\n-\n-    // Create Session object based on what kind of authentication method is provided in options\n-    session = new Session(options.getRestApiUrl(), options.getAuthenticationMethod());\n-  }\n-\n-  public StreamrClientOptions getOptions() {\n-    return options;\n-  }\n-\n-  public String getSessionToken() {\n-    return session.getSessionToken();\n-  }\n-\n-  // TODO: These methods below are part of StreamrClient interface\n-\n-  public abstract Stream createStream(final Stream stream) throws IOException;\n-\n-  public abstract Permission grant(\n-      final Stream stream, final Permission.Operation operation, final String user)\n-      throws IOException;\n-\n-  public abstract Permission grantPublic(final Stream stream, final Permission.Operation operation)\n-      throws IOException;\n-\n-  public abstract UserInfo getUserInfo() throws IOException;\n-\n-  public abstract List<String> getPublishers(final String streamId) throws IOException;\n-\n-  public abstract boolean isPublisher(final String streamId, final Address address)\n-      throws IOException;\n-\n-  public abstract boolean isPublisher(final String streamId, final String ethAddress)\n-      throws IOException;\n-\n-  public abstract List<String> getSubscribers(final String streamId) throws IOException;\n-\n-  public abstract boolean isSubscriber(final String streamId, final Address address)\n-      throws IOException;\n-\n-  public abstract boolean isSubscriber(final String streamId, final String ethAddress)\n-      throws IOException;\n-\n-  public abstract void logout() throws IOException;\n-}"
  },
  {
    "sha": "09df328fbb9eb3273d4b44fbd184e481f8785cf2",
    "filename": "src/main/java/com/streamr/client/rest/AmbiguousResultsException.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/streamr-dev/streamr-client-java/blob/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/rest/AmbiguousResultsException.java",
    "raw_url": "https://github.com/streamr-dev/streamr-client-java/raw/cec6ff431c667489ba647a5f85094123c3660efb/src/main/java/com/streamr/client/rest/AmbiguousResultsException.java",
    "contents_url": "https://api.github.com/repos/streamr-dev/streamr-client-java/contents/src/main/java/com/streamr/client/rest/AmbiguousResultsException.java?ref=cec6ff431c667489ba647a5f85094123c3660efb",
    "patch": "@@ -1,7 +1,7 @@\n package com.streamr.client.rest;\n \n public class AmbiguousResultsException extends RuntimeException {\n-  public AmbiguousResultsException(String message) {\n+  public AmbiguousResultsException(final String message) {\n     super(message);\n   }\n }"
  }
]
