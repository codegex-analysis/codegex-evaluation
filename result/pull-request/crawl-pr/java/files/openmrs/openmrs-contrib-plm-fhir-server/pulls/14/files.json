[
  {
    "sha": "89d492d57c72cba6778d167b68086bc7ed3b71f4",
    "filename": ".github/workflows/build-images.yaml",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/blob/390dad79741cb643e4ff02953ad04bb089b1dd22/.github/workflows/build-images.yaml",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/raw/390dad79741cb643e4ff02953ad04bb089b1dd22/.github/workflows/build-images.yaml",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-plm-fhir-server/contents/.github/workflows/build-images.yaml?ref=390dad79741cb643e4ff02953ad04bb089b1dd22",
    "patch": "@@ -0,0 +1,81 @@\n+name: Build Container Images\n+\n+on:\n+  push:\n+    tags:\n+      - \"image/v*\"\n+  pull_request:\n+    branches: [master]\n+\n+jobs:\n+  build:\n+    name: Build\n+    runs-on: ubuntu-20.04\n+    steps:\n+      - name: Docker meta\n+        id: docker_meta\n+        uses: crazy-max/ghaction-docker-meta@v1\n+        with:\n+          images: |\n+            ghcr.io/hapifhir/hapi\n+            docker.io/hapiproject/hapi\n+          tag-sha: false\n+          tag-match: \"v(.*)\"\n+      # waiting for https://github.com/crazy-max/ghaction-docker-meta/issues/13 for a cleaner solution\n+      - name: Docker distroless meta\n+        id: docker_distroless_meta\n+        uses: crazy-max/ghaction-docker-meta@v1\n+        with:\n+          images: |\n+            ghcr.io/hapifhir/hapi\n+            docker.io/hapiproject/hapi\n+          tag-sha: false\n+          tag-match: \"v(.*)\"\n+          sep-tags: -distroless,\n+      - name: Set up QEMU\n+        uses: docker/setup-qemu-action@v1\n+      - name: Set up Docker Buildx\n+        uses: docker/setup-buildx-action@v1\n+      - name: Login to DockerHub\n+        uses: docker/login-action@v1\n+        if: github.event_name != 'pull_request'\n+        with:\n+          username: ${{ secrets.DOCKERHUB_USERNAME }}\n+          password: ${{ secrets.DOCKERHUB_TOKEN }}\n+      - name: Login to GitHub Container Registry\n+        uses: docker/login-action@v1\n+        if: github.event_name != 'pull_request'\n+        with:\n+          registry: ghcr.io\n+          username: ${{ github.repository_owner }}\n+          password: ${{ secrets.GHCR_TOKEN }}\n+      - name: Cache Docker layers\n+        uses: actions/cache@v2\n+        with:\n+          path: /tmp/.buildx-cache\n+          key: ${{ runner.os }}-buildx-${{ github.sha }}\n+          restore-keys: |\n+            ${{ runner.os }}-buildx-\n+      - name: Build and push\n+        id: docker_build\n+        uses: docker/build-push-action@v2\n+        with:\n+          cache-from: type=local,src=/tmp/.buildx-cache\n+          cache-to: type=local,dest=/tmp/.buildx-cache\n+          push: ${{ github.event_name != 'pull_request' }}\n+          tags: ${{ steps.docker_meta.outputs.tags }}\n+          labels: ${{ steps.docker_meta.outputs.labels }}\n+      - name: Build and push distroless\n+        id: docker_build_distroless\n+        uses: docker/build-push-action@v2\n+        with:\n+          cache-from: type=local,src=/tmp/.buildx-cache\n+          cache-to: type=local,dest=/tmp/.buildx-cache\n+          push: ${{ github.event_name != 'pull_request' }}\n+          tags: ${{ steps.docker_distroless_meta.outputs.tags }}-distroless\n+          labels: ${{ steps.docker_distroless_meta.outputs.labels }}\n+          target: release-distroless\n+      - name: Print image digests\n+        run: |\n+          echo ${{ steps.docker_build.outputs.digest }}\n+          echo ${{ steps.docker_build_distroless.outputs.digest }}"
  },
  {
    "sha": "64a647844245ed6fca7a84133af9c8a4af6af842",
    "filename": "Dockerfile",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/blob/390dad79741cb643e4ff02953ad04bb089b1dd22/Dockerfile",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/raw/390dad79741cb643e4ff02953ad04bb089b1dd22/Dockerfile",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-plm-fhir-server/contents/Dockerfile?ref=390dad79741cb643e4ff02953ad04bb089b1dd22",
    "patch": "@@ -7,6 +7,21 @@ RUN mvn -ntp dependency:go-offline\n COPY src/ /tmp/hapi-fhir-jpaserver-starter/src/\n RUN mvn clean install -DskipTests\n \n+FROM build-hapi AS build-distroless\n+RUN mvn package spring-boot:repackage -Pboot\n+RUN mkdir /app && \\\n+    cp /tmp/hapi-fhir-jpaserver-starter/target/ROOT.war /app/main.war\n+\n+FROM gcr.io/distroless/java-debian10:11 AS release-distroless\n+COPY --chown=nonroot:nonroot --from=build-distroless /app /app\n+EXPOSE 8080\n+# 65532 is the nonroot user's uid\n+# used here instead of the name to allow Kubernetes to easily detect that the container\n+# is running as a non-root (uid != 0) user.\n+USER 65532:65532\n+WORKDIR /app\n+CMD [\"/app/main.war\"]\n+\n FROM tomcat:9.0.38-jdk11-openjdk-slim-buster\n \n RUN mkdir -p /data/hapi/lucenefiles && chmod 775 /data/hapi/lucenefiles"
  },
  {
    "sha": "95edfc7e6d47666f5e7f726c2be112409d46ba7a",
    "filename": "README.md",
    "status": "modified",
    "additions": 9,
    "deletions": 18,
    "changes": 27,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/blob/390dad79741cb643e4ff02953ad04bb089b1dd22/README.md",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/raw/390dad79741cb643e4ff02953ad04bb089b1dd22/README.md",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-plm-fhir-server/contents/README.md?ref=390dad79741cb643e4ff02953ad04bb089b1dd22",
    "patch": "@@ -322,7 +322,7 @@ Set `hapi.fhir.cql_enabled=true` in the [application.yaml](https://github.com/ha\n \n ## Enabling MDM (EMPI)\n \n-Set `hapi.fhir.mdm_enabled=true` in the [application.yaml](https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/resources/application.yaml) file to enable MDM on this server.  The MDM matching rules are configured in [mdm-rules.json](https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/resources/mdm-rules.json).  The rules in this example file should be replaced with actual matching rules appropriate to your data. Note that MDM relies on subscriptions, so for MDM to work, subscriptions must be enabled. \n+Set `hapi.fhir.mdm_enabled=true` in the [application.yaml](https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/resources/application.yaml) file to enable MDM on this server.  The MDM matching rules are configured in [mdm-rules.json](https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/resources/mdm-rules.json).  The rules in this example file should be replaced with actual matching rules appropriate to your data. Note that MDM relies on subscriptions, so for MDM to work, subscriptions must be enabled.\n \n ## Using Elasticsearch\n \n@@ -344,23 +344,14 @@ elasticsearch.schema_management_strategy=CREATE\n \n Set `hapi.fhir.lastn_enabled=true` in the [application.yaml](https://github.com/hapifhir/hapi-fhir-jpaserver-starter/blob/master/src/main/resources/application.yaml) file to enable the $lastn operation on this server.  Note that the $lastn operation relies on Elasticsearch, so for $lastn to work, indexing must be enabled using Elasticsearch.\n \n-## Example of a Dockerfile based on distroless images (for lower footprint and improved security)\n+## Build the distroless variant of the image (for lower footprint and improved security)\n \n-```code\n-FROM maven:3.6.3-jdk-11-slim as build-hapi\n-WORKDIR /tmp/hapi-fhir-jpaserver-starter\n+The default Dockerfile contains a `release-distroless` stage to build a variant of the image\n+using the `gcr.io/distroless/java-debian10:11` base image:\n \n-COPY pom.xml .\n-RUN mvn -ntp dependency:go-offline\n-\n-COPY src/ /tmp/hapi-fhir-jpaserver-starter/src/\n-RUN mvn clean package spring-boot:repackage -Pboot\n-\n-FROM gcr.io/distroless/java:11\n-\n-COPY --from=build-hapi /tmp/hapi-fhir-jpaserver-starter/target/ROOT.war /app/main.war\n-\n-EXPOSE 8080\n-WORKDIR /app\n-CMD [\"main.war\"]\n+```sh\n+docker build --target=release-distroless -t hapi-fhir:distroless .\n ```\n+\n+Note that distroless images are also automatically build and pushed to the container registry,\n+see the `-distroless` suffix in the image tags."
  },
  {
    "sha": "5d8d98a76a77402992cb872e211f4abf9399cf08",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/blob/390dad79741cb643e4ff02953ad04bb089b1dd22/pom.xml",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/raw/390dad79741cb643e4ff02953ad04bb089b1dd22/pom.xml",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-plm-fhir-server/contents/pom.xml?ref=390dad79741cb643e4ff02953ad04bb089b1dd22",
    "patch": "@@ -126,7 +126,6 @@\n             <artifactId>hapi-fhir-testpage-overlay</artifactId>\n             <version>${project.version}</version>\n             <classifier>classes</classifier>\n-\n         </dependency>\n \n         <!-- HAPI-FHIR uses Logback for logging support. The logback library is included automatically by Maven as a part of the hapi-fhir-base dependency, but you also need to include a logging library. Logback\n@@ -312,6 +311,21 @@\n \n     <build>\n \n+        <pluginManagement>\n+            <plugins>\n+                <!--\n+                There is a bug in 3.1.2 that prevents go-offline from working\n+                Reported here:\n+                https://issues.apache.org/jira/browse/MDEP-739\n+                -->\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-dependency-plugin</artifactId>\n+                    <version>3.1.1</version>\n+                </plugin>\n+            </plugins>\n+        </pluginManagement>\n+\n         <!-- Tells Maven to name the generated WAR file as ROOT.war -->\n         <finalName>ROOT</finalName>\n "
  },
  {
    "sha": "395515640b071f7bcbed1c7debbcc513bd7c7dda",
    "filename": "src/main/java/ca/uhn/fhir/jpa/starter/AppProperties.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/blob/390dad79741cb643e4ff02953ad04bb089b1dd22/src/main/java/ca/uhn/fhir/jpa/starter/AppProperties.java",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/raw/390dad79741cb643e4ff02953ad04bb089b1dd22/src/main/java/ca/uhn/fhir/jpa/starter/AppProperties.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-plm-fhir-server/contents/src/main/java/ca/uhn/fhir/jpa/starter/AppProperties.java?ref=390dad79741cb643e4ff02953ad04bb089b1dd22",
    "patch": "@@ -67,6 +67,25 @@\n   private Boolean lastn_enabled = false;\n   private NormalizedQuantitySearchLevel normalized_quantity_search_level = NormalizedQuantitySearchLevel.NORMALIZED_QUANTITY_SEARCH_NOT_SUPPORTED;\n \n+  private Boolean use_apache_address_strategy = false;\n+  private Boolean use_apache_address_strategy_https = false;\n+\n+  public Boolean getUse_apache_address_strategy() {\n+    return use_apache_address_strategy;\n+  }\n+\n+  public void setUse_apache_address_strategy(Boolean use_apache_address_strategy) {\n+    this.use_apache_address_strategy = use_apache_address_strategy;\n+  }\n+\n+    public Boolean getUse_apache_address_strategy_https() {\n+    return use_apache_address_strategy_https;\n+  }\n+\n+  public void setUse_apache_address_strategy_https(Boolean use_apache_address_strategy_https) {\n+    this.use_apache_address_strategy_https = use_apache_address_strategy_https;\n+  }\n+\n   public Integer getDefer_indexing_for_codesystems_of_size() {\n     return defer_indexing_for_codesystems_of_size;\n   }"
  },
  {
    "sha": "8154714e0f5e46a3af23061568d5a59dc54d1c6d",
    "filename": "src/main/java/ca/uhn/fhir/jpa/starter/BaseJpaRestfulServer.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/blob/390dad79741cb643e4ff02953ad04bb089b1dd22/src/main/java/ca/uhn/fhir/jpa/starter/BaseJpaRestfulServer.java",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/raw/390dad79741cb643e4ff02953ad04bb089b1dd22/src/main/java/ca/uhn/fhir/jpa/starter/BaseJpaRestfulServer.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-plm-fhir-server/contents/src/main/java/ca/uhn/fhir/jpa/starter/BaseJpaRestfulServer.java?ref=390dad79741cb643e4ff02953ad04bb089b1dd22",
    "patch": "@@ -27,6 +27,8 @@\n import ca.uhn.fhir.narrative2.NullNarrativeGenerator;\n import ca.uhn.fhir.rest.server.ETagSupportEnum;\n import ca.uhn.fhir.rest.server.HardcodedServerAddressStrategy;\n+import ca.uhn.fhir.rest.server.ApacheProxyAddressStrategy;\n+import ca.uhn.fhir.rest.server.IncomingRequestAddressStrategy;\n import ca.uhn.fhir.rest.server.RestfulServer;\n import ca.uhn.fhir.rest.server.interceptor.*;\n import ca.uhn.fhir.rest.server.interceptor.partition.RequestTenantPartitionInterceptor;\n@@ -239,6 +241,12 @@ protected void initialize() throws ServletException {\n     String serverAddress = appProperties.getServer_address();\n     if (!Strings.isNullOrEmpty(serverAddress)) {\n       setServerAddressStrategy(new HardcodedServerAddressStrategy(serverAddress));\n+    } else if (appProperties.getUse_apache_address_strategy()) {\n+      boolean useHttps = appProperties.getUse_apache_address_strategy_https();\n+      setServerAddressStrategy(useHttps ? ApacheProxyAddressStrategy.forHttps() :\n+                    ApacheProxyAddressStrategy.forHttp());\n+    } else {\n+      setServerAddressStrategy(new IncomingRequestAddressStrategy());\n     }\n \n     /*"
  },
  {
    "sha": "2efe064e9fd55cfdd0c32ac73c04ba2e65d6227b",
    "filename": "src/main/java/ca/uhn/fhir/jpa/starter/EnvironmentHelper.java",
    "status": "modified",
    "additions": 160,
    "deletions": 144,
    "changes": 304,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/blob/390dad79741cb643e4ff02953ad04bb089b1dd22/src/main/java/ca/uhn/fhir/jpa/starter/EnvironmentHelper.java",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/raw/390dad79741cb643e4ff02953ad04bb089b1dd22/src/main/java/ca/uhn/fhir/jpa/starter/EnvironmentHelper.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-plm-fhir-server/contents/src/main/java/ca/uhn/fhir/jpa/starter/EnvironmentHelper.java?ref=390dad79741cb643e4ff02953ad04bb089b1dd22",
    "patch": "@@ -1,170 +1,186 @@\n package ca.uhn.fhir.jpa.starter;\n \n+import ca.uhn.fhir.jpa.config.HapiFhirLocalContainerEntityManagerFactoryBean;\n import ca.uhn.fhir.jpa.search.HapiLuceneAnalysisConfigurer;\n import ca.uhn.fhir.jpa.search.elastic.ElasticsearchHibernatePropertiesBuilder;\n-import org.apache.commons.lang3.StringUtils;\n-import org.elasticsearch.action.admin.indices.stats.IndexStats;\n+import org.apache.lucene.util.Version;\n+import org.hibernate.cfg.AvailableSettings;\n+import org.hibernate.search.backend.elasticsearch.cfg.ElasticsearchBackendSettings;\n import org.hibernate.search.backend.elasticsearch.index.IndexStatus;\n import org.hibernate.search.backend.lucene.cfg.LuceneBackendSettings;\n import org.hibernate.search.backend.lucene.cfg.LuceneIndexSettings;\n+import org.hibernate.search.backend.lucene.lowlevel.directory.impl.LocalFileSystemDirectoryProvider;\n import org.hibernate.search.engine.cfg.BackendSettings;\n import org.hibernate.search.mapper.orm.automaticindexing.session.AutomaticIndexingSynchronizationStrategyNames;\n import org.hibernate.search.mapper.orm.cfg.HibernateOrmMapperSettings;\n import org.hibernate.search.mapper.orm.schema.management.SchemaManagementStrategyName;\n+import org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy;\n+import org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy;\n import org.springframework.core.env.CompositePropertySource;\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.EnumerablePropertySource;\n import org.springframework.core.env.PropertySource;\n \n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n+import java.util.*;\n \n public class EnvironmentHelper {\n \n-  public static Properties getHibernateProperties(ConfigurableEnvironment environment) {\n-    Properties properties = new Properties();\n-\n-    Map<String, Object> jpaProps = getPropertiesStartingWith(environment, \"spring.jpa.properties\");\n-    properties.putIfAbsent(\"hibernate.format_sql\", \"false\");\n-    properties.putIfAbsent(\"hibernate.show_sql\", \"false\");\n-    properties.putIfAbsent(\"hibernate.hbm2ddl.auto\", \"update\");\n-    properties.putIfAbsent(\"hibernate.jdbc.batch_size\", \"20\");\n-    properties.putIfAbsent(\"hibernate.cache.use_query_cache\", \"false\");\n-    properties.putIfAbsent(\"hibernate.cache.use_second_level_cache\", \"false\");\n-    properties.putIfAbsent(\"hibernate.cache.use_structured_entries\", \"false\");\n-    properties.putIfAbsent(\"hibernate.cache.use_minimal_puts\", \"false\");\n-\n-    if (jpaProps.getOrDefault(\"spring.jpa.properties.hibernate.search.enabled\", \"false\").toString() == \"true\") {\n-\t\t properties.putIfAbsent(HibernateOrmMapperSettings.ENABLED, true);\n-\t\t properties.putIfAbsent(BackendSettings.backendKey(LuceneIndexSettings.DIRECTORY_TYPE), \"local-filesystem\");\n-\t\t properties.putIfAbsent(BackendSettings.backendKey(LuceneIndexSettings.DIRECTORY_ROOT), \"target/lucenefiles\");\n-\t\t properties.putIfAbsent(BackendSettings.backendKey(BackendSettings.TYPE), \"lucene\");\n-\t\t properties.putIfAbsent(BackendSettings.backendKey(LuceneBackendSettings.ANALYSIS_CONFIGURER), HapiLuceneAnalysisConfigurer.class.getName());\n-\t\t properties.putIfAbsent(BackendSettings.backendKey(LuceneBackendSettings.LUCENE_VERSION), \"LUCENE_CURRENT\");\n-\t } else {\n-    \tproperties.putIfAbsent(HibernateOrmMapperSettings.ENABLED, false);\n-\t }\n-\n-    for (Map.Entry<String, Object> entry : jpaProps.entrySet()) {\n-      String strippedKey = entry.getKey().replace(\"spring.jpa.properties.\", \"\");\n-      properties.put(strippedKey, entry.getValue().toString());\n-    }\n-\n-\n-    if (environment.getProperty(\"elasticsearch.enabled\", Boolean.class) != null\n-      && environment.getProperty(\"elasticsearch.enabled\", Boolean.class) == true) {\n-      ElasticsearchHibernatePropertiesBuilder builder = new ElasticsearchHibernatePropertiesBuilder();\n-      IndexStatus requiredIndexStatus = environment.getProperty(\"elasticsearch.required_index_status\", IndexStatus.class);\n-      if (requiredIndexStatus == null) {\n-        builder.setRequiredIndexStatus(IndexStatus.YELLOW);\n-      } else {\n-        builder.setRequiredIndexStatus(requiredIndexStatus);\n-      }\n-\n-      builder.setRestUrl(getElasticsearchServerUrl(environment));\n-      builder.setUsername(getElasticsearchServerUsername(environment));\n-      builder.setPassword(getElasticsearchServerPassword(environment));\n-\t\tbuilder.setProtocol(getElasticsearchServerProtocol(environment));\n-\t\t SchemaManagementStrategyName indexSchemaManagementStrategy = environment.getProperty(\"elasticsearch.schema_management_strategy\", SchemaManagementStrategyName.class);\n-      if (indexSchemaManagementStrategy == null) {\n-        builder.setIndexSchemaManagementStrategy(SchemaManagementStrategyName.CREATE);\n-      } else {\n-        builder.setIndexSchemaManagementStrategy(indexSchemaManagementStrategy);\n-      }\n-      //    pretty_print_json_log: false\n-      Boolean refreshAfterWrite = environment.getProperty(\"elasticsearch.debug.refresh_after_write\", Boolean.class);\n-      if (refreshAfterWrite == null || refreshAfterWrite == false) {\n-      \tbuilder.setDebugIndexSyncStrategy(AutomaticIndexingSynchronizationStrategyNames.ASYNC);\n-      } else {\n-\t\t\tbuilder.setDebugIndexSyncStrategy(AutomaticIndexingSynchronizationStrategyNames.READ_SYNC);\n-      }\n-      //    pretty_print_json_log: false\n-      Boolean prettyPrintJsonLog = environment.getProperty(\"elasticsearch.debug.pretty_print_json_log\", Boolean.class);\n-      if (prettyPrintJsonLog == null) {\n-        builder.setDebugPrettyPrintJsonLog(false);\n-      } else {\n-        builder.setDebugPrettyPrintJsonLog(prettyPrintJsonLog);\n-      }\n-      builder.apply(properties);\n-    }\n-    return properties;\n-  }\n-\n-  public static String getElasticsearchServerUrl(ConfigurableEnvironment environment) {\n-    return environment.getProperty(\"elasticsearch.rest_url\", String.class);\n-  }\n+\tpublic static Properties getHibernateProperties(ConfigurableEnvironment environment) {\n+\t\tProperties properties = new Properties();\n+\t\tMap<String, Object> jpaProps = getPropertiesStartingWith(environment, \"spring.jpa.properties\");\n+\t\tfor (Map.Entry<String, Object> entry : jpaProps.entrySet()) {\n+\t\t\tString strippedKey = entry.getKey().replace(\"spring.jpa.properties.\", \"\");\n+\t\t\tproperties.put(strippedKey, entry.getValue().toString());\n+\t\t}\n+\n+\t\t//Spring Boot Autoconfiguration defaults\n+\t\tproperties.putIfAbsent(AvailableSettings.SCANNER, \"org.hibernate.boot.archive.scan.internal.DisabledScanner\");\n+\t\tproperties.putIfAbsent(AvailableSettings.IMPLICIT_NAMING_STRATEGY, SpringImplicitNamingStrategy.class.getName());\n+\t\tproperties.putIfAbsent(AvailableSettings.PHYSICAL_NAMING_STRATEGY, SpringPhysicalNamingStrategy.class.getName());\n+\t\t//TODO The bean factory should be added as parameter but that requires that it can be injected from the entityManagerFactory bean from xBaseConfig\n+\t\t//properties.putIfAbsent(AvailableSettings.BEAN_CONTAINER, new SpringBeanContainer(beanFactory));\n+\n+\t\t//hapi-fhir-jpaserver-base \"sensible defaults\"\n+\t\tMap<String, Object> hapiJpaPropertyMap = new HapiFhirLocalContainerEntityManagerFactoryBean().getJpaPropertyMap();\n+\t\thapiJpaPropertyMap.forEach(properties::putIfAbsent);\n+\n+\t\t//hapi-fhir-jpaserver-starter defaults\n+\t\tproperties.putIfAbsent(AvailableSettings.FORMAT_SQL, false);\n+\t\tproperties.putIfAbsent(AvailableSettings.SHOW_SQL, false);\n+\t\tproperties.putIfAbsent(AvailableSettings.HBM2DDL_AUTO, \"update\");\n+\t\tproperties.putIfAbsent(AvailableSettings.STATEMENT_BATCH_SIZE, 20);\n+\t\tproperties.putIfAbsent(AvailableSettings.USE_QUERY_CACHE, false);\n+\t\tproperties.putIfAbsent(AvailableSettings.USE_SECOND_LEVEL_CACHE, false);\n+\t\tproperties.putIfAbsent(AvailableSettings.USE_STRUCTURED_CACHE, false);\n+\t\tproperties.putIfAbsent(AvailableSettings.USE_MINIMAL_PUTS, false);\n+\n+\t\t//Hibernate Search defaults\n+\t\tproperties.putIfAbsent(HibernateOrmMapperSettings.ENABLED, false);\n+\t\tif (Boolean.parseBoolean(String.valueOf(properties.get(HibernateOrmMapperSettings.ENABLED)))) {\n+\t\t\tif (isElasticsearchEnabled(environment)) {\n+\t\t\t\tproperties.putIfAbsent(BackendSettings.backendKey(BackendSettings.TYPE), ElasticsearchBackendSettings.TYPE_NAME);\n+\t\t\t} else {\n+\t\t\t\tproperties.putIfAbsent(BackendSettings.backendKey(BackendSettings.TYPE), LuceneBackendSettings.TYPE_NAME);\n+\t\t\t}\n+\n+\t\t\tif (properties.get(BackendSettings.backendKey(BackendSettings.TYPE)).equals(LuceneBackendSettings.TYPE_NAME)) {\n+\t\t\t\tproperties.putIfAbsent(BackendSettings.backendKey(LuceneIndexSettings.DIRECTORY_TYPE), LocalFileSystemDirectoryProvider.NAME);\n+\t\t\t\tproperties.putIfAbsent(BackendSettings.backendKey(LuceneIndexSettings.DIRECTORY_ROOT), \"target/lucenefiles\");\n+\t\t\t\tproperties.putIfAbsent(BackendSettings.backendKey(LuceneBackendSettings.ANALYSIS_CONFIGURER), HapiLuceneAnalysisConfigurer.class.getName());\n+\t\t\t\tproperties.putIfAbsent(BackendSettings.backendKey(LuceneBackendSettings.LUCENE_VERSION), Version.LATEST);\n+\n+\t\t\t} else if (properties.get(BackendSettings.backendKey(BackendSettings.TYPE)).equals(ElasticsearchBackendSettings.TYPE_NAME)) {\n+\t\t\t\tElasticsearchHibernatePropertiesBuilder builder = new ElasticsearchHibernatePropertiesBuilder();\n+\t\t\t\tIndexStatus requiredIndexStatus = environment.getProperty(\"elasticsearch.required_index_status\", IndexStatus.class);\n+\t\t\t\tbuilder.setRequiredIndexStatus(requireNonNullElse(requiredIndexStatus, IndexStatus.YELLOW));\n+\t\t\t\tbuilder.setRestUrl(getElasticsearchServerUrl(environment));\n+\t\t\t\tbuilder.setUsername(getElasticsearchServerUsername(environment));\n+\t\t\t\tbuilder.setPassword(getElasticsearchServerPassword(environment));\n+\t\t\t\tbuilder.setProtocol(getElasticsearchServerProtocol(environment));\n+\t\t\t\tSchemaManagementStrategyName indexSchemaManagementStrategy = environment.getProperty(\"elasticsearch.schema_management_strategy\", SchemaManagementStrategyName.class);\n+\t\t\t\tbuilder.setIndexSchemaManagementStrategy(requireNonNullElse(indexSchemaManagementStrategy, SchemaManagementStrategyName.CREATE));\n+\t\t\t\tBoolean refreshAfterWrite = environment.getProperty(\"elasticsearch.debug.refresh_after_write\", Boolean.class);\n+\t\t\t\tif (refreshAfterWrite == null || !refreshAfterWrite) {\n+\t\t\t\t\tbuilder.setDebugIndexSyncStrategy(AutomaticIndexingSynchronizationStrategyNames.ASYNC);\n+\t\t\t\t} else {\n+\t\t\t\t\tbuilder.setDebugIndexSyncStrategy(AutomaticIndexingSynchronizationStrategyNames.READ_SYNC);\n+\t\t\t\t}\n+\t\t\t\tbuilder.setDebugPrettyPrintJsonLog(requireNonNullElse(environment.getProperty(\"elasticsearch.debug.pretty_print_json_log\", Boolean.class), false));\n+\t\t\t\tbuilder.apply(properties);\n+\n+\t\t\t} else {\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported Hibernate Search backend: \" + properties.get(BackendSettings.backendKey(BackendSettings.TYPE)));\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn properties;\n+\t}\n+\n+\t//TODO Removed when we're up on Java 11\n+\tprivate static <T> T requireNonNullElse(T obj, T defaultObj) {\n+\t\treturn (obj != null) ? obj : requireNonNull(defaultObj, \"defaultObj\");\n+\t}\n+\n+\t//TODO Removed when we're up on Java 11\n+\tprivate static <T> T requireNonNull(T obj, String message) {\n+\t\tif (obj == null)\n+\t\t\tthrow new NullPointerException(message);\n+\t\treturn obj;\n+\t}\n+\n+\tpublic static String getElasticsearchServerUrl(ConfigurableEnvironment environment) {\n+\t\treturn environment.getProperty(\"elasticsearch.rest_url\", String.class);\n+\t}\n \n \tpublic static String getElasticsearchServerProtocol(ConfigurableEnvironment environment) {\n \t\treturn environment.getProperty(\"elasticsearch.protocol\", String.class, \"http\");\n \t}\n \n \tpublic static String getElasticsearchServerUsername(ConfigurableEnvironment environment) {\n-    return environment.getProperty(\"elasticsearch.username\");\n-  }\n-\n-  public static String getElasticsearchServerPassword(ConfigurableEnvironment environment) {\n-    return environment.getProperty(\"elasticsearch.password\");\n-  }\n-\n-  public static Boolean isElasticsearchEnabled(ConfigurableEnvironment environment) {\n-    if (environment.getProperty(\"elasticsearch.enabled\", Boolean.class) != null) {\n-      return environment.getProperty(\"elasticsearch.enabled\", Boolean.class);\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-  public static Map<String, Object> getPropertiesStartingWith(ConfigurableEnvironment aEnv,\n-                                                              String aKeyPrefix) {\n-    Map<String, Object> result = new HashMap<>();\n-\n-    Map<String, Object> map = getAllProperties(aEnv);\n-\n-    for (Map.Entry<String, Object> entry : map.entrySet()) {\n-      String key = entry.getKey();\n-\n-      if (key.startsWith(aKeyPrefix)) {\n-        result.put(key, entry.getValue());\n-      }\n-    }\n-\n-    return result;\n-  }\n-\n-  public static Map<String, Object> getAllProperties(ConfigurableEnvironment aEnv) {\n-    Map<String, Object> result = new HashMap<>();\n-    aEnv.getPropertySources().forEach(ps -> addAll(result, getAllProperties(ps)));\n-    return result;\n-  }\n-\n-  public static Map<String, Object> getAllProperties(PropertySource<?> aPropSource) {\n-    Map<String, Object> result = new HashMap<>();\n-\n-    if (aPropSource instanceof CompositePropertySource) {\n-      CompositePropertySource cps = (CompositePropertySource) aPropSource;\n-      cps.getPropertySources().forEach(ps -> addAll(result, getAllProperties(ps)));\n-      return result;\n-    }\n-\n-    if (aPropSource instanceof EnumerablePropertySource<?>) {\n-      EnumerablePropertySource<?> ps = (EnumerablePropertySource<?>) aPropSource;\n-      Arrays.asList(ps.getPropertyNames()).forEach(key -> result.put(key, ps.getProperty(key)));\n-      return result;\n-    }\n-\n-    return result;\n-\n-  }\n-\n-  private static void addAll(Map<String, Object> aBase, Map<String, Object> aToBeAdded) {\n-    for (Map.Entry<String, Object> entry : aToBeAdded.entrySet()) {\n-      if (aBase.containsKey(entry.getKey())) {\n-        continue;\n-      }\n-\n-      aBase.put(entry.getKey(), entry.getValue());\n-    }\n-  }\n+\t\treturn environment.getProperty(\"elasticsearch.username\");\n+\t}\n+\n+\tpublic static String getElasticsearchServerPassword(ConfigurableEnvironment environment) {\n+\t\treturn environment.getProperty(\"elasticsearch.password\");\n+\t}\n+\n+\tpublic static Boolean isElasticsearchEnabled(ConfigurableEnvironment environment) {\n+\t\tif (environment.getProperty(\"elasticsearch.enabled\", Boolean.class) != null) {\n+\t\t\treturn environment.getProperty(\"elasticsearch.enabled\", Boolean.class);\n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tpublic static Map<String, Object> getPropertiesStartingWith(ConfigurableEnvironment aEnv,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tString aKeyPrefix) {\n+\t\tMap<String, Object> result = new HashMap<>();\n+\n+\t\tMap<String, Object> map = getAllProperties(aEnv);\n+\n+\t\tfor (Map.Entry<String, Object> entry : map.entrySet()) {\n+\t\t\tString key = entry.getKey();\n+\n+\t\t\tif (key.startsWith(aKeyPrefix)) {\n+\t\t\t\tresult.put(key, entry.getValue());\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn result;\n+\t}\n+\n+\tpublic static Map<String, Object> getAllProperties(ConfigurableEnvironment aEnv) {\n+\t\tMap<String, Object> result = new HashMap<>();\n+\t\taEnv.getPropertySources().forEach(ps -> addAll(result, getAllProperties(ps)));\n+\t\treturn result;\n+\t}\n+\n+\tpublic static Map<String, Object> getAllProperties(PropertySource<?> aPropSource) {\n+\t\tMap<String, Object> result = new HashMap<>();\n+\n+\t\tif (aPropSource instanceof CompositePropertySource) {\n+\t\t\tCompositePropertySource cps = (CompositePropertySource) aPropSource;\n+\t\t\tcps.getPropertySources().forEach(ps -> addAll(result, getAllProperties(ps)));\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\tif (aPropSource instanceof EnumerablePropertySource<?>) {\n+\t\t\tEnumerablePropertySource<?> ps = (EnumerablePropertySource<?>) aPropSource;\n+\t\t\tArrays.asList(ps.getPropertyNames()).forEach(key -> result.put(key, ps.getProperty(key)));\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\treturn result;\n+\n+\t}\n+\n+\tprivate static void addAll(Map<String, Object> aBase, Map<String, Object> aToBeAdded) {\n+\t\tfor (Map.Entry<String, Object> entry : aToBeAdded.entrySet()) {\n+\t\t\tif (aBase.containsKey(entry.getKey())) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\taBase.put(entry.getKey(), entry.getValue());\n+\t\t}\n+\t}\n }"
  },
  {
    "sha": "6d685bdd4e4022aaf53780b2f61660dd56ba2c82",
    "filename": "src/main/resources/application.yaml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/blob/390dad79741cb643e4ff02953ad04bb089b1dd22/src/main/resources/application.yaml",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-plm-fhir-server/raw/390dad79741cb643e4ff02953ad04bb089b1dd22/src/main/resources/application.yaml",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-plm-fhir-server/contents/src/main/resources/application.yaml?ref=390dad79741cb643e4ff02953ad04bb089b1dd22",
    "patch": "@@ -32,6 +32,12 @@ spring:\n \n hapi:\n   fhir:\n+    ### enable to use the ApacheProxyAddressStrategy which uses X-Forwarded-* headers\n+    ### to determine the FHIR server address\n+#   use_apache_address_strategy: false\n+    ### forces the use of the https:// protocol for the returned server address.\n+    ### alternatively, it may be set using the X-Forwarded-Proto header.\n+#   use_apache_address_strategy_https: false\n     ### enable to set the Server URL\n #    server_address: http://hapi.fhir.org/baseR4\n     ### This is the FHIR version. Choose between, DSTU2, DSTU3, R4 or R5"
  }
]
