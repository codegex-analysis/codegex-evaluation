[
  {
    "sha": "724f280b4ec9770c126b5402dde3b0e31dbe54bb",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LocationArrayAdapter.java",
    "status": "removed",
    "additions": 0,
    "deletions": 57,
    "changes": 57,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LocationArrayAdapter.java",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LocationArrayAdapter.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LocationArrayAdapter.java?ref=bba11e7ded890a51c35dd2ae47ee6c8246a938bc",
    "patch": "@@ -1,57 +0,0 @@\n-/*\n- * The contents of this file are subject to the OpenMRS Public License\n- * Version 1.0 (the \"License\"); you may not use this file except in\n- * compliance with the License. You may obtain a copy of the License at\n- * http://license.openmrs.org\n- *\n- * Software distributed under the License is distributed on an \"AS IS\"\n- * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n- * License for the specific language governing rights and limitations\n- * under the License.\n- *\n- * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n- */\n-\n-package org.openmrs.mobile.activities.login;\n-\n-import android.content.Context;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.ArrayAdapter;\n-import android.widget.TextView;\n-\n-import androidx.annotation.NonNull;\n-\n-import java.util.List;\n-\n-public class LocationArrayAdapter extends ArrayAdapter<String> {\n-    public LocationArrayAdapter(Context context, List<String> objects) {\n-        super(context, android.R.layout.simple_spinner_item, objects);\n-        setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n-    }\n-\n-    @Override\n-    public int getCount() {\n-        return super.getCount();\n-    }\n-\n-    @Override\n-    public View getDropDownView(int position, View convertView, @NonNull ViewGroup parent) {\n-        View v;\n-        if (position == 0) {\n-            TextView tv = new TextView(getContext());\n-            tv.setHeight(0);\n-            tv.setVisibility(View.GONE);\n-            v = tv;\n-        } else {\n-            v = super.getDropDownView(position, null, parent);\n-        }\n-        parent.setVerticalScrollBarEnabled(false);\n-        return v;\n-    }\n-\n-    @Override\n-    public long getItemId(int position) {\n-        return position;\n-    }\n-}"
  },
  {
    "sha": "c1fb08e8c847d515f56bc0e499998343a4267049",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LocationArrayAdapter.kt",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LocationArrayAdapter.kt",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LocationArrayAdapter.kt",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LocationArrayAdapter.kt?ref=2971f3fcac8e24c6943bcd6aa5afc076e1b33176",
    "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * The contents of this file are subject to the OpenMRS Public License\n+ * Version 1.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ * http://license.openmrs.org\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\"\n+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing rights and limitations\n+ * under the License.\n+ *\n+ * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n+ */\n+package org.openmrs.mobile.activities.login\n+\n+import android.R\n+import android.content.Context\n+import android.view.View\n+import android.view.ViewGroup\n+import android.widget.ArrayAdapter\n+import android.widget.TextView\n+\n+class LocationArrayAdapter(context: Context?, objects: List<String?>?) : ArrayAdapter<String?>(context!!, R.layout.simple_spinner_item, objects!!) {\n+    override fun getCount(): Int {\n+        return super.getCount()\n+    }\n+\n+    override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup?): View {\n+        val view: View\n+        if (position == 0) {\n+            val LocationTextView = TextView(context)\n+            LocationTextView.height = 0\n+            LocationTextView.visibility = View.GONE\n+            view = LocationTextView\n+        } else {\n+            view = super.getDropDownView(position, null, parent)\n+        }\n+        parent?.isVerticalScrollBarEnabled = false\n+        return view\n+    }\n+\n+    override fun getItemId(position: Int): Long {\n+        return position.toLong()\n+    }\n+\n+    init {\n+        setDropDownViewResource(R.layout.simple_spinner_dropdown_item)\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "660bd6880480734e04f14da6b3c0edd30a01420c",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginActivity.java",
    "status": "removed",
    "additions": 0,
    "deletions": 72,
    "changes": 72,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginActivity.java",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginActivity.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginActivity.java?ref=bba11e7ded890a51c35dd2ae47ee6c8246a938bc",
    "patch": "@@ -1,72 +0,0 @@\n-/*\n- * The contents of this file are subject to the OpenMRS Public License\n- * Version 1.0 (the \"License\"); you may not use this file except in\n- * compliance with the License. You may obtain a copy of the License at\n- * http://license.openmrs.org\n- *\n- * Software distributed under the License is distributed on an \"AS IS\"\n- * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n- * License for the specific language governing rights and limitations\n- * under the License.\n- *\n- * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n- */\n-\n-package org.openmrs.mobile.activities.login;\n-\n-import android.content.Intent;\n-import android.os.Bundle;\n-import android.view.Menu;\n-\n-import androidx.appcompat.app.ActionBar;\n-\n-import org.jetbrains.annotations.NotNull;\n-import org.openmrs.mobile.R;\n-import org.openmrs.mobile.activities.ACBaseActivity;\n-\n-public class LoginActivity extends ACBaseActivity {\n-    public LoginContract.Presenter mPresenter;\n-\n-    @Override\n-    protected void onCreate(Bundle savedInstanceState) {\n-        super.onCreate(savedInstanceState);\n-        setContentView(R.layout.activity_login);\n-\n-        ActionBar actionBar = getSupportActionBar();\n-        if (actionBar != null) {\n-            getSupportActionBar().setElevation(0);\n-            getSupportActionBar().setTitle(R.string.app_name);\n-        }\n-\n-        // Create fragment\n-        LoginFragment loginFragment =\n-                (LoginFragment) getSupportFragmentManager().findFragmentById(R.id.loginContentFrame);\n-        if (loginFragment == null) {\n-            loginFragment = LoginFragment.newInstance();\n-        }\n-        if (!loginFragment.isActive()) {\n-            addFragmentToActivity(getSupportFragmentManager(),\n-                    loginFragment, R.id.loginContentFrame);\n-        }\n-\n-        mPresenter = new LoginPresenter(loginFragment, mOpenMRS);\n-    }\n-\n-    @Override\n-    public void onSaveInstanceState(@NotNull Bundle outState) {\n-        super.onSaveInstanceState(outState);\n-    }\n-\n-    @Override\n-    public void onBackPressed() {\n-        Intent intent = new Intent(Intent.ACTION_MAIN);\n-        intent.addCategory(Intent.CATEGORY_HOME);\n-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-        startActivity(intent);\n-    }\n-\n-    @Override\n-    public boolean onCreateOptionsMenu(Menu menu) {\n-        return true;\n-    }\n-}"
  },
  {
    "sha": "f1f8e8c95f0ca27d21522cf5e77c912474faf262",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginActivity.kt",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginActivity.kt",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginActivity.kt",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginActivity.kt?ref=2971f3fcac8e24c6943bcd6aa5afc076e1b33176",
    "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * The contents of this file are subject to the OpenMRS Public License\n+ * Version 1.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ * http://license.openmrs.org\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\"\n+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing rights and limitations\n+ * under the License.\n+ *\n+ * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n+ */\n+package org.openmrs.mobile.activities.login\n+\n+import android.content.Intent\n+import android.os.Bundle\n+import android.view.Menu\n+import org.openmrs.mobile.R\n+import org.openmrs.mobile.activities.ACBaseActivity\n+\n+class LoginActivity : ACBaseActivity() {\n+    var mPresenter: LoginContract.Presenter? = null\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        setContentView(R.layout.activity_login)\n+        val actionBar = supportActionBar\n+        if (actionBar != null) {\n+            supportActionBar!!.elevation = 0f\n+            supportActionBar!!.setTitle(R.string.app_name)\n+        }\n+\n+        // Create fragment\n+        var loginFragment = supportFragmentManager.findFragmentById(R.id.loginContentFrame) as LoginFragment?\n+        if (loginFragment == null) {\n+            loginFragment = LoginFragment.newInstance()\n+        }\n+        if (!loginFragment.isActive) {\n+            addFragmentToActivity(supportFragmentManager,\n+                    loginFragment, R.id.loginContentFrame)\n+        }\n+        mPresenter = LoginPresenter(loginFragment, mOpenMRS)\n+    }\n+\n+    public override fun onSaveInstanceState(outState: Bundle) {\n+        super.onSaveInstanceState(outState)\n+    }\n+\n+    override fun onBackPressed() {\n+        val intent = Intent(Intent.ACTION_MAIN)\n+        intent.addCategory(Intent.CATEGORY_HOME)\n+        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\n+        startActivity(intent)\n+    }\n+\n+    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n+        return true\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "892020a671278d65de4a30987df535df4c6611d4",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginContract.java",
    "status": "removed",
    "additions": 0,
    "deletions": 74,
    "changes": 74,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginContract.java",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginContract.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginContract.java?ref=bba11e7ded890a51c35dd2ae47ee6c8246a938bc",
    "patch": "@@ -1,74 +0,0 @@\n-/*\n- * The contents of this file are subject to the OpenMRS Public License\n- * Version 1.0 (the \"License\"); you may not use this file except in\n- * compliance with the License. You may obtain a copy of the License at\n- * http://license.openmrs.org\n- *\n- * Software distributed under the License is distributed on an \"AS IS\"\n- * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n- * License for the specific language governing rights and limitations\n- * under the License.\n- *\n- * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n- */\n-\n-package org.openmrs.mobile.activities.login;\n-\n-import androidx.annotation.NonNull;\n-\n-import org.openmrs.mobile.activities.BasePresenterContract;\n-import org.openmrs.mobile.activities.BaseView;\n-import org.openmrs.mobile.databases.entities.LocationEntity;\n-import org.openmrs.mobile.utilities.ToastUtil;\n-\n-import java.util.List;\n-\n-public interface LoginContract {\n-    interface View extends BaseView<Presenter> {\n-        void hideSoftKeys();\n-\n-        void setPresenter(@NonNull Presenter presenter);\n-\n-        void showWarningDialog();\n-\n-        void showLoadingAnimation();\n-\n-        void hideLoadingAnimation();\n-\n-        void showLocationLoadingAnimation();\n-\n-        void hideUrlLoadingAnimation();\n-\n-        void finishLoginActivity();\n-\n-        void showInvalidURLSnackbar(String message);\n-\n-        void showInvalidURLSnackbar(int messageID);\n-\n-        void showInvalidLoginOrPasswordSnackbar();\n-\n-        void setLocationErrorOccurred(boolean errorOccurred);\n-\n-        void showToast(String message, ToastUtil.ToastType toastType);\n-\n-        void showToast(int textId, ToastUtil.ToastType toastType);\n-\n-        void initLoginForm(List<LocationEntity> locationList, String url);\n-\n-        void userAuthenticated();\n-\n-        void startFormListService();\n-    }\n-\n-    interface Presenter extends BasePresenterContract {\n-        void authenticateUser(final String username, final String password, final String url);\n-\n-        void authenticateUser(final String username, final String password, final String url, boolean wipeDatabase);\n-\n-        void login(String username, String password, String url, String oldUrl);\n-\n-        void saveLocationsToDatabase(List<LocationEntity> locationList, String selectedLocation);\n-\n-        void loadLocations(String url);\n-    }\n-}"
  },
  {
    "sha": "1b25eb9e385135934eee2fa8b9b8be4c1080394d",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginContract.kt",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginContract.kt",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginContract.kt",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginContract.kt?ref=2971f3fcac8e24c6943bcd6aa5afc076e1b33176",
    "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * The contents of this file are subject to the OpenMRS Public License\n+ * Version 1.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ * http://license.openmrs.org\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\"\n+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing rights and limitations\n+ * under the License.\n+ *\n+ * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n+ */\n+package org.openmrs.mobile.activities.login\n+\n+import org.openmrs.mobile.activities.BasePresenterContract\n+import org.openmrs.mobile.activities.BaseView\n+import org.openmrs.mobile.databases.entities.LocationEntity\n+import org.openmrs.mobile.utilities.ToastUtil.ToastType\n+\n+interface LoginContract {\n+    interface View : BaseView<Presenter?> {\n+        fun hideSoftKeys()\n+        override fun setPresenter(presenter: Presenter?)\n+        fun showWarningDialog()\n+        fun showLoadingAnimation()\n+        fun hideLoadingAnimation()\n+        fun showLocationLoadingAnimation()\n+        fun hideUrlLoadingAnimation()\n+        fun finishLoginActivity()\n+        fun showInvalidURLSnackbar(message: String?)\n+        fun showInvalidURLSnackbar(messageID: Int)\n+        fun showInvalidLoginOrPasswordSnackbar()\n+        fun setLocationErrorOccurred(errorOccurred: Boolean)\n+        fun showToast(message: String?, toastType: ToastType?)\n+        fun showToast(textId: Int, toastType: ToastType?)\n+        fun initLoginForm(locationList: List<LocationEntity?>?, url: String?)\n+        fun userAuthenticated()\n+        fun startFormListService()\n+    }\n+\n+    interface Presenter : BasePresenterContract {\n+        fun authenticateUser(username: String?, password: String?, url: String?)\n+        fun authenticateUser(username: String?, password: String?, url: String?, wipeDatabase: Boolean)\n+        fun login(username: String?, password: String?, url: String?, oldUrl: String?)\n+        fun saveLocationsToDatabase(locationList: List<LocationEntity?>?, selectedLocation: String?)\n+        fun loadLocations(url: String?)\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1135d936492434c55535e2ae83c49faa4bd8e8f3",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginFragment.java",
    "status": "removed",
    "additions": 0,
    "deletions": 363,
    "changes": 363,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginFragment.java",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginFragment.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginFragment.java?ref=bba11e7ded890a51c35dd2ae47ee6c8246a938bc",
    "patch": "@@ -1,363 +0,0 @@\n-/*\n- * The contents of this file are subject to the OpenMRS Public License\n- * Version 1.0 (the \"License\"); you may not use this file except in\n- * compliance with the License. You may obtain a copy of the License at\n- * http://license.openmrs.org\n- *\n- * Software distributed under the License is distributed on an \"AS IS\"\n- * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n- * License for the specific language governing rights and limitations\n- * under the License.\n- *\n- * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n- */\n-\n-package org.openmrs.mobile.activities.login;\n-\n-import android.content.Context;\n-import android.content.Intent;\n-import android.content.SharedPreferences;\n-import android.net.Uri;\n-import android.os.Bundle;\n-import android.preference.PreferenceManager;\n-import android.text.Html;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.view.inputmethod.InputMethodManager;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-\n-import com.google.android.material.snackbar.Snackbar;\n-\n-import org.openmrs.mobile.R;\n-import org.openmrs.mobile.activities.ACBaseFragment;\n-import org.openmrs.mobile.activities.community.contact.ContactUsActivity;\n-import org.openmrs.mobile.activities.dashboard.DashboardActivity;\n-import org.openmrs.mobile.activities.dialog.CustomFragmentDialog;\n-import org.openmrs.mobile.api.FormListService;\n-import org.openmrs.mobile.application.OpenMRS;\n-import org.openmrs.mobile.bundle.CustomDialogBundle;\n-import org.openmrs.mobile.databases.entities.LocationEntity;\n-import org.openmrs.mobile.databinding.FragmentLoginBinding;\n-import org.openmrs.mobile.listeners.watcher.LoginValidatorWatcher;\n-import org.openmrs.mobile.utilities.ApplicationConstants;\n-import org.openmrs.mobile.utilities.StringUtils;\n-import org.openmrs.mobile.utilities.ToastUtil;\n-import org.openmrs.mobile.utilities.URLValidator;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class LoginFragment extends ACBaseFragment<LoginContract.Presenter> implements LoginContract.View {\n-    private static String mLastCorrectURL = \"\";\n-    private static List<LocationEntity> mLocationsList;\n-    final private String initialUrl = OpenMRS.getInstance().getServerUrl();\n-    protected OpenMRS mOpenMRS = OpenMRS.getInstance();\n-    private FragmentLoginBinding binding;\n-    private View mRootView;\n-    private LoginValidatorWatcher loginValidatorWatcher;\n-\n-    public static LoginFragment newInstance() {\n-        return new LoginFragment();\n-    }\n-\n-    @Override\n-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-        binding = FragmentLoginBinding.inflate(inflater, container, false);\n-        mRootView = binding.getRoot();\n-\n-        initViewFields();\n-        initListeners();\n-        if (mLastCorrectURL.equals(ApplicationConstants.EMPTY_STRING)) {\n-            binding.loginUrlField.setText(OpenMRS.getInstance().getServerUrl());\n-            mLastCorrectURL = OpenMRS.getInstance().getServerUrl();\n-        } else {\n-            binding.loginUrlField.setText(mLastCorrectURL);\n-        }\n-        hideURLDialog();\n-        return mRootView;\n-    }\n-\n-    private void initListeners() {\n-        binding.loginSyncButton.setOnClickListener(view -> {\n-            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance());\n-            boolean syncState = prefs.getBoolean(\"sync\", true);\n-            SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance()).edit();\n-            editor.putBoolean(\"sync\", !syncState);\n-            editor.apply();\n-            setSyncButtonState(!syncState);\n-        });\n-\n-        loginValidatorWatcher = new LoginValidatorWatcher(binding.loginUrlField, binding.loginUsernameField,\n-                binding.loginPasswordField, binding.locationSpinner, binding.loginButton);\n-\n-        binding.loginUrlField.setOnFocusChangeListener((view, hasFocus) -> {\n-            if (StringUtils.notEmpty(binding.loginUrlField.getText().toString())\n-                    && !view.isFocused()\n-                    && loginValidatorWatcher.isUrlChanged()\n-                    || (loginValidatorWatcher.isUrlChanged() && !view.isFocused()\n-                    && loginValidatorWatcher.isLocationErrorOccurred())\n-                    || (!loginValidatorWatcher.isUrlChanged() && !view.isFocused())) {\n-                ((LoginFragment) getActivity()\n-                        .getSupportFragmentManager()\n-                        .findFragmentById(R.id.loginContentFrame))\n-                        .setUrl(binding.loginUrlField.getText().toString());\n-                loginValidatorWatcher.setUrlChanged(false);\n-            }\n-        });\n-\n-        binding.loginUsernameField.setOnFocusChangeListener((view, hasFocus) -> {\n-            if (hasFocus) {\n-                binding.textInputLayoutUsername.setHint(Html.fromHtml(getString(R.string.login_username_hint)));\n-            } else if (binding.loginUsernameField.getText().toString().equals(\"\")) {\n-                binding.textInputLayoutUsername.setHint(Html.fromHtml(getString(R.string.login_username_hint) + getString(R.string.req_star)));\n-                binding.textInputLayoutUsername.setHintAnimationEnabled(true);\n-            }\n-        });\n-\n-        binding.loginPasswordField.setOnFocusChangeListener((view, hasFocus) -> {\n-            if (hasFocus) {\n-                binding.textInputLayoutPassword.setHint(Html.fromHtml(getString(R.string.login_password_hint)));\n-            } else if (binding.loginPasswordField.getText().toString().equals(\"\")) {\n-                binding.textInputLayoutPassword.setHint(Html.fromHtml(getString(R.string.login_password_hint) + getString(R.string.req_star)));\n-                binding.textInputLayoutPassword.setHintAnimationEnabled(true);\n-            }\n-        });\n-\n-        binding.loginButton.setOnClickListener(view -> mPresenter.login(binding.loginUsernameField.getText().toString(),\n-                binding.loginPasswordField.getText().toString(),\n-                binding.loginUrlField.getText().toString(),\n-                initialUrl));\n-\n-        binding.forgotPass.setOnClickListener(view -> startActivity(new Intent(getContext(), ContactUsActivity.class)));\n-\n-        binding.aboutUsTextView.setOnClickListener(view -> openAboutPage());\n-    }\n-\n-    private void initViewFields() {\n-        binding.textInputLayoutPassword.setHint(Html.fromHtml(getString(R.string.login_password_hint) + getString(R.string.req_star)));\n-        binding.textInputLayoutUsername.setHint(Html.fromHtml(getString(R.string.login_username_hint) + getString(R.string.req_star)));\n-    }\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-\n-        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance());\n-        boolean syncState = prefs.getBoolean(\"sync\", true);\n-        setSyncButtonState(syncState);\n-        hideUrlLoadingAnimation();\n-    }\n-\n-    @Override\n-    public void hideSoftKeys() {\n-        View view = this.getActivity().getCurrentFocus();\n-        if (view == null) {\n-            view = new View(this.getActivity());\n-        }\n-        InputMethodManager inputMethodManager = (InputMethodManager) this.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);\n-        inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);\n-    }\n-\n-    public void openAboutPage() {\n-        String userGuideUrl = ApplicationConstants.USER_GUIDE;\n-        Intent intent = new Intent(Intent.ACTION_VIEW);\n-        intent.setData(Uri.parse(userGuideUrl));\n-        startActivity(intent);\n-    }\n-\n-    private void setSyncButtonState(boolean syncEnabled) {\n-        if (syncEnabled) {\n-            binding.syncLabel.setText(getString(R.string.login_online));\n-        } else {\n-            binding.syncLabel.setText(getString(R.string.login_offline));\n-        }\n-        binding.loginSyncButton.setChecked(syncEnabled);\n-    }\n-\n-    @Override\n-    public void showWarningDialog() {\n-        CustomDialogBundle bundle = new CustomDialogBundle();\n-        bundle.setTitleViewMessage(getString(R.string.warning_dialog_title));\n-        bundle.setTextViewMessage(getString(R.string.warning_lost_data_dialog));\n-        bundle.setRightButtonText(getString(R.string.dialog_button_ok));\n-        bundle.setRightButtonAction(CustomFragmentDialog.OnClickAction.LOGIN);\n-        bundle.setLeftButtonText(getString(R.string.dialog_button_cancel));\n-        bundle.setLeftButtonAction(CustomFragmentDialog.OnClickAction.DISMISS);\n-        ((LoginActivity) this.getActivity()).createAndShowDialog(bundle, ApplicationConstants.DialogTAG.WARNING_LOST_DATA_DIALOG_TAG);\n-    }\n-\n-    @Override\n-    public void showLoadingAnimation() {\n-        binding.loginFormView.setVisibility(View.GONE);\n-        binding.loginLoading.setVisibility(View.VISIBLE);\n-    }\n-\n-    @Override\n-    public void hideLoadingAnimation() {\n-        binding.loginFormView.setVisibility(View.VISIBLE);\n-        binding.loginLoading.setVisibility(View.GONE);\n-    }\n-\n-    @Override\n-    public void showLocationLoadingAnimation() {\n-        binding.loginButton.setEnabled(false);\n-        binding.locationLoadingProgressBar.setVisibility(View.VISIBLE);\n-    }\n-\n-    @Override\n-    public void hideUrlLoadingAnimation() {\n-        binding.locationLoadingProgressBar.setVisibility(View.GONE);\n-        binding.loginLoading.setVisibility(View.GONE);\n-    }\n-\n-    @Override\n-    public void finishLoginActivity() {\n-        getActivity().finish();\n-    }\n-\n-    public void initLoginForm(List<LocationEntity> locationsList, String serverURL) {\n-        setLocationErrorOccurred(false);\n-        mLastCorrectURL = serverURL;\n-        binding.loginUrlField.setText(serverURL);\n-        mLocationsList = locationsList;\n-        if (isActivityNotNull()) {\n-            List<String> items = getLocationStringList(locationsList);\n-            final LocationArrayAdapter adapter = new LocationArrayAdapter(this.getActivity(), items);\n-            binding.locationSpinner.setAdapter(adapter);\n-            binding.loginButton.setEnabled(false);\n-            binding.loginLoading.setVisibility(View.GONE);\n-            binding.loginFormView.setVisibility(View.VISIBLE);\n-            if (locationsList.isEmpty()) {\n-                binding.loginButton.setEnabled(true);\n-            } else {\n-                binding.loginButton.setEnabled(false);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void userAuthenticated() {\n-        Intent intent = new Intent(mOpenMRS.getApplicationContext(), DashboardActivity.class);\n-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-        mOpenMRS.getApplicationContext().startActivity(intent);\n-        Intent formListServiceIntent = new Intent(mOpenMRS.getApplicationContext(), FormListService.class);\n-        mOpenMRS.getApplicationContext().startService(formListServiceIntent);\n-        mPresenter.saveLocationsToDatabase(mLocationsList, binding.locationSpinner.getSelectedItem().toString());\n-    }\n-\n-    @Override\n-    public void startFormListService() {\n-        if (isActivityNotNull()) {\n-            Intent i = new Intent(getContext(), FormListService.class);\n-            getActivity().startService(i);\n-        }\n-    }\n-\n-    @Override\n-    public void showInvalidURLSnackbar(String message) {\n-        if (isActivityNotNull()) {\n-            createSnackbar(message)\n-                    .setAction(getResources().getString(R.string.snackbar_choose), view -> {\n-                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(getString(R.string.url_server_list)));\n-                        startActivity(intent);\n-                    })\n-                    .show();\n-        }\n-    }\n-\n-    @Override\n-    public void showInvalidURLSnackbar(int messageID) {\n-        if (isActivityNotNull()) {\n-            createSnackbar(getString(messageID))\n-                    .setAction(getResources().getString(R.string.snackbar_choose), view -> {\n-                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(getString(R.string.url_server_list)));\n-                        startActivity(intent);\n-                    })\n-                    .show();\n-        }\n-    }\n-\n-    @Override\n-    public void showInvalidLoginOrPasswordSnackbar() {\n-        String message = getResources().getString(R.string.invalid_login_or_password_message);\n-        if (isActivityNotNull()) {\n-            createSnackbar(message)\n-                    .setAction(getResources().getString(R.string.snackbar_edit), view -> {\n-                        binding.loginPasswordField.requestFocus();\n-                        binding.loginPasswordField.selectAll();\n-                    })\n-                    .show();\n-        }\n-    }\n-\n-    private Snackbar createSnackbar(String message) {\n-        return Snackbar\n-                .make(mRootView, message, Snackbar.LENGTH_LONG);\n-    }\n-\n-    @Override\n-    public void setLocationErrorOccurred(boolean errorOccurred) {\n-        this.loginValidatorWatcher.setLocationErrorOccurred(errorOccurred);\n-        binding.loginButton.setEnabled(!errorOccurred);\n-    }\n-\n-    @Override\n-    public void showToast(String message, ToastUtil.ToastType toastType) {\n-        if (getActivity() != null) {\n-            ToastUtil.showShortToast(getActivity(), toastType, message);\n-        }\n-    }\n-\n-    @Override\n-    public void showToast(int textId, ToastUtil.ToastType toastType) {\n-        if (getActivity() != null) {\n-            ToastUtil.showShortToast(getActivity(), toastType, getResources().getString(textId));\n-        }\n-    }\n-\n-    private List<String> getLocationStringList(List<LocationEntity> locationList) {\n-        List<String> list = new ArrayList<>();\n-        //If spinner is at start option, append a red * to signify requirement\n-\t\tlist.add(Html.fromHtml(getString(R.string.login_location_select) + getString(R.string.req_star)).toString());\n-        for (int i = 0; i < locationList.size(); i++) {\n-            list.add(locationList.get(i).getDisplay());\n-        }\n-        return list;\n-    }\n-\n-    public void setUrl(String url) {\n-        URLValidator.ValidationResult result = URLValidator.validate(url);\n-        if (result.isURLValid()) {\n-            mPresenter.loadLocations(result.getUrl());\n-        } else {\n-            showInvalidURLSnackbar(getResources().getString(R.string.invalid_URL_message));\n-        }\n-    }\n-\n-    public void hideURLDialog() {\n-        if (mLocationsList == null) {\n-            mPresenter.loadLocations(mLastCorrectURL);\n-        } else {\n-            initLoginForm(mLocationsList, mLastCorrectURL);\n-        }\n-    }\n-\n-    public void login() {\n-        mPresenter.authenticateUser(binding.loginUsernameField.getText().toString(),\n-                binding.loginPasswordField.getText().toString(),\n-                binding.loginUrlField.getText().toString());\n-    }\n-\n-    public void login(boolean wipeDatabase) {\n-        mPresenter.authenticateUser(binding.loginUsernameField.getText().toString(),\n-                binding.loginPasswordField.getText().toString(),\n-                binding.loginUrlField.getText().toString(), wipeDatabase);\n-    }\n-\n-    private boolean isActivityNotNull() {\n-        return (isAdded() && getActivity() != null);\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "e56743645c5be614d261cb3f69b6460a2c25a3a9",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginFragment.kt",
    "status": "added",
    "additions": 361,
    "deletions": 0,
    "changes": 361,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginFragment.kt",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginFragment.kt",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginFragment.kt?ref=2971f3fcac8e24c6943bcd6aa5afc076e1b33176",
    "patch": "@@ -0,0 +1,361 @@\n+/*\n+ * The contents of this file are subject to the OpenMRS Public License\n+ * Version 1.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ * http://license.openmrs.org\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\"\n+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing rights and limitations\n+ * under the License.\n+ *\n+ * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n+ */\n+package org.openmrs.mobile.activities.login\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.net.Uri\n+import android.os.Bundle\n+import android.preference.PreferenceManager\n+import android.text.Html\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.View.OnFocusChangeListener\n+import android.view.ViewGroup\n+import android.view.inputmethod.InputMethodManager\n+import com.google.android.material.snackbar.Snackbar\n+import org.openmrs.mobile.R\n+import org.openmrs.mobile.activities.ACBaseFragment\n+import org.openmrs.mobile.activities.community.contact.ContactUsActivity\n+import org.openmrs.mobile.activities.dashboard.DashboardActivity\n+import org.openmrs.mobile.activities.dialog.CustomFragmentDialog\n+import org.openmrs.mobile.api.FormListService\n+import org.openmrs.mobile.application.OpenMRS\n+import org.openmrs.mobile.bundle.CustomDialogBundle\n+import org.openmrs.mobile.databases.entities.LocationEntity\n+import org.openmrs.mobile.databinding.FragmentLoginBinding\n+import org.openmrs.mobile.listeners.watcher.LoginValidatorWatcher\n+import org.openmrs.mobile.utilities.ApplicationConstants\n+import org.openmrs.mobile.utilities.StringUtils.notEmpty\n+import org.openmrs.mobile.utilities.ToastUtil.ToastType\n+import org.openmrs.mobile.utilities.ToastUtil.showShortToast\n+import org.openmrs.mobile.utilities.URLValidator.validate\n+\n+class LoginFragment : ACBaseFragment<LoginContract.Presenter?>(), LoginContract.View {\n+    private val initialUrl = OpenMRS.getInstance().serverUrl\n+    protected var mOpenMRS = OpenMRS.getInstance()\n+    private var binding: FragmentLoginBinding? = null\n+    private var mRootView: View? = null\n+    private var loginValidatorWatcher: LoginValidatorWatcher? = null\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n+        binding = FragmentLoginBinding.inflate(inflater, container, false)\n+        mRootView = binding!!.root\n+        initViewFields()\n+        initListeners()\n+        with(binding!!) {\n+            if (mLastCorrectURL == ApplicationConstants.EMPTY_STRING) {\n+                loginUrlField.setText(OpenMRS.getInstance().serverUrl)\n+                mLastCorrectURL = OpenMRS.getInstance().serverUrl\n+            } else {\n+                loginUrlField.setText(mLastCorrectURL)\n+            }\n+        }\n+        hideURLDialog()\n+        return mRootView\n+    }\n+\n+    private fun initListeners() {\n+        with(binding!!) {\n+        loginSyncButton.setOnClickListener { view: View? ->\n+            val prefs = PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance())\n+            val syncState = prefs.getBoolean(\"sync\", true)\n+            val editor = PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance()).edit()\n+            editor.putBoolean(\"sync\", !syncState)\n+            editor.apply()\n+            setSyncButtonState(!syncState)\n+        }\n+        loginValidatorWatcher = LoginValidatorWatcher(loginUrlField, loginUsernameField,\n+                loginPasswordField, locationSpinner, loginButton)\n+        loginUrlField.onFocusChangeListener = OnFocusChangeListener { view: View, hasFocus: Boolean ->\n+            if ((notEmpty(loginUrlField.text.toString())\n+                            && !view.isFocused\n+                            && loginValidatorWatcher!!.isUrlChanged)\n+                    || (loginValidatorWatcher!!.isUrlChanged && !view.isFocused\n+                            && loginValidatorWatcher!!.isLocationErrorOccurred)\n+                    || !loginValidatorWatcher!!.isUrlChanged && !view.isFocused) {\n+                (activity\n+                        ?.getSupportFragmentManager()\n+                        ?.findFragmentById(R.id.loginContentFrame) as LoginFragment?)\n+                        ?.setUrl(loginUrlField.text.toString())\n+                loginValidatorWatcher!!.isUrlChanged = false\n+            }\n+        }\n+        loginUsernameField.onFocusChangeListener = OnFocusChangeListener { view: View?, hasFocus: Boolean ->\n+            if (hasFocus) {\n+                textInputLayoutUsername.hint = Html.fromHtml(getString(R.string.login_username_hint))\n+            } else if (loginUsernameField.text.toString() == \"\") {\n+                textInputLayoutUsername.hint = Html.fromHtml(getString(R.string.login_username_hint) + getString(R.string.req_star))\n+                textInputLayoutUsername.isHintAnimationEnabled = true\n+            }\n+        }\n+        loginPasswordField.onFocusChangeListener = OnFocusChangeListener { view: View?, hasFocus: Boolean ->\n+            if (hasFocus) {\n+                textInputLayoutPassword.hint = Html.fromHtml(getString(R.string.login_password_hint))\n+            } else if (loginPasswordField.text.toString() == \"\") {\n+                textInputLayoutPassword.hint = Html.fromHtml(getString(R.string.login_password_hint) + getString(R.string.req_star))\n+                textInputLayoutPassword.isHintAnimationEnabled = true\n+            }\n+        }\n+        loginButton.setOnClickListener { view: View? ->\n+            mPresenter!!.login(loginUsernameField.text.toString(),\n+                    loginPasswordField.text.toString(),\n+                    loginUrlField.text.toString(),\n+                    initialUrl)\n+        }\n+        forgotPass.setOnClickListener { view: View? -> startActivity(Intent(context, ContactUsActivity::class.java)) }\n+        aboutUsTextView.setOnClickListener { view: View? -> openAboutPage() }\n+    }\n+}\n+\n+    private fun initViewFields() {\n+        with(binding!!) {\n+            textInputLayoutPassword.hint = Html.fromHtml(getString(R.string.login_password_hint) + getString(R.string.req_star))\n+            textInputLayoutUsername.hint = Html.fromHtml(getString(R.string.login_username_hint) + getString(R.string.req_star))\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        val prefs = PreferenceManager.getDefaultSharedPreferences(OpenMRS.getInstance())\n+        val syncState = prefs.getBoolean(\"sync\", true)\n+        setSyncButtonState(syncState)\n+        hideUrlLoadingAnimation()\n+    }\n+\n+    override fun hideSoftKeys() {\n+        var view = this.requireActivity().currentFocus\n+        if (view == null) {\n+            view = View(this.activity)\n+        }\n+        val inputMethodManager = this.requireActivity().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\n+        inputMethodManager.hideSoftInputFromWindow(view.windowToken, 0)\n+    }\n+\n+    override fun setPresenter(presenter: LoginContract.Presenter?) {\n+        mPresenter = presenter\n+    }\n+\n+    fun openAboutPage() {\n+        val userGuideUrl = ApplicationConstants.USER_GUIDE\n+        val intent = Intent(Intent.ACTION_VIEW)\n+        intent.data = Uri.parse(userGuideUrl)\n+        startActivity(intent)\n+    }\n+\n+    private fun setSyncButtonState(syncEnabled: Boolean) {\n+        with(binding!!) {\n+            if (syncEnabled) {\n+                syncLabel.text = getString(R.string.login_online)\n+            } else {\n+                syncLabel.text = getString(R.string.login_offline)\n+            }\n+            loginSyncButton.isChecked = syncEnabled\n+        }\n+    }\n+\n+    override fun showWarningDialog() {\n+        val bundle = CustomDialogBundle()\n+        bundle.titleViewMessage = getString(R.string.warning_dialog_title)\n+        bundle.textViewMessage = getString(R.string.warning_lost_data_dialog)\n+        bundle.rightButtonText = getString(R.string.dialog_button_ok)\n+        bundle.rightButtonAction = CustomFragmentDialog.OnClickAction.LOGIN\n+        bundle.leftButtonText = getString(R.string.dialog_button_cancel)\n+        bundle.leftButtonAction = CustomFragmentDialog.OnClickAction.DISMISS\n+        (this.activity as LoginActivity?)!!.createAndShowDialog(bundle, ApplicationConstants.DialogTAG.WARNING_LOST_DATA_DIALOG_TAG)\n+    }\n+\n+    override fun showLoadingAnimation() {\n+        with(binding!!) {\n+            loginFormView.visibility = View.GONE\n+            loginLoading.visibility = View.VISIBLE\n+        }\n+    }\n+\n+    override fun hideLoadingAnimation() {\n+        with(binding!!) {\n+            loginFormView.visibility = View.VISIBLE\n+            loginLoading.visibility = View.GONE\n+        }\n+    }\n+\n+    override fun showLocationLoadingAnimation() {\n+        with(binding!!) {\n+            loginButton.isEnabled = false\n+            locationLoadingProgressBar.visibility = View.VISIBLE\n+        }\n+    }\n+\n+    override fun hideUrlLoadingAnimation() {\n+        with(binding!!) {\n+            locationLoadingProgressBar.visibility = View.GONE\n+            loginLoading.visibility = View.GONE\n+        }\n+    }\n+\n+    override fun finishLoginActivity() {\n+        requireActivity().finish()\n+    }\n+\n+    override fun initLoginForm(locationsList: List<LocationEntity?>?, serverURL: String?) {\n+        setLocationErrorOccurred(false)\n+        mLastCorrectURL = serverURL!!\n+        with(binding!!) {\n+            loginUrlField.setText(serverURL)\n+        }\n+        mLocationsList = locationsList as List<LocationEntity>?\n+        if (isActivityNotNull) {\n+            val items = getLocationStringList(locationsList!!)\n+            val adapter = LocationArrayAdapter(this.activity, items)\n+            with(binding!!) {\n+            locationSpinner.adapter = adapter\n+            loginButton.isEnabled = false\n+            loginLoading.visibility = View.GONE\n+            loginFormView.visibility = View.VISIBLE\n+            if (locationsList.isEmpty()) {\n+                loginButton.isEnabled = true\n+            } else {\n+                loginButton.isEnabled = false\n+            }\n+        }\n+        }\n+    }\n+\n+    override fun userAuthenticated() {\n+        val intent = Intent(mOpenMRS.applicationContext, DashboardActivity::class.java)\n+        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\n+        mOpenMRS.applicationContext.startActivity(intent)\n+        val formListServiceIntent = Intent(mOpenMRS.applicationContext, FormListService::class.java)\n+        mOpenMRS.applicationContext.startService(formListServiceIntent)\n+        mPresenter!!.saveLocationsToDatabase(mLocationsList, binding!!.locationSpinner.selectedItem.toString())\n+    }\n+\n+    override fun startFormListService() {\n+        if (isActivityNotNull) {\n+            val i = Intent(context, FormListService::class.java)\n+            requireActivity().startService(i)\n+        }\n+    }\n+\n+    override fun showInvalidURLSnackbar(message: String?) {\n+        if (isActivityNotNull) {\n+            createSnackbar(message!!)\n+                    .setAction(resources.getString(R.string.snackbar_choose)) { view: View? ->\n+                        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(getString(R.string.url_server_list)))\n+                        startActivity(intent)\n+                    }\n+                    .show()\n+        }\n+    }\n+\n+    override fun showInvalidURLSnackbar(messageID: Int) {\n+        if (isActivityNotNull) {\n+            createSnackbar(getString(messageID))\n+                    .setAction(resources.getString(R.string.snackbar_choose)) { view: View? ->\n+                        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(getString(R.string.url_server_list)))\n+                        startActivity(intent)\n+                    }\n+                    .show()\n+        }\n+    }\n+\n+    override fun showInvalidLoginOrPasswordSnackbar() {\n+        val message = resources.getString(R.string.invalid_login_or_password_message)\n+        if (isActivityNotNull) {\n+            createSnackbar(message)\n+                    .setAction(resources.getString(R.string.snackbar_edit)) { view: View? ->\n+                        with(binding!!) {\n+                            loginPasswordField.requestFocus()\n+                            loginPasswordField.selectAll()\n+                        }\n+                    }\n+                    .show()\n+        }\n+    }\n+\n+    private fun createSnackbar(message: String): Snackbar {\n+        return Snackbar\n+                .make(mRootView!!, message, Snackbar.LENGTH_LONG)\n+    }\n+\n+    override fun setLocationErrorOccurred(errorOccurred: Boolean) {\n+        loginValidatorWatcher!!.isLocationErrorOccurred = errorOccurred\n+        binding!!.loginButton.isEnabled = !errorOccurred\n+    }\n+\n+    override fun showToast(message: String?, toastType: ToastType?) {\n+        if (activity != null) {\n+            showShortToast(requireActivity(), toastType!!, message!!)\n+        }\n+    }\n+\n+    override fun showToast(textId: Int, toastType: ToastType?) {\n+        if (activity != null) {\n+            showShortToast(requireActivity(), toastType!!, resources.getString(textId))\n+        }\n+    }\n+\n+    private fun getLocationStringList(locationList: List<LocationEntity>): List<String?> {\n+        val list: MutableList<String?> = ArrayList()\n+        //If spinner is at start option, append a red * to signify requirement\n+        list.add(Html.fromHtml(getString(R.string.login_location_select) + getString(R.string.req_star)).toString())\n+        for (i in locationList.indices) {\n+            list.add(locationList[i].display)\n+        }\n+        return list\n+    }\n+\n+    fun setUrl(url: String?) {\n+        val result = validate(url!!)\n+        if (result.isURLValid) {\n+            mPresenter!!.loadLocations(result.url)\n+        } else {\n+            showInvalidURLSnackbar(resources.getString(R.string.invalid_URL_message))\n+        }\n+    }\n+\n+    fun hideURLDialog() {\n+        if (mLocationsList == null) {\n+            mPresenter!!.loadLocations(mLastCorrectURL)\n+        } else {\n+            initLoginForm(mLocationsList!!, mLastCorrectURL)\n+        }\n+    }\n+\n+    fun login() {\n+        with(binding!!) {\n+            mPresenter!!.authenticateUser(loginUsernameField.text.toString(),\n+                    loginPasswordField.text.toString(),\n+                    loginUrlField.text.toString())\n+        }\n+    }\n+\n+    fun login(wipeDatabase: Boolean) {\n+        with(binding!!) {\n+            mPresenter!!.authenticateUser(loginUsernameField.text.toString(),\n+                    loginPasswordField.text.toString(),\n+                    loginUrlField.text.toString(), wipeDatabase)\n+        }\n+    }\n+\n+    private val isActivityNotNull: Boolean\n+        get() = isAdded && activity != null\n+\n+    companion object {\n+        private var mLastCorrectURL = \"\"\n+        private var mLocationsList: List<LocationEntity>? = null\n+        fun newInstance(): LoginFragment {\n+            return LoginFragment()\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9b7342e19d84d58248e35bce7b77f7bfada9dbfb",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginPresenter.java",
    "status": "removed",
    "additions": 0,
    "deletions": 282,
    "changes": 282,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginPresenter.java",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/bba11e7ded890a51c35dd2ae47ee6c8246a938bc/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginPresenter.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginPresenter.java?ref=bba11e7ded890a51c35dd2ae47ee6c8246a938bc",
    "patch": "@@ -1,282 +0,0 @@\n-/*\n- * The contents of this file are subject to the OpenMRS Public License\n- * Version 1.0 (the \"License\"); you may not use this file except in\n- * compliance with the License. You may obtain a copy of the License at\n- * http://license.openmrs.org\n- *\n- * Software distributed under the License is distributed on an \"AS IS\"\n- * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n- * License for the specific language governing rights and limitations\n- * under the License.\n- *\n- * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n- */\n-\n-package org.openmrs.mobile.activities.login;\n-\n-import androidx.annotation.NonNull;\n-\n-import org.mindrot.jbcrypt.BCrypt;\n-import org.openmrs.mobile.R;\n-import org.openmrs.mobile.activities.BasePresenter;\n-import org.openmrs.mobile.api.RestApi;\n-import org.openmrs.mobile.api.RestServiceBuilder;\n-import org.openmrs.mobile.api.UserService;\n-import org.openmrs.mobile.api.repository.VisitRepository;\n-import org.openmrs.mobile.application.OpenMRS;\n-import org.openmrs.mobile.application.OpenMRSLogger;\n-import org.openmrs.mobile.dao.LocationDAO;\n-import org.openmrs.mobile.databases.entities.LocationEntity;\n-import org.openmrs.mobile.listeners.retrofitcallbacks.GetVisitTypeCallback;\n-import org.openmrs.mobile.models.Results;\n-import org.openmrs.mobile.models.Session;\n-import org.openmrs.mobile.models.VisitType;\n-import org.openmrs.mobile.net.AuthorizationManager;\n-import org.openmrs.mobile.utilities.ApplicationConstants;\n-import org.openmrs.mobile.utilities.NetworkUtils;\n-import org.openmrs.mobile.utilities.StringUtils;\n-import org.openmrs.mobile.utilities.ToastUtil;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import retrofit2.Call;\n-import retrofit2.Callback;\n-import retrofit2.Response;\n-import rx.android.schedulers.AndroidSchedulers;\n-import rx.schedulers.Schedulers;\n-\n-public class LoginPresenter extends BasePresenter implements LoginContract.Presenter {\n-    private RestApi restApi;\n-    private VisitRepository visitRepository;\n-    private UserService userService;\n-    private LoginContract.View loginView;\n-    private OpenMRS mOpenMRS;\n-    private OpenMRSLogger mLogger;\n-    private AuthorizationManager authorizationManager;\n-    private LocationDAO locationDAO;\n-    private boolean mWipeRequired;\n-\n-    public LoginPresenter(LoginContract.View loginView, OpenMRS openMRS) {\n-        this.loginView = loginView;\n-        this.mOpenMRS = openMRS;\n-        this.mLogger = openMRS.getOpenMRSLogger();\n-        this.loginView.setPresenter(this);\n-        this.authorizationManager = new AuthorizationManager();\n-        this.locationDAO = new LocationDAO();\n-        this.restApi = RestServiceBuilder.createService(RestApi.class);\n-        this.visitRepository = new VisitRepository();\n-        this.userService = new UserService();\n-    }\n-\n-    public LoginPresenter(RestApi restApi, VisitRepository visitRepository, LocationDAO locationDAO,\n-                          UserService userService, LoginContract.View loginView, OpenMRS mOpenMRS,\n-                          OpenMRSLogger mLogger, AuthorizationManager authorizationManager) {\n-        this.restApi = restApi;\n-        this.visitRepository = visitRepository;\n-        this.locationDAO = locationDAO;\n-        this.userService = userService;\n-        this.loginView = loginView;\n-        this.mOpenMRS = mOpenMRS;\n-        this.mLogger = mLogger;\n-        this.authorizationManager = authorizationManager;\n-        this.loginView.setPresenter(this);\n-    }\n-\n-    @Override\n-    public void subscribe() {\n-        // This method is intentionally empty\n-    }\n-\n-    @Override\n-    public void login(String username, String password, String url, String oldUrl) {\n-        if (validateLoginFields(username, password, url)) {\n-            loginView.hideSoftKeys();\n-            if ((!mOpenMRS.getUsername().equals(ApplicationConstants.EMPTY_STRING) &&\n-                    !mOpenMRS.getUsername().equals(username)) ||\n-                    ((!mOpenMRS.getServerUrl().equals(ApplicationConstants.EMPTY_STRING) &&\n-                            !mOpenMRS.getServerUrl().equals(oldUrl))) ||\n-                    (!mOpenMRS.getHashedPassword().equals(ApplicationConstants.EMPTY_STRING) &&\n-                            !BCrypt.checkpw(password, mOpenMRS.getHashedPassword())) ||\n-                    mWipeRequired) {\n-                loginView.showWarningDialog();\n-            } else {\n-                authenticateUser(username, password, url);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void authenticateUser(final String username, final String password, final String url) {\n-        authenticateUser(username, password, url, mWipeRequired);\n-    }\n-\n-    @Override\n-    public void authenticateUser(final String username, final String password, final String url, final boolean wipeDatabase) {\n-        loginView.showLoadingAnimation();\n-        if (NetworkUtils.isOnline()) {\n-            mWipeRequired = wipeDatabase;\n-            RestApi restApi = RestServiceBuilder.createService(RestApi.class, username, password);\n-            Call<Session> call = restApi.getSession();\n-            call.enqueue(new Callback<Session>() {\n-                @Override\n-                public void onResponse(@NonNull Call<Session> call, @NonNull Response<Session> response) {\n-                    if (response.isSuccessful()) {\n-                        mLogger.d(response.body().toString());\n-                        Session session = response.body();\n-                        if (session.isAuthenticated()) {\n-                            mOpenMRS.deleteSecretKey();\n-                            if (wipeDatabase) {\n-                                mOpenMRS.deleteDatabase(ApplicationConstants.DB_NAME);\n-                                setData(session.getSessionId(), url, username, password);\n-                                mWipeRequired = false;\n-                            }\n-                            if (authorizationManager.isUserNameOrServerEmpty()) {\n-                                setData(session.getSessionId(), url, username, password);\n-                            } else {\n-                                mOpenMRS.setSessionToken(session.getSessionId());\n-                                mOpenMRS.setPasswordAndHashedPassword(password);\n-                            }\n-\n-                            visitRepository.getVisitType(new GetVisitTypeCallback() {\n-                                @Override\n-                                public void onGetVisitTypeResponse(VisitType visitType) {\n-                                    OpenMRS.getInstance().setVisitTypeUUID(visitType.getUuid());\n-                                }\n-\n-                                @Override\n-                                public void onResponse() {\n-                                    // This method is intentionally empty\n-                                }\n-\n-                                @Override\n-                                public void onErrorResponse(String errorMessage) {\n-\n-                                    OpenMRS.getInstance().setVisitTypeUUID(ApplicationConstants.DEFAULT_VISIT_TYPE_UUID);\n-                                    loginView.showToast(R.string.failed_fetching_visit_type_error_message, ToastUtil.ToastType.ERROR);\n-                                }\n-                            });\n-                            setLogin(true, url);\n-                            userService.updateUserInformation(username);\n-\n-                            loginView.userAuthenticated();\n-                            loginView.finishLoginActivity();\n-                        } else {\n-                            loginView.hideLoadingAnimation();\n-                            loginView.showInvalidLoginOrPasswordSnackbar();\n-                        }\n-                    } else {\n-                        loginView.hideLoadingAnimation();\n-                        loginView.showToast(response.message(), ToastUtil.ToastType.ERROR);\n-                    }\n-                }\n-\n-                @Override\n-                public void onFailure(@NonNull Call<Session> call, @NonNull Throwable t) {\n-                    loginView.hideLoadingAnimation();\n-                    loginView.showToast(t.getMessage(), ToastUtil.ToastType.ERROR);\n-                }\n-            });\n-        } else {\n-            if (mOpenMRS.isUserLoggedOnline() && url.equals(mOpenMRS.getLastLoginServerUrl())) {\n-                if (mOpenMRS.getUsername().equals(username) && BCrypt.checkpw(password, mOpenMRS.getHashedPassword())) {\n-                    mOpenMRS.deleteSecretKey();\n-                    mOpenMRS.setPasswordAndHashedPassword(password);\n-                    mOpenMRS.setSessionToken(mOpenMRS.getLastSessionToken());\n-                    loginView.showToast(R.string.login_offline_toast_message,\n-                            ToastUtil.ToastType.NOTICE);\n-                    loginView.userAuthenticated();\n-                    loginView.finishLoginActivity();\n-                } else {\n-                    loginView.hideLoadingAnimation();\n-                    loginView.showToast(R.string.auth_failed_dialog_message,\n-                            ToastUtil.ToastType.ERROR);\n-                }\n-            } else if (NetworkUtils.hasNetwork()) {\n-                loginView.showToast(R.string.offline_mode_unsupported_in_first_login,\n-                        ToastUtil.ToastType.ERROR);\n-                loginView.hideLoadingAnimation();\n-            } else {\n-                loginView.showToast(R.string.no_internet_conn_dialog_message,\n-                        ToastUtil.ToastType.ERROR);\n-                loginView.hideLoadingAnimation();\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void saveLocationsToDatabase(List<LocationEntity> locationList, String selectedLocation) {\n-        mOpenMRS.setLocation(selectedLocation);\n-        locationDAO.deleteAllLocations();\n-        for (int i = 0; i < locationList.size(); i++) {\n-            locationDAO.saveLocation(locationList.get(i))\n-                    .observeOn(Schedulers.io())\n-                    .subscribe();\n-        }\n-    }\n-\n-    @Override\n-    public void loadLocations(final String url) {\n-        loginView.showLocationLoadingAnimation();\n-\n-        if (NetworkUtils.hasNetwork()) {\n-            String locationEndPoint = url + ApplicationConstants.API.REST_ENDPOINT + \"location\";\n-            Call<Results<LocationEntity>> call =\n-                    restApi.getLocations(locationEndPoint, \"Login Location\", \"full\");\n-            call.enqueue(new Callback<Results<LocationEntity>>() {\n-                @Override\n-                public void onResponse(@NonNull Call<Results<LocationEntity>> call, @NonNull Response<Results<LocationEntity>> response) {\n-                    if (response.isSuccessful()) {\n-                        RestServiceBuilder.changeBaseUrl(url.trim());\n-                        mOpenMRS.setServerUrl(url);\n-                        loginView.initLoginForm(response.body().getResults(), url);\n-                        loginView.startFormListService();\n-                        loginView.setLocationErrorOccurred(false);\n-                    } else {\n-                        loginView.showInvalidURLSnackbar(R.string.snackbar_server_error);\n-                        loginView.setLocationErrorOccurred(true);\n-                        loginView.initLoginForm(new ArrayList<>(), url);\n-                    }\n-                    loginView.hideUrlLoadingAnimation();\n-                }\n-\n-                @Override\n-                public void onFailure(@NonNull Call<Results<LocationEntity>> call, @NonNull Throwable t) {\n-                    loginView.hideUrlLoadingAnimation();\n-                    loginView.showInvalidURLSnackbar(t.getMessage());\n-                    loginView.initLoginForm(new ArrayList<>(), url);\n-                    loginView.setLocationErrorOccurred(true);\n-                }\n-            });\n-        } else {\n-            addSubscription(locationDAO.getLocations()\n-                    .observeOn(AndroidSchedulers.mainThread())\n-                    .subscribe(locationEntities -> {\n-                        if (locationEntities.size() > 0) {\n-                            loginView.initLoginForm(locationEntities, url);\n-                            loginView.setLocationErrorOccurred(false);\n-                        } else {\n-                            loginView.showToast(R.string.no_internet_connection_message, ToastUtil.ToastType.ERROR);\n-                            loginView.setLocationErrorOccurred(true);\n-                        }\n-                        loginView.hideLoadingAnimation();\n-                    }));\n-        }\n-    }\n-\n-    private boolean validateLoginFields(String username, String password, String url) {\n-        return StringUtils.notEmpty(username) || StringUtils.notEmpty(password) || StringUtils.notEmpty(url);\n-    }\n-\n-    private void setData(String sessionToken, String url, String username, String password) {\n-        mOpenMRS.setSessionToken(sessionToken);\n-        mOpenMRS.setServerUrl(url);\n-        mOpenMRS.setUsername(username);\n-        mOpenMRS.setPasswordAndHashedPassword(password);\n-    }\n-\n-    private void setLogin(boolean isLogin, String serverUrl) {\n-        mOpenMRS.setUserLoggedOnline(isLogin);\n-        mOpenMRS.setLastLoginServerUrl(serverUrl);\n-    }\n-}"
  },
  {
    "sha": "9d065de64db6a668535a1bbb1db42ec053dfc3e9",
    "filename": "openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginPresenter.kt",
    "status": "added",
    "additions": 258,
    "deletions": 0,
    "changes": 258,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginPresenter.kt",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginPresenter.kt",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/main/java/org/openmrs/mobile/activities/login/LoginPresenter.kt?ref=2971f3fcac8e24c6943bcd6aa5afc076e1b33176",
    "patch": "@@ -0,0 +1,258 @@\n+/*\n+ * The contents of this file are subject to the OpenMRS Public License\n+ * Version 1.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ * http://license.openmrs.org\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\"\n+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing rights and limitations\n+ * under the License.\n+ *\n+ * Copyright (C) OpenMRS, LLC.  All Rights Reserved.\n+ */\n+package org.openmrs.mobile.activities.login\n+\n+import org.mindrot.jbcrypt.BCrypt\n+import org.openmrs.mobile.R\n+import org.openmrs.mobile.activities.BasePresenter\n+import org.openmrs.mobile.api.RestApi\n+import org.openmrs.mobile.api.RestServiceBuilder\n+import org.openmrs.mobile.api.UserService\n+import org.openmrs.mobile.api.repository.VisitRepository\n+import org.openmrs.mobile.application.OpenMRS\n+import org.openmrs.mobile.application.OpenMRSLogger\n+import org.openmrs.mobile.dao.LocationDAO\n+import org.openmrs.mobile.databases.entities.LocationEntity\n+import org.openmrs.mobile.listeners.retrofitcallbacks.GetVisitTypeCallback\n+import org.openmrs.mobile.models.Results\n+import org.openmrs.mobile.models.Session\n+import org.openmrs.mobile.models.VisitType\n+import org.openmrs.mobile.net.AuthorizationManager\n+import org.openmrs.mobile.utilities.ApplicationConstants\n+import org.openmrs.mobile.utilities.NetworkUtils.hasNetwork\n+import org.openmrs.mobile.utilities.NetworkUtils.isOnline\n+import org.openmrs.mobile.utilities.StringUtils.notEmpty\n+import org.openmrs.mobile.utilities.ToastUtil\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import rx.android.schedulers.AndroidSchedulers\n+import rx.schedulers.Schedulers\n+\n+class LoginPresenter : BasePresenter, LoginContract.Presenter {\n+    private var restApi: RestApi\n+    private var visitRepository: VisitRepository\n+    private var userService: UserService\n+    private var loginView: LoginContract.View\n+    private var mOpenMRS: OpenMRS\n+    private var mLogger: OpenMRSLogger\n+    private var authorizationManager: AuthorizationManager\n+    private var locationDAO: LocationDAO\n+    private var mWipeRequired = false\n+\n+    constructor(loginView: LoginContract.View, openMRS: OpenMRS) {\n+        this.loginView = loginView\n+        mOpenMRS = openMRS\n+        mLogger = openMRS.openMRSLogger\n+        this.loginView.setPresenter(this)\n+        authorizationManager = AuthorizationManager()\n+        locationDAO = LocationDAO()\n+        restApi = RestServiceBuilder.createService(RestApi::class.java)\n+        visitRepository = VisitRepository()\n+        userService = UserService()\n+    }\n+\n+    constructor(restApi: RestApi, visitRepository: VisitRepository, locationDAO: LocationDAO,\n+                userService: UserService, loginView: LoginContract.View, mOpenMRS: OpenMRS,\n+                mLogger: OpenMRSLogger, authorizationManager: AuthorizationManager) {\n+        this.restApi = restApi\n+        this.visitRepository = visitRepository\n+        this.locationDAO = locationDAO\n+        this.userService = userService\n+        this.loginView = loginView\n+        this.mOpenMRS = mOpenMRS\n+        this.mLogger = mLogger\n+        this.authorizationManager = authorizationManager\n+        this.loginView.setPresenter(this)\n+    }\n+\n+    override fun subscribe() {\n+        // This method is intentionally empty\n+    }\n+\n+    override fun login(username: String?, password: String?, url: String?, oldUrl: String?) {\n+        if (validateLoginFields(username!!, password!!, url!!)) {\n+            loginView.hideSoftKeys()\n+            if (mOpenMRS.username != ApplicationConstants.EMPTY_STRING &&\n+                    mOpenMRS.username != username ||\n+                    mOpenMRS.serverUrl != ApplicationConstants.EMPTY_STRING &&\n+                    mOpenMRS.serverUrl != oldUrl ||\n+                    mOpenMRS.hashedPassword != ApplicationConstants.EMPTY_STRING &&\n+                    !BCrypt.checkpw(password, mOpenMRS.hashedPassword) ||\n+                    mWipeRequired) {\n+                loginView.showWarningDialog()\n+            } else {\n+                authenticateUser(username, password, url)\n+            }\n+        }\n+    }\n+\n+    override fun authenticateUser(username: String?, password: String?, url: String?) {\n+        authenticateUser(username, password, url, mWipeRequired)\n+    }\n+\n+    override fun authenticateUser(username: String?, password: String?, url: String?, wipeDatabase: Boolean) {\n+        loginView.showLoadingAnimation()\n+        if (isOnline()) {\n+            mWipeRequired = wipeDatabase\n+            val restApi = RestServiceBuilder.createService(RestApi::class.java, username, password)\n+            val call = restApi.session\n+            call.enqueue(object : Callback<Session> {\n+                override fun onResponse(call: Call<Session>, response: Response<Session>) {\n+                    if (response.isSuccessful) {\n+                        mLogger.d(response.body().toString())\n+                        val session = response.body()\n+                        if (session!!.isAuthenticated) {\n+                            mOpenMRS.deleteSecretKey()\n+                            if (wipeDatabase) {\n+                                mOpenMRS.deleteDatabase(ApplicationConstants.DB_NAME)\n+                                setData(session.sessionId, url!!, username!!, password!!)\n+                                mWipeRequired = false\n+                            }\n+                            if (authorizationManager.isUserNameOrServerEmpty) {\n+                                setData(session.sessionId, url!!, username!!, password!!)\n+                            } else {\n+                                mOpenMRS.sessionToken = session.sessionId\n+                                mOpenMRS.setPasswordAndHashedPassword(password)\n+                            }\n+                            visitRepository.getVisitType(object : GetVisitTypeCallback {\n+                                override fun onGetVisitTypeResponse(visitType: VisitType?) {\n+                                    OpenMRS.getInstance().visitTypeUUID = visitType!!.uuid\n+                                }\n+\n+                                override fun onResponse() {\n+                                    // This method is intentionally empty\n+                                }\n+\n+                                override fun onErrorResponse(errorMessage: String) {\n+                                    OpenMRS.getInstance().visitTypeUUID = ApplicationConstants.DEFAULT_VISIT_TYPE_UUID\n+                                    loginView.showToast(R.string.failed_fetching_visit_type_error_message, ToastUtil.ToastType.ERROR)\n+                                }\n+                            })\n+                            setLogin(true, url!!)\n+                            userService.updateUserInformation(username)\n+                            loginView.userAuthenticated()\n+                            loginView.finishLoginActivity()\n+                        } else {\n+                            loginView.hideLoadingAnimation()\n+                            loginView.showInvalidLoginOrPasswordSnackbar()\n+                        }\n+                    } else {\n+                        loginView.hideLoadingAnimation()\n+                        loginView.showToast(response.message(), ToastUtil.ToastType.ERROR)\n+                    }\n+                }\n+\n+                override fun onFailure(call: Call<Session>, t: Throwable) {\n+                    loginView.hideLoadingAnimation()\n+                    loginView.showToast(t.message, ToastUtil.ToastType.ERROR)\n+                }\n+            })\n+        } else {\n+            if (mOpenMRS.isUserLoggedOnline && url == mOpenMRS.lastLoginServerUrl) {\n+                if (mOpenMRS.username == username && BCrypt.checkpw(password, mOpenMRS.hashedPassword)) {\n+                    mOpenMRS.deleteSecretKey()\n+                    mOpenMRS.setPasswordAndHashedPassword(password)\n+                    mOpenMRS.sessionToken = mOpenMRS.lastSessionToken\n+                    loginView.showToast(R.string.login_offline_toast_message,\n+                            ToastUtil.ToastType.NOTICE)\n+                    loginView.userAuthenticated()\n+                    loginView.finishLoginActivity()\n+                } else {\n+                    loginView.hideLoadingAnimation()\n+                    loginView.showToast(R.string.auth_failed_dialog_message,\n+                            ToastUtil.ToastType.ERROR)\n+                }\n+            } else if (hasNetwork()) {\n+                loginView.showToast(R.string.offline_mode_unsupported_in_first_login,\n+                        ToastUtil.ToastType.ERROR)\n+                loginView.hideLoadingAnimation()\n+            } else {\n+                loginView.showToast(R.string.no_internet_conn_dialog_message,\n+                        ToastUtil.ToastType.ERROR)\n+                loginView.hideLoadingAnimation()\n+            }\n+        }\n+    }\n+\n+    override fun saveLocationsToDatabase(locationList: List<LocationEntity?>?, selectedLocation: String?) {\n+        mOpenMRS.location = selectedLocation\n+        locationDAO.deleteAllLocations()\n+        for (i in locationList!!.indices) {\n+            locationDAO.saveLocation(locationList[i])\n+                    .observeOn(Schedulers.io())\n+                    .subscribe()\n+        }\n+    }\n+\n+    override fun loadLocations(url: String?) {\n+        loginView.showLocationLoadingAnimation()\n+        if (hasNetwork()) {\n+            val locationEndPoint = url + ApplicationConstants.API.REST_ENDPOINT + \"location\"\n+            val call = restApi.getLocations(locationEndPoint, \"Login Location\", \"full\")\n+            call.enqueue(object : Callback<Results<LocationEntity?>> {\n+                override fun onResponse(call: Call<Results<LocationEntity?>>, response: Response<Results<LocationEntity?>>) {\n+                    if (response.isSuccessful) {\n+                        RestServiceBuilder.changeBaseUrl(url?.trim { it <= ' ' })\n+                        mOpenMRS.serverUrl = url\n+                        loginView.initLoginForm(response.body()!!.results, url)\n+                        loginView.startFormListService()\n+                        loginView.setLocationErrorOccurred(false)\n+                    } else {\n+                        loginView.showInvalidURLSnackbar(R.string.snackbar_server_error)\n+                        loginView.setLocationErrorOccurred(true)\n+                        loginView.initLoginForm(ArrayList(), url)\n+                    }\n+                    loginView.hideUrlLoadingAnimation()\n+                }\n+\n+                override fun onFailure(call: Call<Results<LocationEntity?>>, t: Throwable) {\n+                    loginView.hideUrlLoadingAnimation()\n+                    loginView.showInvalidURLSnackbar(t.message)\n+                    loginView.initLoginForm(ArrayList(), url)\n+                    loginView.setLocationErrorOccurred(true)\n+                }\n+            })\n+        } else {\n+            addSubscription(locationDAO.locations\n+                    .observeOn(AndroidSchedulers.mainThread())\n+                    .subscribe { locationEntities: List<LocationEntity?> ->\n+                        if (locationEntities.size > 0) {\n+                            loginView.initLoginForm(locationEntities, url)\n+                            loginView.setLocationErrorOccurred(false)\n+                        } else {\n+                            loginView.showToast(R.string.no_internet_connection_message, ToastUtil.ToastType.ERROR)\n+                            loginView.setLocationErrorOccurred(true)\n+                        }\n+                        loginView.hideLoadingAnimation()\n+                    })\n+        }\n+    }\n+\n+    private fun validateLoginFields(username: String, password: String, url: String): Boolean {\n+        return notEmpty(username) || notEmpty(password) || notEmpty(url)\n+    }\n+\n+    private fun setData(sessionToken: String?, url: String, username: String, password: String) {\n+        mOpenMRS.sessionToken = sessionToken\n+        mOpenMRS.serverUrl = url\n+        mOpenMRS.username = username\n+        mOpenMRS.setPasswordAndHashedPassword(password)\n+    }\n+\n+    private fun setLogin(isLogin: Boolean, serverUrl: String) {\n+        mOpenMRS.isUserLoggedOnline = isLogin\n+        mOpenMRS.lastLoginServerUrl = serverUrl\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "fdce0f42b2b77a053deaccfb99e088114bcea642",
    "filename": "openmrs-client/src/test/java/org/openmrs/mobile/test/presenters/LoginPresenterTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/openmrs/openmrs-contrib-android-client/blob/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/test/java/org/openmrs/mobile/test/presenters/LoginPresenterTest.java",
    "raw_url": "https://github.com/openmrs/openmrs-contrib-android-client/raw/2971f3fcac8e24c6943bcd6aa5afc076e1b33176/openmrs-client/src/test/java/org/openmrs/mobile/test/presenters/LoginPresenterTest.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-contrib-android-client/contents/openmrs-client/src/test/java/org/openmrs/mobile/test/presenters/LoginPresenterTest.java?ref=2971f3fcac8e24c6943bcd6aa5afc076e1b33176",
    "patch": "@@ -274,7 +274,7 @@ public void shouldStartFormListServiceWhenAuthenticated() {\n         PowerMockito.mockStatic(OpenMRS.class);\n         PowerMockito.when(OpenMRS.getInstance()).thenReturn(openMRS);\n         PowerMockito.when(openMRS.getApplicationContext()).thenReturn(context);\n-        LoginFragment loginFragment = LoginFragment.newInstance();\n+        LoginFragment loginFragment = new LoginFragment();\n         try {\n             loginFragment.userAuthenticated();\n         } catch (NullPointerException ignored) {"
  }
]
