[
  {
    "sha": "7c48af95f20175e294a823a0cee36de49feeb832",
    "filename": "api-test/src/test/java/org/openmrs/module/metadatasharing/ConceptNamesTest.java",
    "status": "modified",
    "additions": 266,
    "deletions": 32,
    "changes": 298,
    "blob_url": "https://github.com/openmrs/openmrs-module-metadatasharing/blob/463c3fedea0ee869fb7b18a38ef491314ce702cf/api-test/src/test/java/org/openmrs/module/metadatasharing/ConceptNamesTest.java",
    "raw_url": "https://github.com/openmrs/openmrs-module-metadatasharing/raw/463c3fedea0ee869fb7b18a38ef491314ce702cf/api-test/src/test/java/org/openmrs/module/metadatasharing/ConceptNamesTest.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-module-metadatasharing/contents/api-test/src/test/java/org/openmrs/module/metadatasharing/ConceptNamesTest.java?ref=463c3fedea0ee869fb7b18a38ef491314ce702cf",
    "patch": "@@ -13,8 +13,11 @@\n  */\n package org.openmrs.module.metadatasharing;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -24,6 +27,7 @@\n import java.util.UUID;\n \n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.openmrs.Concept;\n import org.openmrs.ConceptName;\n@@ -52,7 +56,7 @@ public void shouldOverwritePreferredNameIfPreferTheirs() throws Exception {\n \t\t\t\tconcept.setUuid(conceptUuid);\n \t\t\t\t\n \t\t\t\tConceptName preferredName = new ConceptName(\"a\", Locale.ENGLISH);\n-\t\t\t\tconcept.setPreferredName(Locale.ENGLISH, preferredName);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n \t\t\t\t\n \t\t\t\tConceptName synonym = new ConceptName(\"AA\", Locale.ENGLISH);\n \t\t\t\tconcept.addName(synonym);\n@@ -73,7 +77,7 @@ public void prepareImportServer() throws Exception {\n \t\t\t\tconcept.setUuid(conceptUuid);\n \t\t\t\t\n \t\t\t\tConceptName preferredName = new ConceptName(\"b\", Locale.ENGLISH);\n-\t\t\t\tconcept.setPreferredName(Locale.ENGLISH, preferredName);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n \t\t\t\t\n \t\t\t\tConceptName synonym = new ConceptName(\"AA\", Locale.ENGLISH);\n \t\t\t\tconcept.addName(synonym);\n@@ -103,9 +107,7 @@ public void runOnImportServerAfterImport() throws Exception {\n \t\t\t\tCollection<ConceptName> names = concept.getNames();\n \t\t\t\tSet<String> expectedNames = new HashSet<String>();\n \t\t\t\texpectedNames.addAll(Arrays.asList(\"AA\", \"AAG\", \"a\", \"b\"));\n-\t\t\t\tfor (ConceptName name : names) {\n-\t\t\t\t\tassertTrue(name.getName() + \" missing\", expectedNames.remove(name.getName()));\n-\t\t\t\t}\n+\t\t\t\tassertNull(diffConceptNameSets(concept.getNames(), expectedNames));\n \t\t\t\t\n \t\t\t\tConceptName preferredName = concept.getPreferredName(Locale.ENGLISH);\n \t\t\t\tAssert.assertEquals(\"a must be preferred\", \"a\", preferredName.getName());\n@@ -126,7 +128,7 @@ public void shouldRemoveExistingNamesIfNotInIncomingInMirrorMode() throws Except\n \t\t\t\tconcept.setUuid(conceptUuid);\n \t\t\t\t\n \t\t\t\tConceptName preferredName = new ConceptName(\"a\", Locale.ENGLISH);\n-\t\t\t\tconcept.setPreferredName(Locale.ENGLISH, preferredName);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n \t\t\t\t\n \t\t\t\tConceptName synonym = new ConceptName(\"AA\", Locale.ENGLISH);\n \t\t\t\tconcept.addName(synonym);\n@@ -137,17 +139,14 @@ public void shouldRemoveExistingNamesIfNotInIncomingInMirrorMode() throws Except\n \t\t\t\tContext.getConceptService().saveConcept(concept);\n \t\t\t\treturn Arrays.asList(concept);\n \t\t\t}\n-\t\t\t\n-\t\t\t/**\n-\t\t\t * @see org.openmrs.module.metadatasharing.ShareTestHelper#prepareImportServer()\n-\t\t\t */\n+\n \t\t\t@Override\n \t\t\tpublic void prepareImportServer() throws Exception {\n \t\t\t\tConcept concept = new Concept();\n \t\t\t\tconcept.setUuid(conceptUuid);\n \t\t\t\t\n \t\t\t\tConceptName preferredName = new ConceptName(\"b\", Locale.ENGLISH);\n-\t\t\t\tconcept.setPreferredName(Locale.ENGLISH, preferredName);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n \t\t\t\t\n \t\t\t\tConceptName synonym = new ConceptName(\"AA\", Locale.ENGLISH);\n \t\t\t\tconcept.addName(synonym);\n@@ -157,10 +156,7 @@ public void prepareImportServer() throws Exception {\n \t\t\t\t\n \t\t\t\tContext.getConceptService().saveConcept(concept);\n \t\t\t}\n-\t\t\t\n-\t\t\t/**\n-\t\t\t * @see org.openmrs.module.metadatasharing.ShareTestHelper#runOnImportServerBeforeImport(org.openmrs.module.metadatasharing.wrapper.PackageImporter)\n-\t\t\t */\n+\n \t\t\t@Override\n \t\t\tpublic void runOnImportServerBeforeImport(PackageImporter importer) throws Exception {\n \t\t\t\timporter.setImportConfig(ImportConfig.valueOf(ImportMode.MIRROR));\n@@ -173,9 +169,7 @@ public void runOnImportServerAfterImport() throws Exception {\n \t\t\t\tCollection<ConceptName> names = concept.getNames();\n \t\t\t\tSet<String> expectedNames = new HashSet<String>();\n \t\t\t\texpectedNames.addAll(Arrays.asList(\"AA\", \"AAG\", \"a\"));\n-\t\t\t\tfor (ConceptName name : names) {\n-\t\t\t\t\tassertTrue(name.getName() + \" missing\", expectedNames.remove(name.getName()));\n-\t\t\t\t}\n+\t\t\t\tassertNull(diffConceptNameSets(concept.getNames(), expectedNames));\n \t\t\t\t\n \t\t\t\tConceptName preferredName = concept.getPreferredName(Locale.ENGLISH);\n \t\t\t\tAssert.assertEquals(\"a must be preferred\", \"a\", preferredName.getName());\n@@ -196,7 +190,7 @@ public void shouldNotOverwritePreferredNameIfPreferMine() throws Exception {\n \t\t\t\tconcept.setUuid(conceptUuid);\n \t\t\t\t\n \t\t\t\tConceptName preferredName = new ConceptName(\"a\", Locale.ENGLISH);\n-\t\t\t\tconcept.setPreferredName(Locale.ENGLISH, preferredName);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n \t\t\t\t\n \t\t\t\tConceptName synonym = new ConceptName(\"AA\", Locale.ENGLISH);\n \t\t\t\tconcept.addName(synonym);\n@@ -207,17 +201,14 @@ public void shouldNotOverwritePreferredNameIfPreferMine() throws Exception {\n \t\t\t\tContext.getConceptService().saveConcept(concept);\n \t\t\t\treturn Arrays.asList(concept);\n \t\t\t}\n-\t\t\t\n-\t\t\t/**\n-\t\t\t * @see org.openmrs.module.metadatasharing.ShareTestHelper#prepareImportServer()\n-\t\t\t */\n+\n \t\t\t@Override\n \t\t\tpublic void prepareImportServer() throws Exception {\n \t\t\t\tConcept concept = new Concept();\n \t\t\t\tconcept.setUuid(conceptUuid);\n \t\t\t\t\n \t\t\t\tConceptName preferredName = new ConceptName(\"b\", Locale.ENGLISH);\n-\t\t\t\tconcept.setPreferredName(Locale.ENGLISH, preferredName);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n \t\t\t\t\n \t\t\t\tConceptName synonym = new ConceptName(\"AA\", Locale.ENGLISH);\n \t\t\t\tconcept.addName(synonym);\n@@ -227,10 +218,7 @@ public void prepareImportServer() throws Exception {\n \t\t\t\t\n \t\t\t\tContext.getConceptService().saveConcept(concept);\n \t\t\t}\n-\t\t\t\n-\t\t\t/**\n-\t\t\t * @see org.openmrs.module.metadatasharing.ShareTestHelper#runOnImportServerBeforeImport(org.openmrs.module.metadatasharing.wrapper.PackageImporter)\n-\t\t\t */\n+\n \t\t\t@Override\n \t\t\tpublic void runOnImportServerBeforeImport(PackageImporter importer) throws Exception {\n \t\t\t    for (ImportedItem importedItem: importer.getImportedItems(0)) {\n@@ -247,14 +235,260 @@ public void runOnImportServerAfterImport() throws Exception {\n \t\t\t\tCollection<ConceptName> names = concept.getNames();\n \t\t\t\tSet<String> expectedNames = new HashSet<String>();\n \t\t\t\texpectedNames.addAll(Arrays.asList(\"AA\", \"AAG\",\"a\", \"b\"));\n-\t\t\t\tfor (ConceptName name : names) {\n-\t\t\t\t\tassertTrue(name.getName() + \" missing\", expectedNames.remove(name.getName()));\n-\t\t\t\t}\n-\t\t\t\t\n+\t\t\t\tassertNull(diffConceptNameSets(concept.getNames(), expectedNames));\n+\n \t\t\t\tConceptName preferredName = concept.getPreferredName(Locale.ENGLISH);\n \t\t\t\tAssert.assertEquals(\"b must be preferred\", \"b\", preferredName.getName());\n \t\t\t}\n \t\t\t\n \t\t});\n \t}\n+\n+\t@Test\n+\t@Ignore(\"This doesn't work in the existing implementation.\")\n+\t// Incoming changes to capitalization are simply ignored.\n+\tpublic void shouldAllowChangingNameCapitalization() throws Exception {\n+\t\tfinal String conceptUuid = UUID.randomUUID().toString();\n+\n+\t\trunShareTest(new ShareTestHelper() {\n+\n+\t\t\t@Override\n+\t\t\tpublic List<?> prepareExportServer() throws Exception {\n+\t\t\t\tConcept concept = new Concept();\n+\t\t\t\tconcept.setUuid(conceptUuid);\n+\n+\t\t\t\tConceptName preferredName = new ConceptName(\"Aaa\", Locale.ENGLISH);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n+\n+\t\t\t\tConceptName synonym = new ConceptName(\"Baa\", Locale.ENGLISH);\n+\t\t\t\tconcept.addName(synonym);\n+\n+\t\t\t\tConceptName synonym2 = new ConceptName(\"Aag\", Locale.GERMAN);\n+\t\t\t\tconcept.addName(synonym2);\n+\n+\t\t\t\tContext.getConceptService().saveConcept(concept);\n+\t\t\t\treturn Arrays.asList(concept);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void prepareImportServer() throws Exception {\n+\t\t\t\tConcept concept = new Concept();\n+\t\t\t\tconcept.setUuid(conceptUuid);\n+\n+\t\t\t\tConceptName preferredName = new ConceptName(\"AAA\", Locale.ENGLISH);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n+\n+\t\t\t\tConceptName synonym = new ConceptName(\"BAA\", Locale.ENGLISH);\n+\t\t\t\tconcept.addName(synonym);\n+\n+\t\t\t\tConceptName synonym2 = new ConceptName(\"AAG\", Locale.GERMAN);\n+\t\t\t\tconcept.addName(synonym2);\n+\n+\t\t\t\tContext.getConceptService().saveConcept(concept);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void runOnImportServerBeforeImport(PackageImporter importer) throws Exception {\n+\t\t\t\tfor (ImportedItem importedItem: importer.getImportedItems(0)) {\n+\t\t\t\t\tif (importedItem.getIncoming() instanceof Concept) {\n+\t\t\t\t\t\timportedItem.setImportType(ImportType.PREFER_THEIRS);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void runOnImportServerAfterImport() throws Exception {\n+\t\t\t\tConcept concept = Context.getConceptService().getConceptByUuid(conceptUuid);\n+\n+\t\t\t\tCollection<ConceptName> names = concept.getNames();\n+\t\t\t\tSet<String> expectedNames = new HashSet<String>(Arrays.asList(\"Aaa\", \"Baa\", \"Aag\"));\n+\t\t\t\tassertNull(diffConceptNameSets(concept.getNames(), expectedNames));\n+\t\t\t}\n+\n+\t\t});\n+\t}\n+\n+\t@Test\n+\t@Ignore(\"This doesn't work in the existing implementation.\")\n+\t// The error that the server throws in this case (which is not the error this test produces) is\n+\t// `org.openmrs.api.DuplicateConceptNameException: 'AA' is a duplicate name in locale 'en' for the same concept`\n+\tpublic void shouldSwapSynonymWithPreferredNameIfPreferTheirs() throws Exception {\n+\t\tfinal String conceptUuid = UUID.randomUUID().toString();\n+\n+\t\trunShareTest(new ShareTestHelper() {\n+\n+\t\t\t@Override\n+\t\t\tpublic List<?> prepareExportServer() throws Exception {\n+\t\t\t\tConcept concept = new Concept();\n+\t\t\t\tconcept.setUuid(conceptUuid);\n+\n+\t\t\t\tConceptName preferredName = new ConceptName(\"AA\", Locale.ENGLISH);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n+\n+\t\t\t\tConceptName synonym = new ConceptName(\"b\", Locale.ENGLISH);\n+\t\t\t\tconcept.addName(synonym);\n+\n+\t\t\t\tContext.getConceptService().saveConcept(concept);\n+\t\t\t\treturn Arrays.asList(concept);\n+\t\t\t}\n+\n+\t\t\t/**\n+\t\t\t * @see org.openmrs.module.metadatasharing.ShareTestHelper#prepareImportServer()\n+\t\t\t */\n+\t\t\t@Override\n+\t\t\tpublic void prepareImportServer() throws Exception {\n+\t\t\t\tConcept concept = new Concept();\n+\t\t\t\tconcept.setUuid(conceptUuid);\n+\n+\t\t\t\tConceptName preferredName = new ConceptName(\"b\", Locale.ENGLISH);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n+\n+\t\t\t\tConceptName synonym = new ConceptName(\"AA\", Locale.ENGLISH);\n+\t\t\t\tconcept.addName(synonym);\n+\n+\t\t\t\tContext.getConceptService().saveConcept(concept);\n+\t\t\t}\n+\n+\t\t\t/**\n+\t\t\t * @see org.openmrs.module.metadatasharing.ShareTestHelper#runOnImportServerBeforeImport(org.openmrs.module.metadatasharing.wrapper.PackageImporter)\n+\t\t\t */\n+\t\t\t@Override\n+\t\t\tpublic void runOnImportServerBeforeImport(PackageImporter importer) throws Exception {\n+\t\t\t\tfor (ImportedItem importedItem: importer.getImportedItems(0)) {\n+\t\t\t\t\tif (importedItem.getIncoming() instanceof Concept) {\n+\t\t\t\t\t\timportedItem.setImportType(ImportType.PREFER_THEIRS);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void runOnImportServerAfterImport() throws Exception {\n+\t\t\t\tConcept concept = Context.getConceptService().getConceptByUuid(conceptUuid);\n+\n+\t\t\t\tCollection<ConceptName> names = concept.getNames();\n+\t\t\t\tSet<String> expectedNames = new HashSet<String>();\n+\t\t\t\texpectedNames.addAll(Arrays.asList(\"AA\", \"b\"));\n+\t\t\t\tassertNull(diffConceptNameSets(concept.getNames(), expectedNames));\n+\n+\t\t\t\tConceptName preferredName = concept.getPreferredName(Locale.ENGLISH);\n+\t\t\t\tAssert.assertEquals(\"AA must be preferred\", \"AA\", preferredName.getName());\n+\t\t\t}\n+\n+\t\t});\n+\t}\n+\n+\t@Test\n+\t// This test should fail, but doesn't.\n+\t// The error that the server throws in this case (which is not the error this test produces) is\n+\t// `org.openmrs.api.DuplicateConceptNameException: 'b' is a duplicate name in locale 'en' for the same concept`\n+\tpublic void shouldChangePreferredNameToSynonymIfPreferTheirs() throws Exception {\n+\t\tfinal String conceptUuid = UUID.randomUUID().toString();\n+\n+\t\trunShareTest(new ShareTestHelper() {\n+\n+\t\t\t@Override\n+\t\t\tpublic List<?> prepareExportServer() throws Exception {\n+\t\t\t\tConcept concept = new Concept();\n+\t\t\t\tconcept.setUuid(conceptUuid);\n+\n+\t\t\t\tConceptName preferredName = new ConceptName(\"AA\", Locale.ENGLISH);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n+\t\t\t\tassertTrue(preferredName.isFullySpecifiedName());\n+\n+\t\t\t\tConceptName synonym = new ConceptName(\"b\", Locale.ENGLISH);\n+\t\t\t\tconcept.addName(synonym);\n+\n+\t\t\t\tContext.getConceptService().saveConcept(concept);\n+\t\t\t\treturn Arrays.asList(concept);\n+\t\t\t}\n+\n+\t\t\t/**\n+\t\t\t * @see org.openmrs.module.metadatasharing.ShareTestHelper#prepareImportServer()\n+\t\t\t */\n+\t\t\t@Override\n+\t\t\tpublic void prepareImportServer() throws Exception {\n+\t\t\t\tConcept concept = new Concept();\n+\t\t\t\tconcept.setUuid(conceptUuid);\n+\n+\t\t\t\tConceptName preferredName = new ConceptName(\"b\", Locale.ENGLISH);\n+\t\t\t\tconcept.setPreferredName(preferredName);\n+\t\t\t\tassertTrue(preferredName.isFullySpecifiedName());\n+\n+\t\t\t\tContext.getConceptService().saveConcept(concept);\n+\t\t\t}\n+\n+\t\t\t/**\n+\t\t\t * @see org.openmrs.module.metadatasharing.ShareTestHelper#runOnImportServerBeforeImport(org.openmrs.module.metadatasharing.wrapper.PackageImporter)\n+\t\t\t */\n+\t\t\t@Override\n+\t\t\tpublic void runOnImportServerBeforeImport(PackageImporter importer) throws Exception {\n+\t\t\t\tfor (ImportedItem importedItem: importer.getImportedItems(0)) {\n+\t\t\t\t\tif (importedItem.getIncoming() instanceof Concept) {\n+\t\t\t\t\t\timportedItem.setImportType(ImportType.PREFER_THEIRS);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void runOnImportServerAfterImport() throws Exception {\n+\t\t\t\tConcept concept = Context.getConceptService().getConceptByUuid(conceptUuid);\n+\n+\t\t\t\tCollection<ConceptName> names = concept.getNames();\n+\t\t\t\tSet<String> expectedNames = new HashSet<String>();\n+\t\t\t\texpectedNames.addAll(Arrays.asList(\"AA\", \"b\"));\n+\t\t\t\tassertNull(diffConceptNameSets(concept.getNames(), expectedNames));\n+\n+\t\t\t\tConceptName preferredName = concept.getPreferredName(Locale.ENGLISH);\n+\t\t\t\tAssert.assertEquals(\"AA must be preferred\", \"AA\", preferredName.getName());\n+\t\t\t}\n+\n+\t\t});\n+\t}\n+\n+\tString diffConceptNameSets(Collection<ConceptName> actual, Collection<String> expected) {\n+\t\tArrayList<String> actualNames = new ArrayList<String>();\n+\t\tfor (ConceptName name : actual) {\n+\t\t\tactualNames.add(name.getName());\n+\t\t}\n+\t\tArrayList<String> unexpected = new ArrayList<String>();\n+\t\tfor (String name : actualNames) {\n+\t\t\tif (!expected.contains(name)) {\n+\t\t\t\tunexpected.add(name);\n+\t\t\t}\n+\t\t}\n+\t\tArrayList<String> notFound = new ArrayList<String>();\n+\t\tfor (String name : expected) {\n+\t\t\tif (!actualNames.contains(name)) {\n+\t\t\t\tnotFound.add(name);\n+\t\t\t}\n+\t\t}\n+\t\tStringBuilder result = new StringBuilder();\n+\t\tif (!unexpected.isEmpty()) {\n+\t\t\tresult.append(\"Unexpected name(s) found: \");\n+\t\t\tfor (int i = 0; i < unexpected.size(); i++) {\n+\t\t\t\tresult.append(unexpected.get(i));\n+\t\t\t\tif (i != unexpected.size() - 1) {\n+\t\t\t\t\tresult.append(\", \");\n+\t\t\t\t} else {\n+\t\t\t\t\tresult.append(\".  \");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (!notFound.isEmpty()) {\n+\t\t\tresult.append(\"Result is missing name(s): \");\n+\t\t\tfor (int i = 0; i < notFound.size(); i++) {\n+\t\t\t\tresult.append(notFound.get(i));\n+\t\t\t\tif (i != notFound.size() - 1) {\n+\t\t\t\t\tresult.append(\", \");\n+\t\t\t\t} else {\n+\t\t\t\t\tresult.append(\".  \");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (result.toString().equals(\"\")) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\treturn result.toString();\n+\t\t}\n+\t}\n }"
  }
]
