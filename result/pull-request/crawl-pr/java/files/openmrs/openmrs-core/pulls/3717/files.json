[
  {
    "sha": "61be1786908e708ea3313718c07af271500b6c81",
    "filename": "api/src/main/java/org/openmrs/module/ModuleUtil.java",
    "status": "modified",
    "additions": 42,
    "deletions": 29,
    "changes": 71,
    "blob_url": "https://github.com/openmrs/openmrs-core/blob/b6ab36eac5a88eb7339b6fdd0f135a52f74630bb/api/src/main/java/org/openmrs/module/ModuleUtil.java",
    "raw_url": "https://github.com/openmrs/openmrs-core/raw/b6ab36eac5a88eb7339b6fdd0f135a52f74630bb/api/src/main/java/org/openmrs/module/ModuleUtil.java",
    "contents_url": "https://api.github.com/repos/openmrs/openmrs-core/contents/api/src/main/java/org/openmrs/module/ModuleUtil.java?ref=b6ab36eac5a88eb7339b6fdd0f135a52f74630bb",
    "patch": "@@ -62,11 +62,17 @@ private ModuleUtil() {\n \t\n \tprivate static final Logger log = LoggerFactory.getLogger(ModuleUtil.class);\n \t\n+\t// adapted from semver.org\n+\t\tprivate static final Pattern VERSION_PATTERN = Pattern.compile(\n+\t\t\t\"^(?<major>0|[1-9]\\\\d*)\\\\.(?<minor>0|[1-9]\\\\d*)\\\\.(?<patch>0|[1-9]\\\\d*)(?:-(?<snapshot>SNAPSHOT))?$\"\n+\t\t);\n+\t\n \t/**\n \t * Start up the module system with the given properties.\n \t *\n \t * @param props Properties (OpenMRS runtime properties)\n \t */\n+\t\n \tpublic static void startup(Properties props) throws ModuleMustStartException, OpenmrsCoreModuleException {\n \t\t\n \t\tString moduleListString = props.getProperty(ModuleConstants.RUNTIMEPROPERTY_MODULE_LIST_TO_LOAD);\n@@ -418,41 +424,47 @@ public static int compareVersion(String version, String value) {\n \t\t\t\treturn 0;\n \t\t\t}\n \t\t\t\n-\t\t\tList<String> versions = new ArrayList<>();\n-\t\t\tList<String> values = new ArrayList<>();\n-\t\t\tString separator = \"-\";\n-\t\t\t\n-\t\t\t// strip off any qualifier e.g. \"-SNAPSHOT\"\n-\t\t\tint qualifierIndex = version.indexOf(separator);\n-\t\t\tif (qualifierIndex != -1) {\n-\t\t\t\tversion = version.substring(0, qualifierIndex);\n-\t\t\t}\n-\t\t\t\n-\t\t\tqualifierIndex = value.indexOf(separator);\n-\t\t\tif (qualifierIndex != -1) {\n-\t\t\t\tvalue = value.substring(0, qualifierIndex);\n-\t\t\t}\n-\t\t\t\n-\t\t\tCollections.addAll(versions, version.split(\"\\\\.\"));\n-\t\t\tCollections.addAll(values, value.split(\"\\\\.\"));\n-\t\t\t\n-\t\t\t// match the sizes of the lists\n-\t\t\twhile (versions.size() < values.size()) {\n-\t\t\t\tversions.add(\"0\");\n-\t\t\t}\n-\t\t\twhile (values.size() < versions.size()) {\n-\t\t\t\tvalues.add(\"0\");\n+\t\t\tMatcher versionMatcher = VERSION_PATTERN.matcher(version);\n+\t\t\tMatcher valueMatcher = VERSION_PATTERN.matcher(value);\n+\n+\t\t\tif (!versionMatcher.matches() || !valueMatcher.matches()) {\n+\t\t\t\t// this seems wrong\n+\t\t\t\treturn 0;\n \t\t\t}\n+\n+\t\t\tfinal String[] versions = {\n+\t\t\t\tversionMatcher.group(\"major\"),\n+\t\t\t\tversionMatcher.group(\"minor\"),\n+\t\t\t\tversionMatcher.group(\"patch\")\n+\t\t\t};\n+\t\t\tfinal String[] values = {\n+\t\t\t\tvalueMatcher.group(\"major\"),\n+\t\t\t\tvalueMatcher.group(\"minor\"),\n+\t\t\t\tvalueMatcher.group(\"patch\")\n+\t\t\t};\n \t\t\t\n-\t\t\tfor (int x = 0; x < versions.size(); x++) {\n-\t\t\t\tString verNum = versions.get(x).trim();\n-\t\t\t\tString valNum = values.get(x).trim();\n+\t\t\tfor (int x = 0; x < versions.length; x++) {\n+\t\t\t\tString verNum = versions[x].trim();\n+\t\t\t\tString valNum = values[x].trim();\n \t\t\t\tLong ver = NumberUtils.toLong(verNum, 0);\n \t\t\t\tLong val = NumberUtils.toLong(valNum, 0);\n \t\t\t\t\n \t\t\t\tint ret = ver.compareTo(val);\n \t\t\t\tif (ret != 0) {\n \t\t\t\t\treturn ret;\n+\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tString versionSnapshot = versionMatcher.group(\"snapshot\");\n+\t\t\t\tString valueSnapshot = valueMatcher.group(\"snapshot\");\n+\n+\t\t\t\tif (!\"\".equals(versionSnapshot)) {\n+\t\t\t\t\tif (\"\".equals(valueSnapshot)) {\n+\t\t\t\t\t\treturn -1;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!\"\".equals(valueSnapshot)) {\n+\t\t\t\t\t\treturn 1;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -471,8 +483,9 @@ public static int compareVersion(String version, String value) {\n \t * @return true if version contains qualifier\n \t */\n \tpublic static boolean isVersionWithQualifier(String version) {\n-\t\tMatcher matcher = Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+)(\\\\.(\\\\d+))?(\\\\-([A-Za-z]+))\").matcher(version);\n-\t\treturn matcher.matches();\n+\t\tMatcher matcher = VERSION_PATTERN.matcher(version);\n+\t\treturn matcher.matches() && !\"\".equals(matcher.group(\"snapshot\"));\n+\t\t\n \t}\n \t\n \t/**"
  }
]
