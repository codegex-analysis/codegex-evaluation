[
  {
    "sha": "57a97d75e8786d81520ee2d575282698e8d336d0",
    "filename": "src/main/java/com/glencoesoftware/bioformats2raw/Converter.java",
    "status": "modified",
    "additions": 16,
    "deletions": 11,
    "changes": 27,
    "blob_url": "https://github.com/glencoesoftware/bioformats2raw/blob/5c4186545c6fa5b3ed5e29c0764a5a1bd1c90af0/src/main/java/com/glencoesoftware/bioformats2raw/Converter.java",
    "raw_url": "https://github.com/glencoesoftware/bioformats2raw/raw/5c4186545c6fa5b3ed5e29c0764a5a1bd1c90af0/src/main/java/com/glencoesoftware/bioformats2raw/Converter.java",
    "contents_url": "https://api.github.com/repos/glencoesoftware/bioformats2raw/contents/src/main/java/com/glencoesoftware/bioformats2raw/Converter.java?ref=5c4186545c6fa5b3ed5e29c0764a5a1bd1c90af0",
    "patch": "@@ -1170,7 +1170,6 @@ private void saveHCSMetadata(IMetadata meta) throws IOException {\n \n           Map<String, Object> well = new HashMap<String, Object>();\n           well.put(\"path\", wellPath);\n-          wells.add(well);\n \n           List<Map<String, Object>> imageList =\n             new ArrayList<Map<String, Object>>();\n@@ -1199,31 +1198,37 @@ private void saveHCSMetadata(IMetadata meta) throws IOException {\n           int column = index.getWellColumnIndex();\n           int row = index.getWellRowIndex();\n \n-          boolean foundColumn = false;\n-          for (Map<String, Object> colMap : columns) {\n-            if (colMap.get(\"name\").equals(String.valueOf(column))) {\n-              foundColumn = true;\n+          int columnIndex = -1;\n+          for (int c=0; c<columns.size(); c++) {\n+            if (columns.get(c).get(\"name\").equals(String.valueOf(column))) {\n+              columnIndex = c;\n               break;\n             }\n           }\n-          if (!foundColumn) {\n+          if (columnIndex < 0) {\n             Map<String, Object> colMap = new HashMap<String, Object>();\n             colMap.put(\"name\", String.valueOf(column));\n+            columnIndex = columns.size();\n             columns.add(colMap);\n           }\n \n-          boolean foundRow = false;\n-          for (Map<String, Object> rowMap : rows) {\n-            if (rowMap.get(\"name\").equals(String.valueOf(row))) {\n-              foundRow = true;\n+          int rowIndex = -1;\n+          for (int r=0; r<rows.size(); r++) {\n+            if (rows.get(r).get(\"name\").equals(String.valueOf(row))) {\n+              rowIndex = r;\n               break;\n             }\n           }\n-          if (!foundRow) {\n+          if (rowIndex < 0) {\n             Map<String, Object> rowMap = new HashMap<String, Object>();\n             rowMap.put(\"name\", String.valueOf(row));\n+            rowIndex = rows.size();\n             rows.add(rowMap);\n           }\n+\n+          well.put(\"row_index\", rowIndex);\n+          well.put(\"column_index\", columnIndex);\n+          wells.add(well);\n         }\n \n         maxField = (int) Math.max(maxField, index.getFieldIndex());"
  }
]
