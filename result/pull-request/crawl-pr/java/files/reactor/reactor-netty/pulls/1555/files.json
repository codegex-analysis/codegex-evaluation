[
  {
    "sha": "cabad1a28caf96cd1ee77daabc87d334902d73bf",
    "filename": "reactor-netty-http-brave/src/main/java/reactor/netty/http/brave/TracingHttpServerDecorator.java",
    "status": "modified",
    "additions": 98,
    "deletions": 2,
    "changes": 100,
    "blob_url": "https://github.com/reactor/reactor-netty/blob/a2816111a850778d173a98fdcd3a3eab8f538855/reactor-netty-http-brave/src/main/java/reactor/netty/http/brave/TracingHttpServerDecorator.java",
    "raw_url": "https://github.com/reactor/reactor-netty/raw/a2816111a850778d173a98fdcd3a3eab8f538855/reactor-netty-http-brave/src/main/java/reactor/netty/http/brave/TracingHttpServerDecorator.java",
    "contents_url": "https://api.github.com/repos/reactor/reactor-netty/contents/reactor-netty-http-brave/src/main/java/reactor/netty/http/brave/TracingHttpServerDecorator.java?ref=a2816111a850778d173a98fdcd3a3eab8f538855",
    "patch": "@@ -22,13 +22,21 @@\n import brave.http.HttpServerResponse;\n import brave.http.HttpTracing;\n import brave.propagation.CurrentTraceContext;\n+import brave.propagation.CurrentTraceContext.Scope;\n import brave.propagation.TraceContext;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n import io.netty.channel.EventLoop;\n import io.netty.util.AttributeKey;\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.SignalType;\n import reactor.netty.Connection;\n import reactor.netty.ConnectionObserver;\n+import reactor.netty.NettyPipeline;\n import reactor.netty.http.server.HttpServer;\n import reactor.util.annotation.Nullable;\n \n@@ -39,6 +47,7 @@\n \n import static java.util.Objects.requireNonNull;\n import static reactor.netty.ConnectionObserver.State.CONFIGURED;\n+import static reactor.netty.ConnectionObserver.State.CONNECTED;\n import static reactor.netty.http.server.HttpServerState.REQUEST_DECODING_FAILED;\n \n final class TracingHttpServerDecorator {\n@@ -190,23 +199,92 @@ public Object unwrap() {\n \t\t}\n \t}\n \n+\tstatic final class TracingChannelInboundHandler extends ChannelInboundHandlerAdapter {\n+\t\tfinal CurrentTraceContext currentTraceContext;\n+\n+\t\tTracingChannelInboundHandler(CurrentTraceContext currentTraceContext) {\n+\t\t\tthis.currentTraceContext = currentTraceContext;\n+\t\t}\n+\n+\t\t@Override\n+\t\t@SuppressWarnings(\"try\")\n+\t\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) {\n+\t\t\tSpan span = ctx.channel().attr(SPAN_ATTR_KEY).get();\n+\t\t\tif (span != null) {\n+\t\t\t\ttry (Scope scope = currentTraceContext.maybeScope(span.context())) {\n+\t\t\t\t\tctx.fireChannelRead(msg);\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tctx.fireChannelRead(msg);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean isSharable() {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n+\tstatic final class TracingChannelOutboundHandler extends ChannelOutboundHandlerAdapter {\n+\t\tfinal CurrentTraceContext currentTraceContext;\n+\n+\t\tTracingChannelOutboundHandler(CurrentTraceContext currentTraceContext) {\n+\t\t\tthis.currentTraceContext = currentTraceContext;\n+\t\t}\n+\n+\t\t@Override\n+\t\t@SuppressWarnings({\"FutureReturnValueIgnored\", \"try\"})\n+\t\tpublic void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n+\t\t\tSpan span = ctx.channel().attr(SPAN_ATTR_KEY).get();\n+\t\t\tif (span != null) {\n+\t\t\t\ttry (Scope scope = currentTraceContext.maybeScope(span.context())) {\n+\t\t\t\t\t//\"FutureReturnValueIgnored\" this is deliberate\n+\t\t\t\t\tctx.write(msg, promise);\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t//\"FutureReturnValueIgnored\" this is deliberate\n+\t\t\tctx.write(msg, promise);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean isSharable() {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n \tstatic final class TracingConnectionObserver implements ConnectionObserver {\n+\t\tstatic final String INBOUND_HANDLER = \"TracingChannelInboundHandler\";\n+\t\tstatic final String OUTBOUND_HANDLER = \"TracingChannelOutboundHandler\";\n \n \t\tfinal CurrentTraceContext currentTraceContext;\n \t\tfinal HttpServerHandler<HttpServerRequest, HttpServerResponse> handler;\n \t\tfinal Function<String, String> uriMapping;\n+\t\tfinal ChannelHandler inboundHandler;\n+\t\tfinal ChannelHandler outboundHandler;\n \n \t\tTracingConnectionObserver(\n \t\t\t\tCurrentTraceContext currentTraceContext,\n \t\t\t\tHttpServerHandler<HttpServerRequest, HttpServerResponse> handler,\n \t\t\t\tFunction<String, String> uriMapping) {\n \t\t\tthis.currentTraceContext = currentTraceContext;\n+\t\t\tthis.inboundHandler = new TracingChannelInboundHandler(currentTraceContext);\n+\t\t\tthis.outboundHandler = new TracingChannelOutboundHandler(currentTraceContext);\n \t\t\tthis.handler = handler;\n \t\t\tthis.uriMapping = uriMapping;\n \t\t}\n \n \t\t@Override\n \t\tpublic void onStateChange(Connection connection, State state) {\n+\t\t\tif (state == CONNECTED) {\n+\t\t\t\tconnection.channel()\n+\t\t\t\t          .pipeline()\n+\t\t\t\t          .addAfter(NettyPipeline.HttpTrafficHandler, INBOUND_HANDLER, inboundHandler)\n+\t\t\t\t          .addBefore(NettyPipeline.ReactiveBridge, OUTBOUND_HANDLER, outboundHandler);\n+\t\t\t\treturn;\n+\t\t\t}\n \t\t\tif (state == CONFIGURED && connection instanceof reactor.netty.http.server.HttpServerRequest) {\n \t\t\t\treactor.netty.http.server.HttpServerRequest request = (reactor.netty.http.server.HttpServerRequest) connection;\n \n@@ -215,6 +293,7 @@ public void onStateChange(Connection connection, State state) {\n \n \t\t\t\tconnection.channel().attr(REQUEST_ATTR_KEY).set(braveRequest);\n \t\t\t\tconnection.channel().attr(SPAN_ATTR_KEY).set(span);\n+\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tif (state == REQUEST_DECODING_FAILED && connection instanceof reactor.netty.http.server.HttpServerResponse) {\n@@ -269,6 +348,11 @@ public void onUncaughtException(Connection connection, Throwable error) {\n \t\t\t                       HttpServerResponse braveResponse =\n \t\t\t                               new DelegatingHttpResponse(response, braveRequest, throwable);\n \t\t\t                       response.withConnection(conn -> {\n+\t\t\t                               conn.onTerminate()\n+\t\t\t                                   .subscribe(\n+\t\t\t                                           null,\n+\t\t\t                                           t -> cleanup(connection.channel()),\n+\t\t\t                                           () -> cleanup(connection.channel()));\n \t\t\t                               EventLoop eventLoop = conn.channel().eventLoop();\n \t\t\t                               if (eventLoop.inEventLoop()) {\n \t\t\t                                   handler.handleSend(braveResponse, localSpan);\n@@ -277,8 +361,6 @@ public void onUncaughtException(Connection connection, Throwable error) {\n \t\t\t                                   eventLoop.execute(() -> handler.handleSend(braveResponse, localSpan));\n \t\t\t                               }\n \t\t\t                       });\n-\t\t\t\t                   connection.channel().attr(REQUEST_ATTR_KEY).set(null);\n-\t\t\t\t                   connection.channel().attr(SPAN_ATTR_KEY).set(null);\n \t\t\t                   }\n \t\t\t               })\n \t\t\t               .doOnError(this::throwable)\n@@ -289,5 +371,19 @@ public void onUncaughtException(Connection connection, Throwable error) {\n \t\tvoid throwable(Throwable t) {\n \t\t\tthis.throwable = t;\n \t\t}\n+\n+\t\tvoid cleanup(Channel channel) {\n+\t\t\tEventLoop eventLoop = channel.eventLoop();\n+\t\t\tif (eventLoop.inEventLoop()) {\n+\t\t\t\tchannel.attr(REQUEST_ATTR_KEY).set(null);\n+\t\t\t\tchannel.attr(SPAN_ATTR_KEY).set(null);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\teventLoop.execute(() -> {\n+\t\t\t\t\tchannel.attr(REQUEST_ATTR_KEY).set(null);\n+\t\t\t\t\tchannel.attr(SPAN_ATTR_KEY).set(null);\n+\t\t\t\t});\n+\t\t\t}\n+\t\t}\n \t}\n }"
  },
  {
    "sha": "f0c826ddfccdf28a486071c5470720edbe778eba",
    "filename": "reactor-netty-http-brave/src/test/java/reactor/netty/http/brave/ITTracingHttpServerDecoratorTest.java",
    "status": "modified",
    "additions": 37,
    "deletions": 16,
    "changes": 53,
    "blob_url": "https://github.com/reactor/reactor-netty/blob/a2816111a850778d173a98fdcd3a3eab8f538855/reactor-netty-http-brave/src/test/java/reactor/netty/http/brave/ITTracingHttpServerDecoratorTest.java",
    "raw_url": "https://github.com/reactor/reactor-netty/raw/a2816111a850778d173a98fdcd3a3eab8f538855/reactor-netty-http-brave/src/test/java/reactor/netty/http/brave/ITTracingHttpServerDecoratorTest.java",
    "contents_url": "https://api.github.com/repos/reactor/reactor-netty/contents/reactor-netty-http-brave/src/test/java/reactor/netty/http/brave/ITTracingHttpServerDecoratorTest.java?ref=a2816111a850778d173a98fdcd3a3eab8f538855",
    "patch": "@@ -15,9 +15,13 @@\n  */\n package reactor.netty.http.brave;\n \n-import brave.propagation.TraceContext;\n import brave.test.http.ITHttpServer;\n+import io.netty.channel.group.ChannelGroup;\n+import io.netty.channel.group.DefaultChannelGroup;\n+import io.netty.util.concurrent.DefaultEventExecutor;\n+import io.netty.util.concurrent.EventExecutor;\n import org.junit.After;\n+import org.junit.AfterClass;\n import org.junit.Ignore;\n import org.junit.Test;\n import reactor.core.publisher.Mono;\n@@ -27,18 +31,33 @@\n import reactor.netty.http.server.HttpServerRoutes;\n \n import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n \n import static brave.Span.Kind.SERVER;\n import static org.assertj.core.api.Assertions.assertThat;\n \n public class ITTracingHttpServerDecoratorTest extends ITHttpServer {\n \tprivate DisposableServer disposableServer;\n+\tprivate ChannelGroup group;\n+\tprivate static final EventExecutor executor = new DefaultEventExecutor();\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\texecutor.shutdownGracefully()\n+\t\t        .get(5, TimeUnit.SECONDS);\n+\t}\n \n \t@After\n-\tpublic void after() {\n+\t@Override\n+\tpublic void close() throws Exception {\n \t\tif (disposableServer != null) {\n \t\t\tdisposableServer.disposeNow();\n \t\t}\n+\t\tif (group != null) {\n+\t\t\tgroup.close()\n+\t\t\t     .get(5, TimeUnit.SECONDS);\n+\t\t}\n+\t\tsuper.close();\n \t}\n \n \t@Override\n@@ -49,31 +68,29 @@ protected void init() {\n \t\t\t\t                .get(\"/foo\", (req, res) -> res.sendString(Mono.just(\"bar\")))\n \t\t\t\t                .get(\"/baggage\", (req, res) ->\n \t\t\t\t                        res.sendString(Mono.just(req.requestHeaders().getAsString(BAGGAGE_FIELD_KEY))))\n-\t\t\t\t                .get(\"/exception\", (req, res) -> Mono.error(new RuntimeException(\"not ready\")))\n+\t\t\t\t                .get(\"/exception\", (req, res) -> Mono.error(NOT_READY_ISE))\n \t\t\t\t                .get(\"/badrequest\", (req, res) -> res.status(400).send())\n \t\t\t\t                .get(\"/async\", (req, res) ->\n \t\t\t\t                        res.sendString(Mono.just(\"body\")\n \t\t\t\t                                           .publishOn(Schedulers.boundedElastic())))\n-\t\t\t\t                .get(\"/exceptionAsync\", (req, res) -> Mono.error(new RuntimeException(\"not ready\"))\n+\t\t\t\t                .get(\"/exceptionAsync\", (req, res) -> Mono.error(NOT_READY_ISE)\n \t\t\t\t                                                          .publishOn(Schedulers.boundedElastic())\n \t\t\t\t                                                          .then())\n \t\t\t\t                .get(\"/items/{itemId}\", (req, res) -> res.sendString(Mono.justOrEmpty(req.param(\"itemId\"))))\n \t\t\t\t                .get(\"/async_items/{itemId}\", (req, res) ->\n \t\t\t\t                        res.sendString(Mono.justOrEmpty(req.param(\"itemId\"))\n \t\t\t\t                                           .publishOn(Schedulers.boundedElastic())))\n \t\t\t\t                .get(\"/nested/items/{itemId}\", (req, res) -> res.sendString(Mono.justOrEmpty(req.param(\"itemId\"))))\n-\t\t\t\t                .get(\"/child\", (req, res) ->\n-\t\t\t\t                        Mono.deferContextual(Mono::just)\n-\t\t\t\t                            .flatMap(ctx -> {\n-\t\t\t\t                                    httpTracing.tracing()\n-\t\t\t\t                                               .tracer()\n-\t\t\t\t                                               .newChild(ctx.get(TraceContext.class))\n-\t\t\t\t                                               .name(\"child\")\n-\t\t\t\t                                               .start()\n-\t\t\t\t                                               .finish();\n-\n-\t\t\t\t                                    return res.send();\n-\t\t\t\t                            }));\n+\t\t\t\t                .get(\"/child\", (req, res) -> {\n+\t\t\t\t                        httpTracing.tracing()\n+\t\t\t\t                                   .tracer()\n+\t\t\t\t                                   .nextSpan()\n+\t\t\t\t                                   .name(\"child\")\n+\t\t\t\t                                   .start()\n+\t\t\t\t                                   .finish();\n+\n+\t\t\t\t                        return res.send();\n+\t\t\t\t                });\n \n \t\tReactorNettyHttpTracing reactorNettyHttpTracing =\n \t\t\t\tReactorNettyHttpTracing.create(\n@@ -91,11 +108,13 @@ protected void init() {\n \t\t\t\t            return s;\n \t\t\t\t        });\n \n+\t\tgroup = new DefaultChannelGroup(executor);\n \t\tdisposableServer = reactorNettyHttpTracing.decorateHttpServer(\n \t\t\t\tHttpServer.create()\n \t\t\t\t          .port(0)\n \t\t\t\t          .wiretap(true)\n \t\t\t\t          .forwarded(true)\n+\t\t\t\t          .channelGroup(group)\n \t\t\t\t          .handle(routes)).bindNow();\n \t}\n \n@@ -107,11 +126,13 @@ protected String url(String path) {\n \t@Override\n \t@Ignore\n \tpublic void httpStatusCodeSettable_onUncaughtException() {\n+\t\t// Reactor Netty always returns 500 ISE when an exception happens\n \t}\n \n \t@Override\n \t@Ignore\n \tpublic void httpStatusCodeSettable_onUncaughtException_async() {\n+\t\t// Reactor Netty always returns 500 ISE when an exception happens\n \t}\n \n \t@Test"
  }
]
