[
  {
    "sha": "962bf01aa6853fa3a7f1c097969095a2fc3515fb",
    "filename": "README.md",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/README.md",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/README.md",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/README.md?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -27,15 +27,15 @@ We will explore the charging phase of Li-ion batteries to start with.\n - The code here has high complexity in a single function.\n - The tests are not complete - they do not cover all the needs of a consumer\n \n-## Tasks\n+## Changes done\n \n-1. Reduce the cyclomatic complexity.\n+1. Added language feature\n+1. Reduced cyclomatic complexity\n+1. Added warning feature\n+1. Added temperature scale \n 1. Separate pure functions from I/O\n-1. Avoid duplication - functions that do nearly the same thing\n-1. Complete the tests - cover all conditions.\n-1. To take effective action, we need to know\n-the abnormal measure and the breach -\n-whether high or low. Add this capability.\n+1. Avoided duplication\n+1. Completed the test condition.\n \n ## The Exploration\n "
  },
  {
    "sha": "ff86a44f95e54b9099ee6f4641d0fd631718c44d",
    "filename": "message_de.properties",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/message_de.properties",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/message_de.properties",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/message_de.properties?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -0,0 +1,10 @@\n+TEMPERATURE_BELOW_THRESHOLD=Die Temperatur liegt unter dem Schwellenwert\n+TEMPERATURE_ABOVE_THRESHOLD=Die Temperatur liegt �ber dem Schwellenwert\n+TEMPERATURE_ABOVE_THRESHOLD_WARNING=Warnung: Die Temperatur n�hert sich dem Schwellenwert\n+TEMPERATURE_BELOW_THRESHOLD_WARNING=Warnung: Die Temperatur n�hert sich dem Schwellenwert\n+STATE_OF_CHARGE_ABOVE_THRESHOLD=StateOfCharge liegt �ber dem Schwellenwert\n+STATE_OF_CHARGE_BELOW_THRESHOLD=StateOfCharge liegt unter dem Schwellenwert\n+STATE_OF_CHARGE_ABOVE_THRESHOLD_WARNING=Warnung: StateOfCharge n�hert sich dem Schwellenwert\n+STATE_OF_CHARGE_BELOW_THRESHOLD_WARNING=Warnung: StateOfCharge n�hert sich dem Schwellenwert\n+CHARGING_RATE_ABOVE_THRESHOLD=Die Laderate liegt �ber dem Schwellenwert\n+CHARGING_RATE_ABOVE_THRESHOLD_WARNING=Warnung: Die Laderate n�hert sich dem Schwellenwert"
  },
  {
    "sha": "62c8f935ffab5e04ed47cd906bcd7e84989775af",
    "filename": "message_en.properties",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/message_en.properties",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/message_en.properties",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/message_en.properties?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -0,0 +1,10 @@\n+TEMPERATURE_BELOW_THRESHOLD=Temperature is below threshold value\n+TEMPERATURE_ABOVE_THRESHOLD=Temperature is above threshold value\n+TEMPERATURE_ABOVE_THRESHOLD_WARNING=Warning: Temperature is approaching above threshold value\n+TEMPERATURE_BELOW_THRESHOLD_WARNING=Warning: Temperature is approaching below threshold value\n+STATE_OF_CHARGE_ABOVE_THRESHOLD=StateOfCharge is above threshold value\n+STATE_OF_CHARGE_BELOW_THRESHOLD=StateOfCharge is below threshold value\n+STATE_OF_CHARGE_ABOVE_THRESHOLD_WARNING=Warning: StateOfCharge is approaching above threshold value\n+STATE_OF_CHARGE_BELOW_THRESHOLD_WARNING=Warning: StateOfCharge is approaching below threshold value\n+CHARGING_RATE_ABOVE_THRESHOLD=ChargingRate is above threshold value\n+CHARGING_RATE_ABOVE_THRESHOLD_WARNING=Warning: ChargingRate is approaching above threshold value"
  },
  {
    "sha": "94082c18cd29d97a45caad36cc4aed971c49d105",
    "filename": "vitals/Main.java",
    "status": "modified",
    "additions": 23,
    "deletions": 17,
    "changes": 40,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/Main.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/Main.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/vitals/Main.java?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -1,23 +1,29 @@\n package vitals;\n \n-public class Main {\n-    static boolean batteryIsOk(float temperature, float soc, float chargeRate) {\n-        if(temperature < 0 || temperature > 45) {\n-            System.out.println(\"Temperature is out of range!\");\n-            return false;\n-        } else if(soc < 20 || soc > 80) {\n-            System.out.println(\"State of Charge is out of range!\");\n-            return false;\n-        } else if(chargeRate > 0.8) {\n-            System.out.println(\"Charge Rate is out of range!\");\n-            return false;\n-        }\n-        return true;\n+import vitals.battery.LiIonBattery;\n+import vitals.language.Language;\n+\n+public final class Main {\n+\n+    private Main() {\n+\n     }\n \n-    public static void main(String[] args) {\n-        assert(batteryIsOk(25, 70, 0.7f) == true);\n-        assert(batteryIsOk(50, 85, 0.0f) == false);\n-        System.out.println(\"Some more tests needed\");\n+    public static void main(String[] args) throws IllegalArgumentException {\n+        Language.setPreference(\"German\");\n+        assert (LiIonBattery.isBatteryOk(25, 70, 0.7f) == true);\n+        assert (LiIonBattery.isBatteryOk(0, 85, 0.0f) == false);\n+        assert (LiIonBattery.isBatteryOk(44, 85, 0.0f) == false);\n+        assert (LiIonBattery.isBatteryOk(50, 85, 0.0f) == false);\n+        assert (LiIonBattery.isBatteryOk(-1, 85, 0.0f) == false);\n+        assert (LiIonBattery.isBatteryOk(25, 79, 0.0f) == false);\n+        assert (LiIonBattery.isBatteryOk(25, 21, 0.0f) == false);\n+        assert (LiIonBattery.isBatteryOk(25, 85, 0.0f) == false);\n+        assert (LiIonBattery.isBatteryOk(25, 15, 0.0f) == false);\n+        assert (LiIonBattery.isBatteryOk(25, 25, 0.76f) == false);\n+        assert (LiIonBattery.isBatteryOk(25, 25, 0.9f) == false);\n+        assert (LiIonBattery.isBatteryOkWithInputInTemperatureScale(\"50C\", 70, 0.7f) == false);\n+        assert (LiIonBattery.isBatteryOkWithInputInTemperatureScale(\"323K\", 70, 0.7f) == false);\n+        assert (LiIonBattery.isBatteryOkWithInputInTemperatureScale(\"122F\", 70, 0.7f) == false);\n     }\n }"
  },
  {
    "sha": "5464b5f95b53f6d1b3274022694e3e6a807fce43",
    "filename": "vitals/TemperatureScale.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/TemperatureScale.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/TemperatureScale.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/vitals/TemperatureScale.java?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -0,0 +1,33 @@\n+package vitals;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * @author {@literal Jayaram Naveenkumar (jayaram.naveenkumar@in.bosch.com)}\n+ */\n+public enum TemperatureScale {\n+    C(returnSameValue()),\n+    K(convertKelvinToCelsius()),\n+    F(convertFahrenheitToCelsius());\n+    private final Function<Float, Float> toCelsius;\n+\n+    TemperatureScale(Function<Float, Float> toCelsius) {\n+        this.toCelsius = toCelsius;\n+    }\n+\n+    public Function<Float, Float> toCelsius() {\n+        return toCelsius;\n+    }\n+\n+    static Function<Float, Float> returnSameValue() {\n+        return Function.identity();\n+    }\n+\n+    static Function<Float, Float> convertKelvinToCelsius() {\n+        return aFloat -> aFloat - 273.15f;\n+    }\n+\n+    static Function<Float, Float> convertFahrenheitToCelsius() {\n+        return aFloat -> (aFloat - 32f) * (5f / 9f);\n+    }\n+}"
  },
  {
    "sha": "67fb870b968ab8f7f771a71c32ae31e36c6e820a",
    "filename": "vitals/ValidateBMSVariants.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/ValidateBMSVariants.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/ValidateBMSVariants.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/vitals/ValidateBMSVariants.java?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -0,0 +1,44 @@\n+package vitals;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+/**\n+ * @author {@literal Jayaram Naveenkumar (jayaram.naveenkumar@in.bosch.com)}\n+ */\n+public class ValidateBMSVariants {\n+\n+    private final Predicate<Float> variant;\n+    private final String message;\n+    private final Float value;\n+\n+    public ValidateBMSVariants(\n+          Predicate<Float> variant,\n+          Float value,\n+          String message\n+    )\n+    {\n+        this.value = value;\n+        this.variant = variant;\n+        this.message = message;\n+    }\n+\n+    public boolean isNotValid()\n+    {\n+        return variant.test(value);\n+    }\n+\n+    public String getMessage()\n+\n+    {\n+        return message;\n+    }\n+\n+    public static String check(List<ValidateBMSVariants> validateBMSVariants) {\n+        return validateBMSVariants.stream()\n+              .filter(ValidateBMSVariants::isNotValid)\n+              .findFirst()\n+              .map(ValidateBMSVariants::getMessage)\n+              .orElse(null);\n+    }\n+}"
  },
  {
    "sha": "3ab41962702b19cb925b181a24f110ade87f6f93",
    "filename": "vitals/battery/LiIonBattery.java",
    "status": "added",
    "additions": 187,
    "deletions": 0,
    "changes": 187,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/battery/LiIonBattery.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/battery/LiIonBattery.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/vitals/battery/LiIonBattery.java?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -0,0 +1,187 @@\n+package vitals.battery;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import vitals.TemperatureScale;\n+import vitals.ValidateBMSVariants;\n+import vitals.bms.BMS;\n+import vitals.language.Language;\n+\n+import static vitals.bms.BMSCheck.*;\n+\n+/**\n+ * @author {@literal Jayaram Naveenkumar (jayaram.naveenkumar@in.bosch.com)}\n+ */\n+public class LiIonBattery {\n+\n+    static final BiFunction<Float, Float, Float> calculatePercentageValue =\n+          (percentageValue, value) -> (percentageValue / 100) * value;\n+    private Map<BMS, Float> input;\n+\n+    public LiIonBattery(\n+          float temperature,\n+          float soc,\n+          float chargeRate\n+    )\n+    {\n+        saveInput(temperature, soc, chargeRate);\n+    }\n+\n+    private void saveInput(\n+          float temperature,\n+          float soc,\n+          float chargeRate\n+    )\n+    {\n+        input = new TreeMap<>();\n+        input.put(BMS.TEMPERATURE, temperature);\n+        input.put(BMS.SOC, soc);\n+        input.put(BMS.CHARGINGRATE, chargeRate);\n+    }\n+\n+    private List<ValidateBMSVariants> variants() {\n+        List<ValidateBMSVariants> validateBMSVariants = new ArrayList<>();\n+        validateBMSVariants.add(new ValidateBMSVariants(\n+              isApproachingAboveThreshold(\n+                    Temperature.MAX_TEMPERATURE_THRESHOLD,\n+                    Temperature.MAX_WARNING_TEMPERATURE_THRESHOLD\n+              ),\n+              input.get(BMS.TEMPERATURE),\n+              Language.getSelectedLanguage().getString(TEMPERATURE_ABOVE_THRESHOLD_WARNING)\n+        ));\n+        validateBMSVariants.add(new ValidateBMSVariants(\n+              isApproachingBelowThreshold(\n+                    Temperature.MIN_TEMPERATURE_THRESHOLD,\n+                    Temperature.MIN_WARNING_TEMPERATURE_THRESHOLD\n+              ),\n+              input.get(BMS.TEMPERATURE),\n+              Language.getSelectedLanguage().getString(TEMPERATURE_BELOW_THRESHOLD_WARNING)\n+        ));\n+        validateBMSVariants.add(new ValidateBMSVariants(\n+              isBelowThreshold(Temperature.MIN_TEMPERATURE_THRESHOLD),\n+              input.get(BMS.TEMPERATURE),\n+              Language.getSelectedLanguage().getString(TEMPERATURE_BELOW_THRESHOLD)\n+        ));\n+        validateBMSVariants.add(new ValidateBMSVariants(\n+              isAboveThreshold(Temperature.MAX_TEMPERATURE_THRESHOLD),\n+              input.get(BMS.TEMPERATURE),\n+              Language.getSelectedLanguage().getString(TEMPERATURE_ABOVE_THRESHOLD)\n+        ));\n+        validateBMSVariants.add(new ValidateBMSVariants(\n+              isApproachingBelowThreshold(StateOfCharge.MIN_SOC, StateOfCharge.MIN_WARNING_SOC),\n+              input.get(BMS.SOC),\n+              Language.getSelectedLanguage().getString(STATE_OF_CHARGE_BELOW_THRESHOLD_WARNING)\n+        ));\n+        validateBMSVariants.add(new ValidateBMSVariants(\n+              isApproachingAboveThreshold(StateOfCharge.MAX_SOC, StateOfCharge.MAX_WARNING_SOC),\n+              input.get(BMS.SOC),\n+              Language.getSelectedLanguage().getString(STATE_OF_CHARGE_ABOVE_THRESHOLD_WARNING)\n+        ));\n+        validateBMSVariants.add(new ValidateBMSVariants(isBelowThreshold(StateOfCharge.MIN_SOC),\n+              input.get(BMS.SOC), Language.getSelectedLanguage().getString(STATE_OF_CHARGE_BELOW_THRESHOLD)\n+        ));\n+        validateBMSVariants.add(new ValidateBMSVariants(isAboveThreshold(StateOfCharge.MAX_SOC),\n+              input.get(BMS.SOC), Language.getSelectedLanguage().getString(STATE_OF_CHARGE_ABOVE_THRESHOLD)\n+        ));\n+        validateBMSVariants.add(new ValidateBMSVariants(\n+              isApproachingAboveThreshold(ChargingRate.MAX_CHARGING_RATE, ChargingRate.MAX_WARNING_CHARGING_RATE),\n+              input.get(BMS.CHARGINGRATE),\n+              Language.getSelectedLanguage().getString(CHARGING_RATE_ABOVE_THRESHOLD_WARNING)\n+        ));\n+        validateBMSVariants.add(new ValidateBMSVariants(\n+              isAboveThreshold(ChargingRate.MAX_CHARGING_RATE),\n+              input.get(BMS.CHARGINGRATE),\n+              Language.getSelectedLanguage().getString(CHARGING_RATE_ABOVE_THRESHOLD)\n+        ));\n+        return validateBMSVariants;\n+    }\n+\n+    public static boolean isBatteryOk(\n+          float temperature,\n+          float soc,\n+          float chargeRate\n+    )\n+    {\n+        LiIonBattery liIonBattery = new LiIonBattery(temperature, soc, chargeRate);\n+        String hasError = ValidateBMSVariants.check(liIonBattery.variants());\n+        if (hasError != null) {\n+            System.out.println(hasError);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static boolean isBatteryOkWithInputInTemperatureScale(\n+          String temperature,\n+          float soc,\n+          float chargeRate\n+    )\n+    {\n+        LiIonBattery liIonBattery =\n+              new LiIonBattery(\n+                    isTempValidReturnFunction(temperature)\n+                          .apply(Float.parseFloat(temperature.substring(0, temperature.length() - 1))),\n+                    soc,\n+                    chargeRate\n+              );\n+        String hasError = ValidateBMSVariants.check(liIonBattery.variants());\n+        if (hasError != null) {\n+            System.out.println(hasError);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private static Function<Float, Float> isTempValidReturnFunction(String temperature) {\n+        return Arrays.stream(TemperatureScale.values())\n+              .filter(tempUnit -> temperature.toUpperCase().contains(tempUnit.name()))\n+              .findFirst()\n+              .map(TemperatureScale::toCelsius)\n+              .orElseThrow(() -> new IllegalArgumentException(\"Provide proper temperature scale\"));\n+    }\n+\n+    public static final class Temperature {\n+\n+        private static final float WARNING_PERCENTAGE = 5;\n+        private static final float MAX_TEMPERATURE_THRESHOLD = 45;\n+        private static final float MIN_TEMPERATURE_THRESHOLD = 0;\n+        private static final float MAX_WARNING_TEMPERATURE_THRESHOLD =\n+              MAX_TEMPERATURE_THRESHOLD - calculatePercentageValue.apply(WARNING_PERCENTAGE, MAX_TEMPERATURE_THRESHOLD);\n+        private static final float MIN_WARNING_TEMPERATURE_THRESHOLD =\n+              MIN_TEMPERATURE_THRESHOLD + calculatePercentageValue.apply(WARNING_PERCENTAGE, MIN_TEMPERATURE_THRESHOLD);\n+\n+        private Temperature() {\n+        }\n+    }\n+\n+    public static final class StateOfCharge {\n+\n+        private static final float MAX_SOC = 80;\n+        private static final float MIN_SOC = 20;\n+        private static final float WARNING_PERCENTAGE = 5;\n+        private static final float MAX_WARNING_SOC =\n+              MAX_SOC - calculatePercentageValue.apply(WARNING_PERCENTAGE, MAX_SOC);\n+        private static final float MIN_WARNING_SOC =\n+              MIN_SOC + calculatePercentageValue.apply(WARNING_PERCENTAGE, MIN_SOC);\n+\n+        private StateOfCharge() {\n+        }\n+    }\n+\n+    public static final class ChargingRate {\n+\n+        private static final float MAX_CHARGING_RATE = 0.8f;\n+        private static final float WARNING_PERCENTAGE = 5;\n+        private static final float MAX_WARNING_CHARGING_RATE =\n+              MAX_CHARGING_RATE - calculatePercentageValue.apply(WARNING_PERCENTAGE, MAX_CHARGING_RATE);\n+\n+        private ChargingRate() {\n+        }\n+    }\n+}"
  },
  {
    "sha": "8737c8b398b03a6ccca8b8440ef9fa04e5e1c3d6",
    "filename": "vitals/bms/BMS.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/bms/BMS.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/bms/BMS.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/vitals/bms/BMS.java?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -0,0 +1,10 @@\n+package vitals.bms;\n+\n+/**\n+ * @author {@literal Jayaram Naveenkumar (jayaram.naveenkumar@in.bosch.com)}\n+ */\n+public enum BMS {\n+    TEMPERATURE,\n+    SOC,\n+    CHARGINGRATE\n+}"
  },
  {
    "sha": "0f77c2655272e8cf2c0ef64e4c74fae662f5749d",
    "filename": "vitals/bms/BMSCheck.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/bms/BMSCheck.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/bms/BMSCheck.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/vitals/bms/BMSCheck.java?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -0,0 +1,47 @@\n+package vitals.bms;\n+\n+import java.util.function.Predicate;\n+\n+/**\n+ * @author {@literal Jayaram Naveenkumar (jayaram.naveenkumar@in.bosch.com)}\n+ */\n+public final class BMSCheck {\n+\n+    private BMSCheck() {\n+    }\n+\n+    public static final String TEMPERATURE_BELOW_THRESHOLD = \"TEMPERATURE_BELOW_THRESHOLD\";\n+    public static final String TEMPERATURE_ABOVE_THRESHOLD = \"TEMPERATURE_ABOVE_THRESHOLD\";\n+    public static final String TEMPERATURE_ABOVE_THRESHOLD_WARNING = \"TEMPERATURE_ABOVE_THRESHOLD_WARNING\";\n+    public static final String TEMPERATURE_BELOW_THRESHOLD_WARNING = \"TEMPERATURE_BELOW_THRESHOLD_WARNING\";\n+    public static final String STATE_OF_CHARGE_ABOVE_THRESHOLD = \"STATE_OF_CHARGE_ABOVE_THRESHOLD\";\n+    public static final String STATE_OF_CHARGE_BELOW_THRESHOLD = \"STATE_OF_CHARGE_BELOW_THRESHOLD\";\n+    public static final String STATE_OF_CHARGE_ABOVE_THRESHOLD_WARNING = \"STATE_OF_CHARGE_ABOVE_THRESHOLD_WARNING\";\n+    public static final String STATE_OF_CHARGE_BELOW_THRESHOLD_WARNING = \"STATE_OF_CHARGE_BELOW_THRESHOLD_WARNING\";\n+    public static final String CHARGING_RATE_ABOVE_THRESHOLD = \"CHARGING_RATE_ABOVE_THRESHOLD\";\n+    public static final String CHARGING_RATE_ABOVE_THRESHOLD_WARNING = \"CHARGING_RATE_ABOVE_THRESHOLD_WARNING\";\n+\n+    public static Predicate<Float> isAboveThreshold(float maxThreshold) {\n+        return value -> value > maxThreshold;\n+    }\n+\n+    public static Predicate<Float> isBelowThreshold(float minThreshold) {\n+        return value -> value < minThreshold;\n+    }\n+\n+    public static Predicate<Float> isApproachingBelowThreshold(\n+          float minThreshold,\n+          float warningThreshold\n+    )\n+    {\n+        return soc -> soc >= minThreshold && soc <= warningThreshold;\n+    }\n+\n+    public static Predicate<Float> isApproachingAboveThreshold(\n+          float maxThreshold,\n+          float warningThreshold\n+    )\n+    {\n+        return soc -> soc <= maxThreshold && soc >= warningThreshold;\n+    }\n+}"
  },
  {
    "sha": "b924e32e03ef9a57845007c8042aa208e7170966",
    "filename": "vitals/language/Language.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/language/Language.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/language/Language.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/vitals/language/Language.java?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -0,0 +1,35 @@\n+package vitals.language;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Optional;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * @author {@literal Jayaram Naveenkumar (jayaram.naveenkumar@in.bosch.com)}\n+ */\n+public final class Language {\n+\n+    private static ResourceBundle selectedLanguage;\n+\n+    private Language() {\n+    }\n+\n+    public static void setPreference(String language) throws IllegalArgumentException {\n+        String notNullLanguageValue = Optional.ofNullable(language)\n+              .orElseThrow(() -> new IllegalArgumentException(\"Argument passed cannot be null\"));\n+        selectedLanguage = Arrays.stream(LanguageSupported.values())\n+              .filter(languageSupported -> languageSupported.name().equalsIgnoreCase(notNullLanguageValue))\n+              .findFirst()\n+              .map(LanguageSupported::fetchResourceBundle)\n+              .orElseThrow(() -> new IllegalArgumentException(\"Currently English and German language are supported\"));\n+    }\n+\n+    public static ResourceBundle getSelectedLanguage() {\n+        return selectedLanguage;\n+    }\n+\n+    static ResourceBundle fetchResourceBasedOnLanguage(Locale language) {\n+        return ResourceBundle.getBundle(\"message\", language);\n+    }\n+}"
  },
  {
    "sha": "f2f346ccc3bdf31dab0b55d2f052b78a9e0dd0c3",
    "filename": "vitals/language/LanguageSupported.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/blob/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/language/LanguageSupported.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/raw/acb719f6d1a484f464896a4dc2a4a317a445139b/vitals/language/LanguageSupported.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-Naveenkumar36/contents/vitals/language/LanguageSupported.java?ref=acb719f6d1a484f464896a4dc2a4a317a445139b",
    "patch": "@@ -0,0 +1,21 @@\n+package vitals.language;\n+\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * @author {@literal Jayaram Naveenkumar (jayaram.naveenkumar@in.bosch.com)}\n+ */\n+enum LanguageSupported {\n+    ENGLISH(Language.fetchResourceBasedOnLanguage(Locale.ENGLISH)),\n+    GERMAN(Language.fetchResourceBasedOnLanguage(Locale.GERMAN));\n+    private final ResourceBundle userMessages;\n+\n+    LanguageSupported(ResourceBundle userMessages) {\n+        this.userMessages = userMessages;\n+    }\n+\n+    ResourceBundle fetchResourceBundle() {\n+        return userMessages;\n+    }\n+}"
  }
]
