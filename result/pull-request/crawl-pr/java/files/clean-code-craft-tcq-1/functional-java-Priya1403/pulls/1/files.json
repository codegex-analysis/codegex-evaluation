[
  {
    "sha": "c19b4ae67a00c16b8edaa242d84781d23a553373",
    "filename": "vitals/BMSProviderConstants.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/blob/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/BMSProviderConstants.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/raw/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/BMSProviderConstants.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/functional-java-Priya1403/contents/vitals/BMSProviderConstants.java?ref=f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1",
    "patch": "@@ -0,0 +1,23 @@\n+/**\n+ * <copyright>\n+ * \n+ * Copyright (c) 2021 ETAS GmbH. All rights reserved.\n+ * \n+ * </copyright>\n+ */\n+package vitals;\n+\n+/**\n+ * \n+ */\n+public class BMSProviderConstants {\n+\tpublic static final float MAXIMUM_TEMPERATURE = 45;\n+\tpublic static final float MINIIMUM_TEMPERATURE = 0;\n+\tpublic static final float MAXIMUM_STATE_OF_CHARGE = 20;\n+\tpublic static final float MINIMUM_STATE_OF_CHARGE = 80;\n+\tpublic static final float MAXIMUM_CHARGE_RATE = (float) 0.8;\n+\tpublic static final String TEMPERATURE = \"Temperature\";\n+\tpublic static final String STATE_OF_CHARGE = \"State of Charge\";\n+\tpublic static final String CHARGE_RATE = \"Charge Rate\";\n+\n+}"
  },
  {
    "sha": "7aa472bbd99882e86d6952276c709c73da3d7861",
    "filename": "vitals/Battery.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/blob/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/Battery.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/raw/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/Battery.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/functional-java-Priya1403/contents/vitals/Battery.java?ref=f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1",
    "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * <copyright>\n+ * \n+ * Copyright (c) 2021 ETAS GmbH. All rights reserved.\n+ * \n+ * </copyright>\n+ */\n+package vitals;\n+\n+/**\n+ * \n+ */\n+public interface Battery {\n+\n+\tpublic float temperature();\n+\n+\tpublic float stateOfCharge();\n+\n+\tpublic float chargeRate();\n+\n+}"
  },
  {
    "sha": "a8f9c14ea4578894169863568b4a5913499811c1",
    "filename": "vitals/BatteryEnum.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/blob/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/BatteryEnum.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/raw/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/BatteryEnum.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/functional-java-Priya1403/contents/vitals/BatteryEnum.java?ref=f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1",
    "patch": "@@ -0,0 +1,48 @@\n+/**\n+ * <copyright>\n+ * \n+ * Copyright (c) 2021 ETAS GmbH. All rights reserved.\n+ * \n+ * </copyright>\n+ */\n+package vitals;\n+\n+/**\n+ * \n+ */\n+public enum BatteryEnum implements Battery {\n+\n+\tTEMPERATURE(BMSProviderConstants.MAXIMUM_TEMPERATURE, BMSProviderConstants.MINIIMUM_TEMPERATURE), STATEOFCHARGE(\n+\t\t\tBMSProviderConstants.MAXIMUM_STATE_OF_CHARGE,\n+\t\t\tBMSProviderConstants.MINIMUM_STATE_OF_CHARGE), CHARGEOFRATE(BMSProviderConstants.MAXIMUM_CHARGE_RATE);\n+\n+\tprivate float lower;\n+\tprivate float higher;\n+\n+\tprivate BatteryEnum(final float lower, final float higher) {\n+\t\tthis.lower = lower;\n+\t\tthis.higher = higher;\n+\n+\t}\n+\n+\tprivate BatteryEnum(final float higher) {\n+\t\tthis.higher = higher;\n+\n+\t}\n+\n+\t@Override\n+\tpublic float temperature() {\n+\t\treturn higher;\n+\t}\n+\n+\t@Override\n+\tpublic float stateOfCharge() {\n+\t\treturn higher;\n+\t}\n+\n+\t@Override\n+\tpublic float chargeRate() {\n+\t\treturn higher;\n+\t}\n+\n+}"
  },
  {
    "sha": "0e792554b45b93e8a3acbc8f35cd517fd56d7f44",
    "filename": "vitals/BatteryProvider.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/blob/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/BatteryProvider.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/raw/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/BatteryProvider.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/functional-java-Priya1403/contents/vitals/BatteryProvider.java?ref=f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1",
    "patch": "@@ -0,0 +1,25 @@\n+/**\n+ * <copyright>\n+ * \n+ * Copyright (c) 2021 ETAS GmbH. All rights reserved.\n+ * \n+ * </copyright>\n+ */\n+package vitals;\n+\n+import java.util.Set;\n+\n+/**\n+ * \n+ */\n+public interface BatteryProvider {\n+\n+\tboolean isTemperatureOk(final float temperature);\n+\n+\tboolean isStateOfChargeOK(final float soc);\n+\n+\tboolean isChargeOfRateOK(final float chargeOfRate);\n+\n+\tSet<? extends Battery> getBatteryInfo(final Battery battery);\n+\n+}"
  },
  {
    "sha": "8c8fd96121a59502b8b58a55906716030e124d97",
    "filename": "vitals/EnumBatteryResolver.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/blob/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/EnumBatteryResolver.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/raw/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/EnumBatteryResolver.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/functional-java-Priya1403/contents/vitals/EnumBatteryResolver.java?ref=f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1",
    "patch": "@@ -0,0 +1,102 @@\n+/**\n+ * <copyright>\n+ * \n+ * Copyright (c) 2021 ETAS GmbH. All rights reserved.\n+ * \n+ * </copyright>\n+ */\n+package vitals;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * \n+ */\n+public class EnumBatteryResolver implements BatteryProvider {\n+\n+\tprivate final Set<? extends Battery> battery;\n+\tprivate Map<Float, Battery> temperature;\n+\tprivate Map<Float, Battery> stateOfCharge;\n+\tprivate final Map<Float, Battery> chargeRate;\n+\n+\t{\n+\t\tbattery = Collections.unmodifiableSet(EnumSet.allOf(BatteryEnum.class));\n+\t\ttemperature = new HashMap<>();\n+\t\tstateOfCharge = new HashMap<>();\n+\t\tchargeRate = new HashMap<>();\n+\t\tfor (final Battery battery : BatteryEnum.values()) {\n+\t\t\ttemperature.put(battery.temperature(), battery);\n+\t\t\tstateOfCharge.put(battery.stateOfCharge(), battery);\n+\t\t\tchargeRate.put(battery.chargeRate(), battery);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isTemperatureOk(final float temperatureValue) {\n+\t\tfinal Battery batteryTemperature = temperature.get(temperatureValue);\n+\t\tif (isLower(batteryTemperature.temperature(), BMSProviderConstants.MINIIMUM_TEMPERATURE)\n+\t\t\t\t|| isHigher(batteryTemperature.temperature(), BMSProviderConstants.MAXIMUM_TEMPERATURE)) {\n+\t\t\tprintErrorMessage(BMSProviderConstants.TEMPERATURE);\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * @param temperature2\n+\t * @param maximumTemperature\n+\t * @return\n+\t */\n+\tprivate static boolean isHigher(final float actualValue, final float standardValue) {\n+\t\treturn actualValue > standardValue;\n+\t}\n+\n+\t/**\n+\t * @param temperature2\n+\t * @return\n+\t */\n+\tprivate static boolean isLower(final float actualValue, final float standardValue) {\n+\t\treturn actualValue < standardValue;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isStateOfChargeOK(final float soc) {\n+\t\tfinal Battery batterySOC = stateOfCharge.get(soc);\n+\t\tif (isLower(batterySOC.stateOfCharge(), BMSProviderConstants.MINIMUM_STATE_OF_CHARGE)\n+\t\t\t\t|| isHigher(batterySOC.stateOfCharge(), BMSProviderConstants.MAXIMUM_STATE_OF_CHARGE)) {\n+\t\t\tprintErrorMessage(BMSProviderConstants.STATE_OF_CHARGE);\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isChargeOfRateOK(final float chargeOfRate) {\n+\t\tfinal Battery batteryCR = chargeRate.get(chargeOfRate);\n+\t\tif (isHigher(batteryCR.chargeRate(), BMSProviderConstants.MAXIMUM_CHARGE_RATE)) {\n+\t\t\tprintErrorMessage(BMSProviderConstants.CHARGE_RATE);\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic Set<? extends Battery> getBatteryInfo(final Battery battery) {\n+\t\tfinal Battery batteryCR = battery;\n+\t\treturn (Set<? extends Battery>) battery;\n+\t}\n+\n+\tpublic boolean batteryIsOk(final float temperature, final float soc, final float chargeRate) {\n+\t\treturn isTemperatureOk(temperature) && isStateOfChargeOK(soc) && isChargeOfRateOK(chargeRate);\n+\t}\n+\n+\tpublic static void printErrorMessage(final String parameter) {\n+\t\tSystem.out.print(parameter);\n+\t\tSystem.out.println(\" is out of range!\");\n+\t}\n+\n+}"
  },
  {
    "sha": "2f857ddac9951811546a9caee497c4ec8cd7a4d1",
    "filename": "vitals/Main.java",
    "status": "modified",
    "additions": 8,
    "deletions": 19,
    "changes": 27,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/blob/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/Main.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/functional-java-Priya1403/raw/f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1/vitals/Main.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/functional-java-Priya1403/contents/vitals/Main.java?ref=f3d41c98bde6ba82d8d0c2ba180536f6873ba7e1",
    "patch": "@@ -1,23 +1,12 @@\n package vitals;\n \n public class Main {\n-    static boolean batteryIsOk(float temperature, float soc, float chargeRate) {\n-        if(temperature < 0 || temperature > 45) {\n-            System.out.println(\"Temperature is out of range!\");\n-            return false;\n-        } else if(soc < 20 || soc > 80) {\n-            System.out.println(\"State of Charge is out of range!\");\n-            return false;\n-        } else if(chargeRate > 0.8) {\n-            System.out.println(\"Charge Rate is out of range!\");\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    public static void main(String[] args) {\n-        assert(batteryIsOk(25, 70, 0.7f) == true);\n-        assert(batteryIsOk(50, 85, 0.0f) == false);\n-        System.out.println(\"Some more tests needed\");\n-    }\n+\tpublic static void main(final String[] args) {\n+\t\tEnumBatteryResolver batteryResolver = new EnumBatteryResolver();\n+\t\tassert batteryResolver.batteryIsOk(25, 70, 0.7f) == true;\n+\t\tassert batteryResolver.batteryIsOk(50, 85, 0.0f) == false;\n+\t\tassert batteryResolver.batteryIsOk(-5, 30, 0.5f) == false;\n+\t\tassert batteryResolver.batteryIsOk(30, 10, 0.5f) == false;\n+\t\tassert batteryResolver.batteryIsOk(25, 30, 0.9f) == false;\n+\t}\n }"
  }
]
