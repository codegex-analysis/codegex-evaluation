[
  {
    "sha": "05982d066d09c11714694e662af4a575a9236c23",
    "filename": ".github/workflows/main-workflow.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/blob/140aeef4e965282f0de840e6082be1f32ad01b12/.github/workflows/main-workflow.yml",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/raw/140aeef4e965282f0de840e6082be1f32ad01b12/.github/workflows/main-workflow.yml",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/contents/.github/workflows/main-workflow.yml?ref=140aeef4e965282f0de840e6082be1f32ad01b12",
    "patch": "@@ -17,6 +17,6 @@ jobs:\n       with:\n         java-version: 1.8\n     - name: Build\n-      run: javac vitals/Main.java\n+      run: javac vitals/BatteryManagementSystem.java\n     - name: Verify\n-      run: java -ea -classpath . vitals.Main\n+      run: java -ea -classpath . vitals.BatteryManagementSystem"
  },
  {
    "sha": "629f9bb217bfea220f138dd6ee93d17ef53ddd20",
    "filename": "vitals/BatteryFactorAccumulator.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/blob/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/BatteryFactorAccumulator.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/raw/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/BatteryFactorAccumulator.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/contents/vitals/BatteryFactorAccumulator.java?ref=140aeef4e965282f0de840e6082be1f32ad01b12",
    "patch": "@@ -0,0 +1,89 @@\n+package vitals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+public class BatteryFactorAccumulator {\r\n+\t\r\n+\tpublic static String language;\r\n+\tstatic List<String> lang_types = Arrays.asList(\"EN\", \"DE\");\r\n+\tstatic Map<String,Float> VitalFactorExceedMinLimit=new HashMap<>();\r\n+\tstatic Map<String,Float> VitalFactorReachHighBreach=new HashMap<>();\r\n+\tstatic Map<String,Float> VitalFactorReachLowBreach=new HashMap<>();\r\n+\tstatic Map<String,Float> VitalFactorExceedMaxLimit=new HashMap<>();\r\n+\t\r\n+\r\n+    public static void showMsg(String msg)\r\n+    {\r\n+      System.out.println(msg);\r\n+    }\r\n+    \r\n+    public static void displayMaximumAlert(String vitalparam)\r\n+    {\r\n+    \tString alert = (language == \"EN\")? vitalparam + \" is more than its Maximum Limit\":\"Die \" + vitalparam + \"ist hoher als die maximale Grenze\";\r\n+    \tshowMsg(alert);\r\n+    \t\r\n+    }\r\n+\r\n+    public static void displayMinimumAlert(String vitalparam)\r\n+    {\r\n+    \tString alert = (language == \"EN\") ? vitalparam + \" is less than its Minimum Limit\":\"Die \" + vitalparam + \" liegt unter der Hochstgrenze \";\r\n+    \tshowMsg(alert);\r\n+    \t\r\n+    \t\r\n+    }\r\n+    \r\n+\tpublic static boolean displayLowBreachWarning(String vitalparam,float val)\r\n+    {\r\n+\t\tString warning = (language == \"EN\") ?  vitalparam + \" is reaching towards low breach limit\":\"Die \"+ vitalparam +\" erreicht ein niedriges VerstoÃŸlimit\";\r\n+\t\tshowMsg(warning);\r\n+\t\tVitalFactorReachLowBreach.put(vitalparam,val);\r\n+\t\treturn true;\r\n+    }\r\n+    public static boolean displayHighBreachWarning(String vitalparam,float val)\r\n+    {\r\n+    \tString warning = (language == \"EN\") ?  vitalparam + \" is reaching towards high breach limit\":\"Die \" + vitalparam + \" erreicht ein niedriges VerstoÃŸlimit\" ;\r\n+    \tshowMsg(warning);\r\n+    \tVitalFactorReachHighBreach.put(vitalparam,val);\r\n+    \treturn true;\r\n+    }\r\n+   \r\n+\tpublic static boolean set_system_language(String lan) {\r\n+\t\tif(lang_types.contains(lan)){\r\n+\t    \tlanguage=lan;\r\n+\t        return true;\r\n+\t    }\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\r\n+\tpublic static void printBreachWarningMsg(Boolean breachStatus,String status,String parameter,float val) {\r\n+\t\t\r\n+\t\tif(breachStatus){\r\n+\t\t\tbreachStatus=(status==\"LOW\")? displayLowBreachWarning(parameter,val):displayHighBreachWarning(parameter,val);\r\n+\t\t}\r\n+\t\t\r\n+\t}\r\n+\r\n+\tpublic static boolean printAlertHighMsg(boolean parammeasure,String status, String parameter,float val) {\r\n+\t\tif(parammeasure==true && status==\"High\" ){\r\n+\t\tVitalFactorExceedMaxLimit.put(parameter,val);\r\n+\t\t\tdisplayMaximumAlert(parameter);\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn true;\r\n+\t}\r\n+\tpublic static boolean printAlertLowMsg(boolean parammeasure,String status, String parameter,float val) {\r\n+\t\tif(parammeasure==true && status==\"Low\" ){\r\n+\t\tVitalFactorExceedMinLimit.put(parameter,val);\r\n+\t\t\tdisplayMinimumAlert(parameter);\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+}\r\n+\r\n+\r"
  },
  {
    "sha": "ca50459b20f2a94efdef7db4dcf7b98cea677d54",
    "filename": "vitals/BatteryFactorValidator.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/blob/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/BatteryFactorValidator.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/raw/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/BatteryFactorValidator.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/contents/vitals/BatteryFactorValidator.java?ref=140aeef4e965282f0de840e6082be1f32ad01b12",
    "patch": "@@ -0,0 +1,25 @@\n+package vitals;\r\n+public class BatteryFactorValidator {\r\n+  \r\n+\tpublic static boolean EvaluateBatteryMaxMeasure(String ParamName,float ParamValue,float MaxParamLimit) {\r\n+\t\t\r\n+        return ParamValue>MaxParamLimit;\r\n+\t}\r\n+\t\r\n+\tpublic static boolean EvaluateBatteryMinMeasure(String ParamName,float ParamValue,float MinParamLimit) {\r\n+\t\treturn ParamValue < MinParamLimit;\r\n+\t}\r\n+\t\r\n+\t\r\n+    public static boolean CheckLBreach(String ParamName,float ParamValue,float MinParamLimit,float MaxParamLimit)\r\n+    {\r\n+    \treturn((ParamValue >(MinParamLimit+ (MinParamLimit* 0.05f)))&& (ParamValue<(MinParamLimit +MaxParamLimit*0.05f)));\r\n+    }    \r\n+    \r\n+    public static boolean CheckHBreach(String ParamName,float ParamValue,float MinParamLimit,float MaxParamLimit)\r\n+    {\r\n+         return((ParamValue > (MaxParamLimit- (MaxParamLimit*0.05f)))&& (ParamValue<MaxParamLimit));\r\n+         \r\n+        \r\n+    }\r\n+}\r"
  },
  {
    "sha": "2686a416c12d3c88380188c664592ab78665743b",
    "filename": "vitals/BatteryFactorsStateEstimator.java",
    "status": "added",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/blob/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/BatteryFactorsStateEstimator.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/raw/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/BatteryFactorsStateEstimator.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/contents/vitals/BatteryFactorsStateEstimator.java?ref=140aeef4e965282f0de840e6082be1f32ad01b12",
    "patch": "@@ -0,0 +1,84 @@\n+package vitals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+public class BatteryFactorsStateEstimator {\r\n+\t\r\n+\tBatteryFactorValidator bms;\r\n+\tpublic static String temperature_measure=\"Celsius\";\r\n+\tstatic List<String> temperature_measure_type = Arrays.asList(\"Celsius\", \"Fahrenheit\");\r\n+\tpublic float Temperature, StateOfCharge, ChargeRate;\r\n+\tstatic List<Float> Temperature_Limit = Arrays.asList(0f,45f);\r\n+\tstatic List<Float> Soc_Limit = Arrays.asList(20f,80f);\r\n+\tstatic List<Float> ChargeRate_Limit = Arrays.asList(0f,0.8f);\r\n+\tstatic Map<String, List<Float>> dataMap = new HashMap<String, List<Float>>();\r\n+\t\r\n+\t \r\n+    public BatteryFactorsStateEstimator(float temperature, float soc, float chargeRate)\r\n+    {\r\n+        this.Temperature = temperature;\r\n+        this.StateOfCharge = soc;\r\n+        this.ChargeRate = chargeRate;\r\n+    }\r\n+    \r\n+\tpublic BatteryFactorsStateEstimator() {\r\n+\t\t// TODO Auto-generated constructor stub\r\n+\t\tdataMap.put(\"Temperature\",Temperature_Limit);\r\n+\t\tdataMap.put(\"StateofCharge\",Soc_Limit);\r\n+\t\tdataMap.put(\"ChargeRate\",ChargeRate_Limit);\r\n+\t}\r\n+\r\n+\tpublic boolean isBatteryOk() {\r\n+\t\tboolean status_of_temp=isTemperatureWithinRange(this.Temperature);//to evaluate each parameter status and display warning & alert message\r\n+\t\tboolean status_of_soc=isSocWithinRange(this.StateOfCharge);\r\n+\t\tboolean status_of_charge=isChargeWithinRange(this.ChargeRate);\r\n+\t\treturn ((status_of_temp && status_of_soc) && status_of_charge);\r\n+\t}\r\n+\t\r\n+\tpublic boolean isTemperatureWithinRange(float temperature) {\r\n+\t\t\r\n+\t\tif((temperature_measure).equals(temperature_measure_type.get(1))){\r\n+\t\t\ttemperature=convert_F_to_C(temperature);\r\n+\t\t}\r\n+\t\tBatteryFactorAccumulator.printBreachWarningMsg(BatteryFactorValidator.CheckLBreach(\"Temperature\", temperature, BatteryFactorsStateEstimator.Temperature_Limit.get(0), BatteryFactorsStateEstimator.Temperature_Limit.get(1)),\"Low\",\"Temperature\",temperature);\r\n+\t\tBatteryFactorAccumulator.printBreachWarningMsg(BatteryFactorValidator.CheckHBreach(\"Temperature\", temperature, BatteryFactorsStateEstimator.Temperature_Limit.get(0), BatteryFactorsStateEstimator.Temperature_Limit.get(1)),\"High\",\"Temperature\",temperature);\r\n+\t\tboolean isTempMax=BatteryFactorAccumulator.printAlertHighMsg(BatteryFactorValidator.EvaluateBatteryMaxMeasure(\"Temperature\", temperature, BatteryFactorsStateEstimator.Temperature_Limit.get(1)),\"High\",\"Temperature\",temperature);\r\n+\t\tboolean isTempMin=BatteryFactorAccumulator.printAlertLowMsg(BatteryFactorValidator.EvaluateBatteryMinMeasure(\"Temperature\", temperature, BatteryFactorsStateEstimator.Temperature_Limit.get(0)),\"Low\",\"Temperature\",temperature);\r\n+\t\treturn (isTempMax && isTempMin);\r\n+\t\t\r\n+\t}\r\n+\tprivate float convert_F_to_C(float temperature) {\r\n+\t\tfloat Cel_temp=((temperature - 32)*5)/9;\t\t\r\n+\t\tSystem.out.println(Cel_temp);\r\n+\t\treturn Cel_temp;\r\n+\t}\r\n+\r\n+\tpublic boolean isSocWithinRange(float stateofcharge) {\r\n+\t\tBatteryFactorAccumulator.printBreachWarningMsg(BatteryFactorValidator.CheckLBreach(\"StateofCharge\", stateofcharge, BatteryFactorsStateEstimator.Soc_Limit.get(0),BatteryFactorsStateEstimator.Soc_Limit.get(1)),\"Low\",\"StateofCharge\",stateofcharge);\r\n+\t\tBatteryFactorAccumulator.printBreachWarningMsg(BatteryFactorValidator.CheckHBreach(\"StateofCharge\", stateofcharge, BatteryFactorsStateEstimator.Soc_Limit.get(0),BatteryFactorsStateEstimator.Soc_Limit.get(1)),\"High\",\"StateofCharge\",stateofcharge);\r\n+\t\tboolean isSocMax=BatteryFactorAccumulator.printAlertHighMsg(BatteryFactorValidator.EvaluateBatteryMaxMeasure(\"StateofCharge\", stateofcharge, BatteryFactorsStateEstimator.Soc_Limit.get(1)),\"High\",\"StateofCharge\",stateofcharge);\r\n+\t\tboolean isSocMin=BatteryFactorAccumulator.printAlertLowMsg(BatteryFactorValidator.EvaluateBatteryMinMeasure(\"StateofCharge\", stateofcharge, BatteryFactorsStateEstimator.Soc_Limit.get(0)),\"Low\",\"StateofCharge\",stateofcharge);\r\n+\t\treturn (isSocMax && isSocMin);\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tpublic boolean isChargeWithinRange(float chargeRate) {\r\n+\t\tBatteryFactorAccumulator.printBreachWarningMsg(BatteryFactorValidator.CheckLBreach(\"ChargeRate\", chargeRate,BatteryFactorsStateEstimator.ChargeRate_Limit.get(0),BatteryFactorsStateEstimator.ChargeRate_Limit.get(1)),\"Low\",\"ChargeRate\",chargeRate);\r\n+\t\tBatteryFactorAccumulator.printBreachWarningMsg(BatteryFactorValidator.CheckLBreach(\"ChargeRate\", chargeRate,BatteryFactorsStateEstimator.ChargeRate_Limit.get(0),BatteryFactorsStateEstimator.ChargeRate_Limit.get(1)),\"High\",\"ChargeRate\",chargeRate);\r\n+\t\tboolean isChargeRateMax=BatteryFactorAccumulator.printAlertHighMsg(BatteryFactorValidator.EvaluateBatteryMaxMeasure(\"ChargeRate\", chargeRate, BatteryFactorsStateEstimator.ChargeRate_Limit.get(1)),\"High\",\"ChargeRate\",chargeRate);\r\n+\t\treturn (isChargeRateMax);\r\n+\t}\r\n+\r\n+\tpublic boolean setTemperatureunit(String temp_unit) {\r\n+\t\tif(temperature_measure_type.contains(temp_unit)){\r\n+\t\t\ttemperature_measure = temp_unit;\r\n+\t        return true;\r\n+\t\t}\r\n+\t        return false;\r\n+\t\t\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "a7431a9bd816faecda1c9f87649d04bd08e432c3",
    "filename": "vitals/BatteryManagementSystem.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/blob/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/BatteryManagementSystem.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/raw/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/BatteryManagementSystem.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/contents/vitals/BatteryManagementSystem.java?ref=140aeef4e965282f0de840e6082be1f32ad01b12",
    "patch": "@@ -0,0 +1,22 @@\n+package vitals;\n+\n+public class BatteryManagementSystem {\n+\tstatic boolean batteryIsOk(float temperature, float soc, float chargeRate) {       \n+        BatteryFactorsStateEstimator state_estimator = new BatteryFactorsStateEstimator(temperature, soc, chargeRate);\n+\t\tboolean overallstatus=state_estimator.isBatteryOk();\n+\t\tReportGenerator.getBatteryReport();\n+\t\treturn overallstatus;\n+    }\n+\t\n+    public static void main(String[] args) {\n+    \t\n+    \tBatteryFactorsStateEstimator state_estimator=new BatteryFactorsStateEstimator();\n+    \tassert(BatteryFactorAccumulator.set_system_language(\"EN\")==true);\n+    \tassert(batteryIsOk(25, 70, 0.7f) == true);\n+        assert(batteryIsOk(-1, -20, 0.7f)==false);\n+    \tassert(batteryIsOk(44, 79, 0.7f)==true);\n+    \tassert(state_estimator.setTemperatureunit(\"Fahrenheit\")==true);\n+    \tassert(batteryIsOk(140, 60, 0.6f) == false);\n+    \t\n+    }\n+}"
  },
  {
    "sha": "7833f94d0a1d6cbaa29822e4add4f5317834c3a8",
    "filename": "vitals/Main.java",
    "status": "removed",
    "additions": 0,
    "deletions": 23,
    "changes": 23,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/blob/f231cd4889326000ec0ffb398e55e99ccf0aa6ff/vitals/Main.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/raw/f231cd4889326000ec0ffb398e55e99ccf0aa6ff/vitals/Main.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/contents/vitals/Main.java?ref=f231cd4889326000ec0ffb398e55e99ccf0aa6ff",
    "patch": "@@ -1,23 +0,0 @@\n-package vitals;\n-\n-public class Main {\n-    static boolean batteryIsOk(float temperature, float soc, float chargeRate) {\n-        if(temperature < 0 || temperature > 45) {\n-            System.out.println(\"Temperature is out of range!\");\n-            return false;\n-        } else if(soc < 20 || soc > 80) {\n-            System.out.println(\"State of Charge is out of range!\");\n-            return false;\n-        } else if(chargeRate > 0.8) {\n-            System.out.println(\"Charge Rate is out of range!\");\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    public static void main(String[] args) {\n-        assert(batteryIsOk(25, 70, 0.7f) == true);\n-        assert(batteryIsOk(50, 85, 0.0f) == false);\n-        System.out.println(\"Some more tests needed\");\n-    }\n-}"
  },
  {
    "sha": "110f2369f4cc57c9b82665861fa7c7f5bb65342a",
    "filename": "vitals/ReportGenerator.java",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/blob/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/ReportGenerator.java",
    "raw_url": "https://github.com/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/raw/140aeef4e965282f0de840e6082be1f32ad01b12/vitals/ReportGenerator.java",
    "contents_url": "https://api.github.com/repos/clean-code-craft-tcq-1/function-ext-java-chaitrarkanchan/contents/vitals/ReportGenerator.java?ref=140aeef4e965282f0de840e6082be1f32ad01b12",
    "patch": "@@ -0,0 +1,109 @@\n+package vitals;\n+\n+import java.util.Map;\n+\n+public class ReportGenerator {\n+\t\n+\t\n+\tpublic static  void getBatteryReport() {\n+\t\tStringBuilder sb=new StringBuilder();\n+\t\tboolean factorViolation=CheckAlertFactors()&&CheckBrechFactors();\n+\t\tsb=(BatteryFactorAccumulator.language==\"EN\")?GenerateReportEN(factorViolation,sb):GenerateReportDE(factorViolation,sb);\n+\t\tBatteryFactorAccumulator.VitalFactorExceedMaxLimit.clear();\n+\t\tBatteryFactorAccumulator.VitalFactorExceedMinLimit.clear();\n+\t\tBatteryFactorAccumulator.VitalFactorReachHighBreach.clear();\n+\t\tBatteryFactorAccumulator.VitalFactorReachLowBreach.clear();\n+\t\tSystem.out.println(sb.toString());\t\t\n+\t}\n+\n+\tprivate static StringBuilder GenerateReportDE(boolean factorViolation, StringBuilder sb) {\n+\t\t// TODO Auto-generated method stub\n+\t\tsb=(factorViolation)?printSuccessDE(sb):printFailureDE(sb);\n+\t\treturn sb;\n+\t}\n+\n+\tprivate static StringBuilder GenerateReportEN(boolean factorViolation, StringBuilder sb) {\n+\t\t// TODO Auto-generated method stub\n+\t\tsb=(factorViolation)?printSuccessEN(sb):printFailureEN(sb);\n+\t\treturn sb;\n+\t}\n+\n+\tprivate static StringBuilder printFailureEN(StringBuilder sb) {\n+\t\tsb.append(\"Generating Over All  Battery Report \\n\");\n+\t\tsb.append(\"One Or more Vital Factors violating the limit...Please take necessary actions!\\n\");\n+\t\tsb.append(\"Vitals Factors limit-->Factor=[Min,Max]:\"+BatteryFactorsStateEstimator.dataMap.toString()+\"\\n\");\n+\t\tsb.append(getALertMaxParameters(BatteryFactorAccumulator.VitalFactorExceedMaxLimit));\n+\t\tsb.append(getAlertMinParameters(BatteryFactorAccumulator.VitalFactorExceedMinLimit));\n+\t\tsb.append(\"Vitals Factors exceeding High breach limit are:\\n\");\n+\t\tsb.append(getParamHighBreachWarning(BatteryFactorAccumulator.VitalFactorReachHighBreach));\n+\t\tsb.append(\"Vitals Factors exceeding Low breach limit are:\\n\");\n+\t\tsb.append(getParamLowBreachWarning(BatteryFactorAccumulator.VitalFactorReachLowBreach));\n+\t\t\n+\t\treturn sb;\n+\t}\n+\t\n+\tprivate static StringBuilder printFailureDE(StringBuilder sb) {\n+\t\tsb.append(\"Generieren uber alle Batterieberichte \\n\");\n+\t\tsb.append(\"Ein oder mehrere wichtige Faktoren, die das Limit uberschreiten ... Bitte ergreifen Sie die erforderlichen MaBnahmen!\\n\");\n+\t\tsb.append(\"Vitale Faktoren limit-->Faktoren=[Min,Max]:\"+BatteryFactorsStateEstimator.dataMap.toString()+\"\\n\");\n+\t\tsb.append(getALertMaxParameters(BatteryFactorAccumulator.VitalFactorExceedMaxLimit));\n+\t\tsb.append(getAlertMinParameters(BatteryFactorAccumulator.VitalFactorExceedMinLimit));\n+\t\tsb.append(\"Vitale Faktoren, die die untere Grenze erreichen, sind:\\n\");\n+\t\tsb.append(getParamHighBreachWarning(BatteryFactorAccumulator.VitalFactorReachHighBreach));\n+\t\tsb.append(\"Vitale Faktoren, die die Obergrenze erreichen, sind:\\n\");\n+\t\tsb.append(getParamLowBreachWarning(BatteryFactorAccumulator.VitalFactorReachLowBreach));\n+\t\t\n+\t\treturn sb;\n+\t}\n+\n+\tprivate static String getParamLowBreachWarning(Map<String, Float> vitalFactorReachLowBreach) {\n+\t\tif(!vitalFactorReachLowBreach.isEmpty()){\n+\t\t\treturn vitalFactorReachLowBreach.toString()+\"\\n\";\n+\t\t}\n+\t\treturn \"None \\n\";\n+\t\t}\n+\n+\tprivate static String getParamHighBreachWarning(\n+\t\t\tMap<String, Float> vitalFactorReachHighBreach) {\n+\t\tif(!vitalFactorReachHighBreach.isEmpty()){\n+\t\t\treturn vitalFactorReachHighBreach.toString()+\"\\n\";\n+\t\t}\n+\t\treturn \"None \\n\";\n+\t}\n+\n+\tprivate static String getAlertMinParameters(\n+\t\t\tMap<String, Float> vitalFactorExceedMinLimit) {\n+\t\tif(!vitalFactorExceedMinLimit.isEmpty()){\n+\t\t\treturn vitalFactorExceedMinLimit.toString()+\"\\n\";\n+\t\t}\n+\t\treturn \"Factors Listed crossing Min Limit->None \\n\";\n+\t\t\n+\t}\n+\n+\tprivate static String getALertMaxParameters(\n+\t\t\tMap<String, Float> vitalFactorExceedMaxLimit) {\n+\t\tif(!vitalFactorExceedMaxLimit.isEmpty()){\n+\t\t\treturn vitalFactorExceedMaxLimit.toString()+\"\\n\";\n+\t\t}\n+\t\treturn \"Factors Listed crossing Max Limit->None \\n\";\n+\t}\n+\n+\tprivate static StringBuilder printSuccessEN(StringBuilder sb) {\n+\t\tsb.append(\"Generating Over All  Battery Report \\n\");\n+\t\tsb.append(\"All the vital parameters are within Range.Overall Battery Health is Good!\\n\");\n+\t\treturn sb;\n+\t}\n+\n+\tprivate static StringBuilder printSuccessDE(StringBuilder sb) {\n+\t\tsb.append(\"Generieren uber alle Batterieberichte \\n\");\n+\t\tsb.append(\"Alle wichtigen Parameter liegen innerhalb des Bereichs. Insgesamt ist der Batteriezustand gut!\\n\");\n+\t\treturn sb;\n+\t}\n+\tprivate static boolean CheckAlertFactors(){\n+\t\treturn BatteryFactorAccumulator.VitalFactorExceedMaxLimit.isEmpty()&&BatteryFactorAccumulator.VitalFactorExceedMinLimit.isEmpty();\n+\t}\n+\tprivate static boolean CheckBrechFactors(){\n+\t\treturn BatteryFactorAccumulator.VitalFactorReachHighBreach.isEmpty()&&BatteryFactorAccumulator.VitalFactorReachLowBreach.isEmpty();\n+\t}\n+\t\n+}"
  }
]
