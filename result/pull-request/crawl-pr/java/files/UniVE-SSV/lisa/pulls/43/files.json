[
  {
    "sha": "9a65b18ed3cc9345cbc251558830fa53250b4efb",
    "filename": "lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f().dot",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f().dot",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f().dot",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f().dot?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,16 @@\n+digraph {\n+\t\"node0\" [shape=\"rect\",color=\"black\",label=<o1 = new(1, 2)<BR/>{{<BR/>heap [[ [hid$new(1, 2)] ]]<BR/>value [[ vid$o1: #TOP# ]]<BR/>}} -&gt; [vid$o1]>];\n+\t\"node1\" [shape=\"rect\",color=\"black\",peripheries=\"2\",label=<ret<BR/>{{<BR/>heap [[ [hid$new(1, 2)] ]]<BR/>value [[ vid$o1: #TOP#<BR/>hid$new(1, 2): [1, 2] ]]<BR/>}} -&gt; [skip]>];\n+\t\"node2\" [shape=\"rect\",color=\"gray\",label=<o1::b = 2<BR/>{{<BR/>heap [[ [hid$new(1, 2)] ]]<BR/>value [[ vid$o1: #TOP#<BR/>hid$new(1, 2): [1, 2] ]]<BR/>}} -&gt; [hid$new(1, 2)]>];\n+\t\"node3\" [shape=\"rect\",color=\"gray\",label=<o1::a = 1<BR/>{{<BR/>heap [[ [hid$new(1, 2)] ]]<BR/>value [[ vid$o1: #TOP#<BR/>hid$new(1, 2): [1, 1] ]]<BR/>}} -&gt; [hid$new(1, 2)]>];\n+\t\"node2\" -> \"node1\" [color=\"black\"];\n+\t\"node0\" -> \"node3\" [color=\"black\"];\n+\t\"node3\" -> \"node2\" [color=\"black\"];\n+subgraph cluster_legend {\n+\tlabel=\"Legend\";\n+\tstyle=dotted;\n+\tnode [shape=plaintext];\n+\t\"legend\" [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"><tr><td align=\"right\">node border&nbsp;</td><td align=\"left\"><font color=\"gray\">gray</font>, single</td></tr><tr><td align=\"right\">entrypoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, single</td></tr><tr><td align=\"right\">exitpoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, double</td></tr><tr><td align=\"right\">sequential edge&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, solid</td></tr><tr><td align=\"right\">true edge&nbsp;</td><td align=\"left\"><font color=\"blue\">blue</font>, dashed</td></tr><tr><td align=\"right\">false edge&nbsp;</td><td align=\"left\"><font color=\"red\">red</font>, dashed</td></tr></table>>];\n+}\n+\n+}"
  },
  {
    "sha": "ffd8c26f307cf1652f7796dd856adc803fccf591",
    "filename": "lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f1().dot",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f1().dot",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f1().dot",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f1().dot?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,16 @@\n+digraph {\n+\t\"node0\" [shape=\"rect\",color=\"black\",label=<o1 = new(1, 2)<BR/>{{<BR/>heap [[ [hid$new(1, 2)] ]]<BR/>value [[ vid$o1: #TOP# ]]<BR/>}} -&gt; [vid$o1]>];\n+\t\"node1\" [shape=\"rect\",color=\"gray\",label=<o1::b = 2<BR/>{{<BR/>heap [[ [hid$new(1, 2)] ]]<BR/>value [[ vid$o1: #TOP#<BR/>hid$new(1, 2): [1, 2] ]]<BR/>}} -&gt; [hid$new(1, 2)]>];\n+\t\"node2\" [shape=\"rect\",color=\"black\",peripheries=\"2\",label=<ret<BR/>{{<BR/>heap [[ [hid$new(1, 2)] ]]<BR/>value [[ vid$o1: #TOP#<BR/>hid$new(1, 2): [1, 2] ]]<BR/>}} -&gt; [skip]>];\n+\t\"node3\" [shape=\"rect\",color=\"gray\",label=<o1::a = 1<BR/>{{<BR/>heap [[ [hid$new(1, 2)] ]]<BR/>value [[ vid$o1: #TOP#<BR/>hid$new(1, 2): [1, 1] ]]<BR/>}} -&gt; [hid$new(1, 2)]>];\n+\t\"node1\" -> \"node2\" [color=\"black\"];\n+\t\"node0\" -> \"node3\" [color=\"black\"];\n+\t\"node3\" -> \"node1\" [color=\"black\"];\n+subgraph cluster_legend {\n+\tlabel=\"Legend\";\n+\tstyle=dotted;\n+\tnode [shape=plaintext];\n+\t\"legend\" [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"><tr><td align=\"right\">node border&nbsp;</td><td align=\"left\"><font color=\"gray\">gray</font>, single</td></tr><tr><td align=\"right\">entrypoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, single</td></tr><tr><td align=\"right\">exitpoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, double</td></tr><tr><td align=\"right\">sequential edge&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, solid</td></tr><tr><td align=\"right\">true edge&nbsp;</td><td align=\"left\"><font color=\"blue\">blue</font>, dashed</td></tr><tr><td align=\"right\">false edge&nbsp;</td><td align=\"left\"><font color=\"red\">red</font>, dashed</td></tr></table>>];\n+}\n+\n+}"
  },
  {
    "sha": "7d5d097f1ab681bba570166aef93f2af211b2723",
    "filename": "lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f1(untyped_o).dot",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f1(untyped_o).dot",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f1(untyped_o).dot",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f1(untyped_o).dot?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,19 @@\n+digraph {\n+\t\"node0\" [shape=\"rect\",color=\"black\",label=<true<BR/>{{<BR/>heap [[ [] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [true]>];\n+\t\"node1\" [shape=\"rect\",color=\"gray\",label=<o = new(1, 1)<BR/>{{<BR/>heap [[ [hid$new(1, 1)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node2\" [shape=\"rect\",color=\"gray\",label=<o::a = 2<BR/>{{<BR/>heap [[ [hid$new(1, 1), hid$new(0, 0)] ]]<BR/>value [[ hid$new(1, 1): [2, 2]<BR/>hid$new(0, 0): [2, 2]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [hid$new(1, 1), hid$new(0, 0)]>];\n+\t\"node3\" [shape=\"rect\",color=\"gray\",label=<o = new(0, 0)<BR/>{{<BR/>heap [[ [hid$new(0, 0)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node4\" [shape=\"rect\",color=\"black\",peripheries=\"2\",label=<ret<BR/>{{<BR/>heap [[ [hid$new(1, 1), hid$new(0, 0)] ]]<BR/>value [[ hid$new(1, 1): [2, 2]<BR/>hid$new(0, 0): [2, 2]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [skip]>];\n+\t\"node0\" -> \"node1\" [color=\"red\",style=\"dashed\"];\n+\t\"node0\" -> \"node3\" [color=\"blue\",style=\"dashed\"];\n+\t\"node1\" -> \"node2\" [color=\"black\"];\n+\t\"node2\" -> \"node4\" [color=\"black\"];\n+\t\"node3\" -> \"node2\" [color=\"black\"];\n+subgraph cluster_legend {\n+\tlabel=\"Legend\";\n+\tstyle=dotted;\n+\tnode [shape=plaintext];\n+\t\"legend\" [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"><tr><td align=\"right\">node border&nbsp;</td><td align=\"left\"><font color=\"gray\">gray</font>, single</td></tr><tr><td align=\"right\">entrypoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, single</td></tr><tr><td align=\"right\">exitpoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, double</td></tr><tr><td align=\"right\">sequential edge&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, solid</td></tr><tr><td align=\"right\">true edge&nbsp;</td><td align=\"left\"><font color=\"blue\">blue</font>, dashed</td></tr><tr><td align=\"right\">false edge&nbsp;</td><td align=\"left\"><font color=\"red\">red</font>, dashed</td></tr></table>>];\n+}\n+\n+}"
  },
  {
    "sha": "59f2883ec8f34ff6042b50b2b21b552b038b1ce8",
    "filename": "lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f2().dot",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f2().dot",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f2().dot",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f2().dot?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,19 @@\n+digraph {\n+\t\"node0\" [shape=\"rect\",color=\"black\",label=<o = new(-1, -1)<BR/>{{<BR/>heap [[ [hid$new(-1, -1)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node1\" [shape=\"rect\",color=\"gray\",label=<o = new(0, 0)<BR/>{{<BR/>heap [[ [hid$new(0, 0)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node2\" [shape=\"rect\",color=\"gray\",label=<true<BR/>{{<BR/>heap [[ [hid$new(-1, -1)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [true]>];\n+\t\"node3\" [shape=\"rect\",color=\"black\",peripheries=\"2\",label=<ret<BR/>{{<BR/>heap [[ [hid$new(1, 1), hid$new(0, 0)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [skip]>];\n+\t\"node4\" [shape=\"rect\",color=\"gray\",label=<o = new(1, 1)<BR/>{{<BR/>heap [[ [hid$new(1, 1)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node1\" -> \"node3\" [color=\"black\"];\n+\t\"node0\" -> \"node2\" [color=\"black\"];\n+\t\"node2\" -> \"node1\" [color=\"blue\",style=\"dashed\"];\n+\t\"node2\" -> \"node4\" [color=\"red\",style=\"dashed\"];\n+\t\"node4\" -> \"node3\" [color=\"black\"];\n+subgraph cluster_legend {\n+\tlabel=\"Legend\";\n+\tstyle=dotted;\n+\tnode [shape=plaintext];\n+\t\"legend\" [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"><tr><td align=\"right\">node border&nbsp;</td><td align=\"left\"><font color=\"gray\">gray</font>, single</td></tr><tr><td align=\"right\">entrypoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, single</td></tr><tr><td align=\"right\">exitpoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, double</td></tr><tr><td align=\"right\">sequential edge&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, solid</td></tr><tr><td align=\"right\">true edge&nbsp;</td><td align=\"left\"><font color=\"blue\">blue</font>, dashed</td></tr><tr><td align=\"right\">false edge&nbsp;</td><td align=\"left\"><font color=\"red\">red</font>, dashed</td></tr></table>>];\n+}\n+\n+}"
  },
  {
    "sha": "64e3bee8443efc583661ed3707a8e55c9222414c",
    "filename": "lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f3().dot",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f3().dot",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f3().dot",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/point-based-heap/analysis___untyped_A.f3().dot?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,23 @@\n+digraph {\n+\t\"node0\" [shape=\"rect\",color=\"black\",label=<o = new(-1, -1)<BR/>{{<BR/>heap [[ [hid$new(-1, -1)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node1\" [shape=\"rect\",color=\"gray\",label=<o::a = 2<BR/>{{<BR/>heap [[ [hid$new(1, 1), hid$new(0, 0)] ]]<BR/>value [[ hid$new(1, 1): [2, 2]<BR/>hid$new(0, 0): [2, 2]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [hid$new(1, 1), hid$new(0, 0)]>];\n+\t\"node2\" [shape=\"rect\",color=\"gray\",label=<o = new(0, 0)<BR/>{{<BR/>heap [[ [hid$new(0, 0)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node3\" [shape=\"rect\",color=\"gray\",label=<o::b = 3<BR/>{{<BR/>heap [[ [hid$new(1, 1), hid$new(0, 0)] ]]<BR/>value [[ hid$new(1, 1): [2, 3]<BR/>hid$new(0, 0): [2, 3]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [hid$new(1, 1), hid$new(0, 0)]>];\n+\t\"node4\" [shape=\"rect\",color=\"gray\",label=<o = new(1, 1)<BR/>{{<BR/>heap [[ [hid$new(1, 1)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node5\" [shape=\"rect\",color=\"gray\",label=<true<BR/>{{<BR/>heap [[ [hid$new(-1, -1)] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [true]>];\n+\t\"node6\" [shape=\"rect\",color=\"black\",peripheries=\"2\",label=<ret<BR/>{{<BR/>heap [[ [hid$new(1, 1), hid$new(0, 0)] ]]<BR/>value [[ hid$new(1, 1): [2, 3]<BR/>hid$new(0, 0): [2, 3]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [skip]>];\n+\t\"node1\" -> \"node3\" [color=\"black\"];\n+\t\"node2\" -> \"node1\" [color=\"black\"];\n+\t\"node3\" -> \"node6\" [color=\"black\"];\n+\t\"node4\" -> \"node1\" [color=\"black\"];\n+\t\"node5\" -> \"node2\" [color=\"blue\",style=\"dashed\"];\n+\t\"node5\" -> \"node4\" [color=\"red\",style=\"dashed\"];\n+\t\"node0\" -> \"node5\" [color=\"black\"];\n+subgraph cluster_legend {\n+\tlabel=\"Legend\";\n+\tstyle=dotted;\n+\tnode [shape=plaintext];\n+\t\"legend\" [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"><tr><td align=\"right\">node border&nbsp;</td><td align=\"left\"><font color=\"gray\">gray</font>, single</td></tr><tr><td align=\"right\">entrypoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, single</td></tr><tr><td align=\"right\">exitpoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, double</td></tr><tr><td align=\"right\">sequential edge&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, solid</td></tr><tr><td align=\"right\">true edge&nbsp;</td><td align=\"left\"><font color=\"blue\">blue</font>, dashed</td></tr><tr><td align=\"right\">false edge&nbsp;</td><td align=\"left\"><font color=\"red\">red</font>, dashed</td></tr></table>>];\n+}\n+\n+}"
  },
  {
    "sha": "563b6fd7f7613d7a205fe31ddd4af13e51601c3e",
    "filename": "lisa/imp-testcases/heap/point-based-heap/program.imp",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/program.imp",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/program.imp",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/point-based-heap/program.imp?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,31 @@\n+class A {\t\n+\ta;\n+\tb;\n+\t\n+\tf1() {\n+\t\tdef o1 = new A(1,2);\n+\t\to1.a = 1;\t\n+\t\to1.b = 2;\t\n+\t}\n+\t\t\n+\tf2() {\t\n+\t\tdef o = new A(-1,-1);\n+\t\tif (true) {\n+\t\t\to = new A(0,0);\n+\t\t} else {\n+\t\t\to = new A(1,1);\n+\t\t}\n+\t}\n+\t\n+\tf3() {\t\n+\t\tdef o = new A(-1,-1);\n+\t\tif (true) {\n+\t\t\to = new A(0,0);\n+\t\t} else {\n+\t\t\to = new A(1,1);\n+\t\t}\n+\t\t\t\n+\t\to.a = 2;\n+\t\to.b = 3;\n+\t}\n+}"
  },
  {
    "sha": "18bf8f18b844c04436498f63ceda906ff00d9556",
    "filename": "lisa/imp-testcases/heap/point-based-heap/report.json",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/report.json",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/point-based-heap/report.json",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/point-based-heap/report.json?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,4 @@\n+{\n+  \"warnings\" : [ ],\n+  \"files\" : [ \"analysis___untyped_A.f1().dot\", \"analysis___untyped_A.f2().dot\", \"analysis___untyped_A.f3().dot\" ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d4268a9e4ed4e5ed576a2dc1bd154de0ecfe37f0",
    "filename": "lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f1().dot",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f1().dot",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f1().dot",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f1().dot?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,16 @@\n+digraph {\n+\t\"node0\" [shape=\"rect\",color=\"black\",label=<o = new(1, 2)<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node1\" [shape=\"rect\",color=\"black\",peripheries=\"2\",label=<ret<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, 2]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [skip]>];\n+\t\"node2\" [shape=\"rect\",color=\"gray\",label=<o::b = 2<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, 2]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [hid$A]>];\n+\t\"node3\" [shape=\"rect\",color=\"gray\",label=<o::a = 1<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, 1]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [hid$A]>];\n+\t\"node2\" -> \"node1\" [color=\"black\"];\n+\t\"node0\" -> \"node3\" [color=\"black\"];\n+\t\"node3\" -> \"node2\" [color=\"black\"];\n+subgraph cluster_legend {\n+\tlabel=\"Legend\";\n+\tstyle=dotted;\n+\tnode [shape=plaintext];\n+\t\"legend\" [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"><tr><td align=\"right\">node border&nbsp;</td><td align=\"left\"><font color=\"gray\">gray</font>, single</td></tr><tr><td align=\"right\">entrypoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, single</td></tr><tr><td align=\"right\">exitpoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, double</td></tr><tr><td align=\"right\">sequential edge&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, solid</td></tr><tr><td align=\"right\">true edge&nbsp;</td><td align=\"left\"><font color=\"blue\">blue</font>, dashed</td></tr><tr><td align=\"right\">false edge&nbsp;</td><td align=\"left\"><font color=\"red\">red</font>, dashed</td></tr></table>>];\n+}\n+\n+}"
  },
  {
    "sha": "3d6aa8517847f25616ca0b1496cc7432f770681d",
    "filename": "lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f2().dot",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f2().dot",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f2().dot",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f2().dot?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,25 @@\n+digraph {\n+\t\"node0\" [shape=\"rect\",color=\"black\",label=<o = new(1, 2)<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ vid$o: #TOP# ]]<BR/>}} -&gt; [vid$o]>];\n+\t\"node1\" [shape=\"rect\",color=\"gray\",label=<&lt;(i, 10)<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, +Inf]<BR/>vid$i: [0, +Inf]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [vid$i &lt; 10]>];\n+\t\"node2\" [shape=\"rect\",color=\"black\",peripheries=\"2\",label=<ret<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, +Inf]<BR/>vid$i: [0, +Inf]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [skip]>];\n+\t\"node3\" [shape=\"rect\",color=\"gray\",label=<o::b = +(o::a, 1)<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, 2]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [hid$A]>];\n+\t\"node4\" [shape=\"rect\",color=\"gray\",label=<i = 0<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, 2]<BR/>vid$i: [0, 0]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [vid$i]>];\n+\t\"node5\" [shape=\"rect\",color=\"gray\",label=<i = +(i, 1)<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, +Inf]<BR/>vid$i: [1, +Inf]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [vid$i]>];\n+\t\"node6\" [shape=\"rect\",color=\"gray\",label=<o::a = +(o::a, 1)<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, +Inf]<BR/>vid$i: [0, +Inf]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [hid$A]>];\n+\t\"node7\" [shape=\"rect\",color=\"gray\",label=<o::a = 1<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, 1]<BR/>vid$o: #TOP# ]]<BR/>}} -&gt; [hid$A]>];\n+\t\"node1\" -> \"node2\" [color=\"red\",style=\"dashed\"];\n+\t\"node1\" -> \"node6\" [color=\"blue\",style=\"dashed\"];\n+\t\"node3\" -> \"node4\" [color=\"black\"];\n+\t\"node0\" -> \"node7\" [color=\"black\"];\n+\t\"node4\" -> \"node1\" [color=\"black\"];\n+\t\"node5\" -> \"node1\" [color=\"black\"];\n+\t\"node6\" -> \"node5\" [color=\"black\"];\n+\t\"node7\" -> \"node3\" [color=\"black\"];\n+subgraph cluster_legend {\n+\tlabel=\"Legend\";\n+\tstyle=dotted;\n+\tnode [shape=plaintext];\n+\t\"legend\" [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"><tr><td align=\"right\">node border&nbsp;</td><td align=\"left\"><font color=\"gray\">gray</font>, single</td></tr><tr><td align=\"right\">entrypoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, single</td></tr><tr><td align=\"right\">exitpoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, double</td></tr><tr><td align=\"right\">sequential edge&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, solid</td></tr><tr><td align=\"right\">true edge&nbsp;</td><td align=\"left\"><font color=\"blue\">blue</font>, dashed</td></tr><tr><td align=\"right\">false edge&nbsp;</td><td align=\"left\"><font color=\"red\">red</font>, dashed</td></tr></table>>];\n+}\n+\n+}"
  },
  {
    "sha": "baa23fd0879262386ed20f6f166625206c2c173b",
    "filename": "lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f3().dot",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f3().dot",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f3().dot",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/type-based-heap/analysis___untyped_A.f3().dot?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,16 @@\n+digraph {\n+\t\"node0\" [shape=\"rect\",color=\"black\",label=<o1 = new(1, 2)<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ vid$o1: #TOP# ]]<BR/>}} -&gt; [vid$o1]>];\n+\t\"node1\" [shape=\"rect\",color=\"black\",peripheries=\"2\",label=<ret<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, 1]<BR/>vid$o1: #TOP# ]]<BR/>}} -&gt; [skip]>];\n+\t\"node2\" [shape=\"rect\",color=\"gray\",label=<o1::a = 1<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, 1]<BR/>vid$o1: #TOP# ]]<BR/>}} -&gt; [hid$A]>];\n+\t\"node3\" [shape=\"rect\",color=\"gray\",label=<o1::b = 1<BR/>{{<BR/>heap [[ [A] ]]<BR/>value [[ hid$A: [1, 1]<BR/>vid$o1: #TOP# ]]<BR/>}} -&gt; [hid$A]>];\n+\t\"node2\" -> \"node3\" [color=\"black\"];\n+\t\"node3\" -> \"node1\" [color=\"black\"];\n+\t\"node0\" -> \"node2\" [color=\"black\"];\n+subgraph cluster_legend {\n+\tlabel=\"Legend\";\n+\tstyle=dotted;\n+\tnode [shape=plaintext];\n+\t\"legend\" [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"><tr><td align=\"right\">node border&nbsp;</td><td align=\"left\"><font color=\"gray\">gray</font>, single</td></tr><tr><td align=\"right\">entrypoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, single</td></tr><tr><td align=\"right\">exitpoint border&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, double</td></tr><tr><td align=\"right\">sequential edge&nbsp;</td><td align=\"left\"><font color=\"black\">black</font>, solid</td></tr><tr><td align=\"right\">true edge&nbsp;</td><td align=\"left\"><font color=\"blue\">blue</font>, dashed</td></tr><tr><td align=\"right\">false edge&nbsp;</td><td align=\"left\"><font color=\"red\">red</font>, dashed</td></tr></table>>];\n+}\n+\n+}"
  },
  {
    "sha": "0a954400c418eebd738bb156a03245cd7ab7b9da",
    "filename": "lisa/imp-testcases/heap/type-based-heap/program.imp",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/program.imp",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/program.imp",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/type-based-heap/program.imp?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,26 @@\n+class A {\t\n+\ta;\n+\tb;\n+\t\n+\tf1() {\n+\t\tdef o = new A(1,2);\n+\t\to.a = 1;\t\n+\t\to.b = 2;\n+\t}\n+\n+\tf2() {\n+\t\tdef o = new A(1,2);\n+\t\to.a = 1;\t\n+\t\to.b = o.a + 1;\t\n+\t\t\n+\t\tfor (def i = 0; i < 10; i = i + 1) {\n+\t\t\to.a = o.a + 1;\n+\t\t}\n+\t}\n+\t\n+\tf3() {\n+\t\tdef o1 = new A(1,2);\n+\t\to1.a = 1;\t\n+\t\to1.b = 1;\t\n+\t}\n+}"
  },
  {
    "sha": "18bf8f18b844c04436498f63ceda906ff00d9556",
    "filename": "lisa/imp-testcases/heap/type-based-heap/report.json",
    "status": "added",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/report.json",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/imp-testcases/heap/type-based-heap/report.json",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/imp-testcases/heap/type-based-heap/report.json?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,4 @@\n+{\n+  \"warnings\" : [ ],\n+  \"files\" : [ \"analysis___untyped_A.f1().dot\", \"analysis___untyped_A.f2().dot\", \"analysis___untyped_A.f3().dot\" ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ae4ae54c2153ccd71f18f72759e02147ebc7117e",
    "filename": "lisa/src/main/java/it/unive/lisa/analysis/heap/PointBasedHeap.java",
    "status": "added",
    "additions": 247,
    "deletions": 0,
    "changes": 247,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/main/java/it/unive/lisa/analysis/heap/PointBasedHeap.java",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/main/java/it/unive/lisa/analysis/heap/PointBasedHeap.java",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/src/main/java/it/unive/lisa/analysis/heap/PointBasedHeap.java?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,247 @@\n+package it.unive.lisa.analysis.heap;\n+\n+import it.unive.lisa.analysis.BaseLattice;\n+import it.unive.lisa.analysis.HeapDomain;\n+import it.unive.lisa.analysis.SemanticException;\n+import it.unive.lisa.program.cfg.ProgramPoint;\n+import it.unive.lisa.symbolic.SymbolicExpression;\n+import it.unive.lisa.symbolic.heap.AccessChild;\n+import it.unive.lisa.symbolic.heap.HeapAllocation;\n+import it.unive.lisa.symbolic.heap.HeapReference;\n+import it.unive.lisa.symbolic.value.BinaryExpression;\n+import it.unive.lisa.symbolic.value.HeapIdentifier;\n+import it.unive.lisa.symbolic.value.Identifier;\n+import it.unive.lisa.symbolic.value.Skip;\n+import it.unive.lisa.symbolic.value.UnaryExpression;\n+import it.unive.lisa.symbolic.value.ValueExpression;\n+import it.unive.lisa.symbolic.value.ValueIdentifier;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.collections.CollectionUtils;\n+\n+/**\n+ * A point-based heap implementation that abstracts heap locations depending on\n+ * their allocation sites, namely the position of the code wehre heap locations\n+ * are generated. All heap locations that are generated at the same allocation\n+ * sites are abstracted into a single unique identifier.\n+ * \n+ * @author <a href=\"mailto:vincenzo.arceri@unive.it\">Vincenzo Arceri</a>\n+ */\n+public class PointBasedHeap extends BaseLattice<PointBasedHeap> implements HeapDomain<PointBasedHeap> {\n+\n+\tprivate static final PointBasedHeap TOP = new PointBasedHeap();\n+\n+\tprivate static final PointBasedHeap BOTTOM = new PointBasedHeap();\n+\n+\tprivate final Collection<ValueExpression> rewritten;\n+\n+\tprivate final Map<Identifier, Collection<ValueExpression>> allocationSites;\n+\n+\t/**\n+\t * Builds a new instance of PointBasedHeap, with an unique rewritten\n+\t * expression {@link Skip}.\n+\t */\n+\tpublic PointBasedHeap() {\n+\t\tthis(new Skip());\n+\t}\n+\n+\tprivate PointBasedHeap(ValueExpression rewritten) {\n+\t\tthis(Collections.singleton(rewritten), new HashMap<>());\n+\t}\n+\n+\tprivate PointBasedHeap(Collection<ValueExpression> rewritten,\n+\t\t\tMap<Identifier, Collection<ValueExpression>> allocationSites) {\n+\t\tthis.rewritten = rewritten;\n+\t\tthis.allocationSites = allocationSites;\n+\t}\n+\n+\t@Override\n+\tpublic PointBasedHeap smallStepSemantics(SymbolicExpression expression, ProgramPoint pp) throws SemanticException {\n+\n+\t\tif (expression instanceof AccessChild) {\n+\t\t\tPointBasedHeap container = smallStepSemantics((((AccessChild) expression).getContainer()), pp);\n+\t\t\treturn new PointBasedHeap(container.getRewrittenExpressions(), allocationSites);\n+\t\t}\n+\n+\t\tif (expression instanceof HeapAllocation) {\n+\t\t\tHeapIdentifier id = new HeapIdentifier(expression.getTypes(), pp.toString(), true);\n+\t\t\treturn new PointBasedHeap(Collections.singleton(id), allocationSites);\n+\t\t}\n+\n+\t\tif (expression instanceof HeapReference)\n+\t\t\t// TODO: not sure about this (need to check)\n+\t\t\treturn this;\n+\n+\t\tif (expression instanceof UnaryExpression) {\n+\t\t\tUnaryExpression unary = (UnaryExpression) expression;\n+\t\t\tPointBasedHeap sem = smallStepSemantics(unary.getExpression(), pp);\n+\t\t\tPointBasedHeap result = bottom();\n+\t\t\tfor (ValueExpression expr : sem.getRewrittenExpressions())\n+\t\t\t\tresult = result.lub(mk(sem, new UnaryExpression(expression.getTypes(), expr, unary.getOperator())));\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\tif (expression instanceof BinaryExpression) {\n+\t\t\tBinaryExpression binary = (BinaryExpression) expression;\n+\t\t\tPointBasedHeap sem1 = smallStepSemantics(binary.getLeft(), pp);\n+\t\t\tPointBasedHeap sem2 = sem1.smallStepSemantics(binary.getRight(), pp);\n+\t\t\tPointBasedHeap result = bottom();\n+\t\t\tfor (ValueExpression expr1 : sem1.getRewrittenExpressions())\n+\t\t\t\tfor (ValueExpression expr2 : sem2.getRewrittenExpressions())\n+\t\t\t\t\tresult = result.lub(\n+\t\t\t\t\t\t\tmk(sem2, new BinaryExpression(expression.getTypes(), expr1, expr2, binary.getOperator())));\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\tif (expression instanceof ValueIdentifier)\n+\t\t\tif (allocationSites.containsKey(expression))\n+\t\t\t\treturn new PointBasedHeap(allocationSites.get(expression), allocationSites);\n+\n+\t\tif (expression instanceof ValueExpression)\n+\t\t\treturn mk(this, (ValueExpression) expression);\n+\n+\t\treturn top();\n+\t}\n+\n+\t@Override\n+\tpublic PointBasedHeap assign(Identifier id, SymbolicExpression expression, ProgramPoint pp)\n+\t\t\tthrows SemanticException {\n+\n+\t\tif (expression instanceof HeapIdentifier) {\n+\t\t\tHashMap<Identifier, Collection<ValueExpression>> sites = new HashMap<>(allocationSites);\n+\t\t\tHashSet<ValueExpression> v = new HashSet<>();\n+\t\t\tv.add((ValueExpression) expression);\n+\t\t\tsites.put(id, v);\n+\t\t\treturn new PointBasedHeap(Collections.singleton((ValueExpression) expression), sites);\n+\t\t}\n+\n+\t\treturn smallStepSemantics(expression, pp);\n+\t}\n+\n+\t@Override\n+\tpublic PointBasedHeap assume(SymbolicExpression expression, ProgramPoint pp) throws SemanticException {\n+\t\t// we just rewrite the expression if needed\n+\t\treturn smallStepSemantics(expression, pp);\n+\t}\n+\n+\t@Override\n+\tpublic PointBasedHeap forgetIdentifier(Identifier id) throws SemanticException {\n+\t\tMap<Identifier, Collection<\n+\t\t\t\tValueExpression>> sites = new HashMap<Identifier, Collection<ValueExpression>>(allocationSites);\n+\t\tsites.remove(id);\n+\t\treturn new PointBasedHeap(rewritten, sites);\n+\t}\n+\n+\t@Override\n+\tpublic Satisfiability satisfies(SymbolicExpression expression, ProgramPoint pp) throws SemanticException {\n+\t\t// we leave the decision to the value domain\n+\t\treturn Satisfiability.UNKNOWN;\n+\t}\n+\n+\t@Override\n+\tpublic String representation() {\n+\t\tHashSet<ValueExpression> res = new HashSet<ValueExpression>();\n+\t\tfor (Collection<ValueExpression> s : allocationSites.values())\n+\t\t\tres.addAll(s);\n+\t\treturn res.toString();\n+\t}\n+\n+\t@Override\n+\tpublic PointBasedHeap top() {\n+\t\treturn TOP;\n+\t}\n+\n+\t@Override\n+\tpublic PointBasedHeap bottom() {\n+\t\treturn BOTTOM;\n+\t}\n+\n+\t@Override\n+\tpublic Collection<ValueExpression> getRewrittenExpressions() {\n+\t\treturn rewritten;\n+\t}\n+\n+\t@Override\n+\tpublic List<HeapReplacement> getSubstitution() {\n+\t\treturn Collections.emptyList();\n+\t}\n+\n+\tprivate PointBasedHeap mk(PointBasedHeap reference, ValueExpression expression) {\n+\t\treturn new PointBasedHeap(Collections.singleton(expression), reference.allocationSites);\n+\t}\n+\n+\t@Override\n+\t@SuppressWarnings(\"unchecked\")\n+\tprotected PointBasedHeap lubAux(PointBasedHeap other) throws SemanticException {\n+\t\tCollection<ValueExpression> rewritten = (CollectionUtils.union(this.rewritten, other.rewritten));\n+\t\tMap<Identifier, Collection<\n+\t\t\t\tValueExpression>> sites = new HashMap<Identifier, Collection<ValueExpression>>(allocationSites);\n+\n+\t\tfor (Map.Entry<Identifier, Collection<ValueExpression>> e : other.allocationSites.entrySet())\n+\t\t\tif (sites.containsKey(e.getKey())) {\n+\t\t\t\tHashSet<ValueExpression> res = new HashSet<ValueExpression>(sites.get(e.getKey()));\n+\t\t\t\tres.addAll(e.getValue());\n+\t\t\t\tsites.put(e.getKey(), res);\n+\t\t\t} else\n+\t\t\t\tsites.put(e.getKey(), new HashSet<>(e.getValue()));\n+\n+\t\treturn new PointBasedHeap(rewritten, sites);\n+\t}\n+\n+\t@Override\n+\tprotected PointBasedHeap wideningAux(PointBasedHeap other) throws SemanticException {\n+\t\treturn lubAux(other);\n+\t}\n+\n+\t@Override\n+\tprotected boolean lessOrEqualAux(PointBasedHeap other) throws SemanticException {\n+\t\tif (other.allocationSites.keySet().containsAll(allocationSites.keySet())) {\n+\t\t\tfor (Map.Entry<Identifier, Collection<ValueExpression>> e : other.allocationSites.entrySet())\n+\t\t\t\tif (!e.getValue().containsAll(allocationSites.get(e.getKey())))\n+\t\t\t\t\treturn false;\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((allocationSites == null) ? 0 : allocationSites.hashCode());\n+\t\tresult = prime * result + ((rewritten == null) ? 0 : rewritten.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tPointBasedHeap other = (PointBasedHeap) obj;\n+\t\tif (allocationSites == null) {\n+\t\t\tif (other.allocationSites != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!allocationSites.equals(other.allocationSites))\n+\t\t\treturn false;\n+\t\tif (rewritten == null) {\n+\t\t\tif (other.rewritten != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!rewritten.equals(other.rewritten))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn representation();\n+\t}\n+}"
  },
  {
    "sha": "b3ff2614b50f81526f7a339dae5fa1dd688ecd2e",
    "filename": "lisa/src/main/java/it/unive/lisa/analysis/heap/TypeBasedHeap.java",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/main/java/it/unive/lisa/analysis/heap/TypeBasedHeap.java",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/main/java/it/unive/lisa/analysis/heap/TypeBasedHeap.java",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/src/main/java/it/unive/lisa/analysis/heap/TypeBasedHeap.java?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,182 @@\n+package it.unive.lisa.analysis.heap;\n+\n+import it.unive.lisa.analysis.BaseHeapDomain;\n+import it.unive.lisa.analysis.SemanticException;\n+import it.unive.lisa.caches.Caches;\n+import it.unive.lisa.program.cfg.ProgramPoint;\n+import it.unive.lisa.symbolic.SymbolicExpression;\n+import it.unive.lisa.symbolic.heap.AccessChild;\n+import it.unive.lisa.symbolic.heap.HeapAllocation;\n+import it.unive.lisa.symbolic.heap.HeapExpression;\n+import it.unive.lisa.symbolic.heap.HeapReference;\n+import it.unive.lisa.symbolic.value.HeapIdentifier;\n+import it.unive.lisa.symbolic.value.Identifier;\n+import it.unive.lisa.symbolic.value.Skip;\n+import it.unive.lisa.symbolic.value.ValueExpression;\n+import it.unive.lisa.type.Type;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.commons.collections.CollectionUtils;\n+\n+/**\n+ * A type-based heap implementation that abstracts heap locations depending on\n+ * their types, i.e., all the heap locations with the same type are abstracted\n+ * into a single unique identifier.\n+ *\n+ * @author <a href=\"mailto:vincenzo.arceri@unive.it\">Vincenzo Arceri</a>\n+ */\n+public class TypeBasedHeap extends BaseHeapDomain<TypeBasedHeap> {\n+\n+\tprivate static final TypeBasedHeap TOP = new TypeBasedHeap();\n+\n+\tprivate static final TypeBasedHeap BOTTOM = new TypeBasedHeap();\n+\n+\tprivate final Collection<ValueExpression> rewritten;\n+\n+\tprivate static HashSet<String> NAMES = new HashSet<String>();\n+\n+\t/**\n+\t * Builds a new instance of TypeBasedHeap, with an unique rewritten\n+\t * expression {@link Skip}.\n+\t */\n+\tpublic TypeBasedHeap() {\n+\t\tthis(new Skip());\n+\t}\n+\n+\tprivate TypeBasedHeap(ValueExpression rewritten) {\n+\t\tthis(Collections.singleton(rewritten));\n+\t}\n+\n+\tprivate TypeBasedHeap(Collection<ValueExpression> rewritten) {\n+\t\tthis.rewritten = rewritten;\n+\t}\n+\n+\t@Override\n+\tpublic TypeBasedHeap assign(Identifier id, SymbolicExpression expression, ProgramPoint pp)\n+\t\t\tthrows SemanticException {\n+\t\t// we just rewrite the expression if needed\n+\t\treturn smallStepSemantics(expression, pp);\n+\t}\n+\n+\t@Override\n+\tpublic TypeBasedHeap assume(SymbolicExpression expression, ProgramPoint pp) throws SemanticException {\n+\t\t// we just rewrite the expression if needed\n+\t\treturn smallStepSemantics(expression, pp);\n+\t}\n+\n+\t@Override\n+\tpublic TypeBasedHeap forgetIdentifier(Identifier id) throws SemanticException {\n+\t\treturn new TypeBasedHeap(rewritten);\n+\t}\n+\n+\t@Override\n+\tpublic Satisfiability satisfies(SymbolicExpression expression, ProgramPoint pp) throws SemanticException {\n+\t\t// we leave the decision to the value domain\n+\t\treturn Satisfiability.UNKNOWN;\n+\t}\n+\n+\t@Override\n+\tpublic String representation() {\n+\t\treturn NAMES.toString();\n+\t}\n+\n+\t@Override\n+\tpublic TypeBasedHeap top() {\n+\t\treturn TOP;\n+\t}\n+\n+\t@Override\n+\tpublic TypeBasedHeap bottom() {\n+\t\treturn BOTTOM;\n+\t}\n+\n+\t@Override\n+\tpublic Collection<ValueExpression> getRewrittenExpressions() {\n+\t\treturn rewritten;\n+\t}\n+\n+\t@Override\n+\tpublic List<HeapReplacement> getSubstitution() {\n+\t\treturn Collections.emptyList();\n+\t}\n+\n+\t@Override\n+\tprotected TypeBasedHeap mk(TypeBasedHeap reference, ValueExpression expression) {\n+\t\treturn new TypeBasedHeap(expression);\n+\t}\n+\n+\t@Override\n+\tprotected TypeBasedHeap semanticsOf(HeapExpression expression) {\n+\t\tHashSet<ValueExpression> ids = new HashSet<>();\n+\n+\t\tif (expression instanceof AccessChild) {\n+\t\t\tfor (Type type : ((AccessChild) expression).getContainer().getTypes()) {\n+\t\t\t\tif (type.isPointerType()) {\n+\t\t\t\t\tids.add(new HeapIdentifier(expression.getTypes(), type.toString(), true));\n+\t\t\t\t\tNAMES.add(type.toString());\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\treturn new TypeBasedHeap(ids);\n+\t\t}\n+\n+\t\tif (expression instanceof HeapAllocation) {\n+\t\t\tfor (Type type : expression.getTypes()) {\n+\t\t\t\tif (type.isPointerType()) {\n+\t\t\t\t\tids.add(new HeapIdentifier(Caches.types().mkSingletonSet(type), type.toString(), true));\n+\t\t\t\t\tNAMES.add(type.toString());\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\treturn new TypeBasedHeap(ids);\n+\t\t}\n+\n+\t\tif (expression instanceof HeapReference)\n+\t\t\treturn new TypeBasedHeap(rewritten);\n+\n+\t\treturn bottom();\n+\t}\n+\n+\t@Override\n+\t@SuppressWarnings(\"unchecked\")\n+\tprotected TypeBasedHeap lubAux(TypeBasedHeap other) throws SemanticException {\n+\t\treturn new TypeBasedHeap(CollectionUtils.union(rewritten, other.rewritten));\n+\t}\n+\n+\t@Override\n+\tprotected TypeBasedHeap wideningAux(TypeBasedHeap other) throws SemanticException {\n+\t\treturn lubAux(other);\n+\t}\n+\n+\t@Override\n+\tprotected boolean lessOrEqualAux(TypeBasedHeap other) throws SemanticException {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((rewritten == null) ? 0 : rewritten.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tTypeBasedHeap other = (TypeBasedHeap) obj;\n+\t\tif (rewritten == null) {\n+\t\t\tif (other.rewritten != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!rewritten.equals(other.rewritten))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+}"
  },
  {
    "sha": "9fc5f981bf4a2404f37322b88e402cc92760a5b8",
    "filename": "lisa/src/main/java/it/unive/lisa/analysis/impl/types/InferredTypes.java",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/main/java/it/unive/lisa/analysis/impl/types/InferredTypes.java",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/main/java/it/unive/lisa/analysis/impl/types/InferredTypes.java",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/src/main/java/it/unive/lisa/analysis/impl/types/InferredTypes.java?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -173,21 +173,28 @@ protected InferredTypes evalBinaryExpression(BinaryOperator operator, InferredTy\n \t\t\t\treturn bottom();\n \t\t\treturn new InferredTypes(set);\n \t\tcase STRING_CONCAT:\n+\t\t\tif (left.elements.noneMatch(Type::isStringType) || right.elements.noneMatch(Type::isStringType))\n+\t\t\t\treturn bottom();\n+\t\t\treturn new InferredTypes(StringType.INSTANCE);\n+\t\tcase STRING_INDEX_OF:\n+\t\t\tif (left.elements.noneMatch(Type::isStringType) || right.elements.noneMatch(Type::isStringType))\n+\t\t\t\treturn bottom();\n+\t\t\treturn new InferredTypes(IntType.INSTANCE);\n \t\tcase STRING_CONTAINS:\n \t\tcase STRING_ENDS_WITH:\n \t\tcase STRING_EQUALS:\n-\t\tcase STRING_INDEX_OF:\n \t\tcase STRING_STARTS_WITH:\n \t\t\tif (left.elements.noneMatch(Type::isStringType) || right.elements.noneMatch(Type::isStringType))\n \t\t\t\treturn bottom();\n-\t\t\treturn new InferredTypes(StringType.INSTANCE);\n+\t\t\treturn new InferredTypes(BoolType.INSTANCE);\n \t\tcase TYPE_CAST:\n \t\t\tif (right.elements.noneMatch(Type::isTypeTokenType))\n \t\t\t\treturn bottom();\n-\t\t\tset = right.elements.filter(r -> left.elements.anyMatch(l -> l.canBeAssignedTo(r)));\n+\t\t\tset = right.elements.filter(r -> left.elements\n+\t\t\t\t\t.anyMatch(l -> r.asTypeTokenType().getTypes().anyMatch(t -> l.canBeAssignedTo(t))));\n \t\t\tif (set.isEmpty())\n \t\t\t\treturn bottom();\n-\t\t\treturn new InferredTypes(BoolType.INSTANCE);\n+\t\t\treturn new InferredTypes(set.multiTransform(t -> t.asTypeTokenType().getTypes()));\n \t\tcase TYPE_CHECK:\n \t\t\tif (right.elements.noneMatch(Type::isTypeTokenType))\n \t\t\t\treturn bottom();"
  },
  {
    "sha": "1099b47d4afc9d8f288c375bcb29c4fc5829f1e2",
    "filename": "lisa/src/main/java/it/unive/lisa/util/collections/ExternalSet.java",
    "status": "modified",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/main/java/it/unive/lisa/util/collections/ExternalSet.java",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/main/java/it/unive/lisa/util/collections/ExternalSet.java",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/src/main/java/it/unive/lisa/util/collections/ExternalSet.java?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -5,6 +5,7 @@\n import java.util.List;\n import java.util.Set;\n import java.util.function.BiFunction;\n+import java.util.function.Function;\n import java.util.function.Predicate;\n \n /**\n@@ -252,6 +253,39 @@ public default boolean allMatch(Predicate<T> predicate) {\n \t\treturn result;\n \t}\n \n+\t/**\n+\t * Transforms this set into another set where each element is obtained by\n+\t * transforming elements of this set.\n+\t * \n+\t * @param transformer the function that transforms single elements of this\n+\t *                        set\n+\t * \n+\t * @return the transformed set\n+\t */\n+\tpublic default ExternalSet<T> transform(Function<T, T> transformer) {\n+\t\tExternalSet<T> result = getCache().mkEmptySet();\n+\t\tfor (T t : this)\n+\t\t\tresult.add(transformer.apply(t));\n+\t\treturn result;\n+\t}\n+\n+\t/**\n+\t * Transforms this set into another set where each element is obtained by\n+\t * transforming elements of this set. Note that each element of this set can\n+\t * be transformed into multiple elements.\n+\t * \n+\t * @param transformer the function that transforms single elements of this\n+\t *                        set\n+\t * \n+\t * @return the transformed set\n+\t */\n+\tpublic default ExternalSet<T> multiTransform(Function<T, Collection<T>> transformer) {\n+\t\tExternalSet<T> result = getCache().mkEmptySet();\n+\t\tfor (T t : this)\n+\t\t\tresult.addAll(transformer.apply(t));\n+\t\treturn result;\n+\t}\n+\n \t/**\n \t * Reduces this set to a single element. The result starts at {@code base},\n \t * and it is transformed by invoking {@code reducer} on the current result"
  },
  {
    "sha": "469b8dcd1753c71a40e12ceefa48b2649a3c81db",
    "filename": "lisa/src/test/java/it/unive/lisa/test/heap/PointBasedHeapTest.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/test/java/it/unive/lisa/test/heap/PointBasedHeapTest.java",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/test/java/it/unive/lisa/test/heap/PointBasedHeapTest.java",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/src/test/java/it/unive/lisa/test/heap/PointBasedHeapTest.java?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,19 @@\n+package it.unive.lisa.test.heap;\n+\n+import static it.unive.lisa.LiSAFactory.getDefaultFor;\n+\n+import it.unive.lisa.AnalysisSetupException;\n+import it.unive.lisa.analysis.AbstractState;\n+import it.unive.lisa.analysis.heap.PointBasedHeap;\n+import it.unive.lisa.analysis.impl.numeric.Interval;\n+import it.unive.lisa.test.AnalysisTest;\n+import org.junit.Test;\n+\n+public class PointBasedHeapTest extends AnalysisTest {\n+\n+\t@Test\n+\tpublic void pointBasedHeapTest() throws AnalysisSetupException {\n+\t\tperform(\"heap/point-based-heap\", \"program.imp\", false, false,\n+\t\t\t\tgetDefaultFor(AbstractState.class, new PointBasedHeap(), new Interval()));\n+\t}\n+}"
  },
  {
    "sha": "2b2fa510d6574c06e93e9bb4a42d825c481d1c57",
    "filename": "lisa/src/test/java/it/unive/lisa/test/heap/TypeBasedHeapTest.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/UniVE-SSV/lisa/blob/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/test/java/it/unive/lisa/test/heap/TypeBasedHeapTest.java",
    "raw_url": "https://github.com/UniVE-SSV/lisa/raw/c95329e54f7a03a2f564a84ac191f43a7b226a51/lisa/src/test/java/it/unive/lisa/test/heap/TypeBasedHeapTest.java",
    "contents_url": "https://api.github.com/repos/UniVE-SSV/lisa/contents/lisa/src/test/java/it/unive/lisa/test/heap/TypeBasedHeapTest.java?ref=c95329e54f7a03a2f564a84ac191f43a7b226a51",
    "patch": "@@ -0,0 +1,19 @@\n+package it.unive.lisa.test.heap;\n+\n+import static it.unive.lisa.LiSAFactory.getDefaultFor;\n+\n+import it.unive.lisa.AnalysisSetupException;\n+import it.unive.lisa.analysis.AbstractState;\n+import it.unive.lisa.analysis.heap.TypeBasedHeap;\n+import it.unive.lisa.analysis.impl.numeric.Interval;\n+import it.unive.lisa.test.AnalysisTest;\n+import org.junit.Test;\n+\n+public class TypeBasedHeapTest extends AnalysisTest {\n+\n+\t@Test\n+\tpublic void testTypeBasedHeap() throws AnalysisSetupException {\n+\t\tperform(\"heap/type-based-heap\", \"program.imp\", false, false,\n+\t\t\t\tgetDefaultFor(AbstractState.class, new TypeBasedHeap(), new Interval()));\n+\t}\n+}"
  }
]
