[
  {
    "sha": "ef4c7ebc4f92309a4e3dd585eab16b4bfa60a1e5",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ConfigUtil.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ConfigUtil.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ConfigUtil.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ConfigUtil.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -7,6 +7,7 @@\n \tpublic static final String KEY_AGENCY = \"agency\";\n \tpublic static final String KEY_DDI_LANGUAGE = \"ddilang\";\n \tpublic static final String KEY_FILENAME = \"filename\";\n+\tpublic static final String KEY_FORMAT = \"format\";\n \tpublic static final String KEY_OUTPUT_FILE = \"outputfile\";\n \tpublic static final String KEY_RENAME = \"rename\";\n \tpublic static final String KEY_STATS = \"stats\";\n@@ -34,6 +35,11 @@ public String getFilename() {\n \t\treturn filename;\n \t}\n \n+\tpublic String getFormat() {\n+\t\tString format = getProperties().getProperty(KEY_FORMAT);\n+\t\treturn format;\n+\t}\n+\n \tpublic long getObservationLimit() {\n \t\tString observationLimit = getProperties().getProperty(KEY_OBSERVATION_LIMIT);\n \t\treturn Util.observationLimitCheck(observationLimit);"
  },
  {
    "sha": "3c29a41aaaede08cdcf034a03dc620e312d61bb1",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/GenerateDDI3.java",
    "status": "modified",
    "additions": 40,
    "deletions": 8,
    "changes": 48,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/GenerateDDI3.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/GenerateDDI3.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/GenerateDDI3.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -1,7 +1,6 @@\n package edu.cornell.ncrn.ced2ar.ddigen;\r\n \r\n import edu.cornell.ncrn.ced2ar.data.spss.SPSSFile;\r\n-import edu.cornell.ncrn.ced2ar.ddigen.csv.Ced2arVariableStat;\r\n import edu.cornell.ncrn.ced2ar.ddigen.csv.SpssCsvGenerator;\r\n import edu.cornell.ncrn.ced2ar.ddigen.csv.StataCsvGenerator;\r\n import edu.cornell.ncrn.ced2ar.ddigen.csv.VariableCsv;\r\n@@ -14,7 +13,6 @@\n import java.io.File;\r\n import java.util.List;\r\n import java.util.Map;\r\n-import org.apache.commons.math3.stat.Frequency;\r\n import org.apache.log4j.Logger;\r\n import org.w3c.dom.Document;\r\n \r\n@@ -25,11 +23,21 @@\n \tprivate String agency;\r\n \tprivate String ddiLanguage;\r\n \tprivate Map<String, String> excludeVariableToStatMap;\r\n-\r\n-\tpublic GenerateDDI3(String agency, String ddiLanguage, Map<String, String> excludeVariableToStatMap) {\r\n+\tprivate String outputFile;\r\n+\tprivate String statistics;\r\n+\r\n+\tpublic GenerateDDI3(\r\n+\t\tString agency,\r\n+\t\tString ddiLanguage,\r\n+\t\tMap<String, String> excludeVariableToStatMap,\r\n+\t\tString statistics,\r\n+\t\tString outputFile\r\n+\t) {\r\n \t\tsetAgency(agency);\r\n \t\tsetDdiLanguage(ddiLanguage);\r\n \t\tsetExcludeVariableToStatMap(excludeVariableToStatMap);\r\n+\t\tsetOutputFile(outputFile);\r\n+\t\tsetStatistics(statistics);\r\n \t}\r\n \r\n \tpublic void generateDDI(\r\n@@ -64,23 +72,31 @@ public void generateDDI(\n \r\n \t\tLogicalProductGenerator logicalProductGenerator = new LogicalProductGenerator(\r\n \t\t\tlogicalProduct,\r\n-\t\t\tvariableCsv.getVariableStatistics(),\r\n+\t\t\tvariableCsv.getVariableStatList(),\r\n+\t\t\tgetStatistics(),\r\n \t\t\tgetExcludeVariableToStatMap(),\r\n-\t\t\tvariableCsv.getRepresentationTypeCodeList(),\r\n \t\t\tgetAgency(),\r\n \t\t\tgetDdiLanguage(),\r\n \t\t\tdataFile,\r\n \t\t\trecordCount\r\n \t\t);\r\n-\t\tlogicalProductGenerator.setFrequency(variableCsv.getFrequency());\r\n+\t\tlogicalProductGenerator.setVariableToFrequencyMap(variableCsv.getVariableToFrequencyMap());\r\n \t\tList<Fragment> fragmentList = logicalProductGenerator.toFragmentList();\r\n \r\n \t\tFragmentInstanceGenerator transformer = new FragmentInstanceGenerator(fragmentList);\r\n \t\tDocument fragmentInstanceDocument = transformer.toDocument();\r\n \r\n \t\tVariableDDIGenerator variableDDIGenerator = new VariableDDIGenerator();\r\n \t\tString xml = variableDDIGenerator.domToString(fragmentInstanceDocument, \"UTF-8\");\r\n-\t\tcreateFile(xml, dataFile+\".xml\");\r\n+\r\n+\t\tString fileName;\r\n+\t\tif (getOutputFile() != null && !getOutputFile().trim().isEmpty()) {\r\n+\t\t\tfileName = getOutputFile();\r\n+\t\t} else {\r\n+\t\t\tfileName = dataFile;\r\n+\t\t}\r\n+\r\n+\t\tcreateFile(xml, fileName + \".xml\");\r\n \t\tlogger.info(\"Successfully created DDI file\");\r\n \r\n \t\tlogger.info(\"CSV created in: \"+ ((System.currentTimeMillis() - s) / 1000.0) + \" seconds \");\r\n@@ -107,6 +123,14 @@ public static Logger getLogger() {\n \t\treturn logger;\r\n \t}\r\n \r\n+\tpublic String getOutputFile() {\r\n+\t\treturn outputFile;\r\n+\t}\r\n+\r\n+\tpublic String getStatistics() {\r\n+\t\treturn statistics;\r\n+\t}\r\n+\r\n \tpublic void setAgency(String agency) {\r\n \t\tthis.agency = agency;\r\n \t}\r\n@@ -118,4 +142,12 @@ public void setDdiLanguage(String ddiLanguage) {\n \tpublic void setExcludeVariableToStatMap(Map<String, String> excludeVariableToStatMap) {\r\n \t\tthis.excludeVariableToStatMap = excludeVariableToStatMap;\r\n \t}\r\n+\r\n+\tpublic void setOutputFile(String outputFile) {\r\n+\t\tthis.outputFile = outputFile;\r\n+\t}\r\n+\r\n+\tpublic void setStatistics(String statistics) {\r\n+\t\tthis.statistics = statistics;\r\n+\t}\r\n }\n\\ No newline at end of file"
  },
  {
    "sha": "dedba3ca33e2ffe1189602b0f02bdbb57e787b70",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/Main.java",
    "status": "modified",
    "additions": 22,
    "deletions": 11,
    "changes": 33,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/Main.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/Main.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/Main.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -52,30 +52,39 @@ public static void main(String args[]) throws Exception {\n \t\tBoolean summaryStats;\r\n \t\tLong obsLimit;\r\n \t\tString formatOutput;\r\n+\t\tformatOutput = Util.formatCheck(format);\r\n+\t\tsummaryStats = Util.runSumStatsCheck(processSummaryStatics);\r\n+\t\tobsLimit = Util.observationLimitCheck(observationLimit);\r\n \t\tConfigUtil configUtil;\r\n \t\tMap<String, String> excludeVariableToStatMap = new HashMap<>();\r\n+\t\tString stats;\r\n+\t\tString outputFile;\r\n \r\n \t\tif (config != null && !config.isEmpty()) {\r\n \t\t\tUtil.fileCheck(config);\r\n \r\n \t\t\tProperties properties = FileUtil.getPropertiesFromFile(config);\r\n \t\t\tconfigUtil = new ConfigUtil(properties);\r\n \r\n-\t\t\tsummaryStats = configUtil.getSumStats();\r\n-\t\t\tobsLimit = configUtil.getObservationLimit();\r\n-\t\t\tformatOutput = configUtil.getDdiLanguage();\r\n-\t\t\tdataFile = configUtil.getFilename();\r\n-\r\n+\t\t\tif ((dataFile == null || dataFile.trim().isEmpty()) && configUtil.getFilename() != null) {\r\n+\t\t\t\tdataFile = configUtil.getFilename();\r\n+\t\t\t}\r\n+\t\t\tif (formatOutput.trim().isEmpty() && configUtil.getFormat() != null) {\r\n+\t\t\t\tformatOutput = configUtil.getFormat();\r\n+\t\t\t}\r\n+\t\t\tif (obsLimit == -1L) {\r\n+\t\t\t\tobsLimit = configUtil.getObservationLimit();\r\n+\t\t\t}\r\n+\t\t\tif (!summaryStats) {\r\n+\t\t\t\tsummaryStats = configUtil.getSumStats();\r\n+\t\t\t}\r\n \t\t} else {\r\n \t\t\tif (StringUtils.isEmpty(dataFile)) {\r\n \t\t\t\tutil.help();\r\n \t\t\t}\r\n \r\n \t\t\tProperties properties = FileUtil.getPropertiesFromResource(LogicalProductGenerator.class);\r\n \t\t\tconfigUtil = new ConfigUtil(properties);\r\n-\t\t\tsummaryStats = Util.runSumStatsCheck(processSummaryStatics);\r\n-\t\t\tobsLimit = Util.observationLimitCheck(observationLimit);\r\n-\t\t\tformatOutput = Util.formatCheck(format);\r\n \t\t}\r\n \r\n \t\tif (exclude != null && !exclude.isEmpty()) {\r\n@@ -91,18 +100,20 @@ public static void main(String args[]) throws Exception {\n \r\n \t\tString agency = configUtil.getAgency();\r\n \t\tString ddiLanguage = configUtil.getDdiLanguage();\r\n+\t\tstats = configUtil.getStats();\r\n+\t\toutputFile = configUtil.getOutputFile();\r\n \r\n+\t\tSystem.out.println(dataFile);\r\n \t\tUtil.fileCheck(dataFile);\r\n \r\n \t\tAbstractGenerateDDI generateDDI;\r\n-\t\tif (formatOutput.equalsIgnoreCase(\"2.5Fragment\")) {\r\n+\t\tif (formatOutput.equalsIgnoreCase(\"2.5\")) {\r\n \t\t\tgenerateDDI = new GenerateDDI();\r\n \t\t} else {\r\n-\t\t\tgenerateDDI = new GenerateDDI3(agency, ddiLanguage, excludeVariableToStatMap);\r\n+\t\t\tgenerateDDI = new GenerateDDI3(agency, ddiLanguage, excludeVariableToStatMap, stats, outputFile);\r\n \t\t}\r\n \t\tgenerateDDI.generateDDI(dataFile, summaryStats, obsLimit);\r\n \r\n-\r\n \t\tSystem.out.println(\"Finished. Exiting.\");\r\n \t}\r\n }\r"
  },
  {
    "sha": "2dcd1c9029115c3b8c253c2e9e53242afae47892",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/Util.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/Util.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/Util.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/Util.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -31,7 +31,7 @@ public Util() {\n \t\t_options.addOption(\"s\", true,\n \t\t\t\t\"(optional) [true|false] Generate summary statistics\");\n \t\t_options.addOption(\"l\", true, \"(optional) Observation limit\");\n-\t\t_options.addOption(\"format\", true, \"(optional) DDI format (3.3Fragment or 2.5Fragment)\");\n+\t\t_options.addOption(\"format\", true, \"(optional) DDI format (3.3Fragment or 2.5)\");\n \t\t_options.addOption(\"config\", true, \"(optional) Config file path\");\n \t\t_options.addOption(\"exclude\", true, \"(optional) Exclude variable statistics file path\");\n \t}\n@@ -76,10 +76,10 @@ public static String formatCheck(String format) {\n \t\t\treturn \"3.3Fragment\";\n \t\t}\n \n-\t\tif (format.equalsIgnoreCase(\"2.5Fragment\") || format.equalsIgnoreCase(\"3.3Fragment\")) {\n+\t\tif (format.equalsIgnoreCase(\"2.5\") || format.equalsIgnoreCase(\"3.3Fragment\")) {\n \t\t\treturn format;\n \t\t} else {\n-\t\t\tSystem.out.println(\"Only following formats are supported: 2.5Fragment and 3.3Fragment\");\n+\t\t\tSystem.out.println(\"Only following formats are supported: 2.5 and 3.3Fragment\");\n \t\t\tSystem.exit(1);\n \t\t\treturn \"3.3Fragment\";\n \t\t}"
  },
  {
    "sha": "4e44dd7c4b53af422626752b50d844ea4eb537fc",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/Ced2arVariableStat.java",
    "status": "modified",
    "additions": 32,
    "deletions": 12,
    "changes": 44,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/Ced2arVariableStat.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/Ced2arVariableStat.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/Ced2arVariableStat.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -1,6 +1,7 @@\n package edu.cornell.ncrn.ced2ar.ddigen.csv;\r\n \r\n import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n import java.util.HashMap;\r\n \r\n //import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\r\n@@ -13,7 +14,7 @@\n \tprivate String name;\r\n \tprivate String label;\r\n \tprivate String type;\r\n-\tprivate String representationType;\r\n+\tprivate boolean containsCategory;\r\n \r\n \tprivate Long validCount = 0L;\r\n \tprivate Long invalidCount = 0L;\r\n@@ -32,6 +33,11 @@\n \t//private DescriptiveStatistics stats = new DescriptiveStatistics();\r\n \tprivate SummaryStatistics stats = new SummaryStatistics();\r\n \r\n+\tprivate String minFormatted;\r\n+\tprivate String maxFormatted;\r\n+\tprivate String meanFormatted;\r\n+\tprivate String stdDeviationFormatted;\r\n+\r\n \tpublic Long getPossibleErrorValueCount() {\r\n \t\treturn possibleErrorValueCount;\r\n \t}\r\n@@ -84,6 +90,10 @@ public Double getMaxValue() {\n \t\treturn maxValue;\r\n \t}\r\n \r\n+\tpublic String getMeanFormatted() {\r\n+\t\treturn ((Double) stats.getMean()).equals(Double.NaN) ? \"\" : \"\" + new BigDecimal(stats.getMean()).toPlainString();\r\n+\t}\r\n+\r\n \tpublic void setMaxValue(Double maxValue) {\r\n \t\tthis.maxValue = maxValue;\r\n \t}\r\n@@ -92,6 +102,23 @@ public void setMaxValue(Double maxValue) {\n \t\treturn missingValues;\r\n \t}\r\n \r\n+\tpublic Double getStdDeviation() {\r\n+\t\treturn stdDeviation;\r\n+\t}\r\n+\r\n+\tpublic String getMaxFormatted() {\r\n+\t\treturn ((Double) stats.getMax()).equals(Double.NaN) ? \"\" : \"\" + new BigDecimal(stats.getMax()).toPlainString();\r\n+\t}\r\n+\r\n+\tpublic String getMinFormatted() {\r\n+\t\treturn ((Double) stats.getMin()).equals(Double.NaN) ? \"\" : \"\" + new BigDecimal(stats.getMin()).toPlainString();\r\n+\t}\r\n+\r\n+\tpublic String getStdDeviationFormatted() {\r\n+\t\treturn ((Double) stats.getStandardDeviation()).equals(Double.NaN) ? \"\" : \"\" + BigDecimal\r\n+\t\t\t.valueOf(stats.getStandardDeviation()).toPlainString();\r\n+\t}\r\n+\r\n \tpublic void setStdDeviation(double stdDeviation) {\r\n \t\tthis.stdDeviation = stdDeviation;\r\n \t}\r\n@@ -164,19 +191,12 @@ public void setType(String type) {\n \t\tthis.type = type;\r\n \t}\r\n \r\n-\tpublic String getRepresentationType() {\r\n-\t\treturn representationType;\r\n-\t}\r\n-\r\n-\tpublic void setRepresentationType(String representationType) {\r\n-\t\tthis.representationType = representationType;\r\n+\tpublic boolean containsCategory() {\r\n+\t\treturn containsCategory;\r\n \t}\r\n \r\n-\tpublic boolean isRepresentationTypeCodeList() {\r\n-\t\treturn getType() != null\r\n-\t\t\t&& getType().equalsIgnoreCase(\"BigInteger\")\r\n-\t\t\t&& getRepresentationType() != null\r\n-\t\t\t&& getRepresentationType().equalsIgnoreCase(\"NUMERIC\");\r\n+\tpublic void setContainsCategory(boolean containsCategory) {\r\n+\t\tthis.containsCategory = containsCategory;\r\n \t}\r\n \r\n \r"
  },
  {
    "sha": "28376524ab1a6e9ddc91bde77e7aa8fc5a0a3ba7",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/CsvGenerator.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/CsvGenerator.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/CsvGenerator.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/CsvGenerator.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -37,8 +37,9 @@\n \t * @return\r\n \t */\r\n \tprotected long updateVariableStatistics(List<Ced2arVariableStat> variables,\r\n-\t\t\tFrequency frequency, String[] observation) {\r\n+\t\t\tMap<String, Frequency> variableToFrequencyMap, String[] observation) {\r\n \t\tlong readErrors = 0;\r\n+\r\n \t\tfor (Ced2arVariableStat variable : variables) {\r\n \t\t\tString value = \"\";\r\n \t\t\ttry {\r\n@@ -50,7 +51,8 @@ protected long updateVariableStatistics(List<Ced2arVariableStat> variables,\n \r\n \t\t\tif (isValidValue(variable, value)) {\r\n \t\t\t\tvariable.setValidCount(variable.getValidCount() + 1);\r\n-\t\t\t\tif (variable.isNumeric() && !variable.isDate()) {\r\n+\t\t\t\tif (variable.isNumeric()) {\r\n+\r\n \t\t\t\t\ttry {\r\n \t\t\t\t\t\tif (value.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))\r\n \t\t\t\t\t\t\tvariable.getStats().addValue(\r\n@@ -63,13 +65,13 @@ protected long updateVariableStatistics(List<Ced2arVariableStat> variables,\n \t\t\t\t\t\t\t\t+ observation);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n-\r\n-\t\t\t\tif (variable.isRepresentationTypeCodeList()) {\r\n-\t\t\t\t\tfrequency.addValue(Long.parseLong(value));\r\n-\t\t\t\t}\r\n \t\t\t} else {\r\n \t\t\t\tvariable.setInvalidCount(variable.getInvalidCount() + 1);\r\n \t\t\t}\r\n+\t\t\tFrequency frequency = variableToFrequencyMap.get(variable.getName());\r\n+\t\t\tif (frequency != null && value != null && variable.isNumeric()) {\r\n+\t\t\t\tfrequency.addValue(value);\r\n+\t\t\t}\r\n \t\t}\r\n \t\treturn readErrors;\r\n \t}\r"
  },
  {
    "sha": "3be105ba4170ef331f7a916f861a99bed4a9c5c4",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/SpssCsvGenerator.java",
    "status": "modified",
    "additions": 19,
    "deletions": 15,
    "changes": 34,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/SpssCsvGenerator.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/SpssCsvGenerator.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/SpssCsvGenerator.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -129,14 +129,19 @@ public VariableCsv getVariablesCsv(SPSSFile spssFile,\n \t\tlogger.info(\"Metadata is loaded from spssFile\");\r\n \r\n \t\tList<Ced2arVariableStat> ced2arVariableStats = getVariableStats(spssFile);\r\n-\t\tFrequency frequency = new Frequency();\r\n+\t\tMap<String, Frequency> variableToFrequencyMap = new HashMap<>();\r\n+\t\tfor (Ced2arVariableStat variableStat : ced2arVariableStats) {\r\n+\t\t\tif (variableStat.isNumeric()) {\r\n+\t\t\t\tvariableToFrequencyMap.put(variableStat.getName(), new Frequency());\r\n+\t\t\t}\r\n+\t\t}\r\n \r\n \t\tlong endTime = System.currentTimeMillis();\r\n \t\tlogger.info(\"Time to process Meta Data \"\r\n \t\t\t\t+ ((endTime - startTime) / 1000) + \" seconds\");\r\n \t\tlong readErrors = 0;\r\n \t\tif (includeSummaryStatistics) {\r\n-\t\t\treadErrors = setSummaryStatistics(spssFile, ced2arVariableStats, frequency, recordLimit);\r\n+\t\t\treadErrors = setSummaryStatistics(spssFile, ced2arVariableStats, variableToFrequencyMap, recordLimit);\r\n \t\t}\r\n \r\n \t\tendTime = System.currentTimeMillis();\r\n@@ -151,15 +156,8 @@ public VariableCsv getVariablesCsv(SPSSFile spssFile,\n \t\tvariablesCSV.setVariableStatistics(variableStatistics);\r\n \t\tvariablesCSV.setVariableValueLables(variableValueLabels);\r\n \t\tvariablesCSV.setReadErrors(readErrors);\r\n-\t\tvariablesCSV.setFrequency(frequency);\r\n-\r\n-\t\tList<String> representationTypeCodeList = new ArrayList<>();\r\n-\t\tfor (Ced2arVariableStat variableStat : ced2arVariableStats) {\r\n-\t\t\tif (variableStat.isRepresentationTypeCodeList()) {\r\n-\t\t\t\trepresentationTypeCodeList.add(variableStat.getName());\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tvariablesCSV.setRepresentationTypeCodeList(representationTypeCodeList);\r\n+\t\tvariablesCSV.setVariableToFrequencyMap(variableToFrequencyMap);\r\n+\t\tvariablesCSV.setVariableStatList(ced2arVariableStats);\r\n \r\n \t\treturn variablesCSV;\r\n \t}\r\n@@ -173,24 +171,28 @@ public VariableCsv getVariablesCsv(SPSSFile spssFile,\n \t\t\tif (i % 1001 == 1000)\r\n \t\t\t\tlogger.info(\"Reading  variable \" + i + \"of \" + totalVariables);\r\n \t\t\tSPSSVariable spssVariable = spssFile.getVariable(i);\r\n+\r\n \t\t\tCed2arVariableStat variable = new Ced2arVariableStat();\r\n \t\t\tvariable.setName(spssVariable.getName());\r\n \t\t\tvariable.setLabel(spssVariable.getLabel());\r\n \t\t\tvariable.setType(spssVariable.getDDI3DataType());\r\n-\t\t\tvariable.setRepresentationType(\"\" + spssVariable.getDDI3RepresentationType());\r\n \r\n \t\t\tint width = spssVariable.variableRecord.getWriteFormatWidth();\r\n+\r\n \t\t\tvariable.setStartPosition(startPosition);\r\n \t\t\tstartPosition += width;\r\n \t\t\tvariable.setEndPosition(startPosition);\r\n \t\t\tvariable.setVariableNumber(spssVariable.getVariableNumber());\r\n \t\t\tif (spssVariable.categoryMap != null) {\r\n+\t\t\t\tif (spssVariable.categoryMap.size() > 0) {\r\n+\t\t\t\t\tvariable.setContainsCategory(true);\r\n+\t\t\t\t}\r\n+\r\n \t\t\t\tIterator it = spssVariable.categoryMap.entrySet().iterator();\r\n \t\t\t\twhile (it.hasNext()) {\r\n \t\t\t\t\tMap.Entry pair = (Map.Entry) it.next();\r\n \t\t\t\t\tSPSSVariableCategory cat = (SPSSVariableCategory) pair\r\n \t\t\t\t\t\t.getValue();\r\n-\t\t\t\t\t//System.out.println(\" cat label \" + cat.label + \" cat value \" + cat.value);\r\n \r\n \t\t\t\t\tif (cat.isMissing()) {\r\n \t\t\t\t\t\tHashMap hm = variable.getMissingValues();\r\n@@ -233,14 +235,15 @@ public VariableCsv getVariablesCsv(SPSSFile spssFile,\n \tpublic long setSummaryStatistics(\r\n \t\tSPSSFile spssFile,\r\n \t\tList<Ced2arVariableStat> variables,\r\n-\t\tFrequency frequency,\r\n+\t\tMap<String, Frequency> variableToFrequencyMap,\r\n \t\tlong recordLimit\r\n \t) throws IOException, SPSSFileException {\r\n \t\tlong totalRecords = spssFile.getRecordCount();\r\n \t\tlong readErrors = 0;\r\n \t\tlogger.info(\"Total Records \" + totalRecords);\r\n \t\tFileFormatInfo fileFormatCSV = new FileFormatInfo();\r\n \t\tfileFormatCSV.asciiFormat = ASCIIFormat.CSV;\r\n+\r\n \t\tfor (int i = 1; i <= totalRecords; i++) {\r\n \t\t\tif (i % 1000 == 999)\r\n \t\t\t\tlogger.info(\"Processing record \" + (i + 1) + \" of \"\r\n@@ -253,8 +256,9 @@ public long setSummaryStatistics(\n \t\t\ttry {\r\n \t\t\t\tString record = spssFile\r\n \t\t\t\t\t\t.getRecordFromDisk(fileFormatCSV, false);\r\n+\r\n \t\t\t\tString[] varValues = record.split(\",\");\r\n-\t\t\t\treadErrors = updateVariableStatistics(variables, frequency, varValues);\r\n+\t\t\t\treadErrors = updateVariableStatistics(variables, variableToFrequencyMap, varValues);\r\n \t\t\t} catch (Exception ex) {\r\n \t\t\t\tlogger.error(\"An error occured in reding observation \" + i\r\n \t\t\t\t\t\t+ \". Skipping this observation \" + ex);\r"
  },
  {
    "sha": "d95589c1050886265ffb29758f708d4dd5d395c6",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/StataCsvGenerator.java",
    "status": "modified",
    "additions": 10,
    "deletions": 4,
    "changes": 14,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/StataCsvGenerator.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/StataCsvGenerator.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/StataCsvGenerator.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -18,8 +18,10 @@\n \r\n import java.io.IOException;\r\n import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n import java.util.List;\r\n \r\n+import java.util.Map;\r\n import org.apache.commons.math3.stat.Frequency;\r\n import org.apache.log4j.Logger;\r\n \r\n@@ -46,6 +48,8 @@ public VariableCsv getVariablesCsv(StataReader stataReader,\n \t\t\tthrows IOException {\r\n \t\tList<Ced2arVariableStat> ced2arVariableStats = new ArrayList<Ced2arVariableStat>();\r\n \t\tList<DtaVariable> dtaVariables = stataReader.getDtaVariables();\r\n+\t\tMap<String, Frequency> variableToFrequencyMap = new HashMap<>();\r\n+\r\n \t\tint variableNumber = 0;\r\n \t\tfor (DtaVariable dtaVariable : dtaVariables) {\r\n \t\t\tvariableNumber++;\r\n@@ -58,12 +62,14 @@ public VariableCsv getVariablesCsv(StataReader stataReader,\n \t\t\t\t\t.getVariableValueLabels());\r\n \t\t\tced2arVariableStat.setVariableNumber(variableNumber);\r\n \t\t\tced2arVariableStats.add(ced2arVariableStat);\r\n+\r\n+\t\t\tvariableToFrequencyMap.put(dtaVariable.getName(), new Frequency());\r\n \t\t}\r\n-\t\tFrequency frequency = new Frequency();\r\n+\r\n \t\tlong readErrors = 0;\r\n \t\tif (includeSummaryStatistics)\r\n \t\t\treadErrors = setSummaryStatistics(stataReader, ced2arVariableStats,\r\n-\t\t\t\t\tfrequency,\r\n+\t\t\t\t\tvariableToFrequencyMap,\r\n \t\t\t\t\trecordLimit);\r\n \r\n \t\tString variableStatistics = getSummaryStatisticsVaribleCSV(\r\n@@ -80,7 +86,7 @@ public VariableCsv getVariablesCsv(StataReader stataReader,\n \t}\r\n \r\n \tprivate long setSummaryStatistics(StataReader stataReader,\r\n-\t\t\tList<Ced2arVariableStat> ced2arVariableStats, Frequency frequency, long recordLimit)\r\n+\t\t\tList<Ced2arVariableStat> ced2arVariableStats, Map<String, Frequency> variableToFrequencyMap, long recordLimit)\r\n \t\t\tthrows IOException {\r\n \t\tlong startTime = System.currentTimeMillis();\r\n \t\tlogger.info(\"Start reading stata observations\");\r\n@@ -99,7 +105,7 @@ private long setSummaryStatistics(StataReader stataReader,\n \t\t\t\tString[] varValues = observation.toArray(new String[observation\r\n \t\t\t\t\t\t.size()]);\r\n \t\t\t\treadErrors = updateVariableStatistics(ced2arVariableStats,\r\n-\t\t\t\t\t\tfrequency,\r\n+\t\t\t\t\t\tvariableToFrequencyMap,\r\n \t\t\t\t\t\tvarValues);\r\n \t\t\t\t// Observation is in CSV format that confirms to RFC 4180\r\n \t\t\t\t// https://www.ietf.org/rfc/rfc4180.txt\r"
  },
  {
    "sha": "178cb0caaf3ae2e3ca7974ed0bcd75d151ce2eef",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/VariableCsv.java",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/VariableCsv.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/VariableCsv.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/csv/VariableCsv.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -2,31 +2,33 @@\n \r\n import java.io.Serializable;\r\n import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n import java.util.List;\r\n+import java.util.Map;\r\n import org.apache.commons.math3.stat.Frequency;\r\n \r\n public class VariableCsv implements Serializable {\r\n \tprivate static final long serialVersionUID = 3064037465077888018L;\r\n \tprivate String variableStatistics;\r\n \tprivate String variableValueLables;\r\n \tprivate long readErrors;\r\n-\tprivate Frequency frequency;\r\n-\tprivate List<String> representationTypeCodeList = new ArrayList<>();\r\n+\tprivate Map<String, Frequency> variableToFrequencyMap = new HashMap<>();\r\n+\tprivate List<Ced2arVariableStat> variableStatList = new ArrayList<>();\r\n \r\n-\tpublic Frequency getFrequency() {\r\n-\t\treturn frequency;\r\n+\tpublic Map<String, Frequency> getVariableToFrequencyMap() {\r\n+\t\treturn variableToFrequencyMap;\r\n \t}\r\n \r\n-\tpublic void setFrequency(Frequency frequency) {\r\n-\t\tthis.frequency = frequency;\r\n+\tpublic void setVariableToFrequencyMap(Map<String, Frequency> variableToFrequencyMap) {\r\n+\t\tthis.variableToFrequencyMap = variableToFrequencyMap;\r\n \t}\r\n \r\n-\tpublic List<String> getRepresentationTypeCodeList() {\r\n-\t\treturn representationTypeCodeList;\r\n+\tpublic List<Ced2arVariableStat> getVariableStatList() {\r\n+\t\treturn variableStatList;\r\n \t}\r\n \r\n-\tpublic void setRepresentationTypeCodeList(List<String> representationTypeCodeList) {\r\n-\t\tthis.representationTypeCodeList = representationTypeCodeList;\r\n+\tpublic void setVariableStatList(List<Ced2arVariableStat> variableStatList) {\r\n+\t\tthis.variableStatList = variableStatList;\r\n \t}\r\n \r\n \tpublic String getVariableStatistics() {\r"
  },
  {
    "sha": "c45909cc666a3d9cf527b1cbdc1fbc51550e6f1a",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/AbstractReferenceFragment.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/AbstractReferenceFragment.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/AbstractReferenceFragment.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/AbstractReferenceFragment.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -14,13 +14,13 @@ public AbstractReferenceFragment(String id, String agency, int version) {\n \t@Override\n \tpublic void appendToElement(Element element, Document doc) {\n \t\tElement variable = doc.createElement(getNodeNameReference());\n-\t\telement.appendChild(variable);\n-\n \t\tsuper.appendToElement(variable, doc);\n \n \t\tElement objectType = doc.createElement(NODE_NAME_OBJECT_TYPE);\n \t\tobjectType.setTextContent(getObjectType());\n \t\tvariable.appendChild(objectType);\n+\n+\t\telement.appendChild(variable);\n \t}\n \n \tprotected abstract String getNodeNameReference();"
  },
  {
    "sha": "21c6dc8e7c479d9a545495cc8710fbfb37ee4124",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/LogicalProductGenerator.java",
    "status": "modified",
    "additions": 130,
    "deletions": 85,
    "changes": 215,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/LogicalProductGenerator.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/LogicalProductGenerator.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/LogicalProductGenerator.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -1,5 +1,6 @@\n package edu.cornell.ncrn.ced2ar.ddigen.ddi.fragment;\r\n \r\n+import edu.cornell.ncrn.ced2ar.ddigen.csv.Ced2arVariableStat;\r\n import edu.cornell.ncrn.ced2ar.ddigen.ddi.fragment.category.CategoryFragment;\r\n import edu.cornell.ncrn.ced2ar.ddigen.ddi.fragment.category.CategoryReferenceFragment;\r\n import edu.cornell.ncrn.ced2ar.ddigen.ddi.fragment.category.CategorySchemeFragment;\r\n@@ -41,6 +42,7 @@\n import edu.cornell.ncrn.ced2ar.ddigen.ddi.logical.Variable;\r\n import edu.cornell.ncrn.ced2ar.ddigen.ddi.logical.VariableScheme;\r\n import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n import java.util.HashMap;\r\n import java.util.List;\r\n import java.util.Map;\r\n@@ -52,19 +54,19 @@\n \tprivate String agency;\r\n \tprivate String ddiLanguage;\r\n \tprivate Map<String, String> excludeVariableToStatMap;\r\n-\tprivate Frequency frequency;\r\n+\tprivate Map<String, Frequency> variableToFrequencyMap;\r\n \tprivate LogicalProduct logicalProduct;\r\n \tprivate int recordCount;\r\n-\tprivate List<String> representationTypeCodeList;\r\n \tprivate String title;\r\n-\tprivate String variableStatistics;\r\n+\tprivate String statistics;\r\n+\tprivate List<Ced2arVariableStat> variableStatistics;\r\n \tprivate int version;\r\n \r\n \tpublic LogicalProductGenerator(\r\n \t\tLogicalProduct logicalProduct,\r\n-\t\tString variableStatistics,\r\n+\t\tList<Ced2arVariableStat> variableStatistics,\r\n+\t\tString statistics,\r\n \t\tMap<String, String> excludeVariableToStatMap,\r\n-\t\tList<String> representationTypeCodeList,\r\n \t\tString agency,\r\n \t\tString ddiLanguage,\r\n \t\tString title,\r\n@@ -74,9 +76,9 @@ public LogicalProductGenerator(\n \t\tsetDdiLanguage(ddiLanguage);\r\n \t\tsetLogicalProduct(logicalProduct);\r\n \t\tsetExcludeVariableToStatMap(excludeVariableToStatMap);\r\n+\t\tsetStatistics(statistics);\r\n \t\tsetTitle(title);\r\n \t\tsetRecordCount(recordCount);\r\n-\t\tsetRepresentationTypeCodeList(representationTypeCodeList);\r\n \t\tsetVariableStatistics(variableStatistics);\r\n \t\tsetVersion(1);\r\n \t}\r\n@@ -97,7 +99,6 @@ public String getAgency() {\n \t\t\tCategorySchemeFragment fragment = new CategorySchemeFragment(categorySchemeId.toString(), getAgency(), getVersion());\r\n \t\t\tfragmentList.add(fragment);\r\n \t\t\tfor (Category category : categoryScheme.getCategoryList()) {\r\n-\t\t\t\t//System.out.println(category.getId());\r\n \t\t\t\tString id = categoryIdToUuidMap.get(category.getId()).toString();\r\n \t\t\t\tCategoryReferenceFragment reference = new CategoryReferenceFragment(id, getAgency(), getVersion());\r\n \t\t\t\tfragment.addCategoryReference(reference);\r\n@@ -143,11 +144,11 @@ public String getAgency() {\n \t}\r\n \r\n \tprivate DataRelationshipFragment getDataRelationshipFragment(\r\n-\t\tString dataRelationshipId,\r\n+\t\tUUID dataRelationshipId,\r\n \t\tMap<String, UUID> variableIdToUuidMap\r\n \t) {\r\n \t\tDataRelationshipFragment dataRelationshipFragment = new DataRelationshipFragment(\r\n-\t\t\tdataRelationshipId,\r\n+\t\t\tdataRelationshipId.toString(),\r\n \t\t\tgetAgency(),\r\n \t\t\tgetVersion()\r\n \t\t);\r\n@@ -183,17 +184,20 @@ public String getDdiLanguage() {\n \t\treturn excludeVariableToStatMap;\r\n \t}\r\n \r\n-\tpublic Frequency getFrequency() {\r\n-\t\treturn frequency;\r\n+\tpublic Map<String, Frequency> getVariableToFrequencyMap() {\r\n+\t\treturn variableToFrequencyMap;\r\n \t}\r\n \r\n \tpublic LogicalProduct getLogicalProduct() {\r\n \t\treturn logicalProduct;\r\n \t}\r\n \r\n-\tprivate PhysicalInstanceFragment getPhysicalInstanceFragment(String dataRelationshipId) {\r\n+\tprivate PhysicalInstanceFragment getPhysicalInstanceFragment(\r\n+\t\tUUID physicalInstanceId,\r\n+\t\tUUID dataRelationshipId\r\n+\t) {\r\n \t\tPhysicalInstanceFragment physicalInstanceReference = new PhysicalInstanceFragment(\r\n-\t\t\tUUID.randomUUID().toString(),\r\n+\t\t\tphysicalInstanceId.toString(),\r\n \t\t\tgetAgency(),\r\n \t\t\tgetVersion()\r\n \t\t);\r\n@@ -204,7 +208,7 @@ private PhysicalInstanceFragment getPhysicalInstanceFragment(String dataRelation\n \t\tphysicalInstanceReference.setCitation(citation);\r\n \r\n \t\tDataRelationshipReferenceFragment dataRelationshipReference = new DataRelationshipReferenceFragment(\r\n-\t\t\tdataRelationshipId,\r\n+\t\t\tdataRelationshipId.toString(),\r\n \t\t\tgetAgency(),\r\n \t\t\tgetVersion()\r\n \t\t);\r\n@@ -227,7 +231,7 @@ private PhysicalInstanceFragment getPhysicalInstanceFragment(String dataRelation\n \tpublic Fragment getResourcePackageFragment(\r\n \t\tString title,\r\n \t\tMap<String, UUID> categorySchemeIdToUuidMap,\r\n-\t\tMap<String, UUID> physicalInstanceIdToUuidMap,\r\n+\t\tUUID physicalInstanceId,\r\n \t\tMap<String, UUID> variableSchemeIdToUuidMap\r\n \t) {\r\n \t\tResourcePackageFragment resourcePackage = new ResourcePackageFragment(\r\n@@ -241,36 +245,38 @@ public Fragment getResourcePackageFragment(\n \t\tCitation citation = new Citation(titleElement);\r\n \t\tresourcePackage.setCitation(citation);\r\n \r\n-\t\tfor (Map.Entry physicalInstanceEntry : physicalInstanceIdToUuidMap.entrySet()) {\r\n-\t\t\tPhysicalInstanceReferenceFragment fragment = new PhysicalInstanceReferenceFragment(\r\n-\t\t\t\tphysicalInstanceEntry.getValue().toString(),\r\n-\t\t\t\tgetAgency(),\r\n-\t\t\t\tgetVersion()\r\n-\t\t\t);\r\n-\t\t\tresourcePackage.addPhysicalInstanceReference(fragment);\r\n-\t\t}\r\n+\t\tPhysicalInstanceReferenceFragment fragment = new PhysicalInstanceReferenceFragment(\r\n+\t\t\tphysicalInstanceId.toString(),\r\n+\t\t\tgetAgency(),\r\n+\t\t\tgetVersion()\r\n+\t\t);\r\n+\t\tresourcePackage.addPhysicalInstanceReference(fragment);\r\n \r\n \t\tfor (Map.Entry categorySchemeEntry : categorySchemeIdToUuidMap.entrySet()) {\r\n-\t\t\tCategorySchemeReferenceFragment fragment = new CategorySchemeReferenceFragment(\r\n+\t\t\tCategorySchemeReferenceFragment categorySchemeReference = new CategorySchemeReferenceFragment(\r\n \t\t\t\tcategorySchemeEntry.getValue().toString(),\r\n \t\t\t\tgetAgency(),\r\n \t\t\t\tgetVersion()\r\n \t\t\t);\r\n-\t\t\tresourcePackage.addCategorySchemeReference(fragment);\r\n+\t\t\tresourcePackage.addCategorySchemeReference(categorySchemeReference);\r\n \t\t}\r\n \r\n \t\tfor (Map.Entry variableSchemeEntry : variableSchemeIdToUuidMap.entrySet()) {\r\n-\t\t\tVariableSchemeReferenceFragment fragment = new VariableSchemeReferenceFragment(\r\n+\t\t\tVariableSchemeReferenceFragment variableSchemeReference = new VariableSchemeReferenceFragment(\r\n \t\t\t\tvariableSchemeEntry.getValue().toString(),\r\n \t\t\t\tgetAgency(),\r\n \t\t\t\tgetVersion()\r\n \t\t\t);\r\n-\t\t\tresourcePackage.addVariableSchemeReference(fragment);\r\n+\t\t\tresourcePackage.addVariableSchemeReference(variableSchemeReference);\r\n \t\t}\r\n \r\n \t\treturn resourcePackage;\r\n \t}\r\n \r\n+\tpublic String getStatistics() {\r\n+\t\treturn statistics;\r\n+\t}\r\n+\r\n \tpublic String getTitle() {\r\n \t\treturn title;\r\n \t}\r\n@@ -331,11 +337,7 @@ public int getRecordCount() {\n \t\treturn recordCount;\r\n \t}\r\n \r\n-\tpublic List<String> getRepresentationTypeCodeList() {\r\n-\t\treturn representationTypeCodeList;\r\n-\t}\r\n-\r\n-\tpublic String getVariableStatistics() {\r\n+\tpublic List<Ced2arVariableStat> getVariableStatistics() {\r\n \t\treturn variableStatistics;\r\n \t}\r\n \r\n@@ -352,88 +354,129 @@ public String getVariableStatistics() {\n \r\n \t\t\t\tif (getExcludeVariableToStatMap().containsKey(variable.getName())) {\r\n \t\t\t\t\tUserAttributePairFragment userAttributePair = new UserAttributePairFragment();\r\n-\t\t\t\t\tuserAttributePair.addAttribute(\"extension:redaction-information\", getExcludeVariableToStatMap().get(variable.getName()));\r\n+\t\t\t\t\tString excludeVariableMessage = getExcludeVariableToStatMap().get(variable.getName());\r\n+\t\t\t\t\tuserAttributePair.addAttribute(\"extension:redaction-information\", excludeVariableMessage);\r\n \t\t\t\t\tvariableStatistics.setUserAttributePair(userAttributePair);\r\n \t\t\t\t}\r\n \r\n \t\t\t\tvariableStatistics.setVariableReference(variableReferenceFragment);\r\n \r\n \r\n-\t\t\t\tfor (String variableStatistic : getVariableStatistics().split(\"\\n\")) {\r\n-\t\t\t\t\tif (variableStatistic.startsWith(variable.getName())) {\r\n-\t\t\t\t\t\t// valid,invalid,min,max,mean,stdev\r\n-\t\t\t\t\t\t//System.out.println(variableStatistic);\r\n-\r\n-\t\t\t\t\t\tString[] variableStatisticArray = variableStatistic.split(\",\");\r\n+\t\t\t\tList<String> statisticList = new ArrayList<>();\r\n+\t\t\t\tif (getStatistics() != null && !getStatistics().trim().isEmpty()) {\r\n+\t\t\t\t\tString[] statisticArray = getStatistics().split(\",\");\r\n+\t\t\t\t\tstatisticList.addAll(Arrays.asList(statisticArray));\r\n+\t\t\t\t}\r\n \r\n+\t\t\t\tfor (Ced2arVariableStat variableStat : getVariableStatistics()) {\r\n+\t\t\t\t\tif (variableStat.getName() != null && variable.getName() != null && variableStat.getName().equalsIgnoreCase(variable.getName())) {\r\n \t\t\t\t\t\tString excludeVariableStat = getExcludeVariableToStatMap().get(variable.getName());\r\n \r\n-\t\t\t\t\t\tboolean excludeValid = excludeVariableStat != null && excludeVariableStat.contains(\"valid\");\r\n-\t\t\t\t\t\tboolean excludeInvalid = excludeVariableStat != null && excludeVariableStat.contains(\"invalid\");\r\n-\t\t\t\t\t\tboolean excludeMin = excludeVariableStat != null && excludeVariableStat.contains(\"min\");\r\n-\t\t\t\t\t\tboolean excludeMax = excludeVariableStat != null && excludeVariableStat.contains(\"max\");\r\n-\t\t\t\t\t\tboolean excludeMean = excludeVariableStat != null && excludeVariableStat.contains(\"mean\");\r\n-\t\t\t\t\t\tboolean excludeStdDev = excludeVariableStat != null && excludeVariableStat.contains(\"stdev\");\r\n+\t\t\t\t\t\tboolean excludeValid = !statisticList.isEmpty() && !statisticList.contains(\"valid\");\r\n+\t\t\t\t\t\tboolean excludeInvalid = !statisticList.isEmpty() && !statisticList.contains(\"invalid\");\r\n+\t\t\t\t\t\tboolean excludeMin = !statisticList.isEmpty() && !statisticList.contains(\"min\");\r\n+\t\t\t\t\t\tboolean excludeMax = !statisticList.isEmpty() && !statisticList.contains(\"max\");\r\n+\t\t\t\t\t\tboolean excludeMean = !statisticList.isEmpty() && !statisticList.contains(\"mean\");\r\n+\t\t\t\t\t\tboolean excludeStdDev = !statisticList.isEmpty() && !statisticList.contains(\"stdev\");\r\n+\t\t\t\t\t\tboolean excludeFrequency = !statisticList.isEmpty() && !statisticList.contains(\"freq\");\r\n+\r\n+\t\t\t\t\t\tif (excludeVariableStat != null) {\r\n+\t\t\t\t\t\t\tString[] excludeVariableStatArray = excludeVariableStat.split(\":\");\r\n+\r\n+\t\t\t\t\t\t\tif (excludeVariableStatArray.length > 0 && !excludeVariableStatArray[0].isEmpty()) {\r\n+\t\t\t\t\t\t\t\tList<String> excludeVariableStatList = Arrays.asList(excludeVariableStatArray[0].split(\",\"));\r\n+\t\t\t\t\t\t\t\tif (!excludeValid) {\r\n+\t\t\t\t\t\t\t\t\texcludeValid = excludeVariableStatList.contains(\"valid\");\r\n+\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\tif (!excludeInvalid) {\r\n+\t\t\t\t\t\t\t\t\texcludeInvalid = excludeVariableStatList.contains(\"invalid\");\r\n+\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\tif (!excludeMin) {\r\n+\t\t\t\t\t\t\t\t\texcludeMin = excludeVariableStatList.contains(\"min\");\r\n+\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\tif (!excludeMax) {\r\n+\t\t\t\t\t\t\t\t\texcludeMax = excludeVariableStatList.contains(\"max\");\r\n+\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\tif (!excludeMean) {\r\n+\t\t\t\t\t\t\t\t\texcludeMean = excludeVariableStatList.contains(\"mean\");\r\n+\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\tif (!excludeStdDev) {\r\n+\t\t\t\t\t\t\t\t\texcludeStdDev = excludeVariableStatList.contains(\"stdev\");\r\n+\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\tif (!excludeFrequency) {\r\n+\t\t\t\t\t\t\t\t\texcludeFrequency = excludeVariableStatList.contains(\"freq\");\r\n+\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t}\r\n \r\n-\t\t\t\t\t\tif (!excludeValid && variableStatisticArray.length > 2) {\r\n-\t\t\t\t\t\t\tString statistic = variableStatisticArray[2];\r\n-\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(statistic, StatisticType.VALID_CASES);\r\n+\t\t\t\t\t\tLong validCount = variableStat.getValidCount();\r\n+\t\t\t\t\t\tif (!excludeValid && validCount != null) {\r\n+\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(Long.toString(validCount), StatisticType.VALID_CASES);\r\n \t\t\t\t\t\t\tvariableStatistics.addSummaryStatistic(summaryStatistic);\r\n \t\t\t\t\t\t}\r\n \r\n-\t\t\t\t\t\tif (!excludeInvalid && variableStatisticArray.length > 3) {\r\n-\t\t\t\t\t\t\tString statistic = variableStatisticArray[3];\r\n-\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(statistic, StatisticType.INVALID_CASES);\r\n+\t\t\t\t\t\tLong invalidCount = variableStat.getInvalidCount();\r\n+\t\t\t\t\t\tif (!excludeInvalid && invalidCount != null) {\r\n+\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(Long.toString(invalidCount), StatisticType.INVALID_CASES);\r\n \t\t\t\t\t\t\tvariableStatistics.addSummaryStatistic(summaryStatistic);\r\n \t\t\t\t\t\t}\r\n \r\n-\t\t\t\t\t\tif (!excludeMin && variableStatisticArray.length > 4) {\r\n-\t\t\t\t\t\t\tString statistic = variableStatisticArray[4];\r\n-\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(statistic, StatisticType.MINIMUM);\r\n+\t\t\t\t\t\tString min = variableStat.getMinFormatted();\r\n+\t\t\t\t\t\tif (!excludeMin && min != null) {\r\n+\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(min, StatisticType.MINIMUM);\r\n \t\t\t\t\t\t\tvariableStatistics.addSummaryStatistic(summaryStatistic);\r\n \t\t\t\t\t\t}\r\n \r\n-\t\t\t\t\t\tif (!excludeMax && variableStatisticArray.length > 5) {\r\n-\t\t\t\t\t\t\tString statistic = variableStatisticArray[5];\r\n-\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(statistic, StatisticType.MAXIMUM);\r\n+\t\t\t\t\t\tString max = variableStat.getMaxFormatted();\r\n+\t\t\t\t\t\tif (!excludeMax && max != null) {\r\n+\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(max, StatisticType.MAXIMUM);\r\n \t\t\t\t\t\t\tvariableStatistics.addSummaryStatistic(summaryStatistic);\r\n \t\t\t\t\t\t}\r\n \r\n-\t\t\t\t\t\tif (!excludeMean && variableStatisticArray.length > 6) {\r\n-\t\t\t\t\t\t\tString statistic = variableStatisticArray[6];\r\n-\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(statistic, StatisticType.MEAN);\r\n+\t\t\t\t\t\tString mean = variableStat.getMeanFormatted();\r\n+\t\t\t\t\t\tif (!excludeMean && mean != null) {\r\n+\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(mean, StatisticType.MEAN);\r\n \t\t\t\t\t\t\tvariableStatistics.addSummaryStatistic(summaryStatistic);\r\n \t\t\t\t\t\t}\r\n \r\n-\t\t\t\t\t\tif (!excludeStdDev && variableStatisticArray.length > 7) {\r\n-\t\t\t\t\t\t\tString statistic = variableStatisticArray[7];\r\n-\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(statistic, StatisticType.STANDARD_DEVIATION);\r\n+\t\t\t\t\t\tString stdDeviation = variableStat.getStdDeviationFormatted();\r\n+\t\t\t\t\t\tif (!excludeStdDev && stdDeviation != null) {\r\n+\t\t\t\t\t\t\tSummaryStatistic summaryStatistic = new SummaryStatistic(stdDeviation, StatisticType.STANDARD_DEVIATION);\r\n \t\t\t\t\t\t\tvariableStatistics.addSummaryStatistic(summaryStatistic);\r\n \t\t\t\t\t\t}\r\n+\t\t\t\t\t\tif (!excludeFrequency && getVariableToFrequencyMap() != null) {\r\n \r\n-\t\t\t\t\t\tif (excludeVariableStat == null || !excludeVariableStat.contains(\"freq\")) {\r\n-\t\t\t\t\t\t\tboolean isRepresentationTypeCodeList = getRepresentationTypeCodeList().contains(variable.getName());\r\n-\t\t\t\t\t\t\tif (isRepresentationTypeCodeList) {\r\n+\t\t\t\t\t\t\tif (variable.getRepresentation() instanceof CodeRepresentation) {\r\n+\t\t\t\t\t\t\t\tFrequency variableFrequency = getVariableToFrequencyMap().get(variable.getName());\r\n+\t\t\t\t\t\t\t\tCodeRepresentation representation = (CodeRepresentation) variable.getRepresentation();\r\n \t\t\t\t\t\t\t\tfor (CodeList codeList : getLogicalProduct().getCodeListList()) {\r\n-\t\t\t\t\t\t\t\t\tfor (Code code : codeList.getCodeList()) {\r\n-\t\t\t\t\t\t\t\t\t\tlong frequency = getFrequency().getCount(Integer.parseInt(code.getValue()));\r\n-\t\t\t\t\t\t\t\t\t\tVariableCategoryFragment variableCategory = new VariableCategoryFragment(code.getValue(), Long.toString(frequency));\r\n-\t\t\t\t\t\t\t\t\t\tvariableStatistics.addVariableCategory(variableCategory);\r\n+\t\t\t\t\t\t\t\t\tif (representation.getCodeSchemeId().equalsIgnoreCase(codeList.getId())) {\r\n+\t\t\t\t\t\t\t\t\t\tlong invalidValueFrequency = variableFrequency.getCount(\".\");\r\n+\t\t\t\t\t\t\t\t\t\tif (invalidValueFrequency > 0) {\r\n+\t\t\t\t\t\t\t\t\t\t\tVariableCategoryFragment variableCategory = new VariableCategoryFragment(\r\n+\t\t\t\t\t\t\t\t\t\t\t\t\".\",\r\n+\t\t\t\t\t\t\t\t\t\t\t\tLong.toString(invalidValueFrequency)\r\n+\t\t\t\t\t\t\t\t\t\t\t);\r\n+\t\t\t\t\t\t\t\t\t\t\tvariableStatistics.addVariableCategory(variableCategory);\r\n+\t\t\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\t\t\tfor (Code code : codeList.getCodeList()) {\r\n+\t\t\t\t\t\t\t\t\t\t\tlong frequency = variableFrequency.getCount(code.getValue());\r\n+\t\t\t\t\t\t\t\t\t\t\tif (frequency > 0) {\r\n+\t\t\t\t\t\t\t\t\t\t\t\tVariableCategoryFragment variableCategory = new VariableCategoryFragment(\r\n+\t\t\t\t\t\t\t\t\t\t\t\t\tcode.getValue(),\r\n+\t\t\t\t\t\t\t\t\t\t\t\t\tLong.toString(frequency)\r\n+\t\t\t\t\t\t\t\t\t\t\t\t);\r\n+\t\t\t\t\t\t\t\t\t\t\t\tvariableStatistics.addVariableCategory(variableCategory);\r\n+\t\t\t\t\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t}\r\n-\r\n \t\t\t\t\t\tbreak;\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \r\n-\t\t\t\t/*for (Ced2arVariableStat variableStat : getVariableStatList()) {\r\n-\t\t\t\t\tif (variableStat.getName() != null && variable.getName() != null && variableStat.getName().equalsIgnoreCase(variable.getName())) {\r\n-\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}*/\r\n-\r\n \t\t\t\tfragmentList.add(variableStatistics);\r\n \t\t\t}\r\n \t\t}\r\n@@ -451,7 +494,6 @@ public int getVersion() {\n \t\tMap<String, UUID> categoryIdToUuidMap = new HashMap<>();\r\n \t\tfor (CategoryScheme categoryScheme : getLogicalProduct().getCategorySchemeList()) {\r\n \t\t\tfor (Category category : categoryScheme.getCategoryList()) {\r\n-\t\t\t\t//System.out.println(\" cat scheme \" + categoryScheme.getId() + \" cat \" + category.getId());\r\n \t\t\t\tif (category.getId() != null) {\r\n \t\t\t\t\tcategoryIdToUuidMap.put(category.getId(), UUID.randomUUID());\r\n \t\t\t\t}\r\n@@ -482,6 +524,8 @@ public int getVersion() {\n \t\t\tvariableSchemeIdToUuidMap.put(variableScheme.getId(), UUID.randomUUID());\r\n \t\t}\r\n \r\n+\t\tUUID physicalInstanceId = UUID.randomUUID();\r\n+\r\n \t\tFragment topLevelReferenceFragment = new TopLevelReferenceFragment(\r\n \t\t\tUUID.randomUUID().toString(),\r\n \t\t\tgetAgency(),\r\n@@ -492,7 +536,7 @@ public int getVersion() {\n \t\tFragment resourcePackageFragment = getResourcePackageFragment(\r\n \t\t\tgetTitle(),\r\n \t\t\tcategorySchemeIdToUuidMap,\r\n-\t\t\tcodeListIdToUuidMap,\r\n+\t\t\tphysicalInstanceId,\r\n \t\t\tvariableSchemeIdToUuidMap\r\n \t\t);\r\n \r\n@@ -510,9 +554,10 @@ public int getVersion() {\n \t\t\tgetVariableFragmentList(variableSchemeIdToUuidMap, variableIdToUuidMap);\r\n \t\tfragmentList.addAll(variableFragmentList);\r\n \r\n-\t\tString dataRelationshipId = UUID.randomUUID().toString();\r\n+\t\tUUID dataRelationshipId = UUID.randomUUID();\r\n \r\n \t\tPhysicalInstanceFragment physicalInstanceReference = getPhysicalInstanceFragment(\r\n+\t\t\tphysicalInstanceId,\r\n \t\t\tdataRelationshipId\r\n \t\t);\r\n \t\tfragmentList.add(physicalInstanceReference);\r\n@@ -537,8 +582,8 @@ public void setDdiLanguage(String ddiLanguage) {\n \t\tthis.ddiLanguage = ddiLanguage;\r\n \t}\r\n \r\n-\tpublic void setFrequency(Frequency frequency) {\r\n-\t\tthis.frequency = frequency;\r\n+\tpublic void setVariableToFrequencyMap(Map<String, Frequency> map) {\r\n+\t\tthis.variableToFrequencyMap = map;\r\n \t}\r\n \r\n \tpublic void setExcludeVariableToStatMap(Map<String, String> excludeVariableToStatMap) {\r\n@@ -553,15 +598,15 @@ public void setRecordCount(int recordCount) {\n \t\tthis.recordCount = recordCount;\r\n \t}\r\n \r\n-\tpublic void setRepresentationTypeCodeList(List<String> representationTypeCodeList) {\r\n-\t\tthis.representationTypeCodeList = representationTypeCodeList;\r\n+\tpublic void setStatistics(String statistics) {\r\n+\t\tthis.statistics = statistics;\r\n \t}\r\n \r\n \tpublic void setTitle(String title) {\r\n \t\tthis.title = title;\r\n \t}\r\n \r\n-\tpublic void setVariableStatistics(String variableStatistics) {\r\n+\tpublic void setVariableStatistics(List<Ced2arVariableStat> variableStatistics) {\r\n \t\tthis.variableStatistics = variableStatistics;\r\n \t}\r\n \r"
  },
  {
    "sha": "1fa785db873a49f8fe85718d54d99f112cf0ee0f",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/variable/StatisticType.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/variable/StatisticType.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/variable/StatisticType.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/fragment/variable/StatisticType.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -7,6 +7,6 @@\n \tMINIMUM,\n \tMAXIMUM,\n \tMEAN,\n-\tSTANDARD_DEVIATION,\n-\tFREQUENCY\n+\tSTANDARD_DEVIATION\n+\n }\n\\ No newline at end of file"
  },
  {
    "sha": "3d10d98dda2fc225fdf1205e7143e42fcf309a4f",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/logical/CodeRepresentation.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/logical/CodeRepresentation.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/logical/CodeRepresentation.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/logical/CodeRepresentation.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -1,4 +1,17 @@\n package edu.cornell.ncrn.ced2ar.ddigen.ddi.logical;\n \n public class CodeRepresentation extends Representation {\n+\tprivate String codeSchemeId;\n+\n+\tpublic CodeRepresentation(String codeSchemeId) {\n+\t\tsetCodeSchemeId(codeSchemeId);\n+\t}\n+\n+\tpublic String getCodeSchemeId() {\n+\t\treturn codeSchemeId;\n+\t}\n+\n+\tpublic void setCodeSchemeId(String codeSchemeId) {\n+\t\tthis.codeSchemeId = codeSchemeId;\n+\t}\n }\n\\ No newline at end of file"
  },
  {
    "sha": "b0a9c601aaf12eb1fca9ad6083743088e303af3d",
    "filename": "src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/logical/LogicalProductFactory.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/logical/LogicalProductFactory.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/logical/LogicalProductFactory.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/main/java/edu/cornell/ncrn/ced2ar/ddigen/ddi/logical/LogicalProductFactory.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -65,6 +65,9 @@\n \r\n \t\t\tNode categorySchemeNode = codeSchemeList.item(i);\r\n \t\t\tif (nodeNameEquals(categorySchemeNode, \"CodeScheme\")) {\r\n+\t\t\t\tString codeSchemeId = categorySchemeNode.getAttributes().getNamedItem(\"id\").getTextContent();\r\n+\t\t\t\tcodeList.setId(codeSchemeId);\r\n+\r\n \t\t\t\tNodeList variableNodeList = categorySchemeNode.getChildNodes();\r\n \t\t\t\tfor (int j = 0; j < variableNodeList.getLength(); j++) {\r\n \t\t\t\t\tNode codeNode = variableNodeList.item(j);\r\n@@ -162,7 +165,8 @@ public static LogicalProduct createLogicalProduct(Document document) {\n \t\t\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t\t\t\trepresentation = dateTimeRepresentation;\r\n \t\t\t\t\t\t\t\t} else if (nodeNameEquals(representationNode, \"CodeRepresentation\")) {\r\n-\t\t\t\t\t\t\t\t\trepresentation = new CodeRepresentation();\r\n+\t\t\t\t\t\t\t\t\tString codeSchemeId = representationNode.getFirstChild().getTextContent();\r\n+\t\t\t\t\t\t\t\t\trepresentation = new CodeRepresentation(codeSchemeId);\r\n \t\t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t\t\tvariable.setRepresentation(representation);\r\n \t\t\t\t\t\t\t}\r"
  },
  {
    "sha": "78869a1c46e4b0c94a692ef186161fb3f1eb73c0",
    "filename": "src/test/java/edu/cornell/ncrn/ced2ar/ddigen/fragment/AbstractFragmentInstanceGeneratorTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 10,
    "changes": 32,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/test/java/edu/cornell/ncrn/ced2ar/ddigen/fragment/AbstractFragmentInstanceGeneratorTest.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/test/java/edu/cornell/ncrn/ced2ar/ddigen/fragment/AbstractFragmentInstanceGeneratorTest.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/test/java/edu/cornell/ncrn/ced2ar/ddigen/fragment/AbstractFragmentInstanceGeneratorTest.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -27,6 +27,25 @@\n public class AbstractFragmentInstanceGeneratorTest {\n \n \tprotected static Document fragmentInstanceDocument;\n+\tprotected static List<Ced2arVariableStat> variableStatList = new ArrayList<>();\n+\n+\tstatic {\n+\t\tCed2arVariableStat variableStat1 = new Ced2arVariableStat();\n+\t\tvariableStat1.setName(\"TestInteger\");\n+\t\tvariableStat1.setValidCount(3L);\n+\t\tvariableStat1.setInvalidCount(3L);\n+\t\tvariableStat1.getStats().addValue(1L);\n+\t\tvariableStat1.getStats().addValue(3L);\n+\t\tvariableStatList.add(variableStat1);\n+\n+\t\tCed2arVariableStat variableStat2 = new Ced2arVariableStat();\n+\t\tvariableStat2.setName(\"TestString\");\n+\t\tvariableStat2.setValidCount(3L);\n+\t\tvariableStat1.setInvalidCount(3L);\n+\t\tvariableStat2.getStats().addValue(1L);\n+\t\tvariableStat2.getStats().addValue(3L);\n+\t\tvariableStatList.add(variableStat2);\n+\t}\n \n \tprotected void testFragment(Node fragment) {\n \t\tAssert.assertEquals(\"r:URN\", fragment.getFirstChild().getNodeName());\n@@ -54,25 +73,18 @@ public static void setUp() throws URISyntaxException, IOException, SPSSFileExcep\n \t\tFile file = FileUtil.getFileFromResource(AbstractFragmentInstanceGeneratorTest.class, \"test-file-data-types.sav\");\n \t\tDocument document = spssGen.getLogicalProduct(file);\n \n-\t\tProperties properties = FileUtil.getPropertiesFromResource(\n-\t\t\tAbstractFragmentInstanceGeneratorTest.class);\n+\t\tProperties properties = FileUtil.getPropertiesFromResource(AbstractFragmentInstanceGeneratorTest.class);\n \t\tConfigUtil configUtil = new ConfigUtil(properties);\n \n-\t\t// valid,invalid,min,max,mean,stdev\n-\n-\t\tStringBuilder builder = new StringBuilder();\n-\t\tbuilder.append(\"TestInteger,TestInteger,3,3,1.0,3.0,2.0,1.4142135623730951\\n\");\n-\t\tbuilder.append(\"TestString,TestInteger,3,3,1.0,3.0,2.0,1.4142135623730951\\n\");\n-\n \t\tMap<String, String> excludeVariableToStatMap = new HashMap<>();\n \t\texcludeVariableToStatMap.put(\"TestString\", \"invalid,valid,max,min,mean\");\n \n \t\tLogicalProduct logicalProduct = LogicalProductFactory.createLogicalProduct(document);\n \t\tLogicalProductGenerator logicalProductGenerator = new LogicalProductGenerator(\n \t\t\tlogicalProduct,\n-\t\t\tbuilder.toString(),\n+\t\t\tvariableStatList,\n+\t\t\tconfigUtil.getStats(),\n \t\t\texcludeVariableToStatMap,\n-\t\t\tnew ArrayList<>(),\n \t\t\tconfigUtil.getAgency(),\n \t\t\tconfigUtil.getDdiLanguage(),\n \t\t\t\"test-file-data-types.sav\","
  },
  {
    "sha": "1f94c91069f855ceff2ab27420093a0bd1e78ab2",
    "filename": "src/test/java/edu/cornell/ncrn/ced2ar/ddigen/fragment/VariableStatisticsTest.java",
    "status": "modified",
    "additions": 180,
    "deletions": 3,
    "changes": 183,
    "blob_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/blob/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/test/java/edu/cornell/ncrn/ced2ar/ddigen/fragment/VariableStatisticsTest.java",
    "raw_url": "https://github.com/CLOSER-Cohorts/ced2arddigenerator/raw/201bcba8ac80dd51eb1729ff1d63de1b6db6d55b/src/test/java/edu/cornell/ncrn/ced2ar/ddigen/fragment/VariableStatisticsTest.java",
    "contents_url": "https://api.github.com/repos/CLOSER-Cohorts/ced2arddigenerator/contents/src/test/java/edu/cornell/ncrn/ced2ar/ddigen/fragment/VariableStatisticsTest.java?ref=201bcba8ac80dd51eb1729ff1d63de1b6db6d55b",
    "patch": "@@ -1,5 +1,22 @@\n package edu.cornell.ncrn.ced2ar.ddigen.fragment;\n \n+import edu.cornell.ncrn.ced2ar.data.spss.SPSSFileException;\n+import edu.cornell.ncrn.ced2ar.ddigen.ConfigUtil;\n+import edu.cornell.ncrn.ced2ar.ddigen.FileUtil;\n+import edu.cornell.ncrn.ced2ar.ddigen.csv.SpssCsvGenerator;\n+import edu.cornell.ncrn.ced2ar.ddigen.ddi.fragment.Fragment;\n+import edu.cornell.ncrn.ced2ar.ddigen.ddi.fragment.FragmentInstanceGenerator;\n+import edu.cornell.ncrn.ced2ar.ddigen.ddi.fragment.LogicalProductGenerator;\n+import edu.cornell.ncrn.ced2ar.ddigen.ddi.logical.LogicalProduct;\n+import edu.cornell.ncrn.ced2ar.ddigen.ddi.logical.LogicalProductFactory;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.xml.parsers.ParserConfigurationException;\n import org.junit.Assert;\n import org.junit.Test;\n import org.w3c.dom.Document;\n@@ -11,6 +28,60 @@ private Node getVariableStatistics(Document document, int index) {\n \t\treturn document.getFirstChild().getChildNodes().item(index).getFirstChild();\n \t}\n \n+\t@Test\n+\tpublic void testToDocument_AllStatisticsExcluded() throws ParserConfigurationException, URISyntaxException, IOException, SPSSFileException {\n+\t\tSpssCsvGenerator spssGen = new SpssCsvGenerator();\n+\t\tFile file = FileUtil.getFileFromResource(AbstractFragmentInstanceGeneratorTest.class, \"test-file-data-types.sav\");\n+\t\tDocument document = spssGen.getLogicalProduct(file);\n+\n+\t\tProperties properties = FileUtil.getPropertiesFromResource(AbstractFragmentInstanceGeneratorTest.class);\n+\t\tConfigUtil configUtil = new ConfigUtil(properties);\n+\n+\t\tMap<String, String> excludeVariableToStatMap = new HashMap<>();\n+\t\texcludeVariableToStatMap.put(\"TestInteger\", \"mean:excluding mean\");\n+\n+\t\tLogicalProduct logicalProduct = LogicalProductFactory.createLogicalProduct(document);\n+\t\tLogicalProductGenerator logicalProductGenerator = new LogicalProductGenerator(\n+\t\t\tlogicalProduct,\n+\t\t\tvariableStatList,\n+\t\t\t\"mean\",\n+\t\t\texcludeVariableToStatMap,\n+\t\t\tconfigUtil.getAgency(),\n+\t\t\tconfigUtil.getDdiLanguage(),\n+\t\t\t\"test-file-data-types.sav\",\n+\t\t\t3\n+\t\t);\n+\n+\t\tList<Fragment> fragmentList = logicalProductGenerator.toFragmentList();\n+\t\tFragmentInstanceGenerator transformer = new FragmentInstanceGenerator(fragmentList);\n+\t\tDocument fragmentInstanceDocument = transformer.toDocument();\n+\n+\t\tNode variableStatistics = getVariableStatistics(fragmentInstanceDocument, 39);\n+\n+\t\tAssert.assertEquals(\"VariableStatistics\", variableStatistics.getNodeName());\n+\t\ttestFragment(variableStatistics);\n+\n+\t\t// User Attribute Pair\n+\t\tNode userAttributePair = variableStatistics.getChildNodes().item(4);\n+\t\tAssert.assertEquals(\"r:UserAttributePair\", userAttributePair.getNodeName());\n+\t\tAssert.assertEquals(\"r:AttributeKey\", userAttributePair.getFirstChild().getNodeName());\n+\t\tAssert.assertEquals(\"extension:redaction-information\", userAttributePair.getFirstChild().getTextContent());\n+\t\tAssert.assertEquals(\"r:AttributeValue\", userAttributePair.getChildNodes().item(1).getNodeName());\n+\t\tAssert.assertEquals(\"mean:excluding mean\", userAttributePair.getChildNodes().item(1).getTextContent());\n+\n+\t\t// Variable Reference\n+\t\tNode variableReference = variableStatistics.getChildNodes().item(5);\n+\t\tAssert.assertEquals(\"r:VariableReference\", variableReference.getNodeName());\n+\t\ttestFragmentReference(variableReference);\n+\n+\t\tAssert.assertEquals(\"TotalResponses\", variableStatistics.getChildNodes().item(6).getNodeName());\n+\t\tAssert.assertEquals(\"3\", variableStatistics.getChildNodes().item(6).getTextContent());\n+\n+\t\t// Mean\n+\t\tNode statistic = variableStatistics.getChildNodes().item(7);\n+\t\tAssert.assertNull(statistic);\n+\t}\n+\n \t@Test\n \tpublic void testToDocument_ExcludeVariableStatistics() {\n \t\tNode variableStatistics = getVariableStatistics(fragmentInstanceDocument, 38);\n@@ -43,6 +114,112 @@ public void testToDocument_ExcludeVariableStatistics() {\n \t\tAssert.assertEquals(\"1.4142135623730951\", standardDeviation.getChildNodes().item(1).getTextContent());\n \t}\n \n+\t@Test\n+\tpublic void testToDocument_IncludeVariableStatistics()\n+\t\tthrows ParserConfigurationException, URISyntaxException, IOException, SPSSFileException {\n+\t\tSpssCsvGenerator spssGen = new SpssCsvGenerator();\n+\t\tFile file = FileUtil.getFileFromResource(AbstractFragmentInstanceGeneratorTest.class, \"test-file-data-types.sav\");\n+\t\tDocument document = spssGen.getLogicalProduct(file);\n+\n+\t\tProperties properties = FileUtil.getPropertiesFromResource(AbstractFragmentInstanceGeneratorTest.class);\n+\t\tConfigUtil configUtil = new ConfigUtil(properties);\n+\n+\t\tLogicalProduct logicalProduct = LogicalProductFactory.createLogicalProduct(document);\n+\t\tLogicalProductGenerator logicalProductGenerator = new LogicalProductGenerator(\n+\t\t\tlogicalProduct,\n+\t\t\tvariableStatList,\n+\t\t\t\"mean\",\n+\t\t\tnew HashMap<>(),\n+\t\t\tconfigUtil.getAgency(),\n+\t\t\tconfigUtil.getDdiLanguage(),\n+\t\t\t\"test-file-data-types.sav\",\n+\t\t\t3\n+\t\t);\n+\n+\t\tList<Fragment> fragmentList = logicalProductGenerator.toFragmentList();\n+\t\tFragmentInstanceGenerator transformer = new FragmentInstanceGenerator(fragmentList);\n+\t\tDocument fragmentInstanceDocument = transformer.toDocument();\n+\n+\t\tNode variableStatistics = getVariableStatistics(fragmentInstanceDocument, 38);\n+\n+\t\tAssert.assertEquals(\"VariableStatistics\", variableStatistics.getNodeName());\n+\t\ttestFragment(variableStatistics);\n+\n+\t\t// Variable Reference\n+\t\tNode variableReference = variableStatistics.getChildNodes().item(4);\n+\t\tAssert.assertEquals(\"r:VariableReference\", variableReference.getNodeName());\n+\t\ttestFragmentReference(variableReference);\n+\n+\t\tAssert.assertEquals(\"TotalResponses\", variableStatistics.getChildNodes().item(5).getNodeName());\n+\t\tAssert.assertEquals(\"3\", variableStatistics.getChildNodes().item(5).getTextContent());\n+\n+\t\t// Mean\n+\t\tNode standardDeviation = variableStatistics.getChildNodes().item(6);\n+\t\tAssert.assertEquals(\"SummaryStatistic\", standardDeviation.getNodeName());\n+\t\tAssert.assertEquals(\"TypeOfSummaryStatistic\", standardDeviation.getFirstChild().getNodeName());\n+\t\tAssert.assertEquals(\"Mean\", standardDeviation.getFirstChild().getTextContent());\n+\t\tAssert.assertEquals(\"Statistic\", standardDeviation.getChildNodes().item(1).getNodeName());\n+\t\tAssert.assertEquals(\"2\", standardDeviation.getChildNodes().item(1).getTextContent());\n+\t}\n+\n+\t@Test\n+\tpublic void testToDocument_UserMessage() throws ParserConfigurationException, URISyntaxException, IOException, SPSSFileException {\n+\t\tSpssCsvGenerator spssGen = new SpssCsvGenerator();\n+\t\tFile file = FileUtil.getFileFromResource(AbstractFragmentInstanceGeneratorTest.class, \"test-file-data-types.sav\");\n+\t\tDocument document = spssGen.getLogicalProduct(file);\n+\n+\t\tProperties properties = FileUtil.getPropertiesFromResource(AbstractFragmentInstanceGeneratorTest.class);\n+\t\tConfigUtil configUtil = new ConfigUtil(properties);\n+\n+\t\tMap<String, String> excludeVariableToStatMap = new HashMap<>();\n+\t\texcludeVariableToStatMap.put(\"TestInteger\", \":custom user message\");\n+\n+\t\tLogicalProduct logicalProduct = LogicalProductFactory.createLogicalProduct(document);\n+\t\tLogicalProductGenerator logicalProductGenerator = new LogicalProductGenerator(\n+\t\t\tlogicalProduct,\n+\t\t\tvariableStatList,\n+\t\t\t\"mean\",\n+\t\t\texcludeVariableToStatMap,\n+\t\t\tconfigUtil.getAgency(),\n+\t\t\tconfigUtil.getDdiLanguage(),\n+\t\t\t\"test-file-data-types.sav\",\n+\t\t\t3\n+\t\t);\n+\n+\t\tList<Fragment> fragmentList = logicalProductGenerator.toFragmentList();\n+\t\tFragmentInstanceGenerator transformer = new FragmentInstanceGenerator(fragmentList);\n+\t\tDocument fragmentInstanceDocument = transformer.toDocument();\n+\n+\t\tNode variableStatistics = getVariableStatistics(fragmentInstanceDocument, 39);\n+\n+\t\tAssert.assertEquals(\"VariableStatistics\", variableStatistics.getNodeName());\n+\t\ttestFragment(variableStatistics);\n+\n+\t\t// User Attribute Pair\n+\t\tNode userAttributePair = variableStatistics.getChildNodes().item(4);\n+\t\tAssert.assertEquals(\"r:UserAttributePair\", userAttributePair.getNodeName());\n+\t\tAssert.assertEquals(\"r:AttributeKey\", userAttributePair.getFirstChild().getNodeName());\n+\t\tAssert.assertEquals(\"extension:redaction-information\", userAttributePair.getFirstChild().getTextContent());\n+\t\tAssert.assertEquals(\"r:AttributeValue\", userAttributePair.getChildNodes().item(1).getNodeName());\n+\t\tAssert.assertEquals(\":custom user message\", userAttributePair.getChildNodes().item(1).getTextContent());\n+\n+\t\t// Variable Reference\n+\t\tNode variableReference = variableStatistics.getChildNodes().item(5);\n+\t\tAssert.assertEquals(\"r:VariableReference\", variableReference.getNodeName());\n+\t\ttestFragmentReference(variableReference);\n+\n+\t\tAssert.assertEquals(\"TotalResponses\", variableStatistics.getChildNodes().item(6).getNodeName());\n+\t\tAssert.assertEquals(\"3\", variableStatistics.getChildNodes().item(6).getTextContent());\n+\n+\t\t// Mean\n+\t\tNode standardDeviation = variableStatistics.getChildNodes().item(7);\n+\t\tAssert.assertEquals(\"SummaryStatistic\", standardDeviation.getNodeName());\n+\t\tAssert.assertEquals(\"TypeOfSummaryStatistic\", standardDeviation.getFirstChild().getNodeName());\n+\t\tAssert.assertEquals(\"Mean\", standardDeviation.getFirstChild().getTextContent());\n+\t\tAssert.assertEquals(\"Statistic\", standardDeviation.getChildNodes().item(1).getNodeName());\n+\t\tAssert.assertEquals(\"2\", standardDeviation.getChildNodes().item(1).getTextContent());\n+\t}\n+\n \t@Test\n \tpublic void testToDocument_VariableStatistics() {\n \t\tNode variableStatistics = getVariableStatistics(fragmentInstanceDocument, 39);\n@@ -78,21 +255,21 @@ public void testToDocument_VariableStatistics() {\n \t\tAssert.assertEquals(\"TypeOfSummaryStatistic\", maximum.getFirstChild().getNodeName());\n \t\tAssert.assertEquals(\"Minimum\", maximum.getFirstChild().getTextContent());\n \t\tAssert.assertEquals(\"Statistic\", maximum.getChildNodes().item(1).getNodeName());\n-\t\tAssert.assertEquals(\"1.0\", maximum.getChildNodes().item(1).getTextContent());\n+\t\tAssert.assertEquals(\"1\", maximum.getChildNodes().item(1).getTextContent());\n \n \t\tNode minimum = variableStatistics.getChildNodes().item(9);\n \t\tAssert.assertEquals(\"SummaryStatistic\", minimum.getNodeName());\n \t\tAssert.assertEquals(\"TypeOfSummaryStatistic\", minimum.getFirstChild().getNodeName());\n \t\tAssert.assertEquals(\"Maximum\", minimum.getFirstChild().getTextContent());\n \t\tAssert.assertEquals(\"Statistic\", minimum.getChildNodes().item(1).getNodeName());\n-\t\tAssert.assertEquals(\"3.0\", minimum.getChildNodes().item(1).getTextContent());\n+\t\tAssert.assertEquals(\"3\", minimum.getChildNodes().item(1).getTextContent());\n \n \t\tNode mean = variableStatistics.getChildNodes().item(10);\n \t\tAssert.assertEquals(\"SummaryStatistic\", mean.getNodeName());\n \t\tAssert.assertEquals(\"TypeOfSummaryStatistic\", mean.getFirstChild().getNodeName());\n \t\tAssert.assertEquals(\"Mean\", mean.getFirstChild().getTextContent());\n \t\tAssert.assertEquals(\"Statistic\", mean.getChildNodes().item(1).getNodeName());\n-\t\tAssert.assertEquals(\"2.0\", mean.getChildNodes().item(1).getTextContent());\n+\t\tAssert.assertEquals(\"2\", mean.getChildNodes().item(1).getTextContent());\n \n \t\tNode standardDeviation = variableStatistics.getChildNodes().item(11);\n \t\tAssert.assertEquals(\"SummaryStatistic\", standardDeviation.getNodeName());"
  }
]
