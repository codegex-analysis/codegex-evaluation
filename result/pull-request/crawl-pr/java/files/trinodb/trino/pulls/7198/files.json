[
  {
    "sha": "91ba1dc5069869fe89acdb599cadbc80e83f8369",
    "filename": "plugin/trino-mysql/pom.xml",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/trinodb/trino/blob/05c76a88d7f3332efd824d2abffff066349dcb86/plugin/trino-mysql/pom.xml",
    "raw_url": "https://github.com/trinodb/trino/raw/05c76a88d7f3332efd824d2abffff066349dcb86/plugin/trino-mysql/pom.xml",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/pom.xml?ref=05c76a88d7f3332efd824d2abffff066349dcb86",
    "patch": "@@ -160,6 +160,20 @@\n             <scope>test</scope>\n         </dependency>\n \n+        <!-- org.testcontainers:mariadb depends on the MariaDB driver -->\n+        <dependency>\n+            <groupId>org.mariadb.jdbc</groupId>\n+            <artifactId>mariadb-java-client</artifactId>\n+            <version>2.4.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>mariadb</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>mysql</artifactId>"
  },
  {
    "sha": "3f444a401443e24a2475eca3de52e8eaea3c2c17",
    "filename": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/MariaDBQueryRunner.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/trinodb/trino/blob/05c76a88d7f3332efd824d2abffff066349dcb86/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/MariaDBQueryRunner.java",
    "raw_url": "https://github.com/trinodb/trino/raw/05c76a88d7f3332efd824d2abffff066349dcb86/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/MariaDBQueryRunner.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/MariaDBQueryRunner.java?ref=05c76a88d7f3332efd824d2abffff066349dcb86",
    "patch": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.mysql;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.airlift.log.Logger;\n+import io.airlift.log.Logging;\n+import io.trino.Session;\n+import io.trino.plugin.tpch.TpchPlugin;\n+import io.trino.testing.DistributedQueryRunner;\n+import io.trino.testing.QueryRunner;\n+import io.trino.tpch.TpchTable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static io.airlift.testing.Closeables.closeAllSuppress;\n+import static io.trino.plugin.tpch.TpchMetadata.TINY_SCHEMA_NAME;\n+import static io.trino.testing.QueryAssertions.copyTpchTables;\n+import static io.trino.testing.TestingSession.testSessionBuilder;\n+\n+public class MariaDBQueryRunner\n+{\n+    private MariaDBQueryRunner() {}\n+\n+    private static final String TPCH_SCHEMA = \"tpch\";\n+\n+    public static QueryRunner createMariaDBQueryRunner(TestingMariaDBServer server, TpchTable<?>... tables)\n+            throws Exception\n+    {\n+        return createMariaDBQueryRunner(server, ImmutableMap.of(), ImmutableMap.of(), ImmutableList.copyOf(tables));\n+    }\n+\n+    public static DistributedQueryRunner createMariaDBQueryRunner(\n+            TestingMariaDBServer server,\n+            Map<String, String> extraProperties,\n+            Map<String, String> connectorProperties,\n+            Iterable<TpchTable<?>> tables)\n+            throws Exception\n+    {\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(createSession())\n+                .setExtraProperties(extraProperties)\n+                .build();\n+        try {\n+            queryRunner.installPlugin(new TpchPlugin());\n+            queryRunner.createCatalog(\"tpch\", \"tpch\");\n+\n+            connectorProperties = new HashMap<>(ImmutableMap.copyOf(connectorProperties));\n+            connectorProperties.putIfAbsent(\"connection-url\", server.getJdbcUrl());\n+            connectorProperties.putIfAbsent(\"connection-user\", server.getUsername());\n+            connectorProperties.putIfAbsent(\"connection-password\", server.getPassword());\n+            connectorProperties.putIfAbsent(\"allow-drop-table\", \"true\");\n+\n+            queryRunner.installPlugin(new MySqlPlugin());\n+            queryRunner.createCatalog(\"mysql\", \"mysql\", connectorProperties);\n+\n+            copyTpchTables(queryRunner, \"tpch\", TINY_SCHEMA_NAME, createSession(), tables);\n+\n+            return queryRunner;\n+        }\n+        catch (Throwable e) {\n+            closeAllSuppress(e, queryRunner);\n+            throw e;\n+        }\n+    }\n+\n+    private static Session createSession()\n+    {\n+        return testSessionBuilder()\n+                .setCatalog(\"mysql\")\n+                .setSchema(TPCH_SCHEMA)\n+                .build();\n+    }\n+\n+    public static void main(String[] args)\n+            throws Exception\n+    {\n+        Logging.initialize();\n+\n+        DistributedQueryRunner queryRunner = createMariaDBQueryRunner(\n+                new TestingMariaDBServer(),\n+                ImmutableMap.of(\"http-server.http.port\", \"8080\"),\n+                ImmutableMap.of(),\n+                TpchTable.getTables());\n+\n+        Logger log = Logger.get(MariaDBQueryRunner.class);\n+        log.info(\"======== SERVER STARTED ========\");\n+        log.info(\"\\n====\\n%s\\n====\", queryRunner.getCoordinator().getBaseUrl());\n+    }\n+}"
  },
  {
    "sha": "1c72c08d88ad3412aee52f8b2781cd2a7f88cf99",
    "filename": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMariaDbCompatibilityTest.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/trinodb/trino/blob/05c76a88d7f3332efd824d2abffff066349dcb86/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMariaDbCompatibilityTest.java",
    "raw_url": "https://github.com/trinodb/trino/raw/05c76a88d7f3332efd824d2abffff066349dcb86/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMariaDbCompatibilityTest.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMariaDbCompatibilityTest.java?ref=05c76a88d7f3332efd824d2abffff066349dcb86",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.mysql;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.trino.testing.QueryRunner;\n+import io.trino.testing.sql.SqlExecutor;\n+\n+import static io.trino.plugin.mysql.MariaDBQueryRunner.createMariaDBQueryRunner;\n+\n+public class TestMariaDbCompatibilityTest\n+        extends BaseMySqlConnectorTest\n+{\n+    private TestingMariaDBServer mariaDBServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        mariaDBServer = closeAfterClass(new TestingMariaDBServer());\n+        return createMariaDBQueryRunner(mariaDBServer, ImmutableMap.of(), ImmutableMap.of(), REQUIRED_TPCH_TABLES);\n+    }\n+\n+    @Override\n+    protected SqlExecutor getMySqlExecutor()\n+    {\n+        return mariaDBServer::execute;\n+    }\n+}"
  },
  {
    "sha": "089ac401570208a48394eeebbb2388659a67d0da",
    "filename": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestingMariaDBServer.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/trinodb/trino/blob/05c76a88d7f3332efd824d2abffff066349dcb86/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestingMariaDBServer.java",
    "raw_url": "https://github.com/trinodb/trino/raw/05c76a88d7f3332efd824d2abffff066349dcb86/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestingMariaDBServer.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestingMariaDBServer.java?ref=05c76a88d7f3332efd824d2abffff066349dcb86",
    "patch": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.mysql;\n+\n+import org.testcontainers.containers.MariaDBContainer;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import static io.trino.testing.containers.TestContainers.startOrReuse;\n+import static java.lang.String.format;\n+\n+public class TestingMariaDBServer\n+        implements AutoCloseable\n+{\n+    private final MariaDBContainer<?> container;\n+    private final Closeable cleanup;\n+\n+    public TestingMariaDBServer()\n+    {\n+        this(\"mariadb:10.5.4\");\n+    }\n+\n+    public TestingMariaDBServer(String dockerImageName)\n+    {\n+        MariaDBContainer<?> container = new MariaDBContainer<>(dockerImageName);\n+        container = container.withDatabaseName(\"tpch\");\n+        this.container = container;\n+        configureContainer(container);\n+        cleanup = startOrReuse(container);\n+        execute(format(\"GRANT ALL PRIVILEGES ON *.* TO '%s'\", container.getUsername()), \"root\", container.getPassword());\n+    }\n+\n+    protected void configureContainer(MariaDBContainer<?> container) {}\n+\n+    public Connection createConnection()\n+            throws SQLException\n+    {\n+        return container.createConnection(\"\");\n+    }\n+\n+    public void execute(String sql)\n+    {\n+        execute(sql, getUsername(), getPassword());\n+    }\n+\n+    public void execute(String sql, String user, String password)\n+    {\n+        try (Connection connection = DriverManager.getConnection(getJdbcUrl(), user, password);\n+                Statement statement = connection.createStatement()) {\n+            statement.execute(sql);\n+        }\n+        catch (SQLException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public String getUsername()\n+    {\n+        return container.getUsername();\n+    }\n+\n+    public String getPassword()\n+    {\n+        return container.getPassword();\n+    }\n+\n+    public String getDatabaseName()\n+    {\n+        return container.getDatabaseName();\n+    }\n+\n+    public String getJdbcUrl()\n+    {\n+        // The connection URL is still using mysql to ensure we test MariaDB compatibility with the MySQL connector\n+        return format(\"jdbc:mysql://%s:%s?useSSL=false&allowPublicKeyRetrieval=true\", container.getContainerIpAddress(), container.getMappedPort(3306));\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        try {\n+            cleanup.close();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+}"
  }
]
