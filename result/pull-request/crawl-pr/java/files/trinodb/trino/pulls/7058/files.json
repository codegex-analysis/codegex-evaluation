[
  {
    "sha": "802fe200b4e4d982136b994e88277ba01a3f1073",
    "filename": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/metastore/glue/GlueHiveMetastore.java",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/trinodb/trino/blob/8d3ec3ae585464459b23c4b04f5ae63e08667b94/plugin/trino-hive/src/main/java/io/trino/plugin/hive/metastore/glue/GlueHiveMetastore.java",
    "raw_url": "https://github.com/trinodb/trino/raw/8d3ec3ae585464459b23c4b04f5ae63e08667b94/plugin/trino-hive/src/main/java/io/trino/plugin/hive/metastore/glue/GlueHiveMetastore.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-hive/src/main/java/io/trino/plugin/hive/metastore/glue/GlueHiveMetastore.java?ref=8d3ec3ae585464459b23c4b04f5ae63e08667b94",
    "patch": "@@ -130,6 +130,7 @@\n import static io.trino.plugin.hive.aws.AwsCurrentRegionHolder.getCurrentRegionFromEC2Metadata;\n import static io.trino.plugin.hive.metastore.MetastoreUtil.makePartitionName;\n import static io.trino.plugin.hive.metastore.MetastoreUtil.verifyCanDropColumn;\n+import static io.trino.plugin.hive.metastore.glue.converter.GlueInputConverter.convertPartition;\n import static io.trino.plugin.hive.metastore.glue.converter.GlueToTrinoConverter.mappedCopy;\n import static io.trino.plugin.hive.metastore.thrift.ThriftMetastoreUtil.getHiveBasicStatistics;\n import static io.trino.plugin.hive.metastore.thrift.ThriftMetastoreUtil.updateStatisticsParameters;\n@@ -914,7 +915,7 @@ public void addPartitions(HiveIdentity identity, String databaseName, String tab\n                 List<Future<BatchCreatePartitionResult>> futures = new ArrayList<>();\n \n                 for (List<PartitionWithStatistics> partitionBatch : Lists.partition(partitions, BATCH_CREATE_PARTITION_MAX_PAGE_SIZE)) {\n-                    List<PartitionInput> partitionInputs = mappedCopy(partitionBatch, partition -> GlueInputConverter.convertPartition(partition, columnStatisticsProvider));\n+                    List<PartitionInput> partitionInputs = mappedCopy(partitionBatch, partition -> GlueInputConverter.convertPartition(partition));\n                     futures.add(glueClient.batchCreatePartitionAsync(new BatchCreatePartitionRequest()\n                             .withCatalogId(catalogId)\n                             .withDatabaseName(databaseName)\n@@ -933,6 +934,11 @@ public void addPartitions(HiveIdentity identity, String databaseName, String tab\n                     }\n                 }\n \n+                for (PartitionWithStatistics partition : partitions) {\n+                    // TODO(https://github.com/trinodb/trino/issues/7033) make updates in batch\n+                    columnStatisticsProvider.updatePartitionStatistics(partition.getPartition(), partition.getStatistics().getColumnStatistics());\n+                }\n+\n                 return null;\n             });\n         }\n@@ -987,14 +993,17 @@ public void dropPartition(HiveIdentity identity, String databaseName, String tab\n     public void alterPartition(HiveIdentity identity, String databaseName, String tableName, PartitionWithStatistics partition)\n     {\n         try {\n-            PartitionInput newPartition = GlueInputConverter.convertPartition(partition, columnStatisticsProvider);\n+            PartitionInput newPartition = convertPartition(partition);\n             stats.getAlterPartition().call(() ->\n                     glueClient.updatePartition(new UpdatePartitionRequest()\n                             .withCatalogId(catalogId)\n                             .withDatabaseName(databaseName)\n                             .withTableName(tableName)\n                             .withPartitionInput(newPartition)\n                             .withPartitionValueList(partition.getPartition().getValues())));\n+            columnStatisticsProvider.updatePartitionStatistics(\n+                    partition.getPartition(),\n+                    partition.getStatistics().getColumnStatistics());\n         }\n         catch (EntityNotFoundException e) {\n             throw new PartitionNotFoundException(new SchemaTableName(databaseName, tableName), partition.getPartition().getValues());"
  },
  {
    "sha": "46eda1baff6dc307d5215f97654f68f8c1bceeb8",
    "filename": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/metastore/glue/converter/GlueInputConverter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/trinodb/trino/blob/8d3ec3ae585464459b23c4b04f5ae63e08667b94/plugin/trino-hive/src/main/java/io/trino/plugin/hive/metastore/glue/converter/GlueInputConverter.java",
    "raw_url": "https://github.com/trinodb/trino/raw/8d3ec3ae585464459b23c4b04f5ae63e08667b94/plugin/trino-hive/src/main/java/io/trino/plugin/hive/metastore/glue/converter/GlueInputConverter.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-hive/src/main/java/io/trino/plugin/hive/metastore/glue/converter/GlueInputConverter.java?ref=8d3ec3ae585464459b23c4b04f5ae63e08667b94",
    "patch": "@@ -28,7 +28,6 @@\n import io.trino.plugin.hive.metastore.PartitionWithStatistics;\n import io.trino.plugin.hive.metastore.Storage;\n import io.trino.plugin.hive.metastore.Table;\n-import io.trino.plugin.hive.metastore.glue.GlueColumnStatisticsProvider;\n \n import java.util.List;\n import java.util.Optional;\n@@ -64,11 +63,10 @@ public static TableInput convertTable(Table table)\n         return input;\n     }\n \n-    public static PartitionInput convertPartition(PartitionWithStatistics partitionWithStatistics, GlueColumnStatisticsProvider columnStatisticsProvider)\n+    public static PartitionInput convertPartition(PartitionWithStatistics partitionWithStatistics)\n     {\n         PartitionInput input = convertPartition(partitionWithStatistics.getPartition());\n         PartitionStatistics statistics = partitionWithStatistics.getStatistics();\n-        columnStatisticsProvider.updatePartitionStatistics(partitionWithStatistics.getPartition(), statistics.getColumnStatistics());\n         input.setParameters(updateStatisticsParameters(input.getParameters(), statistics.getBasicStatistics()));\n         return input;\n     }"
  },
  {
    "sha": "047aed4479ab304434ca73a952111ba77ad38591",
    "filename": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/AbstractTestHive.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/trinodb/trino/blob/8d3ec3ae585464459b23c4b04f5ae63e08667b94/plugin/trino-hive/src/test/java/io/trino/plugin/hive/AbstractTestHive.java",
    "raw_url": "https://github.com/trinodb/trino/raw/8d3ec3ae585464459b23c4b04f5ae63e08667b94/plugin/trino-hive/src/test/java/io/trino/plugin/hive/AbstractTestHive.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-hive/src/test/java/io/trino/plugin/hive/AbstractTestHive.java?ref=8d3ec3ae585464459b23c4b04f5ae63e08667b94",
    "patch": "@@ -878,7 +878,7 @@ protected Transaction newTransaction()\n         return new HiveTransaction(transactionManager, (HiveMetadata) metadataFactory.create());\n     }\n \n-    interface Transaction\n+    public interface Transaction\n             extends AutoCloseable\n     {\n         ConnectorMetadata getMetadata();\n@@ -4776,7 +4776,7 @@ protected static SchemaTableName temporaryTable(String database, String tableNam\n         return createTableProperties(storageFormat, ImmutableList.of());\n     }\n \n-    private static Map<String, Object> createTableProperties(HiveStorageFormat storageFormat, Iterable<String> parititonedBy)\n+    protected static Map<String, Object> createTableProperties(HiveStorageFormat storageFormat, Iterable<String> parititonedBy)\n     {\n         return ImmutableMap.<String, Object>builder()\n                 .put(STORAGE_FORMAT_PROPERTY, storageFormat)"
  },
  {
    "sha": "06a15dd5ae2b6620a9663883eeaee2a7ec60fb26",
    "filename": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/metastore/glue/TestHiveGlueMetastore.java",
    "status": "modified",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/trinodb/trino/blob/8d3ec3ae585464459b23c4b04f5ae63e08667b94/plugin/trino-hive/src/test/java/io/trino/plugin/hive/metastore/glue/TestHiveGlueMetastore.java",
    "raw_url": "https://github.com/trinodb/trino/raw/8d3ec3ae585464459b23c4b04f5ae63e08667b94/plugin/trino-hive/src/test/java/io/trino/plugin/hive/metastore/glue/TestHiveGlueMetastore.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-hive/src/test/java/io/trino/plugin/hive/metastore/glue/TestHiveGlueMetastore.java?ref=8d3ec3ae585464459b23c4b04f5ae63e08667b94",
    "patch": "@@ -15,6 +15,7 @@\n \n import com.google.common.collect.ImmutableList;\n import io.airlift.concurrent.BoundedExecutor;\n+import io.airlift.slice.Slice;\n import io.trino.plugin.hive.AbstractTestHiveLocal;\n import io.trino.plugin.hive.HiveConfig;\n import io.trino.plugin.hive.HiveMetastoreClosure;\n@@ -26,34 +27,51 @@\n import io.trino.plugin.hive.metastore.PartitionWithStatistics;\n import io.trino.plugin.hive.metastore.Table;\n import io.trino.spi.TrinoException;\n+import io.trino.spi.block.Block;\n import io.trino.spi.connector.ColumnMetadata;\n+import io.trino.spi.connector.ConnectorMetadata;\n+import io.trino.spi.connector.ConnectorOutputTableHandle;\n+import io.trino.spi.connector.ConnectorPageSink;\n+import io.trino.spi.connector.ConnectorSession;\n+import io.trino.spi.connector.ConnectorTableMetadata;\n import io.trino.spi.connector.SchemaTableName;\n import io.trino.spi.connector.TableNotFoundException;\n import io.trino.spi.predicate.Domain;\n import io.trino.spi.predicate.Range;\n import io.trino.spi.predicate.TupleDomain;\n+import io.trino.spi.statistics.ColumnStatisticMetadata;\n+import io.trino.spi.statistics.ComputedStatistics;\n+import io.trino.spi.statistics.TableStatisticType;\n import io.trino.spi.type.BigintType;\n import io.trino.spi.type.DateType;\n import io.trino.spi.type.IntegerType;\n import io.trino.spi.type.SmallintType;\n import io.trino.spi.type.TinyintType;\n import io.trino.spi.type.VarcharType;\n+import io.trino.testing.MaterializedResult;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n import java.io.File;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.Executor;\n \n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n import static io.airlift.slice.Slices.utf8Slice;\n import static io.trino.plugin.hive.HiveStorageFormat.ORC;\n+import static io.trino.plugin.hive.HiveStorageFormat.TEXTFILE;\n import static io.trino.plugin.hive.HiveTestUtils.HDFS_ENVIRONMENT;\n import static io.trino.plugin.hive.metastore.glue.PartitionFilterBuilder.DECIMAL_TYPE;\n import static io.trino.plugin.hive.metastore.glue.PartitionFilterBuilder.decimalOf;\n+import static io.trino.spi.statistics.ColumnStatisticType.MAX_VALUE;\n+import static io.trino.spi.statistics.ColumnStatisticType.MIN_VALUE;\n+import static io.trino.spi.statistics.ColumnStatisticType.NUMBER_OF_DISTINCT_VALUES;\n+import static io.trino.spi.statistics.ColumnStatisticType.NUMBER_OF_NON_NULL_VALUES;\n import static io.trino.testing.TestingConnectorSession.SESSION;\n import static java.lang.String.format;\n import static java.util.Locale.ENGLISH;\n@@ -676,6 +694,105 @@ public void testGetPartitionsFilterIsNullWithValue()\n                 ImmutableList.of(ImmutableList.of(GlueExpressionUtil.NULL_STRING)));\n     }\n \n+    @Test\n+    public void testUpdateStatisticsOnCreate()\n+    {\n+        SchemaTableName tableName = temporaryTable(\"update_statistics_create\");\n+        try (Transaction transaction = newTransaction()) {\n+            ConnectorSession session = newSession();\n+            ConnectorMetadata metadata = transaction.getMetadata();\n+\n+            List<ColumnMetadata> columns = ImmutableList.of(new ColumnMetadata(\"a_column\", BigintType.BIGINT));\n+            ConnectorTableMetadata tableMetadata = new ConnectorTableMetadata(tableName, columns, createTableProperties(TEXTFILE));\n+            ConnectorOutputTableHandle createTableHandle = metadata.beginCreateTable(session, tableMetadata, Optional.empty());\n+\n+            // write data\n+            ConnectorPageSink sink = pageSinkProvider.createPageSink(transaction.getTransactionHandle(), session, createTableHandle);\n+            MaterializedResult data = MaterializedResult.resultBuilder(session, BigintType.BIGINT)\n+                    .row(1L)\n+                    .row(2L)\n+                    .row(3L)\n+                    .row(4L)\n+                    .row(5L)\n+                    .build();\n+            sink.appendPage(data.toPage());\n+            Collection<Slice> fragments = getFutureValue(sink.finish());\n+\n+            // prepare statistics\n+            ComputedStatistics statistics = ComputedStatistics.builder(ImmutableList.of(), ImmutableList.of())\n+                    .addTableStatistic(TableStatisticType.ROW_COUNT, singleValueBlock(5))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", MIN_VALUE), singleValueBlock(1))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", MAX_VALUE), singleValueBlock(5))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", NUMBER_OF_DISTINCT_VALUES), singleValueBlock(5))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", NUMBER_OF_NON_NULL_VALUES), singleValueBlock(5))\n+                    .build();\n+\n+            // finish CTAS\n+            metadata.finishCreateTable(session, createTableHandle, fragments, ImmutableList.of(statistics));\n+            transaction.commit();\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    @Test\n+    public void testUpdatePartitionedStatisticsOnCreate()\n+    {\n+        SchemaTableName tableName = temporaryTable(\"update_partitioned_statistics_create\");\n+        try (Transaction transaction = newTransaction()) {\n+            ConnectorSession session = newSession();\n+            ConnectorMetadata metadata = transaction.getMetadata();\n+\n+            List<ColumnMetadata> columns = ImmutableList.of(\n+                    new ColumnMetadata(\"a_column\", BigintType.BIGINT),\n+                    new ColumnMetadata(\"part_column\", BigintType.BIGINT));\n+\n+            ConnectorTableMetadata tableMetadata = new ConnectorTableMetadata(tableName, columns, createTableProperties(TEXTFILE, ImmutableList.of(\"part_column\")));\n+            ConnectorOutputTableHandle createTableHandle = metadata.beginCreateTable(session, tableMetadata, Optional.empty());\n+\n+            // write data\n+            ConnectorPageSink sink = pageSinkProvider.createPageSink(transaction.getTransactionHandle(), session, createTableHandle);\n+            MaterializedResult data = MaterializedResult.resultBuilder(session, BigintType.BIGINT, BigintType.BIGINT)\n+                    .row(1L, 1L)\n+                    .row(2L, 1L)\n+                    .row(3L, 1L)\n+                    .row(4L, 2L)\n+                    .row(5L, 2L)\n+                    .build();\n+            sink.appendPage(data.toPage());\n+            Collection<Slice> fragments = getFutureValue(sink.finish());\n+\n+            // prepare statistics\n+            ComputedStatistics statistics1 = ComputedStatistics.builder(ImmutableList.of(\"part_column\"), ImmutableList.of(singleValueBlock(1)))\n+                    .addTableStatistic(TableStatisticType.ROW_COUNT, singleValueBlock(3))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", MIN_VALUE), singleValueBlock(1))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", MAX_VALUE), singleValueBlock(3))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", NUMBER_OF_DISTINCT_VALUES), singleValueBlock(3))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", NUMBER_OF_NON_NULL_VALUES), singleValueBlock(3))\n+                    .build();\n+            ComputedStatistics statistics2 = ComputedStatistics.builder(ImmutableList.of(\"part_column\"), ImmutableList.of(singleValueBlock(2)))\n+                    .addTableStatistic(TableStatisticType.ROW_COUNT, singleValueBlock(2))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", MIN_VALUE), singleValueBlock(4))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", MAX_VALUE), singleValueBlock(5))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", NUMBER_OF_DISTINCT_VALUES), singleValueBlock(2))\n+                    .addColumnStatistic(new ColumnStatisticMetadata(\"a_column\", NUMBER_OF_NON_NULL_VALUES), singleValueBlock(2))\n+                    .build();\n+\n+            // finish CTAS\n+            metadata.finishCreateTable(session, createTableHandle, fragments, ImmutableList.of(statistics1, statistics2));\n+            transaction.commit();\n+        }\n+        finally {\n+            dropTable(tableName);\n+        }\n+    }\n+\n+    private Block singleValueBlock(long value)\n+    {\n+        return BigintType.BIGINT.createBlockBuilder(null, 1).writeLong(value).build();\n+    }\n+\n     private void doGetPartitionsFilterTest(\n             List<ColumnMetadata> columnMetadata,\n             String partitionColumnName,"
  }
]
