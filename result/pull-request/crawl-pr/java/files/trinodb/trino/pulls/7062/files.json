[
  {
    "sha": "dc876d772f22dea0c2ae33cac4a9697060b7952e",
    "filename": "docs/src/main/sphinx/security.rst",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/trinodb/trino/blob/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/security.rst?ref=481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad",
    "patch": "@@ -8,7 +8,9 @@ Cluster access security\n .. toctree::\n   :maxdepth: 1\n \n-  security/tls\n+  security/https\n+  security/inspect-pem\n+  security/inspect-jks\n   security/ldap\n   security/password-file\n   security/salesforce\n@@ -41,3 +43,10 @@ Security inside the cluster\n \n   security/internal-communication\n   security/secrets\n+\n+\n+.. toctree::\n+  :hidden:\n+\n+  &nbsp; <security/tls>\n+"
  },
  {
    "sha": "904cb48dc3e40a259b4ff54235bf47f0dde705fc",
    "filename": "docs/src/main/sphinx/security/cli.rst",
    "status": "modified",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/trinodb/trino/blob/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/cli.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/cli.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/security/cli.rst?ref=481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad",
    "patch": "@@ -33,13 +33,12 @@ principal.\n \n .. include:: ktadd-note.fragment\n \n-Java keystore file for TLS\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n+Configuration for TLS\n+^^^^^^^^^^^^^^^^^^^^^\n \n-Access to the Trino coordinator must be through HTTPS when using Kerberos\n-authentication. The Trino coordinator uses a :ref:`Java Keystore\n-<server_java_keystore>` file for its TLS configuration. This file can be\n-copied to the client machine and used for its configuration.\n+When using Kerberos authentication, access to the Trino coordinator must be\n+through HTTPS. If you have not yet configured HTTPS (TLS) for your coordinator,\n+refer to :doc:`HTTPS and TLS </security/https>`.\n \n Trino CLI execution\n --------------------"
  },
  {
    "sha": "8c42cd9d63e78c39f49e2e65cd51564288225e95",
    "filename": "docs/src/main/sphinx/security/https.rst",
    "status": "added",
    "additions": 323,
    "deletions": 0,
    "changes": 323,
    "blob_url": "https://github.com/trinodb/trino/blob/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/https.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/https.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/security/https.rst?ref=481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad",
    "patch": "@@ -0,0 +1,323 @@\n+=============\n+HTTPS and TLS\n+=============\n+\n+Trino runs with no security by default. This allows you to connect to the server\n+using URLs that specify the HTTP protocol when using the Trino :doc:`CLI\n+</installation/cli>`, the :doc:`Web UI </admin/web-interface>`, or other\n+clients.\n+\n+This topic describes how to configure your Trino server to use :ref:`TLS\n+<glossTLS>` to require clients to use the HTTPS connection protocol. All\n+authentication and authorization technologies supported by Trino require\n+configuring TLS as the foundational layer.\n+\n+When configured to use TLS, a Trino server responds to client connections using\n+TLS 1.2 and TLS 1.3 certificates. The server rejects TLS 1.1, TLS 1.0, and all\n+SSL format certificates.\n+\n+.. important::\n+\n+    This page discusses only how to prepare the Trino server for secure client\n+    connections from outside of the Trino cluster to its coordinator.\n+\n+See the :ref:`TLS Glossary <tlsglossary>` to clarify unfamiliar terms.\n+\n+Approaches\n+----------\n+\n+To configure Trino with TLS support, consider two alternative paths:\n+\n+* Use the :ref:`load balancer or proxy <https-load-balancer>` at your site\n+  or cloud environment to terminate HTTPS/TLS. This approach is the simplest and\n+  strongly preferred solution.\n+\n+* Secure the Trino :ref:`server directly <https-secure-directly>`. This\n+  requires you to obtain a valid certificate, and add it to the Trino\n+  coordinator's configuration.\n+\n+.. _https-load-balancer:\n+\n+Use a load balancer to terminate HTTPS/TLS\n+------------------------------------------\n+\n+Your site or cloud environment may already have a :ref:`load balancer <glossLB>`\n+or proxy server configured and running with a valid, globally trusted TLS\n+certificate. In this case, you can work with your network administrators to set\n+up your Trino server behind the load balancer. The load balancer or proxy server\n+accepts TLS connections and forwards them to the Trino coordinator, which\n+typically runs with default HTTP configuration on the default port, 8080.\n+\n+When a load balancer accepts a TLS encrypted connection, it adds a *forwarded*\n+HTTP header to the request, such as:\n+\n+.. code-block:: text\n+\n+    X-Forwarded-Proto: https\n+\n+This tells the Trino coordinator to process the connection as if a TLS\n+connection has already been successfully negotiated for it. This is why you do\n+not need to configure ``http-server.https.enabled=true`` for a coordinator\n+behind a load balancer.\n+\n+However, to enable processing of such forwarded headers, the server's\n+:ref:`config properties file <config_properties>` *must* include the following:\n+\n+.. code-block:: text\n+\n+  http-server.process-forwarded=true\n+\n+This completes any necessary configuration for using HTTPS with a load balancer.\n+Client tools can access Trino with the URL exposed by the load balancer.\n+\n+.. _https-secure-directly:\n+\n+Secure Trino directly\n+----------------------\n+\n+Instead of the preferred mechanism of using an :ref:`external load balancer\n+<https-load-balancer>`, you can secure the Trino coordinator itself. This\n+requires you to obtain and install a TLS :ref:`certificate <glossCert>`, and\n+configure Trino to use it for any client connections.\n+\n+Add a TLS certificate\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+Obtain a TLS certificate file for use with your Trino server. Consider the\n+following types of certificates:\n+\n+* **Globally trusted certificates** — A certificate that is automatically\n+  trusted by all browsers and clients. This is the easiest type to use because\n+  you do not need to configure clients. Obtain a certificate of this type from:\n+\n+  *  A commercial certificate vendor\n+  *  Your cloud infrastructure provider\n+  *  A domain name registrar, such as Verisign or GoDaddy\n+  *  A free certificate generator, such as\n+     `letsencrypt.org <https://letsencrypt.org/>`_ or\n+     `sslforfree.com <https://www.sslforfree.com/>`_\n+\n+* **Corporate trusted certificates** — A certificate trusted by browsers and\n+  clients in your organization. Typically, a site's IT department runs a local\n+  :ref:`certificate authority <glossCA>` and preconfigures clients and servers\n+  to trust this CA.\n+\n+* **Generated self-signed certificates** — A certificate generated just for\n+  Trino that is not automatically trusted by any client. Before using, make sure\n+  you understand the :ref:`limitations of self-signed certificates\n+  <self_signed_limits>`.\n+\n+The most convenient option and strongly recommended option is a globally trusted\n+certificate. It may require a little more work up front, but it is worth it to\n+not have to configure every single client.\n+\n+Keys and certificates\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+Trino can read certificates and private keys encoded in PEM encoded PKCS #1, PEM\n+encoded PKCS #8, PKCS #12, and the legacy Java KeyStore (JKS) format. Trino also\n+supports keys and certificates imported into legacy :ref:`JKS <glossJKS>`\n+keystores, as well as those imported into the binary :ref:`PKCS #12\n+<glossPKCS12>` archive file format.\n+\n+Make sure you obtain a certificate that is validated by a recognized\n+:ref:`certificate authority <glossCA>`.\n+\n+Inspect received certificates\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Be sure to inspect and validate your received key and certificate files to make\n+sure they reference the correct information to access your Trino server. Much\n+unnecessary debugging time is saved by taking the time to validate your\n+certificates before proceeding to configure the server.\n+\n+Inspect PEM-encoded files as described in :doc:`Inspect PEM files\n+</security/inspect-pem>`.\n+\n+Inspect JKS keystores as described in :doc:`Inspect JKS files\n+</security/inspect-jks>`.\n+\n+Invalid certificates\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+If your certificate does not pass validation, or does not show the expected\n+information on inspection, contact the group or vendor who provided it for a\n+replacement.\n+\n+.. _cert-placement:\n+\n+Place the certificate file\n+^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+There are no location requirements for a certificate file as long as:\n+\n+* The file can be read by the Trino server process.\n+* The location is secure from copying or tampering by malicious actors.\n+\n+You can place your file in the Trino server's ``etc`` directory, which allows\n+you to use a relative path reference in configuration files. However, this\n+location can require you to keep track of the certificate file, and move it to\n+a new ``etc`` directory when you upgrade your Trino version.\n+\n+.. _configure-https:\n+\n+Configure the coordinator\n+^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+On the coordinator, add the following lines to the :ref:`config properties file\n+<config_properties>` to enable TLS/HTTPS support for the server.\n+\n+.. note::\n+\n+  Legacy ``keystore`` and ``truststore`` wording is used in property names, even\n+  when directly using PEM-encoded certificates.\n+\n+.. code-block:: text\n+\n+  http-server.https.enabled=true\n+  http-server.https.port=8443\n+  http-server.https.keystore.path=etc/clustercoord.pem\n+\n+Possible alternatives for the third line include:\n+\n+.. code-block:: text\n+\n+  http-server.https.keystore.path=etc/clustercoord.jks\n+  http-server.https.keystore.path=/usr/local/certs/clustercoord.p12\n+\n+Relative paths are relative to the Trino server's root directory. In a\n+``tar.gz`` installation, the root directory is one level above ``etc``.\n+\n+JKS keystores always require a password, while PEM format certificates can\n+optionally require a password. For cases where you need a password, add the\n+following line to the configuration.\n+\n+.. code-block:: text\n+\n+  http-server.https.keystore.key=<keystore-password>\n+\n+It is possible for a key inside a keystore to have its own password,\n+independent of the keystore's password. In this case, specify the key's password\n+with the following property:\n+\n+.. code-block:: text\n+\n+  http-server.https.keymanager.password=<key-password>\n+\n+When your Trino coordinator has an authenticator enabled along with HTTPS\n+enabled, HTTP access is automatically disabled for all clients, including the\n+:doc:`Web UI </admin/web-interface>`. Although not recommended, you can\n+re-enable it by setting:\n+\n+.. code-block:: text\n+\n+  http-server.authentication.allow-insecure-over-http=true\n+\n+Test configuration\n+^^^^^^^^^^^^^^^^^^\n+\n+To test your configuration settings, restart the server and try to connect to it\n+with the Trino :doc:`CLI </installation/cli>` or :doc:`Web UI\n+</admin/web-interface>`, using a URL that begins with ``https://``.\n+\n+Now that TLS is configured, go back and :doc:`configure the authentication\n+</security>` method for your server.\n+\n+.. _self_signed_limits:\n+\n+Limitations of self-signed certificates\n+---------------------------------------\n+\n+It is possible to generate a self-signed certificate with the ``openssl``,\n+``keytool``, or on Linux, ``certtool`` commands. Self-signed certificates can be\n+useful during development of a cluster for internal use only. We recommend never\n+using a self-signed certificate for a production Trino server.\n+\n+Self-signed certificates are not trusted by anyone. They are typically created\n+by an administrator for expediency, because they do not require getting trust\n+signoff from anyone.\n+\n+To use a self-signed certificate while developing your cluster requires:\n+\n+* distributing to every client a local truststore that validates the certificate\n+* configuring every client to use this certificate\n+\n+However, even with this client configuration, modern browsers reject these\n+certificates, which makes self-signed servers difficult to work with.\n+\n+There is a difference between self-signed and unsigned certificates. Both types\n+are created with the same tools, but unsigned certificates are meant to be\n+forwarded to a CA with a Certificate Signing Request (CSR). The CA returns the\n+certificate signed by the CA and now globally trusted.\n+\n+.. _tlsglossary:\n+\n+TLS Glossary\n+------------\n+\n+.. _glossCA:\n+\n+CA\n+    Certificate Authority, a trusted organization that examines and validates\n+    organizations and their proposed server URIs, and issues digital\n+    certificates verified as valid for the requesting organization.\n+\n+.. _glossCert:\n+\n+Certificate\n+    A public key `certificate\n+    <https://en.wikipedia.org/wiki/Public_key_certificate>`_ issued by a CA,\n+    sometimes abbreviated as *cert*, that verifies the ownership of a server's\n+    keys. Certificate format is specified in the `X.509\n+    <https://en.wikipedia.org/wiki/X.509>`_ standard.\n+\n+.. _glossJKS:\n+\n+JKS\n+    Java KeyStore, the system of public key cryptography supported as one part\n+    of the Java security APIs. The legacy JKS system recognizes keys and\n+    certificates stored in *keystore* files, typically with the ``.jks``\n+    extension, and relies on a system-level list of CAs in *truststore* files\n+    installed as part of the current Java installation.\n+\n+.. _glossKey:\n+\n+Key\n+    A cryptographic key specified as a pair of public and private keys.\n+\n+.. _glossLB:\n+\n+Load Balancer (LB)\n+    Software or a hardware device that sits on a network's outer edge or\n+    firewall and accepts network connections on behalf of servers behind that\n+    wall. Load balancers carefully manage network traffic, and can accept TLS\n+    connections from incoming clients and pass those connections transparently\n+    to servers behind the wall.\n+\n+.. _glossPEM:\n+\n+PEM\n+    Privacy-Enhanced Mail, a syntax for private key information, and a content\n+    type used to store and send cryptographic keys and certificates. PEM format\n+    can contain both a key and its certificate, plus the chain of certificates\n+    from authorities back to the root :ref:`CA <glossCA>`, or back to a CA\n+    vendor's intermediate CA.\n+\n+.. _glossPKCS12:\n+\n+PKCS #12\n+    A binary archive used to store keys and certificates or certificate chains\n+    that validate a key. `PKCS #12 <https://en.wikipedia.org/wiki/PKCS_12>`_\n+    files have ``.p12`` or ``.pfx`` extensions.\n+\n+SSL\n+    Secure Sockets Layer, now superceded by TLS, but still recognized as the\n+    term for what TLS does now.\n+\n+.. _glossTLS:\n+\n+TLS\n+    `Transport Layer Security\n+    <https://en.wikipedia.org/wiki/Transport_Layer_Security>`_ is the successor\n+    to SSL. These security topics use the term TLS to refer to both TLS and SSL.\n+"
  },
  {
    "sha": "15c37915b97db0bee8c9370ba4369559eaa5020a",
    "filename": "docs/src/main/sphinx/security/inspect-jks.rst",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/trinodb/trino/blob/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/inspect-jks.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/inspect-jks.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/security/inspect-jks.rst?ref=481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad",
    "patch": "@@ -0,0 +1,128 @@\n+=========\n+JKS files\n+=========\n+\n+This topic describes how to validate a :ref:`Java keystore (JKS) <glossJKS>`\n+file used to configure :doc:`/security/https`.\n+\n+The Java KeyStore (JKS) system is provided as part of your Java installation.\n+Private keys and certificates for your server are stored in a *keystore* file.\n+the keystore file itself is always password-protected. The keystore file can\n+have more than one key in the the same file, each addressed by its **alias**\n+name.\n+\n+The keystore file must be verified as suitable for your Trino cluster.\n+\n+.. _troubleshooting_keystore:\n+\n+Inspect and validate keystore\n+-----------------------------\n+\n+Inspect the keystore file to make sure it contains the correct information for\n+your Trino server. Use the ``keytool`` command, which is installed as part of\n+your Java installation, to retrieve information from your keystore file:\n+\n+.. code-block:: text\n+\n+  keytool -list -v -keystore yourKeystore.jks\n+\n+Keystores always require a password. If not provided on the ``keytool`` command\n+line, ``keytool`` prompts for the password.\n+\n+Independent of the keystore's password, it is possible that an individual key\n+has its own password. It is easiest to make sure these passwords are the same.\n+If the JKS key inside the keystore has a different password, you are prompted\n+twice.\n+\n+In the output of the ``keytool -list`` command, look for:\n+\n+* The keystore may contain either a private key (``Entry type:\n+  PrivateKeyEntry``) or certificate (``Entry type: trustedCertEntry``) or both.\n+*  Modern browsers now enforce 398 days as the maximum validity period for a\n+   certificate. Look for the ``Valid from ... until`` entry, and make sure the\n+   time span does not exceed 398 days.\n+*  Modern browsers and clients require the **SubjectAlternativeName** (SAN)\n+   field. Make sure this shows the DNS name of your server, such as\n+   ``DNS:cluster.example.com``. Certificates without SANs are not\n+   supported.\n+\n+  Example:\n+\n+  .. code-block:: text\n+\n+    SubjectAlternativeName [\n+        DNSName:  cluster.example.com\n+    ]\n+\n+If your keystore shows valid information for your cluster, proceed to configure\n+the Trino server, as described in :ref:`cert-placement` and\n+:ref:`configure-https`.\n+\n+The rest of this page describes additional steps that may apply in certain\n+circumstances.\n+\n+.. _import_to_keystore:\n+\n+Extra: add PEM to keystore\n+--------------------------\n+\n+Your site may have standardized on using JKS semantics for all servers. If a\n+vendor sends you a PEM-encoded certificate file for your Trino server, you can\n+import it into a keystore with a command like the following. Consult ``keytool``\n+references for different options.\n+\n+.. code-block:: shell\n+\n+  keytool -trustcacerts -import -alias cluster -file localhost.pem -keystore localkeys.jks\n+\n+If the specified keystore file exists, ``keytool`` prompts for its password. If\n+you are creating a new keystore, ``keytool`` prompts for a new password, then\n+prompts you to confirm the same password. ``keytool`` shows you the\n+contents of the key being added, similar to the ``keytool -list`` format, then\n+prompts:\n+\n+.. code-block:: text\n+\n+  Trust this certificate? [no]:\n+\n+Type ``yes`` to add the PEM certificate to the keystore.\n+\n+The ``alias`` name is an arbitrary string used as a handle for the certificate\n+you are adding. A keystore can contain multiple keys and certs, so ``keytool``\n+uses the alias to address individual entries.\n+\n+.. _cli_java_truststore:\n+\n+Extra: Java truststores\n+-----------------------\n+\n+.. note::\n+\n+    Remember that there may be no need to identify a local truststore when\n+    directly using a signed PEM-encoded certificate, independent of a keystore.\n+    PEM certs can contain the server's private key and the certificate chain all\n+    the way back to a recognzied CA.\n+\n+Truststore files contain a list of :ref:`Certificate Authorities <glossCA>`\n+trusted by Java to validate the private keys of servers, plus a list of the\n+certificates of trusted TLS servers. The standard Java-provided truststore file,\n+``cacerts``, is part of your Java installation in a standard location.\n+\n+Keystores normally rely on the default location of the system truststore, which\n+therefore does not need to be configured.\n+\n+However, there are cases in which you need to use an alternate truststore. For\n+example, if your site relies on the JKS system, your network managers may have\n+appended site-specific, local CAs to the standard list, to validate locally\n+signed keys.\n+\n+If your server must use a custom truststore, identify its location in the\n+server's config properties file. For example:\n+\n+.. code-block:: text\n+\n+   http-server.https.truststore.path=/mnt/shared/certs/localcacerts\n+   http-server.https.truststore.key=<truststore-password>\n+\n+If connecting clients such as browsers or the Trino CLI must be separately\n+configured, contact your site's network administrators for assistance.\n\\ No newline at end of file"
  },
  {
    "sha": "b408f55118f98f97e95049aa67588cd5144acd97",
    "filename": "docs/src/main/sphinx/security/inspect-pem.rst",
    "status": "added",
    "additions": 139,
    "deletions": 0,
    "changes": 139,
    "blob_url": "https://github.com/trinodb/trino/blob/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/inspect-pem.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/inspect-pem.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/security/inspect-pem.rst?ref=481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad",
    "patch": "@@ -0,0 +1,139 @@\n+=========\n+PEM files\n+=========\n+\n+PEM (Privacy Enhanced Mail) is a standard for public key and certificate\n+information, and an encoding standard used to transmit keys and certificates.\n+\n+Trino supports PEM-encoded certificates. If you want to use other supported\n+formats, see:\n+\n+*  :doc:`JKS keystores </security/inspect-jks>`\n+*  For binary :ref:`PKCS 12 <glossPKCS12>` stores, look up alternate commands in\n+   ``openssl`` references\n+\n+A single PEM-encoded file can contain either certificate or key pair\n+information, or both in the same file. Certified keys can contain a chain of\n+certificates from successive certificate authorities. If the certificate chain\n+goes all the way back to a recognized Certificate Authority (CA), that cert does\n+not need a separate truststore.\n+\n+Follow the steps in this topic to inspect and validate PEM-encoded key and\n+certificate files. See :ref:`troubleshooting_keystore` to validate JKS keystores.\n+\n+.. _inspect_pems:\n+\n+Inspect PEM key files\n+---------------------\n+\n+You may receive a single file that includes a private key and its certificate,\n+or separate files. The file name extensions shown on this page are examples\n+only; there is no extension naming standard.\n+\n+First, use the ``cat`` command to view these plain text files. For example:\n+\n+.. code-block:: shell\n+\n+    cat clustercoord.key\n+    cat clustercoord.cert\n+\n+or:\n+\n+.. code-block:: shell\n+\n+    cat clustercoord.pem\n+\n+A key file looks something like the following:\n+\n+.. code-block:: text\n+\n+  -----BEGIN PRIVATE KEY-----\n+  MIIEowIBAAKCAQEAwJL8CLeDFAHhZe3QOOF1vWt4Vuk9vyO38Y1y9SgBfB02b2jW\n+  ....\n+  -----END PRIVATE KEY-----\n+\n+If your key file reports ``BEGIN ENCRYPTED PRIVATE KEY`` instead, this means the\n+key is encrypted and you must use the password to open or inspect the key. You\n+may have specified the password when requesting the key, or the password could\n+be assigned by your site's network managers.\n+\n+  If your key file reports ``BEGIN EC PRIVATE KEY`` or\n+  ``BEGIN DSA PRIVATE KEY``, this designates keys using Elliptical Curve or\n+  DSA alternatives to RSA. In these cases, consult ``openssl`` references for\n+  the appropriate versions of the verification commands below.\n+\n+Inspect PEM certificate files\n+-----------------------------\n+\n+A separate certificate file looks like the following example with the ``cat``\n+command:\n+\n+.. code-block:: text\n+\n+  -----BEGIN CERTIFICATE-----\n+  MIIDujCCAqICAQEwDQYJKoZIhvcNAQEFBQAwgaIxCzAJBgNVBAYTAlVTMRYwFAYD\n+  ....\n+  -----END CERTIFICATE-----\n+  -----BEGIN CERTIFICATE-----\n+  MIIDwjCCAqoCCQCxyqwZ9GK50jANBgkqhkiG9w0BAQsFADCBojELMAkGA1UEBhMC\n+  ....\n+  -----END CERTIFICATE-----\n+\n+The file can show a single certificate section, or more than one to express a\n+chain of authorities, each certifying the previous.\n+\n+If you received a single file, make sure it shows at least one ``KEY`` and one\n+``CERTIFICATE`` section. If you received separate files, concatenate them into\n+one, typically in order from key to certificate. For example:\n+\n+.. code-block:: shell\n+\n+  cat clustercoord.key clustercoord.cert > clustercoord.pem\n+\n+.. _validate_pems:\n+\n+Validate PEM keys\n+-----------------\n+\n+This page presumes your system provides the ``openssl`` command from OpenSSL 1.1\n+or later.\n+\n+Test an RSA private key's validity with the following command:\n+\n+.. code-block:: text\n+\n+  openssl rsa -in clustercoord.pem -check -noout\n+\n+Look for the following confirmation message:\n+\n+.. code-block:: text\n+\n+  RSA key ok\n+\n+Validate PEM certificates\n+-------------------------\n+\n+Analyze a certificate file, or the certificate portion of a concatenated file,\n+with the following ``openssl`` command:\n+\n+.. code-block:: text\n+\n+  openssl x509 -in server.pem -text -noout\n+\n+If your certificate was generated with a password, ``openssl`` prompts for it.\n+\n+In the output of the ``openssl`` command, look for the following\n+characteristics:\n+\n+*  Modern browsers now enforce 398 days as the maximum validity period for a\n+   certificate. Look for ``Not Before`` and ``Not After`` dates in the\n+   ``Validity`` section of the output, and make sure the time span does not\n+   exceed 398 days.\n+*  Modern browsers and clients require the **Subject Alternative Name** (SAN)\n+   field. Make sure this shows the DNS name of your server, such as\n+   ``DNS:clustercoord.example.com``. Certificates without SANs are not\n+   supported.\n+\n+If your PEM shows valid information for your cluster, proceed to configure\n+the Trino server, as described in :ref:`cert-placement` and\n+:ref:`configure-https`."
  },
  {
    "sha": "093f595222a3bb89247ea7e528a75ca3a47517e7",
    "filename": "docs/src/main/sphinx/security/ldap.rst",
    "status": "modified",
    "additions": 21,
    "deletions": 27,
    "changes": 48,
    "blob_url": "https://github.com/trinodb/trino/blob/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/ldap.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/ldap.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/security/ldap.rst?ref=481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad",
    "patch": "@@ -21,8 +21,8 @@ Trino server configuration\n Trino coordinator node configuration\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-Access to the Trino coordinator should be through HTTPS. You can do that\n-by creating a :ref:`server_java_keystore` on the coordinator.\n+Access to the Trino coordinator should be through HTTPS, configured as described\n+on :doc:`HTTPS and TLS </security/https>`.\n \n You also need to make changes to the Trino configuration files.\n LDAP authentication is configured on the coordinator in two parts.\n@@ -55,10 +55,11 @@ Property                                                      Description\n                                                               Should be set to ``true``. Default value is\n                                                               ``false``.\n ``http-server.https.port``                                    HTTPS server port.\n-``http-server.https.keystore.path``                           The location of the Java Keystore file that will be\n-                                                              used to secure TLS.\n-``http-server.https.keystore.key``                            The password for the keystore. This must match the\n-                                                              password you specified when creating the keystore.\n+``http-server.https.keystore.path``                           The location of the PEM or Java keystore file\n+                                                              is used to enable TLS.\n+``http-server.https.keystore.key``                            The password for the PEM or Java keystore. This\n+                                                              must match the password you specified when creating\n+                                                              the PEM or keystore.\n ``http-server.process-forwarded``                             Enable treating forwarded HTTPS requests over HTTP\n                                                               as secure.  Requires the ``X-Forwarded-Proto`` header\n                                                               to be set to ``https`` on forwarded requests.\n@@ -88,11 +89,11 @@ Property                           Description\n ================================== ======================================================\n ``ldap.url``                       The URL to the LDAP server. The URL scheme must be\n                                    ``ldap://`` or ``ldaps://``. Connecting to the LDAP\n-                                   server without SSL enabled requires\n+                                   server without TLS enabled requires\n                                    ``ldap.allow-insecure=true``.\n ``ldap.allow-insecure``            Allow using an LDAP connection that is not secured with\n                                    TLS.\n-``ldap.ssl-trust-certificate``     The path to the PEM encoded trust certificate  for the\n+``ldap.ssl-trust-certificate``     The path to the PEM encoded trust certificate for the\n                                    LDAP server. This file should contain the LDAP\n                                    server's certificate or its certificate authority.\n ``ldap.user-bind-pattern``         This property can be used to specify the LDAP user\n@@ -243,15 +244,8 @@ Environment configuration\n TLS configuration\n ~~~~~~~~~~~~~~~~~\n \n-Access to the Trino coordinator should be through HTTPS when using LDAP\n-authentication. The Trino CLI can use either a :ref:`Java Keystore\n-<server_java_keystore>` file or :ref:`Java Truststore <cli_java_truststore>`\n-for its TLS configuration.\n-\n-If you are using a keystore file, it can be copied to the client machine and used\n-for its TLS configuration. If you are using truststore, you can either use\n-default Java truststores or create a custom truststore on the CLI. We do not\n-recommend using self-signed certificates in production.\n+When using LDAP authentication, access to the Trino coordinator must be through\n+:doc:`HTTPS/TLS </security/https>`.\n \n Trino CLI execution\n ^^^^^^^^^^^^^^^^^^^^\n@@ -289,7 +283,7 @@ Option                          Description\n                                 to secure TLS.\n ``--keystore-password``         The password for the keystore. This must match the\n                                 password you specified when creating the keystore.\n-``--truststore-path``           The location of the Java Truststore file that will be used\n+``--truststore-path``           The location of the Java truststore file that will be used\n                                 to secure TLS.\n ``--truststore-password``       The password for the truststore. This must match the\n                                 password you specified when creating the truststore.\n@@ -319,10 +313,10 @@ you can change the :ref:`log level <log-levels>` for the LDAP authenticator:\n \n     io.trino.plugin.password=DEBUG\n \n-SSL debugging for Trino CLI\n+TLS debugging for Trino CLI\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-If you encounter any SSL related errors when running the Trino CLI, you can run\n+If you encounter any TLS related errors when running the Trino CLI, you can run\n the CLI using the ``-Djavax.net.debug=ssl`` parameter for debugging. Use the\n Trino CLI executable JAR to enable this. For example:\n \n@@ -334,30 +328,30 @@ Trino CLI executable JAR to enable this. For example:\n     --server https://coordinator:8443 \\\n     <other_cli_arguments>\n \n-Common SSL errors\n-~~~~~~~~~~~~~~~~~\n+Common TLS/SSL errors\n+~~~~~~~~~~~~~~~~~~~~~\n \n java.security.cert.CertificateException: No subject alternative names present\n *****************************************************************************\n \n This error is seen when the Trino coordinator’s certificate is invalid, and does not have the IP you provide\n-in the ``--server`` argument of the CLI. You have to regenerate the coordinator's SSL certificate\n+in the ``--server`` argument of the CLI. You have to regenerate the coordinator's TLS certificate\n with the appropriate :abbr:`SAN (Subject Alternative Name)` added.\n \n Adding a SAN to this certificate is required in cases where ``https://`` uses IP address in the URL, rather\n than the domain contained in the coordinator's certificate, and the certificate does not contain the\n :abbr:`SAN (Subject Alternative Name)` parameter with the matching IP address as an alternative attribute.\n \n-Authentication or SSL errors with JDK upgrade\n+Authentication or TLS errors with JDK upgrade\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n Starting with the JDK 8u181 release, to improve the robustness of LDAPS\n-(secure LDAP over TLS) connections, endpoint identification algorithms have\n-been enabled by default. See release notes\n+(secure LDAP over TLS) connections, endpoint identification algorithms were\n+enabled by default. See release notes\n `from Oracle <https://www.oracle.com/technetwork/java/javase/8u181-relnotes-4479407.html#JDK-8200666.>`_.\n The same LDAP server certificate on the Trino coordinator, running on JDK\n version >= 8u181, that was previously able to successfully connect to an\n-LDAPS server, may now fail with the below error:\n+LDAPS server, may now fail with the following error:\n \n .. code-block:: text\n "
  },
  {
    "sha": "907f45e383cfe818cddda813e35e8ada1e3c876d",
    "filename": "docs/src/main/sphinx/security/server.rst",
    "status": "modified",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/trinodb/trino/blob/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/server.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/server.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/security/server.rst?ref=481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad",
    "patch": "@@ -46,12 +46,11 @@ In addition, the Trino coordinator needs a `keytab file\n \n .. include:: ktadd-note.fragment\n \n-Java keystore file for TLS\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n+Configuration for TLS\n+^^^^^^^^^^^^^^^^^^^^^\n \n-When using Kerberos authentication, access to the Trino coordinator should be\n-through HTTPS. You can do it by creating a :ref:`server_java_keystore` on the\n-coordinator.\n+When using Kerberos authentication, access to the Trino coordinator must be\n+through :doc:`HTTPS and TLS </security/https>`.\n \n System access control plugin\n ----------------------------\n@@ -68,10 +67,10 @@ Trino coordinator to use Kerberos authentication and HTTPS. After making the\n following environment changes, you can make the changes to the Trino\n configuration files.\n \n+* :doc:`/security/https`\n * :ref:`server_kerberos_services`\n * :ref:`server_kerberos_configuration`\n * :ref:`server_kerberos_principals`\n-* :ref:`server_java_keystore`\n * :doc:`System Access Control Plugin </develop/system-access-control>`\n \n config.properties"
  },
  {
    "sha": "1e25b4b4dd1310ac37fd84b972d7b26c5c2d8981",
    "filename": "docs/src/main/sphinx/security/tls.rst",
    "status": "modified",
    "additions": 7,
    "deletions": 82,
    "changes": 89,
    "blob_url": "https://github.com/trinodb/trino/blob/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/tls.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad/docs/src/main/sphinx/security/tls.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/security/tls.rst?ref=481aac8f255cc3e1fa5fab2f0b5c23a2c425ddad",
    "patch": "@@ -1,84 +1,9 @@\n-==============================\n-Java keystores and truststores\n-==============================\n+=============\n+Content moved\n+=============\n \n-.. _server_java_keystore:\n+Information about HTTPS and TLS/SSL is now found on the following pages:\n \n-Java keystore file for TLS\n---------------------------\n-\n-Access to the Trino coordinator must be through HTTPS when using Kerberos\n-and LDAP authentication. The Trino coordinator uses a :ref:`Java Keystore\n-<server_java_keystore>` file for its TLS configuration. These keys are\n-generated using :command:`keytool` and stored in a Java Keystore file for the\n-Trino coordinator.\n-\n-The alias in the :command:`keytool` command line should match the principal that the\n-Trino coordinator uses.\n-\n-You'll be prompted for the first and last name. Use the Common Name that will\n-be used in the certificate. In this case, it should be the unqualified hostname\n-of the Trino coordinator. In the following example, you can see this in the prompt\n-that confirms the information is correct:\n-\n-.. code-block:: text\n-\n-    keytool -genkeypair -alias trino -keyalg RSA -keystore keystore.jks\n-    Enter keystore password:\n-    Re-enter new password:\n-    What is your first and last name?\n-      [Unknown]:  trino-coordinator.example.com\n-    What is the name of your organizational unit?\n-      [Unknown]:\n-    What is the name of your organization?\n-      [Unknown]:\n-    What is the name of your City or Locality?\n-      [Unknown]:\n-    What is the name of your State or Province?\n-      [Unknown]:\n-    What is the two-letter country code for this unit?\n-      [Unknown]:\n-    Is CN=trino-coordinator.example.com, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct?\n-      [no]:  yes\n-\n-    Enter key password for <trino>\n-            (RETURN if same as keystore password):\n-\n-.. _cli_java_truststore:\n-\n-Java truststore file for TLS\n-----------------------------\n-\n-Truststore files contain certificates of trusted TLS/SSL servers, or of\n-Certificate Authorities trusted to identify servers. For securing access\n-to the Trino coordinator through HTTPS, the clients can configure truststores.\n-For the Trino CLI to trust the Trino coordinator, the coordinator's certificate\n-must be imported to the CLI's truststore.\n-\n-You can either import the certificate to the default Java truststore, or to a\n-custom truststore. You should be careful, if you choose to use the default\n-one, since you may need to remove the certificates of CAs you do not deem trustworthy.\n-\n-You can use :command:`keytool` to import the certificate to the truststore.\n-In the example, we are going to import ``trino_certificate.cer`` to a custom\n-truststore ``trino_trust.jks``, and you get a prompt asking if the certificate\n-can be trusted or not.\n-\n-.. code-block:: text\n-\n-    $ keytool -import -v -trustcacerts -alias trino_trust -file trino_certificate.cer -keystore trino_trust.jks -keypass <truststore_pass>\n-\n-Troubleshooting\n----------------\n-\n-.. _troubleshooting_keystore:\n-\n-Java keystore file verification\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Verify the password for a keystore file and view its contents using `keytool\n-<https://docs.oracle.com/en/java/javase/11/tools/keytool.html>`_.\n-\n-.. code-block:: text\n-\n-    $ keytool -list -v -keystore /etc/trino/trino.jks\n+* :doc:`/security/https`\n+* :doc:`/security/inspect-pem`\n+* :doc:`/security/inspect-jks`"
  }
]
