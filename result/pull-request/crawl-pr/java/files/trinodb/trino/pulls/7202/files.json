[
  {
    "sha": "ee067eb47d0b7c80c17f23f74bd50d58c1ea3090",
    "filename": "plugin/trino-memsql/src/test/java/io/trino/plugin/memsql/TestMemSqlTypeMapping.java",
    "status": "modified",
    "additions": 143,
    "deletions": 172,
    "changes": 315,
    "blob_url": "https://github.com/trinodb/trino/blob/f40eec5613e87eafea52a03cd444089511f4a5f7/plugin/trino-memsql/src/test/java/io/trino/plugin/memsql/TestMemSqlTypeMapping.java",
    "raw_url": "https://github.com/trinodb/trino/raw/f40eec5613e87eafea52a03cd444089511f4a5f7/plugin/trino-memsql/src/test/java/io/trino/plugin/memsql/TestMemSqlTypeMapping.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-memsql/src/test/java/io/trino/plugin/memsql/TestMemSqlTypeMapping.java?ref=f40eec5613e87eafea52a03cd444089511f4a5f7",
    "patch": "@@ -25,6 +25,7 @@\n import io.trino.testing.datatype.DataSetup;\n import io.trino.testing.datatype.DataType;\n import io.trino.testing.datatype.DataTypeTest;\n+import io.trino.testing.datatype.SqlDataTypeTest;\n import io.trino.testing.sql.SqlExecutor;\n import io.trino.testing.sql.TestTable;\n import io.trino.testing.sql.TrinoSqlExecutor;\n@@ -33,12 +34,9 @@\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n-import java.math.BigDecimal;\n import java.math.RoundingMode;\n import java.time.LocalDate;\n import java.time.ZoneId;\n-import java.util.Objects;\n-import java.util.function.Function;\n \n import static com.google.common.base.Preconditions.checkState;\n import static com.google.common.base.Verify.verify;\n@@ -52,28 +50,19 @@\n import static io.trino.plugin.memsql.MemSqlClient.MEMSQL_VARCHAR_MAX_LENGTH;\n import static io.trino.plugin.memsql.MemSqlQueryRunner.createMemSqlQueryRunner;\n import static io.trino.spi.type.BigintType.BIGINT;\n+import static io.trino.spi.type.CharType.createCharType;\n import static io.trino.spi.type.DateType.DATE;\n import static io.trino.spi.type.DecimalType.createDecimalType;\n import static io.trino.spi.type.DoubleType.DOUBLE;\n import static io.trino.spi.type.IntegerType.INTEGER;\n import static io.trino.spi.type.RealType.REAL;\n import static io.trino.spi.type.SmallintType.SMALLINT;\n import static io.trino.spi.type.TimeZoneKey.UTC_KEY;\n+import static io.trino.spi.type.TinyintType.TINYINT;\n import static io.trino.spi.type.VarcharType.createUnboundedVarcharType;\n import static io.trino.spi.type.VarcharType.createVarcharType;\n-import static io.trino.testing.datatype.DataType.bigintDataType;\n-import static io.trino.testing.datatype.DataType.charDataType;\n import static io.trino.testing.datatype.DataType.dataType;\n-import static io.trino.testing.datatype.DataType.dateDataType;\n-import static io.trino.testing.datatype.DataType.decimalDataType;\n-import static io.trino.testing.datatype.DataType.doubleDataType;\n-import static io.trino.testing.datatype.DataType.formatStringLiteral;\n-import static io.trino.testing.datatype.DataType.integerDataType;\n import static io.trino.testing.datatype.DataType.realDataType;\n-import static io.trino.testing.datatype.DataType.smallintDataType;\n-import static io.trino.testing.datatype.DataType.stringDataType;\n-import static io.trino.testing.datatype.DataType.tinyintDataType;\n-import static io.trino.testing.datatype.DataType.varcharDataType;\n import static io.trino.type.JsonType.JSON;\n import static java.lang.String.format;\n import static java.math.RoundingMode.HALF_UP;\n@@ -104,67 +93,62 @@ public final void destroy()\n     @Test\n     public void testBasicTypes()\n     {\n-        DataTypeTest.create()\n-                .addRoundTrip(bigintDataType(), 123_456_789_012L)\n-                .addRoundTrip(integerDataType(), 1_234_567_890)\n-                .addRoundTrip(smallintDataType(), (short) 32_456)\n-                .addRoundTrip(tinyintDataType(), (byte) 125)\n-                .addRoundTrip(doubleDataType(), 123.45d)\n-                .addRoundTrip(realDataType(), 123.45f)\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"bigint\", \"123456789012\", BIGINT, \"123456789012\")\n+                .addRoundTrip(\"integer\", \"1234567890\", INTEGER, \"1234567890\")\n+                .addRoundTrip(\"smallint\", \"32456\", SMALLINT, \"SMALLINT '32456'\")\n+                .addRoundTrip(\"tinyint\", \"125\", TINYINT, \"TINYINT '125'\")\n+                .addRoundTrip(\"double\", \"123.45\", DOUBLE, \"DOUBLE '123.45'\")\n+                // TODO: fails in SqlDataTypeTest#verifyPredicate\n+                // .addRoundTrip(\"real\", \"123.45\", REAL, \"REAL '123.45'\")\n                 .execute(getQueryRunner(), trinoCreateAsSelect(\"test_basic_types\"));\n     }\n \n     @Test\n     public void testFloat()\n     {\n-        singlePrecisionFloatingPointTests(realDataType())\n-                .execute(getQueryRunner(), trinoCreateAsSelect(\"trino_test_float\"));\n-        singlePrecisionFloatingPointTests(memSqlFloatDataType())\n-                .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.memsql_test_float\"));\n-    }\n+        // TODO: convert to SqlDataTypeTest (fails in SqlDataTypeTest#verifyPredicate)\n \n-    private static DataTypeTest singlePrecisionFloatingPointTests(DataType<Float> floatType)\n-    {\n         // we are not testing Nan/-Infinity/+Infinity as those are not supported by MemSQL\n-        return DataTypeTest.create()\n-                .addRoundTrip(floatType, 3.14f)\n+        DataTypeTest.create()\n+                .addRoundTrip(realDataType(), 3.14f)\n+                // TODO Overeagerly rounded by MemSQL to 3.14159\n+                // .addRoundTrip(realDataType(), 3.1415927f)\n+                .addRoundTrip(realDataType(), null)\n+                .execute(getQueryRunner(), trinoCreateAsSelect(\"trino_test_float\"));\n+\n+        DataTypeTest.create()\n+                .addRoundTrip(memSqlFloatDataType(), 3.14f)\n                 // TODO Overeagerly rounded by MemSQL to 3.14159\n                 // .addRoundTrip(floatType, 3.1415927f)\n-                .addRoundTrip(floatType, null);\n+                .addRoundTrip(memSqlFloatDataType(), null)\n+                .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.memsql_test_float\"));\n     }\n \n     @Test\n     public void testDouble()\n     {\n-        doublePrecisionFloatingPointTests(doubleDataType())\n+        // we are not testing Nan/-Infinity/+Infinity as those are not supported by MemSQL\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"double\", \"1.0E100\", DOUBLE, \"DOUBLE '1.0E100'\")\n+                .addRoundTrip(\"double\", \"NULL\", DOUBLE, \"CAST(NULL AS double)\")\n                 .execute(getQueryRunner(), trinoCreateAsSelect(\"trino_test_double\"));\n-        doublePrecisionFloatingPointTests(memSqlDoubleDataType())\n-                .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.memsql_test_double\"));\n-    }\n \n-    private static DataTypeTest doublePrecisionFloatingPointTests(DataType<Double> doubleType)\n-    {\n-        // we are not testing Nan/-Infinity/+Infinity as those are not supported by MemSQL\n-        return DataTypeTest.create()\n-                .addRoundTrip(doubleType, 1.0e100d)\n-                .addRoundTrip(doubleType, null);\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"double precision\", \"1.0E100\", DOUBLE, \"DOUBLE '1.0E100'\")\n+                .addRoundTrip(\"double precision\", \"NULL\", DOUBLE, \"CAST(NULL AS double)\")\n+                .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.memsql_test_double\"));\n     }\n \n     @Test\n     public void testUnsignedTypes()\n     {\n-        DataType<Short> memSqlUnsignedTinyInt = DataType.dataType(\"TINYINT UNSIGNED\", SMALLINT, Objects::toString);\n-        DataType<Integer> memSqlUnsignedSmallInt = DataType.dataType(\"SMALLINT UNSIGNED\", INTEGER, Objects::toString);\n-        DataType<Long> memSqlUnsignedInt = DataType.dataType(\"INT UNSIGNED\", BIGINT, Objects::toString);\n-        DataType<Long> memSqlUnsignedInteger = DataType.dataType(\"INTEGER UNSIGNED\", BIGINT, Objects::toString);\n-        DataType<BigDecimal> memSqlUnsignedBigint = DataType.dataType(\"BIGINT UNSIGNED\", createDecimalType(20), Objects::toString);\n-\n-        DataTypeTest.create()\n-                .addRoundTrip(memSqlUnsignedTinyInt, (short) 255)\n-                .addRoundTrip(memSqlUnsignedSmallInt, 65_535)\n-                .addRoundTrip(memSqlUnsignedInt, 4_294_967_295L)\n-                .addRoundTrip(memSqlUnsignedInteger, 4_294_967_295L)\n-                .addRoundTrip(memSqlUnsignedBigint, new BigDecimal(\"18446744073709551615\"))\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"tinyint unsigned\", \"255\", SMALLINT, \"SMALLINT '255'\")\n+                .addRoundTrip(\"smallint unsigned\", \"65535\", INTEGER)\n+                .addRoundTrip(\"int unsigned\", \"4294967295\", BIGINT)\n+                .addRoundTrip(\"integer unsigned\", \"4294967295\", BIGINT)\n+                .addRoundTrip(\"bigint unsigned\", \"18446744073709551615\", createDecimalType(20, 0), \"CAST('18446744073709551615' AS decimal(20, 0))\")\n                 .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.memsql_test_unsigned\"));\n     }\n \n@@ -182,25 +166,27 @@ public void testTrinoCreatedDecimal()\n                 .execute(getQueryRunner(), trinoCreateAsSelect(\"test_decimal\"));\n     }\n \n-    private DataTypeTest decimalTests()\n-    {\n-        return DataTypeTest.create()\n-                .addRoundTrip(decimalDataType(3, 0), new BigDecimal(\"193\"))\n-                .addRoundTrip(decimalDataType(3, 0), new BigDecimal(\"19\"))\n-                .addRoundTrip(decimalDataType(3, 0), new BigDecimal(\"-193\"))\n-                .addRoundTrip(decimalDataType(3, 1), new BigDecimal(\"10.0\"))\n-                .addRoundTrip(decimalDataType(3, 1), new BigDecimal(\"10.1\"))\n-                .addRoundTrip(decimalDataType(3, 1), new BigDecimal(\"-10.1\"))\n-                .addRoundTrip(decimalDataType(4, 2), new BigDecimal(\"2\"))\n-                .addRoundTrip(decimalDataType(4, 2), new BigDecimal(\"2.3\"))\n-                .addRoundTrip(decimalDataType(24, 2), new BigDecimal(\"2\"))\n-                .addRoundTrip(decimalDataType(24, 2), new BigDecimal(\"2.3\"))\n-                .addRoundTrip(decimalDataType(24, 2), new BigDecimal(\"123456789.3\"))\n-                .addRoundTrip(decimalDataType(24, 4), new BigDecimal(\"12345678901234567890.31\"))\n-                .addRoundTrip(decimalDataType(30, 5), new BigDecimal(\"3141592653589793238462643.38327\"))\n-                .addRoundTrip(decimalDataType(30, 5), new BigDecimal(\"-3141592653589793238462643.38327\"))\n-                .addRoundTrip(decimalDataType(38, 0), new BigDecimal(\"27182818284590452353602874713526624977\"))\n-                .addRoundTrip(decimalDataType(38, 0), new BigDecimal(\"-27182818284590452353602874713526624977\"));\n+    private SqlDataTypeTest decimalTests()\n+    {\n+        return SqlDataTypeTest.create()\n+                .addRoundTrip(\"decimal(3, 0)\", \"CAST(NULL AS decimal(3, 0))\", createDecimalType(3, 0), \"CAST(NULL AS decimal(3, 0))\")\n+                .addRoundTrip(\"decimal(3, 0)\", \"CAST('193' AS decimal(3, 0))\", createDecimalType(3, 0), \"CAST('193' AS decimal(3, 0))\")\n+                .addRoundTrip(\"decimal(3, 0)\", \"CAST('19' AS decimal(3, 0))\", createDecimalType(3, 0), \"CAST('19' AS decimal(3, 0))\")\n+                .addRoundTrip(\"decimal(3, 0)\", \"CAST('-193' AS decimal(3, 0))\", createDecimalType(3, 0), \"CAST('-193' AS decimal(3, 0))\")\n+                .addRoundTrip(\"decimal(3, 1)\", \"CAST('10.0' AS decimal(3, 1))\", createDecimalType(3, 1), \"CAST('10.0' AS decimal(3, 1))\")\n+                .addRoundTrip(\"decimal(3, 1)\", \"CAST('10.1' AS decimal(3, 1))\", createDecimalType(3, 1), \"CAST('10.1' AS decimal(3, 1))\")\n+                .addRoundTrip(\"decimal(3, 1)\", \"CAST('-10.1' AS decimal(3, 1))\", createDecimalType(3, 1), \"CAST('-10.1' AS decimal(3, 1))\")\n+                .addRoundTrip(\"decimal(4, 2)\", \"CAST('2' AS decimal(4, 2))\", createDecimalType(4, 2), \"CAST('2' AS decimal(4, 2))\")\n+                .addRoundTrip(\"decimal(4, 2)\", \"CAST('2.3' AS decimal(4, 2))\", createDecimalType(4, 2), \"CAST('2.3' AS decimal(4, 2))\")\n+                .addRoundTrip(\"decimal(24, 2)\", \"CAST('2' AS decimal(24, 2))\", createDecimalType(24, 2), \"CAST('2' AS decimal(24, 2))\")\n+                .addRoundTrip(\"decimal(24, 2)\", \"CAST('2.3' AS decimal(24, 2))\", createDecimalType(24, 2), \"CAST('2.3' AS decimal(24, 2))\")\n+                .addRoundTrip(\"decimal(24, 2)\", \"CAST('123456789.3' AS decimal(24, 2))\", createDecimalType(24, 2), \"CAST('123456789.3' AS decimal(24, 2))\")\n+                .addRoundTrip(\"decimal(24, 4)\", \"CAST('12345678901234567890.31' AS decimal(24, 4))\", createDecimalType(24, 4), \"CAST('12345678901234567890.31' AS decimal(24, 4))\")\n+                .addRoundTrip(\"decimal(30, 5)\", \"CAST('3141592653589793238462643.38327' AS decimal(30, 5))\", createDecimalType(30, 5), \"CAST('3141592653589793238462643.38327' AS decimal(30, 5))\")\n+                .addRoundTrip(\"decimal(30, 5)\", \"CAST('-3141592653589793238462643.38327' AS decimal(30, 5))\", createDecimalType(30, 5), \"CAST('-3141592653589793238462643.38327' AS decimal(30, 5))\")\n+                .addRoundTrip(\"decimal(38, 0)\", \"CAST(NULL AS decimal(38, 0))\", createDecimalType(38, 0), \"CAST(NULL AS decimal(38, 0))\")\n+                .addRoundTrip(\"decimal(38, 0)\", \"CAST('27182818284590452353602874713526624977' AS decimal(38, 0))\", createDecimalType(38, 0), \"CAST('27182818284590452353602874713526624977' AS decimal(38, 0))\")\n+                .addRoundTrip(\"decimal(38, 0)\", \"CAST('-27182818284590452353602874713526624977' AS decimal(38, 0))\", createDecimalType(38, 0), \"CAST('-27182818284590452353602874713526624977' AS decimal(38, 0))\");\n     }\n \n     @Test\n@@ -386,72 +372,71 @@ public void testMemSqlCreatedParameterizedChar()\n                 .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.memsql_test_parameterized_char\"));\n     }\n \n-    private DataTypeTest memSqlCharTypeTest()\n+    private SqlDataTypeTest memSqlCharTypeTest()\n     {\n-        return DataTypeTest.create()\n-                .addRoundTrip(charDataType(\"char\", 1), \"\")\n-                .addRoundTrip(charDataType(\"char\", 1), \"a\")\n-                .addRoundTrip(charDataType(1), \"\")\n-                .addRoundTrip(charDataType(1), \"a\")\n-                .addRoundTrip(charDataType(8), \"abc\")\n-                .addRoundTrip(charDataType(8), \"12345678\")\n-                .addRoundTrip(charDataType(255), \"a\".repeat(255));\n+        return SqlDataTypeTest.create()\n+                .addRoundTrip(\"char(1)\", \"''\", createCharType(1), \"CAST('' AS char(1))\")\n+                .addRoundTrip(\"char(1)\", \"'a'\", createCharType(1), \"CAST('a' AS char(1))\")\n+                .addRoundTrip(\"char(8)\", \"'abc'\", createCharType(8), \"CAST('abc' AS char(8))\")\n+                .addRoundTrip(\"char(8)\", \"'12345678'\", createCharType(8), \"CAST('12345678' AS char(8))\")\n+                .addRoundTrip(\"char(255)\", format(\"'%s'\", \"a\".repeat(255)), createCharType(255), format(\"CAST('%s' AS char(255))\", \"a\".repeat(255)));\n     }\n \n     @Test\n     public void testMemSqlCreatedParameterizedCharUnicode()\n     {\n-        DataTypeTest.create()\n-                .addRoundTrip(charDataType(1, CHARACTER_SET_UTF8), \"\\u653b\")\n-                .addRoundTrip(charDataType(5, CHARACTER_SET_UTF8), \"\\u653b\\u6bbb\")\n-                .addRoundTrip(charDataType(5, CHARACTER_SET_UTF8), \"\\u653b\\u6bbb\\u6a5f\\u52d5\\u968a\")\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"char(1)\", \"'攻'\", createCharType(1), \"CAST('攻' AS char(1))\")\n+                .addRoundTrip(\"char(5)\", \"'攻殻'\", createCharType(5), \"CAST('攻殻' AS char(5))\")\n+                .addRoundTrip(\"char(5)\", \"'攻殻機動隊'\", createCharType(5), \"CAST('攻殻機動隊' AS char(5))\")\n                 .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.memsql_test_parameterized_varchar\"));\n     }\n \n     @Test\n     public void testTrinoCreatedParameterizedVarchar()\n     {\n-        DataTypeTest.create()\n-                .addRoundTrip(stringDataType(\"varchar(10)\", createVarcharType(10)), \"text_a\")\n-                .addRoundTrip(stringDataType(\"varchar(255)\", createVarcharType(255)), \"text_b\")\n-                .addRoundTrip(stringDataType(\"varchar(256)\", createVarcharType(256)), \"text_c\")\n-                .addRoundTrip(stringDataType(\"varchar(\" + MEMSQL_VARCHAR_MAX_LENGTH + \")\", createVarcharType(MEMSQL_VARCHAR_MAX_LENGTH)), \"text_memsql_max\")\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"varchar(10)\", \"'text_a'\", createVarcharType(10), \"CAST('text_a' AS varchar(10))\")\n+                .addRoundTrip(\"varchar(255)\", \"'text_b'\", createVarcharType(255), \"CAST('text_b' AS varchar(255))\")\n+                .addRoundTrip(\"varchar(256)\", \"'text_c'\", createVarcharType(256), \"CAST('text_c' AS varchar(256))\")\n+                .addRoundTrip(\"varchar(\" + MEMSQL_VARCHAR_MAX_LENGTH + \")\", \"'text_memsql_max'\", createVarcharType(MEMSQL_VARCHAR_MAX_LENGTH), \"CAST('text_memsql_max' AS varchar(\" + MEMSQL_VARCHAR_MAX_LENGTH + \"))\")\n                 // types larger than max VARCHAR(n) for MemSQL get mapped to one of TEXT/MEDIUMTEXT/LONGTEXT\n-                .addRoundTrip(stringDataType(\"varchar(\" + (MEMSQL_VARCHAR_MAX_LENGTH + 1) + \")\", createVarcharType(65535)), \"text_memsql_larger_than_max\")\n-                .addRoundTrip(stringDataType(\"varchar(65535)\", createVarcharType(65535)), \"text_d\")\n-                .addRoundTrip(stringDataType(\"varchar(65536)\", createVarcharType(16777215)), \"text_e\")\n-                .addRoundTrip(stringDataType(\"varchar(16777215)\", createVarcharType(16777215)), \"text_f\")\n-                .addRoundTrip(stringDataType(\"varchar(16777216)\", createUnboundedVarcharType()), \"text_g\")\n-                .addRoundTrip(stringDataType(\"varchar(\" + VarcharType.MAX_LENGTH + \")\", createUnboundedVarcharType()), \"text_h\")\n-                .addRoundTrip(varcharDataType(), \"unbounded\")\n+                .addRoundTrip(\"varchar(\" + (MEMSQL_VARCHAR_MAX_LENGTH + 1) + \")\", \"'text_memsql_larger_than_max'\", createVarcharType(65535), \"CAST('text_memsql_larger_than_max' AS varchar(65535))\")\n+                .addRoundTrip(\"varchar(65535)\", \"'text_d'\", createVarcharType(65535), \"CAST('text_d' AS varchar(65535))\")\n+                .addRoundTrip(\"varchar(65536)\", \"'text_e'\", createVarcharType(16777215), \"CAST('text_e' AS varchar(16777215))\")\n+                .addRoundTrip(\"varchar(16777215)\", \"'text_f'\", createVarcharType(16777215), \"CAST('text_f' AS varchar(16777215))\")\n+                .addRoundTrip(\"varchar(16777216)\", \"'text_g'\", createUnboundedVarcharType(), \"CAST('text_g' AS varchar)\")\n+                .addRoundTrip(\"varchar(\" + VarcharType.MAX_LENGTH + \")\", \"'text_h'\", createUnboundedVarcharType(), \"CAST('text_h' AS varchar)\")\n+                .addRoundTrip(\"varchar\", \"'unbounded'\", createUnboundedVarcharType(), \"CAST('unbounded' AS varchar)\")\n                 .execute(getQueryRunner(), trinoCreateAsSelect(\"trino_test_parameterized_varchar\"));\n     }\n \n     @Test\n     public void testMemSqlCreatedParameterizedVarchar()\n     {\n-        DataTypeTest.create()\n-                .addRoundTrip(stringDataType(\"tinytext\", createVarcharType(255)), \"a\")\n-                .addRoundTrip(stringDataType(\"text\", createVarcharType(65535)), \"b\")\n-                .addRoundTrip(stringDataType(\"mediumtext\", createVarcharType(16777215)), \"c\")\n-                .addRoundTrip(stringDataType(\"longtext\", createUnboundedVarcharType()), \"d\")\n-                .addRoundTrip(varcharDataType(32), \"e\")\n-                .addRoundTrip(varcharDataType(15000), \"f\")\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"tinytext\", \"'a'\", createVarcharType(255), \"CAST('a' AS varchar(255))\")\n+                .addRoundTrip(\"text\", \"'b'\", createVarcharType(65535), \"CAST('b' AS varchar(65535))\")\n+                .addRoundTrip(\"mediumtext\", \"'c'\", createVarcharType(16777215), \"CAST('c' AS varchar(16777215))\")\n+                .addRoundTrip(\"longtext\", \"'unbounded'\", createUnboundedVarcharType(), \"CAST('unbounded' AS varchar)\")\n+                .addRoundTrip(\"varchar(32)\", \"'e'\", createVarcharType(32), \"CAST('e' AS varchar(32))\")\n+                .addRoundTrip(\"varchar(15000)\", \"'f'\", createVarcharType(15000), \"CAST('f' AS varchar(15000))\")\n                 .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.memsql_test_parameterized_varchar\"));\n     }\n \n     @Test\n     public void testMemSqlCreatedParameterizedVarcharUnicode()\n     {\n-        String sampleUnicodeText = \"\\u653b\\u6bbb\\u6a5f\\u52d5\\u968a\";\n-        DataTypeTest.create()\n-                .addRoundTrip(stringDataType(\"tinytext \" + CHARACTER_SET_UTF8, createVarcharType(255)), sampleUnicodeText)\n-                .addRoundTrip(stringDataType(\"text \" + CHARACTER_SET_UTF8, createVarcharType(65535)), sampleUnicodeText)\n-                .addRoundTrip(stringDataType(\"mediumtext \" + CHARACTER_SET_UTF8, createVarcharType(16777215)), sampleUnicodeText)\n-                .addRoundTrip(stringDataType(\"longtext \" + CHARACTER_SET_UTF8, createUnboundedVarcharType()), sampleUnicodeText)\n-                .addRoundTrip(varcharDataType(sampleUnicodeText.length(), CHARACTER_SET_UTF8), sampleUnicodeText)\n-                .addRoundTrip(varcharDataType(32, CHARACTER_SET_UTF8), sampleUnicodeText)\n-                .addRoundTrip(varcharDataType(20000, CHARACTER_SET_UTF8), sampleUnicodeText)\n+        String sampleUnicodeLiteral = \"'\\u653b\\u6bbb\\u6a5f\\u52d5\\u968a'\";\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"tinytext \" + CHARACTER_SET_UTF8, sampleUnicodeLiteral, createVarcharType(255), \"CAST(\" + sampleUnicodeLiteral + \" AS varchar(255))\")\n+                .addRoundTrip(\"text \" + CHARACTER_SET_UTF8, sampleUnicodeLiteral, createVarcharType(65535), \"CAST(\" + sampleUnicodeLiteral + \" AS varchar(65535))\")\n+                .addRoundTrip(\"mediumtext \" + CHARACTER_SET_UTF8, sampleUnicodeLiteral, createVarcharType(16777215), \"CAST(\" + sampleUnicodeLiteral + \" AS varchar(16777215))\")\n+                .addRoundTrip(\"longtext \" + CHARACTER_SET_UTF8, sampleUnicodeLiteral, createUnboundedVarcharType(), \"CAST(\" + sampleUnicodeLiteral + \" AS varchar)\")\n+                .addRoundTrip(\"varchar(\" + sampleUnicodeLiteral.length() + \") \" + CHARACTER_SET_UTF8, sampleUnicodeLiteral,\n+                        createVarcharType(sampleUnicodeLiteral.length()), \"CAST(\" + sampleUnicodeLiteral + \" AS varchar(\" + sampleUnicodeLiteral.length() + \"))\")\n+                .addRoundTrip(\"varchar(32) \" + CHARACTER_SET_UTF8, sampleUnicodeLiteral, createVarcharType(32), \"CAST(\" + sampleUnicodeLiteral + \" AS varchar(32))\")\n+                .addRoundTrip(\"varchar(20000) \" + CHARACTER_SET_UTF8, sampleUnicodeLiteral, createVarcharType(20000), \"CAST(\" + sampleUnicodeLiteral + \" AS varchar(20000))\")\n                 .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.memsql_test_parameterized_varchar_unicode\"));\n     }\n \n@@ -463,40 +448,35 @@ public void testDate()\n \n         ZoneId someZone = ZoneId.of(\"Europe/Vilnius\");\n \n-        for (String timeZoneId : ImmutableList.of(UTC_KEY.getId(), jvmZone.getId(), someZone.getId())) {\n-            Session session = Session.builder(getSession())\n-                    .setTimeZoneKey(TimeZoneKey.getTimeZoneKey(timeZoneId))\n-                    .build();\n-            dateTestCases(memSqlDateDataType(value -> formatStringLiteral(value.toString())), jvmZone, someZone)\n-                    .execute(getQueryRunner(), session, memSqlCreateAndInsert(\"tpch.test_date\"));\n-            dateTestCases(dateDataType(), jvmZone, someZone)\n-                    .execute(getQueryRunner(), session, trinoCreateAsSelect(session, \"test_date\"));\n-            dateTestCases(dateDataType(), jvmZone, someZone)\n-                    .execute(getQueryRunner(), session, trinoCreateAsSelect(getSession(), \"test_date\"));\n-            dateTestCases(dateDataType(), jvmZone, someZone)\n-                    .execute(getQueryRunner(), session, trinoCreateAndInsert(session, \"test_date\"));\n-        }\n-    }\n-\n-    private DataTypeTest dateTestCases(DataType<LocalDate> dateDataType, ZoneId jvmZone, ZoneId someZone)\n-    {\n         LocalDate dateOfLocalTimeChangeForwardAtMidnightInJvmZone = LocalDate.of(1970, 1, 1);\n         verify(jvmZone.getRules().getValidOffsets(dateOfLocalTimeChangeForwardAtMidnightInJvmZone.atStartOfDay()).isEmpty());\n-\n         LocalDate dateOfLocalTimeChangeForwardAtMidnightInSomeZone = LocalDate.of(1983, 4, 1);\n         verify(someZone.getRules().getValidOffsets(dateOfLocalTimeChangeForwardAtMidnightInSomeZone.atStartOfDay()).isEmpty());\n         LocalDate dateOfLocalTimeChangeBackwardAtMidnightInSomeZone = LocalDate.of(1983, 10, 1);\n         verify(someZone.getRules().getValidOffsets(dateOfLocalTimeChangeBackwardAtMidnightInSomeZone.atStartOfDay().minusMinutes(1)).size() == 2);\n \n-        return DataTypeTest.create()\n-                .addRoundTrip(dateDataType, LocalDate.of(1952, 4, 3)) // before epoch\n-                .addRoundTrip(dateDataType, LocalDate.of(1970, 1, 1))\n-                .addRoundTrip(dateDataType, LocalDate.of(1970, 2, 3))\n-                .addRoundTrip(dateDataType, LocalDate.of(2017, 7, 1)) // summer on northern hemisphere (possible DST)\n-                .addRoundTrip(dateDataType, LocalDate.of(2017, 1, 1)) // winter on northern hemisphere (possible DST on southern hemisphere)\n-                .addRoundTrip(dateDataType, dateOfLocalTimeChangeForwardAtMidnightInJvmZone)\n-                .addRoundTrip(dateDataType, dateOfLocalTimeChangeForwardAtMidnightInSomeZone)\n-                .addRoundTrip(dateDataType, dateOfLocalTimeChangeBackwardAtMidnightInSomeZone);\n+        for (String timeZoneId : ImmutableList.of(UTC_KEY.getId(), jvmZone.getId(), someZone.getId())) {\n+            Session session = Session.builder(getSession())\n+                    .setTimeZoneKey(TimeZoneKey.getTimeZoneKey(timeZoneId))\n+                    .build();\n+\n+            SqlDataTypeTest.create()\n+                    .addRoundTrip(\"date\", \"CAST('1952-04-03' AS date)\", DATE, \"DATE '1952-04-03'\") // before epoch\n+                    .addRoundTrip(\"date\", \"CAST('1970-01-01' AS date)\", DATE, \"DATE '1970-01-01'\")\n+                    .addRoundTrip(\"date\", \"CAST('1970-02-03' AS date)\", DATE, \"DATE '1970-02-03'\")\n+                    .addRoundTrip(\"date\", \"CAST('2017-07-01' AS date)\", DATE, \"DATE '2017-07-01'\") // summer on northern hemisphere (possible DST)\n+                    .addRoundTrip(\"date\", \"CAST('2017-01-01' AS date)\", DATE, \"DATE '2017-01-01'\") // winter on northern hemisphere (possible DST on southern hemisphere)\n+                    .addRoundTrip(\"date\", \"CAST('\" + dateOfLocalTimeChangeForwardAtMidnightInJvmZone.toString() + \"' AS date)\",\n+                            DATE, \"DATE '\" + dateOfLocalTimeChangeForwardAtMidnightInJvmZone.toString() + \"'\")\n+                    .addRoundTrip(\"date\", \"CAST('\" + dateOfLocalTimeChangeForwardAtMidnightInSomeZone.toString() + \"' AS date)\",\n+                            DATE, \"DATE '\" + dateOfLocalTimeChangeForwardAtMidnightInSomeZone.toString() + \"'\")\n+                    .addRoundTrip(\"date\", \"CAST('\" + dateOfLocalTimeChangeBackwardAtMidnightInSomeZone.toString() + \"' AS date)\",\n+                            DATE, \"DATE '\" + dateOfLocalTimeChangeBackwardAtMidnightInSomeZone.toString() + \"'\")\n+                    .execute(getQueryRunner(), session, memSqlCreateAndInsert(\"tpch.test_date\"))\n+                    .execute(getQueryRunner(), session, trinoCreateAsSelect(session, \"test_date\"))\n+                    .execute(getQueryRunner(), session, trinoCreateAsSelect(getSession(), \"test_date\"))\n+                    .execute(getQueryRunner(), session, trinoCreateAndInsert(session, \"test_date\"));\n+        }\n     }\n \n     @Test\n@@ -516,28 +496,34 @@ public void testTimestamp()\n     @Test\n     public void testJson()\n     {\n-        jsonTestCases(memSqlJsonDataType(value -> \"JSON \" + formatStringLiteral(value)))\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"json\", \"json_parse('{}')\", JSON, \"JSON '{}'\")\n+                .addRoundTrip(\"json\", \"null\", JSON, \"CAST(NULL AS json)\")\n+                .addRoundTrip(\"json\", \"json_parse('null')\", JSON, \"JSON 'null'\")\n+                .addRoundTrip(\"json\", \"123.4\", JSON, \"JSON '123.4'\")\n+                .addRoundTrip(\"json\", \"'abc'\", JSON, \"JSON '\\\"abc\\\"'\")\n+                .addRoundTrip(\"json\", \"'text with '' apostrophes'\", JSON, \"JSON '\\\"text with '' apostrophes\\\"'\")\n+                .addRoundTrip(\"json\", \"''\", JSON, \"JSON '\\\"\\\"'\")\n+                .addRoundTrip(\"json\", \"json_parse('{\\\"a\\\":1,\\\"b\\\":2}')\", JSON, \"JSON '{\\\"a\\\":1,\\\"b\\\":2}'\")\n+                .addRoundTrip(\"json\", \"json_parse('{\\\"a\\\":[1,2,3],\\\"b\\\":{\\\"aa\\\":11,\\\"bb\\\":[{\\\"a\\\":1,\\\"b\\\":2},{\\\"a\\\":0}]}}')\", JSON, \"JSON '{\\\"a\\\":[1,2,3],\\\"b\\\":{\\\"aa\\\":11,\\\"bb\\\":[{\\\"a\\\":1,\\\"b\\\":2},{\\\"a\\\":0}]}}'\")\n+                .addRoundTrip(\"json\", \"json_parse('[]')\", JSON, \"JSON '[]'\")\n                 .execute(getQueryRunner(), trinoCreateAsSelect(\"trino_test_json\"));\n+\n         // MemSQL doesn't support CAST to JSON but accepts string literals as JSON values\n-        jsonTestCases(memSqlJsonDataType(value -> format(\"%s\", formatStringLiteral(value))))\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"json\", \"'{}'\", JSON, \"JSON '{}'\")\n+                .addRoundTrip(\"json\", \"null\", JSON, \"CAST(NULL AS json)\")\n+                .addRoundTrip(\"json\", \"'null'\", JSON, \"JSON 'null'\")\n+                .addRoundTrip(\"json\", \"'123.4'\", JSON, \"JSON '123.4'\")\n+                .addRoundTrip(\"json\", \"'\\\"abc\\\"'\", JSON, \"JSON '\\\"abc\\\"'\")\n+                .addRoundTrip(\"json\", \"'\\\"text with '' apostrophes\\\"'\", JSON, \"JSON '\\\"text with '' apostrophes\\\"'\")\n+                .addRoundTrip(\"json\", \"'\\\"\\\"'\", JSON, \"JSON '\\\"\\\"'\")\n+                .addRoundTrip(\"json\", \"'{\\\"a\\\":1,\\\"b\\\":2}'\", JSON, \"JSON '{\\\"a\\\":1,\\\"b\\\":2}'\")\n+                .addRoundTrip(\"json\", \"'{\\\"a\\\":[1,2,3],\\\"b\\\":{\\\"aa\\\":11,\\\"bb\\\":[{\\\"a\\\":1,\\\"b\\\":2},{\\\"a\\\":0}]}}'\", JSON, \"JSON '{\\\"a\\\":[1,2,3],\\\"b\\\":{\\\"aa\\\":11,\\\"bb\\\":[{\\\"a\\\":1,\\\"b\\\":2},{\\\"a\\\":0}]}}'\")\n+                .addRoundTrip(\"json\", \"'[]'\", JSON, \"JSON '[]'\")\n                 .execute(getQueryRunner(), memSqlCreateAndInsert(\"tpch.mysql_test_json\"));\n     }\n \n-    private DataTypeTest jsonTestCases(DataType<String> jsonDataType)\n-    {\n-        return DataTypeTest.create()\n-                .addRoundTrip(jsonDataType, \"{}\")\n-                .addRoundTrip(jsonDataType, null)\n-                .addRoundTrip(jsonDataType, \"null\")\n-                .addRoundTrip(jsonDataType, \"123.4\")\n-                .addRoundTrip(jsonDataType, \"\\\"abc\\\"\")\n-                .addRoundTrip(jsonDataType, \"\\\"text with ' apostrophes\\\"\")\n-                .addRoundTrip(jsonDataType, \"\\\"\\\"\")\n-                .addRoundTrip(jsonDataType, \"{\\\"a\\\":1,\\\"b\\\":2}\")\n-                .addRoundTrip(jsonDataType, \"{\\\"a\\\":[1,2,3],\\\"b\\\":{\\\"aa\\\":11,\\\"bb\\\":[{\\\"a\\\":1,\\\"b\\\":2},{\\\"a\\\":0}]}}\")\n-                .addRoundTrip(jsonDataType, \"[]\");\n-    }\n-\n     private void testUnsupportedDataType(String databaseDataType)\n     {\n         SqlExecutor jdbcSqlExecutor = memSqlServer::execute;\n@@ -572,23 +558,8 @@ private DataSetup memSqlCreateAndInsert(String tableNamePrefix)\n         return new CreateAndInsertDataSetup(memSqlServer::execute, tableNamePrefix);\n     }\n \n-    private static DataType<LocalDate> memSqlDateDataType(Function<LocalDate, String> toLiteral)\n-    {\n-        return dataType(\"date\", DATE, toLiteral);\n-    }\n-\n-    private static DataType<String> memSqlJsonDataType(Function<String, String> toLiteral)\n-    {\n-        return dataType(\"json\", JSON, toLiteral);\n-    }\n-\n     private static DataType<Float> memSqlFloatDataType()\n     {\n         return dataType(\"float\", REAL, Object::toString);\n     }\n-\n-    private static DataType<Double> memSqlDoubleDataType()\n-    {\n-        return dataType(\"double precision\", DOUBLE, Object::toString);\n-    }\n }"
  }
]
