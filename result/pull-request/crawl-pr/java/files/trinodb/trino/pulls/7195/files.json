[
  {
    "sha": "1a254501fa2969ae03f96e14cf0611442d24e97c",
    "filename": "docs/src/main/sphinx/develop.rst",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/trinodb/trino/blob/a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4/docs/src/main/sphinx/develop.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4/docs/src/main/sphinx/develop.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/develop.rst?ref=a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4",
    "patch": "@@ -18,3 +18,4 @@ This guide is intended for Trino contributors and plugin developers.\n     develop/certificate-authenticator\n     develop/group-provider\n     develop/event-listener\n+    develop/client-protocol"
  },
  {
    "sha": "7ca48be162c2e33764a7e33a8c9414e380522d34",
    "filename": "docs/src/main/sphinx/develop/client-protocol.rst",
    "status": "added",
    "additions": 265,
    "deletions": 0,
    "changes": 265,
    "blob_url": "https://github.com/trinodb/trino/blob/a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4/docs/src/main/sphinx/develop/client-protocol.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4/docs/src/main/sphinx/develop/client-protocol.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/develop/client-protocol.rst?ref=a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4",
    "patch": "@@ -0,0 +1,265 @@\n+======================\n+Trino client REST API\n+======================\n+\n+The REST API allows clients to submit SQL queries to Trino and receive the\n+results. Clients include the CLI, the JDBC driver, and others provided by\n+the community. The preferred method to interact with Trino is using these\n+existing clients. This document provides details about the API for reference.\n+It can also be used to implement your own client, if necessary.\n+\n+HTTP methods\n+------------\n+\n+* A ``POST`` to ``/v1/statement`` runs the query string in the ``POST`` body,\n+  and returns a JSON document containing the query results.  If there are more\n+  results, the JSON document contains a ``nextUri`` URL attribute.\n+* A ``GET`` to the ``nextUri`` attribute returns the next batch of query results.\n+* A ``DELETE`` to ``nextUri`` terminates a running query.\n+\n+Overview of query processing\n+----------------------------\n+\n+A Trino client request is initiated by an HTTP ``POST`` to the endpoint\n+``/v1/statement``, with a ``POST`` body consisting of the SQL query string.\n+The caller may set HTTP header field ``X-Trino-User`` to the username for\n+the session.  A number of other optional header fields are documented in\n+the following sections.\n+\n+If the client request returns an HTTP 503, that means the server was busy,\n+and the client should try again in 50-100 milliseconds.  Any HTTP status other\n+than 503 or 200 means that query processing has failed.\n+\n+The ``/v1/statement`` ``POST`` request returns a JSON document of type\n+``QueryResults``, as well as a collection of response headers.  The\n+``QueryResults`` document contains an ``error`` field of type\n+``QueryError`` if the query has failed, and if that object is not present,\n+the query succeeded.  Important members of ``QueryResults`` are documented\n+in the following sections.\n+\n+If the ``data`` field of the JSON document is set, it contains a list of the\n+rows of data.  The ``columns`` field is set to a list of the\n+names and types of the columns returned by the query.  Most of the response\n+headers are treated like browser cookies by the client, and echoed back\n+as request headers in subsequent client requests, as documented below.\n+\n+If the JSON document returned by the ``POST`` to ``/v1/statement`` does not\n+contain a ``nextUri`` link, the query has completed, either successfully or\n+unsuccessfully, and no additional requests need to be made.  If the\n+``nextUri`` link is present in the document, there are more query results\n+to be fetched.  The client should loop executing a ``GET`` request\n+to the ``nextUri`` returned in the ``QueryResults`` response object until\n+``nextUri`` is absent from the response.\n+\n+The ``status`` field of the JSON document is for human consumption only, and\n+provides a hint about the query state.  It can not be used to tell if the\n+query is finished.\n+\n+Important ``QueryResults`` attributes\n+-------------------------------------\n+\n+The most important attributes of the ``QueryResults`` JSON document returned by the REST API\n+endpoints are listed in this table.  Refer to the class ``io.trino.client.QueryResults`` in\n+module ``trino-client`` for more details.\n+\n+.. list-table:: ``QueryResults attributes``\n+  :widths: 25, 55\n+  :header-rows: 1\n+\n+  * - Attribute\n+    - Description\n+  * - ``id``\n+    - The ID of the query.\n+  * - ``nextUri``\n+    - If present, the URL to use for subsequent ``GET`` or\n+      ``DELETE`` requests.  If not present, the query is complete or\n+      ended in error.\n+  * - ``columns``\n+    - A list of the names and types of the columns returned by the query.\n+  * - ``data``\n+    - The ``data`` attribute contains a list of the rows returned by the\n+      query request.  Each row is itself a list that holds values of the\n+      columns in the row, in the order specified by the ``columns``\n+      attribute.\n+  * - ``updateType``\n+    - A human-readable string representing the operation.  For a\n+      ``CREATE TABLE`` request, the ``updateType`` is\n+      \"CREATE TABLE\"; for ``SET SESSION`` it is \"SET SESSION\"; etc.\n+  * - ``error``\n+    - If query failed, the ``error`` attribute contains a\n+      ``QueryError`` object.  That object contains a ``message``, an\n+      ``errorCode`` and other information about the error.  See the\n+      ``io.trino.client.QueryError`` class in module ``trino-client``\n+      for more details.\n+\n+\n+``QueryResults`` diagnostic attributes\n+--------------------------------------\n+\n+These ``QueryResults`` data members may be useful in tracking down problems:\n+\n+.. list-table:: ``QueryResults diagnostic attributes``\n+  :widths: 20, 20, 40\n+  :header-rows: 1\n+\n+  * - Attribute\n+    - Type\n+    - Description\n+  * - ``queryError``\n+    - ``QueryError``\n+    - Non-null only if the query resulted in an error.\n+  * - ``failureInfo``\n+    - ``FailureInfo``\n+    - ``failureInfo`` has detail on the reason for the failure, including\n+      a stack trace, and ``FailureInfo.errorLocation``, providing the\n+      query line number and column number where the failure was detected.\n+  * - ``warnings``\n+    - ``List<TrinoWarning>``\n+    - A usually-empty list of warnings.\n+  * - ``statementStats``\n+    - ``StatementStats``\n+    - A class containing statistics about the query execution.  Of\n+      particular interest is ``StatementStats.rootStage``, of type\n+      ``StageStats``, providing statistics on the execution of each of\n+      the stages of query processing.\n+\n+Client request headers\n+----------------------\n+\n+This table lists all supported client request headers.  Many of the\n+headers can be updated in the client as response headers, and supplied\n+in subsequent requests, just like browser cookies.\n+\n+.. list-table:: Client request headers\n+  :widths: 30, 50\n+  :header-rows: 1\n+\n+  * - Header name\n+    - Description\n+  * - ``X-Trino-User``\n+    - Specifies the session user; must be supplied with every\n+      request to ``/v1/statement``.\n+  * - ``X-Trino-Source``\n+    - For reporting purposes, this supplies the name of the software\n+      that submitted the query.\n+  * - ``X-Trino-Catalog``\n+    - The catalog context for query processing.  Set by response\n+      header ``X-Trino-Set-Catalog``.\n+  * - ``X-Trino-Schema``\n+    - The schema context for query processing.  Set by response\n+      header ``X-Trino-Set-Schema``.\n+  * - ``X-Trino-Time-Zone``\n+    - The timezone for query processing. Defaults to the timezone\n+      of the Trino cluster, and not the timezone of the client.\n+  * - ``X-Trino-Language``\n+    - The language to use when processing the query and formatting\n+      results, formatted as a Java ``Locale`` string, e.g., ``en-US``\n+      for US English.  The language of the\n+      session can be set on a per-query basis using the\n+      ``X-Trino-Language`` HTTP header.\n+  * - ``X-Trino-Trace-Token``\n+    - Supplies a trace token to the Trino engine to help identify\n+      log lines that originate with this query request.\n+  * - ``X-Trino-Session``\n+    - Supplies a comma-separated list of name=value pairs as session\n+      properties.  When the Trino client run a\n+      ``SET SESSION name=value`` query, the name=value pair\n+      is returned in the ``X-Set-Trino-Session`` response header,\n+      and added to the client's list of session properties.\n+      If the response header ``X-Trino-Clear-Session`` is returned,\n+      its value is the name of a session property that is\n+      removed from the client's accumulated list.\n+  * - ``X-Trino-Role``\n+    - Sets the \"role\" for query processing.  A \"role\" is represents\n+      a collection of permissions.  Set by response header\n+      ``X-Trino-Set-Role``.  See doc:/sql/create-role to\n+      understand roles.\n+  * - ``X-Trino-Prepared-Statement``\n+    - A comma-separated list of the name=value pairs, where the\n+      names are names of previously prepared SQL statements, and\n+      the values are keys that identify the executable form of the\n+      named prepared statements.\n+  * - ``X-Trino-Transaction-Id``\n+    - The transaction ID to use for query processing.  Set\n+      by response header ``X-Trino-Started-Transaction-Id`` and\n+      cleared by ``X-Trino-Clear-Transaction-Id``.\n+  * - ``X-Trino-Client-Info``\n+    - Contains arbitrary information about the client program\n+      submitting the query.\n+  * - ``X-Trino-Client-Tags``\n+    - A comma-separated list of \"tag\" strings, used to identify\n+      Trino resource groups.\n+  * - ``X-Trino-Resource-Estimate``\n+    - A comma-separated list of ``resource=value`` type\n+      assigments.  The possible choices of ``resource`` are\n+      ``EXECUTION_TIME``, ``CPU_TIME``,  ``PEAK_MEMORY`` and\n+      ``PEAK_TASK_MEMORY``.  ``EXECUTION_TIME`` and ``CPU_TIME``\n+      have values specified as airlift ``Duration`` strings\n+      The format is a double precision number followed by\n+      a ``TimeUnit`` string, e.g., of ``s`` for seconds,\n+      ``m`` for minutes, ``h`` for hours, etc.  \"PEAK_MEMORY\" and\n+      \"PEAK_TASK_MEMORY\" are specified as as airlift ``DataSize`` strings,\n+      whose format is an integer followed by ``B`` for bytes; ``kB`` for\n+      kilobytes; ``mB`` for megabytes, ``gB`` for gigabytes, etc.\n+  * - ``X-Trino-Extra-Credential``\n+    - Provides extra credentials to the connector.  The header is\n+      a name=value string that is saved in the session ``Identity``\n+      object.  The name and value are only meaningful to the connector.\n+\n+Client response headers\n+-----------------------\n+\n+This table lists the supported client response headers.  After receiving a\n+response, a client must update the request headers used in\n+subsequent requests to be consistent with the response headers received.\n+\n+.. list-table:: Client response headers\n+  :widths: 30, 50\n+  :header-rows: 1\n+\n+  * - Header name\n+    - Description\n+  * - ``X-Trino-Set-Catalog``\n+    - Instructs the client to set the catalog in the\n+      ``X-Trino-Catalog`` request header in subsequent client requests.\n+  * - ``X-Trino-Set-Schema``\n+    - Instructs the client to set the schema in the\n+      ``X-Trino-Schema`` request header in subsequent client requests.\n+  * - ``X-Trino-Set-Session``\n+    - The value of the ``X-Trino-Set-Session`` response header is a\n+      string of the form *property* = *value*.  It\n+      instructs the client include session property *property* with value\n+      *value* in the ``X-Trino-Session`` header of subsequent\n+      client requests.\n+  * - ``X-Trino-Clear-Session``\n+    - Instructs the client to remove the session property with the\n+      whose name is the value of the ``X-Trino-Clear-Session`` header\n+      from the list of session properties\n+      in the ``X-Trino-Session`` header in subsequent client requests.\n+  * - ``X-Trino-Set-Role``\n+    - Instructs the client to set ``X-Trino-Role`` request header to the\n+      catalog role supplied by the ``X-Trino-Set-Role`` header\n+      in subsequent client requests.\n+  * - ``X-Trino-Added-Prepare``\n+    - Instructs the client to add the name=value pair to the set of\n+      prepared statements in the ``X-Trino-Prepared-Statements``\n+      request header in subsequent client requests.\n+  * - ``X-Trino-Deallocated-Prepare``\n+    - Instructs the client to remove the prepared statement whose name\n+      is the value of the ``X-Trino-Deallocated-Prepare`` header from\n+      the client's list of prepared statements sent in the\n+      ``X-Trino-Prepared-Statements`` request header in subsequent client\n+      requests.\n+  * - ``X-Trino-Started-Transaction-Id``\n+    - Provides the transaction ID that the client should pass back in the\n+      ``X-Trino-Transaction-Id`` request header in subsequent requests.\n+  * - ``X-Trino-Clear-Transaction-Id``\n+    - Instructs the client to clear the ``X-Trino-Transaction-Id`` request\n+      header in subsequent requests.\n+\n+``ProtocolHeaders``\n+-------------------\n+\n+Class ``io.trino.client.ProtocolHeaders``, in module ``trino-client``,\n+enumerates all the HTTP request and response headers allowed by the\n+Trino client REST API."
  },
  {
    "sha": "32ba242085c9ff2e44eae79e2164c75d2bc4263d",
    "filename": "docs/src/main/sphinx/installation/cli.rst",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/trinodb/trino/blob/a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4/docs/src/main/sphinx/installation/cli.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4/docs/src/main/sphinx/installation/cli.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/installation/cli.rst?ref=a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4",
    "patch": "@@ -25,6 +25,10 @@ make it executable with ``chmod +x``, then run it:\n \n Run the CLI with the ``--help`` option to see the available options.\n \n+The CLI uses the HTTP protocol and the\n+:doc:`Trino client REST API </develop/client-protocol>` to communicate\n+with Trino.\n+\n Authentication\n --------------\n "
  },
  {
    "sha": "7dc65d74eb007a2b91b3828da77bf289f88dd082",
    "filename": "docs/src/main/sphinx/installation/jdbc.rst",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/trinodb/trino/blob/a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4/docs/src/main/sphinx/installation/jdbc.rst",
    "raw_url": "https://github.com/trinodb/trino/raw/a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4/docs/src/main/sphinx/installation/jdbc.rst",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/docs/src/main/sphinx/installation/jdbc.rst?ref=a49ae061b61ab054ee1f0275ac5ab4fc5a1ebbc4",
    "patch": "@@ -42,6 +42,10 @@ classpath, you'll typically need to restart your application in order to\n recognize the new driver. Then, depending on your application, you\n may need to manually register and configure the driver.\n \n+The CLI uses the HTTP protocol and the\n+:doc:`Trino client REST API </develop/client-protocol>` to communicate\n+with Trino.\n+\n Registering and configuring the driver\n --------------------------------------\n "
  }
]
