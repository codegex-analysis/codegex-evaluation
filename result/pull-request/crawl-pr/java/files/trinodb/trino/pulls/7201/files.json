[
  {
    "sha": "91ba1dc5069869fe89acdb599cadbc80e83f8369",
    "filename": "plugin/trino-mysql/pom.xml",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/pom.xml",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/pom.xml",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/pom.xml?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -160,6 +160,20 @@\n             <scope>test</scope>\n         </dependency>\n \n+        <!-- org.testcontainers:mariadb depends on the MariaDB driver -->\n+        <dependency>\n+            <groupId>org.mariadb.jdbc</groupId>\n+            <artifactId>mariadb-java-client</artifactId>\n+            <version>2.4.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>mariadb</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>mysql</artifactId>"
  },
  {
    "sha": "4e5970e6465ea86292ead99185f0038d161aa9aa",
    "filename": "plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlClient.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlClient.java",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlClient.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlClient.java?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -14,7 +14,7 @@\n package io.trino.plugin.mysql;\n \n import com.google.common.collect.ImmutableSet;\n-import com.mysql.jdbc.Statement;\n+import com.mysql.cj.jdbc.JdbcStatement;\n import io.trino.plugin.jdbc.BaseJdbcClient;\n import io.trino.plugin.jdbc.BaseJdbcConfig;\n import io.trino.plugin.jdbc.ColumnMapping;\n@@ -73,8 +73,8 @@\n \n import static com.google.common.base.Verify.verify;\n import static com.google.common.util.concurrent.MoreExecutors.directExecutor;\n-import static com.mysql.jdbc.SQLError.SQL_STATE_ER_TABLE_EXISTS_ERROR;\n-import static com.mysql.jdbc.SQLError.SQL_STATE_SYNTAX_ERROR;\n+import static com.mysql.cj.exceptions.MysqlErrorNumbers.SQL_STATE_ER_TABLE_EXISTS_ERROR;\n+import static com.mysql.cj.exceptions.MysqlErrorNumbers.SQL_STATE_SYNTAX_ERROR;\n import static io.airlift.slice.Slices.utf8Slice;\n import static io.trino.plugin.base.util.JsonTypeUtil.jsonParse;\n import static io.trino.plugin.jdbc.DecimalConfig.DecimalMapping.ALLOW_OVERFLOW;\n@@ -212,8 +212,8 @@ public PreparedStatement getPreparedStatement(Connection connection, String sql)\n             throws SQLException\n     {\n         PreparedStatement statement = connection.prepareStatement(sql);\n-        if (statement.isWrapperFor(Statement.class)) {\n-            statement.unwrap(Statement.class).enableStreamingResults();\n+        if (statement.isWrapperFor(JdbcStatement.class)) {\n+            statement.unwrap(JdbcStatement.class).enableStreamingResults();\n         }\n         return statement;\n     }"
  },
  {
    "sha": "8cfd1a10580818afa7c374c0f28d1ee8eccde836",
    "filename": "plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlClientModule.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlClientModule.java",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlClientModule.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlClientModule.java?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -52,7 +52,6 @@ public static ConnectionFactory createConnectionFactory(BaseJdbcConfig config, C\n     {\n         Properties connectionProperties = new Properties();\n         connectionProperties.setProperty(\"useInformationSchema\", Boolean.toString(mySqlConfig.isDriverUseInformationSchema()));\n-        connectionProperties.setProperty(\"nullCatalogMeansCurrent\", \"false\");\n         connectionProperties.setProperty(\"useUnicode\", \"true\");\n         connectionProperties.setProperty(\"characterEncoding\", \"utf8\");\n         connectionProperties.setProperty(\"tinyInt1isBit\", \"false\");"
  },
  {
    "sha": "c4735e1351494a87904fcd2b3ccbf79f84e590ea",
    "filename": "plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlJdbcConfig.java",
    "status": "modified",
    "additions": 12,
    "deletions": 13,
    "changes": 25,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlJdbcConfig.java",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlJdbcConfig.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/src/main/java/io/trino/plugin/mysql/MySqlJdbcConfig.java?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -13,13 +13,14 @@\n  */\n package io.trino.plugin.mysql;\n \n-import com.mysql.jdbc.Driver;\n+import com.mysql.cj.conf.ConnectionUrlParser;\n+import com.mysql.cj.exceptions.CJException;\n import io.trino.plugin.jdbc.BaseJdbcConfig;\n \n import javax.validation.constraints.AssertTrue;\n \n-import java.sql.SQLException;\n-import java.util.Properties;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString;\n \n public class MySqlJdbcConfig\n         extends BaseJdbcConfig\n@@ -28,25 +29,23 @@\n     public boolean isUrlValid()\n     {\n         try {\n-            Driver driver = new Driver();\n-            Properties properties = driver.parseURL(getConnectionUrl(), null);\n-            return properties != null;\n+            parseConnectionString(getConnectionUrl());\n+            return true;\n         }\n-        catch (SQLException e) {\n-            throw new RuntimeException(e);\n+        catch (CJException ignored) {\n+            return false;\n         }\n     }\n \n     @AssertTrue(message = \"Database (catalog) must not be specified in JDBC URL for MySQL connector\")\n     public boolean isUrlWithoutDatabase()\n     {\n         try {\n-            Driver driver = new Driver();\n-            Properties properties = driver.parseURL(getConnectionUrl(), null);\n-            return (properties == null) || (driver.database(properties) == null);\n+            ConnectionUrlParser parser = parseConnectionString(getConnectionUrl());\n+            return isNullOrEmpty(parser.getPath());\n         }\n-        catch (SQLException e) {\n-            throw new RuntimeException(e);\n+        catch (CJException ignored) {\n+            return false;\n         }\n     }\n }"
  },
  {
    "sha": "3f444a401443e24a2475eca3de52e8eaea3c2c17",
    "filename": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/MariaDBQueryRunner.java",
    "status": "added",
    "additions": 102,
    "deletions": 0,
    "changes": 102,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/MariaDBQueryRunner.java",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/MariaDBQueryRunner.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/MariaDBQueryRunner.java?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.mysql;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.airlift.log.Logger;\n+import io.airlift.log.Logging;\n+import io.trino.Session;\n+import io.trino.plugin.tpch.TpchPlugin;\n+import io.trino.testing.DistributedQueryRunner;\n+import io.trino.testing.QueryRunner;\n+import io.trino.tpch.TpchTable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static io.airlift.testing.Closeables.closeAllSuppress;\n+import static io.trino.plugin.tpch.TpchMetadata.TINY_SCHEMA_NAME;\n+import static io.trino.testing.QueryAssertions.copyTpchTables;\n+import static io.trino.testing.TestingSession.testSessionBuilder;\n+\n+public class MariaDBQueryRunner\n+{\n+    private MariaDBQueryRunner() {}\n+\n+    private static final String TPCH_SCHEMA = \"tpch\";\n+\n+    public static QueryRunner createMariaDBQueryRunner(TestingMariaDBServer server, TpchTable<?>... tables)\n+            throws Exception\n+    {\n+        return createMariaDBQueryRunner(server, ImmutableMap.of(), ImmutableMap.of(), ImmutableList.copyOf(tables));\n+    }\n+\n+    public static DistributedQueryRunner createMariaDBQueryRunner(\n+            TestingMariaDBServer server,\n+            Map<String, String> extraProperties,\n+            Map<String, String> connectorProperties,\n+            Iterable<TpchTable<?>> tables)\n+            throws Exception\n+    {\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(createSession())\n+                .setExtraProperties(extraProperties)\n+                .build();\n+        try {\n+            queryRunner.installPlugin(new TpchPlugin());\n+            queryRunner.createCatalog(\"tpch\", \"tpch\");\n+\n+            connectorProperties = new HashMap<>(ImmutableMap.copyOf(connectorProperties));\n+            connectorProperties.putIfAbsent(\"connection-url\", server.getJdbcUrl());\n+            connectorProperties.putIfAbsent(\"connection-user\", server.getUsername());\n+            connectorProperties.putIfAbsent(\"connection-password\", server.getPassword());\n+            connectorProperties.putIfAbsent(\"allow-drop-table\", \"true\");\n+\n+            queryRunner.installPlugin(new MySqlPlugin());\n+            queryRunner.createCatalog(\"mysql\", \"mysql\", connectorProperties);\n+\n+            copyTpchTables(queryRunner, \"tpch\", TINY_SCHEMA_NAME, createSession(), tables);\n+\n+            return queryRunner;\n+        }\n+        catch (Throwable e) {\n+            closeAllSuppress(e, queryRunner);\n+            throw e;\n+        }\n+    }\n+\n+    private static Session createSession()\n+    {\n+        return testSessionBuilder()\n+                .setCatalog(\"mysql\")\n+                .setSchema(TPCH_SCHEMA)\n+                .build();\n+    }\n+\n+    public static void main(String[] args)\n+            throws Exception\n+    {\n+        Logging.initialize();\n+\n+        DistributedQueryRunner queryRunner = createMariaDBQueryRunner(\n+                new TestingMariaDBServer(),\n+                ImmutableMap.of(\"http-server.http.port\", \"8080\"),\n+                ImmutableMap.of(),\n+                TpchTable.getTables());\n+\n+        Logger log = Logger.get(MariaDBQueryRunner.class);\n+        log.info(\"======== SERVER STARTED ========\");\n+        log.info(\"\\n====\\n%s\\n====\", queryRunner.getCoordinator().getBaseUrl());\n+    }\n+}"
  },
  {
    "sha": "1c72c08d88ad3412aee52f8b2781cd2a7f88cf99",
    "filename": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMariaDbCompatibilityTest.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMariaDbCompatibilityTest.java",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMariaDbCompatibilityTest.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMariaDbCompatibilityTest.java?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.mysql;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.trino.testing.QueryRunner;\n+import io.trino.testing.sql.SqlExecutor;\n+\n+import static io.trino.plugin.mysql.MariaDBQueryRunner.createMariaDBQueryRunner;\n+\n+public class TestMariaDbCompatibilityTest\n+        extends BaseMySqlConnectorTest\n+{\n+    private TestingMariaDBServer mariaDBServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        mariaDBServer = closeAfterClass(new TestingMariaDBServer());\n+        return createMariaDBQueryRunner(mariaDBServer, ImmutableMap.of(), ImmutableMap.of(), REQUIRED_TPCH_TABLES);\n+    }\n+\n+    @Override\n+    protected SqlExecutor getMySqlExecutor()\n+    {\n+        return mariaDBServer::execute;\n+    }\n+}"
  },
  {
    "sha": "089ac401570208a48394eeebbb2388659a67d0da",
    "filename": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestingMariaDBServer.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestingMariaDBServer.java",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestingMariaDBServer.java",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestingMariaDBServer.java?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.mysql;\n+\n+import org.testcontainers.containers.MariaDBContainer;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import static io.trino.testing.containers.TestContainers.startOrReuse;\n+import static java.lang.String.format;\n+\n+public class TestingMariaDBServer\n+        implements AutoCloseable\n+{\n+    private final MariaDBContainer<?> container;\n+    private final Closeable cleanup;\n+\n+    public TestingMariaDBServer()\n+    {\n+        this(\"mariadb:10.5.4\");\n+    }\n+\n+    public TestingMariaDBServer(String dockerImageName)\n+    {\n+        MariaDBContainer<?> container = new MariaDBContainer<>(dockerImageName);\n+        container = container.withDatabaseName(\"tpch\");\n+        this.container = container;\n+        configureContainer(container);\n+        cleanup = startOrReuse(container);\n+        execute(format(\"GRANT ALL PRIVILEGES ON *.* TO '%s'\", container.getUsername()), \"root\", container.getPassword());\n+    }\n+\n+    protected void configureContainer(MariaDBContainer<?> container) {}\n+\n+    public Connection createConnection()\n+            throws SQLException\n+    {\n+        return container.createConnection(\"\");\n+    }\n+\n+    public void execute(String sql)\n+    {\n+        execute(sql, getUsername(), getPassword());\n+    }\n+\n+    public void execute(String sql, String user, String password)\n+    {\n+        try (Connection connection = DriverManager.getConnection(getJdbcUrl(), user, password);\n+                Statement statement = connection.createStatement()) {\n+            statement.execute(sql);\n+        }\n+        catch (SQLException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public String getUsername()\n+    {\n+        return container.getUsername();\n+    }\n+\n+    public String getPassword()\n+    {\n+        return container.getPassword();\n+    }\n+\n+    public String getDatabaseName()\n+    {\n+        return container.getDatabaseName();\n+    }\n+\n+    public String getJdbcUrl()\n+    {\n+        // The connection URL is still using mysql to ensure we test MariaDB compatibility with the MySQL connector\n+        return format(\"jdbc:mysql://%s:%s?useSSL=false&allowPublicKeyRetrieval=true\", container.getContainerIpAddress(), container.getMappedPort(3306));\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+        try {\n+            cleanup.close();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "6e65968b907561fcb7163d5516ef6a82ced9cfa4",
    "filename": "plugin/trino-raptor-legacy/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-raptor-legacy/pom.xml",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-raptor-legacy/pom.xml",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-raptor-legacy/pom.xml?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -147,6 +147,7 @@\n         <dependency>\n             <groupId>mysql</groupId>\n             <artifactId>mysql-connector-java</artifactId>\n+            <version>${dep.mysql5.version}</version>\n         </dependency>\n \n         <dependency>"
  },
  {
    "sha": "9f773f549e0e9e23d02a027db3ef4c7841d63ed8",
    "filename": "plugin/trino-resource-group-managers/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-resource-group-managers/pom.xml",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-resource-group-managers/pom.xml",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-resource-group-managers/pom.xml?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -102,6 +102,7 @@\n         <dependency>\n             <groupId>mysql</groupId>\n             <artifactId>mysql-connector-java</artifactId>\n+            <version>${dep.mysql5.version}</version>\n         </dependency>\n \n         <dependency>"
  },
  {
    "sha": "5d6016ef28000d8116d0fbace5b3501f822abf2a",
    "filename": "plugin/trino-session-property-managers/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-session-property-managers/pom.xml",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/plugin/trino-session-property-managers/pom.xml",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/plugin/trino-session-property-managers/pom.xml?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -102,6 +102,7 @@\n         <dependency>\n             <groupId>mysql</groupId>\n             <artifactId>mysql-connector-java</artifactId>\n+            <version>${dep.mysql5.version}</version>\n         </dependency>\n \n         <dependency>"
  },
  {
    "sha": "b1c4fba1ce6921461919559d4f7722a158ca75fa",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/pom.xml",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/pom.xml",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/pom.xml?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -63,6 +63,7 @@\n         <dep.docker-java.version>3.2.7</dep.docker-java.version>\n         <dep.coral.version>1.0.25</dep.coral.version>\n         <dep.confluent.version>5.5.2</dep.confluent.version>\n+        <dep.mysql5.version>5.1.48</dep.mysql5.version>\n \n         <!--\n           America/Bahia_Banderas has:\n@@ -1250,7 +1251,7 @@\n             <dependency>\n                 <groupId>mysql</groupId>\n                 <artifactId>mysql-connector-java</artifactId>\n-                <version>5.1.48</version>\n+                <version>8.0.23</version>\n             </dependency>\n \n             <dependency>"
  },
  {
    "sha": "57c24d2a095480e93447dc2c1cf79d4d92be6486",
    "filename": "service/trino-verifier/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/trinodb/trino/blob/ec64d121c8933fa9da366bd9f10f4240778d1a66/service/trino-verifier/pom.xml",
    "raw_url": "https://github.com/trinodb/trino/raw/ec64d121c8933fa9da366bd9f10f4240778d1a66/service/trino-verifier/pom.xml",
    "contents_url": "https://api.github.com/repos/trinodb/trino/contents/service/trino-verifier/pom.xml?ref=ec64d121c8933fa9da366bd9f10f4240778d1a66",
    "patch": "@@ -122,6 +122,7 @@\n         <dependency>\n             <groupId>mysql</groupId>\n             <artifactId>mysql-connector-java</artifactId>\n+            <version>${dep.mysql5.version}</version>\n             <scope>runtime</scope>\n         </dependency>\n "
  }
]
