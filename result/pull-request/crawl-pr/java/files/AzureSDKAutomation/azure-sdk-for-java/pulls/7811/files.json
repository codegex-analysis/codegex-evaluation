[
  {
    "sha": "e0f9aa1389af874f2189c0b5f291768f4cb9a424",
    "filename": "eng/versioning/version_client.txt",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/eng/versioning/version_client.txt",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/eng/versioning/version_client.txt",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/eng/versioning/version_client.txt?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -214,6 +214,7 @@ com.azure.resourcemanager:azure-resourcemanager-datadog;1.0.0-beta.1;1.0.0-beta.\n com.azure.resourcemanager:azure-resourcemanager-apimanagement;1.0.0-beta.1;1.0.0-beta.1\n com.azure.resourcemanager:azure-resourcemanager-communication;1.0.0-beta.1;1.0.0-beta.1\n com.azure.resourcemanager:azure-resourcemanager-kubernetesconfiguration;1.0.0-beta.1;1.0.0-beta.1\n+com.azure.resourcemanager:azure-resourcemanager-resourcehealth;1.0.0-beta.1;1.0.0-beta.1\n \n # Unreleased dependencies: Copy the entry from above, prepend \"unreleased_\" and remove the current\n # version. Unreleased dependencies are only valid for dependency versions."
  },
  {
    "sha": "dd5c521e1695d2201af8f479eb5983fc9c7a28a1",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/pom.xml",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/pom.xml",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/pom.xml?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -631,6 +631,7 @@\n         <module>sdk/redisenterprise</module>\n         <module>sdk/relay</module>\n         <module>sdk/remoterendering</module>\n+        <module>sdk/resourcehealth</module>\n         <module>sdk/resourcemanager</module>\n         <module>sdk/schemaregistry</module>\n         <module>sdk/search</module>"
  },
  {
    "sha": "e0d0fa7c3fc81259b2c66ca17a6257f7a0d8de56",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/CHANGELOG.md",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/CHANGELOG.md",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/CHANGELOG.md?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,5 @@\n+# Release History\n+\n+## 1.0.0-beta.1 (2021-03-17)\n+\n+- Azure Resource Manager Resourcehealth client library for Java. This package contains Microsoft Azure SDK for Resourcehealth Management SDK. The Resource Health Client. Package tag package-2021-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt)."
  },
  {
    "sha": "78141b7eb787d013e8d1996588a277daef587e74",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/README.md",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/README.md",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/README.md",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/README.md?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,99 @@\n+# Azure Resource Manager Resourcehealth client library for Java\n+\n+Azure Resource Manager Resourcehealth client library for Java.\n+\n+This package contains Microsoft Azure SDK for Resourcehealth Management SDK. The Resource Health Client. Package tag package-2021-03. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n+\n+## We'd love to hear your feedback\n+\n+We're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n+\n+If you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n+\n+Thank you in advance for your collaboration. We really appreciate your time!\n+\n+## Documentation\n+\n+Various documentation is available to help you get started\n+\n+- [API reference documentation][docs]\n+\n+## Getting started\n+\n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-resourcehealth;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure.resourcemanager</groupId>\n+    <artifactId>azure-resourcemanager-resourcehealth</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Include the recommended packages\n+\n+Azure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n+\n+[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n+\n+### Authentication\n+\n+By default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n+\n+- `AZURE_CLIENT_ID` for Azure client ID.\n+- `AZURE_TENANT_ID` for Azure tenant ID.\n+- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n+\n+In addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n+\n+With above configuration, `azure` client can be authenticated by following code:\n+\n+```java\n+AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\n+TokenCredential credential = new DefaultAzureCredentialBuilder()\n+    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n+    .build();\n+ResourcehealthManager manager = ResourcehealthManager\n+    .authenticate(credential, profile);\n+```\n+\n+The sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n+\n+See [Authentication][authenticate] for more options.\n+\n+## Key concepts\n+\n+See [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n+\n+## Examples\n+\n+## Troubleshooting\n+\n+## Next steps\n+\n+## Contributing\n+\n+For details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/master/CONTRIBUTING.md).\n+\n+1. Fork it\n+1. Create your feature branch (`git checkout -b my-new-feature`)\n+1. Commit your changes (`git commit -am 'Add some feature'`)\n+1. Push to the branch (`git push origin my-new-feature`)\n+1. Create new Pull Request\n+\n+<!-- LINKS -->\n+[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n+[docs]: https://azure.github.io/azure-sdk-for-java/\n+[jdk]: https://docs.microsoft.com/java/azure/jdk/\n+[azure_subscription]: https://azure.microsoft.com/free/\n+[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/identity/azure-identity\n+[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core-http-netty\n+[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/resourcemanager/docs/AUTH.md\n+[design]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/resourcemanager/docs/DESIGN.md"
  },
  {
    "sha": "4c4af9299f8499e28881d635d2890f217390e188",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/pom.xml",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/pom.xml",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/pom.xml",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/pom.xml?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,67 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure.resourcemanager</groupId>\n+    <artifactId>azure-resourcemanager-resourcehealth</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure.resourcemanager:azure-resourcemanager-resourcehealth;current} -->\n+    <packaging>jar</packaging>\n+\n+    <name>Microsoft Azure SDK for Resourcehealth Management</name>\n+    <description>This package contains Microsoft Azure SDK for Resourcehealth Management SDK. For documentation on how to use this package, please see https://aka.ms/azsdk/java/mgmt. The Resource Health Client. Package tag package-2021-03.</description>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+    <licenses>\n+        <license>\n+            <name>The MIT License (MIT)</name>\n+            <url>http://opensource.org/licenses/MIT</url>\n+            <distribution>repo</distribution>\n+        </license>\n+    </licenses>\n+\n+    <scm>\n+        <url>https://github.com/Azure/azure-sdk-for-java</url>\n+        <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+        <developerConnection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</developerConnection>\n+        <tag>HEAD</tag>\n+    </scm>\n+    <developers>\n+        <developer>\n+            <id>microsoft</id>\n+            <name>Microsoft</name>\n+        </developer>\n+    </developers>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-core</artifactId>\n+            <version>1.14.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+        </dependency>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-core-management</artifactId>\n+            <version>1.2.0</version> <!-- {x-version-update;com.azure:azure-core-management;dependency} -->\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>0.8.5</version> <!-- {x-version-update;org.jacoco:jacoco-maven-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>"
  },
  {
    "sha": "7a08bff330109a880650c60b969b34d36e02dce7",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/ResourcehealthManager.java",
    "status": "added",
    "additions": 250,
    "deletions": 0,
    "changes": 250,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/ResourcehealthManager.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/ResourcehealthManager.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/ResourcehealthManager.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,250 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.management.profile.AzureProfile;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.fluent.MicrosoftResourceHealth;\n+import com.azure.resourcemanager.resourcehealth.implementation.AvailabilityStatusesImpl;\n+import com.azure.resourcemanager.resourcehealth.implementation.EmergingIssuesImpl;\n+import com.azure.resourcemanager.resourcehealth.implementation.EventsOperationsImpl;\n+import com.azure.resourcemanager.resourcehealth.implementation.MicrosoftResourceHealthBuilder;\n+import com.azure.resourcemanager.resourcehealth.implementation.OperationsImpl;\n+import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatuses;\n+import com.azure.resourcemanager.resourcehealth.models.EmergingIssues;\n+import com.azure.resourcemanager.resourcehealth.models.EventsOperations;\n+import com.azure.resourcemanager.resourcehealth.models.Operations;\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/** Entry point to ResourcehealthManager. The Resource Health Client. */\n+public final class ResourcehealthManager {\n+    private EventsOperations eventsOperations;\n+\n+    private AvailabilityStatuses availabilityStatuses;\n+\n+    private Operations operations;\n+\n+    private EmergingIssues emergingIssues;\n+\n+    private final MicrosoftResourceHealth clientObject;\n+\n+    private ResourcehealthManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {\n+        Objects.requireNonNull(httpPipeline, \"'httpPipeline' cannot be null.\");\n+        Objects.requireNonNull(profile, \"'profile' cannot be null.\");\n+        this.clientObject =\n+            new MicrosoftResourceHealthBuilder()\n+                .pipeline(httpPipeline)\n+                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())\n+                .subscriptionId(profile.getSubscriptionId())\n+                .defaultPollInterval(defaultPollInterval)\n+                .buildClient();\n+    }\n+\n+    /**\n+     * Creates an instance of Resourcehealth service API entry point.\n+     *\n+     * @param credential the credential to use.\n+     * @param profile the Azure profile for client.\n+     * @return the Resourcehealth service API instance.\n+     */\n+    public static ResourcehealthManager authenticate(TokenCredential credential, AzureProfile profile) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+        Objects.requireNonNull(profile, \"'profile' cannot be null.\");\n+        return configure().authenticate(credential, profile);\n+    }\n+\n+    /**\n+     * Gets a Configurable instance that can be used to create ResourcehealthManager with optional configuration.\n+     *\n+     * @return the Configurable instance allowing configurations.\n+     */\n+    public static Configurable configure() {\n+        return new ResourcehealthManager.Configurable();\n+    }\n+\n+    /** The Configurable allowing configurations to be set. */\n+    public static final class Configurable {\n+        private final ClientLogger logger = new ClientLogger(Configurable.class);\n+\n+        private HttpClient httpClient;\n+        private HttpLogOptions httpLogOptions;\n+        private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        private RetryPolicy retryPolicy;\n+        private Duration defaultPollInterval;\n+\n+        private Configurable() {\n+        }\n+\n+        /**\n+         * Sets the http client.\n+         *\n+         * @param httpClient the HTTP client.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withHttpClient(HttpClient httpClient) {\n+            this.httpClient = Objects.requireNonNull(httpClient, \"'httpClient' cannot be null.\");\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the logging options to the HTTP pipeline.\n+         *\n+         * @param httpLogOptions the HTTP log options.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {\n+            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, \"'httpLogOptions' cannot be null.\");\n+            return this;\n+        }\n+\n+        /**\n+         * Adds the pipeline policy to the HTTP pipeline.\n+         *\n+         * @param policy the HTTP pipeline policy.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withPolicy(HttpPipelinePolicy policy) {\n+            this.policies.add(Objects.requireNonNull(policy, \"'policy' cannot be null.\"));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the retry policy to the HTTP pipeline.\n+         *\n+         * @param retryPolicy the HTTP pipeline retry policy.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {\n+            this.retryPolicy = Objects.requireNonNull(retryPolicy, \"'retryPolicy' cannot be null.\");\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the default poll interval, used when service does not provide \"Retry-After\" header.\n+         *\n+         * @param defaultPollInterval the default poll interval.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {\n+            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, \"'retryPolicy' cannot be null.\");\n+            if (this.defaultPollInterval.isNegative()) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(\"'httpPipeline' cannot be negative\"));\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates an instance of Resourcehealth service API entry point.\n+         *\n+         * @param credential the credential to use.\n+         * @param profile the Azure profile for client.\n+         * @return the Resourcehealth service API instance.\n+         */\n+        public ResourcehealthManager authenticate(TokenCredential credential, AzureProfile profile) {\n+            Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+            Objects.requireNonNull(profile, \"'profile' cannot be null.\");\n+\n+            StringBuilder userAgentBuilder = new StringBuilder();\n+            userAgentBuilder\n+                .append(\"azsdk-java\")\n+                .append(\"-\")\n+                .append(\"com.azure.resourcemanager.resourcehealth\")\n+                .append(\"/\")\n+                .append(\"1.0.0-beta.1\");\n+            if (!Configuration.getGlobalConfiguration().get(\"AZURE_TELEMETRY_DISABLED\", false)) {\n+                userAgentBuilder\n+                    .append(\" (\")\n+                    .append(Configuration.getGlobalConfiguration().get(\"java.version\"))\n+                    .append(\"; \")\n+                    .append(Configuration.getGlobalConfiguration().get(\"os.name\"))\n+                    .append(\"; \")\n+                    .append(Configuration.getGlobalConfiguration().get(\"os.version\"))\n+                    .append(\"; auto-generated)\");\n+            } else {\n+                userAgentBuilder.append(\" (auto-generated)\");\n+            }\n+\n+            if (retryPolicy == null) {\n+                retryPolicy = new RetryPolicy(\"Retry-After\", ChronoUnit.SECONDS);\n+            }\n+            List<HttpPipelinePolicy> policies = new ArrayList<>();\n+            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));\n+            policies.add(new RequestIdPolicy());\n+            HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+            policies.add(retryPolicy);\n+            policies.add(new AddDatePolicy());\n+            policies\n+                .add(\n+                    new BearerTokenAuthenticationPolicy(\n+                        credential, profile.getEnvironment().getManagementEndpoint() + \"/.default\"));\n+            HttpPolicyProviders.addAfterRetryPolicies(policies);\n+            policies.add(new HttpLoggingPolicy(httpLogOptions));\n+            HttpPipeline httpPipeline =\n+                new HttpPipelineBuilder()\n+                    .httpClient(httpClient)\n+                    .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+                    .build();\n+            return new ResourcehealthManager(httpPipeline, profile, defaultPollInterval);\n+        }\n+    }\n+\n+    /** @return Resource collection API of EventsOperations. */\n+    public EventsOperations eventsOperations() {\n+        if (this.eventsOperations == null) {\n+            this.eventsOperations = new EventsOperationsImpl(clientObject.getEventsOperations(), this);\n+        }\n+        return eventsOperations;\n+    }\n+\n+    /** @return Resource collection API of AvailabilityStatuses. */\n+    public AvailabilityStatuses availabilityStatuses() {\n+        if (this.availabilityStatuses == null) {\n+            this.availabilityStatuses = new AvailabilityStatusesImpl(clientObject.getAvailabilityStatuses(), this);\n+        }\n+        return availabilityStatuses;\n+    }\n+\n+    /** @return Resource collection API of Operations. */\n+    public Operations operations() {\n+        if (this.operations == null) {\n+            this.operations = new OperationsImpl(clientObject.getOperations(), this);\n+        }\n+        return operations;\n+    }\n+\n+    /** @return Resource collection API of EmergingIssues. */\n+    public EmergingIssues emergingIssues() {\n+        if (this.emergingIssues == null) {\n+            this.emergingIssues = new EmergingIssuesImpl(clientObject.getEmergingIssues(), this);\n+        }\n+        return emergingIssues;\n+    }\n+\n+    /**\n+     * @return Wrapped service client MicrosoftResourceHealth providing direct access to the underlying auto-generated\n+     *     API implementation, based on Azure REST API.\n+     */\n+    public MicrosoftResourceHealth serviceClient() {\n+        return this.clientObject;\n+    }\n+}"
  },
  {
    "sha": "2b5ceec6c0bd1a78ed4bac144fee05c0534ef9c6",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/AvailabilityStatusesClient.java",
    "status": "added",
    "additions": 150,
    "deletions": 0,
    "changes": 150,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/AvailabilityStatusesClient.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/AvailabilityStatusesClient.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/AvailabilityStatusesClient.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,150 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.fluent;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.AvailabilityStatusInner;\n+\n+/** An instance of this class provides access to all the operations defined in AvailabilityStatusesClient. */\n+public interface AvailabilityStatusesClient {\n+    /**\n+     * Lists the current availability status for all the resources in the subscription.\n+     *\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<AvailabilityStatusInner> listBySubscriptionId();\n+\n+    /**\n+     * Lists the current availability status for all the resources in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<AvailabilityStatusInner> listBySubscriptionId(String filter, String expand, Context context);\n+\n+    /**\n+     * Lists the current availability status for all the resources in the resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<AvailabilityStatusInner> listByResourceGroup(String resourceGroupName);\n+\n+    /**\n+     * Lists the current availability status for all the resources in the resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<AvailabilityStatusInner> listByResourceGroup(\n+        String resourceGroupName, String filter, String expand, Context context);\n+\n+    /**\n+     * Gets current availability status for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return current availability status for a single resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    AvailabilityStatusInner getByResource(String resourceUri);\n+\n+    /**\n+     * Gets current availability status for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return current availability status for a single resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<AvailabilityStatusInner> getByResourceWithResponse(\n+        String resourceUri, String filter, String expand, Context context);\n+\n+    /**\n+     * Lists all historical availability transitions and impacting events for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<AvailabilityStatusInner> list(String resourceUri);\n+\n+    /**\n+     * Lists all historical availability transitions and impacting events for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<AvailabilityStatusInner> list(String resourceUri, String filter, String expand, Context context);\n+}"
  },
  {
    "sha": "940f796acc432f0647e06ac358d8a7a596c51427",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/EmergingIssuesClient.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/EmergingIssuesClient.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/EmergingIssuesClient.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/EmergingIssuesClient.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.fluent;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.EmergingIssuesGetResultInner;\n+\n+/** An instance of this class provides access to all the operations defined in EmergingIssuesClient. */\n+public interface EmergingIssuesClient {\n+    /**\n+     * Gets Azure services' emerging issues.\n+     *\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return azure services' emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    EmergingIssuesGetResultInner get();\n+\n+    /**\n+     * Gets Azure services' emerging issues.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return azure services' emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<EmergingIssuesGetResultInner> getWithResponse(Context context);\n+\n+    /**\n+     * Lists Azure services' emerging issues.\n+     *\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<EmergingIssuesGetResultInner> list();\n+\n+    /**\n+     * Lists Azure services' emerging issues.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<EmergingIssuesGetResultInner> list(Context context);\n+}"
  },
  {
    "sha": "161e5b27291444334aced4d6caddd62c277ab9eb",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/EventsOperationsClient.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/EventsOperationsClient.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/EventsOperationsClient.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/EventsOperationsClient.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,81 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.fluent;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.EventInner;\n+\n+/** An instance of this class provides access to all the operations defined in EventsOperationsClient. */\n+public interface EventsOperationsClient {\n+    /**\n+     * Lists current service health events in the subscription.\n+     *\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<EventInner> list();\n+\n+    /**\n+     * Lists current service health events in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param queryStartTime Specifies from when to return events, based on the lastUpdateTime property. For example,\n+     *     queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020.\n+     * @param view setting view=full expands the article parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<EventInner> list(String filter, String queryStartTime, String view, Context context);\n+\n+    /**\n+     * Lists current service health events for given resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<EventInner> listBySingleResource(String resourceUri);\n+\n+    /**\n+     * Lists current service health events for given resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param view setting view=full expands the article parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<EventInner> listBySingleResource(String resourceUri, String filter, String view, Context context);\n+}"
  },
  {
    "sha": "1697cf46c4713cdf101e119e6eb6582f35472157",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/MicrosoftResourceHealth.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/MicrosoftResourceHealth.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/MicrosoftResourceHealth.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/MicrosoftResourceHealth.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.fluent;\n+\n+import com.azure.core.http.HttpPipeline;\n+import java.time.Duration;\n+\n+/** The interface for MicrosoftResourceHealth class. */\n+public interface MicrosoftResourceHealth {\n+    /**\n+     * Gets Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms\n+     * part of the URI for every service call.\n+     *\n+     * @return the subscriptionId value.\n+     */\n+    String getSubscriptionId();\n+\n+    /**\n+     * Gets server parameter.\n+     *\n+     * @return the endpoint value.\n+     */\n+    String getEndpoint();\n+\n+    /**\n+     * Gets Api Version.\n+     *\n+     * @return the apiVersion value.\n+     */\n+    String getApiVersion();\n+\n+    /**\n+     * Gets The HTTP pipeline to send requests through.\n+     *\n+     * @return the httpPipeline value.\n+     */\n+    HttpPipeline getHttpPipeline();\n+\n+    /**\n+     * Gets The default poll interval for long-running operation.\n+     *\n+     * @return the defaultPollInterval value.\n+     */\n+    Duration getDefaultPollInterval();\n+\n+    /**\n+     * Gets the EventsOperationsClient object to access its operations.\n+     *\n+     * @return the EventsOperationsClient object.\n+     */\n+    EventsOperationsClient getEventsOperations();\n+\n+    /**\n+     * Gets the AvailabilityStatusesClient object to access its operations.\n+     *\n+     * @return the AvailabilityStatusesClient object.\n+     */\n+    AvailabilityStatusesClient getAvailabilityStatuses();\n+\n+    /**\n+     * Gets the OperationsClient object to access its operations.\n+     *\n+     * @return the OperationsClient object.\n+     */\n+    OperationsClient getOperations();\n+\n+    /**\n+     * Gets the EmergingIssuesClient object to access its operations.\n+     *\n+     * @return the EmergingIssuesClient object.\n+     */\n+    EmergingIssuesClient getEmergingIssues();\n+}"
  },
  {
    "sha": "10e4f68239d077ba9a3b1cfbb0134b2c0021d0e7",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/OperationsClient.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/OperationsClient.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/OperationsClient.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/OperationsClient.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.fluent;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.OperationListResultInner;\n+\n+/** An instance of this class provides access to all the operations defined in OperationsClient. */\n+public interface OperationsClient {\n+    /**\n+     * Lists available operations for the resourcehealth resource provider.\n+     *\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return lists the operations response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    OperationListResultInner list();\n+\n+    /**\n+     * Lists available operations for the resourcehealth resource provider.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return lists the operations response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<OperationListResultInner> listWithResponse(Context context);\n+}"
  },
  {
    "sha": "b2b64a9b56951c98f8562c14c71bbb5b50ecdb3d",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/AvailabilityStatusInner.java",
    "status": "added",
    "additions": 158,
    "deletions": 0,
    "changes": 158,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/AvailabilityStatusInner.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/AvailabilityStatusInner.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/AvailabilityStatusInner.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,158 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.fluent.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatusProperties;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** availabilityStatus of a resource. */\n+@Fluent\n+public final class AvailabilityStatusInner {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(AvailabilityStatusInner.class);\n+\n+    /*\n+     * Azure Resource Manager Identity for the availabilityStatuses resource.\n+     */\n+    @JsonProperty(value = \"id\")\n+    private String id;\n+\n+    /*\n+     * current.\n+     */\n+    @JsonProperty(value = \"name\")\n+    private String name;\n+\n+    /*\n+     * Microsoft.ResourceHealth/AvailabilityStatuses.\n+     */\n+    @JsonProperty(value = \"type\")\n+    private String type;\n+\n+    /*\n+     * Azure Resource Manager geo location of the resource.\n+     */\n+    @JsonProperty(value = \"location\")\n+    private String location;\n+\n+    /*\n+     * Properties of availability state.\n+     */\n+    @JsonProperty(value = \"properties\")\n+    private AvailabilityStatusProperties properties;\n+\n+    /**\n+     * Get the id property: Azure Resource Manager Identity for the availabilityStatuses resource.\n+     *\n+     * @return the id value.\n+     */\n+    public String id() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Set the id property: Azure Resource Manager Identity for the availabilityStatuses resource.\n+     *\n+     * @param id the id value to set.\n+     * @return the AvailabilityStatusInner object itself.\n+     */\n+    public AvailabilityStatusInner withId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the name property: current.\n+     *\n+     * @return the name value.\n+     */\n+    public String name() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Set the name property: current.\n+     *\n+     * @param name the name value to set.\n+     * @return the AvailabilityStatusInner object itself.\n+     */\n+    public AvailabilityStatusInner withName(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the type property: Microsoft.ResourceHealth/AvailabilityStatuses.\n+     *\n+     * @return the type value.\n+     */\n+    public String type() {\n+        return this.type;\n+    }\n+\n+    /**\n+     * Set the type property: Microsoft.ResourceHealth/AvailabilityStatuses.\n+     *\n+     * @param type the type value to set.\n+     * @return the AvailabilityStatusInner object itself.\n+     */\n+    public AvailabilityStatusInner withType(String type) {\n+        this.type = type;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the location property: Azure Resource Manager geo location of the resource.\n+     *\n+     * @return the location value.\n+     */\n+    public String location() {\n+        return this.location;\n+    }\n+\n+    /**\n+     * Set the location property: Azure Resource Manager geo location of the resource.\n+     *\n+     * @param location the location value to set.\n+     * @return the AvailabilityStatusInner object itself.\n+     */\n+    public AvailabilityStatusInner withLocation(String location) {\n+        this.location = location;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the properties property: Properties of availability state.\n+     *\n+     * @return the properties value.\n+     */\n+    public AvailabilityStatusProperties properties() {\n+        return this.properties;\n+    }\n+\n+    /**\n+     * Set the properties property: Properties of availability state.\n+     *\n+     * @param properties the properties value to set.\n+     * @return the AvailabilityStatusInner object itself.\n+     */\n+    public AvailabilityStatusInner withProperties(AvailabilityStatusProperties properties) {\n+        this.properties = properties;\n+        return this;\n+    }\n+\n+    /**\n+     * Validates the instance.\n+     *\n+     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     */\n+    public void validate() {\n+        if (properties() != null) {\n+            properties().validate();\n+        }\n+    }\n+}"
  },
  {
    "sha": "229cc6304cd4d9ca9cb10739cf0ae3f797806920",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/EmergingIssuesGetResultInner.java",
    "status": "added",
    "additions": 115,
    "deletions": 0,
    "changes": 115,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/EmergingIssuesGetResultInner.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/EmergingIssuesGetResultInner.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/EmergingIssuesGetResultInner.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.fluent.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.annotation.JsonFlatten;\n+import com.azure.core.management.ProxyResource;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.models.StatusActiveEvent;\n+import com.azure.resourcemanager.resourcehealth.models.StatusBanner;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.time.OffsetDateTime;\n+import java.util.List;\n+\n+/** The Get EmergingIssues operation response. */\n+@JsonFlatten\n+@Fluent\n+public class EmergingIssuesGetResultInner extends ProxyResource {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(EmergingIssuesGetResultInner.class);\n+\n+    /*\n+     * Timestamp for when last time refreshed for ongoing emerging issue.\n+     */\n+    @JsonProperty(value = \"properties.refreshTimestamp\")\n+    private OffsetDateTime refreshTimestamp;\n+\n+    /*\n+     * The list of emerging issues of banner type.\n+     */\n+    @JsonProperty(value = \"properties.statusBanners\")\n+    private List<StatusBanner> statusBanners;\n+\n+    /*\n+     * The list of emerging issues of active event type.\n+     */\n+    @JsonProperty(value = \"properties.statusActiveEvents\")\n+    private List<StatusActiveEvent> statusActiveEvents;\n+\n+    /**\n+     * Get the refreshTimestamp property: Timestamp for when last time refreshed for ongoing emerging issue.\n+     *\n+     * @return the refreshTimestamp value.\n+     */\n+    public OffsetDateTime refreshTimestamp() {\n+        return this.refreshTimestamp;\n+    }\n+\n+    /**\n+     * Set the refreshTimestamp property: Timestamp for when last time refreshed for ongoing emerging issue.\n+     *\n+     * @param refreshTimestamp the refreshTimestamp value to set.\n+     * @return the EmergingIssuesGetResultInner object itself.\n+     */\n+    public EmergingIssuesGetResultInner withRefreshTimestamp(OffsetDateTime refreshTimestamp) {\n+        this.refreshTimestamp = refreshTimestamp;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the statusBanners property: The list of emerging issues of banner type.\n+     *\n+     * @return the statusBanners value.\n+     */\n+    public List<StatusBanner> statusBanners() {\n+        return this.statusBanners;\n+    }\n+\n+    /**\n+     * Set the statusBanners property: The list of emerging issues of banner type.\n+     *\n+     * @param statusBanners the statusBanners value to set.\n+     * @return the EmergingIssuesGetResultInner object itself.\n+     */\n+    public EmergingIssuesGetResultInner withStatusBanners(List<StatusBanner> statusBanners) {\n+        this.statusBanners = statusBanners;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the statusActiveEvents property: The list of emerging issues of active event type.\n+     *\n+     * @return the statusActiveEvents value.\n+     */\n+    public List<StatusActiveEvent> statusActiveEvents() {\n+        return this.statusActiveEvents;\n+    }\n+\n+    /**\n+     * Set the statusActiveEvents property: The list of emerging issues of active event type.\n+     *\n+     * @param statusActiveEvents the statusActiveEvents value to set.\n+     * @return the EmergingIssuesGetResultInner object itself.\n+     */\n+    public EmergingIssuesGetResultInner withStatusActiveEvents(List<StatusActiveEvent> statusActiveEvents) {\n+        this.statusActiveEvents = statusActiveEvents;\n+        return this;\n+    }\n+\n+    /**\n+     * Validates the instance.\n+     *\n+     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     */\n+    public void validate() {\n+        if (statusBanners() != null) {\n+            statusBanners().forEach(e -> e.validate());\n+        }\n+        if (statusActiveEvents() != null) {\n+            statusActiveEvents().forEach(e -> e.validate());\n+        }\n+    }\n+}"
  },
  {
    "sha": "e588892ab7ac0b8bc3575f4c71ce6e5777f088d4",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/EventInner.java",
    "status": "added",
    "additions": 601,
    "deletions": 0,
    "changes": 601,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/EventInner.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/EventInner.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/EventInner.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,601 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.fluent.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.annotation.JsonFlatten;\n+import com.azure.core.management.ProxyResource;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.models.EventLevelValues;\n+import com.azure.resourcemanager.resourcehealth.models.EventPropertiesArticle;\n+import com.azure.resourcemanager.resourcehealth.models.EventPropertiesRecommendedActions;\n+import com.azure.resourcemanager.resourcehealth.models.EventSourceValues;\n+import com.azure.resourcemanager.resourcehealth.models.EventStatusValues;\n+import com.azure.resourcemanager.resourcehealth.models.EventTypeValues;\n+import com.azure.resourcemanager.resourcehealth.models.Faq;\n+import com.azure.resourcemanager.resourcehealth.models.Impact;\n+import com.azure.resourcemanager.resourcehealth.models.LevelValues;\n+import com.azure.resourcemanager.resourcehealth.models.Link;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.time.OffsetDateTime;\n+import java.util.List;\n+\n+/** Service health event. */\n+@JsonFlatten\n+@Fluent\n+public class EventInner extends ProxyResource {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(EventInner.class);\n+\n+    /*\n+     * Type of event.\n+     */\n+    @JsonProperty(value = \"properties.eventType\")\n+    private EventTypeValues eventType;\n+\n+    /*\n+     * Source of event.\n+     */\n+    @JsonProperty(value = \"properties.eventSource\")\n+    private EventSourceValues eventSource;\n+\n+    /*\n+     * Current status of event.\n+     */\n+    @JsonProperty(value = \"properties.status\")\n+    private EventStatusValues status;\n+\n+    /*\n+     * Title text of event.\n+     */\n+    @JsonProperty(value = \"properties.title\")\n+    private String title;\n+\n+    /*\n+     * Summary text of event.\n+     */\n+    @JsonProperty(value = \"properties.summary\")\n+    private String summary;\n+\n+    /*\n+     * Header text of event.\n+     */\n+    @JsonProperty(value = \"properties.header\")\n+    private String headerProperty;\n+\n+    /*\n+     * Level of insight.\n+     */\n+    @JsonProperty(value = \"properties.level\")\n+    private LevelValues level;\n+\n+    /*\n+     * Level of event.\n+     */\n+    @JsonProperty(value = \"properties.eventLevel\")\n+    private EventLevelValues eventLevel;\n+\n+    /*\n+     * Article of event.\n+     */\n+    @JsonProperty(value = \"properties.article\")\n+    private EventPropertiesArticle article;\n+\n+    /*\n+     * Useful links of event.\n+     */\n+    @JsonProperty(value = \"properties.links\")\n+    private List<Link> links;\n+\n+    /*\n+     * It provides the Timestamp for when the health impacting event started.\n+     */\n+    @JsonProperty(value = \"properties.impactStartTime\")\n+    private OffsetDateTime impactStartTime;\n+\n+    /*\n+     * It provides the Timestamp for when the health impacting event resolved.\n+     */\n+    @JsonProperty(value = \"properties.impactMitigationTime\")\n+    private OffsetDateTime impactMitigationTime;\n+\n+    /*\n+     * List services impacted by the service health event.\n+     */\n+    @JsonProperty(value = \"properties.impact\")\n+    private List<Impact> impact;\n+\n+    /*\n+     * Recommended actions of event.\n+     */\n+    @JsonProperty(value = \"properties.recommendedActions\")\n+    private EventPropertiesRecommendedActions recommendedActions;\n+\n+    /*\n+     * Frequently asked questions for the service health event.\n+     */\n+    @JsonProperty(value = \"properties.faqs\")\n+    private List<Faq> faqs;\n+\n+    /*\n+     * It provides information if the event is High incident rate event or not.\n+     */\n+    @JsonProperty(value = \"properties.isHIR\")\n+    private Boolean isHir;\n+\n+    /*\n+     * Tells if we want to enable or disable Microsoft Support for this event.\n+     */\n+    @JsonProperty(value = \"properties.enableMicrosoftSupport\")\n+    private Boolean enableMicrosoftSupport;\n+\n+    /*\n+     * Tells if we want to enable or disable Microsoft Support for this event.\n+     */\n+    @JsonProperty(value = \"properties.enableChatWithUs\")\n+    private Boolean enableChatWithUs;\n+\n+    /*\n+     * Priority level of the event.\n+     */\n+    @JsonProperty(value = \"properties.priority\")\n+    private Long priority;\n+\n+    /*\n+     * It provides the Timestamp for when the health impacting event was last\n+     * updated.\n+     */\n+    @JsonProperty(value = \"properties.lastUpdateTime\")\n+    private OffsetDateTime lastUpdateTime;\n+\n+    /*\n+     * Stage for HIR Document\n+     */\n+    @JsonProperty(value = \"properties.hirStage\")\n+    private String hirStage;\n+\n+    /**\n+     * Get the eventType property: Type of event.\n+     *\n+     * @return the eventType value.\n+     */\n+    public EventTypeValues eventType() {\n+        return this.eventType;\n+    }\n+\n+    /**\n+     * Set the eventType property: Type of event.\n+     *\n+     * @param eventType the eventType value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withEventType(EventTypeValues eventType) {\n+        this.eventType = eventType;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the eventSource property: Source of event.\n+     *\n+     * @return the eventSource value.\n+     */\n+    public EventSourceValues eventSource() {\n+        return this.eventSource;\n+    }\n+\n+    /**\n+     * Set the eventSource property: Source of event.\n+     *\n+     * @param eventSource the eventSource value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withEventSource(EventSourceValues eventSource) {\n+        this.eventSource = eventSource;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the status property: Current status of event.\n+     *\n+     * @return the status value.\n+     */\n+    public EventStatusValues status() {\n+        return this.status;\n+    }\n+\n+    /**\n+     * Set the status property: Current status of event.\n+     *\n+     * @param status the status value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withStatus(EventStatusValues status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the title property: Title text of event.\n+     *\n+     * @return the title value.\n+     */\n+    public String title() {\n+        return this.title;\n+    }\n+\n+    /**\n+     * Set the title property: Title text of event.\n+     *\n+     * @param title the title value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withTitle(String title) {\n+        this.title = title;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the summary property: Summary text of event.\n+     *\n+     * @return the summary value.\n+     */\n+    public String summary() {\n+        return this.summary;\n+    }\n+\n+    /**\n+     * Set the summary property: Summary text of event.\n+     *\n+     * @param summary the summary value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withSummary(String summary) {\n+        this.summary = summary;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the headerProperty property: Header text of event.\n+     *\n+     * @return the headerProperty value.\n+     */\n+    public String headerProperty() {\n+        return this.headerProperty;\n+    }\n+\n+    /**\n+     * Set the headerProperty property: Header text of event.\n+     *\n+     * @param headerProperty the headerProperty value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withHeaderProperty(String headerProperty) {\n+        this.headerProperty = headerProperty;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the level property: Level of insight.\n+     *\n+     * @return the level value.\n+     */\n+    public LevelValues level() {\n+        return this.level;\n+    }\n+\n+    /**\n+     * Set the level property: Level of insight.\n+     *\n+     * @param level the level value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withLevel(LevelValues level) {\n+        this.level = level;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the eventLevel property: Level of event.\n+     *\n+     * @return the eventLevel value.\n+     */\n+    public EventLevelValues eventLevel() {\n+        return this.eventLevel;\n+    }\n+\n+    /**\n+     * Set the eventLevel property: Level of event.\n+     *\n+     * @param eventLevel the eventLevel value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withEventLevel(EventLevelValues eventLevel) {\n+        this.eventLevel = eventLevel;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the article property: Article of event.\n+     *\n+     * @return the article value.\n+     */\n+    public EventPropertiesArticle article() {\n+        return this.article;\n+    }\n+\n+    /**\n+     * Set the article property: Article of event.\n+     *\n+     * @param article the article value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withArticle(EventPropertiesArticle article) {\n+        this.article = article;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the links property: Useful links of event.\n+     *\n+     * @return the links value.\n+     */\n+    public List<Link> links() {\n+        return this.links;\n+    }\n+\n+    /**\n+     * Set the links property: Useful links of event.\n+     *\n+     * @param links the links value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withLinks(List<Link> links) {\n+        this.links = links;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the impactStartTime property: It provides the Timestamp for when the health impacting event started.\n+     *\n+     * @return the impactStartTime value.\n+     */\n+    public OffsetDateTime impactStartTime() {\n+        return this.impactStartTime;\n+    }\n+\n+    /**\n+     * Set the impactStartTime property: It provides the Timestamp for when the health impacting event started.\n+     *\n+     * @param impactStartTime the impactStartTime value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withImpactStartTime(OffsetDateTime impactStartTime) {\n+        this.impactStartTime = impactStartTime;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the impactMitigationTime property: It provides the Timestamp for when the health impacting event resolved.\n+     *\n+     * @return the impactMitigationTime value.\n+     */\n+    public OffsetDateTime impactMitigationTime() {\n+        return this.impactMitigationTime;\n+    }\n+\n+    /**\n+     * Set the impactMitigationTime property: It provides the Timestamp for when the health impacting event resolved.\n+     *\n+     * @param impactMitigationTime the impactMitigationTime value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withImpactMitigationTime(OffsetDateTime impactMitigationTime) {\n+        this.impactMitigationTime = impactMitigationTime;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the impact property: List services impacted by the service health event.\n+     *\n+     * @return the impact value.\n+     */\n+    public List<Impact> impact() {\n+        return this.impact;\n+    }\n+\n+    /**\n+     * Set the impact property: List services impacted by the service health event.\n+     *\n+     * @param impact the impact value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withImpact(List<Impact> impact) {\n+        this.impact = impact;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the recommendedActions property: Recommended actions of event.\n+     *\n+     * @return the recommendedActions value.\n+     */\n+    public EventPropertiesRecommendedActions recommendedActions() {\n+        return this.recommendedActions;\n+    }\n+\n+    /**\n+     * Set the recommendedActions property: Recommended actions of event.\n+     *\n+     * @param recommendedActions the recommendedActions value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withRecommendedActions(EventPropertiesRecommendedActions recommendedActions) {\n+        this.recommendedActions = recommendedActions;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the faqs property: Frequently asked questions for the service health event.\n+     *\n+     * @return the faqs value.\n+     */\n+    public List<Faq> faqs() {\n+        return this.faqs;\n+    }\n+\n+    /**\n+     * Set the faqs property: Frequently asked questions for the service health event.\n+     *\n+     * @param faqs the faqs value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withFaqs(List<Faq> faqs) {\n+        this.faqs = faqs;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the isHir property: It provides information if the event is High incident rate event or not.\n+     *\n+     * @return the isHir value.\n+     */\n+    public Boolean isHir() {\n+        return this.isHir;\n+    }\n+\n+    /**\n+     * Set the isHir property: It provides information if the event is High incident rate event or not.\n+     *\n+     * @param isHir the isHir value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withIsHir(Boolean isHir) {\n+        this.isHir = isHir;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the enableMicrosoftSupport property: Tells if we want to enable or disable Microsoft Support for this event.\n+     *\n+     * @return the enableMicrosoftSupport value.\n+     */\n+    public Boolean enableMicrosoftSupport() {\n+        return this.enableMicrosoftSupport;\n+    }\n+\n+    /**\n+     * Set the enableMicrosoftSupport property: Tells if we want to enable or disable Microsoft Support for this event.\n+     *\n+     * @param enableMicrosoftSupport the enableMicrosoftSupport value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withEnableMicrosoftSupport(Boolean enableMicrosoftSupport) {\n+        this.enableMicrosoftSupport = enableMicrosoftSupport;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the enableChatWithUs property: Tells if we want to enable or disable Microsoft Support for this event.\n+     *\n+     * @return the enableChatWithUs value.\n+     */\n+    public Boolean enableChatWithUs() {\n+        return this.enableChatWithUs;\n+    }\n+\n+    /**\n+     * Set the enableChatWithUs property: Tells if we want to enable or disable Microsoft Support for this event.\n+     *\n+     * @param enableChatWithUs the enableChatWithUs value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withEnableChatWithUs(Boolean enableChatWithUs) {\n+        this.enableChatWithUs = enableChatWithUs;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the priority property: Priority level of the event.\n+     *\n+     * @return the priority value.\n+     */\n+    public Long priority() {\n+        return this.priority;\n+    }\n+\n+    /**\n+     * Set the priority property: Priority level of the event.\n+     *\n+     * @param priority the priority value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withPriority(Long priority) {\n+        this.priority = priority;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the lastUpdateTime property: It provides the Timestamp for when the health impacting event was last updated.\n+     *\n+     * @return the lastUpdateTime value.\n+     */\n+    public OffsetDateTime lastUpdateTime() {\n+        return this.lastUpdateTime;\n+    }\n+\n+    /**\n+     * Set the lastUpdateTime property: It provides the Timestamp for when the health impacting event was last updated.\n+     *\n+     * @param lastUpdateTime the lastUpdateTime value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withLastUpdateTime(OffsetDateTime lastUpdateTime) {\n+        this.lastUpdateTime = lastUpdateTime;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the hirStage property: Stage for HIR Document.\n+     *\n+     * @return the hirStage value.\n+     */\n+    public String hirStage() {\n+        return this.hirStage;\n+    }\n+\n+    /**\n+     * Set the hirStage property: Stage for HIR Document.\n+     *\n+     * @param hirStage the hirStage value to set.\n+     * @return the EventInner object itself.\n+     */\n+    public EventInner withHirStage(String hirStage) {\n+        this.hirStage = hirStage;\n+        return this;\n+    }\n+\n+    /**\n+     * Validates the instance.\n+     *\n+     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     */\n+    public void validate() {\n+        if (article() != null) {\n+            article().validate();\n+        }\n+        if (links() != null) {\n+            links().forEach(e -> e.validate());\n+        }\n+        if (impact() != null) {\n+            impact().forEach(e -> e.validate());\n+        }\n+        if (recommendedActions() != null) {\n+            recommendedActions().validate();\n+        }\n+        if (faqs() != null) {\n+            faqs().forEach(e -> e.validate());\n+        }\n+    }\n+}"
  },
  {
    "sha": "f39902d2590c4b70d517b6d0c4ade4772c41d337",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/OperationListResultInner.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/OperationListResultInner.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/OperationListResultInner.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/OperationListResultInner.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.fluent.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.models.Operation;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** Lists the operations response. */\n+@Fluent\n+public final class OperationListResultInner {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(OperationListResultInner.class);\n+\n+    /*\n+     * List of operations available in the resourcehealth resource provider.\n+     */\n+    @JsonProperty(value = \"value\", required = true)\n+    private List<Operation> value;\n+\n+    /**\n+     * Get the value property: List of operations available in the resourcehealth resource provider.\n+     *\n+     * @return the value value.\n+     */\n+    public List<Operation> value() {\n+        return this.value;\n+    }\n+\n+    /**\n+     * Set the value property: List of operations available in the resourcehealth resource provider.\n+     *\n+     * @param value the value value to set.\n+     * @return the OperationListResultInner object itself.\n+     */\n+    public OperationListResultInner withValue(List<Operation> value) {\n+        this.value = value;\n+        return this;\n+    }\n+\n+    /**\n+     * Validates the instance.\n+     *\n+     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     */\n+    public void validate() {\n+        if (value() == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\"Missing required property value in model OperationListResultInner\"));\n+        } else {\n+            value().forEach(e -> e.validate());\n+        }\n+    }\n+}"
  },
  {
    "sha": "e85f5bc4badfbaff7ad34a4b0ce7f580b8ae2583",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/package-info.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/package-info.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/package-info.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/models/package-info.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/** Package containing the inner data models for MicrosoftResourceHealth. The Resource Health Client. */\n+package com.azure.resourcemanager.resourcehealth.fluent.models;"
  },
  {
    "sha": "d8f1375b59183ef4d339cfeadbe567807e154a44",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/package-info.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/package-info.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/package-info.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/fluent/package-info.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/** Package containing the service clients for MicrosoftResourceHealth. The Resource Health Client. */\n+package com.azure.resourcemanager.resourcehealth.fluent;"
  },
  {
    "sha": "5e2dbd72bf6edf2008a31cd359388e919c51feed",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusImpl.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.resourcemanager.resourcehealth.fluent.models.AvailabilityStatusInner;\n+import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatus;\n+import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatusProperties;\n+\n+public final class AvailabilityStatusImpl implements AvailabilityStatus {\n+    private AvailabilityStatusInner innerObject;\n+\n+    private final com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager;\n+\n+    AvailabilityStatusImpl(\n+        AvailabilityStatusInner innerObject,\n+        com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager) {\n+        this.innerObject = innerObject;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public String id() {\n+        return this.innerModel().id();\n+    }\n+\n+    public String name() {\n+        return this.innerModel().name();\n+    }\n+\n+    public String type() {\n+        return this.innerModel().type();\n+    }\n+\n+    public String location() {\n+        return this.innerModel().location();\n+    }\n+\n+    public AvailabilityStatusProperties properties() {\n+        return this.innerModel().properties();\n+    }\n+\n+    public AvailabilityStatusInner innerModel() {\n+        return this.innerObject;\n+    }\n+\n+    private com.azure.resourcemanager.resourcehealth.ResourcehealthManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "723390a3cf7d83b797be8fe1f14a74476bb19433",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusesClientImpl.java",
    "status": "added",
    "additions": 1182,
    "deletions": 0,
    "changes": 1182,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusesClientImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusesClientImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusesClientImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,1182 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Get;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.Headers;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.PathParam;\n+import com.azure.core.annotation.QueryParam;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.fluent.AvailabilityStatusesClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.AvailabilityStatusInner;\n+import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatusListResult;\n+import reactor.core.publisher.Mono;\n+\n+/** An instance of this class provides access to all the operations defined in AvailabilityStatusesClient. */\n+public final class AvailabilityStatusesClientImpl implements AvailabilityStatusesClient {\n+    private final ClientLogger logger = new ClientLogger(AvailabilityStatusesClientImpl.class);\n+\n+    /** The proxy service used to perform REST calls. */\n+    private final AvailabilityStatusesService service;\n+\n+    /** The service client containing this operation class. */\n+    private final MicrosoftResourceHealthImpl client;\n+\n+    /**\n+     * Initializes an instance of AvailabilityStatusesClientImpl.\n+     *\n+     * @param client the instance of the service client containing this operation class.\n+     */\n+    AvailabilityStatusesClientImpl(MicrosoftResourceHealthImpl client) {\n+        this.service =\n+            RestProxy\n+                .create(AvailabilityStatusesService.class, client.getHttpPipeline(), client.getSerializerAdapter());\n+        this.client = client;\n+    }\n+\n+    /**\n+     * The interface defining all the services for MicrosoftResourceHealthAvailabilityStatuses to be used by the proxy\n+     * service to perform REST calls.\n+     */\n+    @Host(\"{$host}\")\n+    @ServiceInterface(name = \"MicrosoftResourceHea\")\n+    private interface AvailabilityStatusesService {\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/availabilityStatuses\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AvailabilityStatusListResult>> listBySubscriptionId(\n+            @HostParam(\"$host\") String endpoint,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @QueryParam(\"$filter\") String filter,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @QueryParam(\"$expand\") String expand,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ResourceHealth\"\n+                + \"/availabilityStatuses\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AvailabilityStatusListResult>> listByResourceGroup(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @QueryParam(\"$filter\") String filter,\n+            @QueryParam(\"$expand\") String expand,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/{resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses/current\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AvailabilityStatusInner>> getByResource(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(value = \"resourceUri\", encoded = true) String resourceUri,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @QueryParam(\"$filter\") String filter,\n+            @QueryParam(\"$expand\") String expand,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/{resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AvailabilityStatusListResult>> list(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(value = \"resourceUri\", encoded = true) String resourceUri,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @QueryParam(\"$filter\") String filter,\n+            @QueryParam(\"$expand\") String expand,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"{nextLink}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AvailabilityStatusListResult>> listBySubscriptionIdNext(\n+            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n+            @HostParam(\"$host\") String endpoint,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"{nextLink}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AvailabilityStatusListResult>> listByResourceGroupNext(\n+            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n+            @HostParam(\"$host\") String endpoint,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"{nextLink}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AvailabilityStatusListResult>> listNext(\n+            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n+            @HostParam(\"$host\") String endpoint,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listBySubscriptionIdSinglePageAsync(\n+        String filter, String expand) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .listBySubscriptionId(\n+                            this.client.getEndpoint(),\n+                            this.client.getApiVersion(),\n+                            filter,\n+                            this.client.getSubscriptionId(),\n+                            expand,\n+                            accept,\n+                            context))\n+            .<PagedResponse<AvailabilityStatusInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listBySubscriptionIdSinglePageAsync(\n+        String filter, String expand, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listBySubscriptionId(\n+                this.client.getEndpoint(),\n+                this.client.getApiVersion(),\n+                filter,\n+                this.client.getSubscriptionId(),\n+                expand,\n+                accept,\n+                context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<AvailabilityStatusInner> listBySubscriptionIdAsync(String filter, String expand) {\n+        return new PagedFlux<>(\n+            () -> listBySubscriptionIdSinglePageAsync(filter, expand),\n+            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the subscription.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<AvailabilityStatusInner> listBySubscriptionIdAsync() {\n+        final String filter = null;\n+        final String expand = null;\n+        return new PagedFlux<>(\n+            () -> listBySubscriptionIdSinglePageAsync(filter, expand),\n+            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<AvailabilityStatusInner> listBySubscriptionIdAsync(\n+        String filter, String expand, Context context) {\n+        return new PagedFlux<>(\n+            () -> listBySubscriptionIdSinglePageAsync(filter, expand, context),\n+            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the subscription.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<AvailabilityStatusInner> listBySubscriptionId() {\n+        final String filter = null;\n+        final String expand = null;\n+        return new PagedIterable<>(listBySubscriptionIdAsync(filter, expand));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<AvailabilityStatusInner> listBySubscriptionId(String filter, String expand, Context context) {\n+        return new PagedIterable<>(listBySubscriptionIdAsync(filter, expand, context));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listByResourceGroupSinglePageAsync(\n+        String resourceGroupName, String filter, String expand) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .listByResourceGroup(\n+                            this.client.getEndpoint(),\n+                            this.client.getSubscriptionId(),\n+                            resourceGroupName,\n+                            this.client.getApiVersion(),\n+                            filter,\n+                            expand,\n+                            accept,\n+                            context))\n+            .<PagedResponse<AvailabilityStatusInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listByResourceGroupSinglePageAsync(\n+        String resourceGroupName, String filter, String expand, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listByResourceGroup(\n+                this.client.getEndpoint(),\n+                this.client.getSubscriptionId(),\n+                resourceGroupName,\n+                this.client.getApiVersion(),\n+                filter,\n+                expand,\n+                accept,\n+                context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<AvailabilityStatusInner> listByResourceGroupAsync(\n+        String resourceGroupName, String filter, String expand) {\n+        return new PagedFlux<>(\n+            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter, expand),\n+            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<AvailabilityStatusInner> listByResourceGroupAsync(String resourceGroupName) {\n+        final String filter = null;\n+        final String expand = null;\n+        return new PagedFlux<>(\n+            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter, expand),\n+            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<AvailabilityStatusInner> listByResourceGroupAsync(\n+        String resourceGroupName, String filter, String expand, Context context) {\n+        return new PagedFlux<>(\n+            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter, expand, context),\n+            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<AvailabilityStatusInner> listByResourceGroup(String resourceGroupName) {\n+        final String filter = null;\n+        final String expand = null;\n+        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, filter, expand));\n+    }\n+\n+    /**\n+     * Lists the current availability status for all the resources in the resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<AvailabilityStatusInner> listByResourceGroup(\n+        String resourceGroupName, String filter, String expand, Context context) {\n+        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, filter, expand, context));\n+    }\n+\n+    /**\n+     * Gets current availability status for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return current availability status for a single resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AvailabilityStatusInner>> getByResourceWithResponseAsync(\n+        String resourceUri, String filter, String expand) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceUri == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter resourceUri is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .getByResource(\n+                            this.client.getEndpoint(),\n+                            resourceUri,\n+                            this.client.getApiVersion(),\n+                            filter,\n+                            expand,\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Gets current availability status for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return current availability status for a single resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AvailabilityStatusInner>> getByResourceWithResponseAsync(\n+        String resourceUri, String filter, String expand, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceUri == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter resourceUri is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .getByResource(\n+                this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), filter, expand, accept, context);\n+    }\n+\n+    /**\n+     * Gets current availability status for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return current availability status for a single resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<AvailabilityStatusInner> getByResourceAsync(String resourceUri, String filter, String expand) {\n+        return getByResourceWithResponseAsync(resourceUri, filter, expand)\n+            .flatMap(\n+                (Response<AvailabilityStatusInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Gets current availability status for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return current availability status for a single resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<AvailabilityStatusInner> getByResourceAsync(String resourceUri) {\n+        final String filter = null;\n+        final String expand = null;\n+        return getByResourceWithResponseAsync(resourceUri, filter, expand)\n+            .flatMap(\n+                (Response<AvailabilityStatusInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Gets current availability status for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return current availability status for a single resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public AvailabilityStatusInner getByResource(String resourceUri) {\n+        final String filter = null;\n+        final String expand = null;\n+        return getByResourceAsync(resourceUri, filter, expand).block();\n+    }\n+\n+    /**\n+     * Gets current availability status for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return current availability status for a single resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<AvailabilityStatusInner> getByResourceWithResponse(\n+        String resourceUri, String filter, String expand, Context context) {\n+        return getByResourceWithResponseAsync(resourceUri, filter, expand, context).block();\n+    }\n+\n+    /**\n+     * Lists all historical availability transitions and impacting events for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listSinglePageAsync(\n+        String resourceUri, String filter, String expand) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceUri == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter resourceUri is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .list(\n+                            this.client.getEndpoint(),\n+                            resourceUri,\n+                            this.client.getApiVersion(),\n+                            filter,\n+                            expand,\n+                            accept,\n+                            context))\n+            .<PagedResponse<AvailabilityStatusInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Lists all historical availability transitions and impacting events for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listSinglePageAsync(\n+        String resourceUri, String filter, String expand, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceUri == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter resourceUri is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .list(this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), filter, expand, accept, context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+\n+    /**\n+     * Lists all historical availability transitions and impacting events for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<AvailabilityStatusInner> listAsync(String resourceUri, String filter, String expand) {\n+        return new PagedFlux<>(\n+            () -> listSinglePageAsync(resourceUri, filter, expand), nextLink -> listNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists all historical availability transitions and impacting events for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<AvailabilityStatusInner> listAsync(String resourceUri) {\n+        final String filter = null;\n+        final String expand = null;\n+        return new PagedFlux<>(\n+            () -> listSinglePageAsync(resourceUri, filter, expand), nextLink -> listNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists all historical availability transitions and impacting events for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<AvailabilityStatusInner> listAsync(\n+        String resourceUri, String filter, String expand, Context context) {\n+        return new PagedFlux<>(\n+            () -> listSinglePageAsync(resourceUri, filter, expand, context),\n+            nextLink -> listNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    /**\n+     * Lists all historical availability transitions and impacting events for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<AvailabilityStatusInner> list(String resourceUri) {\n+        final String filter = null;\n+        final String expand = null;\n+        return new PagedIterable<>(listAsync(resourceUri, filter, expand));\n+    }\n+\n+    /**\n+     * Lists all historical availability transitions and impacting events for a single resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param expand Setting $expand=recommendedactions in url query expands the recommendedactions in the response.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<AvailabilityStatusInner> list(\n+        String resourceUri, String filter, String expand, Context context) {\n+        return new PagedIterable<>(listAsync(resourceUri, filter, expand, context));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listBySubscriptionIdNextSinglePageAsync(String nextLink) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context -> service.listBySubscriptionIdNext(nextLink, this.client.getEndpoint(), accept, context))\n+            .<PagedResponse<AvailabilityStatusInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listBySubscriptionIdNextSinglePageAsync(\n+        String nextLink, Context context) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listBySubscriptionIdNext(nextLink, this.client.getEndpoint(), accept, context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))\n+            .<PagedResponse<AvailabilityStatusInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listByResourceGroupNextSinglePageAsync(\n+        String nextLink, Context context) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listNextSinglePageAsync(String nextLink) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))\n+            .<PagedResponse<AvailabilityStatusInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List availabilityStatus operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<AvailabilityStatusInner>> listNextSinglePageAsync(String nextLink, Context context) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listNext(nextLink, this.client.getEndpoint(), accept, context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+}"
  },
  {
    "sha": "8ab6788bbf9c160a955d1b3df98cce821ffe03b5",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusesImpl.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusesImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusesImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/AvailabilityStatusesImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.fluent.AvailabilityStatusesClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.AvailabilityStatusInner;\n+import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatus;\n+import com.azure.resourcemanager.resourcehealth.models.AvailabilityStatuses;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public final class AvailabilityStatusesImpl implements AvailabilityStatuses {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(AvailabilityStatusesImpl.class);\n+\n+    private final AvailabilityStatusesClient innerClient;\n+\n+    private final com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager;\n+\n+    public AvailabilityStatusesImpl(\n+        AvailabilityStatusesClient innerClient,\n+        com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager) {\n+        this.innerClient = innerClient;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public PagedIterable<AvailabilityStatus> listBySubscriptionId() {\n+        PagedIterable<AvailabilityStatusInner> inner = this.serviceClient().listBySubscriptionId();\n+        return Utils.mapPage(inner, inner1 -> new AvailabilityStatusImpl(inner1, this.manager()));\n+    }\n+\n+    public PagedIterable<AvailabilityStatus> listBySubscriptionId(String filter, String expand, Context context) {\n+        PagedIterable<AvailabilityStatusInner> inner =\n+            this.serviceClient().listBySubscriptionId(filter, expand, context);\n+        return Utils.mapPage(inner, inner1 -> new AvailabilityStatusImpl(inner1, this.manager()));\n+    }\n+\n+    public PagedIterable<AvailabilityStatus> listByResourceGroup(String resourceGroupName) {\n+        PagedIterable<AvailabilityStatusInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);\n+        return Utils.mapPage(inner, inner1 -> new AvailabilityStatusImpl(inner1, this.manager()));\n+    }\n+\n+    public PagedIterable<AvailabilityStatus> listByResourceGroup(\n+        String resourceGroupName, String filter, String expand, Context context) {\n+        PagedIterable<AvailabilityStatusInner> inner =\n+            this.serviceClient().listByResourceGroup(resourceGroupName, filter, expand, context);\n+        return Utils.mapPage(inner, inner1 -> new AvailabilityStatusImpl(inner1, this.manager()));\n+    }\n+\n+    public AvailabilityStatus getByResource(String resourceUri) {\n+        AvailabilityStatusInner inner = this.serviceClient().getByResource(resourceUri);\n+        if (inner != null) {\n+            return new AvailabilityStatusImpl(inner, this.manager());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Response<AvailabilityStatus> getByResourceWithResponse(\n+        String resourceUri, String filter, String expand, Context context) {\n+        Response<AvailabilityStatusInner> inner =\n+            this.serviceClient().getByResourceWithResponse(resourceUri, filter, expand, context);\n+        if (inner != null) {\n+            return new SimpleResponse<>(\n+                inner.getRequest(),\n+                inner.getStatusCode(),\n+                inner.getHeaders(),\n+                new AvailabilityStatusImpl(inner.getValue(), this.manager()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public PagedIterable<AvailabilityStatus> list(String resourceUri) {\n+        PagedIterable<AvailabilityStatusInner> inner = this.serviceClient().list(resourceUri);\n+        return Utils.mapPage(inner, inner1 -> new AvailabilityStatusImpl(inner1, this.manager()));\n+    }\n+\n+    public PagedIterable<AvailabilityStatus> list(String resourceUri, String filter, String expand, Context context) {\n+        PagedIterable<AvailabilityStatusInner> inner = this.serviceClient().list(resourceUri, filter, expand, context);\n+        return Utils.mapPage(inner, inner1 -> new AvailabilityStatusImpl(inner1, this.manager()));\n+    }\n+\n+    private AvailabilityStatusesClient serviceClient() {\n+        return this.innerClient;\n+    }\n+\n+    private com.azure.resourcemanager.resourcehealth.ResourcehealthManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "a8a77e6f56af34d335d0f78a8d363c20fa37e9f7",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesClientImpl.java",
    "status": "added",
    "additions": 374,
    "deletions": 0,
    "changes": 374,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesClientImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesClientImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesClientImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,374 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Get;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.Headers;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.PathParam;\n+import com.azure.core.annotation.QueryParam;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.fluent.EmergingIssuesClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.EmergingIssuesGetResultInner;\n+import com.azure.resourcemanager.resourcehealth.models.EmergingIssueListResult;\n+import reactor.core.publisher.Mono;\n+\n+/** An instance of this class provides access to all the operations defined in EmergingIssuesClient. */\n+public final class EmergingIssuesClientImpl implements EmergingIssuesClient {\n+    private final ClientLogger logger = new ClientLogger(EmergingIssuesClientImpl.class);\n+\n+    /** The proxy service used to perform REST calls. */\n+    private final EmergingIssuesService service;\n+\n+    /** The service client containing this operation class. */\n+    private final MicrosoftResourceHealthImpl client;\n+\n+    /**\n+     * Initializes an instance of EmergingIssuesClientImpl.\n+     *\n+     * @param client the instance of the service client containing this operation class.\n+     */\n+    EmergingIssuesClientImpl(MicrosoftResourceHealthImpl client) {\n+        this.service =\n+            RestProxy.create(EmergingIssuesService.class, client.getHttpPipeline(), client.getSerializerAdapter());\n+        this.client = client;\n+    }\n+\n+    /**\n+     * The interface defining all the services for MicrosoftResourceHealthEmergingIssues to be used by the proxy service\n+     * to perform REST calls.\n+     */\n+    @Host(\"{$host}\")\n+    @ServiceInterface(name = \"MicrosoftResourceHea\")\n+    private interface EmergingIssuesService {\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/providers/Microsoft.ResourceHealth/emergingIssues/{issueName}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<EmergingIssuesGetResultInner>> get(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"issueName\") String issueName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/providers/Microsoft.ResourceHealth/emergingIssues\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<EmergingIssueListResult>> list(\n+            @HostParam(\"$host\") String endpoint,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"{nextLink}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<EmergingIssueListResult>> listNext(\n+            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n+            @HostParam(\"$host\") String endpoint,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+    }\n+\n+    /**\n+     * Gets Azure services' emerging issues.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return azure services' emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<EmergingIssuesGetResultInner>> getWithResponseAsync() {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String issueName = \"default\";\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service.get(this.client.getEndpoint(), issueName, this.client.getApiVersion(), accept, context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Gets Azure services' emerging issues.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return azure services' emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<EmergingIssuesGetResultInner>> getWithResponseAsync(Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String issueName = \"default\";\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service.get(this.client.getEndpoint(), issueName, this.client.getApiVersion(), accept, context);\n+    }\n+\n+    /**\n+     * Gets Azure services' emerging issues.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return azure services' emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<EmergingIssuesGetResultInner> getAsync() {\n+        return getWithResponseAsync()\n+            .flatMap(\n+                (Response<EmergingIssuesGetResultInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Gets Azure services' emerging issues.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return azure services' emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public EmergingIssuesGetResultInner get() {\n+        return getAsync().block();\n+    }\n+\n+    /**\n+     * Gets Azure services' emerging issues.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return azure services' emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<EmergingIssuesGetResultInner> getWithResponse(Context context) {\n+        return getWithResponseAsync(context).block();\n+    }\n+\n+    /**\n+     * Lists Azure services' emerging issues.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EmergingIssuesGetResultInner>> listSinglePageAsync() {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), accept, context))\n+            .<PagedResponse<EmergingIssuesGetResultInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Lists Azure services' emerging issues.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EmergingIssuesGetResultInner>> listSinglePageAsync(Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .list(this.client.getEndpoint(), this.client.getApiVersion(), accept, context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+\n+    /**\n+     * Lists Azure services' emerging issues.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<EmergingIssuesGetResultInner> listAsync() {\n+        return new PagedFlux<>(() -> listSinglePageAsync(), nextLink -> listNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists Azure services' emerging issues.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<EmergingIssuesGetResultInner> listAsync(Context context) {\n+        return new PagedFlux<>(\n+            () -> listSinglePageAsync(context), nextLink -> listNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    /**\n+     * Lists Azure services' emerging issues.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<EmergingIssuesGetResultInner> list() {\n+        return new PagedIterable<>(listAsync());\n+    }\n+\n+    /**\n+     * Lists Azure services' emerging issues.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<EmergingIssuesGetResultInner> list(Context context) {\n+        return new PagedIterable<>(listAsync(context));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EmergingIssuesGetResultInner>> listNextSinglePageAsync(String nextLink) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))\n+            .<PagedResponse<EmergingIssuesGetResultInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the list of emerging issues.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EmergingIssuesGetResultInner>> listNextSinglePageAsync(\n+        String nextLink, Context context) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listNext(nextLink, this.client.getEndpoint(), accept, context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+}"
  },
  {
    "sha": "0cbfccee3232d803cccd19d35fb56744de2e6412",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesGetResultImpl.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesGetResultImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesGetResultImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesGetResultImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.resourcemanager.resourcehealth.fluent.models.EmergingIssuesGetResultInner;\n+import com.azure.resourcemanager.resourcehealth.models.EmergingIssuesGetResult;\n+import com.azure.resourcemanager.resourcehealth.models.StatusActiveEvent;\n+import com.azure.resourcemanager.resourcehealth.models.StatusBanner;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class EmergingIssuesGetResultImpl implements EmergingIssuesGetResult {\n+    private EmergingIssuesGetResultInner innerObject;\n+\n+    private final com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager;\n+\n+    EmergingIssuesGetResultImpl(\n+        EmergingIssuesGetResultInner innerObject,\n+        com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager) {\n+        this.innerObject = innerObject;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public String id() {\n+        return this.innerModel().id();\n+    }\n+\n+    public String name() {\n+        return this.innerModel().name();\n+    }\n+\n+    public String type() {\n+        return this.innerModel().type();\n+    }\n+\n+    public OffsetDateTime refreshTimestamp() {\n+        return this.innerModel().refreshTimestamp();\n+    }\n+\n+    public List<StatusBanner> statusBanners() {\n+        List<StatusBanner> inner = this.innerModel().statusBanners();\n+        if (inner != null) {\n+            return Collections.unmodifiableList(inner);\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    public List<StatusActiveEvent> statusActiveEvents() {\n+        List<StatusActiveEvent> inner = this.innerModel().statusActiveEvents();\n+        if (inner != null) {\n+            return Collections.unmodifiableList(inner);\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    public EmergingIssuesGetResultInner innerModel() {\n+        return this.innerObject;\n+    }\n+\n+    private com.azure.resourcemanager.resourcehealth.ResourcehealthManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "9f73d5f17dfce79c04f2d6133e2172cdb6c9c020",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesImpl.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EmergingIssuesImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.fluent.EmergingIssuesClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.EmergingIssuesGetResultInner;\n+import com.azure.resourcemanager.resourcehealth.models.EmergingIssues;\n+import com.azure.resourcemanager.resourcehealth.models.EmergingIssuesGetResult;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public final class EmergingIssuesImpl implements EmergingIssues {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(EmergingIssuesImpl.class);\n+\n+    private final EmergingIssuesClient innerClient;\n+\n+    private final com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager;\n+\n+    public EmergingIssuesImpl(\n+        EmergingIssuesClient innerClient,\n+        com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager) {\n+        this.innerClient = innerClient;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public EmergingIssuesGetResult get() {\n+        EmergingIssuesGetResultInner inner = this.serviceClient().get();\n+        if (inner != null) {\n+            return new EmergingIssuesGetResultImpl(inner, this.manager());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Response<EmergingIssuesGetResult> getWithResponse(Context context) {\n+        Response<EmergingIssuesGetResultInner> inner = this.serviceClient().getWithResponse(context);\n+        if (inner != null) {\n+            return new SimpleResponse<>(\n+                inner.getRequest(),\n+                inner.getStatusCode(),\n+                inner.getHeaders(),\n+                new EmergingIssuesGetResultImpl(inner.getValue(), this.manager()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public PagedIterable<EmergingIssuesGetResult> list() {\n+        PagedIterable<EmergingIssuesGetResultInner> inner = this.serviceClient().list();\n+        return Utils.mapPage(inner, inner1 -> new EmergingIssuesGetResultImpl(inner1, this.manager()));\n+    }\n+\n+    public PagedIterable<EmergingIssuesGetResult> list(Context context) {\n+        PagedIterable<EmergingIssuesGetResultInner> inner = this.serviceClient().list(context);\n+        return Utils.mapPage(inner, inner1 -> new EmergingIssuesGetResultImpl(inner1, this.manager()));\n+    }\n+\n+    private EmergingIssuesClient serviceClient() {\n+        return this.innerClient;\n+    }\n+\n+    private com.azure.resourcemanager.resourcehealth.ResourcehealthManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "d01a12379459b79744c0be7dc88f802ecf07d893",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventImpl.java",
    "status": "added",
    "additions": 151,
    "deletions": 0,
    "changes": 151,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.resourcemanager.resourcehealth.fluent.models.EventInner;\n+import com.azure.resourcemanager.resourcehealth.models.Event;\n+import com.azure.resourcemanager.resourcehealth.models.EventLevelValues;\n+import com.azure.resourcemanager.resourcehealth.models.EventPropertiesArticle;\n+import com.azure.resourcemanager.resourcehealth.models.EventPropertiesRecommendedActions;\n+import com.azure.resourcemanager.resourcehealth.models.EventSourceValues;\n+import com.azure.resourcemanager.resourcehealth.models.EventStatusValues;\n+import com.azure.resourcemanager.resourcehealth.models.EventTypeValues;\n+import com.azure.resourcemanager.resourcehealth.models.Faq;\n+import com.azure.resourcemanager.resourcehealth.models.Impact;\n+import com.azure.resourcemanager.resourcehealth.models.LevelValues;\n+import com.azure.resourcemanager.resourcehealth.models.Link;\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class EventImpl implements Event {\n+    private EventInner innerObject;\n+\n+    private final com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager;\n+\n+    EventImpl(EventInner innerObject, com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager) {\n+        this.innerObject = innerObject;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public String id() {\n+        return this.innerModel().id();\n+    }\n+\n+    public String name() {\n+        return this.innerModel().name();\n+    }\n+\n+    public String type() {\n+        return this.innerModel().type();\n+    }\n+\n+    public EventTypeValues eventType() {\n+        return this.innerModel().eventType();\n+    }\n+\n+    public EventSourceValues eventSource() {\n+        return this.innerModel().eventSource();\n+    }\n+\n+    public EventStatusValues status() {\n+        return this.innerModel().status();\n+    }\n+\n+    public String title() {\n+        return this.innerModel().title();\n+    }\n+\n+    public String summary() {\n+        return this.innerModel().summary();\n+    }\n+\n+    public String headerProperty() {\n+        return this.innerModel().headerProperty();\n+    }\n+\n+    public LevelValues level() {\n+        return this.innerModel().level();\n+    }\n+\n+    public EventLevelValues eventLevel() {\n+        return this.innerModel().eventLevel();\n+    }\n+\n+    public EventPropertiesArticle article() {\n+        return this.innerModel().article();\n+    }\n+\n+    public List<Link> links() {\n+        List<Link> inner = this.innerModel().links();\n+        if (inner != null) {\n+            return Collections.unmodifiableList(inner);\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    public OffsetDateTime impactStartTime() {\n+        return this.innerModel().impactStartTime();\n+    }\n+\n+    public OffsetDateTime impactMitigationTime() {\n+        return this.innerModel().impactMitigationTime();\n+    }\n+\n+    public List<Impact> impact() {\n+        List<Impact> inner = this.innerModel().impact();\n+        if (inner != null) {\n+            return Collections.unmodifiableList(inner);\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    public EventPropertiesRecommendedActions recommendedActions() {\n+        return this.innerModel().recommendedActions();\n+    }\n+\n+    public List<Faq> faqs() {\n+        List<Faq> inner = this.innerModel().faqs();\n+        if (inner != null) {\n+            return Collections.unmodifiableList(inner);\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    public Boolean isHir() {\n+        return this.innerModel().isHir();\n+    }\n+\n+    public Boolean enableMicrosoftSupport() {\n+        return this.innerModel().enableMicrosoftSupport();\n+    }\n+\n+    public Boolean enableChatWithUs() {\n+        return this.innerModel().enableChatWithUs();\n+    }\n+\n+    public Long priority() {\n+        return this.innerModel().priority();\n+    }\n+\n+    public OffsetDateTime lastUpdateTime() {\n+        return this.innerModel().lastUpdateTime();\n+    }\n+\n+    public String hirStage() {\n+        return this.innerModel().hirStage();\n+    }\n+\n+    public EventInner innerModel() {\n+        return this.innerObject;\n+    }\n+\n+    private com.azure.resourcemanager.resourcehealth.ResourcehealthManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "7c23fb44426f5a5b6b6fc0dedb0526f013606e01",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventsOperationsClientImpl.java",
    "status": "added",
    "additions": 681,
    "deletions": 0,
    "changes": 681,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventsOperationsClientImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventsOperationsClientImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventsOperationsClientImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,681 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Get;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.Headers;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.PathParam;\n+import com.azure.core.annotation.QueryParam;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.fluent.EventsOperationsClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.EventInner;\n+import com.azure.resourcemanager.resourcehealth.models.Events;\n+import reactor.core.publisher.Mono;\n+\n+/** An instance of this class provides access to all the operations defined in EventsOperationsClient. */\n+public final class EventsOperationsClientImpl implements EventsOperationsClient {\n+    private final ClientLogger logger = new ClientLogger(EventsOperationsClientImpl.class);\n+\n+    /** The proxy service used to perform REST calls. */\n+    private final EventsOperationsService service;\n+\n+    /** The service client containing this operation class. */\n+    private final MicrosoftResourceHealthImpl client;\n+\n+    /**\n+     * Initializes an instance of EventsOperationsClientImpl.\n+     *\n+     * @param client the instance of the service client containing this operation class.\n+     */\n+    EventsOperationsClientImpl(MicrosoftResourceHealthImpl client) {\n+        this.service =\n+            RestProxy.create(EventsOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());\n+        this.client = client;\n+    }\n+\n+    /**\n+     * The interface defining all the services for MicrosoftResourceHealthEventsOperations to be used by the proxy\n+     * service to perform REST calls.\n+     */\n+    @Host(\"{$host}\")\n+    @ServiceInterface(name = \"MicrosoftResourceHea\")\n+    private interface EventsOperationsService {\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<Events>> list(\n+            @HostParam(\"$host\") String endpoint,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @QueryParam(\"$filter\") String filter,\n+            @QueryParam(\"queryStartTime\") String queryStartTime,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @QueryParam(\"view\") String view,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/{resourceUri}/providers/Microsoft.ResourceHealth/events\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<Events>> listBySingleResource(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(value = \"resourceUri\", encoded = true) String resourceUri,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @QueryParam(\"$filter\") String filter,\n+            @QueryParam(\"view\") String view,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"{nextLink}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<Events>> listBySubscriptionIdNext(\n+            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n+            @HostParam(\"$host\") String endpoint,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"{nextLink}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<Events>> listBySingleResourceNext(\n+            @PathParam(value = \"nextLink\", encoded = true) String nextLink,\n+            @HostParam(\"$host\") String endpoint,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+    }\n+\n+    /**\n+     * Lists current service health events in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param queryStartTime Specifies from when to return events, based on the lastUpdateTime property. For example,\n+     *     queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020.\n+     * @param view setting view=full expands the article parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EventInner>> listSinglePageAsync(String filter, String queryStartTime, String view) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .list(\n+                            this.client.getEndpoint(),\n+                            this.client.getApiVersion(),\n+                            filter,\n+                            queryStartTime,\n+                            this.client.getSubscriptionId(),\n+                            view,\n+                            accept,\n+                            context))\n+            .<PagedResponse<EventInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Lists current service health events in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param queryStartTime Specifies from when to return events, based on the lastUpdateTime property. For example,\n+     *     queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020.\n+     * @param view setting view=full expands the article parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EventInner>> listSinglePageAsync(\n+        String filter, String queryStartTime, String view, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .list(\n+                this.client.getEndpoint(),\n+                this.client.getApiVersion(),\n+                filter,\n+                queryStartTime,\n+                this.client.getSubscriptionId(),\n+                view,\n+                accept,\n+                context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+\n+    /**\n+     * Lists current service health events in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param queryStartTime Specifies from when to return events, based on the lastUpdateTime property. For example,\n+     *     queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020.\n+     * @param view setting view=full expands the article parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<EventInner> listAsync(String filter, String queryStartTime, String view) {\n+        return new PagedFlux<>(\n+            () -> listSinglePageAsync(filter, queryStartTime, view),\n+            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists current service health events in the subscription.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<EventInner> listAsync() {\n+        final String filter = null;\n+        final String queryStartTime = null;\n+        final String view = null;\n+        return new PagedFlux<>(\n+            () -> listSinglePageAsync(filter, queryStartTime, view),\n+            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists current service health events in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param queryStartTime Specifies from when to return events, based on the lastUpdateTime property. For example,\n+     *     queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020.\n+     * @param view setting view=full expands the article parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<EventInner> listAsync(String filter, String queryStartTime, String view, Context context) {\n+        return new PagedFlux<>(\n+            () -> listSinglePageAsync(filter, queryStartTime, view, context),\n+            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    /**\n+     * Lists current service health events in the subscription.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<EventInner> list() {\n+        final String filter = null;\n+        final String queryStartTime = null;\n+        final String view = null;\n+        return new PagedIterable<>(listAsync(filter, queryStartTime, view));\n+    }\n+\n+    /**\n+     * Lists current service health events in the subscription.\n+     *\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param queryStartTime Specifies from when to return events, based on the lastUpdateTime property. For example,\n+     *     queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020.\n+     * @param view setting view=full expands the article parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<EventInner> list(String filter, String queryStartTime, String view, Context context) {\n+        return new PagedIterable<>(listAsync(filter, queryStartTime, view, context));\n+    }\n+\n+    /**\n+     * Lists current service health events for given resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param view setting view=full expands the article parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EventInner>> listBySingleResourceSinglePageAsync(\n+        String resourceUri, String filter, String view) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceUri == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter resourceUri is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .listBySingleResource(\n+                            this.client.getEndpoint(),\n+                            resourceUri,\n+                            this.client.getApiVersion(),\n+                            filter,\n+                            view,\n+                            accept,\n+                            context))\n+            .<PagedResponse<EventInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Lists current service health events for given resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param view setting view=full expands the article parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EventInner>> listBySingleResourceSinglePageAsync(\n+        String resourceUri, String filter, String view, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceUri == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter resourceUri is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listBySingleResource(\n+                this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), filter, view, accept, context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+\n+    /**\n+     * Lists current service health events for given resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param view setting view=full expands the article parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<EventInner> listBySingleResourceAsync(String resourceUri, String filter, String view) {\n+        return new PagedFlux<>(\n+            () -> listBySingleResourceSinglePageAsync(resourceUri, filter, view),\n+            nextLink -> listBySingleResourceNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists current service health events for given resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<EventInner> listBySingleResourceAsync(String resourceUri) {\n+        final String filter = null;\n+        final String view = null;\n+        return new PagedFlux<>(\n+            () -> listBySingleResourceSinglePageAsync(resourceUri, filter, view),\n+            nextLink -> listBySingleResourceNextSinglePageAsync(nextLink));\n+    }\n+\n+    /**\n+     * Lists current service health events for given resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param view setting view=full expands the article parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<EventInner> listBySingleResourceAsync(\n+        String resourceUri, String filter, String view, Context context) {\n+        return new PagedFlux<>(\n+            () -> listBySingleResourceSinglePageAsync(resourceUri, filter, view, context),\n+            nextLink -> listBySingleResourceNextSinglePageAsync(nextLink, context));\n+    }\n+\n+    /**\n+     * Lists current service health events for given resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<EventInner> listBySingleResource(String resourceUri) {\n+        final String filter = null;\n+        final String view = null;\n+        return new PagedIterable<>(listBySingleResourceAsync(resourceUri, filter, view));\n+    }\n+\n+    /**\n+     * Lists current service health events for given resource.\n+     *\n+     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource type.\n+     *     Currently the API support not nested and one nesting level resource types :\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}\n+     *     and\n+     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}.\n+     * @param filter A valid odata query to limit the events returned. The logical operators and, or, equal, not equal,\n+     *     and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq\n+     *     'PlannedMaintenance' OR\n+     *     %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27.\n+     * @param view setting view=full expands the article parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<EventInner> listBySingleResource(\n+        String resourceUri, String filter, String view, Context context) {\n+        return new PagedIterable<>(listBySingleResourceAsync(resourceUri, filter, view, context));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EventInner>> listBySubscriptionIdNextSinglePageAsync(String nextLink) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context -> service.listBySubscriptionIdNext(nextLink, this.client.getEndpoint(), accept, context))\n+            .<PagedResponse<EventInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EventInner>> listBySubscriptionIdNextSinglePageAsync(String nextLink, Context context) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listBySubscriptionIdNext(nextLink, this.client.getEndpoint(), accept, context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EventInner>> listBySingleResourceNextSinglePageAsync(String nextLink) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context -> service.listBySingleResourceNext(nextLink, this.client.getEndpoint(), accept, context))\n+            .<PagedResponse<EventInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Get the next page of items.\n+     *\n+     * @param nextLink The nextLink parameter.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the List events operation response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<EventInner>> listBySingleResourceNextSinglePageAsync(String nextLink, Context context) {\n+        if (nextLink == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter nextLink is required and cannot be null.\"));\n+        }\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listBySingleResourceNext(nextLink, this.client.getEndpoint(), accept, context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(),\n+                        res.getStatusCode(),\n+                        res.getHeaders(),\n+                        res.getValue().value(),\n+                        res.getValue().nextLink(),\n+                        null));\n+    }\n+}"
  },
  {
    "sha": "386d29d04a3007aa4983634c9fe404a2c37b6caf",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventsOperationsImpl.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventsOperationsImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventsOperationsImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/EventsOperationsImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.fluent.EventsOperationsClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.EventInner;\n+import com.azure.resourcemanager.resourcehealth.models.Event;\n+import com.azure.resourcemanager.resourcehealth.models.EventsOperations;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public final class EventsOperationsImpl implements EventsOperations {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(EventsOperationsImpl.class);\n+\n+    private final EventsOperationsClient innerClient;\n+\n+    private final com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager;\n+\n+    public EventsOperationsImpl(\n+        EventsOperationsClient innerClient,\n+        com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager) {\n+        this.innerClient = innerClient;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public PagedIterable<Event> list() {\n+        PagedIterable<EventInner> inner = this.serviceClient().list();\n+        return Utils.mapPage(inner, inner1 -> new EventImpl(inner1, this.manager()));\n+    }\n+\n+    public PagedIterable<Event> list(String filter, String queryStartTime, String view, Context context) {\n+        PagedIterable<EventInner> inner = this.serviceClient().list(filter, queryStartTime, view, context);\n+        return Utils.mapPage(inner, inner1 -> new EventImpl(inner1, this.manager()));\n+    }\n+\n+    public PagedIterable<Event> listBySingleResource(String resourceUri) {\n+        PagedIterable<EventInner> inner = this.serviceClient().listBySingleResource(resourceUri);\n+        return Utils.mapPage(inner, inner1 -> new EventImpl(inner1, this.manager()));\n+    }\n+\n+    public PagedIterable<Event> listBySingleResource(String resourceUri, String filter, String view, Context context) {\n+        PagedIterable<EventInner> inner = this.serviceClient().listBySingleResource(resourceUri, filter, view, context);\n+        return Utils.mapPage(inner, inner1 -> new EventImpl(inner1, this.manager()));\n+    }\n+\n+    private EventsOperationsClient serviceClient() {\n+        return this.innerClient;\n+    }\n+\n+    private com.azure.resourcemanager.resourcehealth.ResourcehealthManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "d08a0643b657292b40d8fa23154e073ea6d516fe",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/MicrosoftResourceHealthBuilder.java",
    "status": "added",
    "additions": 149,
    "deletions": 0,
    "changes": 149,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/MicrosoftResourceHealthBuilder.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/MicrosoftResourceHealthBuilder.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/MicrosoftResourceHealthBuilder.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,149 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.CookiePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.management.serializer.SerializerFactory;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import java.time.Duration;\n+\n+/** A builder for creating a new instance of the MicrosoftResourceHealthImpl type. */\n+@ServiceClientBuilder(serviceClients = {MicrosoftResourceHealthImpl.class})\n+public final class MicrosoftResourceHealthBuilder {\n+    /*\n+     * Subscription credentials which uniquely identify Microsoft Azure\n+     * subscription. The subscription ID forms part of the URI for every\n+     * service call.\n+     */\n+    private String subscriptionId;\n+\n+    /**\n+     * Sets Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms\n+     * part of the URI for every service call.\n+     *\n+     * @param subscriptionId the subscriptionId value.\n+     * @return the MicrosoftResourceHealthBuilder.\n+     */\n+    public MicrosoftResourceHealthBuilder subscriptionId(String subscriptionId) {\n+        this.subscriptionId = subscriptionId;\n+        return this;\n+    }\n+\n+    /*\n+     * server parameter\n+     */\n+    private String endpoint;\n+\n+    /**\n+     * Sets server parameter.\n+     *\n+     * @param endpoint the endpoint value.\n+     * @return the MicrosoftResourceHealthBuilder.\n+     */\n+    public MicrosoftResourceHealthBuilder endpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /*\n+     * The environment to connect to\n+     */\n+    private AzureEnvironment environment;\n+\n+    /**\n+     * Sets The environment to connect to.\n+     *\n+     * @param environment the environment value.\n+     * @return the MicrosoftResourceHealthBuilder.\n+     */\n+    public MicrosoftResourceHealthBuilder environment(AzureEnvironment environment) {\n+        this.environment = environment;\n+        return this;\n+    }\n+\n+    /*\n+     * The default poll interval for long-running operation\n+     */\n+    private Duration defaultPollInterval;\n+\n+    /**\n+     * Sets The default poll interval for long-running operation.\n+     *\n+     * @param defaultPollInterval the defaultPollInterval value.\n+     * @return the MicrosoftResourceHealthBuilder.\n+     */\n+    public MicrosoftResourceHealthBuilder defaultPollInterval(Duration defaultPollInterval) {\n+        this.defaultPollInterval = defaultPollInterval;\n+        return this;\n+    }\n+\n+    /*\n+     * The HTTP pipeline to send requests through\n+     */\n+    private HttpPipeline pipeline;\n+\n+    /**\n+     * Sets The HTTP pipeline to send requests through.\n+     *\n+     * @param pipeline the pipeline value.\n+     * @return the MicrosoftResourceHealthBuilder.\n+     */\n+    public MicrosoftResourceHealthBuilder pipeline(HttpPipeline pipeline) {\n+        this.pipeline = pipeline;\n+        return this;\n+    }\n+\n+    /*\n+     * The serializer to serialize an object into a string\n+     */\n+    private SerializerAdapter serializerAdapter;\n+\n+    /**\n+     * Sets The serializer to serialize an object into a string.\n+     *\n+     * @param serializerAdapter the serializerAdapter value.\n+     * @return the MicrosoftResourceHealthBuilder.\n+     */\n+    public MicrosoftResourceHealthBuilder serializerAdapter(SerializerAdapter serializerAdapter) {\n+        this.serializerAdapter = serializerAdapter;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds an instance of MicrosoftResourceHealthImpl with the provided parameters.\n+     *\n+     * @return an instance of MicrosoftResourceHealthImpl.\n+     */\n+    public MicrosoftResourceHealthImpl buildClient() {\n+        if (endpoint == null) {\n+            this.endpoint = \"https://management.azure.com\";\n+        }\n+        if (environment == null) {\n+            this.environment = AzureEnvironment.AZURE;\n+        }\n+        if (defaultPollInterval == null) {\n+            this.defaultPollInterval = Duration.ofSeconds(30);\n+        }\n+        if (pipeline == null) {\n+            this.pipeline =\n+                new HttpPipelineBuilder()\n+                    .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())\n+                    .build();\n+        }\n+        if (serializerAdapter == null) {\n+            this.serializerAdapter = SerializerFactory.createDefaultManagementSerializerAdapter();\n+        }\n+        MicrosoftResourceHealthImpl client =\n+            new MicrosoftResourceHealthImpl(\n+                pipeline, serializerAdapter, defaultPollInterval, environment, subscriptionId, endpoint);\n+        return client;\n+    }\n+}"
  },
  {
    "sha": "5fe97d2ea144027f72ca911c3ea2eafeac720258",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/MicrosoftResourceHealthImpl.java",
    "status": "added",
    "additions": 340,
    "deletions": 0,
    "changes": 340,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/MicrosoftResourceHealthImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/MicrosoftResourceHealthImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/MicrosoftResourceHealthImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,340 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.management.exception.ManagementError;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.management.polling.PollResult;\n+import com.azure.core.management.polling.PollerFactory;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.AsyncPollResponse;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import com.azure.resourcemanager.resourcehealth.fluent.AvailabilityStatusesClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.EmergingIssuesClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.EventsOperationsClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.MicrosoftResourceHealth;\n+import com.azure.resourcemanager.resourcehealth.fluent.OperationsClient;\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Map;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+/** Initializes a new instance of the MicrosoftResourceHealthImpl type. */\n+@ServiceClient(builder = MicrosoftResourceHealthBuilder.class)\n+public final class MicrosoftResourceHealthImpl implements MicrosoftResourceHealth {\n+    private final ClientLogger logger = new ClientLogger(MicrosoftResourceHealthImpl.class);\n+\n+    /**\n+     * Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of\n+     * the URI for every service call.\n+     */\n+    private final String subscriptionId;\n+\n+    /**\n+     * Gets Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms\n+     * part of the URI for every service call.\n+     *\n+     * @return the subscriptionId value.\n+     */\n+    public String getSubscriptionId() {\n+        return this.subscriptionId;\n+    }\n+\n+    /** server parameter. */\n+    private final String endpoint;\n+\n+    /**\n+     * Gets server parameter.\n+     *\n+     * @return the endpoint value.\n+     */\n+    public String getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    /** Api Version. */\n+    private final String apiVersion;\n+\n+    /**\n+     * Gets Api Version.\n+     *\n+     * @return the apiVersion value.\n+     */\n+    public String getApiVersion() {\n+        return this.apiVersion;\n+    }\n+\n+    /** The HTTP pipeline to send requests through. */\n+    private final HttpPipeline httpPipeline;\n+\n+    /**\n+     * Gets The HTTP pipeline to send requests through.\n+     *\n+     * @return the httpPipeline value.\n+     */\n+    public HttpPipeline getHttpPipeline() {\n+        return this.httpPipeline;\n+    }\n+\n+    /** The serializer to serialize an object into a string. */\n+    private final SerializerAdapter serializerAdapter;\n+\n+    /**\n+     * Gets The serializer to serialize an object into a string.\n+     *\n+     * @return the serializerAdapter value.\n+     */\n+    SerializerAdapter getSerializerAdapter() {\n+        return this.serializerAdapter;\n+    }\n+\n+    /** The default poll interval for long-running operation. */\n+    private final Duration defaultPollInterval;\n+\n+    /**\n+     * Gets The default poll interval for long-running operation.\n+     *\n+     * @return the defaultPollInterval value.\n+     */\n+    public Duration getDefaultPollInterval() {\n+        return this.defaultPollInterval;\n+    }\n+\n+    /** The EventsOperationsClient object to access its operations. */\n+    private final EventsOperationsClient eventsOperations;\n+\n+    /**\n+     * Gets the EventsOperationsClient object to access its operations.\n+     *\n+     * @return the EventsOperationsClient object.\n+     */\n+    public EventsOperationsClient getEventsOperations() {\n+        return this.eventsOperations;\n+    }\n+\n+    /** The AvailabilityStatusesClient object to access its operations. */\n+    private final AvailabilityStatusesClient availabilityStatuses;\n+\n+    /**\n+     * Gets the AvailabilityStatusesClient object to access its operations.\n+     *\n+     * @return the AvailabilityStatusesClient object.\n+     */\n+    public AvailabilityStatusesClient getAvailabilityStatuses() {\n+        return this.availabilityStatuses;\n+    }\n+\n+    /** The OperationsClient object to access its operations. */\n+    private final OperationsClient operations;\n+\n+    /**\n+     * Gets the OperationsClient object to access its operations.\n+     *\n+     * @return the OperationsClient object.\n+     */\n+    public OperationsClient getOperations() {\n+        return this.operations;\n+    }\n+\n+    /** The EmergingIssuesClient object to access its operations. */\n+    private final EmergingIssuesClient emergingIssues;\n+\n+    /**\n+     * Gets the EmergingIssuesClient object to access its operations.\n+     *\n+     * @return the EmergingIssuesClient object.\n+     */\n+    public EmergingIssuesClient getEmergingIssues() {\n+        return this.emergingIssues;\n+    }\n+\n+    /**\n+     * Initializes an instance of MicrosoftResourceHealth client.\n+     *\n+     * @param httpPipeline The HTTP pipeline to send requests through.\n+     * @param serializerAdapter The serializer to serialize an object into a string.\n+     * @param defaultPollInterval The default poll interval for long-running operation.\n+     * @param environment The Azure environment.\n+     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The\n+     *     subscription ID forms part of the URI for every service call.\n+     * @param endpoint server parameter.\n+     */\n+    MicrosoftResourceHealthImpl(\n+        HttpPipeline httpPipeline,\n+        SerializerAdapter serializerAdapter,\n+        Duration defaultPollInterval,\n+        AzureEnvironment environment,\n+        String subscriptionId,\n+        String endpoint) {\n+        this.httpPipeline = httpPipeline;\n+        this.serializerAdapter = serializerAdapter;\n+        this.defaultPollInterval = defaultPollInterval;\n+        this.subscriptionId = subscriptionId;\n+        this.endpoint = endpoint;\n+        this.apiVersion = \"2021-03-01\";\n+        this.eventsOperations = new EventsOperationsClientImpl(this);\n+        this.availabilityStatuses = new AvailabilityStatusesClientImpl(this);\n+        this.operations = new OperationsClientImpl(this);\n+        this.emergingIssues = new EmergingIssuesClientImpl(this);\n+    }\n+\n+    /**\n+     * Gets default client context.\n+     *\n+     * @return the default client context.\n+     */\n+    public Context getContext() {\n+        return Context.NONE;\n+    }\n+\n+    /**\n+     * Merges default client context with provided context.\n+     *\n+     * @param context the context to be merged with default client context.\n+     * @return the merged context.\n+     */\n+    public Context mergeContext(Context context) {\n+        for (Map.Entry<Object, Object> entry : this.getContext().getValues().entrySet()) {\n+            context = context.addData(entry.getKey(), entry.getValue());\n+        }\n+        return context;\n+    }\n+\n+    /**\n+     * Gets long running operation result.\n+     *\n+     * @param activationResponse the response of activation operation.\n+     * @param httpPipeline the http pipeline.\n+     * @param pollResultType type of poll result.\n+     * @param finalResultType type of final result.\n+     * @param context the context shared by all requests.\n+     * @param <T> type of poll result.\n+     * @param <U> type of final result.\n+     * @return poller flux for poll result and final result.\n+     */\n+    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(\n+        Mono<Response<Flux<ByteBuffer>>> activationResponse,\n+        HttpPipeline httpPipeline,\n+        Type pollResultType,\n+        Type finalResultType,\n+        Context context) {\n+        return PollerFactory\n+            .create(\n+                serializerAdapter,\n+                httpPipeline,\n+                pollResultType,\n+                finalResultType,\n+                defaultPollInterval,\n+                activationResponse,\n+                context);\n+    }\n+\n+    /**\n+     * Gets the final result, or an error, based on last async poll response.\n+     *\n+     * @param response the last async poll response.\n+     * @param <T> type of poll result.\n+     * @param <U> type of final result.\n+     * @return the final result, or an error.\n+     */\n+    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {\n+        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n+            String errorMessage;\n+            ManagementError managementError = null;\n+            HttpResponse errorResponse = null;\n+            PollResult.Error lroError = response.getValue().getError();\n+            if (lroError != null) {\n+                errorResponse =\n+                    new HttpResponseImpl(\n+                        lroError.getResponseStatusCode(), lroError.getResponseHeaders(), lroError.getResponseBody());\n+\n+                errorMessage = response.getValue().getError().getMessage();\n+                String errorBody = response.getValue().getError().getResponseBody();\n+                if (errorBody != null) {\n+                    // try to deserialize error body to ManagementError\n+                    try {\n+                        managementError =\n+                            this\n+                                .getSerializerAdapter()\n+                                .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);\n+                        if (managementError.getCode() == null || managementError.getMessage() == null) {\n+                            managementError = null;\n+                        }\n+                    } catch (IOException | RuntimeException ioe) {\n+                        logger.logThrowableAsWarning(ioe);\n+                    }\n+                }\n+            } else {\n+                // fallback to default error message\n+                errorMessage = \"Long running operation failed.\";\n+            }\n+            if (managementError == null) {\n+                // fallback to default ManagementError\n+                managementError = new ManagementError(response.getStatus().toString(), errorMessage);\n+            }\n+            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));\n+        } else {\n+            return response.getFinalResult();\n+        }\n+    }\n+\n+    private static final class HttpResponseImpl extends HttpResponse {\n+        private final int statusCode;\n+\n+        private final byte[] responseBody;\n+\n+        private final HttpHeaders httpHeaders;\n+\n+        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {\n+            super(null);\n+            this.statusCode = statusCode;\n+            this.httpHeaders = httpHeaders;\n+            this.responseBody = responseBody == null ? null : responseBody.getBytes(StandardCharsets.UTF_8);\n+        }\n+\n+        public int getStatusCode() {\n+            return statusCode;\n+        }\n+\n+        public String getHeaderValue(String s) {\n+            return httpHeaders.getValue(s);\n+        }\n+\n+        public HttpHeaders getHeaders() {\n+            return httpHeaders;\n+        }\n+\n+        public Flux<ByteBuffer> getBody() {\n+            return Flux.just(ByteBuffer.wrap(responseBody));\n+        }\n+\n+        public Mono<byte[]> getBodyAsByteArray() {\n+            return Mono.just(responseBody);\n+        }\n+\n+        public Mono<String> getBodyAsString() {\n+            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));\n+        }\n+\n+        public Mono<String> getBodyAsString(Charset charset) {\n+            return Mono.just(new String(responseBody, charset));\n+        }\n+    }\n+}"
  },
  {
    "sha": "598bda91e2385c28702821a3ecc20364c30f6b12",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/OperationListResultImpl.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/OperationListResultImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/OperationListResultImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/OperationListResultImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.resourcemanager.resourcehealth.fluent.models.OperationListResultInner;\n+import com.azure.resourcemanager.resourcehealth.models.Operation;\n+import com.azure.resourcemanager.resourcehealth.models.OperationListResult;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class OperationListResultImpl implements OperationListResult {\n+    private OperationListResultInner innerObject;\n+\n+    private final com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager;\n+\n+    OperationListResultImpl(\n+        OperationListResultInner innerObject,\n+        com.azure.resourcemanager.resourcehealth.ResourcehealthManager serviceManager) {\n+        this.innerObject = innerObject;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public List<Operation> value() {\n+        List<Operation> inner = this.innerModel().value();\n+        if (inner != null) {\n+            return Collections.unmodifiableList(inner);\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    public OperationListResultInner innerModel() {\n+        return this.innerObject;\n+    }\n+\n+    private com.azure.resourcemanager.resourcehealth.ResourcehealthManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "bb3c6c5e9522a3f4778f3c492c2d502e8322a5a9",
    "filename": "sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/OperationsClientImpl.java",
    "status": "added",
    "additions": 156,
    "deletions": 0,
    "changes": 156,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/OperationsClientImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/37e63a40f55df5bc2367dc6ee6b0ddef6812dde4/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/OperationsClientImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/resourcehealth/azure-resourcemanager-resourcehealth/src/main/java/com/azure/resourcemanager/resourcehealth/implementation/OperationsClientImpl.java?ref=37e63a40f55df5bc2367dc6ee6b0ddef6812dde4",
    "patch": "@@ -0,0 +1,156 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.resourcehealth.implementation;\n+\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Get;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.Headers;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.QueryParam;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.resourcehealth.fluent.OperationsClient;\n+import com.azure.resourcemanager.resourcehealth.fluent.models.OperationListResultInner;\n+import reactor.core.publisher.Mono;\n+\n+/** An instance of this class provides access to all the operations defined in OperationsClient. */\n+public final class OperationsClientImpl implements OperationsClient {\n+    private final ClientLogger logger = new ClientLogger(OperationsClientImpl.class);\n+\n+    /** The proxy service used to perform REST calls. */\n+    private final OperationsService service;\n+\n+    /** The service client containing this operation class. */\n+    private final MicrosoftResourceHealthImpl client;\n+\n+    /**\n+     * Initializes an instance of OperationsClientImpl.\n+     *\n+     * @param client the instance of the service client containing this operation class.\n+     */\n+    OperationsClientImpl(MicrosoftResourceHealthImpl client) {\n+        this.service =\n+            RestProxy.create(OperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());\n+        this.client = client;\n+    }\n+\n+    /**\n+     * The interface defining all the services for MicrosoftResourceHealthOperations to be used by the proxy service to\n+     * perform REST calls.\n+     */\n+    @Host(\"{$host}\")\n+    @ServiceInterface(name = \"MicrosoftResourceHea\")\n+    private interface OperationsService {\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/providers/Microsoft.ResourceHealth/operations\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<OperationListResultInner>> list(\n+            @HostParam(\"$host\") String endpoint,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+    }\n+\n+    /**\n+     * Lists available operations for the resourcehealth resource provider.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return lists the operations response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<OperationListResultInner>> listWithResponseAsync() {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), accept, context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Lists available operations for the resourcehealth resource provider.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return lists the operations response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<OperationListResultInner>> listWithResponseAsync(Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service.list(this.client.getEndpoint(), this.client.getApiVersion(), accept, context);\n+    }\n+\n+    /**\n+     * Lists available operations for the resourcehealth resource provider.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return lists the operations response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<OperationListResultInner> listAsync() {\n+        return listWithResponseAsync()\n+            .flatMap(\n+                (Response<OperationListResultInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Lists available operations for the resourcehealth resource provider.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return lists the operations response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public OperationListResultInner list() {\n+        return listAsync().block();\n+    }\n+\n+    /**\n+     * Lists available operations for the resourcehealth resource provider.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return lists the operations response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<OperationListResultInner> listWithResponse(Context context) {\n+        return listWithResponseAsync(context).block();\n+    }\n+}"
  }
]
