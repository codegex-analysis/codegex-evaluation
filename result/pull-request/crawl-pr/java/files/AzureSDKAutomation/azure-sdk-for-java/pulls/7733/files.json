[
  {
    "sha": "05c626d5e32fd376f0ae3045278df2e834df6f23",
    "filename": "eng/versioning/version_client.txt",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/eng/versioning/version_client.txt",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/eng/versioning/version_client.txt",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/eng/versioning/version_client.txt?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -208,6 +208,7 @@ com.azure.resourcemanager:azure-resourcemanager-storagecache;1.0.0-beta.1;1.0.0-\n com.azure.resourcemanager:azure-resourcemanager-redisenterprise;1.0.0-beta.2;1.0.0-beta.3\n com.azure.resourcemanager:azure-resourcemanager-hybridkubernetes;1.0.0-beta.1;1.0.0-beta.2\n com.azure.resourcemanager:azure-resourcemanager-iothub;1.0.0-beta.1;1.0.0-beta.2\n+com.azure.resourcemanager:azure-resourcemanager-attestation;1.0.0-beta.1;1.0.0-beta.1\n \n # Unreleased dependencies: Copy the entry from above, prepend \"unreleased_\" and remove the current\n # version. Unreleased dependencies are only valid for dependency versions."
  },
  {
    "sha": "47a070ba72e6c5b66d1a621b203ae6e167e775e5",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/CHANGELOG.md",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/CHANGELOG.md",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/CHANGELOG.md?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,5 @@\n+# Release History\n+\n+## 1.0.0-beta.1 (2021-03-03)\n+\n+- Azure Resource Manager Attestation client library for Java. This package contains Microsoft Azure SDK for Attestation Management SDK. Various APIs for managing resources in attestation service. This primarily encompasses per-provider management. Package tag package-2020-10-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt)."
  },
  {
    "sha": "f883e9890e03a64fb9995f6ac34a50dcc166e334",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/README.md",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/README.md",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/README.md",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/README.md?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,99 @@\n+# Azure Resource Manager Attestation client library for Java\n+\n+Azure Resource Manager Attestation client library for Java.\n+\n+This package contains Microsoft Azure SDK for Attestation Management SDK. Various APIs for managing resources in attestation service. This primarily encompasses per-provider management. Package tag package-2020-10-01. For documentation on how to use this package, please see [Azure Management Libraries for Java](https://aka.ms/azsdk/java/mgmt).\n+\n+## We'd love to hear your feedback\n+\n+We're always working on improving our products and the way we communicate with our users. So we'd love to learn what's working and how we can do better.\n+\n+If you haven't already, please take a few minutes to [complete this short survey][survey] we have put together.\n+\n+Thank you in advance for your collaboration. We really appreciate your time!\n+\n+## Documentation\n+\n+Various documentation is available to help you get started\n+\n+- [API reference documentation][docs]\n+\n+## Getting started\n+\n+### Prerequisites\n+\n+- [Java Development Kit (JDK)][jdk] with version 8 or above\n+- [Azure Subscription][azure_subscription]\n+\n+### Adding the package to your product\n+\n+[//]: # ({x-version-update-start;com.azure.resourcemanager:azure-resourcemanager-attestation;current})\n+```xml\n+<dependency>\n+    <groupId>com.azure.resourcemanager</groupId>\n+    <artifactId>azure-resourcemanager-attestation</artifactId>\n+    <version>1.0.0-beta.1</version>\n+</dependency>\n+```\n+[//]: # ({x-version-update-end})\n+\n+### Include the recommended packages\n+\n+Azure Management Libraries require a `TokenCredential` implementation for authentication and an `HttpClient` implementation for HTTP client.\n+\n+[Azure Identity][azure_identity] package and [Azure Core Netty HTTP][azure_core_http_netty] package provide the default implementation.\n+\n+### Authentication\n+\n+By default, Azure Active Directory token authentication depends on correct configure of following environment variables.\n+\n+- `AZURE_CLIENT_ID` for Azure client ID.\n+- `AZURE_TENANT_ID` for Azure tenant ID.\n+- `AZURE_CLIENT_SECRET` or `AZURE_CLIENT_CERTIFICATE_PATH` for client secret or client certificate.\n+\n+In addition, Azure subscription ID can be configured via environment variable `AZURE_SUBSCRIPTION_ID`.\n+\n+With above configuration, `azure` client can be authenticated by following code:\n+\n+```java\n+AzureProfile profile = new AzureProfile(AzureEnvironment.AZURE);\n+TokenCredential credential = new DefaultAzureCredentialBuilder()\n+    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n+    .build();\n+AttestationManager manager = AttestationManager\n+    .authenticate(credential, profile);\n+```\n+\n+The sample code assumes global Azure. Please change `AzureEnvironment.AZURE` variable if otherwise.\n+\n+See [Authentication][authenticate] for more options.\n+\n+## Key concepts\n+\n+See [API design][design] for general introduction on design and key concepts on Azure Management Libraries.\n+\n+## Examples\n+\n+## Troubleshooting\n+\n+## Next steps\n+\n+## Contributing\n+\n+For details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-java/blob/master/CONTRIBUTING.md).\n+\n+1. Fork it\n+1. Create your feature branch (`git checkout -b my-new-feature`)\n+1. Commit your changes (`git commit -am 'Add some feature'`)\n+1. Push to the branch (`git push origin my-new-feature`)\n+1. Create new Pull Request\n+\n+<!-- LINKS -->\n+[survey]: https://microsoft.qualtrics.com/jfe/form/SV_ehN0lIk2FKEBkwd?Q_CHL=DOCS\n+[docs]: https://azure.github.io/azure-sdk-for-java/\n+[jdk]: https://docs.microsoft.com/java/azure/jdk/\n+[azure_subscription]: https://azure.microsoft.com/free/\n+[azure_identity]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/identity/azure-identity\n+[azure_core_http_netty]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core-http-netty\n+[authenticate]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/resourcemanager/docs/AUTH.md\n+[design]: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/resourcemanager/docs/DESIGN.md"
  },
  {
    "sha": "92b191acc82c2c1a1d76a5fd86140a43fd3a08a5",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/pom.xml",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/pom.xml",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/pom.xml",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/pom.xml?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,67 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-client-sdk-parent</artifactId>\n+        <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+        <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+    </parent>\n+\n+    <groupId>com.azure.resourcemanager</groupId>\n+    <artifactId>azure-resourcemanager-attestation</artifactId>\n+    <version>1.0.0-beta.1</version> <!-- {x-version-update;com.azure.resourcemanager:azure-resourcemanager-attestation;current} -->\n+    <packaging>jar</packaging>\n+\n+    <name>Microsoft Azure SDK for Attestation Management</name>\n+    <description>This package contains Microsoft Azure SDK for Attestation Management SDK. Various APIs for managing resources in attestation service. This primarily encompasses per-provider management. Package tag package-2020-10-01. For documentation on how to use this package, please see https://aka.ms/azsdk/java/mgmt</description>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+    <licenses>\n+        <license>\n+            <name>The MIT License (MIT)</name>\n+            <url>http://opensource.org/licenses/MIT</url>\n+            <distribution>repo</distribution>\n+        </license>\n+    </licenses>\n+\n+    <scm>\n+        <url>https://github.com/Azure/azure-sdk-for-java</url>\n+        <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+        <developerConnection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</developerConnection>\n+        <tag>HEAD</tag>\n+    </scm>\n+    <developers>\n+        <developer>\n+            <id>microsoft</id>\n+            <name>Microsoft</name>\n+        </developer>\n+    </developers>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-core</artifactId>\n+            <version>1.13.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+        </dependency>\n+        <dependency>\n+            <groupId>com.azure</groupId>\n+            <artifactId>azure-core-management</artifactId>\n+            <version>1.1.1</version> <!-- {x-version-update;com.azure:azure-core-management;dependency} -->\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>0.8.5</version> <!-- {x-version-update;org.jacoco:jacoco-maven-plugin;external_dependency} -->\n+                <configuration>\n+                    <skip>true</skip>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+</project>"
  },
  {
    "sha": "1fbba8163056ac2a83a6d6e36bb6d1b6132bd5de",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/AttestationManager.java",
    "status": "added",
    "additions": 242,
    "deletions": 0,
    "changes": 242,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/AttestationManager.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/AttestationManager.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/AttestationManager.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,242 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.management.profile.AzureProfile;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.fluent.AttestationManagementClient;\n+import com.azure.resourcemanager.attestation.implementation.AttestationManagementClientBuilder;\n+import com.azure.resourcemanager.attestation.implementation.AttestationProvidersImpl;\n+import com.azure.resourcemanager.attestation.implementation.OperationsImpl;\n+import com.azure.resourcemanager.attestation.implementation.PrivateEndpointConnectionsImpl;\n+import com.azure.resourcemanager.attestation.models.AttestationProviders;\n+import com.azure.resourcemanager.attestation.models.Operations;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpointConnections;\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Entry point to AttestationManager. Various APIs for managing resources in attestation service. This primarily\n+ * encompasses per-provider management.\n+ */\n+public final class AttestationManager {\n+    private Operations operations;\n+\n+    private AttestationProviders attestationProviders;\n+\n+    private PrivateEndpointConnections privateEndpointConnections;\n+\n+    private final AttestationManagementClient clientObject;\n+\n+    private AttestationManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {\n+        Objects.requireNonNull(httpPipeline, \"'httpPipeline' cannot be null.\");\n+        Objects.requireNonNull(profile, \"'profile' cannot be null.\");\n+        this.clientObject =\n+            new AttestationManagementClientBuilder()\n+                .pipeline(httpPipeline)\n+                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())\n+                .subscriptionId(profile.getSubscriptionId())\n+                .defaultPollInterval(defaultPollInterval)\n+                .buildClient();\n+    }\n+\n+    /**\n+     * Creates an instance of Attestation service API entry point.\n+     *\n+     * @param credential the credential to use.\n+     * @param profile the Azure profile for client.\n+     * @return the Attestation service API instance.\n+     */\n+    public static AttestationManager authenticate(TokenCredential credential, AzureProfile profile) {\n+        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+        Objects.requireNonNull(profile, \"'profile' cannot be null.\");\n+        return configure().authenticate(credential, profile);\n+    }\n+\n+    /**\n+     * Gets a Configurable instance that can be used to create AttestationManager with optional configuration.\n+     *\n+     * @return the Configurable instance allowing configurations.\n+     */\n+    public static Configurable configure() {\n+        return new AttestationManager.Configurable();\n+    }\n+\n+    /** The Configurable allowing configurations to be set. */\n+    public static final class Configurable {\n+        private final ClientLogger logger = new ClientLogger(Configurable.class);\n+\n+        private HttpClient httpClient;\n+        private HttpLogOptions httpLogOptions;\n+        private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        private RetryPolicy retryPolicy;\n+        private Duration defaultPollInterval;\n+\n+        private Configurable() {\n+        }\n+\n+        /**\n+         * Sets the http client.\n+         *\n+         * @param httpClient the HTTP client.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withHttpClient(HttpClient httpClient) {\n+            this.httpClient = Objects.requireNonNull(httpClient, \"'httpClient' cannot be null.\");\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the logging options to the HTTP pipeline.\n+         *\n+         * @param httpLogOptions the HTTP log options.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {\n+            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, \"'httpLogOptions' cannot be null.\");\n+            return this;\n+        }\n+\n+        /**\n+         * Adds the pipeline policy to the HTTP pipeline.\n+         *\n+         * @param policy the HTTP pipeline policy.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withPolicy(HttpPipelinePolicy policy) {\n+            this.policies.add(Objects.requireNonNull(policy, \"'policy' cannot be null.\"));\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the retry policy to the HTTP pipeline.\n+         *\n+         * @param retryPolicy the HTTP pipeline retry policy.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {\n+            this.retryPolicy = Objects.requireNonNull(retryPolicy, \"'retryPolicy' cannot be null.\");\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the default poll interval, used when service does not provide \"Retry-After\" header.\n+         *\n+         * @param defaultPollInterval the default poll interval.\n+         * @return the configurable object itself.\n+         */\n+        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {\n+            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, \"'retryPolicy' cannot be null.\");\n+            if (this.defaultPollInterval.isNegative()) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(\"'httpPipeline' cannot be negative\"));\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates an instance of Attestation service API entry point.\n+         *\n+         * @param credential the credential to use.\n+         * @param profile the Azure profile for client.\n+         * @return the Attestation service API instance.\n+         */\n+        public AttestationManager authenticate(TokenCredential credential, AzureProfile profile) {\n+            Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n+            Objects.requireNonNull(profile, \"'profile' cannot be null.\");\n+\n+            StringBuilder userAgentBuilder = new StringBuilder();\n+            userAgentBuilder\n+                .append(\"azsdk-java\")\n+                .append(\"-\")\n+                .append(\"com.azure.resourcemanager.attestation\")\n+                .append(\"/\")\n+                .append(\"1.0.0-beta.1\");\n+            if (!Configuration.getGlobalConfiguration().get(\"AZURE_TELEMETRY_DISABLED\", false)) {\n+                userAgentBuilder\n+                    .append(\" (\")\n+                    .append(Configuration.getGlobalConfiguration().get(\"java.version\"))\n+                    .append(\"; \")\n+                    .append(Configuration.getGlobalConfiguration().get(\"os.name\"))\n+                    .append(\"; \")\n+                    .append(Configuration.getGlobalConfiguration().get(\"os.version\"))\n+                    .append(\"; auto-generated)\");\n+            } else {\n+                userAgentBuilder.append(\" (auto-generated)\");\n+            }\n+\n+            if (retryPolicy == null) {\n+                retryPolicy = new RetryPolicy(\"Retry-After\", ChronoUnit.SECONDS);\n+            }\n+            List<HttpPipelinePolicy> policies = new ArrayList<>();\n+            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));\n+            policies.add(new RequestIdPolicy());\n+            HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+            policies.add(retryPolicy);\n+            policies.add(new AddDatePolicy());\n+            policies\n+                .add(\n+                    new BearerTokenAuthenticationPolicy(\n+                        credential, profile.getEnvironment().getManagementEndpoint() + \"/.default\"));\n+            HttpPolicyProviders.addAfterRetryPolicies(policies);\n+            policies.add(new HttpLoggingPolicy(httpLogOptions));\n+            HttpPipeline httpPipeline =\n+                new HttpPipelineBuilder()\n+                    .httpClient(httpClient)\n+                    .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+                    .build();\n+            return new AttestationManager(httpPipeline, profile, defaultPollInterval);\n+        }\n+    }\n+\n+    /** @return Resource collection API of Operations. */\n+    public Operations operations() {\n+        if (this.operations == null) {\n+            this.operations = new OperationsImpl(clientObject.getOperations(), this);\n+        }\n+        return operations;\n+    }\n+\n+    /** @return Resource collection API of AttestationProviders. */\n+    public AttestationProviders attestationProviders() {\n+        if (this.attestationProviders == null) {\n+            this.attestationProviders = new AttestationProvidersImpl(clientObject.getAttestationProviders(), this);\n+        }\n+        return attestationProviders;\n+    }\n+\n+    /** @return Resource collection API of PrivateEndpointConnections. */\n+    public PrivateEndpointConnections privateEndpointConnections() {\n+        if (this.privateEndpointConnections == null) {\n+            this.privateEndpointConnections =\n+                new PrivateEndpointConnectionsImpl(clientObject.getPrivateEndpointConnections(), this);\n+        }\n+        return privateEndpointConnections;\n+    }\n+\n+    /**\n+     * @return Wrapped service client AttestationManagementClient providing direct access to the underlying\n+     *     auto-generated API implementation, based on Azure REST API.\n+     */\n+    public AttestationManagementClient serviceClient() {\n+        return this.clientObject;\n+    }\n+}"
  },
  {
    "sha": "11d16457aa470123072bb0b056bcb0696a3f07d1",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/AttestationManagementClient.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/AttestationManagementClient.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/AttestationManagementClient.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/AttestationManagementClient.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.fluent;\n+\n+import com.azure.core.http.HttpPipeline;\n+import java.time.Duration;\n+\n+/** The interface for AttestationManagementClient class. */\n+public interface AttestationManagementClient {\n+    /**\n+     * Gets The ID of the target subscription.\n+     *\n+     * @return the subscriptionId value.\n+     */\n+    String getSubscriptionId();\n+\n+    /**\n+     * Gets server parameter.\n+     *\n+     * @return the endpoint value.\n+     */\n+    String getEndpoint();\n+\n+    /**\n+     * Gets Api Version.\n+     *\n+     * @return the apiVersion value.\n+     */\n+    String getApiVersion();\n+\n+    /**\n+     * Gets The HTTP pipeline to send requests through.\n+     *\n+     * @return the httpPipeline value.\n+     */\n+    HttpPipeline getHttpPipeline();\n+\n+    /**\n+     * Gets The default poll interval for long-running operation.\n+     *\n+     * @return the defaultPollInterval value.\n+     */\n+    Duration getDefaultPollInterval();\n+\n+    /**\n+     * Gets the OperationsClient object to access its operations.\n+     *\n+     * @return the OperationsClient object.\n+     */\n+    OperationsClient getOperations();\n+\n+    /**\n+     * Gets the AttestationProvidersClient object to access its operations.\n+     *\n+     * @return the AttestationProvidersClient object.\n+     */\n+    AttestationProvidersClient getAttestationProviders();\n+\n+    /**\n+     * Gets the PrivateEndpointConnectionsClient object to access its operations.\n+     *\n+     * @return the PrivateEndpointConnectionsClient object.\n+     */\n+    PrivateEndpointConnectionsClient getPrivateEndpointConnections();\n+}"
  },
  {
    "sha": "d2591bfca7c5dd81cc3582bf05d2049c9ba73caf",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/AttestationProvidersClient.java",
    "status": "added",
    "additions": 231,
    "deletions": 0,
    "changes": 231,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/AttestationProvidersClient.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/AttestationProvidersClient.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/AttestationProvidersClient.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,231 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.fluent;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderInner;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderListResultInner;\n+import com.azure.resourcemanager.attestation.models.AttestationServiceCreationParams;\n+import com.azure.resourcemanager.attestation.models.AttestationServicePatchParams;\n+\n+/** An instance of this class provides access to all the operations defined in AttestationProvidersClient. */\n+public interface AttestationProvidersClient {\n+    /**\n+     * Get the status of Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the status of Attestation Provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    AttestationProviderInner getByResourceGroup(String resourceGroupName, String providerName);\n+\n+    /**\n+     * Get the status of Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the status of Attestation Provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<AttestationProviderInner> getByResourceGroupWithResponse(\n+        String resourceGroupName, String providerName, Context context);\n+\n+    /**\n+     * Creates a new Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param creationParams Client supplied parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    AttestationProviderInner create(\n+        String resourceGroupName, String providerName, AttestationServiceCreationParams creationParams);\n+\n+    /**\n+     * Creates a new Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param creationParams Client supplied parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<AttestationProviderInner> createWithResponse(\n+        String resourceGroupName,\n+        String providerName,\n+        AttestationServiceCreationParams creationParams,\n+        Context context);\n+\n+    /**\n+     * Updates the Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param updateParams Client supplied parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    AttestationProviderInner update(\n+        String resourceGroupName, String providerName, AttestationServicePatchParams updateParams);\n+\n+    /**\n+     * Updates the Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param updateParams Client supplied parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<AttestationProviderInner> updateWithResponse(\n+        String resourceGroupName, String providerName, AttestationServicePatchParams updateParams, Context context);\n+\n+    /**\n+     * Delete Attestation Service.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation service.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    void delete(String resourceGroupName, String providerName);\n+\n+    /**\n+     * Delete Attestation Service.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation service.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<Void> deleteWithResponse(String resourceGroupName, String providerName, Context context);\n+\n+    /**\n+     * Returns a list of attestation providers in a subscription.\n+     *\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    AttestationProviderListResultInner list();\n+\n+    /**\n+     * Returns a list of attestation providers in a subscription.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<AttestationProviderListResultInner> listWithResponse(Context context);\n+\n+    /**\n+     * Returns attestation providers list in a resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    AttestationProviderListResultInner listByResourceGroup(String resourceGroupName);\n+\n+    /**\n+     * Returns attestation providers list in a resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<AttestationProviderListResultInner> listByResourceGroupWithResponse(\n+        String resourceGroupName, Context context);\n+\n+    /**\n+     * Get the default provider.\n+     *\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    AttestationProviderListResultInner listDefault();\n+\n+    /**\n+     * Get the default provider.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<AttestationProviderListResultInner> listDefaultWithResponse(Context context);\n+\n+    /**\n+     * Get the default provider by location.\n+     *\n+     * @param location The location of the default provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider by location.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    AttestationProviderInner getDefaultByLocation(String location);\n+\n+    /**\n+     * Get the default provider by location.\n+     *\n+     * @param location The location of the default provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider by location.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<AttestationProviderInner> getDefaultByLocationWithResponse(String location, Context context);\n+}"
  },
  {
    "sha": "709f15ffb2f0d527f23098cb0431d1b50d183f3b",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/OperationsClient.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/OperationsClient.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/OperationsClient.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/OperationsClient.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.fluent;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.attestation.fluent.models.OperationListInner;\n+\n+/** An instance of this class provides access to all the operations defined in OperationsClient. */\n+public interface OperationsClient {\n+    /**\n+     * Lists all of the available Azure attestation operations.\n+     *\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of supported operations.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    OperationListInner list();\n+\n+    /**\n+     * Lists all of the available Azure attestation operations.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of supported operations.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<OperationListInner> listWithResponse(Context context);\n+}"
  },
  {
    "sha": "2bc3b18a7b99ddc1da8cc625c1c46ec160dc5a89",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/PrivateEndpointConnectionsClient.java",
    "status": "added",
    "additions": 148,
    "deletions": 0,
    "changes": 148,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/PrivateEndpointConnectionsClient.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/PrivateEndpointConnectionsClient.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/PrivateEndpointConnectionsClient.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.fluent;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.attestation.fluent.models.PrivateEndpointConnectionInner;\n+\n+/** An instance of this class provides access to all the operations defined in PrivateEndpointConnectionsClient. */\n+public interface PrivateEndpointConnectionsClient {\n+    /**\n+     * List all the private endpoint connections associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of private endpoint connection associated with the specified storage account.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<PrivateEndpointConnectionInner> list(String resourceGroupName, String providerName);\n+\n+    /**\n+     * List all the private endpoint connections associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of private endpoint connection associated with the specified storage account.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    PagedIterable<PrivateEndpointConnectionInner> list(String resourceGroupName, String providerName, Context context);\n+\n+    /**\n+     * Gets the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the specified private endpoint connection associated with the attestation provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    PrivateEndpointConnectionInner get(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName);\n+\n+    /**\n+     * Gets the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the specified private endpoint connection associated with the attestation provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<PrivateEndpointConnectionInner> getWithResponse(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName, Context context);\n+\n+    /**\n+     * Update the state of specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param properties The private endpoint connection properties.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the Private Endpoint Connection resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    PrivateEndpointConnectionInner create(\n+        String resourceGroupName,\n+        String providerName,\n+        String privateEndpointConnectionName,\n+        PrivateEndpointConnectionInner properties);\n+\n+    /**\n+     * Update the state of specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param properties The private endpoint connection properties.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the Private Endpoint Connection resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<PrivateEndpointConnectionInner> createWithResponse(\n+        String resourceGroupName,\n+        String providerName,\n+        String privateEndpointConnectionName,\n+        PrivateEndpointConnectionInner properties,\n+        Context context);\n+\n+    /**\n+     * Deletes the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    void delete(String resourceGroupName, String providerName, String privateEndpointConnectionName);\n+\n+    /**\n+     * Deletes the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    Response<Void> deleteWithResponse(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName, Context context);\n+}"
  },
  {
    "sha": "b3bb071893207f21833499756869685f35eb78f7",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/AttestationProviderInner.java",
    "status": "added",
    "additions": 161,
    "deletions": 0,
    "changes": 161,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/AttestationProviderInner.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/AttestationProviderInner.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/AttestationProviderInner.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,161 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.fluent.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.annotation.JsonFlatten;\n+import com.azure.core.management.Resource;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.models.AttestationServiceStatus;\n+import com.azure.resourcemanager.attestation.models.SystemData;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+import java.util.Map;\n+\n+/** Attestation service response message. */\n+@JsonFlatten\n+@Fluent\n+public class AttestationProviderInner extends Resource {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(AttestationProviderInner.class);\n+\n+    /*\n+     * The system metadata relating to this resource\n+     */\n+    @JsonProperty(value = \"systemData\", access = JsonProperty.Access.WRITE_ONLY)\n+    private SystemData systemData;\n+\n+    /*\n+     * Trust model for the attestation provider.\n+     */\n+    @JsonProperty(value = \"properties.trustModel\")\n+    private String trustModel;\n+\n+    /*\n+     * Status of attestation service.\n+     */\n+    @JsonProperty(value = \"properties.status\")\n+    private AttestationServiceStatus status;\n+\n+    /*\n+     * Gets the uri of attestation service\n+     */\n+    @JsonProperty(value = \"properties.attestUri\")\n+    private String attestUri;\n+\n+    /*\n+     * List of private endpoint connections associated with the attestation\n+     * provider.\n+     */\n+    @JsonProperty(value = \"properties.privateEndpointConnections\", access = JsonProperty.Access.WRITE_ONLY)\n+    private List<PrivateEndpointConnectionInner> privateEndpointConnections;\n+\n+    /**\n+     * Get the systemData property: The system metadata relating to this resource.\n+     *\n+     * @return the systemData value.\n+     */\n+    public SystemData systemData() {\n+        return this.systemData;\n+    }\n+\n+    /**\n+     * Get the trustModel property: Trust model for the attestation provider.\n+     *\n+     * @return the trustModel value.\n+     */\n+    public String trustModel() {\n+        return this.trustModel;\n+    }\n+\n+    /**\n+     * Set the trustModel property: Trust model for the attestation provider.\n+     *\n+     * @param trustModel the trustModel value to set.\n+     * @return the AttestationProviderInner object itself.\n+     */\n+    public AttestationProviderInner withTrustModel(String trustModel) {\n+        this.trustModel = trustModel;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the status property: Status of attestation service.\n+     *\n+     * @return the status value.\n+     */\n+    public AttestationServiceStatus status() {\n+        return this.status;\n+    }\n+\n+    /**\n+     * Set the status property: Status of attestation service.\n+     *\n+     * @param status the status value to set.\n+     * @return the AttestationProviderInner object itself.\n+     */\n+    public AttestationProviderInner withStatus(AttestationServiceStatus status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the attestUri property: Gets the uri of attestation service.\n+     *\n+     * @return the attestUri value.\n+     */\n+    public String attestUri() {\n+        return this.attestUri;\n+    }\n+\n+    /**\n+     * Set the attestUri property: Gets the uri of attestation service.\n+     *\n+     * @param attestUri the attestUri value to set.\n+     * @return the AttestationProviderInner object itself.\n+     */\n+    public AttestationProviderInner withAttestUri(String attestUri) {\n+        this.attestUri = attestUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the privateEndpointConnections property: List of private endpoint connections associated with the attestation\n+     * provider.\n+     *\n+     * @return the privateEndpointConnections value.\n+     */\n+    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {\n+        return this.privateEndpointConnections;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public AttestationProviderInner withLocation(String location) {\n+        super.withLocation(location);\n+        return this;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public AttestationProviderInner withTags(Map<String, String> tags) {\n+        super.withTags(tags);\n+        return this;\n+    }\n+\n+    /**\n+     * Validates the instance.\n+     *\n+     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     */\n+    public void validate() {\n+        if (systemData() != null) {\n+            systemData().validate();\n+        }\n+        if (privateEndpointConnections() != null) {\n+            privateEndpointConnections().forEach(e -> e.validate());\n+        }\n+    }\n+}"
  },
  {
    "sha": "0f3270bf6e44b6774706ec912ab31b129b45db25",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/AttestationProviderListResultInner.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/AttestationProviderListResultInner.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/AttestationProviderListResultInner.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/AttestationProviderListResultInner.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.fluent.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.models.SystemData;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** Attestation Providers List. */\n+@Fluent\n+public final class AttestationProviderListResultInner {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(AttestationProviderListResultInner.class);\n+\n+    /*\n+     * The system metadata relating to this resource\n+     */\n+    @JsonProperty(value = \"systemData\", access = JsonProperty.Access.WRITE_ONLY)\n+    private SystemData systemData;\n+\n+    /*\n+     * Attestation Provider array.\n+     */\n+    @JsonProperty(value = \"value\")\n+    private List<AttestationProviderInner> value;\n+\n+    /**\n+     * Get the systemData property: The system metadata relating to this resource.\n+     *\n+     * @return the systemData value.\n+     */\n+    public SystemData systemData() {\n+        return this.systemData;\n+    }\n+\n+    /**\n+     * Get the value property: Attestation Provider array.\n+     *\n+     * @return the value value.\n+     */\n+    public List<AttestationProviderInner> value() {\n+        return this.value;\n+    }\n+\n+    /**\n+     * Set the value property: Attestation Provider array.\n+     *\n+     * @param value the value value to set.\n+     * @return the AttestationProviderListResultInner object itself.\n+     */\n+    public AttestationProviderListResultInner withValue(List<AttestationProviderInner> value) {\n+        this.value = value;\n+        return this;\n+    }\n+\n+    /**\n+     * Validates the instance.\n+     *\n+     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     */\n+    public void validate() {\n+        if (systemData() != null) {\n+            systemData().validate();\n+        }\n+        if (value() != null) {\n+            value().forEach(e -> e.validate());\n+        }\n+    }\n+}"
  },
  {
    "sha": "7ce4e06c7c28afe2decee69b074adf6954e57ad8",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/OperationListInner.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/OperationListInner.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/OperationListInner.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/OperationListInner.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.fluent.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.models.OperationsDefinition;\n+import com.azure.resourcemanager.attestation.models.SystemData;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** List of supported operations. */\n+@Fluent\n+public final class OperationListInner {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(OperationListInner.class);\n+\n+    /*\n+     * The system metadata relating to this resource\n+     */\n+    @JsonProperty(value = \"systemData\", access = JsonProperty.Access.WRITE_ONLY)\n+    private SystemData systemData;\n+\n+    /*\n+     * List of supported operations.\n+     */\n+    @JsonProperty(value = \"value\")\n+    private List<OperationsDefinition> value;\n+\n+    /**\n+     * Get the systemData property: The system metadata relating to this resource.\n+     *\n+     * @return the systemData value.\n+     */\n+    public SystemData systemData() {\n+        return this.systemData;\n+    }\n+\n+    /**\n+     * Get the value property: List of supported operations.\n+     *\n+     * @return the value value.\n+     */\n+    public List<OperationsDefinition> value() {\n+        return this.value;\n+    }\n+\n+    /**\n+     * Set the value property: List of supported operations.\n+     *\n+     * @param value the value value to set.\n+     * @return the OperationListInner object itself.\n+     */\n+    public OperationListInner withValue(List<OperationsDefinition> value) {\n+        this.value = value;\n+        return this;\n+    }\n+\n+    /**\n+     * Validates the instance.\n+     *\n+     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     */\n+    public void validate() {\n+        if (systemData() != null) {\n+            systemData().validate();\n+        }\n+        if (value() != null) {\n+            value().forEach(e -> e.validate());\n+        }\n+    }\n+}"
  },
  {
    "sha": "ce8d7a32dda090a179f4acc5a9c01a89fd887d93",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/PrivateEndpointConnectionInner.java",
    "status": "added",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/PrivateEndpointConnectionInner.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/PrivateEndpointConnectionInner.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/PrivateEndpointConnectionInner.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.fluent.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.annotation.JsonFlatten;\n+import com.azure.core.management.ProxyResource;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpoint;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpointConnectionProvisioningState;\n+import com.azure.resourcemanager.attestation.models.PrivateLinkServiceConnectionState;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The Private Endpoint Connection resource. */\n+@JsonFlatten\n+@Fluent\n+public class PrivateEndpointConnectionInner extends ProxyResource {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(PrivateEndpointConnectionInner.class);\n+\n+    /*\n+     * The resource of private end point.\n+     */\n+    @JsonProperty(value = \"properties.privateEndpoint\")\n+    private PrivateEndpoint privateEndpoint;\n+\n+    /*\n+     * A collection of information about the state of the connection between\n+     * service consumer and provider.\n+     */\n+    @JsonProperty(value = \"properties.privateLinkServiceConnectionState\")\n+    private PrivateLinkServiceConnectionState privateLinkServiceConnectionState;\n+\n+    /*\n+     * The provisioning state of the private endpoint connection resource.\n+     */\n+    @JsonProperty(value = \"properties.provisioningState\", access = JsonProperty.Access.WRITE_ONLY)\n+    private PrivateEndpointConnectionProvisioningState provisioningState;\n+\n+    /**\n+     * Get the privateEndpoint property: The resource of private end point.\n+     *\n+     * @return the privateEndpoint value.\n+     */\n+    public PrivateEndpoint privateEndpoint() {\n+        return this.privateEndpoint;\n+    }\n+\n+    /**\n+     * Set the privateEndpoint property: The resource of private end point.\n+     *\n+     * @param privateEndpoint the privateEndpoint value to set.\n+     * @return the PrivateEndpointConnectionInner object itself.\n+     */\n+    public PrivateEndpointConnectionInner withPrivateEndpoint(PrivateEndpoint privateEndpoint) {\n+        this.privateEndpoint = privateEndpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the privateLinkServiceConnectionState property: A collection of information about the state of the connection\n+     * between service consumer and provider.\n+     *\n+     * @return the privateLinkServiceConnectionState value.\n+     */\n+    public PrivateLinkServiceConnectionState privateLinkServiceConnectionState() {\n+        return this.privateLinkServiceConnectionState;\n+    }\n+\n+    /**\n+     * Set the privateLinkServiceConnectionState property: A collection of information about the state of the connection\n+     * between service consumer and provider.\n+     *\n+     * @param privateLinkServiceConnectionState the privateLinkServiceConnectionState value to set.\n+     * @return the PrivateEndpointConnectionInner object itself.\n+     */\n+    public PrivateEndpointConnectionInner withPrivateLinkServiceConnectionState(\n+        PrivateLinkServiceConnectionState privateLinkServiceConnectionState) {\n+        this.privateLinkServiceConnectionState = privateLinkServiceConnectionState;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the provisioningState property: The provisioning state of the private endpoint connection resource.\n+     *\n+     * @return the provisioningState value.\n+     */\n+    public PrivateEndpointConnectionProvisioningState provisioningState() {\n+        return this.provisioningState;\n+    }\n+\n+    /**\n+     * Validates the instance.\n+     *\n+     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     */\n+    public void validate() {\n+        if (privateEndpoint() != null) {\n+            privateEndpoint().validate();\n+        }\n+        if (privateLinkServiceConnectionState() != null) {\n+            privateLinkServiceConnectionState().validate();\n+        }\n+    }\n+}"
  },
  {
    "sha": "12be00f65a0b5bbdd8248515041e3f5d45d04cb9",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/package-info.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/package-info.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/package-info.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/models/package-info.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,9 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/**\n+ * Package containing the inner data models for AttestationManagementClient. Various APIs for managing resources in\n+ * attestation service. This primarily encompasses per-provider management.\n+ */\n+package com.azure.resourcemanager.attestation.fluent.models;"
  },
  {
    "sha": "9475b2b03142ccc1e10d1e4f4143a4b234459b0e",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/package-info.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/package-info.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/package-info.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/fluent/package-info.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,9 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/**\n+ * Package containing the service clients for AttestationManagementClient. Various APIs for managing resources in\n+ * attestation service. This primarily encompasses per-provider management.\n+ */\n+package com.azure.resourcemanager.attestation.fluent;"
  },
  {
    "sha": "26932ca7a108e0e419b5c16d2302c0d604a08f36",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationManagementClientBuilder.java",
    "status": "added",
    "additions": 146,
    "deletions": 0,
    "changes": 146,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationManagementClientBuilder.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationManagementClientBuilder.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationManagementClientBuilder.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,146 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.CookiePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.management.serializer.SerializerFactory;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import java.time.Duration;\n+\n+/** A builder for creating a new instance of the AttestationManagementClientImpl type. */\n+@ServiceClientBuilder(serviceClients = {AttestationManagementClientImpl.class})\n+public final class AttestationManagementClientBuilder {\n+    /*\n+     * The ID of the target subscription.\n+     */\n+    private String subscriptionId;\n+\n+    /**\n+     * Sets The ID of the target subscription.\n+     *\n+     * @param subscriptionId the subscriptionId value.\n+     * @return the AttestationManagementClientBuilder.\n+     */\n+    public AttestationManagementClientBuilder subscriptionId(String subscriptionId) {\n+        this.subscriptionId = subscriptionId;\n+        return this;\n+    }\n+\n+    /*\n+     * server parameter\n+     */\n+    private String endpoint;\n+\n+    /**\n+     * Sets server parameter.\n+     *\n+     * @param endpoint the endpoint value.\n+     * @return the AttestationManagementClientBuilder.\n+     */\n+    public AttestationManagementClientBuilder endpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /*\n+     * The environment to connect to\n+     */\n+    private AzureEnvironment environment;\n+\n+    /**\n+     * Sets The environment to connect to.\n+     *\n+     * @param environment the environment value.\n+     * @return the AttestationManagementClientBuilder.\n+     */\n+    public AttestationManagementClientBuilder environment(AzureEnvironment environment) {\n+        this.environment = environment;\n+        return this;\n+    }\n+\n+    /*\n+     * The default poll interval for long-running operation\n+     */\n+    private Duration defaultPollInterval;\n+\n+    /**\n+     * Sets The default poll interval for long-running operation.\n+     *\n+     * @param defaultPollInterval the defaultPollInterval value.\n+     * @return the AttestationManagementClientBuilder.\n+     */\n+    public AttestationManagementClientBuilder defaultPollInterval(Duration defaultPollInterval) {\n+        this.defaultPollInterval = defaultPollInterval;\n+        return this;\n+    }\n+\n+    /*\n+     * The HTTP pipeline to send requests through\n+     */\n+    private HttpPipeline pipeline;\n+\n+    /**\n+     * Sets The HTTP pipeline to send requests through.\n+     *\n+     * @param pipeline the pipeline value.\n+     * @return the AttestationManagementClientBuilder.\n+     */\n+    public AttestationManagementClientBuilder pipeline(HttpPipeline pipeline) {\n+        this.pipeline = pipeline;\n+        return this;\n+    }\n+\n+    /*\n+     * The serializer to serialize an object into a string\n+     */\n+    private SerializerAdapter serializerAdapter;\n+\n+    /**\n+     * Sets The serializer to serialize an object into a string.\n+     *\n+     * @param serializerAdapter the serializerAdapter value.\n+     * @return the AttestationManagementClientBuilder.\n+     */\n+    public AttestationManagementClientBuilder serializerAdapter(SerializerAdapter serializerAdapter) {\n+        this.serializerAdapter = serializerAdapter;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds an instance of AttestationManagementClientImpl with the provided parameters.\n+     *\n+     * @return an instance of AttestationManagementClientImpl.\n+     */\n+    public AttestationManagementClientImpl buildClient() {\n+        if (endpoint == null) {\n+            this.endpoint = \"https://management.azure.com\";\n+        }\n+        if (environment == null) {\n+            this.environment = AzureEnvironment.AZURE;\n+        }\n+        if (defaultPollInterval == null) {\n+            this.defaultPollInterval = Duration.ofSeconds(30);\n+        }\n+        if (pipeline == null) {\n+            this.pipeline =\n+                new HttpPipelineBuilder()\n+                    .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())\n+                    .build();\n+        }\n+        if (serializerAdapter == null) {\n+            this.serializerAdapter = SerializerFactory.createDefaultManagementSerializerAdapter();\n+        }\n+        AttestationManagementClientImpl client =\n+            new AttestationManagementClientImpl(\n+                pipeline, serializerAdapter, defaultPollInterval, environment, subscriptionId, endpoint);\n+        return client;\n+    }\n+}"
  },
  {
    "sha": "17d38574ea08fa6391beb98979776e47f3973cfc",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationManagementClientImpl.java",
    "status": "added",
    "additions": 321,
    "deletions": 0,
    "changes": 321,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationManagementClientImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationManagementClientImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationManagementClientImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,321 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.management.exception.ManagementError;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.management.polling.PollResult;\n+import com.azure.core.management.polling.PollerFactory;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.polling.AsyncPollResponse;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import com.azure.resourcemanager.attestation.fluent.AttestationManagementClient;\n+import com.azure.resourcemanager.attestation.fluent.AttestationProvidersClient;\n+import com.azure.resourcemanager.attestation.fluent.OperationsClient;\n+import com.azure.resourcemanager.attestation.fluent.PrivateEndpointConnectionsClient;\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Map;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+/** Initializes a new instance of the AttestationManagementClientImpl type. */\n+@ServiceClient(builder = AttestationManagementClientBuilder.class)\n+public final class AttestationManagementClientImpl implements AttestationManagementClient {\n+    private final ClientLogger logger = new ClientLogger(AttestationManagementClientImpl.class);\n+\n+    /** The ID of the target subscription. */\n+    private final String subscriptionId;\n+\n+    /**\n+     * Gets The ID of the target subscription.\n+     *\n+     * @return the subscriptionId value.\n+     */\n+    public String getSubscriptionId() {\n+        return this.subscriptionId;\n+    }\n+\n+    /** server parameter. */\n+    private final String endpoint;\n+\n+    /**\n+     * Gets server parameter.\n+     *\n+     * @return the endpoint value.\n+     */\n+    public String getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    /** Api Version. */\n+    private final String apiVersion;\n+\n+    /**\n+     * Gets Api Version.\n+     *\n+     * @return the apiVersion value.\n+     */\n+    public String getApiVersion() {\n+        return this.apiVersion;\n+    }\n+\n+    /** The HTTP pipeline to send requests through. */\n+    private final HttpPipeline httpPipeline;\n+\n+    /**\n+     * Gets The HTTP pipeline to send requests through.\n+     *\n+     * @return the httpPipeline value.\n+     */\n+    public HttpPipeline getHttpPipeline() {\n+        return this.httpPipeline;\n+    }\n+\n+    /** The serializer to serialize an object into a string. */\n+    private final SerializerAdapter serializerAdapter;\n+\n+    /**\n+     * Gets The serializer to serialize an object into a string.\n+     *\n+     * @return the serializerAdapter value.\n+     */\n+    SerializerAdapter getSerializerAdapter() {\n+        return this.serializerAdapter;\n+    }\n+\n+    /** The default poll interval for long-running operation. */\n+    private final Duration defaultPollInterval;\n+\n+    /**\n+     * Gets The default poll interval for long-running operation.\n+     *\n+     * @return the defaultPollInterval value.\n+     */\n+    public Duration getDefaultPollInterval() {\n+        return this.defaultPollInterval;\n+    }\n+\n+    /** The OperationsClient object to access its operations. */\n+    private final OperationsClient operations;\n+\n+    /**\n+     * Gets the OperationsClient object to access its operations.\n+     *\n+     * @return the OperationsClient object.\n+     */\n+    public OperationsClient getOperations() {\n+        return this.operations;\n+    }\n+\n+    /** The AttestationProvidersClient object to access its operations. */\n+    private final AttestationProvidersClient attestationProviders;\n+\n+    /**\n+     * Gets the AttestationProvidersClient object to access its operations.\n+     *\n+     * @return the AttestationProvidersClient object.\n+     */\n+    public AttestationProvidersClient getAttestationProviders() {\n+        return this.attestationProviders;\n+    }\n+\n+    /** The PrivateEndpointConnectionsClient object to access its operations. */\n+    private final PrivateEndpointConnectionsClient privateEndpointConnections;\n+\n+    /**\n+     * Gets the PrivateEndpointConnectionsClient object to access its operations.\n+     *\n+     * @return the PrivateEndpointConnectionsClient object.\n+     */\n+    public PrivateEndpointConnectionsClient getPrivateEndpointConnections() {\n+        return this.privateEndpointConnections;\n+    }\n+\n+    /**\n+     * Initializes an instance of AttestationManagementClient client.\n+     *\n+     * @param httpPipeline The HTTP pipeline to send requests through.\n+     * @param serializerAdapter The serializer to serialize an object into a string.\n+     * @param defaultPollInterval The default poll interval for long-running operation.\n+     * @param environment The Azure environment.\n+     * @param subscriptionId The ID of the target subscription.\n+     * @param endpoint server parameter.\n+     */\n+    AttestationManagementClientImpl(\n+        HttpPipeline httpPipeline,\n+        SerializerAdapter serializerAdapter,\n+        Duration defaultPollInterval,\n+        AzureEnvironment environment,\n+        String subscriptionId,\n+        String endpoint) {\n+        this.httpPipeline = httpPipeline;\n+        this.serializerAdapter = serializerAdapter;\n+        this.defaultPollInterval = defaultPollInterval;\n+        this.subscriptionId = subscriptionId;\n+        this.endpoint = endpoint;\n+        this.apiVersion = \"2020-10-01\";\n+        this.operations = new OperationsClientImpl(this);\n+        this.attestationProviders = new AttestationProvidersClientImpl(this);\n+        this.privateEndpointConnections = new PrivateEndpointConnectionsClientImpl(this);\n+    }\n+\n+    /**\n+     * Gets default client context.\n+     *\n+     * @return the default client context.\n+     */\n+    public Context getContext() {\n+        return Context.NONE;\n+    }\n+\n+    /**\n+     * Merges default client context with provided context.\n+     *\n+     * @param context the context to be merged with default client context.\n+     * @return the merged context.\n+     */\n+    public Context mergeContext(Context context) {\n+        for (Map.Entry<Object, Object> entry : this.getContext().getValues().entrySet()) {\n+            context = context.addData(entry.getKey(), entry.getValue());\n+        }\n+        return context;\n+    }\n+\n+    /**\n+     * Gets long running operation result.\n+     *\n+     * @param activationResponse the response of activation operation.\n+     * @param httpPipeline the http pipeline.\n+     * @param pollResultType type of poll result.\n+     * @param finalResultType type of final result.\n+     * @param context the context shared by all requests.\n+     * @param <T> type of poll result.\n+     * @param <U> type of final result.\n+     * @return poller flux for poll result and final result.\n+     */\n+    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(\n+        Mono<Response<Flux<ByteBuffer>>> activationResponse,\n+        HttpPipeline httpPipeline,\n+        Type pollResultType,\n+        Type finalResultType,\n+        Context context) {\n+        return PollerFactory\n+            .create(\n+                serializerAdapter,\n+                httpPipeline,\n+                pollResultType,\n+                finalResultType,\n+                defaultPollInterval,\n+                activationResponse,\n+                context);\n+    }\n+\n+    /**\n+     * Gets the final result, or an error, based on last async poll response.\n+     *\n+     * @param response the last async poll response.\n+     * @param <T> type of poll result.\n+     * @param <U> type of final result.\n+     * @return the final result, or an error.\n+     */\n+    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {\n+        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n+            String errorMessage;\n+            ManagementError managementError = null;\n+            HttpResponse errorResponse = null;\n+            PollResult.Error lroError = response.getValue().getError();\n+            if (lroError != null) {\n+                errorResponse =\n+                    new HttpResponseImpl(\n+                        lroError.getResponseStatusCode(), lroError.getResponseHeaders(), lroError.getResponseBody());\n+\n+                errorMessage = response.getValue().getError().getMessage();\n+                String errorBody = response.getValue().getError().getResponseBody();\n+                if (errorBody != null) {\n+                    // try to deserialize error body to ManagementError\n+                    try {\n+                        managementError =\n+                            this\n+                                .getSerializerAdapter()\n+                                .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);\n+                        if (managementError.getCode() == null || managementError.getMessage() == null) {\n+                            managementError = null;\n+                        }\n+                    } catch (IOException | RuntimeException ioe) {\n+                        logger.logThrowableAsWarning(ioe);\n+                    }\n+                }\n+            } else {\n+                // fallback to default error message\n+                errorMessage = \"Long running operation failed.\";\n+            }\n+            if (managementError == null) {\n+                // fallback to default ManagementError\n+                managementError = new ManagementError(response.getStatus().toString(), errorMessage);\n+            }\n+            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));\n+        } else {\n+            return response.getFinalResult();\n+        }\n+    }\n+\n+    private static final class HttpResponseImpl extends HttpResponse {\n+        private final int statusCode;\n+\n+        private final byte[] responseBody;\n+\n+        private final HttpHeaders httpHeaders;\n+\n+        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {\n+            super(null);\n+            this.statusCode = statusCode;\n+            this.httpHeaders = httpHeaders;\n+            this.responseBody = responseBody == null ? null : responseBody.getBytes(StandardCharsets.UTF_8);\n+        }\n+\n+        public int getStatusCode() {\n+            return statusCode;\n+        }\n+\n+        public String getHeaderValue(String s) {\n+            return httpHeaders.getValue(s);\n+        }\n+\n+        public HttpHeaders getHeaders() {\n+            return httpHeaders;\n+        }\n+\n+        public Flux<ByteBuffer> getBody() {\n+            return Flux.just(ByteBuffer.wrap(responseBody));\n+        }\n+\n+        public Mono<byte[]> getBodyAsByteArray() {\n+            return Mono.just(responseBody);\n+        }\n+\n+        public Mono<String> getBodyAsString() {\n+            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));\n+        }\n+\n+        public Mono<String> getBodyAsString(Charset charset) {\n+            return Mono.just(new String(responseBody, charset));\n+        }\n+    }\n+}"
  },
  {
    "sha": "e555088ca04dfe66b3e09cee16887e011fd31268",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProviderImpl.java",
    "status": "added",
    "additions": 221,
    "deletions": 0,
    "changes": 221,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProviderImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProviderImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProviderImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.management.Region;\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.attestation.AttestationManager;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderInner;\n+import com.azure.resourcemanager.attestation.fluent.models.PrivateEndpointConnectionInner;\n+import com.azure.resourcemanager.attestation.models.AttestationProvider;\n+import com.azure.resourcemanager.attestation.models.AttestationServiceCreationParams;\n+import com.azure.resourcemanager.attestation.models.AttestationServiceCreationSpecificParams;\n+import com.azure.resourcemanager.attestation.models.AttestationServicePatchParams;\n+import com.azure.resourcemanager.attestation.models.AttestationServiceStatus;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpointConnection;\n+import com.azure.resourcemanager.attestation.models.SystemData;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public final class AttestationProviderImpl\n+    implements AttestationProvider, AttestationProvider.Definition, AttestationProvider.Update {\n+    private AttestationProviderInner innerObject;\n+\n+    private final AttestationManager serviceManager;\n+\n+    public String id() {\n+        return this.innerModel().id();\n+    }\n+\n+    public String name() {\n+        return this.innerModel().name();\n+    }\n+\n+    public String type() {\n+        return this.innerModel().type();\n+    }\n+\n+    public String location() {\n+        return this.innerModel().location();\n+    }\n+\n+    public Map<String, String> tags() {\n+        Map<String, String> inner = this.innerModel().tags();\n+        if (inner != null) {\n+            return Collections.unmodifiableMap(inner);\n+        } else {\n+            return Collections.emptyMap();\n+        }\n+    }\n+\n+    public SystemData systemData() {\n+        return this.innerModel().systemData();\n+    }\n+\n+    public String trustModel() {\n+        return this.innerModel().trustModel();\n+    }\n+\n+    public AttestationServiceStatus status() {\n+        return this.innerModel().status();\n+    }\n+\n+    public String attestUri() {\n+        return this.innerModel().attestUri();\n+    }\n+\n+    public List<PrivateEndpointConnection> privateEndpointConnections() {\n+        List<PrivateEndpointConnectionInner> inner = this.innerModel().privateEndpointConnections();\n+        if (inner != null) {\n+            return Collections\n+                .unmodifiableList(\n+                    inner\n+                        .stream()\n+                        .map(inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()))\n+                        .collect(Collectors.toList()));\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    public Region region() {\n+        return Region.fromName(this.regionName());\n+    }\n+\n+    public String regionName() {\n+        return this.location();\n+    }\n+\n+    public AttestationProviderInner innerModel() {\n+        return this.innerObject;\n+    }\n+\n+    private AttestationManager manager() {\n+        return this.serviceManager;\n+    }\n+\n+    private String resourceGroupName;\n+\n+    private String providerName;\n+\n+    private AttestationServiceCreationParams createCreationParams;\n+\n+    private AttestationServicePatchParams updateUpdateParams;\n+\n+    public AttestationProviderImpl withExistingResourceGroup(String resourceGroupName) {\n+        this.resourceGroupName = resourceGroupName;\n+        return this;\n+    }\n+\n+    public AttestationProvider create() {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getAttestationProviders()\n+                .createWithResponse(resourceGroupName, providerName, createCreationParams, Context.NONE)\n+                .getValue();\n+        return this;\n+    }\n+\n+    public AttestationProvider create(Context context) {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getAttestationProviders()\n+                .createWithResponse(resourceGroupName, providerName, createCreationParams, context)\n+                .getValue();\n+        return this;\n+    }\n+\n+    AttestationProviderImpl(String name, AttestationManager serviceManager) {\n+        this.innerObject = new AttestationProviderInner();\n+        this.serviceManager = serviceManager;\n+        this.providerName = name;\n+        this.createCreationParams = new AttestationServiceCreationParams();\n+    }\n+\n+    public AttestationProviderImpl update() {\n+        this.updateUpdateParams = new AttestationServicePatchParams();\n+        return this;\n+    }\n+\n+    public AttestationProvider apply() {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getAttestationProviders()\n+                .updateWithResponse(resourceGroupName, providerName, updateUpdateParams, Context.NONE)\n+                .getValue();\n+        return this;\n+    }\n+\n+    public AttestationProvider apply(Context context) {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getAttestationProviders()\n+                .updateWithResponse(resourceGroupName, providerName, updateUpdateParams, context)\n+                .getValue();\n+        return this;\n+    }\n+\n+    AttestationProviderImpl(AttestationProviderInner innerObject, AttestationManager serviceManager) {\n+        this.innerObject = innerObject;\n+        this.serviceManager = serviceManager;\n+        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), \"resourceGroups\");\n+        this.providerName = Utils.getValueFromIdByName(innerObject.id(), \"attestationProviders\");\n+    }\n+\n+    public AttestationProvider refresh() {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getAttestationProviders()\n+                .getByResourceGroupWithResponse(resourceGroupName, providerName, Context.NONE)\n+                .getValue();\n+        return this;\n+    }\n+\n+    public AttestationProvider refresh(Context context) {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getAttestationProviders()\n+                .getByResourceGroupWithResponse(resourceGroupName, providerName, context)\n+                .getValue();\n+        return this;\n+    }\n+\n+    public AttestationProviderImpl withRegion(Region location) {\n+        this.createCreationParams.withLocation(location.toString());\n+        return this;\n+    }\n+\n+    public AttestationProviderImpl withRegion(String location) {\n+        this.createCreationParams.withLocation(location);\n+        return this;\n+    }\n+\n+    public AttestationProviderImpl withProperties(AttestationServiceCreationSpecificParams properties) {\n+        this.createCreationParams.withProperties(properties);\n+        return this;\n+    }\n+\n+    public AttestationProviderImpl withTags(Map<String, String> tags) {\n+        if (isInCreateMode()) {\n+            this.createCreationParams.withTags(tags);\n+            return this;\n+        } else {\n+            this.updateUpdateParams.withTags(tags);\n+            return this;\n+        }\n+    }\n+\n+    private boolean isInCreateMode() {\n+        return this.innerModel().id() == null;\n+    }\n+}"
  },
  {
    "sha": "4b20fcd8041809f63ba22538494f244a49c8cb1f",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProviderListResultImpl.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProviderListResultImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProviderListResultImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProviderListResultImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.resourcemanager.attestation.AttestationManager;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderInner;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderListResultInner;\n+import com.azure.resourcemanager.attestation.models.AttestationProvider;\n+import com.azure.resourcemanager.attestation.models.AttestationProviderListResult;\n+import com.azure.resourcemanager.attestation.models.SystemData;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public final class AttestationProviderListResultImpl implements AttestationProviderListResult {\n+    private AttestationProviderListResultInner innerObject;\n+\n+    private final AttestationManager serviceManager;\n+\n+    AttestationProviderListResultImpl(\n+        AttestationProviderListResultInner innerObject, AttestationManager serviceManager) {\n+        this.innerObject = innerObject;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public SystemData systemData() {\n+        return this.innerModel().systemData();\n+    }\n+\n+    public List<AttestationProvider> value() {\n+        List<AttestationProviderInner> inner = this.innerModel().value();\n+        if (inner != null) {\n+            return Collections\n+                .unmodifiableList(\n+                    inner\n+                        .stream()\n+                        .map(inner1 -> new AttestationProviderImpl(inner1, this.manager()))\n+                        .collect(Collectors.toList()));\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    public AttestationProviderListResultInner innerModel() {\n+        return this.innerObject;\n+    }\n+\n+    private AttestationManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "3209fb82f2de36063b92cb93b40a20eb246ad045",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProvidersClientImpl.java",
    "status": "added",
    "additions": 1302,
    "deletions": 0,
    "changes": 1302,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProvidersClientImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProvidersClientImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProvidersClientImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,1302 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.annotation.BodyParam;\n+import com.azure.core.annotation.Delete;\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Get;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.Headers;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.Patch;\n+import com.azure.core.annotation.PathParam;\n+import com.azure.core.annotation.Put;\n+import com.azure.core.annotation.QueryParam;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.fluent.AttestationProvidersClient;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderInner;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderListResultInner;\n+import com.azure.resourcemanager.attestation.models.AttestationServiceCreationParams;\n+import com.azure.resourcemanager.attestation.models.AttestationServicePatchParams;\n+import reactor.core.publisher.Mono;\n+\n+/** An instance of this class provides access to all the operations defined in AttestationProvidersClient. */\n+public final class AttestationProvidersClientImpl implements AttestationProvidersClient {\n+    private final ClientLogger logger = new ClientLogger(AttestationProvidersClientImpl.class);\n+\n+    /** The proxy service used to perform REST calls. */\n+    private final AttestationProvidersService service;\n+\n+    /** The service client containing this operation class. */\n+    private final AttestationManagementClientImpl client;\n+\n+    /**\n+     * Initializes an instance of AttestationProvidersClientImpl.\n+     *\n+     * @param client the instance of the service client containing this operation class.\n+     */\n+    AttestationProvidersClientImpl(AttestationManagementClientImpl client) {\n+        this.service =\n+            RestProxy\n+                .create(AttestationProvidersService.class, client.getHttpPipeline(), client.getSerializerAdapter());\n+        this.client = client;\n+    }\n+\n+    /**\n+     * The interface defining all the services for AttestationManagementClientAttestationProviders to be used by the\n+     * proxy service to perform REST calls.\n+     */\n+    @Host(\"{$host}\")\n+    @ServiceInterface(name = \"AttestationManagemen\")\n+    private interface AttestationProvidersService {\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation\"\n+                + \"/attestationProviders/{providerName}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AttestationProviderInner>> getByResourceGroup(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @PathParam(\"providerName\") String providerName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Put(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation\"\n+                + \"/attestationProviders/{providerName}\")\n+        @ExpectedResponses({200, 201})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AttestationProviderInner>> create(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @PathParam(\"providerName\") String providerName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @BodyParam(\"application/json\") AttestationServiceCreationParams creationParams,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Patch(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation\"\n+                + \"/attestationProviders/{providerName}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AttestationProviderInner>> update(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @PathParam(\"providerName\") String providerName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @BodyParam(\"application/json\") AttestationServicePatchParams updateParams,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Delete(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation\"\n+                + \"/attestationProviders/{providerName}\")\n+        @ExpectedResponses({200, 202, 204})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<Void>> delete(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @PathParam(\"providerName\") String providerName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/subscriptions/{subscriptionId}/providers/Microsoft.Attestation/attestationProviders\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AttestationProviderListResultInner>> list(\n+            @HostParam(\"$host\") String endpoint,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation\"\n+                + \"/attestationProviders\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AttestationProviderListResultInner>> listByResourceGroup(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/subscriptions/{subscriptionId}/providers/Microsoft.Attestation/defaultProviders\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AttestationProviderListResultInner>> listDefault(\n+            @HostParam(\"$host\") String endpoint,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/subscriptions/{subscriptionId}/providers/Microsoft.Attestation/locations/{location}/defaultProvider\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<AttestationProviderInner>> getDefaultByLocation(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"location\") String location,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+    }\n+\n+    /**\n+     * Get the status of Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the status of Attestation Provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderInner>> getByResourceGroupWithResponseAsync(\n+        String resourceGroupName, String providerName) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .getByResourceGroup(\n+                            this.client.getEndpoint(),\n+                            this.client.getSubscriptionId(),\n+                            resourceGroupName,\n+                            providerName,\n+                            this.client.getApiVersion(),\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Get the status of Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the status of Attestation Provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderInner>> getByResourceGroupWithResponseAsync(\n+        String resourceGroupName, String providerName, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .getByResourceGroup(\n+                this.client.getEndpoint(),\n+                this.client.getSubscriptionId(),\n+                resourceGroupName,\n+                providerName,\n+                this.client.getApiVersion(),\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Get the status of Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the status of Attestation Provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<AttestationProviderInner> getByResourceGroupAsync(String resourceGroupName, String providerName) {\n+        return getByResourceGroupWithResponseAsync(resourceGroupName, providerName)\n+            .flatMap(\n+                (Response<AttestationProviderInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Get the status of Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the status of Attestation Provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public AttestationProviderInner getByResourceGroup(String resourceGroupName, String providerName) {\n+        return getByResourceGroupAsync(resourceGroupName, providerName).block();\n+    }\n+\n+    /**\n+     * Get the status of Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the status of Attestation Provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<AttestationProviderInner> getByResourceGroupWithResponse(\n+        String resourceGroupName, String providerName, Context context) {\n+        return getByResourceGroupWithResponseAsync(resourceGroupName, providerName, context).block();\n+    }\n+\n+    /**\n+     * Creates a new Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param creationParams Client supplied parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderInner>> createWithResponseAsync(\n+        String resourceGroupName, String providerName, AttestationServiceCreationParams creationParams) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (creationParams == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter creationParams is required and cannot be null.\"));\n+        } else {\n+            creationParams.validate();\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .create(\n+                            this.client.getEndpoint(),\n+                            this.client.getSubscriptionId(),\n+                            resourceGroupName,\n+                            providerName,\n+                            this.client.getApiVersion(),\n+                            creationParams,\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Creates a new Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param creationParams Client supplied parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderInner>> createWithResponseAsync(\n+        String resourceGroupName,\n+        String providerName,\n+        AttestationServiceCreationParams creationParams,\n+        Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (creationParams == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter creationParams is required and cannot be null.\"));\n+        } else {\n+            creationParams.validate();\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .create(\n+                this.client.getEndpoint(),\n+                this.client.getSubscriptionId(),\n+                resourceGroupName,\n+                providerName,\n+                this.client.getApiVersion(),\n+                creationParams,\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Creates a new Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param creationParams Client supplied parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<AttestationProviderInner> createAsync(\n+        String resourceGroupName, String providerName, AttestationServiceCreationParams creationParams) {\n+        return createWithResponseAsync(resourceGroupName, providerName, creationParams)\n+            .flatMap(\n+                (Response<AttestationProviderInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Creates a new Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param creationParams Client supplied parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public AttestationProviderInner create(\n+        String resourceGroupName, String providerName, AttestationServiceCreationParams creationParams) {\n+        return createAsync(resourceGroupName, providerName, creationParams).block();\n+    }\n+\n+    /**\n+     * Creates a new Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param creationParams Client supplied parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<AttestationProviderInner> createWithResponse(\n+        String resourceGroupName,\n+        String providerName,\n+        AttestationServiceCreationParams creationParams,\n+        Context context) {\n+        return createWithResponseAsync(resourceGroupName, providerName, creationParams, context).block();\n+    }\n+\n+    /**\n+     * Updates the Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param updateParams Client supplied parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderInner>> updateWithResponseAsync(\n+        String resourceGroupName, String providerName, AttestationServicePatchParams updateParams) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (updateParams == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter updateParams is required and cannot be null.\"));\n+        } else {\n+            updateParams.validate();\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .update(\n+                            this.client.getEndpoint(),\n+                            this.client.getSubscriptionId(),\n+                            resourceGroupName,\n+                            providerName,\n+                            this.client.getApiVersion(),\n+                            updateParams,\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Updates the Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param updateParams Client supplied parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderInner>> updateWithResponseAsync(\n+        String resourceGroupName, String providerName, AttestationServicePatchParams updateParams, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (updateParams == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter updateParams is required and cannot be null.\"));\n+        } else {\n+            updateParams.validate();\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .update(\n+                this.client.getEndpoint(),\n+                this.client.getSubscriptionId(),\n+                resourceGroupName,\n+                providerName,\n+                this.client.getApiVersion(),\n+                updateParams,\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Updates the Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param updateParams Client supplied parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<AttestationProviderInner> updateAsync(\n+        String resourceGroupName, String providerName, AttestationServicePatchParams updateParams) {\n+        return updateWithResponseAsync(resourceGroupName, providerName, updateParams)\n+            .flatMap(\n+                (Response<AttestationProviderInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Updates the Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param updateParams Client supplied parameters.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public AttestationProviderInner update(\n+        String resourceGroupName, String providerName, AttestationServicePatchParams updateParams) {\n+        return updateAsync(resourceGroupName, providerName, updateParams).block();\n+    }\n+\n+    /**\n+     * Updates the Attestation Provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation provider.\n+     * @param updateParams Client supplied parameters.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation service response message.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<AttestationProviderInner> updateWithResponse(\n+        String resourceGroupName, String providerName, AttestationServicePatchParams updateParams, Context context) {\n+        return updateWithResponseAsync(resourceGroupName, providerName, updateParams, context).block();\n+    }\n+\n+    /**\n+     * Delete Attestation Service.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation service.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String providerName) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .delete(\n+                            this.client.getEndpoint(),\n+                            this.client.getSubscriptionId(),\n+                            resourceGroupName,\n+                            providerName,\n+                            this.client.getApiVersion(),\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Delete Attestation Service.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation service.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<Void>> deleteWithResponseAsync(\n+        String resourceGroupName, String providerName, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .delete(\n+                this.client.getEndpoint(),\n+                this.client.getSubscriptionId(),\n+                resourceGroupName,\n+                providerName,\n+                this.client.getApiVersion(),\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Delete Attestation Service.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation service.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Void> deleteAsync(String resourceGroupName, String providerName) {\n+        return deleteWithResponseAsync(resourceGroupName, providerName).flatMap((Response<Void> res) -> Mono.empty());\n+    }\n+\n+    /**\n+     * Delete Attestation Service.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation service.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void delete(String resourceGroupName, String providerName) {\n+        deleteAsync(resourceGroupName, providerName).block();\n+    }\n+\n+    /**\n+     * Delete Attestation Service.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName Name of the attestation service.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<Void> deleteWithResponse(String resourceGroupName, String providerName, Context context) {\n+        return deleteWithResponseAsync(resourceGroupName, providerName, context).block();\n+    }\n+\n+    /**\n+     * Returns a list of attestation providers in a subscription.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderListResultInner>> listWithResponseAsync() {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .list(\n+                            this.client.getEndpoint(),\n+                            this.client.getApiVersion(),\n+                            this.client.getSubscriptionId(),\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Returns a list of attestation providers in a subscription.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderListResultInner>> listWithResponseAsync(Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .list(\n+                this.client.getEndpoint(),\n+                this.client.getApiVersion(),\n+                this.client.getSubscriptionId(),\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Returns a list of attestation providers in a subscription.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<AttestationProviderListResultInner> listAsync() {\n+        return listWithResponseAsync()\n+            .flatMap(\n+                (Response<AttestationProviderListResultInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Returns a list of attestation providers in a subscription.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public AttestationProviderListResultInner list() {\n+        return listAsync().block();\n+    }\n+\n+    /**\n+     * Returns a list of attestation providers in a subscription.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<AttestationProviderListResultInner> listWithResponse(Context context) {\n+        return listWithResponseAsync(context).block();\n+    }\n+\n+    /**\n+     * Returns attestation providers list in a resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderListResultInner>> listByResourceGroupWithResponseAsync(\n+        String resourceGroupName) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .listByResourceGroup(\n+                            this.client.getEndpoint(),\n+                            resourceGroupName,\n+                            this.client.getApiVersion(),\n+                            this.client.getSubscriptionId(),\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Returns attestation providers list in a resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderListResultInner>> listByResourceGroupWithResponseAsync(\n+        String resourceGroupName, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listByResourceGroup(\n+                this.client.getEndpoint(),\n+                resourceGroupName,\n+                this.client.getApiVersion(),\n+                this.client.getSubscriptionId(),\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Returns attestation providers list in a resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<AttestationProviderListResultInner> listByResourceGroupAsync(String resourceGroupName) {\n+        return listByResourceGroupWithResponseAsync(resourceGroupName)\n+            .flatMap(\n+                (Response<AttestationProviderListResultInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Returns attestation providers list in a resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public AttestationProviderListResultInner listByResourceGroup(String resourceGroupName) {\n+        return listByResourceGroupAsync(resourceGroupName).block();\n+    }\n+\n+    /**\n+     * Returns attestation providers list in a resource group.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return attestation Providers List.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<AttestationProviderListResultInner> listByResourceGroupWithResponse(\n+        String resourceGroupName, Context context) {\n+        return listByResourceGroupWithResponseAsync(resourceGroupName, context).block();\n+    }\n+\n+    /**\n+     * Get the default provider.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderListResultInner>> listDefaultWithResponseAsync() {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .listDefault(\n+                            this.client.getEndpoint(),\n+                            this.client.getApiVersion(),\n+                            this.client.getSubscriptionId(),\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Get the default provider.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderListResultInner>> listDefaultWithResponseAsync(Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .listDefault(\n+                this.client.getEndpoint(),\n+                this.client.getApiVersion(),\n+                this.client.getSubscriptionId(),\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Get the default provider.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<AttestationProviderListResultInner> listDefaultAsync() {\n+        return listDefaultWithResponseAsync()\n+            .flatMap(\n+                (Response<AttestationProviderListResultInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Get the default provider.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public AttestationProviderListResultInner listDefault() {\n+        return listDefaultAsync().block();\n+    }\n+\n+    /**\n+     * Get the default provider.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<AttestationProviderListResultInner> listDefaultWithResponse(Context context) {\n+        return listDefaultWithResponseAsync(context).block();\n+    }\n+\n+    /**\n+     * Get the default provider by location.\n+     *\n+     * @param location The location of the default provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider by location.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderInner>> getDefaultByLocationWithResponseAsync(String location) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (location == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter location is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .getDefaultByLocation(\n+                            this.client.getEndpoint(),\n+                            location,\n+                            this.client.getApiVersion(),\n+                            this.client.getSubscriptionId(),\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Get the default provider by location.\n+     *\n+     * @param location The location of the default provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider by location.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<AttestationProviderInner>> getDefaultByLocationWithResponseAsync(\n+        String location, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (location == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter location is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .getDefaultByLocation(\n+                this.client.getEndpoint(),\n+                location,\n+                this.client.getApiVersion(),\n+                this.client.getSubscriptionId(),\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Get the default provider by location.\n+     *\n+     * @param location The location of the default provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider by location.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<AttestationProviderInner> getDefaultByLocationAsync(String location) {\n+        return getDefaultByLocationWithResponseAsync(location)\n+            .flatMap(\n+                (Response<AttestationProviderInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Get the default provider by location.\n+     *\n+     * @param location The location of the default provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider by location.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public AttestationProviderInner getDefaultByLocation(String location) {\n+        return getDefaultByLocationAsync(location).block();\n+    }\n+\n+    /**\n+     * Get the default provider by location.\n+     *\n+     * @param location The location of the default provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the default provider by location.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<AttestationProviderInner> getDefaultByLocationWithResponse(String location, Context context) {\n+        return getDefaultByLocationWithResponseAsync(location, context).block();\n+    }\n+}"
  },
  {
    "sha": "5f75b063a35c5d13b2f68e3470107c9a8918f3e2",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProvidersImpl.java",
    "status": "added",
    "additions": 254,
    "deletions": 0,
    "changes": 254,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProvidersImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProvidersImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/AttestationProvidersImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,254 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.AttestationManager;\n+import com.azure.resourcemanager.attestation.fluent.AttestationProvidersClient;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderInner;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderListResultInner;\n+import com.azure.resourcemanager.attestation.models.AttestationProvider;\n+import com.azure.resourcemanager.attestation.models.AttestationProviderListResult;\n+import com.azure.resourcemanager.attestation.models.AttestationProviders;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public final class AttestationProvidersImpl implements AttestationProviders {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(AttestationProvidersImpl.class);\n+\n+    private final AttestationProvidersClient innerClient;\n+\n+    private final AttestationManager serviceManager;\n+\n+    public AttestationProvidersImpl(AttestationProvidersClient innerClient, AttestationManager serviceManager) {\n+        this.innerClient = innerClient;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public AttestationProvider getByResourceGroup(String resourceGroupName, String providerName) {\n+        AttestationProviderInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, providerName);\n+        if (inner != null) {\n+            return new AttestationProviderImpl(inner, this.manager());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Response<AttestationProvider> getByResourceGroupWithResponse(\n+        String resourceGroupName, String providerName, Context context) {\n+        Response<AttestationProviderInner> inner =\n+            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, providerName, context);\n+        if (inner != null) {\n+            return new SimpleResponse<>(\n+                inner.getRequest(),\n+                inner.getStatusCode(),\n+                inner.getHeaders(),\n+                new AttestationProviderImpl(inner.getValue(), this.manager()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public void deleteByResourceGroup(String resourceGroupName, String providerName) {\n+        this.serviceClient().delete(resourceGroupName, providerName);\n+    }\n+\n+    public Response<Void> deleteWithResponse(String resourceGroupName, String providerName, Context context) {\n+        return this.serviceClient().deleteWithResponse(resourceGroupName, providerName, context);\n+    }\n+\n+    public AttestationProviderListResult list() {\n+        AttestationProviderListResultInner inner = this.serviceClient().list();\n+        if (inner != null) {\n+            return new AttestationProviderListResultImpl(inner, this.manager());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Response<AttestationProviderListResult> listWithResponse(Context context) {\n+        Response<AttestationProviderListResultInner> inner = this.serviceClient().listWithResponse(context);\n+        if (inner != null) {\n+            return new SimpleResponse<>(\n+                inner.getRequest(),\n+                inner.getStatusCode(),\n+                inner.getHeaders(),\n+                new AttestationProviderListResultImpl(inner.getValue(), this.manager()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public AttestationProviderListResult listByResourceGroup(String resourceGroupName) {\n+        AttestationProviderListResultInner inner = this.serviceClient().listByResourceGroup(resourceGroupName);\n+        if (inner != null) {\n+            return new AttestationProviderListResultImpl(inner, this.manager());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Response<AttestationProviderListResult> listByResourceGroupWithResponse(\n+        String resourceGroupName, Context context) {\n+        Response<AttestationProviderListResultInner> inner =\n+            this.serviceClient().listByResourceGroupWithResponse(resourceGroupName, context);\n+        if (inner != null) {\n+            return new SimpleResponse<>(\n+                inner.getRequest(),\n+                inner.getStatusCode(),\n+                inner.getHeaders(),\n+                new AttestationProviderListResultImpl(inner.getValue(), this.manager()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public AttestationProviderListResult listDefault() {\n+        AttestationProviderListResultInner inner = this.serviceClient().listDefault();\n+        if (inner != null) {\n+            return new AttestationProviderListResultImpl(inner, this.manager());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Response<AttestationProviderListResult> listDefaultWithResponse(Context context) {\n+        Response<AttestationProviderListResultInner> inner = this.serviceClient().listDefaultWithResponse(context);\n+        if (inner != null) {\n+            return new SimpleResponse<>(\n+                inner.getRequest(),\n+                inner.getStatusCode(),\n+                inner.getHeaders(),\n+                new AttestationProviderListResultImpl(inner.getValue(), this.manager()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public AttestationProvider getDefaultByLocation(String location) {\n+        AttestationProviderInner inner = this.serviceClient().getDefaultByLocation(location);\n+        if (inner != null) {\n+            return new AttestationProviderImpl(inner, this.manager());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Response<AttestationProvider> getDefaultByLocationWithResponse(String location, Context context) {\n+        Response<AttestationProviderInner> inner =\n+            this.serviceClient().getDefaultByLocationWithResponse(location, context);\n+        if (inner != null) {\n+            return new SimpleResponse<>(\n+                inner.getRequest(),\n+                inner.getStatusCode(),\n+                inner.getHeaders(),\n+                new AttestationProviderImpl(inner.getValue(), this.manager()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public AttestationProvider getById(String id) {\n+        String resourceGroupName = Utils.getValueFromIdByName(id, \"resourceGroups\");\n+        if (resourceGroupName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\"The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.\", id)));\n+        }\n+        String providerName = Utils.getValueFromIdByName(id, \"attestationProviders\");\n+        if (providerName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.\",\n+                                id)));\n+        }\n+        return this.getByResourceGroupWithResponse(resourceGroupName, providerName, Context.NONE).getValue();\n+    }\n+\n+    public Response<AttestationProvider> getByIdWithResponse(String id, Context context) {\n+        String resourceGroupName = Utils.getValueFromIdByName(id, \"resourceGroups\");\n+        if (resourceGroupName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\"The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.\", id)));\n+        }\n+        String providerName = Utils.getValueFromIdByName(id, \"attestationProviders\");\n+        if (providerName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.\",\n+                                id)));\n+        }\n+        return this.getByResourceGroupWithResponse(resourceGroupName, providerName, context);\n+    }\n+\n+    public void deleteById(String id) {\n+        String resourceGroupName = Utils.getValueFromIdByName(id, \"resourceGroups\");\n+        if (resourceGroupName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\"The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.\", id)));\n+        }\n+        String providerName = Utils.getValueFromIdByName(id, \"attestationProviders\");\n+        if (providerName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.\",\n+                                id)));\n+        }\n+        this.deleteWithResponse(resourceGroupName, providerName, Context.NONE).getValue();\n+    }\n+\n+    public Response<Void> deleteByIdWithResponse(String id, Context context) {\n+        String resourceGroupName = Utils.getValueFromIdByName(id, \"resourceGroups\");\n+        if (resourceGroupName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\"The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.\", id)));\n+        }\n+        String providerName = Utils.getValueFromIdByName(id, \"attestationProviders\");\n+        if (providerName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.\",\n+                                id)));\n+        }\n+        return this.deleteWithResponse(resourceGroupName, providerName, context);\n+    }\n+\n+    private AttestationProvidersClient serviceClient() {\n+        return this.innerClient;\n+    }\n+\n+    private AttestationManager manager() {\n+        return this.serviceManager;\n+    }\n+\n+    public AttestationProviderImpl define(String name) {\n+        return new AttestationProviderImpl(name, this.manager());\n+    }\n+}"
  },
  {
    "sha": "ecbf39a684c89b0e051ba2301e4ea4d4b292bf48",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationListImpl.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationListImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationListImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationListImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.resourcemanager.attestation.AttestationManager;\n+import com.azure.resourcemanager.attestation.fluent.models.OperationListInner;\n+import com.azure.resourcemanager.attestation.models.OperationList;\n+import com.azure.resourcemanager.attestation.models.OperationsDefinition;\n+import com.azure.resourcemanager.attestation.models.SystemData;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class OperationListImpl implements OperationList {\n+    private OperationListInner innerObject;\n+\n+    private final AttestationManager serviceManager;\n+\n+    OperationListImpl(OperationListInner innerObject, AttestationManager serviceManager) {\n+        this.innerObject = innerObject;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public SystemData systemData() {\n+        return this.innerModel().systemData();\n+    }\n+\n+    public List<OperationsDefinition> value() {\n+        List<OperationsDefinition> inner = this.innerModel().value();\n+        if (inner != null) {\n+            return Collections.unmodifiableList(inner);\n+        } else {\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    public OperationListInner innerModel() {\n+        return this.innerObject;\n+    }\n+\n+    private AttestationManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "19fb1b16ca235f56518332876103b1d5281f5fb1",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationsClientImpl.java",
    "status": "added",
    "additions": 156,
    "deletions": 0,
    "changes": 156,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationsClientImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationsClientImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationsClientImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,156 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Get;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.Headers;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.QueryParam;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.fluent.OperationsClient;\n+import com.azure.resourcemanager.attestation.fluent.models.OperationListInner;\n+import reactor.core.publisher.Mono;\n+\n+/** An instance of this class provides access to all the operations defined in OperationsClient. */\n+public final class OperationsClientImpl implements OperationsClient {\n+    private final ClientLogger logger = new ClientLogger(OperationsClientImpl.class);\n+\n+    /** The proxy service used to perform REST calls. */\n+    private final OperationsService service;\n+\n+    /** The service client containing this operation class. */\n+    private final AttestationManagementClientImpl client;\n+\n+    /**\n+     * Initializes an instance of OperationsClientImpl.\n+     *\n+     * @param client the instance of the service client containing this operation class.\n+     */\n+    OperationsClientImpl(AttestationManagementClientImpl client) {\n+        this.service =\n+            RestProxy.create(OperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());\n+        this.client = client;\n+    }\n+\n+    /**\n+     * The interface defining all the services for AttestationManagementClientOperations to be used by the proxy service\n+     * to perform REST calls.\n+     */\n+    @Host(\"{$host}\")\n+    @ServiceInterface(name = \"AttestationManagemen\")\n+    private interface OperationsService {\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\"/providers/Microsoft.Attestation/operations\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<OperationListInner>> list(\n+            @HostParam(\"$host\") String endpoint,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+    }\n+\n+    /**\n+     * Lists all of the available Azure attestation operations.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of supported operations.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<OperationListInner>> listWithResponseAsync() {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), accept, context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Lists all of the available Azure attestation operations.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of supported operations.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<OperationListInner>> listWithResponseAsync(Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service.list(this.client.getEndpoint(), this.client.getApiVersion(), accept, context);\n+    }\n+\n+    /**\n+     * Lists all of the available Azure attestation operations.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of supported operations.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<OperationListInner> listAsync() {\n+        return listWithResponseAsync()\n+            .flatMap(\n+                (Response<OperationListInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Lists all of the available Azure attestation operations.\n+     *\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of supported operations.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public OperationListInner list() {\n+        return listAsync().block();\n+    }\n+\n+    /**\n+     * Lists all of the available Azure attestation operations.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of supported operations.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<OperationListInner> listWithResponse(Context context) {\n+        return listWithResponseAsync(context).block();\n+    }\n+}"
  },
  {
    "sha": "b3e09fa7619f4d8a622f81d023d15f1acb354307",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationsImpl.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationsImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationsImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/OperationsImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.AttestationManager;\n+import com.azure.resourcemanager.attestation.fluent.OperationsClient;\n+import com.azure.resourcemanager.attestation.fluent.models.OperationListInner;\n+import com.azure.resourcemanager.attestation.models.OperationList;\n+import com.azure.resourcemanager.attestation.models.Operations;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public final class OperationsImpl implements Operations {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(OperationsImpl.class);\n+\n+    private final OperationsClient innerClient;\n+\n+    private final AttestationManager serviceManager;\n+\n+    public OperationsImpl(OperationsClient innerClient, AttestationManager serviceManager) {\n+        this.innerClient = innerClient;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public OperationList list() {\n+        OperationListInner inner = this.serviceClient().list();\n+        if (inner != null) {\n+            return new OperationListImpl(inner, this.manager());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Response<OperationList> listWithResponse(Context context) {\n+        Response<OperationListInner> inner = this.serviceClient().listWithResponse(context);\n+        if (inner != null) {\n+            return new SimpleResponse<>(\n+                inner.getRequest(),\n+                inner.getStatusCode(),\n+                inner.getHeaders(),\n+                new OperationListImpl(inner.getValue(), this.manager()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private OperationsClient serviceClient() {\n+        return this.innerClient;\n+    }\n+\n+    private AttestationManager manager() {\n+        return this.serviceManager;\n+    }\n+}"
  },
  {
    "sha": "9dd5a3c70cd9b1312b2bb7e54ff4e31d08cc3d3b",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionImpl.java",
    "status": "added",
    "additions": 129,
    "deletions": 0,
    "changes": 129,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,129 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.attestation.AttestationManager;\n+import com.azure.resourcemanager.attestation.fluent.models.PrivateEndpointConnectionInner;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpoint;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpointConnection;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpointConnectionProvisioningState;\n+import com.azure.resourcemanager.attestation.models.PrivateLinkServiceConnectionState;\n+\n+public final class PrivateEndpointConnectionImpl\n+    implements PrivateEndpointConnection, PrivateEndpointConnection.Definition {\n+    private PrivateEndpointConnectionInner innerObject;\n+\n+    private final AttestationManager serviceManager;\n+\n+    PrivateEndpointConnectionImpl(PrivateEndpointConnectionInner innerObject, AttestationManager serviceManager) {\n+        this.innerObject = innerObject;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public String id() {\n+        return this.innerModel().id();\n+    }\n+\n+    public String name() {\n+        return this.innerModel().name();\n+    }\n+\n+    public String type() {\n+        return this.innerModel().type();\n+    }\n+\n+    public PrivateEndpoint privateEndpoint() {\n+        return this.innerModel().privateEndpoint();\n+    }\n+\n+    public PrivateLinkServiceConnectionState privateLinkServiceConnectionState() {\n+        return this.innerModel().privateLinkServiceConnectionState();\n+    }\n+\n+    public PrivateEndpointConnectionProvisioningState provisioningState() {\n+        return this.innerModel().provisioningState();\n+    }\n+\n+    public PrivateEndpointConnectionInner innerModel() {\n+        return this.innerObject;\n+    }\n+\n+    private AttestationManager manager() {\n+        return this.serviceManager;\n+    }\n+\n+    private String resourceGroupName;\n+\n+    private String providerName;\n+\n+    private String privateEndpointConnectionName;\n+\n+    public PrivateEndpointConnectionImpl withExistingAttestationProvider(\n+        String resourceGroupName, String providerName) {\n+        this.resourceGroupName = resourceGroupName;\n+        this.providerName = providerName;\n+        return this;\n+    }\n+\n+    public PrivateEndpointConnection create() {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getPrivateEndpointConnections()\n+                .createWithResponse(\n+                    resourceGroupName, providerName, privateEndpointConnectionName, this.innerModel(), Context.NONE)\n+                .getValue();\n+        return this;\n+    }\n+\n+    public PrivateEndpointConnection create(Context context) {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getPrivateEndpointConnections()\n+                .createWithResponse(\n+                    resourceGroupName, providerName, privateEndpointConnectionName, this.innerModel(), context)\n+                .getValue();\n+        return this;\n+    }\n+\n+    PrivateEndpointConnectionImpl(String name, AttestationManager serviceManager) {\n+        this.innerObject = new PrivateEndpointConnectionInner();\n+        this.serviceManager = serviceManager;\n+        this.privateEndpointConnectionName = name;\n+    }\n+\n+    public PrivateEndpointConnection refresh() {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getPrivateEndpointConnections()\n+                .getWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, Context.NONE)\n+                .getValue();\n+        return this;\n+    }\n+\n+    public PrivateEndpointConnection refresh(Context context) {\n+        this.innerObject =\n+            serviceManager\n+                .serviceClient()\n+                .getPrivateEndpointConnections()\n+                .getWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, context)\n+                .getValue();\n+        return this;\n+    }\n+\n+    public PrivateEndpointConnectionImpl withPrivateEndpoint(PrivateEndpoint privateEndpoint) {\n+        this.innerModel().withPrivateEndpoint(privateEndpoint);\n+        return this;\n+    }\n+\n+    public PrivateEndpointConnectionImpl withPrivateLinkServiceConnectionState(\n+        PrivateLinkServiceConnectionState privateLinkServiceConnectionState) {\n+        this.innerModel().withPrivateLinkServiceConnectionState(privateLinkServiceConnectionState);\n+        return this;\n+    }\n+}"
  },
  {
    "sha": "2b495d6dc1083c1110be47bd1efcc94a07ccc8b8",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionsClientImpl.java",
    "status": "added",
    "additions": 849,
    "deletions": 0,
    "changes": 849,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionsClientImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionsClientImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionsClientImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,849 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.annotation.BodyParam;\n+import com.azure.core.annotation.Delete;\n+import com.azure.core.annotation.ExpectedResponses;\n+import com.azure.core.annotation.Get;\n+import com.azure.core.annotation.HeaderParam;\n+import com.azure.core.annotation.Headers;\n+import com.azure.core.annotation.Host;\n+import com.azure.core.annotation.HostParam;\n+import com.azure.core.annotation.PathParam;\n+import com.azure.core.annotation.Put;\n+import com.azure.core.annotation.QueryParam;\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceInterface;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.annotation.UnexpectedResponseExceptionType;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.RestProxy;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.fluent.PrivateEndpointConnectionsClient;\n+import com.azure.resourcemanager.attestation.fluent.models.PrivateEndpointConnectionInner;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpointConnectionListResult;\n+import reactor.core.publisher.Mono;\n+\n+/** An instance of this class provides access to all the operations defined in PrivateEndpointConnectionsClient. */\n+public final class PrivateEndpointConnectionsClientImpl implements PrivateEndpointConnectionsClient {\n+    private final ClientLogger logger = new ClientLogger(PrivateEndpointConnectionsClientImpl.class);\n+\n+    /** The proxy service used to perform REST calls. */\n+    private final PrivateEndpointConnectionsService service;\n+\n+    /** The service client containing this operation class. */\n+    private final AttestationManagementClientImpl client;\n+\n+    /**\n+     * Initializes an instance of PrivateEndpointConnectionsClientImpl.\n+     *\n+     * @param client the instance of the service client containing this operation class.\n+     */\n+    PrivateEndpointConnectionsClientImpl(AttestationManagementClientImpl client) {\n+        this.service =\n+            RestProxy\n+                .create(\n+                    PrivateEndpointConnectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());\n+        this.client = client;\n+    }\n+\n+    /**\n+     * The interface defining all the services for AttestationManagementClientPrivateEndpointConnections to be used by\n+     * the proxy service to perform REST calls.\n+     */\n+    @Host(\"{$host}\")\n+    @ServiceInterface(name = \"AttestationManagemen\")\n+    private interface PrivateEndpointConnectionsService {\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation\"\n+                + \"/attestationProvider/{providerName}/privateEndpointConnections\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<PrivateEndpointConnectionListResult>> list(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @PathParam(\"providerName\") String providerName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Get(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation\"\n+                + \"/attestationProviders/{providerName}/privateEndpointConnections/{privateEndpointConnectionName}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<PrivateEndpointConnectionInner>> get(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @PathParam(\"providerName\") String providerName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @PathParam(\"privateEndpointConnectionName\") String privateEndpointConnectionName,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Put(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation\"\n+                + \"/attestationProviders/{providerName}/privateEndpointConnections/{privateEndpointConnectionName}\")\n+        @ExpectedResponses({200})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<PrivateEndpointConnectionInner>> create(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @PathParam(\"providerName\") String providerName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @PathParam(\"privateEndpointConnectionName\") String privateEndpointConnectionName,\n+            @BodyParam(\"application/json\") PrivateEndpointConnectionInner properties,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+\n+        @Headers({\"Content-Type: application/json\"})\n+        @Delete(\n+            \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation\"\n+                + \"/attestationProviders/{providerName}/privateEndpointConnections/{privateEndpointConnectionName}\")\n+        @ExpectedResponses({200, 204})\n+        @UnexpectedResponseExceptionType(ManagementException.class)\n+        Mono<Response<Void>> delete(\n+            @HostParam(\"$host\") String endpoint,\n+            @PathParam(\"resourceGroupName\") String resourceGroupName,\n+            @PathParam(\"providerName\") String providerName,\n+            @QueryParam(\"api-version\") String apiVersion,\n+            @PathParam(\"subscriptionId\") String subscriptionId,\n+            @PathParam(\"privateEndpointConnectionName\") String privateEndpointConnectionName,\n+            @HeaderParam(\"Accept\") String accept,\n+            Context context);\n+    }\n+\n+    /**\n+     * List all the private endpoint connections associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of private endpoint connection associated with the specified storage account.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<PrivateEndpointConnectionInner>> listSinglePageAsync(\n+        String resourceGroupName, String providerName) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .list(\n+                            this.client.getEndpoint(),\n+                            resourceGroupName,\n+                            providerName,\n+                            this.client.getApiVersion(),\n+                            this.client.getSubscriptionId(),\n+                            accept,\n+                            context))\n+            .<PagedResponse<PrivateEndpointConnectionInner>>map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * List all the private endpoint connections associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of private endpoint connection associated with the specified storage account.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PagedResponse<PrivateEndpointConnectionInner>> listSinglePageAsync(\n+        String resourceGroupName, String providerName, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .list(\n+                this.client.getEndpoint(),\n+                resourceGroupName,\n+                providerName,\n+                this.client.getApiVersion(),\n+                this.client.getSubscriptionId(),\n+                accept,\n+                context)\n+            .map(\n+                res ->\n+                    new PagedResponseBase<>(\n+                        res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null));\n+    }\n+\n+    /**\n+     * List all the private endpoint connections associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of private endpoint connection associated with the specified storage account.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<PrivateEndpointConnectionInner> listAsync(String resourceGroupName, String providerName) {\n+        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, providerName));\n+    }\n+\n+    /**\n+     * List all the private endpoint connections associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of private endpoint connection associated with the specified storage account.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    private PagedFlux<PrivateEndpointConnectionInner> listAsync(\n+        String resourceGroupName, String providerName, Context context) {\n+        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, providerName, context));\n+    }\n+\n+    /**\n+     * List all the private endpoint connections associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of private endpoint connection associated with the specified storage account.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<PrivateEndpointConnectionInner> list(String resourceGroupName, String providerName) {\n+        return new PagedIterable<>(listAsync(resourceGroupName, providerName));\n+    }\n+\n+    /**\n+     * List all the private endpoint connections associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return list of private endpoint connection associated with the specified storage account.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<PrivateEndpointConnectionInner> list(\n+        String resourceGroupName, String providerName, Context context) {\n+        return new PagedIterable<>(listAsync(resourceGroupName, providerName, context));\n+    }\n+\n+    /**\n+     * Gets the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the specified private endpoint connection associated with the attestation provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<PrivateEndpointConnectionInner>> getWithResponseAsync(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (privateEndpointConnectionName == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter privateEndpointConnectionName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .get(\n+                            this.client.getEndpoint(),\n+                            resourceGroupName,\n+                            providerName,\n+                            this.client.getApiVersion(),\n+                            this.client.getSubscriptionId(),\n+                            privateEndpointConnectionName,\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Gets the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the specified private endpoint connection associated with the attestation provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<PrivateEndpointConnectionInner>> getWithResponseAsync(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (privateEndpointConnectionName == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter privateEndpointConnectionName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .get(\n+                this.client.getEndpoint(),\n+                resourceGroupName,\n+                providerName,\n+                this.client.getApiVersion(),\n+                this.client.getSubscriptionId(),\n+                privateEndpointConnectionName,\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Gets the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the specified private endpoint connection associated with the attestation provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PrivateEndpointConnectionInner> getAsync(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName) {\n+        return getWithResponseAsync(resourceGroupName, providerName, privateEndpointConnectionName)\n+            .flatMap(\n+                (Response<PrivateEndpointConnectionInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Gets the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the specified private endpoint connection associated with the attestation provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PrivateEndpointConnectionInner get(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName) {\n+        return getAsync(resourceGroupName, providerName, privateEndpointConnectionName).block();\n+    }\n+\n+    /**\n+     * Gets the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the specified private endpoint connection associated with the attestation provider.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<PrivateEndpointConnectionInner> getWithResponse(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName, Context context) {\n+        return getWithResponseAsync(resourceGroupName, providerName, privateEndpointConnectionName, context).block();\n+    }\n+\n+    /**\n+     * Update the state of specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param properties The private endpoint connection properties.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the Private Endpoint Connection resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<PrivateEndpointConnectionInner>> createWithResponseAsync(\n+        String resourceGroupName,\n+        String providerName,\n+        String privateEndpointConnectionName,\n+        PrivateEndpointConnectionInner properties) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (privateEndpointConnectionName == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter privateEndpointConnectionName is required and cannot be null.\"));\n+        }\n+        if (properties == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter properties is required and cannot be null.\"));\n+        } else {\n+            properties.validate();\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .create(\n+                            this.client.getEndpoint(),\n+                            resourceGroupName,\n+                            providerName,\n+                            this.client.getApiVersion(),\n+                            this.client.getSubscriptionId(),\n+                            privateEndpointConnectionName,\n+                            properties,\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Update the state of specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param properties The private endpoint connection properties.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the Private Endpoint Connection resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<PrivateEndpointConnectionInner>> createWithResponseAsync(\n+        String resourceGroupName,\n+        String providerName,\n+        String privateEndpointConnectionName,\n+        PrivateEndpointConnectionInner properties,\n+        Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (privateEndpointConnectionName == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter privateEndpointConnectionName is required and cannot be null.\"));\n+        }\n+        if (properties == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter properties is required and cannot be null.\"));\n+        } else {\n+            properties.validate();\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .create(\n+                this.client.getEndpoint(),\n+                resourceGroupName,\n+                providerName,\n+                this.client.getApiVersion(),\n+                this.client.getSubscriptionId(),\n+                privateEndpointConnectionName,\n+                properties,\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Update the state of specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param properties The private endpoint connection properties.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the Private Endpoint Connection resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<PrivateEndpointConnectionInner> createAsync(\n+        String resourceGroupName,\n+        String providerName,\n+        String privateEndpointConnectionName,\n+        PrivateEndpointConnectionInner properties) {\n+        return createWithResponseAsync(resourceGroupName, providerName, privateEndpointConnectionName, properties)\n+            .flatMap(\n+                (Response<PrivateEndpointConnectionInner> res) -> {\n+                    if (res.getValue() != null) {\n+                        return Mono.just(res.getValue());\n+                    } else {\n+                        return Mono.empty();\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Update the state of specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param properties The private endpoint connection properties.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the Private Endpoint Connection resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PrivateEndpointConnectionInner create(\n+        String resourceGroupName,\n+        String providerName,\n+        String privateEndpointConnectionName,\n+        PrivateEndpointConnectionInner properties) {\n+        return createAsync(resourceGroupName, providerName, privateEndpointConnectionName, properties).block();\n+    }\n+\n+    /**\n+     * Update the state of specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param properties The private endpoint connection properties.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the Private Endpoint Connection resource.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<PrivateEndpointConnectionInner> createWithResponse(\n+        String resourceGroupName,\n+        String providerName,\n+        String privateEndpointConnectionName,\n+        PrivateEndpointConnectionInner properties,\n+        Context context) {\n+        return createWithResponseAsync(\n+                resourceGroupName, providerName, privateEndpointConnectionName, properties, context)\n+            .block();\n+    }\n+\n+    /**\n+     * Deletes the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<Void>> deleteWithResponseAsync(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (privateEndpointConnectionName == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter privateEndpointConnectionName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        return FluxUtil\n+            .withContext(\n+                context ->\n+                    service\n+                        .delete(\n+                            this.client.getEndpoint(),\n+                            resourceGroupName,\n+                            providerName,\n+                            this.client.getApiVersion(),\n+                            this.client.getSubscriptionId(),\n+                            privateEndpointConnectionName,\n+                            accept,\n+                            context))\n+            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));\n+    }\n+\n+    /**\n+     * Deletes the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Response<Void>> deleteWithResponseAsync(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName, Context context) {\n+        if (this.client.getEndpoint() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n+        }\n+        if (resourceGroupName == null) {\n+            return Mono\n+                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n+        }\n+        if (providerName == null) {\n+            return Mono.error(new IllegalArgumentException(\"Parameter providerName is required and cannot be null.\"));\n+        }\n+        if (this.client.getSubscriptionId() == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n+        }\n+        if (privateEndpointConnectionName == null) {\n+            return Mono\n+                .error(\n+                    new IllegalArgumentException(\n+                        \"Parameter privateEndpointConnectionName is required and cannot be null.\"));\n+        }\n+        final String accept = \"application/json\";\n+        context = this.client.mergeContext(context);\n+        return service\n+            .delete(\n+                this.client.getEndpoint(),\n+                resourceGroupName,\n+                providerName,\n+                this.client.getApiVersion(),\n+                this.client.getSubscriptionId(),\n+                privateEndpointConnectionName,\n+                accept,\n+                context);\n+    }\n+\n+    /**\n+     * Deletes the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the completion.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    private Mono<Void> deleteAsync(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName) {\n+        return deleteWithResponseAsync(resourceGroupName, providerName, privateEndpointConnectionName)\n+            .flatMap((Response<Void> res) -> Mono.empty());\n+    }\n+\n+    /**\n+     * Deletes the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public void delete(String resourceGroupName, String providerName, String privateEndpointConnectionName) {\n+        deleteAsync(resourceGroupName, providerName, privateEndpointConnectionName).block();\n+    }\n+\n+    /**\n+     * Deletes the specified private endpoint connection associated with the attestation provider.\n+     *\n+     * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+     * @param providerName The name of the attestation provider.\n+     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the Azure\n+     *     resource.\n+     * @param context The context to associate with this operation.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation.\n+     * @throws ManagementException thrown if the request is rejected by server.\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n+     * @return the response.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Response<Void> deleteWithResponse(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName, Context context) {\n+        return deleteWithResponseAsync(resourceGroupName, providerName, privateEndpointConnectionName, context).block();\n+    }\n+}"
  },
  {
    "sha": "4bb70677e1ce58602a73a9a3c53367edeeaef187",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionsImpl.java",
    "status": "added",
    "additions": 227,
    "deletions": 0,
    "changes": 227,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionsImpl.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionsImpl.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/PrivateEndpointConnectionsImpl.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,227 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.resourcemanager.attestation.AttestationManager;\n+import com.azure.resourcemanager.attestation.fluent.PrivateEndpointConnectionsClient;\n+import com.azure.resourcemanager.attestation.fluent.models.PrivateEndpointConnectionInner;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpointConnection;\n+import com.azure.resourcemanager.attestation.models.PrivateEndpointConnections;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public final class PrivateEndpointConnectionsImpl implements PrivateEndpointConnections {\n+    @JsonIgnore private final ClientLogger logger = new ClientLogger(PrivateEndpointConnectionsImpl.class);\n+\n+    private final PrivateEndpointConnectionsClient innerClient;\n+\n+    private final AttestationManager serviceManager;\n+\n+    public PrivateEndpointConnectionsImpl(\n+        PrivateEndpointConnectionsClient innerClient, AttestationManager serviceManager) {\n+        this.innerClient = innerClient;\n+        this.serviceManager = serviceManager;\n+    }\n+\n+    public PagedIterable<PrivateEndpointConnection> list(String resourceGroupName, String providerName) {\n+        PagedIterable<PrivateEndpointConnectionInner> inner =\n+            this.serviceClient().list(resourceGroupName, providerName);\n+        return Utils.mapPage(inner, inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()));\n+    }\n+\n+    public PagedIterable<PrivateEndpointConnection> list(\n+        String resourceGroupName, String providerName, Context context) {\n+        PagedIterable<PrivateEndpointConnectionInner> inner =\n+            this.serviceClient().list(resourceGroupName, providerName, context);\n+        return Utils.mapPage(inner, inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()));\n+    }\n+\n+    public PrivateEndpointConnection get(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName) {\n+        PrivateEndpointConnectionInner inner =\n+            this.serviceClient().get(resourceGroupName, providerName, privateEndpointConnectionName);\n+        if (inner != null) {\n+            return new PrivateEndpointConnectionImpl(inner, this.manager());\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public Response<PrivateEndpointConnection> getWithResponse(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName, Context context) {\n+        Response<PrivateEndpointConnectionInner> inner =\n+            this\n+                .serviceClient()\n+                .getWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, context);\n+        if (inner != null) {\n+            return new SimpleResponse<>(\n+                inner.getRequest(),\n+                inner.getStatusCode(),\n+                inner.getHeaders(),\n+                new PrivateEndpointConnectionImpl(inner.getValue(), this.manager()));\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public void delete(String resourceGroupName, String providerName, String privateEndpointConnectionName) {\n+        this.serviceClient().delete(resourceGroupName, providerName, privateEndpointConnectionName);\n+    }\n+\n+    public Response<Void> deleteWithResponse(\n+        String resourceGroupName, String providerName, String privateEndpointConnectionName, Context context) {\n+        return this\n+            .serviceClient()\n+            .deleteWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, context);\n+    }\n+\n+    public PrivateEndpointConnection getById(String id) {\n+        String resourceGroupName = Utils.getValueFromIdByName(id, \"resourceGroups\");\n+        if (resourceGroupName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\"The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.\", id)));\n+        }\n+        String providerName = Utils.getValueFromIdByName(id, \"attestationProviders\");\n+        if (providerName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.\",\n+                                id)));\n+        }\n+        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, \"privateEndpointConnections\");\n+        if (privateEndpointConnectionName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.\",\n+                                id)));\n+        }\n+        return this\n+            .getWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, Context.NONE)\n+            .getValue();\n+    }\n+\n+    public Response<PrivateEndpointConnection> getByIdWithResponse(String id, Context context) {\n+        String resourceGroupName = Utils.getValueFromIdByName(id, \"resourceGroups\");\n+        if (resourceGroupName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\"The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.\", id)));\n+        }\n+        String providerName = Utils.getValueFromIdByName(id, \"attestationProviders\");\n+        if (providerName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.\",\n+                                id)));\n+        }\n+        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, \"privateEndpointConnections\");\n+        if (privateEndpointConnectionName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.\",\n+                                id)));\n+        }\n+        return this.getWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, context);\n+    }\n+\n+    public void deleteById(String id) {\n+        String resourceGroupName = Utils.getValueFromIdByName(id, \"resourceGroups\");\n+        if (resourceGroupName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\"The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.\", id)));\n+        }\n+        String providerName = Utils.getValueFromIdByName(id, \"attestationProviders\");\n+        if (providerName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.\",\n+                                id)));\n+        }\n+        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, \"privateEndpointConnections\");\n+        if (privateEndpointConnectionName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.\",\n+                                id)));\n+        }\n+        this\n+            .deleteWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, Context.NONE)\n+            .getValue();\n+    }\n+\n+    public Response<Void> deleteByIdWithResponse(String id, Context context) {\n+        String resourceGroupName = Utils.getValueFromIdByName(id, \"resourceGroups\");\n+        if (resourceGroupName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\"The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.\", id)));\n+        }\n+        String providerName = Utils.getValueFromIdByName(id, \"attestationProviders\");\n+        if (providerName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'attestationProviders'.\",\n+                                id)));\n+        }\n+        String privateEndpointConnectionName = Utils.getValueFromIdByName(id, \"privateEndpointConnections\");\n+        if (privateEndpointConnectionName == null) {\n+            throw logger\n+                .logExceptionAsError(\n+                    new IllegalArgumentException(\n+                        String\n+                            .format(\n+                                \"The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnections'.\",\n+                                id)));\n+        }\n+        return this.deleteWithResponse(resourceGroupName, providerName, privateEndpointConnectionName, context);\n+    }\n+\n+    private PrivateEndpointConnectionsClient serviceClient() {\n+        return this.innerClient;\n+    }\n+\n+    private AttestationManager manager() {\n+        return this.serviceManager;\n+    }\n+\n+    public PrivateEndpointConnectionImpl define(String name) {\n+        return new PrivateEndpointConnectionImpl(name, this.manager());\n+    }\n+}"
  },
  {
    "sha": "cb776f862876451822aa0c270846086f4b5f21ab",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/Utils.java",
    "status": "added",
    "additions": 196,
    "deletions": 0,
    "changes": 196,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/Utils.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/Utils.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/Utils.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,196 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.implementation;\n+\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import reactor.core.publisher.Mono;\n+\n+final class Utils {\n+    static String getValueFromIdByName(String id, String name) {\n+        if (id == null) {\n+            return null;\n+        }\n+        Iterator<String> itr = Arrays.stream(id.split(\"/\")).iterator();\n+        while (itr.hasNext()) {\n+            String part = itr.next();\n+            if (part != null && !part.trim().isEmpty()) {\n+                if (part.equalsIgnoreCase(name)) {\n+                    if (itr.hasNext()) {\n+                        return itr.next();\n+                    } else {\n+                        return null;\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    static String getValueFromIdByParameterName(String id, String pathTemplate, String parameterName) {\n+        if (id == null || pathTemplate == null) {\n+            return null;\n+        }\n+        String parameterNameParentheses = \"{\" + parameterName + \"}\";\n+        List<String> idSegmentsReverted = Arrays.asList(id.split(\"/\"));\n+        List<String> pathSegments = Arrays.asList(pathTemplate.split(\"/\"));\n+        Collections.reverse(idSegmentsReverted);\n+        Iterator<String> idItrReverted = idSegmentsReverted.iterator();\n+        int pathIndex = pathSegments.size();\n+        while (idItrReverted.hasNext() && pathIndex > 0) {\n+            String idSegment = idItrReverted.next();\n+            String pathSegment = pathSegments.get(--pathIndex);\n+            if (!CoreUtils.isNullOrEmpty(idSegment) && !CoreUtils.isNullOrEmpty(pathSegment)) {\n+                if (pathSegment.equalsIgnoreCase(parameterNameParentheses)) {\n+                    if (pathIndex == 0 || (pathIndex == 1 && pathSegments.get(0).isEmpty())) {\n+                        List<String> segments = new ArrayList<>();\n+                        segments.add(idSegment);\n+                        idItrReverted.forEachRemaining(segments::add);\n+                        Collections.reverse(segments);\n+                        if (segments.size() > 0 && segments.get(0).isEmpty()) {\n+                            segments.remove(0);\n+                        }\n+                        return String.join(\"/\", segments);\n+                    } else {\n+                        return idSegment;\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    static <T, S> PagedIterable<S> mapPage(PagedIterable<T> pageIterable, Function<T, S> mapper) {\n+        return new PagedIterableImpl<T, S>(pageIterable, mapper);\n+    }\n+\n+    private static final class PagedIterableImpl<T, S> extends PagedIterable<S> {\n+\n+        private final PagedIterable<T> pageIterable;\n+        private final Function<T, S> mapper;\n+        private final Function<PagedResponse<T>, PagedResponse<S>> pageMapper;\n+\n+        private PagedIterableImpl(PagedIterable<T> pageIterable, Function<T, S> mapper) {\n+            super(new PagedFlux<S>(Mono::empty));\n+            this.pageIterable = pageIterable;\n+            this.mapper = mapper;\n+            this.pageMapper =\n+                page ->\n+                    new PagedResponseBase<Void, S>(\n+                        page.getRequest(),\n+                        page.getStatusCode(),\n+                        page.getHeaders(),\n+                        page.getElements().stream().map(mapper).collect(Collectors.toList()),\n+                        page.getContinuationToken(),\n+                        null);\n+        }\n+\n+        @Override\n+        public Stream<S> stream() {\n+            return pageIterable.stream().map(mapper);\n+        }\n+\n+        @Override\n+        public Stream<PagedResponse<S>> streamByPage() {\n+            return pageIterable.streamByPage().map(pageMapper);\n+        }\n+\n+        @Override\n+        public Stream<PagedResponse<S>> streamByPage(String continuationToken) {\n+            return pageIterable.streamByPage(continuationToken).map(pageMapper);\n+        }\n+\n+        @Override\n+        public Stream<PagedResponse<S>> streamByPage(int preferredPageSize) {\n+            return pageIterable.streamByPage(preferredPageSize).map(pageMapper);\n+        }\n+\n+        @Override\n+        public Stream<PagedResponse<S>> streamByPage(String continuationToken, int preferredPageSize) {\n+            return pageIterable.streamByPage(continuationToken, preferredPageSize).map(pageMapper);\n+        }\n+\n+        @Override\n+        public Iterator<S> iterator() {\n+            return new IteratorImpl<T, S>(pageIterable.iterator(), mapper);\n+        }\n+\n+        @Override\n+        public Iterable<PagedResponse<S>> iterableByPage() {\n+            return new IterableImpl<PagedResponse<T>, PagedResponse<S>>(pageIterable.iterableByPage(), pageMapper);\n+        }\n+\n+        @Override\n+        public Iterable<PagedResponse<S>> iterableByPage(String continuationToken) {\n+            return new IterableImpl<PagedResponse<T>, PagedResponse<S>>(\n+                pageIterable.iterableByPage(continuationToken), pageMapper);\n+        }\n+\n+        @Override\n+        public Iterable<PagedResponse<S>> iterableByPage(int preferredPageSize) {\n+            return new IterableImpl<PagedResponse<T>, PagedResponse<S>>(\n+                pageIterable.iterableByPage(preferredPageSize), pageMapper);\n+        }\n+\n+        @Override\n+        public Iterable<PagedResponse<S>> iterableByPage(String continuationToken, int preferredPageSize) {\n+            return new IterableImpl<PagedResponse<T>, PagedResponse<S>>(\n+                pageIterable.iterableByPage(continuationToken, preferredPageSize), pageMapper);\n+        }\n+    }\n+\n+    private static final class IteratorImpl<T, S> implements Iterator<S> {\n+\n+        private final Iterator<T> iterator;\n+        private final Function<T, S> mapper;\n+\n+        private IteratorImpl(Iterator<T> iterator, Function<T, S> mapper) {\n+            this.iterator = iterator;\n+            this.mapper = mapper;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            return iterator.hasNext();\n+        }\n+\n+        @Override\n+        public S next() {\n+            return mapper.apply(iterator.next());\n+        }\n+\n+        @Override\n+        public void remove() {\n+            iterator.remove();\n+        }\n+    }\n+\n+    private static final class IterableImpl<T, S> implements Iterable<S> {\n+\n+        private final Iterable<T> iterable;\n+        private final Function<T, S> mapper;\n+\n+        private IterableImpl(Iterable<T> iterable, Function<T, S> mapper) {\n+            this.iterable = iterable;\n+            this.mapper = mapper;\n+        }\n+\n+        @Override\n+        public Iterator<S> iterator() {\n+            return new IteratorImpl<T, S>(iterable.iterator(), mapper);\n+        }\n+    }\n+}"
  },
  {
    "sha": "38098d10c19ae6d14be19109d872d05c5a63931e",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/package-info.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/package-info.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/package-info.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/implementation/package-info.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,9 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/**\n+ * Package containing the implementations for AttestationManagementClient. Various APIs for managing resources in\n+ * attestation service. This primarily encompasses per-provider management.\n+ */\n+package com.azure.resourcemanager.attestation.implementation;"
  },
  {
    "sha": "ea78c43c65cda009752f1539044715de2a9a26e3",
    "filename": "sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/models/AttestationProvider.java",
    "status": "added",
    "additions": 240,
    "deletions": 0,
    "changes": 240,
    "blob_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/blob/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/models/AttestationProvider.java",
    "raw_url": "https://github.com/AzureSDKAutomation/azure-sdk-for-java/raw/774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/models/AttestationProvider.java",
    "contents_url": "https://api.github.com/repos/AzureSDKAutomation/azure-sdk-for-java/contents/sdk/attestation/azure-resourcemanager-attestation/src/main/java/com/azure/resourcemanager/attestation/models/AttestationProvider.java?ref=774e7a7ac5faf9ca994d0a6f7f36dc1a7c65ef8b",
    "patch": "@@ -0,0 +1,240 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.resourcemanager.attestation.models;\n+\n+import com.azure.core.management.Region;\n+import com.azure.core.util.Context;\n+import com.azure.resourcemanager.attestation.fluent.models.AttestationProviderInner;\n+import java.util.List;\n+import java.util.Map;\n+\n+/** An immutable client-side representation of AttestationProvider. */\n+public interface AttestationProvider {\n+    /**\n+     * Gets the id property: Fully qualified resource Id for the resource.\n+     *\n+     * @return the id value.\n+     */\n+    String id();\n+\n+    /**\n+     * Gets the name property: The name of the resource.\n+     *\n+     * @return the name value.\n+     */\n+    String name();\n+\n+    /**\n+     * Gets the type property: The type of the resource.\n+     *\n+     * @return the type value.\n+     */\n+    String type();\n+\n+    /**\n+     * Gets the location property: The geo-location where the resource lives.\n+     *\n+     * @return the location value.\n+     */\n+    String location();\n+\n+    /**\n+     * Gets the tags property: Resource tags.\n+     *\n+     * @return the tags value.\n+     */\n+    Map<String, String> tags();\n+\n+    /**\n+     * Gets the systemData property: The system metadata relating to this resource.\n+     *\n+     * @return the systemData value.\n+     */\n+    SystemData systemData();\n+\n+    /**\n+     * Gets the trustModel property: Trust model for the attestation provider.\n+     *\n+     * @return the trustModel value.\n+     */\n+    String trustModel();\n+\n+    /**\n+     * Gets the status property: Status of attestation service.\n+     *\n+     * @return the status value.\n+     */\n+    AttestationServiceStatus status();\n+\n+    /**\n+     * Gets the attestUri property: Gets the uri of attestation service.\n+     *\n+     * @return the attestUri value.\n+     */\n+    String attestUri();\n+\n+    /**\n+     * Gets the privateEndpointConnections property: List of private endpoint connections associated with the\n+     * attestation provider.\n+     *\n+     * @return the privateEndpointConnections value.\n+     */\n+    List<PrivateEndpointConnection> privateEndpointConnections();\n+\n+    /**\n+     * Gets the region of the resource.\n+     *\n+     * @return the region of the resource.\n+     */\n+    Region region();\n+\n+    /**\n+     * Gets the name of the resource region.\n+     *\n+     * @return the name of the resource region.\n+     */\n+    String regionName();\n+\n+    /**\n+     * Gets the inner com.azure.resourcemanager.attestation.fluent.models.AttestationProviderInner object.\n+     *\n+     * @return the inner object.\n+     */\n+    AttestationProviderInner innerModel();\n+\n+    /** The entirety of the AttestationProvider definition. */\n+    interface Definition\n+        extends DefinitionStages.Blank,\n+            DefinitionStages.WithLocation,\n+            DefinitionStages.WithResourceGroup,\n+            DefinitionStages.WithProperties,\n+            DefinitionStages.WithCreate {\n+    }\n+    /** The AttestationProvider definition stages. */\n+    interface DefinitionStages {\n+        /** The first stage of the AttestationProvider definition. */\n+        interface Blank extends WithLocation {\n+        }\n+        /** The stage of the AttestationProvider definition allowing to specify location. */\n+        interface WithLocation {\n+            /**\n+             * Specifies the region for the resource.\n+             *\n+             * @param location The supported Azure location where the attestation provider should be created.\n+             * @return the next definition stage.\n+             */\n+            WithResourceGroup withRegion(Region location);\n+\n+            /**\n+             * Specifies the region for the resource.\n+             *\n+             * @param location The supported Azure location where the attestation provider should be created.\n+             * @return the next definition stage.\n+             */\n+            WithResourceGroup withRegion(String location);\n+        }\n+        /** The stage of the AttestationProvider definition allowing to specify parent resource. */\n+        interface WithResourceGroup {\n+            /**\n+             * Specifies resourceGroupName.\n+             *\n+             * @param resourceGroupName The name of the resource group. The name is case insensitive.\n+             * @return the next definition stage.\n+             */\n+            WithProperties withExistingResourceGroup(String resourceGroupName);\n+        }\n+        /** The stage of the AttestationProvider definition allowing to specify properties. */\n+        interface WithProperties {\n+            /**\n+             * Specifies the properties property: Properties of the attestation provider.\n+             *\n+             * @param properties Properties of the attestation provider.\n+             * @return the next definition stage.\n+             */\n+            WithCreate withProperties(AttestationServiceCreationSpecificParams properties);\n+        }\n+        /**\n+         * The stage of the AttestationProvider definition which contains all the minimum required properties for the\n+         * resource to be created, but also allows for any other optional properties to be specified.\n+         */\n+        interface WithCreate extends DefinitionStages.WithTags {\n+            /**\n+             * Executes the create request.\n+             *\n+             * @return the created resource.\n+             */\n+            AttestationProvider create();\n+\n+            /**\n+             * Executes the create request.\n+             *\n+             * @param context The context to associate with this operation.\n+             * @return the created resource.\n+             */\n+            AttestationProvider create(Context context);\n+        }\n+        /** The stage of the AttestationProvider definition allowing to specify tags. */\n+        interface WithTags {\n+            /**\n+             * Specifies the tags property: The tags that will be assigned to the attestation provider..\n+             *\n+             * @param tags The tags that will be assigned to the attestation provider.\n+             * @return the next definition stage.\n+             */\n+            WithCreate withTags(Map<String, String> tags);\n+        }\n+    }\n+    /**\n+     * Begins update for the AttestationProvider resource.\n+     *\n+     * @return the stage of resource update.\n+     */\n+    AttestationProvider.Update update();\n+\n+    /** The template for AttestationProvider update. */\n+    interface Update extends UpdateStages.WithTags {\n+        /**\n+         * Executes the update request.\n+         *\n+         * @return the updated resource.\n+         */\n+        AttestationProvider apply();\n+\n+        /**\n+         * Executes the update request.\n+         *\n+         * @param context The context to associate with this operation.\n+         * @return the updated resource.\n+         */\n+        AttestationProvider apply(Context context);\n+    }\n+    /** The AttestationProvider update stages. */\n+    interface UpdateStages {\n+        /** The stage of the AttestationProvider update allowing to specify tags. */\n+        interface WithTags {\n+            /**\n+             * Specifies the tags property: The tags that will be assigned to the attestation provider..\n+             *\n+             * @param tags The tags that will be assigned to the attestation provider.\n+             * @return the next definition stage.\n+             */\n+            Update withTags(Map<String, String> tags);\n+        }\n+    }\n+    /**\n+     * Refreshes the resource to sync with Azure.\n+     *\n+     * @return the refreshed resource.\n+     */\n+    AttestationProvider refresh();\n+\n+    /**\n+     * Refreshes the resource to sync with Azure.\n+     *\n+     * @param context The context to associate with this operation.\n+     * @return the refreshed resource.\n+     */\n+    AttestationProvider refresh(Context context);\n+}"
  }
]
