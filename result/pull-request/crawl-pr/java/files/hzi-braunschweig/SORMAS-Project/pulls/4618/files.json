[
  {
    "sha": "e827becc754eca3711051e454c014b793032d205",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/ExtendedPostgreSQL94Dialect.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/ExtendedPostgreSQL94Dialect.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/ExtendedPostgreSQL94Dialect.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/ExtendedPostgreSQL94Dialect.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -14,6 +14,8 @@\n \tpublic final static String SIMILARITY_OPERATOR = \"similarity_operator\";\n \tpublic final static String ARRAY_TO_STRING = \"array_to_string\";\n \tpublic final static String ARRAY_AGG = \"array_agg\";\n+\tpublic final static String UNACCENT = \"unaccent\";\n+\tpublic final static String ILIKE = \"ilike\";\n \n \tpublic ExtendedPostgreSQL94Dialect() {\n \t\tsuper();\n@@ -23,5 +25,7 @@ public ExtendedPostgreSQL94Dialect() {\n \t\tregisterFunction(ARRAY_AGG, new StandardSQLFunction(ARRAY_AGG));\n \t\tregisterHibernateType(Types.OTHER, JsonStringType.class.getName());\n \t\tregisterFunction(SIMILARITY_OPERATOR, new SQLFunctionTemplate(StandardBasicTypes.BOOLEAN, \"?1 % ?2\"));\n+\t\tregisterFunction(UNACCENT, new SQLFunctionTemplate(StandardBasicTypes.STRING, \"unaccent(?1)\"));\n+\t\tregisterFunction(ILIKE, new SQLFunctionTemplate(StandardBasicTypes.BOOLEAN, \"?1 ILIKE ?2\"));\n \t}\n }"
  },
  {
    "sha": "46af1c6b9ef05f8b78da43770397da63bade25e6",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/campaign/CampaignService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/campaign/CampaignService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/campaign/CampaignService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/campaign/CampaignService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -53,13 +53,15 @@ public Predicate buildCriteriaFilter(CampaignCriteria campaignCriteria, Criteria\n \t\t}\n \t\tif (campaignCriteria.getFreeText() != null) {\n \t\t\tString[] textFilters = campaignCriteria.getFreeText().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters =\n-\t\t\t\t\t\tcb.or(cb.like(cb.lower(from.get(Campaign.NAME)), textFilter), cb.like(cb.lower(from.get(Campaign.UUID)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(Campaign.NAME), textFilter),\n+\t\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Campaign.UUID), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (campaignCriteria.getRelevanceStatus() != null) {"
  },
  {
    "sha": "a3ccb5433c160b42131d9f634f1dc25cc0f0e862",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/caze/CaseService.java",
    "status": "modified",
    "additions": 38,
    "deletions": 45,
    "changes": 83,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/caze/CaseService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/caze/CaseService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/caze/CaseService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -668,25 +668,27 @@ public Predicate createCaseRelevanceFilter(CriteriaBuilder cb, Root<Case> from,\n \t\t}\n \t\tif (caseCriteria.getNameUuidEpidNumberLike() != null) {\n \t\t\tString[] textFilters = caseCriteria.getNameUuidEpidNumberLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = formatForLike(textFilters[i]);\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(person.get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(person.get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.EPID_NUMBER)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(facility.get(Facility.NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.EXTERNAL_ID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.EXTERNAL_TOKEN)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.HEALTH_FACILITY_DETAILS)), textFilter),\n-\t\t\t\t\t\tphoneNumberPredicate(cb, (Expression<String>) caseQueryContext.getSubqueryExpression(ContactQueryContext.PERSON_PHONE_SUBQUERY), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(location.get(Location.CITY)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(location.get(Location.POSTAL_CODE)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, person.get(Person.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, person.get(Person.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Case.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Case.EPID_NUMBER), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, facility.get(Facility.NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Case.EXTERNAL_ID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Case.EXTERNAL_TOKEN), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(Case.HEALTH_FACILITY_DETAILS), textFilter),\n+\t\t\t\t\tphoneNumberPredicate(cb, (Expression<String>) caseQueryContext.getSubqueryExpression(ContactQueryContext.PERSON_PHONE_SUBQUERY), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, location.get(Location.CITY), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, location.get(Location.POSTAL_CODE), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n+\n \t\tboolean hasEventLikeCriteria = caseCriteria.getEventLike() != null && !caseCriteria.getEventLike().trim().isEmpty();\n \t\tboolean hasOnlyCasesWithEventsCriteria = Boolean.TRUE.equals(caseCriteria.getOnlyCasesWithEvents());\n \t\tif (hasEventLikeCriteria || hasOnlyCasesWithEventsCriteria) {\n@@ -702,15 +704,12 @@ public Predicate createCaseRelevanceFilter(CriteriaBuilder cb, Root<Case> from,\n \n \t\t\tif (hasEventLikeCriteria) {\n \t\t\t\tString[] textFilters = caseCriteria.getEventLike().trim().split(\"\\\\s+\");\n-\t\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\t\tString textFilter = formatForLike(textFilters[i]);\n-\t\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\t\tcb.like(cb.lower(event.get(Event.EVENT_DESC)), textFilter),\n-\t\t\t\t\t\t\tcb.like(cb.lower(event.get(Event.EVENT_TITLE)), textFilter),\n-\t\t\t\t\t\t\tcb.like(cb.lower(event.get(Event.UUID)), textFilter));\n-\t\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters, cb.isFalse(eventParticipant.get(EventParticipant.DELETED)));\n-\t\t\t\t\t}\n+\t\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, event.get(Event.EVENT_DESC), textFilter),\n+\t\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, event.get(Event.EVENT_TITLE), textFilter),\n+\t\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, event.get(Event.UUID), textFilter));\n+\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters, cb.isFalse(eventParticipant.get(EventParticipant.DELETED)));\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (hasOnlyCasesWithEventsCriteria) {\n@@ -719,30 +718,24 @@ public Predicate createCaseRelevanceFilter(CriteriaBuilder cb, Root<Case> from,\n \t\t}\n \t\tif (caseCriteria.getReportingUserLike() != null) {\n \t\t\tString[] textFilters = caseCriteria.getReportingUserLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = formatForLike(textFilters[i]);\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(reportingUser.get(User.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(reportingUser.get(User.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(reportingUser.get(User.USER_NAME)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n-\t\t\t\t}\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, reportingUser.get(User.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, reportingUser.get(User.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, reportingUser.get(User.USER_NAME), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (caseCriteria.getSourceCaseInfoLike() != null) {\n \t\t\tString[] textFilters = caseCriteria.getSourceCaseInfoLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = formatForLike(textFilters[i]);\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(person.get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(person.get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.EPID_NUMBER)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.EXTERNAL_ID)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n-\t\t\t\t}\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, reportingUser.get(User.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, reportingUser.get(User.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Case.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Case.EPID_NUMBER), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Case.EXTERNAL_ID), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (caseCriteria.getBirthdateYYYY() != null) {"
  },
  {
    "sha": "cbbb2666149bf91b70cf900b49924da17f08ef9f",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/common/CriteriaBuilderHelper.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/common/CriteriaBuilderHelper.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/common/CriteriaBuilderHelper.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/common/CriteriaBuilderHelper.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -1,5 +1,9 @@\n package de.symeda.sormas.backend.common;\n \n+import de.symeda.sormas.backend.ExtendedPostgreSQL94Dialect;\n+import de.symeda.sormas.backend.event.Event;\n+import de.symeda.sormas.backend.event.EventParticipant;\n+\n import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -98,4 +102,22 @@ public static Predicate andInValues(Collection<String> values, Predicate filter,\n \t\t}\n \t\treturn CriteriaBuilderHelper.and(cb, filter, or);\n \t}\n+\n+\tpublic static Predicate unaccentedIlike(CriteriaBuilder cb, Expression<String> valueExpression, String pattern) {\n+\t\treturn unaccentedIlike(cb, valueExpression, cb.literal(\"%\" + pattern + \"%\"));\n+\t}\n+\n+\tpublic static Predicate unaccentedIlike(CriteriaBuilder cb, Expression<String> valueExpression, Expression<String> patternExpression) {\n+\t\tExpression<String> unaccentedValueExpression = cb.function(ExtendedPostgreSQL94Dialect.UNACCENT, String.class, valueExpression);\n+\t\tExpression<String> unaccentedPatternExpression = cb.function(ExtendedPostgreSQL94Dialect.UNACCENT, String.class, patternExpression);\n+\t\treturn ilike(cb, unaccentedValueExpression, unaccentedPatternExpression);\n+\t}\n+\n+\tpublic static Predicate ilike(CriteriaBuilder cb, Expression<String> valueExpression, String pattern) {\n+\t\treturn ilike(cb, valueExpression, cb.literal(\"%\" + pattern + \"%\"));\n+\t}\n+\n+\tpublic static Predicate ilike(CriteriaBuilder cb, Expression<String> valueExpression, Expression<String> patternExpression) {\n+\t\treturn cb.isTrue(cb.function(ExtendedPostgreSQL94Dialect.ILIKE, Boolean.class, valueExpression, patternExpression));\n+\t}\n }"
  },
  {
    "sha": "cf584f57cd9e3e453fc314d78c84a8572709382b",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/contact/ContactService.java",
    "status": "modified",
    "additions": 26,
    "deletions": 24,
    "changes": 50,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/contact/ContactService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/contact/ContactService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/contact/ContactService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -1132,23 +1132,24 @@ public Predicate buildCriteriaFilter(ContactCriteria contactCriteria, ContactQue\n \t\t\tJoin<Person, Location> location = joins.getAddress();\n \t\t\tJoin<Case, Person> casePerson = caze.join(Case.PERSON, JoinType.LEFT);\n \t\t\tString[] textFilters = contactCriteria.getNameUuidCaseLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = formatForLike(textFilters[i].toLowerCase());\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Contact.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(person.get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(person.get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(caze.get(Case.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.EXTERNAL_ID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Case.EXTERNAL_TOKEN)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(casePerson.get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(casePerson.get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tphoneNumberPredicate(cb, (Expression<String>) contactQueryContext.getSubqueryExpression(ContactQueryContext.PERSON_PHONE_SUBQUERY), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(location.get(Location.CITY)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(location.get(Location.POSTAL_CODE)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Contact.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, person.get(Person.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, person.get(Person.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, caze.get(Case.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, caze.get(Case.EXTERNAL_ID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, caze.get(Case.EXTERNAL_TOKEN), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, casePerson.get(Person.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, casePerson.get(Person.LAST_NAME), textFilter),\n+\t\t\t\t\tphoneNumberPredicate(cb, (Expression<String>) contactQueryContext.getSubqueryExpression(ContactQueryContext.PERSON_PHONE_SUBQUERY), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, location.get(Location.CITY), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, location.get(Location.POSTAL_CODE), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (Boolean.TRUE.equals(contactCriteria.getOnlyHighPriorityContacts())) {\n@@ -1191,15 +1192,16 @@ public Predicate buildCriteriaFilter(ContactCriteria contactCriteria, ContactQue\n \n \t\t\tif (hasEventLikeCriteria) {\n \t\t\t\tString[] textFilters = contactCriteria.getEventLike().trim().split(\"\\\\s+\");\n-\t\t\t\tfor (String s : textFilters) {\n-\t\t\t\t\tString textFilter = formatForLike(s);\n-\t\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\t\tcb.like(cb.lower(event.get(Event.EVENT_DESC)), textFilter),\n-\t\t\t\t\t\t\tcb.like(cb.lower(event.get(Event.EVENT_TITLE)), textFilter),\n-\t\t\t\t\t\t\tcb.like(cb.lower(event.get(Event.UUID)), textFilter));\n-\t\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\t\tcontinue;\n \t\t\t\t\t}\n+\n+\t\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, event.get(Event.EVENT_DESC), textFilter),\n+\t\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, event.get(Event.EVENT_TITLE), textFilter),\n+\t\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, event.get(Event.UUID), textFilter));\n+\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t\t}\n \t\t\t}\n \t\t\tif (hasOnlyContactsSharingEventWithSourceCase) {"
  },
  {
    "sha": "833723f8b9680057bbf695e6c80ef317eb044048",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/event/EventParticipantService.java",
    "status": "modified",
    "additions": 9,
    "deletions": 11,
    "changes": 20,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/event/EventParticipantService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/event/EventParticipantService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/event/EventParticipantService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -180,18 +180,16 @@ public Predicate buildCriteriaFilter(EventParticipantCriteria criteria, EventPar\n \n \t\tif (criteria.getFreeText() != null) {\n \t\t\tString[] textFilters = criteria.getFreeText().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = formatForLike(textFilters[i]);\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(person.get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(person.get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tphoneNumberPredicate(\n-\t\t\t\t\t\t\tcb,\n-\t\t\t\t\t\t\t(Expression<String>) personQueryContext.getSubqueryExpression(ContactQueryContext.PERSON_PHONE_SUBQUERY),\n-\t\t\t\t\t\t\ttextFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, person.get(Person.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, person.get(Person.LAST_NAME), textFilter),\n+\t\t\t\t\tphoneNumberPredicate(cb, (Expression<String>) personQueryContext.getSubqueryExpression(ContactQueryContext.PERSON_PHONE_SUBQUERY), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n "
  },
  {
    "sha": "33131ea148690090bb6828dee47ac42be7ab3f59",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/event/EventService.java",
    "status": "modified",
    "additions": 26,
    "deletions": 22,
    "changes": 48,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/event/EventService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/event/EventService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/event/EventService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -619,19 +619,21 @@ public Predicate buildCriteriaFilter(EventCriteria eventCriteria, EventQueryCont\n \t\t}\n \t\tif (StringUtils.isNotEmpty(eventCriteria.getFreeText())) {\n \t\t\tString[] textFilters = eventCriteria.getFreeText().split(\"\\\\s+\");\n-\t\t\tfor (String s : textFilters) {\n-\t\t\t\tString textFilter = \"%\" + s.toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Event.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Event.EVENT_TITLE)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Event.EVENT_DESC)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Event.SRC_FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Event.SRC_LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Event.SRC_EMAIL)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(Event.SRC_TEL_NO)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Event.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(Event.EVENT_TITLE), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(Event.EVENT_DESC), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(Event.SRC_FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(Event.SRC_LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Event.SRC_EMAIL), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Event.SRC_TEL_NO), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (StringUtils.isNotEmpty(eventCriteria.getFreeTextEventParticipants())) {\n@@ -641,17 +643,19 @@ public Predicate buildCriteriaFilter(EventCriteria eventCriteria, EventQueryCont\n \t\t\tfinal PersonQueryContext personQueryContext = new PersonQueryContext(cb, eventQueryContext.getQuery(), personJoin);\n \n \t\t\tString[] textFilters = eventCriteria.getFreeTextEventParticipants().split(\"\\\\s+\");\n-\t\t\tfor (String s : textFilters) {\n-\t\t\t\tString textFilter = \"%\" + s.toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(eventParticipantJoin.get(EventParticipant.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(personJoin.get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(personJoin.get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower((Expression<String>) personQueryContext.getSubqueryExpression(PersonQueryContext.PERSON_PHONE_SUBQUERY)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower((Expression<String>) personQueryContext.getSubqueryExpression(PersonQueryContext.PERSON_EMAIL_SUBQUERY)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, eventParticipantJoin.get(EventParticipant.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, personJoin.get(Person.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, personJoin.get(Person.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, (Expression<String>) personQueryContext.getSubqueryExpression(PersonQueryContext.PERSON_PHONE_SUBQUERY), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, (Expression<String>) personQueryContext.getSubqueryExpression(PersonQueryContext.PERSON_EMAIL_SUBQUERY), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, cb.isFalse(eventParticipantJoin.get(EventParticipant.DELETED)));\n \t\t}"
  },
  {
    "sha": "82f2b9847539a8111164f71e9a1c54db3f757674",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/facility/FacilityService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/facility/FacilityService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/facility/FacilityService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/facility/FacilityService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -236,13 +236,15 @@ public Predicate buildCriteriaFilter(FacilityCriteria facilityCriteria, Criteria\n \t\t}\n \t\tif (facilityCriteria.getNameCityLike() != null) {\n \t\t\tString[] textFilters = facilityCriteria.getNameCityLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters =\n-\t\t\t\t\t\tcb.or(cb.like(cb.lower(from.get(Facility.NAME)), textFilter), cb.like(cb.lower(from.get(Facility.CITY)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(Facility.NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(Facility.CITY), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (facilityCriteria.getType() != null) {"
  },
  {
    "sha": "0a19e8af86683ec0804f87b405a9fe213948a2af",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/infrastructure/PointOfEntryService.java",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/infrastructure/PointOfEntryService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/infrastructure/PointOfEntryService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/infrastructure/PointOfEntryService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -114,12 +114,13 @@ public Predicate buildCriteriaFilter(PointOfEntryCriteria criteria, CriteriaBuil\n \t\t}\n \t\tif (criteria.getNameLike() != null) {\n \t\t\tString[] textFilters = criteria.getNameLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.like(cb.lower(pointOfEntry.get(PointOfEntry.NAME)), textFilter);\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = CriteriaBuilderHelper.unaccentedIlike(cb, pointOfEntry.get(PointOfEntry.NAME), textFilter);\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (criteria.getRelevanceStatus() != null) {"
  },
  {
    "sha": "69c9acfbd2c7f710b35003a03c16cb6351b41f96",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/person/PersonService.java",
    "status": "modified",
    "additions": 22,
    "deletions": 18,
    "changes": 40,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/person/PersonService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/person/PersonService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/person/PersonService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -188,26 +188,30 @@ public Predicate buildCriteriaFilter(PersonCriteria personCriteria, PersonQueryC\n \t\tfilter = andEquals(cb, personFrom, filter, personCriteria.getBirthdateMM(), Person.BIRTHDATE_MM);\n \t\tfilter = andEquals(cb, personFrom, filter, personCriteria.getBirthdateDD(), Person.BIRTHDATE_DD);\n \t\tif (personCriteria.getNameAddressPhoneEmailLike() != null) {\n+\n \t\t\tString[] textFilters = personCriteria.getNameAddressPhoneEmailLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = formatForLike(textFilters[i]);\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(personFrom.get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(personFrom.get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(personFrom.get(Person.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(\n-\t\t\t\t\t\t\tcb.lower((Expression<String>) personQueryContext.getSubqueryExpression(PersonQueryContext.PERSON_EMAIL_SUBQUERY)),\n-\t\t\t\t\t\t\ttextFilter),\n-\t\t\t\t\t\tphoneNumberPredicate(\n-\t\t\t\t\t\t\tcb,\n-\t\t\t\t\t\t\t(Expression<String>) personQueryContext.getSubqueryExpression(PersonQueryContext.PERSON_PHONE_SUBQUERY),\n-\t\t\t\t\t\t\ttextFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(location.get(Location.STREET)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(location.get(Location.CITY)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(location.get(Location.POSTAL_CODE)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, personFrom.get(Person.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, personFrom.get(Person.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, personFrom.get(Person.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(\n+\t\t\t\t\t\tcb,\n+\t\t\t\t\t\t(Expression<String>) personQueryContext.getSubqueryExpression(PersonQueryContext.PERSON_EMAIL_SUBQUERY),\n+\t\t\t\t\t\ttextFilter),\n+\t\t\t\t\tphoneNumberPredicate(\n+\t\t\t\t\t\tcb,\n+\t\t\t\t\t\t(Expression<String>) personQueryContext.getSubqueryExpression(PersonQueryContext.PERSON_PHONE_SUBQUERY),\n+\t\t\t\t\t\ttextFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, location.get(Location.STREET), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, location.get(Location.CITY), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, location.get(Location.POSTAL_CODE), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tfilter = andEquals(cb, personFrom, filter, personCriteria.getPresentCondition(), Person.PRESENT_CONDITION);"
  },
  {
    "sha": "6ab08fd17f4071ec6845f4f16c0196e2dc14133b",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/region/AreaService.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/AreaService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/AreaService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/region/AreaService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -10,6 +10,7 @@\n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.Root;\n \n+import de.symeda.sormas.api.utils.DataHelper;\n import org.apache.commons.lang3.StringUtils;\n \n import de.symeda.sormas.api.EntityRelevanceStatus;\n@@ -49,12 +50,13 @@ public Predicate buildCriteriaFilter(AreaCriteria criteria, CriteriaBuilder cb,\n \t\tPredicate filter = null;\n \t\tif (StringUtils.isNotBlank(criteria.getTextFilter())) {\n \t\t\tString[] textFilters = criteria.getTextFilter().split(\"\\\\s+\");\n-\t\t\tfor (String s : textFilters) {\n-\t\t\t\tString textFilter = \"%\" + s.toLowerCase() + \"%\";\n-\t\t\t\tif (StringUtils.isNotBlank(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(cb.like(cb.lower(areaRoot.get(Region.NAME)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = CriteriaBuilderHelper.unaccentedIlike(cb, areaRoot.get(Region.NAME), textFilter);\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (criteria.getRelevanceStatus() != null) {"
  },
  {
    "sha": "22582ed9b80b95ef40327ac4e9923bd77df8acfe",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/region/CommunityService.java",
    "status": "modified",
    "additions": 6,
    "deletions": 5,
    "changes": 11,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/CommunityService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/CommunityService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/region/CommunityService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -105,12 +105,13 @@ public Predicate buildCriteriaFilter(CommunityCriteria criteria, CriteriaBuilder\n \t\t}\n \t\tif (criteria.getNameLike() != null) {\n \t\t\tString[] textFilters = criteria.getNameLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(cb.like(cb.lower(from.get(District.NAME)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = CriteriaBuilderHelper.unaccentedIlike(cb, from.get(District.NAME), textFilter);\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (criteria.getRelevanceStatus() != null) {"
  },
  {
    "sha": "559dffbc159798bb7592bb08f4589bc5fa94e0c6",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/region/CountryService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/CountryService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/CountryService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/region/CountryService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -98,13 +98,15 @@ public Predicate buildCriteriaFilter(CountryCriteria criteria, CriteriaBuilder c\n         Predicate filter = null;\n         if (criteria.getNameCodeLike() != null) {\n             String[] textFilters = criteria.getNameCodeLike().split(\"\\\\s+\");\n-            for (int i = 0; i < textFilters.length; i++) {\n-                String textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-                if (!DataHelper.isNullOrEmpty(textFilter)) {\n-                    Predicate likeFilters =\n-                            cb.or(cb.like(cb.lower(from.get(Country.ISO_CODE)), textFilter), cb.like(cb.lower(from.get(Country.UNO_CODE)), textFilter));\n-                    filter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+            for (String textFilter : textFilters) {\n+                if (DataHelper.isNullOrEmpty(textFilter)) {\n+                    continue;\n                 }\n+\n+                Predicate likeFilters = cb.or(\n+                    CriteriaBuilderHelper.ilike(cb, from.get(Country.ISO_CODE), textFilter),\n+                    CriteriaBuilderHelper.ilike(cb, from.get(Country.UNO_CODE), textFilter));\n+                filter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n             }\n         }\n         if (criteria.getRelevanceStatus() != null) {"
  },
  {
    "sha": "5328f90625322dc07ea764d174306f1ef6d19a01",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/region/DistrictService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/DistrictService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/DistrictService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/region/DistrictService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -120,13 +120,15 @@ public Predicate buildCriteriaFilter(DistrictCriteria criteria, CriteriaBuilder\n \t\t}\n \t\tif (criteria.getNameEpidLike() != null) {\n \t\t\tString[] textFilters = criteria.getNameEpidLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters =\n-\t\t\t\t\t\tcb.or(cb.like(cb.lower(from.get(District.NAME)), textFilter), cb.like(cb.lower(from.get(District.EPID_CODE)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(District.NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(District.EPID_CODE), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (criteria.getRelevanceStatus() != null) {"
  },
  {
    "sha": "a6d9b0e286839256a5891bcf05b77652d1fd6067",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/region/RegionService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/RegionService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/region/RegionService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/region/RegionService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -88,13 +88,15 @@ public Predicate buildCriteriaFilter(RegionCriteria criteria, CriteriaBuilder cb\n \t\tPredicate filter = null;\n \t\tif (criteria.getNameEpidLike() != null) {\n \t\t\tString[] textFilters = criteria.getNameEpidLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters =\n-\t\t\t\t\t\tcb.or(cb.like(cb.lower(from.get(Region.NAME)), textFilter), cb.like(cb.lower(from.get(Region.EPID_CODE)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(Region.NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(Region.EPID_CODE), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (criteria.getRelevanceStatus() != null) {"
  },
  {
    "sha": "349c073bdfd76df00097c3e3134bbc08c281e6bc",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/sample/SampleService.java",
    "status": "modified",
    "additions": 13,
    "deletions": 12,
    "changes": 25,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/sample/SampleService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/sample/SampleService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/sample/SampleService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -461,19 +461,20 @@ public Predicate buildCriteriaFilter(SampleCriteria criteria, CriteriaBuilder cb\n \n \t\tif (criteria.getCaseCodeIdLike() != null) {\n \t\t\tString[] textFilters = criteria.getCaseCodeIdLike().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCaze().get(Case.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCasePerson().get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCasePerson().get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCaze().get(Case.EPID_NUMBER)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(sample.get(Sample.LAB_SAMPLE_ID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(sample.get(Sample.FIELD_SAMPLE_ID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getLab().get(Facility.NAME)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, joins.getCaze().get(Case.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getCasePerson().get(Person.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getCasePerson().get(Person.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, joins.getCaze().get(Case.EPID_NUMBER), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, sample.get(Sample.LAB_SAMPLE_ID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, sample.get(Sample.FIELD_SAMPLE_ID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getLab().get(Facility.NAME), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n "
  },
  {
    "sha": "0b7d98ec63c37e8ca044effa8e2135f733c27fa3",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/task/TaskService.java",
    "status": "modified",
    "additions": 33,
    "deletions": 29,
    "changes": 62,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/task/TaskService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/task/TaskService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/task/TaskService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -277,46 +277,50 @@ public Predicate buildCriteriaFilter(TaskCriteria taskCriteria, CriteriaBuilder\n \t\t}\n \t\tif (taskCriteria.getFreeText() != null) {\n \t\t\tString[] textFilters = taskCriteria.getFreeText().split(\"\\\\s+\");\n-\t\t\tfor (String s : textFilters) {\n-\t\t\t\tString textFilter = \"%\" + s.toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCaze().get(Case.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCasePerson().get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCasePerson().get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getContact().get(Contact.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getContactPerson().get(Person.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getContactPerson().get(Person.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getEvent().get(Event.UUID)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getEvent().get(Event.EVENT_TITLE)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, joins.getCaze().get(Case.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getCasePerson().get(Person.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getCasePerson().get(Person.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, joins.getContact().get(Contact.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getContactPerson().get(Person.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getContactPerson().get(Person.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, joins.getEvent().get(Event.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getEvent().get(Event.EVENT_TITLE), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (taskCriteria.getAssigneeUserLike() != null) {\n \t\t\tString[] textFilters = taskCriteria.getAssigneeUserLike().split(\"\\\\s+\");\n-\t\t\tfor (String s : textFilters) {\n-\t\t\t\tString textFilter = \"%\" + s.toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getAssignee().get(User.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getAssignee().get(User.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getAssignee().get(User.USER_NAME)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getAssignee().get(User.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getAssignee().get(User.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getAssignee().get(User.USER_NAME), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n \t\tif (taskCriteria.getCreatorUserLike() != null) {\n \t\t\tString[] textFilters = taskCriteria.getCreatorUserLike().split(\"\\\\s+\");\n-\t\t\tfor (String s : textFilters) {\n-\t\t\t\tString textFilter = \"%\" + s.toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCreator().get(User.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCreator().get(User.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(joins.getCreator().get(User.USER_NAME)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, joins.getCaze().get(Case.UUID), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getCreator().get(User.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getCreator().get(User.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, joins.getCreator().get(User.USER_NAME), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n "
  },
  {
    "sha": "67ce4a73d00152e47efcfbed31bb8e8472ee58ff",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/therapy/PrescriptionService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 11,
    "changes": 21,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/therapy/PrescriptionService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/therapy/PrescriptionService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/therapy/PrescriptionService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -15,6 +15,7 @@\n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.Root;\n \n+import de.symeda.sormas.api.utils.DataHelper;\n import org.apache.commons.lang3.StringUtils;\n \n import de.symeda.sormas.api.therapy.PrescriptionCriteria;\n@@ -131,18 +132,16 @@ public Predicate buildCriteriaFilter(PrescriptionCriteria criteria, CriteriaBuil\n \t\t}\n \t\tif (!StringUtils.isEmpty(criteria.getTextFilter())) {\n \t\t\tString[] textFilters = criteria.getTextFilter().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!StringUtils.isEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-// #1389: Disabled the possibility to search in PRESCRIPTION_TYPE and TYPE_OF_DRUG\n-//\t\t\tShould be undone as soon as a possibility was found to search an enum value by string\n-//\t\t\t\t\t\t\tcb.like(cb.lower(prescription.get(Prescription.PRESCRIPTION_TYPE)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(prescription.get(Prescription.PRESCRIPTION_DETAILS)), textFilter),\n-//\t\t\t\t\t\t\tcb.like(cb.lower(prescription.get(Prescription.TYPE_OF_DRUG)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(prescription.get(Prescription.PRESCRIBING_CLINICIAN)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\t// #1389: Disabled the possibility to search in PRESCRIPTION_TYPE and TYPE_OF_DRUG\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, prescription.get(Prescription.PRESCRIPTION_DETAILS), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, prescription.get(Prescription.PRESCRIBING_CLINICIAN), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n "
  },
  {
    "sha": "551cb961de8a35260c9acdd0b88b0d756cb0aff1",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/therapy/TreatmentService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 11,
    "changes": 21,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/therapy/TreatmentService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/therapy/TreatmentService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/therapy/TreatmentService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -15,6 +15,7 @@\n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.Root;\n \n+import de.symeda.sormas.api.utils.DataHelper;\n import org.apache.commons.lang3.StringUtils;\n \n import de.symeda.sormas.api.therapy.TreatmentCriteria;\n@@ -131,18 +132,16 @@ public Predicate buildCriteriaFilter(TreatmentCriteria criteria, CriteriaBuilder\n \t\t}\n \t\tif (!StringUtils.isEmpty(criteria.getTextFilter())) {\n \t\t\tString[] textFilters = criteria.getTextFilter().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!StringUtils.isEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-// #1389: Disabled the possibility to search in TREATMENT_TYPE and TYPE_OF_DRUG\n-//\t\t\tShould be undone as soon as a possibility was found to search an enum value by string\n-//\t\t\t\t\t\tcb.like(cb.lower(treatment.get(Treatment.TREATMENT_TYPE)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(treatment.get(Treatment.TREATMENT_DETAILS)), textFilter),\n-//\t\t\t\t\t\tcb.like(cb.lower(treatment.get(Treatment.TYPE_OF_DRUG)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(treatment.get(Treatment.EXECUTING_CLINICIAN)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\t// #1389: Disabled the possibility to search in TREATMENT_TYPE and TYPE_OF_DRUG\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, treatment.get(Treatment.TREATMENT_DETAILS), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, treatment.get(Treatment.EXECUTING_CLINICIAN), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n "
  },
  {
    "sha": "bf73c971d84f559ae60712706bbdee960cec43af",
    "filename": "sormas-backend/src/main/java/de/symeda/sormas/backend/user/UserService.java",
    "status": "modified",
    "additions": 12,
    "deletions": 11,
    "changes": 23,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/user/UserService.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/main/java/de/symeda/sormas/backend/user/UserService.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/main/java/de/symeda/sormas/backend/user/UserService.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -353,18 +353,19 @@ public Predicate buildCriteriaFilter(UserCriteria userCriteria, CriteriaBuilder\n \t\t}\n \t\tif (userCriteria.getFreeText() != null) {\n \t\t\tString[] textFilters = userCriteria.getFreeText().split(\"\\\\s+\");\n-\t\t\tfor (int i = 0; i < textFilters.length; i++) {\n-\t\t\t\tString textFilter = \"%\" + textFilters[i].toLowerCase() + \"%\";\n-\t\t\t\tif (!DataHelper.isNullOrEmpty(textFilter)) {\n-\t\t\t\t\tPredicate likeFilters = cb.or(\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(User.FIRST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(User.LAST_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(User.USER_NAME)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(User.USER_EMAIL)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(User.PHONE)), textFilter),\n-\t\t\t\t\t\tcb.like(cb.lower(from.get(User.UUID)), textFilter));\n-\t\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n+\t\t\tfor (String textFilter : textFilters) {\n+\t\t\t\tif (DataHelper.isNullOrEmpty(textFilter)) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\n+\t\t\t\tPredicate likeFilters = cb.or(\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(User.FIRST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(User.LAST_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(User.USER_NAME), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.unaccentedIlike(cb, from.get(User.USER_EMAIL), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(User.PHONE), textFilter),\n+\t\t\t\t\tCriteriaBuilderHelper.ilike(cb, from.get(User.UUID), textFilter));\n+\t\t\t\tfilter = CriteriaBuilderHelper.and(cb, filter, likeFilters);\n \t\t\t}\n \t\t}\n "
  },
  {
    "sha": "70bd63e1a4fa9775f216e1c26b3ce749dc509dba",
    "filename": "sormas-backend/src/test/java/de/symeda/sormas/backend/ExtendedH2Dialect.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/test/java/de/symeda/sormas/backend/ExtendedH2Dialect.java",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-backend/src/test/java/de/symeda/sormas/backend/ExtendedH2Dialect.java",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-backend/src/test/java/de/symeda/sormas/backend/ExtendedH2Dialect.java?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -3,11 +3,15 @@\n import java.sql.Types;\n \n import org.hibernate.dialect.H2Dialect;\n+import org.hibernate.dialect.function.SQLFunctionTemplate;\n import org.hibernate.dialect.function.StandardSQLFunction;\n \n import com.vladmihalcea.hibernate.type.json.JsonBinaryType;\n+import org.hibernate.type.StandardBasicTypes;\n \n public class ExtendedH2Dialect extends H2Dialect {\n+\tpublic final static String UNACCENT = \"unaccent\";\n+\tpublic final static String ILIKE = \"ilike\";\n \n \tpublic final static String ARRAY_TO_STRING = \"array_to_string\";\n \tpublic final static String ARRAY_AGG = \"array_agg\";\n@@ -19,5 +23,9 @@ public ExtendedH2Dialect() {\n \t\tregisterFunction(ARRAY_TO_STRING, new StandardSQLFunction(ARRAY_TO_STRING));\n \t\tregisterFunction(ARRAY_AGG, new StandardSQLFunction(ARRAY_AGG));\n \t\tregisterHibernateType(Types.OTHER, JsonBinaryType.class.getName());\n+\t\t// The function unaccent is specific to PostgreSQL\n+\t\t// With H2 let's make sure it wont fail by making the function \"unaccent\" do nothing\n+\t\tregisterFunction(UNACCENT, new SQLFunctionTemplate(StandardBasicTypes.STRING, \"?1\"));\n+\t\tregisterFunction(ILIKE, new SQLFunctionTemplate(StandardBasicTypes.BOOLEAN, \"?1 ILIKE ?2\"));\n \t}\n }"
  },
  {
    "sha": "873bd7c6ad428572c328810f96a065aad1e88a25",
    "filename": "sormas-base/setup/server-setup.sh",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/hzi-braunschweig/SORMAS-Project/blob/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-base/setup/server-setup.sh",
    "raw_url": "https://github.com/hzi-braunschweig/SORMAS-Project/raw/dd0eb2b26da2076d369b28411cb5bd418e52b089/sormas-base/setup/server-setup.sh",
    "contents_url": "https://api.github.com/repos/hzi-braunschweig/SORMAS-Project/contents/sormas-base/setup/server-setup.sh?ref=dd0eb2b26da2076d369b28411cb5bd418e52b089",
    "patch": "@@ -284,6 +284,7 @@ CREATE OR REPLACE PROCEDURAL LANGUAGE plpgsql;\n ALTER PROCEDURAL LANGUAGE plpgsql OWNER TO $DB_USER;\n CREATE EXTENSION temporal_tables;\n CREATE EXTENSION pg_trgm;\n+CREATE EXTENSION IF NOT EXISTS unaccent;\n GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO $DB_USER;\n \\c $DB_NAME_AUDIT\n CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;"
  }
]
