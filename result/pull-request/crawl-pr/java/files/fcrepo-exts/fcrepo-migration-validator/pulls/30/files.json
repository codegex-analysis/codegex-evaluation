[
  {
    "sha": "98bf2e1b53b947e3c924aaee81291610405081ad",
    "filename": "src/main/java/org/fcrepo/migration/validator/impl/F3ControlGroup.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/blob/0238e212c75335642eb585c20d1d9755705c678b/src/main/java/org/fcrepo/migration/validator/impl/F3ControlGroup.java",
    "raw_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/raw/0238e212c75335642eb585c20d1d9755705c678b/src/main/java/org/fcrepo/migration/validator/impl/F3ControlGroup.java",
    "contents_url": "https://api.github.com/repos/fcrepo-exts/fcrepo-migration-validator/contents/src/main/java/org/fcrepo/migration/validator/impl/F3ControlGroup.java?ref=0238e212c75335642eb585c20d1d9755705c678b",
    "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.migration.validator.impl;\n+\n+/**\n+ * Control Groups for Fedora3\n+ *\n+ * X - Inline XML\n+ * M - Managed\n+ * E - Externally Referenced\n+ * R - Redirect Referenced\n+ *\n+ * @author mikejritter\n+ */\n+public enum F3ControlGroup {\n+    INLINE_XML, MANAGED, EXTERNALLY_REFERENCED, REDIRECT_REFERENCED;\n+\n+    public static F3ControlGroup fromString(final String controlGroup) {\n+        switch (controlGroup.toUpperCase()) {\n+            case \"X\": return INLINE_XML;\n+            case \"M\": return MANAGED;\n+            case \"E\": return EXTERNALLY_REFERENCED;\n+            case \"R\": return REDIRECT_REFERENCED;\n+        }\n+\n+        throw new IllegalArgumentException(controlGroup + \" is not a valid control group identifier!\");\n+    }\n+}"
  },
  {
    "sha": "503aa7aee54db11730203406317e52744acdc1b7",
    "filename": "src/main/java/org/fcrepo/migration/validator/impl/ValidatingObjectHandler.java",
    "status": "modified",
    "additions": 36,
    "deletions": 14,
    "changes": 50,
    "blob_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/blob/0238e212c75335642eb585c20d1d9755705c678b/src/main/java/org/fcrepo/migration/validator/impl/ValidatingObjectHandler.java",
    "raw_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/raw/0238e212c75335642eb585c20d1d9755705c678b/src/main/java/org/fcrepo/migration/validator/impl/ValidatingObjectHandler.java",
    "contents_url": "https://api.github.com/repos/fcrepo-exts/fcrepo-migration-validator/contents/src/main/java/org/fcrepo/migration/validator/impl/ValidatingObjectHandler.java?ref=0238e212c75335642eb585c20d1d9755705c678b",
    "patch": "@@ -24,7 +24,6 @@\n import org.fcrepo.migration.ObjectReference;\n import org.fcrepo.migration.ObjectVersionReference;\n import org.fcrepo.migration.validator.api.ValidationResult;\n-import org.fcrepo.migration.validator.api.ValidationResult.Status;\n import org.fcrepo.migration.validator.api.ValidationResult.ValidationLevel;\n import org.fcrepo.migration.validator.api.ValidationResult.ValidationType;\n import org.fcrepo.storage.ocfl.OcflObjectSession;\n@@ -192,8 +191,9 @@ public void validateDatastream(final String dsId, final ObjectReference objectRe\n                 final var builder = new ValidationResultBuilder(sourceObjectId, targetObjectId, sourceResource,\n                                                                 targetResource, OBJECT_RESOURCE);\n \n-                validationResults.add(validateCreatedDate(sourceCreated, headers, version, builder));\n-                validationResults.add(validateLastModified(dsVersion, headers, version, builder));\n+                validateSize(dsVersion, headers, version, builder);\n+                validateCreatedDate(sourceCreated, headers, version, builder);\n+                validateLastModified(dsVersion, headers, version, builder);\n             } catch (NotFoundException | IndexOutOfBoundsException ex) {\n                 validationResults.add(new ValidationResult(indexCounter++, FAIL, OBJECT_RESOURCE,\n                                                            SOURCE_OBJECT_RESOURCE_EXISTS_IN_TARGET, sourceObjectId,\n@@ -218,11 +218,10 @@ public void validateDatastream(final String dsId, final ObjectReference objectRe\n         } catch (NotFoundException ex) {\n             // intentionally left blank: we check for existence above\n         }\n-\n     }\n \n-    private ValidationResult validateLastModified(final DatastreamVersion dsVersion, final ResourceHeaders headers,\n-                                                  final String version, final ValidationResultBuilder builder) {\n+    private void validateLastModified(final DatastreamVersion dsVersion, final ResourceHeaders headers,\n+                                      final String version, final ValidationResultBuilder builder) {\n         final var error = \"%s binary last modified dates do no match: sourceValue=%s, targetValue=%s\";\n         final var success = \"%s binary last modified dates match: %s\";\n \n@@ -232,22 +231,40 @@ private ValidationResult validateLastModified(final DatastreamVersion dsVersion,\n         final var targetValue = headers.getLastModifiedDate().toString();\n \n         if (sourceValue.equals(targetValue)) {\n-            return builder.build(BINARY_METADATA, OK, format(success, version, sourceValue));\n+            validationResults.add(builder.ok(BINARY_METADATA, format(success, version, sourceValue)));\n         } else {\n-            return builder.build(BINARY_METADATA, FAIL, format(error, version, sourceValue, targetValue));\n+            validationResults.add(builder.fail(BINARY_METADATA, format(error, version, sourceValue, targetValue)));\n         }\n     }\n \n-    private ValidationResult validateCreatedDate(final String sourceCreated, final ResourceHeaders headers,\n-                                                 final String version, final ValidationResultBuilder builder) {\n+    private void validateCreatedDate(final String sourceCreated, final ResourceHeaders headers,\n+                                     final String version, final ValidationResultBuilder builder) {\n         final var error = \"%s binary creation dates do no match: sourceValue=%s, targetValue=%s\";\n         final var success = \"%s binary creation dates match: %s\";\n \n         final var targetCreated = headers.getCreatedDate().toString();\n         if (sourceCreated.equals(targetCreated)) {\n-            return builder.build(BINARY_METADATA, OK, format(success, version, sourceCreated));\n+            validationResults.add(builder.ok(BINARY_METADATA, format(success, version, sourceCreated)));\n         } else {\n-            return builder.build(BINARY_METADATA, FAIL, format(error, version, sourceCreated, targetCreated));\n+            validationResults.add(builder.fail(BINARY_METADATA, format(error, version, sourceCreated, targetCreated)));\n+        }\n+    }\n+\n+    private void validateSize(final DatastreamVersion dsVersion, final ResourceHeaders headers,\n+                              final String version, final ValidationResultBuilder builder) {\n+        final var error = \"%s binary size does not match: sourceValue=%s, targetValue=%s\";\n+        final var success = \"%s binary size matches: %s\";\n+\n+        final var dsInfo = dsVersion.getDatastreamInfo();\n+        final var controlGroup = F3ControlGroup.fromString(dsInfo.getControlGroup());\n+        if (controlGroup == F3ControlGroup.MANAGED) {\n+            final var sourceSize = dsVersion.getSize();\n+            final var targetSize = headers.getContentSize();\n+            if (sourceSize == targetSize) {\n+                validationResults.add(builder.ok(BINARY_METADATA, format(success, version, sourceSize)));\n+            } else {\n+                validationResults.add(builder.fail(BINARY_METADATA, format(error, version, sourceSize, targetSize)));\n+            }\n         }\n     }\n \n@@ -290,8 +307,13 @@ private ValidationResultBuilder(final String sourceObjectId, final String target\n             this.validationLevel = validationLevel;\n         }\n \n-        public ValidationResult build(final ValidationType type, final Status status, final String details) {\n-            return new ValidationResult(indexCounter++, status, validationLevel, type, sourceObjectId, targetObjectId,\n+        public ValidationResult ok(final ValidationType type, final String details) {\n+            return new ValidationResult(indexCounter++, OK, validationLevel, type, sourceObjectId, targetObjectId,\n+                                        sourceResource, targetResource, details);\n+        }\n+\n+        public ValidationResult fail(final ValidationType type, final String details) {\n+            return new ValidationResult(indexCounter++, FAIL, validationLevel, type, sourceObjectId, targetObjectId,\n                                         sourceResource, targetResource, details);\n         }\n     }"
  },
  {
    "sha": "e23a51bad7c8b8a1461dbaf7242cdbfa917efb28",
    "filename": "src/test/java/org/fcrepo/migration/validator/AbstractValidationIT.java",
    "status": "modified",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/blob/0238e212c75335642eb585c20d1d9755705c678b/src/test/java/org/fcrepo/migration/validator/AbstractValidationIT.java",
    "raw_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/raw/0238e212c75335642eb585c20d1d9755705c678b/src/test/java/org/fcrepo/migration/validator/AbstractValidationIT.java",
    "contents_url": "https://api.github.com/repos/fcrepo-exts/fcrepo-migration-validator/contents/src/test/java/org/fcrepo/migration/validator/AbstractValidationIT.java?ref=0238e212c75335642eb585c20d1d9755705c678b",
    "patch": "@@ -19,6 +19,7 @@\n \n import java.io.File;\n \n+import org.fcrepo.migration.validator.api.ValidationResult;\n import org.fcrepo.migration.validator.impl.ApplicationConfigurationHelper;\n import org.fcrepo.migration.validator.impl.F3SourceTypes;\n import org.fcrepo.migration.validator.impl.Fedora3ValidationConfig;\n@@ -68,4 +69,29 @@ Fedora3ValidationConfig getConfig(final File f3DatastreamsDir, final File f3Obje\n         return config;\n     }\n \n+    /**\n+     * Quick enum to help check the type of validations run. So instead of running result.getDetails.contains(...),\n+     * create an enum type based on the details for (hopefully) cleaner assertions.\n+     */\n+    public enum BinaryMetadataValidation {\n+        CREATION_DATE, LAST_MODIFIED_DATE, SIZE;\n+\n+        public static BinaryMetadataValidation fromResult(final ValidationResult result) {\n+            if (result.getValidationType() != ValidationResult.ValidationType.BINARY_METADATA) {\n+                throw new IllegalArgumentException(\"Enum type is only for BINARY_METADATA!\");\n+            }\n+\n+            final var details = result.getDetails();\n+            if (details.contains(\"last modified date\")) {\n+                return LAST_MODIFIED_DATE;\n+            } else if (details.contains(\"creation date\")) {\n+                return CREATION_DATE;\n+            } else if (details.contains(\"size\")) {\n+                return SIZE;\n+            }\n+\n+            throw new IllegalArgumentException(\"Unknown details type!\");\n+        }\n+    }\n+\n }\n\\ No newline at end of file"
  },
  {
    "sha": "1708c7d915383351f35d109717948e072b1148f3",
    "filename": "src/test/java/org/fcrepo/migration/validator/ObjectValidationIT.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/blob/0238e212c75335642eb585c20d1d9755705c678b/src/test/java/org/fcrepo/migration/validator/ObjectValidationIT.java",
    "raw_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/raw/0238e212c75335642eb585c20d1d9755705c678b/src/test/java/org/fcrepo/migration/validator/ObjectValidationIT.java",
    "contents_url": "https://api.github.com/repos/fcrepo-exts/fcrepo-migration-validator/contents/src/test/java/org/fcrepo/migration/validator/ObjectValidationIT.java?ref=0238e212c75335642eb585c20d1d9755705c678b",
    "patch": "@@ -23,10 +23,15 @@\n import org.junit.Test;\n \n import java.io.File;\n+import java.util.stream.Collectors;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.fcrepo.migration.validator.AbstractValidationIT.BinaryMetadataValidation.CREATION_DATE;\n+import static org.fcrepo.migration.validator.AbstractValidationIT.BinaryMetadataValidation.LAST_MODIFIED_DATE;\n+import static org.fcrepo.migration.validator.AbstractValidationIT.BinaryMetadataValidation.SIZE;\n import static org.fcrepo.migration.validator.api.ValidationResult.ValidationLevel.OBJECT;\n import static org.fcrepo.migration.validator.api.ValidationResult.ValidationType.BINARY_HEAD_COUNT;\n+import static org.fcrepo.migration.validator.api.ValidationResult.ValidationType.BINARY_METADATA;\n import static org.fcrepo.migration.validator.api.ValidationResult.ValidationType.METADATA;\n import static org.fcrepo.migration.validator.api.ValidationResult.ValidationType.SOURCE_OBJECT_EXISTS_IN_TARGET;\n import static org.fcrepo.migration.validator.impl.ValidatingObjectHandler.F3_CREATED_DATE;\n@@ -56,6 +61,19 @@ public void test() {\n \n         // verify expected results\n         assertEquals(\"Should be no errors!\", 0, reportHandler.getErrors().size());\n+\n+        // check datastream metadata\n+        // we have 7 datastreams overall -- 4 files and 3 inline\n+        final var totalManaged = 4;\n+        final var totalDatastreams = 7;\n+        final var passed = reportHandler.getPassed().stream()\n+                                        .filter(result -> result.getValidationType() == BINARY_METADATA)\n+                                        .map(BinaryMetadataValidation::fromResult)\n+                                        .collect(Collectors.toList());\n+        assertThat(passed).containsOnly(CREATION_DATE, LAST_MODIFIED_DATE, SIZE);\n+        assertThat(passed).filteredOn(validation -> validation == SIZE).hasSize(totalManaged);\n+        assertThat(passed).filteredOn(validation -> validation == CREATION_DATE).hasSize(totalDatastreams);\n+        assertThat(passed).filteredOn(validation -> validation == LAST_MODIFIED_DATE).hasSize(totalDatastreams);\n     }\n \n     @Test"
  },
  {
    "sha": "66b170ef3231decfa102680ac1d72882225cbe69",
    "filename": "src/test/java/org/fcrepo/migration/validator/VersionValidationIT.java",
    "status": "modified",
    "additions": 21,
    "deletions": 17,
    "changes": 38,
    "blob_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/blob/0238e212c75335642eb585c20d1d9755705c678b/src/test/java/org/fcrepo/migration/validator/VersionValidationIT.java",
    "raw_url": "https://github.com/fcrepo-exts/fcrepo-migration-validator/raw/0238e212c75335642eb585c20d1d9755705c678b/src/test/java/org/fcrepo/migration/validator/VersionValidationIT.java",
    "contents_url": "https://api.github.com/repos/fcrepo-exts/fcrepo-migration-validator/contents/src/test/java/org/fcrepo/migration/validator/VersionValidationIT.java?ref=0238e212c75335642eb585c20d1d9755705c678b",
    "patch": "@@ -18,12 +18,16 @@\n package org.fcrepo.migration.validator;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.fcrepo.migration.validator.AbstractValidationIT.BinaryMetadataValidation.CREATION_DATE;\n+import static org.fcrepo.migration.validator.AbstractValidationIT.BinaryMetadataValidation.LAST_MODIFIED_DATE;\n import static org.fcrepo.migration.validator.api.ValidationResult.ValidationType.BINARY_HEAD_COUNT;\n+import static org.fcrepo.migration.validator.api.ValidationResult.ValidationType.BINARY_METADATA;\n import static org.fcrepo.migration.validator.api.ValidationResult.ValidationType.BINARY_VERSION_COUNT;\n import static org.fcrepo.migration.validator.api.ValidationResult.ValidationType.SOURCE_OBJECT_RESOURCE_EXISTS_IN_TARGET;\n import static org.junit.Assert.assertEquals;\n \n import java.io.File;\n+import java.util.stream.Collectors;\n \n import org.apache.commons.io.FileUtils;\n import org.fcrepo.migration.validator.api.ValidationResult;\n@@ -45,7 +49,6 @@ public void teardown() {\n \n     @Test\n     public void test() {\n-        final var sourceObject = \"1711.dl:FEG6WWJ664RHQ8X/DS1\";\n         final var f3DatastreamsDir = new File(VERSIONS_BASE_DIR, \"valid/f3/datastreams\");\n         final var f3ObjectsDir = new File(VERSIONS_BASE_DIR, \"valid/f3/objects\");\n         final var f6OcflRootDir = new File(VERSIONS_BASE_DIR, \"valid/f6/data/ocfl-root\");\n@@ -54,17 +57,15 @@ public void test() {\n         // verify expected results\n         assertEquals(\"Should be no errors!\", 0, reportHandler.getErrors().size());\n \n-        // verify two entries for created date\n-        final var createdDateMatches = reportHandler.getPassed().stream()\n-            .filter(result -> sourceObject.equals(result.getSourceResourceId()))\n-            .filter(result -> result.getDetails().contains(\"binary creation dates match\"))\n-            .count();\n-        final var lastModifiedMatches = reportHandler.getPassed().stream()\n-            .filter(result -> sourceObject.equals(result.getSourceResourceId()))\n-            .filter(result -> result.getDetails().contains(\"last modified dates match\"))\n-            .count();\n-        assertEquals(\"Should be two created date validations for DS1\", 2, createdDateMatches);\n-        assertEquals(\"Should be two last modified date validations for DS1\", 2, lastModifiedMatches);\n+        // verify datastream metadata\n+        // only 1 inline datastream with two versions, so we expect 2 results on all but size which should have none\n+        final var validations = reportHandler.getPassed().stream()\n+                     .filter(result -> result.getValidationType() == BINARY_METADATA)\n+                     .map(BinaryMetadataValidation::fromResult)\n+                     .collect(Collectors.toList());\n+        assertThat(validations).containsOnly(CREATION_DATE, LAST_MODIFIED_DATE);\n+        assertThat(validations).filteredOn(validation -> validation == CREATION_DATE).hasSize(2);\n+        assertThat(validations).filteredOn(validation -> validation == LAST_MODIFIED_DATE).hasSize(2);\n     }\n \n     @Test\n@@ -104,11 +105,14 @@ public void testInvalidMetadata() {\n         final var reportHandler = doValidation(f3DatastreamsDir, f3ObjectsDir, f6OcflRootDir);\n \n         // verify expected results\n-        final var errors = reportHandler.getErrors();\n-        assertThat(errors).hasSize(4)\n-                          .map(ValidationResult::getDetails)\n-                          .anyMatch(details -> details.contains(\"creation dates do no match\"))\n-                          .anyMatch(details -> details.contains(\"last modified dates do no match\"));\n+        // 2 creation dates match; 2 last modified dates match; 0 size matches\n+        final var errors = reportHandler.getErrors().stream()\n+                                        .filter(result -> result.getValidationType() == BINARY_METADATA)\n+                                        .map(BinaryMetadataValidation::fromResult)\n+                                        .collect(Collectors.toList());\n+        assertThat(errors).containsOnly(CREATION_DATE, LAST_MODIFIED_DATE);\n+        assertThat(errors).filteredOn(validation -> validation == CREATION_DATE).hasSize(2);\n+        assertThat(errors).filteredOn(validation -> validation == LAST_MODIFIED_DATE).hasSize(2);\n     }\n \n }\n\\ No newline at end of file"
  }
]
