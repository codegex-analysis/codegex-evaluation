[
  {
    "sha": "0075b8435a79dadc525d5d465c8ec1345c22f89f",
    "filename": "pathsum2.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/super30admin/Trees-3/blob/0dc3ee83a0828afdf2d3a17c25a1af4c7ba44ca4/pathsum2.java",
    "raw_url": "https://github.com/super30admin/Trees-3/raw/0dc3ee83a0828afdf2d3a17c25a1af4c7ba44ca4/pathsum2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-3/contents/pathsum2.java?ref=0dc3ee83a0828afdf2d3a17c25a1af4c7ba44ca4",
    "patch": "@@ -0,0 +1,39 @@\n+// Problem1 (https://leetcode.com/problems/path-sum-ii/)\n+// Time Complexity : O(N^2) \n+// Space Complexity : O(N) \n+public class pathsum2 {\n+    \n+    private void recurseTree(TreeNode node, int remainingSum, List<Integer> pathNodes, List<List<Integer>> pathsList) {\n+        \n+        if (node == null) {\n+            return;\n+        }\n+        \n+        // Add the current node to the path's list\n+        pathNodes.add(node.val);\n+        \n+        // Check if the current node is a leaf and also, if it\n+        // equals our remaining sum. If it does, we add the path to\n+        // our list of paths\n+        if (remainingSum == node.val && node.left == null && node.right == null) {\n+            pathsList.add(new ArrayList<>(pathNodes));\n+        } else {\n+            \n+            // Else, we will recurse on the left and the right children\n+            this.recurseTree(node.left, remainingSum - node.val, pathNodes, pathsList);\n+            this.recurseTree(node.right, remainingSum - node.val, pathNodes, pathsList);\n+        }\n+        \n+        // We need to pop the node once we are done processing ALL of it's\n+        // subtrees.\n+        pathNodes.remove(pathNodes.size() - 1);\n+    }\n+    \n+    public List<List<Integer>> pathSum(TreeNode root, int sum) {\n+        List<List<Integer>> pathsList = new ArrayList<List<Integer>>();\n+        List<Integer> pathNodes = new ArrayList<Integer>();\n+        this.recurseTree(root, sum, pathNodes, pathsList);\n+        return pathsList;        \n+    }\n+\n+}"
  },
  {
    "sha": "a60f5427c92db0a8e40682fb0164825a168a4676",
    "filename": "symmetricTree.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/super30admin/Trees-3/blob/0dc3ee83a0828afdf2d3a17c25a1af4c7ba44ca4/symmetricTree.java",
    "raw_url": "https://github.com/super30admin/Trees-3/raw/0dc3ee83a0828afdf2d3a17c25a1af4c7ba44ca4/symmetricTree.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-3/contents/symmetricTree.java?ref=0dc3ee83a0828afdf2d3a17c25a1af4c7ba44ca4",
    "patch": "@@ -0,0 +1,16 @@\n+// Problem2 (https://leetcode.com/problems/symmetric-tree/)\n+// Time Complexity : O(N) \n+// Space Complexity : O(N) \n+public class symmetricTree {\n+    public boolean isSymmetric(TreeNode root) {\n+        return isMirror(root, root);\n+    }\n+    \n+    public boolean isMirror(TreeNode t1, TreeNode t2) {\n+        if (t1 == null && t2 == null) return true;\n+        if (t1 == null || t2 == null) return false;\n+        return (t1.val == t2.val)\n+            && isMirror(t1.right, t2.left)\n+            && isMirror(t1.left, t2.right);\n+    }\n+}"
  }
]
