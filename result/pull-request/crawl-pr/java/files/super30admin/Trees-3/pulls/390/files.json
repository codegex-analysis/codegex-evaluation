[
  {
    "sha": "091a2d563b35fb948b6221bbdd02d75784199dc3",
    "filename": "PathSumII.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/super30admin/Trees-3/blob/724f22bc23b70574fb29441ef3cabd623bacd012/PathSumII.java",
    "raw_url": "https://github.com/super30admin/Trees-3/raw/724f22bc23b70574fb29441ef3cabd623bacd012/PathSumII.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-3/contents/PathSumII.java?ref=724f22bc23b70574fb29441ef3cabd623bacd012",
    "patch": "@@ -0,0 +1,51 @@\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode() {}\n+ *     TreeNode(int val) { this.val = val; }\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\n+ *         this.val = val;\n+ *         this.left = left;\n+ *         this.right = right;\n+ *     }\n+ * }\n+ */\n+class Solution {\n+    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n+        if(root == null){\n+            return new ArrayList<>();\n+        }\n+        List<List<Integer>> output = new ArrayList<>();\n+        List<Integer> path = new ArrayList<>();\n+        \n+        recurr(root, targetSum, output,path,0);\n+        \n+        return output;\n+        \n+    }\n+    private void recurr(TreeNode root, int targetSum, List<List<Integer>> output, List<Integer> path, int currSum){\n+        if(root == null)\n+            return;\n+        currSum+= root.val;\n+        path.add(root.val);\n+        \n+        if(root.left == null && root.right == null){\n+            if(currSum == targetSum){\n+                List<Integer> temp = new ArrayList<>(path);\n+                output.add(temp);\n+            }\n+            path.remove(path.size()-1);\n+            return;\n+        }\n+        recurr(root.left, targetSum, output, path, currSum);\n+        recurr(root.right, targetSum, output, path, currSum);\n+        path.remove(path.size()-1);\n+        \n+    }\n+}\n+\n+//TC: O(N*N) N-for all the nodes and N for adding the path to the temp path\n+//SC: O(N)"
  },
  {
    "sha": "92d12f727af2745b358b7cb357e2f761d6d0dc9a",
    "filename": "SymmetricTree.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/super30admin/Trees-3/blob/724f22bc23b70574fb29441ef3cabd623bacd012/SymmetricTree.java",
    "raw_url": "https://github.com/super30admin/Trees-3/raw/724f22bc23b70574fb29441ef3cabd623bacd012/SymmetricTree.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-3/contents/SymmetricTree.java?ref=724f22bc23b70574fb29441ef3cabd623bacd012",
    "patch": "@@ -0,0 +1,37 @@\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode() {}\n+ *     TreeNode(int val) { this.val = val; }\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\n+ *         this.val = val;\n+ *         this.left = left;\n+ *         this.right = right;\n+ *     }\n+ * }\n+ */\n+class Solution {\n+    public boolean isSymmetric(TreeNode root) {\n+        if(root == null){\n+            return true;\n+        }\n+        \n+        return recurr(root.left, root.right);\n+    }\n+    \n+    private boolean recurr(TreeNode N1, TreeNode N2){\n+        if(N1==null && N2 == null){\n+            return true;\n+        }\n+        if(N1 == null || N2 == null || N1.val != N2.val){\n+            return false;\n+        }\n+        return recurr(N1.left, N2.right) && recurr(N1.right, N2.left);\n+    }\n+}\n+\n+//TC: O(N)\n+//SC: O(1) if recursion stack is counted it would be O(height of the tree)"
  }
]
