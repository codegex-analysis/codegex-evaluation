[
  {
    "sha": "bf8fb6e53f65dd80178fbae712e4677fbba45103",
    "filename": "src/Candy.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/b6f9f5c526880f475154157762a4ae59f2adfe81/src/Candy.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/b6f9f5c526880f475154157762a4ae59f2adfe81/src/Candy.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/src/Candy.java?ref=b6f9f5c526880f475154157762a4ae59f2adfe81",
    "patch": "@@ -0,0 +1,59 @@\n+import java.util.Arrays;\n+\n+/* \n+ * The Time complexity of the algorithm is O(n) where n is no of elements.\n+ * The Space complexity of the algorithm is O(1).\n+ */\n+\n+public class Candy {\n+\n+\tpublic int candy(int[] ratings) {\n+\n+\t\tif (ratings == null || ratings.length == 0)\n+\t\t\treturn 0;\n+\n+\t\tint[] candies = new int[ratings.length];\n+\n+\t\tArrays.fill(candies, 1);\n+\n+\t\t// right pass\n+\n+\t\tfor (int i = 1; i < ratings.length; i++) {\n+\n+\t\t\tif (ratings[i] > ratings[i - 1]) {\n+\n+\t\t\t\tcandies[i] = candies[i - 1] + 1;\n+\n+\t\t\t}\n+\n+\t\t}\n+\n+\t\t// left pass\n+\n+\t\tfor (int i = ratings.length - 2; i >= 0; i--) {\n+\n+\t\t\tif (ratings[i] > ratings[i + 1]) {\n+\n+\t\t\t\tcandies[i] = Math.max(candies[i], candies[i + 1] + 1);\n+\t\t\t}\n+\n+\t\t}\n+\n+\t\tint sum = 0;\n+\n+\t\tfor (int ele : candies) {\n+\n+\t\t\tsum += ele;\n+\n+\t\t}\n+\n+\t\treturn sum;\n+\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\t// TODO Auto-generated method stub\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "3a3d30e25e76d81421140489e979a35bdabfef69",
    "filename": "src/JumpGame.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/b6f9f5c526880f475154157762a4ae59f2adfe81/src/JumpGame.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/b6f9f5c526880f475154157762a4ae59f2adfe81/src/JumpGame.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/src/JumpGame.java?ref=b6f9f5c526880f475154157762a4ae59f2adfe81",
    "patch": "@@ -0,0 +1,70 @@\n+\n+/*//DFS - Approach\n+ * The Time complexity of the algorithm is O(2^n) where n is no of elements.\n+ * The Space complexity of the algorithm is O(1).\n+ */\n+\n+/*//- Approach\n+ * The Time complexity of the algorithm is O(n) where n is no of elements.\n+ * The Space complexity of the algorithm is O(1).\n+ */\n+\n+public class JumpGame {\n+\n+\t// dfs approach\n+\n+//\t public boolean canJump(int[] nums) {\n+//\t        \n+//\t        if(nums.length <2)\n+//\t            return true;\n+//\t        \n+//\t        return dfs(nums,0);        \n+//\t        \n+//\t    }\n+//\t    \n+//\t    \n+//\t    private boolean dfs(int[] nums,int index){\n+//\t        \n+//\t        //base\n+//\t        if(index >= nums.length-1)\n+//\t            return true;\n+//\t        \n+//\t        //logic\n+//\t        \n+//\t        for(int j=1;j<=nums[index];j++){\n+//\t            \n+//\t            if(dfs(nums,j+index)) return true;\n+//\t            \n+//\t        }\n+//\t        \n+//\t        return false;\n+//\t        \n+//\t    }\n+\n+//\t\n+\n+\tpublic boolean canJump(int[] nums) {\n+\n+\t\tif (nums.length < 2)\n+\t\t\treturn true;\n+\n+\t\tint n = nums.length;\n+\t\tint destination = n - 1;\n+\n+\t\tfor (int i = n - 2; i >= 0; i--) {\n+\n+\t\t\tif (i + nums[i] >= destination)\n+\t\t\t\tdestination = i;\n+\n+\t\t}\n+\n+\t\treturn destination == 0;\n+\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\t// TODO Auto-generated method stub\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "7acc2ab7691b5d5371025d03a8e1058608921bb3",
    "filename": "src/JumpGameII.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/b6f9f5c526880f475154157762a4ae59f2adfe81/src/JumpGameII.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/b6f9f5c526880f475154157762a4ae59f2adfe81/src/JumpGameII.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/src/JumpGameII.java?ref=b6f9f5c526880f475154157762a4ae59f2adfe81",
    "patch": "@@ -0,0 +1,77 @@\n+\n+/*//DFS - Approach\n+ * The Time complexity of the algorithm is O(2^n) where n is no of elements.\n+ * The Space complexity of the algorithm is O(1).\n+ */\n+\n+/*//Iterative \n+ * The Time complexity of the algorithm is O(n) where n is no of elements.\n+ * The Space complexity of the algorithm is O(1).\n+ */\n+\n+public class JumpGameII {\n+\n+\tpublic int jump(int[] nums) {\n+\n+\t\tif (nums == null || nums.length < 2)\n+\t\t\treturn 0;\n+\n+\t\tint nextInt = nums[0];\n+\t\tint currInt = nums[0];\n+\t\tint n = nums.length - 1;\n+\t\tint jump = 1;\n+\n+\t\tfor (int i = 1; i <= n; i++) {\n+\n+\t\t\tnextInt = Math.max(nextInt, nums[i] + i);\n+\n+\t\t\tif (i < n && currInt == i) {\n+\t\t\t\tcurrInt = nextInt;\n+\t\t\t\tjump++;\n+\n+\t\t\t}\n+\n+\t\t}\n+\n+\t\treturn jump;\n+\t}\n+\n+\t// DFS\n+//\tint min;\n+//\n+//\tpublic int jump(int[] nums) {\n+//\n+//\t\tmin = Integer.MAX_VALUE;\n+//\t\tif (nums.length == 0 || nums.length == 1)\n+//\t\t\treturn 0;\n+//\n+//\t\tdfs(nums, 0, 0);\n+//\n+//\t\treturn min;\n+//\n+//\t}\n+//\n+//\tprivate void dfs(int[] nums, int index, int jump) {\n+//\n+//\t\t// base\n+//\t\tif (nums.length - 1 <= index) {\n+//\n+//\t\t\tmin = Math.min(min, jump);\n+//\t\t\treturn;\n+//\t\t}\n+//\n+//\t\t// logic\n+//\n+//\t\tfor (int j = 1; j <= nums[index]; j++) {\n+//\n+//\t\t\tdfs(nums, j + index, jump + 1);\n+//\t\t}\n+//\n+//\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\t// TODO Auto-generated method stub\n+\n+\t}\n+\n+}"
  }
]
