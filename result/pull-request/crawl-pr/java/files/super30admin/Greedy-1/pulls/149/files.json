[
  {
    "sha": "696b0096d3ad5c1cd735edd58b5507e9df81106c",
    "filename": "135. Candy",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/5f5cd6f51b4c7844bde9aeaa2eac8e12dc085007/135.%20Candy",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/5f5cd6f51b4c7844bde9aeaa2eac8e12dc085007/135.%20Candy",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/135.%20Candy?ref=5f5cd6f51b4c7844bde9aeaa2eac8e12dc085007",
    "patch": "@@ -0,0 +1,52 @@\n+class Solution:\n+    def candy(self, ratings: List[int]) -> int:\n+        n = len(ratings)\n+        # form a ratings list along with index and then sort it based on ratings\n+        li = [(ratings[i], i) for i in range(len(ratings))]\n+        \n+        li = sorted(li)\n+        #print(li)\n+        # initialize the candies array with 0's\n+        candies = [0 for i in range(n)];\n+        \n+        # iterate through the sorted array\n+        for rating, index in li:\n+            # both neighbors exists\n+            if(index - 1 >= 0 and index + 1 < n):\n+                maxneighborratings = max(ratings[index -1], ratings[index + 1]);\n+                maxneighborcandies = max(candies[index -1], candies[index + 1]);\n+                # check whether the current rating is greater than both of it's enighbros\n+                # if then update the candies with max(neighboring cadies) + 1\n+                if(ratings[index] > maxneighborratings):\n+                    candies[index] = maxneighborcandies + 1;\n+                # check whether the current rating is greater than left neighbor\n+                elif(ratings[index] > ratings[index - 1]):\n+                    candies[index] = candies[index -1] + 1\n+                # check whether the current rating is greater than right neighbor\n+                elif(ratings[index] > ratings[index + 1]):\n+                    candies[index] = candies[index + 1] + 1\n+                else:\n+                    candies[index] = 1;\n+            # no neighor exists\n+            elif(index - 1 < 0 and index + 1 >= n):\n+                candies[index] = 1;\n+            # only right neighbor exists\n+            elif(index -1 < 0):\n+                if(ratings[index] > ratings[index + 1]):\n+                    candies[index] = candies[index + 1] + 1;\n+                else:\n+                    candies[index] = 1;\n+            # only left neighbor exists\n+            elif(index + 1 >= n):\n+                if(ratings[index] > ratings[index - 1]):\n+                    candies[index] = candies[index - 1] + 1;\n+                else:\n+                    candies[index] = 1;\n+        \n+        return sum(candies)\n+    '''\n+    time complexity = O(nlogn)\n+    space complexity = O(n)\n+    '''\n+                \n+        "
  },
  {
    "sha": "b7cc4eb1ef9720df8e652a9d0fe361b84d3108a9",
    "filename": "45. Jump Game II",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/5f5cd6f51b4c7844bde9aeaa2eac8e12dc085007/45.%20Jump%20Game%20II",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/5f5cd6f51b4c7844bde9aeaa2eac8e12dc085007/45.%20Jump%20Game%20II",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/45.%20Jump%20Game%20II?ref=5f5cd6f51b4c7844bde9aeaa2eac8e12dc085007",
    "patch": "@@ -0,0 +1,24 @@\n+class Solution:\n+    def jump(self, nums: List[int]) -> int:\n+        \n+        # initialize the jumps with 1 and current interval with nums[i]\n+        #  and next interval with nums[i]\n+        n = len(nums)\n+        if(n ==1 and nums[0] >= 0):\n+            return 0;\n+        next = nums[0]; curr = nums[0]\n+        jumps = 1\n+        for i in range(1, n):\n+            if(i > curr):\n+                jumps += 1;\n+                curr = next;\n+                \n+            if(i + nums[i] > next):\n+                next = i + nums[i];\n+            \n+        return jumps;\n+    '''\n+    time complexity = O(n)\n+    spcae complexity = O(1)\n+    '''\n+        "
  },
  {
    "sha": "0dda04d728a491e6bc9e92c51d68c739053987b8",
    "filename": "55. Jump Game",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/5f5cd6f51b4c7844bde9aeaa2eac8e12dc085007/55.%20Jump%20Game",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/5f5cd6f51b4c7844bde9aeaa2eac8e12dc085007/55.%20Jump%20Game",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/55.%20Jump%20Game?ref=5f5cd6f51b4c7844bde9aeaa2eac8e12dc085007",
    "patch": "@@ -0,0 +1,36 @@\n+class Solution(object):\n+    \n+    \n+           \n+            \n+    \n+    def canJump(self, nums):\n+        \"\"\"\n+        :type nums: List[int]\n+        :rtype: bool\n+        \"\"\"\n+        n = len(nums);\n+        # initialize next interval with nums[0]\n+        next = nums[0];\n+        # iterate from the second element of the nums array\n+        for i in range(1, len(nums)):\n+            # check if the next interval is less than i\n+            # if it is return False\n+            if(next < i):\n+                return False;\n+            # if the sum of current index and maxium jump that can from taken\n+            # from that position is greater than next interval.\n+            # then change the next interval\n+            if(i + nums[i] > next):\n+                next = i + nums[i];\n+        # return true, if we reach the destination\n+        if(next >= n-1):\n+            return True;\n+        \n+        '''\n+    time complexity = O(n)\n+    spcae complexity = O(1)\n+    '''\n+                \n+                \n+        "
  }
]
