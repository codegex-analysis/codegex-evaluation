[
  {
    "sha": "97b09a7080c7ee268704cdcef101a2a00af809b0",
    "filename": "Candy.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/b71337c63bd73ac4f23cc3d25e17771132dc503d/Candy.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/b71337c63bd73ac4f23cc3d25e17771132dc503d/Candy.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/Candy.java?ref=b71337c63bd73ac4f23cc3d25e17771132dc503d",
    "patch": "@@ -0,0 +1,34 @@\n+// Time Complexity : 0(n)\n+// Space Complexity : 0(n)\n+// Did this code successfully run on Leetcode : Yes\n+\n+class Candy {\n+    public int candy(int[] ratings) {\n+        if(ratings == null || ratings.length == 0)\n+            return 0;\n+        int n = ratings.length;\n+\n+        //intiailize candies array and fill 1 representing atleast 1 candy for each rating\n+        int[] candies = new int[n];\n+        Arrays.fill(candies, 1);\n+\n+        //pass from left to right and update candies of i if rating of i is greater than i-1\n+        for(int i = 1; i< n; i++){\n+            if(ratings[i] > ratings[i-1])\n+                candies[i] = candies[i-1] + 1;\n+        }\n+\n+        int sum = candies[n - 1];\n+\n+        //pass from right to left and update candies of i if rating of i is greater than i+1\n+        for(int i = n-2; i>=0; i--){\n+            if(ratings[i] > ratings[i+1]){\n+                candies[i] = Math.max(candies[i], candies[i+1] + 1);\n+            }\n+            //add candies one by one to sum\n+            sum += candies[i];\n+        }\n+\n+        return sum;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d88298c653abe272c6f88cbdc10c331be2006091",
    "filename": "JumpGame.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/b71337c63bd73ac4f23cc3d25e17771132dc503d/JumpGame.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/b71337c63bd73ac4f23cc3d25e17771132dc503d/JumpGame.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/JumpGame.java?ref=b71337c63bd73ac4f23cc3d25e17771132dc503d",
    "patch": "@@ -0,0 +1,23 @@\n+// Time Complexity : 0(n)\n+// Space Complexity : 0(1)\n+// Did this code successfully run on Leetcode : Yes\n+\n+class JumpGame {\n+    public boolean canJump(int[] nums) {\n+\n+        int destination = nums.length - 1;\n+        //start iterating from back\n+        for(int i = nums.length - 2; i>=0; i--){\n+            //see if we can reach destination by adding nums[i] to current index\n+            //that is we can jump from current index to destination index\n+            if(i + nums[i] >= destination){\n+                //if so update destination to current index\n+                //to see if we can reach the current index\n+                destination = i;\n+            }\n+        }\n+\n+        //if finally we are able to reach index 0 then return true else false\n+        return destination == 0;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3eb3840b4c1b6b7e6d781692ee743013ff728bbb",
    "filename": "JumpGame2.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/b71337c63bd73ac4f23cc3d25e17771132dc503d/JumpGame2.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/b71337c63bd73ac4f23cc3d25e17771132dc503d/JumpGame2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/JumpGame2.java?ref=b71337c63bd73ac4f23cc3d25e17771132dc503d",
    "patch": "@@ -0,0 +1,29 @@\n+// Time Complexity : 0(n)\n+// Space Complexity : 0(1)\n+// Did this code successfully run on Leetcode : Yes\n+\n+class JumpGame2 {\n+    public int jump(int[] nums) {\n+        if(nums == null || nums.length < 2)\n+            return 0;\n+\n+        //initialize jumps, currInt, nextInt\n+        int jumps = 1;\n+        int currInt = nums[0], nextInt = nums[0];\n+        //iterate throught the nums array\n+        for(int i=0; i < nums.length; i++){\n+            //calculate the max index that can be reached from current index\n+            nextInt = Math.max(nextInt, nums[i] + i);\n+            //if currInt is equal to current index\n+            //if we have reached last index no need to calculate jump now\n+            if(i < nums.length -1 && currInt == i){\n+                //move currInt to nextInt & increment jump\n+                //means that this is the jump to be taken\n+                currInt = nextInt;\n+                jumps++;\n+            }\n+        }\n+\n+        return jumps;\n+    }\n+}\n\\ No newline at end of file"
  }
]
