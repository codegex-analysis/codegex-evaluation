[
  {
    "sha": "10694dd46ab786c5e71a8259de49006fd3728543",
    "filename": "Candy.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/1698e600dfd04f374a27bb3fad195021a9e80f0b/Candy.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/1698e600dfd04f374a27bb3fad195021a9e80f0b/Candy.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/Candy.java?ref=1698e600dfd04f374a27bb3fad195021a9e80f0b",
    "patch": "@@ -0,0 +1,30 @@\n+class Solution {\n+    public int candy(int[] ratings) {\n+        int sum = 0;\n+        int[] a = new int[ratings.length];\n+        \n+        for(int i=0; i<a.length; i++){\n+            a[i] = 1;\n+        }\n+        \n+        for(int i=0; i<ratings.length-1; i++){\n+            if(ratings[i+1] > ratings[i]){\n+                a[i+1] = a[i]+1;\n+            }\n+        }\n+        \n+        for(int i=ratings.length-1; i>0; i--){\n+            if(ratings[i-1] > ratings[i]){\n+                if(a[i-1]<(a[i]+1)){\n+                    a[i-1] = a[i] + 1;\n+                }\n+            }\n+        }\n+        \n+        for(int i=0; i<a.length; i++){\n+            sum += a[i];\n+        }\n+        \n+        return sum;  \n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "923f83c8995c135e15195b0cca1d943e966311b5",
    "filename": "JumpGame.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/1698e600dfd04f374a27bb3fad195021a9e80f0b/JumpGame.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/1698e600dfd04f374a27bb3fad195021a9e80f0b/JumpGame.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/JumpGame.java?ref=1698e600dfd04f374a27bb3fad195021a9e80f0b",
    "patch": "@@ -0,0 +1,10 @@\n+class Solution {\n+    public boolean canJump(int[] A) {\n+        int max = 0;\n+        for(int i=0;i<A.length;i++){\n+            if(i>max) {return false;}\n+            max = Math.max(A[i]+i,max);\n+        }\n+        return true;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "59865ce8d34d40fa74908a5d14e59d6c2ee23cdc",
    "filename": "JumpGame2.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/1698e600dfd04f374a27bb3fad195021a9e80f0b/JumpGame2.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/1698e600dfd04f374a27bb3fad195021a9e80f0b/JumpGame2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/JumpGame2.java?ref=1698e600dfd04f374a27bb3fad195021a9e80f0b",
    "patch": "@@ -0,0 +1,45 @@\n+class Solution {\n+    public int jump(int[] nums) {\n+        // If nums.length < 2, means that we do not\n+        // need to move at all.\n+        if (nums == null || nums.length < 2) {\n+            return 0;\n+        }\n+\n+        // First set up current region, which is\n+        // from 0 to nums[0].\n+        int l = 0;\n+        int r = nums[0];\n+        // Since the length of nums is greater than\n+        // 1, we need at least 1 step.\n+        int step = 1;\n+\n+        // We go through all elements in the region.\n+        while (l <= r) {\n+\n+            // If the right of current region is greater\n+            // than nums.length - 1, that means we are done.\n+            if (r >= nums.length - 1) {\n+                return step;\n+            }\n+\n+            // We should know how far can we reach in current\n+            // region.\n+            int max = Integer.MIN_VALUE;\n+            for (; l <= r; l++) {\n+                max = Math.max(max, l + nums[l]);\n+            }\n+\n+            // If we can reach far more in this round, we update\n+            // the boundary of current region, and also add a step.\n+            if (max > r) {\n+                l = r;\n+                r = max;\n+                step++;\n+            }\n+        }\n+\n+        // We can not finish the job.\n+        return -1;\n+    }\n+}\n\\ No newline at end of file"
  }
]
