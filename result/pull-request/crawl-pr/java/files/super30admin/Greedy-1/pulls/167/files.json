[
  {
    "sha": "15fee4eec819f1063db7fecfa9e6a3158583ce3a",
    "filename": "Candy.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/65920b555ac590bce623fdec823972f086b9cd24/Candy.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/65920b555ac590bce623fdec823972f086b9cd24/Candy.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/Candy.java?ref=65920b555ac590bce623fdec823972f086b9cd24",
    "patch": "@@ -0,0 +1,38 @@\n+//Greedy\n+//TC: O(4N)\n+//SC: O(N)\n+// Did it run successfully on Leetcode? : Yes\n+class Solution {\n+    public int candy(int[] ratings) {\n+        if (ratings == null || ratings.length == 0)\n+            return 0;\n+        int [] candies = new int[ratings.length];\n+        \n+        // give 1 candy to every child in the beginning\n+        Arrays.fill(candies, 1);\n+        \n+         //left pass -> if the current child's rating is higher than its left neigbor, \n+        // then current child's rating =  left neigbor's rating + 1;\n+        for ( int i = 1; i < candies.length; i++ )\n+        {\n+            if (ratings[i] > ratings[i-1])\n+                candies[i] = candies[i-1] + 1;\n+        }\n+        //right pass -> if the current child's rating is higher than its right neigbor, \n+        // then current child's rating = \n+       for ( int i = candies.length-2; i >= 0; i-- )\n+        {\n+            if (ratings[i] > ratings[i+1])\n+                candies[i] = Math.max(candies[i], candies[i+1] + 1);\n+        }\n+        int sum = 0;\n+        for ( int i = 0; i < candies.length; i++ )\n+        {\n+            sum += candies[i];\n+        }\n+        return sum;\n+    }\n+}\n+\n+\n+    "
  },
  {
    "sha": "4247a7e72da5b44a642f83c579cafebc102fb71b",
    "filename": "JumpGame.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/65920b555ac590bce623fdec823972f086b9cd24/JumpGame.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/65920b555ac590bce623fdec823972f086b9cd24/JumpGame.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/JumpGame.java?ref=65920b555ac590bce623fdec823972f086b9cd24",
    "patch": "@@ -0,0 +1,45 @@\n+// TC: O(N)\n+// SC: O(1)\n+// Did it run successfully on Leetcode? : Yes\n+class Solution {\n+    public boolean canJump(int[] nums) {\n+        int n = nums.length;\n+        int lastGoodPosition = n-1;\n+        \n+        for ( int i = n-2; i >= 0; i--)\n+        {\n+            if (i + nums[i] >= lastGoodPosition)\n+            {\n+                lastGoodPosition = i;\n+            }\n+        }\n+            \n+        return lastGoodPosition == 0;\n+    }\n+}\n+\n+// TLE\n+// TC: Exponential\n+// SC: O(N) -> recursive stack size\n+// Did it run successfully on Leetcode? : TLE\n+class Solution {\n+    public boolean canJump(int[] nums) {\n+        if ( nums == null || nums.length == 0)\n+            return false;\n+        return dfs(nums, 0);\n+    }\n+    private boolean dfs(int[] nums, int index)\n+    {\n+        //base\n+        if ( index >= nums.length)\n+            return false;\n+        \n+        //logic\n+        for ( int j = 1; j <= nums[index] ; j++)\n+        {\n+            if (dfs(nums, index+j))\n+                return true;\n+        }\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "91a856abe54ed4abd317c5ab638d6ff242e489a2",
    "filename": "JumpGame2.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/65920b555ac590bce623fdec823972f086b9cd24/JumpGame2.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/65920b555ac590bce623fdec823972f086b9cd24/JumpGame2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/JumpGame2.java?ref=65920b555ac590bce623fdec823972f086b9cd24",
    "patch": "@@ -0,0 +1,25 @@\n+// TC: O(N)\n+// SC: O(1) \n+// Did it run successfully on Leetcode? : Yes\n+class Solution {\n+ public int jump(int[] nums) {\n+     int n = nums.length;\n+     if(nums == null || nums.length == 0)\n+            return 0;\n+     if (n < 2) \n+        return 0;    \n+     int jumps = 1;\n+     int curr_interval = nums[0];\n+     int next_interval = nums[0];\n+     for (int i = 1; i < n; i++)\n+     {\n+         next_interval = Math.max(next_interval, i + nums[i]);\n+         if (i < nums.length-1 && curr_interval == i)\n+         {\n+             curr_interval = next_interval;\n+             jumps++;\n+         }\n+     }\n+     return jumps; \n+   }\n+}"
  }
]
