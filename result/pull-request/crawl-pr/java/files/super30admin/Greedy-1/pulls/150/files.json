[
  {
    "sha": "a979f6545f137d66a455a3153ca3ec3a25440f85",
    "filename": "candy.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/5c975eedfb45caca6b66443cead27e1f35ef95d2/candy.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/5c975eedfb45caca6b66443cead27e1f35ef95d2/candy.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/candy.java?ref=5c975eedfb45caca6b66443cead27e1f35ef95d2",
    "patch": "@@ -0,0 +1,29 @@\n+class Solution {\n+    public int candy(int[] ratings) {\n+     \n+        int[] candies = new int[ratings.length];\n+        Arrays.fill(candies,1);\n+        //left pass\n+        for(int i=1;i<ratings.length;i++){\n+            if(ratings[i] > ratings[i-1]){\n+                candies[i] = candies[i-1] + 1;\n+            }\n+        }\n+        //right pass\n+        for(int i =ratings.length -2;i>=0;i--){\n+            if(ratings[i] > ratings[i+1]){\n+                candies[i] = Math.max(candies[i],candies[i+1] + 1);\n+            }\n+        }\n+        \n+        int sum = 0;\n+        for(int i:candies){\n+            //System.out.println(i);\n+            sum += i;\n+        }\n+        return sum;\n+        \n+    }\n+}\n+//Time Complexity: O(n)\n+//Space Complexity: O(n)"
  },
  {
    "sha": "02ca49cfedb3d1ed9699e464c8519c1eebe6c3fc",
    "filename": "jump.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/5c975eedfb45caca6b66443cead27e1f35ef95d2/jump.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/5c975eedfb45caca6b66443cead27e1f35ef95d2/jump.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/jump.java?ref=5c975eedfb45caca6b66443cead27e1f35ef95d2",
    "patch": "@@ -0,0 +1,15 @@\n+class Solution {\n+    public boolean canJump(int[] nums) {\n+        \n+        int reachable = 0;\n+        for(int i=0;i<nums.length;i++){\n+            if(reachable < i)\n+                return false;\n+            reachable = Math.max(reachable,i+nums[i]);\n+        }\n+        return true;\n+    }\n+}\n+\n+//Time Complexity: O(n)\n+//Space Complexity: O(1)"
  }
]
