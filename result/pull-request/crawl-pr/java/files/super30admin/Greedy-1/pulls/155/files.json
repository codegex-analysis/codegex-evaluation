[
  {
    "sha": "036d1eee7e80e08a4aff402de2910d76c204e623",
    "filename": "candy135",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/4134879ea2cce6fc72efd1be105af8bcdd653dbe/candy135",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/4134879ea2cce6fc72efd1be105af8bcdd653dbe/candy135",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/candy135?ref=4134879ea2cce6fc72efd1be105af8bcdd653dbe",
    "patch": "@@ -0,0 +1,32 @@\n+class Solution {\n+    \n+    //135. Candy\n+    //Time compelxity : O(n)\n+    //Space complexity : O(n)\n+    public int candy(int[] ratings) {\n+        \n+        if(ratings == null || ratings.length ==0)\n+            return 0;\n+        int[] res = new int[ratings.length];\n+        int sum =0;\n+        Arrays.fill(res,1);\n+        //left pass\n+        for(int i =1;i < ratings.length; i++){\n+            if(ratings[i] > ratings[i-1]){\n+                res[i] = res[i-1]+1;\n+            }\n+        }\n+        \n+        //right pass\n+        for(int i = ratings.length-2;i>=0;i--){\n+            if(ratings[i] > ratings[i+1]){\n+               res[i]= Math.max(res[i],res[i+1]+1);\n+            }\n+        }\n+        \n+        for(int i : res){\n+            sum += i;\n+        }\n+        return sum;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "098af6731bbf1460e26717344a5b0791869c98b5",
    "filename": "jumGame2",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/4134879ea2cce6fc72efd1be105af8bcdd653dbe/jumGame2",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/4134879ea2cce6fc72efd1be105af8bcdd653dbe/jumGame2",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/jumGame2?ref=4134879ea2cce6fc72efd1be105af8bcdd653dbe",
    "patch": "@@ -0,0 +1,28 @@\n+class Solution {\n+    \n+    //45. Jump Game II\n+    //Time complexity : O(n)\n+    //Space complexity :O(1)\n+    \n+    \n+    public int jump(int[] nums) {\n+        \n+        if(nums == null || nums.length <2)\n+            return 0;\n+        \n+       int currInt =  nums[0];\n+       int nextInt = nums[0];\n+       int jumps=1;\n+        \n+        for(int i=1;i< nums.length;i++){\n+            \n+           \n+           nextInt = Math.max(nextInt,i+nums[i]) ;\n+            if(i < nums.length-1 && currInt == i){\n+                currInt = nextInt;\n+                jumps++;\n+            }\n+        }\n+        return jumps;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "24238fe4e78e6fb30f546db2c8e9e67f99c6b0d2",
    "filename": "jumpGame",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/4134879ea2cce6fc72efd1be105af8bcdd653dbe/jumpGame",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/4134879ea2cce6fc72efd1be105af8bcdd653dbe/jumpGame",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/jumpGame?ref=4134879ea2cce6fc72efd1be105af8bcdd653dbe",
    "patch": "@@ -0,0 +1,24 @@\n+class Solution {\n+    \n+    //55. Jump Game\n+    //Time complexity : O(n)\n+    //Space complexity : O(1)\n+    \n+    public boolean canJump(int[] nums) {\n+        if(nums == null || nums.length < 2)\n+            return true;\n+        \n+        int n = nums.length;\n+        int destination =n-1;\n+        \n+        //Start from the end and add index to it's value. This would give the maximum jumps it can take\n+        for(int i=n-2; i >=0; i--){\n+            \n+            if(i+nums[i] >= destination){\n+                destination = i;\n+            }\n+        }\n+       return (destination==0);\n+        \n+    }\n+}\n\\ No newline at end of file"
  }
]
