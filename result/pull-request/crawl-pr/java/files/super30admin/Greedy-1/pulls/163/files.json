[
  {
    "sha": "0d46eb57b68e80318e51f100f4f92539a6df8221",
    "filename": "Candy.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/d8866c255b5f8a7f73d99eb0d6e700226a91ed1e/Candy.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/d8866c255b5f8a7f73d99eb0d6e700226a91ed1e/Candy.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/Candy.java?ref=d8866c255b5f8a7f73d99eb0d6e700226a91ed1e",
    "patch": "@@ -0,0 +1,36 @@\n+//Time Complexity: o(n)\n+//Space Complexity: 0(n)\n+//Expln: First iterate from left to right and if the value is greater than previous  and candies are less or equals increment the current by prev+1,\n+// Iterate from r to l do the same thing if the val is greater than next and candies are less or equals increment curr by next +1.\n+// Iterate through the candies to find the total result. \n+class Solution {\n+    public int candy(int[] ratings) {\n+        int len = ratings.length;\n+        int[] candies = new int[len];\n+        Arrays.fill(candies, 1);\n+        int res = 0;\n+        for(int i =0; i < len; i++)\n+        {\n+            if(i-1 >= 0)\n+            {\n+                if (ratings[i] > ratings[i-1] && candies[i] <= candies[i-1]) {\n+                    candies[i] = candies[i-1]+1;\n+                }   \n+            }\n+        }\n+        for(int i = len-1; i>=0; i--)\n+        {\n+            if(i+1 < len)\n+            {\n+                if (ratings[i] > ratings[i+1] && candies[i] <= candies[i+1]){\n+                    candies[i] = candies[i+1] + 1;\n+                }\n+            }\n+        }\n+        for(int j =0; j < len; j++)\n+        {\n+            res += candies[j];\n+        }\n+        return res;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "be5c73bcc80d66d7d3853f31d73bd459932d72c4",
    "filename": "JumpGame.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/d8866c255b5f8a7f73d99eb0d6e700226a91ed1e/JumpGame.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/d8866c255b5f8a7f73d99eb0d6e700226a91ed1e/JumpGame.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/JumpGame.java?ref=d8866c255b5f8a7f73d99eb0d6e700226a91ed1e",
    "patch": "@@ -0,0 +1,22 @@\n+//Time Complexity: o(n)\n+//Space Complexity; 0(1)\n+//Expln: Traverse the array from back by setting targets, Initially the target is last element and if we are able to reach\n+// target set that element as a next target and iterate through the array. At the end if the target is 0. Then we are able to reach\n+// to the end.\n+class Solution {\n+    public boolean canJump(int[] nums) {\n+        int len = nums.length;\n+        if (len < 2) return true;\n+        int target = len -1;\n+        for(int i = len -2; i >=0; i--)\n+        {\n+            if(nums[i] + i >= target)\n+            {\n+                target = i;\n+            }\n+        }\n+        if(target == 0)\n+            return true;\n+        return false;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "315b6670b8afa09be57f41029df9f8e32ce94e6e",
    "filename": "JumpGame2.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/super30admin/Greedy-1/blob/d8866c255b5f8a7f73d99eb0d6e700226a91ed1e/JumpGame2.java",
    "raw_url": "https://github.com/super30admin/Greedy-1/raw/d8866c255b5f8a7f73d99eb0d6e700226a91ed1e/JumpGame2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-1/contents/JumpGame2.java?ref=d8866c255b5f8a7f73d99eb0d6e700226a91ed1e",
    "patch": "@@ -0,0 +1,23 @@\n+//Time Complexity: o(n)\n+//Space Complexity: o(1)\n+//Expln: Iterate through the array and keep max location we can reach in nextint and intitally the max location we can reach \n+// first element. while iterating keep next max we can reach in nextint by calculating i+nums[i], when we reach the curr int\n+// that means we took a jump increment it and store the nextint which we compute in currint and keep doing this and keep calc again the next max\n+//we can reach. In this way if we reach the end element. return jump.\n+class Solution {\n+    public boolean canJump(int[] nums) {\n+        int len = nums.length;\n+        if (len < 2) return true;\n+        int target = len -1;\n+        for(int i = len -2; i >=0; i--)\n+        {\n+            if(nums[i] + i >= target)\n+            {\n+                target = i;\n+            }\n+        }\n+        if(target == 0)\n+            return true;\n+        return false;\n+    }\n+}\n\\ No newline at end of file"
  }
]
