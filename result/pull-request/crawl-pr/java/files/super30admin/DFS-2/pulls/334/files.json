[
  {
    "sha": "0cfd007976425b419971dd09623a5700b60784d6",
    "filename": "decode-string.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/super30admin/DFS-2/blob/4a072262fe64a8dc13df3b102a560aa718a8e047/decode-string.java",
    "raw_url": "https://github.com/super30admin/DFS-2/raw/4a072262fe64a8dc13df3b102a560aa718a8e047/decode-string.java",
    "contents_url": "https://api.github.com/repos/super30admin/DFS-2/contents/decode-string.java?ref=4a072262fe64a8dc13df3b102a560aa718a8e047",
    "patch": "@@ -0,0 +1,65 @@\n+//Time complexity : O(n) [n = length of string]\n+//Space complexity : O(n)\n+// Did this code successfully run on Leetcode :\n+Yes\n+// Any problem you faced while coding this :\n+\n+\n+// Your code here along with comments explaining your approach\n+\n+\n+class Solution {\n+    public String decodeString(String s) {\n+        //base case\n+        if(s == null || s.length() == 0) return \"\";\n+        \n+        //define two stacks to store numbers in the given string and characters\n+        \n+        Stack<String> strStack = new Stack<>();\n+        Stack<Integer> numStack = new Stack<>();\n+        \n+        //define the variabled needed to process the result\n+        String str = \"\";\n+        int num = 0;\n+        \n+        //traverse the string\n+        for(int i = 0; i< s.length();i++){\n+            char c = s.charAt(i);\n+            //check if c is digit, string, open brace or close brace\n+            \n+            if(Character.isDigit(c)){\n+                //convert character to num\n+                num = num * 10 + (c - '0');\n+            }\n+            /*If it is open brace we will push the current number and current string to respective stacks*/\n+            else if(c == '['){\n+                numStack.push(num);\n+                strStack.push(str);\n+                \n+                //now reset the num and str to process remaining string\n+                str = \"\";\n+                num = 0;\n+            }\n+/*\n+if it is closing brace we will pop from number stack and create a new string with this number and the current string stored in str\n+*/\n+            else if(c == ']'){\n+                String newStr = \"\";\n+                int numPopped = numStack.pop();\n+                \n+                for(int k = 0; k<numPopped; k++){\n+                    newStr += str;\n+                    \n+                    }\n+                \n+                str = strStack.pop();\n+                str = str + newStr;\n+            }\n+            //if it's a character append to str\n+            else{\n+                str += c;\n+            }\n+        }\n+      return str;  \n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "employee-importance.java",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/super30admin/DFS-2/blob/4a072262fe64a8dc13df3b102a560aa718a8e047/employee-importance.java",
    "raw_url": "https://github.com/super30admin/DFS-2/raw/4a072262fe64a8dc13df3b102a560aa718a8e047/employee-importance.java",
    "contents_url": "https://api.github.com/repos/super30admin/DFS-2/contents/employee-importance.java?ref=4a072262fe64a8dc13df3b102a560aa718a8e047"
  },
  {
    "sha": "47e83d3282f9b95714f7915fde2ab4b37269ea7c",
    "filename": "number-of-islands.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/super30admin/DFS-2/blob/4a072262fe64a8dc13df3b102a560aa718a8e047/number-of-islands.java",
    "raw_url": "https://github.com/super30admin/DFS-2/raw/4a072262fe64a8dc13df3b102a560aa718a8e047/number-of-islands.java",
    "contents_url": "https://api.github.com/repos/super30admin/DFS-2/contents/number-of-islands.java?ref=4a072262fe64a8dc13df3b102a560aa718a8e047",
    "patch": "@@ -0,0 +1,124 @@\n+// Time Complexity :\n+DFS - O(M*N) M = no.of rows in grid and N=no.of columns in grid\n+// Space Complexity :\n+DFS - O(M*N) M = no.of rows in grid and N=no.of columns in grid when the matrix has all 1\n+// Did this code successfully run on Leetcode :\n+Yes\n+// Any problem you faced while coding this :\n+\n+\n+// Your code here along with comments explaining your approach\n+\n+\n+//DFS\n+\n+class Solution {\n+    public int numIslands(char[][] grid) {\n+        \n+        //Define basecase\n+        if(grid == null || grid.length == 0) return 0;\n+        \n+        //define result\n+        int result = 0;\n+        \n+        //traverse through matrix and find the 1's\n+        \n+        for(int i = 0;i< grid.length;i++){\n+            for(int j = 0; j < grid[0].length ; j++){\n+                if(grid[i][j] == '1'){\n+                    result = result + helper(grid, i, j);\n+                }\n+            }\n+        }\n+        \n+        return result;\n+        \n+    }\n+    \n+    \n+    private int helper(char[][] grid, int i, int j){\n+        //sanity checks\n+        if(i < 0 || i >= grid.length || j < 0 || j  >= grid[0].length || grid[i][j] == '0'){\n+            return 0;\n+        }\n+        \n+        //mark the current element as visited by changing 1 to 0;\n+        grid[i][j] = '0';\n+        \n+        //call helper function recursively on all 4 directions\n+        helper(grid, i+1, j);\n+        helper(grid, i-1, j);\n+        helper(grid, i, j+1);\n+        helper(grid, i, j-1);\n+        \n+        return 1;\n+        \n+    }\n+}\n+\n+\n+==============================================================\n+//BFS APPROACH\n+\n+class Solution {\n+    public int numIslands(char[][] grid) {\n+        \n+        //BFS\n+        \n+        //Edge case\n+        if(grid == null || grid.length == 0) return 0;\n+        \n+        int result = 0;\n+        \n+        //Queue for BFS\n+        Queue<int []> q = new LinkedList<>();\n+        \n+    \n+        \n+        for(int i=0; i< grid.length ; i++){\n+            for(int j = 0; j< grid[0].length ; j++){\n+                if(grid[i][j] == '1'){\n+                   result ++ ;\n+                   //mark it as visited\n+                   grid [i][j] = '0';\n+                   q.offer(new int[]{i,j});\n+                   \n+                    \n+                }\n+          \n+        //Define directions array \n+        int [] [] directions = {{0,1},{0,-1},{1,0},{-1,0}};\n+        \n+        //apply BFS\n+        while(!q.isEmpty()){\n+            int size = q.size();\n+           \n+            for(int k =0;k< size; k++){\n+                //poll from queue    \n+                int [] x = q.poll();\n+                int x1 = x[0];\n+                int x2 = x[1];\n+                //traverse through the valid directions\n+                for(int[] direction : directions){\n+                    int newx1 = direction[0] + x1;\n+                    int newx2 = direction[1] + x2;\n+                    \n+                    if(newx1 < 0 || newx1 >= grid.length || newx2 < 0 || newx2 >= grid[0].length || grid[newx1][newx2] == '0'){\n+                        continue;\n+                    }\n+                    \n+                   \n+                    q.offer(new int [] {newx1,newx2});\n+                    grid[newx1][newx2] = '0';\n+                }\n+            }\n+        }\n+                \n+                  }\n+        }\n+        \n+        \n+     return result;\n+        \n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
    "filename": "rotten-oranjes.java",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/super30admin/DFS-2/blob/4a072262fe64a8dc13df3b102a560aa718a8e047/rotten-oranjes.java",
    "raw_url": "https://github.com/super30admin/DFS-2/raw/4a072262fe64a8dc13df3b102a560aa718a8e047/rotten-oranjes.java",
    "contents_url": "https://api.github.com/repos/super30admin/DFS-2/contents/rotten-oranjes.java?ref=4a072262fe64a8dc13df3b102a560aa718a8e047"
  }
]
