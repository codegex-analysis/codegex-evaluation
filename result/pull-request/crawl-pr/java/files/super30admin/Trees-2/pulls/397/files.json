[
  {
    "sha": "cf388c922890519e8774e3e71e5ed03a0c3fa342",
    "filename": "ConstructBTInPos.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/super30admin/Trees-2/blob/ec7a05f2f2800593595893c4e32b174bfc93bc2a/ConstructBTInPos.java",
    "raw_url": "https://github.com/super30admin/Trees-2/raw/ec7a05f2f2800593595893c4e32b174bfc93bc2a/ConstructBTInPos.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-2/contents/ConstructBTInPos.java?ref=ec7a05f2f2800593595893c4e32b174bfc93bc2a",
    "patch": "@@ -0,0 +1,40 @@\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode() {}\n+ *     TreeNode(int val) { this.val = val; }\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\n+ *         this.val = val;\n+ *         this.left = left;\n+ *         this.right = right;\n+ *     }\n+ * }\n+ */\n+class Solution {\n+    public TreeNode buildTree(int[] inorder, int[] postorder) {\n+        if(postorder == null || postorder.length == 0) return null;\n+        TreeNode root = new TreeNode(postorder[postorder.length-1]);\n+        int idx = -1;\n+        \n+        for(int i=0; i<inorder.length; i++){\n+            if(inorder[i] == root.val){\n+                idx = i;\n+                break;\n+            }\n+        }\n+        int[] inLeft = Arrays.copyOfRange(inorder, 0, idx);\n+        int[] inRight = Arrays.copyOfRange(inorder, idx+1, inorder.length);\n+        int[] poLeft = Arrays.copyOfRange(postorder, 0,idx);\n+        int[] poRight = Arrays.copyOfRange(postorder, idx, postorder.length-1);\n+        \n+        root.left = buildTree(inLeft, poLeft);\n+        root.right = buildTree(inRight, poRight);\n+        \n+        return root;\n+    }\n+}\n+\n+//TC: O(N)"
  },
  {
    "sha": "92d12f727af2745b358b7cb357e2f761d6d0dc9a",
    "filename": "RootToLeafSum.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/super30admin/Trees-2/blob/ec7a05f2f2800593595893c4e32b174bfc93bc2a/RootToLeafSum.java",
    "raw_url": "https://github.com/super30admin/Trees-2/raw/ec7a05f2f2800593595893c4e32b174bfc93bc2a/RootToLeafSum.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-2/contents/RootToLeafSum.java?ref=ec7a05f2f2800593595893c4e32b174bfc93bc2a",
    "patch": "@@ -0,0 +1,37 @@\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode() {}\n+ *     TreeNode(int val) { this.val = val; }\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\n+ *         this.val = val;\n+ *         this.left = left;\n+ *         this.right = right;\n+ *     }\n+ * }\n+ */\n+class Solution {\n+    public boolean isSymmetric(TreeNode root) {\n+        if(root == null){\n+            return true;\n+        }\n+        \n+        return recurr(root.left, root.right);\n+    }\n+    \n+    private boolean recurr(TreeNode N1, TreeNode N2){\n+        if(N1==null && N2 == null){\n+            return true;\n+        }\n+        if(N1 == null || N2 == null || N1.val != N2.val){\n+            return false;\n+        }\n+        return recurr(N1.left, N2.right) && recurr(N1.right, N2.left);\n+    }\n+}\n+\n+//TC: O(N)\n+//SC: O(1) if recursion stack is counted it would be O(height of the tree)"
  }
]
