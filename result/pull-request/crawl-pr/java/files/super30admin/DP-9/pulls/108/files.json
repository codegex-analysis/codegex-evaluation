[
  {
    "sha": "9869fa8d9ab06b370d0c68f451e1a8d0b98c79fd",
    "filename": "LengthOfLIS.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/super30admin/DP-9/blob/dee99dd78498d658cc0446d7599383ef6fea2622/LengthOfLIS.java",
    "raw_url": "https://github.com/super30admin/DP-9/raw/dee99dd78498d658cc0446d7599383ef6fea2622/LengthOfLIS.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-9/contents/LengthOfLIS.java?ref=dee99dd78498d658cc0446d7599383ef6fea2622",
    "patch": "@@ -0,0 +1,49 @@\n+// Time Complexity : The time complexity is O(nlogn) where n is the length of array\n+// Space Complexity : The space complexity is O(n) where n is the length of array\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+\n+    public int lengthOfLIS(int[] nums) {\n+\n+        int n = nums.length;\n+\n+        int[] dp = new int[n];\n+        dp[0] = nums[0];\n+        int index = 1;\n+\n+        for(int i=1;i<n;i++){\n+            //if the current number forms an increasing sequence\n+            if(dp[index-1] < nums[i]){\n+                dp[index] = nums[i];\n+                index++;\n+            }\n+            // if the current number doesnt form an increasing sequence, do binary search to replace the closest next element\n+            else{\n+                int idx = binarySearch(dp,0,index-1,nums[i]);\n+                dp[idx] = nums[i];\n+            }\n+        }\n+        return index;\n+    }\n+\n+    public int binarySearch(int[] nums,int start,int end,int target){\n+\n+        while(start <= end){\n+            int mid = start + (end-start)/2;\n+            if(nums[mid] == target){\n+                return mid;\n+            }\n+            else if(nums[mid] > target){\n+                end = mid-1;\n+            }\n+            else{\n+                start = mid+1;\n+            }\n+        }\n+        return start;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "83dd572d0ad1947d3b2433cac5e9fabc1538a192",
    "filename": "MaxEnvelopes.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/super30admin/DP-9/blob/dee99dd78498d658cc0446d7599383ef6fea2622/MaxEnvelopes.java",
    "raw_url": "https://github.com/super30admin/DP-9/raw/dee99dd78498d658cc0446d7599383ef6fea2622/MaxEnvelopes.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-9/contents/MaxEnvelopes.java?ref=dee99dd78498d658cc0446d7599383ef6fea2622",
    "patch": "@@ -0,0 +1,32 @@\n+// Time Complexity : The time complexity is O(n2) where n is the length of array\n+// Space Complexity : The space complexity is O(n) where n is the length of array\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+\n+    public int maxEnvelopes(int[][] envelopes) {\n+\n+        int n = envelopes.length;\n+        int max = 0;\n+        int[] dp = new int[n];\n+\n+        //sort the array\n+        Arrays.sort(envelopes,(int[] a,int[] b) -> a[0] - b[0]);\n+\n+        for(int i=0;i<n;i++){\n+            dp[i] = 1;\n+            //check for russian doll condition\n+            for(int j=0;j<i;j++){\n+                if(envelopes[j][0] < envelopes[i][0] && envelopes[j][1] < envelopes[i][1]){\n+                    dp[i] = Math.max(dp[i],1+dp[j]);\n+                }\n+            }\n+            max = Math.max(max,dp[i]);\n+        }\n+\n+        return max;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1739a9cbcbab2e211048d4cb09ef2afe514e4081",
    "filename": "sample.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/super30admin/DP-9/blob/255e8902457524f8c5356bb589a34f43f9e81896/sample.java",
    "raw_url": "https://github.com/super30admin/DP-9/raw/255e8902457524f8c5356bb589a34f43f9e81896/sample.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-9/contents/sample.java?ref=255e8902457524f8c5356bb589a34f43f9e81896",
    "patch": "@@ -1,7 +0,0 @@\n-// Time Complexity :\n-// Space Complexity :\n-// Did this code successfully run on Leetcode :\n-// Any problem you faced while coding this :\n-\n-\n-// Your code here along with comments explaining your approach"
  }
]
