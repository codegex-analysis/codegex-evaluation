[
  {
    "sha": "03aeb36da6244a4d25f33b4dffb656a4c119045b",
    "filename": "LinkedListCycle2.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/981590235931fdb6514b7971bf4d8dd8c17751ae/LinkedListCycle2.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/981590235931fdb6514b7971bf4d8dd8c17751ae/LinkedListCycle2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/LinkedListCycle2.java?ref=981590235931fdb6514b7971bf4d8dd8c17751ae",
    "patch": "@@ -0,0 +1,42 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(1)\n+// Did this code successfully run on Leetcode : yes\n+// Any problem you faced while coding this : No\n+\n+// Using slow and fast pointer approach to detect if the cycle exists.\n+// Again iterating from the start and the slow pointer we can find the start of the cycle.\n+// Since the slow pointer after cycle detection will be x nodes from the start of cycle same as the x nodes from the start of the list.\n+\n+// Your code here along with comments explaining your approach\n+\n+/**\n+ * Definition for singly-linked list.\n+ * class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode(int x) {\n+ *         val = x;\n+ *         next = null;\n+ *     }\n+ * }\n+ */\n+public class Solution {\n+    public ListNode detectCycle(ListNode head) {\n+        if(head == null) return head;\n+        ListNode slow = head,fast = head.next;\n+        while(slow != fast){\n+            if(fast == null || fast.next == null) return null;\n+            slow = slow.next;\n+            fast = fast.next.next;\n+        }\n+        slow = head;\n+        fast = fast.next;\n+        while( slow != fast){\n+            if(fast == null || fast.next == null)\n+                return null;\n+            slow = slow.next;\n+            fast = fast.next;\n+        }\n+        return fast;\n+    }\n+}"
  },
  {
    "sha": "b76ed27f453e006a60afcc04855a883c9b73835d",
    "filename": "RemoveNthNode.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/981590235931fdb6514b7971bf4d8dd8c17751ae/RemoveNthNode.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/981590235931fdb6514b7971bf4d8dd8c17751ae/RemoveNthNode.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/RemoveNthNode.java?ref=981590235931fdb6514b7971bf4d8dd8c17751ae",
    "patch": "@@ -0,0 +1,38 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(1)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+\n+// Using two pointers to maintain n difference between them till the second one reaches the end of the list.\n+// Then the first pointer will be the previous of the node to be deleted. Delete by pointing the next pointer to the node.next.next\n+\n+// Your code here along with comments explaining your approach\n+\n+/**\n+ * Definition for singly-linked list.\n+ * public class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode() {}\n+ *     ListNode(int val) { this.val = val; }\n+ *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n+ * }\n+ */\n+class Solution {\n+    public ListNode removeNthFromEnd(ListNode head, int n) {\n+        ListNode dummy = new ListNode(0);\n+        dummy.next = head;\n+        int len = n;\n+        ListNode fast = dummy, slow = dummy;\n+        while(len > 0){\n+            fast = fast.next;\n+            len--;\n+        }\n+        while(fast.next!= null){\n+            slow = slow.next;\n+            fast = fast.next;\n+        }\n+        slow.next = slow.next.next;\n+        return dummy.next;\n+    }\n+}"
  },
  {
    "sha": "f9e021ad82e38fbf6661da8ee508152fedf1254a",
    "filename": "ReverseLinkedList.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/981590235931fdb6514b7971bf4d8dd8c17751ae/ReverseLinkedList.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/981590235931fdb6514b7971bf4d8dd8c17751ae/ReverseLinkedList.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/ReverseLinkedList.java?ref=981590235931fdb6514b7971bf4d8dd8c17751ae",
    "patch": "@@ -0,0 +1,31 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(1)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+\n+// Using 3 pointers previous, current and next pointers to reverse the direction of the next nodes\n+\n+// Your code here along with comments explaining your approach\n+\n+/**\n+ * Definition for singly-linked list.\n+ * public class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode() {}\n+ *     ListNode(int val) { this.val = val; }\n+ *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n+ * }\n+ */\n+class Solution {\n+    public ListNode reverseList(ListNode head) {\n+        ListNode curr = head, prev = null;\n+        while(curr !=  null){\n+            ListNode next = curr.next;\n+            curr.next = prev;\n+            prev = curr;\n+            curr = next;\n+        }\n+        return prev;\n+    }\n+}"
  }
]
