[
  {
    "sha": "bed9f9c63e368d98e7455efbf479a03b2f6c5da9",
    "filename": "Sol1.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/ebe4e51b77517c78798412b1830b63bb354d32dd/Sol1.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/ebe4e51b77517c78798412b1830b63bb354d32dd/Sol1.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/Sol1.java?ref=ebe4e51b77517c78798412b1830b63bb354d32dd",
    "patch": "@@ -0,0 +1,46 @@\n+/**\n+ * Definition for singly-linked list.\n+ * public class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode() {}\n+ *     ListNode(int val) { this.val = val; }\n+ *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n+ * }\n+ */\n+\n+//TC: O(N)\n+//SC: O(1)\n+class Solution {\n+    public ListNode removeNthFromEnd(ListNode head, int n) {\n+        //Find the nth node \n+        // Once found just skip the next node \n+        ListNode fast = head;\n+        int slowCount = 0;\n+        int fastCount = 0;\n+        while(fast!= null && fast.next!=null) {\n+            slowCount += 1;\n+            fastCount += 2;\n+            fast = fast.next.next;\n+        }\n+        if(fast != null) {\n+            fastCount +=1;\n+        }\n+        slowCount  = 0;\n+        fast = head;\n+        if(fastCount -n == 0)\n+            return head.next;\n+        \n+        while(fast != null) {\n+            slowCount += 1;\n+            if(slowCount == fastCount -n ) {\n+                break;\n+            }\n+            fast = fast.next;\n+        }\n+        \n+        fast.next = fast.next.next;\n+        return head;\n+        \n+    }\n+}"
  },
  {
    "sha": "db68d15e7af46620914b3e212b6e12b78a3c2b64",
    "filename": "Sol2.java",
    "status": "added",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/ebe4e51b77517c78798412b1830b63bb354d32dd/Sol2.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/ebe4e51b77517c78798412b1830b63bb354d32dd/Sol2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/Sol2.java?ref=ebe4e51b77517c78798412b1830b63bb354d32dd",
    "patch": "@@ -0,0 +1,11 @@\n+public ListNode reverseList(ListNode head) {\n+    ListNode prev = null;\n+    ListNode curr = head;\n+    while (curr != null) {\n+        ListNode nextTemp = curr.next;\n+        curr.next = prev;\n+        prev = curr;\n+        curr = nextTemp;\n+    }\n+    return prev;\n+}"
  },
  {
    "sha": "86e70f4bf4a30bc4472496acbfa62eb769bd6b64",
    "filename": "sol3.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/ebe4e51b77517c78798412b1830b63bb354d32dd/sol3.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/ebe4e51b77517c78798412b1830b63bb354d32dd/sol3.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/sol3.java?ref=ebe4e51b77517c78798412b1830b63bb354d32dd",
    "patch": "@@ -0,0 +1,53 @@\n+/**\n+ * Definition for singly-linked list.\n+ * class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode(int x) {\n+ *         val = x;\n+ *         next = null;\n+ *     }\n+ * }\n+ */\n+ \n+ //TC: O(N)\n+ // SC: O(1)\n+ \n+public class Solution {\n+    public ListNode detectCycle(ListNode head) {\n+        // First check to see of a cycle in the linked list -- Two pointer technique\n+        // If there is a cycle then initalise one node to the start of the list and iterate till two \n+        // pointers meet\n+        \n+        //Check if there is a loop\n+        ListNode slow = head;\n+        ListNode fast = head;\n+        boolean loop = false;\n+        while(fast!=null && fast.next!=null){\n+            fast= fast.next.next;\n+            slow=slow.next;\n+            if(fast==slow){\n+                loop=true;\n+                break;\n+            }\n+        \n+        }\n+        \n+        slow = head;\n+        if(loop == false)\n+            return null;\n+        else{\n+            while(slow!=fast){\n+                fast=fast.next;\n+                slow=slow.next;\n+            }\n+            return slow;\n+            \n+            \n+        }\n+        \n+        \n+        \n+        \n+    }\n+}"
  }
]
