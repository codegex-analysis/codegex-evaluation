[
  {
    "sha": "1529b510c366cdf40067bc014e1452e79aa98582",
    "filename": "Problem1",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/dedd99018f331462839805130f93ba670751ec14/Problem1",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/dedd99018f331462839805130f93ba670751ec14/Problem1",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/Problem1?ref=dedd99018f331462839805130f93ba670751ec14",
    "patch": "@@ -0,0 +1,40 @@\n+/**\n+ * Definition for singly-linked list.\n+ * class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode(int x) {\n+ *         val = x;\n+ *         next = null;\n+ *     }\n+ * }\n+ */\n+public class Solution {\n+    public ListNode detectCycle(ListNode head) {\n+        ListNode slow = head;\n+        ListNode fast = head; // diff between slow and fast is 2\n+        \n+        while(fast != null && fast.next !=null){\n+            slow= slow.next; // incr by 1\n+            fast= fast.next.next; // incr by 2\n+            \n+            // found cycle \n+            if (slow == fast){\n+               // ListNode dummy = head;\n+              //  \n+               // while(dummy != slow){\n+                //    slow = slow.next;\n+                 //   dummy = dummy.next;\n+                \n+                // This will modify the linked list\n+                while(head != slow){\n+                    head = head.next;\n+                    slow = slow.next;\n+                }\n+                }\n+                \n+                return slow; // can also return dummy\n+            }return null;\n+        }\n+        \n+    } // TC O(n) , SC O(1)"
  }
]
