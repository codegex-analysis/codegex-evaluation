[
  {
    "sha": "7391486adca35e2156e98aada745d18db1800631",
    "filename": "Problem2",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/11c5c865f85ddbba84b242d6c3747bcc7fef4d2f/Problem2",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/11c5c865f85ddbba84b242d6c3747bcc7fef4d2f/Problem2",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/Problem2?ref=11c5c865f85ddbba84b242d6c3747bcc7fef4d2f",
    "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Definition for singly-linked list.\n+ * public class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode() {}\n+ *     ListNode(int val) { this.val = val; }\n+ *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n+ * }\n+ */\n+class Solution {\n+    public ListNode removeNthFromEnd(ListNode head, int n) {\n+        ListNode dummy = new ListNode(-1);\n+        // add dummy node to beginning\n+        dummy.next = head;\n+        \n+        ListNode p1 = dummy;\n+        ListNode p2 = dummy;\n+        // Check if n > 0 , if not return null\n+        \n+        // get the difference between p1 and p2 equal to n\n+        while(n>0){\n+            p2 = p2.next;\n+            n--;\n+        }\n+        \n+        while(p2.next != null){\n+            p1=p1.next;\n+            p2=p2.next;\n+        }\n+        p1.next = p1.next.next;\n+        \n+        return dummy.next;\n+    }\n+} // TC O(n) , Space complexity O(1)"
  }
]
