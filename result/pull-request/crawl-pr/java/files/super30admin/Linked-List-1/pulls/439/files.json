[
  {
    "sha": "05c8aad0b389c619d4b21fa34dedb24800f0bf93",
    "filename": "Probelm3",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/e8905c6dce39abbe4c4a622e1157eea7f9c786c7/Probelm3",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/e8905c6dce39abbe4c4a622e1157eea7f9c786c7/Probelm3",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/Probelm3?ref=e8905c6dce39abbe4c4a622e1157eea7f9c786c7",
    "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Definition for singly-linked list.\n+ * class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode(int x) {\n+ *         val = x;\n+ *         next = null;\n+ *     }\n+ * }\n+ */\n+public class Solution {\n+    public ListNode detectCycle(ListNode head) {\n+        ListNode slow = head;\n+        ListNode fast = head; // diff between slow and fast is 2\n+        \n+        while(fast != null && fast.next !=null){\n+            slow= slow.next; // incr by 1\n+            fast= fast.next.next; // incr by 2\n+            \n+            // found cycle \n+            if (slow == fast){\n+                ListNode dummy = head;\n+                \n+                while(dummy != slow){\n+                    slow = slow.next;\n+                    dummy = dummy.next;\n+                }\n+                \n+                return slow; // can also return dummy\n+            }\n+        }\n+        return null;\n+    }\n+} // TC O(n) , SC O(1)"
  }
]
