[
  {
    "sha": "4a9b903b00e44e446d70987c4358c2fd89d6e2e1",
    "filename": "que-2.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/8e85e1bd9ff9ddf1e73a27359f3b81f7f1d63486/que-2.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/8e85e1bd9ff9ddf1e73a27359f3b81f7f1d63486/que-2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/que-2.java?ref=8e85e1bd9ff9ddf1e73a27359f3b81f7f1d63486",
    "patch": "@@ -0,0 +1,27 @@\n+// Time Complexity : O(n)\r\n+// Space Complexity :O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+public class Solution {\r\n+    public ListNode detectCycle(ListNode head) {\r\n+        ListNode slow = head;\r\n+        ListNode fast = head;\r\n+        while(fast != null && fast.next !=null){\r\n+            slow = slow.next;fast = fast.next.next;\r\n+            if(slow == fast){\r\n+                //cycle\r\n+                ListNode dummy = head;\r\n+                while(dummy != slow){\r\n+                    slow = slow.next;\r\n+                    dummy = dummy.next;\r\n+                }\r\n+                return slow;\r\n+            }\r\n+        }\r\n+       return null;     \r\n+    }\r\n+    \r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a163597a75513d3184a34b9d05b0f1bcaebec349",
    "filename": "que-3.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/8e85e1bd9ff9ddf1e73a27359f3b81f7f1d63486/que-3.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/8e85e1bd9ff9ddf1e73a27359f3b81f7f1d63486/que-3.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/que-3.java?ref=8e85e1bd9ff9ddf1e73a27359f3b81f7f1d63486",
    "patch": "@@ -0,0 +1,44 @@\n+// Time Complexity :O(n)\r\n+// Space Complexity :O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+/**\r\n+ * Definition for singly-linked list.\r\n+ * public class ListNode {\r\n+ *     int val;\r\n+ *     ListNode next;\r\n+ *     ListNode() {}\r\n+ *     ListNode(int val) { this.val = val; }\r\n+ *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n+ * }\r\n+ \r\n+public class Solution {\r\n+    public ListNode reverseList(ListNode head) {\r\n+        if(head==null || head.next==null)\r\n+            return head;\r\n+        ListNode nextNode=head.next;\r\n+        ListNode newHead=reverseList(nextNode);\r\n+        nextNode.next=head;\r\n+        head.next=null;\r\n+        return newHead;\r\n+    }\r\n+}*/\r\n+public class Solution{\r\n+    public ListNode reverseList(ListNode head) {\r\n+    \r\n+    ListNode temp = head;\r\n+    ListNode prev = null;\r\n+    ListNode curr = null;\r\n+    while(temp != null){\r\n+        prev = curr;\r\n+        curr = temp;\r\n+        temp = temp.next;\r\n+        curr.next = prev;\r\n+    }\r\n+    return curr; \r\n+    }\r\n+\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "452f611fe9a3a1c96702bd813f585eec5c044a23",
    "filename": "que.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/8e85e1bd9ff9ddf1e73a27359f3b81f7f1d63486/que.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/8e85e1bd9ff9ddf1e73a27359f3b81f7f1d63486/que.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/que.java?ref=8e85e1bd9ff9ddf1e73a27359f3b81f7f1d63486",
    "patch": "@@ -0,0 +1,30 @@\n+// Time Complexity :O(n)\r\n+// Space Complexity :O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+class Solution {\r\n+    public ListNode removeNthFromEnd(ListNode head, int n) {\r\n+        \r\n+    \r\n+    ListNode start = new ListNode(0);\r\n+    ListNode slow = start, fast = start;\r\n+    slow.next = head;\r\n+    \r\n+    //Move fast in front so that the gap between slow and fast becomes n\r\n+    for(int i=0; i<=n ; i++)   {\r\n+        fast = fast.next;\r\n+    }\r\n+    //Move fast to the end, maintaining the gap\r\n+    while(fast != null) {\r\n+        slow = slow.next;\r\n+        fast = fast.next;\r\n+        }\r\n+    //Skip the desired node\r\n+    slow.next = slow.next.next;\r\n+    return start.next;\r\n+  }\r\n+    \r\n+}\n\\ No newline at end of file"
  }
]
