[
  {
    "sha": "2fc57d7b9471a866b2e9e946648d46b627d65ac2",
    "filename": "linkedListCycle2.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/4150b43c781df44cde2102d7a27fd8a75bed2294/linkedListCycle2.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/4150b43c781df44cde2102d7a27fd8a75bed2294/linkedListCycle2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/linkedListCycle2.java?ref=4150b43c781df44cde2102d7a27fd8a75bed2294",
    "patch": "@@ -0,0 +1,18 @@\n+// Problem3 (https://leetcode.com/problems/linked-list-cycle-ii/)\n+// Time Complexity : O(n)\n+// Space Complexity : O(n)\n+\n+public ListNode detectCycle(ListNode head) {\n+    Set<ListNode> visited = new HashSet<ListNode>();\n+\n+    ListNode node = head;\n+    while (node != null) {\n+        if (visited.contains(node)) {\n+            return node;\n+        }\n+        visited.add(node);\n+        node = node.next;\n+    }\n+\n+    return null;\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "06275a5c8a26a50ea958f7cf195c4609eb5c2333",
    "filename": "removeNthNode.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/4150b43c781df44cde2102d7a27fd8a75bed2294/removeNthNode.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/4150b43c781df44cde2102d7a27fd8a75bed2294/removeNthNode.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/removeNthNode.java?ref=4150b43c781df44cde2102d7a27fd8a75bed2294",
    "patch": "@@ -0,0 +1,22 @@\n+// Problem2 (https://leetcode.com/problems/remove-nth-node-from-end-of-list/)\n+\n+// Time Complexity : O(n)\n+// Space Complexity : O(1)\n+public class removeNthNode {\n+    ListNode dummy = new ListNode(0);\n+    dummy.next = head;\n+    int length  = 0;\n+    ListNode first = head;\n+    while (first != null) {\n+        length++;\n+        first = first.next;\n+    }\n+    length -= n;\n+    first = dummy;\n+    while (length > 0) {\n+        length--;\n+        first = first.next;\n+    }\n+    first.next = first.next.next;\n+    return dummy.next;\n+}"
  },
  {
    "sha": "0a335d035d0321f43860dd702316113de7e41705",
    "filename": "reverseLinkList.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/super30admin/Linked-List-1/blob/4150b43c781df44cde2102d7a27fd8a75bed2294/reverseLinkList.java",
    "raw_url": "https://github.com/super30admin/Linked-List-1/raw/4150b43c781df44cde2102d7a27fd8a75bed2294/reverseLinkList.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-1/contents/reverseLinkList.java?ref=4150b43c781df44cde2102d7a27fd8a75bed2294",
    "patch": "@@ -0,0 +1,16 @@\n+// Problem1 (https://leetcode.com/problems/reverse-linked-list/)\n+// Time Complexity : O(n)\n+// Space Complexity : O(1)\n+public class reverseLinkList {\n+    public ListNode reverseList(ListNode head) {\n+        ListNode prev = null;\n+        ListNode curr = head;\n+        while (curr != null) {\n+            ListNode nextTemp = curr.next;\n+            curr.next = prev;\n+            prev = curr;\n+            curr = nextTemp;\n+        }\n+        return prev;\n+    }\n+}"
  }
]
