[
  {
    "sha": "71b6b0f751907d2169f14dd2ad7ed16184a6b1de",
    "filename": "Partitionlabels.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/385c9f8f6024024eace4a5b1da4226b7c99d1126/Partitionlabels.java",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/385c9f8f6024024eace4a5b1da4226b7c99d1126/Partitionlabels.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/Partitionlabels.java?ref=385c9f8f6024024eace4a5b1da4226b7c99d1126",
    "patch": "@@ -0,0 +1,24 @@\n+class Solution {\n+    public List<Integer> partitionLabels(String S) {\n+        if(S == null || S.length() == 0){\n+            return null;\n+        }\n+        List<Integer> list = new ArrayList<>();\n+        int[] map = new int[26];  // record the last index of the each char\n+\n+        for(int i = 0; i < S.length(); i++){\n+            map[S.charAt(i)-'a'] = i;\n+        }\n+        // record the end index of the current sub string\n+        int last = 0;\n+        int start = 0;\n+        for(int i = 0; i < S.length(); i++){\n+            last = Math.max(last, map[S.charAt(i)-'a']);\n+            if(last == i){\n+                list.add(last - start + 1);\n+                start = last + 1;\n+            }\n+        }\n+        return list;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "5180672582edf04ece33b624dba9fde50221e84d",
    "filename": "QueueReconstruction.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/385c9f8f6024024eace4a5b1da4226b7c99d1126/QueueReconstruction.java",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/385c9f8f6024024eace4a5b1da4226b7c99d1126/QueueReconstruction.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/QueueReconstruction.java?ref=385c9f8f6024024eace4a5b1da4226b7c99d1126",
    "patch": "@@ -0,0 +1,25 @@\n+public class Solution {\n+    public int[][] reconstructQueue(int[][] people) {\n+        Arrays.sort(people, new Comparator<int[]>() {\n+            public int compare(int[] a, int[] b) {\n+                if (a[0] != b[0]) {\n+                    return a[0] - b[0];\n+                } else {\n+                    return b[1] - a[1];\n+                }\n+            } \n+        });\n+        List<Integer> list = new ArrayList<>();\n+        for (int i = 0; i < people.length; i++) {\n+            list.add(i);\n+        }\n+        int[][] res = new int[people.length][2];\n+        for (int i = 0; i < people.length; i++) {\n+            int index = list.get(people[i][1]);\n+            res[index][0] = people[i][0];\n+            res[index][1] = people[i][1];\n+            list.remove(people[i][1]);\n+        }\n+        return res;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "abe16972c67383bdd1a6124ef068b5e6da4c7ab9",
    "filename": "TaskScheduler.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/385c9f8f6024024eace4a5b1da4226b7c99d1126/TaskScheduler.java",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/385c9f8f6024024eace4a5b1da4226b7c99d1126/TaskScheduler.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/TaskScheduler.java?ref=385c9f8f6024024eace4a5b1da4226b7c99d1126",
    "patch": "@@ -0,0 +1,25 @@\n+public class Solution {\n+    public int leastInterval(char[] tasks, int n) {\n+        int[] counter = new int[26];\n+        int max = 0;\n+        int maxCount = 0;\n+        for(char task : tasks) {\n+            counter[task - 'A']++;\n+            if(max == counter[task - 'A']) {\n+                maxCount++;\n+            }\n+            else if(max < counter[task - 'A']) {\n+                max = counter[task - 'A'];\n+                maxCount = 1;\n+            }\n+        }\n+        \n+        int partCount = max - 1;\n+        int partLength = n - (maxCount - 1);\n+        int emptySlots = partCount * partLength;\n+        int availableTasks = tasks.length - max * maxCount;\n+        int idles = Math.max(0, emptySlots - availableTasks);\n+        \n+        return tasks.length + idles;\n+    }\n+}\n\\ No newline at end of file"
  }
]
