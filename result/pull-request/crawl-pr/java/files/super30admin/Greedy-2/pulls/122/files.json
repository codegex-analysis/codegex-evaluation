[
  {
    "sha": "abdf357fe1c3c33e038cf3e238bdce04d7c91a24",
    "filename": "Partition Labels.py",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/aee0afe4b88573d23a70967fc74d637425085ffe/Partition%20Labels.py",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/aee0afe4b88573d23a70967fc74d637425085ffe/Partition%20Labels.py",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/Partition%20Labels.py?ref=aee0afe4b88573d23a70967fc74d637425085ffe",
    "patch": "@@ -0,0 +1,23 @@\n+#time: O(n)\n+#space: O(1)\n+\n+from collections import Counter\n+class Solution:\n+    def partitionLabels(self, S: str) -> List[int]:\n+        start=0\n+        end=0\n+        endindex={}\n+        result=[]\n+        for i in range(len(S)):\n+            endindex[S[i]]=i\n+        \n+        for i in range(len(S)):\n+            end=max(endindex[S[i]],end)\n+            if(i==end):\n+                length=end-start+1\n+                result.append(length)\n+                start=end+1\n+        return result\n+            \n+        \n+        \n\\ No newline at end of file"
  },
  {
    "sha": "f899e49f674eabbf42c64c4a1c4380d0b5d0abdc",
    "filename": "Queue Reconstruction by Height.py",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/aee0afe4b88573d23a70967fc74d637425085ffe/Queue%20Reconstruction%20by%20Height.py",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/aee0afe4b88573d23a70967fc74d637425085ffe/Queue%20Reconstruction%20by%20Height.py",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/Queue%20Reconstruction%20by%20Height.py?ref=aee0afe4b88573d23a70967fc74d637425085ffe",
    "patch": "@@ -0,0 +1,13 @@\n+#time: O(n^2)\n+#space: O(1)\n+\n+class Solution:\n+    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n+        if(people==[]):\n+            return []\n+        people=sorted(people, key=lambda x:(-x[0],x[1]))\n+        result=[]\n+        print(people)\n+        for i in people:\n+            result.insert(i[1],i)\n+        return result\n\\ No newline at end of file"
  },
  {
    "sha": "258a1a001b3017e6a318e7b909cc1ef6208ffbd8",
    "filename": "Task Scheduler.py",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/aee0afe4b88573d23a70967fc74d637425085ffe/Task%20Scheduler.py",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/aee0afe4b88573d23a70967fc74d637425085ffe/Task%20Scheduler.py",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/Task%20Scheduler.py?ref=aee0afe4b88573d23a70967fc74d637425085ffe",
    "patch": "@@ -0,0 +1,24 @@\n+#time: O(n)\n+#space: O(1)\n+\n+from collections import Counter\n+class Solution:\n+    def leastInterval(self, tasks: List[str], n: int) -> int:\n+        count=Counter(tasks)\n+        maxcount=0\n+        samecount=0\n+        for i in count:\n+            maxcount=max(maxcount,count[i])\n+        \n+        for i in count:\n+            if(count[i]==maxcount):\n+                samecount+=1\n+        \n+        partitions = maxcount-1\n+        empty= (n-(samecount-1))*partitions\n+        availableSpace= len(tasks)-maxcount*samecount\n+        idle= max(0, empty-availableSpace)\n+        result=len(tasks) + idle\n+        return result\n+        \n+        \n\\ No newline at end of file"
  }
]
