[
  {
    "sha": "abfcdf3ad1dcf6beecfd8684736be1ef103904a4",
    "filename": "partition lables.py",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/09ebc2cf173b678438d6382bff19e8cd2101c444/partition%20lables.py",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/09ebc2cf173b678438d6382bff19e8cd2101c444/partition%20lables.py",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/partition%20lables.py?ref=09ebc2cf173b678438d6382bff19e8cd2101c444",
    "patch": "@@ -0,0 +1,34 @@\n+\"\"\"\n+Time Complexity : O(n)\n+Space Complexity : O(1)\n+Did this code successfully run on Leetcode : Yes\n+Any problem you faced while coding this : No\n+\n+Explaination:\n+We iterate over the string and store the last index of each char into the hasmap\n+In second iteration we find the end for each partition \n+when i == end we know that partition has ended\n+\n+\"\"\"\n+\n+\n+\n+class Solution:\n+    def partitionLabels(self, S: str) -> List[int]:\n+        if S == None or len(S)==0: return []\n+        mp = {}\n+        res = []\n+        end, start = 0,0 \n+        for i in range(len(S)):\n+            mp[S[i]] = i\n+        \n+        for i in range(len(S)):\n+            \n+            end = max(end,mp[S[i]])\n+            if i == end:\n+                res.append(i-start+1) \n+                start = i+1\n+        return res\n+            \n+        \n+        "
  },
  {
    "sha": "987e0de440cd3a0c119410b4dce128e870a77a6c",
    "filename": "people height.py",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/09ebc2cf173b678438d6382bff19e8cd2101c444/people%20height.py",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/09ebc2cf173b678438d6382bff19e8cd2101c444/people%20height.py",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/people%20height.py?ref=09ebc2cf173b678438d6382bff19e8cd2101c444",
    "patch": "@@ -0,0 +1,26 @@\n+\"\"\"\n+Time Complexity : O(n**2)\n+Space Complexity : O(1)\n+Did this code successfully run on Leetcode : Yes\n+Any problem you faced while coding this : No\n+\n+Explaination\n+we sort the array according to the height in descending order and if heights are same then by no of people \n+i.e. key = lambda x:(-x[0],x[1])\n+Then we store these elements into res array according to the no of people ahead\n+i.e. res.insert(people[1], people) \n+\n+\n+\"\"\"\n+\n+\n+class Solution:\n+    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n+        if people == None or len(people) == 0: return\n+            \n+        people.sort(key=lambda x: (-x[0], x[1]))        \n+        q = []\n+        \n+        for p in people:\n+            q.insert(p[1],p)\n+        return q\n\\ No newline at end of file"
  },
  {
    "sha": "582fdb5eb244ac3c61d9bc0b62b0ea17acecb09f",
    "filename": "task schedular.py",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/09ebc2cf173b678438d6382bff19e8cd2101c444/task%20schedular.py",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/09ebc2cf173b678438d6382bff19e8cd2101c444/task%20schedular.py",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/task%20schedular.py?ref=09ebc2cf173b678438d6382bff19e8cd2101c444",
    "patch": "@@ -0,0 +1,39 @@\n+\"\"\"\n+Time Complexity : O(n)\n+Space Complexity : O(1)\n+Did this code successfully run on Leetcode : Yes\n+Any problem you faced while coding this : No\n+\n+Explaination\n+We get most frequent taks, we allocate them in distance of n\n+AB_AB _AB\n+then we find the no of partitions, empty spots, pending values and idle spots\n+\n+\n+\"\"\"\n+\n+class Solution:\n+    def leastInterval(self, tasks: List[str], n: int) -> int:\n+        if tasks == None or len(tasks)==0: return \n+        hm = {}\n+        maxfreq, maxcount =0,0\n+        for i in tasks:\n+            if i in hm:\n+                hm[i] += 1\n+            else:\n+                hm[i] = 1\n+            maxfreq = max(maxfreq, hm[i])\n+        \n+        for i in hm:\n+            if hm[i] == maxfreq:\n+                maxcount += 1\n+        \n+        partition = maxfreq - 1\n+        emptySpots = partition * (n-maxcount+1)\n+        pendingValues = len(tasks) - maxfreq*maxcount \n+        idle = max(0, emptySpots-pendingValues)\n+        \n+        return len(tasks) + idle\n+        \n+        \n+        \n\\ No newline at end of file"
  }
]
