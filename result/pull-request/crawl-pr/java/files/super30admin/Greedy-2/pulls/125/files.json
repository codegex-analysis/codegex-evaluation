[
  {
    "sha": "bdd3433a0270af736179a65d1f0513fccf7ff67c",
    "filename": "406. Queue Reconstruction by Height",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/25a949a51ca33caac8c81536b4ca9bb68a321f3e/406.%20Queue%20Reconstruction%20by%20Height",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/25a949a51ca33caac8c81536b4ca9bb68a321f3e/406.%20Queue%20Reconstruction%20by%20Height",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/406.%20Queue%20Reconstruction%20by%20Height?ref=25a949a51ca33caac8c81536b4ca9bb68a321f3e",
    "patch": "@@ -0,0 +1,17 @@\n+class Solution:\n+    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n+        # sort the people based with first arg in descednign order\n+        #and 1st arg in ascending order\n+        people = sorted(people, key= lambda x:(x[0],-x[1]),reverse=True);\n+        li=[];\n+        # iterate through the sorted list and insert\n+        # them according to their position\n+        for h,k in people:\n+            li.insert(k,[h,k]);\n+        return li;\n+    '''\n+    time complexity = O(n^2)\n+    space complexity = O(n)\n+    '''\n+            \n+        "
  },
  {
    "sha": "2012d367dcb6ffebe77c6f7f10ab9e5b2db69411",
    "filename": "621. Task Scheduler",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/25a949a51ca33caac8c81536b4ca9bb68a321f3e/621.%20Task%20Scheduler",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/25a949a51ca33caac8c81536b4ca9bb68a321f3e/621.%20Task%20Scheduler",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/621.%20Task%20Scheduler?ref=25a949a51ca33caac8c81536b4ca9bb68a321f3e",
    "patch": "@@ -0,0 +1,35 @@\n+from collections import defaultdict\n+class Solution:\n+    def leastInterval(self, tasks: List[str], n: int) -> int:\n+        dict1 = defaultdict(int)\n+        maxfreq, maxcount = 0,0\n+        # fidn the frequency of each task\n+        for task in tasks:\n+            dict1[task] += 1\n+            maxfreq = max(maxfreq, dict1[task])\n+            \n+        # finding  the maxfreq count\n+        for v in dict1.values():\n+            if(v == maxfreq):\n+                maxcount += 1;\n+                \n+        # finding the idle slots\n+        \n+        partitions = maxfreq - 1;\n+        empty = (n - (maxcount - 1)) * partitions\n+        available = len(tasks) - maxfreq*maxcount;\n+        idle = max(0, empty - available);\n+        return len(tasks) + idle;\n+    \n+    '''\n+    time complexity = O(n)\n+    space complexity = O(n)\n+    '''\n+        \n+        \n+        \n+        \n+        \n+        \n+        \n+        "
  },
  {
    "sha": "ae903d55f5858f4beebcd614bd0b56710b884014",
    "filename": "763. Partition Labels",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/25a949a51ca33caac8c81536b4ca9bb68a321f3e/763.%20Partition%20Labels",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/25a949a51ca33caac8c81536b4ca9bb68a321f3e/763.%20Partition%20Labels",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/763.%20Partition%20Labels?ref=25a949a51ca33caac8c81536b4ca9bb68a321f3e",
    "patch": "@@ -0,0 +1,36 @@\n+class Solution:\n+    def partitionLabels(self, S: str) -> List[int]:\n+        lastindexdict = {}\n+        n = len(S)\n+        # find last index of each character of string\n+        for i in range(n):\n+            lastindexdict[S[i]] = i;\n+        \n+        # initialize result list to store the lenghts of partitions\n+        result = []\n+        # initialize the start and end of the current window\n+        start = 0\n+        last = lastindexdict[S[start]];\n+        i = 1;\n+        while( i < n):\n+            # iterate through the current window\n+            while(i <= last):\n+                if(lastindexdict[S[i]] > last):\n+                    last = lastindexdict[S[i]]\n+                i += 1;\n+            # current window is finished, append the length of the current window\n+            result.append(last-start + 1);\n+            if(i == n):\n+                break\n+            # start the new window\n+            start = i;\n+            last = lastindexdict[S[start]];\n+        return result;\n+    '''\n+    time complexity = O(n)\n+    space complexity = O(1)\n+    '''\n+            \n+            \n+        \n+        "
  }
]
