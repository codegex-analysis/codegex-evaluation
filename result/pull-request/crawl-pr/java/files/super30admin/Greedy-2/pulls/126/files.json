[
  {
    "sha": "7782abca390bad2ac4d7e4a832f1b1be336a91fd",
    "filename": "src/PartitionLabels.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/6a4600cdbd5efa7b757e425e8f83780685832858/src/PartitionLabels.java",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/6a4600cdbd5efa7b757e425e8f83780685832858/src/PartitionLabels.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/src/PartitionLabels.java?ref=6a4600cdbd5efa7b757e425e8f83780685832858",
    "patch": "@@ -0,0 +1,55 @@\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+/*\n+ * The complexity of the algorithm is O(n) where n is no of elements.\n+ * Space complexity is O(1) \n+ */\n+\n+public class PartitionLabels {\n+\n+\tpublic List<Integer> partitionLabels(String S) {\n+\n+\t\tList<Integer> result = new ArrayList<>();\n+\n+\t\tif (S == null || S.length() == 0)\n+\t\t\treturn result;\n+\n+\t\tHashMap<Character, Integer> map = new HashMap<>();\n+\n+\t\tfor (int i = 0; i < S.length(); i++) {\n+\n+\t\t\tchar c = S.charAt(i);\n+\n+\t\t\tmap.put(c, i);\n+\n+\t\t}\n+\n+\t\tint start = 0;\n+\t\tint end = 0;\n+\n+\t\tfor (int i = 0; i < S.length(); i++) {\n+\n+\t\t\tchar c = S.charAt(i);\n+\n+\t\t\tend = Math.max(end, map.get(c));\n+\n+\t\t\tif (end == i) {\n+\n+\t\t\t\tresult.add(end - start + 1);\n+\t\t\t\tstart = i + 1;\n+\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn result;\n+\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\t// TODO Auto-generated method stub\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "9dc22a2812e11f4454704767e357551c72b712bd",
    "filename": "src/QueueReconstructionbyHeight.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/6a4600cdbd5efa7b757e425e8f83780685832858/src/QueueReconstructionbyHeight.java",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/6a4600cdbd5efa7b757e425e8f83780685832858/src/QueueReconstructionbyHeight.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/src/QueueReconstructionbyHeight.java?ref=6a4600cdbd5efa7b757e425e8f83780685832858",
    "patch": "@@ -0,0 +1,39 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/*\n+ * The complexity of the algorithm is O(n^2) where n is no of elements.\n+ * Space complexity is O(n) \n+ */\n+\n+public class QueueReconstructionbyHeight {\n+\n+\tpublic int[][] reconstructQueue(int[][] people) {\n+\n+\t\tArrays.sort(people, (a, b) -> {\n+\n+\t\t\tif (a[0] == b[0]) {\n+\n+\t\t\t\treturn a[1] - b[1];\n+\t\t\t}\n+\n+\t\t\treturn b[0] - a[0];\n+\t\t});\n+\n+\t\tList<int[]> result = new ArrayList<>();\n+\n+\t\tfor (int[] person : people) {\n+\n+\t\t\tresult.add(person[1], person);\n+\t\t}\n+\n+\t\treturn result.toArray(new int[0][]);\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\t// TODO Auto-generated method stub\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "e4006f7dd7fb5af71b7eed89d28cecce65e909dc",
    "filename": "src/TaskScheduler.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/6a4600cdbd5efa7b757e425e8f83780685832858/src/TaskScheduler.java",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/6a4600cdbd5efa7b757e425e8f83780685832858/src/TaskScheduler.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/src/TaskScheduler.java?ref=6a4600cdbd5efa7b757e425e8f83780685832858",
    "patch": "@@ -0,0 +1,55 @@\n+import java.util.HashMap;\n+\n+/*\n+ * The complexity of the algorithm is O(n) where n is no of elements.\n+ * Space complexity is O(1) \n+ */\n+\n+public class TaskScheduler {\n+\n+\tpublic int leastInterval(char[] tasks, int n) {\n+\n+\t\tif (tasks == null || tasks.length == 0)\n+\t\t\treturn 0;\n+\n+\t\tHashMap<Character, Integer> map = new HashMap<>();\n+\t\tint maxFreq = 0;\n+\t\tint maxCount = 0;\n+\n+\t\tfor (char c : tasks) {\n+\n+\t\t\tif (!map.containsKey(c)) {\n+\n+\t\t\t\tmap.put(c, 0);\n+\n+\t\t\t}\n+\n+\t\t\tint cnt = map.get(c);\n+\t\t\tcnt++;\n+\t\t\tmaxFreq = Math.max(maxFreq, cnt);\n+\t\t\tmap.put(c, cnt);\n+\n+\t\t}\n+\n+\t\tfor (int val : map.values()) {\n+\n+\t\t\tif (val == maxFreq) {\n+\t\t\t\tmaxCount++;\n+\t\t\t}\n+\t\t}\n+\n+\t\tint partitions = maxFreq - 1;\n+\t\tint empty = (n - (maxCount - 1)) * partitions;\n+\t\tint available = tasks.length - maxFreq * maxCount;\n+\t\tint idle = Math.max(0, empty - available);\n+\n+\t\treturn tasks.length + idle;\n+\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\t// TODO Auto-generated method stub\n+\n+\t}\n+\n+}"
  }
]
