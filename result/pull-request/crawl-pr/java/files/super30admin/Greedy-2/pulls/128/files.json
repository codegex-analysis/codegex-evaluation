[
  {
    "sha": "1b26897c78751faf8890ef055841f97b540f9779",
    "filename": "partitn_labels.py",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/cf31d8afd9b1edd960c7cc175cdf3490da4e0c49/partitn_labels.py",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/cf31d8afd9b1edd960c7cc175cdf3490da4e0c49/partitn_labels.py",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/partitn_labels.py?ref=cf31d8afd9b1edd960c7cc175cdf3490da4e0c49",
    "patch": "@@ -0,0 +1,24 @@\n+# Time Complexity : O(n)\n+# Space Complexity : O(1) (since only 26 chars)\n+\n+class Solution:\n+    def partitionLabels(self, S: str) -> List[int]:\n+        if not S: return [0]\n+        n = len(S)\n+        result = []\n+        \n+        hashmap = {}\n+        for i in range(n):\n+            hashmap[S[i]] = i\n+        \n+        start = 0\n+        end = hashmap[S[0]]\n+        for i in range(n):\n+            end_idx = hashmap[S[i]]\n+            end = max(end, end_idx)\n+                \n+            if i == end:\n+                result.append(end - start + 1)\n+                start = end + 1\n+        \n+        return result\n\\ No newline at end of file"
  },
  {
    "sha": "9b05b301ca1f410b2e37d4f61419fb3ec795d101",
    "filename": "q_reconstr_ht.py",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/cf31d8afd9b1edd960c7cc175cdf3490da4e0c49/q_reconstr_ht.py",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/cf31d8afd9b1edd960c7cc175cdf3490da4e0c49/q_reconstr_ht.py",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/q_reconstr_ht.py?ref=cf31d8afd9b1edd960c7cc175cdf3490da4e0c49",
    "patch": "@@ -0,0 +1,14 @@\n+# Time Complexity: O(n^2) + O(n* log n)\n+# Space Complexity: O(1)        \n+        \n+class Solution:\n+    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\n+        if not people: return []\n+        \n+        people.sort(key = lambda x:(-x[0], x[1]))\n+        \n+        result = []\n+        for p in people:\n+            result.insert(p[1], p)      # Inserts at that idx and pushes elems from idx to back.\n+        \n+        return result\n\\ No newline at end of file"
  },
  {
    "sha": "1739a9cbcbab2e211048d4cb09ef2afe514e4081",
    "filename": "sample.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/c667952c1be1f764d8772f9f8666ad6a7ecf06a2/sample.java",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/c667952c1be1f764d8772f9f8666ad6a7ecf06a2/sample.java",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/sample.java?ref=c667952c1be1f764d8772f9f8666ad6a7ecf06a2",
    "patch": "@@ -1,7 +0,0 @@\n-// Time Complexity :\n-// Space Complexity :\n-// Did this code successfully run on Leetcode :\n-// Any problem you faced while coding this :\n-\n-\n-// Your code here along with comments explaining your approach"
  },
  {
    "sha": "c7fbbba8b619b30c8d23ef5cf6d290ffa66862ab",
    "filename": "task_scheduler.py",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/super30admin/Greedy-2/blob/cf31d8afd9b1edd960c7cc175cdf3490da4e0c49/task_scheduler.py",
    "raw_url": "https://github.com/super30admin/Greedy-2/raw/cf31d8afd9b1edd960c7cc175cdf3490da4e0c49/task_scheduler.py",
    "contents_url": "https://api.github.com/repos/super30admin/Greedy-2/contents/task_scheduler.py?ref=cf31d8afd9b1edd960c7cc175cdf3490da4e0c49",
    "patch": "@@ -0,0 +1,31 @@\n+# Time Complexity : O(n)\n+# Space Complexity : O(n)\n+\n+class Solution:\n+    def leastInterval(self, tasks: List[str], n: int) -> int:\n+        if not tasks: return 0\n+        l = len(tasks)  \n+        if n == 0: return l\n+        \n+        hashmap = {}     \n+        for task in tasks:\n+            if task in hashmap:\n+                hashmap[task] += 1\n+            else:\n+                hashmap[task] = 1\n+        \n+        # Calculate max_Freq.      \n+        max_freq = max(hashmap.values())\n+        \n+        # How many vars have max_Freq.\n+        max_count = 0\n+        for freq in hashmap.values():\n+            if freq == max_freq: max_count += 1\n+        \n+        partitions = max_freq - 1\n+        empty = (n - (max_count-1)) * partitions\n+        available = l - (max_freq * max_count)\n+        idle = max(0, empty - available)\n+        result = l + idle\n+        \n+        return result\n\\ No newline at end of file"
  }
]
