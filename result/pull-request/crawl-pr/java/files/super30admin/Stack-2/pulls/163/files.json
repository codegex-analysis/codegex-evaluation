[
  {
    "sha": "cf81a2e1633439954afb1eaf5adc944080a136c6",
    "filename": "logs.py",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/9915dfa0bb0a77ac1bdbb5a613a65d284fbe8bb1/logs.py",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/9915dfa0bb0a77ac1bdbb5a613a65d284fbe8bb1/logs.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/logs.py?ref=9915dfa0bb0a77ac1bdbb5a613a65d284fbe8bb1",
    "patch": "@@ -0,0 +1,27 @@\n+#Time Complexity -- O(len(logs))\n+#Space Complexity --O(len(logs))\n+\n+class Solution:\n+    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:\n+        \n+        result = [0]*n\n+        previous = 0\n+        stack = []\n+        \n+        for log in logs:\n+            currlog = log.split(':')\n+            currtime = int(currlog[2])\n+            if currlog[1] == 'start':\n+                if stack:\n+                    result[stack[-1]] += currtime - previous\n+                    previous = currtime\n+                stack.append(int(currlog[0]))\n+            else:\n+                result[stack.pop()] += currtime + 1 - previous\n+                previous = currtime + 1\n+                \n+        return result\n+            \n+                    \n+        \n+        "
  },
  {
    "sha": "72628c40af1fce2787f643924cd07407b4332a19",
    "filename": "validpar.py",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/9915dfa0bb0a77ac1bdbb5a613a65d284fbe8bb1/validpar.py",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/9915dfa0bb0a77ac1bdbb5a613a65d284fbe8bb1/validpar.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/validpar.py?ref=9915dfa0bb0a77ac1bdbb5a613a65d284fbe8bb1",
    "patch": "@@ -0,0 +1,24 @@\n+#Time Complexity -- O(N)\n+#Space Complexity -- O(N)\n+\n+class Solution:\n+    def isValid(self, s: str) -> bool:\n+        \n+        if not s:\n+            return False\n+        \n+        stack = []\n+        for c in s:\n+            if c == '[':\n+                stack.append(']')\n+            elif c == '(':\n+                stack.append(')')\n+            elif c == '{':\n+                stack.append('}')\n+            elif not stack or c != stack.pop():\n+                return False\n+            \n+        if stack:\n+            return False\n+        \n+        return True"
  }
]
