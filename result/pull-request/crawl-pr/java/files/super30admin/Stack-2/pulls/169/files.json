[
  {
    "sha": "4c6431eb20025f8a27ca60bac4a772de6962c984",
    "filename": "times_of_functions.py",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/5ce35c1e5c7fd76c8944acf2ba9640af9ca38721/times_of_functions.py",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/5ce35c1e5c7fd76c8944acf2ba9640af9ca38721/times_of_functions.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/times_of_functions.py?ref=5ce35c1e5c7fd76c8944acf2ba9640af9ca38721",
    "patch": "@@ -0,0 +1,29 @@\n+# Approach - At every start time calculate how long previous process was running for by pushing peeking from stack and cacl with prev pointer ref\n+# at every end time calculate how long that process ran for by popping from stack and calculating\n+# Time - O(N)\n+# Space - O(N)\n+\n+class Solution:\n+    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:\n+        \n+        result = [0] * n\n+        st = []\n+        prev = 0\n+        for log in logs:\n+            string = log.split(\":\")\n+            current = int(string[2])\n+            if string[1] == 'start':\n+                if st:\n+                    result[st[-1]] += current - prev\n+                    \n+                    prev = current\n+                    \n+                st.append(int(string[0]))\n+                \n+            else:\n+                # once at end we pop the value and process it\n+                result[st.pop()] += current - prev + 1\n+                prev = current + 1\n+                \n+        return result\n+        \n\\ No newline at end of file"
  },
  {
    "sha": "9b296cf42c66bbeb19d3e09129d8d98d8d78b602",
    "filename": "validate_parenthesis.py",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/5ce35c1e5c7fd76c8944acf2ba9640af9ca38721/validate_parenthesis.py",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/5ce35c1e5c7fd76c8944acf2ba9640af9ca38721/validate_parenthesis.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/validate_parenthesis.py?ref=5ce35c1e5c7fd76c8944acf2ba9640af9ca38721",
    "patch": "@@ -0,0 +1,26 @@\n+# Approach: for every open braces push the closing one to the stack \n+# when encountering the closing one check from stack if they are the same\n+\n+# Time - O(N)\n+class Solution:\n+    def isValid(self, s: str) -> bool:\n+        \n+        st = []\n+        for char in s:\n+            \n+            if char == '{':\n+                st.append('}')\n+                \n+            elif char == '(':\n+                st.append(')')\n+                \n+            elif char == '[':\n+                st.append(']')\n+                \n+            elif st == [] or char != st.pop():\n+                return False\n+         \n+        if st:\n+            return False\n+        return True\n+        \n\\ No newline at end of file"
  }
]
