[
  {
    "sha": "7339e19df9c072d879d795b816cf7b50d2b55d49",
    "filename": "ExclusiveTime.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/5f82bf1035719a8bed10c65dd043c0dd8067c845/ExclusiveTime.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/5f82bf1035719a8bed10c65dd043c0dd8067c845/ExclusiveTime.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/ExclusiveTime.java?ref=5f82bf1035719a8bed10c65dd043c0dd8067c845",
    "patch": "@@ -0,0 +1,19 @@\n+class Solution {\n+    public int[] exclusiveTime(int n, List<String> logs) {\n+        int[] res = new int[n];\n+        Stack<Integer> stack = new Stack<>();\n+        int prevTime = 0;\n+        for (String log : logs) {\n+            String[] parts = log.split(\":\");\n+            if (!stack.isEmpty()) res[stack.peek()] +=  Integer.parseInt(parts[2]) - prevTime; \n+            prevTime = Integer.parseInt(parts[2]);\n+            if (parts[1].equals(\"start\")) stack.push(Integer.parseInt(parts[0]));\n+            else {\n+                res[stack.pop()]++;\n+                prevTime++;\n+            }\n+        }\n+        return res;\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ada070f0d6478c301e099ae95e1819c9203111e8",
    "filename": "ValidParenthesis.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/5f82bf1035719a8bed10c65dd043c0dd8067c845/ValidParenthesis.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/5f82bf1035719a8bed10c65dd043c0dd8067c845/ValidParenthesis.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/ValidParenthesis.java?ref=5f82bf1035719a8bed10c65dd043c0dd8067c845",
    "patch": "@@ -0,0 +1,16 @@\n+class Solution {\n+    public boolean isValid(String s) {\n+        Stack<Character> stack = new Stack<Character>();\n+        for (char c : s.toCharArray()) {\n+            if (c == '(')\n+                stack.push(')');\n+            else if (c == '{')\n+                stack.push('}');\n+            else if (c == '[')\n+                stack.push(']');\n+            else if (stack.isEmpty() || stack.pop() != c)\n+                return false;\n+        }\n+        return stack.isEmpty();\n+    }\n+}\n\\ No newline at end of file"
  }
]
