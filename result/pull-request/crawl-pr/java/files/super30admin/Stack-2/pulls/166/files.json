[
  {
    "sha": "220ef00e4d72f16dad7e0d8052ca71e30af0fa9e",
    "filename": "exclusiveTime.py",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/41725509aa286133de911c3f336e8633112c837b/exclusiveTime.py",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/41725509aa286133de911c3f336e8633112c837b/exclusiveTime.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/exclusiveTime.py?ref=41725509aa286133de911c3f336e8633112c837b",
    "patch": "@@ -0,0 +1,24 @@\n+\n+#Time Complexity: O(N)\n+#Space Complexity: O(N)\n+#Run on Leetcode: Yes\n+#Any Issues: No\n+\n+class Solution:\n+    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:\n+        res = [0] * n\n+\n+        stack = []\n+        for line in logs:\n+            fid, act, t = line.split(':')\n+            if act == 'start':\n+                pIdx = -1 if not stack else len(stack) - 1\n+                stack.append([int(fid), int(t), pIdx, 0])\n+            else:\n+                _, start, pIdx, incTime = stack.pop()\n+                execTime = int(t) - start + 1 - incTime\n+                res[int(fid)] += execTime\n+                if stack:\n+                    stack[pIdx][3] += int(t) - start + 1\n+\n+        return res\n\\ No newline at end of file"
  },
  {
    "sha": "a4929fd8148a4c60cc764fea4d88c451f65f8604",
    "filename": "validParanthesis.py",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/41725509aa286133de911c3f336e8633112c837b/validParanthesis.py",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/41725509aa286133de911c3f336e8633112c837b/validParanthesis.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/validParanthesis.py?ref=41725509aa286133de911c3f336e8633112c837b",
    "patch": "@@ -0,0 +1,21 @@\n+\n+#Time Complexity: O(N)\n+#Space Complexity: O(N)\n+#Run on Leetcode: Yes\n+#Any Issues: No\n+\n+class Solution:\n+    def isValid(self, s: str) -> bool:\n+        sl = list(s)\n+        t = []\n+        d = {'(': ')','[': ']','{': '}'}\n+        while sl:\n+            c = sl.pop(0)\n+            if not t:\n+                t.append(c)\n+            else:\n+                if c == d.get(t[-1], None):\n+                    t.pop(-1)\n+                else:\n+                    t.append(c)\n+        return len(t) == 0\n\\ No newline at end of file"
  }
]
