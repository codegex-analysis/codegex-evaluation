[
  {
    "sha": "f363dcde95770e950ece7c360d5cc34ed2a377f5",
    "filename": "ExclusiveTimeOfFunctions.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/7a067242f77c5c9900410f449409016821eda228/ExclusiveTimeOfFunctions.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/7a067242f77c5c9900410f449409016821eda228/ExclusiveTimeOfFunctions.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/ExclusiveTimeOfFunctions.java?ref=7a067242f77c5c9900410f449409016821eda228",
    "patch": "@@ -0,0 +1,32 @@\n+// TC: O(2N), N -> size of logs list\n+// SC: O(N/2), N -> size of logs list\n+// Did it successfully run on Leetcode? : Yes\n+class Solution {\n+    public int[] exclusiveTime(int n, List<String> logs) {\n+        int[] result = new int[n];\n+        if ( logs == null || logs.size() == 0)\n+            return result;\n+        Stack<Integer> stack = new Stack();\n+        int prev = 0;\n+        for (String log : logs)\n+        {\n+            String[] str = log.split(\":\");\n+            int curr = Integer.parseInt(str[2]);\n+            if (str[1].equals(\"start\"))\n+            {\n+              if (!stack.isEmpty())\n+              {\n+                result[stack.peek()] +=  curr - prev;\n+                prev = curr;\n+              }\n+              stack.push(Integer.parseInt(str[0]));\n+            }\n+            else\n+            {\n+                result[stack.pop()] += curr + 1 - prev;\n+                prev = curr+1;\n+            }\n+        }\n+        return result;\n+    }\n+}"
  },
  {
    "sha": "5c8096e452aede7386995862ef38d4333308fd8a",
    "filename": "ValidParantheses.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/7a067242f77c5c9900410f449409016821eda228/ValidParantheses.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/7a067242f77c5c9900410f449409016821eda228/ValidParantheses.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/ValidParantheses.java?ref=7a067242f77c5c9900410f449409016821eda228",
    "patch": "@@ -0,0 +1,74 @@\n+// without hashmap\n+// TC: O(N)\n+// SC: O(N)\n+// Did it run successfully on Leetcode? : Yes\n+class Solution {\n+    public boolean isValid(String s) {\n+        Stack<Character> stack = new Stack<Character>();\n+        for ( char c : s.toCharArray())\n+        {\n+            if (c == '(')\n+                stack.push(')');\n+            else if (c == '{')\n+                stack.push('}');\n+            else if (c =='[')\n+                 stack.push(']');\n+            else if (stack.isEmpty() || c != stack.pop())\n+                return false;  \n+        }\n+        return stack.isEmpty();\n+    }\n+}\n+\n+// with hashmap\n+// TC: O(N)\n+// SC: O(N)\n+// Did it run successfully on Leetcode? : Yes\n+// class Solution {\n+//     public boolean isValid(String s) {\n+//       HashMap<Character, Character> map = new HashMap<Character, Character>();\n+//       map.put(']', '[');\n+//       map.put('}', '{');\n+//       map.put(')', '(');\n+//       Stack<Character> stack = new Stack<Character>();\n+//       for ( char c : s.toCharArray())\n+//       {\n+//           if ( map.containsKey(c) && !stack.empty())\n+//           {\n+//               if (map.get(c) != stack.pop())\n+//                   return false;\n+//           }\n+//           else\n+//           {\n+//              stack.push(c);\n+//           }\n+//       }\n+//      return stack.isEmpty();\n+//     }\n+// }\n+\n+\n+// without stack - when only one type of brackets are given (Ex: round brackets only)\n+// TC: O(N)\n+// SC: O(1)\n+// Did it run successfully on Leetcode? : Yes\n+class Solution {\n+    public boolean isValid(String s) {\n+        int openCount = 0;\n+        for ( char c : s.toCharArray())\n+        {\n+            if (c == '(')\n+              openCount++;\n+            else if (openCount == 0 && c == ')')\n+                return false;\n+            else\n+                openCount--;\n+        }\n+        return openCount == 0;\n+    }\n+}\n+\n+\n+\n+\n+"
  }
]
