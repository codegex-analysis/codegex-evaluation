[
  {
    "sha": "6f38422ed8630013bf639684117f39a1d42a540c",
    "filename": "ExclusiveTime.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/210d0316a5bfefcb9768c4f7208a7eee361566ca/ExclusiveTime.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/210d0316a5bfefcb9768c4f7208a7eee361566ca/ExclusiveTime.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/ExclusiveTime.java?ref=210d0316a5bfefcb9768c4f7208a7eee361566ca",
    "patch": "@@ -0,0 +1,33 @@\n+import java.util.*;\n+\n+class ExclusiveTime{\n+    \n+    public int[] exclusiveTime(int n, List<String> logs) {\n+\n+        int res[] = new int[n];\n+        Stack<Integer> st = new Stack();\n+        int prev = 0;\n+\n+        for (String s: logs){\n+            String input[] = s.split(\":\");\n+            int id = Integer.valueOf(input[0]);\n+            int curr = Integer.valueOf(input[2]);\n+            String phase = input[1];\n+            \n+            if (phase.equals(\"start\")){\n+                if (!st.isEmpty()){\n+                    res[st.peek()] += curr - prev;\n+                    prev = curr;\n+                }\n+                st.push(id);\n+            }\n+            else{\n+                res[st.pop()] += curr - prev + 1;\n+                prev = curr + 1;\n+            }\n+\n+        }\n+\n+        return res;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ca309b983ab384d925ffddd1d8d99c25311372f8",
    "filename": "MatchParanthesis.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/210d0316a5bfefcb9768c4f7208a7eee361566ca/MatchParanthesis.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/210d0316a5bfefcb9768c4f7208a7eee361566ca/MatchParanthesis.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/MatchParanthesis.java?ref=210d0316a5bfefcb9768c4f7208a7eee361566ca",
    "patch": "@@ -0,0 +1,29 @@\n+import java.util.*;\n+\n+public class MatchParanthesis {\n+\n+    public boolean isValid(String s) {\n+        \n+        int i = 0;\n+        Stack<Character> st = new Stack<>();\n+\n+        while(i < s.length()){\n+            char c = s.charAt(i);\n+            if (c == '('){\n+                st.push(')');\n+            }\n+            else if(c == '{'){\n+                st.push('}');\n+            }\n+            else if (c == '['){\n+                st.push(']');\n+            }\n+            else if (st.isEmpty() || st.pop() != c){\n+                return false;\n+            }\n+        }\n+\n+        return st.isEmpty();\n+    }\n+    \n+}"
  }
]
