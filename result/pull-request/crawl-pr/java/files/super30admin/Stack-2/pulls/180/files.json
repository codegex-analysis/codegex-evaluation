[
  {
    "sha": "2a178e01413f8b58d7eb0c91e388073a047bc35b",
    "filename": "exclusiveTimes.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/ffa862bcf0bae9d9c0ab822800814c48e416ee28/exclusiveTimes.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/ffa862bcf0bae9d9c0ab822800814c48e416ee28/exclusiveTimes.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/exclusiveTimes.java?ref=ffa862bcf0bae9d9c0ab822800814c48e416ee28",
    "patch": "@@ -0,0 +1,28 @@\n+class Solution {\n+    public int[] exclusiveTime(int n, List<String> logs) {\n+        \n+        Stack<Integer> st = new Stack<Integer>();\n+        int[] result = new int[n];\n+        int prev = 0;\n+        for(String log:logs){\n+            String[] strs = log.split(\":\");\n+            int curr = Integer.parseInt(strs[2]);\n+            if(strs[1].equals(\"start\")){\n+                if(!st.isEmpty()){\n+                    result[st.peek()] += curr - prev;\n+                    prev = curr;\n+                }\n+                st.push(Integer.parseInt(strs[0]));\n+            }\n+            else{\n+                result[st.pop()] += curr - prev + 1;\n+                prev = curr + 1;\n+            }\n+            \n+        }\n+        return result;\n+    }\n+}\n+\n+//Time complexity: O(n)\n+//Space complexity: O(number of logs)"
  },
  {
    "sha": "3d2e85fed4287a0ff76f78bff13c123517061174",
    "filename": "validateParanthesis.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/ffa862bcf0bae9d9c0ab822800814c48e416ee28/validateParanthesis.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/ffa862bcf0bae9d9c0ab822800814c48e416ee28/validateParanthesis.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/validateParanthesis.java?ref=ffa862bcf0bae9d9c0ab822800814c48e416ee28",
    "patch": "@@ -0,0 +1,21 @@\n+class Solution {\n+    public boolean isValid(String s) {\n+        Stack<Character> st = new Stack<>();\n+        for(int i=0;i<s.length();i++){\n+            char c = s.charAt(i);\n+            if(c == '(') st.push(')');\n+            else if(c == '{') st.push('}');\n+            else if(c == '[') st.push(']');\n+            else{\n+                if(st.isEmpty() ||st.pop() != c)\n+                    return false;\n+            }\n+        }\n+        if(st.isEmpty())\n+            return true;\n+    return false;\n+    }\n+}\n+\n+// Time Complexity :O(n)\n+//Space Complexity: O(n)"
  }
]
