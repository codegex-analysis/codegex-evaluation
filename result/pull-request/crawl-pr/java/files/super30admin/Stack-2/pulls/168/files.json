[
  {
    "sha": "eb73e2c4aefd5199ec79572a59c7a5cb00293780",
    "filename": "exclusiveTimeOfFunctions.py",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/2962e074dba995e566a04135a006f94207a22957/exclusiveTimeOfFunctions.py",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/2962e074dba995e566a04135a006f94207a22957/exclusiveTimeOfFunctions.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/exclusiveTimeOfFunctions.py?ref=2962e074dba995e566a04135a006f94207a22957",
    "patch": "@@ -0,0 +1,27 @@\n+# Time Complexity : O(N) n=length of logs\n+# Space Complexity : O(N) n=length of logs\n+# Did this code successfully run on Leetcode : Yes\n+# Any problem you faced while coding this : No\n+\n+\n+# Your code here along with comments explaining your approach\n+class Solution:\n+    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:\n+        res = [0 for i in range(n)]\n+        if not logs:\n+            return res\n+        \n+        stack = []\n+        prev = 0\n+        for log in logs:\n+            strs = log.split(':')\n+            curr = int(strs[2])\n+            if strs[1] == \"start\":\n+                if stack:\n+                    res[stack[-1]] += curr - prev\n+                    prev = curr\n+                stack.append(int(strs[0]))\n+            else:\n+                res[stack.pop()] += curr + 1 - prev\n+                prev = curr + 1\n+        return res\n\\ No newline at end of file"
  },
  {
    "sha": "a113d7628fb7d76c2858310465bf540ae48e0ad2",
    "filename": "validParentheses.py",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/2962e074dba995e566a04135a006f94207a22957/validParentheses.py",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/2962e074dba995e566a04135a006f94207a22957/validParentheses.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/validParentheses.py?ref=2962e074dba995e566a04135a006f94207a22957",
    "patch": "@@ -0,0 +1,24 @@\n+# Time Complexity : O(N)\n+# Space Complexity : O(N)\n+# Did this code successfully run on Leetcode : Yes\n+# Any problem you faced while coding this : No\n+\n+\n+# Your code here along with comments explaining your approach\n+\n+class Solution:\n+    def isValid(self, s: str) -> bool:\n+        stack = []\n+        mapping = {'(' : ')', '{' : '}', '[' : ']'}\n+        count = 0\n+        for i in range(len(s)):\n+            if s[i] in mapping:\n+                stack.append(s[i])\n+            elif not stack or mapping[stack.pop()] != s[i]:\n+                return False\n+            count += 1\n+        if stack:\n+            return False\n+    \n+        return True\n+                \n\\ No newline at end of file"
  }
]
