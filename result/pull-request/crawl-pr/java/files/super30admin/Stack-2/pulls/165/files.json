[
  {
    "sha": "233be1d2c4965843d6815ea62576959a308a83bf",
    "filename": ".classpath",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/4712fc7364cc76939b22f4c98cae0b7e392db0d0/.classpath",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/4712fc7364cc76939b22f4c98cae0b7e392db0d0/.classpath",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/.classpath?ref=4712fc7364cc76939b22f4c98cae0b7e392db0d0",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"\"/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\"/>\n+\t<classpathentry kind=\"output\" path=\"\"/>\n+</classpath>"
  },
  {
    "sha": "53fc7db4a51dc98bb39776fde34438ad259f482b",
    "filename": ".gitignore",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/4712fc7364cc76939b22f4c98cae0b7e392db0d0/.gitignore",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/4712fc7364cc76939b22f4c98cae0b7e392db0d0/.gitignore",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/.gitignore?ref=4712fc7364cc76939b22f4c98cae0b7e392db0d0",
    "patch": "@@ -0,0 +1,2 @@\n+/ValidParantheses.class\n+/ExclusiveTimeOfFunctions.class"
  },
  {
    "sha": "b78818d767098bc9d178db8e99b1f3bfb687645a",
    "filename": ".project",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/4712fc7364cc76939b22f4c98cae0b7e392db0d0/.project",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/4712fc7364cc76939b22f4c98cae0b7e392db0d0/.project",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/.project?ref=4712fc7364cc76939b22f4c98cae0b7e392db0d0",
    "patch": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<projectDescription>\n+\t<name>Stack-2</name>\n+\t<comment></comment>\n+\t<projects>\n+\t</projects>\n+\t<buildSpec>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n+\t\t\t<arguments>\n+\t\t\t</arguments>\n+\t\t</buildCommand>\n+\t</buildSpec>\n+\t<natures>\n+\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n+\t</natures>\n+</projectDescription>"
  },
  {
    "sha": "7b13e6af0d9f8dc2d56d7be781f235981057943e",
    "filename": "ExclusiveTimeOfFunctions.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/4712fc7364cc76939b22f4c98cae0b7e392db0d0/ExclusiveTimeOfFunctions.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/4712fc7364cc76939b22f4c98cae0b7e392db0d0/ExclusiveTimeOfFunctions.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/ExclusiveTimeOfFunctions.java?ref=4712fc7364cc76939b22f4c98cae0b7e392db0d0",
    "patch": "@@ -0,0 +1,30 @@\n+// Time Complexity : O(l) where l is the length of the logs\n+// Space Complexity : O(l)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+import java.util.List;\n+import java.util.Stack;\n+\n+public class ExclusiveTimeOfFunctions {\n+\tpublic int[] exclusiveTime(int n, List<String> logs) {\n+        int [] result = new int[n];\n+        if(logs == null || logs.size() == 0) return result;\n+        Stack<Integer> st = new Stack<>();\n+        int prev = 0;\n+        for(String log : logs){\n+            String [] strs = log.split(\":\");\n+            int curr = Integer.parseInt(strs[2]);\n+            if(strs[1].equals(\"start\")){\n+                if(!st.isEmpty()){\n+                    result[st.peek()] += curr - prev;\n+                    prev = curr;\n+                }\n+                st.push(Integer.parseInt(strs[0]));\n+            } else {\n+                result[st.pop()] += curr + 1 - prev;\n+                prev = curr + 1;\n+            }\n+        }\n+        return result;\n+    }\n+}"
  },
  {
    "sha": "4c2c0a214a5b7b962f2ffa7799029674bfe124b0",
    "filename": "ValidParantheses.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/super30admin/Stack-2/blob/4712fc7364cc76939b22f4c98cae0b7e392db0d0/ValidParantheses.java",
    "raw_url": "https://github.com/super30admin/Stack-2/raw/4712fc7364cc76939b22f4c98cae0b7e392db0d0/ValidParantheses.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-2/contents/ValidParantheses.java?ref=4712fc7364cc76939b22f4c98cae0b7e392db0d0",
    "patch": "@@ -0,0 +1,27 @@\n+import java.util.Stack;\n+\n+// Time Complexity : O(n)\n+// Space Complexity : O(n/2)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+// Your code here along with comments explaining your approach\n+\t/* Here, whenever any kind of opening parentheses is encountered, its respective closing parentheses will be pushed inside the stack.\n+\t * If the character is not the top element of the stack then the string is contains invalid parentheses and returned false.\n+\t * And after the entire string has been traversed and still the stack is not empty the result will be returned as false.\n+\t * Else it is a valid string of correct parentheses.\n+\t */\n+public class ValidParantheses {\n+\tpublic boolean isValid(String s) {\n+        if(s == null || s.length() == 0) return false;\n+        Stack<Character> st = new Stack<>();\n+        for(int i = 0; i < s.length(); i++){\n+            char c = s.charAt(i);\n+            if(c == '(') st.push(')');\n+            else if(c == '{') st.push('}');\n+            else if(c == '[') st.push(']');\n+            else if(st.isEmpty() || c != st.pop()) return false;\n+        }\n+        if(!st.isEmpty()) return false;\n+        return true;\n+    }\n+}"
  }
]
