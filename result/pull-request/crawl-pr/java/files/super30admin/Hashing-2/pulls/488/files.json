[
  {
    "sha": "630d312118c96340ca850eac032b95006240cc20",
    "filename": "Longest Palindrome.py",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/super30admin/Hashing-2/blob/52eba0e4744811b2ab4dd02bfce10e39dd638479/Longest%20Palindrome.py",
    "raw_url": "https://github.com/super30admin/Hashing-2/raw/52eba0e4744811b2ab4dd02bfce10e39dd638479/Longest%20Palindrome.py",
    "contents_url": "https://api.github.com/repos/super30admin/Hashing-2/contents/Longest%20Palindrome.py?ref=52eba0e4744811b2ab4dd02bfce10e39dd638479",
    "patch": "@@ -0,0 +1,19 @@\n+#Time Complexity: O(n)\n+# Space Complexity: O(1)\n+class Solution:\n+    def longestPalindrome(self, s: str) -> int:\n+        S = set()\n+        size = 0\n+\n+        for x in range(len(s)):\n+            ch = s[x]\n+\n+            if ch in S:\n+                size += 2\n+                S.discard(ch)\n+            else:\n+                S.add(ch)\n+\n+        if len(S) == 0:\n+            return size\n+        return size + 1\n\\ No newline at end of file"
  },
  {
    "sha": "d630cb230129604af5b75b1bd21126ca06bc7c5d",
    "filename": "contiguous.py",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/super30admin/Hashing-2/blob/52eba0e4744811b2ab4dd02bfce10e39dd638479/contiguous.py",
    "raw_url": "https://github.com/super30admin/Hashing-2/raw/52eba0e4744811b2ab4dd02bfce10e39dd638479/contiguous.py",
    "contents_url": "https://api.github.com/repos/super30admin/Hashing-2/contents/contiguous.py?ref=52eba0e4744811b2ab4dd02bfce10e39dd638479",
    "patch": "@@ -0,0 +1,22 @@\n+# Time Complexity : O(n)\n+# Space Complexity : O(n)\n+class Solution:\n+    def findMaxLength(self, nums: List[int]) -> int:\n+        Dict = {}\n+        maxlen = 0\n+        currsum = 0\n+\n+        Dict[0] = -1\n+\n+        for x in range(len(nums)):\n+            if nums[x] == 0:\n+                currsum += 1\n+            else:\n+                currsum -= 1\n+\n+            if currsum in Dict:\n+                maxlen = max(maxlen, x - Dict.get(currsum))\n+            else:\n+                Dict[currsum] = x\n+\n+        return maxlen\n\\ No newline at end of file"
  },
  {
    "sha": "eca36199f98bf8d0030958a1f6c11df1159ac265",
    "filename": "subarray.py",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/super30admin/Hashing-2/blob/52eba0e4744811b2ab4dd02bfce10e39dd638479/subarray.py",
    "raw_url": "https://github.com/super30admin/Hashing-2/raw/52eba0e4744811b2ab4dd02bfce10e39dd638479/subarray.py",
    "contents_url": "https://api.github.com/repos/super30admin/Hashing-2/contents/subarray.py?ref=52eba0e4744811b2ab4dd02bfce10e39dd638479",
    "patch": "@@ -0,0 +1,18 @@\n+#Time Complexity: O(n)\n+#Space Complexity: O(n)\n+class Solution:\n+    def subarraySum(self, nums: List[int], k: int) -> int:\n+        Dict = {}\n+        count = 0\n+        currsum = 0\n+        Dict[0] = 1\n+        compliment = 0\n+        for x in range(len(nums)):\n+            currsum += nums[x]\n+            compliment = currsum - k\n+\n+            if compliment in Dict:\n+                count += Dict.get(compliment)\n+\n+            Dict[currsum] = Dict.get(currsum, 0) + 1\n+        return count\n\\ No newline at end of file"
  }
]
