[
  {
    "sha": "98943260c09091ae880a95625a9ab5ae190cfbf7",
    "filename": "MyHashSet.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/super30admin/Design-2/blob/5ca9c62b38659f4ab8eb4ec5b243ea05b4611086/MyHashSet.java",
    "raw_url": "https://github.com/super30admin/Design-2/raw/5ca9c62b38659f4ab8eb4ec5b243ea05b4611086/MyHashSet.java",
    "contents_url": "https://api.github.com/repos/super30admin/Design-2/contents/MyHashSet.java?ref=5ca9c62b38659f4ab8eb4ec5b243ea05b4611086",
    "patch": "@@ -0,0 +1,54 @@\n+/* Leetcode Question 705 */\n+public class MyHashSet {\n+    /** Initialize your data structure here. */\n+    int Bucket; //to calcute the bucket number\n+    int BucketItems; // to calculate the index of the item number in a given bucket\n+    boolean[][] storage;\n+    public MyHashSet() {\n+        Bucket = 1000;\n+        BucketItems = 1001;\n+        storage = new boolean[Bucket][];\n+    }\n+    private int Bucket(int key){\n+        return key % Bucket;\n+    } \n+    private int BucketItems(int key){\n+        return key / BucketItems;\n+    }\n+    \n+    public void add(int key) {\n+        int bucket = Bucket(key);\n+        int bucketitem = BucketItems(key);\n+        System.out.println(bucket);\n+        System.out.println(bucketitem);\n+        if(storage[bucket] == null){\n+            storage[bucket] = new boolean[BucketItems];\n+        }\n+        storage[bucket][bucketitem] = true;\n+    }\n+    \n+    public void remove(int key) {\n+        int bucket = Bucket(key);\n+        int bucketitem = BucketItems(key);\n+        if(!contains(key)){\n+            return;\n+        }\n+        storage[bucket][bucketitem] = false;\n+    }\n+    \n+    /** Returns true if this set contains the specified element */\n+    public boolean contains(int key) {\n+        int bucket = Bucket(key);\n+        int bucketitem = BucketItems(key);\n+        if(storage[bucket] == null){\n+            return false;\n+        }\n+        return storage[bucket][bucketitem];\n+    }\n+}\n+/**\n+ * Your MyHashSet object will be instantiated and called as such:\n+ * MyHashSet obj = new MyHashSet();\n+ * obj.add(key);\n+ * obj.remove(key);\n+ * boole\n\\ No newline at end of file"
  },
  {
    "sha": "0b5182b0008ee207b5df738cde22a288240fbcd1",
    "filename": "MyQueue.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/super30admin/Design-2/blob/5ca9c62b38659f4ab8eb4ec5b243ea05b4611086/MyQueue.java",
    "raw_url": "https://github.com/super30admin/Design-2/raw/5ca9c62b38659f4ab8eb4ec5b243ea05b4611086/MyQueue.java",
    "contents_url": "https://api.github.com/repos/super30admin/Design-2/contents/MyQueue.java?ref=5ca9c62b38659f4ab8eb4ec5b243ea05b4611086",
    "patch": "@@ -0,0 +1,48 @@\n+class MyQueue {\n+    /** Initialize your data structure here. */\n+    Stack<Integer> in; // Stack for pushing in the elements\n+    Stack<Integer> out; //Stack for popping all the elements\n+    public MyQueue() {\n+        in = new Stack(); \n+        out = new Stack();\n+    }\n+    \n+    /** Push element x to the back of queue. */\n+    public void push(int x) {\n+        in.push(x); \n+    }\n+    \n+    /** Removes the element from in front of queue and returns that element. */\n+    public int pop() {\n+        peek();\n+         return out.pop();\n+    }\n+    \n+    /** Get the front element. */\n+    public int peek() {\n+        if(out.isEmpty()){\n+            while(!in.isEmpty()){    //Inversion of push stack to pop stack\n+                out.push(in.pop());\n+            }   \n+        }\n+         return out.peek();\n+    }\n+    \n+    /** Returns whether the queue is empty. */\n+    public boolean empty() {\n+        if(in.isEmpty() && out.isEmpty()){\n+            return true;\n+        }\n+        return false;\n+    }\n+}\n+\n+/**\n+ * Your MyQueue object will be instantiated and called as such:\n+ * MyQueue obj = new MyQueue();\n+ * obj.push(x);\n+ * int param_2 = obj.pop();\n+ * int param_3 = obj.peek();\n+ * boolean param_4 = obj.empty();\n+ */\n+}"
  }
]
