[
  {
    "sha": "5b8f31f71b511f4f6fa2a30cfffa318243d783ad",
    "filename": "queue_stacks.py",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/super30admin/Design-2/blob/179aff81081467d26e3a494d06740c1773935935/queue_stacks.py",
    "raw_url": "https://github.com/super30admin/Design-2/raw/179aff81081467d26e3a494d06740c1773935935/queue_stacks.py",
    "contents_url": "https://api.github.com/repos/super30admin/Design-2/contents/queue_stacks.py?ref=179aff81081467d26e3a494d06740c1773935935",
    "patch": "@@ -0,0 +1,49 @@\n+# Runtime: 28 ms, faster than 79.78% of Python3 online submissions for Implement Queue using Stacks.\n+# Memory Usage: 14.4 MB, less than 11.81% of Python3 online submissions for Implement Queue using Stacks.\n+\n+class MyQueue:\n+\n+    def __init__(self):\n+        \"\"\"\n+        Initialize your data structure here.\n+        \"\"\"\n+        self.instack = []\n+        self.outstack = []\n+\n+    def push(self, x: int) -> None:\n+        \"\"\"\n+        Push element x to the back of queue.\n+        \"\"\"\n+        self.instack.append(x)\n+\n+    def pop(self) -> int:\n+        \"\"\"\n+        Removes the element from in front of queue and returns that element.\n+        \"\"\"\n+        self.peek()\n+        \n+        return self.outstack.pop()\n+        \n+    def peek(self) -> int:\n+        \"\"\"\n+        Get the front element.\n+        \"\"\"\n+        if(len(self.outstack) <= 0):\n+            while (len(self.instack) > 0):\n+                self.outstack.append(self.instack.pop())\n+        \n+        return self.outstack[-1]\n+    \n+    def empty(self) -> bool:\n+        \n+        return len(self.outstack) == 0 and len(self.instack) == 0\n+\n+# Your MyQueue object will be instantiated and called as such:\n+obj = MyQueue()\n+obj.push(1)\n+# obj.push(2)\n+\n+# param_2 = obj.pop()\n+# param_3 = obj.peek()\n+param_4 = obj.empty()\n+# print(param_2, param_3, param_4)\n\\ No newline at end of file"
  }
]
