[
  {
    "sha": "f5f18cb5b731597c14d51c3e5cf9b0a5d549ae2a",
    "filename": "HashSetImplementation.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/super30admin/Design-2/blob/d4c3ea7b19a9dd9cc4addb918c80c25cf77741f2/HashSetImplementation.java",
    "raw_url": "https://github.com/super30admin/Design-2/raw/d4c3ea7b19a9dd9cc4addb918c80c25cf77741f2/HashSetImplementation.java",
    "contents_url": "https://api.github.com/repos/super30admin/Design-2/contents/HashSetImplementation.java?ref=d4c3ea7b19a9dd9cc4addb918c80c25cf77741f2",
    "patch": "@@ -0,0 +1,51 @@\n+// Time Complexity : O(1) for all funtions\n+// Space Complexity : O(n) where n is the size of the storeage i.e. buckets*bucketItems\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : edge case for storing 10^6 i.e. key which is the size of our storage\n+\n+class MyHashSet {\n+\n+    int buckets = 1000;\n+    int bucketItems = 1001;\n+    boolean[][] storage;\n+    \n+    /** Initialize your data structure here. */\n+    public MyHashSet() {\n+        storage = new boolean[buckets][];\n+    }\n+    \n+    public int getBucket(int key){\n+        return key%buckets;\n+    }\n+    \n+    public int getBucketItem(int key){\n+        return key/buckets;\n+    }\n+    \n+    public void add(int key) {\n+        int bucket = getBucket(key), bucketItem = getBucketItem(key);\n+        if(storage[bucket] == null) storage[bucket] = new boolean[bucketItems];\n+        storage[bucket][bucketItem] = true;\n+    }\n+    \n+    public void remove(int key) {\n+        int bucket = getBucket(key), bucketItem = getBucketItem(key);\n+        if(storage[bucket] == null) return;\n+        storage[bucket][bucketItem] = false;\n+    }\n+    \n+    /** Returns true if this set contains the specified element */\n+    public boolean contains(int key) {\n+        int bucket = getBucket(key), bucketItem = getBucketItem(key);\n+        if(storage[bucket] == null) return false;\n+        return storage[bucket][bucketItem];\n+    }\n+}\n+\n+/**\n+ * Your MyHashSet object will be instantiated and called as such:\n+ * MyHashSet obj = new MyHashSet();\n+ * obj.add(key);\n+ * obj.remove(key);\n+ * boolean param_3 = obj.contains(key);\n+ */\n\\ No newline at end of file"
  },
  {
    "sha": "2ba8a53e4f16a5509f16bcb5149fdeaa4311766c",
    "filename": "StackImplementationOfQueue.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/super30admin/Design-2/blob/d4c3ea7b19a9dd9cc4addb918c80c25cf77741f2/StackImplementationOfQueue.java",
    "raw_url": "https://github.com/super30admin/Design-2/raw/d4c3ea7b19a9dd9cc4addb918c80c25cf77741f2/StackImplementationOfQueue.java",
    "contents_url": "https://api.github.com/repos/super30admin/Design-2/contents/StackImplementationOfQueue.java?ref=d4c3ea7b19a9dd9cc4addb918c80c25cf77741f2",
    "patch": "@@ -0,0 +1,50 @@\n+// Time Complexity : O(1) for all funtions\n+// Space Complexity : O(n) where n is the size of the queue\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this :\n+\n+class MyQueue {\n+\n+    /** Initialize your data structure here. */\n+    \n+    Deque<Integer> in, out;\n+    public MyQueue() {\n+        in = new ArrayDeque(); \n+        out = new ArrayDeque();\n+    }\n+    \n+    /** Push element x to the back of queue. */\n+    public void push(int x) {\n+        in.push(x);\n+    }\n+    \n+    /** Removes the element from in front of queue and returns that element. */\n+    public int pop() {\n+        peek();\n+        return out.pop();\n+    }\n+    \n+    /** Get the front element. */\n+    public int peek() {\n+        if(out.isEmpty()){\n+            while(!in.isEmpty()){\n+                out.push(in.pop());\n+            }\n+        }\n+        return out.peek();\n+    }\n+    \n+    /** Returns whether the queue is empty. */\n+    public boolean empty() {\n+        return in.isEmpty() && out.isEmpty();\n+    }\n+}\n+\n+/**\n+ * Your MyQueue object will be instantiated and called as such:\n+ * MyQueue obj = new MyQueue();\n+ * obj.push(x);\n+ * int param_2 = obj.pop();\n+ * int param_3 = obj.peek();\n+ * boolean param_4 = obj.empty();\n+ */\n\\ No newline at end of file"
  }
]
