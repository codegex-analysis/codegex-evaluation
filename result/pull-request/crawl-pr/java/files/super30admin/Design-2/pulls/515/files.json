[
  {
    "sha": "bd00a04d26fcbf9f8b2bb2cbf672c68587f1f1ef",
    "filename": "HashSet.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/super30admin/Design-2/blob/36423c5fb4e39427ae0d440b9b45f796652a42bd/HashSet.java",
    "raw_url": "https://github.com/super30admin/Design-2/raw/36423c5fb4e39427ae0d440b9b45f796652a42bd/HashSet.java",
    "contents_url": "https://api.github.com/repos/super30admin/Design-2/contents/HashSet.java?ref=36423c5fb4e39427ae0d440b9b45f796652a42bd",
    "patch": "@@ -0,0 +1,54 @@\n+class MyHashSet {\n+\n+    /** Initialize your data structure here. */\n+    int buckets;\n+    int bucketItems;\n+    boolean[][] storage;\n+\n+    public MyHashSet() {\n+        buckets = 1000;\n+        bucketItems = 1001;\n+        storage = new boolean[buckets][];\n+\n+    }\n+\n+    private int bucket(int key) {\n+        return key % buckets;\n+    }\n+\n+    private int bucketItems(int key) {\n+        return key / bucketItems;\n+    }\n+\n+    public void add(int key) {\n+        int bucket = bucket(key);\n+        int bucketItem = bucketItems(key);\n+        if (storage[bucket] == null)\n+            storage[bucket] = new boolean[bucketItems];\n+        storage[bucket][bucketItem] = true;\n+    }\n+\n+    public void remove(int key) {\n+        int bucket = bucket(key);\n+        int bucketItem = bucketItems(key);\n+        if (storage[bucket] == null)\n+            return;\n+        storage[bucket][bucketItem] = false;\n+    }\n+\n+    /** Returns true if this set contains the specified element */\n+    public boolean contains(int key) {\n+        int bucket = bucket(key);\n+        int bucketItem = bucketItems(key);\n+        if (storage[bucket] == null)\n+            return false;\n+        return storage[bucket][bucketItem];\n+\n+    }\n+}\n+\n+/**\n+ * Your MyHashSet object will be instantiated and called as such: MyHashSet obj\n+ * = new MyHashSet(); obj.add(key); obj.remove(key); boolean param_3 =\n+ * obj.contains(key);\n+ */\n\\ No newline at end of file"
  },
  {
    "sha": "fe2d959d74d40175c8ece562e92b3b3118fa29dd",
    "filename": "QueueUsingStacks.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/super30admin/Design-2/blob/36423c5fb4e39427ae0d440b9b45f796652a42bd/QueueUsingStacks.java",
    "raw_url": "https://github.com/super30admin/Design-2/raw/36423c5fb4e39427ae0d440b9b45f796652a42bd/QueueUsingStacks.java",
    "contents_url": "https://api.github.com/repos/super30admin/Design-2/contents/QueueUsingStacks.java?ref=36423c5fb4e39427ae0d440b9b45f796652a42bd",
    "patch": "@@ -0,0 +1,45 @@\n+\n+class MyQueue {\n+\n+    Stack<Integer> in;\n+    Stack<Integer> out;\n+\n+    /** Initialize your data structure here. */\n+    public MyQueue() {\n+        in = new Stack<>();\n+        out = new Stack<>();\n+    }\n+\n+    /** Push element x to the back of queue. */\n+    public void push(int x) {\n+        in.push(x);\n+    }\n+\n+    /** Removes the element from in front of queue and returns that element. */\n+    public int pop() {\n+        peek();\n+        return out.pop();\n+    }\n+\n+    /** Get the front element. */\n+    public int peek() {\n+        if (out.isEmpty()) {\n+            while (!in.isEmpty()) {\n+                out.push(in.pop());\n+            }\n+        }\n+        return out.peek();\n+\n+    }\n+\n+    /** Returns whether the queue is empty. */\n+    public boolean empty() {\n+        return in.isEmpty() && out.isEmpty();\n+    }\n+}\n+\n+/**\n+ * Your MyQueue object will be instantiated and called as such: MyQueue obj =\n+ * new MyQueue(); obj.push(x); int param_2 = obj.pop(); int param_3 =\n+ * obj.peek(); boolean param_4 = obj.empty();\n+ */\n\\ No newline at end of file"
  }
]
