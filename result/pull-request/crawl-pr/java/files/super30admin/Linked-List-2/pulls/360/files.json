[
  {
    "sha": "2d05d4a35c832164e63591315b6029dba1396169",
    "filename": "BST Iterator.py",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/d9edd1346615a030699c27ee8c9fdaf22d9c050e/BST%20Iterator.py",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/d9edd1346615a030699c27ee8c9fdaf22d9c050e/BST%20Iterator.py",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/BST%20Iterator.py?ref=d9edd1346615a030699c27ee8c9fdaf22d9c050e",
    "patch": "@@ -0,0 +1,37 @@\n+'''\n+Time Complexity: O(n)\n+Space Complexity: O(1)\n+'''\n+# Definition for a binary tree node.\n+# class TreeNode:\n+#     def __init__(self, val=0, left=None, right=None):\n+#         self.val = val\n+#         self.left = left\n+#         self.right = right\n+class BSTIterator:\n+    # stack = []\n+    def __init__(self, root: TreeNode):\n+        self.stack = []\n+        self.dfs(root)\n+\n+    def dfs(self, root):\n+        while root is not None:\n+            self.stack.append(root)\n+            root = root.left\n+\n+    def next(self) -> int:\n+        if self.hasNext() == False:\n+            return -1\n+        root = self.stack.pop()\n+        self.dfs(root.right)\n+        return root.val\n+\n+    def hasNext(self) -> bool:\n+        if not self.stack:\n+            return False\n+        return True\n+\n+# Your BSTIterator object will be instantiated and called as such:\n+# obj = BSTIterator(root)\n+# param_1 = obj.next()\n+# param_2 = obj.hasNext()\n\\ No newline at end of file"
  },
  {
    "sha": "f77de9998e576bd038738b629ec7dac3b7e54622",
    "filename": "Reorder List.py",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/d9edd1346615a030699c27ee8c9fdaf22d9c050e/Reorder%20List.py",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/d9edd1346615a030699c27ee8c9fdaf22d9c050e/Reorder%20List.py",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/Reorder%20List.py?ref=d9edd1346615a030699c27ee8c9fdaf22d9c050e",
    "patch": "@@ -0,0 +1,46 @@\n+'''\n+Time Complexity: O(n)\n+Space Complexity:O(1)\n+'''\n+# Definition for singly-linked list.\n+# class ListNode:\n+#     def __init__(self, val=0, next=None):\n+#         self.val = val\n+#         self.next = next\n+class Solution:\n+    def reorderList(self, head):\n+\n+        if not head or not head.next:\n+            return\n+        slow = head\n+        fast = head.next\n+        while fast.next and fast.next.next:\n+            slow = slow.next\n+            fast = fast.next.next\n+        slow = slow.next\n+        if fast.next:\n+            fast = fast.next\n+\n+        # reverse the second half of the list\n+        prev = slow\n+        curr = slow.next\n+        prev.next = None\n+        while curr:\n+            tmp = curr.next\n+            curr.next = prev\n+            prev = curr\n+            curr = tmp\n+\n+        # Reorder list\n+        trav = head\n+        while fast.next:\n+            tmp1 = trav.next\n+            tmp2 = fast.next\n+            trav.next = fast\n+            fast.next = tmp1\n+            trav = tmp1\n+            fast = tmp2\n+\n+        \"\"\"\n+        Do not return anything, modify head in-place instead.\n+        \"\"\"\n\\ No newline at end of file"
  }
]
