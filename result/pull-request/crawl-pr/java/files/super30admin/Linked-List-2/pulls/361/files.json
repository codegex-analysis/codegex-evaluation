[
  {
    "sha": "85879acd384a26f40b6f9a6fe3b39c8a287406b4",
    "filename": "binarySaerchIterator.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/31d8ed8564109882fce77c4f4c0a650b70bec726/binarySaerchIterator.java",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/31d8ed8564109882fce77c4f4c0a650b70bec726/binarySaerchIterator.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/binarySaerchIterator.java?ref=31d8ed8564109882fce77c4f4c0a650b70bec726",
    "patch": "@@ -0,0 +1,46 @@\n+//Problem1 (https://leetcode.com/problems/binary-search-tree-iterator/)\n+// Time Complexity : O(n)\n+// Space Complexity : O(n)\n+public class binarySaerchIterator {\n+  \n+    ArrayList<Integer> nodesSorted;\n+    int index;\n+\n+    public BSTIterator(TreeNode root) {\n+\n+        // Array containing all the nodes in the sorted order\n+        this.nodesSorted = new ArrayList<Integer>();\n+\n+        // Pointer to the next smallest element in the BST\n+        this.index = -1;\n+\n+        // Call to flatten the input binary search tree\n+        this._inorder(root);\n+    }\n+\n+    private void _inorder(TreeNode root) {\n+\n+        if (root == null) {\n+            return;\n+        }\n+\n+        this._inorder(root.left);\n+        this.nodesSorted.add(root.val);\n+        this._inorder(root.right);\n+    }\n+\n+    /**\n+     * @return the next smallest number\n+     */\n+    public int next() {\n+        return this.nodesSorted.get(++this.index);\n+    }\n+\n+    /**\n+     * @return whether we have a next smallest number\n+     */\n+    public boolean hasNext() {\n+        return this.index + 1 < this.nodesSorted.size();\n+    }\n+}\n+"
  },
  {
    "sha": "10d0a6e9fdf6b6f9f873e094b74e90f4e5eed812",
    "filename": "deleteWithoutHeadPointer.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/31d8ed8564109882fce77c4f4c0a650b70bec726/deleteWithoutHeadPointer.java",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/31d8ed8564109882fce77c4f4c0a650b70bec726/deleteWithoutHeadPointer.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/deleteWithoutHeadPointer.java?ref=31d8ed8564109882fce77c4f4c0a650b70bec726",
    "patch": "@@ -0,0 +1,10 @@\n+//Problem3 (https://practice.geeksforgeeks.org/problems/delete-without-head-pointer/1)\n+// Time Complexity : O(1)\n+// Space Complexity : O(1)\n+public class deleteWithoutHeadPointer {\n+    void deleteNode(Node node)\n+    {\n+         node.data = node.next.data;\n+         node.next = node.next.next;\n+    }\n+}"
  },
  {
    "sha": "924cab455d0e48c6e32857bf769687961e43e964",
    "filename": "intersectionofTwoLinkedList.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/31d8ed8564109882fce77c4f4c0a650b70bec726/intersectionofTwoLinkedList.java",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/31d8ed8564109882fce77c4f4c0a650b70bec726/intersectionofTwoLinkedList.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/intersectionofTwoLinkedList.java?ref=31d8ed8564109882fce77c4f4c0a650b70bec726",
    "patch": "@@ -0,0 +1,16 @@\n+// Problem4  (https://leetcode.com/problems/intersection-of-two-linked-lists/)\n+// Time Complexity : O(N*M)\n+// Space Complexity : O(1)\n+public class intersectionofTwoLinkedList {\n+    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n+        while (headA != null) {\n+            ListNode pB = headB;\n+            while (pB != null) {\n+                if (headA == pB) return headA;\n+                pB = pB.next;\n+            }\n+            headA = headA.next;\n+        }\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "40bac4d00bcc3c7dd7ef99240c957fda89fc70fa",
    "filename": "reorderList.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/31d8ed8564109882fce77c4f4c0a650b70bec726/reorderList.java",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/31d8ed8564109882fce77c4f4c0a650b70bec726/reorderList.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/reorderList.java?ref=31d8ed8564109882fce77c4f4c0a650b70bec726",
    "patch": "@@ -0,0 +1,41 @@\n+// Problem2 (https://leetcode.com/problems/reorder-list/)\n+// Time Complexity : O(N)\n+// Space Complexity : O(1)\n+public class reorderList {\n+        public void reorderList(ListNode head) {\n+          if (head == null) return;\n+      \n+          // find the middle of linked list [Problem 876]\n+          // in 1->2->3->4->5->6 find 4 \n+          ListNode slow = head, fast = head;\n+          while (fast != null && fast.next != null) {\n+            slow = slow.next;\n+            fast = fast.next.next;\n+          }\n+      \n+          // reverse the second part of the list [Problem 206]\n+          // convert 1->2->3->4->5->6 into 1->2->3->4 and 6->5->4\n+          // reverse the second half in-place\n+          ListNode prev = null, curr = slow, tmp;\n+          while (curr != null) {\n+            tmp = curr.next;\n+      \n+            curr.next = prev;\n+            prev = curr;\n+            curr = tmp;\n+          }\n+      \n+          // merge two sorted linked lists [Problem 21]\n+          // merge 1->2->3->4 and 6->5->4 into 1->6->2->5->3->4\n+          ListNode first = head, second = prev;\n+          while (second.next != null) {\n+            tmp = first.next;\n+            first.next = second;\n+            first = tmp;\n+      \n+            tmp = second.next;\n+            second.next = first;\n+            second = tmp;\n+          }\n+        }\n+}"
  }
]
