[
  {
    "sha": "23b37763a9b1aadd3a6d5dee9676bfcec9fd817e",
    "filename": "que-1.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/82747bc4ce6da043fd75578de7071fb88e772a69/que-1.java",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/82747bc4ce6da043fd75578de7071fb88e772a69/que-1.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/que-1.java?ref=82747bc4ce6da043fd75578de7071fb88e772a69",
    "patch": "@@ -0,0 +1,59 @@\n+// Time Complexity :\r\n+// Space Complexity :\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+//O(1)\r\n+//O(1)\r\n+/**\r\n+ * Definition for a binary tree node.\r\n+ * public class TreeNode {\r\n+ *     int val;\r\n+ *     TreeNode left;\r\n+ *     TreeNode right;\r\n+ *     TreeNode() {}\r\n+ *     TreeNode(int val) { this.val = val; }\r\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\r\n+ *         this.val = val;\r\n+ *         this.left = left;\r\n+ *         this.right = right;\r\n+ *     }\r\n+ * }\r\n+ */\r\n+class BSTIterator {\r\n+Stack<TreeNode> stack = new Stack <TreeNode>();\r\n+//int count = 0;\r\n+    public BSTIterator(TreeNode root) {\r\n+        \r\n+        dfs(root);\r\n+    }\r\n+    private void dfs(TreeNode root){\r\n+        while(root != null){\r\n+            stack.push(root);\r\n+            root = root.left;\r\n+            }\r\n+    }   \r\n+   \r\n+    public int next() {\r\n+        if(!hasNext()){\r\n+            return -1;\r\n+        }\r\n+        //PrintStack(stack);\r\n+        TreeNode root = stack.pop();\r\n+        dfs(root.right);\r\n+        return root.val;\r\n+    }\r\n+    \r\n+    public boolean hasNext() {\r\n+        return !(stack.isEmpty());\r\n+    }\r\n+}\r\n+\r\n+/**\r\n+ * Your BSTIterator object will be instantiated and called as such:\r\n+ * BSTIterator obj = new BSTIterator(root);\r\n+ * int param_1 = obj.next();\r\n+ * boolean param_2 = obj.hasNext();\r\n+ */\n\\ No newline at end of file"
  },
  {
    "sha": "1a7a0a32881deb5e769df766af86ab87ed81f789",
    "filename": "que-2.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/82747bc4ce6da043fd75578de7071fb88e772a69/que-2.java",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/82747bc4ce6da043fd75578de7071fb88e772a69/que-2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/que-2.java?ref=82747bc4ce6da043fd75578de7071fb88e772a69",
    "patch": "@@ -0,0 +1,55 @@\n+// Time Complexity : O(n)\r\n+// Space Complexity :O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+/**\r\n+ * Definition for singly-linked list.\r\n+ * public class ListNode {\r\n+ *     int val;\r\n+ *     ListNode next;\r\n+ *     ListNode() {}\r\n+ *     ListNode(int val) { this.val = val; }\r\n+ *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n+ * }\r\n+ */\r\n+class Solution {\r\n+    public void reorderList(ListNode head) {\r\n+        ListNode slow = head;\r\n+        ListNode fast = head;\r\n+        while(fast != null && fast.next != null){\r\n+            slow = slow.next;\r\n+            fast = fast.next.next;\r\n+        }\r\n+        fast = reverseList(slow.next);\r\n+        slow.next = null;\r\n+        slow = head;\r\n+        ListNode temp;\r\n+        while(fast!=null && slow!=null){\r\n+            temp = slow.next;\r\n+            slow.next = fast;\r\n+            slow = temp;\r\n+            \r\n+            temp = fast.next;\r\n+            fast.next = slow;\r\n+            fast = temp;\r\n+            \r\n+        }\r\n+        \r\n+    }\r\n+    public ListNode reverseList(ListNode head) {\r\n+    \r\n+    ListNode temp = head;\r\n+    ListNode prev = null;\r\n+    ListNode curr = null;\r\n+    while(temp != null){\r\n+        prev = curr;\r\n+        curr = temp;\r\n+        temp = temp.next;\r\n+        curr.next = prev;\r\n+    }\r\n+    return curr; \r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "70dfe15525e39d9d4d0980f8d7685fe41a0a8d32",
    "filename": "que-3.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/82747bc4ce6da043fd75578de7071fb88e772a69/que-3.java",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/82747bc4ce6da043fd75578de7071fb88e772a69/que-3.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/que-3.java?ref=82747bc4ce6da043fd75578de7071fb88e772a69",
    "patch": "@@ -0,0 +1,16 @@\n+// Time Complexity :\r\n+// Space Complexity :\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+class Solution\r\n+{\r\n+    void deleteNode(Node node)\r\n+    {\r\n+         // Your code here\r\n+         node.data = node.next.data;\r\n+         node.next = node.next.next;\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8a6d58d278d53936200f04b21a7c3ddd083d80fc",
    "filename": "que-4.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/super30admin/Linked-List-2/blob/82747bc4ce6da043fd75578de7071fb88e772a69/que-4.java",
    "raw_url": "https://github.com/super30admin/Linked-List-2/raw/82747bc4ce6da043fd75578de7071fb88e772a69/que-4.java",
    "contents_url": "https://api.github.com/repos/super30admin/Linked-List-2/contents/que-4.java?ref=82747bc4ce6da043fd75578de7071fb88e772a69",
    "patch": "@@ -0,0 +1,38 @@\n+// Time Complexity :\r\n+// Space Complexity :\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+public class Solution {\r\n+    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n+        int sizeA = 0;\r\n+        int sizeB = 0;\r\n+        ListNode dummyA = headA;\r\n+        ListNode dummyB = headB;\r\n+        while(dummyA != null){\r\n+            dummyA = dummyA.next;\r\n+            sizeA++;}\r\n+        while(dummyB != null){\r\n+            dummyB = dummyB.next;\r\n+            sizeB++;}\r\n+         dummyA = headA;\r\n+         dummyB = headB;\r\n+        if(sizeA > sizeB){\r\n+            while(sizeA != sizeB){\r\n+                sizeA--;\r\n+                dummyA = dummyA.next;}\r\n+        }\r\n+        else{\r\n+            while(sizeA != sizeB){\r\n+                sizeB--;\r\n+                dummyB = dummyB.next;}\r\n+            }\r\n+        while(dummyA != null && dummyA != dummyB){\r\n+            dummyA = dummyA.next;\r\n+            dummyB = dummyB.next;\r\n+        }\r\n+        return dummyA;\r\n+    }\r\n+}\n\\ No newline at end of file"
  }
]
