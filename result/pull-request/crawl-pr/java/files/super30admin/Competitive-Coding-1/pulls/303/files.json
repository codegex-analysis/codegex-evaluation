[
  {
    "sha": "13356b1a660a05586f4b3b5ce97f396a822d5bde",
    "filename": "Problem1.java",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-1/blob/5380dcc22fd7a3696e0e85b4cae803048c7afad0/Problem1.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-1/raw/5380dcc22fd7a3696e0e85b4cae803048c7afad0/Problem1.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-1/contents/Problem1.java?ref=5380dcc22fd7a3696e0e85b4cae803048c7afad0",
    "patch": "@@ -1 +1,25 @@\n+class Problem1{\n \n+    // Time Complexity: O(log n)\n+    // Space Complexity: O(1)\n+\n+    public static int missingNumber(int[] arr){\n+        if(arr == null || arr.length == 0)\n+            return 1;\n+        if(arr[0] > 1)\n+            return 1;\n+        if(arr[arr.length-1] == arr.length)\n+            return arr.length+1;\n+\n+        int low = 0;\n+        int high = arr.length - 1;\n+        while((high-low) > 1){\n+            int mid = low + (high - low) / 2;\n+            if(arr[mid] > (mid+1))\n+                high = mid;\n+            else\n+                low = mid;\n+        }\n+        return arr[low]+1;\n+    }\n+}"
  },
  {
    "sha": "8b891fcdbfb2fc1a14057f6b814592b3e5841f66",
    "filename": "Problem2.java",
    "status": "modified",
    "additions": 107,
    "deletions": 0,
    "changes": 107,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-1/blob/5380dcc22fd7a3696e0e85b4cae803048c7afad0/Problem2.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-1/raw/5380dcc22fd7a3696e0e85b4cae803048c7afad0/Problem2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-1/contents/Problem2.java?ref=5380dcc22fd7a3696e0e85b4cae803048c7afad0",
    "patch": "@@ -1 +1,108 @@\n+public class MinHeap { \n+    private int[] Heap; \n+    private int size; \n+    private int maxsize; \n+  \n+    private static final int FRONT = 1; \n+  \n+    public MinHeap(int maxsize){ \n+        this.maxsize = maxsize; \n+        this.size = 0; \n+        Heap = new int[this.maxsize + 1]; \n+        Heap[0] = Integer.MIN_VALUE; \n+    } \n \n+    private int parent(int pos){ \n+        return pos / 2; \n+    } \n+ \n+    private int leftChild(int pos){ \n+        return (2 * pos); \n+    } \n+\n+    private int rightChild(int pos){ \n+        return (2 * pos) + 1; \n+    } \n+\n+    private boolean isLeaf(int pos){ \n+        if (pos >= (size / 2) && pos <= size) { \n+            return true; \n+        } \n+        return false; \n+    } \n+\n+    private void swap(int fpos, int spos){ \n+        int tmp; \n+        tmp = Heap[fpos]; \n+        Heap[fpos] = Heap[spos]; \n+        Heap[spos] = tmp; \n+    } \n+ \n+    private void minHeapify(int pos){ \n+        if (!isLeaf(pos)) { \n+            if (Heap[pos] > Heap[leftChild(pos)] || Heap[pos] > Heap[rightChild(pos)]) { \n+                if (Heap[leftChild(pos)] < Heap[rightChild(pos)]) { \n+                    swap(pos, leftChild(pos)); \n+                    minHeapify(leftChild(pos)); \n+                }else{ \n+                    swap(pos, rightChild(pos)); \n+                    minHeapify(rightChild(pos)); \n+                }\n+            }\n+        }\n+    }\n+    // Time Complexity: O(log n)\n+    public void insert(int element){ \n+        if (size >= maxsize) { \n+            return; \n+        } \n+        Heap[++size] = element; \n+        int current = size; \n+  \n+        while (Heap[current] < Heap[parent(current)]) { \n+            swap(current, parent(current)); \n+            current = parent(current); \n+        } \n+    } \n+\n+    public void print(){ \n+        for (int i = 1; i <= size / 2; i++) { \n+            System.out.print(\" PARENT : \" + Heap[i] \n+                             + \" LEFT CHILD : \" + Heap[2 * i] \n+                             + \" RIGHT CHILD :\" + Heap[2 * i + 1]); \n+            System.out.println(); \n+        } \n+    } \n+\n+    public void minHeap(){ \n+        for (int pos = (size / 2); pos >= 1; pos--) { \n+            minHeapify(pos); \n+        } \n+    } \n+\n+    // Time Complexity: O(log n)\n+    public int remove(){ \n+        int popped = Heap[FRONT]; \n+        Heap[FRONT] = Heap[size--]; \n+        minHeapify(FRONT); \n+        return popped; \n+    } \n+  \n+    public static void main(String[] arg){ \n+        System.out.println(\"The Min Heap is \"); \n+        MinHeap minHeap = new MinHeap(15); \n+        minHeap.insert(5); \n+        minHeap.insert(3); \n+        minHeap.insert(17); \n+        minHeap.insert(10); \n+        minHeap.insert(84); \n+        minHeap.insert(19); \n+        minHeap.insert(6); \n+        minHeap.insert(22); \n+        minHeap.insert(9); \n+        minHeap.minHeap(); \n+  \n+        minHeap.print(); \n+        System.out.println(\"The Min val is \" + minHeap.remove()); \n+    } \n+}\n\\ No newline at end of file"
  }
]
