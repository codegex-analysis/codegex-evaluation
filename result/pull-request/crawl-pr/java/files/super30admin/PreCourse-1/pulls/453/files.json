[
  {
    "sha": "f20eafa2ce314ac0bff3b5379d65020dc40c64c6",
    "filename": "Exercise_1.py",
    "status": "modified",
    "additions": 7,
    "deletions": 8,
    "changes": 15,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/ace4ac5023425aaf1188b038e8a5405bd0f9d175/Exercise_1.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/ace4ac5023425aaf1188b038e8a5405bd0f9d175/Exercise_1.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_1.py?ref=ace4ac5023425aaf1188b038e8a5405bd0f9d175",
    "patch": "@@ -1,19 +1,18 @@\n class myStack:\n      def __init__(self):\n-         \n+         self.stack = []\n      def isEmpty(self):\n-         \n+         return (len(self.stack) == 0)\n      def push(self, item):\n-         \n+         self.stack.append(item)\n      def pop(self):\n-        \n-        \n+        return self.stack.pop()\n      def peek(self):\n-        \n+        return self.stack[-1]\n      def size(self):\n-         \n+         return len(self.stack)\n      def show(self):\n-         \n+         return self.stack\n \n s = myStack()\n s.push('1')"
  },
  {
    "sha": "3c1412fbda7c7142988953947eaa0b337b8956cd",
    "filename": "Exercise_2.py",
    "status": "modified",
    "additions": 15,
    "deletions": 3,
    "changes": 18,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/ace4ac5023425aaf1188b038e8a5405bd0f9d175/Exercise_2.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/ace4ac5023425aaf1188b038e8a5405bd0f9d175/Exercise_2.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_2.py?ref=ace4ac5023425aaf1188b038e8a5405bd0f9d175",
    "patch": "@@ -5,11 +5,23 @@ def __init__(self, data):\n  \n class Stack:\n     def __init__(self):\n-        \n+        self.head = Node(None)\n     def push(self, data):\n-        \n+        newNode = Node(data)\n+        if(self.head is None):\n+            self.head = newNode\n+        else:\n+            newNode.next = self.head\n+            self.head = newNode\n     def pop(self):\n-        \n+        if(self.head is None):\n+            return None\n+        else:\n+            popNode = self.head\n+            self.head = popNode.next\n+            popNode.next = None\n+            return popNode.data\n+\n a_stack = Stack()\n while True:\n     print('push <value>')"
  },
  {
    "sha": "3966bc8d0b253e456963657b8e968d8cf6283e78",
    "filename": "Exercise_3.py",
    "status": "modified",
    "additions": 50,
    "deletions": 1,
    "changes": 51,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/ace4ac5023425aaf1188b038e8a5405bd0f9d175/Exercise_3.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/ace4ac5023425aaf1188b038e8a5405bd0f9d175/Exercise_3.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_3.py?ref=ace4ac5023425aaf1188b038e8a5405bd0f9d175",
    "patch": "@@ -3,6 +3,8 @@ class ListNode:\n     A node in a singly-linked list.\n     \"\"\"\n     def __init__(self, data=None, next=None):\n+        self.data = data\n+        self.next = next\n     \n class SinglyLinkedList:\n     def __init__(self):\n@@ -17,16 +19,63 @@ def append(self, data):\n         Insert a new element at the end of the list.\n         Takes O(n) time.\n         \"\"\"\n+        if self.head is None:\n+            self.head = ListNode(data)\n+        else:\n+            currNode = self.head\n+            while(currNode.next is not None):\n+                currNode = currNode.next\n+            currNode.next = ListNode(data)\n         \n     def find(self, key):\n         \"\"\"\n         Search for the first element with `data` matching\n         `key`. Return the element or `None` if not found.\n         Takes O(n) time.\n         \"\"\"\n-        \n+        currNode = self.head\n+        while(currNode is not None):\n+            if(currNode.data == key):\n+                return currNode\n+            currNode = currNode.next\n+        return None\n+\n     def remove(self, key):\n         \"\"\"\n         Remove the first occurrence of `key` in the list.\n         Takes O(n) time.\n         \"\"\"\n+        if(self.head is None):\n+            print(\"List is Empty\")\n+            return False\n+        if(self.head.data == key):\n+            self.head = self.head.next\n+            print(\"Successfully Removed the element %s\" %key)\n+            return True\n+        curr = self.head\n+        while(curr.next is not None):\n+            if(curr.next.data == key):\n+                curr.next = curr.next.next\n+                print(\"Successfully removed the element %s\" %key)\n+                return True\n+            curr = curr.next\n+        print(\"Key doesn't exist in the List\")\n+        return False\n+    def __str__(self):\n+        curr = self.head\n+        out = []\n+        while(curr is not None):\n+            out.append(str(curr.data))\n+            curr = curr.next\n+        return \" \".join(out)\n+# Test\n+myList = SinglyLinkedList()\n+myList.append(1)\n+myList.append(2)\n+myList.append(3)\n+myList.append(4)\n+print(myList)\n+myList.remove(3)\n+print(myList)\n+myList.remove(1)\n+print(myList)\n\\ No newline at end of file"
  },
  {
    "sha": "fd1add97495ecfaca75cbd67a890c0fb9f986052",
    "filename": "Exercise_4.py",
    "status": "modified",
    "additions": 23,
    "deletions": 8,
    "changes": 31,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/ace4ac5023425aaf1188b038e8a5405bd0f9d175/Exercise_4.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/ace4ac5023425aaf1188b038e8a5405bd0f9d175/Exercise_4.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_4.py?ref=ace4ac5023425aaf1188b038e8a5405bd0f9d175",
    "patch": "@@ -1,3 +1,4 @@\n+from collections import deque\n # Python program to insert element in binary tree  \n class newNode():  \n   \n@@ -7,16 +8,30 @@ def __init__(self, data):\n         self.right = None\n           \n \"\"\" Inorder traversal of a binary tree\"\"\"\n-def inorder(temp): \n-  \n-    \n-  \n+def inorder(root):\n+    if(root):\n+        inorder(root.left)\n+        print(root.key, end =\" \")\n+        inorder(root.right)\n   \n \"\"\"function to insert element in binary tree \"\"\"\n-def insert(temp,key): \n-  \n-    \n-  \n+def insert(root,key):\n+    if root is None:\n+        root = newNode(key)\n+        return\n+    q = deque([root])\n+    while(q):\n+        curr = q.popleft()\n+        if(curr.left is None):\n+            curr.left = newNode(key)\n+            break\n+        else:\n+            q.append(root.left)\n+        if(curr.right is None):\n+            curr.right = newNode(key)\n+            break\n+        else:\n+            q.append(curr.right)\n        \n # Driver code  \n if __name__ == '__main__': "
  }
]
