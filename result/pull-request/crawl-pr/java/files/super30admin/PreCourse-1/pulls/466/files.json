[
  {
    "sha": "1bddc886574c75027a4c6b8e409d70fdd2a6c31b",
    "filename": "Exercise_1_solution.py",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/fb18af6bcfc831e2f960763f9d52b7b0d634b7c1/Exercise_1_solution.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/fb18af6bcfc831e2f960763f9d52b7b0d634b7c1/Exercise_1_solution.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_1_solution.py?ref=fb18af6bcfc831e2f960763f9d52b7b0d634b7c1",
    "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python\n+# coding: utf-8\n+\n+# In[2]:\n+\n+\n+# Implementation of Stack using Arrays\n+\n+class myStack:\n+    \n+    def __init__(self):     \n+        self.items = []\n+        self.ssize = 0\n+        return     \n+         \n+    def isEmpty(self):\n+        if self.items == []:\n+            return True\n+        else:\n+            return False\n+         \n+    def push(self, item):\n+        self.items.append(item)\n+        self.ssize += 1\n+        return\n+         \n+    def pop(self):\n+        if not self.isEmpty():\n+            self.items.pop()\n+            self.ssize -= 1\n+        return      \n+        \n+    def peek(self):\n+        if not self.isEmpty():   \n+            return self.items[-1]\n+    \n+        \n+    def size(self):\n+        return self.ssize\n+         \n+    def show(self):\n+        for i in self.items:\n+            print(self.items)\n+        return\n+         \n+\n+s = myStack()\n+s.push('1')\n+s.push('2')\n+print(s.pop())\n+print(s.show())\n+"
  },
  {
    "sha": "7180dce992e89c209742dc9938af969fa60dc5a1",
    "filename": "Exercise_2_solution.py",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/fb18af6bcfc831e2f960763f9d52b7b0d634b7c1/Exercise_2_solution.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/fb18af6bcfc831e2f960763f9d52b7b0d634b7c1/Exercise_2_solution.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_2_solution.py?ref=fb18af6bcfc831e2f960763f9d52b7b0d634b7c1",
    "patch": "@@ -0,0 +1,77 @@\n+#!/usr/bin/env python\n+# coding: utf-8\n+\n+# In[2]:\n+\n+\n+# Implementation of a Stack using a LinkedList\n+\n+class Node:\n+    def __init__(self, data): \n+        self.data = data\n+        self.next = None\n+        \n+class Stack:\n+    def __init__(self):\n+        self.head = None\n+        self.size = 0\n+        return\n+        \n+    def push(self, data):\n+        new_node = Node(data)\n+        if self.head is None:\n+            self.head = new_node\n+            self.size += 1\n+            return\n+        cur = self.head\n+        while cur.next:\n+            cur = cur.next\n+        cur.next = new_node\n+        self.size += 1\n+        return\n+        \n+    def pop(self):\n+        if not self.head:\n+            return\n+        cur = self.head\n+        prev = None\n+        while cur.next:\n+            prev = cur\n+            cur = cur.next\n+        val = cur.data\n+        prev.next = None\n+        cur = None\n+        self.size -= 1\n+        return val\n+    \n+    def display(self):\n+        if self.head is None:\n+            return None\n+        cur = self.head\n+        while cur:\n+            print(cur.data)\n+            cur = cur.next\n+        return\n+    \n+                \n+a_stack = Stack()\n+while True:\n+    print('push <value>')\n+    print('pop')\n+    print('quit')\n+    do = input('What would you like to do? ').split()\n+ \n+    operation = do[0].strip().lower()\n+    if operation == 'push':\n+        a_stack.push(int(do[1]))\n+    elif operation == 'pop':\n+        popped = a_stack.pop()\n+        if popped is None:\n+            print('Stack is empty.')\n+        else:\n+            print('Popped value: ', int(popped))\n+    elif operation == 'quit':\n+        break\n+    elif operation == 'display' :\n+        a_stack.display()\n+"
  },
  {
    "sha": "5ef03e52438ff7a10208a00ced1abf0e198ac666",
    "filename": "Exercise_3_Solution.py",
    "status": "added",
    "additions": 108,
    "deletions": 0,
    "changes": 108,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/fb18af6bcfc831e2f960763f9d52b7b0d634b7c1/Exercise_3_Solution.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/fb18af6bcfc831e2f960763f9d52b7b0d634b7c1/Exercise_3_Solution.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_3_Solution.py?ref=fb18af6bcfc831e2f960763f9d52b7b0d634b7c1",
    "patch": "@@ -0,0 +1,108 @@\n+#!/usr/bin/env python\n+# coding: utf-8\n+\n+# In[40]:\n+\n+\n+# Implementation of a Linked list\n+\n+class ListNode:  \n+    \"\"\"\n+    A node in a singly-linked list.\n+    \"\"\"\n+    def __init__(self,data = None, next = None):\n+        self.data = data\n+        self.next = None\n+        return\n+    \n+class SinglyLinkedList:\n+    def __init__(self):\n+        \"\"\"\n+        Create a new singly-linked list.\n+        Takes O(1) time.\n+        \"\"\"\n+        self.head = None\n+        self.size = 0\n+\n+    def append(self, data):\n+        \"\"\"\n+        Insert a new element at the end of the list.\n+        Takes O(n) time.\n+        \"\"\"\n+        new_node = ListNode(data)\n+        if self.head is None:\n+            self.head = new_node\n+            self.size += 1\n+            return\n+        cur_node = self.head\n+        self.size += 1\n+        while cur_node.next:\n+            cur_node = cur_node.next\n+        cur_node.next = new_node\n+        return\n+        \n+    def find(self, key):\n+        \"\"\"\n+        Search for the first element with `data` matching\n+        `key`. Return the element or `None` if not found.\n+        Takes O(n) time.\n+        \"\"\"\n+        if not self.head:\n+            return None\n+        cur_node = self.head\n+        while cur_node and cur_node.data != key:\n+            cur_node = cur_node.next\n+        if not cur_node:\n+            return None\n+        return cur_node.data    \n+    \n+    def remove(self, key):\n+        \"\"\"\n+        Remove the first occurrence of `key` in the list.\n+        Takes O(n) time.\n+        \"\"\"\n+        # When we remove the first element\n+        \n+        if self.head.data == key:\n+            self.head = self.head.next\n+            self.size -= 1\n+            return\n+        # Removing any element other than the first element\n+        prev = None\n+        cur_node  = self.head\n+        while cur_node and cur_node.data != key:\n+            prev = cur_node\n+            cur_node = cur_node.next\n+        if not cur_node:\n+            return None\n+        prev.next = cur_node.next\n+        cur_node = None\n+        self.size -= 1\n+        return\n+    \n+    def print_list(self):\n+        cur_node = self.head\n+        if not self.head:\n+            return False\n+        while cur_node:\n+            print(cur_node.data)\n+            cur_node = cur_node.next\n+        return\n+    \n+    \n+\n+\n+# In[41]:\n+\n+\n+llist = SinglyLinkedList()\n+llist.append(0)\n+llist.append(1)\n+llist.append(2)\n+llist.append(3)\n+llist.append(4)\n+print(llist.find(2))\n+llist.remove(0)\n+llist.remove(2)\n+llist.print_list()\n+"
  }
]
