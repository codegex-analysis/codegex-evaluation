[
  {
    "sha": "9d45197c8750f73229e0307e4a4ccfb1162ff546",
    "filename": "Exercise_1.py",
    "status": "modified",
    "additions": 20,
    "deletions": 8,
    "changes": 28,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/bcae3ccff8f29ae88a79a86b49c7e0859613a1c4/Exercise_1.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/bcae3ccff8f29ae88a79a86b49c7e0859613a1c4/Exercise_1.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_1.py?ref=bcae3ccff8f29ae88a79a86b49c7e0859613a1c4",
    "patch": "@@ -1,22 +1,34 @@\n class myStack:\n      def __init__(self):\n-         \n+        self.my_array = []\n      def isEmpty(self):\n-         \n+        if len(self.my_array) == 0:\n+            return True\n+        else: \n+            return False\n      def push(self, item):\n-         \n+        self.my_array.append(item)\n+        print(item+ \" -- pushed to the stack\")\n      def pop(self):\n-        \n-        \n+        return self.my_array.pop()\n      def peek(self):\n-        \n+        return self.my_array[-1]\n      def size(self):\n-         \n+        return len(self.my_array)\n      def show(self):\n-         \n+        return self.my_array\n \n s = myStack()\n s.push('1')\n s.push('2')\n print(s.pop())\n print(s.show())\n+\n+# // Did this code successfully run on LeetCode?:\n+# //         No did not find the problems. \n+\n+# //     Problems faced while coding this:\n+# //         Nope\n+\n+# //     Approach:\n+# //        defined the stack, understood what each fucntions have to do and then coded them. \n\\ No newline at end of file"
  },
  {
    "sha": "bb8c56d05996f72130e4ae969573ecf0b0e402cf",
    "filename": "Exercise_2.py",
    "status": "modified",
    "additions": 22,
    "deletions": 2,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/bcae3ccff8f29ae88a79a86b49c7e0859613a1c4/Exercise_2.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/bcae3ccff8f29ae88a79a86b49c7e0859613a1c4/Exercise_2.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_2.py?ref=bcae3ccff8f29ae88a79a86b49c7e0859613a1c4",
    "patch": "@@ -5,11 +5,23 @@ def __init__(self, data):\n  \n class Stack:\n     def __init__(self):\n+        self.head = None\n         \n     def push(self, data):\n-        \n+        if self.head == None:\n+            self.head=Node(data)\n+        else:\n+            newnode = Node(data)\n+            newnode.next = self.head\n+            self.head = newnode\n     def pop(self):\n-        \n+        if self.head == None:\n+            return None\n+        else:\n+            popnode = self.head\n+            self.head = self.head.next\n+            popnode.next = None\n+            return popnode.data\n a_stack = Stack()\n while True:\n     print('push <value>')\n@@ -28,3 +40,11 @@ def pop(self):\n             print('Popped value: ', int(popped))\n     elif operation == 'quit':\n         break\n+# // Did this code successfully run on LeetCode?:\n+# //         No did not find the problems. \n+\n+# //     Problems faced while coding this:\n+# //         Nope\n+\n+# //     Approach:\n+# //        understood what is linked list, defined the stack, understood what each fucntions have to do and then coded them. \n\\ No newline at end of file"
  },
  {
    "sha": "36507f38383b1736d64c4412ebc09a3e1e56bba7",
    "filename": "Exercise_3.py",
    "status": "modified",
    "additions": 65,
    "deletions": 2,
    "changes": 67,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/bcae3ccff8f29ae88a79a86b49c7e0859613a1c4/Exercise_3.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/bcae3ccff8f29ae88a79a86b49c7e0859613a1c4/Exercise_3.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_3.py?ref=bcae3ccff8f29ae88a79a86b49c7e0859613a1c4",
    "patch": "@@ -3,30 +3,93 @@ class ListNode:\n     A node in a singly-linked list.\n     \"\"\"\n     def __init__(self, data=None, next=None):\n-    \n+        self.data = data\n+        self.next = None   \n+        \n class SinglyLinkedList:\n     def __init__(self):\n         \"\"\"\n         Create a new singly-linked list.\n         Takes O(1) time.\n         \"\"\"\n         self.head = None\n-\n+    def print(self):\n+        temp = self.head\n+        if self.head != None:\n+            while temp != None:\n+                print(temp.data)\n+                temp = temp.next\n+        else:\n+            print(\"stack is empty\")\n+        print(\"=======================\")\n     def append(self, data):\n         \"\"\"\n         Insert a new element at the end of the list.\n         Takes O(n) time.\n         \"\"\"\n+        if self.head == None:\n+            self.head = ListNode(data)\n+        else:\n+            temp = self.head\n+            while temp.next != None:\n+                temp = temp.next\n+            newnode = ListNode(data)\n+            temp.next = newnode\n         \n     def find(self, key):\n         \"\"\"\n         Search for the first element with `data` matching\n         `key`. Return the element or `None` if not found.\n         Takes O(n) time.\n         \"\"\"\n+        # newnode = data\n+        if self.head == None:\n+            print(\"None\")\n+        else:\n+            if self.head.data == key:\n+                return self.head.data\n+            else:\n+                temp = self.head\n+                while temp.next !=None:\n+                    if temp.data ==key:\n+                        return temp.data\n+                    temp = temp.next\n+            return None\n         \n     def remove(self, key):\n         \"\"\"\n         Remove the first occurrence of `key` in the list.\n         Takes O(n) time.\n         \"\"\"\n+        temp = self.head \n+        if (temp is not None): \n+            if (temp.data == key): \n+                self.head = temp.next\n+                temp = None\n+                return\n+        while(temp is not None): \n+            if temp.data == key: \n+                break\n+            prev = temp \n+            temp = temp.next\n+        if(temp == None): \n+            return\n+        prev.next = temp.next\n+        temp = None\n+t = SinglyLinkedList()\n+t.append(1)\n+t.print()\n+t.append(2)\n+t.print()\n+t.append(3)\n+t.print()\n+t.remove(1)\n+t.print()\n+# // Did this code successfully run on LeetCode?:\n+# //         No did not find the problems. \n+\n+# //     Problems faced while coding this:\n+# //         Yes sorting out how to insert took a long time. \n+\n+# //     Approach:\n+# //        defined the linkedlist , understood what each fucntions have to do and then coded them. \n\\ No newline at end of file"
  },
  {
    "sha": "08d3aff5686ab0a2651ee1efbecb875c24d79108",
    "filename": "Exercise_4.py",
    "status": "modified",
    "additions": 28,
    "deletions": 10,
    "changes": 38,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/bcae3ccff8f29ae88a79a86b49c7e0859613a1c4/Exercise_4.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/bcae3ccff8f29ae88a79a86b49c7e0859613a1c4/Exercise_4.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_4.py?ref=bcae3ccff8f29ae88a79a86b49c7e0859613a1c4",
    "patch": "@@ -7,17 +7,25 @@ def __init__(self, data):\n         self.right = None\n           \n \"\"\" Inorder traversal of a binary tree\"\"\"\n-def inorder(temp): \n-  \n-    \n-  \n-  \n+def inorder(temp):\n+    if temp != None:\n+        inorder(temp.left)\n+        print(temp.key)\n+        inorder(temp.right)\n+     \n \"\"\"function to insert element in binary tree \"\"\"\n-def insert(temp,key): \n-  \n-    \n-  \n-       \n+def insert(temp,key):\n+    if temp is None:\n+        return newNode(key)\n+    else:\n+        if temp.key == key:\n+            return temp\n+        elif temp.key > key:\n+            temp.right = insert(temp.right, key)\n+        else:\n+            temp.left = insert(temp.left, key)\n+    return temp\n+            \n # Driver code  \n if __name__ == '__main__': \n     root = newNode(10)  \n@@ -36,3 +44,13 @@ def insert(temp,key):\n     print()  \n     print(\"Inorder traversal after insertion:\", end = \" \") \n     inorder(root) \n+    \n+# // Did this code successfully run on LeetCode?:\n+# //         No did not find the problem. \n+\n+# //     Problems faced while coding this:\n+# //         Dont know whther the inorder traversal is working well or not. The order of placing the \n+            # placing the elements into the tree has been changed. So not sure. \n+\n+# //     Approach:\n+# //        defined the BT, understood what each fucntions have to do and then coded them. "
  },
  {
    "sha": "291bbc23336a9f0491be97994fac72b019cf43bc",
    "filename": "PreCourse-1",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": null,
    "raw_url": null,
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/PreCourse-1?ref=bcae3ccff8f29ae88a79a86b49c7e0859613a1c4",
    "patch": "@@ -0,0 +1 @@\n+Subproject commit 291bbc23336a9f0491be97994fac72b019cf43bc"
  }
]
