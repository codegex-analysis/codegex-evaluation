[
  {
    "sha": "c8d53d35d7717ccd8fc9f75536065f1597771864",
    "filename": "Exercise_1.py",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/a63769c888598222238f49f8a367d27cd0ce4c54/Exercise_1.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/a63769c888598222238f49f8a367d27cd0ce4c54/Exercise_1.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_1.py?ref=a63769c888598222238f49f8a367d27cd0ce4c54",
    "patch": "@@ -1,18 +1,28 @@\n class myStack:\n      def __init__(self):\n+        self.stack = []\n          \n      def isEmpty(self):\n+        return len(self.stack) == 0\n          \n      def push(self, item):\n+        self.stack.append(item)\n          \n      def pop(self):\n-        \n+        if self.isEmpty():\n+            return \"Stack is empty\"\n+        return self.stack.pop()\n         \n      def peek(self):\n+        if self.isEmpty():\n+            return \"Stack is empty\"\n+        return self.stack[-1]\n         \n      def size(self):\n+        return len(self.stack)\n          \n      def show(self):\n+        return self.stack\n          \n \n s = myStack()"
  },
  {
    "sha": "6289e160239ec1cd9d6f10404f13f3f168e2b32b",
    "filename": "Exercise_2.py",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/a63769c888598222238f49f8a367d27cd0ce4c54/Exercise_2.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/a63769c888598222238f49f8a367d27cd0ce4c54/Exercise_2.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_2.py?ref=a63769c888598222238f49f8a367d27cd0ce4c54",
    "patch": "@@ -5,11 +5,21 @@ def __init__(self, data):\n  \n class Stack:\n     def __init__(self):\n+        self.head = None\n         \n     def push(self, data):\n+        node = Node(data)\n+        if self.head:\n+            node.next = self.head\n+        self.head = node\n         \n     def pop(self):\n-        \n+        if not self.head:\n+            return None\n+        val = self.head.data\n+        self.head = self.head.next\n+        return val\n+\n a_stack = Stack()\n while True:\n     print('push <value>')"
  },
  {
    "sha": "7afc53f5346555744ff3a44ddc5e86033daf9118",
    "filename": "Exercise_3.py",
    "status": "modified",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/a63769c888598222238f49f8a367d27cd0ce4c54/Exercise_3.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/a63769c888598222238f49f8a367d27cd0ce4c54/Exercise_3.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_3.py?ref=a63769c888598222238f49f8a367d27cd0ce4c54",
    "patch": "@@ -3,6 +3,8 @@ class ListNode:\n     A node in a singly-linked list.\n     \"\"\"\n     def __init__(self, data=None, next=None):\n+        self.data = data\n+        self.next = next\n     \n class SinglyLinkedList:\n     def __init__(self):\n@@ -17,16 +19,51 @@ def append(self, data):\n         Insert a new element at the end of the list.\n         Takes O(n) time.\n         \"\"\"\n+        node = ListNode(data, None)\n+        if self.head:\n+            temp = self.head\n+            while temp.next:\n+                temp = temp.next\n+            temp.next = node\n+        else:\n+            self.head = node\n         \n     def find(self, key):\n         \"\"\"\n         Search for the first element with `data` matching\n         `key`. Return the element or `None` if not found.\n         Takes O(n) time.\n         \"\"\"\n+        if self.head:\n+            temp = self.head\n+            while temp:\n+                if temp.data == key:\n+                    return temp.data\n+                temp = temp.next\n+            return None\n+        else:\n+            return \"Linked List is Empty\"\n         \n     def remove(self, key):\n         \"\"\"\n         Remove the first occurrence of `key` in the list.\n         Takes O(n) time.\n         \"\"\"\n+        flag = False\n+        if self.head:\n+            temp = self.head\n+            if temp.data == key:\n+                self.head = temp.next\n+                return \"Removed\"\n+\n+            while temp:\n+                if temp.data == key:\n+                    prev.next = temp.next\n+                    temp = None\n+                    return \"Removed\"\n+                else:\n+                    prev = temp\n+                temp = temp.next\n+            return \"Key not Found\"\n+        return \"Linked List is Empty\"\n+"
  },
  {
    "sha": "09e7e45554bf13baa46c9de2ece09b497bd5e480",
    "filename": "Exercise_4.py",
    "status": "modified",
    "additions": 19,
    "deletions": 3,
    "changes": 22,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/a63769c888598222238f49f8a367d27cd0ce4c54/Exercise_4.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/a63769c888598222238f49f8a367d27cd0ce4c54/Exercise_4.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_4.py?ref=a63769c888598222238f49f8a367d27cd0ce4c54",
    "patch": "@@ -8,12 +8,28 @@ def __init__(self, data):\n           \n \"\"\" Inorder traversal of a binary tree\"\"\"\n def inorder(temp): \n-  \n-    \n-  \n+    if temp:\n+        inorder(temp.left)\n+        print(temp.key, end = \" \")\n+        inorder(temp.right)\n   \n \"\"\"function to insert element in binary tree \"\"\"\n def insert(temp,key): \n+    q = []\n+    q.append(temp)\n+    node = newNode(key)\n+    while len(q):\n+        elem = q.pop(0)\n+        if elem.left == None:\n+            elem.left = node\n+            return None\n+        if elem.right == None:\n+            elem.right = node\n+            return None\n+        q.append(elem.left)\n+        q.append(elem.right)\n+    return None\n+\n   \n     \n   "
  }
]
