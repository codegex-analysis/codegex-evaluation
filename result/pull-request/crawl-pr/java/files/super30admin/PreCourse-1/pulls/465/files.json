[
  {
    "sha": "f84cd7009eedd2a4ee58e1a97eb321b01e1e643f",
    "filename": "Exercise_1.cpp",
    "status": "removed",
    "additions": 0,
    "deletions": 52,
    "changes": 52,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_1.cpp",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_1.cpp",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_1.cpp?ref=e67b63200417ad10fb9494a2c7f17f104d309d11",
    "patch": "@@ -1,52 +0,0 @@\n-#include <bits/stdc++.h> \r\n-  \r\n-using namespace std; \r\n-  \r\n-#define MAX 1000 \r\n-  \r\n-class Stack { \r\n-    int top; \r\n-  \r\n-public: \r\n-    int a[MAX]; // Maximum size of Stack \r\n-  \r\n-    Stack() { //Constructor here } \r\n-    bool push(int x); \r\n-    int pop(); \r\n-    int peek(); \r\n-    bool isEmpty(); \r\n-}; \r\n-  \r\n-bool Stack::push(int x) \r\n-{ \r\n-    //Your code here\r\n-    //Check Stack overflow as well\r\n-} \r\n-  \r\n-int Stack::pop() \r\n-{ \r\n-    //Your code here\r\n-    //Check Stack Underflow as well \r\n-} \r\n-int Stack::peek() \r\n-{ \r\n-    //Your code here\r\n-    //Check empty condition too\r\n-} \r\n-  \r\n-bool Stack::isEmpty() \r\n-{ \r\n-    //Your code here \r\n-} \r\n-  \r\n-// Driver program to test above functions \r\n-int main() \r\n-{ \r\n-    class Stack s; \r\n-    s.push(10); \r\n-    s.push(20); \r\n-    s.push(30); \r\n-    cout << s.pop() << \" Popped from stack\\n\"; \r\n-  \r\n-    return 0; \r\n-} \n\\ No newline at end of file"
  },
  {
    "sha": "0108a237973768f45e07663102c2b17ffbc60d9f",
    "filename": "Exercise_1.java",
    "status": "removed",
    "additions": 0,
    "deletions": 44,
    "changes": 44,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_1.java",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_1.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_1.java?ref=e67b63200417ad10fb9494a2c7f17f104d309d11",
    "patch": "@@ -1,44 +0,0 @@\n-class Stack { \r\n-    static final int MAX = 1000; \r\n-    int top; \r\n-    int a[] = new int[MAX]; // Maximum size of Stack \r\n-  \r\n-    boolean isEmpty() \r\n-    { \r\n-        //Write your code here \r\n-    } \r\n-\r\n-    Stack() \r\n-    { \r\n-        //Initialize your constructor \r\n-    } \r\n-  \r\n-    boolean push(int x) \r\n-    { \r\n-        //Check for stack Overflow\r\n-        //Write your code here\r\n-    } \r\n-  \r\n-    int pop() \r\n-    { \r\n-        //If empty return 0 and print \" Stack Underflow\"\r\n-        //Write your code here\r\n-    } \r\n-  \r\n-    int peek() \r\n-    { \r\n-        //Write your code here\r\n-    } \r\n-} \r\n-  \r\n-// Driver code \r\n-class Main { \r\n-    public static void main(String args[]) \r\n-    { \r\n-        Stack s = new Stack(); \r\n-        s.push(10); \r\n-        s.push(20); \r\n-        s.push(30); \r\n-        System.out.println(s.pop() + \" Popped from stack\"); \r\n-    } \r\n-}\r"
  },
  {
    "sha": "88027ed3ebb3199f69ca04e7d2d139abc97032ab",
    "filename": "Exercise_1.py",
    "status": "modified",
    "additions": 29,
    "deletions": 15,
    "changes": 44,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/9ba68cb98fb0f79b6e284f338186d610bccd1114/Exercise_1.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/9ba68cb98fb0f79b6e284f338186d610bccd1114/Exercise_1.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_1.py?ref=9ba68cb98fb0f79b6e284f338186d610bccd1114",
    "patch": "@@ -1,19 +1,33 @@\n class myStack:\n-     def __init__(self):\n-         \n-     def isEmpty(self):\n-         \n-     def push(self, item):\n-         \n-     def pop(self):\n-        \n-        \n-     def peek(self):\n-        \n-     def size(self):\n-         \n-     def show(self):\n-         \n+    def __init__(self):\n+        self.stack = []\n+\n+    def isEmpty(self):\n+        if len(self.stack) == 0:\n+            return True\n+        return False\n+\n+    def push(self, item):\n+        self.stack.append(item)\n+\n+    def pop(self):\n+        if s.isEmpty():\n+            raise Exception('Cannot pop from empty stack!')\n+        else:\n+            return self.stack.pop()\n+\n+    def peek(self):\n+        return self.stack[-1]\n+\n+    def size(self):\n+        return len(self.stack)\n+\n+    def show(self):\n+        st = []\n+        for i in self.stack:\n+            st.append(i)\n+        return st\n+\n \n s = myStack()\n s.push('1')"
  },
  {
    "sha": "1eb3de9b9e9be2cc0714ffc5bd42c0fac1899c99",
    "filename": "Exercise_2.cpp",
    "status": "removed",
    "additions": 0,
    "deletions": 52,
    "changes": 52,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_2.cpp",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_2.cpp",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_2.cpp?ref=e67b63200417ad10fb9494a2c7f17f104d309d11",
    "patch": "@@ -1,52 +0,0 @@\n-#include <bits/stdc++.h> \r\n-using namespace std; \r\n-  \r\n-// A structure to represent a stack \r\n-class StackNode { \r\n-public: \r\n-    int data; \r\n-    StackNode* next; \r\n-}; \r\n-  \r\n-StackNode* newNode(int data) \r\n-{ \r\n-    StackNode* stackNode = new StackNode(); \r\n-    stackNode->data = data; \r\n-    stackNode->next = NULL; \r\n-    return stackNode; \r\n-} \r\n-  \r\n-int isEmpty(StackNode* root) \r\n-{ \r\n-    //Your code here \r\n-} \r\n-  \r\n-void push(StackNode** root, int data) \r\n-{ \r\n-    //Your code here \r\n-} \r\n-  \r\n-int pop(StackNode** root) \r\n-{ \r\n-    //Your code here \r\n-} \r\n-  \r\n-int peek(StackNode* root) \r\n-{ \r\n-    //Your code here \r\n-} \r\n-  \r\n-int main() \r\n-{ \r\n-    StackNode* root = NULL; \r\n-  \r\n-    push(&root, 10); \r\n-    push(&root, 20); \r\n-    push(&root, 30); \r\n-  \r\n-    cout << pop(&root) << \" popped from stack\\n\"; \r\n-  \r\n-    cout << \"Top element is \" << peek(root) << endl; \r\n-  \r\n-    return 0; \r\n-} \n\\ No newline at end of file"
  },
  {
    "sha": "5a9c4868c8fdd056244f23fcbd83eda9f2cbc2d9",
    "filename": "Exercise_2.java",
    "status": "removed",
    "additions": 0,
    "deletions": 52,
    "changes": 52,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_2.java",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_2.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_2.java?ref=e67b63200417ad10fb9494a2c7f17f104d309d11",
    "patch": "@@ -1,52 +0,0 @@\n-public class StackAsLinkedList { \r\n-  \r\n-    StackNode root; \r\n-  \r\n-    static class StackNode { \r\n-        int data; \r\n-        StackNode next; \r\n-  \r\n-        StackNode(int data) \r\n-        { \r\n-            //Constructor here \r\n-        } \r\n-    } \r\n-    \r\n-\t\r\n-    public boolean isEmpty() \r\n-    { \r\n-        //Write your code here for the condition if stack is empty. \r\n-    } \r\n-  \r\n-    public void push(int data) \r\n-    { \r\n-        //Write code to push data to the stack. \r\n-    } \r\n-  \r\n-    public int pop() \r\n-    { \t\r\n-\t//If Stack Empty Return 0 and print \"Stack Underflow\"\r\n-        //Write code to pop the topmost element of stack.\r\n-\t//Also return the popped element \r\n-    } \r\n-  \r\n-    public int peek() \r\n-    { \r\n-        //Write code to just return the topmost element without removing it.\r\n-    } \r\n-  \r\n-\t//Driver code\r\n-    public static void main(String[] args) \r\n-    { \r\n-  \r\n-        StackAsLinkedList sll = new StackAsLinkedList(); \r\n-  \r\n-        sll.push(10); \r\n-        sll.push(20); \r\n-        sll.push(30); \r\n-  \r\n-        System.out.println(sll.pop() + \" popped from stack\"); \r\n-  \r\n-        System.out.println(\"Top element is \" + sll.peek()); \r\n-    } \r\n-} \r"
  },
  {
    "sha": "377d36be3919a3d6d2d6d8fc1f367197d5cd489f",
    "filename": "Exercise_2.py",
    "status": "modified",
    "additions": 45,
    "deletions": 8,
    "changes": 53,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/9ba68cb98fb0f79b6e284f338186d610bccd1114/Exercise_2.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/9ba68cb98fb0f79b6e284f338186d610bccd1114/Exercise_2.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_2.py?ref=9ba68cb98fb0f79b6e284f338186d610bccd1114",
    "patch": "@@ -1,22 +1,57 @@\n class Node:\n     def __init__(self, data):\n-       self.data = data\n-       self.next = None\n- \n+        self.data = data\n+        self.next = None\n+\n+\n class Stack:\n-    def __init__(self):\n-        \n+    def __init__(self, head=None):\n+        self.head = head\n+\n     def push(self, data):\n-        \n+        if self.head is None:\n+            self.head = Node(data)\n+            return\n+        else:\n+            iterator = self.head\n+            while iterator:\n+                if iterator.next is None:\n+                    iterator.next = Node(data)\n+                    return\n+                iterator = iterator.next\n+\n     def pop(self):\n-        \n+        if self.head is None:\n+            print('Cannot pop from empty stack!')\n+            return\n+        else:\n+            itr = self.head\n+            prev = Node(None)\n+            while itr:\n+                curr = itr\n+                if itr.next is None:\n+                    prev.next = None\n+                    return curr.data\n+                prev = curr\n+                itr = itr.next\n+\n+    def print(self):\n+        itr = self.head\n+        new_list = []\n+        while itr:\n+            new_list.append(itr.data)\n+            itr = itr.next\n+        return new_list\n+\n+\n a_stack = Stack()\n while True:\n     print('push <value>')\n     print('pop')\n+    print('print_stack')\n     print('quit')\n     do = input('What would you like to do? ').split()\n- \n+\n     operation = do[0].strip().lower()\n     if operation == 'push':\n         a_stack.push(int(do[1]))\n@@ -26,5 +61,7 @@ def pop(self):\n             print('Stack is empty.')\n         else:\n             print('Popped value: ', int(popped))\n+    elif operation == 'print_stack':\n+        print(a_stack.print())\n     elif operation == 'quit':\n         break"
  },
  {
    "sha": "f34d89ac11406be73213734d9965b9805322edb2",
    "filename": "Exercise_3.cpp",
    "status": "removed",
    "additions": 0,
    "deletions": 80,
    "changes": 80,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_3.cpp",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_3.cpp",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_3.cpp?ref=e67b63200417ad10fb9494a2c7f17f104d309d11",
    "patch": "@@ -1,80 +0,0 @@\n-#include <bits/stdc++.h> \r\n-using namespace std; \r\n-  \r\n-// A linked list node (changes) \r\n-class Node  \r\n-{  \r\n-    public: \r\n-    int data;  \r\n-    Node *next;  \r\n-};  \r\n-  \r\n-/* Given a reference (pointer to pointer) \r\n-to the head of a list and an int, inserts \r\n-a new node on the front of the list. */\r\n-void push(Node** head_ref, int new_data)  \r\n-{  \r\n-    /* 1. allocate node */ \r\n-  \r\n-    /* 2. put in the data */  \r\n-  \r\n-    /* 3. Make next of new node as head */ \r\n-  \r\n-    /* 4. move the head to point to the new node */\r\n-}  \r\n-  \r\n-/* Given a node prev_node, insert a new node after the given  \r\n-prev_node */\r\n-void insertAfter(Node* prev_node, int new_data)  \r\n-{  \r\n-    /*1. check if the given prev_node is NULL */ \r\n-  \r\n-    /* 2. allocate new node */ \r\n-  \r\n-    /* 3. put in the data */ \r\n-  \r\n-    /* 4. Make next of new node as next of prev_node */\r\n-  \r\n-    /* 5. move the next of prev_node as new_node */ \r\n-}  \r\n-  \r\n-/* Given a reference (pointer to pointer) to the head  \r\n-of a list and an int, appends a new node at the end */\r\n-void append(Node** head_ref, int new_data)  \r\n-{  \r\n-    /* 1. allocate node */ \r\n-  \r\n-    /* 2. put in the data */ \r\n-  \r\n-    /* 3. This new node is going to be  \r\n-    the last node, so make next of  \r\n-    it as NULL*/  \r\n-  \r\n-    /* 4. If the Linked List is empty, \r\n-    then make the new node as head */\r\n-  \r\n-    /* 5. Else traverse till the last node */\r\n-  \r\n-    /* 6. Change the next of last node */ \r\n-}  \r\n-  \r\n-// This function prints contents of \r\n-// linked list starting from head  \r\n-void printList(Node *node)  \r\n-{  \r\n-    //Your code here\r\n-}  \r\n-  \r\n-/* Driver code*/\r\n-int main()  \r\n-{  \r\n-    Node* head = NULL;   \r\n-    append(&head, 6);  \r\n-    push(&head, 7);  \r\n-    push(&head, 1);    \r\n-    append(&head, 4);    \r\n-    insertAfter(head->next, 8);  \r\n-    cout<<\"Created Linked list is: \";  \r\n-    printList(head);  \r\n-    return 0;  \r\n-}  \n\\ No newline at end of file"
  },
  {
    "sha": "fb66d329d00e64e2b157d42942cb8c38ab7675ee",
    "filename": "Exercise_3.java",
    "status": "removed",
    "additions": 0,
    "deletions": 70,
    "changes": 70,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_3.java",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_3.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_3.java?ref=e67b63200417ad10fb9494a2c7f17f104d309d11",
    "patch": "@@ -1,70 +0,0 @@\n-import java.io.*; \r\n-  \r\n-// Java program to implement \r\n-// a Singly Linked List \r\n-public class LinkedList { \r\n-  \r\n-    Node head; // head of list \r\n-  \r\n-    // Linked list Node. \r\n-    // This inner class is made static \r\n-    // so that main() can access it \r\n-    static class Node { \r\n-  \r\n-        int data; \r\n-        Node next; \r\n-  \r\n-        // Constructor \r\n-        Node(int d) \r\n-        { \r\n-            //Write your code here \r\n-        } \r\n-    } \r\n-  \r\n-    // Method to insert a new node \r\n-    public static LinkedList insert(LinkedList list, int data) \r\n-    { \r\n-        // Create a new node with given data \r\n-   \r\n-        // If the Linked List is empty, \r\n-        // then make the new node as head \r\n-        \r\n-            // Else traverse till the last node \r\n-            // and insert the new_node there \r\n-\r\n-            // Insert the new_node at last node \r\n-        // Return the list by head \r\n-        \r\n-    } \r\n-  \r\n-    // Method to print the LinkedList. \r\n-    public static void printList(LinkedList list) \r\n-    {  \r\n-        // Traverse through the LinkedList \r\n-   \r\n-            // Print the data at current node \r\n-       \r\n-            // Go to next node \r\n-    } \r\n-   \r\n-    // Driver code \r\n-    public static void main(String[] args) \r\n-    { \r\n-        /* Start with the empty list. */\r\n-        LinkedList list = new LinkedList(); \r\n-  \r\n-        // \r\n-        // ******INSERTION****** \r\n-        // \r\n-  \r\n-        // Insert the values \r\n-        list = insert(list, 1); \r\n-        list = insert(list, 2); \r\n-        list = insert(list, 3); \r\n-        list = insert(list, 4); \r\n-        list = insert(list, 5); \r\n-  \r\n-        // Print the LinkedList \r\n-        printList(list); \r\n-    } \r\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "45a19d8ec70d75d3d1d3e09314c9ffeedde09ffa",
    "filename": "Exercise_3.py",
    "status": "modified",
    "additions": 68,
    "deletions": 3,
    "changes": 71,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/9ba68cb98fb0f79b6e284f338186d610bccd1114/Exercise_3.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/9ba68cb98fb0f79b6e284f338186d610bccd1114/Exercise_3.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_3.py?ref=9ba68cb98fb0f79b6e284f338186d610bccd1114",
    "patch": "@@ -2,8 +2,12 @@ class ListNode:\n     \"\"\"\n     A node in a singly-linked list.\n     \"\"\"\n+\n     def __init__(self, data=None, next=None):\n-    \n+        self.data = data\n+        self.next = next\n+\n+\n class SinglyLinkedList:\n     def __init__(self):\n         \"\"\"\n@@ -17,16 +21,77 @@ def append(self, data):\n         Insert a new element at the end of the list.\n         Takes O(n) time.\n         \"\"\"\n-        \n+        if self.head is None:\n+            self.head = ListNode(data, None)\n+        else:\n+            itr = self.head\n+            while itr:\n+                if itr.next is None:\n+                    itr.next = ListNode(data, None)\n+                    return\n+                itr = itr.next\n+\n     def find(self, key):\n         \"\"\"\n         Search for the first element with `data` matching\n         `key`. Return the element or `None` if not found.\n         Takes O(n) time.\n         \"\"\"\n-        \n+        if self.head is None:\n+            return\n+        itr = self.head\n+        while itr:\n+            if itr.data == key:\n+                return itr.data\n+            itr = itr.next\n+        return None\n+\n     def remove(self, key):\n         \"\"\"\n         Remove the first occurrence of `key` in the list.\n         Takes O(n) time.\n         \"\"\"\n+        if self.head is None:\n+            print('Cannot remove from empty list!')\n+            return\n+        if self.head.data == key:\n+            self.head = self.head.next\n+            return\n+\n+        itr = self.head\n+        prev = ListNode()\n+        while itr:\n+            curr = itr\n+            if itr.data == key:\n+                prev.next = curr.next\n+                return\n+            prev = curr\n+            itr = itr.next\n+\n+    def print_sll(self):\n+        if self.head is None:\n+            print('Empty Singly Linked List!')\n+            return\n+\n+        itr = self.head\n+        linkedlist = ''\n+        while itr:\n+            linkedlist += str(itr.data) + '-->'\n+            itr = itr.next\n+        linkedlist += 'None'\n+        print(linkedlist)\n+\n+\n+if __name__ == '__main__':\n+    list_nums = []\n+    singlyll = SinglyLinkedList()\n+    singlyll.append(1)\n+    singlyll.append(2)\n+    singlyll.append(3)\n+    singlyll.append(4)\n+    singlyll.append(5)\n+    singlyll.find(5)\n+    singlyll.remove(2)\n+    singlyll.remove(5)\n+    singlyll.remove(1)\n+    singlyll.print_sll()"
  },
  {
    "sha": "885471021bd461163a4161e1cb3f2b1dcac20d59",
    "filename": "Exercise_4.cpp",
    "status": "removed",
    "additions": 0,
    "deletions": 62,
    "changes": 62,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_4.cpp",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_4.cpp",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_4.cpp?ref=e67b63200417ad10fb9494a2c7f17f104d309d11",
    "patch": "@@ -1,62 +0,0 @@\n-#include <iostream> \r\n-#include <queue> \r\n-using namespace std; \r\n-//new one\r\n-  \r\n-/* A binary tree node has key, pointer to left child \r\n-and a pointer to right child */\r\n-struct Node { \r\n-    int key; \r\n-    struct Node* left, *right; \r\n-}; \r\n-  \r\n-/* function to create a new node of tree and r \r\n-   eturns pointer */\r\n-struct Node* newNode(int key) \r\n-{ \r\n-    //Your code here\r\n-}; \r\n-  \r\n-/* Inorder traversal of a binary tree*/\r\n-void inorder(struct Node* temp) \r\n-{ \r\n-    if (!temp) \r\n-        return; \r\n-  \r\n-    inorder(temp->left); \r\n-    cout << temp->key << \" \"; \r\n-    inorder(temp->right); \r\n-} \r\n-  \r\n-/*function to insert element in binary tree */\r\n-void insert(struct Node* temp, int key) \r\n-{ \r\n-  \r\n-    // Do level order traversal until we find \r\n-    // an empty place.  \r\n-    \r\n-    //Your code here\r\n-} \r\n-  \r\n-// Driver code \r\n-int main() \r\n-{ \r\n-    struct Node* root = newNode(10); \r\n-    root->left = newNode(11); \r\n-    root->left->left = newNode(7); \r\n-    root->right = newNode(9); \r\n-    root->right->left = newNode(15); \r\n-    root->right->right = newNode(8); \r\n-  \r\n-    cout << \"Inorder traversal before insertion:\"; \r\n-    inorder(root); \r\n-  \r\n-    int key = 12; \r\n-    insert(root, key); \r\n-  \r\n-    cout << endl; \r\n-    cout << \"Inorder traversal after insertion:\"; \r\n-    inorder(root); \r\n-  \r\n-    return 0; \r\n-} \n\\ No newline at end of file"
  },
  {
    "sha": "d513209daf67a9cdf046a06d50bacd8a591e14d2",
    "filename": "Exercise_4.java",
    "status": "removed",
    "additions": 0,
    "deletions": 59,
    "changes": 59,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_4.java",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/e67b63200417ad10fb9494a2c7f17f104d309d11/Exercise_4.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_4.java?ref=e67b63200417ad10fb9494a2c7f17f104d309d11",
    "patch": "@@ -1,59 +0,0 @@\n-import java.util.LinkedList; \r\n-import java.util.Queue; \r\n-public class GFG { \r\n-       \r\n-    /* A binary tree node has key, pointer to  \r\n-    left child and a pointer to right child */\r\n-    static class Node { \r\n-        int key; \r\n-        Node left, right; \r\n-          \r\n-        // constructor \r\n-        Node(int key){ \r\n-            this.key = key; \r\n-            left = null; \r\n-            right = null; \r\n-        } \r\n-    } \r\n-    static Node root; \r\n-    static Node temp = root; \r\n-      \r\n-    /* Inorder traversal of a binary tree*/\r\n-    static void inorder(Node temp) \r\n-    { \r\n-        if (temp == null) \r\n-            return; \r\n-       \r\n-        inorder(temp.left); \r\n-        System.out.print(temp.key+\" \"); \r\n-        inorder(temp.right); \r\n-    } \r\n-       \r\n-    /*function to insert element in binary tree */\r\n-    static void insert(Node temp, int key) \r\n-    { \r\n-\r\n-        // Do level order traversal until we find \r\n-        // an empty place and add the node.  \r\n-    } \r\n-       \r\n-    // Driver code \r\n-    public static void main(String args[]) \r\n-    { \r\n-        root = new Node(10); \r\n-        root.left = new Node(11); \r\n-        root.left.left = new Node(7); \r\n-        root.right = new Node(9); \r\n-        root.right.left = new Node(15); \r\n-        root.right.right = new Node(8); \r\n-       \r\n-        System.out.print( \"Inorder traversal before insertion:\"); \r\n-        inorder(root); \r\n-       \r\n-        int key = 12; \r\n-        insert(root, key); \r\n-       \r\n-        System.out.print(\"\\nInorder traversal after insertion:\"); \r\n-        inorder(root); \r\n-    } \r\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "1e29c52a040bf349c18b49c7466e1c29a9be0c74",
    "filename": "Exercise_4.py",
    "status": "modified",
    "additions": 59,
    "deletions": 32,
    "changes": 91,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/9ba68cb98fb0f79b6e284f338186d610bccd1114/Exercise_4.py",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/9ba68cb98fb0f79b6e284f338186d610bccd1114/Exercise_4.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_4.py?ref=9ba68cb98fb0f79b6e284f338186d610bccd1114",
    "patch": "@@ -1,38 +1,65 @@\n # Python program to insert element in binary tree  \n-class newNode():  \n-  \n-    def __init__(self, data):  \n-        self.key = data \n+class newNode:\n+\n+    def __init__(self, data):\n+        self.key = data\n         self.left = None\n         self.right = None\n-          \n+\n+\n \"\"\" Inorder traversal of a binary tree\"\"\"\n-def inorder(temp): \n-  \n-    \n-  \n-  \n+\n+\n+def inorder(temp):\n+    if temp is None:\n+        return\n+\n+    inorder(temp.left)\n+    print(str(temp.key))\n+    inorder(temp.right)\n+\n+\n \"\"\"function to insert element in binary tree \"\"\"\n-def insert(temp,key): \n-  \n-    \n-  \n-       \n-# Driver code  \n-if __name__ == '__main__': \n-    root = newNode(10)  \n-    root.left = newNode(11)  \n-    root.left.left = newNode(7)  \n-    root.right = newNode(9)  \n-    root.right.left = newNode(15)  \n-    root.right.right = newNode(8)  \n-  \n-    print(\"Inorder traversal before insertion:\", end = \" \") \n-    inorder(root)  \n-  \n+\n+\n+def insert(temp, key):\n+    if not temp:\n+        root = newNode(key)\n+        return root\n+\n+    curr_nodes = [temp]\n+    while len(curr_nodes):\n+        temp = curr_nodes[0]\n+        curr_nodes.pop(0)\n+\n+        if temp.left is None:\n+            temp.left = newNode(key)\n+            return\n+        else:\n+            curr_nodes.append(temp.left)\n+\n+        if temp.right is None:\n+            temp.right = newNode(key)\n+            return\n+        else:\n+            curr_nodes.append(temp.right)\n+\n+\n+# Driver code\n+if __name__ == '__main__':\n+    root = newNode(10)\n+    root.left = newNode(11)\n+    root.left.left = newNode(7)\n+    root.right = newNode(9)\n+    root.right.left = newNode(15)\n+    root.right.right = newNode(8)\n+\n+    print(\"Inorder traversal before insertion:\", end=\" \")\n+    inorder(root)\n+\n     key = 12\n-    insert(root, key)  \n-  \n-    print()  \n-    print(\"Inorder traversal after insertion:\", end = \" \") \n-    inorder(root) \n+    insert(root, key)\n+\n+    print()\n+    print(\"Inorder traversal after insertion:\", end=\" \")\n+    inorder(root)"
  },
  {
    "sha": "1739a9cbcbab2e211048d4cb09ef2afe514e4081",
    "filename": "Sample.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/e67b63200417ad10fb9494a2c7f17f104d309d11/Sample.java",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/e67b63200417ad10fb9494a2c7f17f104d309d11/Sample.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Sample.java?ref=e67b63200417ad10fb9494a2c7f17f104d309d11",
    "patch": "@@ -1,7 +0,0 @@\n-// Time Complexity :\n-// Space Complexity :\n-// Did this code successfully run on Leetcode :\n-// Any problem you faced while coding this :\n-\n-\n-// Your code here along with comments explaining your approach"
  }
]
