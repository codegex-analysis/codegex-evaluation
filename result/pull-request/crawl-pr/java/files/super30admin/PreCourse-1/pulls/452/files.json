[
  {
    "sha": "b72c584935c2d8be905b2a6c6445387812d9ac15",
    "filename": "Exercise_1.java",
    "status": "modified",
    "additions": 34,
    "deletions": 1,
    "changes": 35,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/0d67d02e3414f9745a55f1e74728069b39358f9f/Exercise_1.java",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/0d67d02e3414f9745a55f1e74728069b39358f9f/Exercise_1.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_1.java?ref=0d67d02e3414f9745a55f1e74728069b39358f9f",
    "patch": "@@ -6,28 +6,56 @@\n     boolean isEmpty() \r\n     { \r\n         //Write your code here \r\n+     return top == -1;\r\n     } \r\n \r\n     Stack() \r\n     { \r\n         //Initialize your constructor \r\n+        \r\n+        top = -1;\r\n     } \r\n   \r\n     boolean push(int x) \r\n     { \r\n         //Check for stack Overflow\r\n         //Write your code here\r\n+        if(top >= MAX - 1){\r\n+            return false;\r\n+        }\r\n+        else{\r\n+            a[++top] = x;\r\n+            System.out.println(\"pushed into the stack\");\r\n+            return true;\r\n+        }\r\n     } \r\n   \r\n     int pop() \r\n     { \r\n         //If empty return 0 and print \" Stack Underflow\"\r\n         //Write your code here\r\n+        if(top < 0){\r\n+            System.out.println(\"Stack underflow\");\r\n+            return 0;\r\n+        }\r\n+        else{\r\n+            int x = a[top--];\r\n+            return x;\r\n+        }\r\n+        \r\n     } \r\n   \r\n     int peek() \r\n     { \r\n         //Write your code here\r\n+        if(top < 0){\r\n+            System.out.println(\"Stack underflow\");\r\n+            return 0;\r\n+        }\r\n+        else{\r\n+            int x = a[top];\r\n+            return x;\r\n+        }\r\n     } \r\n } \r\n   \r\n@@ -39,6 +67,11 @@ public static void main(String args[])\n         s.push(10); \r\n         s.push(20); \r\n         s.push(30); \r\n-        System.out.println(s.pop() + \" Popped from stack\"); \r\n+        System.out.println(s.peek()+ \" peeked item\");\r\n+        System.out.println(s.pop() + \" Popped from stack\");\r\n+        System.out.println(s.isEmpty() + \" stack is not empty\");\r\n+        System.out.println(s.pop() + \" Popped from stack\");\r\n+        System.out.println(s.pop() + \" Popped from stack\");\r\n+        System.out.println(s.isEmpty() + \" stack is not empty\");\r\n     } \r\n }\r"
  },
  {
    "sha": "a69bbca78fe9b6f58515fbdfc20b17578ffb0b31",
    "filename": "Exercise_2.java",
    "status": "modified",
    "additions": 35,
    "deletions": 7,
    "changes": 42,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/0d67d02e3414f9745a55f1e74728069b39358f9f/Exercise_2.java",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/0d67d02e3414f9745a55f1e74728069b39358f9f/Exercise_2.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_2.java?ref=0d67d02e3414f9745a55f1e74728069b39358f9f",
    "patch": "@@ -1,38 +1,66 @@\n-public class StackAsLinkedList { \r\n+\r\n+\r\n+class StackAsLinkedList { \r\n   \r\n     StackNode root; \r\n   \r\n     static class StackNode { \r\n         int data; \r\n         StackNode next; \r\n   \r\n-        StackNode(int data) \r\n-        { \r\n-            //Constructor here \r\n-        } \r\n+        // StackNode(int data) \r\n+        // { \r\n+        //     //Constructor here\r\n+        //     this.data = data;\r\n+\r\n+        // } \r\n     } \r\n+    StackAsLinkedList(){\r\n+        this.root = null;\r\n+    }\r\n     \r\n \t\r\n     public boolean isEmpty() \r\n     { \r\n         //Write your code here for the condition if stack is empty. \r\n+        return root == null;\r\n     } \r\n   \r\n     public void push(int data) \r\n     { \r\n-        //Write code to push data to the stack. \r\n+        //Write code to push data to the stack.\r\n+        StackNode oldRoot = root;\r\n+        root = new StackNode();\r\n+        root.data = data;\r\n+        root.next = oldRoot;\r\n+\r\n+\r\n     } \r\n   \r\n     public int pop() \r\n     { \t\r\n \t//If Stack Empty Return 0 and print \"Stack Underflow\"\r\n         //Write code to pop the topmost element of stack.\r\n \t//Also return the popped element \r\n+    if(root == null){\r\n+        System.out.println(\"stack Underflow\");\r\n+        return 0;\r\n+    }\r\n+    int value = root.data;\r\n+    root = root.next;\r\n+    return value;\r\n     } \r\n   \r\n     public int peek() \r\n     { \r\n         //Write code to just return the topmost element without removing it.\r\n+        if(!isEmpty()){\r\n+            return root.data;\r\n+        }\r\n+        else{\r\n+            System.out.println(\"stack is empty\");\r\n+            return 0;\r\n+        }\r\n     } \r\n   \r\n \t//Driver code\r\n@@ -45,7 +73,7 @@ public static void main(String[] args)\n         sll.push(20); \r\n         sll.push(30); \r\n   \r\n-        System.out.println(sll.pop() + \" popped from stack\"); \r\n+       // System.out.println(sll.pop() + \" popped from stack\"); \r\n   \r\n         System.out.println(\"Top element is \" + sll.peek()); \r\n     } \r"
  },
  {
    "sha": "a17acbccdc7df4d112f0d1a01de50d6932a5769c",
    "filename": "Exercise_3.java",
    "status": "modified",
    "additions": 23,
    "deletions": 3,
    "changes": 26,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/0d67d02e3414f9745a55f1e74728069b39358f9f/Exercise_3.java",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/0d67d02e3414f9745a55f1e74728069b39358f9f/Exercise_3.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_3.java?ref=0d67d02e3414f9745a55f1e74728069b39358f9f",
    "patch": "@@ -2,7 +2,7 @@\n   \r\n // Java program to implement \r\n // a Singly Linked List \r\n-public class LinkedList { \r\n+class LinkedList { \r\n   \r\n     Node head; // head of list \r\n   \r\n@@ -18,14 +18,30 @@\n         Node(int d) \r\n         { \r\n             //Write your code here \r\n+           data = d;\r\n+           next = null;\r\n+\r\n         } \r\n     } \r\n   \r\n     // Method to insert a new node \r\n     public static LinkedList insert(LinkedList list, int data) \r\n     { \r\n         // Create a new node with given data \r\n-   \r\n+        Node temp = new Node(data);\r\n+        temp.next = null;\r\n+\r\n+        if(list.head == null){\r\n+            list.head = temp;\r\n+        }\r\n+        else{\r\n+            Node last = list.head;\r\n+            while(last.next!=null){\r\n+                last = last.next;\r\n+            }\r\n+            last.next = temp;\r\n+        }\r\n+        return list;\r\n         // If the Linked List is empty, \r\n         // then make the new node as head \r\n         \r\n@@ -41,7 +57,11 @@ public static LinkedList insert(LinkedList list, int data)\n     public static void printList(LinkedList list) \r\n     {  \r\n         // Traverse through the LinkedList \r\n-   \r\n+        Node current = list.head;\r\n+        while(current!= null){\r\n+            System.out.println(current.data + \" \");\r\n+            current = current.next;\r\n+        }\r\n             // Print the data at current node \r\n        \r\n             // Go to next node \r"
  },
  {
    "sha": "ae24a1b1d1c425ada6363c0e26d99b939cd67c6a",
    "filename": "Exercise_4.java",
    "status": "modified",
    "additions": 28,
    "deletions": 2,
    "changes": 30,
    "blob_url": "https://github.com/super30admin/PreCourse-1/blob/0d67d02e3414f9745a55f1e74728069b39358f9f/Exercise_4.java",
    "raw_url": "https://github.com/super30admin/PreCourse-1/raw/0d67d02e3414f9745a55f1e74728069b39358f9f/Exercise_4.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-1/contents/Exercise_4.java?ref=0d67d02e3414f9745a55f1e74728069b39358f9f",
    "patch": "@@ -1,6 +1,6 @@\n import java.util.LinkedList; \r\n import java.util.Queue; \r\n-public class GFG { \r\n+class GFG { \r\n        \r\n     /* A binary tree node has key, pointer to  \r\n     left child and a pointer to right child */\r\n@@ -34,7 +34,33 @@ static void insert(Node temp, int key)\n     { \r\n \r\n         // Do level order traversal until we find \r\n-        // an empty place and add the node.  \r\n+        // an empty place and add the node.\r\n+        if(temp == null){\r\n+            root = new Node(key);\r\n+            \r\n+        }\r\n+        Queue<Node> q = new LinkedList<Node>();\r\n+        q.add(temp);\r\n+\r\n+\r\n+        while(!q.isEmpty()){\r\n+            System.out.println(\"temp\" + temp.key);\r\n+            temp = q.peek();\r\n+            q.remove();\r\n+           \r\n+\r\n+            if(temp.left == null){\r\n+                temp.left = new Node(key);\r\n+                break;\r\n+            }\r\n+            else q.add(temp.left);\r\n+\r\n+            if(temp.right == null) {\r\n+                temp.right = new Node(key);\r\n+                break;\r\n+            }\r\n+            else q.add(temp.right);\r\n+        }\r\n     } \r\n        \r\n     // Driver code \r"
  }
]
