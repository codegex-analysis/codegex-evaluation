[
  {
    "sha": "9625515c2fb533094036b002eab537511a1f865b",
    "filename": "solution145.py",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-11/blob/13dfe403fb26c56590e07e7a4ff237f32093f1eb/solution145.py",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-11/raw/13dfe403fb26c56590e07e7a4ff237f32093f1eb/solution145.py",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-11/contents/solution145.py?ref=13dfe403fb26c56590e07e7a4ff237f32093f1eb",
    "patch": "@@ -0,0 +1,21 @@\n+#Time Complexity:O(n)\n+#Space Complexity:O(n)\n+class Solution:\n+    def evalRPN(self, tokens: List[str]) -> int:\n+        st=[]\n+        for ch in tokens:                   #parse through the list \n+            if ch.lstrip('-').isdigit():    #if character is a number, append to stack\n+                st.append(int(ch))\n+            else:\n+                b=st.pop()                  #else obtain the last two numbers from the stack\n+                a=st.pop()\n+                if ch=='+':                 #perform the arithmetic funtion using the two numbers based on the arithmetic operator.\n+                    exp=a+b\n+                elif ch=='-':\n+                    exp=a-b\n+                elif ch=='*':\n+                    exp=a*b\n+                else:\n+                    exp=a/b\n+                st.append(int(exp))         #append the arithmetic expression result into the stack\n+        return st.pop()                     #after the list is processed return the final result.\n\\ No newline at end of file"
  },
  {
    "sha": "2178ca83829aba572acb970dd1f4cc31c46c585f",
    "filename": "solution146.py",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-11/blob/13dfe403fb26c56590e07e7a4ff237f32093f1eb/solution146.py",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-11/raw/13dfe403fb26c56590e07e7a4ff237f32093f1eb/solution146.py",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-11/contents/solution146.py?ref=13dfe403fb26c56590e07e7a4ff237f32093f1eb",
    "patch": "@@ -0,0 +1,16 @@\n+#Time Complexity:O(n)\n+#Space Complexity:O(n)\n+class Solution:\n+    def removeKdigits(self, num: str, k: int) -> str:\n+        st=[]                                               #push all characters of th string into avstack . if a character is greater than ts next , pop from stack\n+        for digit in num:\n+            while st and k>0 and st[-1]>digit:\n+                k-=1\n+                st.pop()\n+            st.append(digit)\n+        for i in range(k):                                 #if k is not zero pop from stack until k is zero\n+            st.pop()\n+        reNum=''.join(st).lstrip('0')                      #return the string without leading zeros\n+        if not reNum:\n+            return '0'                                     \n+        return reNum\n\\ No newline at end of file"
  }
]
