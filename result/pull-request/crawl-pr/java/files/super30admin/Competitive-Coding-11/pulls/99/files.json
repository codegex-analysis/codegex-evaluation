[
  {
    "sha": "664d903d6912ab057f610c2c8244e9ffb401fdbc",
    "filename": "src/EvaluateReversePolishNotation.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-11/blob/bb09dffd5a55b6bc2a302684c648d27f14adc986/src/EvaluateReversePolishNotation.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-11/raw/bb09dffd5a55b6bc2a302684c648d27f14adc986/src/EvaluateReversePolishNotation.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-11/contents/src/EvaluateReversePolishNotation.java?ref=bb09dffd5a55b6bc2a302684c648d27f14adc986",
    "patch": "@@ -0,0 +1,68 @@\n+import java.util.Stack;\n+\n+/*\n+ *  The Time complexity of the algorithm is O(n)) where n is no of elements in array.\n+ *  Space complexity of the algorithm is O(n) .\n+ */\n+\n+public class EvaluateReversePolishNotation {\n+\n+\tpublic int evalRPN(String[] tokens) {\n+\n+\t\tif (tokens.length == 0)\n+\t\t\treturn 0;\n+\n+\t\tStack<Integer> stack = new Stack<>();\n+\n+\t\tfor (String input : tokens) {\n+\n+\t\t\tif (input.equals(\"+\")) {\n+\t\t\t\tint result = 0;\n+\t\t\t\tint first = stack.pop();\n+\t\t\t\tint second = stack.pop();\n+\n+\t\t\t\tresult = first + second;\n+\t\t\t\tstack.push(result);\n+\n+\t\t\t} else if (input.equals(\"-\")) {\n+\t\t\t\tint result = 0;\n+\t\t\t\tint first = stack.pop();\n+\t\t\t\tint second = stack.pop();\n+\n+\t\t\t\tresult = (second - first);\n+\t\t\t\tstack.push(result);\n+\n+\t\t\t} else if (input.equals(\"*\")) {\n+\t\t\t\tint result = 0;\n+\t\t\t\tint first = stack.pop();\n+\t\t\t\tint second = stack.pop();\n+\n+\t\t\t\tresult = first * second;\n+\t\t\t\tstack.push(result);\n+\n+\t\t\t} else if (input.equals(\"/\")) {\n+\t\t\t\tint result = 0;\n+\t\t\t\tint first = stack.pop();\n+\t\t\t\tint second = stack.pop();\n+\n+\t\t\t\tresult = (second / first);\n+\t\t\t\tstack.push(result);\n+\n+\t\t\t} else {\n+\n+\t\t\t\tstack.push(Integer.parseInt(input));\n+\n+\t\t\t}\n+\n+\t\t}\n+\n+\t\treturn stack.pop();\n+\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\t// TODO Auto-generated method stub\n+\n+\t}\n+\n+}"
  },
  {
    "sha": "c0d626f86abf37c4ad9febba1495a9b60ceb69e1",
    "filename": "src/RemoveKDigits.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-11/blob/bb09dffd5a55b6bc2a302684c648d27f14adc986/src/RemoveKDigits.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-11/raw/bb09dffd5a55b6bc2a302684c648d27f14adc986/src/RemoveKDigits.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-11/contents/src/RemoveKDigits.java?ref=bb09dffd5a55b6bc2a302684c648d27f14adc986",
    "patch": "@@ -0,0 +1,64 @@\n+import java.util.Stack;\n+\n+/*\n+ *  The Time complexity of the algorithm is O(n)) where n is no of elements in array.\n+ *  Space complexity of the algorithm is O(n) .\n+ */\n+\n+public class RemoveKDigits {\n+\n+\tpublic String removeKdigits(String num, int k) {\n+\n+\t\tint len = num.length();\n+\n+\t\tif (len == k)\n+\t\t\treturn \"0\";\n+\n+\t\tStack<Character> stack = new Stack<>();\n+\n+\t\tint i = 0;\n+\t\twhile (i < len) {\n+\n+\t\t\twhile (k > 0 && !stack.isEmpty() && stack.peek() > num.charAt(i)) {\n+\n+\t\t\t\tstack.pop();\n+\t\t\t\tk--;\n+\n+\t\t\t}\n+\n+\t\t\tstack.push(num.charAt(i));\n+\t\t\ti++;\n+\n+\t\t}\n+\n+\t\twhile (k > 0) {\n+\n+\t\t\tstack.pop();\n+\t\t\tk--;\n+\n+\t\t}\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\twhile (!stack.isEmpty()) {\n+\n+\t\t\tsb.append(stack.pop());\n+\n+\t\t}\n+\n+\t\tsb.reverse();\n+\n+\t\twhile (sb.length() > 1 && sb.charAt(0) == '0') {\n+\n+\t\t\tsb.deleteCharAt(0);\n+\t\t}\n+\n+\t\treturn sb.toString();\n+\t}\n+\n+\tpublic static void main(String[] args) {\n+\t\t// TODO Auto-generated method stub\n+\n+\t}\n+\n+}"
  }
]
