[
  {
    "sha": "8908f29e7912f0167881ac0a2085092a35120369",
    "filename": "Beautiful _arrangement.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-6/blob/54e99b509835ceaf514a83287172f2dd0b0db8bf/Beautiful%20_arrangement.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-6/raw/54e99b509835ceaf514a83287172f2dd0b0db8bf/Beautiful%20_arrangement.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-6/contents/Beautiful%20_arrangement.java?ref=54e99b509835ceaf514a83287172f2dd0b0db8bf",
    "patch": "@@ -0,0 +1,36 @@\n+\n+// Time Complexity :O(number of beautiful combinations)\n+// Space Complexity :O(n)\n+// Did this code successfully run on Leetcode :Yes\n+// Any problem you faced while coding this :No\n+\n+\n+// Your code here along with comments explaining your approach\n+class Solution {\n+    int count=0;\n+    HashSet<Integer> set;\n+    public int countArrangement(int n) {\n+        set= new HashSet<Integer>();\n+        backtrack(1,n,1); //1,3,1\n+        return count;\n+    }\n+    \n+    \n+    public void backtrack(int index, int n, int len){//checking all possible combninations\n+      //  System.out.println(len);\n+        if(len>n){\n+            count++;\n+            return;\n+        }\n+        \n+        for(int j=1;j<=n;j++){\n+            if(!set.contains(j) && (index%j==0 || j%index==0)){//1 -> 2//check we are not repeating the same number and it satidifes beautiful arrangement\n+                set.add(j);//add the same value to hashset so that we don't repeat it.\n+                backtrack(index+1,n,len+1);//2,3,2\n+                set.remove(j);\n+            }\n+            \n+        }\n+        \n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0d30a147316550ce59dd297035d04b1e8d2e1c99",
    "filename": "Loggerrate.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-6/blob/54e99b509835ceaf514a83287172f2dd0b0db8bf/Loggerrate.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-6/raw/54e99b509835ceaf514a83287172f2dd0b0db8bf/Loggerrate.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-6/contents/Loggerrate.java?ref=54e99b509835ceaf514a83287172f2dd0b0db8bf",
    "patch": "@@ -0,0 +1,38 @@\n+// Time Complexity :O(1)\n+// Space Complexity :O(number of unique entries)\n+// Did this code successfully run on Leetcode :Yes\n+// Any problem you faced while coding this :No\n+\n+\n+// Your code here along with comments explaining your approach\n+\n+class Logger {\n+    HashMap<String, Integer> logmap;\n+    /** Initialize your data structure here. */\n+    public Logger() {\n+        logmap= new HashMap<>();\n+    }\n+    \n+    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.\n+        If this method returns false, the message will not be printed.\n+        The timestamp is in seconds granularity. */\n+    public boolean shouldPrintMessage(int timestamp, String message) {\n+        if(logmap.containsKey(message)){\n+            if(logmap.get(message)>=timestamp)//check if limit of timestamp is within message's timestamp\n+                return false;\n+            else{\n+                logmap.put(message,timestamp+9);//add the max limit of timestamp for any message\n+                return true;\n+            }\n+            \n+        }\n+        logmap.put(message,timestamp+9);\n+        return true;\n+    }\n+}\n+\n+/**\n+ * Your Logger object will be instantiated and called as such:\n+ * Logger obj = new Logger();\n+ * boolean param_1 = obj.shouldPrintMessage(timestamp,message);\n+ */\n\\ No newline at end of file"
  }
]
