[
  {
    "sha": "d3fd0111cfad1687c8eb32ca1e91b044512a3f4e",
    "filename": "CoinChange2.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/super30admin/DP-2/blob/5a77030bb14c3d9866a48510785749640b3bab11/CoinChange2.java",
    "raw_url": "https://github.com/super30admin/DP-2/raw/5a77030bb14c3d9866a48510785749640b3bab11/CoinChange2.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-2/contents/CoinChange2.java?ref=5a77030bb14c3d9866a48510785749640b3bab11",
    "patch": "@@ -0,0 +1,30 @@\n+// Here we build the DP array to find the number of ways to reah a given amount with the given set of coins\n+\n+// Time Complexity : O(n * amount) where n is the number of coins\n+// Space Complexity : O(n * amount)\n+\n+public class CoinChange2 {\n+    public static int change(int amount, int[] coins) {\n+        int m = coins.length + 1, n = amount + 1;\n+        int[][] dp = new int[m][n];\n+        dp[0][0] = 1;\n+\n+        for (int i = 1; i < m; i++) {\n+            for (int j = 0; j < n; j++) {\n+                if (coins[i - 1] > j) {\n+                    dp[i][j] = dp[i - 1][j];\n+                } else {\n+                    dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i - 1]];\n+                }\n+            }\n+        }\n+        return dp[m - 1][n - 1];\n+    }\n+\n+    public static void main(String[] args) {\n+        int[] coins = { 1, 2, 5 };\n+        int amount = 5;\n+\n+        System.out.println(\"Number of ways : \" + change(amount, coins));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e93f72ebf9d7c81d2edf0509f6bf1643b06a0cc4",
    "filename": "PaintHouse.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/super30admin/DP-2/blob/5a77030bb14c3d9866a48510785749640b3bab11/PaintHouse.java",
    "raw_url": "https://github.com/super30admin/DP-2/raw/5a77030bb14c3d9866a48510785749640b3bab11/PaintHouse.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-2/contents/PaintHouse.java?ref=5a77030bb14c3d9866a48510785749640b3bab11",
    "patch": "@@ -0,0 +1,38 @@\n+// we start with the second row(2nd house) and to paint a particular house, with that color, we select the minimum costs needed\n+// to paint the previous house with the color other than the current color. \n+// We continue this until the last hose and return the minimum cost.\n+\n+// Time Complexity : O(n), where n is the number of houses\n+// Space Complexity : O(1)\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class PaintHouse {\n+\n+    public static int minCost(int[][] costs) {\n+        if (costs == null || costs.length == 0)\n+            return 0;\n+        int n = costs.length;\n+\n+        int[] previousRow = costs[0];\n+        for (int i = 1; i < n; i++) {\n+            int[] currentRow = new int[3];\n+            for (int j = 0; j < 3; j++) {\n+                currentRow[j] = costs[i][j] + Math.min(previousRow[(j + 1) % 3], previousRow[(j + 2) % 3]);\n+            }\n+            previousRow = currentRow;\n+        }\n+        return Math.min(previousRow[0], Math.min(previousRow[1], previousRow[2]));\n+    }\n+\n+    public static void main(String[] args) {\n+        List<int[][]> input = new ArrayList<>();\n+        Collections.addAll(input, new int[][] { { 17, 2, 17 }, { 16, 16, 5 }, { 14, 3, 19 } });\n+\n+        for (int[][] costs : input) {\n+            System.out.println(minCost(costs));\n+        }\n+    }\n+}\n\\ No newline at end of file"
  }
]
