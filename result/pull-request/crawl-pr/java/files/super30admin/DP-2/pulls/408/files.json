[
  {
    "sha": "a207d73ef63490705dc69e45e1a7067d182976ba",
    "filename": "CoinChange2.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/super30admin/DP-2/blob/1c1e6bb5a918925f9d721be74a1ae9a7d5c37393/CoinChange2.java",
    "raw_url": "https://github.com/super30admin/DP-2/raw/1c1e6bb5a918925f9d721be74a1ae9a7d5c37393/CoinChange2.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-2/contents/CoinChange2.java?ref=1c1e6bb5a918925f9d721be74a1ae9a7d5c37393",
    "patch": "@@ -0,0 +1,28 @@\n+// Time Complexity : O(n*m) where n is the coins array length and m is the amount\n+// Space Complexity : O(n*m)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+\n+\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+    public int change(int amount, int[] coins) {\n+        int n = coins.length+1, m = amount+1;\n+        int[][] dp = new int[n][m];\n+        \n+        // Using DP approach\n+        for(int j=0;j<n;j++){\n+            dp[j][0] = 1;\n+        }\n+        for(int i=1;i<n;i++){\n+            for(int j=1;j<m;j++){\n+                if(j < coins[i-1])\n+                    dp[i][j] = dp[i-1][j];\n+                else\n+                    dp[i][j] = dp[i][j-coins[i-1]]+dp[i-1][j];\n+            }\n+        }\n+        return dp[n-1][m-1];\n+    }\n+}"
  },
  {
    "sha": "068ad8702ec5af46dc17299e8f57f8193d6a908a",
    "filename": "PaintHouse.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/super30admin/DP-2/blob/1c1e6bb5a918925f9d721be74a1ae9a7d5c37393/PaintHouse.java",
    "raw_url": "https://github.com/super30admin/DP-2/raw/1c1e6bb5a918925f9d721be74a1ae9a7d5c37393/PaintHouse.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-2/contents/PaintHouse.java?ref=1c1e6bb5a918925f9d721be74a1ae9a7d5c37393",
    "patch": "@@ -0,0 +1,50 @@\n+// Time Complexity : O(n) where n is the number of rows of the matrix\n+// Since there were 3 colors it gives O(3n) which can be referred as O(n)\n+// If it was m number of colors then the complexity will be O(n*m)\n+// Space Complexity : O(1)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+\n+\n+// Your code here along with comments explaining your approach\n+\n+// Used generalized solution to choose the minimum of the previous house paint cost of different color\n+class Solution {\n+    public int minCost(int[][] costs) {\n+        if(costs.length==0) return 0;\n+        int n=costs.length;\n+        int m = costs[0].length;\n+        for(int i=1;i<n;i++){\n+            for(int j=0;j<m;j++)\n+              // Generalized for m number of colors given for n number of houses\n+                costs[i][j] += Math.min(costs[i-1][(j+2)%m],costs[i-1][(j+1)%m]);\n+        }\n+        int min=Integer.MAX_VALUE;\n+        for(int k:costs[n-1])\n+            min = Math.min(min,k);\n+        return min;\n+    }\n+}\n+\n+/* More generalized solution with n rows as houses and m columns as colors\n+class Solution {\n+    public int minCost(int[][] costs) {\n+        if(costs.length==0) return 0;\n+        int n=costs.length;\n+        int m = costs[0].length;\n+        for(int i=1;i<n;i++){\n+            for(int j=0;j<m;j++){\n+                int temp = Integer.MAX_VALUE; \n+                for(int k=0;k<m;k++){\n+                    if(!(k == j)) temp= Math.min(temp,costs[i-1][k]);  \n+                }\n+                costs[i][j] += temp;\n+            }\n+        }\n+        int min=Integer.MAX_VALUE;\n+        for(int k:costs[n-1])\n+            min = Math.min(min,k);\n+        return min;\n+    }\n+}\n+*/"
  }
]
