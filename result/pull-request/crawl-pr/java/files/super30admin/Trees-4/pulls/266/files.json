[
  {
    "sha": "1dbdfec49c258bd75c8e7dfa85eb3e82169b1685",
    "filename": "LCA in BST",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/3c6b36eccc5ab24a9f95c814939e5f4e8c532ecb/LCA%20in%20BST",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/3c6b36eccc5ab24a9f95c814939e5f4e8c532ecb/LCA%20in%20BST",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/LCA%20in%20BST?ref=3c6b36eccc5ab24a9f95c814939e5f4e8c532ecb",
    "patch": "@@ -0,0 +1,28 @@\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode(int x) { val = x; }\n+ * }\n+ */\n+\n+class Solution {\n+    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n+        if(root == null){\n+            return null;\n+        }\n+        if(root.val == p.val || root.val == q.val){\n+            return root;\n+        }\n+        if(p.val < root.val && q.val > root.val || p.val > root.val && q.val < root.val){\n+            return root;\n+        }\n+        if(p.val < root.val && q.val < root.val)\n+            return lowestCommonAncestor(root.left, p,q);\n+        \n+        else\n+            return lowestCommonAncestor(root.right, p, q);\n+    }\n+}"
  },
  {
    "sha": "0980854bcc907c92bc89ec0e4bda7c7a0aa71d48",
    "filename": "Lowest Common Ancestor in Binary Tree",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/3c6b36eccc5ab24a9f95c814939e5f4e8c532ecb/Lowest%20Common%20Ancestor%20in%20Binary%20Tree",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/3c6b36eccc5ab24a9f95c814939e5f4e8c532ecb/Lowest%20Common%20Ancestor%20in%20Binary%20Tree",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/Lowest%20Common%20Ancestor%20in%20Binary%20Tree?ref=3c6b36eccc5ab24a9f95c814939e5f4e8c532ecb",
    "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode(int x) { val = x; }\n+ * }\n+ */\n+class Solution {\n+    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n+        if(root == null){\n+            return null;\n+        }\n+        if(root == p || root == q){\n+            return root;\n+        }\n+        TreeNode rootLeft = lowestCommonAncestor(root.left, p, q);\n+        TreeNode rootRight = lowestCommonAncestor(root.right,p,q);\n+        if(rootLeft!=null && rootRight!=null){\n+            return root;\n+        }\n+        if(rootLeft==null && rootRight == null){\n+            return null;\n+        }\n+        \n+        return rootLeft!=null?rootLeft : rootRight;\n+    }\n+}"
  },
  {
    "sha": "62e6bf5a25ced853adc3be338055ed43c28d8376",
    "filename": "kth smallest element in a bst",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/3c6b36eccc5ab24a9f95c814939e5f4e8c532ecb/kth%20smallest%20element%20in%20a%20bst",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/3c6b36eccc5ab24a9f95c814939e5f4e8c532ecb/kth%20smallest%20element%20in%20a%20bst",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/kth%20smallest%20element%20in%20a%20bst?ref=3c6b36eccc5ab24a9f95c814939e5f4e8c532ecb",
    "patch": "@@ -0,0 +1,36 @@\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode() {}\n+ *     TreeNode(int val) { this.val = val; }\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\n+ *         this.val = val;\n+ *         this.left = left;\n+ *         this.right = right;\n+ *     }\n+ * }\n+ */\n+class Solution {\n+    public int kthSmallest(TreeNode root, int k) {\n+        if(root == null){\n+            return 0;\n+        }\n+        Stack<TreeNode> stack = new Stack<TreeNode>();\n+        while(!stack.isEmpty() || root!=null){\n+            while(root!=null){\n+            stack.push(root);\n+            root = root.left;\n+            }\n+        TreeNode top = stack.pop();\n+        k -=1;\n+        if(k==0){\n+            return top.val;\n+        }\n+        root = top.right;\n+    }\n+    return -1;\n+    }\n+}"
  }
]
