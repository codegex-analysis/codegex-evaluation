[
  {
    "sha": "e1f397453696cafa8fd65fbed855ec09635fdbda",
    "filename": "kthSmallest.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/3a1c91091a74af58a4e47df0e743790f17a65966/kthSmallest.java",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/3a1c91091a74af58a4e47df0e743790f17a65966/kthSmallest.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/kthSmallest.java?ref=3a1c91091a74af58a4e47df0e743790f17a65966",
    "patch": "@@ -0,0 +1,32 @@\n+// Time Complexity : O(h+k)\n+// Space Complexity : O(h) \n+// Did this code successfully run on Leetcode : YES\n+// Any problem you faced while coding this : NO\n+\n+\n+// Your code here along with comments explaining your approach\n+// Do a inorder traversal till k values\n+class Solution {\n+    public int kthSmallest(TreeNode root, int k) {\n+        \n+        \n+        Stack<TreeNode> s = new Stack();\n+        \n+        while(!s.isEmpty() || root!=null) {\n+            \n+            while(root!=null) {\n+                \n+                s.add(root);\n+                root=root.left;\n+                \n+            }\n+            root = s.pop();\n+            k--;\n+            if(k==0) return root.val;\n+            \n+            root=root.right;\n+              \n+        }\n+        return -1;\n+    }\n+}"
  },
  {
    "sha": "8692a488d58bda5b6354b9a589e645d03602577f",
    "filename": "lowestCommonAncestor.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/3a1c91091a74af58a4e47df0e743790f17a65966/lowestCommonAncestor.java",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/3a1c91091a74af58a4e47df0e743790f17a65966/lowestCommonAncestor.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/lowestCommonAncestor.java?ref=3a1c91091a74af58a4e47df0e743790f17a65966",
    "patch": "@@ -0,0 +1,26 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(1) \n+// Did this code successfully run on Leetcode : YES\n+// Any problem you faced while coding this : NO\n+\n+\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n+        \n+        while(root!=null) {\n+            \n+            if(p.val<=root.val && q.val>=root.val || p.val>=root.val && q.val<=root.val) {\n+                return root;\n+            }\n+            else if(p.val<root.val&&q.val<root.val) {\n+                root=root.left;\n+            } else {\n+                root=root.right;\n+            }\n+            \n+        }\n+        return null;\n+    }\n+}"
  },
  {
    "sha": "a028eccbb0022c98b213afe4970448fb8cee11a3",
    "filename": "lowestCommonAncestorBT.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/3a1c91091a74af58a4e47df0e743790f17a65966/lowestCommonAncestorBT.java",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/3a1c91091a74af58a4e47df0e743790f17a65966/lowestCommonAncestorBT.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/lowestCommonAncestorBT.java?ref=3a1c91091a74af58a4e47df0e743790f17a65966",
    "patch": "@@ -0,0 +1,25 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(h) \n+// Did this code successfully run on Leetcode : YES\n+// Any problem you faced while coding this : NO\n+\n+\n+// Your code here along with comments explaining your approach\n+class Solution {\n+    \n+    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n+        \n+        if(root==null) return root;\n+        if(root.val==p.val||root.val==q.val) return root;\n+        \n+        TreeNode left = lowestCommonAncestor(root.left,p,q);\n+        TreeNode right = lowestCommonAncestor(root.right,p,q);\n+        \n+        if(left!=null && right!=null)\n+            return root;\n+        else if(left!=null)\n+            return left;\n+        else\n+            return right;\n+    }\n+}"
  }
]
