[
  {
    "sha": "78c12456563e022ac112f32670e0c3eca79c7a37",
    "filename": "Problem1.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/880b4bd457da4edea7221f7e06b1cf0897acc10f/Problem1.java",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/880b4bd457da4edea7221f7e06b1cf0897acc10f/Problem1.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/Problem1.java?ref=880b4bd457da4edea7221f7e06b1cf0897acc10f",
    "patch": "@@ -0,0 +1,20 @@\n+//time complexity-O(n)\n+//space complexity-O(1)\n+//Ran on leetcode-Yes\n+//Solution with comments-\n+\n+class Solution {\n+    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n+        TreeNode node = root;\n+        while(node!=null){\n+        if(p.val<node.val && q.val<node.val)\n+           node=node.left;\n+        else if(p.val>node.val && q.val>node.val)\n+            node=node.right;\n+        else \n+            return node;\n+        }\n+        return node;\n+        \n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4798e5c83d271491ab497e5200355fc11cd6e23c",
    "filename": "Problem2.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/880b4bd457da4edea7221f7e06b1cf0897acc10f/Problem2.java",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/880b4bd457da4edea7221f7e06b1cf0897acc10f/Problem2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/Problem2.java?ref=880b4bd457da4edea7221f7e06b1cf0897acc10f",
    "patch": "@@ -0,0 +1,21 @@\n+//time complexity-O(n)\n+//space complexity-O(n)\n+//Ran on leetcode-Yes\n+//Solution with comments-\n+class Solution {\n+    \n+    public int kthSmallest(TreeNode root, int k) {\n+        Stack<TreeNode> st = new Stack<>();\n+        while(true){\n+            while(root!=null){\n+                st.push(root);\n+                root=root.left;\n+            }\n+            TreeNode top = st.pop();\n+            k--;\n+            if(k==0)  return top.val;\n+            root=top.right;\n+        }\n+  \n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "55224a0e7380c072b5230a3c83854d3755336401",
    "filename": "Problem3.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/880b4bd457da4edea7221f7e06b1cf0897acc10f/Problem3.java",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/880b4bd457da4edea7221f7e06b1cf0897acc10f/Problem3.java",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/Problem3.java?ref=880b4bd457da4edea7221f7e06b1cf0897acc10f",
    "patch": "@@ -0,0 +1,32 @@\n+//time complexity-O(n)\n+//space complexity-O(depth)\n+//Ran on leetcode-Yes\n+//Solution with comments-\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode(int x) { val = x; }\n+ * }\n+ */\n+class Solution {\n+    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n+       \n+        if(root==p || root==q || root == null)\n+            return root;\n+                \n+        TreeNode left=lowestCommonAncestor(root.left,p,q);\n+        TreeNode right=lowestCommonAncestor(root.right,p,q);\n+        if (left!=null && right!=null)\n+        System.out.println(left.val+\" \"+right.val);\n+        if(left!=null && right !=null)\n+            return root;\n+        else if( right!=null )\n+            return right;\n+        else\n+            return left;\n+        \n+    }\n+}\n\\ No newline at end of file"
  }
]
