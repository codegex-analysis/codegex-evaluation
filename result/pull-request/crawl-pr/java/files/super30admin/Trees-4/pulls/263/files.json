[
  {
    "sha": "9197b49f44757c5861281ea5e9f6f4edf9ef22cb",
    "filename": "Problem1.py",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/c25d90a581d81d638308c6cab69d1d5d2fbc4649/Problem1.py",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/c25d90a581d81d638308c6cab69d1d5d2fbc4649/Problem1.py",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/Problem1.py?ref=c25d90a581d81d638308c6cab69d1d5d2fbc4649",
    "patch": "@@ -0,0 +1,25 @@\n+\"\"\"\n+230. Kth Smallest Element in a BST\n+Time Complexity - O(n)\n+Space Complexity - O(Depth of tree)\n+This is a iterative solution where we make a stack and as we know if we traverse tree in inorder then we will be able to get Tree in sorted pattern then after push elements till the left last element start poping element and decrement k if k == 0 then if means poped elemnt is output else push right element of poped element\"\"\"\n+# Definition for a binary tree node.\n+# class TreeNode:\n+#     def __init__(self, val=0, left=None, right=None):\n+#         self.val = val\n+#         self.left = left\n+#         self.right = right\n+class Solution:\n+    def kthSmallest(self, root: TreeNode, k: int) -> int:\n+        stack = []\n+        while(stack or root != None):\n+            while(root != None):\n+                stack.append(root)\n+                root = root.left\n+            top = stack.pop()\n+            k -= 1\n+            if k == 0:\n+                return top.val\n+            root = top.right\n+        return -1\n+        \n\\ No newline at end of file"
  },
  {
    "sha": "8904679044dc7998f747f2a46a54ecc1ea883af1",
    "filename": "Problem2.py",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/c25d90a581d81d638308c6cab69d1d5d2fbc4649/Problem2.py",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/c25d90a581d81d638308c6cab69d1d5d2fbc4649/Problem2.py",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/Problem2.py?ref=c25d90a581d81d638308c6cab69d1d5d2fbc4649",
    "patch": "@@ -0,0 +1,31 @@\n+\"\"\"\n+235. Lowest Common Ancestor of a Binary Search Tree\n+Time Complexity - O(n)\n+Space Complexity - O(depth of tree)\n+This is a recurssive solution where we will check if root is None return None\n+Check if root val is equal to p or q values, return root\n+else check if p and q values satisfy binary search tree conditions if yes return root\n+if both the values are less than root then change root to root.left\n+if both the values are greater than root return root.right\n+\"\"\"\n+# Definition for a binary tree node.\n+# class TreeNode:\n+#     def __init__(self, x):\n+#         self.val = x\n+#         self.left = None\n+#         self.right = None\n+\n+class Solution:\n+    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n+        if root == None:\n+            return None\n+        if root.val == p.val or root.val == q.val:\n+            return root\n+        if p.val < root.val and q.val > root.val or q.val < root.val and p.val > root.val:\n+            return root\n+        elif p.val < root.val and q.val < root.val:\n+            return lowestCommonAncestor(root.left, p, q)\n+        else:\n+            return lowestCommonAncestor(root.right, p, q)\n+        \n+        \n\\ No newline at end of file"
  },
  {
    "sha": "ef71017803c20186d30a862fba17fc1efb852765",
    "filename": "Problem3.py",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/super30admin/Trees-4/blob/c25d90a581d81d638308c6cab69d1d5d2fbc4649/Problem3.py",
    "raw_url": "https://github.com/super30admin/Trees-4/raw/c25d90a581d81d638308c6cab69d1d5d2fbc4649/Problem3.py",
    "contents_url": "https://api.github.com/repos/super30admin/Trees-4/contents/Problem3.py?ref=c25d90a581d81d638308c6cab69d1d5d2fbc4649",
    "patch": "@@ -0,0 +1,26 @@\n+\"\"\"\n+236. Lowest Common Ancestor of a Binary Tree\n+Time Complexity - O(n)\n+Space Complexity - O(depth of tree)\n+Here I have used a recursive solution where I have a root val I compare if my root is equal to any of the given node values then return node or else find left and right nodes of tree and if both of them are not none then return root if any one is a non none value return that respective side of node.\"\"\"\n+# Definition for a binary tree node.\n+# class TreeNode:\n+#     def __init__(self, x):\n+#         self.val = x\n+#         self.left = None\n+#         self.right = None\n+\n+class Solution:\n+    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n+        if root == None:\n+            return root\n+        if root.val == p.val or root.val == q.val:\n+            return root\n+        left = self.lowestCommonAncestor(root.left,p,q)\n+        right = self.lowestCommonAncestor(root.right,p,q)\n+        if (left != None and right != None):\n+            return root\n+        elif left != None:\n+            return left\n+        else:\n+            return right\n\\ No newline at end of file"
  }
]
