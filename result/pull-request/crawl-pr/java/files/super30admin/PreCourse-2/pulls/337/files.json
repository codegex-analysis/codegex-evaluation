[
  {
    "sha": "fe38a4aff93ba76a8b1d7b23d384c1e22c36cc67",
    "filename": "Exercise_1.java",
    "status": "modified",
    "additions": 20,
    "deletions": 2,
    "changes": 22,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_1.java",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_1.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_1.java?ref=88f0a80693798780a4cc62a0529a8780fde62e14",
    "patch": "@@ -3,15 +3,33 @@\n     int binarySearch(int arr[], int l, int r, int x) \r\n     { \r\n         //Write your code here\r\n+        if(r >= l){\r\n+            int mid = (l+r) / 2 ;\r\n+            System.out.println(r +\" \"+ l + \" \"+ (r-l)+\" \"+ mid);\r\n+            if(arr[mid] == x){\r\n+               \r\n+                return mid;\r\n+\r\n+            }\r\n+            if(arr[mid] > x){\r\n+                //System.out.println(mid);\r\n+                return binarySearch(arr, l, mid -1, x);\r\n+            }\r\n+            //System.out.println(mid);\r\n+            return binarySearch(arr, mid+1, r, x);\r\n+          \r\n+        }\r\n+        return -1;\r\n     } \r\n   \r\n     // Driver method to test above \r\n     public static void main(String args[]) \r\n     { \r\n         BinarySearch ob = new BinarySearch(); \r\n-        int arr[] = { 2, 3, 4, 10, 40 }; \r\n+        //int arr[] = { 2, 3, 4, 10, 40 }; \r\n+        int arr[] = { 2, 5, 8, 12, 16, 23, 38, 56, 72, 91 }; \r\n         int n = arr.length; \r\n-        int x = 10; \r\n+        int x = 23; \r\n         int result = ob.binarySearch(arr, 0, n - 1, x); \r\n         if (result == -1) \r\n             System.out.println(\"Element not present\"); \r"
  },
  {
    "sha": "383ee7cce03b7adcecb8407eb6328c6e9d5772aa",
    "filename": "Exercise_2.java",
    "status": "modified",
    "additions": 27,
    "deletions": 1,
    "changes": 28,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_2.java",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_2.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_2.java?ref=88f0a80693798780a4cc62a0529a8780fde62e14",
    "patch": "@@ -7,19 +7,45 @@\n        pivot and all greater elements to right \r\n        of pivot */\r\n     void swap(int arr[],int i,int j){\r\n-        //Your code here   \r\n+        //Your code here \r\n+        int temp = arr[i];\r\n+        arr[i] = arr[j];\r\n+        arr[j] = temp;  \r\n     }\r\n     \r\n     int partition(int arr[], int low, int high) \r\n     { \r\n    \t//Write code here for Partition and Swap \r\n+       //printArray(arr);\r\n+       int piviot = arr[high];\r\n+       int i = low - 1;\r\n+      // System.out.println(i);\r\n+       for(int j = low ; j < high ; j++){\r\n+           if(arr[j] < piviot){\r\n+               i++;\r\n+               //printArray(arr);\r\n+               swap(arr, i, j);\r\n+           }\r\n+       }\r\n+       //printArray(arr);\r\n+       swap(arr, i+1, high);\r\n+       return i + 1;\r\n+\r\n     } \r\n     /* The main function that implements QuickSort() \r\n       arr[] --> Array to be sorted, \r\n       low  --> Starting index, \r\n       high  --> Ending index */\r\n     void sort(int arr[], int low, int high) \r\n     {  \r\n+\r\n+        if(low < high){\r\n+            int p = partition(arr, low, high);\r\n+            System.out.println(\"p \" +p);\r\n+            System.out.println(\"low \" +low);\r\n+            sort(arr, low, p -1);\r\n+            sort(arr, p+1, high);\r\n+        }\r\n             // Recursively sort elements before \r\n             // partition and after partition \r\n     } \r"
  },
  {
    "sha": "4cc94069cfb000e59affe5147a812fe60acd7afa",
    "filename": "Exercise_3.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_3.java",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_3.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_3.java?ref=88f0a80693798780a4cc62a0529a8780fde62e14",
    "patch": "@@ -20,6 +20,16 @@ void printMiddle()\n     { \r\n         //Write your code here\r\n \t//Implement using Fast and slow pointers\r\n+    Node fast = head;\r\n+    Node slow = head;\r\n+\r\n+    if(head != null){ \r\n+        while(fast != null && fast.next!= null){\r\n+            fast = fast.next.next;\r\n+            slow = slow.next;\r\n+        }\r\n+        System.out.println(slow.data);\r\n+    }\r\n     } \r\n   \r\n     public void push(int new_data) \r"
  },
  {
    "sha": "27b9c8734128721fc64ac19dc24d410f3dc4a71c",
    "filename": "Exercise_4.java",
    "status": "modified",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_4.java",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_4.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_4.java?ref=88f0a80693798780a4cc62a0529a8780fde62e14",
    "patch": "@@ -5,7 +5,57 @@\n     // Second subarray is arr[m+1..r] \r\n     void merge(int arr[], int l, int m, int r) \r\n     {  \r\n+       //printArray(arr);\r\n        //Your code here  \r\n+       System.out.println(\" l \"+ l+\" r \"+r +\" m \"+ m);\r\n+       int x = m - l + 1;\r\n+       int y = r - m;\r\n+\r\n+       int L[] = new int[x];\r\n+       int R[] = new int[y];\r\n+\r\n+       for(int i = 0; i < x ; i++){\r\n+           L[i] = arr[l + i];\r\n+       }\r\n+       for(int j = 0; j < y ; j++){\r\n+           R[j] = arr[m + 1 + j];\r\n+       }\r\n+       System.out.print(\"left array \");\r\n+       printArray(L);\r\n+       System.out.print(\"Right array \");\r\n+       printArray(R);\r\n+\r\n+    \r\n+       \r\n+       //printArray(arr);\r\n+       int i = 0,j = 0;\r\n+\r\n+       int k = l;\r\n+\r\n+       while( i < x && j < y){\r\n+           if(L[i] <= R[j]){\r\n+               arr[k] = L[i];\r\n+               i++;\r\n+           }\r\n+           else{\r\n+               arr[k] = R[j];\r\n+               j++;\r\n+           }\r\n+           k++;\r\n+\r\n+       }\r\n+       while( i < x){\r\n+           arr[k] = L[i];\r\n+           i++;\r\n+           k++;\r\n+       }\r\n+       while(j < y){\r\n+           arr[k] = R[j];\r\n+           j++;\r\n+           k++;\r\n+       }\r\n+\r\n+\r\n     } \r\n   \r\n     // Main function that sorts arr[l..r] using \r\n@@ -14,6 +64,17 @@ void sort(int arr[], int l, int r)\n     { \r\n \t//Write your code here\r\n         //Call mergeSort from here \r\n+        if(l < r){\r\n+           int m = l + (r-l)/2;\r\n+           //printArray(arr);\r\n+           sort(arr, l, m);\r\n+           sort(arr, m + 1, r);\r\n+           //printArray(arr);\r\n+           //System.out.println(\" l \"+ l+\" r \"+r +\" m \"+ m);\r\n+           merge(arr, l, m, r);\r\n+\r\n+\r\n+        }\r\n     } \r\n   \r\n     /* A utility function to print array of size n */\r"
  },
  {
    "sha": "c45420b1b76b30a9b317f42afb7a8003c779b8df",
    "filename": "Exercise_5.java",
    "status": "modified",
    "additions": 45,
    "deletions": 1,
    "changes": 46,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_5.java",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/88f0a80693798780a4cc62a0529a8780fde62e14/Exercise_5.java",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_5.java?ref=88f0a80693798780a4cc62a0529a8780fde62e14",
    "patch": "@@ -1,20 +1,64 @@\n class IterativeQuickSort { \r\n     void swap(int arr[], int i, int j) \r\n     { \r\n-\t//Try swapping without extra variable \r\n+        int temp = arr[i];\r\n+        arr[i] = arr[j];\r\n+        arr[j] = temp;  \r\n     } \r\n   \r\n     /* This function is same in both iterative and \r\n        recursive*/\r\n     int partition(int arr[], int l, int h) \r\n     { \r\n         //Compare elements and swap.\r\n+        //printArray(arr);\r\n+       int piviot = arr[h];\r\n+       int i = l - 1;\r\n+      // System.out.println(i);\r\n+       for(int j = l; j < h; j++){\r\n+           if(arr[j] < piviot){\r\n+               i++;\r\n+               //printArray(arr);\r\n+               swap(arr, i, j);\r\n+           }\r\n+       }\r\n+       //printArray(arr);\r\n+       swap(arr, i+1, h);\r\n+       return i + 1;\r\n     } \r\n   \r\n     // Sorts arr[l..h] using iterative QuickSort \r\n     void QuickSort(int arr[], int l, int h) \r\n     { \r\n         //Try using Stack Data Structure to remove recursion.\r\n+        int[] stack = new int[h - l + 1]; \r\n+  \r\n+       \r\n+        int top = -1; \r\n+  \r\n+        \r\n+        stack[++top] = l; \r\n+        stack[++top] = h; \r\n+  \r\n+        printArr(stack, stack.length);\r\n+        while (top >= 0) { \r\n+            \r\n+            h = stack[top--]; \r\n+            l = stack[top--]; \r\n+  \r\n+            int p = partition(arr, l, h); \r\n+  \r\n+            if (p - 1 > l) { \r\n+                stack[++top] = l; \r\n+                stack[++top] = p - 1; \r\n+                //printArr(stack, stack.length);\r\n+            } \r\n+  \r\n+            if (p + 1 < h) { \r\n+                stack[++top] = p + 1; \r\n+                stack[++top] = h; \r\n+            } \r\n+        } \r\n     } \r\n   \r\n     // A utility function to print contents of arr \r"
  }
]
