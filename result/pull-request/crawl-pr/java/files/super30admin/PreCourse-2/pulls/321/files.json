[
  {
    "sha": "7fc63af2cd3b0b5d89ead557216640ba0e523c9b",
    "filename": "Exercise_1.py",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_1.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_1.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_1.py?ref=6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6",
    "patch": "@@ -6,6 +6,17 @@\n def binarySearch(arr, l, r, x): \n   \n   #write your code here\n+  if r>=1:\n+    mid = 1+(r-1)//2\n+\n+    if arr[mid] == x:\n+      return mid\n+    elif arr[mid] > x:\n+      return binarySearch(arr,1,mid-1,x)\n+    elif arr[mid] < x:\n+      return binarySearch(arr, mid+1, r, x)\n+    else:\n+      return -1\n   \n     \n   "
  },
  {
    "sha": "6cb5f3ee3b860e189d7cc49f6a7efd71cb8c057b",
    "filename": "Exercise_2.py",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_2.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_2.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_2.py?ref=6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6",
    "patch": "@@ -5,12 +5,31 @@ def partition(arr,low,high):\n   \n   \n     #write your code here\n+\n+    i = low - 1\n+    pivot_ = high\n+\n+    for i in range(low, high):\n+        if arr[i] < = pivot_:\n+            i +=1\n+            arr[i], arr[j] = arr[j], arr[i]\n+    \n+    arr[i+1], arr[high] = arr[high], arr[i+1]\n+    return i+1\n   \n \n # Function to do Quick sort \n def quickSort(arr,low,high): \n     \n     #write your code here\n+    if len(arr) == 1: \n+        return arr \n+    if low < high:\n+        p = partition(arr, low, high)\n+\n+\n+        quickSort(arr, low, p-1) \n+        quickSort(arr, p+1, high) \n   \n # Driver code to test above \n arr = [10, 7, 8, 9, 1, 5] "
  },
  {
    "sha": "f1589dbf9dd797545fc399e589ca0f9ce100f953",
    "filename": "Exercise_3.py",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_3.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_3.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_3.py?ref=6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6",
    "patch": "@@ -10,11 +10,22 @@ def __init__(self):\n         \n   \n     def push(self, new_data): \n+        new_node = Node(new_data)  \n+        new_node.next = self.head  \n+        self.head = new_node\n         \n   \n     # Function to get the middle of  \n     # the linked list \n     def printMiddle(self): \n+        p1 = self.head\n+        p2 = self.head\n+\n+        while p2 and p2.next:\n+            p1 = p1.next\n+            p2 = p2.next.next\n+\n+        return print(p2.data)\n \n # Driver code \n list1 = LinkedList() "
  },
  {
    "sha": "9f15bdc63df8e89b7ccffd42fc4572425f3044f6",
    "filename": "Exercise_4.py",
    "status": "modified",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_4.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_4.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_4.py?ref=6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6",
    "patch": "@@ -2,11 +2,52 @@\n def mergeSort(arr):\n   \n   #write your code here\n+\n+  if len(arr) > 1:\n+\n+    mid = len(arr)//2\n+\n+    l = arr[:mid]\n+    r = arr[mid:]\n+\n+    mergeSort(l)\n+\n+    mergeSort(r)\n+\n+    a=b=c=0\n+\n+    while a < len(l) and b < len(r):\n+\n+      if l[a] < r[a]:\n+        arr[c] = l[a]\n+        a+=1\n+\n+      else:\n+        arr[c] = r[b]\n+        b+=1\n+\n+      c+=1\n+\n+    while a < len(l):\n+      arr[c] = r[a]\n+      a+=1\n+      c+=1\n+\n+    while b < len(r):\n+      arr[c] < r[b]\n+      b+=1\n+      c+=1\n+\n+\n+\n   \n # Code to print the list \n def printList(arr): \n     \n     #write your code here\n+    for i in range(len(arr)):\n+      print(arr[i])\n+    print()\n   \n # driver code to test the above code \n if __name__ == '__main__': "
  },
  {
    "sha": "962af5c4497ad5d047fffce440b935908d46eddc",
    "filename": "Exercise_5.py",
    "status": "modified",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_5.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6/Exercise_5.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_5.py?ref=6b4c98452da4ddaa3c9cbe6089bc6174ca81a4f6",
    "patch": "@@ -1,10 +1,56 @@\n # Python program for implementation of Quicksort\n \n # This function is same in both iterative and recursive\n+\n+\n def partition(arr, l, h):\n   #write your code here\n \n+   i = (l - 1)\n+   x = arr[h]\n+\n+   for j in range(l, h):\n+        if arr[j] <= x:\n+\n+            i = i+1\n+            arr[i], arr[j] = arr[j], arr[i]\n+\n+    arr[i+1], arr[h] = arr[h], arr[i+1]\n+    return (i+1)\n+\n \n def quickSortIterative(arr, l, h):\n   #write your code here\n \n+  size = h - l + 1\n+    stack = [0] * (size) \n+  \n+    top = -1\n+  \n+    top = top + 1\n+    stack[top] = l \n+    top = top + 1\n+    stack[top] = h \n+  \n+    while top >= 0: \n+  \n+        h = stack[top] \n+        top = top - 1\n+        l = stack[top] \n+        top = top - 1\n+  \n+\n+        p = partition( arr, l, h ) \n+ \n+        if p-1 > l: \n+            top = top + 1\n+            stack[top] = l \n+            top = top + 1\n+            stack[top] = p - 1\n+\n+        if p+1 < h: \n+            top = top + 1\n+            stack[top] = p + 1\n+            top = top + 1\n+            stack[top] = h \n+"
  }
]
