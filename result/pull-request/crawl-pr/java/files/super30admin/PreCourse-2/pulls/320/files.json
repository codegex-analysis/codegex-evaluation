[
  {
    "sha": "145bceaa0926db0e9c908f05f3b2d95edd5047bc",
    "filename": "Exercise_1.py",
    "status": "modified",
    "additions": 19,
    "deletions": 8,
    "changes": 27,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_1.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_1.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_1.py?ref=f937c64f268ee47ea2782f115ed6cf6b091d0dfb",
    "patch": "@@ -4,19 +4,30 @@\n # It returns location of x in given array arr  \n # if present, else returns -1 \n def binarySearch(arr, l, r, x): \n-  \n+    mid = 0\n   #write your code here\n-  \n-    \n-  \n+    while (l <= r):\n+        mid = (l+r)//2\n+\n+#         print(mid ,\"----\", arr[mid] )\n+#         print(x)\n+            \n+        if (x < arr[mid]):\n+            r = mid -1\n+        elif (x > arr[mid]):\n+            l = mid + 1\n+        else:\n+            return mid\n+        \n+    return -1\n # Test array \n arr = [ 2, 3, 4, 10, 40 ] \n-x = 10\n+x = 30\n   \n # Function call \n result = binarySearch(arr, 0, len(arr)-1, x) \n-  \n+print(result)\n if result != -1: \n-    print \"Element is present at index % d\" % result \n+    print (\"Element is present at index % d\" % result) \n else: \n-    print \"Element is not present in array\"\n+    print (\"Element is not present in array\")"
  },
  {
    "sha": "5c6dcecac3ce6bda422da2b54ac409bb91b322b7",
    "filename": "Exercise_2.py",
    "status": "modified",
    "additions": 22,
    "deletions": 5,
    "changes": 27,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_2.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_2.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_2.py?ref=f937c64f268ee47ea2782f115ed6cf6b091d0dfb",
    "patch": "@@ -2,22 +2,39 @@\n   \n # give you explanation for the approach\n def partition(arr,low,high):\n-  \n-  \n     #write your code here\n-  \n+    # selecting last element as pivot \n+    i = low - 1\n+    pivot = arr[high]\n+    \n+    # traversing array and placing pivot element in the correct location in sorted array\n+    \n+    for j in range(low, high):\n+        if (pivot >= arr[j]):\n+            i += 1\n+            arr[i], arr[j] = arr[j], arr[i]\n+            \n+    arr[i+1], arr[high] = arr[high], arr[i+1]\n+    return i+1\n \n # Function to do Quick sort \n def quickSort(arr,low,high): \n     \n     #write your code here\n-  \n+    if len(arr) == 1:\n+        return arr\n+    if (low < high):\n+        ipart = partition(arr, low, high)\n+        quickSort(arr, low, ipart - 1)\n+        quickSort(arr, ipart + 1, high)\n+        \n+\n # Driver code to test above \n arr = [10, 7, 8, 9, 1, 5] \n n = len(arr) \n quickSort(arr,0,n-1) \n print (\"Sorted array is:\") \n for i in range(n): \n-    print (\"%d\" %arr[i]), \n+    print (\"%d\" %arr[i], end = \" \") \n   \n  "
  },
  {
    "sha": "511b1fcdb9b4e45845feba575c89b6dbb3842b07",
    "filename": "Exercise_3.py",
    "status": "modified",
    "additions": 18,
    "deletions": 3,
    "changes": 21,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_3.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_3.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_3.py?ref=f937c64f268ee47ea2782f115ed6cf6b091d0dfb",
    "patch": "@@ -3,24 +3,39 @@ class Node:\n   \n     # Function to initialise the node object  \n     def __init__(self, data):  \n+        self.data = data\n+        self.next = None\n         \n class LinkedList: \n   \n     def __init__(self): \n-        \n+        self.head = None\n   \n     def push(self, new_data): \n-        \n+        new_node = Node(new_data)\n+        new_node.next = self.head\n+        self.head = new_node\n   \n     # Function to get the middle of  \n     # the linked list \n     def printMiddle(self): \n-\n+        # first pointer to jump to element leaving one immediately after it\n+        # since second pointer reaches exactly the mid when first reaches the end return second pointers data\n+        twostep_ptr = self.head \n+        second_ptr = self.head\n+        \n+        if self.head:\n+            while(first_ptr and first_ptr.next):\n+                first_ptr = first_ptr.next.next\n+                second_ptr = second_ptr.next\n+            return second_ptr.data\n # Driver code \n list1 = LinkedList() \n list1.push(5) \n list1.push(4) \n list1.push(2) \n list1.push(3) \n list1.push(1) \n+list1.push(6)\n+list1.push(7)\n list1.printMiddle() "
  },
  {
    "sha": "68626239ef43c27c12c68d39f7f7b6742911cb7e",
    "filename": "Exercise_4.py",
    "status": "modified",
    "additions": 42,
    "deletions": 3,
    "changes": 45,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_4.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_4.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_4.py?ref=f937c64f268ee47ea2782f115ed6cf6b091d0dfb",
    "patch": "@@ -1,13 +1,52 @@\n # Python program for implementation of MergeSort \n def mergeSort(arr):\n-  \n+    \n   #write your code here\n-  \n+    # for dividing the array upto a point where only one element is left\n+    # then merge the elements based on order\n+    if len(arr) > 1:\n+        mid = len(arr)//2\n+        \n+        # call mergesort on left part\n+        left_part = arr[:mid]\n+        mergeSort(left_part)\n+        \n+        # call mergesort on right part\n+        right_part = arr[mid:]\n+        mergeSort(right_part)\n+        \n+        \n+        # this step takes place after all the partitions are done\n+        i = j = k = 0\n+        # Compare the \n+        while(i < len(left_part) and j < len(right_part)):\n+            if (left_part[i] < right_part[j]):\n+                arr[k] = left_part[i]\n+                i += 1\n+            else:\n+                arr[k] = right_part[j]\n+                j += 1\n+                \n+            k += 1\n+        while(i < len(left_part)):\n+            arr[k] = left_part[i]\n+            i += 1\n+            k += 1\n+            \n+        while(j < len(right_part)):\n+            arr[k] = right_part[j]\n+            j += 1\n+            k += 1\n+            \n+            \n # Code to print the list \n def printList(arr): \n     \n     #write your code here\n-  \n+    for k in range(len(arr)):\n+        print(arr[k], end = \" \")\n+    \n+    \n # driver code to test the above code \n if __name__ == '__main__': \n     arr = [12, 11, 13, 5, 6, 7]  "
  },
  {
    "sha": "5445f8fdc6af14ff919a6d97b46bbb75df58a774",
    "filename": "Exercise_5.py",
    "status": "modified",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_5.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/f937c64f268ee47ea2782f115ed6cf6b091d0dfb/Exercise_5.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_5.py?ref=f937c64f268ee47ea2782f115ed6cf6b091d0dfb",
    "patch": "@@ -3,8 +3,56 @@\n # This function is same in both iterative and recursive\n def partition(arr, l, h):\n   #write your code here\n+    i = l - 1\n+    pivot = arr[h]\n+    \n+    for j in range(l, h):\n+        if (pivot >= arr[j]):\n+            i += 1\n+            arr[i], arr[j] = arr[j], arr[i]\n+            \n+    arr[i+1], arr[h] = arr[h], arr[i+1]\n+    return i+1\n+\n \n \n def quickSortIterative(arr, l, h):\n   #write your code here\n+    \n+    stack = [0] * h\n+    top = -1\n+    \n+    \n+    top += 1\n+    stack[top] = l\n+    \n+    top += 1\n+    stack[top] = h\n+    \n+    while(top >= 0):\n+        h = stack[top]\n+        top -= 1\n+        \n+        l = stack[top]\n+        top -= 1\n+        \n+        ipart = partition(arr, l, h)\n+        \n+        if ipart-1 > l:\n+            top += 1\n+            stack[top] = l\n+            \n+            top += 1\n+            stack[top] = ipart -1\n+        \n+        if ipart+1 < h:\n+            top += 1\n+            stack[top] = ipart + 1\n+            \n+            top += 1\n+            stack[top] = h\n \n+            \n+arr = [10, 80, 20, 40]\n+quickSortIterative(arr, 0, len(arr)-1)\n+print(\"Sorted array: \", arr)"
  }
]
