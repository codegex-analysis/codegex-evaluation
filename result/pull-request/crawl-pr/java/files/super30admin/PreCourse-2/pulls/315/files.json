[
  {
    "sha": "acfc3ca03bdcea8d1a6c362da60b041646629bb5",
    "filename": "Exercise_1.py",
    "status": "modified",
    "additions": 12,
    "deletions": 2,
    "changes": 14,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_1.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_1.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_1.py?ref=988bee0074d01034af6fc9321a9139f71f40ab69",
    "patch": "@@ -6,6 +6,16 @@\n def binarySearch(arr, l, r, x): \n   \n   #write your code here\n+    while l <= r:\n+        mid = (l + r) // 2\n+        if arr[mid] == x:\n+            return mid\n+        elif arr[mid] < x:\n+            l = mid + 1\n+        else:\n+            r = mid - 1\n+    return -1\n+\n   \n     \n   \n@@ -17,6 +27,6 @@ def binarySearch(arr, l, r, x):\n result = binarySearch(arr, 0, len(arr)-1, x) \n   \n if result != -1: \n-    print \"Element is present at index % d\" % result \n+    print(\"Element is present at index {}\".format(result))\n else: \n-    print \"Element is not present in array\"\n+    print(\"Element is not present in array\")"
  },
  {
    "sha": "588614473771b8138ba3b847aa1f86322d80f04f",
    "filename": "Exercise_2.py",
    "status": "modified",
    "additions": 14,
    "deletions": 4,
    "changes": 18,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_2.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_2.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_2.py?ref=988bee0074d01034af6fc9321a9139f71f40ab69",
    "patch": "@@ -2,18 +2,28 @@\n   \n # give you explanation for the approach\n def partition(arr,low,high):\n-  \n-  \n     #write your code here\n+    pivot = high\n+    i = low - 1\n+    for j in range(low, high):\n+        if arr[j] < arr[pivot]:\n+            i += 1\n+            arr[i], arr[j] = arr[j], arr[i]\n+    i += 1\n+    arr[i], arr[pivot] = arr[pivot], arr[i]\n+    return i\n   \n \n # Function to do Quick sort \n def quickSort(arr,low,high): \n-    \n     #write your code here\n+    if low < high:\n+        p = partition(arr, low, high)\n+        quickSort(arr, low, p - 1)\n+        quickSort(arr, p + 1, high)\n   \n # Driver code to test above \n-arr = [10, 7, 8, 9, 1, 5] \n+arr = [10, 7, 8, 14, 20, 65, 9, 1, 5] \n n = len(arr) \n quickSort(arr,0,n-1) \n print (\"Sorted array is:\") "
  },
  {
    "sha": "b0043d040065747acb1e7cad76012779f9984e94",
    "filename": "Exercise_3.py",
    "status": "modified",
    "additions": 18,
    "deletions": 3,
    "changes": 21,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_3.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_3.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_3.py?ref=988bee0074d01034af6fc9321a9139f71f40ab69",
    "patch": "@@ -2,19 +2,34 @@\n class Node:  \n   \n     # Function to initialise the node object  \n-    def __init__(self, data):  \n+    def __init__(self, data):\n+        self.data = data\n+        self.next = None  \n         \n class LinkedList: \n   \n-    def __init__(self): \n+    def __init__(self):\n+        self.head = None \n         \n   \n     def push(self, new_data): \n-        \n+        node = Node(new_data)\n+        node.next = self.head\n+        self.head = node\n   \n     # Function to get the middle of  \n     # the linked list \n     def printMiddle(self): \n+        if not self.head:\n+            return None\n+        slow = fast = self.head\n+        while fast.next and fast.next.next:\n+            slow = slow.next\n+            fast = fast.next.next\n+\n+        if fast.next:\n+            slow=slow.next\n+        print(slow.data)\n \n # Driver code \n list1 = LinkedList() "
  },
  {
    "sha": "a223a52f5912a3532f11190201df017d0d6bd5ff",
    "filename": "Exercise_4.py",
    "status": "modified",
    "additions": 26,
    "deletions": 6,
    "changes": 32,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_4.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_4.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_4.py?ref=988bee0074d01034af6fc9321a9139f71f40ab69",
    "patch": "@@ -1,18 +1,38 @@\n # Python program for implementation of MergeSort \n-def mergeSort(arr):\n-  \n-  #write your code here\n+def merge(arr, l, m, h):\n+    left = arr[l:m + 1]\n+    right = arr[m + 1: h + 1]\n+    left.append(float('inf'))\n+    right.append(float('inf'))\n+    i = j = 0\n+    for k in range(l, h+1):\n+        if left[i] < right[j]:\n+            arr[k] = left[i]\n+            i += 1\n+        else:\n+            arr[k] = right[j]\n+            j += 1\n+\n+\n+def mergeSort(arr, l, h):\n+    #write your code here\n+    if l < h:\n+        mid = (l + h) // 2\n+        mergeSort(arr, l , mid)\n+        mergeSort(arr, mid + 1 ,h)\n+        merge(arr, l, mid, h)\n   \n # Code to print the list \n def printList(arr): \n-    \n     #write your code here\n+    for elem in arr:\n+        print(elem, end = \" \")\n   \n # driver code to test the above code \n if __name__ == '__main__': \n-    arr = [12, 11, 13, 5, 6, 7]  \n+    arr = [12, 11, 13, 5, 6, 7, 1]  \n     print (\"Given array is\", end=\"\\n\")  \n     printList(arr) \n-    mergeSort(arr) \n+    mergeSort(arr, 0, len(arr) - 1) \n     print(\"Sorted array is: \", end=\"\\n\") \n     printList(arr) "
  },
  {
    "sha": "e6907100046b338df4abc00972ccdbddb813c22e",
    "filename": "Exercise_5.py",
    "status": "modified",
    "additions": 40,
    "deletions": 3,
    "changes": 43,
    "blob_url": "https://github.com/super30admin/PreCourse-2/blob/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_5.py",
    "raw_url": "https://github.com/super30admin/PreCourse-2/raw/988bee0074d01034af6fc9321a9139f71f40ab69/Exercise_5.py",
    "contents_url": "https://api.github.com/repos/super30admin/PreCourse-2/contents/Exercise_5.py?ref=988bee0074d01034af6fc9321a9139f71f40ab69",
    "patch": "@@ -1,10 +1,47 @@\n # Python program for implementation of Quicksort\n \n # This function is same in both iterative and recursive\n-def partition(arr, l, h):\n-  #write your code here\n+def partition(arr, low, high):\n+    #write your code here\n+    pivot = high\n+    i = low - 1\n+    for j in range(low, high):\n+        if arr[j] < arr[pivot]:\n+            i += 1\n+            arr[i], arr[j] = arr[j], arr[i]\n+    i += 1\n+    arr[i], arr[pivot] = arr[pivot], arr[i]\n+    return i\n \n \n def quickSortIterative(arr, l, h):\n-  #write your code here\n+    #write your code here\n+    \n+    p = partition(arr, l, h)\n+\n+    stack = []\n+    stack.append(0)\n+    stack.append(p-1)\n+    stack.append(p+1)\n+    stack.append(h)\n+    while len(stack):\n+        h = stack.pop()\n+        l = stack.pop()\n+        #print(h,l)\n+        if h > l:\n+            p = partition(arr, l, h)\n+            if p - 1 > l:\n+                stack.append(l)\n+                stack.append(p - 1)\n+            if p + 1 < h:\n+                stack.append(p + 1)\n+                stack.append(h)\n+\n+arr = [12, 11, 13, 5, 6, 7, 1]  \n+quickSortIterative(arr, 0, len(arr)- 1)\n+print(arr)\n+\n+\n+\n+\n "
  }
]
