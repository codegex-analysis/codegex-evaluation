[
  {
    "sha": "c6376d9d0b7d01f8905a135a051616fc166ca689",
    "filename": "DeleteAndEarn.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/super30admin/DP-3/blob/564e50e1d116f91599189bbb864dab03a6cc9ec9/DeleteAndEarn.java",
    "raw_url": "https://github.com/super30admin/DP-3/raw/564e50e1d116f91599189bbb864dab03a6cc9ec9/DeleteAndEarn.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-3/contents/DeleteAndEarn.java?ref=564e50e1d116f91599189bbb864dab03a6cc9ec9",
    "patch": "@@ -0,0 +1,33 @@\n+class DeleteAndEarn {\n+    \n+    // Time Complexity: O(n) (where n -> max value in the array)\n+    // Space Complexity: O(n)\n+    \n+    public int deleteAndEarn(int[] nums) {\n+        if(nums == null || nums.length == 0)\n+            return 0;\n+        \n+        int[] dp = new int[getMax(nums) + 1];\n+        \n+        for(int i : nums){\n+            dp[i] += i;\n+        }\n+        \n+        int p1 = dp[0];\n+        int p2 = Math.max(p1,dp[1]);\n+        for(int i = 2; i < dp.length; i++){\n+            int temp = p2;\n+            p2 = Math.max(p2, p1+dp[i]);\n+            p1 = temp;\n+        }\n+        return p2;\n+    }\n+    \n+    private int getMax(int[] nums){\n+        int maxVal = Integer.MIN_VALUE;\n+        for(int i: nums)\n+            maxVal = Math.max(maxVal, i);\n+        \n+        return maxVal;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ae7a20618a5057173db49e6c3ff836eedcf6e4e8",
    "filename": "MinFallingPathSum.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/super30admin/DP-3/blob/564e50e1d116f91599189bbb864dab03a6cc9ec9/MinFallingPathSum.java",
    "raw_url": "https://github.com/super30admin/DP-3/raw/564e50e1d116f91599189bbb864dab03a6cc9ec9/MinFallingPathSum.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-3/contents/MinFallingPathSum.java?ref=564e50e1d116f91599189bbb864dab03a6cc9ec9",
    "patch": "@@ -0,0 +1,26 @@\n+class MinFallingPathSum {\n+    \n+    // Time Complexity : O(nm)\n+    // Space Complexity: O(1)\n+    \n+    public int minFallingPathSum(int[][] matrix) {\n+        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)\n+            return 0;\n+        for(int i = 1; i < matrix.length; i++){\n+            for(int j = 0; j < matrix[i].length; j++){\n+                if(j == 0)\n+                    matrix[i][j] = matrix[i][j] + Math.min(matrix[i-1][j], matrix[i-1][j+1]);\n+                else if(j == matrix[i].length-1)\n+                    matrix[i][j] = matrix[i][j] + Math.min(matrix[i-1][j], matrix[i-1][j-1]);\n+                else\n+                    matrix[i][j] = matrix[i][j] + Math.min(Math.min(matrix[i-1][j],matrix[i-1][j-1]),matrix[i-1][j+1]);\n+            } \n+        }\n+        \n+        int result = Integer.MAX_VALUE;\n+        for(int i : matrix[matrix.length-1])\n+            result = Math.min(result, i);\n+        \n+        return result;\n+    }\n+}\n\\ No newline at end of file"
  }
]
