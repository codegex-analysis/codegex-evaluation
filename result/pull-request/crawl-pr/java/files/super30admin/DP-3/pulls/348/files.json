[
  {
    "sha": "933616ae34188de881df519f58b3bf8a3c734164",
    "filename": "DeleteEarn.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/super30admin/DP-3/blob/d141619ce888bee2c5138a89659afacdf92aee8a/DeleteEarn.java",
    "raw_url": "https://github.com/super30admin/DP-3/raw/d141619ce888bee2c5138a89659afacdf92aee8a/DeleteEarn.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-3/contents/DeleteEarn.java?ref=d141619ce888bee2c5138a89659afacdf92aee8a",
    "patch": "@@ -0,0 +1,32 @@\n+// Time Complexity : O(n) where n is the max value in the nums array\n+// Space Complexity : O(n) where n is the max value in the nums array\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+\n+\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+    public int deleteAndEarn(int[] nums) {\n+        if(nums.length ==0) return 0;\n+        int[] dp = new int[getMax(nums)+1];\n+        \n+        for(int x : nums)\n+            dp[x] += x;\n+        \n+        int ch=0,dc=0;\n+        for(int d:dp){\n+            int temp = dc;\n+            dc = Math.max(dc,ch);\n+            ch = d+temp;\n+        }\n+        return Math.max(ch,dc);\n+    }\n+    public int getMax(int[] nums){\n+        int max = Integer.MIN_VALUE;\n+        for(int n:nums)\n+            max = Math.max(max,n);\n+        return max;\n+    }\n+        \n+}"
  },
  {
    "sha": "85ea4e728e0b514decdbabcd30daf11436ad70a3",
    "filename": "MinFallingSum.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/super30admin/DP-3/blob/d141619ce888bee2c5138a89659afacdf92aee8a/MinFallingSum.java",
    "raw_url": "https://github.com/super30admin/DP-3/raw/d141619ce888bee2c5138a89659afacdf92aee8a/MinFallingSum.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-3/contents/MinFallingSum.java?ref=d141619ce888bee2c5138a89659afacdf92aee8a",
    "patch": "@@ -0,0 +1,27 @@\n+// Time Complexity : O(n*m) n - # of rows, m- # of cols in given matrix\n+// Space Complexity : O(1)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+\n+\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+    public int minFallingPathSum(int[][] matrix) {\n+        if(matrix.length ==0 || matrix[0].length == 0) return 0;\n+        int n = matrix.length,m=matrix[0].length;\n+       // add the previous rows adjacent values as a cumulative sum and find the min of last row\n+      // this gives the sum of path with minimum sum from 0 to n rows\n+        for(int i=1;i<n;i++){\n+            for(int j=0;j<m;j++){\n+                if(j == 0) matrix[i][j] += Math.min(matrix[i-1][j], matrix[i-1][j+1]);\n+                else if(j == m-1) matrix[i][j] += Math.min(matrix[i-1][j],matrix[i-1][j-1]);\n+                else matrix[i][j] += Math.min(matrix[i-1][j],Math.min(matrix[i-1][j-1],matrix[i-1][j+1]));\n+            }\n+        }\n+        int res =Integer.MAX_VALUE;\n+        for(int s:matrix[n-1])\n+            res = Math.min(s,res);\n+        return res;\n+    }\n+}"
  }
]
