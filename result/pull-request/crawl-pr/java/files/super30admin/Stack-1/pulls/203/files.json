[
  {
    "sha": "5aa500213dd5e16672e00665d87fab829e00212d",
    "filename": "solution130.py",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/8072e6cac9655789efc16150363e7f7e29c14b2a/solution130.py",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/8072e6cac9655789efc16150363e7f7e29c14b2a/solution130.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/solution130.py?ref=8072e6cac9655789efc16150363e7f7e29c14b2a",
    "patch": "@@ -0,0 +1,14 @@\n+#Time Complexity:O(n)\n+#Space Complexity:O(n)\n+class Solution:\n+    def dailyTemperatures(self, T: List[int]) -> List[int]:\n+        if len(T)==0:\n+            return []\n+        result=[0 for i in range(len(T))]                   #for create a resultant output array\n+        st=[]                                               #create a arry to implement stack\n+        for i in range(len(T)):\n+            while st and T[i]>T[st[-1]]:                    #parse through the temp array and compare current element to top of stack\n+                pos=st.pop()                                #if current element larger than top of stack add diff to resultant array at current position\n+                result[pos]=i-pos\n+            st.append(i)                                    #push the i th index to the stack for further processing\n+        return result\n\\ No newline at end of file"
  },
  {
    "sha": "21aa194a3db3e5c239b22903e0497a4bc356f76e",
    "filename": "solution131.py",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/8072e6cac9655789efc16150363e7f7e29c14b2a/solution131.py",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/8072e6cac9655789efc16150363e7f7e29c14b2a/solution131.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/solution131.py?ref=8072e6cac9655789efc16150363e7f7e29c14b2a",
    "patch": "@@ -0,0 +1,16 @@\n+#Time Complexity:O(2n)\n+#Space Complexity:O(n/2)\n+class Solution:\n+    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n+        if len(nums)==0:\n+            return []\n+        n=len(nums)\n+        result=[-1 for i in range(n)]                       #declare a resultant array\n+        st=[]                                               #declare a stack \n+        for i in range(2*n):                                #parse each element twice until all elements have a greater element.\n+            while st and nums[i%n]>nums[st[-1]]:            #if the element at top of stack is greater than the current element\n+                pos=st.pop()                                #get the element position and add the greater element to that position.\n+                result[pos]=nums[i%n]\n+            if i<n:\n+                st.append(i)\n+        return result\n\\ No newline at end of file"
  }
]
