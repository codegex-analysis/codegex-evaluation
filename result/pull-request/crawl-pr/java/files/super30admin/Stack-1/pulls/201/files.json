[
  {
    "sha": "233be1d2c4965843d6815ea62576959a308a83bf",
    "filename": ".classpath",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/21b738de3e21a1afb9f472e5c87bd458b9b3a490/.classpath",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/21b738de3e21a1afb9f472e5c87bd458b9b3a490/.classpath",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/.classpath?ref=21b738de3e21a1afb9f472e5c87bd458b9b3a490",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"\"/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\"/>\n+\t<classpathentry kind=\"output\" path=\"\"/>\n+</classpath>"
  },
  {
    "sha": "0aad388352c3c7646bad7560d850364a6384e3dd",
    "filename": ".gitignore",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/21b738de3e21a1afb9f472e5c87bd458b9b3a490/.gitignore",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/21b738de3e21a1afb9f472e5c87bd458b9b3a490/.gitignore",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/.gitignore?ref=21b738de3e21a1afb9f472e5c87bd458b9b3a490",
    "patch": "@@ -0,0 +1,2 @@\n+/DailyTemperatures.class\n+/NextGreaterElement_2.class"
  },
  {
    "sha": "7047b1df0f296d863954ef309231902692d311e5",
    "filename": ".project",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/21b738de3e21a1afb9f472e5c87bd458b9b3a490/.project",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/21b738de3e21a1afb9f472e5c87bd458b9b3a490/.project",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/.project?ref=21b738de3e21a1afb9f472e5c87bd458b9b3a490",
    "patch": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<projectDescription>\n+\t<name>Stack-1</name>\n+\t<comment></comment>\n+\t<projects>\n+\t</projects>\n+\t<buildSpec>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n+\t\t\t<arguments>\n+\t\t\t</arguments>\n+\t\t</buildCommand>\n+\t</buildSpec>\n+\t<natures>\n+\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n+\t</natures>\n+</projectDescription>"
  },
  {
    "sha": "b39f08e187c27153335009af104b06f3f18b7c2d",
    "filename": "DailyTemperatures.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/21b738de3e21a1afb9f472e5c87bd458b9b3a490/DailyTemperatures.java",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/21b738de3e21a1afb9f472e5c87bd458b9b3a490/DailyTemperatures.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/DailyTemperatures.java?ref=21b738de3e21a1afb9f472e5c87bd458b9b3a490",
    "patch": "@@ -0,0 +1,28 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(n)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+// Your code here along with comments explaining your approach\n+\t/* Here, the temperatures are retrieved from the array and checked where it is greater than the temperature at the top of the stack.\n+\t * If true, then the index stored in the stack will be popped and difference between the index from the stack and the index of the \n+\t * compared temperature is assigned in the result index array.\n+\t */\n+\n+import java.util.Stack;\n+\n+public class DailyTemperatures {\n+\tpublic int[] dailyTemperatures(int[] T) {\n+        Stack<Integer> st = new Stack<>();\n+        int [] result = new int [T.length];\n+        if(T == null || T.length == 0) return result;\n+    \n+        for(int i = 0; i< T.length; i++){\n+            while(!st.isEmpty() && T[i] > T[st.peek()]){\n+                int index = st.pop();\n+                result[index] = i - index;\n+            }\n+            st.push(i);\n+        }\n+        return result;\n+    }\n+}"
  },
  {
    "sha": "1f7aa36138764503db464cf78e3673a16ed7e163",
    "filename": "NextGreaterElement_2.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/21b738de3e21a1afb9f472e5c87bd458b9b3a490/NextGreaterElement_2.java",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/21b738de3e21a1afb9f472e5c87bd458b9b3a490/NextGreaterElement_2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/NextGreaterElement_2.java?ref=21b738de3e21a1afb9f472e5c87bd458b9b3a490",
    "patch": "@@ -0,0 +1,34 @@\n+// Time Complexity : O(3n)\n+// Space Complexity : O(n)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+// Your code here along with comments explaining your approach\n+\t/* Initially, the result array will be marked as -1 across the length of the array.\n+\t * Here, the Elements are retrieved from the array and checked where it is greater than the index of the element at the top of the stack.\n+\t * If true, then the index stored in the stack will be popped and the greater element will assigned in the result index array.\n+\t * this traversal will be performed 2 times in cycle until the element reaches the element greater than itself. if not then -1 will be \n+\t * retained for that index in the result array.\n+\t */\n+\n+import java.util.Arrays;\n+import java.util.Stack;\n+\n+public class NextGreaterElement_2 {\n+\tpublic int[] nextGreaterElements(int[] nums) {\n+        int [] result = new int [nums.length];\n+        Stack<Integer> st = new Stack<>();\n+        if(nums == null || nums.length == 0) return result;\n+        Arrays.fill(result, -1);\n+        int n = nums.length;\n+        for(int i = 0; i < 2 * n; i++){\n+            while(!st.isEmpty() && nums[i%n] > nums[st.peek()]){\n+                int index = st.pop();\n+                result[index] = nums[i%n];\n+            }\n+            if(i < nums.length){\n+                st.push(i);\n+            }\n+        }\n+        return result;\n+    }\n+}"
  }
]
