[
  {
    "sha": "8fd579f34f5f7974fd4e6a49cc5da5afe15645da",
    "filename": "Daily Temperatures.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/3d897cffc9dc331c95b69984a2966df561911708/Daily%20Temperatures.java",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/3d897cffc9dc331c95b69984a2966df561911708/Daily%20Temperatures.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/Daily%20Temperatures.java?ref=3d897cffc9dc331c95b69984a2966df561911708",
    "patch": "@@ -0,0 +1,83 @@\n+/*\n+# from left to right\n+class Solution:\n+    def dailyTemperatures(self, T: List[int]) -> List[int]:\n+        if T is None or len(T) == 0:\n+            return []\n+        \n+        result = [0]*len(T)\n+        stack = []\n+        for i in range(len(T)):\n+            while len(stack) > 0 and T[i] > T[stack[-1]]:\n+                index = stack.pop()\n+                result[index] = i - index\n+            stack.append(i)            \n+        \n+        return result\n+\n+# from right to left\n+class Solution:\n+    def dailyTemperatures(self, T: List[int]) -> List[int]:\n+        if T is None or len(T) == 0:\n+            return []\n+        \n+        result = [0]*len(T)\n+        stack = []\n+        stack.append(len(T)-1)\n+        for i in range(len(T)-2, -1, -1):\n+            while len(stack) > 0:\n+                if T[i] < T[stack[-1]]:\n+                    result[i] = stack[-1] - i\n+                    break\n+                stack.pop()\n+            stack.append(i)\n+        \n+        \n+        return result\n+*/\n+\n+/*\n+class Solution {\n+    public int[] dailyTemperatures(int[] T) {\n+        if (T == null || T.length == 0)\n+            return new int[]  {};\n+        \n+        int[] result = new int[T.length];\n+        Stack<Integer> s = new Stack<>();\n+        for (int i=0; i<T.length; i++){\n+            while (!s.isEmpty() && T[i] > T[s.peek()]){\n+                int index = s.pop();\n+                result[index] = i - index;\n+            }\n+            s.push(i);\n+        }\n+        return result;\n+    }\n+}\n+*/\n+\n+// time - O(n)\n+// space - O(n)\n+// logic - started from right and checked for which index it is smaller than stack and updated it accordingly\n+\n+class Solution {\n+    public int[] dailyTemperatures(int[] T) {\n+        if (T == null || T.length == 0)\n+            return new int[]  {};\n+        \n+        int[] result = new int[T.length];\n+        Stack<Integer> s = new Stack<>();\n+        s.push(T.length-1);\n+        for (int i=T.length-2; i >= 0; i--){\n+            while (!s.isEmpty()){\n+                if (T[i] < T[s.peek()]){\n+                    result[i] = s.peek() - i;\n+                    break;\n+                }\n+                s.pop();\n+            }\n+            s.push(i);\n+        }\n+        return result;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "04bccfd9558eebaad2baa4bc9f03c19603c52b4a",
    "filename": "Next Greater Element II.java",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/3d897cffc9dc331c95b69984a2966df561911708/Next%20Greater%20Element%20II.java",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/3d897cffc9dc331c95b69984a2966df561911708/Next%20Greater%20Element%20II.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/Next%20Greater%20Element%20II.java?ref=3d897cffc9dc331c95b69984a2966df561911708",
    "patch": "@@ -0,0 +1,64 @@\n+/*\n+class Solution:\n+    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n+        if nums is None or len(nums) == 0:\n+            return []\n+        \n+        n = len(nums)\n+        result = [-1]*n\n+        stack = []\n+        \n+        for i in range(2*n):\n+            while len(stack) > 0 and nums[stack[-1]] < nums[i%n]:\n+                result[stack.pop()] = nums[i%n]\n+                \n+            if i<n:\n+                stack.append(i)\n+        return result\n+\n+class Solution:\n+def nextGreaterElements(self, nums: List[int]) -> List[int]:\n+    if nums is None or len(nums) == 0:\n+        return []\n+    \n+    n = len(nums)\n+    result = [-1]*n\n+    stack = []\n+    \n+    for i in range(2*n):\n+        if len(stack) > 0 and stack[-1] == i % n: # if we rotate and come to same point and didnt find any greater element no need to check further\n+            break\n+        while len(stack) > 0 and nums[stack[-1]] < nums[i%n]:\n+            result[stack.pop()] = nums[i%n]\n+            \n+        if i<n:\n+            stack.append(i)\n+    return result\n+*/\n+\n+// time - O(2n) + O(n) for stack so its O(n)\n+//space - O(n) for stack\n+// logic - i maintained the index in stack if we dont find any greater element for it and I travel to 2n elements as it is circular array\n+class Solution {\n+    public int[] nextGreaterElements(int[] nums) {\n+        if (nums == null || nums.length == 0)\n+            return new int[] {};\n+        \n+        int n = nums.length;\n+        int[] result = new int[n];\n+        Arrays.fill(result, -1);\n+        Stack<Integer> s = new Stack<>();\n+        for (int i=0; i<2*n; i++){\n+            if (!s.isEmpty() && s.peek() == i%n)\n+                break;\n+            \n+            while (!s.isEmpty() && nums[i%n] > nums[s.peek()]){\n+                result[s.pop()] = nums[i%n];\n+            }\n+            if (i<n){\n+                s.push(i);\n+            }\n+        }\n+        return result;\n+    }\n+}\n\\ No newline at end of file"
  }
]
