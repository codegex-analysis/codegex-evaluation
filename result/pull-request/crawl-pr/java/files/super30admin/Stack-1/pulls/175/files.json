[
  {
    "sha": "4425983630bad535c0991e19385228c02b669f3a",
    "filename": "Daily Temperatures.py",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/060dce473ca2c57a09a7ad022c5b0716255c541a/Daily%20Temperatures.py",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/060dce473ca2c57a09a7ad022c5b0716255c541a/Daily%20Temperatures.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/Daily%20Temperatures.py?ref=060dce473ca2c57a09a7ad022c5b0716255c541a",
    "patch": "@@ -0,0 +1,37 @@\n+class Solution:\n+    #Solution 1\n+    def dailyTemperatures(self, T: List[int]) -> List[int]:\n+        #Approach: Stack\n+        #Time Complexity: O(n)\n+        #Space Complexity: O(n)\n+        #where, n is the length of the list T\n+        \n+        result = [0 for _ in range(len(T))]\n+        st = []\n+        for i in reversed(range(len(T))):\n+            while st and T[st[-1]] <= T[i]:\n+                st.pop()\n+            \n+            if st:\n+                result[i] = st[-1] - i\n+            st.append(i)\n+                    \n+        return result\n+    \n+    #Solution 2\n+    \"\"\"\n+    def dailyTemperatures(self, T: List[int]) -> List[int]:\n+        #Approach: Brute Force\n+        #Time Complexity: O(n^2)\n+        #Space Complexity: O(1)\n+        #where, n is the length of the list T\n+        \n+        result = [0 for _ in range(len(T))]\n+        for i in range(len(T)):\n+            for j in range(i, len(T)):\n+                if T[j] > T[i]:\n+                    result[i] = j - i\n+                    break\n+                    \n+        return result\n+    \"\"\"\n\\ No newline at end of file"
  },
  {
    "sha": "144c5657368782bcccf4b973f1fbbb1177fb68a3",
    "filename": "Next Greater Element II.py",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/060dce473ca2c57a09a7ad022c5b0716255c541a/Next%20Greater%20Element%20II.py",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/060dce473ca2c57a09a7ad022c5b0716255c541a/Next%20Greater%20Element%20II.py",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/Next%20Greater%20Element%20II.py?ref=060dce473ca2c57a09a7ad022c5b0716255c541a",
    "patch": "@@ -0,0 +1,92 @@\n+class Solution:\n+    #Solution 1\n+    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n+        #Approach: Stack, two-pass; same as solution 2 - concise version\n+        #Time Complexity: O(n)\n+        #Space Complexity: O(n)\n+        \n+        n = len(nums)\n+        result = [-1 for _ in range(n)]\n+        st = []\n+        \n+        #same as solution 2; just reducing the num of lines of code\n+        for i in reversed(range(2 * n)):\n+            while st and st[-1] <= nums[i % n]:\n+                st.pop()\n+            \n+            if st:\n+                result[i % n] = st[-1]\n+            st.append(nums[i % n])\n+                    \n+        return result\n+    \n+    #Solution 2\n+    \"\"\"\n+    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n+        #Approach: Stack, two-pass\n+        #Time Complexity: O(n)\n+        #Space Complexity: O(n)\n+        \n+        n = len(nums)\n+        result = [-1 for _ in range(n)]\n+        st = []\n+        \n+        for i in reversed(range(n)):\n+            while st and st[-1] <= nums[i]:\n+                st.pop()\n+            \n+            if st:\n+                result[i] = st[-1]\n+            st.append(nums[i])\n+            \n+        for i in reversed(range(n)):\n+            while st and st[-1] <= nums[i]:\n+                st.pop()\n+            \n+            if st:\n+                result[i] = st[-1]\n+            st.append(nums[i])\n+                    \n+        return result\n+    \"\"\"\n+    \n+    #Solution 3\n+    \"\"\"\n+    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n+        #Approach: Brute Force, optimized for space\n+        #Time Complexity: O(n^2)\n+        #Space Complexity: O(1)\n+        #where, n is the length of the list T\n+        \n+        n = len(nums)\n+        \n+        result = [-1 for _ in range(n)]\n+        for i in range(n):\n+            for j in range(i, 2*n):\n+                if nums[j%n] > nums[i]:\n+                    result[i] = nums[j%n]\n+                    break\n+                    \n+        return result\n+    \"\"\"\n+    \n+    #Solution 4\n+    \"\"\"\n+    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n+        #Approach: Brute Force\n+        #Time Complexity: O(n^2)\n+        #Space Complexity: O(n)\n+        #where, n is the length of the list T\n+        \n+        n = len(nums)\n+        nums *= 2\n+        \n+        result = [-1 for _ in range(n)]\n+        for i in range(n):\n+            for j in range(i, 2*n):\n+                if nums[j] > nums[i]:\n+                    result[i] = nums[j]\n+                    break\n+                    \n+        return result\n+    \"\"\"\n\\ No newline at end of file"
  }
]
