[
  {
    "sha": "711ccbe82229713a099e3630114a280ebda26371",
    "filename": "Problem_1.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/ec394b63400c28d4fa8d04735280de5772a373bc/Problem_1.java",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/ec394b63400c28d4fa8d04735280de5772a373bc/Problem_1.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/Problem_1.java?ref=ec394b63400c28d4fa8d04735280de5772a373bc",
    "patch": "@@ -0,0 +1,39 @@\n+// Time Complexity :O(n)\n+// Space Complexity :o(1)\n+// Did this code successfully run on Leetcode :\n+// Three line explanation of solution in plain english\n+\n+// Your code here along with comments explaining your approach\n+class Solution {\n+    public int[] dailyTemperatures(int[] T) {\n+        int[] result=new int[T.length];\n+        for(int i=0;i<T.length;i++){\n+            for(int j=i+1;j<T.length;j++){\n+                if(T[j]>T[i]){\n+                    result[i]=j-i;\n+                    break;\n+                }\n+            }\n+        }\n+        \n+        return result;\n+    }\n+}\n+\n+//more efficine tolution\n+class Solution {\n+    public int[] dailyTemperatures(int[] T) {\n+        int[] result=new int[T.length];\n+        Stack<Integer> st=new Stack<>();\n+        for(int i=0;i<T.length;i++){\n+           while(!st.isEmpty() && T[i]>T[st.peek()]){\n+               int index=st.pop();\n+               result[index]=i-index;\n+           }\n+            st.push(i);\n+        }\n+        \n+        return result;\n+    }\n+}\n+"
  },
  {
    "sha": "7a71d468f87fa290bf3853372b747ea0c91abf11",
    "filename": "Problem_2.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/super30admin/Stack-1/blob/ec394b63400c28d4fa8d04735280de5772a373bc/Problem_2.java",
    "raw_url": "https://github.com/super30admin/Stack-1/raw/ec394b63400c28d4fa8d04735280de5772a373bc/Problem_2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Stack-1/contents/Problem_2.java?ref=ec394b63400c28d4fa8d04735280de5772a373bc",
    "patch": "@@ -0,0 +1,52 @@\n+// Time Complexity :O(n)\n+// Space Complexity :o(1)\n+// Did this code successfully run on Leetcode :\n+// Three line explanation of solution in plain english\n+\n+// Your code here along with comments explaining your approach\n+\n+//Below is the brute force approach.\n+\n+class Solution {\n+    public int[] nextGreaterElements(int[] nums) {\n+        int[] varArr=new int[2*nums.length];\n+        for(int i=0;i<varArr.length;i++){\n+            varArr[i]=nums[i%nums.length];\n+        }\n+        //System.out.println(Arrays.toString(varArr));\n+        boolean flag=false;\n+        for(int i=0;i<nums.length;i++){\n+            for(int j=i+1;j<i+nums.length;j++){\n+                //System.out.println(i+\",\"+j);\n+                if(nums[i]<varArr[j]){\n+                    nums[i]=varArr[j];\n+                    flag=true;\n+                    break;\n+                }\n+            }\n+            if(!flag){\n+                nums[i]=-1;\n+            }\n+            flag=false;\n+        }\n+        return nums;\n+    }\n+}\n+\n+//\n+class Solution {\n+    public int[] nextGreaterElements(int[] nums) {\n+        int[] varArr=new int[nums.length];\n+        Arrays.fill(varArr,-1);\n+        Stack<Integer> st=new Stack<>();\n+        for(int i=0;i<2*nums.length;i++){\n+            while(!st.isEmpty() && nums[st.peek()]<nums[i%nums.length]){\n+                varArr[st.pop()]=nums[i%nums.length];\n+            }\n+            if(i<nums.length){\n+                st.push(i);\n+            }\n+        }\n+        return varArr;\n+    }\n+}\n\\ No newline at end of file"
  }
]
