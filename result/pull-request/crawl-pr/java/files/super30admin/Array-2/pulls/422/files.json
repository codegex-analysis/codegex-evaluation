[
  {
    "sha": "bf1b9849422d286a56486d5e47c21f9ee018803f",
    "filename": "Problem 1.py",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/super30admin/Array-2/blob/a84585890445fb4b48009b7d1dea8b2eb57396a3/Problem%201.py",
    "raw_url": "https://github.com/super30admin/Array-2/raw/a84585890445fb4b48009b7d1dea8b2eb57396a3/Problem%201.py",
    "contents_url": "https://api.github.com/repos/super30admin/Array-2/contents/Problem%201.py?ref=a84585890445fb4b48009b7d1dea8b2eb57396a3",
    "patch": "@@ -0,0 +1,21 @@\n+#Time Complexity: O(n)\n+# Space Complexity: O(1)\n+class Solution:\n+    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n+        res = [] * len(nums)\n+        # Edge case\n+        if nums == None or len(nums) == 0:\n+            return res\n+\n+        # Logic\n+        for i in range(len(nums)):\n+            idx = abs(nums[i])\n+            if nums[idx - 1] > 0:\n+                nums[idx - 1] = nums[idx - 1] * -1\n+\n+        for j in range(len(nums)):\n+            if nums[j] < 0:\n+                continue\n+            else:\n+                res.append(j + 1)\n+        return res\n\\ No newline at end of file"
  },
  {
    "sha": "a09171ec4f0f1e1a28cf19e15b71e01fad417f6c",
    "filename": "Problem 2.py",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/super30admin/Array-2/blob/a84585890445fb4b48009b7d1dea8b2eb57396a3/Problem%202.py",
    "raw_url": "https://github.com/super30admin/Array-2/raw/a84585890445fb4b48009b7d1dea8b2eb57396a3/Problem%202.py",
    "contents_url": "https://api.github.com/repos/super30admin/Array-2/contents/Problem%202.py?ref=a84585890445fb4b48009b7d1dea8b2eb57396a3",
    "patch": "@@ -0,0 +1,37 @@\n+#Time Complexity:O(mn)\n+#Space Complexity:O(1)\n+class Solution():\n+    def countLives(board, i, j, m, n):\n+        result = 0\n+        direction=[[0,-1],[0,1],[-1,0],[1,0],[-1,-1],[-1,1],[1,-1],[1,1]]\n+\n+        for d in direction:\n+            r = i + d[0]\n+            c = j + d[1]\n+            if (r >= 0 and r < m and c >= 0 and c < n and (board[r][c]==1 or board[r][c]== 3)):\n+                result += 1\n+        return result\n+\n+    def gameOfLife(self, board: List[List[int]]) -> None:\n+        if (board == None or len(board)==0 or len(board[0])==0):\n+            return None\n+        # 1 ----> 0 = 3\n+        # 0 ----> 1 = 2\n+        m = len(board)\n+        n = len(board[0])\n+        for i in range(m):\n+            for j in range(n):\n+                count = Solution.countLives(board,i,j,m,n)\n+                if (board[i][j]==1 and (count < 2 or count > 3)): #it dies\n+                    board[i][j] = 3\n+                if (board[i][j]==0 and count == 3): #lives\n+                    board[i][j] = 2\n+        for i in range(m):\n+            for j in range(n):\n+                if (board[i][j] == 3):\n+                    board[i][j] = 0\n+                if (board[i][j] == 2):\n+                    board[i][j] = 1\n+        \"\"\"\n+        Do not return anything, modify board in-place instead.\n+        \"\"\""
  }
]
