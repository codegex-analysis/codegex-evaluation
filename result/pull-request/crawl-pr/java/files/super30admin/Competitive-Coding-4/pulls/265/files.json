[
  {
    "sha": "c53a4d01cf2ea4f4207a7755761a9f789e40a6f8",
    "filename": "que-1.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-4/blob/1e1394d1409a865359211cee7c4587c351a6f844/que-1.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-4/raw/1e1394d1409a865359211cee7c4587c351a6f844/que-1.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-4/contents/que-1.java?ref=1e1394d1409a865359211cee7c4587c351a6f844",
    "patch": "@@ -0,0 +1,53 @@\n+// Time Complexity :O(n)\r\n+// Space Complexity :O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+/**\r\n+ * Definition for singly-linked list.\r\n+ * public class ListNode {\r\n+ *     int val;\r\n+ *     ListNode next;\r\n+ *     ListNode() {}\r\n+ *     ListNode(int val) { this.val = val; }\r\n+ *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n+ * }\r\n+ */\r\n+class Solution {\r\n+    public boolean isPalindrome(ListNode head) {\r\n+        if(head == null) return true;\r\n+        ListNode fast = head;\r\n+        ListNode p1 = head;\r\n+        ListNode slow = head;\r\n+        while(fast != null && fast.next!=null){\r\n+            fast = fast.next.next;\r\n+            slow = slow.next;\r\n+            \r\n+        }\r\n+        \r\n+        ListNode p2 =reverse(slow);\r\n+        boolean result = true;\r\n+        while(result && p2 != null){\r\n+            if(p1.val != p2.val) result = false;\r\n+            p1 = p1.next;\r\n+            p2=p2.next;\r\n+        }\r\n+        slow = reverse(slow);\r\n+        return result;\r\n+        \r\n+    }\r\n+    private ListNode reverse(ListNode head){\r\n+        ListNode prev = null;\r\n+        ListNode curr = null;\r\n+        ListNode temp = head;\r\n+        while(temp!=null){\r\n+            prev=curr;\r\n+            curr = temp;\r\n+            temp = temp.next;\r\n+            curr.next = prev;\r\n+        }\r\n+        return curr;\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b39488dd33b65870861a7208ede44d1bbe11f8ac",
    "filename": "que-2.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-4/blob/1e1394d1409a865359211cee7c4587c351a6f844/que-2.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-4/raw/1e1394d1409a865359211cee7c4587c351a6f844/que-2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-4/contents/que-2.java?ref=1e1394d1409a865359211cee7c4587c351a6f844",
    "patch": "@@ -0,0 +1,18 @@\n+// Time Complexity :O(n)\r\n+// Space Complexity :O(h)\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+class Solution {\r\n+    public boolean isBalanced(TreeNode root) {\r\n+        if(root == null) return true;\r\n+        return isBalanced(root.left) && isBalanced(root.right) && Math.abs(height(root.left)- height(root.right))<= 1;\r\n+    }\r\n+    private int height(TreeNode root){\r\n+        if(root == null) return 0;\r\n+        else\r\n+            return Math.max(height(root.left), height(root.right))+1;\r\n+    }\r\n+}\n\\ No newline at end of file"
  }
]
