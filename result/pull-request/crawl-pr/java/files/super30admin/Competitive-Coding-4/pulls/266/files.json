[
  {
    "sha": "fb56bd5421e069959a6e6c51f6c667a64ca067f4",
    "filename": "BalancedBinaryTree.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-4/blob/4b4e8f1a70cff3c55edc58c8d54a235ffd81d5e0/BalancedBinaryTree.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-4/raw/4b4e8f1a70cff3c55edc58c8d54a235ffd81d5e0/BalancedBinaryTree.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-4/contents/BalancedBinaryTree.java?ref=4b4e8f1a70cff3c55edc58c8d54a235ffd81d5e0",
    "patch": "@@ -0,0 +1,53 @@\n+/**\n+ * Definition for a binary tree node.\n+ * public class TreeNode {\n+ *     int val;\n+ *     TreeNode left;\n+ *     TreeNode right;\n+ *     TreeNode() {}\n+ *     TreeNode(int val) { this.val = val; }\n+ *     TreeNode(int val, TreeNode left, TreeNode right) {\n+ *         this.val = val;\n+ *         this.left = left;\n+ *         this.right = right;\n+ *     }\n+ * }\n+ */\n+class BalancedBinaryTree {\n+    \n+    // Time Complexity: O(n)    (where n -> no. of nodes in the tree)\n+    // Space Complexity: O(h)   (where h -> height of the tree)\n+    \n+    public boolean isBalanced(TreeNode root) {\n+        // Edge Case Checking\n+        if(root == null)\n+            return true;\n+        int height = dfs(root);\n+\n+        // If we got an invalid height value (-1) then return false else true\n+        return height == -1 ? false : true;\n+    }\n+    \n+    private int dfs(TreeNode root){\n+        // If the node is null - then we return 0 as the height\n+        if(root == null)\n+            return 0;\n+        \n+        // Calculate the left height for a node\n+        int leftHeight = dfs(root.left);\n+        if(leftHeight == -1)\n+            return -1;\n+        \n+        // Calculate the right height for a node\n+        int rightHeight = dfs(root.right);\n+        if(rightHeight == -1)\n+            return -1;\n+\n+        // If the difference between the height of left and right subtrees differ by more than 1 - then return -1 (invalid case)\n+        if(Math.abs(leftHeight - rightHeight) > 1)\n+            return -1;\n+\n+        // otherwise retur 1 + maximum height between left and right height\n+        return Math.max(leftHeight, rightHeight) + 1;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f9fe3652941b8e2b286ebf9e54cfdcf6d52e4142",
    "filename": "PalindromeLinkedList.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-4/blob/4b4e8f1a70cff3c55edc58c8d54a235ffd81d5e0/PalindromeLinkedList.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-4/raw/4b4e8f1a70cff3c55edc58c8d54a235ffd81d5e0/PalindromeLinkedList.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-4/contents/PalindromeLinkedList.java?ref=4b4e8f1a70cff3c55edc58c8d54a235ffd81d5e0",
    "patch": "@@ -0,0 +1,55 @@\n+/**\n+ * Definition for singly-linked list.\n+ * public class ListNode {\n+ *     int val;\n+ *     ListNode next;\n+ *     ListNode() {}\n+ *     ListNode(int val) { this.val = val; }\n+ *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n+ * }\n+ */\n+class PalindromeLinkedList {\n+    \n+    // Time Complexity: O(n)\n+    // Space Complexity: O(1)\n+    \n+    public boolean isPalindrome(ListNode head) {\n+        ListNode slow = head;\n+        ListNode fast = head;\n+        \n+        // Reach the middle and the end of the linked list using the slow and fast pointers\n+        while(fast != null && fast.next != null){\n+            slow = slow.next;\n+            fast = fast.next.next;\n+        }\n+        \n+        //When the length of linked list is odd, then we skip the middle and move the slow ahead\n+        if(fast != null)\n+            slow = slow.next;\n+        \n+        // Reverse the right half of the linked list\n+        slow = reverse(slow);\n+        fast = head;\n+\n+        // Now compare the left half and the reversed right half of the linked list. If any value does not match - then return false else true\n+        while(slow != null){\n+            if(slow.val != fast.val)\n+                return false;\n+            slow = slow.next;\n+            fast = fast.next;\n+        }\n+        return true;\n+    }\n+    \n+    // Code to reverse a linked list\n+    private ListNode reverse(ListNode head){\n+        ListNode prev = null;\n+        while(head != null){\n+            ListNode next = head.next;\n+            head.next = prev;\n+            prev = head;\n+            head = next;\n+        }\n+        return prev;\n+    }\n+}\n\\ No newline at end of file"
  }
]
