[
  {
    "sha": "e0f5cfca4d15252b93d2b43af5c71e139675d959",
    "filename": "BuyAndSellStocks2.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-9/blob/639ae1682736087e5bce732a209d3c61bd4852de/BuyAndSellStocks2.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-9/raw/639ae1682736087e5bce732a209d3c61bd4852de/BuyAndSellStocks2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-9/contents/BuyAndSellStocks2.java?ref=639ae1682736087e5bce732a209d3c61bd4852de",
    "patch": "@@ -0,0 +1,21 @@\n+// TC: O(N)\n+// SC: O(1)\n+// Did it run successfully on Leetcode? : Yes\n+class Solution {\n+    public int maxProfit(int[] prices) {\n+    if ( prices == null || prices.length == 0)\n+        return 0;\n+        int maxProfit = 0;\n+        int profit = 0;\n+        \n+       for ( int i = 0; i < prices.length-1; i++)\n+       {\n+           if (prices[i] < prices[i+1])    \n+           {\n+               profit = profit + (prices[i+1] - prices[i]);\n+               maxProfit = Math.max(maxProfit, profit);\n+           }\n+       }\n+        return maxProfit;\n+    }\n+}"
  },
  {
    "sha": "3edd7403c6ac776c281ff763aef50e576cf68bcb",
    "filename": "PeekIterator.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-9/blob/639ae1682736087e5bce732a209d3c61bd4852de/PeekIterator.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-9/raw/639ae1682736087e5bce732a209d3c61bd4852de/PeekIterator.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-9/contents/PeekIterator.java?ref=639ae1682736087e5bce732a209d3c61bd4852de",
    "patch": "@@ -0,0 +1,89 @@\n+// TC: O(1) - all methods\n+// SC: O(1) - all methods\n+// Did it run successfully on Leetcode? : Yes\n+import java.util.NoSuchElementException;\n+class PeekingIterator implements Iterator<Integer> {\n+    private Iterator<Integer> iter;\n+    private Integer peekedValue = null;\n+    \n+\tpublic PeekingIterator(Iterator<Integer> iterator) {\n+\t    // initialize any member here.\n+        iter = iterator;\n+\t}\n+\t\n+    // Returns the next element in the iteration without advancing the iterator.\n+\tpublic Integer peek() {\n+        if (peekedValue == null)\n+        {\n+            if (!iter.hasNext()) \n+                throw new NoSuchElementException();\n+            peekedValue = iter.next();\n+        } \n+        return peekedValue;\n+\t}\n+\t\n+\t// hasNext() and next() should behave the same as in the Iterator interface.\n+\t// Override them if needed.\n+\t@Override\n+\tpublic Integer next() {\n+\t    if (peekedValue != null) {\n+            Integer toReturn = peekedValue;\n+            peekedValue = null;\n+            return toReturn;\n+        }\n+        if (!iter.hasNext()) {\n+            throw new NoSuchElementException();\n+        }\n+        return iter.next();\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean hasNext() {\n+\t    return peekedValue != null || iter.hasNext();\n+\t}\n+}\n+\n+\n+\n+// TC: O(1) - all methods\n+// SC: O(1) - all methods\n+// Did it run successfully on Leetcode? : Yes\n+import java.util.NoSuchElementException;\n+\n+class PeekingIterator implements Iterator<Integer> {\n+\n+    private Iterator<Integer> iter;\n+    private Integer next = null;\n+\n+    public PeekingIterator(Iterator<Integer> iterator) {\n+        // Avoid an exception being thrown in the constructor.\n+        if (iterator.hasNext()) {\n+            next = iterator.next();\n+        }\n+        iter = iterator;\n+    }\n+\n+    public Integer peek() {\n+        return next;\n+    }\n+\n+    @Override\n+    public Integer next() {\n+        /* As per the Java Iterator specs, we should throw a NoSuchElementException\n+         * if the next element doesn't exist. */\n+        if (next == null) {\n+            throw new NoSuchElementException();\n+        }\n+        Integer toReturn = next;\n+        next = null;\n+        if (iter.hasNext()) {\n+            next = iter.next();\n+        }\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+        return next != null;\n+    }\n+}"
  }
]
