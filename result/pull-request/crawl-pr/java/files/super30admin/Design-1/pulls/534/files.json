[
  {
    "sha": "abb5e198c12325286615f361fa0f67be66ea64e2",
    "filename": "HahMap_implementation.java",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/super30admin/Design-1/blob/418feccf1e995bd7e0708558824c72b62b06dda0/HahMap_implementation.java",
    "raw_url": "https://github.com/super30admin/Design-1/raw/418feccf1e995bd7e0708558824c72b62b06dda0/HahMap_implementation.java",
    "contents_url": "https://api.github.com/repos/super30admin/Design-1/contents/HahMap_implementation.java?ref=418feccf1e995bd7e0708558824c72b62b06dda0",
    "patch": "@@ -0,0 +1 @@\n+//it was instructed by our instructor to complete this in the future\n\\ No newline at end of file"
  },
  {
    "sha": "9216d4dd35d89f0f4a3800a6da7aaf6eb505a62d",
    "filename": "Min_Stack.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/super30admin/Design-1/blob/418feccf1e995bd7e0708558824c72b62b06dda0/Min_Stack.java",
    "raw_url": "https://github.com/super30admin/Design-1/raw/418feccf1e995bd7e0708558824c72b62b06dda0/Min_Stack.java",
    "contents_url": "https://api.github.com/repos/super30admin/Design-1/contents/Min_Stack.java?ref=418feccf1e995bd7e0708558824c72b62b06dda0",
    "patch": "@@ -0,0 +1,51 @@\n+/*Time Complexity :O(1)\n+push() : takes O(1) time\n+pop() :  O(1) time.\n+top() : amortized O(1) time.\n+getMin() : O(1).\n+Space Complexity :  O(n) as stack is used to store.\n+ */\n+// Did this code successfully run on Leetcode : yes\n+// Any problem you faced while coding this : no\n+// Your code here along with comments explaining your approach\n+class MinStack {\n+    Stack<Integer> min_stack;\n+    int min;\n+    /** initialize your data structure here. */\n+    public MinStack() {\n+        min_stack = new Stack<>();\n+        min = Integer.MAX_VALUE;\n+    }\n+\n+    public void push(int val) {\n+        if(val <= min){\n+            min_stack.push(min);\n+            min = val;\n+        }\n+        min_stack.push(val);\n+    }\n+\n+    public void pop() {\n+        int pop_item = min_stack.pop();\n+        if(pop_item == min){\n+            min = min_stack.pop();\n+        }\n+    }\n+\n+    public int top() {\n+        return min_stack.peek();\n+    }\n+\n+    public int getMin() {\n+        return min;\n+    }\n+}\n+\n+/**\n+ * Your MinStack object will be instantiated and called as such:\n+ * MinStack obj = new MinStack();\n+ * obj.push(val);\n+ * obj.pop();\n+ * int param_3 = obj.top();\n+ * int param_4 = obj.getMin();\n+ */\n\\ No newline at end of file"
  }
]
