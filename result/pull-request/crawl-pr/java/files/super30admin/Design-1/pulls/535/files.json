[
  {
    "sha": "0a069ea90f4e272ddc0ac72d6144b9900403ca55",
    "filename": "minstack.py",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/super30admin/Design-1/blob/57ac136c0472c078622978110fc58c748916f8bb/minstack.py",
    "raw_url": "https://github.com/super30admin/Design-1/raw/57ac136c0472c078622978110fc58c748916f8bb/minstack.py",
    "contents_url": "https://api.github.com/repos/super30admin/Design-1/contents/minstack.py?ref=57ac136c0472c078622978110fc58c748916f8bb",
    "patch": "@@ -0,0 +1,63 @@\n+# 1. Implemented before class with below leetcode result.\n+# Runtime: 612 ms, faster than 12.93% of Python3 online submissions for Min Stack.\n+# Memory Usage: 18 MB, less than 44.72% of Python3 online submissions for Min Stack.\n+\n+class MinStack:\n+\n+    def __init__(self):\n+        \"\"\"\n+        initialize your data structure here.\n+        \"\"\"\n+        self.stack = [] \n+        self.top_ptr = -1\n+        \n+    def push(self, x: int) -> None: # O(1)\n+        self.top_ptr += 1\n+        self.stack.append(x)\n+        \n+    def pop(self) -> None: # O(1)\n+        self.top_ptr -= 1\n+        self.stack = self.stack[:-1]\n+        \n+    def top(self) -> int: # O(1)\n+        return self.stack[self.top_ptr]\n+\n+    def getMin(self) -> int: # O(n) since stack is sorted everytime\n+        return min(self.stack)\n+\n+\n+# 2. with inbuilt functions <pop> below leetcode result.\n+#Runtime: 608 ms, faster than 15.12% of Python3 online submissions for Min Stack.\n+# Memory Usage: 18 MB, less than 65.31% of Python3 online submissions for Min Stack.\n+\n+# 3. Implemented after class:\n+# Runtime: 56 ms, faster than 89.37% of Python3 online submissions for Min Stack.\n+# Memory Usage: 18.2 MB, less than 35.37% of Python3 online submissions for Min Stack.\n+\n+import math\n+class MinStack:\n+\n+    def __init__(self):\n+        \"\"\"\n+        initialize your data structure here.\n+        \"\"\"\n+        self.stack = []\n+        self.minstack = []\n+        self.minstack.append(math.inf)\n+        \n+    def push(self, val: int) -> None:\n+        self.stack.append(val)\n+        if val < self.minstack[-1]:\n+            self.minstack.append(val)\n+        else:\n+            self.minstack.append(self.minstack[-1])\n+            \n+    def pop(self) -> None:\n+        self.stack.pop()\n+        self.minstack.pop()\n+\n+    def top(self) -> int:\n+        return self.stack[-1]\n+\n+    def getMin(self) -> int:\n+        return self.minstack[-1]"
  }
]
