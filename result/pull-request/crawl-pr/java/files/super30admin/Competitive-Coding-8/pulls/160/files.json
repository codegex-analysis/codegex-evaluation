[
  {
    "sha": "308e1f29aeaada09d9a52686848becc59151c863",
    "filename": "compress.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-8/blob/2837c9b8e3eaf47eac8939488f7f6d1d54ebce7c/compress.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-8/raw/2837c9b8e3eaf47eac8939488f7f6d1d54ebce7c/compress.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-8/contents/compress.java?ref=2837c9b8e3eaf47eac8939488f7f6d1d54ebce7c",
    "patch": "@@ -0,0 +1,57 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(1) \n+// Did this code successfully run on Leetcode : YES\n+// Any problem you faced while coding this : NO\n+\n+\n+// Your code here along with comments explaining your approach\n+class Solution {\n+    public int compress(char[] chars) {\n+        \n+        if(chars.length==0) return 0;\n+\t    int ans = 0;\n+\t    int count = 1;\n+\t    char curr = chars[0];\n+\t    \n+\t    // iterate over String\n+\t    for(int i=1;i<chars.length;i++) {\n+\t        \n+\t        // if ch[i]!=ch[i-1] add ch + count to output string and set ch t0 curr char and c to 1\n+\t        if(chars[i]!=curr) {\n+                \n+                chars[ans]=curr;\n+\t            ans++;\n+\t            if(count>1) {\n+                    \n+                    String t = \"\"+count;\n+                    for(char c : t.toCharArray()) {\n+                        chars[ans] = c;\n+                        ans++;\n+                    }\n+                    \n+                    \n+                }\n+\t            \n+\t            count=1;\n+\t            curr = chars[i];\n+                \n+\t        } else {\n+                \n+\t            count++;\n+                \n+\t        }\n+\t    }\n+        \n+\t    chars[ans]=curr;\n+\t    ans++;\n+\t    if(count>1) {\n+            String t = \"\"+count;\n+            for(char c : t.toCharArray()) {\n+                chars[ans] = c;\n+                ans++;\n+            }\n+        }\n+        \n+\t    return ans;\n+    }\n+}"
  },
  {
    "sha": "de3a62129651d280f37d015cc79a8c4bc2ec2b4e",
    "filename": "flatten.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Competitive-Coding-8/blob/2837c9b8e3eaf47eac8939488f7f6d1d54ebce7c/flatten.java",
    "raw_url": "https://github.com/super30admin/Competitive-Coding-8/raw/2837c9b8e3eaf47eac8939488f7f6d1d54ebce7c/flatten.java",
    "contents_url": "https://api.github.com/repos/super30admin/Competitive-Coding-8/contents/flatten.java?ref=2837c9b8e3eaf47eac8939488f7f6d1d54ebce7c",
    "patch": "@@ -0,0 +1,36 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(1) \n+// Did this code successfully run on Leetcode : YES\n+// Any problem you faced while coding this : NO\n+\n+\n+// Your code here along with comments explaining your approach\n+// Used modified Morris traversal \n+class Solution {\n+   \n+    public void flatten(TreeNode root) {\n+        \n+        if (root == null) {\n+            return;\n+        }\n+        \n+        TreeNode node = root;\n+        \n+        while (node != null) {\n+            \n+            if (node.left != null) {\n+                \n+                TreeNode curr = node.left;\n+                while (curr.right != null) {\n+                    curr = curr.right;\n+                }\n+                \n+                curr.right = node.right;\n+                node.right = node.left;\n+                node.left = null;\n+            }\n+            \n+            node = node.right;\n+        }\n+    }\n+}"
  }
]
