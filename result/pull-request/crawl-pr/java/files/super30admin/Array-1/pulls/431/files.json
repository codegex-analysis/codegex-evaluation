[
  {
    "sha": "d34ed6ce3b19ec0754b49e17681d672b6083f694",
    "filename": "Problem-1.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/super30admin/Array-1/blob/43265e48748d5e88ac22b6df1d2adcae120eaf96/Problem-1.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/43265e48748d5e88ac22b6df1d2adcae120eaf96/Problem-1.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/Problem-1.java?ref=43265e48748d5e88ac22b6df1d2adcae120eaf96",
    "patch": "@@ -0,0 +1,34 @@\n+// Time Complexity :O(n)\n+// Space Complexity :O(1)\n+// Did this code successfully run on Leetcode : yes\n+// Three line explanation of solution in plain english\n+//Initializing my runningproduct to 1 and resultant array result[0] = 1. \n+//Iterate through the array to get the runningproduct of left hand elements and storing them into result[].\n+//Iterate from right side of the array, multiplying runningproduct with the element in result[] and store it again in result[] to return.\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+    public int[] productExceptSelf(int[] nums) {\n+        int n = nums.length;\n+        int[] result = new int[nums.length];\n+        \n+        if(nums == null || nums.length == 0) return result;\n+        \n+        int runningproduct=1; \n+        result[0] = 1;\n+        \n+        for(int i=1; i<n; i++){\n+            runningproduct = runningproduct * nums[i-1];\n+            result[i] = runningproduct;\n+        }\n+        \n+        runningproduct=1;\n+        \n+        for(int i=n-2; i>=0; i--){\n+            runningproduct = runningproduct*nums[i+1];\n+            result[i] = runningproduct* result[i];\n+        }\n+        \n+        return result;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d34ed6ce3b19ec0754b49e17681d672b6083f694",
    "filename": "Sample.java",
    "status": "modified",
    "additions": 32,
    "deletions": 4,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Array-1/blob/43265e48748d5e88ac22b6df1d2adcae120eaf96/Sample.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/43265e48748d5e88ac22b6df1d2adcae120eaf96/Sample.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/Sample.java?ref=43265e48748d5e88ac22b6df1d2adcae120eaf96",
    "patch": "@@ -1,6 +1,34 @@\n-// Time Complexity :\n-// Space Complexity :\n-// Did this code successfully run on Leetcode :\n+// Time Complexity :O(n)\n+// Space Complexity :O(1)\n+// Did this code successfully run on Leetcode : yes\n // Three line explanation of solution in plain english\n+//Initializing my runningproduct to 1 and resultant array result[0] = 1. \n+//Iterate through the array to get the runningproduct of left hand elements and storing them into result[].\n+//Iterate from right side of the array, multiplying runningproduct with the element in result[] and store it again in result[] to return.\n+// Your code here along with comments explaining your approach\n \n-// Your code here along with comments explaining your approach\n\\ No newline at end of file\n+class Solution {\n+    public int[] productExceptSelf(int[] nums) {\n+        int n = nums.length;\n+        int[] result = new int[nums.length];\n+        \n+        if(nums == null || nums.length == 0) return result;\n+        \n+        int runningproduct=1; \n+        result[0] = 1;\n+        \n+        for(int i=1; i<n; i++){\n+            runningproduct = runningproduct * nums[i-1];\n+            result[i] = runningproduct;\n+        }\n+        \n+        runningproduct=1;\n+        \n+        for(int i=n-2; i>=0; i--){\n+            runningproduct = runningproduct*nums[i+1];\n+            result[i] = runningproduct* result[i];\n+        }\n+        \n+        return result;\n+    }\n+}\n\\ No newline at end of file"
  }
]
