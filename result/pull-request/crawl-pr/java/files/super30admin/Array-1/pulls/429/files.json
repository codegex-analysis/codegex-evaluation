[
  {
    "sha": "48d3e7de540b29a1642b4125431d6c1f57f4e527",
    "filename": "spiral-matrix.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/super30admin/Array-1/blob/321a3f46434acab4ca81e4882af5f94ed7b71d4c/spiral-matrix.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/321a3f46434acab4ca81e4882af5f94ed7b71d4c/spiral-matrix.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/spiral-matrix.java?ref=321a3f46434acab4ca81e4882af5f94ed7b71d4c",
    "patch": "@@ -0,0 +1,44 @@\n+class Solution {\n+    public List<Integer> spiralOrder(int[][] matrix) {\n+        List<Integer> result = new ArrayList<>();\n+        if(matrix == null || matrix.length == 0) return result;\n+        // m rows and n colums\n+        int m = matrix.length;\n+        int n = matrix[0].length;\n+        int left = 0 , right = n-1;\n+        int top = 0 , bottom = m-1;\n+        while(top <= bottom && left <= right){\n+            //top\n+            for(int j = left ; j <= right ; j++){\n+                result.add(matrix[top][j]);\n+            }\n+            top++;\n+            //right\n+            if(top <= bottom && left <= right){\n+                for(int i =top ; i<= bottom ; i++){\n+                result.add(matrix[i][right]);\n+            }\n+            right--;\n+            }\n+\n+            //left\n+            if(top <= bottom && left <= right){\n+               for(int j = right ; j>= left ; j--){\n+                 result.add(matrix[bottom][j]);\n+            }\n+            bottom--; \n+            }\n+\n+            //bottom to top\n+            if(top <= bottom && left <= right){\n+             for(int i = bottom ; i>= top ; i--){\n+                result.add(matrix[i][left]);\n+            }   left++;\n+            }\n+            \n+        }\n+        return result;\n+    }\n+}\n+\n+// Time Complexity O(m*n) , Space Complexity O(1)"
  }
]
