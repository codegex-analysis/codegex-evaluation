[
  {
    "sha": "8573ef79f5e345a7d7b6bb7da029fb65a907f182",
    "filename": "diagonal-traverse.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/super30admin/Array-1/blob/58bf792345987662546ce2cbe7435c1fe7a76e0f/diagonal-traverse.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/58bf792345987662546ce2cbe7435c1fe7a76e0f/diagonal-traverse.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/diagonal-traverse.java?ref=58bf792345987662546ce2cbe7435c1fe7a76e0f",
    "patch": "@@ -0,0 +1,44 @@\n+class Solution {\n+    public int[] findDiagonalOrder(int[][] matrix) {\n+        if(matrix == null || matrix.length == 0) return new int[0];\n+        // Rows = m , Columns = n\n+        int m = matrix.length; // 3\n+        int n = matrix[0].length; //3\n+        int[] result = new int[m*n]; //9\n+        \n+        // traverse the matrix\n+        int i =0 , direction =1 ;// direction 1 is upward , -1 is downward\n+        int col = 0 , row = 0;\n+        while(i < m*n){ //1< 9\n+            result[i] = matrix[row][col]; //result[1] = matrix[1][0] = 1\n+            // upward direction\n+            if(direction == 1){ // true\n+                if(col == n-1){ //col =0 , n-1 =2\n+                    row++ ; direction = -1;\n+                }\n+                else if(row == 0){\n+                    col++; direction = -1;\n+                }\n+                else{\n+                    row--; col++;\n+                }\n+            }\n+            else{\n+                if(row == m-1){\n+                    col++ ; direction = 1;\n+                }\n+                else if(col == 0){\n+                    row++; direction = 1;\n+                }\n+                else{\n+                    row++; col--;\n+                }\n+                \n+            }\n+            i++;\n+        }\n+        return result;\n+    }\n+}\n+\n+// Time Complexity - O(m*n) , space complexity O(1)"
  }
]
