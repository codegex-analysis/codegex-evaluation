[
  {
    "sha": "13fc1f4fac9dce5170bad47605a9920ad5462834",
    "filename": "DiagonalTraverse.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/super30admin/Array-1/blob/aeb2198ab6b8ad265fbad2ae410d53d39cf89246/DiagonalTraverse.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/aeb2198ab6b8ad265fbad2ae410d53d39cf89246/DiagonalTraverse.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/DiagonalTraverse.java?ref=aeb2198ab6b8ad265fbad2ae410d53d39cf89246",
    "patch": "@@ -0,0 +1,41 @@\n+// Time Complexity : O(n*m)\n+// Space Complexity : O(1)\n+// Did this code successfully run on Leetcode : yes\n+// Three line explanation of solution in plain english\n+\n+/*\n+To traverse in upward and downward direction alternatively from (0,0) of the matrix diagonally.\n+While traversing upward, has to check if col has reached end or row has reached starting.\n+While traversing downward, has to check if row has reached end or col has reached starting.\n+Then at every step increment and decrement row and col respectively during downward and vice versa during upward traversing.\n+*/\n+\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+    public int[] findDiagonalOrder(int[][] matrix) {\n+        if(matrix.length == 0 || matrix == null) return new int[0];\n+        int n=matrix.length;\n+        int m = matrix[0].length;\n+        int[] result = new int[n*m];\n+        int r = 0,c = 0,k=0;\n+        int dir = 1;\n+        while(k < n*m){\n+            result[k] = matrix[r][c];\n+            // upward direction\n+            if(dir == 1){\n+                if(c == m-1){ r++;dir=-1;}\n+                else if(r == 0){ c++;dir=-1;}\n+                else{ r--;c++;}\n+            }\n+            //downward direction\n+            else{\n+                if(r == n-1){ c++;dir=1;}\n+                else if(c == 0){ r++;dir=1;}\n+                else{ r++;c--;}\n+            }\n+            k++;\n+        }\n+        return result;\n+    }\n+}"
  },
  {
    "sha": "f0bf8483e49735efa2635d71b3d05cdd9a134422",
    "filename": "ProdExceptSelf.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/super30admin/Array-1/blob/aeb2198ab6b8ad265fbad2ae410d53d39cf89246/ProdExceptSelf.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/aeb2198ab6b8ad265fbad2ae410d53d39cf89246/ProdExceptSelf.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/ProdExceptSelf.java?ref=aeb2198ab6b8ad265fbad2ae410d53d39cf89246",
    "patch": "@@ -0,0 +1,29 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(1) if we did not consider the output array size\n+// else it's O(1) since we did not use extra space\n+// Did this code successfully run on Leetcode : yes\n+// Three line explanation of solution in plain english\n+\n+/*\n+Get the Product Except self by multiplying and saving inarray with +1 pointer element from left to right\n+Then traverse from multiplying right to left and product with the product previous array\n+Using a temp variable, multiplying with itself and element at same index in previous array gives the cumulative product except itself\n+This gives the product of other element except itself.\n+*/\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+    public int[] productExceptSelf(int[] nums) {\n+        int[] res = new int[nums.length];\n+        res[0] = 1;\n+        for(int i=1;i<nums.length;i++){\n+            res[i] = nums[i-1]*res[i-1];\n+        }\n+        int temp = 1;\n+        for(int j=nums.length-1;j>=0;j--){\n+            res[j] *= temp;\n+            temp *= nums[j];\n+        }\n+        return res;\n+    }\n+}"
  },
  {
    "sha": "8892b9f043216e1fe2f0beef65f09ded2d489628",
    "filename": "SpiralMatrix.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/super30admin/Array-1/blob/aeb2198ab6b8ad265fbad2ae410d53d39cf89246/SpiralMatrix.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/aeb2198ab6b8ad265fbad2ae410d53d39cf89246/SpiralMatrix.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/SpiralMatrix.java?ref=aeb2198ab6b8ad265fbad2ae410d53d39cf89246",
    "patch": "@@ -0,0 +1,35 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(1)\n+// Did this code successfully run on Leetcode : Yes\n+// Three line explanation of solution in plain english\n+\n+/* Return the matrix elements by traversing through the matrix in spiral order.\n+To get the output list in spiral order, traverse the matrix through spiral order by \n+incrementing and decrementing the row,col while traversing through col and row respectively.\n+Initially row-1 and col-n is traversed, then iteratively traverse through c1 - cn col with r as constant\n+and traverse through r1 - rn with c as constant. In the next iteration incrrement the c1,r1 - decrement cn,rn \n+and repeat the same to get spiral order.\n+*/\n+\n+// Your code here along with comments explaining your approach\n+\n+class Solution {\n+    public List<Integer> spiralOrder(int[][] matrix) {\n+        List<Integer> list = new ArrayList<>();\n+        if(matrix.length == 0) return list;\n+        int r1=0,r2=matrix.length-1,c1=0,c2=matrix[0].length-1;\n+        while(r1<=r2 && c1<=c2){\n+            for(int i=c1;i<=c2;i++) list.add(matrix[r1][i]);\n+            for(int j=r1+1;j<=r2;j++) list.add(matrix[j][c2]);\n+            if(r1<r2 && c1<c2){\n+                for(int i=c2-1;i>=c1;i--) list.add(matrix[r2][i]);\n+                for(int j=r2-1;j>r1;j--) list.add(matrix[j][c1]);\n+            }\n+            r1++;\n+            r2--;\n+            c1++;\n+            c2--;\n+        }\n+        return list;\n+    }\n+}"
  }
]
