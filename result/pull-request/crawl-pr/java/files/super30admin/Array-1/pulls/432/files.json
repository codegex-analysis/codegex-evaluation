[
  {
    "sha": "049aeb7f3ef3d82b5da49ba82e57768a68dd8f33",
    "filename": "que-1.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/super30admin/Array-1/blob/9035ddb9f2651e034f75e6fb1b4ae922e7e0bb07/que-1.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/9035ddb9f2651e034f75e6fb1b4ae922e7e0bb07/que-1.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/que-1.java?ref=9035ddb9f2651e034f75e6fb1b4ae922e7e0bb07",
    "patch": "@@ -0,0 +1,27 @@\n+// Time Complexity :  O(n)\r\n+// Space Complexity : O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Three line explanation of solution in plain english\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+class Solution {\r\n+    public int[] productExceptSelf(int[] nums) {\r\n+        int n = nums.length;\r\n+        int [] result = new int[nums.length];\r\n+        if(nums == null || nums.length==0) return result;\r\n+        int rp = 1; result[0]=1;\r\n+        //left pass \r\n+        for(int i = 1;i<n;i++){\r\n+            rp = rp * nums[i-1];\r\n+            result[i] = rp;\r\n+            \r\n+        }\r\n+        rp = 1;\r\n+        for(int i=n-2;i>=0;i--){\r\n+            rp = rp * nums[i+1];\r\n+            result[i] = rp * result[i];\r\n+            \r\n+        }\r\n+        return result;\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "34782542fd1814860ed937f0d7878ad50a40a658",
    "filename": "que-2.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/super30admin/Array-1/blob/9035ddb9f2651e034f75e6fb1b4ae922e7e0bb07/que-2.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/9035ddb9f2651e034f75e6fb1b4ae922e7e0bb07/que-2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/que-2.java?ref=9035ddb9f2651e034f75e6fb1b4ae922e7e0bb07",
    "patch": "@@ -0,0 +1,40 @@\n+// Time Complexity :O(n*m)\r\n+// Space Complexity :O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Three line explanation of solution in plain english\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+class Solution {\r\n+    public int[] findDiagonalOrder(int[][] matrix) {\r\n+        if(matrix == null || matrix.length == 0){\r\n+            \r\n+            return new int[0];}\r\n+        \r\n+        int m = matrix.length;\r\n+        int n = matrix[0].length;\r\n+        int []result = new int[m*n];\r\n+        int i = 0, dir = 1,c=0, r = 0;\r\n+        while(i<m*n){\r\n+            result[i] = matrix[r][c];\r\n+            if(dir == 1){\r\n+                if(c == n-1){\r\n+                    r++; dir = -1;}\r\n+                else if(r == 0){\r\n+                    c++; dir = -1;}\r\n+                else{\r\n+                    r--; c++;}\r\n+                \r\n+            }\r\n+            else{\r\n+                if(r == m-1){\r\n+                    c++; dir = 1;}\r\n+                else if(c == 0){\r\n+                    r++; dir = 1;}\r\n+                else{\r\n+                    r++; c--;}\r\n+            }\r\n+            i++;\r\n+        }\r\n+        return result;\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "75a2dd94caf6b7ae24e85975c3eb974e05baf4e4",
    "filename": "que-3.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Array-1/blob/9035ddb9f2651e034f75e6fb1b4ae922e7e0bb07/que-3.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/9035ddb9f2651e034f75e6fb1b4ae922e7e0bb07/que-3.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/que-3.java?ref=9035ddb9f2651e034f75e6fb1b4ae922e7e0bb07",
    "patch": "@@ -0,0 +1,36 @@\n+// Time Complexity :\r\n+// Space Complexity :\r\n+// Did this code successfully run on Leetcode :\r\n+// Three line explanation of solution in plain english\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+class Solution {\r\n+    public List<Integer> spiralOrder(int[][] matrix) {\r\n+        List <Integer> result = new ArrayList<>();\r\n+        if(matrix == null || matrix.length == 0)\r\n+            return result;\r\n+        int m = matrix.length,n = matrix[0].length;\r\n+        int top = 0, bottom = m-1,left = 0 , right = n-1;\r\n+        while(top<=bottom && left <= right){\r\n+            for(int j= left; j<=right;j++){\r\n+                result.add(matrix[top][j]);}\r\n+            top ++;\r\n+            for(int i = top; i<=bottom;i++){\r\n+                result.add(matrix[i][right]);}\r\n+            right--;\r\n+            if(top <= bottom){\r\n+                for(int j = right;j>=left;j--){\r\n+                    result.add(matrix[bottom][j]);}\r\n+            }\r\n+                bottom --;\r\n+                if(left <= right){\r\n+                    for(int i = bottom;i>=top;i--){\r\n+                        result.add(matrix[i][left]);   }\r\n+                    \r\n+                }\r\n+                left++;\r\n+            }\r\n+       return result;\r\n+        }\r\n+        \r\n+    }\r"
  }
]
