[
  {
    "sha": "65fc22737ecf47ff43eaf55c4301c5a0c6bf150f",
    "filename": "product-of-array-except-self.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/super30admin/Array-1/blob/36fffd304f1594ddf87a9969991130f9d71c11cb/product-of-array-except-self.java",
    "raw_url": "https://github.com/super30admin/Array-1/raw/36fffd304f1594ddf87a9969991130f9d71c11cb/product-of-array-except-self.java",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/product-of-array-except-self.java?ref=36fffd304f1594ddf87a9969991130f9d71c11cb",
    "patch": "@@ -0,0 +1,25 @@\n+class Solution {\n+    public int[] productExceptSelf(int[] nums) {\n+        \n+        // Check if array is empty\n+        if(nums == null || nums.length == 0) return new int[]{-1,-1};\n+        int length = nums.length -1;\n+        int[] result = new int[nums.length];\n+        int runningProduct = 1 ; \n+        result[0] = 1;\n+        // calculate left product\n+        for(int i =1 ; i <= length ; i++){\n+            runningProduct = runningProduct*nums[i-1];\n+            result[i] = runningProduct;\n+        }\n+        runningProduct = 1;\n+        // calculate right product\n+        for(int i = length-1 ; i>=0 ; i--){\n+            runningProduct = runningProduct * nums[i+1];\n+            result[i] = result[i]*runningProduct;\n+        }\n+        return result;\n+    }\n+}\n+\n+// Time Complexity O(n) , Space Complexity O(1) as we are not using any auxillary data structures"
  }
]
