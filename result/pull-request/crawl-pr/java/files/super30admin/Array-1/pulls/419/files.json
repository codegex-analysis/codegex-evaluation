[
  {
    "sha": "8522c741190728bcabf409af8b5f52c97b703d0f",
    "filename": "diagonal_traverse.py",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/super30admin/Array-1/blob/b526c090ec7ea2aed7e2e1b1e089789f5c9c27a8/diagonal_traverse.py",
    "raw_url": "https://github.com/super30admin/Array-1/raw/b526c090ec7ea2aed7e2e1b1e089789f5c9c27a8/diagonal_traverse.py",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/diagonal_traverse.py?ref=b526c090ec7ea2aed7e2e1b1e089789f5c9c27a8",
    "patch": "@@ -0,0 +1,47 @@\n+# Time Complexity: O(mxn)\r\n+# Space Complexity: O(1)\r\n+class Solution:\r\n+    def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]:\r\n+        result = []\r\n+        if len(matrix) == 0:\r\n+            return result\r\n+        \r\n+        direction = 1\r\n+        m = len(matrix)\r\n+        n = len(matrix[0])\r\n+        \r\n+        i = 0\r\n+        j = 0\r\n+        \r\n+        while(len(result) < m*n):\r\n+            result.append(matrix[i][j])\r\n+            \r\n+            # going up\r\n+            if(direction == 1):\r\n+                # check if reached last column\r\n+                if(j == n-1):\r\n+                    i += 1\r\n+                    direction = -1\r\n+                # check if reached first row\r\n+                elif(i == 0):\r\n+                    j += 1\r\n+                    direction = -1\r\n+                else:\r\n+                    i -= 1 \r\n+                    j += 1\r\n+\r\n+            elif(direction == -1):\r\n+                # check if row reached last row\r\n+                if(i == m-1):\r\n+                    # increase j and move upwards\r\n+                    j += 1\r\n+                    direction = 1\r\n+                # check if reached first column\r\n+                elif(j == 0):\r\n+                    i += 1\r\n+                    direction = 1\r\n+                else:\r\n+                    i += 1\r\n+                    j -= 1\r\n+                    \r\n+        return result\n\\ No newline at end of file"
  },
  {
    "sha": "3a493b54197cdfedeba8a79a1d2f752380ca1a8f",
    "filename": "product_except_self.py",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/super30admin/Array-1/blob/b526c090ec7ea2aed7e2e1b1e089789f5c9c27a8/product_except_self.py",
    "raw_url": "https://github.com/super30admin/Array-1/raw/b526c090ec7ea2aed7e2e1b1e089789f5c9c27a8/product_except_self.py",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/product_except_self.py?ref=b526c090ec7ea2aed7e2e1b1e089789f5c9c27a8",
    "patch": "@@ -0,0 +1,21 @@\n+class Solution:\r\n+    def productExceptSelf(self, nums: List[int]) -> List[int]:\r\n+        output = [1 for _ in range(len(nums))]\r\n+        n = len(nums)\r\n+        # computing left sum\r\n+        running_product = 1\r\n+        for i in range(n-1):\r\n+            if(i==0):\r\n+                output[i] = 1\r\n+                running_product *= nums[i]\r\n+            else:\r\n+                running_product *= nums[i]\r\n+            output[i+1] = running_product\r\n+            \r\n+        #  computing right sum\r\n+        running_product = 1\r\n+        for i in range(n-1,0,-1):\r\n+            running_product *= nums[i]\r\n+            output[i-1] *= running_product\r\n+            \r\n+        return output\n\\ No newline at end of file"
  },
  {
    "sha": "eb33153343f2b17b86fe20d585c1be6ccf19dbc7",
    "filename": "spiral_matrix.py",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/super30admin/Array-1/blob/b526c090ec7ea2aed7e2e1b1e089789f5c9c27a8/spiral_matrix.py",
    "raw_url": "https://github.com/super30admin/Array-1/raw/b526c090ec7ea2aed7e2e1b1e089789f5c9c27a8/spiral_matrix.py",
    "contents_url": "https://api.github.com/repos/super30admin/Array-1/contents/spiral_matrix.py?ref=b526c090ec7ea2aed7e2e1b1e089789f5c9c27a8",
    "patch": "@@ -0,0 +1,48 @@\n+# Time Complexity: O(mxn)\r\n+# Space Complexity: O(1)\r\n+class Solution:\r\n+    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\r\n+        result = []\r\n+        if(len(matrix)==0):\r\n+            return result\r\n+        top = 0\r\n+        bottom = len(matrix)-1\r\n+        left = 0\r\n+        right = len(matrix[0])-1\r\n+        i = 0\r\n+        j = 0\r\n+        \r\n+        \r\n+        while(top<=bottom and left<=right):\r\n+            \r\n+            # move right\r\n+            for p in range(left,right+1):\r\n+                result.append(matrix[top][p])\r\n+                \r\n+            top += 1\r\n+            \r\n+            if(top > bottom):\r\n+                break\r\n+            \r\n+            # move down\r\n+            for q in range(top,bottom+1):\r\n+                result.append(matrix[q][right])\r\n+                \r\n+            right -= 1\r\n+            \r\n+            if(right<left):\r\n+                break\r\n+            \r\n+            # move back left\r\n+            for r in range(right,left-1,-1):\r\n+                result.append(matrix[bottom][r])\r\n+            \r\n+            bottom -= 1\r\n+            \r\n+            # move up\r\n+            for s in range(bottom, top-1, -1):\r\n+                result.append(matrix[s][left])\r\n+            \r\n+            left += 1\r\n+        \r\n+        return result\n\\ No newline at end of file"
  }
]
