[
  {
    "sha": "25ea27cbba2064c1a96fb5471cab821271b00cc5",
    "filename": "HouseRobber.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/super30admin/DP-1/blob/dc22014e570be55f3eeaaa0d594711a1b51efd62/HouseRobber.java",
    "raw_url": "https://github.com/super30admin/DP-1/raw/dc22014e570be55f3eeaaa0d594711a1b51efd62/HouseRobber.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-1/contents/HouseRobber.java?ref=dc22014e570be55f3eeaaa0d594711a1b51efd62",
    "patch": "@@ -0,0 +1,56 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(2n)= O(n) for 2-d array approach; O(1) for temp approach\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : No\n+\n+\n+// Your code here along with comments explaining your approach\n+\n+//2D array Approach\n+class Solution {\n+    public int rob(int[] nums) {\n+        if(nums ==null || nums.length == 0)\n+            return 0;\n+        int n = nums.length; //length of the array  \n+        int m = 2; //choose and dont choose\n+        \n+        int[][] dp = new int[n][m];\n+        \n+        dp[0][0] = nums[0];\n+        dp[0][1] = 0; //starting\n+        \n+        for(int i = 1; i< n; i++){ //c ->0; DC -> 1\n+            for(int j = 0; j < m; j++){\n+                if(j==0){ //Choose option\n+                    dp[i][j] = nums[i] + dp[i-1][1];\n+                }\n+                else\n+                { dp[i][j] = Math.max(dp[i-1][0], dp[i-1][1]);\n+                    \n+                }\n+            }\n+            \n+        }\n+        return Math.max(dp[n-1][0], dp[n-1][1]);\n+    }\n+}\n+\n+//Temp approach\n+/*\n+class Solution {\n+    public int rob(int[] nums) {\n+        if(nums ==null || nums.length == 0)\n+            return 0;\n+        int c = 0, dc = 0;\n+        \n+        for(int i: nums){\n+            int temp = dc;\n+            dc = Math.max(c,dc);\n+            c = i + temp;\n+            \n+        }\n+        \n+        return Math.max(c,dc);\n+    }\n+}\n+*/\n\\ No newline at end of file"
  },
  {
    "sha": "1739a9cbcbab2e211048d4cb09ef2afe514e4081",
    "filename": "Sample.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/super30admin/DP-1/blob/fb24b51227f35d56388f4be6339ccf9f8f2b3b51/Sample.java",
    "raw_url": "https://github.com/super30admin/DP-1/raw/fb24b51227f35d56388f4be6339ccf9f8f2b3b51/Sample.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-1/contents/Sample.java?ref=fb24b51227f35d56388f4be6339ccf9f8f2b3b51",
    "patch": "@@ -1,7 +0,0 @@\n-// Time Complexity :\n-// Space Complexity :\n-// Did this code successfully run on Leetcode :\n-// Any problem you faced while coding this :\n-\n-\n-// Your code here along with comments explaining your approach"
  },
  {
    "sha": "685ba615c1a92db9de72a9cd18b975c0db6c86bc",
    "filename": "coinChange.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/super30admin/DP-1/blob/dc22014e570be55f3eeaaa0d594711a1b51efd62/coinChange.java",
    "raw_url": "https://github.com/super30admin/DP-1/raw/dc22014e570be55f3eeaaa0d594711a1b51efd62/coinChange.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-1/contents/coinChange.java?ref=dc22014e570be55f3eeaaa0d594711a1b51efd62",
    "patch": "@@ -0,0 +1,38 @@\n+// Time Complexity : O(nm)\n+// Space Complexity : O(nm)\n+// Did this code successfully run on Leetcode : Yes\n+// Any problem you faced while coding this : Yes\n+\n+\n+// Your code here along with comments explaining your approach\n+class Solution {\n+    public int coinChange(int[] coins, int amount) {\n+        int n = coins.length + 1;\n+        int m = amount + 1;\n+        int[][] dp = new int[n][m];\n+        \n+        //row\n+        for(int i = 1;i < m; i++){\n+            //dp[0][i] = Integer.MAX_VALUE;\n+            dp[0][i] = 99999;\n+        }\n+        \n+        //column\n+        for(int j=0;j < n;j++){\n+            dp[j][0] = 0;\n+        }\n+        \n+        for(int i = 1;i < n; i++){\n+            for(int j = 0;j < m; j++){\n+                if(j < coins[i - 1]) //coins -> 1,2,3; i -> 0,1,2\n+                    dp[i][j] = dp[i-1][j];\n+                else {\n+                    //min(dc,c)\n+                    dp[i][j] = Math.min(dp[i-1][j], 1 + dp[i][j- coins[i-1]]);\n+                }\n+            }\n+        }\n+        //return dp[n - 1][m - 1];\n+        return dp[n-1][m-1] == 99999 ? -1 : dp[n-1][m-1];\n+    }\n+}\n\\ No newline at end of file"
  }
]
