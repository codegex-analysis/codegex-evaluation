[
  {
    "sha": "399e5159f412f106fbe41a0915048f803488fa08",
    "filename": "CoinsChange.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/super30admin/DP-1/blob/45dd25b4c82fac43270d7faa9e059bdb22856a73/CoinsChange.java",
    "raw_url": "https://github.com/super30admin/DP-1/raw/45dd25b4c82fac43270d7faa9e059bdb22856a73/CoinsChange.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-1/contents/CoinsChange.java?ref=45dd25b4c82fac43270d7faa9e059bdb22856a73",
    "patch": "@@ -0,0 +1,30 @@\n+// Time Complexity : O(n*m)\n+// Space Complexity : O(n*m)\n+// Did this code successfully run on Leetcode : yes\n+// Any problem you faced while coding this : got the integer overflow for default infinity value as Integer.MAX_VALUE\n+// Your code here along with comments explaining your approach\n+\n+\n+class CoinsChange {\n+    public int coinChange(int[] coins, int amount) {\n+        int rows = coins.length+1;\n+        int cols = amount+1;\n+        int[][] compMtrx = new int[rows][cols];\n+        for(int i = 1; i < cols; i++){\n+            compMtrx[0][i] = 99999;\n+        }\n+        for(int i = 0; i < rows; i++){\n+            compMtrx[i][0] = 0;\n+        }\n+        for(int i = 1; i < rows; i++){\n+            for(int j = 1; j < cols; j++){\n+                if(j < coins[i-1]){\n+                    compMtrx[i][j] = compMtrx[i-1][j];\n+                }else{\n+                    compMtrx[i][j] = Math.min((compMtrx[i-1][j]), (1+ compMtrx[i][j-coins[i-1]]));\n+                }\n+            }\n+        }\n+        return compMtrx[rows-1][cols-1] == 99999 ? -1 : compMtrx[rows-1][cols-1];\n+    }\n+}"
  },
  {
    "sha": "a981fc9f6ef3ed92318a7d9dfa4fca78e286e537",
    "filename": "HouseRob.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/super30admin/DP-1/blob/45dd25b4c82fac43270d7faa9e059bdb22856a73/HouseRob.java",
    "raw_url": "https://github.com/super30admin/DP-1/raw/45dd25b4c82fac43270d7faa9e059bdb22856a73/HouseRob.java",
    "contents_url": "https://api.github.com/repos/super30admin/DP-1/contents/HouseRob.java?ref=45dd25b4c82fac43270d7faa9e059bdb22856a73",
    "patch": "@@ -0,0 +1,22 @@\n+// Time Complexity : O(n)\n+// Space Complexity : O(2n) ~ O(n)\n+// Did this code successfully run on Leetcode : yes\n+// Any problem you faced while coding this : choosing the structure of array while problem solving felt like a new learning\n+// Your code here along with comments explaining your approach\n+\n+class HouseRob {\n+    public int rob(int[] nums) {\n+        if(nums != null && nums.length == 0){\n+            return 0;\n+        }\n+        int n = nums.length;\n+        int[][] dp = new int[n][2];\n+        dp[0][0] = nums[0];\n+        dp[0][1] = 0;\n+        for(int i =1; i < n; i++){\n+            dp[i][0] = nums[i] + dp[i-1][1];\n+            dp[i][1] = Math.max(dp[i-1][0], dp[i-1][1]);\n+        }\n+        return Math.max(dp[n-1][0], dp[n-1][1]);\n+    }\n+}\n\\ No newline at end of file"
  }
]
