[
  {
    "sha": "b41ea02393911f1159ef10e5a44f600729e25d6a",
    "filename": "MergeSortedArray.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/super30admin/Two-Pointers-2/blob/24d869b56a522e409fd4699fc2cbee7008d61354/MergeSortedArray.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-2/raw/24d869b56a522e409fd4699fc2cbee7008d61354/MergeSortedArray.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-2/contents/MergeSortedArray.java?ref=24d869b56a522e409fd4699fc2cbee7008d61354",
    "patch": "@@ -0,0 +1,22 @@\n+class Solution {\n+    public void merge(int[] nums1, int m, int[] nums2, int n) {\n+        int p1 = m-1;\n+        int p2 = n-1;\n+\n+        for(int p = m+n-1; p>=0; p--){\n+            if(p2 < 0){\n+                return;\n+            }\n+            if(p1 >= 0 && nums1[p1] > nums2[p2]){\n+                nums1[p] = nums1[p1];\n+                p1--;\n+            }else{\n+                nums1[p] = nums2[p2];\n+                p2--;\n+            }\n+        }\n+    }\n+}\n+\n+//Time Complexity: O(n+m)\n+//Space Complexity: O(1) \n\\ No newline at end of file"
  },
  {
    "sha": "6e7b82f2115c78b7415b4a527b34f7c6b64e3e75",
    "filename": "RemoveDuplicates.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/super30admin/Two-Pointers-2/blob/24d869b56a522e409fd4699fc2cbee7008d61354/RemoveDuplicates.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-2/raw/24d869b56a522e409fd4699fc2cbee7008d61354/RemoveDuplicates.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-2/contents/RemoveDuplicates.java?ref=24d869b56a522e409fd4699fc2cbee7008d61354",
    "patch": "@@ -0,0 +1,38 @@\n+class Solution {\n+    public int removeDuplicates(int[] nums) {\n+\n+        // edge case\n+        if (nums == null || nums.length == 0) {\n+            return 0;\n+        }\n+\n+        // Initializing the slow and count to 1 as the fisrt element is occured only\n+        // once till now in the array, we dont consider it\n+        int count = 1;\n+        int slow = 1;\n+\n+        // Iterating the array with fast pointer\n+        // if the present value at fast value is equal to previous value then increment\n+        // the counter\n+        // else set counter to 1 as we encounterd a new value\n+        // check if the counter is less than or equal to 2\n+        // then copy the values at fast pointer to solw pointers location and increment\n+        // slow pointer\n+        for (int fast = 1; fast < nums.length; fast++) {\n+            if (nums[fast] == nums[fast - 1]) {\n+                count++;\n+            } else {\n+                count = 1;\n+            }\n+            if (count <= 2) {\n+                nums[slow] = nums[fast];\n+                slow++;\n+            }\n+        }\n+        // return slow pointer index\n+        return slow;\n+    }\n+}\n+\n+// Time Complexity :O(n)\n+// Space Complexity : O(1)\n\\ No newline at end of file"
  },
  {
    "sha": "f84e47f561037c7afb67a5796dc4db64fb40ae7f",
    "filename": "SearchIn2DMatrixII.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/super30admin/Two-Pointers-2/blob/24d869b56a522e409fd4699fc2cbee7008d61354/SearchIn2DMatrixII.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-2/raw/24d869b56a522e409fd4699fc2cbee7008d61354/SearchIn2DMatrixII.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-2/contents/SearchIn2DMatrixII.java?ref=24d869b56a522e409fd4699fc2cbee7008d61354",
    "patch": "@@ -0,0 +1,29 @@\n+class Solution {\n+    public boolean searchMatrix(int[][] matrix, int target) {\n+        int row = matrix.length;\n+        int column = matrix[0].length;\n+\n+        // Initializing my pointer to first row's last column\n+        // if the value at the pointer greater than target then increment row\n+        // if it is less than target then decrement column\n+        // else if the element is found return true\n+        int r = 0;\n+        int c = column - 1;\n+\n+        while (r < row && c >= 0) {\n+            if (matrix[r][c] == target) {\n+                return true;\n+            } else if (target < matrix[r][c]) {\n+                c--;\n+            } else {\n+                r++;\n+            }\n+        }\n+\n+        // If elemt is not found in the matrix return false\n+        return false;\n+    }\n+}\n+\n+// Time Complexity : O(m*n);\n+// Space Complexity: O(1)\n\\ No newline at end of file"
  }
]
