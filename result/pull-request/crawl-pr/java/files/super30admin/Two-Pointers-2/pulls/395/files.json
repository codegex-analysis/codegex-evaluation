[
  {
    "sha": "0cc015d9e4f0abbd325182f6f4b085f232a80bc7",
    "filename": "Merge Sorted array.py",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Two-Pointers-2/blob/87ac66061ac7212fe3b826179ea5e57bfabbafc1/Merge%20Sorted%20array.py",
    "raw_url": "https://github.com/super30admin/Two-Pointers-2/raw/87ac66061ac7212fe3b826179ea5e57bfabbafc1/Merge%20Sorted%20array.py",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-2/contents/Merge%20Sorted%20array.py?ref=87ac66061ac7212fe3b826179ea5e57bfabbafc1",
    "patch": "@@ -0,0 +1,24 @@\n+# Time Complexity:O(m+n)\n+# Space Complexity: O(1)\n+class Solution:\n+    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n+        p1 = m - 1\n+        p2 = n - 1\n+        high = (m + n) - 1\n+        while p1 >= 0 and p2 >= 0:\n+            if nums1[p1] >= nums2[p2]:\n+                nums1[high] = nums1[p1]\n+                p1 -= 1\n+                high -= 1\n+            else:\n+                nums1[high] = nums2[p2]\n+                p2 -= 1\n+                high -= 1\n+        while p2 >= 0:\n+            nums1[high] = nums2[p2]\n+            p2 -= 1\n+            high -= 1\n+\n+        \"\"\"\n+        Do not return anything, modify nums1 in-place instead.\n+        \"\"\"\n\\ No newline at end of file"
  },
  {
    "sha": "e40642026c85858b11ddffe88e09dcc9afb31f96",
    "filename": "Remove Duplicates from sorted array.py",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/super30admin/Two-Pointers-2/blob/87ac66061ac7212fe3b826179ea5e57bfabbafc1/Remove%20Duplicates%20from%20sorted%20array.py",
    "raw_url": "https://github.com/super30admin/Two-Pointers-2/raw/87ac66061ac7212fe3b826179ea5e57bfabbafc1/Remove%20Duplicates%20from%20sorted%20array.py",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-2/contents/Remove%20Duplicates%20from%20sorted%20array.py?ref=87ac66061ac7212fe3b826179ea5e57bfabbafc1",
    "patch": "@@ -0,0 +1,18 @@\n+# Time Complexity: O(n)\n+# Space Complexity: O(1)\n+class Solution:\n+    def removeDuplicates(self, nums: List[int]) -> int:\n+        s = 1\n+        f = 1\n+        count = 1\n+        for i in range(1, len(nums)):\n+            if nums[i] == nums[i - 1]:\n+                count += 1\n+            else:\n+                count = 1\n+\n+            if count <= 2:\n+                nums[f] = nums[i]\n+                f += 1\n+\n+        return f\n\\ No newline at end of file"
  },
  {
    "sha": "2908e43da0d3dfd51dd41713a11e061fe0f430c6",
    "filename": "Search in a 2D matrix II.py",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/super30admin/Two-Pointers-2/blob/87ac66061ac7212fe3b826179ea5e57bfabbafc1/Search%20in%20a%202D%20matrix%20II.py",
    "raw_url": "https://github.com/super30admin/Two-Pointers-2/raw/87ac66061ac7212fe3b826179ea5e57bfabbafc1/Search%20in%20a%202D%20matrix%20II.py",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-2/contents/Search%20in%20a%202D%20matrix%20II.py?ref=87ac66061ac7212fe3b826179ea5e57bfabbafc1",
    "patch": "@@ -0,0 +1,17 @@\n+# Time Complexity: O(m+n)\n+# Space Complexity: O(1)\n+class Solution:\n+    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n+        m = len(matrix)\n+        n = len(matrix[0])\n+        if m==0 and n==0:\n+            return False\n+        r = m - 1\n+        c = 0\n+        while(r>=0 and c <n):\n+            if target > matrix[r][c]:\n+                c += 1\n+            elif target < matrix[r][c]:\n+                r -= 1\n+            else:\n+                return True"
  }
]
