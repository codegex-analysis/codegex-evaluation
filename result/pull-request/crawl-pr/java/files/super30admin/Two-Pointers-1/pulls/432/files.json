[
  {
    "sha": "d22fe20d388cb7993c121ab248a52298620b7219",
    "filename": "3Sum.py",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/351a9dd85bf7f73dc91fd76747416432ab1f1df9/3Sum.py",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/351a9dd85bf7f73dc91fd76747416432ab1f1df9/3Sum.py",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/3Sum.py?ref=351a9dd85bf7f73dc91fd76747416432ab1f1df9",
    "patch": "@@ -0,0 +1,36 @@\n+class Solution:\n+    def threeSum(self, nums: List[int]) -> List[List[int]]:\n+        nums.sort()\n+        res = []\n+        for i in range(len(nums) - 2):\n+            low = i + 1\n+            high = len(nums) - 1\n+            # Ignore if current i is same as previous i\n+            if i>0 and nums[i] == nums[i-1]:\n+                    continue\n+            # Since array is sorted if we can exit if we reach a number greater than 0\n+            if nums[i] > 0:\n+                    break\n+                    \n+            while low < high:\n+                # If sum is less than 0 move low ahead\n+                # If sum is more than 0 move high behind\n+                # If sum is 0, append it to res\n+                s = nums[i] + nums[low] + nums[high]\n+                \n+                if s == 0:\n+                    if [nums[i], nums[low], nums[high]] not in res:\n+                        res.append([nums[i], nums[low], nums[high]])\n+                    low += 1\n+                    high -= 1\n+                    # Handling repetitive values\n+                    while nums[low] == nums[low-1] and low<high:\n+                        low += 1\n+                    while nums[high] == nums[high+1] and low<high:\n+                        high -= 1\n+                        \n+                elif s < 0:\n+                    low += 1\n+                else:\n+                    high -= 1\n+        return res\n\\ No newline at end of file"
  },
  {
    "sha": "af2a14facf15b6d22f70e971c2d54ff93e00d09c",
    "filename": "ContainerWithMostWater.py",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/351a9dd85bf7f73dc91fd76747416432ab1f1df9/ContainerWithMostWater.py",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/351a9dd85bf7f73dc91fd76747416432ab1f1df9/ContainerWithMostWater.py",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/ContainerWithMostWater.py?ref=351a9dd85bf7f73dc91fd76747416432ab1f1df9",
    "patch": "@@ -0,0 +1,19 @@\n+class Solution:\n+    def maxArea(self, height: List[int]) -> int:\n+        \"\"\"\n+        Compare areas\n+        low starts at 0, high starts at len(height)-1\n+        \"\"\"\n+        low = 0\n+        high = len(height) - 1\n+        maximum = 0\n+        while low < high:\n+            length = high - low\n+            breadth = min(height[low], height[high])\n+            maximum = max(maximum, length*breadth)\n+            \n+            if height[low] < height[high]:\n+                low += 1\n+            else:\n+                high -= 1\n+        return maximum\n\\ No newline at end of file"
  },
  {
    "sha": "9bbf1d88c581290432d7c8d2b564ae3e78902f1a",
    "filename": "SortColors.py",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/351a9dd85bf7f73dc91fd76747416432ab1f1df9/SortColors.py",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/351a9dd85bf7f73dc91fd76747416432ab1f1df9/SortColors.py",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/SortColors.py?ref=351a9dd85bf7f73dc91fd76747416432ab1f1df9",
    "patch": "@@ -0,0 +1,25 @@\n+class Solution:\n+    def sortColors(self, nums: List[int]) -> None:\n+        \"\"\"\n+        Solved using 3 pointers\n+        \n+        low starts at 0, mid at 0\n+        high starts at len(nums) - 1\n+        \n+        low is used to put 0's at front, high is used to put 2's at end\n+        \"\"\"\n+        low = 0\n+        mid = 0\n+        high = len(nums) - 1\n+        \n+        while mid <= high:\n+            if nums[mid] == 2:\n+                nums[mid], nums[high] = nums[high], nums[mid]\n+                high -= 1\n+            elif nums[mid] == 0:\n+                nums[mid], nums[low] = nums[low], nums[mid]\n+                low += 1\n+                mid += 1\n+            elif nums[mid] == 1:\n+                mid += 1\n+        return nums\n\\ No newline at end of file"
  }
]
