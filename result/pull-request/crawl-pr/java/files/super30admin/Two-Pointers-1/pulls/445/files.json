[
  {
    "sha": "4de2c26817fc2eaa1d10e444267615533f2378d9",
    "filename": "3Sum.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/85c07a20170a4c274e0c45b9a2fa804642d98df7/3Sum.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/85c07a20170a4c274e0c45b9a2fa804642d98df7/3Sum.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/3Sum.java?ref=85c07a20170a4c274e0c45b9a2fa804642d98df7",
    "patch": "@@ -0,0 +1,53 @@\n+class Solution {\n+    public List<List<Integer>> threeSum(int[] nums) {\n+\n+        List<List<Integer>> result = new ArrayList<>();\n+\n+        if (nums == null || nums.length == 0) {\n+            return result;\n+        }\n+\n+        // Sorting an array\n+        Arrays.sort(nums);\n+\n+        for (int i = 0; i < nums.length - 2; i++) {\n+            // handle repetation outside the loop\n+            if (i > 0 && nums[i] == nums[i - 1]) {\n+                continue;\n+            }\n+\n+            int low = i + 1;\n+            int high = nums.length - 1;\n+\n+            while (low < high) {\n+                int sum = nums[i] + nums[low] + nums[high];\n+\n+                // if sum is equal to 0 then add the triplet to list\n+                if (sum == 0) {\n+                    List<Integer> list = Arrays.asList(nums[i], nums[low], nums[high]);\n+                    result.add(list);\n+                    low++;\n+                    high--;\n+                    // handling repetation inside the loop\n+                    while (low < high && nums[low] == nums[low - 1]) {\n+                        low++;\n+                    }\n+                    while (low < high && nums[high] == nums[high + 1]) {\n+                        high--;\n+                    }\n+                } else if (sum < 0) { // if sum is less than 0 then move the low pointer\n+                    low++;\n+                } else { // if sum is greater than 0 then move high pointer to left\n+                    high--;\n+                }\n+\n+            }\n+        }\n+\n+        // return the result list\n+        return result;\n+    }\n+}\n+\n+// Time Complexity: O(n^2)\n+// Space Complexity: O(1)"
  },
  {
    "sha": "d34a604d90cd0a6f268f81fcb3d33979175f6a3c",
    "filename": "ContainerWithMostWater.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/85c07a20170a4c274e0c45b9a2fa804642d98df7/ContainerWithMostWater.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/85c07a20170a4c274e0c45b9a2fa804642d98df7/ContainerWithMostWater.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/ContainerWithMostWater.java?ref=85c07a20170a4c274e0c45b9a2fa804642d98df7",
    "patch": "@@ -0,0 +1,27 @@\n+class Solution {\n+    public int maxArea(int[] height) {\n+        int left = 0;\n+        int right = height.length - 1;\n+\n+        int max = Integer.MIN_VALUE;\n+\n+        // Using 2 pointer approach\n+        while (left < right) {\n+            // finding max value og container\n+            max = Math.max(max, Math.min(height[left], height[right]) * (right - left));\n+\n+            // if height of left is less then move left pointer to right\n+            // else move right pointer to left\n+            if (height[left] < height[right]) {\n+                left++;\n+            } else {\n+                right--;\n+            }\n+        }\n+        // return the max value a container can store.\n+        return max;\n+    }\n+}\n+\n+// Time Complexity : O(n)\n+// Space Complexity: O(1)\n\\ No newline at end of file"
  },
  {
    "sha": "e7eaad1ded41d4dc021eb95d6eef309fcf5bcf2b",
    "filename": "SortColors.java",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/85c07a20170a4c274e0c45b9a2fa804642d98df7/SortColors.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/85c07a20170a4c274e0c45b9a2fa804642d98df7/SortColors.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/SortColors.java?ref=85c07a20170a4c274e0c45b9a2fa804642d98df7",
    "patch": "@@ -0,0 +1,61 @@\n+class Solution {\n+    public void sortColors(int[] nums) {\n+      \n+        int left = 0;\n+        int right = nums.length - 1;\n+        int cur = 0;\n+        \n+        while(cur <= right ){\n+            //moving 0's to wards left\n+            if(nums[cur] == 0){\n+                swap(nums, cur, left);\n+                cur++;\n+                left++;\n+            }else if(nums[cur] == 2){ //moving 2's towards right\n+                swap(nums, cur, right);\n+                right--;\n+            }else{\n+                cur++;\n+            }\n+        }\n+    }\n+    \n+    public static void swap(int[] nums, int i, int j){\n+            int temp = nums[i];\n+            nums[i] = nums[j];\n+            nums[j] = temp;\n+        }\n+}\n+//Time Complexity : O(n)\n+//Space Complexity: O(1)\n+\n+\n+/* Brute Force Solution : Counting number of 0's, 1's and 2's*/\n+// class Solution {\n+//     public void sortColors(int[] nums) {\n+//         int ones = 0;\n+//         int twos = 0;\n+//         int zeros = 0;\n+//         for(int i = 0; i < nums.length; i++){\n+//             if(nums[i] == 0){\n+//                 zeros++;\n+//             }else if(nums[i] == 1){\n+//                 ones++;\n+//             } else if(nums[i] == 2){\n+//                 twos++;\n+//             }\n+//         }\n+        \n+//         for(int i = 0; i < nums.length; i++){\n+//             if(zeros > 0){\n+//                 nums[i] = 0;\n+//                 zeros--;\n+//             }else if( ones > 0){\n+//                 nums[i] = 1;\n+//                 ones--;\n+//             }else{\n+//                 nums[i] = 2;\n+//             }\n+//         }\n+//     }\n+// }\n\\ No newline at end of file"
  }
]
