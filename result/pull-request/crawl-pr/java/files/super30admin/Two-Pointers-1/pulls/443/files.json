[
  {
    "sha": "1ca4381398098a74db65bdc6474f466fa770e186",
    "filename": "prob34.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/e79fc7ddb67e8709c1ddfb0e3eca1d37ba1cc4fc/prob34.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/e79fc7ddb67e8709c1ddfb0e3eca1d37ba1cc4fc/prob34.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/prob34.java?ref=e79fc7ddb67e8709c1ddfb0e3eca1d37ba1cc4fc",
    "patch": "@@ -0,0 +1,36 @@\n+//Tc: O(n);\n+//sc:o(n);\n+\n+\n+class Solution {\n+    public void sortColors(int[] nums) {\n+        if(nums== null || nums.length == 0)\n+            return;\n+        int low=0;\n+        int mid=0;\n+        int high = nums.length-1;\n+        while(mid<=high)\n+        {\n+            if(nums[mid] == 0){\n+                swap(nums, mid, low);\n+                low++;\n+                mid++;\n+            }\n+            else if(nums[mid] == 2){\n+                swap (nums,mid,high);\n+                high--;\n+                \n+            }\n+            else{\n+                mid++;\n+            }\n+        }\n+        \n+    }\n+    \n+    private void swap(int[] nums, int i, int j){\n+        int temp = nums[i];\n+        nums[i] = nums[j];\n+        nums[j] =temp;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0cb0a28c924502bf6b63a6b662a835afb7075df1",
    "filename": "prob35.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/e79fc7ddb67e8709c1ddfb0e3eca1d37ba1cc4fc/prob35.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/e79fc7ddb67e8709c1ddfb0e3eca1d37ba1cc4fc/prob35.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/prob35.java?ref=e79fc7ddb67e8709c1ddfb0e3eca1d37ba1cc4fc",
    "patch": "@@ -0,0 +1,32 @@\n+class Solution {\n+    public List<List<Integer>> threeSum(int[] nums) {\n+        Arrays.sort(nums);\n+        List<List<Integer>> op_array = new LinkedList();\n+        \n+        for(int i =0 ; i< nums.length-2; i++){\n+            if(i == 0 ||( i > 0 && nums[i] != nums[i-1])){\n+                int low = i+1;\n+                int high = nums.length -1;\n+                int sum = 0 -nums[i];\n+                \n+                while(low<high){\n+                    if(nums[low] + nums[high] == sum){\n+                        op_array.add(Arrays.asList(nums[i], nums[low], nums[high]));\n+                        while(low<high && nums[low] == nums[low+1]) low++;\n+                        while(low<high && nums[high] == nums[high-1]) high--;\n+                        low++;\n+                        high--;\n+                        \n+                    }\n+                    else if(nums[low] + nums[high] > sum){\n+                        high--;\n+                    }\n+                    else{\n+                        low++;\n+                    }\n+                }\n+            }\n+        }\n+        return op_array;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "64219a6dab2590178eea996bca8f2d37911d846c",
    "filename": "prob36.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/e79fc7ddb67e8709c1ddfb0e3eca1d37ba1cc4fc/prob36.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/e79fc7ddb67e8709c1ddfb0e3eca1d37ba1cc4fc/prob36.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/prob36.java?ref=e79fc7ddb67e8709c1ddfb0e3eca1d37ba1cc4fc",
    "patch": "@@ -0,0 +1,24 @@\n+TC//O(n);\n+SC//O(n);\n+\n+\n+class Solution {\n+    public int maxArea(int[] height) {\n+        if(height == null || height.length == 0)\n+            return 0;\n+        int max = 0;\n+        int low = 0;\n+        int high= height.length-1;\n+        while(low< high){\n+            max = Math.max(max, Math.min(height[low], height[high]) * (high-low));\n+        \n+        if(height[low] <= height[high]){\n+            low++;\n+        }\n+        else{\n+            high--;\n+        }\n+        }\n+    return max;\n+    }\n+}\n\\ No newline at end of file"
  }
]
