[
  {
    "sha": "72db7d16a0858a910afd1c6c7b8ddd9ac84ea9f4",
    "filename": "p1.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/523959b7b51a43dc78d8d8d9aa9daa6c390c1ca2/p1.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/523959b7b51a43dc78d8d8d9aa9daa6c390c1ca2/p1.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/p1.java?ref=523959b7b51a43dc78d8d8d9aa9daa6c390c1ca2",
    "patch": "@@ -0,0 +1,22 @@\n+// Time Complexity :O(n)\r\n+// Space Complexity :O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+class Solution {\r\n+    public int maxArea(int[] height) {\r\n+        if(height == null || height.length == 0)\r\n+            return 0;\r\n+        int max = 0, low = 0,high = height.length -1;\r\n+        while(low<high){\r\n+            max = Math.max(max,Math.min(height[low],height[high])*(high-low));\r\n+            if(height[low]<height[high])    low++;\r\n+            else high--;\r\n+            \r\n+        }\r\n+        return max;\r\n+        \r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6d41d1a6f6a5f42b73fcfecd947507423d12b11d",
    "filename": "p2.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/523959b7b51a43dc78d8d8d9aa9daa6c390c1ca2/p2.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/523959b7b51a43dc78d8d8d9aa9daa6c390c1ca2/p2.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/p2.java?ref=523959b7b51a43dc78d8d8d9aa9daa6c390c1ca2",
    "patch": "@@ -0,0 +1,32 @@\n+// Time Complexity :O(n)\r\n+// Space Complexity :O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+class Solution {\r\n+    public void sortColors(int[] nums) {\r\n+        if(nums == null || nums.length == 0) return;\r\n+        int low = 0, mid = 0, high = nums.length - 1;\r\n+        while(mid<=high){\r\n+            if(nums[mid] == 0){\r\n+                swap(nums,mid,low);\r\n+                low++;mid++;\r\n+            }\r\n+            else if(nums[mid] == 2){\r\n+                swap(nums,mid,high);\r\n+                 high--;\r\n+            }\r\n+            else  mid++;\r\n+        }\r\n+        \r\n+    }\r\n+    \r\n+    private void swap(int[] nums,int i,int j ){\r\n+        if(i!=j){\r\n+        nums[i] = nums[i]+nums[j];\r\n+        nums[j] = nums[i]-nums[j];\r\n+        nums[i] = nums[i]-nums[j];}\r\n+    }\r\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "00b01bab13fa5e1df038a6d405eda5b87b8e8144",
    "filename": "p3.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/super30admin/Two-Pointers-1/blob/523959b7b51a43dc78d8d8d9aa9daa6c390c1ca2/p3.java",
    "raw_url": "https://github.com/super30admin/Two-Pointers-1/raw/523959b7b51a43dc78d8d8d9aa9daa6c390c1ca2/p3.java",
    "contents_url": "https://api.github.com/repos/super30admin/Two-Pointers-1/contents/p3.java?ref=523959b7b51a43dc78d8d8d9aa9daa6c390c1ca2",
    "patch": "@@ -0,0 +1,38 @@\n+// Time Complexity :O(n)\r\n+// Space Complexity :O(1)\r\n+// Did this code successfully run on Leetcode :\r\n+// Any problem you faced while coding this :\r\n+\r\n+\r\n+// Your code here along with comments explaining your approach\r\n+class Solution {\r\n+    public List<List<Integer>> threeSum(int[] nums) {\r\n+        List<List<Integer>> result = new ArrayList<>();\r\n+        if(nums == null || nums.length == 0){\r\n+            return result;\r\n+        }\r\n+        Arrays.sort(nums);\r\n+        for(int i=0;i<nums.length-2;i++){\r\n+            if(i>0 && nums[i] == nums[i-1]){continue;}\r\n+            int low = i+1, high = nums.length - 1;\r\n+            while(low<high){\r\n+                int sum = nums[i]+nums[low]+nums[high];\r\n+                if(sum == 0){\r\n+                    List<Integer> list1 = Arrays.asList(nums[i],nums[high],nums[low]);\r\n+                    result.add(list1);\r\n+                    low++; high--;\r\n+                    while(low<high && nums[low] == nums[low-1]){\r\n+                        low++;\r\n+                    }\r\n+                    while(low<high && nums[high] == nums[high+1]){\r\n+                        high--;\r\n+                    }\r\n+                }\r\n+                else if(sum<0) low++;\r\n+                else if(sum>0) high--;\r\n+                \r\n+            }\r\n+        }\r\n+        return result;\r\n+    }\r\n+}\n\\ No newline at end of file"
  }
]
