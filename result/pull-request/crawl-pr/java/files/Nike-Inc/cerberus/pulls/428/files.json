[
  {
    "sha": "5c62f9c88984cb8ea1e7fa5ebecb2c5db544f595",
    "filename": "cerberus-core/src/main/java/com/nike/cerberus/security/CerberusPrincipal.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-core/src/main/java/com/nike/cerberus/security/CerberusPrincipal.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-core/src/main/java/com/nike/cerberus/security/CerberusPrincipal.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-core/src/main/java/com/nike/cerberus/security/CerberusPrincipal.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -87,6 +87,10 @@ public String getToken() {\n     return cerberusAuthToken.getToken();\n   }\n \n+  public String getTokenId() {\n+    return cerberusAuthToken.getId();\n+  }\n+\n   public Set<String> getUserGroups() {\n     if (cerberusAuthToken.getGroups() == null) {\n       return new HashSet<>();"
  },
  {
    "sha": "9dfb97a8e9e610ab986b36c40c29adb68af43208",
    "filename": "cerberus-dashboard/package-lock.json",
    "status": "modified",
    "additions": 68,
    "deletions": 98,
    "changes": 166,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-dashboard/package-lock.json",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-dashboard/package-lock.json",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-dashboard/package-lock.json?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -5665,17 +5665,6 @@\n         }\n       }\n     },\n-    \"clone-deep\": {\n-      \"version\": \"4.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/clone-deep/-/clone-deep-4.0.1.tgz\",\n-      \"integrity\": \"sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"is-plain-object\": \"^2.0.4\",\n-        \"kind-of\": \"^6.0.2\",\n-        \"shallow-clone\": \"^3.0.0\"\n-      }\n-    },\n     \"co\": {\n       \"version\": \"4.6.0\",\n       \"resolved\": \"https://registry.npmjs.org/co/-/co-4.6.0.tgz\",\n@@ -7170,24 +7159,6 @@\n       \"integrity\": \"sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=\",\n       \"dev\": true\n     },\n-    \"encoding\": {\n-      \"version\": \"0.1.13\",\n-      \"resolved\": \"https://registry.npmjs.org/encoding/-/encoding-0.1.13.tgz\",\n-      \"integrity\": \"sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==\",\n-      \"requires\": {\n-        \"iconv-lite\": \"^0.6.2\"\n-      },\n-      \"dependencies\": {\n-        \"iconv-lite\": {\n-          \"version\": \"0.6.2\",\n-          \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.2.tgz\",\n-          \"integrity\": \"sha512-2y91h5OpQlolefMPmUlivelittSWy0rP+oYVpn6A7GwVHNE8AWzoYOBNmlwks3LobaJxgHCYZAnyNo2GgpNRNQ==\",\n-          \"requires\": {\n-            \"safer-buffer\": \">= 2.1.2 < 3.0.0\"\n-          }\n-        }\n-      }\n-    },\n     \"end-of-stream\": {\n       \"version\": \"1.4.4\",\n       \"resolved\": \"https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz\",\n@@ -8796,15 +8767,6 @@\n         \"reusify\": \"^1.0.4\"\n       }\n     },\n-    \"faye-websocket\": {\n-      \"version\": \"0.10.0\",\n-      \"resolved\": \"https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.10.0.tgz\",\n-      \"integrity\": \"sha1-TkkvjQTftviQA1B/btvy1QHnxvQ=\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"websocket-driver\": \">=0.5.1\"\n-      }\n-    },\n     \"fb-watchman\": {\n       \"version\": \"2.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.1.tgz\",\n@@ -10570,7 +10532,8 @@\n     \"is-stream\": {\n       \"version\": \"1.1.0\",\n       \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz\",\n-      \"integrity\": \"sha1-EtSj3U5o4Lec6428hBc66A2RykQ=\"\n+      \"integrity\": \"sha1-EtSj3U5o4Lec6428hBc66A2RykQ=\",\n+      \"dev\": true\n     },\n     \"is-string\": {\n       \"version\": \"1.0.5\",\n@@ -10643,6 +10606,13 @@\n       \"requires\": {\n         \"node-fetch\": \"^1.0.1\",\n         \"whatwg-fetch\": \">=0.10.0\"\n+      },\n+      \"dependencies\": {\n+        \"node-fetch\": {\n+          \"version\": \"2.6.1\",\n+          \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.1.tgz\",\n+          \"integrity\": \"sha512-V4aYg89jEoVRxRb2fJdAg8FHvI7cEyYdVAh94HH0UIK8oJxUfkjlDQN9RbMx+bEjP7+ggMiFRprSti032Oipxw==\"\n+        }\n       }\n     },\n     \"isstream\": {\n@@ -12940,6 +12910,12 @@\n       \"integrity\": \"sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==\",\n       \"dev\": true\n     },\n+    \"klona\": {\n+      \"version\": \"2.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/klona/-/klona-2.0.4.tgz\",\n+      \"integrity\": \"sha512-ZRbnvdg/NxqzC7L9Uyqzf4psi1OM4Cuc+sJAkQPjO6XkQIJTNbfK2Rsmbw8fx1p2mkZdp2FZYo2+LwXYY/uwIA==\",\n+      \"dev\": true\n+    },\n     \"koa\": {\n       \"version\": \"2.13.0\",\n       \"resolved\": \"https://registry.npmjs.org/koa/-/koa-2.13.0.tgz\",\n@@ -13918,15 +13894,6 @@\n         }\n       }\n     },\n-    \"node-fetch\": {\n-      \"version\": \"1.7.3\",\n-      \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-1.7.3.tgz\",\n-      \"integrity\": \"sha512-NhZ4CsKx7cYm2vSrBAr2PvFOe6sWDf0UYLRqA6svUYg7+/TSfVAu49jYC4BvQ4Sms9SZgdqGBgroqfDhJdTyKQ==\",\n-      \"requires\": {\n-        \"encoding\": \"^0.1.11\",\n-        \"is-stream\": \"^1.0.1\"\n-      }\n-    },\n     \"node-forge\": {\n       \"version\": \"0.10.0\",\n       \"resolved\": \"https://registry.npmjs.org/node-forge/-/node-forge-0.10.0.tgz\",\n@@ -17006,6 +16973,18 @@\n         \"workbox-webpack-plugin\": \"5.1.4\"\n       },\n       \"dependencies\": {\n+        \"ajv\": {\n+          \"version\": \"6.12.6\",\n+          \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz\",\n+          \"integrity\": \"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"fast-deep-equal\": \"^3.1.1\",\n+            \"fast-json-stable-stringify\": \"^2.0.0\",\n+            \"json-schema-traverse\": \"^0.4.1\",\n+            \"uri-js\": \"^4.2.2\"\n+          }\n+        },\n         \"camelcase\": {\n           \"version\": \"6.2.0\",\n           \"resolved\": \"https://registry.npmjs.org/camelcase/-/camelcase-6.2.0.tgz\",\n@@ -17049,6 +17028,12 @@\n             }\n           }\n         },\n+        \"neo-async\": {\n+          \"version\": \"2.6.2\",\n+          \"resolved\": \"https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz\",\n+          \"integrity\": \"sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==\",\n+          \"dev\": true\n+        },\n         \"resolve\": {\n           \"version\": \"1.18.1\",\n           \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.18.1.tgz\",\n@@ -17059,6 +17044,30 @@\n             \"path-parse\": \"^1.0.6\"\n           }\n         },\n+        \"sass-loader\": {\n+          \"version\": \"10.0.5\",\n+          \"resolved\": \"https://registry.npmjs.org/sass-loader/-/sass-loader-10.0.5.tgz\",\n+          \"integrity\": \"sha512-2LqoNPtKkZq/XbXNQ4C64GFEleSEHKv6NPSI+bMC/l+jpEXGJhiRYkAQToO24MR7NU4JRY2RpLpJ/gjo2Uf13w==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"klona\": \"^2.0.4\",\n+            \"loader-utils\": \"^2.0.0\",\n+            \"neo-async\": \"^2.6.2\",\n+            \"schema-utils\": \"^3.0.0\",\n+            \"semver\": \"^7.3.2\"\n+          }\n+        },\n+        \"schema-utils\": {\n+          \"version\": \"3.0.0\",\n+          \"resolved\": \"https://registry.npmjs.org/schema-utils/-/schema-utils-3.0.0.tgz\",\n+          \"integrity\": \"sha512-6D82/xSzO094ajanoOSbe4YvXWMfn2A//8Y1+MUqFAJul5Bs+yn36xbK9OtNDcRVSBJ9jjeoXftM6CfztsjOAA==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"@types/json-schema\": \"^7.0.6\",\n+            \"ajv\": \"^6.12.5\",\n+            \"ajv-keywords\": \"^3.5.2\"\n+          }\n+        },\n         \"semver\": {\n           \"version\": \"7.3.2\",\n           \"resolved\": \"https://registry.npmjs.org/semver/-/semver-7.3.2.tgz\",\n@@ -18124,47 +18133,6 @@\n         }\n       }\n     },\n-    \"sass-loader\": {\n-      \"version\": \"8.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/sass-loader/-/sass-loader-8.0.2.tgz\",\n-      \"integrity\": \"sha512-7o4dbSK8/Ol2KflEmSco4jTjQoV988bM82P9CZdmo9hR3RLnvNc0ufMNdMrB0caq38JQ/FgF4/7RcbcfKzxoFQ==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"clone-deep\": \"^4.0.1\",\n-        \"loader-utils\": \"^1.2.3\",\n-        \"neo-async\": \"^2.6.1\",\n-        \"schema-utils\": \"^2.6.1\",\n-        \"semver\": \"^6.3.0\"\n-      },\n-      \"dependencies\": {\n-        \"json5\": {\n-          \"version\": \"1.0.1\",\n-          \"resolved\": \"https://registry.npmjs.org/json5/-/json5-1.0.1.tgz\",\n-          \"integrity\": \"sha512-aKS4WQjPenRxiQsC93MNfjx+nbF4PAdYzmd/1JIj8HYzqfbu86beTuNgXDzPknWk0n0uARlyewZo4s++ES36Ow==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"minimist\": \"^1.2.0\"\n-          }\n-        },\n-        \"loader-utils\": {\n-          \"version\": \"1.4.0\",\n-          \"resolved\": \"https://registry.npmjs.org/loader-utils/-/loader-utils-1.4.0.tgz\",\n-          \"integrity\": \"sha512-qH0WSMBtn/oHuwjy/NucEgbx5dbxxnxup9s4PVXJUDHZBQY+s0NWA9rJf53RBnQZxfch7euUui7hpoAPvALZdA==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"big.js\": \"^5.2.2\",\n-            \"emojis-list\": \"^3.0.0\",\n-            \"json5\": \"^1.0.1\"\n-          }\n-        },\n-        \"semver\": {\n-          \"version\": \"6.3.0\",\n-          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.0.tgz\",\n-          \"integrity\": \"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\",\n-          \"dev\": true\n-        }\n-      }\n-    },\n     \"sax\": {\n       \"version\": \"1.2.4\",\n       \"resolved\": \"https://registry.npmjs.org/sax/-/sax-1.2.4.tgz\",\n@@ -18400,15 +18368,6 @@\n         \"safe-buffer\": \"^5.0.1\"\n       }\n     },\n-    \"shallow-clone\": {\n-      \"version\": \"3.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/shallow-clone/-/shallow-clone-3.0.1.tgz\",\n-      \"integrity\": \"sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"kind-of\": \"^6.0.2\"\n-      }\n-    },\n     \"shebang-command\": {\n       \"version\": \"1.2.0\",\n       \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz\",\n@@ -18677,6 +18636,17 @@\n         \"faye-websocket\": \"^0.10.0\",\n         \"uuid\": \"^3.4.0\",\n         \"websocket-driver\": \"0.6.5\"\n+      },\n+      \"dependencies\": {\n+        \"faye-websocket\": {\n+          \"version\": \"0.11.3\",\n+          \"resolved\": \"https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.3.tgz\",\n+          \"integrity\": \"sha512-D2y4bovYpzziGgbHYtGCMjlJM36vAl/y+xUyn1C+FVx8szd1E+86KwVw6XvYSzOP8iMpm1X0I4xJD+QtUb36OA==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"websocket-driver\": \">=0.5.1\"\n+          }\n+        }\n       }\n     },\n     \"sockjs-client\": {"
  },
  {
    "sha": "895447caed2ea6544377fc0b716379042b96930a",
    "filename": "cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenAcceptType.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenAcceptType.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenAcceptType.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenAcceptType.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.nike.cerberus.domain;\n+\n+/** Enum used to distinguish between JWT and session token */\n+public enum AuthTokenAcceptType {\n+  JWT,\n+  SESSION,\n+  ALL\n+}"
  },
  {
    "sha": "701e622f2ce3e88292a2d32744ef87ed6329f7b4",
    "filename": "cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenInfo.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenInfo.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenInfo.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenInfo.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,41 @@\n+package com.nike.cerberus.domain;\n+\n+import java.time.OffsetDateTime;\n+\n+public interface AuthTokenInfo {\n+  String getId();\n+\n+  AuthTokenInfo setId(String id);\n+\n+  String getTokenHash();\n+\n+  AuthTokenInfo setTokenHash(String tokenHash);\n+\n+  OffsetDateTime getCreatedTs();\n+\n+  AuthTokenInfo setCreatedTs(OffsetDateTime createdTs);\n+\n+  OffsetDateTime getExpiresTs();\n+\n+  AuthTokenInfo setExpiresTs(OffsetDateTime expiresTs);\n+\n+  String getPrincipal();\n+\n+  AuthTokenInfo setPrincipal(String principal);\n+\n+  String getPrincipalType();\n+\n+  AuthTokenInfo setPrincipalType(String principalType);\n+\n+  Boolean getIsAdmin();\n+\n+  AuthTokenInfo setIsAdmin(Boolean admin);\n+\n+  String getGroups();\n+\n+  AuthTokenInfo setGroups(String groups);\n+\n+  Integer getRefreshCount();\n+\n+  AuthTokenInfo setRefreshCount(Integer refreshCount);\n+}"
  },
  {
    "sha": "7e6a19c7710569487a3dc8d84c892baddb8bbf71",
    "filename": "cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenIssueType.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenIssueType.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenIssueType.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-domain/src/main/java/com/nike/cerberus/domain/AuthTokenIssueType.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.nike.cerberus.domain;\n+\n+/** Enum used to distinguish between JWT and session token */\n+public enum AuthTokenIssueType {\n+  JWT,\n+  SESSION\n+}"
  },
  {
    "sha": "3e710cdc4b80ecbbefb9585d9fcf9a0f8fbfbeab",
    "filename": "cerberus-domain/src/main/java/com/nike/cerberus/domain/CerberusAuthToken.java",
    "status": "modified",
    "additions": 119,
    "deletions": 12,
    "changes": 131,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/main/java/com/nike/cerberus/domain/CerberusAuthToken.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/main/java/com/nike/cerberus/domain/CerberusAuthToken.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-domain/src/main/java/com/nike/cerberus/domain/CerberusAuthToken.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -1,11 +1,11 @@\n /*\n- * Copyright (c) 2020 Nike, inc.\n+ * Copyright (c) 2017 Nike, Inc.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\")\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -19,16 +19,9 @@\n import com.nike.cerberus.PrincipalType;\n import java.io.Serializable;\n import java.time.OffsetDateTime;\n-import lombok.AllArgsConstructor;\n-import lombok.Builder;\n-import lombok.Data;\n-import lombok.NoArgsConstructor;\n-\n-@Data\n-@Builder\n-@AllArgsConstructor\n-@NoArgsConstructor\n+\n public class CerberusAuthToken implements Serializable {\n+\n   private static final long serialVersionUID = 703097175899198451L;\n \n   private String token;\n@@ -39,4 +32,118 @@\n   private boolean isAdmin;\n   private String groups;\n   private int refreshCount;\n+  private String id;\n+\n+  public String getToken() {\n+    return token;\n+  }\n+\n+  public OffsetDateTime getCreated() {\n+    return created;\n+  }\n+\n+  public OffsetDateTime getExpires() {\n+    return expires;\n+  }\n+\n+  public String getPrincipal() {\n+    return principal;\n+  }\n+\n+  public PrincipalType getPrincipalType() {\n+    return principalType;\n+  }\n+\n+  public boolean isAdmin() {\n+    return isAdmin;\n+  }\n+\n+  public String getGroups() {\n+    return groups;\n+  }\n+\n+  public int getRefreshCount() {\n+    return refreshCount;\n+  }\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public static final class Builder {\n+    private String token;\n+    private OffsetDateTime created;\n+    private OffsetDateTime expires;\n+    private String principal;\n+    private PrincipalType principalType;\n+    private boolean isAdmin;\n+    private String groups;\n+    private int refreshCount;\n+    private String id;\n+\n+    private Builder() {}\n+\n+    public static Builder create() {\n+      return new Builder();\n+    }\n+\n+    public Builder withToken(String token) {\n+      this.token = token;\n+      return this;\n+    }\n+\n+    public Builder withCreated(OffsetDateTime created) {\n+      this.created = created;\n+      return this;\n+    }\n+\n+    public Builder withExpires(OffsetDateTime expires) {\n+      this.expires = expires;\n+      return this;\n+    }\n+\n+    public Builder withPrincipal(String principal) {\n+      this.principal = principal;\n+      return this;\n+    }\n+\n+    public Builder withPrincipalType(PrincipalType principalType) {\n+      this.principalType = principalType;\n+      return this;\n+    }\n+\n+    public Builder withIsAdmin(boolean isAdmin) {\n+      this.isAdmin = isAdmin;\n+      return this;\n+    }\n+\n+    public Builder withGroups(String groups) {\n+      this.groups = groups;\n+      return this;\n+    }\n+\n+    public Builder withRefreshCount(int refreshCount) {\n+      this.refreshCount = refreshCount;\n+      return this;\n+    }\n+\n+    public Builder withId(String id) {\n+      this.id = id;\n+      return this;\n+    }\n+\n+    public CerberusAuthToken build() {\n+      CerberusAuthToken generateTokenResult = new CerberusAuthToken();\n+      generateTokenResult.refreshCount = this.refreshCount;\n+      generateTokenResult.principal = this.principal;\n+      generateTokenResult.token = this.token;\n+      generateTokenResult.isAdmin = this.isAdmin;\n+      generateTokenResult.expires = this.expires;\n+      generateTokenResult.groups = this.groups;\n+      generateTokenResult.principalType = this.principalType;\n+      generateTokenResult.created = this.created;\n+      generateTokenResult.id = this.id;\n+      return generateTokenResult;\n+    }\n+  }\n }"
  },
  {
    "sha": "33585da85b0d6fe9dd4dff2b5c3d7aa4ee8c0f94",
    "filename": "cerberus-domain/src/test/java/com/nike/cerberus/domain/DomainPojoTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/test/java/com/nike/cerberus/domain/DomainPojoTest.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-domain/src/test/java/com/nike/cerberus/domain/DomainPojoTest.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-domain/src/test/java/com/nike/cerberus/domain/DomainPojoTest.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -36,8 +36,7 @@ public void test_pojo_structure_and_behavior() {\n     List<PojoClass> pojoClasses = PojoClassFactory.getPojoClasses(\"com.nike.cerberus.domain\");\n \n     pojoClasses.remove(PojoClassFactory.getPojoClass(CerberusAuthToken.class));\n-    pojoClasses.remove(\n-        PojoClassFactory.getPojoClass(CerberusAuthToken.CerberusAuthTokenBuilder.class));\n+    pojoClasses.remove(PojoClassFactory.getPojoClass(CerberusAuthToken.Builder.class));\n     pojoClasses.remove(PojoClassFactory.getPojoClass(VaultStyleErrorResponse.Builder.class));\n     pojoClasses.remove(PojoClassFactory.getPojoClass(IamPrincipalPermission.Builder.class));\n     pojoClasses.remove(PojoClassFactory.getPojoClass(UserGroupPermission.Builder.class));"
  },
  {
    "sha": "fedcb53c22f0040b3d06250e62658b66ef2d8998",
    "filename": "cerberus-web/build.gradle",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/build.gradle",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/build.gradle",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/build.gradle?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -64,9 +64,17 @@ dependencies {\n   implementation \"com.amazonaws:aws-java-sdk-core:${versions.awsSdkVersion}\"\n   implementation \"com.amazonaws:aws-java-sdk-kms:${versions.awsSdkVersion}\"\n   implementation \"com.amazonaws:aws-java-sdk-sts:${versions.awsSdkVersion}\"\n+  implementation \"com.amazonaws:aws-java-sdk-s3:${versions.awsSdkVersion}\"\n   implementation \"com.amazonaws:aws-java-sdk-secretsmanager:${versions.awsSdkVersion}\"\n   implementation 'com.amazonaws:aws-encryption-sdk-java:1.6.1'\n \n+\n+  // JWT\n+  implementation \"io.jsonwebtoken:jjwt-api:0.10.5\"\n+  implementation \"io.jsonwebtoken:jjwt-impl:0.10.5\"\n+  implementation \"io.jsonwebtoken:jjwt-jackson:0.10.5\"\n+\n+\n   //dist tracing\n   implementation 'com.nike.wingtips:wingtips-spring-boot:0.23.1'\n "
  },
  {
    "sha": "4e6ac88c13ad0432d3bf4d71e68798e1176d9242",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/controller/authentication/RevokeAuthenticationController.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/controller/authentication/RevokeAuthenticationController.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/controller/authentication/RevokeAuthenticationController.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/controller/authentication/RevokeAuthenticationController.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -40,6 +40,6 @@ public RevokeAuthenticationController(AuthenticationService authenticationServic\n   @RequestMapping(method = DELETE)\n   public void revokeAuthentication(Authentication authentication) {\n     var cerberusPrincipal = (CerberusPrincipal) authentication;\n-    authenticationService.revoke(cerberusPrincipal.getToken());\n+    authenticationService.revoke(cerberusPrincipal, cerberusPrincipal.getTokenExpires());\n   }\n }"
  },
  {
    "sha": "64c14f05705b36c81772d67c5b561ecc449325c4",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/dao/JwtBlocklistDao.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/dao/JwtBlocklistDao.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/dao/JwtBlocklistDao.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/dao/JwtBlocklistDao.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.nike.cerberus.dao;\n+\n+import com.nike.cerberus.mapper.JwtBlocklistMapper;\n+import com.nike.cerberus.record.JwtBlocklistRecord;\n+import java.util.HashSet;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JwtBlocklistDao {\n+\n+  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+  private final JwtBlocklistMapper jwtBlocklistMapper;\n+\n+  @Autowired\n+  public JwtBlocklistDao(JwtBlocklistMapper jwtBlocklistMapper) {\n+    this.jwtBlocklistMapper = jwtBlocklistMapper;\n+  }\n+\n+  public HashSet<String> getBlocklist() {\n+    return jwtBlocklistMapper.getBlocklist();\n+  }\n+\n+  public int addToBlocklist(JwtBlocklistRecord jwtBlocklistRecord) {\n+    return jwtBlocklistMapper.addToBlocklist(jwtBlocklistRecord);\n+  }\n+\n+  public int deleteExpiredTokens() {\n+    return jwtBlocklistMapper.deleteExpiredTokens();\n+  }\n+}"
  },
  {
    "sha": "7c2a02e0dcf13889e5733d578acbcf6ec10d4c9b",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtBlocklistCleanUpJob.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtBlocklistCleanUpJob.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtBlocklistCleanUpJob.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtBlocklistCleanUpJob.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.nike.cerberus.jobs;\n+\n+import com.nike.cerberus.service.JwtService;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+/** Periodically clean up JWT blocklist. */\n+@Slf4j\n+@ConditionalOnProperty(\"cerberus.jobs.jwtBlocklistCleanUpJob.enabled\")\n+@Component\n+public class JwtBlocklistCleanUpJob extends LockingJob {\n+\n+  private final JwtService jwtService;\n+\n+  @Autowired\n+  public JwtBlocklistCleanUpJob(JwtService jwtService) {\n+    this.jwtService = jwtService;\n+  }\n+\n+  @Override\n+  @Scheduled(cron = \"${cerberus.jobs.jwtBlocklistCleanUpJob.cronExpression}\")\n+  public void execute() {\n+    super.execute();\n+  }\n+\n+  @Override\n+  protected void executeLockableCode() {\n+    int numberOfDeletedTokens = jwtService.deleteExpiredTokens();\n+    log.info(\"Deleted {} JWT blocklist entries\", numberOfDeletedTokens);\n+  }\n+}"
  },
  {
    "sha": "71152416b612a4256442eff03bad7afd645c4ed7",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtBlocklistRefreshJob.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtBlocklistRefreshJob.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtBlocklistRefreshJob.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtBlocklistRefreshJob.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.nike.cerberus.jobs;\n+\n+import com.nike.cerberus.service.JwtService;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+/** Periodically refresh JWT blocklist. */\n+@Slf4j\n+@ConditionalOnProperty(\"cerberus.jobs.jwtBlocklistRefreshJob.enabled\")\n+@Component\n+public class JwtBlocklistRefreshJob {\n+\n+  private final JwtService jwtService;\n+\n+  @Autowired\n+  public JwtBlocklistRefreshJob(JwtService jwtService) {\n+    this.jwtService = jwtService;\n+  }\n+\n+  @Scheduled(cron = \"${cerberus.jobs.jwtBlocklistRefreshJob.cronExpression}\")\n+  public void execute() {\n+    log.debug(\"Running JWT blocklist refresh job\");\n+    jwtService.refreshBlocklist();\n+  }\n+}"
  },
  {
    "sha": "77aa5ee0e72d6f805f8637f4985f1d54b4d7b4a1",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtSecretRefreshJob.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtSecretRefreshJob.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtSecretRefreshJob.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/jobs/JwtSecretRefreshJob.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.nike.cerberus.jobs;\n+\n+import com.nike.cerberus.service.JwtService;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+/** Periodically refresh JWT signing keys. */\n+@Slf4j\n+@ConditionalOnProperty(\"cerberus.jobs.jwtSecretRefreshJob.enabled\")\n+@Component\n+public class JwtSecretRefreshJob {\n+\n+  private final JwtService jwtService;\n+\n+  @Autowired\n+  public JwtSecretRefreshJob(JwtService jwtService) {\n+    this.jwtService = jwtService;\n+  }\n+\n+  @Scheduled(cron = \"${cerberus.jobs.jwtSecretRefreshJob.cronExpression}\")\n+  public void execute() {\n+    log.debug(\"Running JWT secret refresh job\");\n+    jwtService.refreshKeys();\n+  }\n+}"
  },
  {
    "sha": "c4df9db81d077402615ec901ee9f13035c80a981",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusJwtClaims.java",
    "status": "added",
    "additions": 121,
    "deletions": 0,
    "changes": 121,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusJwtClaims.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusJwtClaims.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusJwtClaims.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.nike.cerberus.jwt;\n+\n+import com.nike.cerberus.domain.AuthTokenInfo;\n+import java.time.OffsetDateTime;\n+\n+public class CerberusJwtClaims implements AuthTokenInfo {\n+\n+  private String id;\n+\n+  private OffsetDateTime createdTs;\n+\n+  private OffsetDateTime expiresTs;\n+\n+  private String principal;\n+\n+  private String principalType;\n+\n+  private Boolean isAdmin;\n+\n+  private String groups;\n+\n+  private Integer refreshCount;\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public CerberusJwtClaims setId(String id) {\n+    this.id = id;\n+    return this;\n+  }\n+\n+  public OffsetDateTime getCreatedTs() {\n+    return createdTs;\n+  }\n+\n+  public CerberusJwtClaims setCreatedTs(OffsetDateTime createdTs) {\n+    this.createdTs = createdTs;\n+    return this;\n+  }\n+\n+  public OffsetDateTime getExpiresTs() {\n+    return expiresTs;\n+  }\n+\n+  public CerberusJwtClaims setExpiresTs(OffsetDateTime expiresTs) {\n+    this.expiresTs = expiresTs;\n+    return this;\n+  }\n+\n+  public String getPrincipal() {\n+    return principal;\n+  }\n+\n+  public CerberusJwtClaims setPrincipal(String principal) {\n+    this.principal = principal;\n+    return this;\n+  }\n+\n+  public String getPrincipalType() {\n+    return principalType;\n+  }\n+\n+  public CerberusJwtClaims setPrincipalType(String principalType) {\n+    this.principalType = principalType;\n+    return this;\n+  }\n+\n+  @Override\n+  public String getTokenHash() {\n+    return null;\n+  }\n+\n+  @Override\n+  public CerberusJwtClaims setTokenHash(String tokenHash) {\n+    return null;\n+  }\n+\n+  public Boolean getIsAdmin() {\n+    return isAdmin;\n+  }\n+\n+  public CerberusJwtClaims setIsAdmin(Boolean admin) {\n+    isAdmin = admin;\n+    return this;\n+  }\n+\n+  public String getGroups() {\n+    return groups;\n+  }\n+\n+  public CerberusJwtClaims setGroups(String groups) {\n+    this.groups = groups;\n+    return this;\n+  }\n+\n+  public Integer getRefreshCount() {\n+    return refreshCount;\n+  }\n+\n+  public CerberusJwtClaims setRefreshCount(Integer refreshCount) {\n+    this.refreshCount = refreshCount;\n+    return this;\n+  }\n+}"
  },
  {
    "sha": "40a14c37b604b5cae3d39e840e604961b33fac15",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusJwtKeySpec.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusJwtKeySpec.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusJwtKeySpec.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusJwtKeySpec.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,38 @@\n+package com.nike.cerberus.jwt;\n+\n+import java.util.Objects;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n+\n+public class CerberusJwtKeySpec extends SecretKeySpec {\n+  // todo maybe implement destroyable\n+  private String kid;\n+\n+  public CerberusJwtKeySpec(byte[] key, String algorithm, String kid) {\n+    super(key, algorithm);\n+    this.kid = kid;\n+  }\n+\n+  public CerberusJwtKeySpec(SecretKey secretKey, String kid) {\n+    super(secretKey.getEncoded(), secretKey.getAlgorithm());\n+    this.kid = kid;\n+  }\n+\n+  public String getKid() {\n+    return kid;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    CerberusJwtKeySpec keySpec = (CerberusJwtKeySpec) o;\n+    return kid.equals(keySpec.kid);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(super.hashCode(), kid);\n+  }\n+}"
  },
  {
    "sha": "fdce37c28cccbd705610028183d72f027c2cfe9e",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusSigningKeyResolver.java",
    "status": "added",
    "additions": 296,
    "deletions": 0,
    "changes": 296,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusSigningKeyResolver.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusSigningKeyResolver.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/jwt/CerberusSigningKeyResolver.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,296 @@\n+package com.nike.cerberus.jwt;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.nike.cerberus.service.ConfigService;\n+import com.nike.cerberus.util.UuidSupplier;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.JwsHeader;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.jsonwebtoken.SigningKeyResolverAdapter;\n+import io.jsonwebtoken.security.Keys;\n+import java.io.IOException;\n+import java.security.Key;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import javax.crypto.SecretKey;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * A subclass of {@link SigningKeyResolverAdapter} that resolves the key used for JWT signing and\n+ * signature validation\n+ */\n+@Component\n+public class CerberusSigningKeyResolver extends SigningKeyResolverAdapter {\n+\n+  private final ConfigService configService;\n+  private final ObjectMapper objectMapper;\n+  private CerberusJwtKeySpec signingKey;\n+  private Map<String, CerberusJwtKeySpec> keyMap;\n+  private boolean checkKeyRotation;\n+  private long nextRotationTs;\n+  private String nextKeyId;\n+\n+  private static final String DEFAULT_ALGORITHM = \"HmacSHA512\";\n+  private static final String DEFAULT_JWT_ALG_HEADER = \"HS512\";\n+  private static final int DEFAULT_MINIMUM_KEY_LENGTH = 512 / 8; // hardcoding these for now\n+\n+  protected final Logger log = LoggerFactory.getLogger(this.getClass());\n+\n+  @Autowired\n+  public CerberusSigningKeyResolver(\n+      JwtServiceOptionalPropertyHolder jwtServiceOptionalPropertyHolder,\n+      ObjectMapper objectMapper,\n+      ConfigService configService,\n+      @Value(\"${cerberus.auth.jwt.secret.local.autoGenerate}\") boolean autoGenerate,\n+      @Value(\"${cerberus.auth.jwt.secret.local.enabled}\") boolean jwtLocalEnabled,\n+      UuidSupplier uuidSupplier) {\n+    this.configService = configService;\n+    this.objectMapper = objectMapper;\n+\n+    // Override key with properties, useful for local development\n+    if (jwtLocalEnabled) {\n+      if (autoGenerate) {\n+        log.info(\"Auto generating JWT secret for local development\");\n+        SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.forName(DEFAULT_JWT_ALG_HEADER));\n+        this.signingKey = new CerberusJwtKeySpec(key, uuidSupplier.get());\n+      } else {\n+        log.info(\"Using JWT secret from properties\");\n+        if (!StringUtils.isBlank(jwtServiceOptionalPropertyHolder.jwtSecretLocalMaterial)\n+            && !StringUtils.isBlank(jwtServiceOptionalPropertyHolder.jwtSecretLocalKeyId)) {\n+          byte[] key =\n+              Base64.getDecoder().decode(jwtServiceOptionalPropertyHolder.jwtSecretLocalMaterial);\n+          this.signingKey =\n+              new CerberusJwtKeySpec(\n+                  key, DEFAULT_ALGORITHM, jwtServiceOptionalPropertyHolder.jwtSecretLocalKeyId);\n+        } else {\n+          throw new IllegalArgumentException(\n+              \"Invalid JWT config. To resolve, either set \"\n+                  + \"cms.auth.jwt.secret.local.autoGenerate=true or provide both cms.auth.jwt.secret.local.material\"\n+                  + \" and cms.auth.jwt.secret.local.kid\");\n+        }\n+      }\n+      rotateKeyMap(signingKey);\n+    } else {\n+      log.info(\"Initializing JWT key resolver using Jwt Secret from S3 bucket\");\n+      refresh();\n+    }\n+  }\n+\n+  /**\n+   * This 'holder' class allows optional injection of Cerberus JWT-specific properties that are only\n+   * necessary for local development.\n+   */\n+  @Component\n+  static class JwtServiceOptionalPropertyHolder {\n+    @Value(\"${cms.auth.jwt.secret.local.material: #{null}}\")\n+    String jwtSecretLocalMaterial;\n+\n+    @Value(\"${cms.auth.jwt.secret.local.kid: #{null}}\")\n+    String jwtSecretLocalKeyId;\n+  }\n+\n+  @Override\n+  public Key resolveSigningKey(JwsHeader jwsHeader, Claims claims) {\n+    // Rejects non HS512 token\n+    if (!StringUtils.equals(DEFAULT_JWT_ALG_HEADER, jwsHeader.getAlgorithm())) {\n+      throw new IllegalArgumentException(\"Algorithm not supported\");\n+    }\n+    String keyId = jwsHeader.getKeyId();\n+    Key key = lookupVerificationKey(keyId);\n+\n+    return key;\n+  }\n+\n+  /**\n+   * Return the signing key that should be used to sign JWT. The signing key is defined as the\n+   * \"newest active key\" i.e. key with the biggest effectiveTs value and effectiveTs before now.\n+   *\n+   * @return The signing key\n+   */\n+  public CerberusJwtKeySpec resolveSigningKey() {\n+    if (checkKeyRotation) {\n+      rotateSigningKey();\n+      return signingKey;\n+    } else {\n+      return signingKey;\n+    }\n+  }\n+\n+  /** Poll for JWT config and update key map with new data */\n+  public void refresh() {\n+    JwtSecretData jwtSecretData = getJwtSecretData();\n+\n+    rotateKeyMap(jwtSecretData);\n+    setSigningKey(jwtSecretData);\n+  }\n+\n+  /**\n+   * Poll for JWT config and validate new data\n+   *\n+   * @return JWT config\n+   */\n+  protected JwtSecretData getJwtSecretData() {\n+    String jwtSecretsString = configService.getJwtSecrets();\n+    try {\n+      JwtSecretData jwtSecretData = objectMapper.readValue(jwtSecretsString, JwtSecretData.class);\n+      validateJwtSecretData(jwtSecretData);\n+      return jwtSecretData;\n+    } catch (IOException e) {\n+      log.error(\"IOException encountered during deserialization\");\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  /**\n+   * Validate {@link JwtSecretData}. Validates required fields and rejects weak keys.\n+   *\n+   * @param jwtSecretData JWT config\n+   */\n+  protected void validateJwtSecretData(JwtSecretData jwtSecretData) {\n+    if (jwtSecretData == null || jwtSecretData.getJwtSecrets() == null) {\n+      throw new IllegalArgumentException(\"JWT secret data cannot be null\");\n+    }\n+    if (jwtSecretData.getJwtSecrets().isEmpty()) {\n+      throw new IllegalArgumentException(\"JWT secret data cannot be empty\");\n+    }\n+\n+    long minEffectiveTs = 0;\n+\n+    for (JwtSecret jwtSecret : jwtSecretData.getJwtSecrets()) {\n+      if (jwtSecret.getSecret() == null) {\n+        throw new IllegalArgumentException(\"JWT secret cannot be null\");\n+      }\n+      if (Base64.getDecoder().decode(jwtSecret.getSecret()).length < DEFAULT_MINIMUM_KEY_LENGTH) {\n+        throw new IllegalArgumentException(\n+            \"JWT secret does NOT meet minimum length requirement of \" + DEFAULT_MINIMUM_KEY_LENGTH);\n+      }\n+      if (StringUtils.isBlank(jwtSecret.getId())) {\n+        throw new IllegalArgumentException(\"JWT secret key ID cannot be empty\");\n+      }\n+      minEffectiveTs = Math.min(minEffectiveTs, jwtSecret.getEffectiveTs());\n+    }\n+\n+    long now = System.currentTimeMillis();\n+    if (now < minEffectiveTs) {\n+      // Prevents rotation or start up if no key is active\n+      throw new IllegalArgumentException(\"Requires at least 1 active JWT secret\");\n+    }\n+  }\n+\n+  /**\n+   * Set the signing key that should be used to sign JWT and the next signing key in line. The\n+   * signing key is defined as the \"newest active key\" i.e. key with the biggest effectiveTs value\n+   * and effectiveTs before now.\n+   *\n+   * @param jwtSecretData JWT config\n+   */\n+  protected void setSigningKey(JwtSecretData jwtSecretData) {\n+    // Find the active key\n+    long now = System.currentTimeMillis();\n+    String currentKeyId = getSigningKeyId(jwtSecretData, now);\n+    signingKey = keyMap.get(currentKeyId);\n+\n+    // Find the next key\n+    List<JwtSecret> futureJwtSecrets = getFutureJwtSecrets(jwtSecretData, now);\n+\n+    // Set up rotation\n+    if (!futureJwtSecrets.isEmpty()) {\n+      JwtSecret jwtSecret = futureJwtSecrets.get(0);\n+      checkKeyRotation = true;\n+      nextRotationTs = jwtSecret.getEffectiveTs();\n+      nextKeyId = jwtSecret.getId();\n+    } else {\n+      checkKeyRotation = false;\n+    }\n+  }\n+\n+  /**\n+   * Get future signing keys i.e. keys with effectiveTs after now.\n+   *\n+   * @param jwtSecretData JWT config\n+   * @param now Timestamp of now\n+   * @return Future signing keys\n+   */\n+  protected List<JwtSecret> getFutureJwtSecrets(JwtSecretData jwtSecretData, long now) {\n+    return jwtSecretData.getJwtSecrets().stream()\n+        .filter(secretData -> secretData.getEffectiveTs() > now)\n+        .sorted(\n+            (secretData1, secretData2) ->\n+                secretData1.getEffectiveTs() - secretData2.getEffectiveTs() < 0 ? -1 : 1)\n+        // this puts older keys in the front of the list\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Get the ID of signing key that should be used to sign JWT. The signing key is defined as the\n+   * \"newest active key\" i.e. key with the biggest effectiveTs value and effectiveTs before now.\n+   *\n+   * @param jwtSecretData JWT config\n+   * @param now Timestamp of now in millisecond\n+   * @return ID of the signing key\n+   */\n+  protected String getSigningKeyId(JwtSecretData jwtSecretData, long now) {\n+    List<JwtSecret> sortedJwtSecrets =\n+        jwtSecretData.getJwtSecrets().stream()\n+            .filter(secretData -> secretData.getEffectiveTs() <= now)\n+            .sorted(\n+                (secretData1, secretData2) ->\n+                    secretData1.getEffectiveTs() - secretData2.getEffectiveTs() > 0\n+                        ? -1\n+                        : 1) // this puts newer keys in the front of the list\n+            .collect(Collectors.toList());\n+    String currentKeyId = sortedJwtSecrets.get(0).getId();\n+    return currentKeyId;\n+  }\n+\n+  private void rotateKeyMap(JwtSecretData jwtSecretData) {\n+    ConcurrentHashMap<String, CerberusJwtKeySpec> keyMap = new ConcurrentHashMap<>();\n+    for (JwtSecret jwtSecret : jwtSecretData.getJwtSecrets()) {\n+      CerberusJwtKeySpec keySpec =\n+          new CerberusJwtKeySpec(\n+              Base64.getDecoder().decode(jwtSecret.getSecret()),\n+              DEFAULT_ALGORITHM,\n+              jwtSecret.getId());\n+      keyMap.put(jwtSecret.getId(), keySpec);\n+    }\n+    this.keyMap = keyMap;\n+  }\n+\n+  private void rotateKeyMap(CerberusJwtKeySpec cerberusJwtKeySpec) {\n+    ConcurrentHashMap<String, CerberusJwtKeySpec> keyMap = new ConcurrentHashMap<>();\n+    keyMap.put(cerberusJwtKeySpec.getKid(), cerberusJwtKeySpec);\n+    this.keyMap = keyMap;\n+  }\n+\n+  private Key lookupVerificationKey(String keyId) {\n+    if (StringUtils.isBlank(keyId)) {\n+      throw new IllegalArgumentException(\"Key ID cannot be empty\");\n+    }\n+    try {\n+      CerberusJwtKeySpec keySpec = keyMap.get(keyId);\n+      if (keySpec == null) {\n+        throw new IllegalArgumentException(\"The key ID \" + keyId + \" is invalid or expired\");\n+      }\n+\n+      return keySpec;\n+    } catch (NullPointerException e) {\n+      throw new IllegalArgumentException(\"The key ID \" + keyId + \" is either invalid or expired\");\n+    }\n+  }\n+\n+  private void rotateSigningKey() {\n+    long now = System.currentTimeMillis();\n+    if (now >= nextRotationTs) {\n+      this.signingKey = keyMap.get(nextKeyId);\n+    }\n+    checkKeyRotation = false;\n+  }\n+}"
  },
  {
    "sha": "cc45f1d18cc0e33e9c8f7fdad24ce6591b7a06ce",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/jwt/JwtSecret.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/JwtSecret.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/JwtSecret.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/jwt/JwtSecret.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.nike.cerberus.jwt;\n+\n+public class JwtSecret {\n+  private String id;\n+\n+  private String secret;\n+\n+  private String algorithm;\n+\n+  private long effectiveTs;\n+\n+  private long createdTs;\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public void setId(String id) {\n+    this.id = id;\n+  }\n+\n+  public String getSecret() {\n+    return secret;\n+  }\n+\n+  public void setSecret(String secret) {\n+    this.secret = secret;\n+  }\n+\n+  public long getEffectiveTs() {\n+    return effectiveTs;\n+  }\n+\n+  public void setEffectiveTs(long effectiveTs) {\n+    this.effectiveTs = effectiveTs;\n+  }\n+\n+  public long getCreatedTs() {\n+    return createdTs;\n+  }\n+\n+  public void setCreatedTs(long createdTs) {\n+    this.createdTs = createdTs;\n+  }\n+\n+  public String getAlgorithm() {\n+    return algorithm;\n+  }\n+\n+  public void setAlgorithm(String algorithm) {\n+    this.algorithm = algorithm;\n+  }\n+}"
  },
  {
    "sha": "093376fbae91cf274d0728cccfa3e6cabe451fd0",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/jwt/JwtSecretData.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/JwtSecretData.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/jwt/JwtSecretData.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/jwt/JwtSecretData.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.nike.cerberus.jwt;\n+\n+import java.util.LinkedList;\n+\n+/** A POJO that represents the JWT config */\n+public class JwtSecretData {\n+  private LinkedList<JwtSecret> jwtSecrets = new LinkedList<>();\n+\n+  public LinkedList<JwtSecret> getJwtSecrets() {\n+    return jwtSecrets;\n+  }\n+\n+  public void setJwtSecrets(LinkedList<JwtSecret> jwtSecrets) {\n+    this.jwtSecrets = jwtSecrets;\n+  }\n+}"
  },
  {
    "sha": "b8683437bd0318a45e1c30d28f978c86702aa4ce",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/mapper/JwtBlocklistMapper.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/mapper/JwtBlocklistMapper.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/mapper/JwtBlocklistMapper.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/mapper/JwtBlocklistMapper.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.nike.cerberus.mapper;\n+\n+import com.nike.cerberus.record.JwtBlocklistRecord;\n+import java.util.HashSet;\n+import org.apache.ibatis.annotations.Param;\n+\n+public interface JwtBlocklistMapper {\n+\n+  HashSet<String> getBlocklist();\n+\n+  int addToBlocklist(@Param(\"record\") JwtBlocklistRecord record);\n+\n+  int deleteExpiredTokens();\n+}"
  },
  {
    "sha": "cbe2a7662bf930b3dad029e63c749d44e738b106",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/record/AuthTokenRecord.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/record/AuthTokenRecord.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/record/AuthTokenRecord.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/record/AuthTokenRecord.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -16,9 +16,10 @@\n \n package com.nike.cerberus.record;\n \n+import com.nike.cerberus.domain.AuthTokenInfo;\n import java.time.OffsetDateTime;\n \n-public class AuthTokenRecord {\n+public class AuthTokenRecord implements AuthTokenInfo {\n \n   private String id;\n "
  },
  {
    "sha": "8939d3b172f83c00428864d016693f40ac7a292c",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/record/JwtBlocklistRecord.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/record/JwtBlocklistRecord.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/record/JwtBlocklistRecord.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/record/JwtBlocklistRecord.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.nike.cerberus.record;\n+\n+import java.time.OffsetDateTime;\n+\n+public class JwtBlocklistRecord {\n+\n+  private String id;\n+\n+  private OffsetDateTime expiresTs;\n+\n+  public String getId() {\n+    return id;\n+  }\n+\n+  public JwtBlocklistRecord setId(String id) {\n+    this.id = id;\n+    return this;\n+  }\n+\n+  public OffsetDateTime getExpiresTs() {\n+    return expiresTs;\n+  }\n+\n+  public JwtBlocklistRecord setExpiresTs(OffsetDateTime expiresTs) {\n+    this.expiresTs = expiresTs;\n+    return this;\n+  }\n+}"
  },
  {
    "sha": "03844d2f61cfcd5aeaec47c644e8d8841914835c",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/security/JwtTokenFilter.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/security/JwtTokenFilter.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/security/JwtTokenFilter.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/security/JwtTokenFilter.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,28 @@\n+package com.nike.cerberus.security;\n+\n+import static com.nike.cerberus.security.WebSecurityConfiguration.HEADER_X_CERBERUS_TOKEN;\n+import static com.nike.cerberus.security.WebSecurityConfiguration.LEGACY_AUTH_TOKN_HEADER;\n+\n+import com.nike.cerberus.service.AuthTokenService;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+\n+public class JwtTokenFilter extends CerberusAuthenticationFilter {\n+\n+  private final AuthTokenService authTokenService;\n+\n+  public JwtTokenFilter(\n+      RequestMatcher requiresAuthenticationRequestMatcher, AuthTokenService authTokenService) {\n+    super(requiresAuthenticationRequestMatcher);\n+    this.authTokenService = authTokenService;\n+  }\n+\n+  @Override\n+  Optional<CerberusPrincipal> extractCerberusPrincipalFromRequest(HttpServletRequest request) {\n+    return Optional.ofNullable(request.getHeader(HEADER_X_CERBERUS_TOKEN))\n+        .or(() -> Optional.ofNullable(request.getHeader(LEGACY_AUTH_TOKN_HEADER)))\n+        // If the token is present then use the auth service to map it to a Cerberus Principal\n+        .flatMap(token -> authTokenService.getCerberusAuthToken(token).map(CerberusPrincipal::new));\n+  }\n+}"
  },
  {
    "sha": "c5aee2c65566255f0babbe6e4702705928a6f8da",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/security/WebSecurityConfiguration.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/security/WebSecurityConfiguration.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/security/WebSecurityConfiguration.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/security/WebSecurityConfiguration.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -98,6 +98,8 @@ protected void configure(HttpSecurity http) throws Exception {\n         new DatabaseTokenAuthenticationProcessingFilter(\n             authTokenService, requestDoesNotRequireAuthMatcher);\n \n+    var jwtFilter = new JwtTokenFilter(requestDoesNotRequireAuthMatcher, authTokenService);\n+\n     // Disable CSRF (cross site request forgery)\n     http.csrf().disable();\n \n@@ -117,5 +119,7 @@ protected void configure(HttpSecurity http) throws Exception {\n \n     // Add the auth filters\n     http.addFilterBefore(dbTokenFilter, UsernamePasswordAuthenticationFilter.class);\n+\n+    http.addFilterBefore(jwtFilter, dbTokenFilter.getClass());\n   }\n }"
  },
  {
    "sha": "f8b00a7895800d6ce17fbb00254801740b1981cf",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/service/AuthTokenService.java",
    "status": "modified",
    "additions": 118,
    "deletions": 22,
    "changes": 140,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/service/AuthTokenService.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/service/AuthTokenService.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/service/AuthTokenService.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -19,23 +19,40 @@\n import static com.google.common.base.Preconditions.checkArgument;\n import static org.springframework.transaction.annotation.Isolation.READ_UNCOMMITTED;\n \n+import com.nike.backstopper.exception.ApiException;\n import com.nike.cerberus.PrincipalType;\n import com.nike.cerberus.dao.AuthTokenDao;\n+import com.nike.cerberus.domain.AuthTokenAcceptType;\n+import com.nike.cerberus.domain.AuthTokenInfo;\n+import com.nike.cerberus.domain.AuthTokenIssueType;\n import com.nike.cerberus.domain.CerberusAuthToken;\n+import com.nike.cerberus.error.DefaultApiError;\n+import com.nike.cerberus.jwt.CerberusJwtClaims;\n import com.nike.cerberus.record.AuthTokenRecord;\n+import com.nike.cerberus.security.CerberusPrincipal;\n import com.nike.cerberus.util.AuthTokenGenerator;\n import com.nike.cerberus.util.DateTimeSupplier;\n import com.nike.cerberus.util.TokenHasher;\n import com.nike.cerberus.util.UuidSupplier;\n import java.time.OffsetDateTime;\n import java.util.Optional;\n+import lombok.Data;\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+@Data\n+@Component\n+@ConfigurationProperties(\"cerberus.auth.token\")\n+class JwtFeatureFlags {\n+  private AuthTokenIssueType issueType;\n+  private AuthTokenAcceptType acceptType;\n+}\n+\n /** Service for handling authentication tokens. */\n @Component\n public class AuthTokenService {\n@@ -47,20 +64,27 @@\n   private final AuthTokenGenerator authTokenGenerator;\n   private final AuthTokenDao authTokenDao;\n   private final DateTimeSupplier dateTimeSupplier;\n+  private final JwtService jwtService;\n+\n+  private final JwtFeatureFlags tokenFlag;\n \n   @Autowired\n   public AuthTokenService(\n       UuidSupplier uuidSupplier,\n       TokenHasher tokenHasher,\n       AuthTokenGenerator authTokenGenerator,\n       AuthTokenDao authTokenDao,\n-      DateTimeSupplier dateTimeSupplier) {\n+      DateTimeSupplier dateTimeSupplier,\n+      JwtService jwtService,\n+      JwtFeatureFlags tokenFlag) {\n \n     this.uuidSupplier = uuidSupplier;\n     this.tokenHasher = tokenHasher;\n     this.authTokenGenerator = authTokenGenerator;\n     this.authTokenDao = authTokenDao;\n     this.dateTimeSupplier = dateTimeSupplier;\n+    this.jwtService = jwtService;\n+    this.tokenFlag = tokenFlag;\n   }\n \n   @Transactional\n@@ -75,45 +99,112 @@ public CerberusAuthToken generateToken(\n     checkArgument(StringUtils.isNotBlank(principal), \"The principal must be set and not empty\");\n \n     String id = uuidSupplier.get();\n-    String token = authTokenGenerator.generateSecureToken();\n     OffsetDateTime now = dateTimeSupplier.get();\n \n-    AuthTokenRecord tokenRecord =\n-        new AuthTokenRecord()\n+    switch (tokenFlag.getIssueType()) {\n+      case JWT:\n+        return getCerberusAuthTokenFromJwt(\n+            principal, principalType, isAdmin, groups, ttlInMinutes, refreshCount, id, now);\n+      case SESSION:\n+        return getCerberusAuthTokenFromSession(\n+            principal, principalType, isAdmin, groups, ttlInMinutes, refreshCount, id, now);\n+      default:\n+        throw ApiException.newBuilder()\n+            .withApiErrors(DefaultApiError.INTERNAL_SERVER_ERROR)\n+            .build();\n+    }\n+  }\n+\n+  private CerberusAuthToken getCerberusAuthTokenFromJwt(\n+      String principal,\n+      PrincipalType principalType,\n+      boolean isAdmin,\n+      String groups,\n+      long ttlInMinutes,\n+      int refreshCount,\n+      String id,\n+      OffsetDateTime now) {\n+\n+    AuthTokenInfo authTokenInfo;\n+    String token;\n+\n+    authTokenInfo =\n+        new CerberusJwtClaims()\n             .setId(id)\n-            .setTokenHash(tokenHasher.hashToken(token))\n             .setCreatedTs(now)\n             .setExpiresTs(now.plusMinutes(ttlInMinutes))\n             .setPrincipal(principal)\n             .setPrincipalType(principalType.getName())\n             .setIsAdmin(isAdmin)\n             .setGroups(groups)\n             .setRefreshCount(refreshCount);\n+    token = jwtService.generateJwtToken((CerberusJwtClaims) authTokenInfo);\n+    return getCerberusAuthTokenFromRecord(token, authTokenInfo);\n+  }\n \n-    authTokenDao.createAuthToken(tokenRecord);\n+  private CerberusAuthToken getCerberusAuthTokenFromSession(\n+      String principal,\n+      PrincipalType principalType,\n+      boolean isAdmin,\n+      String groups,\n+      long ttlInMinutes,\n+      int refreshCount,\n+      String id,\n+      OffsetDateTime now) {\n \n-    return getCerberusAuthTokenFromRecord(token, tokenRecord);\n+    String token;\n+    AuthTokenInfo authTokenInfo;\n+\n+    token = authTokenGenerator.generateSecureToken();\n+    authTokenInfo =\n+        new AuthTokenRecord()\n+            .setId(id)\n+            .setTokenHash(tokenHasher.hashToken(token))\n+            .setCreatedTs(now)\n+            .setExpiresTs(now.plusMinutes(ttlInMinutes))\n+            .setPrincipal(principal)\n+            .setPrincipalType(principalType.getName())\n+            .setIsAdmin(isAdmin)\n+            .setGroups(groups)\n+            .setRefreshCount(refreshCount);\n+    authTokenDao.createAuthToken((AuthTokenRecord) authTokenInfo);\n+    return getCerberusAuthTokenFromRecord(token, authTokenInfo);\n   }\n \n   private CerberusAuthToken getCerberusAuthTokenFromRecord(\n-      String token, AuthTokenRecord tokenRecord) {\n-    return CerberusAuthToken.builder()\n-        .token(token)\n-        .created(tokenRecord.getCreatedTs())\n-        .expires(tokenRecord.getExpiresTs())\n-        .principal(tokenRecord.getPrincipal())\n-        .principalType(PrincipalType.fromName(tokenRecord.getPrincipalType()))\n-        .isAdmin(tokenRecord.getIsAdmin())\n-        .groups(tokenRecord.getGroups())\n-        .refreshCount(tokenRecord.getRefreshCount())\n+      String token, AuthTokenInfo authTokenInfo) {\n+    return CerberusAuthToken.Builder.create()\n+        .withToken(token)\n+        .withCreated(authTokenInfo.getCreatedTs())\n+        .withExpires(authTokenInfo.getExpiresTs())\n+        .withPrincipal(authTokenInfo.getPrincipal())\n+        .withPrincipalType(PrincipalType.fromName(authTokenInfo.getPrincipalType()))\n+        .withIsAdmin(authTokenInfo.getIsAdmin())\n+        .withGroups(authTokenInfo.getGroups())\n+        .withRefreshCount(authTokenInfo.getRefreshCount())\n+        .withId(authTokenInfo.getId())\n         .build();\n   }\n \n   public Optional<CerberusAuthToken> getCerberusAuthToken(String token) {\n-    Optional<AuthTokenRecord> tokenRecord =\n-        authTokenDao.getAuthTokenFromHash(tokenHasher.hashToken(token));\n+    Optional<? extends AuthTokenInfo> tokenRecord = Optional.empty();\n+    AuthTokenAcceptType acceptType = tokenFlag.getAcceptType();\n+    boolean isJwt = jwtService.isJwt(token);\n+    if (isJwt && (acceptType != AuthTokenAcceptType.SESSION)) {\n+      tokenRecord = jwtService.parseAndValidateToken(token);\n+    } else if (acceptType != AuthTokenAcceptType.JWT) {\n+      tokenRecord = authTokenDao.getAuthTokenFromHash(tokenHasher.hashToken(token));\n+    } else {\n+      String tokenType = isJwt ? \"JWT\" : \"Session\";\n+      logger.warn(\n+          \"Returning empty optional, because token type is {} and only {} are accepted\",\n+          tokenType,\n+          acceptType.toString());\n+      return Optional.empty();\n+    }\n \n     OffsetDateTime now = OffsetDateTime.now();\n+    // TODO: break up this if for two different messages (if present vs expired)\n     if (tokenRecord.isPresent() && tokenRecord.get().getExpiresTs().isBefore(now)) {\n       logger.warn(\n           \"Returning empty optional, because token was expired, expired: {}, now: {}\",\n@@ -127,9 +218,14 @@ private CerberusAuthToken getCerberusAuthTokenFromRecord(\n   }\n \n   @Transactional\n-  public void revokeToken(String token) {\n-    String hash = tokenHasher.hashToken(token);\n-    authTokenDao.deleteAuthTokenFromHash(hash);\n+  public void revokeToken(CerberusPrincipal cerberusPrincipal, OffsetDateTime tokenExpires) {\n+    if (jwtService.isJwt(cerberusPrincipal.getToken())) {\n+      logger.info(\"Revoking token ID: {}\", cerberusPrincipal);\n+      jwtService.revokeToken(cerberusPrincipal.getTokenId(), tokenExpires);\n+    } else {\n+      String hash = tokenHasher.hashToken(cerberusPrincipal.getToken());\n+      authTokenDao.deleteAuthTokenFromHash(hash);\n+    }\n   }\n \n   @Transactional("
  },
  {
    "sha": "2186da3331b2b30d51fa0f43d4b861647eeb8a45",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/service/AuthenticationService.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/service/AuthenticationService.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/service/AuthenticationService.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/service/AuthenticationService.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -487,7 +487,7 @@ public AuthResponse refreshUserToken(final CerberusPrincipal authPrincipal) {\n           .build();\n     }\n \n-    revoke(authPrincipal.getToken());\n+    revoke(authPrincipal, authPrincipal.getTokenExpires());\n \n     final AuthResponse authResponse = new AuthResponse();\n     authResponse.setStatus(AuthStatus.SUCCESS);\n@@ -501,9 +501,12 @@ public AuthResponse refreshUserToken(final CerberusPrincipal authPrincipal) {\n     return authResponse;\n   }\n \n-  /** @param authToken Auth Token to be revoked */\n-  public void revoke(final String authToken) {\n-    authTokenService.revokeToken(authToken);\n+  /**\n+   * @param cerberusPrincipal Auth principal to be revoked\n+   * @param tokenExpires Token expire timestamp\n+   */\n+  public void revoke(final CerberusPrincipal cerberusPrincipal, OffsetDateTime tokenExpires) {\n+    authTokenService.revokeToken(cerberusPrincipal, tokenExpires);\n   }\n \n   /**"
  },
  {
    "sha": "c0a32b1631ff362047cd77d16b664e333b4303df",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/service/ConfigService.java",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/service/ConfigService.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/service/ConfigService.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/service/ConfigService.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.nike.cerberus.service;\n+\n+import static com.nike.cerberus.service.EncryptionService.decrypt;\n+\n+import com.amazonaws.AmazonServiceException;\n+import com.amazonaws.encryptionsdk.AwsCrypto;\n+import com.amazonaws.regions.Region;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3Client;\n+import com.amazonaws.services.s3.model.GetObjectRequest;\n+import com.amazonaws.services.s3.model.S3Object;\n+import com.amazonaws.util.IOUtils;\n+import com.nike.cerberus.util.CiphertextUtils;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ConfigService {\n+\n+  private static final String JWT_SECRETS_PATH = \"cms/jwt-secrets.json\";\n+\n+  private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+  private final AmazonS3 s3Client;\n+\n+  private final String bucketName;\n+\n+  private final AwsCrypto awsCrypto;\n+\n+  private final Region currentRegion;\n+\n+  @Autowired\n+  public ConfigService(\n+      @Value(\"${cerberus.auth.jwt.secret.bucket}\") final String bucketName,\n+      final String region,\n+      AwsCrypto awsCrypto) {\n+\n+    currentRegion = Region.getRegion(Regions.fromName(region));\n+    this.s3Client = AmazonS3Client.builder().withRegion(region).build();\n+\n+    this.bucketName = bucketName;\n+    this.awsCrypto = awsCrypto;\n+  }\n+\n+  public String getJwtSecrets() {\n+    return getPlainText(JWT_SECRETS_PATH);\n+  }\n+\n+  private String getPlainText(String path) {\n+    try {\n+      return decrypt(CiphertextUtils.parse(getCipherText(path)), awsCrypto, currentRegion);\n+    } catch (Exception e) {\n+      throw new IllegalStateException(\n+          \"Failed to download and decrypt environment specific properties from s3\", e);\n+    }\n+  }\n+\n+  private String getCipherText(String path) {\n+    final GetObjectRequest request = new GetObjectRequest(bucketName, path);\n+\n+    try {\n+      S3Object s3Object = s3Client.getObject(request);\n+      InputStream object = s3Object.getObjectContent();\n+      return IOUtils.toString(object);\n+    } catch (AmazonServiceException ase) {\n+      if (StringUtils.equalsIgnoreCase(ase.getErrorCode(), \"NoSuchKey\")) {\n+        final String errorMessage =\n+            String.format(\n+                \"The S3 object doesn't exist. Bucket: %s, Key: %s\", bucketName, request.getKey());\n+        logger.debug(errorMessage);\n+        throw new IllegalStateException(errorMessage);\n+      } else {\n+        logger.error(\"Unexpected error communicating with AWS.\", ase);\n+        throw ase;\n+      }\n+    } catch (IOException e) {\n+      String errorMessage =\n+          String.format(\n+              \"Unable to read contents of S3 object. Bucket: %s, Key: %s, Expected Encoding: %s\",\n+              bucketName, request.getKey(), Charset.defaultCharset());\n+      logger.error(errorMessage);\n+      throw new IllegalStateException(errorMessage, e);\n+    }\n+  }\n+}"
  },
  {
    "sha": "7dc1638edd128a74a00f420095616e37e7511eae",
    "filename": "cerberus-web/src/main/java/com/nike/cerberus/service/JwtService.java",
    "status": "added",
    "additions": 192,
    "deletions": 0,
    "changes": 192,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/service/JwtService.java",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/java/com/nike/cerberus/service/JwtService.java",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/java/com/nike/cerberus/service/JwtService.java?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright (c) 2021 Nike, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.nike.cerberus.service;\n+\n+import static io.jsonwebtoken.JwtParser.SEPARATOR_CHAR;\n+import static org.springframework.transaction.annotation.Isolation.READ_UNCOMMITTED;\n+\n+import com.nike.cerberus.dao.JwtBlocklistDao;\n+import com.nike.cerberus.jwt.CerberusJwtClaims;\n+import com.nike.cerberus.jwt.CerberusJwtKeySpec;\n+import com.nike.cerberus.jwt.CerberusSigningKeyResolver;\n+import com.nike.cerberus.record.JwtBlocklistRecord;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.InvalidClaimException;\n+import io.jsonwebtoken.Jws;\n+import io.jsonwebtoken.JwsHeader;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/** Service for generating, parsing, and validating JWT tokens. */\n+@Component\n+@ComponentScan(basePackages = {\"com.nike.cerberus.jwt\", \"com.nike.cerberus.dao\"})\n+public class JwtService {\n+\n+  protected final Logger log = LoggerFactory.getLogger(getClass());\n+  private static final String PRINCIPAL_TYPE_CLAIM_NAME = \"principalType\";\n+  private static final String GROUP_CLAIM_NAME = \"groups\";\n+  private static final String IS_ADMIN_CLAIM_NAME = \"isAdmin\";\n+  private static final String REFRESH_COUNT_CLAIM_NAME = \"refreshCount\";\n+\n+  private final CerberusSigningKeyResolver signingKeyResolver;\n+  private final String environmentName;\n+  private final JwtBlocklistDao jwtBlocklistDao;\n+\n+  private HashSet<String> blocklist;\n+\n+  @Autowired\n+  public JwtService(\n+      CerberusSigningKeyResolver signingKeyResolver,\n+      @Value(\"cerberus.environmentName\") String environmentName,\n+      JwtBlocklistDao jwtBlocklistDao) {\n+    this.signingKeyResolver = signingKeyResolver;\n+    this.environmentName = environmentName;\n+    this.jwtBlocklistDao = jwtBlocklistDao;\n+    refreshBlocklist();\n+  }\n+\n+  /**\n+   * Generate JWT token\n+   *\n+   * @param cerberusJwtClaims Cerberus JWT claims\n+   * @return JWT token\n+   */\n+  public String generateJwtToken(CerberusJwtClaims cerberusJwtClaims) {\n+    CerberusJwtKeySpec cerberusJwtKeySpec = signingKeyResolver.resolveSigningKey();\n+    String jwtToken =\n+        Jwts.builder()\n+            .setHeaderParam(JwsHeader.KEY_ID, cerberusJwtKeySpec.getKid())\n+            .setId(cerberusJwtClaims.getId())\n+            .setIssuer(environmentName)\n+            .setSubject(cerberusJwtClaims.getPrincipal())\n+            .claim(PRINCIPAL_TYPE_CLAIM_NAME, cerberusJwtClaims.getPrincipalType())\n+            .claim(GROUP_CLAIM_NAME, cerberusJwtClaims.getGroups())\n+            .claim(IS_ADMIN_CLAIM_NAME, cerberusJwtClaims.getIsAdmin())\n+            .claim(REFRESH_COUNT_CLAIM_NAME, cerberusJwtClaims.getRefreshCount())\n+            .setExpiration(Date.from(cerberusJwtClaims.getExpiresTs().toInstant()))\n+            .setIssuedAt(Date.from(cerberusJwtClaims.getCreatedTs().toInstant()))\n+            .signWith(cerberusJwtKeySpec)\n+            .compact();\n+    return jwtToken;\n+  }\n+\n+  /**\n+   * Parse and validate JWT token\n+   *\n+   * @param token JWT token\n+   * @return Cerberus JWT claims\n+   */\n+  public Optional<CerberusJwtClaims> parseAndValidateToken(String token) {\n+    Jws<Claims> claimsJws;\n+    try {\n+      claimsJws =\n+          Jwts.parser()\n+              .requireIssuer(environmentName)\n+              .setSigningKeyResolver(signingKeyResolver)\n+              .parseClaimsJws(token);\n+    } catch (InvalidClaimException e) {\n+      log.warn(\"Invalid claim when parsing token: {}\", token, e);\n+      return Optional.empty();\n+    } catch (JwtException e) {\n+      log.warn(\"Error parsing JWT token: {}\", token, e);\n+      return Optional.empty();\n+    } catch (IllegalArgumentException e) {\n+      log.warn(\"Error parsing JWT token: {}\", token, e);\n+      return Optional.empty();\n+    }\n+    Claims claims = claimsJws.getBody();\n+    if (blocklist.contains(claims.getId())) {\n+      log.warn(\"This JWT token is blocklisted. ID: {}\", claims.getId());\n+      return Optional.empty();\n+    }\n+    String subject = claims.getSubject();\n+    CerberusJwtClaims cerberusJwtClaims =\n+        new CerberusJwtClaims()\n+            .setId(claims.getId())\n+            .setPrincipal(subject)\n+            .setExpiresTs(\n+                OffsetDateTime.ofInstant(\n+                    claims.getExpiration().toInstant(), ZoneId.systemDefault()))\n+            .setCreatedTs(\n+                OffsetDateTime.ofInstant(claims.getIssuedAt().toInstant(), ZoneId.systemDefault()))\n+            .setPrincipalType(claims.get(PRINCIPAL_TYPE_CLAIM_NAME, String.class))\n+            .setGroups(claims.get(GROUP_CLAIM_NAME, String.class))\n+            .setIsAdmin(claims.get(IS_ADMIN_CLAIM_NAME, Boolean.class))\n+            .setRefreshCount(claims.get(REFRESH_COUNT_CLAIM_NAME, Integer.class));\n+\n+    return Optional.of(cerberusJwtClaims);\n+  }\n+\n+  /** Refresh signing keys in {@link CerberusSigningKeyResolver} */\n+  public void refreshKeys() {\n+    signingKeyResolver.refresh();\n+  }\n+\n+  /** Refresh JWT blocklist */\n+  public void refreshBlocklist() {\n+    blocklist = jwtBlocklistDao.getBlocklist();\n+  }\n+\n+  /**\n+   * Revoke JWT\n+   *\n+   * @param id JWT ID\n+   * @param tokenExpires Expiration timestamp of the JWT\n+   */\n+  public void revokeToken(String id, OffsetDateTime tokenExpires) {\n+    blocklist.add(id);\n+    JwtBlocklistRecord jwtBlocklistRecord =\n+        new JwtBlocklistRecord().setId(id).setExpiresTs(tokenExpires);\n+    jwtBlocklistDao.addToBlocklist(jwtBlocklistRecord);\n+  }\n+\n+  /**\n+   * Delete JWT blocklist entries that have expired\n+   *\n+   * @return\n+   */\n+  @Transactional(\n+      isolation = READ_UNCOMMITTED // allow dirty reads so we don't block other threads\n+      )\n+  public int deleteExpiredTokens() {\n+    return jwtBlocklistDao.deleteExpiredTokens();\n+  }\n+\n+  /**\n+   * Return if the token looks like a JWT. Technically a JWT can have one dot but we don't allow it\n+   * here.\n+   *\n+   * @param token The token to examine\n+   * @return Does the token look like a JWT\n+   */\n+  public boolean isJwt(String token) {\n+    return StringUtils.countMatches(token, SEPARATOR_CHAR) == 2;\n+  }\n+}"
  },
  {
    "sha": "1379e5babd5d6b244a4df7e78f046d8245095f30",
    "filename": "cerberus-web/src/main/resources/cerberus.yaml",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/resources/cerberus.yaml",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/resources/cerberus.yaml",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/resources/cerberus.yaml?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -232,6 +232,21 @@ cerberus:\n       # Every hour\n       cronExpression: \"0 0 * ? * *\"\n \n+    # JWT\n+    jwtSecretRefreshJob:\n+      enabled: true\n+      # Every minute\n+      cronExpression: \"0 * * ? * *\"\n+\n+    jwtBlacklistCleanUpJob:\n+      enabled: true\n+      # Every 5 seconds\n+      cronExpression: \"0/5 * * ? * *\"\n+\n+    jwtBlacklistRefreshJob:\n+      enabled: true\n+      # Every minute\n+      cronExpression: \"0 * * ? * *\"\n \n     ################################################################################################\n     # This Job require auth.iam.kms.rootUserArn,adminRoleArn,cmsRoleArn to be configured"
  },
  {
    "sha": "c85f975fdaa79a494193a91d717ad0b999dea9cb",
    "filename": "cerberus-web/src/main/resources/com/nike/cerberus/mapper/JwtBlocklistMapper.xml",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/resources/com/nike/cerberus/mapper/JwtBlocklistMapper.xml",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/resources/com/nike/cerberus/mapper/JwtBlocklistMapper.xml",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/resources/com/nike/cerberus/mapper/JwtBlocklistMapper.xml?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!--\n+  ~ Copyright (c) 2019 Nike, Inc.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<!DOCTYPE mapper\n+        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n+        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n+<!--suppress SqlNoDataSourceInspection -->\n+<mapper namespace=\"com.nike.cerberus.mapper.JwtBlocklistMapper\">\n+\n+    <select id=\"getBlocklist\" resultType=\"String\">\n+    SELECT\n+      ID\n+    FROM\n+      JWT_BLOCKLIST\n+  </select>\n+\n+    <insert id=\"addToBlocklist\" parameterType=\"JwtBlocklistRecord\">\n+    INSERT INTO JWT_BLOCKLIST (\n+      ID,\n+      EXPIRES_TS\n+    )\n+    VALUES (\n+             #{record.id},\n+             #{record.expiresTs}\n+           )\n+  </insert>\n+\n+    <delete id=\"deleteExpiredTokens\">\n+    DELETE FROM JWT_BLOCKLIST WHERE EXPIRES_TS &lt; CURRENT_TIME\n+  </delete>\n+</mapper>\n\\ No newline at end of file"
  },
  {
    "sha": "f4f160566330c9c802414a6bbae242cd86247bc5",
    "filename": "cerberus-web/src/main/resources/com/nike/cerberus/migration/V1.7.0.0__jwt_blocklist.sql",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/Nike-Inc/cerberus/blob/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/resources/com/nike/cerberus/migration/V1.7.0.0__jwt_blocklist.sql",
    "raw_url": "https://github.com/Nike-Inc/cerberus/raw/bce21079795cabfc8483109cc4fb15112481330b/cerberus-web/src/main/resources/com/nike/cerberus/migration/V1.7.0.0__jwt_blocklist.sql",
    "contents_url": "https://api.github.com/repos/Nike-Inc/cerberus/contents/cerberus-web/src/main/resources/com/nike/cerberus/migration/V1.7.0.0__jwt_blocklist.sql?ref=bce21079795cabfc8483109cc4fb15112481330b",
    "patch": "@@ -0,0 +1,15 @@\n+###\n+#\n+# Create Table for JWT Blocklist\n+#\n+###\n+\n+CREATE TABLE JWT_BLOCKLIST(\n+  ID CHAR(36) NOT NULL,\n+  EXPIRES_TS DATETIME NOT NULL,\n+  PRIMARY KEY (ID)\n+)\n+  ENGINE = InnoDB DEFAULT CHARSET = utf8;\n+\n+ALTER TABLE JWT_BLOCKLIST\n+  ADD INDEX `IX_JWT_BLOCKLIST_EXPIRES_TS` (EXPIRES_TS);\n\\ No newline at end of file"
  }
]
