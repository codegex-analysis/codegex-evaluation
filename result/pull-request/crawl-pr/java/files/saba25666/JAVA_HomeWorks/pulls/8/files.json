[
  {
    "sha": "e96534fb27b68192f27f985d3879e173ec77adb8",
    "filename": ".idea/uiDesigner.xml",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/saba25666/JAVA_HomeWorks/blob/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/.idea/uiDesigner.xml",
    "raw_url": "https://github.com/saba25666/JAVA_HomeWorks/raw/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/.idea/uiDesigner.xml",
    "contents_url": "https://api.github.com/repos/saba25666/JAVA_HomeWorks/contents/.idea/uiDesigner.xml?ref=c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33",
    "patch": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"Palette2\">\n+    <group name=\"Swing\">\n+      <item class=\"com.intellij.uiDesigner.HSpacer\" tooltip-text=\"Horizontal Spacer\" icon=\"/com/intellij/uiDesigner/icons/hspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"1\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"com.intellij.uiDesigner.VSpacer\" tooltip-text=\"Vertical Spacer\" icon=\"/com/intellij/uiDesigner/icons/vspacer.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"1\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+      <item class=\"javax.swing.JPanel\" icon=\"/com/intellij/uiDesigner/icons/panel.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollPane\" icon=\"/com/intellij/uiDesigner/icons/scrollPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"7\" hsize-policy=\"7\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JButton\" icon=\"/com/intellij/uiDesigner/icons/button.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"0\" fill=\"1\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Button\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JRadioButton\" icon=\"/com/intellij/uiDesigner/icons/radioButton.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"RadioButton\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JCheckBox\" icon=\"/com/intellij/uiDesigner/icons/checkBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"3\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"CheckBox\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JLabel\" icon=\"/com/intellij/uiDesigner/icons/label.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"8\" fill=\"0\" />\n+        <initial-values>\n+          <property name=\"text\" value=\"Label\" />\n+        </initial-values>\n+      </item>\n+      <item class=\"javax.swing.JTextField\" icon=\"/com/intellij/uiDesigner/icons/textField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JPasswordField\" icon=\"/com/intellij/uiDesigner/icons/passwordField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JFormattedTextField\" icon=\"/com/intellij/uiDesigner/icons/formattedTextField.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\">\n+          <preferred-size width=\"150\" height=\"-1\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextArea\" icon=\"/com/intellij/uiDesigner/icons/textArea.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTextPane\" icon=\"/com/intellij/uiDesigner/icons/textPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JEditorPane\" icon=\"/com/intellij/uiDesigner/icons/editorPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JComboBox\" icon=\"/com/intellij/uiDesigner/icons/comboBox.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"2\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JTable\" icon=\"/com/intellij/uiDesigner/icons/table.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JList\" icon=\"/com/intellij/uiDesigner/icons/list.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"2\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTree\" icon=\"/com/intellij/uiDesigner/icons/tree.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"150\" height=\"50\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JTabbedPane\" icon=\"/com/intellij/uiDesigner/icons/tabbedPane.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSplitPane\" icon=\"/com/intellij/uiDesigner/icons/splitPane.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"3\" hsize-policy=\"3\" anchor=\"0\" fill=\"3\">\n+          <preferred-size width=\"200\" height=\"200\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JSpinner\" icon=\"/com/intellij/uiDesigner/icons/spinner.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"true\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSlider\" icon=\"/com/intellij/uiDesigner/icons/slider.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"8\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JSeparator\" icon=\"/com/intellij/uiDesigner/icons/separator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"6\" anchor=\"0\" fill=\"3\" />\n+      </item>\n+      <item class=\"javax.swing.JProgressBar\" icon=\"/com/intellij/uiDesigner/icons/progressbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JToolBar\" icon=\"/com/intellij/uiDesigner/icons/toolbar.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"6\" anchor=\"0\" fill=\"1\">\n+          <preferred-size width=\"-1\" height=\"20\" />\n+        </default-constraints>\n+      </item>\n+      <item class=\"javax.swing.JToolBar$Separator\" icon=\"/com/intellij/uiDesigner/icons/toolbarSeparator.png\" removable=\"false\" auto-create-binding=\"false\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"0\" hsize-policy=\"0\" anchor=\"0\" fill=\"1\" />\n+      </item>\n+      <item class=\"javax.swing.JScrollBar\" icon=\"/com/intellij/uiDesigner/icons/scrollbar.png\" removable=\"false\" auto-create-binding=\"true\" can-attach-label=\"false\">\n+        <default-constraints vsize-policy=\"6\" hsize-policy=\"0\" anchor=\"0\" fill=\"2\" />\n+      </item>\n+    </group>\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "ca71904f2f98a52316fcd99638ad57b37416cf74",
    "filename": "out/production/JAVA_HomeWorks/HW7/Cat.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/saba25666/JAVA_HomeWorks/blob/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/Cat.class",
    "raw_url": "https://github.com/saba25666/JAVA_HomeWorks/raw/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/Cat.class",
    "contents_url": "https://api.github.com/repos/saba25666/JAVA_HomeWorks/contents/out/production/JAVA_HomeWorks/HW7/Cat.class?ref=c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33"
  },
  {
    "sha": "3b6ea918106e8357dea06737dd45b645e7a94a88",
    "filename": "out/production/JAVA_HomeWorks/HW7/EditWindow.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/saba25666/JAVA_HomeWorks/blob/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/EditWindow.class",
    "raw_url": "https://github.com/saba25666/JAVA_HomeWorks/raw/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/EditWindow.class",
    "contents_url": "https://api.github.com/repos/saba25666/JAVA_HomeWorks/contents/out/production/JAVA_HomeWorks/HW7/EditWindow.class?ref=c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33"
  },
  {
    "sha": "dc4ae2771190a8107fc9b4e13ed01886e8ab1707",
    "filename": "out/production/JAVA_HomeWorks/HW7/MainClass.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/saba25666/JAVA_HomeWorks/blob/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/MainClass.class",
    "raw_url": "https://github.com/saba25666/JAVA_HomeWorks/raw/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/MainClass.class",
    "contents_url": "https://api.github.com/repos/saba25666/JAVA_HomeWorks/contents/out/production/JAVA_HomeWorks/HW7/MainClass.class?ref=c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33"
  },
  {
    "sha": "0eabea678831794a7be6da0dfacecfc353f386a6",
    "filename": "out/production/JAVA_HomeWorks/HW7/MainWindow.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/saba25666/JAVA_HomeWorks/blob/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/MainWindow.class",
    "raw_url": "https://github.com/saba25666/JAVA_HomeWorks/raw/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/MainWindow.class",
    "contents_url": "https://api.github.com/repos/saba25666/JAVA_HomeWorks/contents/out/production/JAVA_HomeWorks/HW7/MainWindow.class?ref=c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33"
  },
  {
    "sha": "c686b8fefa8d189a05f40d31318432c377e5531a",
    "filename": "out/production/JAVA_HomeWorks/HW7/Plate.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/saba25666/JAVA_HomeWorks/blob/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/Plate.class",
    "raw_url": "https://github.com/saba25666/JAVA_HomeWorks/raw/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/out/production/JAVA_HomeWorks/HW7/Plate.class",
    "contents_url": "https://api.github.com/repos/saba25666/JAVA_HomeWorks/contents/out/production/JAVA_HomeWorks/HW7/Plate.class?ref=c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33"
  },
  {
    "sha": "b73290ce2d836cd83716bff743fd8368afc7ff08",
    "filename": "src/HW8/TicTacToe.java",
    "status": "added",
    "additions": 519,
    "deletions": 0,
    "changes": 519,
    "blob_url": "https://github.com/saba25666/JAVA_HomeWorks/blob/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/src/HW8/TicTacToe.java",
    "raw_url": "https://github.com/saba25666/JAVA_HomeWorks/raw/c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33/src/HW8/TicTacToe.java",
    "contents_url": "https://api.github.com/repos/saba25666/JAVA_HomeWorks/contents/src/HW8/TicTacToe.java?ref=c52b2a6d38643a3b6d2649a9a3f87c6b1e32bc33",
    "patch": "@@ -0,0 +1,519 @@\n+package HW8;\n+\n+import javax.swing.*;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.ChangeListener;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.Collection;\n+import java.util.Random;\n+import java.util.Set;\n+\n+import static java.util.Map.*;\n+\n+public class TicTacToe {\n+    public static void main(String[] args) {\n+    }\n+\n+    public static class StartNewGameWindow extends JFrame {\n+\n+        private final GameWindow gameWindow;\n+        private static final int WIN_HEIGHT = 230;\n+        private static final int WIN_WIDTH = 350;\n+        private static final int MIN_WIN_LEN = 3;\n+        private static final int MIN_FIELD_SIZE = 3;\n+        private static final int MAX_WIN_LEN = 10;\n+        private static final int MAX_FIELD_SIZE = 10;\n+        private static final String STR_WIN_LEN = \"Winning Len: \";\n+        private static final String STR_FILED_SIZE = \"Field Size: \";\n+\n+        private final JRadioButton jrbHumVsAi = new JRadioButton(\"Human vs Ai\", true);\n+        private final JRadioButton jrbHumVsHum = new JRadioButton(\"Human vs Human\");\n+        private final ButtonGroup gameMode = new ButtonGroup();\n+\n+        private JSlider slFieldSize;\n+        private JSlider slWinLeght;\n+\n+\n+        public StartNewGameWindow(GameWindow gameWindow) {\n+            this.gameWindow = gameWindow;\n+            setTitle(\"new game param!\");\n+            setSize(WIN_WIDTH, WIN_HEIGHT);\n+            setLocationRelativeTo ( null );\n+\n+            Rectangle gameWindowBounds = gameWindow.getBounds();\n+            int posX = (int) (gameWindowBounds.getCenterX() - WIN_WIDTH/2);\n+            int posY = (int) (gameWindowBounds.getCenterY() - WIN_HEIGHT/2);\n+\n+            setLocation(posX, posY);\n+            setLayout(new GridLayout(10,1));\n+\n+            addGameControlsMode();\n+            addGameControlsFieldWinLen();\n+\n+            JButton btnStartGame = new JButton(\"Start a game\");\n+            btnStartGame.addActionListener(e -> btnStartGame());\n+            add(btnStartGame);\n+\n+        }\n+\n+        void btnStartGame() {\n+            int gameMode;\n+            if (!jrbHumVsAi.isSelected()) {\n+                gameMode = Map.MODE_H_V_H;\n+            } else {\n+                gameMode = Map.MODE_H_V_A;\n+            }\n+\n+            int fieldSize = slFieldSize.getValue();\n+            int winLen = slWinLeght.getValue();\n+            gameWindow.startNewGame(gameMode, fieldSize, fieldSize, winLen);\n+            setVisible(false);\n+        }\n+\n+        private void addGameControlsMode() {\n+            add(new JLabel(\"Choose gaming mode\"));\n+            gameMode.add(jrbHumVsAi);\n+            gameMode.add(jrbHumVsHum);\n+            add(jrbHumVsAi);\n+            add(jrbHumVsHum);\n+        }\n+\n+        void addGameControlsFieldWinLen() {\n+            add(new JLabel(\"Choose field size\"));\n+            final JLabel lblFieldSize = new JLabel(STR_FILED_SIZE + MIN_FIELD_SIZE);\n+            add(lblFieldSize);\n+\n+            slFieldSize = new JSlider(MIN_FIELD_SIZE, MAX_FIELD_SIZE, MIN_WIN_LEN);\n+            slFieldSize.addChangeListener(new ChangeListener() {\n+                @Override\n+                public void stateChanged(ChangeEvent e) {\n+                    int currentFieldSize = slFieldSize.getValue();\n+                    lblFieldSize.setText(STR_FILED_SIZE + currentFieldSize);\n+                    slWinLeght.setMaximum(currentFieldSize);\n+                }\n+            });\n+            add(slFieldSize);\n+\n+            add(new JLabel(\"Choose win len: \"));\n+            final JLabel lblWinLen = new JLabel(STR_WIN_LEN + MIN_WIN_LEN);\n+            add(lblWinLen);\n+\n+            slWinLeght = new JSlider(MIN_WIN_LEN, MAX_WIN_LEN, MIN_WIN_LEN);\n+            slWinLeght.addChangeListener(new ChangeListener() {\n+                @Override\n+                public void stateChanged(ChangeEvent e) {\n+                    lblWinLen.setText(STR_WIN_LEN + slWinLeght.getValue());\n+                }\n+            });\n+            add(slWinLeght);\n+\n+        }\n+\n+\n+\n+    }\n+\n+    public static class Map extends JPanel {\n+\n+        public static final int MODE_H_V_A = 0;\n+        public static final int MODE_H_V_H = 1;\n+        private static final char PLAYER_DOT = 'X';\n+        private static final char AI_DOT = 'O';\n+        private static final char EMPTY_DOT = '.';\n+        private static final int DELTA_DRAW = 10;\n+        private static final Random random = new Random();\n+        private final GameOverWindow gameOverWindow;\n+\n+        char[][] field;\n+        int fieldSizeX;\n+        int fieldSizeY;\n+        int winLenght;\n+        boolean gameOver;\n+        boolean isWait;\n+        int mode;\n+        int cellHeight;\n+        int cellWidth;\n+        boolean isInitialized = false;\n+        boolean stepPlayer2;\n+\n+        Map() {\n+            setBackground(Color.ORANGE);\n+            addMouseListener(new MouseAdapter() {\n+                @Override\n+                public void mouseReleased(MouseEvent e) {\n+                    update(e);\n+                }\n+            });\n+            gameOverWindow = new GameOverWindow();\n+        }\n+\n+        void playerStep(int y,int x, char cymbol) {\n+            setSym(y, x, cymbol);\n+        }\n+\n+        void aiStep() {\n+            //Ищкем выигрышный ход компьютера\n+            for (int i = 0; i < fieldSizeY; i++)\n+                for (int j = 0; j < fieldSizeX; j++) {\n+                    if (isCellValid(i, j)) {\n+                        setSym(i, j, AI_DOT);\n+                        if (checkWin(AI_DOT)) return;\n+                        setSym(i, j, EMPTY_DOT);\n+                    }\n+                }\n+            //Проверим игрока а нет ли у него будующего выигрошного хода\n+            for (int i = 0; i < fieldSizeY; i++)\n+                for (int j = 0; j < fieldSizeX; j++) {\n+                    if (isCellValid(i, j)) {\n+                        setSym(i, j, PLAYER_DOT);\n+                        if (checkWin(PLAYER_DOT)) {\n+                            setSym(i, j, AI_DOT);\n+                            return;\n+                        }\n+                        setSym(i, j, EMPTY_DOT);\n+                    }\n+                }\n+            //Если ничего выигышного нет, то делаем как на уроке\n+            int x;\n+            int y;\n+            do {\n+                x = random.nextInt(fieldSizeX);\n+                y = random.nextInt(fieldSizeY);\n+            } while (!isCellValid(y, x));\n+            setSym(y, x, AI_DOT);\n+        }\n+\n+        void update(MouseEvent e) {\n+            if (!gameOver && !isWait) {\n+                int cellX = e.getX()/cellWidth;\n+                int cellY = e.getY()/cellHeight;\n+                if (mode == 0) modePlayAI(cellY, cellX);\n+                else modeTwoPlayer(cellY, cellX);\n+            }\n+        }\n+\n+        // Режим двух игроков\n+        void modeTwoPlayer(int y, int x) {\n+            char cymbal =  stepPlayer2 ? AI_DOT : PLAYER_DOT;\n+            playerStep(y,x,cymbal);\n+            repaint();\n+            if (checkWin(cymbal)) {\n+                gameOverWindow.setMessage(stepPlayer2 ? \"Second player WIN!!\" : \"First player WIN!!\",this);\n+                return;\n+            }\n+            if (isFuelFull()) {\n+                gameOverWindow.setMessage(\"DRAW!\",this);\n+                return;\n+            }\n+            stepPlayer2 = !stepPlayer2;\n+        }\n+\n+        // Режим против компьютера\n+        void modePlayAI(int y, int x) {\n+            playerStep(y,x,PLAYER_DOT);\n+            repaint();\n+            if (checkWin(PLAYER_DOT)) {\n+                gameOverWindow.setMessage(\"PLAYER WIN!\",this);\n+                return;\n+            }\n+            if (isFuelFull()) {\n+                gameOverWindow.setMessage(\"DRAW!\",this);\n+                return;\n+            }\n+            isWait = true;\n+            aiStep();\n+            isWait = false;\n+            repaint();\n+            if (checkWin(AI_DOT)) {\n+                gameOverWindow.setMessage(\"SkyNet WIN!\",this);\n+                return;\n+            }\n+            if (isFuelFull()) {\n+                gameOverWindow.setMessage(\"DRAW!\",this);\n+                return;\n+            }\n+        }\n+\n+        @Override\n+        protected void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+            render(g);\n+        }\n+\n+        void startNewGame(int mode, int filedSizeX, int filedSizeY, int winLen) {\n+            System.out.println(mode + \" \" + filedSizeX + \" \" + winLen);\n+            gameOver = false;\n+            stepPlayer2 = false;\n+            isWait = false;\n+            this.fieldSizeX = filedSizeX;\n+            this.fieldSizeY = filedSizeY;\n+            this.winLenght = winLen;\n+            this.mode = mode;\n+            field = new char[filedSizeY][filedSizeX];\n+            initFields();\n+            isInitialized = true;\n+            repaint();\n+        }\n+\n+        void render(Graphics g) {\n+            if(!isInitialized) return;\n+\n+            int panelWidth = getWidth();\n+            int panelHeight = getHeight();\n+\n+            Graphics2D g2 = (Graphics2D) g;\n+            g2.setStroke(new BasicStroke(3));\n+\n+            cellWidth = panelWidth/fieldSizeY;\n+            cellHeight = panelHeight/fieldSizeX;\n+\n+            for (int i = 0; i < fieldSizeY; i++) {\n+                int y = i * cellHeight;\n+                g.drawLine(0, y, panelWidth, y);\n+            }\n+\n+            for (int i = 0; i < fieldSizeX; i++) {\n+                int x = i * cellWidth;\n+                g.drawLine(x,0,x, panelHeight);\n+            }\n+\n+            g.setColor(Color.DARK_GRAY);\n+            for (int i = 0; i < fieldSizeY; i++) {\n+                for (int j = 0; j < fieldSizeX; j++) {\n+                    if (field[j][i] != EMPTY_DOT) {\n+                        if (field[j][i] == PLAYER_DOT) {\n+                            // Рисуем крестик\n+                            g.drawLine((i * cellWidth) + DELTA_DRAW, (j * cellHeight)+ DELTA_DRAW, (i + 1) * cellWidth - DELTA_DRAW, (j + 1) * cellHeight - DELTA_DRAW);\n+                            g.drawLine((i + 1) * cellWidth - DELTA_DRAW, (j * cellHeight) + DELTA_DRAW , (i * cellWidth) + DELTA_DRAW, (j + 1) * cellHeight - DELTA_DRAW);\n+                        }\n+                        if (field[j][i] == AI_DOT) {\n+                            // Рисуем нолик\n+                            g.drawOval((i * cellWidth) + DELTA_DRAW, (j * cellHeight) + DELTA_DRAW, cellWidth - DELTA_DRAW * 2, cellHeight - DELTA_DRAW * 2);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        private void initFields() {\n+            for (int i = 0; i < fieldSizeY; i++) {\n+                for (int j = 0; j < fieldSizeX; j++) {\n+                    field[i][j] = EMPTY_DOT;\n+                }\n+            }\n+        }\n+\n+        private void setSym(int y, int x, char sym) {\n+            field[y][x] = sym;\n+        }\n+\n+        // проверка линии\n+        private boolean checkLine(int y, int x, int vy, int vx, char sym) {\n+            int wayX = x + (winLenght - 1) * vx;\n+            int wayY = y + (winLenght - 1) * vy;\n+            if (wayX < 0 || wayY < 0 || wayX > fieldSizeX - 1 || wayY > fieldSizeY - 1) return false;\n+            for (int i = 0; i < winLenght; i++) {\n+                int itemY = y + i * vy;\n+                int itemX = x + i * vx;\n+                if (field[itemY][itemX] != sym) return false;\n+            }\n+            return true;\n+        }\n+\n+        private boolean checkWin(char sym) {\n+            for (int i = 0; i < fieldSizeY; i++) {\n+                for (int j = 0; j < fieldSizeX; j++) {\n+                    if (checkLine(i, j, 0, 1,  sym)) return true;   // проверим линию по х\n+                    if (checkLine(i, j, 1, 1,  sym)) return true;   // проверим по диагонали х у\n+                    if (checkLine(i, j, 1, 0,  sym)) return true;   // проверим линию по у\n+                    if (checkLine(i, j, -1, 1, sym)) return true;  // проверим по диагонали х -у\n+                }\n+            }\n+            return false;\n+        }\n+\n+        boolean isFuelFull() {\n+            for (int i = 0; i < fieldSizeY; i++) {\n+                for (int j = 0; j < fieldSizeX; j++) {\n+                    if (field[i][j] == EMPTY_DOT) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            return true;\n+        }\n+\n+        boolean isCellValid(int y, int x) {\n+            if (x < 0 || y < 0 || x > fieldSizeX - 1 || y > fieldSizeY - 1) {\n+                return false;\n+            }\n+            return field[y][x] == EMPTY_DOT;\n+        }\n+    }\n+\n+    public static class GameWindow extends JFrame {\n+\n+            // 1 данные основного окна\n+            private static final int WIN_HEIGHT = 555;\n+            private static final int WIN_WIDTH = 507;\n+            private static final int WIN_POS_X = 800;\n+            private static final int WIN_POS_Y = 300;\n+\n+            private static java.util.Map field;\n+            private static StartNewGameWindow startNewGameWindow;\n+\n+            public GameWindow() {\n+\n+                setTitle(\"TicTacToe\");\n+                setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+                setSize(WIN_WIDTH, WIN_HEIGHT);\n+                setLocationRelativeTo ( null );\n+                setResizable(false);\n+\n+                JPanel bottomPanel = new JPanel(new GridLayout(1, 2));\n+\n+                JButton btnNewGame = new JButton(\"Start new game\");\n+                JButton btnExit = new JButton(\"Exit\");\n+\n+                startNewGameWindow = new StartNewGameWindow(this);\n+\n+                bottomPanel.add(btnNewGame);\n+                bottomPanel.add(btnExit);\n+\n+                btnNewGame.addActionListener(new ActionListener() {\n+                    @Override\n+                    public void actionPerformed(ActionEvent e) {\n+                        startNewGameWindow.setVisible(true);\n+                    }\n+                });\n+\n+                btnExit.addActionListener(new ActionListener() {\n+                    @Override\n+                    public void actionPerformed(ActionEvent e) {\n+                        System.exit(0);\n+                    }\n+                });\n+\n+                field = new java.util.Map() {\n+                    @Override\n+                    public int size() {\n+                        return 0;\n+                    }\n+\n+                    @Override\n+                    public boolean isEmpty() {\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public boolean containsKey(Object key) {\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public boolean containsValue(Object value) {\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public Object get(Object key) {\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public Object put(Object key, Object value) {\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public Object remove(Object key) {\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public void putAll(java.util.Map m) {\n+\n+                    }\n+\n+                    @Override\n+                    public void clear() {\n+\n+                    }\n+\n+                    @Override\n+                    public Set keySet() {\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public Collection values() {\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public Set<Entry> entrySet() {\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public boolean equals(Object o) {\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public int hashCode() {\n+                        return 0;\n+                    }\n+                };\n+                add((Component) field, BorderLayout.CENTER);\n+\n+                add(bottomPanel, BorderLayout.SOUTH);\n+                setVisible(true);\n+\n+            }\n+\n+\n+             void startNewGame(int mode, int filedSizeX, int filedSizeY, int winLen) {\n+\n+\n+        }\n+\n+        }\n+\n+    public static class GameOverWindow extends JDialog {\n+\n+        private JLabel jLabel = new JLabel();\n+\n+        public GameOverWindow() {\n+\n+            add(jLabel, BorderLayout.CENTER);\n+            JButton ok = new JButton(\"ok\");\n+            ok.addActionListener(new ActionListener() {\n+\n+\n+                public void actionPerformed(ActionEvent event) {\n+                    setVisible(false);\n+                }\n+            });\n+\n+            // Кнопка ОК помещается в нижнюю часть окна.\n+            JPanel panel = new JPanel();\n+            panel.add(ok);\n+            add(panel, BorderLayout.SOUTH);\n+            setSize(260, 160);\n+            setLocationRelativeTo ( null );\n+\n+        }\n+\n+        public void setMessage(String message, Map map) {\n+            map.gameOver = true;\n+            this.setVisible(true);\n+            jLabel.setText(message);\n+        }\n+\n+    }\n+}"
  }
]
