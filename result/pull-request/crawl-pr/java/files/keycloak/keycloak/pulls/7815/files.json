[
  {
    "sha": "2cd0fc2465f5ee94d6e36681a923e53b35274031",
    "filename": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/keycloak/keycloak/blob/2e0d2bcfb14cd8309e70aa9ffea5384e84c64c55/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/2e0d2bcfb14cd8309e70aa9ffea5384e84c64c55/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java?ref=2e0d2bcfb14cd8309e70aa9ffea5384e84c64c55",
    "patch": "@@ -338,7 +338,8 @@ public boolean removeRole(RoleModel role) {\n         }\n         String compositeRoleTable = JpaUtils.getTableNameForNativeQuery(\"COMPOSITE_ROLE\", em);\n         em.createNativeQuery(\"delete from \" + compositeRoleTable + \" where CHILD_ROLE = :role\").setParameter(\"role\", roleEntity).executeUpdate();\n-        realm.getClientsStream().forEach(c -> c.deleteScopeMapping(role));\n+        String clientScopeMapping = JpaUtils.getTableNameForNativeQuery(\"SCOPE_MAPPING\", em);\n+        em.createNativeQuery(\"delete from \" + clientScopeMapping + \" where ROLE_ID = :role\").setParameter(\"role\", roleEntity).executeUpdate();\n         em.createNamedQuery(\"deleteClientScopeRoleMappingByRole\").setParameter(\"role\", roleEntity).executeUpdate();\n         session.groups().preRemove(realm, role);\n "
  },
  {
    "sha": "488f24f1b3ca8560c0a2c66418df76a0cba2bfea",
    "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ClientTest.java",
    "status": "modified",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/keycloak/keycloak/blob/2e0d2bcfb14cd8309e70aa9ffea5384e84c64c55/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ClientTest.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/2e0d2bcfb14cd8309e70aa9ffea5384e84c64c55/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ClientTest.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/ClientTest.java?ref=2e0d2bcfb14cd8309e70aa9ffea5384e84c64c55",
    "patch": "@@ -587,6 +587,57 @@ public void scopes() {\n         Assert.assertNames(scopesResource.clientLevel(accountMgmtId).listEffective());\n     }\n \n+    @Test\n+    public void scopesRoleRemoval() {\n+        // clientA to test scope mappins\n+        Response response = realm.clients().create(ClientBuilder.create().clientId(\"clientA\").fullScopeEnabled(false).build());\n+        String idA = ApiUtil.getCreatedId(response);\n+        getCleanup().addClientUuid(idA);\n+        response.close();\n+        assertAdminEvents.poll();\n+\n+        // clientB to create a client role for clientA\n+        response = realm.clients().create(ClientBuilder.create().clientId(\"clientB\").fullScopeEnabled(false).build());\n+        String idB = ApiUtil.getCreatedId(response);\n+        getCleanup().addClientUuid(idB);\n+        response.close();\n+        assertAdminEvents.poll();\n+\n+        RoleMappingResource scopesResource = realm.clients().get(idA).getScopeMappings();\n+\n+        // create a realm role and a role in clientB\n+        RoleRepresentation realmRoleRep = RoleBuilder.create().name(\"realm-role\").build();\n+        realm.roles().create(realmRoleRep);\n+        assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.roleResourcePath(realmRoleRep.getName()), realmRoleRep, ResourceType.REALM_ROLE);\n+        RoleRepresentation clientBRoleRep = RoleBuilder.create().name(\"clientB-role\").build();\n+        realm.clients().get(idB).roles().create(clientBRoleRep);\n+        assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.clientRoleResourcePath(idB, clientBRoleRep.getName()), clientBRoleRep, ResourceType.CLIENT_ROLE);\n+\n+        // assing to clientA both roles to the scope mappings\n+        realmRoleRep = realm.roles().get(realmRoleRep.getName()).toRepresentation();\n+        clientBRoleRep = realm.clients().get(idB).roles().get(clientBRoleRep.getName()).toRepresentation();\n+        scopesResource.realmLevel().add(Collections.singletonList(realmRoleRep));\n+        assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.clientScopeMappingsRealmLevelPath(idA), Collections.singletonList(realmRoleRep), ResourceType.REALM_SCOPE_MAPPING);\n+        scopesResource.clientLevel(idB).add(Collections.singletonList(clientBRoleRep));\n+        assertAdminEvents.assertEvent(realmId, OperationType.CREATE, AdminEventPaths.clientScopeMappingsClientLevelPath(idA, idB), Collections.singletonList(clientBRoleRep), ResourceType.CLIENT_SCOPE_MAPPING);\n+\n+        // assert the roles are there\n+        Assert.assertNames(scopesResource.realmLevel().listAll(), realmRoleRep.getName());\n+        Assert.assertNames(scopesResource.clientLevel(idB).listAll(), clientBRoleRep.getName());\n+\n+        // delete realm role and check everything is refreshed ok\n+        realm.roles().deleteRole(realmRoleRep.getName());\n+        assertAdminEvents.assertEvent(realmId, OperationType.DELETE, AdminEventPaths.roleResourcePath(realmRoleRep.getName()), ResourceType.REALM_ROLE);\n+        Assert.assertNames(scopesResource.realmLevel().listAll());\n+        Assert.assertNames(scopesResource.clientLevel(idB).listAll(), clientBRoleRep.getName());\n+\n+        // delete client role and check everything is refreshed ok\n+        realm.clients().get(idB).roles().deleteRole(clientBRoleRep.getName());\n+        assertAdminEvents.assertEvent(realmId, OperationType.DELETE, AdminEventPaths.clientRoleResourcePath(idB, clientBRoleRep.getName()), ResourceType.CLIENT_ROLE);\n+        Assert.assertNames(scopesResource.realmLevel().listAll());\n+        Assert.assertNames(scopesResource.clientLevel(idB).listAll());\n+    }\n+\n     public void protocolMappersTest(String clientDbId, ProtocolMappersResource mappersResource) {\n         // assert default mappers found\n         List<ProtocolMapperRepresentation> protocolMappers = mappersResource.getMappers();"
  }
]
