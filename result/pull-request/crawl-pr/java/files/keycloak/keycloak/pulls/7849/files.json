[
  {
    "sha": "111b42ddb4419a3af980a81c0de07587f5f886cb",
    "filename": "core/src/main/java/org/keycloak/Config.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/core/src/main/java/org/keycloak/Config.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/core/src/main/java/org/keycloak/Config.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/core/src/main/java/org/keycloak/Config.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -75,7 +75,7 @@ public Scope scope(String... scope) {\n \n     public static class SystemPropertiesScope implements Scope {\n \n-        private String prefix;\n+        protected String prefix;\n \n         public SystemPropertiesScope(String prefix) {\n             this.prefix = prefix;"
  },
  {
    "sha": "c5a3b4770c6978f4d837521def10ce77712fd562",
    "filename": "testsuite/model/pom.xml",
    "status": "modified",
    "additions": 29,
    "deletions": 2,
    "changes": 31,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/pom.xml",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/pom.xml",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/pom.xml?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -30,7 +30,7 @@\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n-            <scope>test</scope>\n+            <scope>compile</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.hamcrest</groupId>\n@@ -111,6 +111,26 @@\n                     </systemPropertyVariables>\n                 </configuration>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                        <configuration>\n+                            <target>\n+                                <delete>\n+                                    <fileset dir=\"${project.build.directory}\" includes=\"map-*.json\"/>\n+                                    <fileset dir=\"${project.build.directory}\" includes=\"map/**/*.json\"/>\n+                                </delete>\n+                            </target>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>                        \n         </plugins>\n     </build>\n     \n@@ -174,7 +194,14 @@\n         <profile>\n             <id>map+infinispan</id>\n             <properties>\n-                <keycloak.model.parameters>Infinispan,Map,ConcurrentHashMapStorage</keycloak.model.parameters>\n+                <keycloak.model.parameters>Infinispan,Jpa,Map,ConcurrentHashMapStorage</keycloak.model.parameters>\n+            </properties>\n+        </profile>\n+\n+        <profile>\n+            <id>map</id>\n+            <properties>\n+                <keycloak.model.parameters>Jpa,Map,ConcurrentHashMapStorage</keycloak.model.parameters>\n             </properties>\n         </profile>\n     </profiles>"
  },
  {
    "sha": "21445f5ba6a0b60591f930722081430b9d5ef285",
    "filename": "testsuite/model/src/main/java/org/keycloak/testsuite/model/Config.java",
    "status": "added",
    "additions": 156,
    "deletions": 0,
    "changes": 156,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/main/java/org/keycloak/testsuite/model/Config.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/main/java/org/keycloak/testsuite/model/Config.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/main/java/org/keycloak/testsuite/model/Config.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.testsuite.model;\n+\n+import org.keycloak.Config.ConfigProvider;\n+import org.keycloak.Config.Scope;\n+import org.keycloak.Config.SystemPropertiesScope;\n+import org.keycloak.common.util.StringPropertyReplacer;\n+import org.keycloak.common.util.SystemEnvProperties;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class Config implements ConfigProvider {\n+\n+    private final Properties systemProperties = new SystemEnvProperties();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    public class SpiConfig {\n+\n+        private final String prefix;\n+\n+        public SpiConfig(String prefix) {\n+            this.prefix = prefix;\n+        }\n+\n+        public ProviderConfig provider(String provider) {\n+            return new ProviderConfig(this, prefix + provider + \".\");\n+        }\n+\n+        public SpiConfig defaultProvider(String defaultProviderId) {\n+            return config(\"provider\", defaultProviderId);\n+        }\n+\n+        public SpiConfig config(String key, String value) {\n+            if (value == null) {\n+                properties.remove(prefix + key);\n+            } else {\n+                properties.put(prefix + key, value);\n+            }\n+            return this;\n+        }\n+\n+        public SpiConfig spi(String spiName) {\n+            return new SpiConfig(spiName + \".\");\n+        }\n+    }\n+\n+    public class ProviderConfig {\n+\n+        private final SpiConfig spiConfig;\n+        private final String prefix;\n+\n+        public ProviderConfig(SpiConfig spiConfig, String prefix) {\n+            this.spiConfig = spiConfig;\n+            this.prefix = prefix;\n+        }\n+\n+        public ProviderConfig config(String key, String value) {\n+            if (value == null) {\n+                properties.remove(prefix + key);\n+            } else {\n+                properties.put(prefix + key, value);\n+            }\n+            return this;\n+        }\n+\n+        public ProviderConfig provider(String provider) {\n+            return spiConfig.provider(provider);\n+        }\n+\n+        public SpiConfig spi(String spiName) {\n+            return new SpiConfig(spiName + \".\");\n+        }\n+\n+    }\n+\n+    private class MapConfigScope extends SystemPropertiesScope {\n+\n+        public MapConfigScope(String prefix) {\n+            super(prefix);\n+        }\n+\n+        @Override\n+        public String get(String key, String defaultValue) {\n+            String v = replaceProperties(properties.get(prefix + key));\n+            if (v == null || v.isEmpty()) {\n+                v = System.getProperty(\"keycloak.\" + prefix + key, defaultValue);\n+            }\n+            return v != null && ! v.isEmpty() ? v : null;\n+        }\n+\n+        @Override\n+        public Scope scope(String... scope) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(prefix).append(\".\");\n+            for (String s : scope) {\n+                sb.append(s);\n+                sb.append(\".\");\n+            }\n+            return new MapConfigScope(sb.toString());\n+        }\n+    }\n+\n+    @Override\n+    public String getProvider(String spiName) {\n+        return properties.get(spiName + \".provider\");\n+    }\n+\n+    private String replaceProperties(String value) {\n+        return StringPropertyReplacer.replaceProperties(value, systemProperties);\n+    }\n+\n+    @Override\n+    public Scope scope(String... scope) {\n+        StringBuilder sb = new StringBuilder();\n+        for (String s : scope) {\n+            sb.append(s);\n+            sb.append(\".\");\n+        }\n+        return new MapConfigScope(sb.toString());\n+    }\n+\n+    public SpiConfig spi(String spiName) {\n+        return new SpiConfig(spiName + \".\");\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return properties.entrySet().stream()\n+          .sorted((e1, e2) -> e1.getKey().compareTo(e2.getKey()))\n+          .map(e -> e.getKey() + \" = \" + e.getValue())\n+          .collect(Collectors.joining(\"\\n    \"));\n+    }\n+}"
  },
  {
    "sha": "2d900950747b8ee492d124a74788a766a4078f50",
    "filename": "testsuite/model/src/main/java/org/keycloak/testsuite/model/KeycloakModelParameters.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/main/java/org/keycloak/testsuite/model/KeycloakModelParameters.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/main/java/org/keycloak/testsuite/model/KeycloakModelParameters.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/main/java/org/keycloak/testsuite/model/KeycloakModelParameters.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.testsuite.model;\n+\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.Spi;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class KeycloakModelParameters {\n+\n+    private final Set<Class<? extends Spi>> allowedSpis;\n+    private final Set<Class<? extends ProviderFactory>> allowedFactories;\n+\n+    public KeycloakModelParameters(Set<Class<? extends Spi>> allowedSpis, Set<Class<? extends ProviderFactory>> allowedFactories) {\n+        this.allowedSpis = allowedSpis;\n+        this.allowedFactories = allowedFactories;\n+    }\n+\n+    boolean isSpiAllowed(Spi s) {\n+        return allowedSpis.contains(s.getClass());\n+    }\n+\n+    boolean isFactoryAllowed(ProviderFactory factory) {\n+        return allowedFactories.stream().anyMatch((c) -> c.isAssignableFrom(factory.getClass()));\n+    }\n+\n+    /**\n+     * Returns stream of parameters of the given type, or an empty stream if no parameters of the given type are supplied\n+     * by this clazz.\n+     * @param <T>\n+     * @param clazz\n+     * @return\n+     */\n+    public <T> Stream<T> getParameters(Class<T> clazz) {\n+        return Stream.empty();\n+    }\n+\n+    public Statement classRule(Statement base, Description description) {\n+        return base;\n+    }\n+\n+    public Statement instanceRule(Statement base, Description description) {\n+        return base;\n+    }\n+\n+}"
  },
  {
    "sha": "d0975b3d38d02af4bb8f77b2648f3e55992fac61",
    "filename": "testsuite/model/src/main/java/org/keycloak/testsuite/model/RequireProvider.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/main/java/org/keycloak/testsuite/model/RequireProvider.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/main/java/org/keycloak/testsuite/model/RequireProvider.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/main/java/org/keycloak/testsuite/model/RequireProvider.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.testsuite.model;\n+\n+import org.keycloak.provider.Provider;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Repeatable;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Identifies a requirement for a given provider to be present in the session factory.\n+ * If the provider is not available, the test is skipped.\n+ *\n+ * @author hmlnarik\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.TYPE, ElementType.METHOD})\n+@Repeatable(RequireProviders.class)\n+public @interface RequireProvider {\n+    Class<? extends Provider> value() default Provider.class;\n+\n+}"
  },
  {
    "sha": "335c0f60271355e05417881c5cda21e3551e1376",
    "filename": "testsuite/model/src/main/java/org/keycloak/testsuite/model/RequireProviders.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/main/java/org/keycloak/testsuite/model/RequireProviders.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/main/java/org/keycloak/testsuite/model/RequireProviders.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/main/java/org/keycloak/testsuite/model/RequireProviders.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.testsuite.model;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.TYPE, ElementType.METHOD})\n+public @interface RequireProviders {\n+    RequireProvider[] value();\n+}"
  },
  {
    "sha": "73372fb05432ac7fb1709b34234b60e549c29ba6",
    "filename": "testsuite/model/src/test/java/org/keycloak/testsuite/model/ClientScopeStorageTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/ClientScopeStorageTest.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/ClientScopeStorageTest.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/java/org/keycloak/testsuite/model/ClientScopeStorageTest.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -61,13 +61,15 @@ public void testGetClientScopeById() {\n             ComponentModel res = realm.addComponentModel(federatedStorage);\n             clientScopeFederationId = res.getId();\n             log.infof(\"Added %s client scope federation provider: %s\", federatedStorage.getName(), clientScopeFederationId);\n+            return null;\n         }));\n \n         inComittedTransaction(1, (session, i) -> {\n             final RealmModel realm = session.realms().getRealm(realmId);\n             StorageId storageId = new StorageId(clientScopeFederationId, \"scope_name\");\n             ClientScopeModel hardcoded = session.clientScopes().getClientScopeById(realm, storageId.getId());\n             Assert.assertNotNull(hardcoded);\n+            return null;\n         });\n     }\n }"
  },
  {
    "sha": "29740dfef03c0e6b55c04fa92a87d7a9f5f47e6c",
    "filename": "testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelParameters.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelParameters.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelParameters.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelParameters.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -18,6 +18,10 @@\n \n import org.keycloak.provider.ProviderFactory;\n import org.keycloak.provider.Spi;\n+import org.keycloak.testsuite.model.Config.SpiConfig;\n+import org.keycloak.util.JsonSerialization;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.util.Set;\n import java.util.stream.Stream;\n import org.junit.runner.Description;\n@@ -56,6 +60,9 @@ boolean isFactoryAllowed(ProviderFactory factory) {\n         return Stream.empty();\n     }\n \n+    public void updateConfig(Config cf) {\n+    }\n+\n     public Statement classRule(Statement base, Description description) {\n         return base;\n     }"
  },
  {
    "sha": "1d16c312e8ba1b1afb899a5a1d0e1d43ea1004ca",
    "filename": "testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java",
    "status": "modified",
    "additions": 78,
    "deletions": 20,
    "changes": 98,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/java/org/keycloak/testsuite/model/KeycloakModelTest.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -30,6 +30,7 @@\n import org.keycloak.models.GroupSpi;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n import org.keycloak.models.RealmSpi;\n import org.keycloak.models.RoleSpi;\n import org.keycloak.models.UserSpi;\n@@ -47,8 +48,11 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n import java.util.function.Consumer;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.hamcrest.Matchers;\n@@ -92,8 +96,11 @@ public Statement apply(Statement base, Description description) {\n                 st = Stream.concat(Stream.of(testClass.getAnnotationsByType(RequireProvider.class)), st);\n                 testClass = testClass.getSuperclass();\n             }\n-            List<Class<? extends Provider>> notFound = st.map(RequireProvider::value)\n-              .filter(pClass -> FACTORY.getProviderFactory(pClass) == null)\n+            List<Class<? extends Provider>> notFound = st\n+              .filter(rp -> rp.only().length == 0 \n+                ? FACTORY.getProviderFactory(rp.value()) == null\n+                : Stream.of(rp.only()).allMatch(provider -> FACTORY.getProviderFactory(rp.value(), provider) == null))\n+              .map(RequireProvider::value)\n               .collect(Collectors.toList());\n             Assume.assumeThat(\"Some required providers not found\", notFound, Matchers.empty());\n \n@@ -119,16 +126,30 @@ public Statement apply(Statement base, Description description) {\n                 st = Stream.concat(st, Stream.of(rp));\n             }\n \n-            for (Iterator<Class<? extends Provider>> iterator = st.map(RequireProvider::value).iterator(); iterator.hasNext();) {\n-                Class<? extends Provider> providerClass = iterator.next();\n-\n-                if (FACTORY.getProviderFactory(providerClass) == null) {\n-                    return new Statement() {\n-                        @Override\n-                        public void evaluate() throws Throwable {\n-                            throw new AssumptionViolatedException(\"Provider must exist: \" + providerClass);\n-                        }\n-                    };\n+            for (Iterator<RequireProvider> iterator = st.iterator(); iterator.hasNext();) {\n+                RequireProvider rpInner = iterator.next();\n+                Class<? extends Provider> providerClass = rpInner.value();\n+                String[] only = rpInner.only();\n+\n+                if (only.length == 0) {\n+                    if (FACTORY.getProviderFactory(providerClass) == null) {\n+                        return new Statement() {\n+                            @Override\n+                            public void evaluate() throws Throwable {\n+                                throw new AssumptionViolatedException(\"Provider must exist: \" + providerClass);\n+                            }\n+                        };\n+                    }\n+                } else {\n+                    boolean notFoundAny = Stream.of(only).allMatch(provider -> FACTORY.getProviderFactory(providerClass, provider) == null);\n+                    if (notFoundAny) {\n+                        return new Statement() {\n+                            @Override\n+                            public void evaluate() throws Throwable {\n+                                throw new AssumptionViolatedException(\"Provider must exist: \" + providerClass + \" one of [\" + String.join(\",\", only) + \"]\");\n+                            }\n+                        };\n+                    }\n                 }\n             }\n \n@@ -160,7 +181,8 @@ public void evaluate() throws Throwable {\n       .build();\n \n     protected static final List<KeycloakModelParameters> MODEL_PARAMETERS;\n-    protected static final DefaultKeycloakSessionFactory FACTORY;\n+    protected static Config CONFIG;\n+    protected static DefaultKeycloakSessionFactory FACTORY;\n \n     static {\n         KeycloakModelParameters basicParameters = new KeycloakModelParameters(ALLOWED_SPIS, ALLOWED_FACTORIES);\n@@ -170,13 +192,22 @@ public void evaluate() throws Throwable {\n             .filter(s -> s != null && ! s.trim().isEmpty())\n             .map(cn -> { try { return Class.forName(cn.indexOf('.') >= 0 ? cn : (\"org.keycloak.testsuite.model.parameters.\" + cn)); } catch (Exception e) { LOG.error(\"Cannot find \" + cn); return null; }})\n             .filter(Objects::nonNull)\n-            .map(c -> { try { return c.newInstance(); } catch (Exception e) { LOG.error(\"Cannot instantiate \" + c); return null; }} )\n+            .map(c -> { try { return c.getDeclaredConstructor().newInstance(); } catch (Exception e) { LOG.error(\"Cannot instantiate \" + c); return null; }} )\n             .filter(KeycloakModelParameters.class::isInstance)\n             .map(KeycloakModelParameters.class::cast)\n           )\n           .collect(Collectors.toList());\n \n-        FACTORY = new DefaultKeycloakSessionFactory() {\n+        reinitializeKeycloakSessionFactory();\n+    }\n+\n+    public static DefaultKeycloakSessionFactory createKeycloakSessionFactory() {\n+        CONFIG = new Config();\n+        MODEL_PARAMETERS.forEach(m -> m.updateConfig(CONFIG));\n+        LOG.debug(\"Using the following configuration:\\n    \" + CONFIG);\n+        org.keycloak.Config.init(CONFIG);\n+\n+        DefaultKeycloakSessionFactory res = new DefaultKeycloakSessionFactory() {\n             @Override\n             protected boolean isEnabled(ProviderFactory factory, Scope scope) {\n                 return super.isEnabled(factory, scope) && isFactoryAllowed(factory);\n@@ -196,7 +227,16 @@ private boolean isFactoryAllowed(ProviderFactory factory) {\n                 return MODEL_PARAMETERS.stream().anyMatch(p -> p.isFactoryAllowed(factory));\n             }\n         };\n-        FACTORY.init();\n+        res.init();\n+        return res;\n+    }\n+\n+    public static void reinitializeKeycloakSessionFactory() {\n+        DefaultKeycloakSessionFactory f = createKeycloakSessionFactory();\n+        if (FACTORY != null) {\n+            FACTORY.close();\n+        }\n+        FACTORY = f;\n     }\n \n     @BeforeClass\n@@ -237,11 +277,20 @@ public void cleanEnvironment() {\n         session.getTransactionManager().rollback();\n     }\n \n-    protected <T> void inComittedTransaction(T parameter, BiConsumer<KeycloakSession, T> what) {\n-        inComittedTransaction(parameter, what, (a,b) -> {}, (a,b) -> {});\n+    protected <T, R> R inComittedTransaction(T parameter, BiFunction<KeycloakSession, T, R> what) {\n+        return inComittedTransaction(parameter, what, null, null);\n     }\n \n-    protected <T> void inComittedTransaction(T parameter, BiConsumer<KeycloakSession, T> what, BiConsumer<KeycloakSession, T> onCommit, BiConsumer<KeycloakSession, T> onRollback) {\n+    protected void inComittedTransaction(Consumer<KeycloakSession> what) {\n+        inComittedTransaction(a -> { what.accept(a); return null; });\n+    }\n+\n+    protected <R> R inComittedTransaction(Function<KeycloakSession, R> what) {\n+        return inComittedTransaction(1, (a,b) -> what.apply(a));\n+    }\n+\n+    protected <T, R> R inComittedTransaction(T parameter, BiFunction<KeycloakSession, T, R> what, BiConsumer<KeycloakSession, T> onCommit, BiConsumer<KeycloakSession, T> onRollback) {\n+        AtomicReference<R> res = new AtomicReference<>();\n         KeycloakModelUtils.runJobInTransaction(FACTORY, session -> {\n             session.getTransactionManager().enlistAfterCompletion(new AbstractKeycloakTransaction() {\n                 @Override\n@@ -254,7 +303,16 @@ protected void rollbackImpl() {\n                     if (onRollback != null) { onRollback.accept(session, parameter); }\n                 }\n             });\n-            what.accept(session, parameter);\n+            res.set(what.apply(session, parameter));\n+        });\n+        return res.get();\n+    }\n+\n+    protected <R> R withRealm(String realmId, BiFunction<KeycloakSession, RealmModel, R> what) {\n+        return inComittedTransaction(session -> {\n+            final RealmModel realm = session.realms().getRealm(realmId);\n+            session.getContext().setRealm(realm);\n+            return what.apply(session, realm);\n         });\n     }\n "
  },
  {
    "sha": "5787145788d083b4cf3b6a3265124f6817111a16",
    "filename": "testsuite/model/src/test/java/org/keycloak/testsuite/model/RequireProvider.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/RequireProvider.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/RequireProvider.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/java/org/keycloak/testsuite/model/RequireProvider.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -35,4 +35,10 @@\n public @interface RequireProvider {\n     Class<? extends Provider> value() default Provider.class;\n \n+    /**\n+     * Specifies provider IDs of mandatory provider. There must be at least one provider available\n+     * from those in {@code only} array to fulfil this requirement.\n+     */\n+    String[] only() default {};\n+\n }"
  },
  {
    "sha": "e5bbff0dc18817b4497c518470a3667136763d34",
    "filename": "testsuite/model/src/test/java/org/keycloak/testsuite/model/UserModelTest.java",
    "status": "modified",
    "additions": 27,
    "deletions": 23,
    "changes": 50,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/UserModelTest.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/UserModelTest.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/java/org/keycloak/testsuite/model/UserModelTest.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -81,7 +81,7 @@ public void cleanEnvironment(KeycloakSession s) {\n         s.realms().removeRealm(realmId);\n     }\n \n-    private void addRemoveUser(KeycloakSession session, int i) {\n+    private Void addRemoveUser(KeycloakSession session, int i) {\n         RealmModel realm = session.realms().getRealmByName(\"realm\");\n \n         UserModel user = session.users().addUser(realm, \"user-\" + i);\n@@ -102,6 +102,8 @@ private void addRemoveUser(KeycloakSession session, int i) {\n         assertTrue(session.users().removeUser(realm, user));\n         assertFalse(session.users().removeUser(realm, user));\n         assertNull(session.users().getUserByUsername(realm, user.getUsername()));\n+\n+        return null;\n     }\n \n     @Test\n@@ -125,9 +127,10 @@ public void testAddRemoveUsersInTheSameGroupConcurrent() {\n             final UserModel user = session.users().addUser(realm, \"user-\" + i);\n             user.joinGroup(session.groups().getGroupById(realm, groupId));\n             userIds.add(user.getId());\n+            return null;\n         }));\n \n-        inComittedTransaction(1, (session, i) -> {\n+        inComittedTransaction(session -> {\n             final RealmModel realm = session.realms().getRealm(realmId);\n             final GroupModel group = session.groups().getGroupById(realm, groupId);\n             assertThat(session.users().getGroupMembersStream(realm, group).count(), is(100L));\n@@ -140,14 +143,15 @@ public void testAddRemoveUsersInTheSameGroupConcurrent() {\n                 final RealmModel realm = session.realms().getRealm(realmId);\n                 final UserModel user = session.users().getUserById(realm, userId);\n                 log.debugf(\"Remove user %s: %s\", userId, session.users().removeUser(realm, user));\n+                return null;\n             }, null, (session, userId) -> remainingUserIds.add(userId) ));\n \n             userIds.clear();\n             userIds.addAll(remainingUserIds);\n             remainingUserIds.clear();\n         } while (! userIds.isEmpty());\n \n-        inComittedTransaction(1, (session, i) -> {\n+        inComittedTransaction(session -> {\n             final RealmModel realm = session.realms().getRealm(realmId);\n             final GroupModel group = session.groups().getGroupById(realm, groupId);\n             assertThat(session.users().getGroupMembersStream(realm, group).collect(Collectors.toList()), Matchers.empty());\n@@ -159,27 +163,24 @@ public void testAddRemoveUsersInTheSameGroupConcurrent() {\n     public void testAddDirtyRemoveFederationUser() {\n         registerUserFederationWithRealm();\n \n-        inComittedTransaction(1, (session, i) -> {\n-            final RealmModel realm = session.realms().getRealm(realmId);\n-            final UserModel user = session.users().addUser(realm, \"user-A\");\n-        });\n+        withRealm(realmId, (session, realm) -> session.users().addUser(realm, \"user-A\"));\n \n         // Remove user _from the federation_, simulates eg. user being removed from LDAP without Keycloak knowing\n-        inComittedTransaction(1, (session, i) -> {\n-            final RealmModel realm = session.realms().getRealm(realmId);\n+        withRealm(realmId, (session, realm) -> {\n             final UserStorageProvider instance = getUserFederationInstance(session, realm);\n             log.debugf(\"Removing selected users from backend\");\n             final UserModel user = session.users().getUserByUsername(realm, \"user-A\");\n             ((UserRegistrationProvider) instance).removeUser(realm, user);\n+            return null;\n         });\n \n-        inComittedTransaction(1, (session, i) -> {\n-            final RealmModel realm = session.realms().getRealm(realmId);\n+        withRealm(realmId, (session, realm) -> {\n             if (session.userCache() != null) {\n                 session.userCache().clear();\n             }\n             final UserModel user = session.users().getUserByUsername(realm, \"user-A\");\n             assertThat(\"User should not be found in the main store\", user, Matchers.nullValue());\n+            return null;\n         });\n     }\n \n@@ -198,26 +199,27 @@ public void testAddDirtyRemoveFederationUsersInTheSameGroupConcurrent() {\n             user.joinGroup(session.groups().getGroupById(realm, groupId));\n             log.infof(\"Created user with id: %s\", user.getId());\n             userIds.add(user.getId());\n+            return null;\n         }));\n \n         // Remove users _from the federation_, simulates eg. user being removed from LDAP without Keycloak knowing\n-        inComittedTransaction(1, (session, i) -> {\n-            final RealmModel realm = session.realms().getRealm(realmId);\n+        withRealm(realmId, (session, realm) -> {\n             UserStorageProvider instance = getUserFederationInstance(session, realm);\n             log.debugf(\"Removing selected users from backend\");\n             IntStream.range(FIRST_DELETED_USER_INDEX, LAST_DELETED_USER_INDEX).forEach(j -> {\n                 final UserModel user = session.users().getUserByUsername(realm, \"user-\" + j);\n                 ((UserRegistrationProvider) instance).removeUser(realm, user);\n             });\n+            return null;\n         });\n \n-        IntStream.range(0, 7).parallel().forEach(index -> inComittedTransaction(index, (session, i) -> {\n-            final RealmModel realm = session.realms().getRealm(realmId);\n+        IntStream.range(0, 7).parallel().forEach(index -> withRealm(realmId, (session, realm) -> {\n             final GroupModel group = session.groups().getGroupById(realm, groupId);\n             assertThat(session.users().getGroupMembersStream(realm, group).count(), is(100L - DELETED_USER_COUNT));\n+            return null;\n         }));\n \n-        inComittedTransaction(1, (session, i) -> {\n+        inComittedTransaction(session -> {\n             // If we are using cache, we need to invalidate all users because after removing users from external\n             // provider cache may not be cleared and it may be the case, that cache is the only place that is having \n             // a reference to removed users. Our importValidation method won't be called at all for removed users\n@@ -227,6 +229,7 @@ public void testAddDirtyRemoveFederationUsersInTheSameGroupConcurrent() {\n             if (session.userCache() != null) {\n                 session.userCache().clear();\n             }\n+            return null;\n         });\n \n         // Now delete the users, and count those that were not found to be deleted. This should be equal to the number\n@@ -245,6 +248,7 @@ public void testAddDirtyRemoveFederationUsersInTheSameGroupConcurrent() {\n                     log.debugf(\"Failed deleting user: %s\", userId);\n                     notFoundUsers.incrementAndGet();\n                 }\n+                return null;\n             }, null, (session, userId) -> {\n                 log.debugf(\"Could not delete user %s\", userId);\n                 remainingUserIds.add(userId);\n@@ -257,22 +261,22 @@ public void testAddDirtyRemoveFederationUsersInTheSameGroupConcurrent() {\n \n         assertThat(notFoundUsers.get(), is(DELETED_USER_COUNT));\n \n-        inComittedTransaction(1, (session, i) -> {\n-            final RealmModel realm = session.realms().getRealm(realmId);\n+        withRealm(realmId, (session, realm) -> {\n             final GroupModel group = session.groups().getGroupById(realm, groupId);\n             assertThat(session.users().getGroupMembersStream(realm, group).collect(Collectors.toList()), Matchers.empty());\n+            return null;\n         });\n     }\n \n     private void registerUserFederationWithRealm() {\n-        getParameters(UserStorageProviderModel.class).forEach(fs -> inComittedTransaction(fs, (session, federatedStorage) -> {\n+        getParameters(UserStorageProviderModel.class).forEach(fs -> inComittedTransaction(session -> {\n             assumeThat(\"Cannot handle more than 1 user federation provider\", userFederationId, Matchers.nullValue());\n             RealmModel realm = session.realms().getRealm(realmId);\n-            federatedStorage.setParentId(realmId);\n-            federatedStorage.setImportEnabled(true);\n-            ComponentModel res = realm.addComponentModel(federatedStorage);\n+            fs.setParentId(realmId);\n+            fs.setImportEnabled(true);\n+            ComponentModel res = realm.addComponentModel(fs);\n             userFederationId = res.getId();\n-            log.infof(\"Added %s user federation provider: %s\", federatedStorage.getName(), userFederationId);\n+            log.infof(\"Added %s user federation provider: %s\", fs.getName(), userFederationId);\n         }));\n     }\n "
  },
  {
    "sha": "864c1771f39a45206be344fdcef88258070c8178",
    "filename": "testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/ConcurrentHashMapStorage.java",
    "status": "modified",
    "additions": 8,
    "deletions": 7,
    "changes": 15,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/ConcurrentHashMapStorage.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/ConcurrentHashMapStorage.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/ConcurrentHashMapStorage.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -16,15 +16,12 @@\n  */\n package org.keycloak.testsuite.model.parameters;\n \n+import org.keycloak.models.map.storage.MapStorageSpi;\n import org.keycloak.testsuite.model.KeycloakModelParameters;\n-import org.keycloak.models.map.client.MapClientProviderFactory;\n-import org.keycloak.models.map.group.MapGroupProviderFactory;\n-import org.keycloak.models.map.role.MapRoleProviderFactory;\n import org.keycloak.models.map.storage.chm.ConcurrentHashMapStorageProvider;\n-import org.keycloak.models.map.storage.MapStorageProvider;\n-import org.keycloak.models.map.storage.MapStorageSpi;\n import org.keycloak.provider.ProviderFactory;\n import org.keycloak.provider.Spi;\n+import org.keycloak.testsuite.model.Config;\n import com.google.common.collect.ImmutableSet;\n import java.util.Set;\n \n@@ -41,8 +38,12 @@\n       .add(ConcurrentHashMapStorageProvider.class)\n       .build();\n \n-    static {\n-        System.setProperty(\"keycloak.mapStorage.concurrenthashmap.dir\", System.getProperty(\"keycloak.mapStorage.concurrenthashmap.dir\", \"${project.build.directory:target}\"));\n+    @Override\n+    public void updateConfig(Config cf) {\n+        cf.spi(MapStorageSpi.NAME)\n+            .defaultProvider(ConcurrentHashMapStorageProvider.PROVIDER_ID)\n+            .provider(ConcurrentHashMapStorageProvider.PROVIDER_ID)\n+              .config(\"dir\", \"${project.build.directory:target}\");\n     }\n \n     public ConcurrentHashMapStorage() {"
  },
  {
    "sha": "0db5599c0954f9fc8ae25232104e92afd86223d7",
    "filename": "testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Infinispan.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Infinispan.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Infinispan.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Infinispan.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -26,6 +26,7 @@\n import org.keycloak.models.cache.infinispan.InfinispanUserCacheProviderFactory;\n import org.keycloak.provider.ProviderFactory;\n import org.keycloak.provider.Spi;\n+import org.keycloak.testsuite.model.Config;\n import com.google.common.collect.ImmutableSet;\n import java.util.Set;\n \n@@ -49,8 +50,11 @@\n       .add(InfinispanUserCacheProviderFactory.class)\n       .build();\n \n-    static {\n-        System.setProperty(\"keycloak.connectionsInfinispan.default.embedded\", System.getProperty(\"keycloak.connectionsInfinispan.default.embedded\", \"true\"));\n+    @Override\n+    public void updateConfig(Config cf) {\n+        cf.spi(\"connectionsInfinispan\")\n+            .provider(\"default\")\n+              .config(\"embedded\", \"true\");\n     }\n \n     public Infinispan() {"
  },
  {
    "sha": "733db26e3fd33cd12f2b0550d59a5896a0e672ab",
    "filename": "testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Jpa.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Jpa.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Jpa.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Jpa.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -35,6 +35,7 @@\n import org.keycloak.models.jpa.JpaUserProviderFactory;\n import org.keycloak.provider.ProviderFactory;\n import org.keycloak.provider.Spi;\n+import org.keycloak.testsuite.model.Config;\n import com.google.common.collect.ImmutableSet;\n import java.util.Set;\n \n@@ -73,4 +74,14 @@ public Jpa() {\n         super(ALLOWED_SPIS, ALLOWED_FACTORIES);\n     }\n \n+\n+    @Override\n+    public void updateConfig(Config cf) {\n+        cf.spi(\"client\").defaultProvider(\"jpa\")\n+          .spi(\"clientScope\").defaultProvider(\"jpa\")\n+          .spi(\"group\").defaultProvider(\"jpa\")\n+          .spi(\"role\").defaultProvider(\"jpa\")\n+          .spi(\"user\").defaultProvider(\"jpa\")\n+        ;\n+    }\n }"
  },
  {
    "sha": "43debcd43db94f1c6d0deca64c3253d700cb5a66",
    "filename": "testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Map.java",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Map.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Map.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/java/org/keycloak/testsuite/model/parameters/Map.java?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -18,12 +18,15 @@\n \n import org.keycloak.testsuite.model.KeycloakModelParameters;\n import org.keycloak.models.map.client.MapClientProviderFactory;\n+import org.keycloak.models.map.clientscope.MapClientScopeProviderFactory;\n import org.keycloak.models.map.group.MapGroupProviderFactory;\n import org.keycloak.models.map.role.MapRoleProviderFactory;\n import org.keycloak.models.map.storage.MapStorageProvider;\n import org.keycloak.models.map.storage.MapStorageSpi;\n+import org.keycloak.models.map.user.MapUserProviderFactory;\n import org.keycloak.provider.ProviderFactory;\n import org.keycloak.provider.Spi;\n+import org.keycloak.testsuite.model.Config;\n import com.google.common.collect.ImmutableSet;\n import java.util.Set;\n \n@@ -40,12 +43,24 @@\n \n     static final Set<Class<? extends ProviderFactory>> ALLOWED_FACTORIES = ImmutableSet.<Class<? extends ProviderFactory>>builder()\n       .add(MapClientProviderFactory.class)\n+      .add(MapClientScopeProviderFactory.class)\n       .add(MapGroupProviderFactory.class)\n       .add(MapRoleProviderFactory.class)\n+      .add(MapUserProviderFactory.class)\n       .add(MapStorageProvider.class)\n       .build();\n \n     public Map() {\n         super(ALLOWED_SPIS, ALLOWED_FACTORIES);\n     }\n+\n+    @Override\n+    public void updateConfig(Config cf) {\n+        cf.spi(\"client\").defaultProvider(MapClientProviderFactory.PROVIDER_ID)\n+          .spi(\"clientScope\").defaultProvider(MapClientScopeProviderFactory.PROVIDER_ID)\n+          .spi(\"group\").defaultProvider(MapGroupProviderFactory.PROVIDER_ID)\n+          .spi(\"role\").defaultProvider(MapRoleProviderFactory.PROVIDER_ID)\n+          .spi(\"user\").defaultProvider(MapUserProviderFactory.PROVIDER_ID)\n+        ;\n+    }\n }"
  },
  {
    "sha": "41ffffd50330d937e2e9b39322f3f084502eb41d",
    "filename": "testsuite/model/src/test/resources/log4j.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/resources/log4j.properties",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/src/test/resources/log4j.properties",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/src/test/resources/log4j.properties?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -32,8 +32,8 @@ log4j.logger.org.keycloak.testsuite=${keycloak.testsuite.logging.level}\n # log4j.logger.org.hibernate=debug\n \n # Enable to view loaded SPI and Providers\n-# log4j.logger.org.keycloak.services.DefaultKeycloakSessionFactory=debug\n-# log4j.logger.org.keycloak.provider.ProviderManager=debug\n+ log4j.logger.org.keycloak.services.DefaultKeycloakSessionFactory=debug\n+ log4j.logger.org.keycloak.provider.ProviderManager=debug\n # log4j.logger.org.keycloak.provider.FileSystemProviderLoaderFactory=debug\n \n # Liquibase updates logged with \"info\" by default. Logging level can be changed by system property \"keycloak.liquibase.logging.level\""
  },
  {
    "sha": "fd620efcc93e0bb745b902d4d4ae197b1ed35117",
    "filename": "testsuite/model/test-all-profiles.sh",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/keycloak/keycloak/blob/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/test-all-profiles.sh",
    "raw_url": "https://github.com/keycloak/keycloak/raw/849d9b9ff3ccea24461c5b65a9b6be78686472d6/testsuite/model/test-all-profiles.sh",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/model/test-all-profiles.sh?ref=849d9b9ff3ccea24461c5b65a9b6be78686472d6",
    "patch": "@@ -1,6 +1,7 @@\n #!/bin/bash\n \n cd \"$(dirname $0)\"\n+mvn -version\n \n EXIT_CODE=0\n mvn clean"
  }
]
