[
  {
    "sha": "a4f7f53cea73a0641c197c82b2683ef80947b197",
    "filename": "saml-core/src/main/java/org/keycloak/saml/SAML2AuthnRequestBuilder.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/keycloak/keycloak/blob/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/saml-core/src/main/java/org/keycloak/saml/SAML2AuthnRequestBuilder.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/saml-core/src/main/java/org/keycloak/saml/SAML2AuthnRequestBuilder.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/saml-core/src/main/java/org/keycloak/saml/SAML2AuthnRequestBuilder.java?ref=36cd588ba87b4d66a6e7ced9e49fc39976e8be5d",
    "patch": "@@ -75,6 +75,11 @@ public SAML2AuthnRequestBuilder assertionConsumerUrl(URI assertionConsumerUrl) {\n         return this;\n     }\n \n+    public SAML2AuthnRequestBuilder attributeConsumingServiceIndex(Integer attributeConsumingServiceIndex) {\n+        this.authnRequestType.setAttributeConsumingServiceIndex(attributeConsumingServiceIndex);\n+        return this;\n+    }\n+\n     public SAML2AuthnRequestBuilder forceAuthn(boolean forceAuthn) {\n         this.authnRequestType.setForceAuthn(forceAuthn);\n         return this;\n@@ -85,8 +90,8 @@ public SAML2AuthnRequestBuilder isPassive(boolean isPassive) {\n         return this;\n     }\n \n-    public SAML2AuthnRequestBuilder nameIdPolicy(SAML2NameIDPolicyBuilder nameIDPolicy) {\n-        this.authnRequestType.setNameIDPolicy(nameIDPolicy.build());\n+    public SAML2AuthnRequestBuilder nameIdPolicy(SAML2NameIDPolicyBuilder nameIDPolicyBuilder) {\n+        this.authnRequestType.setNameIDPolicy(nameIDPolicyBuilder.build());\n         return this;\n     }\n "
  },
  {
    "sha": "6ed3b1dc959a6c0ed18af84d2c3e5312513ce7fe",
    "filename": "saml-core/src/main/java/org/keycloak/saml/SPMetadataDescriptor.java",
    "status": "modified",
    "additions": 10,
    "deletions": 24,
    "changes": 34,
    "blob_url": "https://github.com/keycloak/keycloak/blob/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/saml-core/src/main/java/org/keycloak/saml/SPMetadataDescriptor.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/saml-core/src/main/java/org/keycloak/saml/SPMetadataDescriptor.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/saml-core/src/main/java/org/keycloak/saml/SPMetadataDescriptor.java?ref=36cd588ba87b4d66a6e7ced9e49fc39976e8be5d",
    "patch": "@@ -17,27 +17,20 @@\n \n package org.keycloak.saml;\n \n-import org.keycloak.dom.saml.v2.metadata.EndpointType;\n-import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;\n-import org.keycloak.dom.saml.v2.metadata.IndexedEndpointType;\n-import org.keycloak.dom.saml.v2.metadata.KeyDescriptorType;\n-import org.keycloak.dom.saml.v2.metadata.KeyTypes;\n-import org.keycloak.dom.saml.v2.metadata.SPSSODescriptorType;\n-\n-import java.io.StringWriter;\n import java.net.URI;\n import java.util.Arrays;\n import java.util.List;\n \n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamWriter;\n-import org.keycloak.saml.common.util.StaxUtil;\n-import org.keycloak.saml.common.exceptions.ProcessingException;\n+\n+import org.keycloak.dom.saml.v2.metadata.EndpointType;\n+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;\n+import org.keycloak.dom.saml.v2.metadata.IndexedEndpointType;\n+import org.keycloak.dom.saml.v2.metadata.KeyDescriptorType;\n+import org.keycloak.dom.saml.v2.metadata.KeyTypes;\n+import org.keycloak.dom.saml.v2.metadata.SPSSODescriptorType;\n import org.keycloak.saml.processing.core.saml.v2.common.IDGenerator;\n-import org.keycloak.saml.processing.core.saml.v2.writers.SAMLMetadataWriter;\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n \n@@ -50,16 +43,10 @@\n  */\n public class SPMetadataDescriptor {\n \n-    public static String getSPDescriptor(URI binding, URI assertionEndpoint, URI logoutEndpoint,\n+    public static EntityDescriptorType buildSPdescriptor(URI binding, URI assertionEndpoint, URI logoutEndpoint,\n         boolean wantAuthnRequestsSigned, boolean wantAssertionsSigned, boolean wantAssertionsEncrypted,\n-        String entityId, String nameIDPolicyFormat, List<Element> signingCerts, List<Element> encryptionCerts) \n-        throws XMLStreamException, ProcessingException, ParserConfigurationException\n+        String entityId, String nameIDPolicyFormat, List<Element> signingCerts, List<Element> encryptionCerts)\n     {\n-      \n-        StringWriter sw = new StringWriter();\n-        XMLStreamWriter writer = StaxUtil.getXMLStreamWriter(sw);\n-        SAMLMetadataWriter metadataWriter = new SAMLMetadataWriter(writer);\n-\n         EntityDescriptorType entityDescriptor = new EntityDescriptorType(entityId);\n         entityDescriptor.setID(IDGenerator.create(\"ID_\"));\n \n@@ -95,9 +82,8 @@ public static String getSPDescriptor(URI binding, URI assertionEndpoint, URI log\n         spSSODescriptor.addAssertionConsumerService(assertionConsumerEndpoint);\n \n         entityDescriptor.addChoiceType(new EntityDescriptorType.EDTChoiceType(Arrays.asList(new EntityDescriptorType.EDTDescriptorChoiceType(spSSODescriptor))));\n-        metadataWriter.writeEntityDescriptor(entityDescriptor);\n \n-        return sw.toString();\n+        return entityDescriptor;\n     }\n \n     public static Element buildKeyInfoElement(String keyName, String pemEncodedCertificate)"
  },
  {
    "sha": "8d35d85e94eb07c1cd9ee3e30bcf47708f995682",
    "filename": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java",
    "status": "modified",
    "additions": 79,
    "deletions": 4,
    "changes": 83,
    "blob_url": "https://github.com/keycloak/keycloak/blob/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java?ref=36cd588ba87b4d66a6e7ced9e49fc39976e8be5d",
    "patch": "@@ -23,6 +23,7 @@\n import org.keycloak.broker.provider.IdentityBrokerException;\n import org.keycloak.broker.provider.IdentityProviderDataMarshaller;\n import org.keycloak.broker.provider.util.SimpleHttp;\n+import org.keycloak.broker.saml.mappers.UserAttributeMapper;\n import org.keycloak.common.util.PemUtils;\n import org.keycloak.crypto.Algorithm;\n import org.keycloak.crypto.KeyStatus;\n@@ -31,11 +32,16 @@\n import org.keycloak.dom.saml.v2.assertion.AuthnStatementType;\n import org.keycloak.dom.saml.v2.assertion.NameIDType;\n import org.keycloak.dom.saml.v2.assertion.SubjectType;\n+import org.keycloak.dom.saml.v2.metadata.AttributeConsumingServiceType;\n+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;\n+import org.keycloak.dom.saml.v2.metadata.LocalizedNameType;\n+import org.keycloak.dom.saml.v2.metadata.RequestedAttributeType;\n import org.keycloak.dom.saml.v2.protocol.AuthnRequestType;\n import org.keycloak.dom.saml.v2.protocol.LogoutRequestType;\n import org.keycloak.dom.saml.v2.protocol.ResponseType;\n import org.keycloak.events.EventBuilder;\n import org.keycloak.models.FederatedIdentityModel;\n+import org.keycloak.models.IdentityProviderMapperModel;\n import org.keycloak.models.KeyManager;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.RealmModel;\n@@ -56,8 +62,10 @@\n import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n import org.keycloak.saml.common.exceptions.ConfigurationException;\n import org.keycloak.saml.common.util.DocumentUtil;\n+import org.keycloak.saml.common.util.StaxUtil;\n import org.keycloak.saml.processing.api.saml.v2.request.SAML2Request;\n import org.keycloak.saml.processing.api.saml.v2.sig.SAML2Signature;\n+import org.keycloak.saml.processing.core.saml.v2.writers.SAMLMetadataWriter;\n import org.keycloak.saml.processing.core.util.KeycloakKeySamlExtensionGenerator;\n import org.keycloak.saml.validators.DestinationValidator;\n import org.keycloak.sessions.AuthenticationSessionModel;\n@@ -73,13 +81,20 @@\n import javax.ws.rs.core.UriInfo;\n import javax.xml.crypto.dsig.CanonicalizationMethod;\n import javax.xml.parsers.ParserConfigurationException;\n+import java.util.stream.Collectors;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+import java.io.StringWriter;\n import java.net.URI;\n import java.security.KeyPair;\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Set;\n+\n+import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ATTRIBUTE_FORMAT_BASIC;\n \n /**\n  * @author Pedro Igor\n@@ -129,6 +144,8 @@ public Response performLogin(AuthenticationRequest request) {\n             for (String authnContextDeclRef : getAuthnContextDeclRefUris())\n                 requestedAuthnContext.addAuthnContextDeclRef(authnContextDeclRef);\n \n+            Integer attributeConsumingServiceIndex = getConfig().getAttributeConsumingServiceIndex();\n+\n             String loginHint = getConfig().isLoginHint() ? request.getAuthenticationSession().getClientNote(OIDCLoginProtocol.LOGIN_HINT_PARAM) : null;\n             SAML2AuthnRequestBuilder authnRequestBuilder = new SAML2AuthnRequestBuilder()\n                     .assertionConsumerUrl(assertionConsumerServiceUrl)\n@@ -139,6 +156,7 @@ public Response performLogin(AuthenticationRequest request) {\n                     .nameIdPolicy(SAML2NameIDPolicyBuilder\n                         .format(nameIDPolicyFormat)\n                         .setAllowCreate(Boolean.TRUE))\n+                    .attributeConsumingServiceIndex(attributeConsumingServiceIndex)\n                     .requestedAuthnContext(requestedAuthnContext)\n                     .subject(loginHint);\n \n@@ -330,12 +348,17 @@ public Response export(UriInfo uriInfo, RealmModel realm, String format) {\n                     .path(\"endpoint\")\n                     .build();\n \n-\n             boolean wantAuthnRequestsSigned = getConfig().isWantAuthnRequestsSigned();\n             boolean wantAssertionsSigned = getConfig().isWantAssertionsSigned();\n             boolean wantAssertionsEncrypted = getConfig().isWantAssertionsEncrypted();\n             String entityId = getEntityId(uriInfo, realm);\n             String nameIDPolicyFormat = getConfig().getNameIDPolicyFormat();\n+            int attributeConsumingServiceIndex = getConfig().getAttributeConsumingServiceIndex() != null ? getConfig().getAttributeConsumingServiceIndex(): 1;\n+            String attributeConsumingServiceName = getConfig().getAttributeConsumingServiceName();\n+            List<IdentityProviderMapperModel> lstAttributeMappers = realm.getIdentityProviderMappersByAlias(getConfig().getAlias())\n+                .stream()\n+                .filter(t -> t.getIdentityProviderMapper().equals(UserAttributeMapper.PROVIDER_ID))\n+                .collect(Collectors.toList());\n \n             List<Element> signingKeys = new LinkedList<>();\n             List<Element> encryptionKeys = new LinkedList<>();\n@@ -359,9 +382,61 @@ public Response export(UriInfo uriInfo, RealmModel realm, String format) {\n                         }\n                     });\n \n-            String descriptor = SPMetadataDescriptor.getSPDescriptor(authnBinding, endpoint, endpoint,\n-              wantAuthnRequestsSigned, wantAssertionsSigned, wantAssertionsEncrypted,\n-              entityId, nameIDPolicyFormat, signingKeys, encryptionKeys);\n+            // Prepare the metadata descriptor model\n+            StringWriter sw = new StringWriter();\n+            XMLStreamWriter writer = StaxUtil.getXMLStreamWriter(sw);\n+            SAMLMetadataWriter metadataWriter = new SAMLMetadataWriter(writer);\n+\n+            EntityDescriptorType entityDescriptor = SPMetadataDescriptor.buildSPdescriptor(\n+                authnBinding, endpoint, endpoint,\n+                wantAuthnRequestsSigned, wantAssertionsSigned, wantAssertionsEncrypted,\n+                entityId, nameIDPolicyFormat, signingKeys, encryptionKeys);\n+\n+            // Create the AttributeConsumingService\n+            AttributeConsumingServiceType attributeConsumingService = new AttributeConsumingServiceType(attributeConsumingServiceIndex);\n+            attributeConsumingService.setIsDefault(true);\n+\n+            if (attributeConsumingServiceName != null && attributeConsumingServiceName.length() > 0)\n+            {\n+                LocalizedNameType attributeConsumingServiceNameElement = new LocalizedNameType(realm.getDefaultLocale());\n+                attributeConsumingServiceNameElement.setValue(attributeConsumingServiceName);\n+                attributeConsumingService.addServiceName(attributeConsumingServiceNameElement);\n+            }\n+\n+            // Add the attribute mappers\n+            for (IdentityProviderMapperModel attributeMapper: lstAttributeMappers) {\n+                // Skip attributes with no name\n+                String attributeName = attributeMapper.getConfig().get(UserAttributeMapper.ATTRIBUTE_NAME);\n+                if (attributeName == null || attributeName.length() == 0) continue;\n+\n+                RequestedAttributeType requestedAttribute = new RequestedAttributeType(attributeName);\n+                requestedAttribute.setIsRequired(null);\n+                requestedAttribute.setNameFormat(ATTRIBUTE_FORMAT_BASIC.get());\n+\n+                String attributeFriendlyName = attributeMapper.getConfig().get(UserAttributeMapper.ATTRIBUTE_FRIENDLY_NAME);\n+                if (attributeFriendlyName != null && attributeFriendlyName.length() > 0)\n+                    requestedAttribute.setFriendlyName(attributeFriendlyName);\n+\n+                attributeConsumingService.addRequestedAttribute(requestedAttribute);\n+            }\n+\n+            // Look for the SP descriptor and add the attribute consuming service\n+            for (EntityDescriptorType.EDTChoiceType choiceType: entityDescriptor.getChoiceType()) {\n+                List<EntityDescriptorType.EDTDescriptorChoiceType> descriptors = choiceType.getDescriptors();\n+\n+                if (descriptors != null) {\n+                    for (EntityDescriptorType.EDTDescriptorChoiceType descriptor: descriptors) {\n+                        if (descriptor.getSpDescriptor() != null) {\n+                            descriptor.getSpDescriptor().addAttributeConsumerService(attributeConsumingService);\n+                        }\n+                    }\n+                }\n+            }\n+            \n+            // Write the metadata and export it to a string\n+            metadataWriter.writeEntityDescriptor(entityDescriptor);\n+\n+            String descriptor = sw.toString();\n \n             // Metadata signing\n             if (getConfig().isSignSpMetadata())"
  },
  {
    "sha": "e41021f92688ed3c8886ca1bf47d80c014cc722f",
    "filename": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java",
    "status": "modified",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/keycloak/keycloak/blob/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java?ref=36cd588ba87b4d66a6e7ced9e49fc39976e8be5d",
    "patch": "@@ -58,6 +58,8 @@\n     public static final String AUTHN_CONTEXT_CLASS_REFS = \"authnContextClassRefs\";\n     public static final String AUTHN_CONTEXT_DECL_REFS = \"authnContextDeclRefs\";\n     public static final String SIGN_SP_METADATA = \"signSpMetadata\";\n+    public static final String ATTRIBUTE_CONSUMING_SERVICE_INDEX = \"attributeConsumingServiceIndex\";\n+    public static final String ATTRIBUTE_CONSUMING_SERVICE_NAME = \"attributeConsumingServiceName\";\n \n     public SAMLIdentityProviderConfig() {\n     }\n@@ -335,6 +337,38 @@ public void setSignSpMetadata(boolean signSpMetadata) {\n         getConfig().put(SIGN_SP_METADATA, String.valueOf(signSpMetadata));\n     }\n \n+    public Integer getAttributeConsumingServiceIndex() {\n+        Integer result = null;\n+        String strAttributeConsumingServiceIndex = getConfig().get(ATTRIBUTE_CONSUMING_SERVICE_INDEX);\n+        if (strAttributeConsumingServiceIndex != null && !strAttributeConsumingServiceIndex.isEmpty()) {\n+            try {\n+                result = Integer.parseInt(strAttributeConsumingServiceIndex);\n+                if (result < 0) {\n+                    result = null;\n+                }\n+            } catch (NumberFormatException e) {\n+                // ignore it and use null\n+            }\n+        }\n+        return result;\n+    }\n+\n+    public void setAttributeConsumingServiceIndex(Integer attributeConsumingServiceIndex) {\n+        if (attributeConsumingServiceIndex < 0) {\n+            getConfig().remove(ATTRIBUTE_CONSUMING_SERVICE_INDEX);\n+        } else {\n+            getConfig().put(ATTRIBUTE_CONSUMING_SERVICE_INDEX, String.valueOf(attributeConsumingServiceIndex));\n+        }\n+    }\n+\n+    public void setAttributeConsumingServiceName(String attributeConsumingServiceName) {\n+        getConfig().put(ATTRIBUTE_CONSUMING_SERVICE_NAME, attributeConsumingServiceName);\n+    }\n+\n+    public String getAttributeConsumingServiceName() {\n+        return getConfig().get(ATTRIBUTE_CONSUMING_SERVICE_NAME);\n+    }\n+\n     @Override\n     public void validate(RealmModel realm) {\n         SslRequired sslRequired = realm.getSslRequired();"
  },
  {
    "sha": "a90c840f450e0f37ff1b18ba66c773c09af83654",
    "filename": "services/src/main/java/org/keycloak/protocol/saml/installation/SamlSPDescriptorClientInstallation.java",
    "status": "modified",
    "additions": 20,
    "deletions": 6,
    "changes": 26,
    "blob_url": "https://github.com/keycloak/keycloak/blob/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/services/src/main/java/org/keycloak/protocol/saml/installation/SamlSPDescriptorClientInstallation.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/services/src/main/java/org/keycloak/protocol/saml/installation/SamlSPDescriptorClientInstallation.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services/src/main/java/org/keycloak/protocol/saml/installation/SamlSPDescriptorClientInstallation.java?ref=36cd588ba87b4d66a6e7ced9e49fc39976e8be5d",
    "patch": "@@ -19,7 +19,7 @@\n \n import org.jboss.logging.Logger;\n import org.keycloak.Config;\n-import org.keycloak.dom.saml.v2.metadata.KeyTypes;\n+import org.keycloak.dom.saml.v2.metadata.EntityDescriptorType;\n import org.keycloak.models.ClientModel;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.KeycloakSessionFactory;\n@@ -29,13 +29,17 @@\n import org.keycloak.protocol.saml.SamlProtocol;\n import org.keycloak.saml.SPMetadataDescriptor;\n import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n+import org.keycloak.saml.common.util.StaxUtil;\n+import org.keycloak.saml.processing.core.saml.v2.writers.SAMLMetadataWriter;\n \n import org.w3c.dom.Element;\n \n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n+import java.io.StringWriter;\n import java.net.URI;\n import java.util.Arrays;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.xml.stream.XMLStreamWriter;\n \n \n /**\n@@ -72,9 +76,19 @@ public static String getSPDescriptorForClient(ClientModel client) {\n             if (nameIdFormat == null) nameIdFormat = SamlProtocol.SAML_DEFAULT_NAMEID_FORMAT;\n             Element spCertificate = SPMetadataDescriptor.buildKeyInfoElement(null, samlClient.getClientSigningCertificate());\n             Element encCertificate = SPMetadataDescriptor.buildKeyInfoElement(null, samlClient.getClientEncryptingCertificate());\n-            return SPMetadataDescriptor.getSPDescriptor(binding, new URI(assertionUrl), new URI(logoutUrl), samlClient.requiresClientSignature(), \n-                    samlClient.requiresAssertionSignature(), samlClient.requiresEncryption(),\n-                    client.getClientId(), nameIdFormat, Arrays.asList(spCertificate), Arrays.asList(encCertificate));\n+\n+            StringWriter sw = new StringWriter();\n+            XMLStreamWriter writer = StaxUtil.getXMLStreamWriter(sw);\n+            SAMLMetadataWriter metadataWriter = new SAMLMetadataWriter(writer);\n+\n+            EntityDescriptorType entityDescriptor = SPMetadataDescriptor.buildSPdescriptor(\n+                binding, new URI(assertionUrl), new URI(logoutUrl), \n+                samlClient.requiresClientSignature(), samlClient.requiresAssertionSignature(), samlClient.requiresEncryption(), \n+                client.getClientId(), nameIdFormat, Arrays.asList(spCertificate), Arrays.asList(encCertificate));\n+            \n+            metadataWriter.writeEntityDescriptor(entityDescriptor);\n+\n+            return sw.toString();\n         } catch (Exception ex) {\n             logger.error(\"Cannot generate SP metadata\", ex);\n             return \"\";"
  },
  {
    "sha": "0119cafe607cc84ccfd578d9863d831354721138",
    "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlAttributeConsumingServiceIndexTest.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/keycloak/keycloak/blob/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlAttributeConsumingServiceIndexTest.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlAttributeConsumingServiceIndexTest.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/broker/KcSamlAttributeConsumingServiceIndexTest.java?ref=36cd588ba87b4d66a6e7ced9e49fc39976e8be5d",
    "patch": "@@ -0,0 +1,100 @@\n+package org.keycloak.testsuite.broker;\n+\n+import org.keycloak.broker.saml.SAMLIdentityProviderConfig;\n+import org.keycloak.dom.saml.v2.protocol.AuthnRequestType;\n+import org.keycloak.saml.common.util.DocumentUtil;\n+import org.keycloak.saml.processing.api.saml.v2.request.SAML2Request;\n+import org.keycloak.testsuite.saml.AbstractSamlTest;\n+import org.keycloak.testsuite.updaters.IdentityProviderAttributeUpdater;\n+import org.keycloak.testsuite.util.SamlClient;\n+import org.keycloak.testsuite.util.SamlClient.Binding;\n+import org.keycloak.testsuite.util.SamlClientBuilder;\n+import java.io.Closeable;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.ASSERTION_NSURI;\n+import static org.keycloak.testsuite.broker.BrokerTestTools.getConsumerRoot;\n+\n+/**\n+ * Final class as it's not intended to be overriden.\n+ */\n+public final class KcSamlAttributeConsumingServiceIndexTest extends AbstractBrokerTest {\n+\n+    @Override\n+    protected BrokerConfiguration getBrokerConfiguration() {\n+        return KcSamlBrokerConfiguration.INSTANCE;\n+    }\n+\n+    @Test\n+    public void testAttributeConsumingServiceIndexNotSet() throws Exception {\n+        // No Attribute Consuming Service Index set -> No attribute added to AuthnRequest\n+        try (Closeable idpUpdater = new IdentityProviderAttributeUpdater(identityProviderResource)\n+            .update())\n+        {\n+            // Build the login request document\n+            AuthnRequestType loginRep = SamlClient.createLoginRequestDocument(AbstractSamlTest.SAML_CLIENT_ID_SALES_POST + \".dot/ted\", getConsumerRoot() + \"/sales-post/saml\", null);\n+            Document doc = SAML2Request.convert(loginRep);\n+            new SamlClientBuilder()\n+                .authnRequest(getConsumerSamlEndpoint(bc.consumerRealmName()), doc, Binding.POST)\n+                .build()   // Request to consumer IdP\n+                .login().idp(bc.getIDPAlias()).build()\n+                .processSamlResponse(Binding.POST)    // AuthnRequest to producer IdP\n+                  .targetAttributeSamlRequest()\n+                  .transformDocument((document) -> {\n+                    try\n+                    {\n+                        log.infof(\"Document: %s\", DocumentUtil.asString(document));\n+\n+                        // Find the AuthnRequest AttributeConsumingServiceIndex attribute\n+                        Node attrNode = document.getDocumentElement().getAttributes().getNamedItem(\"AttributeConsumingServiceIndex\");\n+                        Assert.assertEquals(\"Unexpected AttributeConsumingServiceIndex attribute value\", null, attrNode);\n+                    }\n+                    catch (Exception ex)\n+                    {\n+                        throw new RuntimeException(ex);\n+                    }\n+                  })\n+                  .build()\n+                .execute();\n+        }\n+    }\n+\n+    @Test\n+    public void testAttributeConsumingServiceIndexSet() throws Exception {\n+        // Attribute Consuming Service Index set -> Attribute added to AuthnRequest\n+        try (Closeable idpUpdater = new IdentityProviderAttributeUpdater(identityProviderResource)\n+            .setAttribute(SAMLIdentityProviderConfig.ATTRIBUTE_CONSUMING_SERVICE_INDEX, \"15\")\n+            .update())\n+        {\n+            // Build the login request document\n+            AuthnRequestType loginRep = SamlClient.createLoginRequestDocument(AbstractSamlTest.SAML_CLIENT_ID_SALES_POST + \".dot/ted\", getConsumerRoot() + \"/sales-post/saml\", null);\n+            Document doc = SAML2Request.convert(loginRep);\n+            new SamlClientBuilder()\n+                .authnRequest(getConsumerSamlEndpoint(bc.consumerRealmName()), doc, Binding.POST)\n+                .build()   // Request to consumer IdP\n+                .login().idp(bc.getIDPAlias()).build()\n+                .processSamlResponse(Binding.POST)    // AuthnRequest to producer IdP\n+                  .targetAttributeSamlRequest()\n+                  .transformDocument((document) -> {\n+                    try\n+                    {\n+                        log.infof(\"Document: %s\", DocumentUtil.asString(document));\n+\n+                        // Find the AuthnRequest AttributeConsumingServiceIndex attribute\n+                        String attrValue = document.getDocumentElement().getAttributes().getNamedItem(\"AttributeConsumingServiceIndex\").getNodeValue();\n+                        Assert.assertEquals(\"Unexpected AttributeConsumingServiceIndex attribute value\", \"15\", attrValue);\n+                    }\n+                    catch (Exception ex)\n+                    {\n+                        throw new RuntimeException(ex);\n+                    }\n+                  })\n+                  .build()\n+                .execute();\n+        }\n+    }\n+}"
  },
  {
    "sha": "6d1e98f8eee6d0a8305298af10e9f50499289039",
    "filename": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/keycloak/keycloak/blob/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties",
    "raw_url": "https://github.com/keycloak/keycloak/raw/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties?ref=36cd588ba87b4d66a6e7ced9e49fc39976e8be5d",
    "patch": "@@ -692,6 +692,10 @@ identity-provider.saml.entity-id=Service Provider Entity ID\n identity-provider.saml.entity-id.tooltip=The Entity ID that will be used to uniquely identify this SAML Service Provider\n identity-provider.saml.protocol-endpoints.saml=SAML 2.0 Service Provider Metadata\n identity-provider.saml.protocol-endpoints.saml.tooltip=Shows the configuration of the Service Provider endpoint\n+identity-provider.saml.attribute-consuming-service-index=Attribute Consuming Service Index\n+identity-provider.saml.attribute-consuming-service-index.tooltip=Index of the Attribute Consuming Service profile to request during authentication\n+identity-provider.saml.attribute-consuming-service-name=Attribute Consuming Service Name\n+identity-provider.saml.attribute-consuming-service-name.tooltip=Name of the Attribute Consuming Service profile to advertise in the SP metadata\n saml-config=SAML Config\n identity-provider.saml-config.tooltip=SAML SP and external IDP configuration.\n single-signon-service-url=Single Sign-On Service URL"
  },
  {
    "sha": "058d9efbe59b97e43040f75bc853c07b9730be97",
    "filename": "themes/src/main/resources/theme/base/admin/resources/partials/realm-identity-provider-saml.html",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/keycloak/keycloak/blob/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/themes/src/main/resources/theme/base/admin/resources/partials/realm-identity-provider-saml.html",
    "raw_url": "https://github.com/keycloak/keycloak/raw/36cd588ba87b4d66a6e7ced9e49fc39976e8be5d/themes/src/main/resources/theme/base/admin/resources/partials/realm-identity-provider-saml.html",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/themes/src/main/resources/theme/base/admin/resources/partials/realm-identity-provider-saml.html?ref=36cd588ba87b4d66a6e7ced9e49fc39976e8be5d",
    "patch": "@@ -295,6 +295,20 @@\n                 </div>\n                 <kc-tooltip>{{:: 'identity-provider.allowed-clock-skew.tooltip' | translate}}</kc-tooltip>\n             </div>\n+            <div class=\"form-group\">\n+                <label class=\"col-md-2 control-label\" for=\"attributeConsumingServiceIndex\">{{:: 'identity-provider.saml.attribute-consuming-service-index' | translate}}</label>\n+                <div class=\"col-md-6\">\n+                    <input class=\"form-control\" string-to-number type=\"number\" min=\"0\" max=\"2147483\" step=\"1\" ng-model=\"identityProvider.config.attributeConsumingServiceIndex\" id=\"attributeConsumingServiceIndex\"/>\n+                </div>\n+                <kc-tooltip>{{:: 'identity-provider.saml.attribute-consuming-service-index.tooltip' | translate}}</kc-tooltip>\n+            </div>\n+            <div class=\"form-group\">\n+                <label class=\"col-md-2 control-label\" for=\"attributeConsumingServiceName\">{{:: 'identity-provider.saml.attribute-consuming-service-name' | translate}}</label>\n+                <div class=\"col-md-6\">\n+                    <input class=\"form-control\" type=\"text\" ng-model=\"identityProvider.config.attributeConsumingServiceName\" id=\"attributeConsumingServiceName\"/>\n+                </div>\n+                <kc-tooltip>{{:: 'identity-provider.saml.attribute-consuming-service-name.tooltip' | translate}}</kc-tooltip>\n+            </div>\n         </fieldset>\n         <fieldset>\n             <legend collapsed><span class=\"text\">{{:: 'identity-provider.saml.requested-authncontext' | translate}}</span> <kc-tooltip>{{:: 'identity-provider.saml.requested-authncontext.tooltip' | translate}}</kc-tooltip></legend>"
  }
]
