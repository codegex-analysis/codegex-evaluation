[
  {
    "sha": "d386d57249f9cc543f2ae6e7fb80449d0c8eee21",
    "filename": "model/infinispan/src/main/java/org/keycloak/connections/infinispan/DefaultInfinispanConnectionProviderFactory.java",
    "status": "modified",
    "additions": 35,
    "deletions": 1,
    "changes": 36,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/model/infinispan/src/main/java/org/keycloak/connections/infinispan/DefaultInfinispanConnectionProviderFactory.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/model/infinispan/src/main/java/org/keycloak/connections/infinispan/DefaultInfinispanConnectionProviderFactory.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/model/infinispan/src/main/java/org/keycloak/connections/infinispan/DefaultInfinispanConnectionProviderFactory.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -41,12 +41,23 @@\n import org.jboss.logging.Logger;\n import org.jgroups.JChannel;\n import org.keycloak.Config;\n+import org.keycloak.cluster.ClusterEvent;\n+import org.keycloak.cluster.ClusterProvider;\n import org.keycloak.cluster.ManagedCacheManagerProvider;\n import org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.KeycloakSessionFactory;\n \n+import org.keycloak.models.cache.infinispan.ClearCacheEvent;\n+import org.keycloak.models.cache.infinispan.events.RealmRemovedEvent;\n+import org.keycloak.models.cache.infinispan.events.RealmUpdatedEvent;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.models.utils.PostMigrationEvent;\n+import org.keycloak.provider.InvalidationHandler.ObjectType;\n+import org.keycloak.provider.ProviderEvent;\n import org.infinispan.persistence.remote.configuration.RemoteStoreConfigurationBuilder;\n+import static org.keycloak.models.cache.infinispan.InfinispanCacheRealmProviderFactory.REALM_CLEAR_CACHE_EVENTS;\n+import static org.keycloak.models.cache.infinispan.InfinispanCacheRealmProviderFactory.REALM_INVALIDATION_EVENTS;\n \n /**\n  * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n@@ -95,7 +106,11 @@ public void init(Config.Scope config) {\n \n     @Override\n     public void postInit(KeycloakSessionFactory factory) {\n-\n+        factory.register((ProviderEvent event) -> {\n+            if (event instanceof PostMigrationEvent) {\n+                KeycloakModelUtils.runJobInTransaction(factory, session -> { registerSystemWideListeners(session); });\n+            }\n+        });\n     }\n \n     protected void lazyInit() {\n@@ -495,4 +510,23 @@ protected void configureTransport(GlobalConfigurationBuilder gcb, String nodeNam\n         }\n     }\n \n+    private void registerSystemWideListeners(KeycloakSession session) {\n+        KeycloakSessionFactory sessionFactory = session.getKeycloakSessionFactory();\n+        ClusterProvider cluster = session.getProvider(ClusterProvider.class);\n+        cluster.registerListener(REALM_CLEAR_CACHE_EVENTS, (ClusterEvent event) -> {\n+            if (event instanceof ClearCacheEvent) {\n+                sessionFactory.invalidate(ObjectType._ALL_);\n+            }\n+        });\n+        cluster.registerListener(REALM_INVALIDATION_EVENTS, (ClusterEvent event) -> {\n+            if (event instanceof RealmUpdatedEvent) {\n+                RealmUpdatedEvent rr = (RealmUpdatedEvent) event;\n+                sessionFactory.invalidate(ObjectType.REALM, rr.getId());\n+            } else if (event instanceof RealmRemovedEvent) {\n+                RealmRemovedEvent rr = (RealmRemovedEvent) event;\n+                sessionFactory.invalidate(ObjectType.REALM, rr.getId());\n+            }\n+        });\n+    }\n+\n }"
  },
  {
    "sha": "b99e47b0150fd6743887251efbcad4b2819d616f",
    "filename": "quarkus/runtime/src/main/java/org/keycloak/QuarkusKeycloakSessionFactory.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/quarkus/runtime/src/main/java/org/keycloak/QuarkusKeycloakSessionFactory.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/quarkus/runtime/src/main/java/org/keycloak/QuarkusKeycloakSessionFactory.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/quarkus/runtime/src/main/java/org/keycloak/QuarkusKeycloakSessionFactory.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -71,9 +71,16 @@ public void init() {\n             }\n         }\n \n+        // Component factory must be initialized first, so that postInit in other factories can use component factories\n+        updateComponentFactoryProviderFactory();\n+        if (componentFactoryPF != null) {\n+            componentFactoryPF.postInit(this);\n+        }\n         for (Map<String, ProviderFactory> f : factoriesMap.values()) {\n             for (ProviderFactory factory : f.values()) {\n-                factory.postInit(this);\n+                if (factory != componentFactoryPF) {\n+                    factory.postInit(this);\n+                }\n             }\n         }\n "
  },
  {
    "sha": "a94080fd17dc78b0d79ff58346748a3b3a900460",
    "filename": "server-spi-private/src/main/java/org/keycloak/component/AmphibianProviderFactory.java",
    "status": "added",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/AmphibianProviderFactory.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/AmphibianProviderFactory.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi-private/src/main/java/org/keycloak/component/AmphibianProviderFactory.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.component;\n+\n+import org.keycloak.Config.Scope;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.provider.InvalidationHandler.ObjectType;\n+import java.util.Collections;\n+import java.util.List;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.provider.ProviderFactory;\n+import java.util.Objects;\n+\n+/**\n+ * Ancestor for a provider factory for both a standalone {@link ProviderFactory} and a {@link ComponentFactory}. It\n+ * behaves as usual for a standalone provider, and for a component creates a factory customized according to\n+ * configuration of this component. The component creation then behaves in the same way as if it was\n+ * a standalone component, i.e.:\n+ * <ul>\n+ * <li>The component-specific factory is initialized via {@link #init} method where the configuration\n+ *     is taken from the component configuration, converted into a {@link Scope}. The\n+ *     component configuration takes precedence over configuration of the provider factory.</li>\n+ * <li>Creation of the instances is done via standard {@link #create(KeycloakSession)} method even for components,\n+ *     since there is now a specific factory per component.</li>\n+ * <li>Component-specific factories are cached inside the provider factory\n+ *     similarly to how provider factories are cached in the session factory.</li>\n+ * </ul>\n+ *\n+ * @see ComponentFactoryProviderFactory\n+ *\n+ * @author hmlnarik\n+ */\n+public interface AmphibianProviderFactory<ProviderType extends Provider> extends ProviderFactory<ProviderType>, ComponentFactory<ProviderType, ProviderType> {\n+\n+    @Override\n+    ProviderType create(KeycloakSession session);\n+\n+    @Override\n+    @Deprecated\n+    default ProviderType create(KeycloakSession session, ComponentModel model) {\n+        throw new UnsupportedOperationException(\"Use create(KeycloakSession) instead\");\n+    }\n+\n+    @Override\n+    default List<ProviderConfigProperty> getConfigProperties() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    default void onUpdate(KeycloakSession session, RealmModel realm, ComponentModel oldModel, ComponentModel newModel) {\n+        String oldId = oldModel == null ? null : oldModel.getId();\n+        String newId = newModel == null ? null : newModel.getId();\n+        if (oldId != null) {\n+            if (newId == null || Objects.equals(oldId, newId)) {\n+                session.invalidate(ObjectType.COMPONENT, oldId);\n+            } else {\n+                session.invalidate(ObjectType.COMPONENT, oldId, newId);\n+            }\n+        } else if (newId != null) {\n+            session.invalidate(ObjectType.COMPONENT, newId);\n+        }\n+    }\n+\n+    @Override\n+    default void preRemove(KeycloakSession session, RealmModel realm, ComponentModel model) {\n+        if (model != null && model.getId() != null) {\n+            session.invalidate(ObjectType.COMPONENT, model.getId());\n+        }\n+    }\n+\n+    @Override\n+    default void close() {\n+    }\n+}"
  },
  {
    "sha": "cd0e957e572f522a8e2e5dff7ef148d521315bcd",
    "filename": "server-spi-private/src/main/java/org/keycloak/component/ComponentFactoryProvider.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/ComponentFactoryProvider.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/ComponentFactoryProvider.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi-private/src/main/java/org/keycloak/component/ComponentFactoryProvider.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.component;\n+\n+import org.keycloak.provider.Provider;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public interface ComponentFactoryProvider extends Provider {\n+    @Override\n+    default void close() {};\n+}"
  },
  {
    "sha": "d529aa41ffd4065d5edd2ee33937231a48c4ef26",
    "filename": "server-spi-private/src/main/java/org/keycloak/component/ComponentFactoryProviderFactory.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/ComponentFactoryProviderFactory.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/ComponentFactoryProviderFactory.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi-private/src/main/java/org/keycloak/component/ComponentFactoryProviderFactory.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.component;\n+\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.provider.InvalidationHandler;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import java.util.function.Function;\n+import org.keycloak.component.ComponentModel;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public interface ComponentFactoryProviderFactory extends ProviderFactory<ComponentFactoryProvider>, InvalidationHandler {\n+\n+    <T extends Provider> ProviderFactory<T> getProviderFactory(Class<T> clazz, String realmId, String componentId, Function<KeycloakSessionFactory, ComponentModel> model);\n+\n+    @Override\n+    default ComponentFactoryProvider create(KeycloakSession session) {\n+        throw new UnsupportedOperationException(\"ComponentFactoryProvider is session-independent, hence not instantiable per session.\");\n+    }\n+\n+}"
  },
  {
    "sha": "cb93a1d600be7cd8634825c92526f44bd74032c6",
    "filename": "server-spi-private/src/main/java/org/keycloak/component/ComponentFactorySpi.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/ComponentFactorySpi.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/ComponentFactorySpi.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi-private/src/main/java/org/keycloak/component/ComponentFactorySpi.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.component;\n+\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.Spi;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class ComponentFactorySpi implements Spi {\n+\n+    public static final String NAME = \"componentFactory\";\n+\n+    @Override\n+    public boolean isInternal() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Class<? extends Provider> getProviderClass() {\n+        return ComponentFactoryProvider.class;\n+    }\n+\n+    @Override\n+    public Class<? extends ProviderFactory> getProviderFactoryClass() {\n+        return ComponentFactoryProviderFactory.class;\n+    }\n+\n+}"
  },
  {
    "sha": "eff084834cf3bef019f080ff2b2108b9ea966f14",
    "filename": "server-spi-private/src/main/java/org/keycloak/component/ComponentModelScope.java",
    "status": "added",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/ComponentModelScope.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/component/ComponentModelScope.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi-private/src/main/java/org/keycloak/component/ComponentModelScope.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.component;\n+\n+import org.keycloak.Config.Scope;\n+import org.keycloak.component.ComponentModel;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class ComponentModelScope implements Scope {\n+\n+    private final Scope origScope;\n+    private final ComponentModel componentConfig;\n+    private final String prefix;\n+\n+    public ComponentModelScope(Scope origScope, ComponentModel componentConfig) {\n+        this(origScope, componentConfig, \"\");\n+    }\n+\n+    public ComponentModelScope(Scope origScope, ComponentModel componentConfig, String prefix) {\n+        this.origScope = origScope;\n+        this.componentConfig = componentConfig;\n+        this.prefix = prefix;\n+    }\n+\n+    public String getComponentId() {\n+        return componentConfig.getId();\n+    }\n+\n+    public String getComponentName() {\n+        return componentConfig.getName();\n+    }\n+\n+    public <T> T getComponentNote(String key) {\n+        return componentConfig.getNote(key);\n+    }\n+\n+    public String getComponentParentId() {\n+        return componentConfig.getParentId();\n+    }\n+\n+    public String getComponentSubType() {\n+        return componentConfig.getSubType();\n+    }\n+\n+    @Override\n+    public String get(String key) {\n+        return get(key, null);\n+    }\n+\n+    @Override\n+    public String get(String key, String defaultValue) {\n+        final String res = componentConfig.get(prefix + key, null);\n+        return (res == null) ? origScope.get(key, defaultValue) : res;\n+    }\n+\n+    @Override\n+    public String[] getArray(String key) {\n+        final String[] res = get(prefix + key, \"\").split(\"\\\\s*,\\\\s*\");\n+        return (res == null) ? origScope.getArray(key) : res;\n+    }\n+\n+    @Override\n+    public Integer getInt(String key) {\n+        return getInt(key, null);\n+    }\n+\n+    @Override\n+    public Integer getInt(String key, Integer defaultValue) {\n+        final String res = componentConfig.get(prefix + key, null);\n+        return (res == null) ? origScope.getInt(key, defaultValue) : Integer.parseInt(res);\n+    }\n+\n+    @Override\n+    public Long getLong(String key) {\n+        return getLong(key, null);\n+    }\n+\n+    @Override\n+    public Long getLong(String key, Long defaultValue) {\n+        final String res = componentConfig.get(prefix + key, null);\n+        return (res == null) ? origScope.getLong(key, defaultValue) : Long.parseLong(res);\n+    }\n+\n+    @Override\n+    public Boolean getBoolean(String key) {\n+        return getBoolean(key, null);\n+    }\n+\n+    @Override\n+    public Boolean getBoolean(String key, Boolean defaultValue) {\n+        final String res = componentConfig.get(prefix + key, null);\n+        return (res == null) ? origScope.getBoolean(key, defaultValue) : Boolean.parseBoolean(res);\n+    }\n+\n+    @Override\n+    public Scope scope(String... scope) {\n+        return new ComponentModelScope(origScope.scope(scope), componentConfig, String.join(\".\", scope) + \".\");\n+    }\n+\n+}"
  },
  {
    "sha": "c50612b71b27b987bbe0eeb56ecde50af00039ba",
    "filename": "server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java",
    "status": "modified",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi-private/src/main/java/org/keycloak/models/utils/KeycloakModelUtils.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -17,6 +17,8 @@\n \n package org.keycloak.models.utils;\n \n+import org.keycloak.Config;\n+import org.keycloak.Config.Scope;\n import org.keycloak.broker.social.SocialIdentityProvider;\n import org.keycloak.broker.social.SocialIdentityProviderFactory;\n import org.keycloak.common.util.CertificateUtils;\n@@ -64,6 +66,10 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.keycloak.models.AccountRoles;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n \n /**\n  * Set of helper methods, which are useful in various model implementations.\n@@ -299,6 +305,93 @@ public static void runJobInTransactionWithTimeout(KeycloakSessionFactory factory\n \n     }\n \n+    public static Function<KeycloakSessionFactory, ComponentModel> componentModelGetter(String realmId, String componentId) {\n+        return factory -> getComponentModel(factory, realmId, componentId);\n+    }\n+\n+    public static ComponentModel getComponentModel(KeycloakSessionFactory factory, String realmId, String componentId) {\n+        AtomicReference<ComponentModel> cm = new AtomicReference<>();\n+        KeycloakModelUtils.runJobInTransaction(factory, session -> {\n+            RealmModel realm = session.realms().getRealm(realmId);\n+            cm.set(realm == null ? null : realm.getComponent(componentId));\n+        });\n+        return cm.get();\n+    }\n+\n+    public static <T extends Provider> ProviderFactory<T> getComponentFactory(KeycloakSessionFactory factory, Class<T> providerClass, Scope config, String spiName) {\n+        String realmId = config.get(\"realmId\");\n+        String componentId = config.get(\"componentId\");\n+        if (realmId == null || componentId == null) {\n+            realmId = \"ROOT\";\n+            ComponentModel cm = new ScopeComponentModel(providerClass, config, spiName);\n+            return factory.getProviderFactory(providerClass, realmId, cm.getId(), k -> cm);\n+        } else {\n+            return factory.getProviderFactory(providerClass, realmId, componentId, componentModelGetter(realmId, componentId));\n+        }\n+    }\n+\n+    private static class ScopeComponentModel extends ComponentModel {\n+\n+        private final String componentId;\n+        private final String providerId;\n+        private final String providerType;\n+        private final Scope config;\n+\n+        public ScopeComponentModel(Class<?> providerClass, Scope baseConfiguration, String spiName) {\n+            final String pr = baseConfiguration.get(\"provider\", Config.getProvider(spiName));\n+\n+            this.providerId = pr == null ? \"default\" : pr;\n+            this.config = baseConfiguration.scope(this.providerId);\n+            this.componentId = spiName + \"-\" + this.providerId;\n+            this.providerType = providerClass.getName();\n+        }\n+\n+        @Override\n+        public String getProviderType() {\n+            return providerType;\n+        }\n+\n+        @Override\n+        public String getProviderId() {\n+            return providerId;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return componentId + \"-config\";\n+        }\n+\n+        @Override\n+        public String getId() {\n+            return componentId;\n+        }\n+\n+        @Override\n+        public boolean get(String key, boolean defaultValue) {\n+            return config.getBoolean(key, defaultValue);\n+        }\n+\n+        @Override\n+        public long get(String key, long defaultValue) {\n+            return config.getLong(key, defaultValue);\n+        }\n+\n+        @Override\n+        public int get(String key, int defaultValue) {\n+            return config.getInt(key, defaultValue);\n+        }\n+\n+        @Override\n+        public String get(String key, String defaultValue) {\n+\n+            return config.get(key, defaultValue);\n+        }\n+\n+        @Override\n+        public String get(String key) {\n+            return get(key, null);\n+        }\n+    }\n \n     public static String getMasterRealmAdminApplicationClientId(String realmName) {\n         return realmName + \"-realm\";"
  },
  {
    "sha": "303ca5b3fddad896b4ef4e929313efaa571dd53d",
    "filename": "server-spi-private/src/main/resources/META-INF/services/org.keycloak.provider.Spi",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/resources/META-INF/services/org.keycloak.provider.Spi",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi-private/src/main/resources/META-INF/services/org.keycloak.provider.Spi",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi-private/src/main/resources/META-INF/services/org.keycloak.provider.Spi?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -15,6 +15,7 @@\n # limitations under the License.\n #\n \n+org.keycloak.component.ComponentFactorySpi\n org.keycloak.provider.ExceptionConverterSpi\n org.keycloak.storage.UserStorageProviderSpi\n org.keycloak.storage.federated.UserFederatedStorageProviderSpi"
  },
  {
    "sha": "c91abc75f5bde7acc7a677c58068db5d903be0b3",
    "filename": "server-spi/src/main/java/org/keycloak/models/KeycloakSession.java",
    "status": "modified",
    "additions": 29,
    "deletions": 1,
    "changes": 30,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi/src/main/java/org/keycloak/models/KeycloakSession.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi/src/main/java/org/keycloak/models/KeycloakSession.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi/src/main/java/org/keycloak/models/KeycloakSession.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -19,6 +19,8 @@\n \n import org.keycloak.component.ComponentModel;\n import org.keycloak.models.cache.UserCache;\n+import org.keycloak.provider.InvalidationHandler;\n+import org.keycloak.provider.InvalidationHandler.InvalidableObjectType;\n import org.keycloak.provider.Provider;\n import org.keycloak.services.clientpolicy.ClientPolicyManager;\n import org.keycloak.sessions.AuthenticationSessionProvider;\n@@ -31,7 +33,7 @@\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n-public interface KeycloakSession {\n+public interface KeycloakSession extends InvalidationHandler {\n \n     KeycloakContext getContext();\n \n@@ -62,6 +64,25 @@\n      */\n     <T extends Provider> T getProvider(Class<T> clazz, String id);\n \n+    /**\n+     * Returns a component provider for a component from the realm that is relevant to this session.\n+     * The relevant realm must be set prior to calling this method in the context, see {@link KeycloakContext#getRealm()}.\n+     * @param <T>\n+     * @param clazz\n+     * @param componentId Component configuration\n+     * @throws IllegalArgumentException If the realm is not set in the context.\n+     * @return Provider configured according to the {@link componentId}, {@code null} if it cannot be instantiated.\n+     */\n+    <T extends Provider> T getComponentProvider(Class<T> clazz, String componentId);\n+\n+    /**\n+     *\n+     * @param <T>\n+     * @param clazz\n+     * @param componentModel\n+     * @return\n+     * @deprecated Deprecated in favor of {@link #getComponentProvider)\n+     */\n     <T extends Provider> T getProvider(Class<T> clazz, ComponentModel componentModel);\n \n     /**\n@@ -92,6 +113,13 @@\n     Object removeAttribute(String attribute);\n     void setAttribute(String name, Object value);\n \n+    /**\n+     * Invalidates intermediate states of the given objects, both immediately and at the end of this session.\n+     * @param type Type of the objects to invalidate\n+     * @param ids Identifiers of the invalidated objects\n+     */\n+    @Override\n+    void invalidate(InvalidableObjectType type, Object... ids);\n \n     void enlistForClose(Provider provider);\n "
  },
  {
    "sha": "48fec809767ae1b6097d0bd4019adb93eecebf67",
    "filename": "server-spi/src/main/java/org/keycloak/models/KeycloakSessionFactory.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi/src/main/java/org/keycloak/models/KeycloakSessionFactory.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi/src/main/java/org/keycloak/models/KeycloakSessionFactory.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi/src/main/java/org/keycloak/models/KeycloakSessionFactory.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -17,21 +17,25 @@\n \n package org.keycloak.models;\n \n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.provider.InvalidationHandler;\n import org.keycloak.provider.Provider;\n import org.keycloak.provider.ProviderEventManager;\n import org.keycloak.provider.ProviderFactory;\n import org.keycloak.provider.Spi;\n \n import java.util.List;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n /**\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n-public interface KeycloakSessionFactory extends ProviderEventManager {\n+public interface KeycloakSessionFactory extends ProviderEventManager, InvalidationHandler {\n+\n     KeycloakSession create();\n \n     Set<Spi> getSpis();\n@@ -42,6 +46,8 @@\n \n     <T extends Provider> ProviderFactory<T> getProviderFactory(Class<T> clazz, String id);\n \n+    <T extends Provider> ProviderFactory<T> getProviderFactory(Class<T> clazz, String realmId, String componentId, Function<KeycloakSessionFactory, ComponentModel> modelGetter);\n+\n     /**\n      * Returns list of provider factories for the given provider.\n      * @param clazz {@code Class<? extends Provider>}"
  },
  {
    "sha": "462305a3c7eebf9eb901d2e46d05f9f1b3a0a43f",
    "filename": "server-spi/src/main/java/org/keycloak/provider/InvalidationHandler.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi/src/main/java/org/keycloak/provider/InvalidationHandler.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/server-spi/src/main/java/org/keycloak/provider/InvalidationHandler.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/server-spi/src/main/java/org/keycloak/provider/InvalidationHandler.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.provider;\n+\n+/**\n+ * Handles invalidation requests. This interface is specifically implemented by\n+ * providers that implement a cache of objects that might change in the outside.\n+ * <p>\n+ * Note that implementors are expected to react to invalidation requests:\n+ * invalidate the objects in the cache. They should <b>not</b> initiate\n+ * invalidation of the same objects neither locally nor via network - that\n+ * could result in an infinite loop.\n+ *\n+ * @author hmlnarik\n+ */\n+public interface InvalidationHandler {\n+\n+    /**\n+     * Tagging interface for the kinds of invalidatable object\n+     */\n+    public interface InvalidableObjectType {}\n+\n+    public enum ObjectType implements InvalidableObjectType {\n+        _ALL_, REALM, CLIENT, CLIENT_SCOPE, USER, ROLE, GROUP, COMPONENT, PROVIDER_FACTORY\n+    }\n+\n+    /**\n+     * Invalidates intermediate states of the given objects\n+     * @param type Type of the objects to invalidate\n+     * @param ids Identifiers of the invalidated objects\n+     */\n+    void invalidate(InvalidableObjectType type, Object... ids);\n+\n+}"
  },
  {
    "sha": "10002956cc2644df2d6f2b0040d13da77d50819e",
    "filename": "services/src/main/java/org/keycloak/services/DefaultComponentFactoryProviderFactory.java",
    "status": "added",
    "additions": 187,
    "deletions": 0,
    "changes": 187,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/services/src/main/java/org/keycloak/services/DefaultComponentFactoryProviderFactory.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/services/src/main/java/org/keycloak/services/DefaultComponentFactoryProviderFactory.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services/src/main/java/org/keycloak/services/DefaultComponentFactoryProviderFactory.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.services;\n+\n+import org.keycloak.Config;\n+import org.keycloak.Config.Scope;\n+import org.keycloak.cluster.ClusterProvider;\n+import org.keycloak.common.util.StackUtil;\n+import org.keycloak.component.ComponentFactoryProviderFactory;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.component.ComponentModelScope;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.provider.InvalidationHandler;\n+import org.keycloak.provider.InvalidationHandler.InvalidableObjectType;\n+import org.keycloak.provider.InvalidationHandler.ObjectType;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author hmlnarik\n+ */\n+public class DefaultComponentFactoryProviderFactory implements ComponentFactoryProviderFactory {\n+\n+    private static final Logger LOG = Logger.getLogger(DefaultComponentFactoryProviderFactory.class);\n+    public static final String PROVIDER_ID = \"default\";\n+\n+    private final AtomicReference<ConcurrentMap<String, ProviderFactory>> componentsMap = new AtomicReference<>(new ConcurrentHashMap<>());\n+\n+    /**\n+     * Should an ID in the key be invalidated, it would invalidate also all the IDs in the values\n+     */\n+    private final ConcurrentMap<Object, Set<String>> dependentInvalidations = new ConcurrentHashMap<>();\n+\n+    private KeycloakSessionFactory factory;\n+    private boolean componentCachingAvailable;\n+    private boolean componentCachingEnabled;\n+\n+    @Override\n+    public void init(Scope config) {\n+        this.componentCachingEnabled = config.getBoolean(\"cachingEnabled\", true);\n+    }\n+\n+    @Override\n+    public void postInit(KeycloakSessionFactory factory) {\n+        this.factory = factory;\n+        this.componentCachingAvailable = this.componentCachingEnabled && this.factory.getProviderFactory(ClusterProvider.class) != null;\n+        if (! componentCachingEnabled) {\n+            LOG.warn(\"Caching of components disabled by the configuration which may have performance impact.\");\n+        } else if (! componentCachingAvailable) {\n+            LOG.warn(\"No system-wide ClusterProviderFactory found. Cannot send messages across cluster, thus disabling caching of components.\");\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Provider> ProviderFactory<T> getProviderFactory(Class<T> clazz, String realmId, String componentId, Function<KeycloakSessionFactory, ComponentModel> modelGetter) {\n+        ProviderFactory res = componentsMap.get().get(componentId);\n+        if (res != null) {\n+            LOG.tracef(\"Found cached ProviderFactory for %s in (%s, %s)\", clazz, realmId, componentId);\n+            return res;\n+        }\n+\n+        // Apply the expensive operation before putting it into the cache\n+        final ComponentModel cm;\n+        if (modelGetter == null) {\n+            LOG.debugf(\"Getting component configuration for component (%s, %s) from realm configuration\", clazz, realmId, componentId);\n+            cm = KeycloakModelUtils.getComponentModel(factory, realmId, componentId);\n+        } else {\n+            LOG.debugf(\"Getting component configuration for component (%s, %s) via provided method\", realmId, componentId);\n+            cm = modelGetter.apply(factory);\n+        }\n+\n+        if (cm == null) {\n+            return null;\n+        }\n+\n+        final String provider = cm.getProviderId();\n+        ProviderFactory<T> pf = provider == null\n+          ? factory.getProviderFactory(clazz)\n+          : factory.getProviderFactory(clazz, provider);\n+\n+        if (pf == null) {   // Either not found or not enabled\n+            LOG.debugf(\"ProviderFactory for %s in (%s, %s) not found\", clazz, realmId, componentId);\n+            return null;\n+        }\n+\n+        final ProviderFactory newFactory;\n+        try {\n+            newFactory = pf.getClass().getDeclaredConstructor().newInstance();\n+        } catch (ReflectiveOperationException ex) {\n+            LOG.warn(\"Cannot instantiate factory\", ex);\n+            return null;\n+        }\n+\n+        Scope scope = Config.scope(factory.getSpi(clazz).getName(), provider);\n+        ComponentModelScope configScope = new ComponentModelScope(scope, cm);\n+\n+        return this.componentCachingAvailable\n+          ? componentsMap.get().computeIfAbsent(componentId, cId -> initializeFactory(clazz, realmId, componentId, newFactory, configScope))\n+          : initializeFactory(clazz, realmId, componentId, newFactory, configScope);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends Provider> ProviderFactory<T> initializeFactory(Class<T> clazz, String realmId, String componentId, final ProviderFactory newFactory, ComponentModelScope configScope) {\n+        LOG.debugf(\"Initializing ProviderFactory for %s in (%s, %s)\", clazz, realmId, componentId);\n+\n+        newFactory.init(configScope);\n+        newFactory.postInit(factory);\n+\n+        dependentInvalidations.computeIfAbsent(realmId, k -> ConcurrentHashMap.newKeySet()).add(componentId);\n+        dependentInvalidations.computeIfAbsent(newFactory.getClass(), k -> ConcurrentHashMap.newKeySet()).add(componentId);\n+\n+        return newFactory;\n+    }\n+\n+    @Override\n+    public void invalidate(InvalidableObjectType type, Object... ids) {\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debugf(\"Invalidating %s: %s\", type, Arrays.asList(ids));\n+        }\n+        LOG.tracef(\"invalidate(%s)%s\", type, StackUtil.getShortStackTrace());\n+\n+        if (type == ObjectType._ALL_) {\n+            final ConcurrentMap<String, ProviderFactory> cm = componentsMap.getAndSet(new ConcurrentHashMap<>());\n+            dependentInvalidations.clear();\n+            cm.values().forEach(ProviderFactory::close);\n+        } else if (type == ObjectType.COMPONENT) {\n+            Stream.of(ids)\n+              .map(componentsMap.get()::remove).filter(Objects::nonNull)\n+              .forEach(ProviderFactory::close);\n+            propagateInvalidation(componentsMap.get(), type, ids);\n+        } else if (type == ObjectType.REALM || type == ObjectType.PROVIDER_FACTORY) {\n+            Stream.of(ids)\n+              .map(dependentInvalidations::get).filter(Objects::nonNull).flatMap(Collection::stream)\n+              .map(componentsMap.get()::remove).filter(Objects::nonNull)\n+              .forEach(ProviderFactory::close);\n+            Stream.of(ids).forEach(dependentInvalidations::remove);\n+            propagateInvalidation(componentsMap.get(), type, ids);\n+        } else {\n+            propagateInvalidation(componentsMap.get(), type, ids);\n+        }\n+    }\n+\n+    private void propagateInvalidation(ConcurrentMap<String, ProviderFactory> componentsMap, InvalidableObjectType type, Object[] ids) {\n+        componentsMap.values()\n+          .stream()\n+          .filter(InvalidationHandler.class::isInstance)\n+          .map(InvalidationHandler.class::cast)\n+          .forEach(ih -> ih.invalidate(type, ids));\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return PROVIDER_ID;\n+    }\n+\n+    @Override\n+    public void close() {\n+        componentsMap.get().values().forEach(ProviderFactory::close);\n+    }\n+\n+}"
  },
  {
    "sha": "59f07f257e3a3dca119daf733b1a8c2793b34ff8",
    "filename": "services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java",
    "status": "modified",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -30,6 +30,7 @@\n import org.keycloak.models.KeycloakSessionFactory;\n import org.keycloak.models.KeycloakTransactionManager;\n import org.keycloak.models.KeyManager;\n+import org.keycloak.models.RealmModel;\n import org.keycloak.models.RealmProvider;\n import org.keycloak.models.RoleProvider;\n import org.keycloak.models.ThemeManager;\n@@ -38,6 +39,8 @@\n import org.keycloak.models.UserSessionProvider;\n import org.keycloak.models.cache.CacheRealmProvider;\n import org.keycloak.models.cache.UserCache;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.provider.InvalidationHandler.InvalidableObjectType;\n import org.keycloak.provider.Provider;\n import org.keycloak.provider.ProviderFactory;\n import org.keycloak.services.clientpolicy.ClientPolicyManager;\n@@ -53,10 +56,13 @@\n import org.keycloak.vault.VaultProvider;\n import org.keycloak.vault.VaultTranscriber;\n \n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Set;\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n@@ -71,6 +77,7 @@\n     private final List<Provider> closable = new LinkedList<>();\n     private final DefaultKeycloakTransactionManager transactionManager;\n     private final Map<String, Object> attributes = new HashMap<>();\n+    private final Map<InvalidableObjectType, Set<Object>> invalidationMap = new HashMap<>();\n     private RealmProvider model;\n     private ClientProvider clientProvider;\n     private ClientScopeProvider clientScopeProvider;\n@@ -158,6 +165,12 @@ public UserCache userCache() {\n \n     }\n \n+    @Override\n+    public void invalidate(InvalidableObjectType type, Object... ids) {\n+        factory.invalidate(type, ids);\n+        invalidationMap.computeIfAbsent(type, o -> new HashSet<>()).addAll(Arrays.asList(ids));\n+    }\n+\n     @Override\n     public void enlistForClose(Provider provider) {\n         closable.add(provider);\n@@ -322,6 +335,30 @@ public UserCredentialManager userCredentialManager() {\n         return provider;\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Provider> T getComponentProvider(Class<T> clazz, String componentId) {\n+        Integer hash = clazz.hashCode() + componentId.hashCode();\n+        T provider = (T) providers.get(hash);\n+        final RealmModel realm = getContext().getRealm();\n+        if (realm == null) {\n+            throw new IllegalArgumentException(\"Realm not set in the context.\");\n+        }\n+\n+        // KEYCLOAK-11890 - Avoid using HashMap.computeIfAbsent() to implement logic in outer if() block below,\n+        // since per JDK-8071667 the remapping function should not modify the map during computation. While\n+        // allowed on JDK 1.8, attempt of such a modification throws ConcurrentModificationException with JDK 9+\n+        if (provider == null) {\n+            final String realmId = realm.getId();\n+            ProviderFactory<T> providerFactory = factory.getProviderFactory(clazz, realmId, componentId, KeycloakModelUtils.componentModelGetter(realmId, componentId));\n+            if (providerFactory != null) {\n+                provider = providerFactory.create(this);\n+                providers.put(hash, provider);\n+            }\n+        }\n+        return provider;\n+    }\n+\n     @Override\n     public <T extends Provider> T getProvider(Class<T> clazz, ComponentModel componentModel) {\n         String modelId = componentModel.getId();\n@@ -468,6 +505,9 @@ public void close() {\n         };\n         providers.values().forEach(safeClose);\n         closable.forEach(safeClose);\n+        for (Entry<InvalidableObjectType, Set<Object>> me : invalidationMap.entrySet()) {\n+            factory.invalidate(me.getKey(), me.getValue().toArray());\n+        }\n     }\n \n }"
  },
  {
    "sha": "75664975bd8c892beb9dc12472cbc2302abb1fe1",
    "filename": "services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
    "status": "modified",
    "additions": 49,
    "deletions": 2,
    "changes": 51,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -19,9 +19,13 @@\n import org.jboss.logging.Logger;\n import org.keycloak.Config;\n import org.keycloak.common.util.MultivaluedHashMap;\n+import org.keycloak.component.ComponentFactoryProvider;\n+import org.keycloak.component.ComponentFactoryProviderFactory;\n+import org.keycloak.component.ComponentModel;\n import org.keycloak.models.KeycloakSession;\n import org.keycloak.models.KeycloakSessionFactory;\n import org.keycloak.provider.EnvironmentDependentProviderFactory;\n+import org.keycloak.provider.InvalidationHandler;\n import org.keycloak.provider.KeycloakDeploymentInfo;\n import org.keycloak.provider.Provider;\n import org.keycloak.provider.ProviderEvent;\n@@ -34,6 +38,7 @@\n import org.keycloak.services.resources.admin.permissions.AdminPermissions;\n import org.keycloak.theme.DefaultThemeManagerFactory;\n \n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n@@ -44,6 +49,7 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Function;\n import java.util.stream.Stream;\n \n public class DefaultKeycloakSessionFactory implements KeycloakSessionFactory, ProviderManagerDeployer {\n@@ -67,6 +73,7 @@\n     private Long clientStorageProviderTimeout;\n     private Long roleStorageProviderTimeout;\n \n+    protected ComponentFactoryProviderFactory componentFactoryPF;\n     \n     @Override\n     public void register(ProviderEventListener listener) {\n@@ -105,9 +112,16 @@ public void init() {\n                 }\n             }\n             checkProvider();\n+            // Component factory must be initialized first, so that postInit in other factories can use component factories\n+            updateComponentFactoryProviderFactory();\n+            if (componentFactoryPF != null) {\n+                componentFactoryPF.postInit(this);\n+            }\n             for (Map<String, ProviderFactory> factories : factoriesMap.values()) {\n                 for (ProviderFactory factory : factories.values()) {\n-                    factory.postInit(this);\n+                    if (factory != componentFactoryPF) {\n+                        factory.postInit(this);\n+                    }\n                 }\n             }\n             // make the session factory ready for hot deployment\n@@ -150,11 +164,23 @@ public void deploy(ProviderManager pm) {\n \n         }\n         factoriesMap = copy;\n+        boolean cfChanged = false;\n         for (ProviderFactory factory : undeployed) {\n+            invalidate(ObjectType.PROVIDER_FACTORY, factory.getClass());\n             factory.close();\n+            cfChanged |= (componentFactoryPF == factory);\n+        }\n+        // Component factory must be initialized first, so that postInit in other factories can use component factories\n+        if (cfChanged) {\n+            updateComponentFactoryProviderFactory();\n+            if (componentFactoryPF != null) {\n+                componentFactoryPF.postInit(this);\n+            }\n         }\n         for (ProviderFactory factory : deployed) {\n-            factory.postInit(this);\n+            if (factory != componentFactoryPF) {\n+                factory.postInit(this);\n+            }\n         }\n \n         if (pm.getInfo().hasThemes() || pm.getInfo().hasThemeResources()) {\n@@ -314,6 +340,23 @@ public Spi getSpi(Class<? extends Provider> providerClass) {\n         return map.get(id);\n     }\n \n+    @Override\n+    public <T extends Provider> ProviderFactory<T> getProviderFactory(Class<T> clazz, String realmId, String componentId, Function<KeycloakSessionFactory, ComponentModel> modelGetter) {\n+        return (this.componentFactoryPF == null)\n+          ? null\n+          : this.componentFactoryPF.getProviderFactory(clazz, realmId, componentId, modelGetter);\n+    }\n+\n+    @Override\n+    public void invalidate(InvalidableObjectType type, Object... ids) {\n+        factoriesMap.values().stream()\n+          .map(Map::values)\n+          .flatMap(Collection::stream)\n+          .filter(InvalidationHandler.class::isInstance)\n+          .map(InvalidationHandler.class::cast)\n+          .forEach(ih -> ih.invalidate(type, ids));\n+    }\n+\n     @Override\n     public Stream<ProviderFactory> getProviderFactoriesStream(Class<? extends Provider> clazz) {\n         if (factoriesMap == null) return Stream.empty();\n@@ -379,4 +422,8 @@ public long getServerStartupTimestamp() {\n         return serverStartupTimestamp;\n     }\n \n+    protected void updateComponentFactoryProviderFactory() {\n+        this.componentFactoryPF = (ComponentFactoryProviderFactory) getProviderFactory(ComponentFactoryProvider.class);\n+    }\n+\n }"
  },
  {
    "sha": "5e90b621c9caea80c6da805a0a77d423d8241fb8",
    "filename": "services/src/main/resources/META-INF/services/org.keycloak.component.ComponentFactoryProviderFactory",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/services/src/main/resources/META-INF/services/org.keycloak.component.ComponentFactoryProviderFactory",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/services/src/main/resources/META-INF/services/org.keycloak.component.ComponentFactoryProviderFactory",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/services/src/main/resources/META-INF/services/org.keycloak.component.ComponentFactoryProviderFactory?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,18 @@\n+#\n+# Copyright 2021 Red Hat, Inc. and/or its affiliates\n+# and other contributors as indicated by the @author tags.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+org.keycloak.services.DefaultComponentFactoryProviderFactory"
  },
  {
    "sha": "4b6c76fbe6532ff75b5848bea9b4074ed25e87a6",
    "filename": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProvider.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProvider.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProvider.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProvider.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.testsuite.components.amphibian;\n+\n+import org.keycloak.provider.Provider;\n+\n+import java.util.Map;\n+\n+/**\n+ * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n+ */\n+public interface TestAmphibianProvider extends Provider {\n+\n+    Map<String, Object> getDetails();\n+\n+}"
  },
  {
    "sha": "de44eaeec0399668bdd41d1ea657836f4cd74c44",
    "filename": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProviderFactory.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProviderFactory.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProviderFactory.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProviderFactory.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.testsuite.components.amphibian;\n+\n+import org.keycloak.component.AmphibianProviderFactory;\n+\n+/**\n+ * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n+ */\n+public interface TestAmphibianProviderFactory<T extends TestAmphibianProvider> extends AmphibianProviderFactory<T> {\n+}"
  },
  {
    "sha": "dfcc4d75a2e04f7ff13fc99baa0ef26452e60565",
    "filename": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProviderFactoryImpl.java",
    "status": "added",
    "additions": 117,
    "deletions": 0,
    "changes": 117,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProviderFactoryImpl.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProviderFactoryImpl.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianProviderFactoryImpl.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.testsuite.components.amphibian;\n+\n+import org.keycloak.Config;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.component.ComponentValidationException;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.provider.ConfigurationValidationHelper;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.provider.ProviderConfigurationBuilder;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import java.util.Map;\n+import static org.keycloak.provider.ProviderConfigProperty.STRING_TYPE;\n+\n+public class TestAmphibianProviderFactoryImpl implements TestAmphibianProviderFactory {\n+\n+    public static final String PROVIDER_ID = \"test\";\n+\n+    private static final List<ProviderConfigProperty> CONFIG = ProviderConfigurationBuilder.create()\n+            .property(\"secret\", \"Secret\", \"A secret value\", STRING_TYPE, null, null, true)\n+            .property(\"number\", \"Number\", \"A number value\", STRING_TYPE, null, null, false)\n+            .property(\"required\", \"Required\", \"A required value\", STRING_TYPE, null, null, false)\n+            .property(\"val1\", \"Value 1\", \"Some more values\", STRING_TYPE, null, null, false)\n+            .property(\"val2\", \"Value 2\", \"Some more values\", STRING_TYPE, null, null, false)\n+            .property(\"val3\", \"Value 3\", \"Some more values\", STRING_TYPE, null, null, false)\n+            .build();\n+\n+    private String secret;\n+    private Integer number;\n+    private String required;\n+    private String val1;\n+    private String val2;\n+    private String val3;\n+\n+    @Override\n+    public TestImplProvider create(KeycloakSession session) {\n+        return new TestImplProvider();\n+    }\n+\n+    @Override\n+    public void validateConfiguration(KeycloakSession session, RealmModel realm, ComponentModel model) throws ComponentValidationException {\n+        ConfigurationValidationHelper.check(model)\n+                .checkRequired(\"required\", \"Required\")\n+                .checkInt(\"number\", \"Number\", false);\n+    }\n+\n+    @Override\n+    public String getHelpText() {\n+        return \"Provider to test component invalidation\";\n+    }\n+\n+    @Override\n+    public List<ProviderConfigProperty> getConfigProperties() {\n+        return CONFIG;\n+    }\n+\n+    @Override\n+    public void init(Config.Scope config) {\n+        this.secret = config.get(\"secret\");\n+        this.number = config.getInt(\"number\");\n+        this.required = config.get(\"required\");\n+        this.val1 = config.get(\"val1\");\n+        this.val2 = config.get(\"val2\");\n+        this.val3 = config.get(\"val3\");\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return PROVIDER_ID;\n+    }\n+\n+    @Override\n+    public void postInit(KeycloakSessionFactory factory) {\n+    }\n+\n+    public class TestImplProvider implements TestAmphibianProvider {\n+\n+        @Override\n+        public Map<String, Object> getDetails() {\n+            Map<String, Object> c = new HashMap<>();\n+            c.put(\"secret\", secret);\n+            c.put(\"number\", number);\n+            c.put(\"required\", required);\n+            c.put(\"val1\", val1);\n+            c.put(\"val2\", val2);\n+            c.put(\"val3\", val3);\n+            return c;\n+        }\n+\n+        @Override\n+        public void close() {\n+        }\n+\n+    }\n+\n+}"
  },
  {
    "sha": "178735b4f11aeb976cd85d8a27d11e30b640a796",
    "filename": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianSpi.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianSpi.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianSpi.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/components/amphibian/TestAmphibianSpi.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.testsuite.components.amphibian;\n+\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.Spi;\n+\n+/**\n+ * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n+ */\n+public class TestAmphibianSpi implements Spi {\n+    @Override\n+    public boolean isInternal() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"test-amphibian\";\n+    }\n+\n+    @Override\n+    public Class<? extends Provider> getProviderClass() {\n+        return TestAmphibianProvider.class;\n+    }\n+\n+    @Override\n+    public Class<? extends ProviderFactory> getProviderFactoryClass() {\n+        return TestAmphibianProviderFactory.class;\n+    }\n+}"
  },
  {
    "sha": "2546034a113bef3660173767d3d5c377943c6417",
    "filename": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -62,6 +62,7 @@\n import org.keycloak.storage.UserStorageProvider;\n import org.keycloak.testsuite.components.TestProvider;\n import org.keycloak.testsuite.components.TestProviderFactory;\n+import org.keycloak.testsuite.components.amphibian.TestAmphibianProvider;\n import org.keycloak.testsuite.events.TestEventsListenerProvider;\n import org.keycloak.testsuite.federation.DummyUserFederationProviderFactory;\n import org.keycloak.testsuite.forms.PassThroughAuthenticator;\n@@ -690,6 +691,20 @@ public TestingExportImportResource getExportImportResource() {\n                         }));\n     }\n \n+    @GET\n+    @Path(\"/test-amphibian-component\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Map<String, Map<String, Object>> getTestAmphibianComponentDetails() {\n+        RealmModel realm = session.getContext().getRealm();\n+        return realm.getComponentsStream(realm.getId(), TestAmphibianProvider.class.getName())\n+                .collect(Collectors.toMap(\n+                  ComponentModel::getName,\n+                  componentModel -> {\n+                      TestAmphibianProvider t = session.getComponentProvider(TestAmphibianProvider.class, componentModel.getId());\n+                      return t == null ? null : t.getDetails();\n+                  }));\n+    }\n+\n \n     @GET\n     @Path(\"/identity-config\")\n@@ -993,7 +1008,6 @@ public Response simulatePostRequest(@QueryParam(\"postRequestUrl\") String postReq\n \n     }\n \n-\n     private RealmModel getRealmByName(String realmName) {\n         RealmProvider realmProvider = session.getProvider(RealmProvider.class);\n         RealmModel realm = realmProvider.getRealmByName(realmName);"
  },
  {
    "sha": "1883fd2be05a0878f86404c2f59c4964497eaa3a",
    "filename": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/META-INF/services/org.keycloak.provider.Spi",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/META-INF/services/org.keycloak.provider.Spi",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/META-INF/services/org.keycloak.provider.Spi",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/META-INF/services/org.keycloak.provider.Spi?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -16,4 +16,5 @@\n #\n \n org.keycloak.testsuite.domainextension.spi.ExampleSpi\n+org.keycloak.testsuite.components.amphibian.TestAmphibianSpi\n org.keycloak.testsuite.components.TestSpi\n\\ No newline at end of file"
  },
  {
    "sha": "ceaa69ec138e4344fce6f3816c7e5ef233a20792",
    "filename": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/META-INF/services/org.keycloak.testsuite.components.amphibian.TestAmphibianProviderFactory",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/META-INF/services/org.keycloak.testsuite.components.amphibian.TestAmphibianProviderFactory",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/META-INF/services/org.keycloak.testsuite.components.amphibian.TestAmphibianProviderFactory",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/META-INF/services/org.keycloak.testsuite.components.amphibian.TestAmphibianProviderFactory?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,18 @@\n+#\n+# Copyright 2016 Red Hat, Inc. and/or its affiliates\n+# and other contributors as indicated by the @author tags.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+org.keycloak.testsuite.components.amphibian.TestAmphibianProviderFactoryImpl\n\\ No newline at end of file"
  },
  {
    "sha": "a4ce3e9e08ab871ab2f9a02b76839c2bea1d178e",
    "filename": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -23,6 +23,7 @@\n     private int bindHttpPort = 8080;\n     private int bindHttpsPortOffset = 0;\n     private int bindHttpsPort = Integer.valueOf(System.getProperty(\"auth.server.https.port\", \"8543\"));\n+    private int debugPort = -1;\n     private Path providersPath = Paths.get(System.getProperty(\"auth.server.home\"));\n     private int startupTimeoutInSeconds = 300;\n     private String route;\n@@ -145,4 +146,13 @@ public boolean isReaugmentBeforeStart() {\n     public void setReaugmentBeforeStart(boolean reaugmentBeforeStart) {\n         this.reaugmentBeforeStart = reaugmentBeforeStart;\n     }\n+\n+    public int getDebugPort() {\n+        return debugPort;\n+    }\n+\n+    public void setDebugPort(int debugPort) {\n+        this.debugPort = debugPort;\n+    }\n+\n }"
  },
  {
    "sha": "e63a1a30934a204b35059a6b7c4e35d40b971b8b",
    "filename": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -141,7 +141,10 @@ private Process startContainer() throws IOException {\n \n         commands.add(\"./kc.sh\");\n \n-        if (Boolean.valueOf(System.getProperty(\"auth.server.debug\", \"false\"))) {\n+        if (configuration.getDebugPort() > 0) {\n+            commands.add(\"--debug\");\n+            commands.add(Integer.toString(configuration.getDebugPort()));\n+        } else if (Boolean.valueOf(System.getProperty(\"auth.server.debug\", \"false\"))) {\n             commands.add(\"--debug\");\n             commands.add(System.getProperty(\"auth.server.debug.port\", \"5005\"));\n         }"
  },
  {
    "sha": "2e4650fb3b14499014afdb24b5b7a66ff0e9f126",
    "filename": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/resources/TestingResource.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/resources/TestingResource.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/resources/TestingResource.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/client/resources/TestingResource.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -268,6 +268,11 @@ public UserRepresentation getUserByUsernameFromFedProviderFactory(@QueryParam(\"r\n     @Produces(MediaType.APPLICATION_JSON)\n     Map<String, TestProvider.DetailsRepresentation> getTestComponentDetails();\n \n+    @GET\n+    @Path(\"/test-amphibian-component\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    Map<String, Map<String, Object>> getTestAmphibianComponentDetails();\n+\n \n     @GET\n     @Path(\"/identity-config\")"
  },
  {
    "sha": "9b684677a2c94d6a3abea894fc24efd692eb1b7a",
    "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ComponentInvalidationClusterTest.java",
    "status": "added",
    "additions": 198,
    "deletions": 0,
    "changes": 198,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ComponentInvalidationClusterTest.java",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ComponentInvalidationClusterTest.java",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ComponentInvalidationClusterTest.java?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -0,0 +1,198 @@\n+package org.keycloak.testsuite.cluster;\n+\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Before;\n+import org.keycloak.admin.client.resource.ComponentResource;\n+import org.keycloak.admin.client.resource.ComponentsResource;\n+import org.keycloak.common.util.MultivaluedHashMap;\n+import org.keycloak.representations.idm.ComponentRepresentation;\n+import org.keycloak.testsuite.admin.ApiUtil;\n+import org.keycloak.testsuite.arquillian.ContainerInfo;\n+import org.keycloak.testsuite.components.amphibian.TestAmphibianProvider;\n+import org.keycloak.testsuite.components.amphibian.TestAmphibianProviderFactoryImpl;\n+\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.Response;\n+import java.util.Arrays;\n+\n+import java.util.Map;\n+import org.junit.Test;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.anyOf;\n+import static org.hamcrest.Matchers.hasEntry;\n+import static org.hamcrest.Matchers.hasKey;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertNull;\n+\n+/**\n+ *\n+ * @author tkyjovsk\n+ */\n+public class ComponentInvalidationClusterTest extends AbstractInvalidationClusterTestWithTestRealm<ComponentRepresentation, ComponentResource> {\n+\n+    @Before\n+    public void setExcludedComparisonFields() {\n+    }\n+\n+    @Override\n+    protected ComponentRepresentation createTestEntityRepresentation() {\n+        ComponentRepresentation comp = new ComponentRepresentation();\n+        MultivaluedHashMap<String, String> config = new MultivaluedHashMap<>();\n+        comp.setName(\"comp_\" + RandomStringUtils.randomAlphabetic(5));\n+\n+        comp.setProviderId(TestAmphibianProviderFactoryImpl.PROVIDER_ID);\n+        comp.setProviderType(TestAmphibianProvider.class.getName());\n+\n+        config.putSingle(\"secret\", \"Secret\");\n+        config.putSingle(\"required\", \"required-value\");\n+        config.putSingle(\"number\", \"2\");\n+        config.put(\"val1\", Arrays.asList(new String[]{\"val1 value\"}));\n+        config.put(\"val2\", Arrays.asList(new String[]{\"val2 value\"}));\n+        comp.setConfig(config);\n+        return comp;\n+    }\n+\n+    protected ComponentsResource components(ContainerInfo node) {\n+        return getAdminClientFor(node).realm(testRealmName).components();\n+    }\n+\n+    @Override\n+    protected ComponentResource entityResource(ComponentRepresentation comp, ContainerInfo node) {\n+        return entityResource(comp.getId(), node);\n+    }\n+\n+    @Override\n+    protected ComponentResource entityResource(String id, ContainerInfo node) {\n+        return components(node).component(id);\n+    }\n+\n+    @Override\n+    protected ComponentRepresentation createEntity(ComponentRepresentation comp, ContainerInfo node) {\n+        comp.setParentId(getAdminClientFor(node).realm(testRealmName).toRepresentation().getId());\n+        try (Response response = components(node).add(comp)) {\n+            String id = ApiUtil.getCreatedId(response);\n+            comp.setId(id);\n+        }\n+        return readEntity(comp, node);\n+    }\n+\n+    @Override\n+    protected ComponentRepresentation readEntity(ComponentRepresentation comp, ContainerInfo node) {\n+        ComponentRepresentation u = null;\n+        try {\n+            u = entityResource(comp, node).toRepresentation();\n+        } catch (NotFoundException nfe) {\n+            // expected when component doesn't exist\n+        }\n+        return u;\n+    }\n+\n+    @Override\n+    protected ComponentRepresentation updateEntity(ComponentRepresentation comp, ContainerInfo node) {\n+        entityResource(comp, node).update(comp);\n+        return readEntity(comp, node);\n+    }\n+\n+    @Override\n+    protected void deleteEntity(ComponentRepresentation comp, ContainerInfo node) {\n+        entityResource(comp, node).remove();\n+        assertNull(readEntity(comp, node));\n+    }\n+\n+    @Override\n+    protected ComponentRepresentation testEntityUpdates(ComponentRepresentation comp, boolean backendFailover) {\n+        comp.setName(comp.getName() + \"_updated\");\n+        comp = updateEntityOnCurrentFailNode(comp, \"name\");\n+        verifyEntityUpdateDuringFailover(comp, backendFailover);\n+\n+        // config - add new\n+        comp.getConfig().putSingle(\"val3\", \"val3 value\");\n+        comp = updateEntityOnCurrentFailNode(comp, \"config - adding\");\n+        verifyEntityUpdateDuringFailover(comp, backendFailover);\n+\n+        // config - remove\n+        comp.getConfig().remove(\"val3\");\n+        comp = updateEntityOnCurrentFailNode(comp, \"config - removing\");\n+        verifyEntityUpdateDuringFailover(comp, backendFailover);\n+\n+        // config - update 1\n+        comp.getConfig().get(\"val1\").set(0,\n+                comp.getConfig().get(\"val1\").get(0) + \" - updated\");\n+        comp = updateEntityOnCurrentFailNode(comp, \"config\");\n+        verifyEntityUpdateDuringFailover(comp, backendFailover);\n+\n+        return comp;\n+    }\n+\n+    @Test\n+    public void testComponentUpdating() {\n+        ComponentRepresentation testEntity = createTestEntityRepresentation();\n+\n+        // CREATE\n+        log.info(\"(1) createEntityOnCurrentFailNode\");\n+        ComponentRepresentation comp = createEntityOnCurrentFailNode(testEntity);\n+\n+        for (ContainerInfo ci : suiteContext.getAuthServerBackendsInfo()) {\n+            assertComponentHasCorrectConfig(comp, ci);\n+        }\n+\n+        iterateCurrentFailNode();\n+\n+        // config - add new\n+        comp.getConfig().putSingle(\"val3\", \"val3 value\");\n+        comp = updateEntityOnCurrentFailNode(comp, \"config - adding\");\n+\n+        for (ContainerInfo ci : suiteContext.getAuthServerBackendsInfo()) {\n+            assertComponentHasCorrectConfig(comp, ci);\n+        }\n+\n+        iterateCurrentFailNode();\n+\n+        // config - remove\n+        comp.getConfig().remove(\"val3\");\n+        comp = updateEntityOnCurrentFailNode(comp, \"config - removing\");\n+\n+        for (ContainerInfo ci : suiteContext.getAuthServerBackendsInfo()) {\n+            assertComponentHasCorrectConfig(comp, ci);\n+        }\n+\n+        iterateCurrentFailNode();\n+\n+        // config - update 1\n+        comp.getConfig().get(\"val1\").set(0,\n+                comp.getConfig().get(\"val1\").get(0) + \" - updated\");\n+        comp = updateEntityOnCurrentFailNode(comp, \"config\");\n+\n+        for (ContainerInfo ci : suiteContext.getAuthServerBackendsInfo()) {\n+            assertComponentHasCorrectConfig(comp, ci);\n+        }\n+    }\n+\n+    @Override\n+    protected void assertEntityOnSurvivorNodesEqualsTo(ComponentRepresentation testEntityOnFailNode) {\n+        super.assertEntityOnSurvivorNodesEqualsTo(testEntityOnFailNode);\n+\n+        for (ContainerInfo survivorNode : getCurrentSurvivorNodes()) {\n+            assertComponentHasCorrectConfig(testEntityOnFailNode, survivorNode);\n+        }\n+    }\n+\n+    protected void assertComponentHasCorrectConfig(ComponentRepresentation testEntityOnFailNode, ContainerInfo survivorNode) throws NumberFormatException {\n+        log.debug(String.format(\"Attempt to verify %s component reinstantiation on %s (%s)\", getEntityType(testEntityOnFailNode), survivorNode, survivorNode.getContextRoot()));\n+        Map<String, Map<String, Object>> config = getTestingClientFor(survivorNode).testing(testRealmName).getTestAmphibianComponentDetails();\n+        \n+        assertThat(config, hasKey(testEntityOnFailNode.getName()));\n+        Map<String, Object> c = config.get(testEntityOnFailNode.getName());\n+        assertThat(c, hasEntry(\"number\", Integer.valueOf(testEntityOnFailNode.getConfig().getFirst(\"number\"))));\n+        assertThat(c, hasEntry(\"required\", testEntityOnFailNode.getConfig().getFirst(\"required\")));\n+        assertThat(c, hasEntry(\"val1\", testEntityOnFailNode.getConfig().getFirst(\"val1\")));\n+        assertThat(c, hasEntry(\"val2\", testEntityOnFailNode.getConfig().getFirst(\"val2\")));\n+        final Object val3 = testEntityOnFailNode.getConfig().getFirst(\"val3\");\n+        if (val3 == null) {\n+            assertThat(c, anyOf(hasEntry(\"val3\", null), not(hasKey(\"val3\"))));\n+        } else {\n+            assertThat(c, hasEntry(\"val3\", val3));\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "c8bddbc2555a9f758fd47049b9ab3b0d9b07a214",
    "filename": "testsuite/integration-arquillian/tests/base/src/test/resources/arquillian.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/test/resources/arquillian.xml",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/test/resources/arquillian.xml",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/tests/base/src/test/resources/arquillian.xml?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -643,13 +643,15 @@\n                 <property name=\"route\">node1</property>\n                 <property name=\"remoteMode\">${quarkus.remote}</property>\n                 <property name=\"profile\">ha</property>\n+                <property name=\"debugPort\">5005</property>\n                 <property name=\"keycloakConfigPropertyOverrides\">{\n                     \"keycloak.connectionsInfinispan.jgroupsUdpMcastAddr\": \"234.56.78.8\",\n                     \"keycloak.connectionsInfinispan.nodeName\": \"node1\",\n                     \"keycloak.connectionsInfinispan.clustered\": \"${keycloak.connectionsInfinispan.clustered:true}\"\n                     }\n                 </property>\n                 <property name=\"javaOpts\">-Xms512m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=512m -Djava.net.preferIPv4Stack=true</property>\n+                <property name=\"outputToConsole\">true</property>\n             </configuration>\n         </container>\n         <container qualifier=\"auth-server-quarkus-backend2\" mode=\"manual\" >\n@@ -664,13 +666,15 @@\n                 <property name=\"route\">node2</property>\n                 <property name=\"remoteMode\">${quarkus.remote}</property>\n                 <property name=\"profile\">ha</property>\n+                <property name=\"debugPort\">5006</property>\n                 <property name=\"keycloakConfigPropertyOverrides\">{\n                     \"keycloak.connectionsInfinispan.jgroupsUdpMcastAddr\": \"234.56.78.8\",\n                     \"keycloak.connectionsInfinispan.nodeName\": \"node2\",\n                     \"keycloak.connectionsInfinispan.clustered\": \"${keycloak.connectionsInfinispan.clustered:true}\"\n                     }\n                 </property>\n                 <property name=\"javaOpts\">-Xms512m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=512m -Djava.net.preferIPv4Stack=true</property>\n+                <property name=\"outputToConsole\">true</property>\n             </configuration>\n         </container>\n     </group>"
  },
  {
    "sha": "eff5b25d7150ce2caba1a986dff24be61a277c0a",
    "filename": "testsuite/integration-arquillian/tests/base/src/test/resources/log4j.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/keycloak/keycloak/blob/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/test/resources/log4j.properties",
    "raw_url": "https://github.com/keycloak/keycloak/raw/b29930e7a27faf733ee869f3e2581b5c153cad6b/testsuite/integration-arquillian/tests/base/src/test/resources/log4j.properties",
    "contents_url": "https://api.github.com/repos/keycloak/keycloak/contents/testsuite/integration-arquillian/tests/base/src/test/resources/log4j.properties?ref=b29930e7a27faf733ee869f3e2581b5c153cad6b",
    "patch": "@@ -40,6 +40,7 @@ log4j.logger.org.keycloak.testsuite.arquillian.undertow.lb.SimpleUndertowLoadBal\n \n # Enable to view loaded SPI and Providers\n # log4j.logger.org.keycloak.services.DefaultKeycloakSessionFactory=debug\n+# log4j.logger.org.keycloak.services.DefaultComponentFactoryProviderFactory=debug\n # log4j.logger.org.keycloak.provider.ProviderManager=debug\n # log4j.logger.org.keycloak.provider.FileSystemProviderLoaderFactory=debug\n "
  }
]
