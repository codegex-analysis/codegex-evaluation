[
  {
    "sha": "94a25f7f4cb416c083d265558da75d457237d671",
    "filename": ".idea/vcs.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/.idea/vcs.xml",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/.idea/vcs.xml",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/.idea/vcs.xml?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"VcsDirectoryMappings\">\n+    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "986cd00c75960ce5cf70b189263fc082a8f09c6a",
    "filename": "src/ru/geekbrains/java/levelone/lessonfive/Employee.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonfive/Employee.java",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonfive/Employee.java",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/src/ru/geekbrains/java/levelone/lessonfive/Employee.java?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.geekbrains.java.levelone.lessonfive;\n+\n+public class Employee {\n+    private String name;\n+    private String position;\n+    private int age;\n+    private int phone;\n+    private double salary;\n+\n+\n+    public Employee(String name, String position, int age, int phone, double salary) {\n+        this.name = name;\n+        this.position = position;\n+        this.age = age;\n+        this.phone = phone;\n+        this.salary = salary;\n+    }\n+    public void inf(){\n+        System.out.println(\"Сотрудник :\" + name + \"\\nДолжность :\" + position + \"\\nВозраст :\" + age);\n+    }\n+\n+    public int getAge(){\n+        return age;\n+    }\n+\n+\n+}"
  },
  {
    "sha": "34f1ef12dd12d3a6664109186588451034133c94",
    "filename": "src/ru/geekbrains/java/levelone/lessonfive/LessonFiveApp.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonfive/LessonFiveApp.java",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonfive/LessonFiveApp.java",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/src/ru/geekbrains/java/levelone/lessonfive/LessonFiveApp.java?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.geekbrains.java.levelone.lessonfive;\n+\n+public class LessonFiveApp {\n+    public static void main(String[] args) {\n+       // Employee employee1 = new Employee(\"Victor\", \"manager\", 30, 45-12-12,35000.00);\n+       // employee1.inf();\n+\n+        Employee[] arrEmpl = new Employee[5];\n+        arrEmpl[0] = new Employee(\"Maxim\",\"CEO\",45,450101,100000.00);\n+        arrEmpl[1] = new Employee(\"Oleg\",\"Manager\",32,450111,45000.00);\n+        arrEmpl[2] = new Employee(\"Natasha\",\"Secretary\",25,450112,40000.00);\n+        arrEmpl[3] = new Employee(\"Igor\",\"IT\",30,450110,60000.00);\n+        arrEmpl[4] = new Employee(\"Elena\",\"Accountant\",41,450245,55000.00);\n+\n+        for (int i = 0; i < arrEmpl.length; i++) {\n+            if(arrEmpl[i].getAge() > 40) arrEmpl[i].inf();\n+        }\n+        }\n+\n+    }\n+\n+"
  },
  {
    "sha": "8be5647f8ff0dd6173398d145e45455225a6c1ac",
    "filename": "src/ru/geekbrains/java/levelone/lessonfour/LessonFour.java",
    "status": "added",
    "additions": 139,
    "deletions": 0,
    "changes": 139,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonfour/LessonFour.java",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonfour/LessonFour.java",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/src/ru/geekbrains/java/levelone/lessonfour/LessonFour.java?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,139 @@\n+package ru.geekbrains.java.levelone.lessonfour;\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class LessonFour {\n+    private static char [][] map;\n+    private static final int SIZE = 3;\n+    private static final char EMPTY_DOT = '•';\n+    private static final char X_DOT = 'X';\n+    private static final char O_DOT = 'O';\n+    private static Scanner sc;\n+\n+\n+    public static void main(String[] args) {\n+\n+        initMap();\n+        printMap();\n+        while (true) {\n+            humanTurn();\n+            printMap();\n+            System.out.println();\n+            if (checkWin(X_DOT)) {\n+                System.out.println(\"You win\");\n+                break;\n+            }\n+            if (checkDraw()) {\n+                System.out.println(\"Draw\");\n+                break;\n+            }\n+            computerTurn();\n+            printMap();\n+            System.out.println();\n+            if (checkWin(O_DOT)) {\n+                System.out.println(\"You Lost\");\n+                break;\n+            }\n+            if (checkDraw()) {\n+                System.out.println(\"Draw\");\n+                break;\n+            }\n+            try {\n+                Thread.sleep(500);\n+            } catch (InterruptedException ignored) {\n+            }\n+        }\n+    }\n+\n+    private static boolean checkDraw() {\n+        for (char[] chars : map) {\n+            for (char aChar : chars) {\n+                if (aChar == EMPTY_DOT) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static boolean checkWin(char c) {\n+        if(map[0][0] == c && map[0][1] == c && map[0][2] == c) {\n+            return true;\n+        }\n+        if(map[1][0] == c && map[1][1] == c && map[1][2] == c) {\n+            return true;\n+        }\n+        if(map[2][0] == c && map[2][1] == c && map[2][2] == c) {\n+            return true;\n+        }\n+        if(map[0][0] == c && map[1][0] == c && map[2][0] == c) {\n+            return true;\n+        }\n+        if(map[0][1] == c && map[1][1] == c && map[2][1] == c) {\n+            return true;\n+        }\n+        if(map[0][2] == c && map[1][2] == c && map[2][2] == c) {\n+            return true;\n+        }\n+        if(map[0][0] == c && map[1][1] == c && map[2][2] == c) {\n+            return true;\n+        }\n+        if(map[2][0] == c && map[1][1] == c && map[0][2] == c) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private static void computerTurn() {\n+        int xCoordinate;\n+        int yCoordinate;\n+        do {\n+            Random random = new Random();\n+            xCoordinate = random.nextInt(SIZE);\n+            yCoordinate = random.nextInt(SIZE);\n+        } while (!isValidCell(xCoordinate, yCoordinate));\n+        map[yCoordinate][xCoordinate] = O_DOT;\n+    }\n+\n+    private static void humanTurn() {\n+        int xCoordinate = -1;\n+        int yCoordinate = -1;\n+        do {\n+            System.out.println(\"Введите координаты в формате x y\");\n+            if (sc.hasNextInt()) {\n+                xCoordinate = sc.nextInt() - 1;\n+            }\n+            if (sc.hasNextInt()) {\n+                yCoordinate = sc.nextInt() - 1;\n+            }\n+            sc.nextLine();\n+        } while (!isValidCell(xCoordinate, yCoordinate));\n+        map[yCoordinate][xCoordinate] = X_DOT;\n+    }\n+\n+    private static boolean isValidCell(int x, int y) {\n+        if (x < 0 || y < 0 || x > map.length - 1 || y > map.length - 1) {\n+            return false;\n+        }\n+        return map[y][x] == EMPTY_DOT;\n+    }\n+\n+    private static void printMap() {\n+        for (char[] chars : map) {\n+            for (char aChar : chars) {\n+                System.out.print(aChar + \" \");\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    private static void initMap() {\n+        sc = new Scanner(System.in);\n+        map = new char[SIZE][SIZE];\n+        for (char[] chars : map) {\n+            Arrays.fill(chars, EMPTY_DOT);\n+        }\n+    }\n+}\n+"
  },
  {
    "sha": "ae523e7183ddc80b6f88d63d62519cc1d61d46f4",
    "filename": "src/ru/geekbrains/java/levelone/lessonsix/Animal.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonsix/Animal.java",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonsix/Animal.java",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/src/ru/geekbrains/java/levelone/lessonsix/Animal.java?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,14 @@\n+package ru.geekbrains.java.levelone.lessonsix;\n+\n+public abstract class Animal {\n+    String name;\n+    int maxRun = 0;\n+    int maxSwim = 0;\n+\n+\n+    public abstract void toRun(int distance);\n+    public abstract void toSwim(int distance);\n+\n+\n+\n+}"
  },
  {
    "sha": "4d8d972d3395898501c867a33466fc4f1de29126",
    "filename": "src/ru/geekbrains/java/levelone/lessonsix/Cat.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonsix/Cat.java",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonsix/Cat.java",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/src/ru/geekbrains/java/levelone/lessonsix/Cat.java?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,24 @@\n+package ru.geekbrains.java.levelone.lessonsix;\n+\n+public class Cat extends Animal {\n+    public Cat(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void toRun(int distance) {\n+        maxRun = 200;\n+        if (distance >= maxRun){\n+            System.out.println(\"Кот   не пробежит \" + distance + \" метров\");\n+        } else {\n+            System.out.println(\"Кот \" + name  + \" пробежит \" + distance + \" метров\");\n+        }\n+\n+    }\n+\n+    @Override\n+    public void toSwim(int distance) {\n+        System.out.println(\" Коты не плавают !!!\");\n+\n+    }\n+}"
  },
  {
    "sha": "9d166002e43cb6bc168d6263dc72e90b333251c4",
    "filename": "src/ru/geekbrains/java/levelone/lessonsix/Dog.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonsix/Dog.java",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonsix/Dog.java",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/src/ru/geekbrains/java/levelone/lessonsix/Dog.java?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,30 @@\n+package ru.geekbrains.java.levelone.lessonsix;\n+\n+public class Dog extends Animal {\n+    public Dog(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void toRun(int distance) {\n+        maxRun = 500;\n+        if (distance >= maxRun) {\n+            System.out.println(\"Собака не пробежит \" + distance + \" метров\");\n+        } else {\n+            System.out.println(\"Собака \" + name + \" пробежит \" + distance + \" метров\");\n+\n+        }\n+    }\n+\n+    @Override\n+    public void toSwim(int distance) {\n+        maxSwim = 500;\n+        if (distance >= maxSwim) {\n+            System.out.println(\"Собака не пробежит \" + distance + \" метров\");\n+        } else {\n+            System.out.println(\"Собака \" + name + \" пробежит \" + distance + \" метров\");\n+\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "08e2e34e1b9ba22c6de6c22984625767849e1798",
    "filename": "src/ru/geekbrains/java/levelone/lessonsix/LessonSixApp.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonsix/LessonSixApp.java",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonsix/LessonSixApp.java",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/src/ru/geekbrains/java/levelone/lessonsix/LessonSixApp.java?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,18 @@\n+package ru.geekbrains.java.levelone.lessonsix;\n+\n+public class LessonSixApp {\n+    public static void main(String[] args) {\n+        Animal animals[] = {\n+                new Cat(\"Barsik\"),\n+                new Dog(\"Bobik\"),\n+                new Dog (\"Sharik\"),\n+                new Cat(\"Tom\")\n+        };\n+        for (int i = 0; i < animals.length; i++) {\n+            animals[i].toRun(400);\n+            animals[i].toSwim( 5);\n+\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "69abd9d2f1ea634011a987ef563d69e99528be04",
    "filename": "src/ru/geekbrains/java/levelone/lessonthree/LessonThree.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonthree/LessonThree.java",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessonthree/LessonThree.java",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/src/ru/geekbrains/java/levelone/lessonthree/LessonThree.java?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,39 @@\n+package ru.geekbrains.java.levelone.lessonthree;\n+\n+import java.util.Random;\n+import java.util.Scanner;\n+\n+public class LessonThree {\n+    public static void main(String[] args) {\n+\n+\n+        Scanner scanner = new Scanner(System.in);\n+        do {\n+            System.out.println(\"Угадайте число от 0 до 9. У вас 3 попытки. Введите число: \");\n+\n+            Random random = new Random();\n+            int compNumber = random.nextInt(10);\n+            //System.out.println(compNumber);\n+            int count = 3;\n+            while (count != 0) {\n+                int humanNumber = scanner.nextInt();\n+\n+                if (compNumber == humanNumber) {\n+                    System.out.println(\"Победа\");\n+                    break;\n+                }\n+                if (compNumber > humanNumber) {\n+                    count--;\n+                    System.out.println(\"Загаданное число больше. Осталось попыток - \" + count);\n+                }\n+                if (compNumber < humanNumber) {\n+                    count--;\n+                    System.out.println(\"Загаданно число меньше. Осталось попыток - \" + count);\n+                }\n+            }\n+            System.out.println(\"Хотите попробовать еще раз? 1 - да, 2 - нет\");\n+\n+        }while (scanner.nextInt() == 1);\n+    }\n+\n+}"
  },
  {
    "sha": "58d7adbca5fe0452d57310619b36763d84c2c41e",
    "filename": "src/ru/geekbrains/java/levelone/lessontwo/LessonTwo.java",
    "status": "added",
    "additions": 127,
    "deletions": 0,
    "changes": 127,
    "blob_url": "https://github.com/EvgenyGasik/JavaLevelOne/blob/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessontwo/LessonTwo.java",
    "raw_url": "https://github.com/EvgenyGasik/JavaLevelOne/raw/69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d/src/ru/geekbrains/java/levelone/lessontwo/LessonTwo.java",
    "contents_url": "https://api.github.com/repos/EvgenyGasik/JavaLevelOne/contents/src/ru/geekbrains/java/levelone/lessontwo/LessonTwo.java?ref=69509d4e13c6d47c3bf2bdc5eb31a09d8affa82d",
    "patch": "@@ -0,0 +1,127 @@\n+package ru.geekbrains.java.levelone.lessontwo;\n+\n+import java.util.Arrays;\n+\n+public class LessonTwo {\n+    public static void main(String[] args) {\n+       // invertArray();\n+       // System.out.println();\n+       // fillArr();\n+       // System.out.println();\n+       // multiplyarr();\n+       // System.out.println();\n+       // diagonalArr();\n+       // System.out.println();\n+       //maxMinArr();\n+       // System.out.println();\n+       // chekBalance();\n+        displaceArr(1);\n+        \n+    }\n+        /*\n+        7. **** Написать метод, которому на вход подается одномерный массив и число n (может быть положительным, или отрицательным),\n+        при этом метод должен сместить все элементы массива на n позиций. Элементы смещаются циклично.\n+        Для усложнения задачи нельзя пользоваться вспомогательными массивами. Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ].\n+         При каком n в какую сторону сдвиг можете выбирать сами.\n+         */\n+  private static void displaceArr(int shift) {\n+        int[] arr = {1,2,3,4};\n+        for (int i = 0; i < arr.length; i++) {\n+\n+            }\n+      }\n+\n+\n+\n+\n+    /*\n+    6. ** Написать метод, в который передается не пустой одномерный целочисленный массив,\n+     метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны.\n+     Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,\n+     граница показана символами ||, эти символы в массив не входят\n+     */\n+        private static void chekBalance() {\n+        int[] arr = {2, 2, 2, 1, 2, 2, 10, 1};\n+    }\n+\n+    /*\n+    5. Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);\n+     */\n+    private static void maxMinArr() {\n+        int[] arr = {2,3,5,2,7,8,12,45};\n+        int min = arr[0];\n+        int max = arr[0];\n+        for (int i = 0; i < arr.length ; i++) {\n+            if (min > arr[i]){\n+                min = arr[i];\n+            } if (max < arr[i]){\n+                max = arr[i];\n+            }\n+\n+        }\n+        System.out.println(min + \" \" + max);\n+    }\n+\n+    /*\n+    4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое) \n+    и с помощью цикла(-ов) заполнить его диагональные элементы единицами;\n+     */\n+    private static void diagonalArr() {\n+        int[][] arr = new int[5][5];\n+        for (int i = 0; i <arr.length ; i++) {\n+            for (int j = 0; j < arr[i].length; j++) {\n+                if( i == j || j == arr[i].length -1 - i){\n+                    arr[i][j] = 1;\n+                }\n+                System.out.print(arr[i][j]);\n+            }\n+            System.out.println();\n+            \n+        }\n+    }\n+\n+    /*\n+    3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2;\n+     */\n+    private static void multiplyarr() {\n+        int[] arr = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 };\n+        for (int i = 0; i < arr.length; i++) {\n+            if(arr[i] < 6){\n+                arr[i] *= 2;\n+            }\n+            System.out.print(arr[i]);\n+        }\n+    }\n+\n+    /*\n+    2. Задать пустой целочисленный массив размером 8.\n+     С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;\n+     */\n+    private static void fillArr() {\n+        int[] arr = new int[8];\n+\n+                for (int i = 0; i < arr.length; i++) {\n+\n+               arr[i] = i*3;\n+\n+            System.out.print(arr[i] + \" \");\n+        }\n+\n+    }\n+\n+        /*\n+        1. Задать целочисленный массив, состоящий из элементов 0 и 1.\n+        Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. С помощью цикла и условия заменить 0 на 1, 1 на 0;\n+         */\n+    private static void invertArray() {\n+        int[] arr = {1,1,0,0,1,0,1,1,0,0};\n+        for (int i = 0; i < arr.length; i++) {\n+            if(arr[i] == 0){\n+                arr[i] = 1;\n+            } else {\n+                arr[i] = 0;\n+            }\n+            System.out.print(arr[i]);\n+        }\n+    }\n+}"
  }
]
