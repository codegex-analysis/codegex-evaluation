[
  {
    "sha": "0d16f3a1c81b5fd72d29bacb6c828d02624d099b",
    "filename": "lesson3/src/Task18_CheckPunctuation.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/VictorGuschenko/Java_Free_IT/blob/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task18_CheckPunctuation.java",
    "raw_url": "https://github.com/VictorGuschenko/Java_Free_IT/raw/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task18_CheckPunctuation.java",
    "contents_url": "https://api.github.com/repos/VictorGuschenko/Java_Free_IT/contents/lesson3/src/Task18_CheckPunctuation.java?ref=e4ac44ae5937a311e811431d7d5feb0291d00e62",
    "patch": "@@ -0,0 +1,30 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+\n+/**\n+ * Найти в строке не только запятые, но и другие знаки препинания. Подсчитать\n+ * общее их количество.\n+ */\n+public class Task18_CheckPunctuation {\n+    public static void main(String[] args) {\n+        String line = \"While he [Mr. Smith] was writing his book, \" +\n+                \"Magic: the little known world! he stated, \\\"I always wanted \" +\n+                \"to ask a magician, 'How do you do it?'\\\"; he luckily got the \" +\n+                \"chance while he was living above a math based magic shop (where he \" +\n+                \"lived from 1993 - 1997) called: \\\"YUP\\\".\";\n+        char symbol;\n+        int counter = 0;\n+        for (int i = 0; i < line.length(); i++) {\n+            symbol = line.charAt(i);\n+            if (symbol == '.' || symbol == ',' || symbol == '\\\"' || symbol == ':'\n+                    || symbol == '!' || symbol == '[' || symbol == ']' || symbol == '\\''\n+                    || symbol == ';' || symbol == '-' || symbol == '(' || symbol == ')'\n+                    || symbol == '{' || symbol == '}' || symbol == '?') {\n+                counter++;\n+            }\n+        }\n+        System.out.println(counter);\n+    }\n+}\n+"
  },
  {
    "sha": "593167fb26263a05bf98b30b9e43b4a384618e3a",
    "filename": "lesson3/src/Task19_CountAmountOfWords.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/VictorGuschenko/Java_Free_IT/blob/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task19_CountAmountOfWords.java",
    "raw_url": "https://github.com/VictorGuschenko/Java_Free_IT/raw/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task19_CountAmountOfWords.java",
    "contents_url": "https://api.github.com/repos/VictorGuschenko/Java_Free_IT/contents/lesson3/src/Task19_CountAmountOfWords.java?ref=e4ac44ae5937a311e811431d7d5feb0291d00e62",
    "patch": "@@ -0,0 +1,16 @@\n+\n+/**\n+ * Имеется строка с текстом. Подсчитать количество слов в тексте. Желательно\n+ * учесть, что слова могут разделяться несколькими пробелами, в начале и конце\n+ * текста также могут быть пробелы, но могут и отсутствовать.\n+ */\n+public class Task19_CountAmountOfWords {\n+    public static void main(String[] args) {\n+        String line = \"    There is a text. Count amount of words in the text. \" +\n+                \"The text can contain several    spaces between the words. \" +\n+                \"Also spaces can    place at the beginning of the text and in the end. \";\n+        String trimmedLine = line.trim().replaceAll(\"\\\\W+\", \" \"); // \\W - not word character.\n+        String [] wordsArray = trimmedLine.split(\" +\");\n+        System.out.println(wordsArray.length);\n+    }\n+}"
  },
  {
    "sha": "9255de1a055b525fb74d4e48f59eca58667cf945",
    "filename": "lesson3/src/Task20_PrintLastCharactersOfWords.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/VictorGuschenko/Java_Free_IT/blob/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task20_PrintLastCharactersOfWords.java",
    "raw_url": "https://github.com/VictorGuschenko/Java_Free_IT/raw/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task20_PrintLastCharactersOfWords.java",
    "contents_url": "https://api.github.com/repos/VictorGuschenko/Java_Free_IT/contents/lesson3/src/Task20_PrintLastCharactersOfWords.java?ref=e4ac44ae5937a311e811431d7d5feb0291d00e62",
    "patch": "@@ -0,0 +1,19 @@\n+\n+/**\n+ * Имеется строка с текстом. Вывести текст, составленный из последних букв\n+ * всех слов.\n+ */\n+public class Task20_PrintLastCharactersOfWords {\n+    public static void main(String[] args) {\n+        String text = \"Oracle Cloud Infrastructure is an IaaS that delivers on-premises, \" +\n+                \"high-performance computing power to run cloud native and enterprise \" +\n+                \"company’s IT workloads. OCI provides real-time elasticity for enterprise \" +\n+                \"applications by combining Oracle's autonomous services, integrated security, \" +\n+                \"and serverless compute. Available for public cloud.\";\n+        String [] wordsArr = text.split(\"\\\\W?[ -.]+\");\n+        for (String s : wordsArr) {\n+            System.out.println(s.charAt(s.length() -1));\n+        }\n+\n+    }\n+}"
  },
  {
    "sha": "08358be0f9ea197f68c6bb36cded6d6393620a3e",
    "filename": "lesson3/src/Task21_StringStringBufferStringBuilderTest.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/VictorGuschenko/Java_Free_IT/blob/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task21_StringStringBufferStringBuilderTest.java",
    "raw_url": "https://github.com/VictorGuschenko/Java_Free_IT/raw/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task21_StringStringBufferStringBuilderTest.java",
    "contents_url": "https://api.github.com/repos/VictorGuschenko/Java_Free_IT/contents/lesson3/src/Task21_StringStringBufferStringBuilderTest.java?ref=e4ac44ae5937a311e811431d7d5feb0291d00e62",
    "patch": "@@ -0,0 +1,36 @@\n+/**\n+ * Напишите три цикла выполняющих многократное сложение строк, один с\n+ * помощью оператора сложения и String, другой с помощью StringBuilder и метода\n+ * append, а также аналогино для StringBuffer. Сравните скорость их выполнения.\n+ */\n+public class Task21_StringStringBufferStringBuilderTest {\n+    public static void main(String[] args) {\n+        String line = \"test\";\n+        StringBuffer bufferLine = new StringBuffer(\"test\");\n+        StringBuilder builderLine = new StringBuilder(\"test\");\n+        long startTime;\n+        long timeSpent;\n+\n+        startTime = System.currentTimeMillis();\n+        for (int i = 0; i < 100000; i++) {\n+            line += \"new test\";\n+        }\n+        timeSpent = System.currentTimeMillis() - startTime;\n+        System.out.println(\"String time, ms: \" + timeSpent);\n+\n+        startTime = System.currentTimeMillis();\n+\n+         for (int i = 0; i < 100000; i++) {\n+            bufferLine.append(\"new test\");\n+        }\n+        timeSpent = System.currentTimeMillis() - startTime;\n+        System.out.println(\"StringBuffer time, ms: \" + timeSpent);\n+\n+        startTime = System.currentTimeMillis();\n+         for (int i = 0; i < 100000; i++) {\n+            builderLine.append(\"new test\");\n+        }\n+        timeSpent = System.currentTimeMillis() - startTime;\n+        System.out.println(\"StringBuilder time, ms: \" + timeSpent);\n+    }\n+}"
  },
  {
    "sha": "06423900f3a778c51f4cbe0ead6e0769479fd97f",
    "filename": "lesson3/src/Task22_FindHexNumbers.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/VictorGuschenko/Java_Free_IT/blob/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task22_FindHexNumbers.java",
    "raw_url": "https://github.com/VictorGuschenko/Java_Free_IT/raw/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task22_FindHexNumbers.java",
    "contents_url": "https://api.github.com/repos/VictorGuschenko/Java_Free_IT/contents/lesson3/src/Task22_FindHexNumbers.java?ref=e4ac44ae5937a311e811431d7d5feb0291d00e62",
    "patch": "@@ -0,0 +1,27 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Написать программу, выполняющую поиск в строке шестнадцатеричных чисел,\n+ * записаных по правилам Java, с помощью регулярных выражений и вывести их на\n+ * страницу.\n+ */\n+public class Task22_FindHexNumbers {\n+    public static void main(String[] args) {\n+        String text = \"INT_MAX: 0x7FFFFFFF, INT_MIN: 0x80000000, incorrect: 0xP012CCB, \" +\n+                \"incorrect: 0xkfbccababab333334bbbca, correct: 0xfb2cba1\" +\n+                \"LLONG_MAX: 0x7FFFFFFFFFFFFFFF, LLONG_MIN 0x8000000000000000\";\n+        String textLower = text.toLowerCase();\n+        Pattern regexp = Pattern.compile(\"0x[0-8a-f]{2,16}\");\n+        Matcher m = regexp.matcher(textLower);\n+        List<String> hexWords = new ArrayList<>();\n+        while (m.find()) {\n+            hexWords.add(m.group());\n+        }\n+        for (String hexWord : hexWords) {\n+            System.out.println(hexWord);\n+        }\n+    }\n+}"
  },
  {
    "sha": "fe82776225c9f32cc20ad155ffc09012034afbfe",
    "filename": "lesson3/src/Task23_FindParagraphTags.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/VictorGuschenko/Java_Free_IT/blob/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task23_FindParagraphTags.java",
    "raw_url": "https://github.com/VictorGuschenko/Java_Free_IT/raw/e4ac44ae5937a311e811431d7d5feb0291d00e62/lesson3/src/Task23_FindParagraphTags.java",
    "contents_url": "https://api.github.com/repos/VictorGuschenko/Java_Free_IT/contents/lesson3/src/Task23_FindParagraphTags.java?ref=e4ac44ae5937a311e811431d7d5feb0291d00e62",
    "patch": "@@ -0,0 +1,15 @@\n+\n+/**\n+ * Написать программу, выполняющую поиск в строке всех тегов абзацев, в т.ч. тех, у\n+ * которых есть параметры, например <p id=”p1”>, и замену их на простые теги\n+ * абзацев <p>.\n+ */\n+public class Task23_FindParagraphTags {\n+    public static void main(String[] args) {\n+        String text = \"</div> Написать программу, выполняющую поиск </div>\\n\" +\n+                \"</p> в строке всех тегов </p> абзацев, в т.ч. тех, у </p id=”p251”>\\n\" +\n+                \"<p id=”p1”> которых  есть параметры, например <p id=”p1”>, и замену их </div>\\n\" +\n+                \"<div> на простые теги абзацев <p>.\";\n+        System.out.println(text.replaceAll(\"</?p( id=”p[1-9]+”)?>|</?div>\", \"<p>\"));\n+    }\n+}"
  }
]
