[
  {
    "sha": "143bd71efa6307d29a0709e571dd5140122add50",
    "filename": "Jenkinsfile",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/Jenkinsfile",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/Jenkinsfile",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/Jenkinsfile?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -10,7 +10,7 @@ pipeline {\n         }\n         stage('Post') {\n             steps {\n-                archiveArtifacts 'target/GeyserUpdater-1.2.0-SNAPSHOT.jar'\n+                archiveArtifacts 'target/GeyserUpdater-1.3.0-SNAPSHOT.jar'\n                   }\n \n                 }"
  },
  {
    "sha": "c77e01e1d25e33a70d6f2060d68b14692985ac6f",
    "filename": "README.md",
    "status": "modified",
    "additions": 10,
    "deletions": 3,
    "changes": 13,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/README.md",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/README.md",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/README.md?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -2,13 +2,14 @@\n [![License](https://img.shields.io/badge/License-GPL-orange)](https://github.com/YHDiamond/GeyserUpdater/blob/main/LICENSE)\n [![bStats Spigot](https://img.shields.io/bstats/servers/10202?color=yellow&label=Spigot%20servers)](https://bstats.org/plugin/bukkit/GeyserUpdater/10202)\n [![bStats Bungee](https://img.shields.io/bstats/servers/10203?label=Bungee%20servers)](https://bstats.org/plugin/bungeecord/GeyserUpdater/10203)\n+[![bStats Velocity](https://img.shields.io/bstats/servers/10673?color=purple&label=Velocity%20servers)](https://bstats.org/plugin/velocity/GeyserUpdater/10673)\n [![Discord](https://img.shields.io/discord/806179549498966058?color=7289da&label=discord&logo=discord&logoColor=white)](https://discord.gg/xXzzdAXa2b)\n [![Spigot page downloads](https://img.shields.io/spiget/downloads/88555?color=yellow&label=Spigot%20page%20downloads)](https://www.spigotmc.org/resources/geyserupdater.88555/)\n [![Spigot reviews](https://img.shields.io/spiget/stars/88555?color=yellow&label=Spigot%20rating)](https://www.spigotmc.org/resources/geyserupdater.88555/)\n \n # GeyserUpdater\n  \n-GeyserUpdater is a plugin that can update Geyser-Spigot | Geyser-BungeeCord manually or automatically. \n+GeyserUpdater is a plugin that can update Geyser on Spigot, Bungeecord and Velocity manually or automatically. \n \n \n ## Downloading\n@@ -20,7 +21,7 @@ If you don't want to use the Spigot website you can download the plugin [on our\n \n ## Installation\n \n-GeyserUpdater can be installed on Spigot & Bungeecord. Place the GeyserUpdater plugin file in the plugins folder and restart the server.\n+GeyserUpdater can be installed on Spigot, Bungeecord, and Velocity. Place the GeyserUpdater plugin file in the plugins folder and restart the server.\n \n \n # Permissions:\n@@ -79,6 +80,8 @@ After you run the `/geyserupdate` command or enable auto updating, it will check\n \n \n ## Release History\n+* 1.3.0\n+    * Added Velocity support.\n * 1.2.0\n     * Added Restart script generating depended on OS, and setting it up on spigot.yml.\n     * Added config version check.\n@@ -108,6 +111,10 @@ The project is owned by:\n - Jens\n - YHDiamond  \n \n-Special thanks to rtm516 who helped us with basically everything. Without him this project wouldn't even have a readme.  \n+\n+\n+Special thanks to:\n+- rtm516; who helped us with basically everything. Without him this project wouldn't even have a readme.  \n+- Konica; who did alot of work on the updater code.\n \n Note: This is NOT an official GeyserMC plugin. It is made to work with GeyserMC but it is not maintained or produced by GeyserMC. If you need support with this plugin, do not ask Geyser devs, and instead, go to our Discord server linked above."
  },
  {
    "sha": "45515040888956c490f75f1349c38e6c56ab57de",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/pom.xml",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/pom.xml",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/pom.xml?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -6,7 +6,7 @@\n \n     <groupId>com.alysaa</groupId>\n     <artifactId>GeyserUpdater</artifactId>\n-    <version>1.2.0-SNAPSHOT</version>\n+    <version>1.3.0-SNAPSHOT</version>\n \n     <properties>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n@@ -20,6 +20,10 @@\n             <id>spigot-repo</id>\n             <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>\n         </repository>\n+        <repository>\n+            <id>velocity</id>\n+            <url>https://nexus.velocitypowered.com/repository/maven-public/</url>\n+        </repository>\n         <repository>\n             <id>opencollab-release-repo</id>\n             <url>https://repo.opencollab.dev/maven-releases/</url>\n@@ -54,6 +58,12 @@\n             <type>jar</type>\n             <scope>provided</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.velocitypowered</groupId>\n+            <artifactId>velocity-api</artifactId>\n+            <version>1.1.4</version>\n+            <scope>provided</scope>\n+        </dependency>\n         <dependency>\n             <groupId>net.md-5</groupId>\n             <artifactId>bungeecord-api</artifactId>"
  },
  {
    "sha": "d3e550a6df161c13ad6ad8d64e4c4f403a44ee35",
    "filename": "src/main/java/com/alysaa/geyserupdater/bungee/BungeeUpdater.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/bungee/BungeeUpdater.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/bungee/BungeeUpdater.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/bungee/BungeeUpdater.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -1,6 +1,7 @@\n package com.alysaa.geyserupdater.bungee;\n \n import com.alysaa.geyserupdater.bungee.command.GeyserCommand;\n+import com.alysaa.geyserupdater.bungee.util.BungeeJoinListener;\n import com.alysaa.geyserupdater.bungee.util.Config;\n import com.alysaa.geyserupdater.bungee.util.bstats.Metrics;\n import com.alysaa.geyserupdater.bungee.util.BungeeResourceUpdateChecker;\n@@ -33,7 +34,7 @@\n     @Override\n     public void onEnable() {\n         new Metrics(this, 10203);\n-        getLogger().info(\"GeyserUpdater v1.2.0 has been enabled\");\n+        getLogger().info(\"GeyserUpdater v1.3.0 has been enabled\");\n         plugin = this;\n         this.getProxy().getPluginManager().registerCommand(this, new GeyserCommand());\n         this.onConfig();\n@@ -44,8 +45,10 @@ public void onEnable() {\n             e.printStackTrace();\n         }\n         this.checkConfigVer();\n+        // Player alert if a restart is required when they join\n+        getProxy().getPluginManager().registerListener(this, new BungeeJoinListener());\n         // Check if downloaded Geyser file exists periodically\n-        getProxy().getScheduler().schedule(this, CheckBuildFile::checkBungeeFile, 30, 720, TimeUnit.MINUTES);\n+        getProxy().getScheduler().schedule(this, () -> CheckBuildFile.checkBungeeFile(true), 30, 720, TimeUnit.MINUTES);\n         // Check GeyserUpdater version periodically\n         getProxy().getScheduler().schedule(this, this::versionCheck, 0, 24, TimeUnit.HOURS);\n         // Make startup script"
  },
  {
    "sha": "55172e379456b8e379568a3a1ee693e40d45b48f",
    "filename": "src/main/java/com/alysaa/geyserupdater/bungee/util/BungeeJoinListener.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/bungee/util/BungeeJoinListener.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/bungee/util/BungeeJoinListener.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/bungee/util/BungeeJoinListener.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -0,0 +1,20 @@\n+package com.alysaa.geyserupdater.bungee.util;\n+\n+import com.alysaa.geyserupdater.common.util.CheckBuildFile;\n+import net.md_5.bungee.api.chat.TextComponent;\n+import net.md_5.bungee.api.event.PostLoginEvent;\n+import net.md_5.bungee.api.plugin.Listener;\n+import net.md_5.bungee.event.EventHandler;\n+\n+public class BungeeJoinListener implements Listener {\n+\n+    @EventHandler\n+    public void onPostLogin(PostLoginEvent event) {\n+        // We allow a cached result of maximum age 30 minutes to be used\n+        if (CheckBuildFile.checkBungeeFile(true)) {\n+            if (event.getPlayer().hasPermission(\"gupdater.geyserupdate\")) {\n+                event.getPlayer().sendMessage(new TextComponent(\"[GeyserUpdater] New Geyser build has been downloaded! BungeeCord restart is required!\"));\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a1f80b6ba694efe734f76640dd88d2b147817379",
    "filename": "src/main/java/com/alysaa/geyserupdater/bungee/util/GeyserBungeeDownload.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/bungee/util/GeyserBungeeDownload.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/bungee/util/GeyserBungeeDownload.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/bungee/util/GeyserBungeeDownload.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -56,7 +56,7 @@ public static void downloadGeyser() {\n             }\n         }\n         // Check if the file was downloaded successfully\n-        boolean downloadSuccess = CheckBuildFile.checkBungeeFile();\n+        boolean downloadSuccess = CheckBuildFile.checkBungeeFile(false);\n         // Restart the server if the option is enabled\n         if (BungeeUpdater.getConfiguration().getBoolean(\"Auto-Restart-Server\") && downloadSuccess) {\n             BungeeUpdater.plugin.getLogger().info(\"The Server will restart in 10 Seconds!\");"
  },
  {
    "sha": "76ab0c0a13e2160d054b599c7aa039572e7b9137",
    "filename": "src/main/java/com/alysaa/geyserupdater/common/util/CheckBuildFile.java",
    "status": "modified",
    "additions": 45,
    "deletions": 2,
    "changes": 47,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/common/util/CheckBuildFile.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/common/util/CheckBuildFile.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/common/util/CheckBuildFile.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -2,28 +2,71 @@\n \n import com.alysaa.geyserupdater.bungee.BungeeUpdater;\n import com.alysaa.geyserupdater.spigot.SpigotUpdater;\n+import com.alysaa.geyserupdater.velocity.VelocityUpdater;\n+\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n \n public class CheckBuildFile {\n+    // Epoch time at which the last direct build file check occurred.\n+    // Set to 0 first so a direct check always occurs first.\n+    private static long callTime = 0;\n+\n+    private static boolean cachedResult;\n \n-    public static boolean checkBungeeFile() {\n+    public static boolean checkVelocityFile(boolean forPlayer) {\n+        if (forPlayer) {\n+            long elapsedTime = System.currentTimeMillis() - callTime;\n+            if (elapsedTime < 30 * 60 * 1000) {\n+                return cachedResult;\n+            }\n+        }\n+        callTime = System.currentTimeMillis();\n+        Path p = Paths.get(\"plugins/GeyserUpdater/BuildUpdate/Geyser-Velocity.jar\");\n+        boolean exists = Files.exists(p);\n+        if (exists) {\n+            VelocityUpdater.logger.warn(\"New Geyser build has been downloaded! Velocity restart is required!\");\n+            cachedResult = true;\n+            return true;\n+        }\n+        cachedResult = false;\n+        return false;\n+    }\n+    public static boolean checkBungeeFile(boolean forPlayer) {\n+        if (forPlayer) {\n+            long elapsedTime = System.currentTimeMillis() - callTime;\n+            if (elapsedTime < 30 * 60 * 1000) {\n+                return cachedResult;\n+            }\n+        }\n+        callTime = System.currentTimeMillis();\n         Path p = Paths.get(\"plugins/GeyserUpdater/BuildUpdate/Geyser-BungeeCord.jar\");\n         boolean exists = Files.exists(p);\n         if (exists) {\n             BungeeUpdater.plugin.getLogger().info(\"New Geyser build has been downloaded! BungeeCord restart is required!\");\n+            cachedResult = true;\n             return true;\n         }\n+        cachedResult = false;\n         return false;\n     }\n-    public static boolean checkSpigotFile() {\n+    public static boolean checkSpigotFile(boolean forPlayer) {\n+        if (forPlayer) {\n+            long elapsedTime = System.currentTimeMillis() - callTime;\n+            if (elapsedTime < 30 * 60 * 1000) {\n+                return cachedResult;\n+            }\n+        }\n+        callTime = System.currentTimeMillis();\n         Path p = Paths.get(\"plugins/update/Geyser-Spigot.jar\");\n         boolean exists = Files.exists(p);\n         if (exists) {\n             SpigotUpdater.plugin.getLogger().info(\"New Geyser build has been downloaded! Server restart is required!\");\n+            cachedResult = true;\n             return true;\n         }\n+        cachedResult = false;\n         return false;\n     }\n }"
  },
  {
    "sha": "9b61e11ae8e92c6dd6734ea2a712fc86070fb4d6",
    "filename": "src/main/java/com/alysaa/geyserupdater/common/util/CheckBuildNum.java",
    "status": "modified",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/common/util/CheckBuildNum.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/common/util/CheckBuildNum.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/common/util/CheckBuildNum.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -4,6 +4,9 @@\n import com.alysaa.geyserupdater.bungee.util.GeyserBungeeDownload;\n import com.alysaa.geyserupdater.spigot.SpigotUpdater;\n import com.alysaa.geyserupdater.spigot.util.GeyserSpigotDownload;\n+import com.alysaa.geyserupdater.velocity.VelocityUpdater;\n+import com.alysaa.geyserupdater.velocity.util.GeyserVeloDownload;\n+import net.kyori.adventure.text.Component;\n import net.md_5.bungee.api.ProxyServer;\n import net.md_5.bungee.api.chat.TextComponent;\n import net.md_5.bungee.api.connection.ProxiedPlayer;\n@@ -13,6 +16,7 @@\n import org.geysermc.connector.utils.WebUtils;\n \n import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.Properties;\n@@ -71,4 +75,39 @@ public static void checkBuildNumberBungee() throws IOException {\n             }\n         }\n     }\n+    public static void checkBuildNumberVelocity() {\n+        Properties gitProp = new Properties();\n+        try {\n+            gitProp.load(FileUtils.getResource(\"git.properties\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        String buildXML = null;\n+        try {\n+            buildXML = WebUtils.getBody(\"https://ci.opencollab.dev//job/GeyserMC/job/Geyser/job/\" + URLEncoder.encode(gitProp.getProperty(\"git.branch\"), StandardCharsets.UTF_8.toString()) + \"/lastSuccessfulBuild/api/xml?xpath=//buildNumber\");\n+        } catch (UnsupportedEncodingException e) {\n+            e.printStackTrace();\n+        }\n+        if (buildXML.startsWith(\"<buildNumber>\")) {\n+            int latestBuildNum = Integer.parseInt(buildXML.replaceAll(\"<(\\\\\\\\)?(/)?buildNumber>\", \"\").trim());\n+            int buildNum = Integer.parseInt(gitProp.getProperty(\"git.build.number\"));\n+            // Compare build numbers.\n+            if (latestBuildNum == buildNum) {\n+                VelocityUpdater.logger.warn(\"Geyser is on the latest build!\");\n+                for (com.velocitypowered.api.proxy.Player all : VelocityUpdater.server.getAllPlayers()) {\n+                    if (all.hasPermission(\"gupdater.geyserupdate\")) {\n+                        all.sendMessage(Component.text(\"[GeyserUpdater] Geyser is on the latest build!\"));\n+                    }\n+                }\n+            } else {\n+                VelocityUpdater.logger.warn(\"Current running Geyser build is outdated, attempting to download latest!\");\n+                for (com.velocitypowered.api.proxy.Player all : VelocityUpdater.server.getAllPlayers()) {\n+                    if (all.hasPermission(\"gupdater.geyserupdate\")) {\n+                        all.sendMessage(Component.text(\"[GeyserUpdater] Current running Geyser build is outdated, attempting to download latest!\"));\n+                    }\n+                }\n+                GeyserVeloDownload.downloadGeyser();\n+            }\n+        }\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "3c675c53590d70b9deba75cee93098c6ead071be",
    "filename": "src/main/java/com/alysaa/geyserupdater/spigot/SpigotUpdater.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/spigot/SpigotUpdater.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/spigot/SpigotUpdater.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/spigot/SpigotUpdater.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -2,10 +2,12 @@\n \n import com.alysaa.geyserupdater.common.util.OSUtils;\n import com.alysaa.geyserupdater.spigot.command.GeyserCommand;\n+import com.alysaa.geyserupdater.spigot.util.SpigotJoinListener;\n import com.alysaa.geyserupdater.spigot.util.SpigotResourceUpdateChecker;\n import com.alysaa.geyserupdater.common.util.CheckBuildFile;\n import com.alysaa.geyserupdater.common.util.CheckBuildNum;\n import com.alysaa.geyserupdater.spigot.util.CheckSpigotRestart;\n+import org.bukkit.Bukkit;\n import org.bukkit.configuration.InvalidConfigurationException;\n import org.bukkit.configuration.file.FileConfiguration;\n import org.bukkit.configuration.file.YamlConfiguration;\n@@ -31,7 +33,7 @@ public static Plugin getPlugin() {\n     @Override\n     public void onEnable() {\n         new Metrics(this, 10202);\n-        getLogger().info(\"GeyserUpdater v1.2.0 has been enabled\");\n+        getLogger().info(\"GeyserUpdater v1.3.0 has been enabled\");\n         this.getCommand(\"geyserupdate\").setExecutor(new GeyserCommand());\n         createFiles();\n         checkConfigVer();\n@@ -54,6 +56,8 @@ public void onEnable() {\n         StartFileCheck.schedule(new StartTimer(), 1000 * 60 * 30, 1000 * 60 * 720);\n         // Logger for check update on GeyserUpdater\n         versionCheck();\n+        // Player alert if a restart is required when they join\n+        Bukkit.getServer().getPluginManager().registerEvents(new SpigotJoinListener(), this);\n         // Check if a restart script already exists\n         // We create one if it doesn't\n         if (getConfig().getBoolean(\"Auto-Script-Generating\")) {\n@@ -111,7 +115,7 @@ private void createFiles() {\n     private class StartTimer extends TimerTask {\n         @Override\n         public void run() {\n-            CheckBuildFile.checkSpigotFile();\n+            CheckBuildFile.checkSpigotFile(false);\n         }\n     }\n     private class StartUpdate extends TimerTask {"
  },
  {
    "sha": "155a38a7ba5ae2453d0b1361c5192b7ec3f548ae",
    "filename": "src/main/java/com/alysaa/geyserupdater/spigot/util/GeyserSpigotDownload.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/spigot/util/GeyserSpigotDownload.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/spigot/util/GeyserSpigotDownload.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/spigot/util/GeyserSpigotDownload.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -53,7 +53,7 @@ public static void downloadGeyser() {\n                     }\n                 }\n                 // Check if the file was downloaded successfully\n-                boolean downloadSuccess = CheckBuildFile.checkSpigotFile();\n+                boolean downloadSuccess = CheckBuildFile.checkSpigotFile(false);\n                 // Restart the server if the option is enabled\n                 if (SpigotUpdater.plugin.getConfig().getBoolean(\"Auto-Restart-Server\") && downloadSuccess) {\n                     SpigotUpdater.plugin.getLogger().info(\"The Server will restart in 10 seconds!\");"
  },
  {
    "sha": "a7ff2d31a09f60753b40d84913aea0de0a9be97f",
    "filename": "src/main/java/com/alysaa/geyserupdater/spigot/util/SpigotJoinListener.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/spigot/util/SpigotJoinListener.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/spigot/util/SpigotJoinListener.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/spigot/util/SpigotJoinListener.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -0,0 +1,19 @@\n+package com.alysaa.geyserupdater.spigot.util;\n+\n+import com.alysaa.geyserupdater.common.util.CheckBuildFile;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.player.PlayerJoinEvent;\n+\n+public class SpigotJoinListener implements Listener {\n+\n+    @EventHandler\n+    public void onPlayerJoin(PlayerJoinEvent event) {\n+        // We allow a cached result of maximum age 30 minutes to be used\n+        if (CheckBuildFile.checkSpigotFile(true)) {\n+            if (event.getPlayer().hasPermission(\"gupdater.geyserupdate\")) {\n+                event.getPlayer().sendMessage(\"[GeyserUpdater] New Geyser build has been downloaded! Server restart is required!\");\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e5237bd2bfb13dcb00de81958c846de3ffb00b93",
    "filename": "src/main/java/com/alysaa/geyserupdater/velocity/VelocityUpdater.java",
    "status": "added",
    "additions": 176,
    "deletions": 0,
    "changes": 176,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/VelocityUpdater.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/VelocityUpdater.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/velocity/VelocityUpdater.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -0,0 +1,176 @@\n+package com.alysaa.geyserupdater.velocity;\n+\n+import com.alysaa.geyserupdater.common.util.CheckBuildFile;\n+import com.alysaa.geyserupdater.common.util.CheckBuildNum;\n+import com.alysaa.geyserupdater.common.util.ScriptCreator;\n+import com.alysaa.geyserupdater.velocity.command.GeyserUpdaterCommand;\n+import com.alysaa.geyserupdater.common.util.OSUtils;\n+import com.alysaa.geyserupdater.velocity.util.VelocityJoinListener;\n+import com.alysaa.geyserupdater.velocity.util.bstats.Metrics;\n+import com.google.inject.Inject;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.velocitypowered.api.event.PostOrder;\n+import com.velocitypowered.api.event.Subscribe;\n+import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;\n+import com.velocitypowered.api.event.proxy.ProxyShutdownEvent;\n+import com.velocitypowered.api.plugin.Dependency;\n+import com.velocitypowered.api.plugin.Plugin;\n+import com.velocitypowered.api.plugin.annotation.DataDirectory;\n+import com.velocitypowered.api.proxy.ProxyServer;\n+import org.slf4j.Logger;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+@Plugin(id = \"geyserupdater\", name = \"GeyserUpdater\", version = \"1.3.0-SNAPSHOT\", description = \"Updating Geyser with ease\", authors = {\"Jens\"},\n+        dependencies = {@Dependency(id = \"geyser\")})\n+public class VelocityUpdater {\n+    public static ProxyServer server;\n+    public static Logger logger;\n+    public Path dataDirectory;\n+    public static Toml configf;\n+    private final Metrics.Factory metricsFactory;\n+    @Inject\n+    public VelocityUpdater(ProxyServer server, Logger logger, @DataDirectory final Path folder, Metrics.Factory metricsFactory) {\n+        this.server = server;\n+        com.alysaa.geyserupdater.velocity.VelocityUpdater.logger = logger;\n+        configf = loadConfig(folder);\n+        this.metricsFactory = metricsFactory;\n+    }\n+    @Subscribe\n+    public void onProxyInitialization(ProxyInitializeEvent event) {\n+        logger.info(\"Plugin has enabled!\");\n+        // Create folder for storing new Geyser jar\n+        createUpdateFolder();\n+        // Make startup script\n+        makeScriptFile();\n+        // Register our only command\n+        server.getCommandManager().register(\"geyserupdate\", new GeyserUpdaterCommand());\n+        // Player alert if a restart is required when they join\n+        server.getEventManager().register(this, new VelocityJoinListener());\n+        // Auto update Geyser if enabled in the config\n+        this.startAutoUpdate();\n+        // Check if downloaded Geyser file exists periodically\n+        TimerTask task = new TimerTask() {\n+            public void run() {\n+                CheckBuildFile.checkVelocityFile(true);\n+            }\n+        };\n+        Timer timer = new Timer(\"Timer\");\n+        timer.schedule(task, 60*30*1000,60*60*121000);\n+        Metrics metrics = metricsFactory.make(this, 10673);\n+    }\n+    public void onDisable() {\n+        try {\n+            this.moveGeyser();\n+        } catch (IOException e) {\n+            logger.warn(\"No updates have been implemented.\");\n+        }\n+        try {\n+            this.deleteBuild();\n+        } catch (Exception ignored) {\n+        }\n+    }\n+    public void createUpdateFolder() {\n+        // Creating BuildUpdate folder\n+        File updateDir = new File(\"plugins/GeyserUpdater/BuildUpdate\");\n+        if (!updateDir.exists()) {\n+            try {\n+                updateDir.mkdirs();\n+            } catch (Exception ignored) { }\n+        }\n+    }\n+    private void makeScriptFile() {\n+        if (configf.getBoolean(\"Auto-Script-Generating\")) {\n+            if (OSUtils.isWindows() || OSUtils.isLinux() || OSUtils.isMac()) {\n+                try {\n+                    ScriptCreator.createScript(true);\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            } else {\n+                logger.warn(\"Your OS is not supported! We support Linux, Mac, and Windows for automatic script creation!\");\n+            }\n+        }\n+    }\n+    public void startAutoUpdate() {\n+        if (configf.getBoolean(\"Auto-Update-Geyser\")) {\n+            // Checking for the build numbers of current build.\n+            TimerTask task = new TimerTask() {\n+                public void run() {\n+                    CheckBuildNum.checkBuildNumberVelocity();\n+                }\n+            };\n+            Timer timer = new Timer(\"Timer\");\n+            timer.schedule(task, 0,60*60*24*1000);\n+        }\n+    }\n+    public void moveGeyser() throws IOException {\n+        // Moving Geyser Jar to Plugins folder \"Overwriting\".\n+        File fileToCopy = new File(\"plugins/GeyserUpdater/BuildUpdate/Geyser-Velocity.jar\");\n+        FileInputStream input = new FileInputStream(fileToCopy);\n+        File newFile = new File(\"plugins/Geyser-Velocity.jar\");\n+        FileOutputStream output = new FileOutputStream(newFile);\n+        byte[] buf = new byte[1024];\n+        int bytesRead;\n+        while ((bytesRead = input.read(buf)) > 0) {\n+            output.write(buf, 0, bytesRead);\n+        }\n+        input.close();\n+        output.close();\n+    }\n+    private void deleteBuild() throws IOException {\n+        Path file = Paths.get(\"plugins/GeyserUpdater/BuildUpdate/Geyser-Velocity.jar\");\n+        Files.delete(file);\n+    }\n+    private Toml loadConfig(Path path) {\n+        File folder = path.toFile();\n+        File file = new File(folder, \"config.toml\");\n+        if (!file.getParentFile().exists()) {\n+            file.getParentFile().mkdirs();\n+        }\n+\n+        if (!file.exists()) {\n+            try (InputStream input = getClass().getResourceAsStream(\"/\" + file.getName())) {\n+                if (input != null) {\n+                    Files.copy(input, file.toPath());\n+                } else {\n+                    file.createNewFile();\n+                }\n+            } catch (IOException exception) {\n+                exception.printStackTrace();\n+                return null;\n+            }\n+        }\n+\n+        return new Toml().read(file);\n+    }\n+    @Subscribe(order = PostOrder.LAST)\n+    public void onShutdown(ProxyShutdownEvent event) {\n+        onDisable();\n+    }\n+\n+    public Logger getLogger() {\n+        return logger;\n+    }\n+\n+    public ProxyServer getProxyServer() {\n+        return server;\n+    }\n+\n+\n+    public Path getDataDirectory() {\n+        return dataDirectory;\n+    }\n+}\n+\n+\n+\n+\n+\n+"
  },
  {
    "sha": "839741ac66f09806512d8173645a4000bea9ec00",
    "filename": "src/main/java/com/alysaa/geyserupdater/velocity/command/GeyserUpdaterCommand.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/command/GeyserUpdaterCommand.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/command/GeyserUpdaterCommand.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/velocity/command/GeyserUpdaterCommand.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -0,0 +1,22 @@\n+package com.alysaa.geyserupdater.velocity.command;\n+\n+import com.alysaa.geyserupdater.common.util.CheckBuildNum;\n+import com.velocitypowered.api.command.SimpleCommand;\n+import net.kyori.adventure.text.Component;\n+\n+public class GeyserUpdaterCommand implements SimpleCommand {\n+    @Override\n+    public void execute(final Invocation invocation) {\n+        invocation.source().sendMessage(Component.text(\"[GeyserUpdater] Checking current Geyser version!\"));\n+        try {\n+            CheckBuildNum.checkBuildNumberVelocity();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    @Override\n+    public boolean hasPermission(final Invocation invocation) {\n+        return invocation.source().hasPermission(\"gupdater.geyserupdate\");\n+    }\n+}\n+"
  },
  {
    "sha": "93657ed44f8e0768f85a6921392505ac37914e9d",
    "filename": "src/main/java/com/alysaa/geyserupdater/velocity/util/GeyserVeloDownload.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/util/GeyserVeloDownload.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/util/GeyserVeloDownload.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/velocity/util/GeyserVeloDownload.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -0,0 +1,76 @@\n+package com.alysaa.geyserupdater.velocity.util;\n+\n+import com.alysaa.geyserupdater.common.util.CheckBuildFile;\n+import com.alysaa.geyserupdater.velocity.VelocityUpdater;\n+import com.velocitypowered.api.proxy.Player;\n+import net.kyori.adventure.text.Component;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+\n+public class GeyserVeloDownload {\n+    public static void downloadGeyser() {\n+        OutputStream os = null;\n+        InputStream is = null;\n+        String fileUrl = \"https://ci.opencollab.dev/job/GeyserMC/job/Geyser/job/master/lastSuccessfulBuild/artifact/bootstrap/velocity/target/Geyser-Velocity.jar\";\n+        String outputPath = (\"plugins/GeyserUpdater/BuildUpdate/Geyser-Velocity.jar\");\n+        try {\n+            // create a url object\n+            URL url = new URL(fileUrl);\n+            // connection to the file\n+            URLConnection connection = url.openConnection();\n+            // get input stream to the file\n+            is = connection.getInputStream();\n+            // get output stream to download file\n+            os = new FileOutputStream(outputPath);\n+            final byte[] b = new byte[2048];\n+            int length;\n+            // read from input stream and write to output stream\n+            while ((length = is.read(b)) != -1) {\n+                os.write(b, 0, length);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        } finally {\n+            // close streams\n+            if (os != null) {\n+                try {\n+                    os.close();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+            if (is != null) {\n+                try {\n+                    is.close();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+        // Check if the file was downloaded successfully\n+        boolean downloadSuccess = CheckBuildFile.checkVelocityFile(false);\n+        // Restart the server if the option is enabled\n+        if (VelocityUpdater.configf.getBoolean(\"Auto-Restart-Server\") && downloadSuccess) {\n+            VelocityUpdater.logger.warn(\"The Server will restart in 10 Seconds!\");\n+            for (Player player : VelocityUpdater.server.getAllPlayers()) {\n+                player.sendMessage(Component.text(VelocityUpdater.configf.getString(\"Restart-Message-Players\")));\n+            }\n+            Runnable runnable = () -> {\n+                try {\n+                    Thread.sleep(10000);\n+                    VelocityUpdater.server.shutdown();\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace();\n+                }\n+            };\n+            Thread thread = new Thread(runnable);\n+            thread.start();\n+        }\n+    }\n+}\n+"
  },
  {
    "sha": "9069432c09fda5f14429e8c19fe1164665959164",
    "filename": "src/main/java/com/alysaa/geyserupdater/velocity/util/VelocityJoinListener.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/util/VelocityJoinListener.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/util/VelocityJoinListener.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/velocity/util/VelocityJoinListener.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -0,0 +1,19 @@\n+package com.alysaa.geyserupdater.velocity.util;\n+\n+import com.alysaa.geyserupdater.common.util.CheckBuildFile;\n+import com.velocitypowered.api.event.Subscribe;\n+import com.velocitypowered.api.event.connection.PostLoginEvent;\n+import net.kyori.adventure.text.Component;\n+\n+public class VelocityJoinListener {\n+\n+    @Subscribe\n+    public void onPostLogin(PostLoginEvent event) {\n+        // We allow a cached result of maximum age 30 minutes to be used\n+        if (CheckBuildFile.checkVelocityFile(true)) {\n+            if (event.getPlayer().hasPermission(\"gupdater.geyserupdate\")) {\n+                event.getPlayer().sendMessage(Component.text(\"[GeyserUpdater] New Geyser build has been downloaded! Velocity restart is required!\"));\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "7690158239fdd531da3cae8738639d1166f6a221",
    "filename": "src/main/java/com/alysaa/geyserupdater/velocity/util/bstats/Metrics.java",
    "status": "added",
    "additions": 1026,
    "deletions": 0,
    "changes": 1026,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/util/bstats/Metrics.java",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/java/com/alysaa/geyserupdater/velocity/util/bstats/Metrics.java",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/java/com/alysaa/geyserupdater/velocity/util/bstats/Metrics.java?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -0,0 +1,1026 @@\n+package com.alysaa.geyserupdater.velocity.util.bstats;\n+\n+import com.google.inject.Inject;\n+import com.velocitypowered.api.plugin.PluginContainer;\n+import com.velocitypowered.api.plugin.PluginDescription;\n+import com.velocitypowered.api.plugin.annotation.DataDirectory;\n+import com.velocitypowered.api.proxy.ProxyServer;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.zip.GZIPOutputStream;\n+import javax.net.ssl.HttpsURLConnection;\n+import org.slf4j.Logger;\n+\n+public class Metrics {\n+\n+    /** A factory to create new Metrics classes. */\n+    public static class Factory {\n+\n+        private final ProxyServer server;\n+\n+        private final Logger logger;\n+\n+        private final Path dataDirectory;\n+\n+        // The constructor is not meant to be called by the user.\n+        // The instance is created using Dependency Injection\n+        @Inject\n+        private Factory(ProxyServer server, Logger logger, @DataDirectory Path dataDirectory) {\n+            this.server = server;\n+            this.logger = logger;\n+            this.dataDirectory = dataDirectory;\n+        }\n+\n+        /**\n+         * Creates a new Metrics class.\n+         *\n+         * @param plugin The plugin instance.\n+         * @param serviceId The id of the service. It can be found at <a\n+         *     href=\"https://bstats.org/what-is-my-plugin-id\">What is my plugin id?</a>\n+         *     <p>Not to be confused with Velocity's {@link PluginDescription#getId()} method!\n+         * @return A Metrics instance that can be used to register custom charts.\n+         *     <p>The return value can be ignored, when you do not want to register custom charts.\n+         */\n+        public Metrics make(Object plugin, int serviceId) {\n+            return new Metrics(plugin, server, logger, dataDirectory, serviceId);\n+        }\n+    }\n+\n+    private final PluginContainer pluginContainer;\n+\n+    private final ProxyServer server;\n+\n+    private MetricsBase metricsBase;\n+\n+    private Metrics(\n+            Object plugin, ProxyServer server, Logger logger, Path dataDirectory, int serviceId) {\n+        pluginContainer =\n+                server\n+                        .getPluginManager()\n+                        .fromInstance(plugin)\n+                        .orElseThrow(\n+                                () -> new IllegalArgumentException(\"The provided instance is not a plugin\"));\n+        this.server = server;\n+        File configFile = dataDirectory.getParent().resolve(\"bStats\").resolve(\"config.txt\").toFile();\n+        MetricsConfig config;\n+        try {\n+            config = new MetricsConfig(configFile, true);\n+        } catch (IOException e) {\n+            logger.error(\"Failed to create bStats config\", e);\n+            return;\n+        }\n+        metricsBase =\n+                new MetricsBase(\n+                        \"velocity\",\n+                        config.getServerUUID(),\n+                        serviceId,\n+                        config.isEnabled(),\n+                        this::appendPlatformData,\n+                        this::appendServiceData,\n+                        task -> server.getScheduler().buildTask(plugin, task).schedule(),\n+                        () -> true,\n+                        logger::warn,\n+                        logger::info,\n+                        config.isLogErrorsEnabled(),\n+                        config.isLogSentDataEnabled(),\n+                        config.isLogResponseStatusTextEnabled());\n+        if (!config.didExistBefore()) {\n+            // Send an info message when the bStats config file gets created for the first time\n+            logger.info(\n+                    \"Velocity and some of its plugins collect metrics and send them to bStats (https://bStats.org).\");\n+            logger.info(\n+                    \"bStats collects some basic information for plugin authors, like how many people use\");\n+            logger.info(\n+                    \"their plugin and their total player count. It's recommend to keep bStats enabled, but\");\n+            logger.info(\n+                    \"if you're not comfortable with this, you can opt-out by editing the config.txt file in\");\n+            logger.info(\"the '/plugins/bStats/' folder and setting enabled to false.\");\n+        }\n+    }\n+\n+    /**\n+     * Adds a custom chart.\n+     *\n+     * @param chart The chart to add.\n+     */\n+    public void addCustomChart(CustomChart chart) {\n+        if (metricsBase != null) {\n+            metricsBase.addCustomChart(chart);\n+        }\n+    }\n+\n+    private void appendPlatformData(JsonObjectBuilder builder) {\n+        builder.appendField(\"playerAmount\", server.getPlayerCount());\n+        builder.appendField(\"managedServers\", server.getAllServers().size());\n+        builder.appendField(\"onlineMode\", server.getConfiguration().isOnlineMode() ? 1 : 0);\n+        builder.appendField(\"velocityVersionVersion\", server.getVersion().getVersion());\n+        builder.appendField(\"velocityVersionName\", server.getVersion().getName());\n+        builder.appendField(\"velocityVersionVendor\", server.getVersion().getVendor());\n+        builder.appendField(\"javaVersion\", System.getProperty(\"java.version\"));\n+        builder.appendField(\"osName\", System.getProperty(\"os.name\"));\n+        builder.appendField(\"osArch\", System.getProperty(\"os.arch\"));\n+        builder.appendField(\"osVersion\", System.getProperty(\"os.version\"));\n+        builder.appendField(\"coreCount\", Runtime.getRuntime().availableProcessors());\n+    }\n+\n+    private void appendServiceData(JsonObjectBuilder builder) {\n+        builder.appendField(\n+                \"pluginVersion\", pluginContainer.getDescription().getVersion().orElse(\"unknown\"));\n+    }\n+\n+    public static class MetricsBase {\n+\n+        /** The version of the Metrics class. */\n+        public static final String METRICS_VERSION = \"2.2.1\";\n+\n+        private static final ScheduledExecutorService scheduler =\n+                Executors.newScheduledThreadPool(1, task -> new Thread(task, \"bStats-Metrics\"));\n+\n+        private static final String REPORT_URL = \"https://bStats.org/api/v2/data/%s\";\n+\n+        private final String platform;\n+\n+        private final String serverUuid;\n+\n+        private final int serviceId;\n+\n+        private final Consumer<JsonObjectBuilder> appendPlatformDataConsumer;\n+\n+        private final Consumer<JsonObjectBuilder> appendServiceDataConsumer;\n+\n+        private final Consumer<Runnable> submitTaskConsumer;\n+\n+        private final Supplier<Boolean> checkServiceEnabledSupplier;\n+\n+        private final BiConsumer<String, Throwable> errorLogger;\n+\n+        private final Consumer<String> infoLogger;\n+\n+        private final boolean logErrors;\n+\n+        private final boolean logSentData;\n+\n+        private final boolean logResponseStatusText;\n+\n+        private final Set<CustomChart> customCharts = new HashSet<>();\n+\n+        private final boolean enabled;\n+\n+        /**\n+         * Creates a new MetricsBase class instance.\n+         *\n+         * @param platform The platform of the service.\n+         * @param serviceId The id of the service.\n+         * @param serverUuid The server uuid.\n+         * @param enabled Whether or not data sending is enabled.\n+         * @param appendPlatformDataConsumer A consumer that receives a {@code JsonObjectBuilder} and\n+         *     appends all platform-specific data.\n+         * @param appendServiceDataConsumer A consumer that receives a {@code JsonObjectBuilder} and\n+         *     appends all service-specific data.\n+         * @param submitTaskConsumer A consumer that takes a runnable with the submit task. This can be\n+         *     used to delegate the data collection to a another thread to prevent errors caused by\n+         *     concurrency. Can be {@code null}.\n+         * @param checkServiceEnabledSupplier A supplier to check if the service is still enabled.\n+         * @param errorLogger A consumer that accepts log message and an error.\n+         * @param infoLogger A consumer that accepts info log messages.\n+         * @param logErrors Whether or not errors should be logged.\n+         * @param logSentData Whether or not the sent data should be logged.\n+         * @param logResponseStatusText Whether or not the response status text should be logged.\n+         */\n+        public MetricsBase(\n+                String platform,\n+                String serverUuid,\n+                int serviceId,\n+                boolean enabled,\n+                Consumer<JsonObjectBuilder> appendPlatformDataConsumer,\n+                Consumer<JsonObjectBuilder> appendServiceDataConsumer,\n+                Consumer<Runnable> submitTaskConsumer,\n+                Supplier<Boolean> checkServiceEnabledSupplier,\n+                BiConsumer<String, Throwable> errorLogger,\n+                Consumer<String> infoLogger,\n+                boolean logErrors,\n+                boolean logSentData,\n+                boolean logResponseStatusText) {\n+            this.platform = platform;\n+            this.serverUuid = serverUuid;\n+            this.serviceId = serviceId;\n+            this.enabled = enabled;\n+            this.appendPlatformDataConsumer = appendPlatformDataConsumer;\n+            this.appendServiceDataConsumer = appendServiceDataConsumer;\n+            this.submitTaskConsumer = submitTaskConsumer;\n+            this.checkServiceEnabledSupplier = checkServiceEnabledSupplier;\n+            this.errorLogger = errorLogger;\n+            this.infoLogger = infoLogger;\n+            this.logErrors = logErrors;\n+            this.logSentData = logSentData;\n+            this.logResponseStatusText = logResponseStatusText;\n+            checkRelocation();\n+            if (enabled) {\n+                startSubmitting();\n+            }\n+        }\n+\n+        public void addCustomChart(CustomChart chart) {\n+            this.customCharts.add(chart);\n+        }\n+\n+        private void startSubmitting() {\n+            final Runnable submitTask =\n+                    () -> {\n+                        if (!enabled || !checkServiceEnabledSupplier.get()) {\n+                            // Submitting data or service is disabled\n+                            scheduler.shutdown();\n+                            return;\n+                        }\n+                        if (submitTaskConsumer != null) {\n+                            submitTaskConsumer.accept(this::submitData);\n+                        } else {\n+                            this.submitData();\n+                        }\n+                    };\n+            // Many servers tend to restart at a fixed time at xx:00 which causes an uneven distribution\n+            // of requests on the\n+            // bStats backend. To circumvent this problem, we introduce some randomness into the initial\n+            // and second delay.\n+            // WARNING: You must not modify and part of this Metrics class, including the submit delay or\n+            // frequency!\n+            // WARNING: Modifying this code will get your plugin banned on bStats. Just don't do it!\n+            long initialDelay = (long) (1000 * 60 * (3 + Math.random() * 3));\n+            long secondDelay = (long) (1000 * 60 * (Math.random() * 30));\n+            scheduler.schedule(submitTask, initialDelay, TimeUnit.MILLISECONDS);\n+            scheduler.scheduleAtFixedRate(\n+                    submitTask, initialDelay + secondDelay, 1000 * 60 * 30, TimeUnit.MILLISECONDS);\n+        }\n+\n+        private void submitData() {\n+            final JsonObjectBuilder baseJsonBuilder = new JsonObjectBuilder();\n+            appendPlatformDataConsumer.accept(baseJsonBuilder);\n+            final JsonObjectBuilder serviceJsonBuilder = new JsonObjectBuilder();\n+            appendServiceDataConsumer.accept(serviceJsonBuilder);\n+            JsonObjectBuilder.JsonObject[] chartData =\n+                    customCharts.stream()\n+                            .map(customChart -> customChart.getRequestJsonObject(errorLogger, logErrors))\n+                            .filter(Objects::nonNull)\n+                            .toArray(JsonObjectBuilder.JsonObject[]::new);\n+            serviceJsonBuilder.appendField(\"id\", serviceId);\n+            serviceJsonBuilder.appendField(\"customCharts\", chartData);\n+            baseJsonBuilder.appendField(\"service\", serviceJsonBuilder.build());\n+            baseJsonBuilder.appendField(\"serverUUID\", serverUuid);\n+            baseJsonBuilder.appendField(\"metricsVersion\", METRICS_VERSION);\n+            JsonObjectBuilder.JsonObject data = baseJsonBuilder.build();\n+            scheduler.execute(\n+                    () -> {\n+                        try {\n+                            // Send the data\n+                            sendData(data);\n+                        } catch (Exception e) {\n+                            // Something went wrong! :(\n+                            if (logErrors) {\n+                                errorLogger.accept(\"Could not submit bStats metrics data\", e);\n+                            }\n+                        }\n+                    });\n+        }\n+\n+        private void sendData(JsonObjectBuilder.JsonObject data) throws Exception {\n+            if (logSentData) {\n+                infoLogger.accept(\"Sent bStats metrics data: \" + data.toString());\n+            }\n+            String url = String.format(REPORT_URL, platform);\n+            HttpsURLConnection connection = (HttpsURLConnection) new URL(url).openConnection();\n+            // Compress the data to save bandwidth\n+            byte[] compressedData = compress(data.toString());\n+            connection.setRequestMethod(\"POST\");\n+            connection.addRequestProperty(\"Accept\", \"application/json\");\n+            connection.addRequestProperty(\"Connection\", \"close\");\n+            connection.addRequestProperty(\"Content-Encoding\", \"gzip\");\n+            connection.addRequestProperty(\"Content-Length\", String.valueOf(compressedData.length));\n+            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n+            connection.setRequestProperty(\"User-Agent\", \"Metrics-Service/1\");\n+            connection.setDoOutput(true);\n+            try (DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream())) {\n+                outputStream.write(compressedData);\n+            }\n+            StringBuilder builder = new StringBuilder();\n+            try (BufferedReader bufferedReader =\n+                         new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n+                String line;\n+                while ((line = bufferedReader.readLine()) != null) {\n+                    builder.append(line);\n+                }\n+            }\n+            if (logResponseStatusText) {\n+                infoLogger.accept(\"Sent data to bStats and received response: \" + builder);\n+            }\n+        }\n+\n+        /** Checks that the class was properly relocated. */\n+        private void checkRelocation() {\n+            // You can use the property to disable the check in your test environment\n+            if (System.getProperty(\"bstats.relocatecheck\") == null\n+                    || !System.getProperty(\"bstats.relocatecheck\").equals(\"false\")) {\n+                // Maven's Relocate is clever and changes strings, too. So we have to use this little\n+                // \"trick\" ... :D\n+                final String defaultPackage =\n+                        new String(new byte[] {'o', 'r', 'g', '.', 'b', 's', 't', 'a', 't', 's'});\n+                final String examplePackage =\n+                        new String(new byte[] {'y', 'o', 'u', 'r', '.', 'p', 'a', 'c', 'k', 'a', 'g', 'e'});\n+                // We want to make sure no one just copy & pastes the example and uses the wrong package\n+                // names\n+                if (MetricsBase.class.getPackage().getName().startsWith(defaultPackage)\n+                        || MetricsBase.class.getPackage().getName().startsWith(examplePackage)) {\n+                    throw new IllegalStateException(\"bStats Metrics class has not been relocated correctly!\");\n+                }\n+            }\n+        }\n+\n+        /**\n+         * Gzips the given string.\n+         *\n+         * @param str The string to gzip.\n+         * @return The gzipped string.\n+         */\n+        private static byte[] compress(final String str) throws IOException {\n+            if (str == null) {\n+                return null;\n+            }\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            try (GZIPOutputStream gzip = new GZIPOutputStream(outputStream)) {\n+                gzip.write(str.getBytes(StandardCharsets.UTF_8));\n+            }\n+            return outputStream.toByteArray();\n+        }\n+    }\n+\n+    public static class AdvancedBarChart extends CustomChart {\n+\n+        private final Callable<Map<String, int[]>> callable;\n+\n+        /**\n+         * Class constructor.\n+         *\n+         * @param chartId The id of the chart.\n+         * @param callable The callable which is used to request the chart data.\n+         */\n+        public AdvancedBarChart(String chartId, Callable<Map<String, int[]>> callable) {\n+            super(chartId);\n+            this.callable = callable;\n+        }\n+\n+        @Override\n+        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n+            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n+            Map<String, int[]> map = callable.call();\n+            if (map == null || map.isEmpty()) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            boolean allSkipped = true;\n+            for (Map.Entry<String, int[]> entry : map.entrySet()) {\n+                if (entry.getValue().length == 0) {\n+                    // Skip this invalid\n+                    continue;\n+                }\n+                allSkipped = false;\n+                valuesBuilder.appendField(entry.getKey(), entry.getValue());\n+            }\n+            if (allSkipped) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n+        }\n+    }\n+\n+    public static class SimpleBarChart extends CustomChart {\n+\n+        private final Callable<Map<String, Integer>> callable;\n+\n+        /**\n+         * Class constructor.\n+         *\n+         * @param chartId The id of the chart.\n+         * @param callable The callable which is used to request the chart data.\n+         */\n+        public SimpleBarChart(String chartId, Callable<Map<String, Integer>> callable) {\n+            super(chartId);\n+            this.callable = callable;\n+        }\n+\n+        @Override\n+        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n+            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n+            Map<String, Integer> map = callable.call();\n+            if (map == null || map.isEmpty()) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n+                valuesBuilder.appendField(entry.getKey(), new int[] {entry.getValue()});\n+            }\n+            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n+        }\n+    }\n+\n+    public static class MultiLineChart extends CustomChart {\n+\n+        private final Callable<Map<String, Integer>> callable;\n+\n+        /**\n+         * Class constructor.\n+         *\n+         * @param chartId The id of the chart.\n+         * @param callable The callable which is used to request the chart data.\n+         */\n+        public MultiLineChart(String chartId, Callable<Map<String, Integer>> callable) {\n+            super(chartId);\n+            this.callable = callable;\n+        }\n+\n+        @Override\n+        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n+            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n+            Map<String, Integer> map = callable.call();\n+            if (map == null || map.isEmpty()) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            boolean allSkipped = true;\n+            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n+                if (entry.getValue() == 0) {\n+                    // Skip this invalid\n+                    continue;\n+                }\n+                allSkipped = false;\n+                valuesBuilder.appendField(entry.getKey(), entry.getValue());\n+            }\n+            if (allSkipped) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n+        }\n+    }\n+\n+    public static class AdvancedPie extends CustomChart {\n+\n+        private final Callable<Map<String, Integer>> callable;\n+\n+        /**\n+         * Class constructor.\n+         *\n+         * @param chartId The id of the chart.\n+         * @param callable The callable which is used to request the chart data.\n+         */\n+        public AdvancedPie(String chartId, Callable<Map<String, Integer>> callable) {\n+            super(chartId);\n+            this.callable = callable;\n+        }\n+\n+        @Override\n+        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n+            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n+            Map<String, Integer> map = callable.call();\n+            if (map == null || map.isEmpty()) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            boolean allSkipped = true;\n+            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n+                if (entry.getValue() == 0) {\n+                    // Skip this invalid\n+                    continue;\n+                }\n+                allSkipped = false;\n+                valuesBuilder.appendField(entry.getKey(), entry.getValue());\n+            }\n+            if (allSkipped) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n+        }\n+    }\n+\n+    public abstract static class CustomChart {\n+\n+        private final String chartId;\n+\n+        protected CustomChart(String chartId) {\n+            if (chartId == null) {\n+                throw new IllegalArgumentException(\"chartId must not be null\");\n+            }\n+            this.chartId = chartId;\n+        }\n+\n+        public JsonObjectBuilder.JsonObject getRequestJsonObject(\n+                BiConsumer<String, Throwable> errorLogger, boolean logErrors) {\n+            JsonObjectBuilder builder = new JsonObjectBuilder();\n+            builder.appendField(\"chartId\", chartId);\n+            try {\n+                JsonObjectBuilder.JsonObject data = getChartData();\n+                if (data == null) {\n+                    // If the data is null we don't send the chart.\n+                    return null;\n+                }\n+                builder.appendField(\"data\", data);\n+            } catch (Throwable t) {\n+                if (logErrors) {\n+                    errorLogger.accept(\"Failed to get data for custom chart with id \" + chartId, t);\n+                }\n+                return null;\n+            }\n+            return builder.build();\n+        }\n+\n+        protected abstract JsonObjectBuilder.JsonObject getChartData() throws Exception;\n+    }\n+\n+    public static class SingleLineChart extends CustomChart {\n+\n+        private final Callable<Integer> callable;\n+\n+        /**\n+         * Class constructor.\n+         *\n+         * @param chartId The id of the chart.\n+         * @param callable The callable which is used to request the chart data.\n+         */\n+        public SingleLineChart(String chartId, Callable<Integer> callable) {\n+            super(chartId);\n+            this.callable = callable;\n+        }\n+\n+        @Override\n+        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n+            int value = callable.call();\n+            if (value == 0) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            return new JsonObjectBuilder().appendField(\"value\", value).build();\n+        }\n+    }\n+\n+    public static class SimplePie extends CustomChart {\n+\n+        private final Callable<String> callable;\n+\n+        /**\n+         * Class constructor.\n+         *\n+         * @param chartId The id of the chart.\n+         * @param callable The callable which is used to request the chart data.\n+         */\n+        public SimplePie(String chartId, Callable<String> callable) {\n+            super(chartId);\n+            this.callable = callable;\n+        }\n+\n+        @Override\n+        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n+            String value = callable.call();\n+            if (value == null || value.isEmpty()) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            return new JsonObjectBuilder().appendField(\"value\", value).build();\n+        }\n+    }\n+\n+    public static class DrilldownPie extends CustomChart {\n+\n+        private final Callable<Map<String, Map<String, Integer>>> callable;\n+\n+        /**\n+         * Class constructor.\n+         *\n+         * @param chartId The id of the chart.\n+         * @param callable The callable which is used to request the chart data.\n+         */\n+        public DrilldownPie(String chartId, Callable<Map<String, Map<String, Integer>>> callable) {\n+            super(chartId);\n+            this.callable = callable;\n+        }\n+\n+        @Override\n+        public JsonObjectBuilder.JsonObject getChartData() throws Exception {\n+            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n+            Map<String, Map<String, Integer>> map = callable.call();\n+            if (map == null || map.isEmpty()) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            boolean reallyAllSkipped = true;\n+            for (Map.Entry<String, Map<String, Integer>> entryValues : map.entrySet()) {\n+                JsonObjectBuilder valueBuilder = new JsonObjectBuilder();\n+                boolean allSkipped = true;\n+                for (Map.Entry<String, Integer> valueEntry : map.get(entryValues.getKey()).entrySet()) {\n+                    valueBuilder.appendField(valueEntry.getKey(), valueEntry.getValue());\n+                    allSkipped = false;\n+                }\n+                if (!allSkipped) {\n+                    reallyAllSkipped = false;\n+                    valuesBuilder.appendField(entryValues.getKey(), valueBuilder.build());\n+                }\n+            }\n+            if (reallyAllSkipped) {\n+                // Null = skip the chart\n+                return null;\n+            }\n+            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n+        }\n+    }\n+\n+    /**\n+     * An extremely simple JSON builder.\n+     *\n+     * <p>While this class is neither feature-rich nor the most performant one, it's sufficient enough\n+     * for its use-case.\n+     */\n+    public static class JsonObjectBuilder {\n+\n+        private StringBuilder builder = new StringBuilder();\n+\n+        private boolean hasAtLeastOneField = false;\n+\n+        public JsonObjectBuilder() {\n+            builder.append(\"{\");\n+        }\n+\n+        /**\n+         * Appends a null field to the JSON.\n+         *\n+         * @param key The key of the field.\n+         * @return A reference to this object.\n+         */\n+        public JsonObjectBuilder appendNull(String key) {\n+            appendFieldUnescaped(key, \"null\");\n+            return this;\n+        }\n+\n+        /**\n+         * Appends a string field to the JSON.\n+         *\n+         * @param key The key of the field.\n+         * @param value The value of the field.\n+         * @return A reference to this object.\n+         */\n+        public JsonObjectBuilder appendField(String key, String value) {\n+            if (value == null) {\n+                throw new IllegalArgumentException(\"JSON value must not be null\");\n+            }\n+            appendFieldUnescaped(key, \"\\\"\" + escape(value) + \"\\\"\");\n+            return this;\n+        }\n+\n+        /**\n+         * Appends an integer field to the JSON.\n+         *\n+         * @param key The key of the field.\n+         * @param value The value of the field.\n+         * @return A reference to this object.\n+         */\n+        public JsonObjectBuilder appendField(String key, int value) {\n+            appendFieldUnescaped(key, String.valueOf(value));\n+            return this;\n+        }\n+\n+        /**\n+         * Appends an object to the JSON.\n+         *\n+         * @param key The key of the field.\n+         * @param object The object.\n+         * @return A reference to this object.\n+         */\n+        public JsonObjectBuilder appendField(String key, JsonObject object) {\n+            if (object == null) {\n+                throw new IllegalArgumentException(\"JSON object must not be null\");\n+            }\n+            appendFieldUnescaped(key, object.toString());\n+            return this;\n+        }\n+\n+        /**\n+         * Appends a string array to the JSON.\n+         *\n+         * @param key The key of the field.\n+         * @param values The string array.\n+         * @return A reference to this object.\n+         */\n+        public JsonObjectBuilder appendField(String key, String[] values) {\n+            if (values == null) {\n+                throw new IllegalArgumentException(\"JSON values must not be null\");\n+            }\n+            String escapedValues =\n+                    Arrays.stream(values)\n+                            .map(value -> \"\\\"\" + escape(value) + \"\\\"\")\n+                            .collect(Collectors.joining(\",\"));\n+            appendFieldUnescaped(key, \"[\" + escapedValues + \"]\");\n+            return this;\n+        }\n+\n+        /**\n+         * Appends an integer array to the JSON.\n+         *\n+         * @param key The key of the field.\n+         * @param values The integer array.\n+         * @return A reference to this object.\n+         */\n+        public JsonObjectBuilder appendField(String key, int[] values) {\n+            if (values == null) {\n+                throw new IllegalArgumentException(\"JSON values must not be null\");\n+            }\n+            String escapedValues =\n+                    Arrays.stream(values).mapToObj(String::valueOf).collect(Collectors.joining(\",\"));\n+            appendFieldUnescaped(key, \"[\" + escapedValues + \"]\");\n+            return this;\n+        }\n+\n+        /**\n+         * Appends an object array to the JSON.\n+         *\n+         * @param key The key of the field.\n+         * @param values The integer array.\n+         * @return A reference to this object.\n+         */\n+        public JsonObjectBuilder appendField(String key, JsonObject[] values) {\n+            if (values == null) {\n+                throw new IllegalArgumentException(\"JSON values must not be null\");\n+            }\n+            String escapedValues =\n+                    Arrays.stream(values).map(JsonObject::toString).collect(Collectors.joining(\",\"));\n+            appendFieldUnescaped(key, \"[\" + escapedValues + \"]\");\n+            return this;\n+        }\n+\n+        /**\n+         * Appends a field to the object.\n+         *\n+         * @param key The key of the field.\n+         * @param escapedValue The escaped value of the field.\n+         */\n+        private void appendFieldUnescaped(String key, String escapedValue) {\n+            if (builder == null) {\n+                throw new IllegalStateException(\"JSON has already been built\");\n+            }\n+            if (key == null) {\n+                throw new IllegalArgumentException(\"JSON key must not be null\");\n+            }\n+            if (hasAtLeastOneField) {\n+                builder.append(\",\");\n+            }\n+            builder.append(\"\\\"\").append(escape(key)).append(\"\\\":\").append(escapedValue);\n+            hasAtLeastOneField = true;\n+        }\n+\n+        /**\n+         * Builds the JSON string and invalidates this builder.\n+         *\n+         * @return The built JSON string.\n+         */\n+        public JsonObject build() {\n+            if (builder == null) {\n+                throw new IllegalStateException(\"JSON has already been built\");\n+            }\n+            JsonObject object = new JsonObject(builder.append(\"}\").toString());\n+            builder = null;\n+            return object;\n+        }\n+\n+        /**\n+         * Escapes the given string like stated in https://www.ietf.org/rfc/rfc4627.txt.\n+         *\n+         * <p>This method escapes only the necessary characters '\"', '\\'. and '\\u0000' - '\\u001F'.\n+         * Compact escapes are not used (e.g., '\\n' is escaped as \"\\u000a\" and not as \"\\n\").\n+         *\n+         * @param value The value to escape.\n+         * @return The escaped value.\n+         */\n+        private static String escape(String value) {\n+            final StringBuilder builder = new StringBuilder();\n+            for (int i = 0; i < value.length(); i++) {\n+                char c = value.charAt(i);\n+                if (c == '\"') {\n+                    builder.append(\"\\\\\\\"\");\n+                } else if (c == '\\\\') {\n+                    builder.append(\"\\\\\\\\\");\n+                } else if (c <= '\\u000F') {\n+                    builder.append(\"\\\\u000\").append(Integer.toHexString(c));\n+                } else if (c <= '\\u001F') {\n+                    builder.append(\"\\\\u00\").append(Integer.toHexString(c));\n+                } else {\n+                    builder.append(c);\n+                }\n+            }\n+            return builder.toString();\n+        }\n+\n+        /**\n+         * A super simple representation of a JSON object.\n+         *\n+         * <p>This class only exists to make methods of the {@link JsonObjectBuilder} type-safe and not\n+         * allow a raw string inputs for methods like {@link JsonObjectBuilder#appendField(String,\n+         * JsonObject)}.\n+         */\n+        public static class JsonObject {\n+\n+            private final String value;\n+\n+            private JsonObject(String value) {\n+                this.value = value;\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return value;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * A simple config for bStats.\n+     *\n+     * <p>This class is not used by every platform.\n+     */\n+    public static class MetricsConfig {\n+\n+        private final File file;\n+\n+        private final boolean defaultEnabled;\n+\n+        private String serverUUID;\n+\n+        private boolean enabled;\n+\n+        private boolean logErrors;\n+\n+        private boolean logSentData;\n+\n+        private boolean logResponseStatusText;\n+\n+        private boolean didExistBefore = true;\n+\n+        public MetricsConfig(File file, boolean defaultEnabled) throws IOException {\n+            this.file = file;\n+            this.defaultEnabled = defaultEnabled;\n+            setupConfig();\n+        }\n+\n+        public String getServerUUID() {\n+            return serverUUID;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public boolean isLogErrorsEnabled() {\n+            return logErrors;\n+        }\n+\n+        public boolean isLogSentDataEnabled() {\n+            return logSentData;\n+        }\n+\n+        public boolean isLogResponseStatusTextEnabled() {\n+            return logResponseStatusText;\n+        }\n+\n+        /**\n+         * Checks whether the config file did exist before or not.\n+         *\n+         * @return If the config did exist before.\n+         */\n+        public boolean didExistBefore() {\n+            return didExistBefore;\n+        }\n+\n+        /** Creates the config file if it does not exist and read its content. */\n+        private void setupConfig() throws IOException {\n+            if (!file.exists()) {\n+                // Looks like it's the first time we create it (or someone deleted it).\n+                didExistBefore = false;\n+                writeConfig();\n+            }\n+            readConfig();\n+            if (serverUUID == null) {\n+                // Found a malformed config file with no UUID. Let's recreate it.\n+                writeConfig();\n+                readConfig();\n+            }\n+        }\n+\n+        /** Creates a config file with teh default content. */\n+        private void writeConfig() throws IOException {\n+            List<String> configContent = new ArrayList<>();\n+            configContent.add(\n+                    \"# bStats (https://bStats.org) collects some basic information for plugin authors, like\");\n+            configContent.add(\n+                    \"# how many people use their plugin and their total player count. It's recommended to keep\");\n+            configContent.add(\n+                    \"# bStats enabled, but if you're not comfortable with this, you can turn this setting off.\");\n+            configContent.add(\n+                    \"# There is no performance penalty associated with having metrics enabled, and data sent to\");\n+            configContent.add(\"# bStats is fully anonymous.\");\n+            configContent.add(\"enabled=\" + defaultEnabled);\n+            configContent.add(\"server-uuid=\" + UUID.randomUUID().toString());\n+            configContent.add(\"log-errors=false\");\n+            configContent.add(\"log-sent-data=false\");\n+            configContent.add(\"log-response-status-text=false\");\n+            writeFile(file, configContent);\n+        }\n+\n+        /** Reads the content of the config file. */\n+        private void readConfig() throws IOException {\n+            List<String> lines = readFile(file);\n+            if (lines == null) {\n+                throw new AssertionError(\"Content of newly created file is null\");\n+            }\n+            enabled = getConfigValue(\"enabled\", lines).map(\"true\"::equals).orElse(true);\n+            serverUUID = getConfigValue(\"server-uuid\", lines).orElse(null);\n+            logErrors = getConfigValue(\"log-errors\", lines).map(\"true\"::equals).orElse(false);\n+            logSentData = getConfigValue(\"log-sent-data\", lines).map(\"true\"::equals).orElse(false);\n+            logResponseStatusText =\n+                    getConfigValue(\"log-response-status-text\", lines).map(\"true\"::equals).orElse(false);\n+        }\n+\n+        /**\n+         * Gets a config setting from the given list of lines of the file.\n+         *\n+         * @param key The key for the setting.\n+         * @param lines The lines of the file.\n+         * @return The value of the setting.\n+         */\n+        private Optional<String> getConfigValue(String key, List<String> lines) {\n+            return lines.stream()\n+                    .filter(line -> line.startsWith(key + \"=\"))\n+                    .map(line -> line.replaceFirst(Pattern.quote(key + \"=\"), \"\"))\n+                    .findFirst();\n+        }\n+\n+        /**\n+         * Reads the text content of the given file.\n+         *\n+         * @param file The file to read.\n+         * @return The lines of the given file.\n+         */\n+        private List<String> readFile(File file) throws IOException {\n+            if (!file.exists()) {\n+                return null;\n+            }\n+            try (FileReader fileReader = new FileReader(file);\n+                 BufferedReader bufferedReader = new BufferedReader(fileReader)) {\n+                return bufferedReader.lines().collect(Collectors.toList());\n+            }\n+        }\n+\n+        /**\n+         * Writes the given lines to the given file.\n+         *\n+         * @param file The file to write to.\n+         * @param lines The lines to write.\n+         */\n+        private void writeFile(File file, List<String> lines) throws IOException {\n+            if (!file.exists()) {\n+                file.getParentFile().mkdirs();\n+                file.createNewFile();\n+            }\n+            try (FileWriter fileWriter = new FileWriter(file);\n+                 BufferedWriter bufferedWriter = new BufferedWriter(fileWriter)) {\n+                for (String line : lines) {\n+                    bufferedWriter.write(line);\n+                    bufferedWriter.newLine();\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "198b3398eee638e90e7d322adb6b8e8e1b9a1d30",
    "filename": "src/main/resources/bungee.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/resources/bungee.yml",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/resources/bungee.yml",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/resources/bungee.yml?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -1,6 +1,6 @@\n name: GeyserUpdater\n main: com.alysaa.geyserupdater.bungee.BungeeUpdater\n-version: 1.2.0\n+version: 1.3.0\n description: Geyser Auto Updating Plugin Addon.\n author: Jens\n depends: [\"Geyser-BungeeCord\"]"
  },
  {
    "sha": "3981b2bb6c2707ef285f6642964c38aa20671e15",
    "filename": "src/main/resources/config.toml",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/resources/config.toml",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/resources/config.toml",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/resources/config.toml?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -0,0 +1,18 @@\n+#Geyser-Updater\n+#Made by Jens & YHDiamond\n+\n+# NOTICE! Read the information on our GitHub before using this plugin!\n+# https://github.com/YHDiamond/GeyserUpdater\n+\n+# When enabled it will check for geyser updates on server restart and each 24h after server start.\n+Auto-Update-Geyser=false\n+\n+# When enabled it will restart the server automatic after Geyser build has been downloaded.\n+Auto-Restart-Server=false\n+\n+# Send a text to your online players to warn them that the server is restarting.\n+Restart-Message-Players='&2The server will restart in 10 Seconds!'\n+\n+# When enabled it will generate a restart script and set it up in the spigot.yml for you.\n+# you will need to use our script to start server! More info about this on Github.\n+Auto-Script-Generating=false\n\\ No newline at end of file"
  },
  {
    "sha": "179de52ad5df5c273bffab8373773e83036bc282",
    "filename": "src/main/resources/plugin.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/YHDiamond/GeyserUpdater/blob/eb662535dfefefbbd0616c91490c768baa543d38/src/main/resources/plugin.yml",
    "raw_url": "https://github.com/YHDiamond/GeyserUpdater/raw/eb662535dfefefbbd0616c91490c768baa543d38/src/main/resources/plugin.yml",
    "contents_url": "https://api.github.com/repos/YHDiamond/GeyserUpdater/contents/src/main/resources/plugin.yml?ref=eb662535dfefefbbd0616c91490c768baa543d38",
    "patch": "@@ -1,6 +1,6 @@\n name: GeyserUpdater\n main: com.alysaa.geyserupdater.spigot.SpigotUpdater\n-version: 1.2.0\n+version: 1.3.0\n api-version: 1.15\n depend: [Geyser-Spigot]\n description: Geyser Auto Updating Plugin Addon."
  }
]
