[
  {
    "sha": "f0351409cc2aad3c488001ed63952a2fd0366dd6",
    "filename": ".idea/.name",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/.idea/.name",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/.idea/.name",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/.idea/.name?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -0,0 +1 @@\n+TicTackToe\n\\ No newline at end of file"
  },
  {
    "sha": "b9061163955116d393117e4837cf8d3becebf611",
    "filename": "app/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/build.gradle",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/build.gradle",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/app/build.gradle?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -29,5 +29,6 @@ dependencies {\n     testImplementation 'junit:junit:4.12'\n     androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n+    testImplementation 'junit:junit:4.12'\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "1939d82ac51c8175fed2420032bb580345958fa1",
    "filename": "app/src/main/AndroidManifest.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/AndroidManifest.xml",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/app/src/main/AndroidManifest.xml?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -18,6 +18,9 @@\n                 <category android:name=\"android.intent.category.LAUNCHER\" />\n             </intent-filter>\n         </activity>\n+        <activity android:name=\".OnePlayerMode\"></activity>\n+        <activity android:name=\".AiPlayer\"></activity>\n+\n     </application>\n \n-</manifest>\n\\ No newline at end of file\n+</manifest>"
  },
  {
    "sha": "4fc722099c17a2cd689b597a998b34efa74273cf",
    "filename": "app/src/main/java/com/example/tictacktoe/AiPlayer.java",
    "status": "added",
    "additions": 184,
    "deletions": 0,
    "changes": 184,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/java/com/example/tictacktoe/AiPlayer.java",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/java/com/example/tictacktoe/AiPlayer.java",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/app/src/main/java/com/example/tictacktoe/AiPlayer.java?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -0,0 +1,184 @@\n+package com.example.tictacktoe;\n+\n+import androidx.appcompat.app.AppCompatActivity;\n+\n+public class AiPlayer extends AppCompatActivity {\n+    //this method returns the move the ai will make\n+    public int[] move(int[][] board) {\n+        //this boolean is used to short circuit the for loop later\n+        boolean bestMove = false;\n+        int[] pos = {0,0};\n+        //if the ai can win in one move\n+        if (isOneMoveWin(board,1)>0) {\n+            for (int i = 0; i < 3; i++) {\n+                for (int j = 0; j < 3; j++) {\n+                    if(bestMove) {\n+                        //this runs if the best move is found\n+                    }else if (board[i][j]==0) {//this runs if the tile is empty\n+                        board[i][j] = 1;\n+                        if (gameWon(board)) {//looks to see if the move wins\n+                            bestMove = true;\n+                            pos = new int[] {i,j};\n+                        }else {//else returns board to previous` state\n+                            board[i][j]=0;\n+                        }\n+                    }\n+                }\n+            }\n+            if(bestMove) {\n+                return new int[] {pos[0],pos[1]};//returns the best move\n+            }\n+        }else if(isOneMoveWin(board,2)==1) {//if the player can win in one move in exactly one way\n+            for (int i = 0; i < 3; i++) {\n+                for (int j = 0; j < 3; j++) {\n+                    if(bestMove) {\n+                        //this runs if the best move is found\n+                    }else if (board[i][j]==0) {//this runs if the tile is empty\n+                        board[i][j] = 1;\n+                        if (isOneMoveWin(board,2)==0) {//sees if move stops the win\n+                            bestMove = true;\n+                            pos = new int[] {i,j};\n+                        }else {//else returns board to previous state\n+                            board[i][j]=0;\n+                        }\n+                    }\n+                }\n+            }\n+            if(bestMove) {\n+                return new int[] {pos[0],pos[1]};//returns the best move\n+            }\n+            else if(isOneMoveWin(board,2)>1){\n+                for (int i = 0; i < 3; i++) {\n+                    for (int j = 0; j < 3; j++) {\n+                        if(bestMove) {\n+                            //this runs if the best move is found\n+                        }else if (board[i][j]==0) {//this runs if the tile is empty\n+                            return new int[]{i,j};\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        //runs the other move calculation here\n+        int [] move = bestMove(true,board);\n+        return new int[] {move[0],move[1]};\n+    }\n+    private int isOneMoveWin(int[][] board,int player) {//takes in a board and player\n+        int returnState = 0;\n+        for(int x = 0; x < 3; x++)\n+        {\n+            if ((board[x][0] +\"\"+ board[x][1] +\"\"+ board[x][2]).replaceAll(\"0\", \"\").equals(player+\"\"+player)) {\n+                returnState++;//this is for rows\n+            }\n+        }\n+        for(int y = 0; y < 3; y++)\n+        {\n+            if ((board[0][y] +\"\"+ board[1][y] +\"\"+ board[2][y]).replaceAll(\"0\", \"\").equals(player+\"\"+player)) {\n+                returnState++;//this if for columns\n+            }\n+        }\n+        if((board[0][0] +\"\"+ board[1][1] +\"\"+ board[2][2]).replaceAll(\"0\", \"\").equals(player+\"\"+player))\n+        {\n+            returnState++;//diagonal 1\n+        }\n+        if ((board[0][2] +\"\"+ board[1][1] +\"\"+ board[2][0]).replaceAll(\"0\", \"\").equals(player+\"\"+player))\n+        {\n+            returnState++;//diagonal 2\n+        }\n+        return returnState;//returns how many ways a player can win in one turn on any given board\n+    }\n+    private boolean gameWon(int[][] board){//determines if a player wins\n+        //identical to the one in the game class but adapted to use variable input\n+        boolean returnState = false;\n+        for(int x = 0; x < 3; x++)\n+        {\n+            if (board[x][0] == board[x][1] && board[x][1] == board[x][2] && board[x][0] != 0) {\n+                returnState = true;//rows\n+            }\n+        }\n+        for(int y = 0; y < 3; y++)\n+        {\n+            if (board[0][y] == board[1][y] && board[1][y] == board[2][y] && board[0][y] != 0) {\n+                returnState = true;//columns\n+            }\n+        }\n+        if(board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != 0)\n+        {\n+            returnState = true;//diagonal\n+        }\n+        else if(board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != 0)\n+        {\n+            returnState = true;//diagonal\n+        }\n+        return returnState;//return if a player has won\n+    }\n+    private int[] bestMove(boolean turn, int[][] board){//attempts to find the best move\n+        int[] out = {0,0};//this is the move\n+        int[] state = new int[3];//wins, draws and looses that originate from a move\n+        for (int i = 0; i < 3; i++) {//this test all moves\n+            for (int j = 0; j < 3; j++) {\n+                if (board[i][j]==0) {\n+                    board[i][j]=1;\n+                    int[] tempState = lookAhead(board, !turn);\n+                    if (state[0]==0&&state[1]==0&&state[2]==0) {//runs only if it is the first iteration\n+                        state = tempState;//sets the first input set to state\n+                        out = new int[] {i,j};//sets the first value to output\n+                    }else {\n+                        //simple calculation for best move - needs work -\n+                        if (state[0]+state[1]-state[2]-(tempState[0]+tempState[1]-tempState[2])>0) {\n+                            out = new int[] {i,j};//set out to new best move\n+                        }\n+                    }\n+                    board[i][j]=0;//reset board state\n+\n+                }\n+            }\n+        }\n+        return out;//returns best* move\n+        //*may not be the best move\n+    }\n+    private int[] lookAhead(int[][] board, boolean turn) {\n+        int[] out = {0,0,0};//stores the wins, draws and looses that originate from a board state\n+        if (!gameWon(board)&&isCatsGame(board)) {\n+            out[2]++;//stores a cats game\n+        }else if (gameWon(board)&&turn) {\n+            out[0]++;//stores a win\n+        }else if(gameWon(board)&&!turn) {\n+            out[1]++;//stores a loss\n+        }\n+        turn=!turn;//inverts turn\n+        //recursively playes all games of tick tack toe\n+        for (int i = 0; i < 3; i++) {\n+            for (int j = 0; j < 3; j++) {\n+                if (board[i][j]==0&&!gameWon(board)) {//if the game is won then it does not need to keep recurring\n+                    //there is no point for cats games as that does not change run time\n+                    int temp[] = new int[0];\n+                    if (!turn) {//looks at which players turn it is\n+                        board[i][j] = 1;//next move in chain\n+                        temp = lookAhead(board, turn);//recursive call\n+                        board[i][j] = 0;//resets board state\n+                    }else {\n+                        board[i][j] = 2;//next move in chain\n+                        temp = lookAhead(board, turn);//recursive call\n+                        board[i][j] = 0;//resets board state\n+                    }\n+                    for (int j2 = 0; j2 < out.length; j2++) {\n+                        out[j2] += temp[j2];//adds stored total to the output\n+                    }\n+                }\n+            }\n+        }\n+        return out;//return the wins, draws and looses that originate from a board state\n+    }\n+    private boolean isCatsGame(int[][] board){//finds cats games\n+        boolean returnState = true;\n+        for (int i = 0; i<3;i++){\n+            for(int j = 0; j<3;j++){\n+                if(board[i][j]==0&&returnState) {//if returnstate is false this doesn't need to run\n+                    returnState = false;//if a square is empty then it is not a cats game\n+                }\n+            }\n+        }\n+        return returnState;//returns if a board is a cats game\n+    }\n+}"
  },
  {
    "sha": "085409ee80c405b97659f5732dac4301807466e0",
    "filename": "app/src/main/java/com/example/tictacktoe/GameActivity.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/java/com/example/tictacktoe/GameActivity.java",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/java/com/example/tictacktoe/GameActivity.java",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/app/src/main/java/com/example/tictacktoe/GameActivity.java?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -25,7 +25,7 @@\n     //0 - empty\n     //1 - x\n     //2 - o\n-    boolean xOrO = false;// if the active player is x or O\n+    boolean xOrO = true;// if the active player is x or O\n     //true - O\n     //false - x\n     private int[] score = new int[2];\n@@ -50,11 +50,11 @@ public void onClick(View v) {\n                         if (!xOrO){\n                             buttonStates[finalI][finalJ] = 1;\n                             v.setForeground(getDrawable(R.drawable.eagle));\n-                            view.setForeground(getDrawable(R.drawable.eagle));\n+                            view.setForeground(getDrawable(R.drawable.rioux));\n                         }else{\n                             buttonStates[finalI][finalJ] = 2;\n                             v.setForeground(getDrawable(R.drawable.rioux));\n-                            view.setForeground(getDrawable(R.drawable.rioux));\n+                            view.setForeground(getDrawable(R.drawable.eagle));\n                         }\n                         //gameButtons[finalI][finalJ].setText(xOrO+\"\");\n                         gameButtons[finalI][finalJ].setEnabled(false);"
  },
  {
    "sha": "469b502f7afef40fa973b21569992d1f65143a3e",
    "filename": "app/src/main/java/com/example/tictacktoe/MainActivity.java",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/java/com/example/tictacktoe/MainActivity.java",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/java/com/example/tictacktoe/MainActivity.java",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/app/src/main/java/com/example/tictacktoe/MainActivity.java?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -11,6 +11,8 @@\n \n     private Button gameButton;\n     private Button infoButton;\n+    private Button singlePlayerButton;\n+\n \n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n@@ -24,6 +26,13 @@ public void onClick(View v) {\n                 openGameActivty();\n             }\n         });\n+        singlePlayerButton = (Button) findViewById(R.id.gameButton2);\n+        singlePlayerButton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                openSinglePlayerActivty();\n+            }\n+        });\n \n         infoButton = (Button) findViewById(R.id.infoButton);\n         infoButton.setOnClickListener(new View.OnClickListener() {\n@@ -41,7 +50,10 @@ public void openGameActivty() {\n         Intent intent = new Intent(this, GameActivity.class);\n         startActivity(intent);\n     }\n-\n+    public void openSinglePlayerActivty() {\n+        Intent intent = new Intent(this, OnePlayerMode.class);\n+        startActivity(intent);\n+    }\n     public void openInfoActivity() {\n         Intent intent2 = new Intent(this, InfoActivity.class);\n         startActivity(intent2);"
  },
  {
    "sha": "85d3e96abd47649d4af95e6b3d5bd1b8c01067a6",
    "filename": "app/src/main/java/com/example/tictacktoe/OnePlayerMode.java",
    "status": "added",
    "additions": 170,
    "deletions": 0,
    "changes": 170,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/java/com/example/tictacktoe/OnePlayerMode.java",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/java/com/example/tictacktoe/OnePlayerMode.java",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/app/src/main/java/com/example/tictacktoe/OnePlayerMode.java?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -0,0 +1,170 @@\n+\n+package com.example.tictacktoe;\n+\n+import androidx.annotation.RequiresApi;\n+import androidx.appcompat.app.AppCompatActivity;\n+\n+import android.content.Intent;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.util.Log;\n+import android.view.View;\n+import android.widget.Button;\n+import android.widget.ImageView;\n+import android.widget.TextView;\n+import android.widget.Toast;\n+\n+\n+public class OnePlayerMode extends AppCompatActivity {\n+\n+    private Button doneButton;\n+    int[][] buttonStates = new int[3][3];//creates a 3x3 array\n+    //0 - empty\n+    //1 - x\n+    //2 - o\n+    boolean xOrO = true;// if the active player is x or O\n+    //true - O\n+    //false - x\n+    private int[] score = new int[2];\n+    private Button[][] gameButtons = new Button[3][3];\n+    @RequiresApi(api = Build.VERSION_CODES.M)\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        final ImageView view = findViewById(R.id.playerState);\n+        setContentView(R.layout.activity_game);\n+        final int[] aiMove = new AiPlayer().move(buttonStates);\n+        for (int i = 0;i<3;i++){\n+            for(int j = 0; j<3;j++){\n+                //String id = \"button\"+i+j;\n+                //clerifictation this gets the button i + j and gets its id and stores it here\n+                int id = getResources().getIdentifier(\"button\"+i+\"\"+j,\"id\",getPackageName());\n+                gameButtons[i][j] = (Button) findViewById(id);\n+                final int finalI = i;\n+                final int finalJ = j;\n+                gameButtons[i][j].setOnClickListener(new View.OnClickListener() {\n+                    @RequiresApi(api = Build.VERSION_CODES.M)\n+                    @Override\n+                    public void onClick(View v) {\n+                        buttonStates[finalI][finalJ] = 2;\n+                        v.setForeground(getDrawable(R.drawable.rioux));\n+                        gameButtons[finalI][finalJ].setEnabled(false);\n+                        gameReseterPlayer();\n+                        gameReseterAI();\n+                        Log.i(\"info\",aiMove[0]+\",\"+aiMove[1]);\n+\n+                    }\n+                });\n+            }\n+        }\n+        buttonStates[aiMove[0]][aiMove[1]]=1;\n+        int id = getResources().getIdentifier(\"button\"+aiMove[0]+\"\"+aiMove[1],\"id\",getPackageName());\n+        findViewById(id).setForeground(getDrawable(R.drawable.eagle));\n+        doneButton = (Button) findViewById(R.id.doneButton);\n+        doneButton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                openDoneActivty();\n+            }\n+        });\n+    }\n+    public void openDoneActivty() {\n+        Intent intent4 = new Intent(this, MainActivity.class);\n+        startActivity(intent4);\n+    }\n+    private boolean isCatsGame(){\n+        boolean returnState = true;\n+        for (int i = 0; i<3;i++){\n+            for(int j = 0; j<3;j++){\n+                if(buttonStates[i][j]==0&&returnState) {\n+                    returnState = false;\n+                }\n+            }\n+        }\n+        return returnState&&!gameWon();\n+    }\n+    private boolean gameWon(){\n+        boolean returnState = false;\n+        for(int x = 0; x < 3; x++)//check for vertical wins\n+        {\n+            if (buttonStates[x][0] == buttonStates[x][1] && buttonStates[x][1] == buttonStates[x][2] && buttonStates[x][0] != 0) {\n+                returnState = true;\n+            }\n+        }\n+        for(int y = 0; y < 3; y++)//check for horizontal wins\n+        {\n+            if (buttonStates[0][y] == buttonStates[1][y] && buttonStates[1][y] == buttonStates[2][y] && buttonStates[0][y] != 0) {\n+                returnState = true;\n+            }\n+        }\n+        //check for diagonal wins\n+        if(buttonStates[0][0] == buttonStates[1][1] && buttonStates[1][1] == buttonStates[2][2] && buttonStates[0][0] != 0)\n+        {\n+            returnState = true;\n+        }\n+        else if(buttonStates[0][2] == buttonStates[1][1] && buttonStates[1][1] == buttonStates[2][0] && buttonStates[0][2] != 0)\n+        {\n+            returnState = true;\n+\n+        }\n+        return returnState;\n+    }\n+    @RequiresApi(api = Build.VERSION_CODES.M)\n+    private void resetBoard(){\n+        for (int i = 0; i <3;i++){\n+            for (int j = 0; j<3;j++){\n+                int id = getResources().getIdentifier(\"button\"+i+\"\"+j,\"id\",getPackageName());\n+                Button b = findViewById(id);\n+                b.setEnabled(true);\n+                b.setText(\"\");\n+                buttonStates[i][j]=0;\n+                gameButtons[i][j].setForeground(null);\n+                xOrO = false;\n+            }\n+        }\n+    }\n+    @RequiresApi(api = Build.VERSION_CODES.M)\n+    private void gameReseterAI(){\n+        if(gameWon()){\n+            score[1]++;\n+            TextView tv1 = findViewById(R.id.p2Text);\n+            tv1.setText(\"Player 2: \"+score[1]);\n+            Toast.makeText(getApplicationContext(),\"Player 2 wins\",Toast.LENGTH_LONG).show();\n+            resetBoard();\n+            buttonStates[1][1]=1;\n+            int id = getResources().getIdentifier(\"button\"+1+\"\"+1,\"id\",getPackageName());\n+            findViewById(id).setForeground(getDrawable(R.drawable.eagle));\n+        }\n+        else if (isCatsGame()){\n+            Toast.makeText(getApplicationContext(),\"No one wins\",Toast.LENGTH_LONG).show();\n+            resetBoard();\n+            buttonStates[1][1]=1;\n+            int id = getResources().getIdentifier(\"button\"+1+\"\"+1,\"id\",getPackageName());\n+            findViewById(id).setForeground(getDrawable(R.drawable.eagle));\n+        }\n+    }\n+    @RequiresApi(api = Build.VERSION_CODES.M)\n+    private void gameReseterPlayer(){\n+        if(gameWon()){\n+            score[0]++;\n+            TextView tv1 = findViewById(R.id.p1Text);\n+            tv1.setText(\"Player 1: \"+score[0]);\n+            Toast.makeText(getApplicationContext(),\"Player 1 wins\",Toast.LENGTH_LONG).show();\n+            resetBoard();\n+            int[] aiMove = new AiPlayer().move(buttonStates);\n+            buttonStates[aiMove[0]][aiMove[1]] = 1;\n+            gameButtons[aiMove[0]][aiMove[1]].setForeground(getDrawable(R.drawable.eagle));\n+        }\n+        else if (isCatsGame()){\n+            Toast.makeText(getApplicationContext(),\"No one wins\",Toast.LENGTH_LONG).show();\n+            resetBoard();\n+            int[] aiMove = new AiPlayer().move(buttonStates);\n+            buttonStates[aiMove[0]][aiMove[1]] = 1;\n+            gameButtons[aiMove[0]][aiMove[1]].setForeground(getDrawable(R.drawable.eagle));\n+        }else{\n+            int[] aiMove = new AiPlayer().move(buttonStates);\n+            buttonStates[aiMove[0]][aiMove[1]] = 1;\n+            gameButtons[aiMove[0]][aiMove[1]].setForeground(getDrawable(R.drawable.eagle));\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "95cefa3bf8c1052700704b266885e0ffd5bf80c1",
    "filename": "app/src/main/res/layout/activity_game.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/res/layout/activity_game.xml",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/res/layout/activity_game.xml",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/app/src/main/res/layout/activity_game.xml?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -8,7 +8,7 @@\n     android:descendantFocusability=\"beforeDescendants\"\n     android:orientation=\"vertical\"\n     android:visibility=\"visible\"\n-    tools:context=\".GameActivity\">\n+    tools:context=\".OnePlayerMode\">\n \n     <RelativeLayout\n         android:layout_width=\"match_parent\""
  },
  {
    "sha": "660f7ff9f347deea69e85c2d4ceaf839e8134041",
    "filename": "app/src/main/res/layout/activity_main.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/res/layout/activity_main.xml",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/main/res/layout/activity_main.xml",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/app/src/main/res/layout/activity_main.xml?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -31,4 +31,11 @@\n         android:text=\"Start Game\"\n         android:fontFamily=\"@font/colleges\"/>\n \n+    <Button\n+        android:id=\"@+id/gameButton2\"\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"wrap_content\"\n+        android:fontFamily=\"@font/colleges\"\n+        android:text=\"Single Player\" />\n+\n </LinearLayout>\n\\ No newline at end of file"
  },
  {
    "sha": "402ded44b9b6f8756c84457b77cd58d4cf59020c",
    "filename": "app/src/test/java/com/example/tictacktoe/ExampleUnitTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/bhild/TickTackToeV2/blob/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/test/java/com/example/tictacktoe/ExampleUnitTest.java",
    "raw_url": "https://github.com/bhild/TickTackToeV2/raw/7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21/app/src/test/java/com/example/tictacktoe/ExampleUnitTest.java",
    "contents_url": "https://api.github.com/repos/bhild/TickTackToeV2/contents/app/src/test/java/com/example/tictacktoe/ExampleUnitTest.java?ref=7575a004a1b4dc53a42a3fa0747f2d2e6e3dba21",
    "patch": "@@ -11,7 +11,10 @@\n  */\n public class ExampleUnitTest {\n     @Test\n-    public void addition_isCorrect() {\n-        assertEquals(4, 2 + 2);\n+    public void testMoveWin001(){//ai makes the move to win\n+        AiPlayer p = new AiPlayer();\n+        int[][] board = {{1,0,1},{2,0,2},{0,0,0}};//array after move {1,1,1},{2,0,2},{0,0,0}\n+        //tile changed {0,1}\n+        assertArrayEquals(new int[] {0,1},p.move(board));\n     }\n }\n\\ No newline at end of file"
  }
]
