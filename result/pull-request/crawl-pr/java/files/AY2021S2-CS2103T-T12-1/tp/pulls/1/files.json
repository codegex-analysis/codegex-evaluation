[
  {
    "sha": "fd70870cdda74d648da05ca7378b3d95ce0c57bb",
    "filename": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/logic/commands/EditCommand.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -24,6 +24,7 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -97,9 +98,10 @@ private static Person createEditedPerson(Person personToEdit, EditPersonDescript\n         Phone updatedPhone = editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());\n         Email updatedEmail = editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());\n         Address updatedAddress = editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());\n+        Remark updatedRemark = personToEdit.getRemark(); // edit command does not allow editing remarks\n         Set<Tag> updatedTags = editPersonDescriptor.getTags().orElse(personToEdit.getTags());\n \n-        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);\n+        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags);\n     }\n \n     @Override\n@@ -129,6 +131,7 @@ public boolean equals(Object other) {\n         private Phone phone;\n         private Email email;\n         private Address address;\n+        private Remark remark;\n         private Set<Tag> tags;\n \n         public EditPersonDescriptor() {}\n@@ -142,6 +145,7 @@ public EditPersonDescriptor(EditPersonDescriptor toCopy) {\n             setPhone(toCopy.phone);\n             setEmail(toCopy.email);\n             setAddress(toCopy.address);\n+            setRemark(toCopy.remark);\n             setTags(toCopy.tags);\n         }\n \n@@ -184,6 +188,14 @@ public void setAddress(Address address) {\n             return Optional.ofNullable(address);\n         }\n \n+        public void setRemark(Remark remark) {\n+            this.remark = remark;\n+        }\n+\n+        public Optional<Remark> getRemark() {\n+            return Optional.ofNullable(remark);\n+        }\n+\n         /**\n          * Sets {@code tags} to this object's {@code tags}.\n          * A defensive copy of {@code tags} is used internally."
  },
  {
    "sha": "d24af0f4e31bd6e31b8e5d16a2897e71a392e489",
    "filename": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/logic/commands/RemarkCommand.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -0,0 +1,95 @@\n+package seedu.address.logic.commands;\n+\n+import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n+import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.core.Messages;\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.logic.commands.exceptions.CommandException;\n+import seedu.address.model.Model;\n+import seedu.address.model.person.Person;\n+import seedu.address.model.person.Remark;\n+\n+/**\n+ * Changes the remark of an existing person in the address book.\n+ */\n+public class RemarkCommand extends Command {\n+\n+    public static final String COMMAND_WORD = \"remark\";\n+\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Edits the remark of the person identified \"\n+            + \"by the index number used in the last person listing. \"\n+            + \"Existing remark will be overwritten by the input.\\n\"\n+            + \"Parameters: INDEX (must be a positive integer) \"\n+            + \"r/ [REMARK]\\n\"\n+            + \"Example: \" + COMMAND_WORD + \" 1 \"\n+            + \"r/ Likes to swim.\";\n+\n+    public static final String MESSAGE_NOT_IMPLEMENTED_YET = \"Remark command not implemented yet\";\n+\n+    public static final String MESSAGE_ARGUMENTS = \"Index: %1$d, Remark: %2$s\";\n+\n+    public static final String MESSAGE_ADD_REMARK_SUCCESS = \"Added remark to Person: %1$s\";\n+    public static final String MESSAGE_DELETE_REMARK_SUCCESS = \"Removed remark from Person: %1$s\";\n+\n+    private final Index index;\n+    private final Remark remark;\n+\n+    /**\n+     * @param index of the person in the filtered person list to edit the remark\n+     * @param remark of the person to be updated to\n+     */\n+    public RemarkCommand(Index index, Remark remark) {\n+        requireAllNonNull(index, remark);\n+\n+        this.index = index;\n+        this.remark = remark;\n+    }\n+\n+    @Override\n+    public CommandResult execute(Model model) throws CommandException {\n+        List<Person> lastShownList = model.getFilteredPersonList();\n+\n+        if (index.getZeroBased() >= lastShownList.size()) {\n+            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+        }\n+\n+        Person personToEdit = lastShownList.get(index.getZeroBased());\n+        Person editedPerson = new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),\n+                personToEdit.getAddress(), remark, personToEdit.getTags());\n+\n+        model.setPerson(personToEdit, editedPerson);\n+        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n+\n+        return new CommandResult(generateSuccessMessage(editedPerson));\n+    }\n+\n+    /**\n+     * Generates a command execution success message based on whether the remark is added to or removed from\n+     * {@code personToEdit}.\n+     */\n+    private String generateSuccessMessage(Person personToEdit) {\n+        String message = !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;\n+        return String.format(message, personToEdit);\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        // short circuit if same object\n+        if (other == this) {\n+            return true;\n+        }\n+\n+        // instanceof handles nulls\n+        if (!(other instanceof RemarkCommand)) {\n+            return false;\n+        }\n+\n+        // state check\n+        RemarkCommand e = (RemarkCommand) other;\n+        return index.equals(e.index)\n+                && remark.equals(e.remark);\n+    }\n+}"
  },
  {
    "sha": "adfda4e48ded17efe5626ef6663b110c939e2ac5",
    "filename": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/logic/parser/AddCommandParser.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -5,6 +5,7 @@\n import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n \n import java.util.Set;\n@@ -17,6 +18,7 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -31,7 +33,8 @@\n      */\n     public AddCommand parse(String args) throws ParseException {\n         ArgumentMultimap argMultimap =\n-                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);\n+                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,\n+                        PREFIX_ADDRESS, PREFIX_REMARK, PREFIX_TAG);\n \n         if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)\n                 || !argMultimap.getPreamble().isEmpty()) {\n@@ -42,9 +45,10 @@ public AddCommand parse(String args) throws ParseException {\n         Phone phone = ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());\n         Email email = ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());\n         Address address = ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());\n+        Remark remark = new Remark(\"\"); // add command does not allow adding remarks straight away\n         Set<Tag> tagList = ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));\n \n-        Person person = new Person(name, phone, email, address, tagList);\n+        Person person = new Person(name, phone, email, address, remark, tagList);\n \n         return new AddCommand(person);\n     }"
  },
  {
    "sha": "b650f13a6b9b436ebac924958193b175c3fc0ad8",
    "filename": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/logic/parser/AddressBookParser.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -15,6 +15,7 @@\n import seedu.address.logic.commands.FindCommand;\n import seedu.address.logic.commands.HelpCommand;\n import seedu.address.logic.commands.ListCommand;\n+import seedu.address.logic.commands.RemarkCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n \n /**\n@@ -68,6 +69,9 @@ public Command parseCommand(String userInput) throws ParseException {\n         case HelpCommand.COMMAND_WORD:\n             return new HelpCommand();\n \n+        case RemarkCommand.COMMAND_WORD:\n+            return new RemarkCommandParser().parse(arguments);\n+\n         default:\n             throw new ParseException(MESSAGE_UNKNOWN_COMMAND);\n         }"
  },
  {
    "sha": "96be13b3772054877f32a657a7ffd8f9c85ad303",
    "filename": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/logic/parser/CliSyntax.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -11,5 +11,6 @@\n     public static final Prefix PREFIX_EMAIL = new Prefix(\"e/\");\n     public static final Prefix PREFIX_ADDRESS = new Prefix(\"a/\");\n     public static final Prefix PREFIX_TAG = new Prefix(\"t/\");\n+    public static final Prefix PREFIX_REMARK = new Prefix(\"r/\");\n \n }"
  },
  {
    "sha": "6b01a1f915b2251511f77977bb18a1767c5a3f26",
    "filename": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -0,0 +1,37 @@\n+package seedu.address.logic.parser;\n+\n+import static java.util.Objects.requireNonNull;\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n+\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.commons.exceptions.IllegalValueException;\n+import seedu.address.logic.commands.RemarkCommand;\n+import seedu.address.logic.parser.exceptions.ParseException;\n+import seedu.address.model.person.Remark;\n+\n+public class RemarkCommandParser implements Parser<RemarkCommand> {\n+\n+    /**\n+     * Parses the given {@code String} of arguments in the context of the RemarkCommand\n+     * and returns an RemarkCommand object for execution.\n+     * @throws ParseException if the user input does not conform the expected format\n+     */\n+    public RemarkCommand parse(String args) throws ParseException {\n+        requireNonNull(args);\n+        ArgumentMultimap argMultimap = ArgumentTokenizer.tokenize(args,\n+                PREFIX_REMARK);\n+\n+        Index index;\n+        try {\n+            index = ParserUtil.parseIndex(argMultimap.getPreamble());\n+        } catch (IllegalValueException ive) {\n+            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,\n+                    RemarkCommand.MESSAGE_USAGE), ive);\n+        }\n+\n+        Remark remark = new Remark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));\n+\n+        return new RemarkCommand(index, remark);\n+    }\n+}"
  },
  {
    "sha": "2bd80bce2626a1fc155ac1dc0bd51dcb606ecbe1",
    "filename": "src/main/java/seedu/address/model/person/Person.java",
    "status": "modified",
    "additions": 12,
    "deletions": 3,
    "changes": 15,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/model/person/Person.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/model/person/Person.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/model/person/Person.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -19,6 +19,7 @@\n     private final Name name;\n     private final Phone phone;\n     private final Email email;\n+    private final Remark remark;\n \n     // Data fields\n     private final Address address;\n@@ -27,12 +28,13 @@\n     /**\n      * Every field must be present and not null.\n      */\n-    public Person(Name name, Phone phone, Email email, Address address, Set<Tag> tags) {\n+    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set<Tag> tags) {\n         requireAllNonNull(name, phone, email, address, tags);\n         this.name = name;\n         this.phone = phone;\n         this.email = email;\n         this.address = address;\n+        this.remark = remark;\n         this.tags.addAll(tags);\n     }\n \n@@ -52,6 +54,10 @@ public Address getAddress() {\n         return address;\n     }\n \n+    public Remark getRemark() {\n+        return remark;\n+    }\n+\n     /**\n      * Returns an immutable tag set, which throws {@code UnsupportedOperationException}\n      * if modification is attempted.\n@@ -92,13 +98,14 @@ public boolean equals(Object other) {\n                 && otherPerson.getPhone().equals(getPhone())\n                 && otherPerson.getEmail().equals(getEmail())\n                 && otherPerson.getAddress().equals(getAddress())\n+                && otherPerson.getRemark().equals(getRemark())\n                 && otherPerson.getTags().equals(getTags());\n     }\n \n     @Override\n     public int hashCode() {\n         // use this method for custom fields hashing instead of implementing your own\n-        return Objects.hash(name, phone, email, address, tags);\n+        return Objects.hash(name, phone, email, address, remark, tags);\n     }\n \n     @Override\n@@ -110,7 +117,9 @@ public String toString() {\n                 .append(\"; Email: \")\n                 .append(getEmail())\n                 .append(\"; Address: \")\n-                .append(getAddress());\n+                .append(getAddress())\n+                .append(\"; Remark: \")\n+                .append(getRemark());\n \n         Set<Tag> tags = getTags();\n         if (!tags.isEmpty()) {"
  },
  {
    "sha": "e3bd821170e5049808911dad53f4f2d03437fa3c",
    "filename": "src/main/java/seedu/address/model/person/Remark.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/model/person/Remark.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/model/person/Remark.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/model/person/Remark.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -0,0 +1,38 @@\n+package seedu.address.model.person;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Represents a Person's remark in the address book.\n+ * Guarantees: immutable; is always valid\n+ */\n+public class Remark {\n+    public final String value;\n+\n+    /**\n+     * Constructs a {@code Remark}.\n+     *\n+     * @param remark A valid remark.\n+     */\n+    public Remark(String remark) {\n+        requireNonNull(remark);\n+        value = remark;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return value;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return other == this // short circuit if same object\n+                || (other instanceof Remark // instanceof handles nulls\n+                && value.equals(((Remark) other).value)); // state check\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return value.hashCode();\n+    }\n+}"
  },
  {
    "sha": "3c991c8b1dcf3643aa0d922e553a15c2414dac65",
    "filename": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "status": "modified",
    "additions": 10,
    "deletions": 6,
    "changes": 16,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/model/util/SampleDataUtil.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -11,31 +11,35 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n  * Contains utility methods for populating {@code AddressBook} with sample data.\n  */\n public class SampleDataUtil {\n+\n+    public static final Remark EMPTY_REMARK = new Remark(\"\");\n+\n     public static Person[] getSamplePersons() {\n         return new Person[] {\n             new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),\n-                new Address(\"Blk 30 Geylang Street 29, #06-40\"),\n+                new Address(\"Blk 30 Geylang Street 29, #06-40\"), EMPTY_REMARK,\n                 getTagSet(\"friends\")),\n             new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),\n-                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),\n+                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), EMPTY_REMARK,\n                 getTagSet(\"colleagues\", \"friends\")),\n             new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),\n-                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),\n+                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), EMPTY_REMARK,\n                 getTagSet(\"neighbours\")),\n             new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),\n-                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),\n+                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), EMPTY_REMARK,\n                 getTagSet(\"family\")),\n             new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),\n-                new Address(\"Blk 47 Tampines Street 20, #17-35\"),\n+                new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_REMARK,\n                 getTagSet(\"classmates\")),\n             new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),\n-                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),\n+                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), EMPTY_REMARK,\n                 getTagSet(\"colleagues\"))\n         };\n     }"
  },
  {
    "sha": "fa0762d30ee26c3985b3d0b08ff67d46bd711a05",
    "filename": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/storage/JsonAdaptedPerson.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -15,6 +15,7 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -28,6 +29,7 @@\n     private final String phone;\n     private final String email;\n     private final String address;\n+    private final String remark;\n     private final List<JsonAdaptedTag> tagged = new ArrayList<>();\n \n     /**\n@@ -36,11 +38,12 @@\n     @JsonCreator\n     public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,\n             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,\n-            @JsonProperty(\"tagged\") List<JsonAdaptedTag> tagged) {\n+            @JsonProperty(\"remark\") String remark, @JsonProperty(\"tagged\") List<JsonAdaptedTag> tagged) {\n         this.name = name;\n         this.phone = phone;\n         this.email = email;\n         this.address = address;\n+        this.remark = remark;\n         if (tagged != null) {\n             this.tagged.addAll(tagged);\n         }\n@@ -54,6 +57,7 @@ public JsonAdaptedPerson(Person source) {\n         phone = source.getPhone().value;\n         email = source.getEmail().value;\n         address = source.getAddress().value;\n+        remark = source.getRemark().value;\n         tagged.addAll(source.getTags().stream()\n                 .map(JsonAdaptedTag::new)\n                 .collect(Collectors.toList()));\n@@ -102,8 +106,13 @@ public Person toModelType() throws IllegalValueException {\n         }\n         final Address modelAddress = new Address(address);\n \n+        if (remark == null) {\n+            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));\n+        }\n+        final Remark modelRemark = new Remark(remark);\n+\n         final Set<Tag> modelTags = new HashSet<>(personTags);\n-        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);\n+        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRemark, modelTags);\n     }\n \n }"
  },
  {
    "sha": "4547baf311151e823793b86acbea99f079732a1c",
    "filename": "src/main/java/seedu/address/ui/PersonCard.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/ui/PersonCard.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/java/seedu/address/ui/PersonCard.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/java/seedu/address/ui/PersonCard.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -40,6 +40,8 @@\n     private Label email;\n     @FXML\n     private FlowPane tags;\n+    @FXML\n+    private Label remark;\n \n     /**\n      * Creates a {@code PersonCode} with the given {@code Person} and index to display.\n@@ -52,6 +54,7 @@ public PersonCard(Person person, int displayedIndex) {\n         phone.setText(person.getPhone().value);\n         address.setText(person.getAddress().value);\n         email.setText(person.getEmail().value);\n+        remark.setText(person.getRemark().value);\n         person.getTags().stream()\n                 .sorted(Comparator.comparing(tag -> tag.tagName))\n                 .forEach(tag -> tags.getChildren().add(new Label(tag.tagName)));"
  },
  {
    "sha": "d1a7eb614f8352b847c07754be9b80cd299dd51e",
    "filename": "src/main/resources/view/PersonListCard.fxml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/resources/view/PersonListCard.fxml",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/main/resources/view/PersonListCard.fxml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/main/resources/view/PersonListCard.fxml?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -31,6 +31,7 @@\n       <Label fx:id=\"phone\" styleClass=\"cell_small_label\" text=\"\\$phone\" />\n       <Label fx:id=\"address\" styleClass=\"cell_small_label\" text=\"\\$address\" />\n       <Label fx:id=\"email\" styleClass=\"cell_small_label\" text=\"\\$email\" />\n+      <Label fx:id=\"remark\" styleClass=\"cell_small_label\" text=\"\\$remark\" />\n     </VBox>\n   </GridPane>\n </HBox>"
  },
  {
    "sha": "3839b11e12ff6c33f4c501f20b0bf079e75e8c20",
    "filename": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -4,11 +4,13 @@\n     \"phone\": \"94351253\",\n     \"email\": \"alice@example.com\",\n     \"address\": \"123, Jurong West Ave 6, #08-111\",\n+    \"remark\": \"\",\n     \"tagged\": [ \"friends\" ]\n   }, {\n     \"name\": \"Alice Pauline\",\n     \"phone\": \"94351253\",\n     \"email\": \"pauline@example.com\",\n-    \"address\": \"4th street\"\n+    \"address\": \"4th street\",\n+    \"remark\": \"\"\n   } ]\n }"
  },
  {
    "sha": "d5d7900b519980e0a262fb46726fca2b4ee9f9cb",
    "filename": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -5,42 +5,49 @@\n     \"phone\" : \"94351253\",\n     \"email\" : \"alice@example.com\",\n     \"address\" : \"123, Jurong West Ave 6, #08-111\",\n+    \"remark\": \"\",\n     \"tagged\" : [ \"friends\" ]\n   }, {\n     \"name\" : \"Benson Meier\",\n     \"phone\" : \"98765432\",\n     \"email\" : \"johnd@example.com\",\n     \"address\" : \"311, Clementi Ave 2, #02-25\",\n+    \"remark\": \"\",\n     \"tagged\" : [ \"owesMoney\", \"friends\" ]\n   }, {\n     \"name\" : \"Carl Kurz\",\n     \"phone\" : \"95352563\",\n     \"email\" : \"heinz@example.com\",\n     \"address\" : \"wall street\",\n+    \"remark\": \"\",\n     \"tagged\" : [ ]\n   }, {\n     \"name\" : \"Daniel Meier\",\n     \"phone\" : \"87652533\",\n     \"email\" : \"cornelia@example.com\",\n     \"address\" : \"10th street\",\n+    \"remark\": \"\",\n     \"tagged\" : [ \"friends\" ]\n   }, {\n     \"name\" : \"Elle Meyer\",\n     \"phone\" : \"9482224\",\n     \"email\" : \"werner@example.com\",\n     \"address\" : \"michegan ave\",\n+    \"remark\": \"\",\n     \"tagged\" : [ ]\n   }, {\n     \"name\" : \"Fiona Kunz\",\n     \"phone\" : \"9482427\",\n     \"email\" : \"lydia@example.com\",\n     \"address\" : \"little tokyo\",\n+    \"remark\": \"\",\n     \"tagged\" : [ ]\n   }, {\n     \"name\" : \"George Best\",\n     \"phone\" : \"9482442\",\n     \"email\" : \"anna@example.com\",\n     \"address\" : \"4th street\",\n+    \"remark\": \"\",\n     \"tagged\" : [ ]\n   } ]\n }"
  },
  {
    "sha": "fa5fad1277de6afd8e5644db43c90cbd8fef3f7d",
    "filename": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/test/java/seedu/address/logic/commands/CommandTestUtil.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -6,6 +6,7 @@\n import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n import static seedu.address.testutil.Assert.assertThrows;\n \n@@ -34,6 +35,8 @@\n     public static final String VALID_EMAIL_BOB = \"bob@example.com\";\n     public static final String VALID_ADDRESS_AMY = \"Block 312, Amy Street 1\";\n     public static final String VALID_ADDRESS_BOB = \"Block 123, Bobby Street 3\";\n+    public static final String VALID_REMARK_AMY = \"Likes beavers\";\n+    public static final String VALID_REMARK_BOB = \"Can't take spice!\";\n     public static final String VALID_TAG_HUSBAND = \"husband\";\n     public static final String VALID_TAG_FRIEND = \"friend\";\n \n@@ -45,6 +48,8 @@\n     public static final String EMAIL_DESC_BOB = \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;\n     public static final String ADDRESS_DESC_AMY = \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;\n     public static final String ADDRESS_DESC_BOB = \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;\n+    public static final String REMARK_DESC_AMY = \" \" + PREFIX_REMARK + VALID_REMARK_AMY;\n+    public static final String REMARK_DESC_BOB = \" \" + PREFIX_REMARK + VALID_REMARK_BOB;\n     public static final String TAG_DESC_FRIEND = \" \" + PREFIX_TAG + VALID_TAG_FRIEND;\n     public static final String TAG_DESC_HUSBAND = \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;\n "
  },
  {
    "sha": "c94aedd74ab7c2c8fda6ab084ee037086973c03c",
    "filename": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "status": "added",
    "additions": 135,
    "deletions": 0,
    "changes": 135,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/test/java/seedu/address/logic/commands/RemarkCommandTest.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -0,0 +1,135 @@\n+package seedu.address.logic.commands;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;\n+import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;\n+import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;\n+import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;\n+import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;\n+import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;\n+import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;\n+import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import seedu.address.commons.core.Messages;\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.model.AddressBook;\n+import seedu.address.model.Model;\n+import seedu.address.model.ModelManager;\n+import seedu.address.model.UserPrefs;\n+import seedu.address.model.person.Person;\n+import seedu.address.model.person.Remark;\n+import seedu.address.testutil.PersonBuilder;\n+\n+/**\n+ * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand.\n+ */\n+public class RemarkCommandTest {\n+\n+    private static final String REMARK_STUB = \"Some remark\";\n+\n+    private Model model = new ModelManager(getTypicalAddressBook(), new UserPrefs());\n+\n+    @Test\n+    public void execute_addRemarkUnfilteredList_success() {\n+        Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\n+        Person editedPerson = new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();\n+\n+        RemarkCommand remarkCommand = new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));\n+\n+        String expectedMessage = String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);\n+\n+        Model expectedModel = new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());\n+        expectedModel.setPerson(firstPerson, editedPerson);\n+\n+        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);\n+    }\n+\n+    @Test\n+    public void execute_deleteRemarkUnfilteredList_success() {\n+        Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\n+        Person editedPerson = new PersonBuilder(firstPerson).withRemark(\"\").build();\n+\n+        RemarkCommand remarkCommand = new RemarkCommand(INDEX_FIRST_PERSON,\n+                new Remark(editedPerson.getRemark().toString()));\n+\n+        String expectedMessage = String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);\n+\n+        Model expectedModel = new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());\n+        expectedModel.setPerson(firstPerson, editedPerson);\n+\n+        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);\n+    }\n+\n+    @Test\n+    public void execute_filteredList_success() {\n+        showPersonAtIndex(model, INDEX_FIRST_PERSON);\n+\n+        Person firstPerson = model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());\n+        Person editedPerson = new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))\n+                .withRemark(REMARK_STUB).build();\n+\n+        RemarkCommand remarkCommand = new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));\n+\n+        String expectedMessage = String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);\n+\n+        Model expectedModel = new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());\n+        expectedModel.setPerson(firstPerson, editedPerson);\n+\n+        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);\n+    }\n+\n+    @Test\n+    public void execute_invalidPersonIndexUnfilteredList_failure() {\n+        Index outOfBoundIndex = Index.fromOneBased(model.getFilteredPersonList().size() + 1);\n+        RemarkCommand remarkCommand = new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));\n+\n+        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+    }\n+\n+    /**\n+     * Edit filtered list where index is larger than size of filtered list,\n+     * but smaller than size of address book\n+     */\n+    @Test\n+    public void execute_invalidPersonIndexFilteredList_failure() {\n+        showPersonAtIndex(model, INDEX_FIRST_PERSON);\n+        Index outOfBoundIndex = INDEX_SECOND_PERSON;\n+        // ensures that outOfBoundIndex is still in bounds of address book list\n+        assertTrue(outOfBoundIndex.getZeroBased() < model.getAddressBook().getPersonList().size());\n+\n+        RemarkCommand remarkCommand = new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));\n+\n+        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+    }\n+\n+    @Test\n+    public void equals() {\n+        final RemarkCommand standardCommand = new RemarkCommand(INDEX_FIRST_PERSON,\n+                new Remark(VALID_REMARK_AMY));\n+\n+        // same values -> returns true\n+        RemarkCommand commandWithSameValues = new RemarkCommand(INDEX_FIRST_PERSON,\n+                new Remark(VALID_REMARK_AMY));\n+        assertTrue(standardCommand.equals(commandWithSameValues));\n+\n+        // same object -> returns true\n+        assertTrue(standardCommand.equals(standardCommand));\n+\n+        // null -> returns false\n+        assertFalse(standardCommand.equals(null));\n+\n+        // different types -> returns false\n+        assertFalse(standardCommand.equals(new ClearCommand()));\n+\n+        // different index -> returns false\n+        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON,\n+                new Remark(VALID_REMARK_AMY))));\n+\n+        // different remark -> returns false\n+        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON,\n+                new Remark(VALID_REMARK_BOB))));\n+    }\n+}"
  },
  {
    "sha": "bbbbd78eee15becb2ca1a42474c9ecec4b0babc9",
    "filename": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "status": "modified",
    "additions": 17,
    "deletions": 9,
    "changes": 26,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -28,6 +28,7 @@\n     private static final String VALID_PHONE = BENSON.getPhone().toString();\n     private static final String VALID_EMAIL = BENSON.getEmail().toString();\n     private static final String VALID_ADDRESS = BENSON.getAddress().toString();\n+    private static final String VALID_REMARK = BENSON.getRemark().toString();\n     private static final List<JsonAdaptedTag> VALID_TAGS = BENSON.getTags().stream()\n             .map(JsonAdaptedTag::new)\n             .collect(Collectors.toList());\n@@ -41,59 +42,65 @@ public void toModelType_validPersonDetails_returnsPerson() throws Exception {\n     @Test\n     public void toModelType_invalidName_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = Name.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullName_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(\n+                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_invalidPhone_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = Phone.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullPhone_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(\n+                VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_invalidEmail_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(\n+                        VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = Email.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullEmail_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(\n+                VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_invalidAddress_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(\n+                        VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = Address.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullAddress_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(\n+                VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n@@ -103,7 +110,8 @@ public void toModelType_invalidTags_throwsIllegalValueException() {\n         List<JsonAdaptedTag> invalidTags = new ArrayList<>(VALID_TAGS);\n         invalidTags.add(new JsonAdaptedTag(INVALID_TAG));\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);\n+                new JsonAdaptedPerson(\n+                        VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, invalidTags);\n         assertThrows(IllegalValueException.class, person::toModelType);\n     }\n "
  },
  {
    "sha": "ef336cfb156f25840d2487954861eca129a55198",
    "filename": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "status": "modified",
    "additions": 14,
    "deletions": 1,
    "changes": 15,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/testutil/PersonBuilder.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/testutil/PersonBuilder.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/test/java/seedu/address/testutil/PersonBuilder.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -8,6 +8,7 @@\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n import seedu.address.model.util.SampleDataUtil;\n \n@@ -20,11 +21,13 @@\n     public static final String DEFAULT_PHONE = \"85355255\";\n     public static final String DEFAULT_EMAIL = \"amy@gmail.com\";\n     public static final String DEFAULT_ADDRESS = \"123, Jurong West Ave 6, #08-111\";\n+    public static final String DEFAULT_REMARK = \"\";\n \n     private Name name;\n     private Phone phone;\n     private Email email;\n     private Address address;\n+    private Remark remark;\n     private Set<Tag> tags;\n \n     /**\n@@ -35,6 +38,7 @@ public PersonBuilder() {\n         phone = new Phone(DEFAULT_PHONE);\n         email = new Email(DEFAULT_EMAIL);\n         address = new Address(DEFAULT_ADDRESS);\n+        remark = new Remark(DEFAULT_REMARK);\n         tags = new HashSet<>();\n     }\n \n@@ -46,6 +50,7 @@ public PersonBuilder(Person personToCopy) {\n         phone = personToCopy.getPhone();\n         email = personToCopy.getEmail();\n         address = personToCopy.getAddress();\n+        remark = personToCopy.getRemark();\n         tags = new HashSet<>(personToCopy.getTags());\n     }\n \n@@ -89,8 +94,16 @@ public PersonBuilder withEmail(String email) {\n         return this;\n     }\n \n+    /**\n+     * Sets the {@code Remark} of the {@code Person} that we are building.\n+     */\n+    public PersonBuilder withRemark(String remark) {\n+        this.remark = new Remark(remark);\n+        return this;\n+    }\n+\n     public Person build() {\n-        return new Person(name, phone, email, address, tags);\n+        return new Person(name, phone, email, address, remark, tags);\n     }\n \n }"
  },
  {
    "sha": "ef3e41a06c3a674cc47a038b4058dd078e71c5a3",
    "filename": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/testutil/TypicalPersons.java",
    "raw_url": "https://github.com/AY2021S2-CS2103T-T12-1/tp/raw/9922369f317a058a2ea5ae8da82515ec7c6d9921/src/test/java/seedu/address/testutil/TypicalPersons.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103T-T12-1/tp/contents/src/test/java/seedu/address/testutil/TypicalPersons.java?ref=9922369f317a058a2ea5ae8da82515ec7c6d9921",
    "patch": "@@ -25,22 +25,22 @@\n \n     public static final Person ALICE = new PersonBuilder().withName(\"Alice Pauline\")\n             .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")\n-            .withPhone(\"94351253\")\n+            .withPhone(\"94351253\").withRemark(\"\")\n             .withTags(\"friends\").build();\n     public static final Person BENSON = new PersonBuilder().withName(\"Benson Meier\")\n-            .withAddress(\"311, Clementi Ave 2, #02-25\")\n+            .withAddress(\"311, Clementi Ave 2, #02-25\").withRemark(\"\")\n             .withEmail(\"johnd@example.com\").withPhone(\"98765432\")\n             .withTags(\"owesMoney\", \"friends\").build();\n     public static final Person CARL = new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")\n-            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();\n+            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRemark(\"\").build();\n     public static final Person DANIEL = new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")\n-            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();\n+            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").withRemark(\"\").build();\n     public static final Person ELLE = new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")\n-            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();\n+            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withRemark(\"\").build();\n     public static final Person FIONA = new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")\n-            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();\n+            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withRemark(\"\").build();\n     public static final Person GEORGE = new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")\n-            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();\n+            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRemark(\"\").build();\n \n     // Manually added\n     public static final Person HOON = new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
  }
]
