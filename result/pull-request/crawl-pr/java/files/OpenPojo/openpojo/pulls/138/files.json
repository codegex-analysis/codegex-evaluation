[
  {
    "sha": "95c8ca108e793e831a53b8934fe0162d6fa18878",
    "filename": "src/main/java/com/openpojo/validation/rule/impl/SetterMustExistRule.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/OpenPojo/openpojo/blob/0a14da11448d6c422810ca11b61d4f6d73ffdae0/src/main/java/com/openpojo/validation/rule/impl/SetterMustExistRule.java",
    "raw_url": "https://github.com/OpenPojo/openpojo/raw/0a14da11448d6c422810ca11b61d4f6d73ffdae0/src/main/java/com/openpojo/validation/rule/impl/SetterMustExistRule.java",
    "contents_url": "https://api.github.com/repos/OpenPojo/openpojo/contents/src/main/java/com/openpojo/validation/rule/impl/SetterMustExistRule.java?ref=0a14da11448d6c422810ca11b61d4f6d73ffdae0",
    "patch": "@@ -34,7 +34,7 @@\n \n   public void evaluate(final PojoClass pojoClass) {\n     for (PojoField fieldEntry : pojoClass.getPojoFields()) {\n-      if (!fieldEntry.isFinal() && !fieldEntry.hasSetter()) {\n+      if (!fieldEntry.isFinal() && !fieldEntry.hasSetter() && fieldEntry.isSynthetic()) {\n         Affirm.fail(String.format(\"[%s] is missing a setter\", fieldEntry));\n       }\n     }"
  },
  {
    "sha": "e3be9d47e7f036c8df8ce7b9864f84865f606906",
    "filename": "src/test/java/com/openpojo/validation/rule/impl/SetterMustExistRuleTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/OpenPojo/openpojo/blob/0a14da11448d6c422810ca11b61d4f6d73ffdae0/src/test/java/com/openpojo/validation/rule/impl/SetterMustExistRuleTest.java",
    "raw_url": "https://github.com/OpenPojo/openpojo/raw/0a14da11448d6c422810ca11b61d4f6d73ffdae0/src/test/java/com/openpojo/validation/rule/impl/SetterMustExistRuleTest.java",
    "contents_url": "https://api.github.com/repos/OpenPojo/openpojo/contents/src/test/java/com/openpojo/validation/rule/impl/SetterMustExistRuleTest.java?ref=0a14da11448d6c422810ca11b61d4f6d73ffdae0",
    "patch": "@@ -37,4 +37,13 @@ public void testEvaluate() {\n     CommonCode.shouldPassRuleValidation(rule, passClasses);\n     CommonCode.shouldFailRuleValidation(rule, failClasses);\n   }\n+\n+\n+  @Test\n+  public void shouldIgnoreSyntheticFields() {\n+    CommonCode.shouldPassRuleValidation(rule, AClassWithSyntheticField.class);\n+  }\n+\n+  private class AClassWithSyntheticField {\n+  }\n }"
  }
]
