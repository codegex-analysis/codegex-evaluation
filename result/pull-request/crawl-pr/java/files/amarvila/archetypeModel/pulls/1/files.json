[
  {
    "sha": "e131d9b4de6cc1e25438221d7fc3d99c08370259",
    "filename": "README.md",
    "status": "modified",
    "additions": 27,
    "deletions": 1,
    "changes": 28,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/README.md",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/README.md",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/README.md?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -1 +1,27 @@\n-# archetypeModel\n\\ No newline at end of file\n+# archetypeModel\n+\n+Prototipo roadmap (next steps):\n+\t- Montar un sistema/ canal para recojer feedback del uso del arquetipo y posibles cambios.\n+\t- Montar un grupo de revisión/actualización del arquetipo;\n+\t\t○ Cuantas personas?\n+\t\t○ Bajo supervisión de alguién?\n+\t\t○ Cada cuándo se reúnen?\n+\t- Revisar arquetipo actual:\n+\t\t○ (checkbox) Revisión versión librerías.\n+\t\t○ (checkbox) Revisión versión spring boot.\n+\t\t○ (notfound) Eliminar @enableWebMvc el application.java (bug de spring docs <- con él puede dar problemas de redireccionamiento) NOT DONE\n+\t\t○ Añadir kubernetes: configmap, secrets y kubernetes deployment\n+\t\t(\n+\t\thttps://gitlab.com/development-for-industry/training/java/pills/identity-server#deploymentappyaml\n+\t\t)\n+\t\t○ (checkbox) Openapi config -> name not everis, but name of the project\n+\t\t○ (checkbox) Cambios que no pueden esperar (modelmapper, health points, …?)\n+\t\t○ Revisar sistema de errores\n+\t\t○ (checkbox) Inyeccion por construcción\n+\t\t○ (checkbox) Añadir paginación front/back\n+\t\t○ Añadir perfil test\n+\t\t○ Añadir tests de componente para controlador\n+\t\t○ (checkbox) Añadir h2\n+\t- Montar nuevos arquetipos:\n+\t\t○ Arquitectura hexagonal\n+\t\t○ …"
  },
  {
    "sha": "e0848f2d55de3119a30b4baaad70ad30d499863b",
    "filename": "project-x/pom.xml",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/pom.xml",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/pom.xml",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/pom.xml?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -59,6 +59,11 @@\n \t\t\t<artifactId>spring-boot-starter-test</artifactId>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-configuration-processor</artifactId>\n+\t\t\t<optional>true</optional>\n+\t\t</dependency>\n \t\t<!-- Lombok -->\n \t\t<dependency>\n \t\t\t<groupId>org.projectlombok</groupId>\n@@ -117,6 +122,13 @@\n \t\t\t<artifactId>flyway-core</artifactId>\n \t\t\t<version>5.2.4</version>\n \t\t</dependency> -->\n+\t\t<!-- h2 Database Connection -->\n+\t\t<dependency>\n+\t\t\t<groupId>com.h2database</groupId>\n+\t\t\t<artifactId>h2</artifactId>\n+\t\t\t<version>1.4.200</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n \t\t<!-- MapStruct -->\n \t\t<dependency>\n \t\t\t<groupId>org.mapstruct</groupId>"
  },
  {
    "sha": "005844466a80376e2e039d11d6001ec017aaebeb",
    "filename": "project-x/src/main/java/com/everis/d4i/project_x/controller/rest/CustomerControllerRest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/CustomerControllerRest.java",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/CustomerControllerRest.java",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/CustomerControllerRest.java?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -1,5 +1,6 @@\n package com.everis.d4i.project_x.controller.rest;\n \n+import com.everis.d4i.project_x.controller.rest.model.D4iPageRest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PagedResourcesAssembler;\n import org.springframework.hateoas.PagedModel;\n@@ -11,8 +12,8 @@\n \n public interface CustomerControllerRest {\n \n-    SalesResponse<PagedModel<EntityModel<CustomerRest>>> getAllCustomers(int page, int size, Pageable pageable,\n-\t    PagedResourcesAssembler<CustomerRest> assembler) throws SalesException;\n+    SalesResponse<D4iPageRest <CustomerRest>> getAllCustomers(int page, int size, Pageable pageable,\n+                                                              PagedResourcesAssembler<CustomerRest> assembler) throws SalesException;\n \n     SalesResponse<CustomerRest> createCustomer(CustomerRest customer) throws SalesException;\n "
  },
  {
    "sha": "a6215b058bf140b6c7a4c6ecd551b9c0514fe999",
    "filename": "project-x/src/main/java/com/everis/d4i/project_x/controller/rest/impl/CustomerControllerRestImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/impl/CustomerControllerRestImpl.java",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/impl/CustomerControllerRestImpl.java",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/impl/CustomerControllerRestImpl.java?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -1,6 +1,7 @@\n \n package com.everis.d4i.project_x.controller.rest.impl;\n \n+import com.everis.d4i.project_x.controller.rest.model.D4iPageRest;\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.media.Content;\n@@ -10,8 +11,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PagedResourcesAssembler;\n-import org.springframework.hateoas.PagedModel;\n-import org.springframework.hateoas.EntityModel;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.web.bind.annotation.DeleteMapping;\n@@ -51,7 +50,7 @@\n             @ApiResponse(responseCode = \"401\", description = \"Unauthorized\", content = @Content),\n             @ApiResponse(responseCode = \"403\", description = \"Forbidden\", content = @Content)\n     })\n-    public SalesResponse<PagedModel<EntityModel<CustomerRest>>> getAllCustomers(\n+    public SalesResponse<D4iPageRest<CustomerRest>> getAllCustomers(\n       @RequestParam(defaultValue = CommonConstantsUtils.ZERO) final int page,\n \t    @RequestParam(defaultValue = CommonConstantsUtils.TWENTY) final int size, \n       @Parameter(hidden = true) final Pageable pageable,"
  },
  {
    "sha": "c8a128ad6bbbd58a1bf5228ba5e722d5a5338e2b",
    "filename": "project-x/src/main/java/com/everis/d4i/project_x/controller/rest/model/D4iPageRest.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/model/D4iPageRest.java",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/model/D4iPageRest.java",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/model/D4iPageRest.java?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -0,0 +1,19 @@\n+package com.everis.d4i.project_x.controller.rest.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.io.Serializable;\n+\n+@Data\n+@RequiredArgsConstructor\n+@AllArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class D4iPageRest<T> implements Serializable {\n+\n+    private T[] content;\n+    private D4iPaginationInfo page;\n+\n+}"
  },
  {
    "sha": "2183c2253904bc7f5930b8bfb0111ddecd5a9c4a",
    "filename": "project-x/src/main/java/com/everis/d4i/project_x/controller/rest/model/D4iPaginationInfo.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/model/D4iPaginationInfo.java",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/model/D4iPaginationInfo.java",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/src/main/java/com/everis/d4i/project_x/controller/rest/model/D4iPaginationInfo.java?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -0,0 +1,16 @@\n+package com.everis.d4i.project_x.controller.rest.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+\n+@Data\n+@RequiredArgsConstructor\n+@AllArgsConstructor\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class D4iPaginationInfo {\n+    private int pageNumber;\n+    private int pageSize;\n+    private int totalPages;\n+}"
  },
  {
    "sha": "9d85af85fda4174c61dddebbe3ffd64ae7b96168",
    "filename": "project-x/src/main/java/com/everis/d4i/project_x/service/CustomerService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/service/CustomerService.java",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/service/CustomerService.java",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/src/main/java/com/everis/d4i/project_x/service/CustomerService.java?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -1,5 +1,6 @@\n package com.everis.d4i.project_x.service;\n \n+import com.everis.d4i.project_x.controller.rest.model.D4iPageRest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PagedResourcesAssembler;\n import org.springframework.hateoas.PagedModel;\n@@ -10,7 +11,7 @@\n \n public interface CustomerService {\n \n-    PagedModel<EntityModel<CustomerRest>> getAllCustomers(Pageable pageable, PagedResourcesAssembler<CustomerRest> assembler)\n+    D4iPageRest<CustomerRest> getAllCustomers(Pageable pageable, PagedResourcesAssembler<CustomerRest> assembler)\n \t    throws SalesException;\n \n     CustomerRest createCustomer(CustomerRest Customer) throws SalesException;"
  },
  {
    "sha": "23ce1e876f897f095625172cd00a95acace94c34",
    "filename": "project-x/src/main/java/com/everis/d4i/project_x/service/impl/CustomerServiceImpl.java",
    "status": "modified",
    "additions": 8,
    "deletions": 5,
    "changes": 13,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/service/impl/CustomerServiceImpl.java",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/main/java/com/everis/d4i/project_x/service/impl/CustomerServiceImpl.java",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/src/main/java/com/everis/d4i/project_x/service/impl/CustomerServiceImpl.java?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -1,12 +1,12 @@\n package com.everis.d4i.project_x.service.impl;\n \n+import com.everis.d4i.project_x.controller.rest.model.D4iPageRest;\n+import com.everis.d4i.project_x.controller.rest.model.D4iPaginationInfo;\n import org.modelmapper.ModelMapper;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PagedResourcesAssembler;\n-import org.springframework.hateoas.PagedModel;\n-import org.springframework.hateoas.EntityModel;\n import org.springframework.stereotype.Service;\n \n import com.everis.d4i.project_x.controller.rest.model.CustomerRest;\n@@ -28,11 +28,14 @@\n     private ModelMapper modelMapper;\n \n     @Override\n-    public PagedModel<EntityModel<CustomerRest>> getAllCustomers(final Pageable pageable,\n-\t    final PagedResourcesAssembler<CustomerRest> assembler) throws SalesException {\n+    public D4iPageRest<CustomerRest> getAllCustomers(final Pageable pageable,\n+                                                     final PagedResourcesAssembler<CustomerRest> assembler) throws SalesException {\n \tPage<CustomerEntity> customerPage = customerRepository.findAll(pageable);\n \tPage<CustomerRest> customerRestList = customerPage.map(customer -> modelMapper.map(customer, CustomerRest.class));\n-\treturn assembler.toModel(customerRestList);\n+\treturn new D4iPageRest<>(customerRestList.getContent().toArray(CustomerRest[]::new),\n+                             new D4iPaginationInfo(customerRestList.getNumber(),\n+                                                   pageable.getPageSize(),\n+                                                   customerRestList.getTotalPages()));\n     }\n \n     @Override"
  },
  {
    "sha": "fe5f5be931b1df44c72e4a700333158ee6292773",
    "filename": "project-x/src/test/java/com/everis/d4i/project_x/controllers/impl/CustomerControllerRestImplComponentTest.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/test/java/com/everis/d4i/project_x/controllers/impl/CustomerControllerRestImplComponentTest.java",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/test/java/com/everis/d4i/project_x/controllers/impl/CustomerControllerRestImplComponentTest.java",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/src/test/java/com/everis/d4i/project_x/controllers/impl/CustomerControllerRestImplComponentTest.java?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -0,0 +1,46 @@\n+package com.everis.d4i.project_x.controllers.impl;\n+\n+import com.everis.d4i.project_x.controller.rest.impl.CustomerControllerRestImpl;\n+import com.everis.d4i.project_x.service.CustomerService;\n+import com.everis.d4i.project_x.util.constant.RestConstantsUtils;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.result.MockMvcResultHandlers;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@RunWith(SpringRunner.class)\n+@WebMvcTest(CustomerControllerRestImpl.class)\n+//@SpringBootTest\n+//@AutoConfigureMockMvc\n+@Ignore\n+public class CustomerControllerRestImplComponentTest {\n+\n+    @Autowired\n+    private MockMvc mockMvc;\n+\n+    @MockBean\n+    private CustomerService customerService;\n+\n+    @Test\n+    public void getAllCustomersReturnsA200Code() throws Exception {\n+        //when and then\n+        mockMvc.perform(\n+                get(RestConstantsUtils.APPLICATION_NAME\n+                            + RestConstantsUtils.API_VERSION_1\n+                            + RestConstantsUtils.RESOURCE_CUSTOMER\n+                )\n+                        .header(\"Origin\", \"*\"))\n+                .andDo(MockMvcResultHandlers.print())\n+                .andExpect(status().isOk());\n+    }\n+}"
  },
  {
    "sha": "1dea013d20dc766d7893d6644530f46ec1b287e2",
    "filename": "project-x/src/test/java/com/everis/d4i/project_x/controllers/impl/CustomerControllerRestImplTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/test/java/com/everis/d4i/project_x/controllers/impl/CustomerControllerRestImplTest.java",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/test/java/com/everis/d4i/project_x/controllers/impl/CustomerControllerRestImplTest.java",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/src/test/java/com/everis/d4i/project_x/controllers/impl/CustomerControllerRestImplTest.java?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -8,6 +8,8 @@\n import java.util.ArrayList;\n import java.util.Collection;\n \n+import com.everis.d4i.project_x.controller.rest.model.D4iPageRest;\n+import com.everis.d4i.project_x.controller.rest.model.D4iPaginationInfo;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -57,25 +59,24 @@ public void getAllCustomersTest() throws SalesException {\n \t\t// given\n \t\tint page = 0;\n \t\tint size = 2;\n+\t\tint pageNumber = 1;\n \t\tPageable pageable = PageRequest.of(page, size);\n \t\tHateoasPageableHandlerMethodArgumentResolver resolver = new HateoasPageableHandlerMethodArgumentResolver();\n \t\tPagedResourcesAssembler<CustomerRest> assembler = new PagedResourcesAssembler<>(resolver, null);\n \n \t\tCustomerRest customerRest2 = new CustomerRest();\n \t\tcustomerRest2.setId(2L);\n \n-\t\tEntityModel<CustomerRest> customerEntityModel1 = new EntityModel<>(CUSTOMER_REST);\n-\t\tEntityModel<CustomerRest> customerEntityModel2 = new EntityModel<>(customerRest2);\n+\t\tCollection<CustomerRest> customerEntitiyModelCollection = new ArrayList<>();\n+\t\tcustomerEntitiyModelCollection.add(CUSTOMER_REST);\n+\t\tcustomerEntitiyModelCollection.add(customerRest2);\n \n-\t\tCollection<EntityModel<CustomerRest>> customerEntitiyModelCollection = new ArrayList<>();\n-\t\tcustomerEntitiyModelCollection.add(customerEntityModel1);\n-\t\tcustomerEntitiyModelCollection.add(customerEntityModel2);\n-\n-\t\tPagedModel<EntityModel<CustomerRest>> customersPagedModel = new PagedModel<>(customerEntitiyModelCollection,null);\n+\t\tD4iPageRest<CustomerRest> customersPagedModel = new D4iPageRest<>(customerEntitiyModelCollection.toArray(CustomerRest[]::new),\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  new D4iPaginationInfo(page, size, 1));\n \t\tMockito.when(customerService.getAllCustomers(any(Pageable.class),any(PagedResourcesAssembler.class))).thenReturn(customersPagedModel);\n \n \t\t// when\n-\t\tSalesResponse<PagedModel<EntityModel<CustomerRest>>> response = customerControllerRestImpl.getAllCustomers(page,size,pageable,assembler);\n+\t\tSalesResponse<D4iPageRest<CustomerRest>> response = customerControllerRestImpl.getAllCustomers(page,size,pageable,assembler);\n \n \t\t// then\n \t\tassertNotNull(response);"
  },
  {
    "sha": "6840f30cbdf227b718566dccbdd80b3e3b6c70c1",
    "filename": "project-x/src/test/java/com/everis/d4i/project_x/services/impl/CustomerServiceImplTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/amarvila/archetypeModel/blob/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/test/java/com/everis/d4i/project_x/services/impl/CustomerServiceImplTest.java",
    "raw_url": "https://github.com/amarvila/archetypeModel/raw/6679bb624178301e83b8465afd28ec229fac714b/project-x/src/test/java/com/everis/d4i/project_x/services/impl/CustomerServiceImplTest.java",
    "contents_url": "https://api.github.com/repos/amarvila/archetypeModel/contents/project-x/src/test/java/com/everis/d4i/project_x/services/impl/CustomerServiceImplTest.java?ref=6679bb624178301e83b8465afd28ec229fac714b",
    "patch": "@@ -7,6 +7,7 @@\n import java.util.List;\n import java.util.Optional;\n \n+import com.everis.d4i.project_x.controller.rest.model.D4iPageRest;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -72,7 +73,7 @@ public void getAllCustomersTest() throws SalesException {\n \t\tPage<CustomerEntity> customerPage = new PageImpl<>(List.of(CUSTOMER_ENTITY), pageable, 0);\n \t\tMockito.when(customerRepository.findAll(any(Pageable.class))).thenReturn(customerPage);\n \n-\t\tPagedModel<EntityModel<CustomerRest>> pagedModel = customerService.getAllCustomers(pageable, assembler);\n+\t\tD4iPageRest<CustomerRest> pagedModel = customerService.getAllCustomers(pageable, assembler);\n \n \t\tassertNotNull(pagedModel);\n     }"
  }
]
