[
  {
    "sha": "549e00a2a96fa9d7c5dbc9859664a78d980158c2",
    "filename": "spring-14/.gitignore",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/.gitignore",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/.gitignore",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/.gitignore?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,33 @@\n+HELP.md\n+target/\n+!.mvn/wrapper/maven-wrapper.jar\n+!**/src/main/**/target/\n+!**/src/test/**/target/\n+\n+### STS ###\n+.apt_generated\n+.classpath\n+.factorypath\n+.project\n+.settings\n+.springBeans\n+.sts4-cache\n+\n+### IntelliJ IDEA ###\n+.idea\n+*.iws\n+*.iml\n+*.ipr\n+\n+### NetBeans ###\n+/nbproject/private/\n+/nbbuild/\n+/dist/\n+/nbdist/\n+/.nb-gradle/\n+build/\n+!**/src/main/**/build/\n+!**/src/test/**/build/\n+\n+### VS Code ###\n+.vscode/"
  },
  {
    "sha": "a16b5431b4c3cab50323a3f558003fd0abd87dad",
    "filename": "spring-14/mvnw",
    "status": "added",
    "additions": 310,
    "deletions": 0,
    "changes": 310,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/mvnw",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/mvnw",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/mvnw?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,310 @@\n+#!/bin/sh\n+# ----------------------------------------------------------------------------\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#    https://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+# ----------------------------------------------------------------------------\n+\n+# ----------------------------------------------------------------------------\n+# Maven Start Up Batch script\n+#\n+# Required ENV vars:\n+# ------------------\n+#   JAVA_HOME - location of a JDK home dir\n+#\n+# Optional ENV vars\n+# -----------------\n+#   M2_HOME - location of maven2's installed home dir\n+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n+#     e.g. to debug Maven itself, use\n+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n+# ----------------------------------------------------------------------------\n+\n+if [ -z \"$MAVEN_SKIP_RC\" ] ; then\n+\n+  if [ -f /etc/mavenrc ] ; then\n+    . /etc/mavenrc\n+  fi\n+\n+  if [ -f \"$HOME/.mavenrc\" ] ; then\n+    . \"$HOME/.mavenrc\"\n+  fi\n+\n+fi\n+\n+# OS specific support.  $var _must_ be set to either true or false.\n+cygwin=false;\n+darwin=false;\n+mingw=false\n+case \"`uname`\" in\n+  CYGWIN*) cygwin=true ;;\n+  MINGW*) mingw=true;;\n+  Darwin*) darwin=true\n+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n+    if [ -z \"$JAVA_HOME\" ]; then\n+      if [ -x \"/usr/libexec/java_home\" ]; then\n+        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n+      else\n+        export JAVA_HOME=\"/Library/Java/Home\"\n+      fi\n+    fi\n+    ;;\n+esac\n+\n+if [ -z \"$JAVA_HOME\" ] ; then\n+  if [ -r /etc/gentoo-release ] ; then\n+    JAVA_HOME=`java-config --jre-home`\n+  fi\n+fi\n+\n+if [ -z \"$M2_HOME\" ] ; then\n+  ## resolve links - $0 may be a link to maven's home\n+  PRG=\"$0\"\n+\n+  # need this for relative symlinks\n+  while [ -h \"$PRG\" ] ; do\n+    ls=`ls -ld \"$PRG\"`\n+    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n+    if expr \"$link\" : '/.*' > /dev/null; then\n+      PRG=\"$link\"\n+    else\n+      PRG=\"`dirname \"$PRG\"`/$link\"\n+    fi\n+  done\n+\n+  saveddir=`pwd`\n+\n+  M2_HOME=`dirname \"$PRG\"`/..\n+\n+  # make it fully qualified\n+  M2_HOME=`cd \"$M2_HOME\" && pwd`\n+\n+  cd \"$saveddir\"\n+  # echo Using m2 at $M2_HOME\n+fi\n+\n+# For Cygwin, ensure paths are in UNIX format before anything is touched\n+if $cygwin ; then\n+  [ -n \"$M2_HOME\" ] &&\n+    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n+  [ -n \"$JAVA_HOME\" ] &&\n+    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n+  [ -n \"$CLASSPATH\" ] &&\n+    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\n+fi\n+\n+# For Mingw, ensure paths are in UNIX format before anything is touched\n+if $mingw ; then\n+  [ -n \"$M2_HOME\" ] &&\n+    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n+  [ -n \"$JAVA_HOME\" ] &&\n+    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\n+fi\n+\n+if [ -z \"$JAVA_HOME\" ]; then\n+  javaExecutable=\"`which javac`\"\n+  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n+    # readlink(1) is not available as standard on Solaris 10.\n+    readLink=`which readlink`\n+    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n+      if $darwin ; then\n+        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n+        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n+      else\n+        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n+      fi\n+      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n+      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n+      JAVA_HOME=\"$javaHome\"\n+      export JAVA_HOME\n+    fi\n+  fi\n+fi\n+\n+if [ -z \"$JAVACMD\" ] ; then\n+  if [ -n \"$JAVA_HOME\"  ] ; then\n+    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n+      # IBM's JDK on AIX uses strange locations for the executables\n+      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n+    else\n+      JAVACMD=\"$JAVA_HOME/bin/java\"\n+    fi\n+  else\n+    JAVACMD=\"`which java`\"\n+  fi\n+fi\n+\n+if [ ! -x \"$JAVACMD\" ] ; then\n+  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n+  echo \"  We cannot execute $JAVACMD\" >&2\n+  exit 1\n+fi\n+\n+if [ -z \"$JAVA_HOME\" ] ; then\n+  echo \"Warning: JAVA_HOME environment variable is not set.\"\n+fi\n+\n+CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n+\n+# traverses directory structure from process work directory to filesystem root\n+# first directory with .mvn subdirectory is considered project base directory\n+find_maven_basedir() {\n+\n+  if [ -z \"$1\" ]\n+  then\n+    echo \"Path not specified to find_maven_basedir\"\n+    return 1\n+  fi\n+\n+  basedir=\"$1\"\n+  wdir=\"$1\"\n+  while [ \"$wdir\" != '/' ] ; do\n+    if [ -d \"$wdir\"/.mvn ] ; then\n+      basedir=$wdir\n+      break\n+    fi\n+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n+    if [ -d \"${wdir}\" ]; then\n+      wdir=`cd \"$wdir/..\"; pwd`\n+    fi\n+    # end of workaround\n+  done\n+  echo \"${basedir}\"\n+}\n+\n+# concatenates all lines of a file\n+concat_lines() {\n+  if [ -f \"$1\" ]; then\n+    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n+  fi\n+}\n+\n+BASE_DIR=`find_maven_basedir \"$(pwd)\"`\n+if [ -z \"$BASE_DIR\" ]; then\n+  exit 1;\n+fi\n+\n+##########################################################################################\n+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n+# This allows using the maven wrapper in projects that prohibit checking in binary data.\n+##########################################################################################\n+if [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n+    if [ \"$MVNW_VERBOSE\" = true ]; then\n+      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n+    fi\n+else\n+    if [ \"$MVNW_VERBOSE\" = true ]; then\n+      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n+    fi\n+    if [ -n \"$MVNW_REPOURL\" ]; then\n+      jarUrl=\"$MVNW_REPOURL/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n+    else\n+      jarUrl=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n+    fi\n+    while IFS=\"=\" read key value; do\n+      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n+      esac\n+    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n+    if [ \"$MVNW_VERBOSE\" = true ]; then\n+      echo \"Downloading from: $jarUrl\"\n+    fi\n+    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n+    if $cygwin; then\n+      wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`\n+    fi\n+\n+    if command -v wget > /dev/null; then\n+        if [ \"$MVNW_VERBOSE\" = true ]; then\n+          echo \"Found wget ... using wget\"\n+        fi\n+        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n+            wget \"$jarUrl\" -O \"$wrapperJarPath\"\n+        else\n+            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\"\n+        fi\n+    elif command -v curl > /dev/null; then\n+        if [ \"$MVNW_VERBOSE\" = true ]; then\n+          echo \"Found curl ... using curl\"\n+        fi\n+        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n+            curl -o \"$wrapperJarPath\" \"$jarUrl\" -f\n+        else\n+            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f\n+        fi\n+\n+    else\n+        if [ \"$MVNW_VERBOSE\" = true ]; then\n+          echo \"Falling back to using Java to download\"\n+        fi\n+        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n+        # For Cygwin, switch paths to Windows format before running javac\n+        if $cygwin; then\n+          javaClass=`cygpath --path --windows \"$javaClass\"`\n+        fi\n+        if [ -e \"$javaClass\" ]; then\n+            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n+                if [ \"$MVNW_VERBOSE\" = true ]; then\n+                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n+                fi\n+                # Compiling the Java class\n+                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n+            fi\n+            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n+                # Running the downloader\n+                if [ \"$MVNW_VERBOSE\" = true ]; then\n+                  echo \" - Running MavenWrapperDownloader.java ...\"\n+                fi\n+                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n+            fi\n+        fi\n+    fi\n+fi\n+##########################################################################################\n+# End of extension\n+##########################################################################################\n+\n+export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\n+if [ \"$MVNW_VERBOSE\" = true ]; then\n+  echo $MAVEN_PROJECTBASEDIR\n+fi\n+MAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n+\n+# For Cygwin, switch paths to Windows format before running java\n+if $cygwin; then\n+  [ -n \"$M2_HOME\" ] &&\n+    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n+  [ -n \"$JAVA_HOME\" ] &&\n+    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n+  [ -n \"$CLASSPATH\" ] &&\n+    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n+  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n+    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\n+fi\n+\n+# Provide a \"standardized\" way to retrieve the CLI args that will\n+# work with both Windows and non-Windows executions.\n+MAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"\n+export MAVEN_CMD_LINE_ARGS\n+\n+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n+\n+exec \"$JAVACMD\" \\\n+  $MAVEN_OPTS \\\n+  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n+  \"-Dmaven.home=${M2_HOME}\" \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\""
  },
  {
    "sha": "c8d43372c986d97911cdc21bd87e0cbe3d83bdda",
    "filename": "spring-14/mvnw.cmd",
    "status": "added",
    "additions": 182,
    "deletions": 0,
    "changes": 182,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/mvnw.cmd",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/mvnw.cmd",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/mvnw.cmd?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,182 @@\n+@REM ----------------------------------------------------------------------------\n+@REM Licensed to the Apache Software Foundation (ASF) under one\n+@REM or more contributor license agreements.  See the NOTICE file\n+@REM distributed with this work for additional information\n+@REM regarding copyright ownership.  The ASF licenses this file\n+@REM to you under the Apache License, Version 2.0 (the\n+@REM \"License\"); you may not use this file except in compliance\n+@REM with the License.  You may obtain a copy of the License at\n+@REM\n+@REM    https://www.apache.org/licenses/LICENSE-2.0\n+@REM\n+@REM Unless required by applicable law or agreed to in writing,\n+@REM software distributed under the License is distributed on an\n+@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+@REM KIND, either express or implied.  See the License for the\n+@REM specific language governing permissions and limitations\n+@REM under the License.\n+@REM ----------------------------------------------------------------------------\n+\n+@REM ----------------------------------------------------------------------------\n+@REM Maven Start Up Batch script\n+@REM\n+@REM Required ENV vars:\n+@REM JAVA_HOME - location of a JDK home dir\n+@REM\n+@REM Optional ENV vars\n+@REM M2_HOME - location of maven2's installed home dir\n+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\n+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\n+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\n+@REM     e.g. to debug Maven itself, use\n+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n+@REM ----------------------------------------------------------------------------\n+\n+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\n+@echo off\n+@REM set title of command window\n+title %0\n+@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\n+@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\n+\n+@REM set %HOME% to equivalent of $HOME\n+if \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\n+\n+@REM Execute a user defined script before this one\n+if not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\n+@REM check for pre script, once with legacy .bat ending and once with .cmd ending\n+if exist \"%HOME%\\mavenrc_pre.bat\" call \"%HOME%\\mavenrc_pre.bat\"\n+if exist \"%HOME%\\mavenrc_pre.cmd\" call \"%HOME%\\mavenrc_pre.cmd\"\n+:skipRcPre\n+\n+@setlocal\n+\n+set ERROR_CODE=0\n+\n+@REM To isolate internal variables from possible post scripts, we use another setlocal\n+@setlocal\n+\n+@REM ==== START VALIDATION ====\n+if not \"%JAVA_HOME%\" == \"\" goto OkJHome\n+\n+echo.\n+echo Error: JAVA_HOME not found in your environment. >&2\n+echo Please set the JAVA_HOME variable in your environment to match the >&2\n+echo location of your Java installation. >&2\n+echo.\n+goto error\n+\n+:OkJHome\n+if exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\n+\n+echo.\n+echo Error: JAVA_HOME is set to an invalid directory. >&2\n+echo JAVA_HOME = \"%JAVA_HOME%\" >&2\n+echo Please set the JAVA_HOME variable in your environment to match the >&2\n+echo location of your Java installation. >&2\n+echo.\n+goto error\n+\n+@REM ==== END VALIDATION ====\n+\n+:init\n+\n+@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\n+@REM Fallback to current working directory if not found.\n+\n+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\n+IF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\n+\n+set EXEC_DIR=%CD%\n+set WDIR=%EXEC_DIR%\n+:findBaseDir\n+IF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\n+cd ..\n+IF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\n+set WDIR=%CD%\n+goto findBaseDir\n+\n+:baseDirFound\n+set MAVEN_PROJECTBASEDIR=%WDIR%\n+cd \"%EXEC_DIR%\"\n+goto endDetectBaseDir\n+\n+:baseDirNotFound\n+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%\n+cd \"%EXEC_DIR%\"\n+\n+:endDetectBaseDir\n+\n+IF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\n+\n+@setlocal EnableExtensions EnableDelayedExpansion\n+for /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\n+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\n+\n+:endReadAdditionalConfig\n+\n+SET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\n+set WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\n+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n+\n+set DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n+\n+FOR /F \"tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\n+    IF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B\n+)\n+\n+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\n+if exist %WRAPPER_JAR% (\n+    if \"%MVNW_VERBOSE%\" == \"true\" (\n+        echo Found %WRAPPER_JAR%\n+    )\n+) else (\n+    if not \"%MVNW_REPOURL%\" == \"\" (\n+        SET DOWNLOAD_URL=\"%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"\n+    )\n+    if \"%MVNW_VERBOSE%\" == \"true\" (\n+        echo Couldn't find %WRAPPER_JAR%, downloading it ...\n+        echo Downloading from: %DOWNLOAD_URL%\n+    )\n+\n+    powershell -Command \"&{\"^\n+\t\t\"$webclient = new-object System.Net.WebClient;\"^\n+\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\n+\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\n+\t\t\"}\"^\n+\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"^\n+\t\t\"}\"\n+    if \"%MVNW_VERBOSE%\" == \"true\" (\n+        echo Finished downloading %WRAPPER_JAR%\n+    )\n+)\n+@REM End of extension\n+\n+@REM Provide a \"standardized\" way to retrieve the CLI args that will\n+@REM work with both Windows and non-Windows executions.\n+set MAVEN_CMD_LINE_ARGS=%*\n+\n+%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\n+if ERRORLEVEL 1 goto error\n+goto end\n+\n+:error\n+set ERROR_CODE=1\n+\n+:end\n+@endlocal & set ERROR_CODE=%ERROR_CODE%\n+\n+if not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPost\n+@REM check for post script, once with legacy .bat ending and once with .cmd ending\n+if exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"\n+if exist \"%HOME%\\mavenrc_post.cmd\" call \"%HOME%\\mavenrc_post.cmd\"\n+:skipRcPost\n+\n+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\n+if \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause\n+\n+if \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%\n+\n+exit /B %ERROR_CODE%"
  },
  {
    "sha": "60434b1ee1f0b1123a4f71b03c4199c85c1da494",
    "filename": "spring-14/pom.xml",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/pom.xml",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/pom.xml",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/pom.xml?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,91 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.4.3</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>ru.sokolovee</groupId>\n+\t<artifactId>spring-14</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>spring-14</name>\n+\t<description>Demo project for Spring Boot</description>\n+\t<properties>\n+\t\t<java.version>11</java.version>\n+\t\t<spring.shell.version>2.0.1.RELEASE</spring.shell.version>\n+\t\t<mongock.version>4.1.17</mongock.version>\n+\t\t<mongodb.spring-data.v3.version>3.1.3</mongodb.spring-data.v3.version>\n+\t\t<mongodb.driver-sync.version>4.1.1</mongodb.driver-sync.version>\n+\t</properties>\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-batch</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-mongodb</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.shell</groupId>\n+\t\t\t<artifactId>spring-shell-starter</artifactId>\n+\t\t\t<version>${spring.shell.version}</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>1.18.16</version>\n+\t\t\t<scope>provided</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.batch</groupId>\n+\t\t\t<artifactId>spring-batch-test</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.github.cloudyrock.mongock</groupId>\n+\t\t\t<artifactId>mongock-spring-v5</artifactId>\n+\t\t\t<version>${mongock.version}</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.github.cloudyrock.mongock</groupId>\n+\t\t\t<artifactId>mongodb-springdata-v3-driver</artifactId>\n+\t\t\t<version>${mongock.version}</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.h2database</groupId>\n+\t\t\t<artifactId>h2</artifactId>\n+\t\t\t<version>1.4.200</version>\n+\t\t</dependency>\n+\t</dependencies>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n+\t\t\t</plugin>\n+\t\t</plugins>\n+\t</build>\n+\n+</project>"
  },
  {
    "sha": "72258c4574714263682e65096bca7264d879a2b1",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/Spring14Application.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/Spring14Application.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/Spring14Application.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/Spring14Application.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,17 @@\n+package ru.sokolovee.spring14;\n+\n+import com.github.cloudyrock.spring.v5.EnableMongock;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n+import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;\n+\n+@EnableMongock\n+@SpringBootApplication\n+public class Spring14Application {\n+\n+\tpublic static void main(String[] args) {\n+\t\tSpringApplication.run(Spring14Application.class, args);\n+\t}\n+\n+}"
  },
  {
    "sha": "8c1a7c22b0c5da2866df1a6066c9709a4783ab1e",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/configuration/BatchConfiguration.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/configuration/BatchConfiguration.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/configuration/BatchConfiguration.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/configuration/BatchConfiguration.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,19 @@\n+package ru.sokolovee.spring14.configuration;\n+\n+import org.springframework.batch.core.configuration.JobRegistry;\n+import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\n+import org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@EnableBatchProcessing\n+@Configuration\n+public class BatchConfiguration {\n+    @Bean\n+    public JobRegistryBeanPostProcessor postProcessor(JobRegistry jobRegistry) {\n+        var processor = new JobRegistryBeanPostProcessor();\n+        processor.setJobRegistry(jobRegistry);\n+        return processor;\n+    }\n+\n+}"
  },
  {
    "sha": "a4f10c11ed725a0354f50efaeb7b41c9c01feec9",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/configuration/JobConfiguration.java",
    "status": "added",
    "additions": 175,
    "deletions": 0,
    "changes": 175,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/configuration/JobConfiguration.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/configuration/JobConfiguration.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/configuration/JobConfiguration.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,175 @@\n+package ru.sokolovee.spring14.configuration;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.batch.core.Job;\n+import org.springframework.batch.core.Step;\n+import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\n+import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\n+import org.springframework.batch.core.configuration.annotation.StepScope;\n+import org.springframework.batch.item.ItemProcessor;\n+import org.springframework.batch.item.data.MongoItemReader;\n+import org.springframework.batch.item.data.builder.MongoItemReaderBuilder;\n+import org.springframework.batch.item.database.JpaItemWriter;\n+import org.springframework.batch.item.database.builder.JpaItemWriterBuilder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.mongodb.core.MongoTemplate;\n+import ru.sokolovee.spring14.documents.Author;\n+import ru.sokolovee.spring14.documents.Book;\n+import ru.sokolovee.spring14.documents.Comment;\n+import ru.sokolovee.spring14.documents.Genre;\n+import ru.sokolovee.spring14.service.ConvertingService;\n+\n+import javax.persistence.EntityManager;\n+import java.util.HashMap;\n+\n+\n+@Configuration\n+@RequiredArgsConstructor\n+public class JobConfiguration {\n+    private static final int CHUNK_SIZE = 5;\n+    private final Logger logger = LoggerFactory.getLogger(\"Batch\");\n+\n+    private final MongoTemplate mongoTemplate;\n+    private final EntityManager entityManager;\n+    private final ConvertingService convertingService;\n+\n+    @Autowired\n+    private JobBuilderFactory jobBuilderFactory;\n+\n+    @Autowired\n+    private StepBuilderFactory stepBuilderFactory;\n+\n+    @StepScope\n+    @Bean\n+    public MongoItemReader<Book> readerBook() {\n+        return new MongoItemReaderBuilder<Book>()\n+                .name(\"bookItemReader\")\n+                .template(mongoTemplate)\n+                .jsonQuery(\"{}\")\n+                .targetType(Book.class)\n+                .sorts(new HashMap<>())\n+                .build();\n+    }\n+\n+    @StepScope\n+    @Bean\n+    public MongoItemReader<Author> readerAuthor() {\n+        return new MongoItemReaderBuilder<Author>()\n+                .name(\"authorItemReader\")\n+                .template(mongoTemplate)\n+                .jsonQuery(\"{}\")\n+                .targetType(Author.class)\n+                .sorts(new HashMap<>())\n+                .build();\n+    }\n+\n+    @StepScope\n+    @Bean\n+    public MongoItemReader<Genre> readerGenre() {\n+        return new MongoItemReaderBuilder<Genre>()\n+                .name(\"genreItemReader\")\n+                .template(mongoTemplate)\n+                .jsonQuery(\"{}\")\n+                .targetType(Genre.class)\n+                .sorts(new HashMap<>())\n+                .build();\n+    }\n+\n+    @StepScope\n+    @Bean\n+    public MongoItemReader<Comment> readerComment() {\n+        return new MongoItemReaderBuilder<Comment>()\n+                .name(\"commentItemReader\")\n+                .template(mongoTemplate)\n+                .jsonQuery(\"{}\")\n+                .targetType(Comment.class)\n+                .sorts(new HashMap<>())\n+                .build();\n+    }\n+\n+    @StepScope\n+    @Bean\n+    public ItemProcessor processorBook(ConvertingService convertingService) {\n+        return (ItemProcessor<Book, ru.sokolovee.spring14.entities.Book>) convertingService::convertBook;\n+    }\n+\n+    @StepScope\n+    @Bean\n+    public ItemProcessor processorAuthor(ConvertingService convertingService) {\n+        return (ItemProcessor<Author, ru.sokolovee.spring14.entities.Author>) convertingService::convertAuthor;\n+    }\n+\n+    @StepScope\n+    @Bean\n+    public ItemProcessor processorGenre(ConvertingService convertingService) {\n+        return (ItemProcessor<Genre, ru.sokolovee.spring14.entities.Genre>) convertingService::convertGenre;\n+    }\n+\n+    @StepScope\n+    @Bean\n+    public ItemProcessor processorComment(ConvertingService convertingService) {\n+        return (ItemProcessor<Comment, ru.sokolovee.spring14.entities.Comment>) convertingService::convertComment;\n+    }\n+\n+    @StepScope\n+    @Bean\n+    public JpaItemWriter writer() {\n+        return new JpaItemWriterBuilder<>()\n+                .entityManagerFactory(entityManager.getEntityManagerFactory())\n+                .build();\n+    }\n+\n+    @Bean\n+    public Job importData() {\n+        return jobBuilderFactory.get(\"importData\")\n+                .start(stepAuthors())\n+                .next(stepGenres())\n+                .next(stepBooks())\n+                .next(stepComments())\n+                .build();\n+    }\n+\n+    @Bean\n+    public Step stepBooks() {\n+        return stepBuilderFactory.get(\"stepBooks\")\n+                .chunk(CHUNK_SIZE)\n+                .reader(readerBook())\n+                .processor(processorBook(convertingService))\n+                .writer(writer())\n+                .build();\n+    }\n+\n+    @Bean\n+    public Step stepAuthors() {\n+        return stepBuilderFactory.get(\"stepAuthors\")\n+                .chunk(CHUNK_SIZE)\n+                .reader(readerAuthor())\n+                .processor(processorAuthor(convertingService))\n+                .writer(writer())\n+                .build();\n+    }\n+\n+    @Bean\n+    public Step stepGenres() {\n+        return stepBuilderFactory.get(\"stepGenres\")\n+                .chunk(CHUNK_SIZE)\n+                .reader(readerGenre())\n+                .processor(processorGenre(convertingService))\n+                .writer(writer())\n+                .build();\n+    }\n+\n+    @Bean\n+    public Step stepComments() {\n+        return stepBuilderFactory.get(\"stepComments\")\n+                .chunk(CHUNK_SIZE)\n+                .reader(readerComment())\n+                .processor(processorComment(convertingService))\n+                .writer(writer())\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "144b4bf553cd08f544759943f48d9bb9c94145cc",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/documents/Author.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/documents/Author.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/documents/Author.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/documents/Author.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,21 @@\n+package ru.sokolovee.spring14.documents;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.mongodb.core.mapping.Document;\n+\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Data\n+@Document(collection = \"author\")\n+public class Author {\n+    @Id\n+    private long id;\n+    private String name;\n+\n+    public Author(long id) {\n+        this.id = id;\n+    }\n+}"
  },
  {
    "sha": "e1f87079954f253ba94ec16fa715de87e0632c7f",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/documents/Book.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/documents/Book.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/documents/Book.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/documents/Book.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,26 @@\n+package ru.sokolovee.spring14.documents;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.mongodb.core.mapping.DBRef;\n+import org.springframework.data.mongodb.core.mapping.Document;\n+\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Data\n+@Document(collection = \"book\")\n+public class Book {\n+    @Id\n+    private long id;\n+    private String name;\n+    @DBRef\n+    private Author author;\n+    @DBRef\n+    private Genre genre;\n+\n+    public Book(long id) {\n+        this.id = id;\n+    }\n+}"
  },
  {
    "sha": "6364952b3d41f0a556e7272ae92744f9dfc8d644",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/documents/Comment.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/documents/Comment.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/documents/Comment.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/documents/Comment.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,20 @@\n+package ru.sokolovee.spring14.documents;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.mongodb.core.mapping.DBRef;\n+import org.springframework.data.mongodb.core.mapping.Document;\n+\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Data\n+@Document(collection = \"comment\")\n+public class Comment {\n+    @Id\n+    private Long id;\n+    @DBRef\n+    private Book book;\n+    private String comment;\n+}"
  },
  {
    "sha": "462dd2ee7e8f2a1b6a81d2faed01cc6633e367f0",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/documents/Genre.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/documents/Genre.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/documents/Genre.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/documents/Genre.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,22 @@\n+package ru.sokolovee.spring14.documents;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.mongodb.core.mapping.Document;\n+\n+\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Data\n+@Document(collection = \"genre\")\n+public class Genre {\n+    @Id\n+    private long id;\n+    private String name;\n+\n+    public Genre(long id) {\n+        this.id = id;\n+    }\n+}"
  },
  {
    "sha": "09ba312c1a72bd2aba5b61330f9360437388c853",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/entities/Author.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/entities/Author.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/entities/Author.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/entities/Author.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.sokolovee.spring14.entities;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.hibernate.annotations.Fetch;\n+import org.hibernate.annotations.FetchMode;\n+\n+import javax.persistence.*;\n+import java.util.List;\n+\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Data\n+@Entity\n+@Table(name = \"Author\")\n+public class Author {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"GENERATOR_AUTHOR_SEQ\")\n+    @SequenceGenerator(name = \"GENERATOR_AUTHOR_SEQ\", sequenceName = \"AUTHOR_SEQ\", initialValue = 1, allocationSize = 1)\n+    private long id;\n+    private String name;\n+\n+    public Author(long id) {\n+        this.id = id;\n+    }\n+}"
  },
  {
    "sha": "97cd4f86216091f1141cd7eb146098d36b811ecf",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/entities/Book.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/entities/Book.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/entities/Book.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/entities/Book.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,54 @@\n+package ru.sokolovee.spring14.entities;\n+\n+import lombok.*;\n+import org.hibernate.annotations.Fetch;\n+import org.hibernate.annotations.FetchMode;\n+\n+import javax.persistence.*;\n+import java.util.List;\n+\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Data\n+@Entity\n+@Table(name = \"Book\")\n+@NamedEntityGraph(name = \"book-entity-graph\", attributeNodes = {@NamedAttributeNode(\"author\"), @NamedAttributeNode(\"genre\"), @NamedAttributeNode(\"comments\")})\n+\n+public class Book {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"GENERATOR_BOOK_SEQ\")\n+    @SequenceGenerator(name = \"GENERATOR_BOOK_SEQ\", sequenceName = \"BOOK_SEQ\", initialValue = 1, allocationSize = 1)\n+    private Long id;\n+\n+    private String name;\n+\n+    @Fetch(FetchMode.JOIN)\n+    @ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"author_id\", referencedColumnName = \"id\")\n+    private Author author;\n+\n+    @Fetch(FetchMode.JOIN)\n+    @ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"genre_id\", referencedColumnName = \"id\")\n+    private Genre genre;\n+\n+    @Fetch(FetchMode.SUBSELECT)\n+    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"book_id\")\n+    private List<Comment> comments;\n+\n+    @Override\n+    public String toString() {\n+        return \"Book{\" +\n+                \"id=\" + id +\n+                \", name='\" + name + '\\'' +\n+                \", author=\" + author +\n+                \", genre=\" + genre +\n+                \", comments=\" + comments +\n+                '}';\n+    }\n+\n+    public Book(Long id) {\n+        this.id = id;\n+    }\n+}"
  },
  {
    "sha": "4e48a49dc1e68cecb79515abb5170d75d4206409",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/entities/Comment.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/entities/Comment.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/entities/Comment.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/entities/Comment.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,34 @@\n+package ru.sokolovee.spring14.entities;\n+\n+import lombok.*;\n+import org.hibernate.annotations.Fetch;\n+import org.hibernate.annotations.FetchMode;\n+\n+import javax.persistence.*;\n+\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Data\n+@Entity\n+@Table(name = \"Comment\")\n+public class Comment {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"GENERATOR_COMMENT_SEQ\")\n+    @SequenceGenerator(name = \"GENERATOR_COMMENT_SEQ\", sequenceName = \"COMMENT_SEQ\", initialValue = 1, allocationSize = 1)\n+    private Long id;\n+    @Fetch(FetchMode.JOIN)\n+    @ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"book_id\", referencedColumnName = \"id\")\n+    private Book book;\n+    private String comment;\n+\n+    @Override\n+    public String toString() {\n+        return \"Comment{\" +\n+                \"id=\" + id +\n+                \", book=\" + book.getName() +\n+                \", comment='\" + comment + '\\'' +\n+                '}';\n+    }\n+}\n+"
  },
  {
    "sha": "34051375eca71734b249659b816de0e98735b290",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/entities/Genre.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/entities/Genre.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/entities/Genre.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/entities/Genre.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,25 @@\n+package ru.sokolovee.spring14.entities;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import javax.persistence.*;\n+\n+\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Data\n+@Entity\n+@Table(name = \"Genre\")\n+public class Genre {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"GENERATOR_GENRE_SEQ\")\n+    @SequenceGenerator(name = \"GENERATOR_GENRE_SEQ\", sequenceName = \"GENRE_SEQ\", initialValue = 1, allocationSize = 1)\n+    private long id;\n+    private String name;\n+\n+    public Genre(long id) {\n+        this.id = id;\n+    }\n+}"
  },
  {
    "sha": "eb81826a67cd31be1a93ca3b5498db39f00007a2",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/mongock/changelog/DatabaseChangelog.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/mongock/changelog/DatabaseChangelog.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/mongock/changelog/DatabaseChangelog.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/mongock/changelog/DatabaseChangelog.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,55 @@\n+package ru.sokolovee.spring14.mongock.changelog;\n+\n+import com.github.cloudyrock.mongock.ChangeLog;\n+import com.github.cloudyrock.mongock.ChangeSet;\n+import com.mongodb.client.MongoDatabase;\n+import ru.sokolovee.spring14.documents.Author;\n+import ru.sokolovee.spring14.documents.Book;\n+import ru.sokolovee.spring14.documents.Comment;\n+import ru.sokolovee.spring14.documents.Genre;\n+import ru.sokolovee.spring14.repositories.mongo.AuthorRepository;\n+import ru.sokolovee.spring14.repositories.mongo.BookRepository;\n+import ru.sokolovee.spring14.repositories.mongo.CommentRepository;\n+import ru.sokolovee.spring14.repositories.mongo.GenreRepository;\n+\n+@ChangeLog\n+public class DatabaseChangelog {\n+\n+    @ChangeSet(order = \"001\", id = \"dropDb\", author = \"sokolovee\", runAlways = true)\n+    public void dropDb(MongoDatabase db) {\n+        db.drop();\n+    }\n+\n+    @ChangeSet(order = \"002\", id = \"insertAuthors\", author = \"sokolovee\")\n+    public void insertAuthors(AuthorRepository authorRepository) {\n+        authorRepository.save(new Author(1l, \"Пушкин А.С.\"));\n+        authorRepository.save(new Author(2l, \"Стивен Кинг\"));\n+        authorRepository.save(new Author(3l, \"Джорж Мартин\"));\n+        authorRepository.save(new Author(4l, \"Стивен Хокинг\"));\n+    }\n+\n+    @ChangeSet(order = \"003\", id = \"insertGenres\", author = \"sokolovee\")\n+    public void insertGenres(GenreRepository genreRepository) {\n+        genreRepository.save(new Genre(1l, \"Фантастика\"));\n+        genreRepository.save(new Genre(2l, \"Научная литература\"));\n+        genreRepository.save(new Genre(3l, \"Ужасы\"));\n+        genreRepository.save(new Genre(4l, \"Классика\"));\n+    }\n+\n+    @ChangeSet(order = \"004\", id = \"insertBooks\", author = \"sokolovee\")\n+    public void insertBooks(BookRepository bookRepository) {\n+        bookRepository.save(new Book(1l, \"Руслан и Людмила\", new Author(1l), new Genre(4l)));\n+        bookRepository.save(new Book(2l, \"Игра престолов\", new Author(3l), new Genre(1l)));\n+        bookRepository.save(new Book(3l, \"Краткая история времени\", new Author(4l), new Genre(2l)));\n+        bookRepository.save(new Book(4l, \"Оно\", new Author(2l), new Genre(3)));\n+    }\n+\n+    @ChangeSet(order = \"005\", id = \"insertComments\", author = \"sokolovee\")\n+    public void insertComments(CommentRepository commentRepository) {\n+        commentRepository.save(new Comment(1l, new Book(1l), \"Книга Пушкина А.С. \\\"Руслан и Людмила\\\", жанр Классика\"));\n+        commentRepository.save(new Comment(2l, new Book(3l), \"Стивен Хокинга \\\"Краткая история времени\\\", жанр Научная литература\"));\n+        commentRepository.save(new Comment(3l, new Book(4l), \"Книга Стивен Кинга \\\"Оно\\\", жанр Ужасы\"));\n+        commentRepository.save(new Comment(4l, new Book(2l), \"Джорж Мартина \\\"Игра престолов\\\", жанр Фантастика\"));\n+    }\n+\n+}"
  },
  {
    "sha": "d98ddb40bc055fccbcf2a2d0f3f6f11766ec902a",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/AuthorJpaRepository.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/AuthorJpaRepository.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/AuthorJpaRepository.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/AuthorJpaRepository.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.sokolovee.spring14.repositories.jpa;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.sokolovee.spring14.entities.Author;\n+\n+@Repository\n+public interface AuthorJpaRepository extends JpaRepository<Author, Long> {\n+}"
  },
  {
    "sha": "da9477aa850156b8bfc1bf7b35e7f0a2ecbfeca4",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/BookJpaRepository.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/BookJpaRepository.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/BookJpaRepository.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/BookJpaRepository.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.sokolovee.spring14.repositories.jpa;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.sokolovee.spring14.entities.Book;\n+\n+@Repository\n+public interface BookJpaRepository extends JpaRepository<Book, Long> {\n+}"
  },
  {
    "sha": "afb171a2be37518b13f25b4211e7504eae5e0e7a",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/CommentJpaRepository.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/CommentJpaRepository.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/CommentJpaRepository.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/CommentJpaRepository.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.sokolovee.spring14.repositories.jpa;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.sokolovee.spring14.entities.Comment;\n+\n+@Repository\n+public interface CommentJpaRepository extends JpaRepository<Comment, Long> {\n+}"
  },
  {
    "sha": "a9a3dbace40d8b452b3caef502ad6282600c5916",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/GenreJpaRepository.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/GenreJpaRepository.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/GenreJpaRepository.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/repositories/jpa/GenreJpaRepository.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.sokolovee.spring14.repositories.jpa;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.sokolovee.spring14.entities.Genre;\n+\n+@Repository\n+public interface GenreJpaRepository extends JpaRepository<Genre, Long> {\n+}"
  },
  {
    "sha": "e24ef52d99185679469eecf46e963a6701d38d14",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/AuthorRepository.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/AuthorRepository.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/AuthorRepository.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/AuthorRepository.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,10 @@\n+package ru.sokolovee.spring14.repositories.mongo;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.sokolovee.spring14.documents.Author;\n+\n+@Repository\n+public interface AuthorRepository extends CrudRepository<Author, Long> {\n+\n+}"
  },
  {
    "sha": "d8a6762b381b224b75930fe0077eac827b3c669e",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/BookRepository.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/BookRepository.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/BookRepository.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/BookRepository.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.sokolovee.spring14.repositories.mongo;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.sokolovee.spring14.documents.Book;\n+\n+@Repository\n+public interface BookRepository extends CrudRepository<Book, Long> {\n+}"
  },
  {
    "sha": "ece82eeae1f0e6d9f3429f8f5862440b1085a07f",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/CommentRepository.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/CommentRepository.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/CommentRepository.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/CommentRepository.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.sokolovee.spring14.repositories.mongo;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.sokolovee.spring14.documents.Comment;\n+\n+@Repository\n+public interface CommentRepository extends CrudRepository<Comment, Long> {\n+}"
  },
  {
    "sha": "304b1c40dab1b5bd04c7804c8bbad5b4be74f0d5",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/GenreRepository.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/GenreRepository.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/GenreRepository.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/repositories/mongo/GenreRepository.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,9 @@\n+package ru.sokolovee.spring14.repositories.mongo;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.stereotype.Repository;\n+import ru.sokolovee.spring14.documents.Genre;\n+\n+@Repository\n+public interface GenreRepository extends CrudRepository<Genre, Long> {\n+}"
  },
  {
    "sha": "e89a71eae46550e677be6f78186680d245e8471f",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/service/ConvertingService.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/service/ConvertingService.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/service/ConvertingService.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/service/ConvertingService.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,27 @@\n+package ru.sokolovee.spring14.service;\n+\n+import org.springframework.stereotype.Service;\n+import ru.sokolovee.spring14.entities.Author;\n+import ru.sokolovee.spring14.entities.Book;\n+import ru.sokolovee.spring14.entities.Comment;\n+import ru.sokolovee.spring14.entities.Genre;\n+\n+@Service\n+public class ConvertingService {\n+\n+    public Book convertBook(ru.sokolovee.spring14.documents.Book mongoBook){\n+        return new Book(null, mongoBook.getName(),new Author(mongoBook.getAuthor().getId()), new Genre(mongoBook.getGenre().getId()),null);\n+    }\n+\n+    public Author convertAuthor(ru.sokolovee.spring14.documents.Author mongoAuthor){\n+        return new Author(mongoAuthor.getId(), mongoAuthor.getName());\n+    }\n+\n+    public Genre convertGenre(ru.sokolovee.spring14.documents.Genre mongoGenre){\n+        return new Genre(mongoGenre.getId(), mongoGenre.getName());\n+    }\n+\n+    public Comment convertComment(ru.sokolovee.spring14.documents.Comment mongoComment){\n+        return new Comment(mongoComment.getId(), new Book(mongoComment.getBook().getId()), mongoComment.getComment());\n+    }\n+}"
  },
  {
    "sha": "92aeb228925a642ce6fdad70ea577144a16afd99",
    "filename": "spring-14/src/main/java/ru/sokolovee/spring14/shell/BatchComands.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/shell/BatchComands.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/java/ru/sokolovee/spring14/shell/BatchComands.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/java/ru/sokolovee/spring14/shell/BatchComands.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,24 @@\n+package ru.sokolovee.spring14.shell;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.batch.core.Job;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobParametersBuilder;\n+import org.springframework.batch.core.launch.JobLauncher;\n+import org.springframework.shell.standard.ShellComponent;\n+import org.springframework.shell.standard.ShellMethod;\n+\n+@RequiredArgsConstructor\n+@ShellComponent\n+public class BatchComands {\n+    private final Job job;\n+    private final JobLauncher jobLauncher;\n+\n+    @ShellMethod(value = \"startMigrationData\", key = \"start\")\n+    public void startMigrationData() throws Exception {\n+        JobExecution execution = jobLauncher.run(job, new JobParametersBuilder()\n+                .toJobParameters());\n+        System.out.println(execution);\n+    }\n+\n+}"
  },
  {
    "sha": "9498c0d5fb7e1b0ceda9080c06214ab36ea0c58a",
    "filename": "spring-14/src/main/resources/application.yml",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/resources/application.yml",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/main/resources/application.yml",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/main/resources/application.yml?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,24 @@\n+spring:\n+  batch:\n+    job:\n+      enabled: true\n+  shell:\n+    interactive:\n+      enabled: true\n+  data:\n+    mongodb:\n+      database: spring-14\n+  datasource:\n+    url: jdbc:h2:mem:testdb\n+    driverClassName: org.h2.Driver\n+    username: sa\n+    password:\n+  h2:\n+    console:\n+      enabled: true\n+      path: /h2-console\n+\n+mongock:\n+  runner-type: \"InitializingBean\"\n+  change-logs-scan-package:\n+    - ru.sokolovee.spring14.mongock.changelog"
  },
  {
    "sha": "94e038de48dcb22076dcac0bd67b93840028f5ed",
    "filename": "spring-14/src/test/java/ru/sokolovee/spring14/Spring14ApplicationTests.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/blob/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/test/java/ru/sokolovee/spring14/Spring14ApplicationTests.java",
    "raw_url": "https://github.com/esokolov87/2020-11-otus-spring-SokolovEE/raw/f2d85d655470cb378f8a70763aedec6c2ac52164/spring-14/src/test/java/ru/sokolovee/spring14/Spring14ApplicationTests.java",
    "contents_url": "https://api.github.com/repos/esokolov87/2020-11-otus-spring-SokolovEE/contents/spring-14/src/test/java/ru/sokolovee/spring14/Spring14ApplicationTests.java?ref=f2d85d655470cb378f8a70763aedec6c2ac52164",
    "patch": "@@ -0,0 +1,13 @@\n+package ru.sokolovee.spring14;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest\n+class Spring14ApplicationTests {\n+\n+\t@Test\n+\tvoid contextLoads() {\n+\t}\n+\n+}"
  }
]
