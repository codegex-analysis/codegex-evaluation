[
  {
    "sha": "5085bf7cebeff6442f6ae850802ddcc52cb34bc1",
    "filename": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/IBM/FHIR/blob/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/dao/ReindexResourceDAO.java?ref=6081b91846f2a201c96f414c0415e9541201a3ff",
    "patch": "@@ -294,7 +294,9 @@ public void updateParameters(String tablePrefix, List<ExtractedParameterValue> p\n \n         if (parameters != null) {\n             JDBCIdentityCache identityCache = new JDBCIdentityCacheImpl(getCache(), this, parameterDao, getResourceReferenceDAO());\n-            try (ParameterVisitorBatchDAO pvd = new ParameterVisitorBatchDAO(connection, null, tablePrefix, false, logicalResourceId, 100,\n+            // Check if this is multitenant\n+            boolean mtId = this.getFlavor().isMultitenant();\n+            try (ParameterVisitorBatchDAO pvd = new ParameterVisitorBatchDAO(connection, \"FHIR_ADMIN\", tablePrefix, mtId, logicalResourceId, 100,\n                 identityCache, getResourceReferenceDAO(), getTransactionData())) {\n                 for (ExtractedParameterValue p: parameters) {\n                     p.accept(pvd);\n@@ -316,10 +318,14 @@ public void updateParameters(String tablePrefix, List<ExtractedParameterValue> p\n      */\n     protected void deleteFromParameterTable(Connection conn, String tableName, long logicalResourceId) throws SQLException {\n         final String DML = \"DELETE FROM \" + tableName + \" WHERE logical_resource_id = ?\";\n+\n         try (PreparedStatement stmt = conn.prepareStatement(DML)) {\n             // bind parameters\n             stmt.setLong(1, logicalResourceId);\n-            stmt.executeUpdate();\n+            int deleted = stmt.executeUpdate();\n+            if (logger.isLoggable(Level.FINEST)) {\n+                logger.finest(\"Deleted from [\" + tableName + \"] deleted [\" + deleted + \"] for logicalResourceId [\" + logicalResourceId + \"]\");\n+            }\n         } catch (SQLException x) {\n             logger.log(Level.SEVERE, DML, x);\n             throw translator.translate(x);"
  },
  {
    "sha": "73ea06d7951836a67fd5197ff231cd549aebcb22",
    "filename": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/operation/ReindexOperationTest.java",
    "status": "added",
    "additions": 175,
    "deletions": 0,
    "changes": 175,
    "blob_url": "https://github.com/IBM/FHIR/blob/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server-test/src/test/java/com/ibm/fhir/server/test/operation/ReindexOperationTest.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server-test/src/test/java/com/ibm/fhir/server/test/operation/ReindexOperationTest.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server-test/src/test/java/com/ibm/fhir/server/test/operation/ReindexOperationTest.java?ref=6081b91846f2a201c96f414c0415e9541201a3ff",
    "patch": "@@ -0,0 +1,175 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.test.operation;\n+\n+import static com.ibm.fhir.model.type.Integer.of;\n+import static com.ibm.fhir.model.type.String.string;\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.UUID;\n+import java.util.logging.Logger;\n+\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.SSLContext;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.TrustStrategy;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.annotations.Test;\n+\n+import com.ibm.fhir.core.FHIRMediaType;\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.generator.FHIRGenerator;\n+import com.ibm.fhir.model.resource.Parameters;\n+import com.ibm.fhir.model.resource.Parameters.Parameter;\n+import com.ibm.fhir.model.test.TestUtil;\n+import com.ibm.fhir.server.test.FHIRServerTestBase;\n+import com.ibm.fhir.server.test.bulkdata.ExportOperationTest;\n+\n+/**\n+ * This class tests the $reindex operation and the custom authorization for admin only.\n+ *\n+ */\n+public class ReindexOperationTest extends FHIRServerTestBase {\n+    private static final String CLASSNAME = ExportOperationTest.class.getName();\n+    private static final Logger log = Logger.getLogger(CLASSNAME);\n+\n+    private static final int TIMEOUT = 10000;\n+\n+    private static final HttpRequestRetryHandler rh = new HttpRequestRetryHandler(){\n+        @Override\n+        public boolean retryRequest(IOException exception, int executionCount,HttpContext context){\n+            return executionCount<2;\n+        }\n+    };\n+\n+    private static final RequestConfig config = RequestConfig.custom()\n+            .setConnectTimeout(TIMEOUT)\n+            .setConnectionRequestTimeout(TIMEOUT)\n+            .setSocketTimeout(TIMEOUT)\n+            .build();\n+\n+\n+    /**\n+     * generates a static SSL Connection socket factory.\n+     * @return\n+     */\n+    public static SSLConnectionSocketFactory generateSSF() {\n+        try {\n+            org.apache.http.ssl.SSLContextBuilder sslContextBuilder = org.apache.http.ssl.SSLContextBuilder.create();\n+\n+            HostnameVerifier verifier = new org.apache.http.conn.ssl.NoopHostnameVerifier();\n+            TrustStrategy strategy = new org.apache.http.conn.ssl.TrustAllStrategy();\n+            sslContextBuilder.loadTrustMaterial(strategy);\n+\n+            SSLContext sslContext = sslContextBuilder.build();\n+\n+            return new SSLConnectionSocketFactory(sslContext, verifier);\n+        } catch (NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {\n+            log.warning(\"Default Algorithm for Http Client not found \" + e.getMessage());\n+        }\n+        return SSLConnectionSocketFactory.getSocketFactory();\n+    }\n+\n+    @Test\n+    public void testForbidden() {\n+        WebTarget target = getWebTarget();\n+        target = target.path(\"/$reindex\");\n+        Response r = target.request(FHIRMediaType.APPLICATION_FHIR_JSON)\n+                     .header(\"X-FHIR-TENANT-ID\", \"default\")\n+                     .header(\"X-FHIR-DSID\", \"default\")\n+                     .get(Response.class);\n+        assertEquals(r.getStatus(), Status.FORBIDDEN.getStatusCode());\n+    }\n+\n+    @Test\n+    public void testAllowed() throws Exception {\n+        Properties testProperties = TestUtil.readTestProperties(\"test.properties\");\n+        String url = testProperties.getProperty(\"fhirclient.rest.base.url\") + \"/$reindex\";\n+        String username = testProperties.getProperty(\"fhirclient.basicauth.admin.username\");\n+        String password = testProperties.getProperty(\"fhirclient.basicauth.admin.password\");\n+\n+        HttpHost target = new HttpHost(\"localhost\", 9443, \"https\");\n+        CredentialsProvider provider = new BasicCredentialsProvider();\n+        provider.setCredentials( AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n+\n+        AuthCache authCache = new BasicAuthCache();\n+        authCache.put(target, new BasicScheme());\n+\n+        HttpClientContext localContext = HttpClientContext.create();\n+        localContext.setAuthCache(authCache);\n+\n+        try (CloseableHttpClient cli = HttpClients.custom()\n+                .setSSLSocketFactory(generateSSF())\n+                .setRetryHandler(rh)\n+                .setDefaultRequestConfig(config)\n+                .setDefaultCredentialsProvider(provider)\n+                .build()){\n+            HttpPost post = new HttpPost(url);\n+            post.setHeader(\"Content-Type\", \"application/fhir+json\");\n+\n+            List<Parameter> parameters = new ArrayList<>();\n+            parameters.add(\n+                Parameter.builder()\n+                    .name(string(\"resourceCount\"))\n+                    .value(of(5))\n+                    .build());\n+\n+            Parameters.Builder builder = Parameters.builder();\n+            builder.id(UUID.randomUUID().toString());\n+            builder.parameter(parameters);\n+            Parameters ps = builder.build();\n+\n+            try (StringWriter writer = new StringWriter();) {\n+                FHIRGenerator.generator(Format.JSON, true).generate(ps, writer);\n+                post.setEntity(new StringEntity(writer.toString()));\n+\n+            }\n+            CloseableHttpResponse postResponse = cli.execute(target, post, localContext);\n+\n+            try {\n+                HttpEntity entity = postResponse.getEntity();\n+                assertEquals(postResponse.getStatusLine().getStatusCode(),\n+                    Status.OK.getStatusCode());\n+\n+                EntityUtils.consume(entity);\n+            } finally {\n+                post.releaseConnection();\n+                postResponse.close();\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7bf547124cc777526835212bbdd698741fd58b2a",
    "filename": "fhir-server-test/src/test/java/testng.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/IBM/FHIR/blob/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server-test/src/test/java/testng.xml",
    "raw_url": "https://github.com/IBM/FHIR/raw/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server-test/src/test/java/testng.xml",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server-test/src/test/java/testng.xml?ref=6081b91846f2a201c96f414c0415e9541201a3ff",
    "patch": "@@ -64,4 +64,9 @@\n             <package name=\"com.ibm.fhir.server.test.terminology\" />\n         </packages>\n     </test>\n+    <test name=\"OperationSpecificTests\">\n+        <packages>\n+            <package name=\"com.ibm.fhir.server.test.operation\" />\n+        </packages>\n+    </test>\n </suite>"
  },
  {
    "sha": "2fd84d027278764badcb4eadc859ddcaeea272f0",
    "filename": "fhir-server-test/src/test/resources/test.properties",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/IBM/FHIR/blob/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server-test/src/test/resources/test.properties",
    "raw_url": "https://github.com/IBM/FHIR/raw/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server-test/src/test/resources/test.properties",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server-test/src/test/resources/test.properties?ref=6081b91846f2a201c96f414c0415e9541201a3ff",
    "patch": "@@ -8,6 +8,9 @@ fhirclient.basicauth.enabled = false\n fhirclient.basicauth.username = fhiruser\n fhirclient.basicauth.password = change-password\n \n+fhirclient.basicauth.admin.username = fhiradmin\n+fhirclient.basicauth.admin.password = change-password\n+\n fhirclient.clientauth.enabled = true\n fhirclient.keystore.location = fhirClientKeyStore.p12\n fhirclient.keystore.password = change-password"
  },
  {
    "sha": "6f486af18db7d8e054c453569f64a680a524c157",
    "filename": "fhir-server/liberty-config/server.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/IBM/FHIR/blob/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server/liberty-config/server.xml",
    "raw_url": "https://github.com/IBM/FHIR/raw/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server/liberty-config/server.xml",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/liberty-config/server.xml?ref=6081b91846f2a201c96f414c0415e9541201a3ff",
    "patch": "@@ -67,6 +67,9 @@\n             <security-role id=\"users\" name=\"FHIRUsers\">\n                 <group id=\"usersGroup\" name=\"FHIRUsers\"/>\n             </security-role>\n+            <security-role id=\"admin\" name=\"FHIROperationAdmin\">\n+                <group id=\"operationAdminGroup\" name=\"FHIROperationAdmin\"/>\n+            </security-role>\n         </application-bnd>\n     </webApplication>\n \n@@ -123,5 +126,8 @@\n         <group name=\"clientAdministrator\">\n             <member name=\"fhiruser\"/>\n         </group>\n+        <group name=\"FHIROperationAdmin\">\n+            <member name=\"fhiradmin\"/>\n+        </group>\n     </basicRegistry>\n </server>"
  },
  {
    "sha": "ca2d76f34bce3cae2341d6b57ab06e0614ec8710",
    "filename": "fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/AbstractOperation.java",
    "status": "modified",
    "additions": 46,
    "deletions": 5,
    "changes": 51,
    "blob_url": "https://github.com/IBM/FHIR/blob/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/AbstractOperation.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/AbstractOperation.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/AbstractOperation.java?ref=6081b91846f2a201c96f414c0415e9541201a3ff",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n@@ -8,6 +8,11 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n+\n+import javax.ws.rs.core.SecurityContext;\n+\n+import org.eclipse.microprofile.jwt.JsonWebToken;\n \n import com.ibm.fhir.exception.FHIROperationException;\n import com.ibm.fhir.model.resource.OperationDefinition;\n@@ -82,7 +87,7 @@ protected abstract Parameters doInvoke(FHIROperationContext operationContext,\n     }\n \n     protected List<OperationDefinition.Parameter> getParameterDefinitions(OperationParameterUse use) {\n-        List<OperationDefinition.Parameter> parameterDefinitions = new ArrayList<OperationDefinition.Parameter>();\n+        List<OperationDefinition.Parameter> parameterDefinitions = new ArrayList<>();\n         OperationDefinition definition = getDefinition();\n         for (OperationDefinition.Parameter parameter : definition.getParameter()) {\n             if (use.getValue().equals(parameter.getUse().getValue())) {\n@@ -93,7 +98,7 @@ protected abstract Parameters doInvoke(FHIROperationContext operationContext,\n     }\n \n     protected List<Parameters.Parameter> getParameters(Parameters parameters, String name) {\n-        List<Parameters.Parameter> result = new ArrayList<Parameters.Parameter>();\n+        List<Parameters.Parameter> result = new ArrayList<>();\n         if (parameters == null) {\n             return result;\n         }\n@@ -107,7 +112,7 @@ protected abstract Parameters doInvoke(FHIROperationContext operationContext,\n     }\n \n     protected List<String> getResourceTypeNames() {\n-        List<String> resourceTypeNames = new ArrayList<String>();\n+        List<String> resourceTypeNames = new ArrayList<>();\n         OperationDefinition definition = getDefinition();\n         for (com.ibm.fhir.model.type.code.ResourceType type : definition.getResource()) {\n             resourceTypeNames.add(type.getValue());\n@@ -279,4 +284,40 @@ protected FHIROperationException buildExceptionWithIssue(String msg, IssueType i\n         OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n         return new FHIROperationException(msg, cause).withIssue(ooi);\n     }\n-}\n+\n+    /**\n+     * verifies the authorization to an administrative operation.\n+     *\n+     * @param operation\n+     * @param operationContext\n+     * @throws FHIROperationException\n+     */\n+    public void authorize(String operation, FHIROperationContext operationContext) throws FHIROperationException {\n+        Object securityContext = operationContext.getProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT);\n+        Object jwt = operationContext.getProperty(FHIROperationContext.PROPNAME_JWT);\n+\n+        boolean authorize = false;\n+\n+        if (jwt != null && jwt instanceof JsonWebToken) {\n+            JsonWebToken jwtObj = (JsonWebToken) jwt;\n+            Set<String> groups = jwtObj.getGroups();\n+            if (groups != null) {\n+                for (String group : groups) {\n+                    if (\"FHIROperationAdmin\".equals(group)) {\n+                        authorize = true;\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!authorize && securityContext != null && securityContext instanceof SecurityContext) {\n+            SecurityContext ctx = (SecurityContext) securityContext;\n+            authorize = ctx.isUserInRole(\"FHIROperationAdmin\");\n+        }\n+\n+        if (!authorize) {\n+            throw buildExceptionWithIssue(\"Access to operation [$\" + operation + \"] is forbidden\", IssueType.FORBIDDEN);\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d8007a27c794518dd72023c938177d1483f84618",
    "filename": "fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/FHIROperationContext.java",
    "status": "modified",
    "additions": 28,
    "deletions": 23,
    "changes": 51,
    "blob_url": "https://github.com/IBM/FHIR/blob/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/FHIROperationContext.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/FHIROperationContext.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/FHIROperationContext.java?ref=6081b91846f2a201c96f414c0415e9541201a3ff",
    "patch": "@@ -27,27 +27,27 @@\n      * This property is of type String and represents the value of the Location header.\n      */\n     public static final String PROPNAME_LOCATION_URI = \"LOCATION_URI\";\n-    \n+\n     /**\n      * This property is of type FHIRPersistence and is the handle to the persistence layer implementation\n      * being used by the FHIR Server while processing the current request.\n      * It is recommended that custom operation implementors use the RESOURCE_HELPER property instead of\n      * this property unless you have been advised otherwise.\n      */\n     public static final String PROPNAME_PERSISTENCE_IMPL = \"PERSISTENCE_IMPL\";\n-    \n+\n     /**\n      * This property is of type javax.ws.rs.core.UriInfo and contains Application and Request\n      * URI information associated with the REST API request for which the interceptor is being invoked.\n      */\n     public static final String PROPNAME_URI_INFO = \"URI_INFO\";\n-    \n+\n     /**\n      * This property is of type javax.ws.rs.core.HttpHeaders and contains the set of HTTP headers\n      * associated with the REST API request.\n      */\n     public static final String PROPNAME_HTTP_HEADERS = \"HTTP_HEADERS\";\n-    \n+\n     /**\n      * This property is of type {@link java.util.Map<String,String>} and contains the\n      * set of additional request properties associated with the REST API request.\n@@ -59,74 +59,79 @@\n      * associated with the REST API request for which the interceptor is being invoked.\n      */\n     public static final String PROPNAME_SECURITY_CONTEXT = \"SECURITY_CONTEXT\";\n-    \n+\n     /**\n-     *This property is of type HttpMethod \n+     * This property is to inject the JWT into the Operation Context.\n+     */\n+    public static final String PROPNAME_JWT = \"JWT\";\n+\n+    /**\n+     *This property is of type HttpMethod\n      */\n     public static final String PROPNAME_METHOD_TYPE = \"METHOD_TYPE\";\n-    \n+\n     /**\n-     * The property is of Response.Status. \n+     * The property is of Response.Status.\n      */\n     public static final String PROPNAME_STATUS_TYPE = \"STATUS\";\n-    \n+\n     /**\n      * The property is of the Response\n      */\n     public static final String PROPNAME_RESPONSE = \"RESPONSE\";\n \n     private Type type = null;\n     private Map<String, Object> properties = null;\n-    \n+\n     private FHIROperationContext(Type type) {\n         if (type == null) {\n             throw new IllegalArgumentException(\"Context type cannot be null\");\n         }\n         this.type = type;\n-        properties = new HashMap<String, Object>();\n+        properties = new HashMap<>();\n     }\n-    \n+\n     public Type getType() {\n         return type;\n     }\n-    \n+\n     public void setProperty(String name, Object value) {\n         properties.put(name, value);\n     }\n-    \n+\n     public Object getProperty(String name) {\n         return properties.get(name);\n     }\n-    \n+\n     /**\n      * Returns the HttpHeaders instance associated with the request that triggered the operation.\n      * Note that this HttpHeaders instance is only valid within the scope of a single request.\n      */\n     public HttpHeaders getHttpHeaders() {\n         return (HttpHeaders) getProperty(PROPNAME_HTTP_HEADERS);\n     }\n-    \n+\n     /**\n-     * Returns the Map containing additional request properties associated with the \n+     * Returns the Map containing additional request properties associated with the\n      * FHIR REST API request that triggered the interceptor invocation.\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Map<String, String> getRequestProperties() {\n         return (Map<String, String>) getProperty(PROPNAME_REQUEST_PROPERTIES);\n     }\n-    \n+\n     public static FHIROperationContext createSystemOperationContext() {\n         return new FHIROperationContext(Type.SYSTEM);\n     }\n-    \n+\n     public static FHIROperationContext createResourceTypeOperationContext() {\n         return new FHIROperationContext(Type.RESOURCE_TYPE);\n     }\n-    \n+\n     public static FHIROperationContext createInstanceOperationContext() {\n         return new FHIROperationContext(Type.INSTANCE);\n     }\n-    \n+\n     /**\n      * Retrieves the specified header from the combined list of request headers\n      * and additional request properties associated with the request.\n@@ -144,15 +149,15 @@ public String getHeaderString(String headerName) {\n         }\n         return value;\n     }\n-    \n+\n     @Override\n     public String toString() {\n         StringBuilder sb = new StringBuilder();\n         sb.append(getClass().getSimpleName()).append(\" [\");\n         sb.append(\"type=\" + type.name());\n         sb.append(\", properties={\").append((properties != null ? properties.toString() : \"<null>\")).append(\"}\");\n         sb.append(\"]\");\n-        \n+\n         return sb.toString();\n     }\n }"
  },
  {
    "sha": "4f1a2c9c9239ec5acd13fd9581015e3ea364c5dd",
    "filename": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Operation.java",
    "status": "modified",
    "additions": 28,
    "deletions": 6,
    "changes": 34,
    "blob_url": "https://github.com/IBM/FHIR/blob/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server/src/main/java/com/ibm/fhir/server/resources/Operation.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/6081b91846f2a201c96f414c0415e9541201a3ff/fhir-server/src/main/java/com/ibm/fhir/server/resources/Operation.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/main/java/com/ibm/fhir/server/resources/Operation.java?ref=6081b91846f2a201c96f414c0415e9541201a3ff",
    "patch": "@@ -30,6 +30,7 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.Status;\n+import javax.ws.rs.core.SecurityContext;\n \n import org.eclipse.microprofile.jwt.JsonWebToken;\n \n@@ -47,7 +48,7 @@\n         FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n @Produces({ FHIRMediaType.APPLICATION_FHIR_JSON, MediaType.APPLICATION_JSON,\n         FHIRMediaType.APPLICATION_FHIR_XML, MediaType.APPLICATION_XML })\n-@RolesAllowed(\"FHIRUsers\")\n+@RolesAllowed({\"FHIRUsers\", \"FHIROperationAdmin\"})\n @RequestScoped\n public class Operation extends FHIRResource {\n     private static final Logger log = java.util.logging.Logger.getLogger(Operation.class.getName());\n@@ -62,6 +63,9 @@ public Operation() throws Exception {\n         super();\n     }\n \n+    @Context\n+    protected SecurityContext securityContext;\n+\n     @Context\n     protected HttpHeaders httpHeaders;\n \n@@ -80,7 +84,9 @@ public Response invoke(@PathParam(\"operationName\") String operationName) {\n                     FHIROperationContext.createSystemOperationContext();\n             operationContext.setProperty(FHIROperationContext.PROPNAME_URI_INFO, uriInfo);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_HTTP_HEADERS, httpHeaders);\n-            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.GET );\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.GET);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT, securityContext);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_JWT, jwt);\n \n             FHIRRestHelper helper = new FHIRRestHelper(getPersistenceImpl());\n             Resource result = helper.doInvoke(operationContext, null, null, null, operationName,\n@@ -122,6 +128,8 @@ public Response invoke(@PathParam(\"operationName\") String operationName, Resourc\n             operationContext.setProperty(FHIROperationContext.PROPNAME_URI_INFO, uriInfo);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_HTTP_HEADERS, httpHeaders);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.POST);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT, securityContext);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_JWT, jwt);\n \n             FHIRRestHelper helper = new FHIRRestHelper(getPersistenceImpl());\n             Resource result = helper.doInvoke(operationContext, null, null, null, operationName,\n@@ -164,6 +172,8 @@ public Response invokeDelete(@PathParam(\"operationName\") String operationName) {\n             operationContext.setProperty(FHIROperationContext.PROPNAME_URI_INFO, uriInfo);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_HTTP_HEADERS, httpHeaders);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.DELETE);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT, securityContext);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_JWT, jwt);\n \n             FHIRRestHelper helper = new FHIRRestHelper(getPersistenceImpl());\n             Resource result =\n@@ -206,7 +216,9 @@ public Response invoke(@PathParam(\"resourceTypeName\") String resourceTypeName,\n                     FHIROperationContext.createResourceTypeOperationContext();\n             operationContext.setProperty(FHIROperationContext.PROPNAME_URI_INFO, uriInfo);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_HTTP_HEADERS, httpHeaders);\n-            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.GET );\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.GET);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT, securityContext);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_JWT, jwt);\n \n             FHIRRestHelper helper = new FHIRRestHelper(getPersistenceImpl());\n             Resource result = helper.doInvoke(operationContext, resourceTypeName, null, null, operationName,\n@@ -248,7 +260,9 @@ public Response invoke(@PathParam(\"resourceTypeName\") String resourceTypeName,\n                     FHIROperationContext.createResourceTypeOperationContext();\n             operationContext.setProperty(FHIROperationContext.PROPNAME_URI_INFO, uriInfo);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_HTTP_HEADERS, httpHeaders);\n-            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.POST );\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.POST);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT, securityContext);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_JWT, jwt);\n \n             FHIRRestHelper helper = new FHIRRestHelper(getPersistenceImpl());\n             Resource result = helper.doInvoke(operationContext, resourceTypeName, null, null, operationName,\n@@ -304,7 +318,9 @@ public Response invoke(@PathParam(\"resourceTypeName\") String resourceTypeName,\n                     FHIROperationContext.createInstanceOperationContext();\n             operationContext.setProperty(FHIROperationContext.PROPNAME_URI_INFO, uriInfo);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_HTTP_HEADERS, httpHeaders);\n-            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.GET );\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.GET);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT, securityContext);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_JWT, jwt);\n \n             FHIRRestHelper helper = new FHIRRestHelper(getPersistenceImpl());\n             Resource result = helper.doInvoke(operationContext, resourceTypeName, logicalId, null, operationName,\n@@ -348,6 +364,8 @@ public Response invoke(@PathParam(\"resourceTypeName\") String resourceTypeName,\n             operationContext.setProperty(FHIROperationContext.PROPNAME_URI_INFO, uriInfo);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_HTTP_HEADERS, httpHeaders);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.POST);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT, securityContext);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_JWT, jwt);\n \n             FHIRRestHelper helper = new FHIRRestHelper(getPersistenceImpl());\n             Resource result = helper.doInvoke(operationContext, resourceTypeName, logicalId, null, operationName,\n@@ -392,6 +410,8 @@ public Response invoke(@PathParam(\"resourceTypeName\") String resourceTypeName,\n             operationContext.setProperty(FHIROperationContext.PROPNAME_URI_INFO, uriInfo);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_HTTP_HEADERS, httpHeaders);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.GET);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT, securityContext);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_JWT, jwt);\n \n             FHIRRestHelper helper = new FHIRRestHelper(getPersistenceImpl());\n             Resource result = helper.doInvoke(operationContext, resourceTypeName, logicalId, versionId, operationName,\n@@ -435,7 +455,9 @@ public Response invoke(@PathParam(\"resourceTypeName\") String resourceTypeName,\n                     FHIROperationContext.createInstanceOperationContext();\n             operationContext.setProperty(FHIROperationContext.PROPNAME_URI_INFO, uriInfo);\n             operationContext.setProperty(FHIROperationContext.PROPNAME_HTTP_HEADERS, httpHeaders);\n-            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.POST );\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_METHOD_TYPE, HttpMethod.POST);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_SECURITY_CONTEXT, securityContext);\n+            operationContext.setProperty(FHIROperationContext.PROPNAME_JWT, jwt);\n \n             FHIRRestHelper helper = new FHIRRestHelper(getPersistenceImpl());\n             Resource result = helper.doInvoke(operationContext, resourceTypeName, logicalId, versionId, operationName,"
  },
  {
    "sha": "b979d004c29e0fc96129b45996d86fa2c9b224ad",
    "filename": "operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/IBM/FHIR/blob/6081b91846f2a201c96f414c0415e9541201a3ff/operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/6081b91846f2a201c96f414c0415e9541201a3ff/operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/operation/fhir-operation-reindex/src/main/java/com/ibm/fhir/operation/reindex/ReindexOperation.java?ref=6081b91846f2a201c96f414c0415e9541201a3ff",
    "patch": "@@ -67,6 +67,7 @@ protected OperationDefinition buildOperationDefinition() {\n     protected Parameters doInvoke(FHIROperationContext operationContext, Class<? extends Resource> resourceType,\n             String logicalId, String versionId, Parameters parameters, FHIRResourceHelpers resourceHelper)\n             throws FHIROperationException {\n+        authorize(\"reindex\", operationContext);\n \n         // Allow only POST because we're changing the state of the database\n         String method = (String) operationContext.getProperty(FHIROperationContext.PROPNAME_METHOD_TYPE);"
  }
]
