[
  {
    "sha": "1a043286932273008883ffb2481cbb23543f9c33",
    "filename": "fhir-openapi/src/main/webapp/META-INF/openapi.json",
    "status": "modified",
    "additions": 25656,
    "deletions": 25592,
    "changes": 51248,
    "blob_url": "https://github.com/IBM/FHIR/blob/cdb3322e64da51392699a7aeb9ebfe8720e9460a/fhir-openapi/src/main/webapp/META-INF/openapi.json",
    "raw_url": "https://github.com/IBM/FHIR/raw/cdb3322e64da51392699a7aeb9ebfe8720e9460a/fhir-openapi/src/main/webapp/META-INF/openapi.json",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-openapi/src/main/webapp/META-INF/openapi.json?ref=cdb3322e64da51392699a7aeb9ebfe8720e9460a"
  },
  {
    "sha": "871e4b2aab6a92a74c678dadee943117a19d7722",
    "filename": "fhir-swagger-generator/src/main/java/com/ibm/fhir/openapi/generator/FHIROpenApiGenerator.java",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/IBM/FHIR/blob/cdb3322e64da51392699a7aeb9ebfe8720e9460a/fhir-swagger-generator/src/main/java/com/ibm/fhir/openapi/generator/FHIROpenApiGenerator.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/cdb3322e64da51392699a7aeb9ebfe8720e9460a/fhir-swagger-generator/src/main/java/com/ibm/fhir/openapi/generator/FHIROpenApiGenerator.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-swagger-generator/src/main/java/com/ibm/fhir/openapi/generator/FHIROpenApiGenerator.java?ref=cdb3322e64da51392699a7aeb9ebfe8720e9460a",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2018, 2020\n+ * (C) Copyright IBM Corp. 2018, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n@@ -1173,21 +1173,23 @@ private static void generateProperties(StructureDefinition structureDefinition,\n             Set<Class<?>> choiceElementTypes = ModelSupport.getChoiceElementTypes(modelClass, elementName);\n             ElementDefinition elementDefinition = getElementDefinition(structureDefinition, modelClass, elementName + \"[x]\");\n             String description = elementDefinition.getDefinition().getValue();\n+            Integer min = elementDefinition.getMin() != null ? elementDefinition.getMin().getValue() : null;\n             for (Class<?> choiceType : choiceElementTypes) {\n                 if (isApplicableForClass(choiceType, modelClass)) {\n                     String choiceElementName = ModelSupport.getChoiceElementName(elementName, choiceType);\n-                    generateProperty(structureDefinition, modelClass, field, properties, choiceElementName, choiceType, many, description);\n+                    generateProperty(structureDefinition, modelClass, field, properties, choiceElementName, choiceType, many, description, min);\n                 }\n             }\n         } else {\n             ElementDefinition elementDefinition = getElementDefinition(structureDefinition, modelClass, elementName);\n             String description = elementDefinition.getDefinition().getValue();\n-            generateProperty(structureDefinition, modelClass, field, properties, elementName, (Class<?>)fieldType, many, description);\n+            Integer min = elementDefinition.getMin() != null ? elementDefinition.getMin().getValue() : null;\n+            generateProperty(structureDefinition, modelClass, field, properties, elementName, (Class<?>)fieldType, many, description, min);\n         }\n     }\n \n     private static void generateProperty(StructureDefinition structureDefinition, Class<?> modelClass, Field field,\n-            JsonObjectBuilder properties, String elementName, Class<?> fieldClass, boolean many, String description)\n+            JsonObjectBuilder properties, String elementName, Class<?> fieldClass, boolean many, String description, Integer min)\n             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n \n         JsonObjectBuilder property = factory.createObjectBuilder();\n@@ -1247,7 +1249,7 @@ private static void generateProperty(StructureDefinition structureDefinition, Cl\n             property.add(\"format\", \"int32\");\n         } else if (com.ibm.fhir.model.type.Base64Binary.class.equals(fieldClass)) {\n             property.add(\"type\", \"string\");\n-            property.add(\"pattern\",\"(\\\\s*([0-9a-zA-Z\\\\+\\\\=]){4}\\\\s*)+\");\n+            property.add(\"pattern\",\"(\\\\s*([0-9a-zA-Z\\\\+/=]){4}\\\\s*)+\");\n         } else if (String.class.equals(fieldClass)) {\n             property.add(\"type\", \"string\");\n             if (\"id\".equals(elementName)) {\n@@ -1289,6 +1291,9 @@ private static void generateProperty(StructureDefinition structureDefinition, Cl\n             JsonObjectBuilder wrapper = factory.createObjectBuilder();\n             wrapper.add(\"type\", \"array\");\n             wrapper.add(\"items\", property);\n+            if (min != null && min > 0) {\n+                wrapper.add(\"minItems\", min.intValue());\n+            }\n             if (example != null) {\n                 wrapper.add(\"example\", example);\n             }"
  },
  {
    "sha": "204f4a2bac8ff58c58e4e7a2c021826b743151e2",
    "filename": "fhir-swagger-generator/src/main/java/com/ibm/fhir/swagger/generator/FHIRSwaggerGenerator.java",
    "status": "modified",
    "additions": 10,
    "deletions": 6,
    "changes": 16,
    "blob_url": "https://github.com/IBM/FHIR/blob/cdb3322e64da51392699a7aeb9ebfe8720e9460a/fhir-swagger-generator/src/main/java/com/ibm/fhir/swagger/generator/FHIRSwaggerGenerator.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/cdb3322e64da51392699a7aeb9ebfe8720e9460a/fhir-swagger-generator/src/main/java/com/ibm/fhir/swagger/generator/FHIRSwaggerGenerator.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-swagger-generator/src/main/java/com/ibm/fhir/swagger/generator/FHIRSwaggerGenerator.java?ref=cdb3322e64da51392699a7aeb9ebfe8720e9460a",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2016, 2020\n+ * (C) Copyright IBM Corp. 2016, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n@@ -905,21 +905,23 @@ private static void generateProperties(StructureDefinition structureDefinition,\n             Set<Class<?>> choiceElementTypes = ModelSupport.getChoiceElementTypes(modelClass, elementName);\n             ElementDefinition elementDefinition = getElementDefinition(structureDefinition, modelClass, elementName + \"[x]\");\n             String description = elementDefinition.getDefinition().getValue();\n+            Integer min = elementDefinition.getMin() != null ? elementDefinition.getMin().getValue() : null;\n             for (Class<?> choiceType : choiceElementTypes) {\n                 if (FHIROpenApiGenerator.isApplicableForClass(choiceType, modelClass)) {\n                     String choiceElementName = ModelSupport.getChoiceElementName(elementName, choiceType);\n-                    generateProperty(structureDefinition, modelClass, field, properties, choiceElementName, choiceType, many, description);\n+                    generateProperty(structureDefinition, modelClass, field, properties, choiceElementName, choiceType, many, description, min);\n                 }\n             }\n         } else {\n             ElementDefinition elementDefinition = getElementDefinition(structureDefinition, modelClass, elementName);\n             String description = elementDefinition.getDefinition().getValue();\n-            generateProperty(structureDefinition, modelClass, field, properties, elementName, (Class<?>)fieldType, many, description);\n+            Integer min = elementDefinition.getMin() != null ? elementDefinition.getMin().getValue() : null;\n+            generateProperty(structureDefinition, modelClass, field, properties, elementName, (Class<?>)fieldType, many, description, min);\n         }\n     }\n \n     private static void generateProperty(StructureDefinition structureDefinition, Class<?> modelClass, Field field,\n-            JsonObjectBuilder properties, String elementName, Class<?> fieldClass, boolean many, String description)\n+            JsonObjectBuilder properties, String elementName, Class<?> fieldClass, boolean many, String description, Integer min)\n             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n \n         JsonObjectBuilder property = factory.createObjectBuilder();\n@@ -979,7 +981,7 @@ private static void generateProperty(StructureDefinition structureDefinition, Cl\n             property.add(\"format\", \"int32\");\n         } else if (com.ibm.fhir.model.type.Base64Binary.class.equals(fieldClass)) {\n             property.add(\"type\", \"string\");\n-            property.add(\"pattern\",\"(\\\\s*([0-9a-zA-Z\\\\+\\\\=]){4}\\\\s*)+\");\n+            property.add(\"pattern\",\"(\\\\s*([0-9a-zA-Z\\\\+/=]){4}\\\\s*)+\");\n         } else if (String.class.equals(fieldClass)) {\n             property.add(\"type\", \"string\");\n             if (\"id\".equals(elementName)) {\n@@ -998,7 +1000,6 @@ private static void generateProperty(StructureDefinition structureDefinition, Cl\n             property.add(\"description\", description);\n         }\n \n-\n         // Include select examples to help tools avoid bumping into infinite recursion (if they try generate examples)\n         JsonStructure example = null;\n         if (Element.class.equals(modelClass) && Extension.class.equals(fieldClass)) {\n@@ -1022,6 +1023,9 @@ private static void generateProperty(StructureDefinition structureDefinition, Cl\n             JsonObjectBuilder wrapper = factory.createObjectBuilder();\n             wrapper.add(\"type\", \"array\");\n             wrapper.add(\"items\", property);\n+            if (min != null && min > 0) {\n+                wrapper.add(\"minItems\", min.intValue());\n+            }\n             if (example != null) {\n                 wrapper.add(\"example\", example);\n             }"
  }
]
