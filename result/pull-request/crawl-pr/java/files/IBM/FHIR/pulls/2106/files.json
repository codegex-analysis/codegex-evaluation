[
  {
    "sha": "6556bf1363bc7fbae5b8072089b2bcd2f78d3510",
    "filename": "docs/src/pages/Conformance.md",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/IBM/FHIR/blob/beceb5fbb374b27e36d3290d6553282af8f873dc/docs/src/pages/Conformance.md",
    "raw_url": "https://github.com/IBM/FHIR/raw/beceb5fbb374b27e36d3290d6553282af8f873dc/docs/src/pages/Conformance.md",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/docs/src/pages/Conformance.md?ref=beceb5fbb374b27e36d3290d6553282af8f873dc",
    "patch": "@@ -2,7 +2,7 @@\n layout: post\n title:  Conformance\n description: Notes on the Conformance of the IBM FHIR Server\n-date:   2021-03-12 12:00:00 -0400\n+date:   2021-03-17 12:00:00 -0400\n permalink: /conformance/\n ---\n \n@@ -162,15 +162,15 @@ FHIR search modifiers are described at https://www.hl7.org/fhir/R4/search.html#m\n \n |FHIR Search Parameter Type|Supported Modifiers|\"Default\" search behavior when no Modifier or Prefix is present|\n |--------------------------|-------------------|---------------------------------------------------------------|\n-|String                    |`:exact`,`:contains`,`:missing` |\"starts with\" search that is case-insensitive and accent-insensitive|\n-|Reference                 |`:[type]`,`:missing`            |exact match search and targets are implicitly added|\n-|URI                       |`:below`,`:above`,`:missing`    |exact match search|\n-|Token                     |`:missing`,`:not`               |exact match search|\n-|Number                    |`:missing`                      |implicit range search (see http://hl7.org/fhir/R4/search.html#number)|\n-|Date                      |`:missing`                      |implicit range search (see https://www.hl7.org/fhir/search.html#date)|\n-|Quantity                  |`:missing`                      |implicit range search (see http://hl7.org/fhir/R4/search.html#quantity)|\n-|Composite                 |`:missing`                      |processes each parameter component according to its type|\n-|Special (near)            | none                           |searches a bounding area according to the value of the `fhirServer/search/useBoundingRadius` property|\n+|String                    |`:exact`,`:contains`,`:missing`    |\"starts with\" search that is case-insensitive and accent-insensitive|\n+|Reference                 |`:[type]`,`:missing`,`:identifier` |exact match search and targets are implicitly added|\n+|URI                       |`:below`,`:above`,`:missing`       |exact match search|\n+|Token                     |`:missing`,`:not`                  |exact match search|\n+|Number                    |`:missing`                         |implicit range search (see http://hl7.org/fhir/R4/search.html#number)|\n+|Date                      |`:missing`                         |implicit range search (see https://www.hl7.org/fhir/search.html#date)|\n+|Quantity                  |`:missing`                         |implicit range search (see http://hl7.org/fhir/R4/search.html#quantity)|\n+|Composite                 |`:missing`                         |processes each parameter component according to its type|\n+|Special (near)            | none                              |searches a bounding area according to the value of the `fhirServer/search/useBoundingRadius` property|\n \n Due to performance implications, the `:exact` modifier should be used for String searches where possible.\n "
  },
  {
    "sha": "bd9e777f140300afd4e818bd711c8a499f182363",
    "filename": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/JDBCConstants.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/IBM/FHIR/blob/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/JDBCConstants.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/JDBCConstants.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/JDBCConstants.java?ref=beceb5fbb374b27e36d3290d6553282af8f873dc",
    "patch": "@@ -132,7 +132,7 @@\n     static {\n         supportedModifiersMap = new HashMap<>();\n         supportedModifiersMap.put(Type.STRING, Arrays.asList(Modifier.EXACT, Modifier.CONTAINS, Modifier.MISSING));\n-        supportedModifiersMap.put(Type.REFERENCE, Arrays.asList(Modifier.TYPE, Modifier.MISSING));\n+        supportedModifiersMap.put(Type.REFERENCE, Arrays.asList(Modifier.TYPE, Modifier.MISSING, Modifier.IDENTIFIER));\n         supportedModifiersMap.put(Type.URI, Arrays.asList(Modifier.BELOW, Modifier.ABOVE, Modifier.MISSING));\n         supportedModifiersMap.put(Type.TOKEN, Arrays.asList(Modifier.MISSING, Modifier.NOT));\n         supportedModifiersMap.put(Type.NUMBER, Arrays.asList(Modifier.MISSING));"
  },
  {
    "sha": "7846623c64a2e25e4f01080b027eaa376c2f9e40",
    "filename": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/IBM/FHIR/blob/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCParameterBuildingVisitor.java?ref=beceb5fbb374b27e36d3290d6553282af8f873dc",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2017,2020\n+ * (C) Copyright IBM Corp. 2017, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n@@ -56,6 +56,7 @@\n import com.ibm.fhir.persistence.jdbc.dto.StringParmVal;\n import com.ibm.fhir.persistence.jdbc.dto.TokenParmVal;\n import com.ibm.fhir.persistence.jdbc.util.type.NumberParmBehaviorUtil;\n+import com.ibm.fhir.search.SearchConstants;\n import com.ibm.fhir.search.date.DateTimeHandler;\n import com.ibm.fhir.search.exception.FHIRSearchException;\n import com.ibm.fhir.search.util.ReferenceUtil;\n@@ -608,12 +609,22 @@ public boolean visit(java.lang.String elementName, int elementIndex, Reference r\n         try {\n             final String baseUrl = ReferenceUtil.getBaseUrl(null);\n             ReferenceValue refValue = ReferenceUtil.createReferenceValueFrom(reference, baseUrl);\n-            if (refValue.getType() != ReferenceType.INVALID && refValue.getType() != ReferenceType.DISPLAY_ONLY) {\n+            if (refValue.getType() != ReferenceType.LOGICAL && refValue.getType() != ReferenceType.INVALID && refValue.getType() != ReferenceType.DISPLAY_ONLY) {\n                 ReferenceParmVal p = new ReferenceParmVal();\n                 p.setRefValue(refValue);\n                 p.setName(searchParamCode);\n                 result.add(p);\n             }\n+            Identifier identifier = reference.getIdentifier();\n+            if (identifier != null && identifier.getValue() != null) {\n+                TokenParmVal p = new TokenParmVal();\n+                p.setName(searchParamCode + SearchConstants.IDENTIFIER_MODIFIER_SUFFIX);\n+                if (identifier.getSystem() != null) {\n+                    p.setValueSystem(identifier.getSystem().getValue());\n+                }\n+                p.setValueCode(identifier.getValue().getValue());\n+                result.add(p);\n+            }\n         } catch (FHIRSearchException x) {\n             // Log the error, but skip it because we're not supposed to throw exceptions here\n             log.log(Level.WARNING, \"Error processing reference\", x);"
  },
  {
    "sha": "3ae889cbcdf25d6e8fc4a63b4df66e636fddb025",
    "filename": "fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java",
    "status": "modified",
    "additions": 75,
    "deletions": 46,
    "changes": 121,
    "blob_url": "https://github.com/IBM/FHIR/blob/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-persistence-jdbc/src/main/java/com/ibm/fhir/persistence/jdbc/util/JDBCQueryBuilder.java?ref=beceb5fbb374b27e36d3290d6553282af8f873dc",
    "patch": "@@ -553,79 +553,108 @@ private SqlQueryData processReferenceParm(Class<?> resourceType, QueryParameter\n         log.entering(CLASSNAME, METHODNAME, queryParm.toString());\n \n         StringBuilder whereClauseSegment = new StringBuilder();\n-        String operator = getOperator(queryParm, EQ);\n \n-        String searchValue;\n+        String codeValue;\n+        Long commonTokenValueId;\n+        Integer codeSystemId;\n         SqlQueryData queryData;\n         List<Object> bindVariables = new ArrayList<>();\n+        String queryParmCode = queryParm.getCode();\n+\n+        // Append the suffix for :identifier modifier\n+        if (Modifier.IDENTIFIER.equals(queryParm.getModifier())) {\n+            queryParmCode += SearchConstants.IDENTIFIER_MODIFIER_SUFFIX;\n+        }\n \n         // Build this piece of the segment:\n         // (P1.PARAMETER_NAME_ID = x AND\n-        this.populateNameIdSubSegment(whereClauseSegment, queryParm.getCode(), tableAlias);\n+        this.populateNameIdSubSegment(whereClauseSegment, queryParmCode, tableAlias);\n \n         whereClauseSegment.append(AND).append(LEFT_PAREN);\n \n         boolean parmValueProcessed = false;\n         for (QueryParameterValue value : queryParm.getValues()) {\n-            String targetResourceType = null;\n-            searchValue = SqlParameterEncoder.encode(value.getValueString());\n-\n-            // Make sure we split out the resource type if it is included in the search value\n-            String[] parts = value.getValueString().split(\"/\");\n-            if (parts.length == 2) {\n-                targetResourceType = parts[0];\n-                searchValue = parts[1];\n-            }\n \n-            // Handle query parm representing this name/value pair construct:\n-            // <code>{name}:{Resource Type} = {resource-id}</code>\n-            if (queryParm.getModifier() != null && queryParm.getModifier().equals(Modifier.TYPE)) {\n-                if (!SearchConstants.Type.REFERENCE.equals(queryParm.getType())) {\n-                    // Not a Reference\n-                    searchValue =\n-                            queryParm.getModifierResourceTypeName() + \"/\"\n-                                    + SqlParameterEncoder.encode(value.getValueString());\n-                } else {\n-                    // This is a Reference type.\n-                    if (parts.length != 2) {\n-                        // fallback to get the target resource type using the modifier\n-                        targetResourceType = queryParm.getModifierResourceTypeName();\n-                    }\n-                }\n-            }\n+            codeValue = null;\n+            commonTokenValueId = null;\n+            codeSystemId = null;\n \n             // If multiple values are present, we need to OR them together.\n             if (parmValueProcessed) {\n                 whereClauseSegment.append(OR);\n-            } else {\n-                parmValueProcessed = true;\n             }\n+            whereClauseSegment.append(LEFT_PAREN);\n+\n+            if (Modifier.IDENTIFIER.equals(queryParm.getModifier())) {\n+                // Include code\n+                codeValue = SqlParameterEncoder.encode(value.getValueCode());\n+\n+                // Include system if present.\n+                if (value.getValueSystem() != null && !value.getValueSystem().isEmpty()) {\n+                    commonTokenValueId = getCommonTokenValueId(value.getValueSystem(), value.getValueCode());\n+\n+                    if (commonTokenValueId == null) {\n+                        codeSystemId = getCodeSystemId(value.getValueSystem());\n+                    }\n+                }\n+            } else {\n+                String targetResourceType = null;\n+                codeValue = SqlParameterEncoder.encode(value.getValueString());\n+\n+                // Make sure we split out the resource type if it is included in the search value\n+                String[] parts = value.getValueString().split(\"/\");\n+                if (parts.length == 2) {\n+                    targetResourceType = parts[0];\n+                    codeValue = parts[1];\n+                }\n+\n+                // Handle query parm representing this name/value pair construct:\n+                // <code>{name}:{Resource Type} = {resource-id}</code>\n+                if (queryParm.getModifier() != null && queryParm.getModifier().equals(Modifier.TYPE)) {\n+                    if (!SearchConstants.Type.REFERENCE.equals(queryParm.getType())) {\n+                        // Not a Reference\n+                        codeValue =\n+                                queryParm.getModifierResourceTypeName() + \"/\"\n+                                        + SqlParameterEncoder.encode(value.getValueString());\n+                    } else {\n+                        // This is a Reference type.\n+                        if (parts.length != 2) {\n+                            // fallback to get the target resource type using the modifier\n+                            targetResourceType = queryParm.getModifierResourceTypeName();\n+                        }\n+                    }\n+                }\n \n-            // If the predicate includes a code-system it will resolve to a single value from\n-            // common_token_values. It helps the query optimizer if we include this additional\n-            // filter because it can make better cardinality estimates.\n-            Long commonTokenValueId = null;\n-            if (EQ.equals(operator) && targetResourceType != null) {\n-                // targetResourceType is treated as the code-system for references\n-                commonTokenValueId = getCommonTokenValueId(targetResourceType, searchValue);\n+                // If the predicate includes a code-system it will resolve to a single value from\n+                // common_token_values. It helps the query optimizer if we include this additional\n+                // filter because it can make better cardinality estimates.\n+                if (targetResourceType != null) {\n+                    // targetResourceType is treated as the code-system for references\n+                    commonTokenValueId = getCommonTokenValueId(targetResourceType, codeValue);\n+\n+                    // add the [optional] condition for the resource type if we have one\n+                    if (commonTokenValueId == null) {\n+                        codeSystemId = getCodeSystemId(targetResourceType);\n+                    }\n+                }\n             }\n \n-            // Build this piece: pX.token_value {operator} search-attribute-value [ AND pX.code_system_id = <n> ]\n-            whereClauseSegment.append(tableAlias).append(DOT).append(TOKEN_VALUE).append(operator).append(BIND_VAR);\n-            bindVariables.add(searchValue);\n+            // Build this piece: pX.token_value = search-attribute-value [ AND pX.code_system_id = <n> ]\n+            whereClauseSegment.append(tableAlias).append(DOT).append(TOKEN_VALUE).append(EQ).append(BIND_VAR);\n+            bindVariables.add(codeValue);\n \n-            // add the [optional] condition for the resource type if we have one\n             if (commonTokenValueId != null) {\n                 // #1929 improves cardinality estimation\n                 // resulting in far better execution plans for many search queries. Because COMMON_TOKEN_VALUE_ID\n                 // is the primary key for the common_token_values table, we don't need the CODE_SYSTEM_ID = ? predicate.\n-                whereClauseSegment.append(AND).append(tableAlias).append(DOT).append(COMMON_TOKEN_VALUE_ID).append(EQ)\n-                    .append(commonTokenValueId);\n-            } else if (targetResourceType != null) {\n+                whereClauseSegment.append(AND).append(tableAlias).append(DOT).append(COMMON_TOKEN_VALUE_ID).append(EQ).append(commonTokenValueId);\n+            } else if (codeSystemId != null) {\n                 // For better performance, use a literal for the resource type code-system-id, not a parameter marker\n-                Integer codeSystemIdForResourceType = getCodeSystemId(targetResourceType);\n-                whereClauseSegment.append(AND).append(tableAlias).append(DOT).append(CODE_SYSTEM_ID).append(EQ).append(nullCheck(codeSystemIdForResourceType));\n+                whereClauseSegment.append(AND).append(tableAlias).append(DOT).append(CODE_SYSTEM_ID).append(EQ).append(nullCheck(codeSystemId));\n             }\n+\n+            whereClauseSegment.append(RIGHT_PAREN);\n+            parmValueProcessed = true;\n         }\n         whereClauseSegment.append(RIGHT_PAREN).append(RIGHT_PAREN);\n "
  },
  {
    "sha": "0c24951802efb91401507f990a12cd7442cd8088",
    "filename": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/ParameterExtractionTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 3,
    "changes": 16,
    "blob_url": "https://github.com/IBM/FHIR/blob/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/ParameterExtractionTest.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/ParameterExtractionTest.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/ParameterExtractionTest.java?ref=beceb5fbb374b27e36d3290d6553282af8f873dc",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2019, 2020\n+ * (C) Copyright IBM Corp. 2019, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n@@ -64,6 +64,7 @@\n import com.ibm.fhir.persistence.jdbc.dto.StringParmVal;\n import com.ibm.fhir.persistence.jdbc.dto.TokenParmVal;\n import com.ibm.fhir.persistence.jdbc.util.JDBCParameterBuildingVisitor;\n+import com.ibm.fhir.search.SearchConstants;\n \n /**\n  * Tests all valid combinations of search paramter types and data types\n@@ -79,6 +80,7 @@\n     private static final String SAMPLE_DATE_START = \"2016-01-01T00:00:00.000000Z\";\n     private static final String SAMPLE_DATE_END = \"2016-01-02T00:00:00.000000Z\";\n     private static final String UNITSOFMEASURE = \"http://unitsofmeasure.org\";\n+    private static final String SEARCH_PARAM_CODE_VALUE = \"value\";\n \n     private static final Extension SAMPLE_EXTENSION = Extension.builder().url(SAMPLE_URI).build();\n \n@@ -94,7 +96,7 @@\n             .name(string(\"test-param\"))\n             .status(PublicationStatus.DRAFT)\n             .description(Markdown.of(\"#Test Parameter\"))\n-            .code(Code.of(\"value\"))\n+            .code(Code.of(SEARCH_PARAM_CODE_VALUE))\n             .base(ResourceType.BASIC);\n     private static final SearchParameter numberSearchParam = searchParamBuilder.type(SearchParamType.NUMBER).build();\n     private static final SearchParameter dateSearchParam = searchParamBuilder.type(SearchParamType.DATE).build();\n@@ -649,12 +651,20 @@ public void testReference() throws FHIRPersistenceProcessorException {\n         JDBCParameterBuildingVisitor parameterBuilder = new JDBCParameterBuildingVisitor(referenceSearchParam);\n         Reference.builder()\n                  .reference(string(SAMPLE_REF))\n+                 .identifier(Identifier.builder()\n+                     .system(Uri.of(SAMPLE_URI))\n+                     .value(string(SAMPLE_STRING))\n+                     .build())\n                  .build()\n                  .accept(parameterBuilder);\n         List<ExtractedParameterValue> params = parameterBuilder.getResult();\n-        assertEquals(params.size(), 1, \"Number of extracted parameters\");\n+        assertEquals(params.size(), 2, \"Number of extracted parameters\");\n+        assertEquals(((ReferenceParmVal) params.get(0)).getName(), SEARCH_PARAM_CODE_VALUE);\n         assertEquals(((ReferenceParmVal) params.get(0)).getRefValue().getValue(), SAMPLE_REF_ID);\n         assertEquals(((ReferenceParmVal) params.get(0)).getRefValue().getTargetResourceType(), SAMPLE_REF_RESOURCE_TYPE);\n+        assertEquals(((TokenParmVal) params.get(1)).getName(), SEARCH_PARAM_CODE_VALUE + SearchConstants.IDENTIFIER_MODIFIER_SUFFIX);\n+        assertEquals(((TokenParmVal) params.get(1)).getValueSystem(), SAMPLE_URI);\n+        assertEquals(((TokenParmVal) params.get(1)).getValueCode(), SAMPLE_STRING);\n     }\n \n     @Test"
  },
  {
    "sha": "debbd1698e4bab4a63338794ed2725697f57b40b",
    "filename": "fhir-search/src/main/java/com/ibm/fhir/search/SearchConstants.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/IBM/FHIR/blob/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-search/src/main/java/com/ibm/fhir/search/SearchConstants.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-search/src/main/java/com/ibm/fhir/search/SearchConstants.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-search/src/main/java/com/ibm/fhir/search/SearchConstants.java?ref=beceb5fbb374b27e36d3290d6553282af8f873dc",
    "patch": "@@ -97,6 +97,9 @@ private SearchConstants() {\n     public static final String BASE_SYSTEM_EXT_URL = \"http://ibm.com/fhir/extension/\";\n     public static final String IMPLICIT_SYSTEM_EXT_URL = BASE_SYSTEM_EXT_URL + \"implicit-system\";\n \n+    // Extracted search parameter suffix for :identifier modifier\n+    public static final String IDENTIFIER_MODIFIER_SUFFIX = \":identifier\";\n+    \n     // set as unmodifiable\n     public static final Set<String> SEARCH_RESULT_PARAMETER_NAMES =\n             Collections.unmodifiableSet(new HashSet<>(Arrays.asList(SORT, COUNT, PAGE, INCLUDE, REVINCLUDE, ELEMENTS, SUMMARY, TOTAL)));"
  },
  {
    "sha": "6a592e75c27845b59a3391ca7dba7f27dc7490ef",
    "filename": "fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java",
    "status": "modified",
    "additions": 16,
    "deletions": 3,
    "changes": 19,
    "blob_url": "https://github.com/IBM/FHIR/blob/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-search/src/main/java/com/ibm/fhir/search/util/SearchUtil.java?ref=beceb5fbb374b27e36d3290d6553282af8f873dc",
    "patch": "@@ -1232,9 +1232,22 @@ private static void checkSearchParameterCombinations(Class<?> resourceType, List\n                 // [parameter]=[base]/[type]/[id] - absolute local reference\n                 // [parameter]=[id] - relativel local reference\n                 // [parameter]=[literal|version#fragment] - canonical url - currently not supported\n-                String valueString = unescapeSearchParm(v);\n-                valueString = extractReferenceValue(valueString);\n-                parameterValue.setValueString(valueString);\n+                // [parameter]:identifier=[system|code] - token search of identifier field\n+                if (Modifier.IDENTIFIER.equals(modifier)) {\n+                    String[] parts = v.split(SearchConstants.BACKSLASH_NEGATIVE_LOOKBEHIND + \"\\\\|\");\n+                    if (parts.length == 2) {\n+                        parameterValue.setValueSystem(unescapeSearchParm(parts[0]));\n+                        parameterValue.setValueCode(unescapeSearchParm(parts[1]));\n+                    }\n+                    else {\n+                        parameterValue.setValueCode(unescapeSearchParm(v));\n+                    }\n+                }\n+                else {\n+                    String valueString = unescapeSearchParm(v);\n+                    valueString = extractReferenceValue(valueString);\n+                    parameterValue.setValueString(valueString);\n+                }\n                 break;\n             }\n             case QUANTITY: {"
  },
  {
    "sha": "6294bb417b7494a076d4a55029c40049429778c1",
    "filename": "fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchReferenceTest.java",
    "status": "modified",
    "additions": 146,
    "deletions": 12,
    "changes": 158,
    "blob_url": "https://github.com/IBM/FHIR/blob/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchReferenceTest.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/beceb5fbb374b27e36d3290d6553282af8f873dc/fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchReferenceTest.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server-test/src/test/java/com/ibm/fhir/server/test/SearchReferenceTest.java?ref=beceb5fbb374b27e36d3290d6553282af8f873dc",
    "patch": "@@ -6,6 +6,7 @@\n \n package com.ibm.fhir.server.test;\n \n+import static com.ibm.fhir.model.type.String.string;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n@@ -21,7 +22,9 @@\n import com.ibm.fhir.model.resource.OperationOutcome;\n import com.ibm.fhir.model.resource.Patient;\n import com.ibm.fhir.model.test.TestUtil;\n+import com.ibm.fhir.model.type.Identifier;\n import com.ibm.fhir.model.type.Reference;\n+import com.ibm.fhir.model.type.Uri;\n import com.ibm.fhir.model.type.code.AdministrativeGender;\n \n public class SearchReferenceTest extends FHIRServerTestBase {\n@@ -38,24 +41,36 @@\n     private String patientResourceIdWithPractitionerReferenceTypeId;\n     @SuppressWarnings(\"unused\")\n     private String patientResourceIdWithPractitionerRoleReferenceTypeId;\n+    @SuppressWarnings(\"unused\")\n+    private String patientWithLogicalReference;\n+    @SuppressWarnings(\"unused\")\n+    private String patientWithLiteralAndLogicalReference;\n \n     /*\n      * creates the various test cases for a patient with a reference\n      */\n-    public String createPatientWithReference(String field, String reference) throws Exception {\n+    public String createPatientWithReference(String field, String reference, Identifier logicalReference) throws Exception {\n         WebTarget target = getWebTarget();\n \n         // Build a new Patient and then call the 'create' API.\n         Patient patient = TestUtil.readLocalResource(\"Patient_JohnDoe.json\");\n \n+        Reference.Builder referenceBuilder = Reference.builder();\n+        if (reference != null) {\n+            referenceBuilder.reference(com.ibm.fhir.model.type.String.of(reference));\n+        }\n+        if (logicalReference != null) {\n+            referenceBuilder.identifier(logicalReference);\n+        }\n+\n         if (\"organization\".equals(field)) {\n             patient = patient.toBuilder()\n                     .gender(AdministrativeGender.MALE)\n-                    .managingOrganization(Reference.builder().display(com.ibm.fhir.model.type.String.of(\"Test Organization\")).reference(com.ibm.fhir.model.type.String.of(reference)).build()).build();\n+                    .managingOrganization(referenceBuilder.display(com.ibm.fhir.model.type.String.of(\"Test Organization\")).build()).build();\n         } else if (\"general-practitioner\".equals(field)) {\n             patient = patient.toBuilder()\n                     .gender(AdministrativeGender.MALE)\n-                    .generalPractitioner(Reference.builder().display(com.ibm.fhir.model.type.String.of(\"Test Practitioner\")).reference(com.ibm.fhir.model.type.String.of(reference)).build()).build();\n+                    .generalPractitioner(referenceBuilder.display(com.ibm.fhir.model.type.String.of(\"Test Practitioner\")).build()).build();\n         }\n         Entity<Patient> entity =\n                 Entity.entity(patient, FHIRMediaType.APPLICATION_FHIR_JSON);\n@@ -81,25 +96,30 @@ public String createPatientWithReference(String field, String reference) throws\n     public void testCreatePatient() throws Exception {\n         // references without an explicit type will be interpreted as literals (e.g. externals) not local references\n         // we will not infer their type, which means that searches specifying a type will not match them by design\n-        patientResourceIdWithReferenceId = createPatientWithReference(\"organization\", \"3001\");\n+        patientResourceIdWithReferenceId = createPatientWithReference(\"organization\", \"3001\", null);\n \n         // relative reference\n-        patientResourceIdWithReferenceTypeId = createPatientWithReference(\"organization\", \"Organization/3002\");\n+        patientResourceIdWithReferenceTypeId = createPatientWithReference(\"organization\", \"Organization/3002\", null);\n \n         // relative reference because the url aligns with the server base address\n-        patientResourceIdWithReferenceUrl = createPatientWithReference(\"organization\", \"https://localhost:9443/fhir-server/api/v4/Organization/3003\");\n+        patientResourceIdWithReferenceUrl = createPatientWithReference(\"organization\", \"https://localhost:9443/fhir-server/api/v4/Organization/3003\", null);\n \n-        // patientResourceIdWithReferenceCanonicalUri = createPatientWithReference(\"https://localhost:9443/fhir-server/api/v4/Organization/3004|1.0.0\");\n+        // patientResourceIdWithReferenceCanonicalUri = createPatientWithReference(\"https://localhost:9443/fhir-server/api/v4/Organization/3004|1.0.0\", null);\n \n         // Literal reference to another server\n-        patientWithLiteralReference = createPatientWithReference(\"organization\", \"https://an.example.com/Organization/3004\");\n+        patientWithLiteralReference = createPatientWithReference(\"organization\", \"https://an.example.com/Organization/3004\", null);\n \n         // relative reference to Practitioner for general practitioner\n-        patientResourceIdWithPractitionerReferenceTypeId = createPatientWithReference(\"general-practitioner\", \"Practitioner/3002\");\n+        patientResourceIdWithPractitionerReferenceTypeId = createPatientWithReference(\"general-practitioner\", \"Practitioner/3002\", null);\n \n         // relative reference to PractitionerRole for general practitioner\n-        patientResourceIdWithPractitionerRoleReferenceTypeId = createPatientWithReference(\"general-practitioner\", \"PractitionerRole/3002\");\n+        patientResourceIdWithPractitionerRoleReferenceTypeId = createPatientWithReference(\"general-practitioner\", \"PractitionerRole/3002\", null);\n+\n+        // logical reference\n+        patientWithLogicalReference = createPatientWithReference(\"organization\", null, Identifier.builder().system(Uri.of(\"https://an.example.com/OrgId\")).value(string(\"3005\")).build());\n \n+        // literal and logical reference\n+        patientWithLiteralAndLogicalReference = createPatientWithReference(\"organization\", \"Organization/3006\", Identifier.builder().system(Uri.of(\"https://an.example.com/OrgId\")).value(string(\"3007\")).build());\n     }\n \n     @Test(groups = { \"server-search-reference\" }, dependsOnMethods = { \"testCreatePatient\" })\n@@ -228,9 +248,8 @@ public void testSearchWithRelativePatientUrlUsingId() {\n \n     @Test(groups = { \"server-search-reference\" }, dependsOnMethods = { \"testCreatePatient\" })\n     public void testSearchWithRelativePatientUrlUsingTypeId() {\n-        // We expect a match here, because 3003 will match Organization/3003 even though\n-        // no resource type is given.\n         WebTarget target = getWebTarget();\n+\n         Response response =\n                 target.path(\"Patient\").queryParam(\"organization\", \"Organization/3003\").request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n         assertResponse(response, Response.Status.OK.getStatusCode());\n@@ -326,4 +345,119 @@ public void testSearchWithRelativePatientIdUsingIdMultipleTypes() {\n                 \"Multiple resource type matches found for logical ID '3002' for search parameter 'general-practitioner'.\");\n     }\n \n+    @Test(groups = { \"server-search-reference\" }, dependsOnMethods = { \"testCreatePatient\" })\n+    public void testSearchLogicalReferenceUsingId() {\n+        // not expected to find a match here because the search parameter only searches identifier of reference\n+        WebTarget target = getWebTarget();\n+        Response response =\n+                target.path(\"Patient\").queryParam(\"organization:identifier\", \"3001\").request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        assertResponse(response, Response.Status.OK.getStatusCode());\n+        Bundle bundle = response.readEntity(Bundle.class);\n+        assertNotNull(bundle);\n+        assertTrue(bundle.getEntry().size() == 0);\n+    }\n+\n+    @Test(groups = { \"server-search-reference\" }, dependsOnMethods = { \"testCreatePatient\" })\n+    public void testSearchLogicalReferenceWithIdentifier() {\n+        WebTarget target = getWebTarget();\n+        Response response =\n+                target.path(\"Patient\").queryParam(\"organization:identifier\", \"https://an.example.com/OrgId|3005\").request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        assertResponse(response, Response.Status.OK.getStatusCode());\n+        Bundle bundle = response.readEntity(Bundle.class);\n+        assertNotNull(bundle);\n+        assertTrue(bundle.getEntry().size() >= 1);\n+        Patient p = null;\n+        for (Bundle.Entry entry : bundle.getEntry()) {\n+            if (entry.getResource() != null && entry.getResource() instanceof Patient) {\n+                p = (Patient) entry.getResource();\n+            }\n+        }\n+        assertNotNull(p);\n+        assertEquals(\"https://an.example.com/OrgId\", p.getManagingOrganization().getIdentifier().getSystem().getValue());\n+        assertEquals(\"3005\", p.getManagingOrganization().getIdentifier().getValue().getValue());\n+    }\n+\n+    @Test(groups = { \"server-search-reference\" }, dependsOnMethods = { \"testCreatePatient\" })\n+    public void testSearchLogicalReferenceWithIdentifierValue() {\n+        WebTarget target = getWebTarget();\n+        Response response =\n+                target.path(\"Patient\").queryParam(\"organization:identifier\", \"3005\").request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        assertResponse(response, Response.Status.OK.getStatusCode());\n+        Bundle bundle = response.readEntity(Bundle.class);\n+        assertNotNull(bundle);\n+        assertTrue(bundle.getEntry().size() >= 1);\n+        Patient p = null;\n+        for (Bundle.Entry entry : bundle.getEntry()) {\n+            if (entry.getResource() != null && entry.getResource() instanceof Patient) {\n+                p = (Patient) entry.getResource();\n+            }\n+        }\n+        assertNotNull(p);\n+        assertEquals(\"https://an.example.com/OrgId\", p.getManagingOrganization().getIdentifier().getSystem().getValue());\n+        assertEquals(\"3005\", p.getManagingOrganization().getIdentifier().getValue().getValue());\n+    }\n+\n+    @Test(groups = { \"server-search-reference\" }, dependsOnMethods = { \"testCreatePatient\" })\n+    public void testSearchLiteralRefForPatientWithLiteralAndLogicalRefs() {\n+        WebTarget target = getWebTarget();\n+        Response response =\n+                target.path(\"Patient\").queryParam(\"organization\", \"Organization/3006\").request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        assertResponse(response, Response.Status.OK.getStatusCode());\n+        Bundle bundle = response.readEntity(Bundle.class);\n+        assertNotNull(bundle);\n+        assertTrue(bundle.getEntry().size() >= 1);\n+        Patient p = null;\n+        for (Bundle.Entry entry : bundle.getEntry()) {\n+            if (entry.getResource() != null && entry.getResource() instanceof Patient) {\n+                p = (Patient) entry.getResource();\n+            }\n+        }\n+        assertNotNull(p);\n+        assertEquals(\"Organization/3006\", p.getManagingOrganization().getReference().getValue());\n+        assertEquals(\"https://an.example.com/OrgId\", p.getManagingOrganization().getIdentifier().getSystem().getValue());\n+        assertEquals(\"3007\", p.getManagingOrganization().getIdentifier().getValue().getValue());\n+    }\n+\n+    @Test(groups = { \"server-search-reference\" }, dependsOnMethods = { \"testCreatePatient\" })\n+    public void testSearchLogicalRefForPatientWithLiteralAndLogicalRefs() {\n+        WebTarget target = getWebTarget();\n+        Response response =\n+                target.path(\"Patient\").queryParam(\"organization:identifier\", \"https://an.example.com/OrgId|3007\").request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        assertResponse(response, Response.Status.OK.getStatusCode());\n+        Bundle bundle = response.readEntity(Bundle.class);\n+        assertNotNull(bundle);\n+        assertTrue(bundle.getEntry().size() >= 1);\n+        Patient p = null;\n+        for (Bundle.Entry entry : bundle.getEntry()) {\n+            if (entry.getResource() != null && entry.getResource() instanceof Patient) {\n+                p = (Patient) entry.getResource();\n+            }\n+        }\n+        assertNotNull(p);\n+        assertEquals(\"Organization/3006\", p.getManagingOrganization().getReference().getValue());\n+        assertEquals(\"https://an.example.com/OrgId\", p.getManagingOrganization().getIdentifier().getSystem().getValue());\n+        assertEquals(\"3007\", p.getManagingOrganization().getIdentifier().getValue().getValue());\n+    }\n+\n+    @Test(groups = { \"server-search-reference\" }, dependsOnMethods = { \"testCreatePatient\" })\n+    public void testSearchLiteralAndLogicalRefsForPatientWithLiteralAndLogicalRefs() {\n+        WebTarget target = getWebTarget();\n+        Response response =\n+                target.path(\"Patient\").queryParam(\"organization\", \"3006\")\n+                .queryParam(\"organization:identifier\", \"3007\").request(FHIRMediaType.APPLICATION_FHIR_JSON).get();\n+        assertResponse(response, Response.Status.OK.getStatusCode());\n+        Bundle bundle = response.readEntity(Bundle.class);\n+        assertNotNull(bundle);\n+        assertTrue(bundle.getEntry().size() >= 1);\n+        Patient p = null;\n+        for (Bundle.Entry entry : bundle.getEntry()) {\n+            if (entry.getResource() != null && entry.getResource() instanceof Patient) {\n+                p = (Patient) entry.getResource();\n+            }\n+        }\n+        assertNotNull(p);\n+        assertEquals(\"Organization/3006\", p.getManagingOrganization().getReference().getValue());\n+        assertEquals(\"https://an.example.com/OrgId\", p.getManagingOrganization().getIdentifier().getSystem().getValue());\n+        assertEquals(\"3007\", p.getManagingOrganization().getIdentifier().getValue().getValue());\n+    }\n }\n\\ No newline at end of file"
  }
]
