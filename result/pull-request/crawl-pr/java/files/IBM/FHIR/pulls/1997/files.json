[
  {
    "sha": "e7f8e3f239e743b9e757bcd6f97d662776c5289c",
    "filename": "docs/src/pages/guides/FHIRServerUsersGuide.md",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/docs/src/pages/guides/FHIRServerUsersGuide.md",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/docs/src/pages/guides/FHIRServerUsersGuide.md",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/docs/src/pages/guides/FHIRServerUsersGuide.md?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -1953,6 +1953,9 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/core/capabilityStatementCacheTimeout`|integer|The number of minutes that a tenant's CapabilityStatement is cached for the metadata endpoint. |\n |`fhirServer/core/extendedCodeableConceptValidation`|boolean|A boolean flag which indicates whether extended validation is performed by the server during object construction for code, Coding, CodeableConcept, Quantity, Uri, and String elements which have required bindings to value sets.|\n |`fhirServer/core/disabledOperations`|string|A comma-separated list of operations which are not allowed to run on the IBM FHIR Server, for example, `validate,import`. Note, do not include the dollar sign `$`|\n+|`fhirServer/term/graphTermServiceProvider/enabled`|boolean|Indicates whether the graph term service provider should be used by the FHIR term service to access code system content|\n+|`fhirServer/term/graphTermServiceProvider/timeLimit`|integer|Graph traversal time limit (in milliseconds)|\n+|`fhirServer/term/graphTermServiceProvider/configuration`|object (name/value pairs)|A JSON object that contains the name/value pairs used to configure the graph database behind the graph term service provider see: [https://docs.janusgraph.org/basics/configuration-reference/](https://docs.janusgraph.org/basics/configuration-reference/)|\n |`fhirServer/resources/open`|boolean|Whether resources that are not explicitly listed in the configuration should be supported by the FHIR Server REST layer. When open is set to `false`, only the resources listed in fhir-server-config.json are supported.|\n |`fhirServer/resources/Resource/interactions`|string list|A list of strings that represent the RESTful interactions (create, read, vread, update, patch, delete, history, and/or search) supported for resource types. Omitting this property is equivalent to supporting all FHIR interactions for the supported resources. An empty list, `[]`, can be used to indicate that no REST methods are supported. This property can be overridden for specific resource types via the `fhirServer/resources/<resourceType>/interactions` property.|\n |`fhirServer/resources/Resource/searchParameters`|object|The set of search parameters to support for all supported resource types. Omitting this property is equivalent to supporting all search parameters in the server's registry that apply to resource type \"Resource\" (all resources). An empty object, `{}`, can be used to indicate that no global search parameters are supported.|\n@@ -2073,6 +2076,8 @@ This section contains reference information about each of the configuration prop\n |`fhirServer/core/conditionalDeleteMaxNumber`|10|\n |`fhirServer/core/capabilityStatementCacheTimeout`|60|\n |`fhirServer/core/extendedCodeableConceptValidation`|true|\n+|`fhirServer/term/graphTermServiceProvider/enabled`|false|\n+|`fhirServer/term/graphTermServiceProvider/timeLimit`|90000|\n |`fhirServer/resources/open`|true|\n |`fhirServer/resources/Resource/interactions`|null (all interactions supported)|\n |`fhirServer/resources/Resource/searchParameters`|null (all global search parameters supported)|\n@@ -2182,6 +2187,9 @@ must restart the server for that change to take effect.\n |`fhirServer/core/capabilityStatementCacheTimeout`|Y|Y|\n |`fhirServer/core/extendedCodeableConceptValidation`|N|N|\n |`fhirServer/core/disabledOperations`|N|N|\n+|`fhirServer/term/graphTermServiceProvider/enabled`|N|N|\n+|`fhirServer/term/graphTermServiceProvider/timeLimit`|N|N|\n+|`fhirServer/term/graphTermServiceProvider/configuration`|N|N|\n |`fhirServer/resources/open`|Y|Y|\n |`fhirServer/resources/Resource/interactions`|Y|Y|\n |`fhirServer/resources/Resource/searchParameters`|Y|Y|"
  },
  {
    "sha": "f2b7da00a5e9290db8e93f4b3d2dc24483fd393d",
    "filename": "docs/src/pages/guides/FHIRTerminologyGuide.md",
    "status": "modified",
    "additions": 51,
    "deletions": 31,
    "changes": 82,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/docs/src/pages/guides/FHIRTerminologyGuide.md",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/docs/src/pages/guides/FHIRTerminologyGuide.md",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/docs/src/pages/guides/FHIRTerminologyGuide.md?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -1,7 +1,7 @@\n ---\n slug:  \"/FHIR/guides/FHIRTerminologyGuide/\"\n title: \"FHIR Terminology Guide\"\n-date:  \"2020-06-04 12:00:00 -0400\"\n+date:  \"2021-03-11\"\n ---\n \n ## Overview\n@@ -10,23 +10,37 @@ The IBM FHIR Server Terminology module ([fhir-term](https://github.com/IBM/FHIR/\n \n ## FHIR Terminology Service Provider Interface (SPI)\n \n-The FHIR Terminology Service Provider interface provides a mechanism for implementers to provide terminology capabilities via the Java ServiceLoader. The interface includes method signatures for `expand`, `lookup`, `subsumes`, `closure`, `validateCode` (CodeSystem) and `validateCode` (ValueSet). Here is an excerpt (for brevity) of the SPI:\n+The FHIR Terminology Service Provider interface provides a mechanism for implementers to provide terminology capabilities via the Java ServiceLoader. The interface includes method signatures for `closure`, `getConcept`, `getConcepts`, `hasConcept`, `isSupported` and `subsumes`:\n \n ```java\n public interface FHIRTermServiceProvider {\n-    boolean isExpandable(ValueSet valueSet);\n-    ValueSet expand(ValueSet valueSet, ExpansionParameters parameters);\n-    LookupOutcome lookup(Coding coding, LookupParameters parameters);\n-    ConceptSubsumptionOutcome subsumes(Coding codingA, Coding codingB);\n-    Set<Concept> closure(Coding coding);\n-    ValidationOutcome validateCode(CodeSystem codeSystem, Coding coding, ValidationParameters parameters);\n-    ValidationOutcome validateCode(CodeSystem codeSystem, CodeableConcept codeableConcept, ValidationParameters parameters);\n-    ValidationOutcome validateCode(ValueSet valueSet, Coding coding, ValidationParameters parameters);\n-    ValidationOutcome validateCode(ValueSet valueSet, CodeableConcept codeableConcept, ValidationParameters parameters);\n-    TranslationOutcome translate(ConceptMap conceptMap, Coding coding, TranslationParameters parameters);\n-    TranslationOutcome translate(ConceptMap conceptMap, CodeableConcept codeableConcept, TranslationParameters parameters);\n+    Set<Concept> closure(CodeSystem codeSystem, Code code);\n+    Concept getConcept(CodeSystem codeSystem, Code code);\n+    Set<Concept> getConcepts(CodeSystem codeSystem);\n+    Set<Concept> getConcepts(CodeSystem codeSystem, List<Filter> filters);\n+    boolean hasConcept(CodeSystem codeSystem, Code code);\n+    boolean isSupported(CodeSystem codeSystem);\n+    boolean subsumes(CodeSystem codeSystem, Code codeA, Code codeB);\n }\n+```\n+\n+## Default Terminology Service Provider Implementation\n \n+The default implementation of `FHIRTermServiceProvider` ([DefaultTermServiceProvider](https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/provider/DefaultTermServiceProvider.java)) leverages terminology resources (`CodeSystem`, `ValueSet`, and `ConceptMap`) that have been made available through the FHIR registry module ([fhir-registry](https://github.com/IBM/FHIR/tree/main/fhir-registry)). It supports `CodeSystem` resources with *complete* content (`CodeSystem.content = 'complete'`) and `ValueSet` resources that reference `CodeSystem` resources that have complete content.\n+\n+## FHIR Terminology Service Singleton facade\n+\n+The FHIR Terminology Service Singleton facade ([FHIRTermService](https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/FHIRTermService.java)) loads a list of `FHIRTermServiceProvider` instances from the ServiceLoader and includes an instance of the `DefaultTermServiceProvider`. Client code (Java) that requires terminology capabilities should access them via the `FHIRTermService` singleton facade. Here is an example:\n+\n+```java\n+ValueSet valueSet = ValueSetSupport.getValueSet(\"http://ibm.com/fhir/ValueSet/vs1\");\n+Coding coding = Coding.builder()\n+        .system(Uri.of(\"http://ibm.com/fhir/CodeSystem/cs1\"))\n+        .version(string(\"1.0.0\"))\n+        .code(Code.of(\"a\")\n+        .display(string(\"concept a\")\n+        .build();\n+ValidationOutcome outcome = FHIRTermService.getInstance().validateCode(valueSet, coding);\n ```\n \n The `expand `, `lookup`, `validateCode` (CodeSystem), `validateCode` (ValueSet), and `translate` methods support the passing of optional parameters (e.g. `ExpansionParameters`, `LookupParameters`, etc.). Many of the methods also return an \"outcome\" object. These \"parameter\" and \"outcome\" objects are modeled after the input/output parameters specified in the terminology operations from the FHIR Terminology module: [http://hl7.org/fhir/terminology-module.html](http://hl7.org/fhir/terminology-module.html).\n@@ -47,24 +61,7 @@ Parameters parameters = outcome.toParameters();\n \n This bridge to/from the `Parameters` resource enables implementers to build both native implementations of the SPI and implementations that access an existing external terminology service.\n \n-## Default Terminology Service Provider Implementation\n-\n-The default implementation of `FHIRTermServiceProvider` ([DefaultTermServiceProvider](https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/provider/DefaultTermServiceProvider.java)) leverages terminology resources (`CodeSystem`, `ValueSet`, and `ConceptMap`) that have been made available through the FHIR registry module ([fhir-registry](https://github.com/IBM/FHIR/tree/main/fhir-registry)). It supports `CodeSystem` resources with *complete* content (`CodeSystem.content = 'complete'`) and `ValueSet` resources that reference `CodeSystem` resources that have complete content. The default implementation does not support for optional parameters (e.g. `ExpansionParameters`, `TranslationParameters`, `ValidationParameters`, etc.).\n-\n-## FHIR Terminology Service Singleton facade\n-\n-The FHIR Terminology Service Singleton facade ([FHIRTermService](https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/FHIRTermService.java)) loads a `FHIRTermServiceProvider` from the ServiceLoader, if one exists. Otherwise, it will instantiate a `DefaultTermServiceProvider`. Other FHIR server components and user code (Java) that requires terminology capabilities should access them via the `FHIRTermService` singleton facade. Here is an example:\n-\n-```java\n-ValueSet valueSet = ValueSetSupport.getValueSet(\"http://ibm.com/fhir/ValueSet/vs1\");\n-Coding coding = Coding.builder()\n-        .system(Uri.of(\"http://ibm.com/fhir/CodeSystem/cs1\"))\n-        .version(string(\"1.0.0\"))\n-        .code(Code.of(\"a\")\n-        .display(string(\"concept a\")\n-        .build();\n-ValidationOutcome outcome = FHIRTermService.getInstance().validateCode(valueSet, coding);\n-```\n+NOTE: The current implementation does not support for optional parameters (e.g. `ExpansionParameters`, `TranslationParameters`, `ValidationParameters`, etc.).\n \n ## FHIR Server Terminology Extended Operations\n \n@@ -99,3 +96,26 @@ Collection<FHIRPathNode> result = evaluator.evaluate(\"%terminologies.validateCod\n ```\n \n Additionally, the FHIRPath functions `subsumedBy` and `subsumes` have been implemented per: [http://hl7.org/fhir/fhirpath.html#functions](http://hl7.org/fhir/fhirpath.html#functions)\n+\n+## Graph Terminology Service Provider Implementation (experimental)\n+\n+The FHIR term graph module [fhir-term-graph](https://github.com/IBM/FHIR/tree/main/fhir-term-graph) provides an implementation of `FHIRTermServiceProvider` that is backed by a graph database ([JanusGraph](https://janusgraph.org)). The module also contains term graph loaders for SNOMED-CT Release Format 2 (RF2) files (SnomedTermGraphLoader), UMLS Rich Release Format (RRF) files (UMLSTermGraphLoader), and FHIR CodeSystem resources (CodeSystemTermGraphLoader). The GraphTermServiceProvider can be enabled through the `fhir-server-config.json` file per the configuration properties specified in the [FHIR Server User's Guide](https://ibm.github.io/FHIR/guides/FHIRServerUsersGuide#51-configuration-properties-reference). Example configuration:\n+\n+``` json\n+        \"term\": {\n+            \"graphTermServiceProvider\": {\n+                \"enabled\": true,\n+                \"timeLimit\": 30000,\n+                \"configuration\": {\n+                    \"storage.backend\": \"cql\",\n+                    \"storage.hostname\": \"127.0.0.1\",\n+                    \"index.search.backend\": \"elasticsearch\",\n+                    \"index.search.hostname\": \"127.0.0.1:9200\",\n+                    \"storage.read-only\": true,\n+                    \"query.batch\": true,\n+                    \"query.batch-property-prefetch\": true,\n+                    \"query.fast-property\": true\n+                }\n+            }\n+        }\n+```"
  },
  {
    "sha": "8cfbb7e073a9c7917010154bba46e4e821b1fb3e",
    "filename": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -37,6 +37,11 @@\n     public static final String PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION = \"fhirServer/core/extendedCodeableConceptValidation\";\n     public static final String PROPERTY_DISABLED_OPERATIONS = \"fhirServer/core/disabledOperations\";\n \n+    // Terminology service properties\n+    public static final String PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED = \"fhirServer/term/graphTermServiceProvider/enabled\";\n+    public static final String PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_TIME_LIMIT = \"fhirServer/term/graphTermServiceProvider/timeLimit\";\n+    public static final String PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION = \"fhirServer/term/graphTermServiceProvider/configuration\";\n+\n     // Resources properties\n     public static final String PROPERTY_RESOURCES = \"fhirServer/resources\";\n     public static final String PROPERTY_FIELD_RESOURCES_OPEN = \"open\";"
  },
  {
    "sha": "47dba424cea2e2566e118f41ddf6b66bed7f7c2c",
    "filename": "fhir-parent/pom.xml",
    "status": "modified",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-parent/pom.xml",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-parent/pom.xml",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-parent/pom.xml?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -47,6 +47,7 @@\n         <module>../fhir-model</module>\n         <module>../fhir-registry</module>\n         <module>../fhir-term</module>\n+        <module>../fhir-term-graph</module>\n         <module>../fhir-path</module>\n         <module>../fhir-profile</module>\n         <module>../fhir-validation</module>\n@@ -438,6 +439,36 @@\n                 <artifactId>commons-text</artifactId>\n                 <version>1.9</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.janusgraph</groupId>\n+                <artifactId>janusgraph-core</artifactId>\n+                <version>0.5.3</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.janusgraph</groupId>\n+                <artifactId>janusgraph-berkeleyje</artifactId>\n+                <version>0.5.3</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.janusgraph</groupId>\n+                <artifactId>janusgraph-cql</artifactId>\n+                <version>0.5.3</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.janusgraph</groupId>\n+                <artifactId>janusgraph-lucene</artifactId>\n+                <version>0.5.3</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.janusgraph</groupId>\n+                <artifactId>janusgraph-es</artifactId>\n+                <version>0.5.3</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.tinkerpop</groupId>\n+                <artifactId>gremlin-driver</artifactId>\n+                <version>3.4.6</version>\n+            </dependency>\n         </dependencies>\n     </dependencyManagement>\n "
  },
  {
    "sha": "d37b38e44b6289159f1ba8ac733e9a2697ad85d1",
    "filename": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java",
    "status": "modified",
    "additions": 116,
    "deletions": 112,
    "changes": 228,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2019, 2020\n+ * (C) Copyright IBM Corp. 2019, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n@@ -14,14 +14,14 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.ServiceLoader;\n import java.util.Set;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.logging.Logger;\n-import java.util.stream.Collectors;\n \n import com.ibm.fhir.model.resource.DomainResource;\n import com.ibm.fhir.model.resource.Resource;\n@@ -46,19 +46,6 @@ private FHIRRegistry() {\n         providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n-    /**\n-     * Get the singleton instance of this class\n-     *\n-     * <p>This first time that this method is called, all registry resource providers made available through the\n-     * service loader are added to the registry\n-     *\n-     * @return\n-     *     the singleton instance of this class\n-     */\n-    public static FHIRRegistry getInstance() {\n-        return INSTANCE;\n-    }\n-\n     /**\n      * Add a registry resource provider to the registry\n      *\n@@ -68,66 +55,75 @@ public static FHIRRegistry getInstance() {\n      * @param provider\n      *     the registry resource provider to be added\n      */\n-    public void register(FHIRRegistryResourceProvider provider) {\n+    public void addProvider(FHIRRegistryResourceProvider provider) {\n         Objects.requireNonNull(provider);\n         providers.add(provider);\n     }\n \n     /**\n-     * Indicates whether a resource for the given canonical url and resource type exists in the registry\n+     * Get the latest version of a resource for the given url and resource type\n      *\n      * @param url\n-     *     the canonical url\n+     *     the url\n      * @param resourceType\n      *     the resource type\n      * @return\n-     *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n+     *     the latest version of a resource for the given url and resource type if exists, null otherwise\n      */\n-    public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n+    public String getLatestVersion(String url, Class<? extends Resource> resourceType) {\n         if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return false;\n-        }\n-\n-        String id = null;\n-        int index = url.indexOf(\"#\");\n-        if (index != -1) {\n-            id = url.substring(index + 1);\n-            url = url.substring(0, index);\n+            return null;\n         }\n \n-        String version = null;\n-        index = url.indexOf(\"|\");\n+        int index = url.indexOf(\"|\");\n         if (index != -1) {\n-            version = url.substring(index + 1);\n             url = url.substring(0, index);\n         }\n \n-        FHIRRegistryResource registryResource = findRegistryResource(resourceType, url, version);\n-        return (id != null) ? (getResource(registryResource, url, id) != null) : (registryResource != null);\n+        FHIRRegistryResource resource = findRegistryResource(resourceType, url, null);\n+        return (resource != null) ? resource.getVersion().toString() : null;\n     }\n \n     /**\n-     * Get the latest version of a resource for the given url and resource type\n+     * Get a map containing sets of type specific canonical URLs for all profile resources across all providers.\n      *\n-     * @param url\n-     *     the url\n-     * @param resourceType\n-     *     the resource type\n      * @return\n-     *     the latest version of a resource for the given url and resource type if exists, null otherwise\n+     *     the map of sets\n      */\n-    public String getLatestVersion(String url, Class<? extends Resource> resourceType) {\n-        if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n-            return null;\n+    public Map<String, Set<Canonical>> getProfiles() {\n+        Map<String, Set<Canonical>> map = new HashMap<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            for (FHIRRegistryResource r : provider.getProfileResources()) {\n+                map.computeIfAbsent(r.getType(), k -> new LinkedHashSet<>())\n+                    .add(Canonical.of(r.getUrl(), r.getVersion().toString()));\n+            }\n         }\n+        return map;\n+    }\n \n-        int index = url.indexOf(\"|\");\n-        if (index != -1) {\n-            url = url.substring(0, index);\n+    /**\n+     * Get the profiles that constrain the given resource type as a collection of {@link Canonical} URLs\n+     *\n+     * @param type\n+     *     the constrained resource type\n+     * @return\n+     *     the profiles that constrain the given type as a collection of {@link Canonical} URLs\n+     */\n+    public Collection<Canonical> getProfiles(String type) {\n+        Objects.requireNonNull(type);\n+        if (!ModelSupport.isResourceType(type)) {\n+            throw new IllegalArgumentException(\"The type argument must be a valid FHIR resource type name\");\n         }\n-\n-        FHIRRegistryResource resource = findRegistryResource(resourceType, url, null);\n-        return (resource != null) ? resource.getVersion().toString() : null;\n+        List<FHIRRegistryResource> registryResources = new ArrayList<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            registryResources.addAll(provider.getProfileResources(type));\n+        }\n+        Collections.sort(registryResources);\n+        List<Canonical> profiles = new ArrayList<>();\n+        for (FHIRRegistryResource registryResource : registryResources) {\n+            profiles.add(Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString()));\n+        }\n+        return Collections.unmodifiableList(profiles);\n     }\n \n     /**\n@@ -179,31 +175,13 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n     public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n         Objects.requireNonNull(resourceType);\n         requireDefinitionalResourceType(resourceType);\n-        return providers.stream()\n-                .map(provider -> provider.getRegistryResources(resourceType))\n-                .flatMap(Collection::stream)\n-                .map(registryResource -> resourceType.cast(registryResource.getResource()))\n-                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n-    }\n-\n-    /**\n-     * Get the profiles that constrain the given resource type as a collection of {@link Canonical} URLs\n-     *\n-     * @param type\n-     *     the constrained resource type\n-     * @return\n-     *     the profiles that constrain the given type as a collection of {@link Canonical} URLs\n-     */\n-    public Collection<Canonical> getProfiles(String type) {\n-        Objects.requireNonNull(type);\n-        if (!ModelSupport.isResourceType(type)) {\n-            throw new IllegalArgumentException(\"The type argument must be a valid FHIR resource type name\");\n+        List<T> resources = new ArrayList<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            for (FHIRRegistryResource registryResource : provider.getRegistryResources(resourceType)) {\n+                resources.add(resourceType.cast(registryResource.getResource()));\n+            }\n         }\n-        return providers.stream().map(provider -> provider.getProfileResources(type))\n-                .flatMap(Collection::stream)\n-                .sorted()\n-                .map(registryResource -> Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString()))\n-                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+        return Collections.unmodifiableList(resources);\n     }\n \n     /**\n@@ -219,31 +197,71 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n     public Collection<SearchParameter> getSearchParameters(String type) {\n         Objects.requireNonNull(type);\n         SearchParamType.ValueSet.from(type);\n-        return providers.stream()\n-                .map(provider -> provider.getSearchParameterResources(type))\n-                .flatMap(Collection::stream)\n-                .map(registryResource -> registryResource.getResource().as(SearchParameter.class))\n-                .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+        List<SearchParameter> searchParameters = new ArrayList<>();\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            for (FHIRRegistryResource registryResource : provider.getSearchParameterResources(type)) {\n+                searchParameters.add(registryResource.getResource().as(SearchParameter.class));\n+            }\n+        }\n+        return Collections.unmodifiableList(searchParameters);\n+\n+    }\n+\n+    /**\n+     * Indicates whether a resource for the given canonical url and resource type exists in the registry\n+     *\n+     * @param url\n+     *     the canonical url\n+     * @param resourceType\n+     *     the resource type\n+     * @return\n+     *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n+     */\n+    public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n+        if (url == null || resourceType == null || !isDefinitionalResourceType(resourceType)) {\n+            return false;\n+        }\n+\n+        String id = null;\n+        int index = url.indexOf(\"#\");\n+        if (index != -1) {\n+            id = url.substring(index + 1);\n+            url = url.substring(0, index);\n+        }\n+\n+        String version = null;\n+        index = url.indexOf(\"|\");\n+        if (index != -1) {\n+            version = url.substring(index + 1);\n+            url = url.substring(0, index);\n+        }\n+\n+        FHIRRegistryResource registryResource = findRegistryResource(resourceType, url, version);\n+        return (id != null) ? (getResource(registryResource, url, id) != null) : (registryResource != null);\n     }\n \n     private FHIRRegistryResource findRegistryResource(Class<? extends Resource> resourceType, String url, String version) {\n         if (version == null) {\n             // find the latest version of the registry resource with the specified resourceType and url (across all providers)\n-            List<FHIRRegistryResource> registryResources = providers.stream()\n-                    .map(provider -> provider.getRegistryResource(resourceType, url, version))\n-                    .filter(Objects::nonNull)\n-                    .distinct()\n-                    .sorted()\n-                    .collect(Collectors.toList());\n+            Set<FHIRRegistryResource> distinct = new HashSet<>();\n+            for (FHIRRegistryResourceProvider provider : providers) {\n+                FHIRRegistryResource registryResource = provider.getRegistryResource(resourceType, url, version);\n+                if (registryResource != null) {\n+                    distinct.add(registryResource);\n+                }\n+            }\n+            List<FHIRRegistryResource> registryResources = new ArrayList<>(distinct);\n+            Collections.sort(registryResources);\n             return !registryResources.isEmpty() ? registryResources.get(registryResources.size() - 1) : null;\n         }\n-\n         // find the first registry resource with the specified resourceType, url, and version\n-        return providers.stream()\n-                .map(provider -> provider.getRegistryResource(resourceType, url, version))\n-                .filter(Objects::nonNull)\n-                .findFirst()\n-                .orElse(null);\n+        for (FHIRRegistryResourceProvider provider : providers) {\n+            FHIRRegistryResource registryResource = provider.getRegistryResource(resourceType, url, version);\n+            if (registryResource != null) {\n+                return registryResource;\n+            }\n+        }\n+        return null;\n     }\n \n     private Resource getResource(FHIRRegistryResource registryResource, String url, String id) {\n@@ -276,29 +294,15 @@ private Resource getResource(FHIRRegistryResource registryResource, String url,\n     }\n \n     /**\n-     * Given the list of providers, the method scans through the list to find all profile resource, and merge them together\n-     * in order to develop a list of resource specific canonical URLs.\n+     * Get the singleton instance of this class\n+     *\n+     * <p>This first time that this method is called, all registry resource providers made available through the\n+     * service loader are added to the registry\n+     *\n      * @return\n+     *     the singleton instance of this class\n      */\n-    public Map<String,Set<Canonical>> getProfiles() {\n-        Map<String,Set<Canonical>> resourceTypeWithCanonicalUrls = new HashMap<>();\n-        providers.stream().map(provider -> provider.getProfileResources())\n-                .flatMap(Collection::stream)\n-                .forEach(r -> processResource(r, resourceTypeWithCanonicalUrls));\n-        return resourceTypeWithCanonicalUrls;\n-    }\n-\n-    private void processResource(FHIRRegistryResource registryResource, Map<String,Set<Canonical>> resourceTypeWithCanonicalUrls) {\n-        String type = registryResource.getType();\n-        resourceTypeWithCanonicalUrls.compute(type, (k,v) -> checkOrCreateSet(k,v,registryResource));\n-    }\n-\n-    private Set<Canonical> checkOrCreateSet(String k, Set<Canonical> v, FHIRRegistryResource registryResource) {\n-        Canonical canonicalUrl = Canonical.of(registryResource.getUrl(), registryResource.getVersion().toString());\n-        if (v == null) {\n-            v = new HashSet<>();\n-        }\n-        v.add(canonicalUrl);\n-        return v;\n+    public static FHIRRegistry getInstance() {\n+        return INSTANCE;\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "d10462d74d165b2e9fec63c19c78d27ce84e6b4c",
    "filename": "fhir-registry/src/main/java/com/ibm/fhir/registry/resource/FHIRRegistryResource.java",
    "status": "modified",
    "additions": 58,
    "deletions": 4,
    "changes": 62,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/resource/FHIRRegistryResource.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/resource/FHIRRegistryResource.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-registry/src/main/java/com/ibm/fhir/registry/resource/FHIRRegistryResource.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -1,26 +1,38 @@\n /*\n- * (C) Copyright IBM Corp. 2019, 2020\n+ * (C) Copyright IBM Corp. 2019, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n package com.ibm.fhir.registry.resource;\n \n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.requireDefinitionalResourceType;\n+\n import java.util.Objects;\n+import java.util.logging.Logger;\n \n import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.registry.util.FHIRRegistryUtil;\n \n /**\n- * An abstract base class that contains the metadata for a definitional resource (e.g. StructureDefinition)\n+ * A base class that contains the metadata for a definitional resource (e.g. StructureDefinition)\n  */\n-public abstract class FHIRRegistryResource implements Comparable<FHIRRegistryResource> {\n+public class FHIRRegistryResource implements Comparable<FHIRRegistryResource> {\n+    private static final Logger log = Logger.getLogger(FHIRRegistryResource.class.getName());\n+\n+    public static final Version NO_VERSION = Version.from(\"<no version>\");\n+\n     protected final Class<? extends Resource> resourceType;\n     protected final String id;\n     protected final String url;\n     protected final Version version;\n     protected final String kind;\n     protected final String type;\n \n+    protected volatile Resource resource;\n+\n     public FHIRRegistryResource(\n             Class<? extends Resource> resourceType,\n             String id,\n@@ -36,6 +48,18 @@ public FHIRRegistryResource(\n         this.type = type;\n     }\n \n+    public FHIRRegistryResource(\n+            Class<? extends Resource> resourceType,\n+            String id,\n+            String url,\n+            Version version,\n+            String kind,\n+            String type,\n+            Resource resource) {\n+        this(resourceType, id, url, version, kind, type);\n+        this.resource = resource;\n+    }\n+\n     public Class<? extends Resource> getResourceType() {\n         return resourceType;\n     }\n@@ -60,7 +84,9 @@ public String getType() {\n         return type;\n     }\n \n-    public abstract Resource getResource();\n+    public Resource getResource() {\n+        return resource;\n+    }\n \n     public <T extends FHIRRegistryResource> boolean is(Class<T> registryResourceType) {\n         return registryResourceType.isInstance(this);\n@@ -202,4 +228,32 @@ public int compareTo(Version version) {\n             }\n         }\n     }\n+\n+    public static FHIRRegistryResource from(Resource resource) {\n+        Objects.requireNonNull(resource, \"resource\");\n+\n+        Class<? extends Resource> resourceType = resource.getClass();\n+        requireDefinitionalResourceType(resourceType);\n+\n+        String id = resource.getId();\n+        String url = FHIRRegistryUtil.getUrl(resource);\n+        String version = FHIRRegistryUtil.getVersion(resource);\n+        if (url == null) {\n+            log.warning(String.format(\"Could not create FHIRRegistryResource from Resource with resourceType: %s, id: %s, url: %s, and version: %s\", resourceType.getSimpleName(), id, url, version));\n+            return null;\n+        }\n+\n+        String kind = null;\n+        String type = null;\n+        if (resource instanceof StructureDefinition) {\n+            StructureDefinition structureDefinition = (StructureDefinition) resource;\n+            kind = structureDefinition.getKind().getValue();\n+            type = structureDefinition.getType().getValue();\n+        } else if (resource instanceof SearchParameter) {\n+            SearchParameter searchParameter = (SearchParameter) resource;\n+            type = searchParameter.getType().getValue();\n+        }\n+\n+        return new FHIRRegistryResource(resourceType, id, url, (version != null) ? Version.from(version) : FHIRRegistryResource.NO_VERSION, kind, type, resource);\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "ecef145ed7a43c8ee0f79e9c284dcf9aadef2f56",
    "filename": "fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-registry/src/main/java/com/ibm/fhir/registry/spi/FHIRRegistryResourceProvider.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -7,6 +7,7 @@\n package com.ibm.fhir.registry.spi;\n \n import java.util.Collection;\n+import java.util.Collections;\n \n import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n@@ -74,9 +75,9 @@\n      * Get the profiles for all of the resources.\n      *\n      * @return\n-     *  the profile resources from this provider that constrain the resource types\n+     *     the profile resources from this provider that constrain the resource types\n      */\n-    default Collection<FHIRRegistryResource> getProfileResources(){\n-        throw new UnsupportedOperationException(\"The specific implementation does not support this feature\");\n+    default Collection<FHIRRegistryResource> getProfileResources() {\n+        return Collections.emptyList();\n     };\n }\n\\ No newline at end of file"
  },
  {
    "sha": "cd05bd90f2527a4cd8f68bf04c98cfa69a7f819b",
    "filename": "fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -152,7 +152,7 @@ public static Resource loadResource(String path) {\n                 ModelSupport.getResourceType(entry.getResourceType()),\n                 entry.getId(),\n                 entry.getUrl(),\n-                Version.from(entry.getVersion()),\n+                (entry.getVersion() != null) ? Version.from(entry.getVersion()) : FHIRRegistryResource.NO_VERSION,\n                 entry.getKind(),\n                 entry.getType(),\n                 packageDirectory + \"/\" + entry.getFileName()));"
  },
  {
    "sha": "40f26004c805a5d5f99fe88a004475f53a4451b8",
    "filename": "fhir-registry/src/main/java/com/ibm/fhir/registry/util/Index.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/Index.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/Index.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-registry/src/main/java/com/ibm/fhir/registry/util/Index.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2020\n+ * (C) Copyright IBM Corp. 2020, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n@@ -237,7 +237,7 @@ private Entry(\n             this.resourceType = Objects.requireNonNull(resourceType, \"resourceType\");\n             this.id = Objects.requireNonNull(id, \"id\");\n             this.url = Objects.requireNonNull(url, \"url\");\n-            this.version = Objects.requireNonNull(version, \"version\");\n+            this.version = version;\n             this.kind = kind;\n             this.type = type;\n         }\n@@ -284,7 +284,7 @@ public static Entry entry(Resource resource) {\n \n             String url = FHIRRegistryUtil.getUrl(resource);\n             String version = FHIRRegistryUtil.getVersion(resource);\n-            if (url == null || version == null) {\n+            if (url == null) {\n                 return null;\n             }\n "
  },
  {
    "sha": "cee197f6737859513bb5a0f982179fd27ea68d5e",
    "filename": "fhir-registry/src/main/java/com/ibm/fhir/registry/util/PackageRegistryResource.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/PackageRegistryResource.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/PackageRegistryResource.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-registry/src/main/java/com/ibm/fhir/registry/util/PackageRegistryResource.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2020\n+ * (C) Copyright IBM Corp. 2020, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n@@ -19,8 +19,6 @@\n public class PackageRegistryResource extends FHIRRegistryResource {\n     protected final String path;\n \n-    protected volatile Resource resource;\n-\n     public PackageRegistryResource(\n             Class<? extends Resource> resourceType,\n             String id,"
  },
  {
    "sha": "d199a3d5361c050b691c9e374081d4f4ed920913",
    "filename": "fhir-registry/src/test/java/com/ibm/fhir/registry/test/FHIRRegistryLatestVersionTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/test/java/com/ibm/fhir/registry/test/FHIRRegistryLatestVersionTest.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-registry/src/test/java/com/ibm/fhir/registry/test/FHIRRegistryLatestVersionTest.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-registry/src/test/java/com/ibm/fhir/registry/test/FHIRRegistryLatestVersionTest.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -31,17 +31,17 @@\n \n public class FHIRRegistryLatestVersionTest {\n     static {\n-        FHIRRegistry.getInstance().register(\n+        FHIRRegistry.getInstance().addProvider(\n             createRegistryResourceProvider(\n                 createRegistryResource(createStructureDefinition(\"1.0.0\")),\n                 createRegistryResource(createStructureDefinition(\"2.0.0\")),\n                 createRegistryResource(createStructureDefinition(\"3.0.0\"))));\n-        FHIRRegistry.getInstance().register(\n+        FHIRRegistry.getInstance().addProvider(\n             createRegistryResourceProvider(\n                 createRegistryResource(createStructureDefinition(\"4.0.0\")),\n                 createRegistryResource(createStructureDefinition(\"5.0.0\")),\n                 createRegistryResource(createStructureDefinition(\"6.0.0\"))));\n-        FHIRRegistry.getInstance().register(\n+        FHIRRegistry.getInstance().addProvider(\n             createRegistryResourceProvider(\n                 createRegistryResource(createStructureDefinition(\"7.0.0\")),\n                 createRegistryResource(createStructureDefinition(\"8.0.0\")),"
  },
  {
    "sha": "eb9362213b67a1c760f5bfe5ab888e7243adcfbf",
    "filename": "fhir-server/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/pom.xml",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/pom.xml",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/pom.xml?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -65,6 +65,11 @@\n             <artifactId>fhir-persistence</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-term-graph</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n         <dependency>\n             <groupId>${project.groupId}</groupId>\n             <artifactId>fhir-notification</artifactId>"
  },
  {
    "sha": "35d0ca50a8c8abe35c6dda2893cf9bcba35a4fd7",
    "filename": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java",
    "status": "modified",
    "additions": 30,
    "deletions": 1,
    "changes": 31,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -8,6 +8,9 @@\n \n import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_CHECK_REFERENCE_TYPES;\n import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_EXTENDED_CODEABLE_CONCEPT_VALIDATION;\n+import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION;\n+import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED;\n+import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_TIME_LIMIT;\n import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_KAFKA_CONNECTIONPROPS;\n import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_KAFKA_ENABLED;\n import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_KAFKA_TOPICNAME;\n@@ -24,7 +27,9 @@\n import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED;\n import static com.ibm.fhir.config.FHIRConfiguration.PROPERTY_WEBSOCKET_ENABLED;\n \n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -34,6 +39,7 @@\n import javax.servlet.annotation.WebListener;\n import javax.websocket.server.ServerContainer;\n \n+import org.apache.commons.configuration.MapConfiguration;\n import org.owasp.encoder.Encode;\n \n import com.ibm.fhir.config.FHIRConfiguration;\n@@ -52,6 +58,8 @@\n import com.ibm.fhir.server.operation.FHIROperationRegistry;\n import com.ibm.fhir.server.registry.ServerRegistryResourceProvider;\n import com.ibm.fhir.server.util.FHIROperationUtil;\n+import com.ibm.fhir.term.graph.provider.GraphTermServiceProvider;\n+import com.ibm.fhir.term.service.FHIRTermService;\n \n @WebListener(\"IBM FHIR Server Servlet Context Listener\")\n public class FHIRServletContextListener implements ServletContextListener {\n@@ -66,6 +74,8 @@\n     private static FHIRNotificationKafkaPublisher kafkaPublisher = null;\n     private static FHIRNotificationNATSPublisher natsPublisher = null;\n \n+    private GraphTermServiceProvider graphTermServiceProvider;\n+\n     @Override\n     public void contextInitialized(ServletContextEvent event) {\n         if (log.isLoggable(Level.FINER)) {\n@@ -182,10 +192,25 @@ public void contextInitialized(ServletContextEvent event) {\n             if (serverRegistryResourceProviderEnabled) {\n                 log.info(\"Registering ServerRegistryResourceProvider...\");\n                 ServerRegistryResourceProvider provider = new ServerRegistryResourceProvider(persistenceHelper);\n-                FHIRRegistry.getInstance().register(provider);\n+                FHIRRegistry.getInstance().addProvider(provider);\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n+            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (graphTermServiceProviderEnabled) {\n+                log.info(\"Adding GraphTermServiceProvider...\");\n+                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n+                if (propertyGroup == null) {\n+                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n+                } else {\n+                    Map<String, Object> map = new HashMap<>();\n+                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n+                    int timeLimit = fhirConfig.getIntProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_TIME_LIMIT, GraphTermServiceProvider.DEFAULT_TIME_LIMIT);\n+                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map), timeLimit);\n+                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n+                }\n+            }\n+\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n@@ -219,6 +244,10 @@ public void contextDestroyed(ServletContextEvent event) {\n                 natsPublisher.shutdown();\n                 natsPublisher = null;\n             }\n+\n+            if (graphTermServiceProvider != null) {\n+                graphTermServiceProvider.getGraph().close();\n+            }\n         } catch (Exception e) {\n             // Ignore it\n         } finally {"
  },
  {
    "sha": "e1817e7dfb9d38c1f4784a64b550f27b4ca006be",
    "filename": "fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/AbstractOperation.java",
    "status": "modified",
    "additions": 49,
    "deletions": 59,
    "changes": 108,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/AbstractOperation.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/AbstractOperation.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/main/java/com/ibm/fhir/server/operation/spi/AbstractOperation.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * (C) Copyright IBM Corp. 2016,2019\n+ * (C) Copyright IBM Corp. 2016, 2021\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n@@ -8,6 +8,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n import com.ibm.fhir.exception.FHIROperationException;\n import com.ibm.fhir.model.resource.OperationDefinition;\n@@ -16,15 +17,15 @@\n import com.ibm.fhir.model.resource.Resource;\n import com.ibm.fhir.model.type.code.IssueType;\n import com.ibm.fhir.model.type.code.OperationParameterUse;\n+import com.ibm.fhir.model.type.code.ResourceType;\n import com.ibm.fhir.model.util.FHIRUtil;\n import com.ibm.fhir.model.util.ModelSupport;\n \n public abstract class AbstractOperation implements FHIROperation {\n-\n-    protected OperationDefinition definition = null;\n+    protected final OperationDefinition definition;\n \n     public AbstractOperation() {\n-        definition = buildOperationDefinition();\n+        definition = Objects.requireNonNull(buildOperationDefinition(), \"definition\");\n     }\n \n     @Override\n@@ -34,21 +35,22 @@ public OperationDefinition getDefinition() {\n \n     @Override\n     public String getName() {\n-        if (definition.getCode() == null)\n-            return null;\n-        else\n-            return definition.getCode().getValue();\n+        return (definition.getCode() != null) ? definition.getCode().getValue() : null;\n     }\n \n     /**\n      * Validate the input parameters, invoke the operation, validate the output parameters, and return the result.\n      *\n-     * @throws FHIROperationException if input or output parameters fail validation or an exception occurs\n+     * @throws FHIROperationException\n+     *     if input or output parameters fail validation or an exception occurs\n      */\n     @Override\n-    public final Parameters invoke(FHIROperationContext operationContext, Class<? extends Resource> resourceType,\n-            String logicalId, String versionId, Parameters parameters, FHIRResourceHelpers resourceHelper)\n-            throws FHIROperationException {\n+    public final Parameters invoke(\n+            FHIROperationContext operationContext,\n+            Class<? extends Resource> resourceType,\n+            String logicalId, String versionId,\n+            Parameters parameters,\n+            FHIRResourceHelpers resourceHelper) throws FHIROperationException {\n         validateOperationContext(operationContext, resourceType);\n         validateInputParameters(operationContext, resourceType, logicalId, versionId, parameters);\n         Parameters result = doInvoke(operationContext, resourceType, logicalId, versionId, parameters, resourceHelper);\n@@ -65,11 +67,15 @@ protected int countParameters(Parameters parameters, String name) {\n     /**\n      * This is the method that concrete subclasses must implement to perform the operation logic.\n      *\n-     * @return The Parameters object to return or null if there is no response Parameters object to return\n+     * @return\n+     *     the Parameters object to return or null if there is no response Parameters object to return\n      * @throws FHIROperationException\n      */\n-    protected abstract Parameters doInvoke(FHIROperationContext operationContext,\n-            Class<? extends Resource> resourceType, String logicalId, String versionId, Parameters parameters,\n+    protected abstract Parameters doInvoke(\n+            FHIROperationContext operationContext,\n+            Class<? extends Resource> resourceType,\n+            String logicalId, String versionId,\n+            Parameters parameters,\n             FHIRResourceHelpers resourceHelper) throws FHIROperationException;\n \n     protected Parameters.Parameter getParameter(Parameters parameters, String name) {\n@@ -97,7 +103,6 @@ protected abstract Parameters doInvoke(FHIROperationContext operationContext,\n         if (parameters == null) {\n             return result;\n         }\n-\n         for (Parameters.Parameter parameter : parameters.getParameter()) {\n             if (parameter.getName() != null && name.equals(parameter.getName().getValue())) {\n                 result.add(parameter);\n@@ -109,20 +114,22 @@ protected abstract Parameters doInvoke(FHIROperationContext operationContext,\n     protected List<String> getResourceTypeNames() {\n         List<String> resourceTypeNames = new ArrayList<String>();\n         OperationDefinition definition = getDefinition();\n-        for (com.ibm.fhir.model.type.code.ResourceType type : definition.getResource()) {\n+        for (ResourceType type : definition.getResource()) {\n             resourceTypeNames.add(type.getValue());\n         }\n         return resourceTypeNames;\n     }\n \n-    protected void validateInputParameters(FHIROperationContext operationContext,\n-            Class<? extends Resource> resourceType, String logicalId, String versionId, Parameters parameters)\n-            throws FHIROperationException {\n+    protected void validateInputParameters(\n+            FHIROperationContext operationContext,\n+            Class<? extends Resource> resourceType,\n+            String logicalId,\n+            String versionId,\n+            Parameters parameters) throws FHIROperationException {\n         validateParameters(parameters, OperationParameterUse.IN);\n     }\n \n-    protected void validateOperationContext(FHIROperationContext operationContext,\n-            Class<? extends Resource> resourceType) throws FHIROperationException {\n+    protected void validateOperationContext(FHIROperationContext operationContext, Class<? extends Resource> resourceType) throws FHIROperationException {\n         OperationDefinition definition = getDefinition();\n         switch (operationContext.getType()) {\n         case INSTANCE:\n@@ -139,9 +146,7 @@ protected void validateOperationContext(FHIROperationContext operationContext,\n                 String resourceTypeName = resourceType.getSimpleName();\n                 List<String> resourceTypeNames = getResourceTypeNames();\n                 if (!resourceTypeNames.contains(resourceTypeName) && !resourceTypeNames.contains(\"Resource\")) {\n-                    String msg =\n-                            \"Resource type: '\" + resourceTypeName + \"' is not allowed for operation: '\" + getName()\n-                                    + \"'\";\n+                    String msg = \"Resource type: '\" + resourceTypeName + \"' is not allowed for operation: '\" + getName() + \"'\";\n                     throw buildExceptionWithIssue(msg, IssueType.INVALID);\n                 }\n             }\n@@ -180,9 +185,7 @@ protected void validateParameters(Parameters parameters, OperationParameterUse u\n             if (!\"*\".equals(max)) {\n                 int maxValue = Integer.parseInt(max);\n                 if (count > maxValue) {\n-                    String msg =\n-                            \"Number of occurrences of \" + direction + \" parameter: '\" + name\n-                                    + \"' greater than allowed maximum: \" + maxValue;\n+                    String msg = \"Number of occurrences of \" + direction + \" parameter: '\" + name + \"' greater than allowed maximum: \" + maxValue;\n                     throw buildExceptionWithIssue(msg, IssueType.INVALID);\n                 }\n             }\n@@ -191,53 +194,40 @@ protected void validateParameters(Parameters parameters, OperationParameterUse u\n                 for (Parameters.Parameter inputParameter : inputParameters) {\n                     // Check to see if it's a parameter\n                     if (inputParameter.getPart() == null || inputParameter.getPart().isEmpty()) {\n-                        String parameterValueTypeName =\n-                                inputParameter.getResource() != null ? inputParameter.getResource().getClass().getName()\n-                                        : inputParameter.getValue().getClass().getName();\n+                        String parameterValueTypeName = (inputParameter.getResource() != null) ?\n+                                inputParameter.getResource().getClass().getName() :\n+                                    inputParameter.getValue().getClass().getName();\n                         String parameterDefinitionTypeName = parameterDefinition.getType().getValue();\n-                        parameterDefinitionTypeName =\n-                                parameterDefinitionTypeName.substring(0, 1).toUpperCase()\n-                                        + parameterDefinitionTypeName.substring(1);\n+                        parameterDefinitionTypeName = parameterDefinitionTypeName.substring(0, 1).toUpperCase() + parameterDefinitionTypeName.substring(1);\n                         try {\n                             Class<?> parameterValueType, parameterDefinitionType;\n                             parameterValueType = Class.forName(parameterValueTypeName);\n \n                             if (ModelSupport.isResourceType(parameterDefinitionTypeName)) {\n-                                parameterDefinitionType =\n-                                        Class.forName(\"com.ibm.fhir.model.resource.\" + parameterDefinitionTypeName);\n+                                parameterDefinitionType = Class.forName(\"com.ibm.fhir.model.resource.\" + parameterDefinitionTypeName);\n                             } else {\n-                                parameterDefinitionType =\n-                                        Class.forName(\"com.ibm.fhir.model.type.\" + parameterDefinitionTypeName);\n+                                parameterDefinitionType = Class.forName(\"com.ibm.fhir.model.type.\" + parameterDefinitionTypeName);\n                             }\n \n                             if (!parameterDefinitionType.isAssignableFrom(parameterValueType)) {\n-                                String msg =\n-                                        \"Invalid type: '\" + parameterValueTypeName + \"' for \" + direction\n-                                                + \" parameter: '\" + name + \"'\";\n+                                String msg = \"Invalid type: '\" + parameterValueTypeName + \"' for \" + direction + \" parameter: '\" + name + \"'\";\n                                 throw buildExceptionWithIssue(msg, IssueType.INVALID);\n                             }\n                         } catch (FHIROperationException e) {\n                             throw e;\n                         } catch (Exception e) {\n                             throw new FHIROperationException(\"An unexpected error occurred during type checking\", e);\n                         }\n-                        /*\n-                         * if (!parameterValueTypeName.equalsIgnoreCase(parameterDefinition.getType().getValue())) {\n-                         * throw new FHIROperationException(\"Invalid type: '\" + parameterValueTypeName + \"' for \" +\n-                         * direction + \" parameter: '\" + name + \"'\");\n-                         * }\n-                         */\n                     }\n                 }\n             }\n         }\n \n-        // Next, if parameters is not null, verify that each parameter contained in the Parameters object is defined\n-        // in the OperationDefinition. This will root out any extaneous parameters included\n-        // in the Parameters object.\n         if (parameters == null) {\n             return;\n         }\n+\n+        // Verify that each parameter contained in the Parameters object is defined in the OperationDefinition.\n         for (Parameters.Parameter p : parameters.getParameter()) {\n             String name = p.getName().getValue();\n \n@@ -253,14 +243,16 @@ protected void validateParameters(Parameters parameters, OperationParameterUse u\n     }\n \n     /**\n-     * Returns the OperationDefinitionParameter with the specified name or null if it wasn't found.\n+     * Find the operation definition parameter with the specified name.\n      *\n-     * @param parameters the list of parameters from the OperationDefinition\n-     * @param name       the name of the parameter to find\n+     * @param parameters\n+     *     the list of parameters from the OperationDefinition\n+     * @param name\n+     *     the name of the parameter to find\n      * @return\n+     *     the operation definition parameter with the specified name or null if not found\n      */\n-    protected OperationDefinition.Parameter findOpDefParameter(List<OperationDefinition.Parameter> parameters,\n-            String name) {\n+    protected OperationDefinition.Parameter findOpDefParameter(List<OperationDefinition.Parameter> parameters, String name) {\n         for (OperationDefinition.Parameter p : parameters) {\n             if (p.getName().getValue().equals(name)) {\n                 return p;\n@@ -269,13 +261,11 @@ protected void validateParameters(Parameters parameters, OperationParameterUse u\n         return null;\n     }\n \n-    protected FHIROperationException buildExceptionWithIssue(String msg, IssueType issueType)\n-            throws FHIROperationException {\n+    protected FHIROperationException buildExceptionWithIssue(String msg, IssueType issueType) throws FHIROperationException {\n         return buildExceptionWithIssue(msg, issueType, null);\n     }\n \n-    protected FHIROperationException buildExceptionWithIssue(String msg, IssueType issueType, Throwable cause)\n-            throws FHIROperationException {\n+    protected FHIROperationException buildExceptionWithIssue(String msg, IssueType issueType, Throwable cause) throws FHIROperationException {\n         OperationOutcome.Issue ooi = FHIRUtil.buildOperationOutcomeIssue(msg, issueType);\n         return new FHIROperationException(msg, cause).withIssue(ooi);\n     }"
  },
  {
    "sha": "363b80c2354a2f8c99105d7268bf5a54b45dfee3",
    "filename": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResource.java",
    "status": "removed",
    "additions": 0,
    "deletions": 61,
    "changes": 61,
    "blob_url": "https://github.com/IBM/FHIR/blob/1a75d2d5bba4db877a28d2ac55ec6565dfe8458d/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResource.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/1a75d2d5bba4db877a28d2ac55ec6565dfe8458d/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResource.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResource.java?ref=1a75d2d5bba4db877a28d2ac55ec6565dfe8458d",
    "patch": "@@ -1,61 +0,0 @@\n-/*\n- * (C) Copyright IBM Corp. 2020\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-\n-package com.ibm.fhir.server.registry;\n-\n-import java.util.Objects;\n-import java.util.logging.Logger;\n-\n-import com.ibm.fhir.model.resource.Resource;\n-import com.ibm.fhir.model.resource.SearchParameter;\n-import com.ibm.fhir.model.resource.StructureDefinition;\n-import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n-import com.ibm.fhir.registry.util.FHIRRegistryUtil;\n-\n-public class ServerRegistryResource extends FHIRRegistryResource {\n-    private static final Logger log = Logger.getLogger(ServerRegistryResource.class.getName());\n-\n-    private final Resource resource;\n-\n-    public ServerRegistryResource(\n-            Class<? extends Resource> resourceType,\n-            String id,\n-            String url,\n-            Version version,\n-            String kind,\n-            String type,\n-            Resource resource) {\n-        super(resourceType, id, url, version, kind, type);\n-        this.resource = Objects.requireNonNull(resource);\n-    }\n-\n-    @Override\n-    public Resource getResource() {\n-        return resource;\n-    }\n-\n-    public static ServerRegistryResource from(Resource resource) {\n-        Class<? extends Resource> resourceType = resource.getClass();\n-        String id = resource.getId();\n-        String url = FHIRRegistryUtil.getUrl(resource);\n-        String version = FHIRRegistryUtil.getVersion(resource);\n-        if (url == null || version == null) {\n-            log.warning(String.format(\"Could not create ServerRegistryResource from Resource with resourceType: %s, id: %s, url: %s, and version: %s\", resourceType.getSimpleName(), id, url, version));\n-            return null;\n-        }\n-        String kind = null;\n-        String type = null;\n-        if (resource instanceof StructureDefinition) {\n-            StructureDefinition structureDefinition = (StructureDefinition) resource;\n-            kind = structureDefinition.getKind().getValue();\n-            type = structureDefinition.getType().getValue();\n-        } else if (resource instanceof SearchParameter) {\n-            SearchParameter searchParameter = (SearchParameter) resource;\n-            type = searchParameter.getType().getValue();\n-        }\n-        return new ServerRegistryResource(resourceType, id, url, Version.from(version), kind, type, resource);\n-    }\n-}"
  },
  {
    "sha": "132c8ea204b49246fe8633ebfdd021a310f802d5",
    "filename": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -155,7 +155,7 @@ public void afterDelete(FHIRPersistenceEvent event) {\n                 transactionHelper = null;\n \n                 return result.getResource().stream()\n-                        .map(ServerRegistryResource::from)\n+                        .map(FHIRRegistryResource::from)\n                         .filter(Objects::nonNull)\n                         .sorted()\n                         .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n@@ -191,7 +191,7 @@ public void afterDelete(FHIRPersistenceEvent event) {\n             if (result.isSuccess()) {\n                 List<FHIRRegistryResource> registryResources = new ArrayList<>(searchContext.getTotalCount() != null ? searchContext.getTotalCount() : result.getResource().size());\n                 registryResources.addAll(result.getResource().stream()\n-                        .map(ServerRegistryResource::from)\n+                        .map(FHIRRegistryResource::from)\n                         .filter(Objects::nonNull)\n                         .collect(Collectors.toList()));\n \n@@ -201,7 +201,7 @@ public void afterDelete(FHIRPersistenceEvent event) {\n                     searchContext.setPageNumber(++pageNumber);\n                     result = persistence.search(context, resourceType);\n                     registryResources.addAll(result.getResource().stream()\n-                            .map(ServerRegistryResource::from)\n+                            .map(FHIRRegistryResource::from)\n                             .filter(Objects::nonNull)\n                             .collect(Collectors.toList()));\n                 }"
  },
  {
    "sha": "fe9d19a7a4fe3f75fd56c56d16340baf30444d36",
    "filename": "fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/main/java/com/ibm/fhir/server/resources/Capabilities.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -141,7 +141,11 @@ public Response capabilities() {\n             return Response.ok().entity(capabilityStatement).cacheControl(cacheControl).build();\n         } catch (IllegalArgumentException e) {\n             FHIROperationException foe = buildRestException(ERROR_CONSTRUCTING, IssueType.EXCEPTION);\n-            log.log(Level.SEVERE, ERROR_MSG, foe);\n+            if (e.getCause() != null) {\n+                log.log(Level.SEVERE, ERROR_MSG, e.getCause());\n+            } else {\n+                log.log(Level.SEVERE, ERROR_MSG, foe);\n+            }\n             return exceptionResponse(e, issueListToStatus(foe.getIssues()));\n         } catch (Exception e) {\n             log.log(Level.SEVERE, ERROR_MSG, e);"
  },
  {
    "sha": "ef5921c9187fdc443b09314344d2250e0d80f13e",
    "filename": "fhir-server/src/test/java/com/ibm/fhir/server/test/InteractionValidationConfigTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/test/java/com/ibm/fhir/server/test/InteractionValidationConfigTest.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/test/java/com/ibm/fhir/server/test/InteractionValidationConfigTest.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/test/java/com/ibm/fhir/server/test/InteractionValidationConfigTest.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -69,7 +69,7 @@\n     @BeforeClass\n     void setup() throws FHIRException {\n         FHIRConfiguration.setConfigHome(\"src/test/resources\");\n-        FHIRRegistry.getInstance().register(new MockRegistryResourceProvider());\n+        FHIRRegistry.getInstance().addProvider(new MockRegistryResourceProvider());\n         persistence = new MockPersistenceImpl();\n         helper = new FHIRRestHelper(persistence);\n     }"
  },
  {
    "sha": "662ef51c941987de6ee4aa2ddda05a7bc4f7839f",
    "filename": "fhir-server/src/test/java/com/ibm/fhir/server/test/ProfileValidationConfigTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/test/java/com/ibm/fhir/server/test/ProfileValidationConfigTest.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-server/src/test/java/com/ibm/fhir/server/test/ProfileValidationConfigTest.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-server/src/test/java/com/ibm/fhir/server/test/ProfileValidationConfigTest.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -67,7 +67,7 @@\n     void setup() throws FHIRException {\n         FHIRConfiguration.setConfigHome(\"src/test/resources\");\n         FHIRRequestContext.get().setTenantId(\"profileValidationConfigTest\");\n-        FHIRRegistry.getInstance().register(new MockRegistryResourceProvider());\n+        FHIRRegistry.getInstance().addProvider(new MockRegistryResourceProvider());\n         persistence = new MockPersistenceImpl();\n         helper = new FHIRRestHelper(persistence);\n     }"
  },
  {
    "sha": "d0990053e4306d6105928d960189c0128ab6eca5",
    "filename": "fhir-term-graph/docker/docker-compose.yml",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/docker/docker-compose.yml",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/docker/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/docker/docker-compose.yml?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,33 @@\n+version: \"3\"\n+\n+services:\n+  cassandra:\n+    image: cassandra:3.11.0\n+    container_name: fhir-cassandra\n+    ports:\n+      - \"9042:9042\"\n+      - \"9160:9160\"\n+    networks:\n+      - fhir-network\n+\n+  elasticsearch:\n+    image: elasticsearch:7.6.2\n+    container_name: fhir-elasticsearch\n+    environment:\n+      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n+      - \"http.host=0.0.0.0\"\n+      - \"network.host=0.0.0.0\"\n+      - \"transport.host=127.0.0.1\"\n+      - \"cluster.name=docker-cluster\"\n+      - \"xpack.security.enabled=false\"\n+      - \"discovery.zen.minimum_master_nodes=1\"\n+    ports:\n+      - \"9200:9200\"\n+    networks:\n+      - fhir-network\n+\n+networks:\n+  fhir-network:\n+volumes:\n+  fhir-default-data:\n+"
  },
  {
    "sha": "55bba7ae53b9b9f2a0d957a5af73ada167e83097",
    "filename": "fhir-term-graph/pom.xml",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/pom.xml",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/pom.xml",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/pom.xml?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,56 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.ibm.fhir</groupId>\n+        <artifactId>fhir-parent</artifactId>\n+        <version>4.6.0-SNAPSHOT</version>\n+        <relativePath>../fhir-parent</relativePath>\n+    </parent>\n+    <artifactId>fhir-term-graph</artifactId>\n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>fhir-term</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.janusgraph</groupId>\n+            <artifactId>janusgraph-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.janusgraph</groupId>\n+            <artifactId>janusgraph-berkeleyje</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.janusgraph</groupId>\n+            <artifactId>janusgraph-cql</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.janusgraph</groupId>\n+            <artifactId>janusgraph-lucene</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.janusgraph</groupId>\n+            <artifactId>janusgraph-es</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.tinkerpop</groupId>\n+            <artifactId>gremlin-driver</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-nop</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-cli</groupId>\n+            <artifactId>commons-cli</artifactId>\n+        </dependency>\n+    </dependencies>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "b446773c16c1d2ce689bb64af1e18ce421f768bd",
    "filename": "fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/FHIRTermGraph.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/FHIRTermGraph.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/FHIRTermGraph.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/FHIRTermGraph.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,91 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.term.graph;\n+\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;\n+import org.janusgraph.core.JanusGraph;\n+import org.janusgraph.core.JanusGraphIndexQuery.Result;\n+import org.janusgraph.core.JanusGraphVertex;\n+\n+/*\n+ * A graph that represents FHIR CodeSystem content and is backed by a graph database (Janusgraph)\n+ */\n+public interface FHIRTermGraph {\n+    /**\n+     * The edge label that represents an is-a relationship in the graph\n+     */\n+    public static final String IS_A = \"isa\";\n+\n+    /**\n+     * Get the configuration used to create this {@link FHIRTermGraph}.\n+     *\n+     * @return\n+     *     the configuration\n+     */\n+    Configuration configuration();\n+\n+    /**\n+     * Get the underlying {@link JanusGraph} instance behind this {@link FHIRTermGraph}.\n+     *\n+     * @return\n+     *     the {@link JanusGraph} instance\n+     */\n+    JanusGraph getJanusGraph();\n+\n+    /**\n+     * Get the graph traversal source associated with the underlying {@link JanusGraph} instance.\n+     *\n+     * @return\n+     *     the graph traversal source\n+     */\n+    GraphTraversalSource traversal();\n+\n+    /**\n+     * Query the indexing backend using the <a href=\"https://lucene.apache.org/core/2_9_4/queryparsersyntax.html\">Lucene query parser syntax</a>.\n+     *\n+     * @param query\n+     *     the query\n+     * @return\n+     *     results of the specified query\n+     */\n+    default Stream<Result<JanusGraphVertex>> indexQuery(String query) {\n+        return indexQuery(query, Integer.MAX_VALUE - 1, 0);\n+    }\n+\n+    /**\n+     * Query the indexing backend using the <a href=\"https://lucene.apache.org/core/2_9_4/queryparsersyntax.html\">Lucene query parser syntax</a>\n+     * and the provided limit and offset.\n+     *\n+     * @param query\n+     *     the query\n+     * @param limit\n+     *     the limit\n+     * @param offset\n+     *     the offset\n+     * @return\n+     *     results of the specified query using the provided limit and offset\n+     */\n+    Stream<Result<JanusGraphVertex>> indexQuery(String query, int limit, int offset);\n+\n+    /**\n+     * Close the graph and its underlying resources.\n+     */\n+    void close();\n+\n+    /**\n+     * Drop the graph.\n+     */\n+    void drop();\n+\n+    /**\n+     * Drop all vertices and edges from the graph.\n+     */\n+    void dropAllVertices();\n+}"
  },
  {
    "sha": "58288d3e4781aeb816888daecf3ccccb5984196e",
    "filename": "fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/factory/FHIRTermGraphFactory.java",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/factory/FHIRTermGraphFactory.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/factory/FHIRTermGraphFactory.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/factory/FHIRTermGraphFactory.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.term.graph.factory;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+import com.ibm.fhir.term.graph.FHIRTermGraph;\n+import com.ibm.fhir.term.graph.impl.FHIRTermGraphImpl;\n+\n+/*\n+ * Factory class used to create FHIRTermGraph instances\n+ */\n+public final class FHIRTermGraphFactory {\n+    private FHIRTermGraphFactory() { }\n+\n+    /**\n+     * Create a {@link FHIRTermGraph} instance using the given configuration properties file.\n+     *\n+     * @param propFileName\n+     *     the configuration properties file\n+     * @return\n+     *     the {@link FHIRTermGraph} instance\n+     */\n+    public static FHIRTermGraph open(String propFileName) {\n+        try {\n+            return open(new PropertiesConfiguration(propFileName));\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    /**\n+     * Create a {@link FHIRTermGraph} instance using the given configuration object.\n+     *\n+     * @param configuration\n+     *     the configuration object\n+     * @return\n+     *     the {@link FHIRTermGraph} instance\n+     */\n+    public static FHIRTermGraph open(Configuration configuration) {\n+        return new FHIRTermGraphImpl(configuration);\n+    }\n+}"
  },
  {
    "sha": "a98d006dc73b02a1ba41bceecec8633a05c5da3f",
    "filename": "fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/impl/FHIRTermGraphImpl.java",
    "status": "added",
    "additions": 212,
    "deletions": 0,
    "changes": 212,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/impl/FHIRTermGraphImpl.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/impl/FHIRTermGraphImpl.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/impl/FHIRTermGraphImpl.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,212 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.term.graph.impl;\n+\n+import static com.ibm.fhir.term.graph.util.FHIRTermGraphUtil.setRootLoggerLevel;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.JanusGraph;\n+import org.janusgraph.core.JanusGraphFactory;\n+import org.janusgraph.core.JanusGraphIndexQuery.Result;\n+import org.janusgraph.core.JanusGraphVertex;\n+import org.janusgraph.core.PropertyKey;\n+import org.janusgraph.core.RelationType;\n+import org.janusgraph.core.schema.JanusGraphManagement;\n+import org.janusgraph.core.schema.Mapping;\n+\n+import com.ibm.fhir.term.graph.FHIRTermGraph;\n+\n+public class FHIRTermGraphImpl implements FHIRTermGraph {\n+    private static final Logger log = Logger.getLogger(FHIRTermGraphImpl.class.getName());\n+\n+    private static final String STORAGE_READ_ONLY = \"storage.read-only\";\n+\n+    private JanusGraph graph;\n+    private GraphTraversalSource traversal;\n+\n+    public FHIRTermGraphImpl(Configuration configuration) {\n+        requireNonNull(configuration);\n+        try {\n+            graph = open(configuration);\n+            traversal = graph.traversal();\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    private JanusGraph open(Configuration configuration) {\n+        log.info(\"Opening graph...\");\n+\n+        boolean readOnly = configuration.getBoolean(STORAGE_READ_ONLY, false);\n+        configuration.setProperty(STORAGE_READ_ONLY, false);\n+\n+        setRootLoggerLevel(ch.qos.logback.classic.Level.INFO);\n+        JanusGraph graph = JanusGraphFactory.open(configuration);\n+\n+        if (!schemaExists(graph)) {\n+            createSchema(graph);\n+        }\n+\n+        if (readOnly) {\n+            graph.close();\n+            configuration.setProperty(STORAGE_READ_ONLY, true);\n+            graph = JanusGraphFactory.open(configuration);\n+        }\n+\n+        return graph;\n+    }\n+\n+    private void createSchema(JanusGraph graph) {\n+        log.info(\"Creating schema...\");\n+\n+        JanusGraphManagement management = graph.openManagement();\n+\n+        // property keys (indexed)\n+        PropertyKey version = management.makePropertyKey(\"version\").dataType(String.class).make();\n+        PropertyKey code = management.makePropertyKey(\"code\").dataType(String.class).make();\n+        PropertyKey codeLowerCase = management.makePropertyKey(\"codeLowerCase\").dataType(String.class).make();\n+        PropertyKey display = management.makePropertyKey(\"display\").dataType(String.class).make();\n+        PropertyKey url = management.makePropertyKey(\"url\").dataType(String.class).make();\n+        PropertyKey value = management.makePropertyKey(\"value\").dataType(String.class).make();\n+\n+        PropertyKey valueBoolean = management.makePropertyKey(\"valueBoolean\").dataType(Boolean.class).make();\n+        PropertyKey valueCode = management.makePropertyKey(\"valueCode\").dataType(String.class).make();\n+        PropertyKey valueDateTimeLong = management.makePropertyKey(\"valueDateTimeLong\").dataType(Long.class).make();\n+        PropertyKey valueDecimal = management.makePropertyKey(\"valueDecimal\").dataType(Double.class).make();\n+        PropertyKey valueInteger = management.makePropertyKey(\"valueInteger\").dataType(Integer.class).make();\n+        PropertyKey valueString = management.makePropertyKey(\"valueString\").dataType(String.class).make();\n+\n+        // property keys (not indexed)\n+        management.makePropertyKey(\"count\").dataType(Integer.class).make();\n+        management.makePropertyKey(\"group\").dataType(String.class).make();\n+        management.makePropertyKey(\"language\").dataType(String.class).make();\n+        management.makePropertyKey(\"system\").dataType(String.class).make();\n+        management.makePropertyKey(\"use\").dataType(String.class).make();\n+        management.makePropertyKey(\"valueDateTime\").dataType(String.class).make();\n+        management.makePropertyKey(\"valueDecimalString\").dataType(String.class).make();\n+\n+        // vertex labels\n+        management.makeVertexLabel(\"CodeSystem\").make();\n+        management.makeVertexLabel(\"Concept\").make();\n+        management.makeVertexLabel(\"Designation\").make();\n+        management.makeVertexLabel(\"Property_\").make();\n+\n+        // edge labels\n+        management.makeEdgeLabel(FHIRTermGraph.IS_A).make();\n+        management.makeEdgeLabel(\"concept\").make();\n+        management.makeEdgeLabel(\"designation\").make();\n+        management.makeEdgeLabel(\"property_\").make();\n+\n+        // composite indexes\n+        management.buildIndex(\"byCode\", Vertex.class).addKey(code).buildCompositeIndex();\n+        management.buildIndex(\"byCodeLowerCase\", Vertex.class).addKey(codeLowerCase).buildCompositeIndex();\n+        management.buildIndex(\"byDisplay\", Vertex.class).addKey(display).buildCompositeIndex();\n+        management.buildIndex(\"byUrl\", Vertex.class).addKey(url).buildCompositeIndex();\n+        management.buildIndex(\"byUrlAndVersion\", Vertex.class).addKey(url).addKey(version).buildCompositeIndex();\n+        management.buildIndex(\"byValue\", Vertex.class).addKey(value).buildCompositeIndex();\n+\n+        management.buildIndex(\"byValueBoolean\", Vertex.class).addKey(valueBoolean).buildCompositeIndex();\n+        management.buildIndex(\"byValueCode\", Vertex.class).addKey(valueCode).buildCompositeIndex();\n+        management.buildIndex(\"byValueDateTimeLong\", Vertex.class).addKey(valueDateTimeLong).buildCompositeIndex();\n+        management.buildIndex(\"byValueDecimal\", Vertex.class).addKey(valueDecimal).buildCompositeIndex();\n+        management.buildIndex(\"byValueInteger\", Vertex.class).addKey(valueInteger).buildCompositeIndex();\n+        management.buildIndex(\"byValueString\", Vertex.class).addKey(valueString).buildCompositeIndex();\n+\n+        // mixed indexes\n+        management.buildIndex(\"vertices\", Vertex.class)\n+            .addKey(display, Mapping.STRING.asParameter())\n+            .addKey(value, Mapping.STRING.asParameter())\n+            .addKey(valueString, Mapping.STRING.asParameter())\n+            .addKey(valueCode, Mapping.STRING.asParameter())\n+            .buildMixedIndex(\"search\");\n+\n+        log.info(System.lineSeparator() + management.printSchema());\n+\n+        management.commit();\n+    }\n+\n+    private boolean schemaExists(JanusGraph graph) {\n+        JanusGraphManagement management = graph.openManagement();\n+        if (management.getRelationTypes(RelationType.class).iterator().hasNext()) {\n+            management.rollback();\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Configuration configuration() {\n+        return graph.configuration();\n+    }\n+\n+    @Override\n+    public JanusGraph getJanusGraph() {\n+        return graph;\n+    }\n+\n+    @Override\n+    public GraphTraversalSource traversal() {\n+        return traversal;\n+    }\n+\n+    @Override\n+    public Stream<Result<JanusGraphVertex>> indexQuery(String query, int limit, int offset) {\n+        return graph.indexQuery(\"vertices\", query).limit(limit).offset(offset).vertexStream();\n+    }\n+\n+    @Override\n+    public void close() {\n+        log.info(\"Closing graph...\");\n+        try {\n+            if (traversal != null) {\n+                traversal.close();\n+            }\n+            if (graph != null) {\n+                graph.close();\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.SEVERE, \"An error occured while closing graph\", e);\n+        } finally {\n+            traversal = null;\n+            graph = null;\n+        }\n+    }\n+\n+    @Override\n+    public void drop() {\n+        log.info(\"Dropping graph...\");\n+        try {\n+            if (traversal != null) {\n+                traversal.close();\n+            }\n+            if (graph != null) {\n+                JanusGraphFactory.drop(graph);\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.SEVERE, \"An error occurred while dropping graph\");\n+        } finally {\n+            traversal = null;\n+            graph = null;\n+        }\n+    }\n+\n+    @Override\n+    public void dropAllVertices() {\n+        log.info(\"Dropping all vertices...\");\n+        if (traversal != null) {\n+            traversal.V().drop().iterate();\n+            traversal.tx().commit();\n+        }\n+    }\n+}"
  },
  {
    "sha": "9686901a0fef7cb5b490f18c5213230b422040e4",
    "filename": "fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/FHIRTermGraphLoader.java",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/FHIRTermGraphLoader.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/FHIRTermGraphLoader.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/FHIRTermGraphLoader.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.term.graph.loader;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.cli.Options;\n+\n+import com.ibm.fhir.term.graph.FHIRTermGraph;\n+\n+public interface FHIRTermGraphLoader {\n+    enum Type {\n+        CODESYSTEM {\n+            @Override\n+            public Options options() {\n+                return new Options()\n+                    .addRequiredOption(\"config\", null, true, \"Configuration properties file\")\n+                    .addOption(\"url\", null, true, \"CodeSystem url\")\n+                    .addOption(\"file\", null, true, \"CodeSystem file\");\n+            }\n+        },\n+        SNOMED {\n+            @Override\n+            public Options options() {\n+                return new Options()\n+                    .addRequiredOption(\"config\", null, true, \"Configuration properties file\")\n+                    .addRequiredOption(\"base\", null, true, \"SNOMED-CT base directory\")\n+                    .addRequiredOption(\"concept\", null, true, \"SNOMED-CT concept file\")\n+                    .addRequiredOption(\"relation\", null, true, \"SNOMED-CT relationship file\")\n+                    .addRequiredOption(\"desc\", null, true, \"SNOMED-CT description file\")\n+                    .addRequiredOption(\"lang\", null, true, \"SNOMED-CT language refset file\")\n+                    .addOption(\"labels\", null, true, \"labels\");\n+            }\n+        },\n+        UMLS {\n+            @Override\n+            public Options options() {\n+                return new Options()\n+                    .addRequiredOption(\"config\", null, true, \"Configuration properties file\")\n+                    .addRequiredOption(\"base\", null, true, \"UMLS base directory\")\n+                    .addOption(\"labels\", null, true, \"labels\");\n+            }\n+        };\n+\n+        public abstract Options options();\n+    }\n+\n+    /**\n+     * Load the {@link FHIRTermGraph}.\n+     */\n+    void load();\n+\n+    /**\n+     * Close the loader and its underlying resources.\n+     */\n+    void close();\n+\n+    /**\n+     * Get the options used to create this {@link FHIRTermGraphLoader}.\n+     *\n+     * @return\n+     *     the options\n+     */\n+    Map<String, String> options();\n+\n+    /**\n+     * Get the underlying {@link FHIRTermGraph} instance.\n+     *\n+     * @return\n+     *     the {@link FHIRTermGraph} instance\n+     */\n+    FHIRTermGraph getGraph();\n+}"
  },
  {
    "sha": "f94091215d597d48aeab1421bae1f28f829ab32d",
    "filename": "fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/factory/FHIRTermGraphLoaderFactory.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/factory/FHIRTermGraphLoaderFactory.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/factory/FHIRTermGraphLoaderFactory.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/factory/FHIRTermGraphLoaderFactory.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.term.graph.loader.factory;\n+\n+import java.util.Map;\n+\n+import com.ibm.fhir.term.graph.loader.FHIRTermGraphLoader;\n+import com.ibm.fhir.term.graph.loader.FHIRTermGraphLoader.Type;\n+import com.ibm.fhir.term.graph.loader.impl.CodeSystemTermGraphLoader;\n+import com.ibm.fhir.term.graph.loader.impl.SnomedTermGraphLoader;\n+import com.ibm.fhir.term.graph.loader.impl.UMLSTermGraphLoader;\n+\n+/*\n+ * Factory class used to create FHIRTermGraphLoader instances\n+ */\n+public class FHIRTermGraphLoaderFactory {\n+    /**\n+     * Create {@link FHIRTermGraphLoader} instance using the provided type and options map.\n+     *\n+     * @param type\n+     *     the type\n+     * @param options\n+     *     the options map\n+     * @return\n+     *     a {@link FHIRTermGraphLoader} instance\n+     */\n+    public static FHIRTermGraphLoader create(Type type, Map<String, String> options) {\n+        switch (type) {\n+        case CODESYSTEM:\n+            return new CodeSystemTermGraphLoader(options);\n+        case SNOMED:\n+            return new SnomedTermGraphLoader(options);\n+        case UMLS:\n+            return new UMLSTermGraphLoader(options);\n+        default:\n+            throw new IllegalArgumentException(\"Unknown type: \" + type);\n+        }\n+    }\n+}"
  },
  {
    "sha": "5273502c78e3841419d84e21001f9c708b3a7362",
    "filename": "fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/AbstractTermGraphLoader.java",
    "status": "added",
    "additions": 88,
    "deletions": 0,
    "changes": 88,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/AbstractTermGraphLoader.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/AbstractTermGraphLoader.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/AbstractTermGraphLoader.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.term.graph.loader.impl;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;\n+import org.janusgraph.core.JanusGraph;\n+\n+import com.ibm.fhir.term.graph.FHIRTermGraph;\n+import com.ibm.fhir.term.graph.factory.FHIRTermGraphFactory;\n+import com.ibm.fhir.term.graph.loader.FHIRTermGraphLoader;\n+import com.ibm.fhir.term.graph.loader.util.LabelFilter;\n+\n+public abstract class AbstractTermGraphLoader implements FHIRTermGraphLoader {\n+    protected final Map<String, String> options;\n+    protected final FHIRTermGraph graph;\n+    protected final JanusGraph janusGraph;\n+    protected final GraphTraversalSource g;\n+    protected final LabelFilter labelFilter;\n+\n+    public AbstractTermGraphLoader(Map<String, String> options) {\n+        this.options = Objects.requireNonNull(options, \"options\");\n+\n+        String propFileName = options.get(\"config\");\n+        graph = FHIRTermGraphFactory.open(propFileName);\n+        janusGraph = graph.getJanusGraph();\n+        g = graph.traversal();\n+\n+        // create label filter\n+        labelFilter = createLabelFilter(options);\n+    }\n+\n+    public AbstractTermGraphLoader(Map<String, String> options, Configuration configuration) {\n+        this.options = Objects.requireNonNull(options, \"options\");\n+        Objects.requireNonNull(configuration, \"configuration\");\n+\n+        graph = FHIRTermGraphFactory.open(configuration);\n+        janusGraph = graph.getJanusGraph();\n+        g = graph.traversal();\n+\n+        // create label filter\n+        labelFilter = createLabelFilter(options);\n+    }\n+\n+    public AbstractTermGraphLoader(Map<String, String> options, FHIRTermGraph graph) {\n+        this.options = Objects.requireNonNull(options, \"options\");\n+\n+        this.graph = Objects.requireNonNull(graph, \"graph\");\n+        janusGraph = graph.getJanusGraph();\n+        g = graph.traversal();\n+\n+        // create label filter\n+        labelFilter = createLabelFilter(options);\n+    }\n+\n+    @Override\n+    public abstract void load();\n+\n+    @Override\n+    public final void close() {\n+        graph.close();\n+    }\n+\n+    @Override\n+    public final Map<String, String> options() {\n+        return options;\n+    }\n+\n+    @Override\n+    public final FHIRTermGraph getGraph() {\n+        return graph;\n+    }\n+\n+    protected LabelFilter createLabelFilter(Map<String, String> options) {\n+        return options.containsKey(\"labels\") ?\n+                new LabelFilter(new HashSet<>(Arrays.asList(options.get(\"labels\").split(\",\")))) :\n+                    LabelFilter.ACCEPT_ALL;\n+    }\n+}"
  },
  {
    "sha": "f552a9ce12598b5beef21cb81f028f86eeab9cdc",
    "filename": "fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/CodeSystemTermGraphLoader.java",
    "status": "added",
    "additions": 224,
    "deletions": 0,
    "changes": 224,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/CodeSystemTermGraphLoader.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/CodeSystemTermGraphLoader.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/CodeSystemTermGraphLoader.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,224 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.term.graph.loader.impl;\n+\n+import static com.ibm.fhir.term.graph.loader.util.FHIRTermGraphLoaderUtil.toMap;\n+import static com.ibm.fhir.term.graph.util.FHIRTermGraphUtil.toLong;\n+import static com.ibm.fhir.term.graph.util.FHIRTermGraphUtil.toObject;\n+import static com.ibm.fhir.term.util.CodeSystemSupport.getConcepts;\n+import static com.ibm.fhir.term.util.CodeSystemSupport.normalize;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+\n+import com.ibm.fhir.model.format.Format;\n+import com.ibm.fhir.model.parser.FHIRParser;\n+import com.ibm.fhir.model.resource.CodeSystem;\n+import com.ibm.fhir.model.resource.CodeSystem.Concept;\n+import com.ibm.fhir.model.resource.CodeSystem.Concept.Designation;\n+import com.ibm.fhir.model.resource.CodeSystem.Concept.Property;\n+import com.ibm.fhir.model.type.DateTime;\n+import com.ibm.fhir.model.type.Decimal;\n+import com.ibm.fhir.model.type.Element;\n+import com.ibm.fhir.registry.FHIRRegistry;\n+import com.ibm.fhir.term.graph.FHIRTermGraph;\n+import com.ibm.fhir.term.graph.loader.FHIRTermGraphLoader;\n+\n+public class CodeSystemTermGraphLoader extends AbstractTermGraphLoader {\n+    private static final Logger log = Logger.getLogger(CodeSystemTermGraphLoader.class.getName());\n+\n+    private final CodeSystem codeSystem;\n+    private final Set<Concept> concepts;\n+    private final Map<Concept, Vertex> conceptVertexMap;\n+\n+    private Vertex codeSystemVertex = null;\n+\n+    public CodeSystemTermGraphLoader(Map<String, String> options) {\n+        super(options);\n+\n+        CodeSystem codeSystem = null;\n+\n+        if (options.containsKey(\"file\")) {\n+            // load code system from file\n+            try (InputStream in = new FileInputStream(options.get(\"file\"))) {\n+                codeSystem = FHIRParser.parser(Format.JSON).parse(in);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else if (options.containsKey(\"url\")) {\n+            // get code system from registry\n+            codeSystem = FHIRRegistry.getInstance().getResource(options.get(\"url\"), CodeSystem.class);\n+        }\n+\n+        this.codeSystem = Objects.requireNonNull(codeSystem, \"codeSystem\");\n+        concepts = getConcepts(codeSystem);\n+        conceptVertexMap = new HashMap<>();\n+    }\n+\n+    public CodeSystemTermGraphLoader(Configuration configuration, CodeSystem codeSystem) {\n+        super(Collections.emptyMap(), configuration);\n+\n+        this.codeSystem = Objects.requireNonNull(codeSystem, \"codeSystem\");\n+        concepts = getConcepts(codeSystem);\n+        conceptVertexMap = new HashMap<>();\n+    }\n+\n+    public CodeSystemTermGraphLoader(FHIRTermGraph graph, CodeSystem codeSystem) {\n+        super(Collections.emptyMap(), graph);\n+\n+        this.codeSystem = Objects.requireNonNull(codeSystem, \"codeSystem\");\n+        concepts = getConcepts(codeSystem);\n+        conceptVertexMap = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void load() {\n+        createCodeSystemVertex();\n+        createConceptVertices();\n+        createEdges();\n+    }\n+\n+    public CodeSystem getCodeSystem() {\n+        return codeSystem;\n+    }\n+\n+    private void createCodeSystemVertex() {\n+        String url = codeSystem.getUrl().getValue();\n+\n+        codeSystemVertex = g.addV(\"CodeSystem\")\n+                .property(\"url\", url)\n+                .property(\"count\", concepts.size())\n+                .next();\n+\n+        if (codeSystem.getVersion() != null) {\n+            g.V(codeSystemVertex)\n+                .property(\"version\", codeSystem.getVersion().getValue())\n+                .next();\n+        }\n+\n+        g.tx().commit();\n+    }\n+\n+    private void createConceptVertices() {\n+        for (Concept concept : concepts) {\n+            String code = concept.getCode().getValue();\n+            Vertex conceptVertex = g.addV(\"Concept\")\n+                    .property(\"code\", code)\n+                    .property(\"codeLowerCase\", normalize(code))\n+                    .next();\n+\n+            if (concept.getDisplay() != null) {\n+                String display = concept.getDisplay().getValue();\n+                g.V(conceptVertex)\n+                    .property(\"display\", display)\n+                    .next();\n+            }\n+\n+            for (Designation designation : concept.getDesignation()) {\n+                Vertex designationVertex = g.addV(\"Designation\")\n+                        .property(\"value\", designation.getValue().getValue())\n+                        .next();\n+\n+                if (designation.getUse() != null) {\n+                    g.V(designationVertex)\n+                        .property(\"use\", designation.getUse().getCode().getValue())\n+                        .next();\n+                }\n+\n+                if (designation.getLanguage() != null) {\n+                    g.V(designationVertex)\n+                        .property(\"language\", designation.getLanguage().getValue())\n+                        .next();\n+                }\n+\n+                g.V(conceptVertex).addE(\"designation\").to(designationVertex).next();\n+            }\n+\n+            for (Property property : concept.getProperty()) {\n+                Element value = property.getValue();\n+\n+                String key = \"value\" + value.getClass().getSimpleName();\n+\n+                Vertex propertyVertex = g.addV(\"Property_\")\n+                        .property(\"code\", property.getCode().getValue())\n+                        .property(key, toObject(value))\n+                        .next();\n+\n+                if (value.is(DateTime.class)) {\n+                    g.V(propertyVertex).property(\"valueDateTimeLong\", toLong(value.as(DateTime.class))).next();\n+                } else if (value.is(Decimal.class)) {\n+                    g.V(propertyVertex).property(\"valueDecimalString\", value.as(Decimal.class).getValue().toPlainString()).next();\n+                }\n+\n+                g.V(conceptVertex).addE(\"property_\").to(propertyVertex).next();\n+            }\n+\n+            g.V(codeSystemVertex).addE(\"concept\").to(conceptVertex).next();\n+\n+            conceptVertexMap.put(concept, conceptVertex);\n+        }\n+\n+        g.tx().commit();\n+    }\n+\n+    private void createEdges() {\n+        for (Concept concept : concepts) {\n+            Vertex v = conceptVertexMap.get(concept);\n+            for (Concept child : concept.getConcept()) {\n+                Vertex w = conceptVertexMap.get(child);\n+                g.V(w).addE(FHIRTermGraph.IS_A).to(v).next();\n+            }\n+        }\n+\n+        g.tx().commit();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Options options = null;\n+        CodeSystemTermGraphLoader loader = null;\n+        try {\n+            long start = System.currentTimeMillis();\n+\n+            options = FHIRTermGraphLoader.Type.CODESYSTEM.options();\n+\n+            CommandLineParser parser = new DefaultParser();\n+            CommandLine commandLine = parser.parse(options, args);\n+\n+            loader = new CodeSystemTermGraphLoader(toMap(commandLine));\n+            loader.load();\n+\n+            long end = System.currentTimeMillis();\n+\n+            log.info(\"Loading time (milliseconds): \" + (end - start));\n+        } catch (MissingOptionException e) {\n+            System.out.println(\"MissingOptionException: \" + e.getMessage());\n+            HelpFormatter formatter = new HelpFormatter();\n+            formatter.printHelp(\"CodeSystemTermGraphLoader\", options);\n+        } catch (Exception e) {\n+            System.out.println(\"An error occurred: \" + e.getMessage());\n+        } finally {\n+            if (loader != null) {\n+                loader.close();\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "057b028787c0c2fe46eec6dbb1d940080680d117",
    "filename": "fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/SnomedTermGraphLoader.java",
    "status": "added",
    "additions": 318,
    "deletions": 0,
    "changes": 318,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/SnomedTermGraphLoader.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/SnomedTermGraphLoader.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/SnomedTermGraphLoader.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,318 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.term.graph.loader.impl;\n+\n+import static com.ibm.fhir.term.graph.loader.util.FHIRTermGraphLoaderUtil.toLabel;\n+import static com.ibm.fhir.term.graph.loader.util.FHIRTermGraphLoaderUtil.toMap;\n+import static com.ibm.fhir.term.util.CodeSystemSupport.normalize;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.logging.Logger;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Options;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.schema.JanusGraphManagement;\n+\n+import com.ibm.fhir.term.graph.loader.FHIRTermGraphLoader;\n+\n+public class SnomedTermGraphLoader extends AbstractTermGraphLoader {\n+    private static final Logger log = Logger.getLogger(SnomedTermGraphLoader.class.getName());\n+\n+    private static final String PREFERRED = \"900000000000548007\";\n+    private static final String FULLY_SPECIFIED_NAME = \"900000000000003001\";\n+\n+    private String conceptFile = null;\n+    private String relationshipFile = null;\n+    private String descriptionFile = null;\n+    private String languageRefsetFile = null;\n+\n+    private AtomicInteger counter = null;\n+    private Map<String, Vertex> vertexMap = null;\n+    private Vertex codeSystemVertex = null;\n+    private Set<String> preferred = null;\n+\n+    public SnomedTermGraphLoader(Map<String, String> options) {\n+        super(options);\n+\n+        String baseDir = options.get(\"base\");\n+        conceptFile = baseDir + \"/\" + options.get(\"concept\");\n+        descriptionFile = baseDir + \"/\" + options.get(\"desc\");\n+        relationshipFile = baseDir + \"/\" + options.get(\"relation\");\n+        languageRefsetFile = baseDir + \"/../Refset/Language/\" + options.get(\"lang\");\n+\n+        counter = new AtomicInteger(0);\n+        vertexMap = new HashMap<>(250000);\n+        preferred = new HashSet<>(500000);\n+    }\n+\n+    @Override\n+    public void load() {\n+        createCodeSystemVertex();\n+        try {\n+            processConceptsFile();\n+            processLanguageRefsetFile();\n+            processDescriptionFile();\n+            processRelationshipFile();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void createCodeSystemVertex() {\n+        codeSystemVertex = g.addV(\"CodeSystem\")\n+                .property(\"url\", \"http://snomed.info/sct\")\n+                .next();\n+        g.tx().commit();\n+    }\n+\n+    private void processConceptsFile() throws IOException, FileNotFoundException {\n+        // concept file\n+        log.info(\"Processing concepts file...\");\n+        try (BufferedReader reader = new BufferedReader(new FileReader(conceptFile))) {\n+            reader.lines().skip(1).forEach(new SnomedReleaseFileConsumer() {\n+                @Override\n+                public void processLine(String line) {\n+                    String[] tokens = line.split(\"\\\\t\");\n+                    String id = tokens[0];\n+                    String active = tokens[2];\n+\n+                    if (\"1\".equals(active)) {\n+                        if (!vertexMap.containsKey(id)) {\n+                            Vertex v = g.addV(\"Concept\")\n+                                    .property(\"code\", id)\n+                                    .property(\"codeLowerCase\", normalize(id))\n+                                    .next();\n+                            vertexMap.put(id, v);\n+                            g.V(codeSystemVertex).addE(\"concept\").to(v).next();\n+                        }\n+                    }\n+\n+                    if ((counter.get() % 10000) == 0) {\n+                        log.info(\"counter: \" + counter.get());\n+                        g.tx().commit();\n+                    }\n+\n+                    counter.getAndIncrement();\n+                }\n+            });\n+\n+            // commit any uncommitted work\n+            g.tx().commit();\n+        }\n+\n+        int count = counter.get();\n+        g.V(codeSystemVertex).property(\"count\", count).next();\n+        g.tx().commit();\n+    }\n+\n+    private void processLanguageRefsetFile() throws IOException, FileNotFoundException {\n+        // language refset file\n+        log.info(\"Processing language refset file...\");\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(languageRefsetFile))) {\n+            reader.lines().skip(1).forEach(new SnomedReleaseFileConsumer() {\n+                @Override\n+                public void processLine(String line) {\n+                    String[] tokens = line.split(\"\\\\t\");\n+                    String active = tokens[2];\n+                    String referencedComponentId = tokens[5];\n+                    String acceptabilityId = tokens[6];\n+\n+                    if (\"1\".equals(active) && PREFERRED.equals(acceptabilityId)) {\n+                        preferred.add(referencedComponentId);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private void processDescriptionFile() throws IOException, FileNotFoundException {\n+        counter.set(0);\n+\n+        // description file\n+        log.info(\"Processing description file...\");\n+        try (BufferedReader reader = new BufferedReader(new FileReader(descriptionFile))) {\n+            reader.lines().skip(1).forEach(new SnomedReleaseFileConsumer() {\n+                @Override\n+                public void processLine(String line) {\n+                    String[] tokens = line.split(\"\\\\t\");\n+                    String id = tokens[0];\n+                    String active = tokens[2];\n+                    String conceptId = tokens[4];\n+                    String typeId = tokens[6];\n+                    String term = tokens[7];\n+\n+                    Vertex v = vertexMap.get(conceptId);\n+\n+                    if (\"1\".equals(active) && v != null) {\n+                        if (preferred.contains(id) && !FULLY_SPECIFIED_NAME.equals(typeId)) {\n+                            // preferred term\n+                            g.V(v)\n+                                .property(\"display\", term)\n+                                .next();\n+                        }\n+\n+                        Vertex w = g.addV(\"Designation\")\n+                                .property(\"language\", \"en\")\n+                                .property(\"use\", typeId)\n+                                .property(\"value\", term)\n+                                .next();\n+\n+                        g.V(v).addE(\"designation\").to(w).next();\n+                    }\n+\n+                    if ((counter.get() % 10000) == 0) {\n+                        log.info(\"counter: \" + counter.get());\n+                        g.tx().commit();\n+                    }\n+\n+                    counter.getAndIncrement();\n+                }\n+            });\n+\n+            // commit any uncommitted work\n+            g.tx().commit();\n+        }\n+    }\n+\n+    private void processRelationshipFile() throws IOException, FileNotFoundException {\n+        counter.set(0);\n+\n+        // relationship file\n+        log.info(\"Processing relationship file...\");\n+        try (BufferedReader reader = new BufferedReader(new FileReader(relationshipFile))) {\n+            reader.lines().skip(1).forEach(new SnomedReleaseFileConsumer() {\n+                @Override\n+                public void processLine(String line) {\n+                    String[] tokens = line.split(\"\\\\t\");\n+                    String active = tokens[2];\n+                    String sourceId = tokens[4];\n+                    String destinationId = tokens[5];\n+                    String relationshipGroup = tokens[6];\n+                    String typeId = tokens[7];\n+\n+                    if (\"1\".equals(active)) {\n+                        Vertex u = vertexMap.get(sourceId);\n+                        Vertex v = vertexMap.get(destinationId);\n+                        Vertex w = vertexMap.get(typeId);\n+\n+                        if (u != null && v != null && w != null) {\n+                            String display = (String) g.V(w).values(\"display\").next();\n+                            String label = toLabel(display);\n+\n+                            if (labelFilter.accept(label)) {\n+                                if (janusGraph.getEdgeLabel(label) == null) {\n+                                    log.info(\"Adding label: \" + label);\n+                                    JanusGraphManagement management = janusGraph.openManagement();\n+                                    management.makeEdgeLabel(label).make();\n+                                    management.commit();\n+                                }\n+\n+                                Edge e = g.V(u).addE(label).to(v).next();\n+\n+                                if (!\"0\".equals(relationshipGroup)) {\n+                                    g.E(e).property(\"group\", relationshipGroup).next();\n+                                }\n+                            }\n+                        }\n+                    }\n+\n+                    if ((counter.get() % 10000) == 0) {\n+                        log.info(\"counter: \" + counter.get());\n+                        g.tx().commit();\n+                    }\n+\n+                    counter.getAndIncrement();\n+                }\n+            });\n+\n+            // commit any uncommitted work\n+            g.tx().commit();\n+        }\n+    }\n+\n+    private static abstract class SnomedReleaseFileConsumer implements Consumer<String> {\n+        private final List<String> lines = new ArrayList<>();\n+        private String previousId = null;\n+\n+        @Override\n+        public void accept(String line) {\n+            if (collect(line)) {\n+                lines.add(line);\n+            } else {\n+                processLines(Collections.unmodifiableList(lines));\n+                lines.clear();\n+                lines.add(line);\n+            }\n+        }\n+\n+        private boolean collect(String line) {\n+            String[] fields = line.split(\"\\\\t\");\n+            String id = fields[0];\n+            if (!id.equals(previousId)) {\n+                previousId = id;\n+                return lines.isEmpty();\n+            }\n+            return true;\n+        }\n+\n+        private void processLines(List<String> lines) {\n+            processLine(lines.get(lines.size() - 1));\n+        }\n+\n+        // template method\n+        public abstract void processLine(String line);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Options options = null;\n+        SnomedTermGraphLoader loader = null;\n+        try {\n+            long start = System.currentTimeMillis();\n+\n+            options = FHIRTermGraphLoader.Type.SNOMED.options();\n+\n+            CommandLineParser parser = new DefaultParser();\n+            CommandLine commandLine = parser.parse(options, args);\n+\n+            loader = new SnomedTermGraphLoader(toMap(commandLine));\n+            loader.load();\n+\n+            long end = System.currentTimeMillis();\n+\n+            log.info(\"Loading time (milliseconds): \" + (end - start));\n+        } catch (MissingOptionException e) {\n+            System.out.println(\"MissingOptionException: \" + e.getMessage());\n+            HelpFormatter formatter = new HelpFormatter();\n+            formatter.printHelp(\"SnomedTermGraphLoader\", options);\n+        } catch (Exception e) {\n+            System.out.println(\"An error occurred: \" + e.getMessage());\n+        } finally {\n+            if (loader != null) {\n+                loader.close();\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "7ed4a1b74a9037fc07a3114c6b33c2ae2284d467",
    "filename": "fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/UMLSTermGraphLoader.java",
    "status": "added",
    "additions": 332,
    "deletions": 0,
    "changes": 332,
    "blob_url": "https://github.com/IBM/FHIR/blob/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/UMLSTermGraphLoader.java",
    "raw_url": "https://github.com/IBM/FHIR/raw/5fa8f939c9d735b62db82465a2c92c4ee0b0c62a/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/UMLSTermGraphLoader.java",
    "contents_url": "https://api.github.com/repos/IBM/FHIR/contents/fhir-term-graph/src/main/java/com/ibm/fhir/term/graph/loader/impl/UMLSTermGraphLoader.java?ref=5fa8f939c9d735b62db82465a2c92c4ee0b0c62a",
    "patch": "@@ -0,0 +1,332 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020, 2021\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.term.graph.loader.impl;\n+\n+import static com.ibm.fhir.term.graph.loader.util.FHIRTermGraphLoaderUtil.toLabel;\n+import static com.ibm.fhir.term.graph.loader.util.FHIRTermGraphLoaderUtil.toMap;\n+import static com.ibm.fhir.term.util.CodeSystemSupport.normalize;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingOptionException;\n+import org.apache.commons.cli.Options;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.janusgraph.core.schema.JanusGraphManagement;\n+\n+import com.ibm.fhir.term.graph.loader.FHIRTermGraphLoader;\n+\n+/*\n+ * This class will load UMLS concepts and relationships into a JanusGraph.\n+ */\n+public class UMLSTermGraphLoader extends AbstractTermGraphLoader {\n+    private static final Logger LOG = Logger.getLogger(UMLSTermGraphLoader.class.getName());\n+\n+    private static final String UMLS_CONCEPT_NAMES_AND_SOURCES_FILE = \"MRCONSO.RRF\";\n+    private static final String UMLS_SOURCE_INFORMATION_FILE = \"MRSAB.RRF\";\n+    private static final String UMLS_RELATED_CONCEPTS_FILE = \"MRREL.RRF\";\n+\n+    private static final String UMLS_DELIMITER = \"\\\\|\";\n+\n+    // Map to track AUI to SCUI relationships, since MRREL uses AUI, but granularity of concepts used in MRCONSO is at SCUI level\n+    private Map<String, String> auiToScuiMap = new ConcurrentHashMap<>(1000000);\n+\n+    // Map of code system name to preferred label, configured in properties file\n+    private Properties codeSystemMap = new Properties();\n+\n+    // Map of code system id to corresponding vertex\n+    private Map<String, Vertex> codeSystemVertices = new ConcurrentHashMap<>();\n+\n+    // Name of file containing UMLS concept data\n+    private String conceptFile = null;\n+\n+    // Name of file containing UMLS concept relationship data\n+    private String relationshipFile = null;\n+\n+    // Map of abbreviated source name to the current version of that source\n+    private Map<String, String> sabToVersion = new HashMap<>();\n+\n+    // Name of file containing source data\n+    private String sourceAttributeFile = null;\n+\n+    // Map of concept name to corresponding vertex\n+    private Map<String, Vertex> vertexMap = null;\n+\n+    /**\n+     * Initialize a UMLSTermGraphLoader\n+     *\n+     * @param options\n+     */\n+    public UMLSTermGraphLoader(Map<String, String> options) {\n+        super(options);\n+\n+        String baseDir = options.get(\"base\");\n+        conceptFile = baseDir + \"/\" + UMLS_CONCEPT_NAMES_AND_SOURCES_FILE;\n+        relationshipFile = baseDir + \"/\" + UMLS_RELATED_CONCEPTS_FILE;\n+        sourceAttributeFile = baseDir + \"/\" + UMLS_SOURCE_INFORMATION_FILE;\n+\n+        vertexMap = new HashMap<>(250000);\n+    }\n+\n+    /**\n+     * Loads UMLS data into JanusGraph\n+     *\n+     * @throws RuntimeException\n+     */\n+    @Override\n+    public void load() {\n+        try {\n+            loadSourceAttributes();\n+            loadConcepts();\n+            loadRelations();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Create a code system vertex for the provided abbreviated source name\n+     *\n+     * @param sab\n+     * @return\n+     */\n+    private final Vertex createCodeSystemVertex(String sab) {\n+        String version = sabToVersion.get(sab);\n+        String url = (String) codeSystemMap.getOrDefault(sab, sab);\n+        Vertex csv = g.addV(\"CodeSystem\").property(\"url\", url).property(\"version\", version).next();\n+        g.tx().commit();\n+        return csv;\n+\n+    }\n+\n+    /**\n+     * Loads all UMLS concept data from the provided conceptFile\n+     *\n+     * @throws FileNotFoundException\n+     * @throws IOException\n+     */\n+    private void loadConcepts() throws FileNotFoundException, IOException {\n+        // MRCONSO.RRF\n+        // CUI, LAT, TS, LUI, STT, SUI, ISPREF, AUI, SAUI, SCUI, SDUI, SAB, TTY, CODE, STR, SRL, SUPPRESS, CVF\n+        // https://www.ncbi.nlm.nih.gov/books/NBK9685/table/ch03.T.concept_names_and_sources_file_mr/\n+        //\n+        LOG.info(\"Loading concepts.....\");\n+\n+        Map<String, AtomicInteger> sabCounterMap = new HashMap<>();\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(conceptFile))) {\n+            reader.lines().forEach(line -> {\n+                String[] tokens = line.split(UMLS_DELIMITER);\n+                String lat = tokens[1];\n+                String aui = tokens[7];\n+                String scui = tokens[9];\n+                String sab = tokens[11];\n+                String tty = tokens[12];\n+                String str = tokens[14];\n+                String suppress = tokens[16];\n+\n+                if (!\"O\".equals(suppress)) {\n+                    auiToScuiMap.put(aui, scui);\n+\n+                    Vertex codeSystemVertex = codeSystemVertices.computeIfAbsent(sab, s -> createCodeSystemVertex(s));\n+\n+                    AtomicInteger counter = sabCounterMap.computeIfAbsent(sab, s -> new AtomicInteger(0));\n+                    counter.incrementAndGet();\n+\n+                    Vertex v = null;\n+                    if (vertexMap.containsKey(scui)) {\n+                        v = vertexMap.get(scui);\n+                    } else {\n+                        String codeLowerCase = normalize(scui);\n+                        v = g.addV(\"Concept\").property(\"code\", scui).property(\"codeLowerCase\", codeLowerCase).next();\n+                        vertexMap.put(scui, v);\n+\n+                        g.V(codeSystemVertex).addE(\"concept\").to(v).next();\n+                    }\n+                    if (v == null) {\n+                        LOG.severe(\"Could not find SCUI in vertexMap\");\n+                    } else {\n+                        if (tty.equals(\"PT\")) { // Preferred entries provide preferred name and language\n+                            v.property(\"display\", str);\n+                            v.property(\"language\", lat);\n+                        }\n+                        // add new designation\n+                        Vertex w = g.addV(\"Designation\").property(\"language\", lat).property(\"value\", str).next();\n+                        g.V(v).addE(\"designation\").to(w).next();\n+\n+                        if ((sabCounterMap.values().stream().collect(Collectors.summingInt(AtomicInteger::get)) % 10000) == 0) {\n+                            String counters = sabCounterMap.entrySet().stream().map(e -> e.getKey() + \":\" + e.getValue()).collect(Collectors.joining(\",\"));\n+                            LOG.info(\"counter: \" + counters);\n+                            g.tx().commit();\n+                        }\n+\n+                    }\n+                }\n+            });\n+\n+            for (Entry<String, AtomicInteger> entry : sabCounterMap.entrySet()) {\n+                Vertex codeSystemVertex = codeSystemVertices.get(entry.getKey());\n+                g.V(codeSystemVertex).property(\"count\", entry.getValue().get()).next();\n+            }\n+            // commit any uncommitted work\n+            g.tx().commit();\n+        }\n+\n+        g.tx().commit();\n+        LOG.info(\"Done loading concepts.....\");\n+    }\n+\n+    /**\n+     * Loads all UMLS relationship data from the provided relationshipFile\n+     *\n+     * @throws FileNotFoundException\n+     * @throws IOException\n+     */\n+    private void loadRelations() throws FileNotFoundException, IOException {\n+        // MRREL\n+        // CUI1, AUI1, STYPE1, REL, CUI2, AUI2, STYPE2, RELA, RUI, SRUI, SAB, SL, RG,DIR, SUPPRESS, CVF\n+        // https://www.ncbi.nlm.nih.gov/books/NBK9685/table/ch03.T.related_concepts_file_mrrel_rrf/\n+        //\n+        LOG.info(\"Loading relations.....\");\n+\n+        AtomicInteger counter = new AtomicInteger(0);\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(relationshipFile))) {\n+            reader.lines().forEach(line -> {\n+                String[] tokens = line.split(UMLS_DELIMITER);\n+                String aui1 = tokens[1];\n+                String rela = tokens[7];\n+                String aui2 = tokens[5];\n+                String rg = tokens[12]; // relationship group\n+                String dir = tokens[13];\n+                String suppress = tokens[14];\n+\n+                if (!\"N\".equals(dir) && !\"O\".equals(suppress)) { // Don't load relations that are not in source order or suppressed\n+                    String scui1 = auiToScuiMap.get(aui1);\n+                    String scui2 = auiToScuiMap.get(aui2);\n+\n+                    if (scui1 != null && scui2 != null) {\n+                        Vertex v1 = vertexMap.get(scui1);\n+                        Vertex v2 = vertexMap.get(scui2);\n+\n+                        if (v1 != null && v2 != null) {\n+                            String label = toLabel(rela);\n+\n+                            if (labelFilter.accept(label)) {\n+                                if (janusGraph.getEdgeLabel(label) == null) {\n+                                    LOG.info(\"Adding label: \" + label);\n+                                    JanusGraphManagement management = janusGraph.openManagement();\n+                                    management.makeEdgeLabel(label).make();\n+                                    management.commit();\n+                                }\n+\n+                                Edge e = g.V(v2).addE(label).to(v1).next();\n+\n+                                if (!\"\".equals(rg)) {\n+                                    g.E(e).property(\"group\", rg).next();\n+                                }\n+                            }\n+                        }\n+\n+                        if ((counter.get() % 10000) == 0) {\n+                            LOG.info(\"counter: \" + counter.get());\n+                            g.tx().commit();\n+                        }\n+\n+                        counter.getAndIncrement();\n+                    }\n+                }\n+            });\n+\n+            // commit any uncommitted work\n+            g.tx().commit();\n+            LOG.info(\"Done loading relations.....\");\n+        }\n+    }\n+\n+    /**\n+     * Loads all UMLS source attribute data from the provided sourceAttributeFile\n+     *\n+     * @throws IOException\n+     */\n+    private void loadSourceAttributes() throws IOException {\n+        try (Reader codeSystemReader = new InputStreamReader(getClass().getClassLoader().getResourceAsStream(\"conf/umlsCodesystemMap.properties\"))) {\n+            // Load UMLS name to preferred CodeSystem name map\n+            codeSystemMap.load(codeSystemReader);\n+        }\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(sourceAttributeFile))) {\n+            // Load latest version for code systems in UMLS\n+            reader.lines().forEach(line -> {\n+                String[] tokens = line.split(UMLS_DELIMITER);\n+                String rsab = tokens[3];\n+                String sver = tokens[6];\n+                String curver = tokens[21];\n+\n+                if (\"Y\".equals(curver)) {\n+                    if (\"SNOMEDCT_US\".equals(rsab)) {\n+                        // special case version for SNOMED\n+                        sver = \"http://snomed.info/sct/731000124108/version/\" + sver.replaceAll(\"_\", \"\");\n+                    }\n+                    sabToVersion.put(rsab, sver);\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Load UMLS data using properties provided in arguments\n+     *\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        UMLSTermGraphLoader loader = null;\n+        Options options = null;\n+        try {\n+            long start = System.currentTimeMillis();\n+\n+            options = FHIRTermGraphLoader.Type.UMLS.options();\n+\n+            CommandLineParser parser = new DefaultParser();\n+            CommandLine commandLine = parser.parse(options, args);\n+\n+            loader = new UMLSTermGraphLoader(toMap(commandLine));\n+            loader.load();\n+\n+            long end = System.currentTimeMillis();\n+            LOG.info(\"Loading time (milliseconds): \" + (end - start));\n+        } catch (MissingOptionException e) {\n+            LOG.log(Level.SEVERE, \"MissingOptionException: \", e);\n+            HelpFormatter formatter = new HelpFormatter();\n+            formatter.printHelp(\"UMLSTermGraphLoader\", options);\n+        } catch (Exception e) {\n+            LOG.log(Level.SEVERE, \"An error occurred: \" + e.getMessage());\n+        } finally {\n+            if (loader != null) {\n+                loader.close();\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  }
]
