[
  {
    "sha": "0985c7fe6fc3633badb7a30e106d5fda01cc60c4",
    "filename": ".secrets.baseline",
    "status": "modified",
    "additions": 1,
    "deletions": 11,
    "changes": 12,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/.secrets.baseline",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/.secrets.baseline",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/.secrets.baseline?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -3,7 +3,7 @@\n     \"files\": \"package-lock.json|^.secrets.baseline$\",\n     \"lines\": null\n   },\n-  \"generated_at\": \"2021-03-11T23:49:09Z\",\n+  \"generated_at\": \"2021-03-18T16:47:56Z\",\n   \"plugins_used\": [\n     {\n       \"name\": \"AWSKeyDetector\"\n@@ -239,16 +239,6 @@\n         \"type\": \"Hex High Entropy String\",\n         \"verified_result\": null\n       }\n-    ],\n-    \"modules/resource-manager/src/test/java/com/ibm/cloud/platform_services/resource_manager/v2/ResourceManagerIT.java\": [\n-      {\n-        \"hashed_secret\": \"1f7f6b3a6bee3796ba250ac4379ea6743d51ed53\",\n-        \"is_secret\": false,\n-        \"is_verified\": false,\n-        \"line_number\": 31,\n-        \"type\": \"Hex High Entropy String\",\n-        \"verified_result\": null\n-      }\n     ]\n   },\n   \"version\": \"0.13.1+ibm.31.dss\","
  },
  {
    "sha": "bb35293b1f2172dcbe5b21f8fb005ac103607c59",
    "filename": "README.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/README.md",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/README.md",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/README.md?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -61,6 +61,7 @@ Service Name | Artifact Coordinates\n [IAM Identity Service](https://cloud.ibm.com/apidocs/iam-identity-token-api) | com.ibm.cloud:iam-identity:0.17.15\n [IAM Policy Management](https://cloud.ibm.com/apidocs/iam-policy-management) | com.ibm.cloud:iam-policy-management:0.17.15\n [Open Service Broker](https://cloud.ibm.com/apidocs/resource-controller/ibm-cloud-osb-api) | com.ibm.cloud:open-service-broker:0.17.15\n+[Posture Management](https://cloud.ibm.com/apidocs/security-compliance/posture) | com.ibm.com.cloud:com.ibm.cloud.platform_services.posture_management:0.17.15\n [Resource Controller](https://cloud.ibm.com/apidocs/resource-controller/resource-controller) | com.ibm.cloud:resource-controller:0.17.15\n [Resource Manager](https://cloud.ibm.com/apidocs/resource-controller/resource-manager) | com.ibm.cloud:resource-manager:0.17.15\n [Usage Metering](https://cloud.ibm.com/apidocs/usage-metering) | com.ibm.cloud:usage-metering:0.17.15"
  },
  {
    "sha": "d8429391abd1fcc10180dab8ed6ee24953337b78",
    "filename": "modules/examples/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/examples/pom.xml",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/examples/pom.xml",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/examples/pom.xml?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -72,6 +72,11 @@\n             <artifactId>open-service-broker</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>posture-management</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n         <dependency>\n             <groupId>${project.groupId}</groupId>\n             <artifactId>resource-controller</artifactId>"
  },
  {
    "sha": "c70f78751e5b6d0dbf1ca960d94497535df98f70",
    "filename": "modules/examples/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementExamples.java",
    "status": "added",
    "additions": 119,
    "deletions": 0,
    "changes": 119,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/examples/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementExamples.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/examples/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementExamples.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/examples/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementExamples.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,119 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.CreateValidationScanOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListProfileOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListScopesOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ProfilesList;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Result;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ScopesList;\n+import com.ibm.cloud.sdk.core.http.Response;\n+import com.ibm.cloud.sdk.core.service.exception.ServiceResponseException;\n+import com.ibm.cloud.sdk.core.util.CredentialUtils;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+//\n+// This file provides an example of how to use the Posture Management service.\n+//\n+// The following configuration properties are assumed to be defined:\n+// POSTURE_MANAGEMENT_URL=<service base url>\n+// POSTURE_MANAGEMENT_AUTH_TYPE=iam\n+// POSTURE_MANAGEMENT_APIKEY=<IAM Api key>\n+// POSTURE_MANAGEMENT_AUTH_URL=<IAM token service base URL - omit this if using the production environment>\n+// POSTURE_MANAGEMENT_ACCOUNT_ID=<IBM Cloud Account ID>\n+// POSTURE_MANAGEMENT_PROFILE_NAME=<Name of the Profile>\n+// POSTURE_MANAGEMENT_SCOPES_NAME=<Name of the Scope>\n+//\n+// These configuration properties can be exported as environment variables, or stored\n+// in a configuration file and then:\n+// export IBM_CREDENTIALS_FILE=<name of configuration file>\n+//\n+public class PostureManagementExamples {\n+  private static final Logger logger = LoggerFactory.getLogger(PostureManagementExamples.class);\n+  protected PostureManagementExamples() { }\n+\n+  @SuppressWarnings(\"checkstyle:methodlength\")\n+  public static void main(String[] args) throws Exception {\n+    PostureManagement service = PostureManagement.newInstance();\n+\n+    // Load up our test-specific config properties.\n+    Map<String, String> config = CredentialUtils.getServiceProperties(PostureManagement.DEFAULT_SERVICE_NAME);\n+\n+    String accountId = config.get(\"ACCOUNT_ID\");\n+    String profileName = config.get(\"PROFILE_NAME\");\n+    String scopesName = config.get(\"SCOPES_NAME\");\n+\n+    Long profileId = null;\n+    Long scopeId = null;\n+\n+    try {\n+      // begin-list_profile\n+      ListProfileOptions listProfileOptions = new ListProfileOptions.Builder()\n+        .accountId(accountId)\n+        .name(profileName)\n+        .build();\n+\n+      Response<ProfilesList> response = service.listProfile(listProfileOptions).execute();\n+      ProfilesList profilesList = response.getResult();\n+\n+      System.out.println(profilesList);\n+      // end-list_profile\n+      profileId = profilesList.getProfiles().get(0).getProfileId();\n+    } catch (ServiceResponseException e) {\n+        logger.error(String.format(\"Service returned status code %s: %s\\nError details: %s\",\n+          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);\n+    }\n+\n+    try {\n+      // begin-list_scopes\n+      ListScopesOptions listScopesOptions = new ListScopesOptions.Builder()\n+        .accountId(\"testString\")\n+        .name(scopesName)\n+        .build();\n+\n+      Response<ScopesList> response = service.listScopes(listScopesOptions).execute();\n+      ScopesList scopesList = response.getResult();\n+\n+      System.out.println(scopesList);\n+      // end-list_scopes\n+      scopeId = scopesList.getScopes().get(0).getScopeId();\n+    } catch (ServiceResponseException e) {\n+        logger.error(String.format(\"Service returned status code %s: %s\\nError details: %s\",\n+          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);\n+    }\n+\n+    try {\n+      // begin-create_validation_scan\n+      CreateValidationScanOptions createValidationScanOptions = new CreateValidationScanOptions.Builder()\n+              .accountId(accountId)\n+              .profileId(profileId)\n+              .scopeId(scopeId)\n+              .build();\n+\n+      Response<Result> response = service.createValidationScan(createValidationScanOptions).execute();\n+      Result result = response.getResult();\n+\n+      System.out.println(result);\n+      // end-create_validation_scan\n+\n+    } catch (ServiceResponseException e) {\n+      logger.error(String.format(\"Service returned status code %s: %s\\nError details: %s\",\n+                                 e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);\n+    }\n+\n+  }\n+}"
  },
  {
    "sha": "5f9faf5cfd9b6138d2a8e189cdfe161116200799",
    "filename": "modules/posture-management/pom.xml",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/pom.xml",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/pom.xml",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/pom.xml?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,68 @@\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+\t<!-- >>> Replace this with the parent pom's artifactId -->\n+        <artifactId>platform-services</artifactId>\n+        <groupId>com.ibm.cloud</groupId>\n+        <version>99-SNAPSHOT</version>\n+        <relativePath>../..</relativePath>\n+    </parent>\n+\n+    <!-- >>> Replace this with the service module's artifactId (e.g. \"example-service\") -->\n+    <artifactId>posture-management</artifactId>\n+\n+    <!-- >>> Replace this with a text description of this module (e.g. \"Example Service\") -->\n+    <name>IBM Cloud Posture Management API (v1)</name>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.ibm.cloud</groupId>\n+            <artifactId>sdk-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <!-- >>> Replace this with the \"common\" module's artifactId (e.g. my-services-common) -->\n+            <artifactId>platform-services-common</artifactId>\n+            <groupId>com.ibm.cloud</groupId>\n+        </dependency>\n+        <dependency>\n+            <!-- >>> Replace this with the \"common\" module's artifactId (e.g. my-services-common) -->\n+            <artifactId>platform-services-common</artifactId>\n+            <groupId>${project.groupId}</groupId>\n+            <type>test-jar</type>\n+            <classifier>tests</classifier>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.squareup.okhttp3</groupId>\n+            <artifactId>mockwebserver</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-testng</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <developers>\n+        <developer>\n+            <name>IBM Cloud DevX SDK Development</name>\n+            <email>devxsdk@us.ibm.com</email>\n+            <url>https://www.ibm.com/</url>\n+        </developer>\n+    </developers>\n+\n+</project>"
  },
  {
    "sha": "1544047a3a30aa83415867573389eca4c3ffae51",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagement.java",
    "status": "added",
    "additions": 174,
    "deletions": 0,
    "changes": 174,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagement.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagement.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagement.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,174 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+/*\n+ * IBM OpenAPI SDK Code Generator Version: 3.29.0-cd9ba74f-20210305-183535\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1;\n+\n+import com.google.gson.JsonObject;\n+import com.ibm.cloud.platform_services.common.SdkCommon;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.CreateValidationScanOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListProfileOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListScopesOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ProfilesList;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Result;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ScopesList;\n+import com.ibm.cloud.sdk.core.http.RequestBuilder;\n+import com.ibm.cloud.sdk.core.http.ResponseConverter;\n+import com.ibm.cloud.sdk.core.http.ServiceCall;\n+import com.ibm.cloud.sdk.core.security.Authenticator;\n+import com.ibm.cloud.sdk.core.security.ConfigBasedAuthenticatorFactory;\n+import com.ibm.cloud.sdk.core.service.BaseService;\n+import com.ibm.cloud.sdk.core.util.ResponseConverterUtils;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+/**\n+ * With IBM Cloud® Security and Compliance Center, you can embed checks into your every day workflows to help manage\n+ * your current security and compliance posture. By monitoring for risks, you can identify security vulnerabilities and\n+ * quickly work to mitigate the impact.\n+ *\n+ * @version v1\n+ */\n+public class PostureManagement extends BaseService {\n+\n+  public static final String DEFAULT_SERVICE_NAME = \"posture_management\";\n+\n+\n+ /**\n+   * Class method which constructs an instance of the `PostureManagement` client.\n+   * The default service name is used to configure the client instance.\n+   *\n+   * @return an instance of the `PostureManagement` client using external configuration\n+   */\n+  public static PostureManagement newInstance() {\n+    return newInstance(DEFAULT_SERVICE_NAME);\n+  }\n+\n+  /**\n+   * Class method which constructs an instance of the `PostureManagement` client.\n+   * The specified service name is used to configure the client instance.\n+   *\n+   * @param serviceName the service name to be used when configuring the client instance\n+   * @return an instance of the `PostureManagement` client using external configuration\n+   */\n+  public static PostureManagement newInstance(String serviceName) {\n+    Authenticator authenticator = ConfigBasedAuthenticatorFactory.getAuthenticator(serviceName);\n+    PostureManagement service = new PostureManagement(serviceName, authenticator);\n+    service.configureService(serviceName);\n+    return service;\n+  }\n+\n+  /**\n+   * Constructs an instance of the `PostureManagement` client.\n+   * The specified service name and authenticator are used to configure the client instance.\n+   *\n+   * @param serviceName the service name to be used when configuring the client instance\n+   * @param authenticator the {@link Authenticator} instance to be configured for this client\n+   */\n+  public PostureManagement(String serviceName, Authenticator authenticator) {\n+    super(serviceName, authenticator);\n+  }\n+\n+  /**\n+   * Initiate a validation scan.\n+   *\n+   * Validation scans determine a specified scope's adherence to regulatory controls by validating the configuration of\n+   * the resources in your scope to the attached profile. To initiate a scan, you must have configured a collector,\n+   * provided credentials, and completed both a fact collection and discovery scan. [Learn\n+   * more](/docs/security-compliance?topic=security-compliance-schedule-scan).\n+   *\n+   * @param createValidationScanOptions the {@link CreateValidationScanOptions} containing the options for the call\n+   * @return a {@link ServiceCall} with a result of type {@link Result}\n+   */\n+  public ServiceCall<Result> createValidationScan(CreateValidationScanOptions createValidationScanOptions) {\n+    com.ibm.cloud.sdk.core.util.Validator.notNull(createValidationScanOptions,\n+      \"createValidationScanOptions cannot be null\");\n+    RequestBuilder builder = RequestBuilder.post(RequestBuilder.resolveRequestUrl(getServiceUrl(), \"/posture/v1/scans/validation\"));\n+    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders(\"posture_management\", \"v1\", \"createValidationScan\");\n+    for (Entry<String, String> header : sdkHeaders.entrySet()) {\n+      builder.header(header.getKey(), header.getValue());\n+    }\n+    builder.header(\"Accept\", \"application/json\");\n+    builder.query(\"account_id\", String.valueOf(createValidationScanOptions.accountId()));\n+    final JsonObject contentJson = new JsonObject();\n+    if (createValidationScanOptions.scopeId() != null) {\n+      contentJson.addProperty(\"scope_id\", createValidationScanOptions.scopeId());\n+    }\n+    if (createValidationScanOptions.profileId() != null) {\n+      contentJson.addProperty(\"profile_id\", createValidationScanOptions.profileId());\n+    }\n+    if (createValidationScanOptions.groupProfileId() != null) {\n+      contentJson.addProperty(\"group_profile_id\", createValidationScanOptions.groupProfileId());\n+    }\n+    builder.bodyJson(contentJson);\n+    ResponseConverter<Result> responseConverter =\n+      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Result>() { }.getType());\n+    return createServiceCall(builder.build(), responseConverter);\n+  }\n+\n+  /**\n+   * List profiles.\n+   *\n+   * List all of the profiles that are available in your account. To view a specific profile, you can filter by name.\n+   *\n+   * @param listProfileOptions the {@link ListProfileOptions} containing the options for the call\n+   * @return a {@link ServiceCall} with a result of type {@link ProfilesList}\n+   */\n+  public ServiceCall<ProfilesList> listProfile(ListProfileOptions listProfileOptions) {\n+    com.ibm.cloud.sdk.core.util.Validator.notNull(listProfileOptions,\n+      \"listProfileOptions cannot be null\");\n+    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), \"/posture/v1/profiles\"));\n+    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders(\"posture_management\", \"v1\", \"listProfile\");\n+    for (Entry<String, String> header : sdkHeaders.entrySet()) {\n+      builder.header(header.getKey(), header.getValue());\n+    }\n+    builder.header(\"Accept\", \"application/json\");\n+    builder.query(\"account_id\", String.valueOf(listProfileOptions.accountId()));\n+    if (listProfileOptions.name() != null) {\n+      builder.query(\"name\", String.valueOf(listProfileOptions.name()));\n+    }\n+    ResponseConverter<ProfilesList> responseConverter =\n+      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ProfilesList>() { }.getType());\n+    return createServiceCall(builder.build(), responseConverter);\n+  }\n+\n+  /**\n+   * List scopes.\n+   *\n+   * List all of the scopes that are available in your account. To view a specific scope, you can filter by name.\n+   *\n+   * @param listScopesOptions the {@link ListScopesOptions} containing the options for the call\n+   * @return a {@link ServiceCall} with a result of type {@link ScopesList}\n+   */\n+  public ServiceCall<ScopesList> listScopes(ListScopesOptions listScopesOptions) {\n+    com.ibm.cloud.sdk.core.util.Validator.notNull(listScopesOptions,\n+      \"listScopesOptions cannot be null\");\n+    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), \"/posture/v1/scopes\"));\n+    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders(\"posture_management\", \"v1\", \"listScopes\");\n+    for (Entry<String, String> header : sdkHeaders.entrySet()) {\n+      builder.header(header.getKey(), header.getValue());\n+    }\n+    builder.header(\"Accept\", \"application/json\");\n+    builder.query(\"account_id\", String.valueOf(listScopesOptions.accountId()));\n+    if (listScopesOptions.name() != null) {\n+      builder.query(\"name\", String.valueOf(listScopesOptions.name()));\n+    }\n+    ResponseConverter<ScopesList> responseConverter =\n+      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ScopesList>() { }.getType());\n+    return createServiceCall(builder.build(), responseConverter);\n+  }\n+\n+}"
  },
  {
    "sha": "f935b2c17013a7cb675f6df82bf9bb962d096219",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ApplicabilityCriteria.java",
    "status": "added",
    "additions": 194,
    "deletions": 0,
    "changes": 194,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ApplicabilityCriteria.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ApplicabilityCriteria.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ApplicabilityCriteria.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,194 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * The criteria that defines how a profile applies.\n+ */\n+public class ApplicabilityCriteria extends GenericModel {\n+\n+  protected List<String> environment;\n+  protected List<String> resource;\n+  @SerializedName(\"environment_category\")\n+  protected List<String> environmentCategory;\n+  @SerializedName(\"resource_category\")\n+  protected List<String> resourceCategory;\n+  @SerializedName(\"resource_type\")\n+  protected List<String> resourceType;\n+  @SerializedName(\"software_details\")\n+  protected Map<String, Object> softwareDetails;\n+  @SerializedName(\"os_details\")\n+  protected Map<String, Object> osDetails;\n+  @SerializedName(\"additional_details\")\n+  protected Map<String, Object> additionalDetails;\n+  @SerializedName(\"environment_category_description\")\n+  protected Map<String, String> environmentCategoryDescription;\n+  @SerializedName(\"environment_description\")\n+  protected Map<String, String> environmentDescription;\n+  @SerializedName(\"resource_category_description\")\n+  protected Map<String, String> resourceCategoryDescription;\n+  @SerializedName(\"resource_type_description\")\n+  protected Map<String, String> resourceTypeDescription;\n+  @SerializedName(\"resource_description\")\n+  protected Map<String, String> resourceDescription;\n+\n+  /**\n+   * Gets the environment.\n+   *\n+   * A list of environments that a profile can be applied to.\n+   *\n+   * @return the environment\n+   */\n+  public List<String> getEnvironment() {\n+    return environment;\n+  }\n+\n+  /**\n+   * Gets the resource.\n+   *\n+   * A list of resources that a profile can be used with.\n+   *\n+   * @return the resource\n+   */\n+  public List<String> getResource() {\n+    return resource;\n+  }\n+\n+  /**\n+   * Gets the environmentCategory.\n+   *\n+   * The type of environment that a profile is able to be applied to.\n+   *\n+   * @return the environmentCategory\n+   */\n+  public List<String> getEnvironmentCategory() {\n+    return environmentCategory;\n+  }\n+\n+  /**\n+   * Gets the resourceCategory.\n+   *\n+   * The type of resource that a profile is able to be applied to.\n+   *\n+   * @return the resourceCategory\n+   */\n+  public List<String> getResourceCategory() {\n+    return resourceCategory;\n+  }\n+\n+  /**\n+   * Gets the resourceType.\n+   *\n+   * The resource type that the profile applies to.\n+   *\n+   * @return the resourceType\n+   */\n+  public List<String> getResourceType() {\n+    return resourceType;\n+  }\n+\n+  /**\n+   * Gets the softwareDetails.\n+   *\n+   * The software that the profile applies to.\n+   *\n+   * @return the softwareDetails\n+   */\n+  public Map<String, Object> getSoftwareDetails() {\n+    return softwareDetails;\n+  }\n+\n+  /**\n+   * Gets the osDetails.\n+   *\n+   * The operatoring system that the profile applies to.\n+   *\n+   * @return the osDetails\n+   */\n+  public Map<String, Object> getOsDetails() {\n+    return osDetails;\n+  }\n+\n+  /**\n+   * Gets the additionalDetails.\n+   *\n+   * Any additional details about the profile.\n+   *\n+   * @return the additionalDetails\n+   */\n+  public Map<String, Object> getAdditionalDetails() {\n+    return additionalDetails;\n+  }\n+\n+  /**\n+   * Gets the environmentCategoryDescription.\n+   *\n+   * The type of environment that your scope is targeted to.\n+   *\n+   * @return the environmentCategoryDescription\n+   */\n+  public Map<String, String> getEnvironmentCategoryDescription() {\n+    return environmentCategoryDescription;\n+  }\n+\n+  /**\n+   * Gets the environmentDescription.\n+   *\n+   * The environment that your scope is targeted to.\n+   *\n+   * @return the environmentDescription\n+   */\n+  public Map<String, String> getEnvironmentDescription() {\n+    return environmentDescription;\n+  }\n+\n+  /**\n+   * Gets the resourceCategoryDescription.\n+   *\n+   * The type of resource that your scope is targeted to.\n+   *\n+   * @return the resourceCategoryDescription\n+   */\n+  public Map<String, String> getResourceCategoryDescription() {\n+    return resourceCategoryDescription;\n+  }\n+\n+  /**\n+   * Gets the resourceTypeDescription.\n+   *\n+   * A further classification of the type of resource that your scope is targeted to.\n+   *\n+   * @return the resourceTypeDescription\n+   */\n+  public Map<String, String> getResourceTypeDescription() {\n+    return resourceTypeDescription;\n+  }\n+\n+  /**\n+   * Gets the resourceDescription.\n+   *\n+   * The resource that is scanned as part of your scope.\n+   *\n+   * @return the resourceDescription\n+   */\n+  public Map<String, String> getResourceDescription() {\n+    return resourceDescription;\n+  }\n+}\n+"
  },
  {
    "sha": "e2df88f8b72ee17db3701c432e46e9bc5323d1e9",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/CreateValidationScanOptions.java",
    "status": "added",
    "additions": 174,
    "deletions": 0,
    "changes": 174,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/CreateValidationScanOptions.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/CreateValidationScanOptions.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/CreateValidationScanOptions.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,174 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * The createValidationScan options.\n+ */\n+public class CreateValidationScanOptions extends GenericModel {\n+\n+  protected String accountId;\n+  protected Long scopeId;\n+  protected Long profileId;\n+  protected Long groupProfileId;\n+\n+  /**\n+   * Builder.\n+   */\n+  public static class Builder {\n+    private String accountId;\n+    private Long scopeId;\n+    private Long profileId;\n+    private Long groupProfileId;\n+\n+    private Builder(CreateValidationScanOptions createValidationScanOptions) {\n+      this.accountId = createValidationScanOptions.accountId;\n+      this.scopeId = createValidationScanOptions.scopeId;\n+      this.profileId = createValidationScanOptions.profileId;\n+      this.groupProfileId = createValidationScanOptions.groupProfileId;\n+    }\n+\n+    /**\n+     * Instantiates a new builder.\n+     */\n+    public Builder() {\n+    }\n+\n+    /**\n+     * Instantiates a new builder with required properties.\n+     *\n+     * @param accountId the accountId\n+     */\n+    public Builder(String accountId) {\n+      this.accountId = accountId;\n+    }\n+\n+    /**\n+     * Builds a CreateValidationScanOptions.\n+     *\n+     * @return the new CreateValidationScanOptions instance\n+     */\n+    public CreateValidationScanOptions build() {\n+      return new CreateValidationScanOptions(this);\n+    }\n+\n+    /**\n+     * Set the accountId.\n+     *\n+     * @param accountId the accountId\n+     * @return the CreateValidationScanOptions builder\n+     */\n+    public Builder accountId(String accountId) {\n+      this.accountId = accountId;\n+      return this;\n+    }\n+\n+    /**\n+     * Set the scopeId.\n+     *\n+     * @param scopeId the scopeId\n+     * @return the CreateValidationScanOptions builder\n+     */\n+    public Builder scopeId(long scopeId) {\n+      this.scopeId = scopeId;\n+      return this;\n+    }\n+\n+    /**\n+     * Set the profileId.\n+     *\n+     * @param profileId the profileId\n+     * @return the CreateValidationScanOptions builder\n+     */\n+    public Builder profileId(long profileId) {\n+      this.profileId = profileId;\n+      return this;\n+    }\n+\n+    /**\n+     * Set the groupProfileId.\n+     *\n+     * @param groupProfileId the groupProfileId\n+     * @return the CreateValidationScanOptions builder\n+     */\n+    public Builder groupProfileId(long groupProfileId) {\n+      this.groupProfileId = groupProfileId;\n+      return this;\n+    }\n+  }\n+\n+  protected CreateValidationScanOptions(Builder builder) {\n+    com.ibm.cloud.sdk.core.util.Validator.notNull(builder.accountId,\n+      \"accountId cannot be null\");\n+    accountId = builder.accountId;\n+    scopeId = builder.scopeId;\n+    profileId = builder.profileId;\n+    groupProfileId = builder.groupProfileId;\n+  }\n+\n+  /**\n+   * New builder.\n+   *\n+   * @return a CreateValidationScanOptions builder\n+   */\n+  public Builder newBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  /**\n+   * Gets the accountId.\n+   *\n+   * Your IBM Cloud account ID.\n+   *\n+   * @return the accountId\n+   */\n+  public String accountId() {\n+    return accountId;\n+  }\n+\n+  /**\n+   * Gets the scopeId.\n+   *\n+   * The unique ID of the scope.\n+   *\n+   * @return the scopeId\n+   */\n+  public Long scopeId() {\n+    return scopeId;\n+  }\n+\n+  /**\n+   * Gets the profileId.\n+   *\n+   * The unique ID of the profile.\n+   *\n+   * @return the profileId\n+   */\n+  public Long profileId() {\n+    return profileId;\n+  }\n+\n+  /**\n+   * Gets the groupProfileId.\n+   *\n+   * The ID of the profile group.\n+   *\n+   * @return the groupProfileId\n+   */\n+  public Long groupProfileId() {\n+    return groupProfileId;\n+  }\n+}\n+"
  },
  {
    "sha": "9f1e0401c1dd81f099be55e7eaa863167a31e6b9",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListProfileOptions.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListProfileOptions.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListProfileOptions.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListProfileOptions.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,122 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * The listProfile options.\n+ */\n+public class ListProfileOptions extends GenericModel {\n+\n+  protected String accountId;\n+  protected String name;\n+\n+  /**\n+   * Builder.\n+   */\n+  public static class Builder {\n+    private String accountId;\n+    private String name;\n+\n+    private Builder(ListProfileOptions listProfileOptions) {\n+      this.accountId = listProfileOptions.accountId;\n+      this.name = listProfileOptions.name;\n+    }\n+\n+    /**\n+     * Instantiates a new builder.\n+     */\n+    public Builder() {\n+    }\n+\n+    /**\n+     * Instantiates a new builder with required properties.\n+     *\n+     * @param accountId the accountId\n+     */\n+    public Builder(String accountId) {\n+      this.accountId = accountId;\n+    }\n+\n+    /**\n+     * Builds a ListProfileOptions.\n+     *\n+     * @return the new ListProfileOptions instance\n+     */\n+    public ListProfileOptions build() {\n+      return new ListProfileOptions(this);\n+    }\n+\n+    /**\n+     * Set the accountId.\n+     *\n+     * @param accountId the accountId\n+     * @return the ListProfileOptions builder\n+     */\n+    public Builder accountId(String accountId) {\n+      this.accountId = accountId;\n+      return this;\n+    }\n+\n+    /**\n+     * Set the name.\n+     *\n+     * @param name the name\n+     * @return the ListProfileOptions builder\n+     */\n+    public Builder name(String name) {\n+      this.name = name;\n+      return this;\n+    }\n+  }\n+\n+  protected ListProfileOptions(Builder builder) {\n+    com.ibm.cloud.sdk.core.util.Validator.notNull(builder.accountId,\n+      \"accountId cannot be null\");\n+    accountId = builder.accountId;\n+    name = builder.name;\n+  }\n+\n+  /**\n+   * New builder.\n+   *\n+   * @return a ListProfileOptions builder\n+   */\n+  public Builder newBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  /**\n+   * Gets the accountId.\n+   *\n+   * Your account ID.\n+   *\n+   * @return the accountId\n+   */\n+  public String accountId() {\n+    return accountId;\n+  }\n+\n+  /**\n+   * Gets the name.\n+   *\n+   * The name of the profile.\n+   *\n+   * @return the name\n+   */\n+  public String name() {\n+    return name;\n+  }\n+}\n+"
  },
  {
    "sha": "28da967db12500f299a2e297528959c0451dd356",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListScopesOptions.java",
    "status": "added",
    "additions": 122,
    "deletions": 0,
    "changes": 122,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListScopesOptions.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListScopesOptions.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListScopesOptions.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,122 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * The listScopes options.\n+ */\n+public class ListScopesOptions extends GenericModel {\n+\n+  protected String accountId;\n+  protected String name;\n+\n+  /**\n+   * Builder.\n+   */\n+  public static class Builder {\n+    private String accountId;\n+    private String name;\n+\n+    private Builder(ListScopesOptions listScopesOptions) {\n+      this.accountId = listScopesOptions.accountId;\n+      this.name = listScopesOptions.name;\n+    }\n+\n+    /**\n+     * Instantiates a new builder.\n+     */\n+    public Builder() {\n+    }\n+\n+    /**\n+     * Instantiates a new builder with required properties.\n+     *\n+     * @param accountId the accountId\n+     */\n+    public Builder(String accountId) {\n+      this.accountId = accountId;\n+    }\n+\n+    /**\n+     * Builds a ListScopesOptions.\n+     *\n+     * @return the new ListScopesOptions instance\n+     */\n+    public ListScopesOptions build() {\n+      return new ListScopesOptions(this);\n+    }\n+\n+    /**\n+     * Set the accountId.\n+     *\n+     * @param accountId the accountId\n+     * @return the ListScopesOptions builder\n+     */\n+    public Builder accountId(String accountId) {\n+      this.accountId = accountId;\n+      return this;\n+    }\n+\n+    /**\n+     * Set the name.\n+     *\n+     * @param name the name\n+     * @return the ListScopesOptions builder\n+     */\n+    public Builder name(String name) {\n+      this.name = name;\n+      return this;\n+    }\n+  }\n+\n+  protected ListScopesOptions(Builder builder) {\n+    com.ibm.cloud.sdk.core.util.Validator.notNull(builder.accountId,\n+      \"accountId cannot be null\");\n+    accountId = builder.accountId;\n+    name = builder.name;\n+  }\n+\n+  /**\n+   * New builder.\n+   *\n+   * @return a ListScopesOptions builder\n+   */\n+  public Builder newBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  /**\n+   * Gets the accountId.\n+   *\n+   * Your IBM Cloud account ID.\n+   *\n+   * @return the accountId\n+   */\n+  public String accountId() {\n+    return accountId;\n+  }\n+\n+  /**\n+   * Gets the name.\n+   *\n+   * The name of the scope.\n+   *\n+   * @return the name\n+   */\n+  public String name() {\n+    return name;\n+  }\n+}\n+"
  },
  {
    "sha": "db48c58a1aec342188098cabfe6bc677a9934d63",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Profile.java",
    "status": "added",
    "additions": 214,
    "deletions": 0,
    "changes": 214,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Profile.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Profile.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Profile.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,214 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * Profile.\n+ */\n+public class Profile extends GenericModel {\n+\n+  /**\n+   * The type of profile.\n+   */\n+  public interface ProfileType {\n+    /** predefined. */\n+    String PREDEFINED = \"predefined\";\n+    /** custom. */\n+    String CUSTOM = \"custom\";\n+    /** group. */\n+    String GROUP = \"group\";\n+  }\n+\n+  protected String name;\n+  @SerializedName(\"no_of_goals\")\n+  protected Long noOfGoals;\n+  protected String description;\n+  protected Long version;\n+  @SerializedName(\"created_by\")\n+  protected String createdBy;\n+  @SerializedName(\"modified_by\")\n+  protected String modifiedBy;\n+  @SerializedName(\"reason_for_delete\")\n+  protected String reasonForDelete;\n+  @SerializedName(\"applicability_criteria\")\n+  protected ApplicabilityCriteria applicabilityCriteria;\n+  @SerializedName(\"profile_id\")\n+  protected Long profileId;\n+  @SerializedName(\"base_profile\")\n+  protected String baseProfile;\n+  @SerializedName(\"profile_type\")\n+  protected String profileType;\n+  @SerializedName(\"created_time\")\n+  protected String createdTime;\n+  @SerializedName(\"modified_time\")\n+  protected String modifiedTime;\n+  protected Boolean enabled;\n+\n+  /**\n+   * Gets the name.\n+   *\n+   * The name of the profile.\n+   *\n+   * @return the name\n+   */\n+  public String getName() {\n+    return name;\n+  }\n+\n+  /**\n+   * Gets the noOfGoals.\n+   *\n+   * The number of goals that are in the profile.\n+   *\n+   * @return the noOfGoals\n+   */\n+  public Long getNoOfGoals() {\n+    return noOfGoals;\n+  }\n+\n+  /**\n+   * Gets the description.\n+   *\n+   * A description of the profile.\n+   *\n+   * @return the description\n+   */\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the version.\n+   *\n+   * The version of the profile.\n+   *\n+   * @return the version\n+   */\n+  public Long getVersion() {\n+    return version;\n+  }\n+\n+  /**\n+   * Gets the createdBy.\n+   *\n+   * The user who created the profile.\n+   *\n+   * @return the createdBy\n+   */\n+  public String getCreatedBy() {\n+    return createdBy;\n+  }\n+\n+  /**\n+   * Gets the modifiedBy.\n+   *\n+   * The user who last modified the profile.\n+   *\n+   * @return the modifiedBy\n+   */\n+  public String getModifiedBy() {\n+    return modifiedBy;\n+  }\n+\n+  /**\n+   * Gets the reasonForDelete.\n+   *\n+   * A reason that you want to delete a profile.\n+   *\n+   * @return the reasonForDelete\n+   */\n+  public String getReasonForDelete() {\n+    return reasonForDelete;\n+  }\n+\n+  /**\n+   * Gets the applicabilityCriteria.\n+   *\n+   * The criteria that defines how a profile applies.\n+   *\n+   * @return the applicabilityCriteria\n+   */\n+  public ApplicabilityCriteria getApplicabilityCriteria() {\n+    return applicabilityCriteria;\n+  }\n+\n+  /**\n+   * Gets the profileId.\n+   *\n+   * An auto-generated unique identifying number of the profile.\n+   *\n+   * @return the profileId\n+   */\n+  public Long getProfileId() {\n+    return profileId;\n+  }\n+\n+  /**\n+   * Gets the baseProfile.\n+   *\n+   * The base profile that the controls are pulled from.\n+   *\n+   * @return the baseProfile\n+   */\n+  public String getBaseProfile() {\n+    return baseProfile;\n+  }\n+\n+  /**\n+   * Gets the profileType.\n+   *\n+   * The type of profile.\n+   *\n+   * @return the profileType\n+   */\n+  public String getProfileType() {\n+    return profileType;\n+  }\n+\n+  /**\n+   * Gets the createdTime.\n+   *\n+   * The time that the profile was created in UTC.\n+   *\n+   * @return the createdTime\n+   */\n+  public String getCreatedTime() {\n+    return createdTime;\n+  }\n+\n+  /**\n+   * Gets the modifiedTime.\n+   *\n+   * The time that the profile was most recently modified in UTC.\n+   *\n+   * @return the modifiedTime\n+   */\n+  public String getModifiedTime() {\n+    return modifiedTime;\n+  }\n+\n+  /**\n+   * Gets the enabled.\n+   *\n+   * The profile status. If the profile is enabled, the value is true. If the profile is disabled, the value is false.\n+   *\n+   * @return the enabled\n+   */\n+  public Boolean isEnabled() {\n+    return enabled;\n+  }\n+}\n+"
  },
  {
    "sha": "97a83b4b89fba2837277ea6603a4c6df9b7d7329",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfilesList.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfilesList.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfilesList.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfilesList.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import java.util.List;\n+\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * A list of profiles.\n+ */\n+public class ProfilesList extends GenericModel {\n+\n+  protected List<Profile> profiles;\n+\n+  /**\n+   * Gets the profiles.\n+   *\n+   * Profiles.\n+   *\n+   * @return the profiles\n+   */\n+  public List<Profile> getProfiles() {\n+    return profiles;\n+  }\n+}\n+"
  },
  {
    "sha": "d30f3dda4187acf2c80aa5029c832f96e11a1030",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Result.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Result.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Result.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Result.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * Result.\n+ */\n+public class Result extends GenericModel {\n+\n+  protected Boolean result;\n+  protected String message;\n+\n+  /**\n+   * Gets the result.\n+   *\n+   * Result.\n+   *\n+   * @return the result\n+   */\n+  public Boolean isResult() {\n+    return result;\n+  }\n+\n+  /**\n+   * Gets the message.\n+   *\n+   * A message is returned.\n+   *\n+   * @return the message\n+   */\n+  public String getMessage() {\n+    return message;\n+  }\n+}\n+"
  },
  {
    "sha": "cade732cd6b50052d3524f658ebd1d93a7801937",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Scan.java",
    "status": "added",
    "additions": 161,
    "deletions": 0,
    "changes": 161,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Scan.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Scan.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Scan.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,161 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * Scan.\n+ */\n+public class Scan extends GenericModel {\n+\n+  /**\n+   * The status of the collector as it completes a scan.\n+   */\n+  public interface Status {\n+    /** pending. */\n+    String PENDING = \"pending\";\n+    /** discovery_started. */\n+    String DISCOVERY_STARTED = \"discovery_started\";\n+    /** discovery_completed. */\n+    String DISCOVERY_COMPLETED = \"discovery_completed\";\n+    /** error_in_discovery. */\n+    String ERROR_IN_DISCOVERY = \"error_in_discovery\";\n+    /** gateway_aborted. */\n+    String GATEWAY_ABORTED = \"gateway_aborted\";\n+    /** controller_aborted. */\n+    String CONTROLLER_ABORTED = \"controller_aborted\";\n+    /** not_accepted. */\n+    String NOT_ACCEPTED = \"not_accepted\";\n+    /** waiting_for_refine. */\n+    String WAITING_FOR_REFINE = \"waiting_for_refine\";\n+    /** validation_started. */\n+    String VALIDATION_STARTED = \"validation_started\";\n+    /** validation_completed. */\n+    String VALIDATION_COMPLETED = \"validation_completed\";\n+    /** sent_to_collector. */\n+    String SENT_TO_COLLECTOR = \"sent_to_collector\";\n+    /** discovery_in_progress. */\n+    String DISCOVERY_IN_PROGRESS = \"discovery_in_progress\";\n+    /** validation_in_progress. */\n+    String VALIDATION_IN_PROGRESS = \"validation_in_progress\";\n+    /** error_in_validation. */\n+    String ERROR_IN_VALIDATION = \"error_in_validation\";\n+    /** discovery_result_posted_with_error. */\n+    String DISCOVERY_RESULT_POSTED_WITH_ERROR = \"discovery_result_posted_with_error\";\n+    /** discovery_result_posted_no_error. */\n+    String DISCOVERY_RESULT_POSTED_NO_ERROR = \"discovery_result_posted_no_error\";\n+    /** validation_result_posted_with_error. */\n+    String VALIDATION_RESULT_POSTED_WITH_ERROR = \"validation_result_posted_with_error\";\n+    /** validation_result_posted_no_error. */\n+    String VALIDATION_RESULT_POSTED_NO_ERROR = \"validation_result_posted_no_error\";\n+    /** fact_collection_started. */\n+    String FACT_COLLECTION_STARTED = \"fact_collection_started\";\n+    /** fact_collection_in_progress. */\n+    String FACT_COLLECTION_IN_PROGRESS = \"fact_collection_in_progress\";\n+    /** fact_collection_completed. */\n+    String FACT_COLLECTION_COMPLETED = \"fact_collection_completed\";\n+    /** error_in_fact_collection. */\n+    String ERROR_IN_FACT_COLLECTION = \"error_in_fact_collection\";\n+    /** fact_validation_started. */\n+    String FACT_VALIDATION_STARTED = \"fact_validation_started\";\n+    /** fact_validation_in_progress. */\n+    String FACT_VALIDATION_IN_PROGRESS = \"fact_validation_in_progress\";\n+    /** fact_validation_completed. */\n+    String FACT_VALIDATION_COMPLETED = \"fact_validation_completed\";\n+    /** error_in_fact_validation. */\n+    String ERROR_IN_FACT_VALIDATION = \"error_in_fact_validation\";\n+    /** abort_task_request_received. */\n+    String ABORT_TASK_REQUEST_RECEIVED = \"abort_task_request_received\";\n+    /** error_in_abort_task_request. */\n+    String ERROR_IN_ABORT_TASK_REQUEST = \"error_in_abort_task_request\";\n+    /** abort_task_request_completed. */\n+    String ABORT_TASK_REQUEST_COMPLETED = \"abort_task_request_completed\";\n+    /** user_aborted. */\n+    String USER_ABORTED = \"user_aborted\";\n+    /** abort_task_request_failed. */\n+    String ABORT_TASK_REQUEST_FAILED = \"abort_task_request_failed\";\n+    /** remediation_started. */\n+    String REMEDIATION_STARTED = \"remediation_started\";\n+    /** remediation_in_progress. */\n+    String REMEDIATION_IN_PROGRESS = \"remediation_in_progress\";\n+    /** error_in_remediation. */\n+    String ERROR_IN_REMEDIATION = \"error_in_remediation\";\n+    /** remediation_completed. */\n+    String REMEDIATION_COMPLETED = \"remediation_completed\";\n+    /** inventory_started. */\n+    String INVENTORY_STARTED = \"inventory_started\";\n+    /** inventory_in_progress. */\n+    String INVENTORY_IN_PROGRESS = \"inventory_in_progress\";\n+    /** inventory_completed. */\n+    String INVENTORY_COMPLETED = \"inventory_completed\";\n+    /** error_in_inventory. */\n+    String ERROR_IN_INVENTORY = \"error_in_inventory\";\n+    /** inventory_completed_with_error. */\n+    String INVENTORY_COMPLETED_WITH_ERROR = \"inventory_completed_with_error\";\n+  }\n+\n+  @SerializedName(\"scan_id\")\n+  protected Long scanId;\n+  @SerializedName(\"discover_id\")\n+  protected Long discoverId;\n+  protected String status;\n+  @SerializedName(\"status_message\")\n+  protected String statusMessage;\n+\n+  /**\n+   * Gets the scanId.\n+   *\n+   * An auto-generated unique identifier for the scan.\n+   *\n+   * @return the scanId\n+   */\n+  public Long getScanId() {\n+    return scanId;\n+  }\n+\n+  /**\n+   * Gets the discoverId.\n+   *\n+   * An auto-generated unique identifier for discovery.\n+   *\n+   * @return the discoverId\n+   */\n+  public Long getDiscoverId() {\n+    return discoverId;\n+  }\n+\n+  /**\n+   * Gets the status.\n+   *\n+   * The status of the collector as it completes a scan.\n+   *\n+   * @return the status\n+   */\n+  public String getStatus() {\n+    return status;\n+  }\n+\n+  /**\n+   * Gets the statusMessage.\n+   *\n+   * The current status of the collector.\n+   *\n+   * @return the statusMessage\n+   */\n+  public String getStatusMessage() {\n+    return statusMessage;\n+  }\n+}\n+"
  },
  {
    "sha": "c5517784469633420d58749c4d1db78b41b18f72",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Scope.java",
    "status": "added",
    "additions": 250,
    "deletions": 0,
    "changes": 250,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Scope.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Scope.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/Scope.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,250 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import java.util.List;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * Scope.\n+ */\n+public class Scope extends GenericModel {\n+\n+  /**\n+   * The environment that the scope is targeted to.\n+   */\n+  public interface EnvironmentType {\n+    /** ibm. */\n+    String IBM = \"ibm\";\n+    /** aws. */\n+    String AWS = \"aws\";\n+    /** azure. */\n+    String AZURE = \"azure\";\n+    /** on_premise. */\n+    String ON_PREMISE = \"on_premise\";\n+    /** hosted. */\n+    String HOSTED = \"hosted\";\n+    /** services. */\n+    String SERVICES = \"services\";\n+    /** openstack. */\n+    String OPENSTACK = \"openstack\";\n+    /** gcp. */\n+    String GCP = \"gcp\";\n+  }\n+\n+  /**\n+   * The last type of scan that was run on the scope.\n+   */\n+  public interface LastScanType {\n+    /** discovery. */\n+    String DISCOVERY = \"discovery\";\n+    /** validation. */\n+    String VALIDATION = \"validation\";\n+    /** fact_collection. */\n+    String FACT_COLLECTION = \"fact_collection\";\n+    /** fact_validation. */\n+    String FACT_VALIDATION = \"fact_validation\";\n+    /** inventory. */\n+    String INVENTORY = \"inventory\";\n+    /** remediation. */\n+    String REMEDIATION = \"remediation\";\n+    /** abort_tasks. */\n+    String ABORT_TASKS = \"abort_tasks\";\n+    /** evidence. */\n+    String EVIDENCE = \"evidence\";\n+    /** script. */\n+    String SCRIPT = \"script\";\n+  }\n+\n+  protected String description;\n+  @SerializedName(\"created_by\")\n+  protected String createdBy;\n+  @SerializedName(\"modified_by\")\n+  protected String modifiedBy;\n+  @SerializedName(\"scope_id\")\n+  protected Long scopeId;\n+  protected String name;\n+  protected Boolean enabled;\n+  @SerializedName(\"environment_type\")\n+  protected String environmentType;\n+  @SerializedName(\"created_time\")\n+  protected String createdTime;\n+  @SerializedName(\"modified_time\")\n+  protected String modifiedTime;\n+  @SerializedName(\"last_scan_type\")\n+  protected String lastScanType;\n+  @SerializedName(\"last_scan_type_description\")\n+  protected String lastScanTypeDescription;\n+  @SerializedName(\"last_scan_status_updated_time\")\n+  protected String lastScanStatusUpdatedTime;\n+  @SerializedName(\"collectors_id\")\n+  protected List<Long> collectorsId;\n+  protected List<Scan> scans;\n+\n+  /**\n+   * Gets the description.\n+   *\n+   * A detailed description of the scope.\n+   *\n+   * @return the description\n+   */\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the createdBy.\n+   *\n+   * The user who created the scope.\n+   *\n+   * @return the createdBy\n+   */\n+  public String getCreatedBy() {\n+    return createdBy;\n+  }\n+\n+  /**\n+   * Gets the modifiedBy.\n+   *\n+   * The user who most recently modified the scope.\n+   *\n+   * @return the modifiedBy\n+   */\n+  public String getModifiedBy() {\n+    return modifiedBy;\n+  }\n+\n+  /**\n+   * Gets the scopeId.\n+   *\n+   * An auto-generated unique identifier for the scope.\n+   *\n+   * @return the scopeId\n+   */\n+  public Long getScopeId() {\n+    return scopeId;\n+  }\n+\n+  /**\n+   * Gets the name.\n+   *\n+   * A unique name for your scope.\n+   *\n+   * @return the name\n+   */\n+  public String getName() {\n+    return name;\n+  }\n+\n+  /**\n+   * Gets the enabled.\n+   *\n+   * Indicates whether scope is enabled/disabled.\n+   *\n+   * @return the enabled\n+   */\n+  public Boolean isEnabled() {\n+    return enabled;\n+  }\n+\n+  /**\n+   * Gets the environmentType.\n+   *\n+   * The environment that the scope is targeted to.\n+   *\n+   * @return the environmentType\n+   */\n+  public String getEnvironmentType() {\n+    return environmentType;\n+  }\n+\n+  /**\n+   * Gets the createdTime.\n+   *\n+   * The time that the scope was created in UTC.\n+   *\n+   * @return the createdTime\n+   */\n+  public String getCreatedTime() {\n+    return createdTime;\n+  }\n+\n+  /**\n+   * Gets the modifiedTime.\n+   *\n+   * The time that the scope was last modified in UTC.\n+   *\n+   * @return the modifiedTime\n+   */\n+  public String getModifiedTime() {\n+    return modifiedTime;\n+  }\n+\n+  /**\n+   * Gets the lastScanType.\n+   *\n+   * The last type of scan that was run on the scope.\n+   *\n+   * @return the lastScanType\n+   */\n+  public String getLastScanType() {\n+    return lastScanType;\n+  }\n+\n+  /**\n+   * Gets the lastScanTypeDescription.\n+   *\n+   * A description of the last scan type.\n+   *\n+   * @return the lastScanTypeDescription\n+   */\n+  public String getLastScanTypeDescription() {\n+    return lastScanTypeDescription;\n+  }\n+\n+  /**\n+   * Gets the lastScanStatusUpdatedTime.\n+   *\n+   * The last time that a scan status for a scope was updated in UTC.\n+   *\n+   * @return the lastScanStatusUpdatedTime\n+   */\n+  public String getLastScanStatusUpdatedTime() {\n+    return lastScanStatusUpdatedTime;\n+  }\n+\n+  /**\n+   * Gets the collectorsId.\n+   *\n+   * The unique IDs of the collectors that are attached to the scope.\n+   *\n+   * @return the collectorsId\n+   */\n+  public List<Long> getCollectorsId() {\n+    return collectorsId;\n+  }\n+\n+  /**\n+   * Gets the scans.\n+   *\n+   * A list of the scans that have been run on the scope.\n+   *\n+   * @return the scans\n+   */\n+  public List<Scan> getScans() {\n+    return scans;\n+  }\n+}\n+"
  },
  {
    "sha": "5b8f1fcbb7d8aec646e17d6ef719039da4858c06",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopesList.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopesList.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopesList.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopesList.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import java.util.List;\n+\n+import com.ibm.cloud.sdk.core.service.model.GenericModel;\n+\n+/**\n+ * Scopes list.\n+ */\n+public class ScopesList extends GenericModel {\n+\n+  protected List<Scope> scopes;\n+\n+  /**\n+   * Gets the scopes.\n+   *\n+   * Scopes.\n+   *\n+   * @return the scopes\n+   */\n+  public List<Scope> getScopes() {\n+    return scopes;\n+  }\n+}\n+"
  },
  {
    "sha": "931e5a8a692161697e696f4c9701604d991cbd00",
    "filename": "modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/package-info.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/package-info.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/package-info.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/main/java/com/ibm/cloud/platform_services/posture_management/v1/package-info.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,16 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+/**\n+ * Posture Management v1.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1;"
  },
  {
    "sha": "74e9e24740299811e6591170624643905740d380",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementIT.java",
    "status": "added",
    "additions": 193,
    "deletions": 0,
    "changes": 193,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementIT.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementIT.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementIT.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.CreateValidationScanOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListProfileOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListScopesOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ProfilesList;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Result;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ScopesList;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.platform_services.test.SdkIntegrationTestBase;\n+import com.ibm.cloud.sdk.core.http.Response;\n+import com.ibm.cloud.sdk.core.service.exception.ServiceResponseException;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import com.ibm.cloud.sdk.core.util.CredentialUtils;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.testng.ITestContext;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Integration test class for the PostureManagement service.\n+ */\n+public class PostureManagementIT extends SdkIntegrationTestBase {\n+\n+    public PostureManagement service = null;\n+    public static Map<String, String> config = null;\n+\n+    private static String URL;\n+    private static String AUTH_TYPE;\n+    private static String APIKEY;\n+    private static String AUTH_URL;\n+    private static String ACCOUNT_ID;\n+    private static String PROFILE_NAME;\n+    private static String SCOPES_NAME;\n+\n+    private static String SCOPE_ID = \"scopeId\";\n+    private static String PROFILE_ID = \"profileId\";\n+\n+    /**\n+     * This method provides our config filename to the base class.\n+     */\n+    public String getConfigFilename() {\n+        return \"../../posture_management_v1.env\";\n+    }\n+\n+    @BeforeClass\n+    public void constructService(ITestContext iTestContext) {\n+        // Ask super if we should skip the tests.\n+        if (skipTests()) {\n+            return;\n+        }\n+\n+        service = PostureManagement.newInstance();\n+        assertNotNull(service);\n+        assertNotNull(service.getServiceUrl());\n+\n+        // Load up our test-specific config properties.\n+        config = CredentialUtils.getServiceProperties(PostureManagement.DEFAULT_SERVICE_NAME);\n+        assertNotNull(config);\n+        assertFalse(config.isEmpty());\n+        assertEquals(service.getServiceUrl(), config.get(\"URL\"));\n+\n+        URL = config.get(\"URL\");\n+        AUTH_TYPE = config.get(\"AUTH_TYPE\");\n+        APIKEY = config.get(\"APIKEY\");\n+        AUTH_URL = config.get(\"AUTH_URL\");\n+        ACCOUNT_ID = config.get(\"ACCOUNT_ID\");\n+        PROFILE_NAME = config.get(\"PROFILE_NAME\");\n+        SCOPES_NAME = config.get(\"SCOPES_NAME\");\n+\n+        assertNotNull(URL);\n+        assertNotNull(AUTH_TYPE);\n+        assertNotNull(APIKEY);\n+        assertNotNull(AUTH_URL);\n+        assertNotNull(ACCOUNT_ID);\n+        assertNotNull(PROFILE_NAME);\n+        assertNotNull(SCOPES_NAME);\n+\n+        System.out.println(\"Setup complete.\");\n+    }\n+\n+    @AfterClass\n+    public void tearDown() {\n+        // Add any clean up logic here\n+        System.out.println(\"Clean up complete.\");\n+    }\n+\n+    @Test(priority = 0)\n+    public void testListScopes(ITestContext iTestContext)\n+            throws Exception {\n+        try {\n+            ListScopesOptions listScopesOptions = new ListScopesOptions.Builder().accountId(ACCOUNT_ID)\n+                                                                                 .name(SCOPES_NAME)\n+                                                                                 .build();\n+\n+            // Invoke operation\n+            Response<ScopesList> response = service.listScopes(listScopesOptions)\n+                                                   .execute();\n+            // Validate response\n+            assertNotNull(response);\n+            assertEquals(response.getStatusCode(), 200);\n+\n+            ScopesList scopesListResult = response.getResult();\n+\n+            assertNotNull(scopesListResult);\n+            assertNotEquals(scopesListResult.getScopes().size(), 0);\n+            assertNotEquals(scopesListResult.getScopes().get(0).getScopeId(), 0L);\n+\n+            iTestContext.setAttribute(SCOPE_ID, scopesListResult.getScopes().get(0).getScopeId());\n+        } catch (ServiceResponseException e) {\n+            fail(String.format(\"Service returned status code %d: %s\\nError details: %s\", e.getStatusCode(),\n+                               e.getMessage(), e.getDebuggingInfo()));\n+        }\n+    }\n+\n+    @Test(priority = 1)\n+    public void testListProfile(ITestContext iTestContext)\n+            throws Exception {\n+        try {\n+            ListProfileOptions listProfileOptions = new ListProfileOptions.Builder().accountId(ACCOUNT_ID)\n+                                                                                    .name(PROFILE_NAME)\n+                                                                                    .build();\n+\n+            // Invoke operation\n+            Response<ProfilesList> response = service.listProfile(listProfileOptions)\n+                                                     .execute();\n+            // Validate response\n+            assertNotNull(response);\n+            assertEquals(response.getStatusCode(), 200);\n+\n+            ProfilesList profilesListResult = response.getResult();\n+\n+            assertNotNull(profilesListResult);\n+            assertNotEquals(profilesListResult.getProfiles().size(), 0);\n+            assertNotEquals(profilesListResult.getProfiles().get(0).getProfileId(), 0L);\n+            iTestContext.setAttribute(PROFILE_ID, profilesListResult.getProfiles().get(0).getProfileId());\n+        } catch (ServiceResponseException e) {\n+            fail(String.format(\"Service returned status code %d: %s\\nError details: %s\", e.getStatusCode(),\n+                               e.getMessage(), e.getDebuggingInfo()));\n+        }\n+    }\n+\n+    @Test(priority = 2)\n+    public void testCreateValidationScan(ITestContext iTestContext)\n+            throws Exception {\n+        try {\n+            Long scopeId = (Long) iTestContext.getAttribute(SCOPE_ID);\n+            Long profileId = (Long) iTestContext.getAttribute(PROFILE_ID);\n+\n+            CreateValidationScanOptions createValidationScanOptions =\n+                    new CreateValidationScanOptions.Builder().accountId(ACCOUNT_ID)\n+                                                             .scopeId(scopeId)\n+                                                             .profileId(profileId)\n+                                                             .build();\n+\n+            // Invoke operation\n+            Response<Result> response = service.createValidationScan(createValidationScanOptions)\n+                                               .execute();\n+            // Validate response\n+            assertNotNull(response);\n+            assertEquals(response.getStatusCode(), 200);\n+\n+            Result resultResult = response.getResult();\n+\n+            assertNotNull(resultResult);\n+        } catch (ServiceResponseException e) {\n+            fail(String.format(\"Service returned status code %d: %s\\nError details: %s\", e.getStatusCode(),\n+                               e.getMessage(), e.getDebuggingInfo()));\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "d7f291da54f981f4f37cb380f94ff4ef5d9bf626",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementTest.java",
    "status": "added",
    "additions": 269,
    "deletions": 0,
    "changes": 269,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/PostureManagementTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,269 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.PostureManagement;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ApplicabilityCriteria;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.CreateValidationScanOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListProfileOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListScopesOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Profile;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ProfilesList;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Result;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Scan;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Scope;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ScopesList;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.http.Response;\n+import com.ibm.cloud.sdk.core.security.Authenticator;\n+import com.ibm.cloud.sdk.core.security.NoAuthAuthenticator;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import com.ibm.cloud.sdk.core.util.EnvironmentUtils;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import okhttp3.mockwebserver.MockResponse;\n+import okhttp3.mockwebserver.MockWebServer;\n+import okhttp3.mockwebserver.RecordedRequest;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.testng.PowerMockTestCase;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the PostureManagement service.\n+ */\n+@PrepareForTest({ EnvironmentUtils.class })\n+@PowerMockIgnore({\"javax.net.ssl.*\", \"org.mockito.*\"})\n+public class PostureManagementTest extends PowerMockTestCase {\n+\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  protected MockWebServer server;\n+  protected PostureManagement postureManagementService;\n+\n+  // Creates a mock set of environment variables that are returned by EnvironmentUtils.getenv().\n+  private Map<String, String> getTestProcessEnvironment() {\n+    Map<String, String> env = new HashMap<>();\n+    env.put(\"TESTSERVICE_AUTH_TYPE\", \"noAuth\");\n+    return env;\n+  }\n+\n+  public void constructClientService() throws Throwable {\n+    PowerMockito.spy(EnvironmentUtils.class);\n+    PowerMockito.when(EnvironmentUtils.getenv()).thenReturn(getTestProcessEnvironment());\n+    final String serviceName = \"testService\";\n+\n+    postureManagementService = PostureManagement.newInstance(serviceName);\n+    String url = server.url(\"/\").toString();\n+    postureManagementService.setServiceUrl(url);\n+  }\n+\n+  /**\n+  * Negative Test - construct the service with a null authenticator.\n+  */\n+  @Test(expectedExceptions = IllegalArgumentException.class)\n+  public void testConstructorWithNullAuthenticator() throws Throwable {\n+    final String serviceName = \"testService\";\n+\n+    new PostureManagement(serviceName, null);\n+  }\n+\n+  @Test\n+  public void testCreateValidationScanWOptions() throws Throwable {\n+    // Schedule some responses.\n+    String mockResponseBody = \"{\\\"result\\\": true, \\\"message\\\": \\\"message\\\"}\";\n+    String createValidationScanPath = \"/posture/v1/scans/validation\";\n+\n+    server.enqueue(new MockResponse()\n+    .setHeader(\"Content-type\", \"application/json\")\n+    .setResponseCode(200)\n+    .setBody(mockResponseBody));\n+\n+    constructClientService();\n+\n+    // Construct an instance of the CreateValidationScanOptions model\n+    CreateValidationScanOptions createValidationScanOptionsModel = new CreateValidationScanOptions.Builder()\n+    .accountId(\"testString\")\n+    .scopeId(Long.valueOf(\"1\"))\n+    .profileId(Long.valueOf(\"6\"))\n+    .groupProfileId(Long.valueOf(\"13\"))\n+    .build();\n+\n+    // Invoke operation with valid options model (positive test)\n+    Response<Result> response = postureManagementService.createValidationScan(createValidationScanOptionsModel).execute();\n+    assertNotNull(response);\n+    Result responseObj = response.getResult();\n+    assertNotNull(responseObj);\n+\n+    // Verify the contents of the request\n+    RecordedRequest request = server.takeRequest();\n+    assertNotNull(request);\n+    assertEquals(request.getMethod(), \"POST\");\n+\n+    // Check query\n+    Map<String, String> query = TestUtilities.parseQueryString(request);\n+    assertNotNull(query);\n+    // Get query params\n+    assertEquals(query.get(\"account_id\"), \"testString\");\n+    // Check request path\n+    String parsedPath = TestUtilities.parseReqPath(request);\n+    assertEquals(parsedPath, createValidationScanPath);\n+  }\n+\n+  // Test the createValidationScan operation with null options model parameter\n+  @Test(expectedExceptions = IllegalArgumentException.class)\n+  public void testCreateValidationScanNoOptions() throws Throwable {\n+    // construct the service\n+    constructClientService();\n+\n+    server.enqueue(new MockResponse());\n+\n+    // Invoke operation with null options model (negative test)\n+    postureManagementService.createValidationScan(null).execute();\n+  }\n+\n+  @Test\n+  public void testListProfileWOptions() throws Throwable {\n+    // Schedule some responses.\n+    String mockResponseBody = \"{\\\"profiles\\\": [{\\\"name\\\": \\\"CIS IBM Foundations Benchmark 1.0.0\\\", \\\"no_of_goals\\\": 58, \\\"description\\\": \\\"CIS IBM Foundations Benchmark 1.0.0\\\", \\\"version\\\": 1, \\\"created_by\\\": \\\"IBMid-5500081P68\\\", \\\"modified_by\\\": \\\"IBMid-5500081P68\\\", \\\"reason_for_delete\\\": \\\"reasonForDelete\\\", \\\"applicability_criteria\\\": {\\\"environment\\\": [\\\"[IBM Cloud]\\\"], \\\"resource\\\": [\\\"[My_example_bucket]\\\"], \\\"environment_category\\\": [\\\"[Cloud]\\\"], \\\"resource_category\\\": [\\\"[Storage]\\\"], \\\"resource_type\\\": [\\\"Bucket\\\"], \\\"software_details\\\": {\\\"mapKey\\\": \\\"anyValue\\\"}, \\\"os_details\\\": {\\\"mapKey\\\": \\\"anyValue\\\"}, \\\"additional_details\\\": {\\\"mapKey\\\": \\\"anyValue\\\"}, \\\"environment_category_description\\\": {\\\"mapKey\\\": \\\"Cloud\\\"}, \\\"environment_description\\\": {\\\"mapKey\\\": \\\"IBM Cloud\\\"}, \\\"resource_category_description\\\": {\\\"mapKey\\\": \\\"Storage\\\"}, \\\"resource_type_description\\\": {\\\"mapKey\\\": \\\"Bucket\\\"}, \\\"resource_description\\\": {\\\"mapKey\\\": \\\"My_specific_bucket\\\"}}, \\\"profile_id\\\": 3045, \\\"base_profile\\\": \\\"CIS IBM Foundations Benchmark 1.0.0\\\", \\\"profile_type\\\": \\\"predefined\\\", \\\"created_time\\\": \\\"2021-02-26T04:07:25Z\\\", \\\"modified_time\\\": \\\"2021-02-26T04:07:25Z\\\", \\\"enabled\\\": true}]}\";\n+    String listProfilePath = \"/posture/v1/profiles\";\n+\n+    server.enqueue(new MockResponse()\n+    .setHeader(\"Content-type\", \"application/json\")\n+    .setResponseCode(200)\n+    .setBody(mockResponseBody));\n+\n+    constructClientService();\n+\n+    // Construct an instance of the ListProfileOptions model\n+    ListProfileOptions listProfileOptionsModel = new ListProfileOptions.Builder()\n+    .accountId(\"testString\")\n+    .name(\"testString\")\n+    .build();\n+\n+    // Invoke operation with valid options model (positive test)\n+    Response<ProfilesList> response = postureManagementService.listProfile(listProfileOptionsModel).execute();\n+    assertNotNull(response);\n+    ProfilesList responseObj = response.getResult();\n+    assertNotNull(responseObj);\n+\n+    // Verify the contents of the request\n+    RecordedRequest request = server.takeRequest();\n+    assertNotNull(request);\n+    assertEquals(request.getMethod(), \"GET\");\n+\n+    // Check query\n+    Map<String, String> query = TestUtilities.parseQueryString(request);\n+    assertNotNull(query);\n+    // Get query params\n+    assertEquals(query.get(\"account_id\"), \"testString\");\n+    assertEquals(query.get(\"name\"), \"testString\");\n+    // Check request path\n+    String parsedPath = TestUtilities.parseReqPath(request);\n+    assertEquals(parsedPath, listProfilePath);\n+  }\n+\n+  // Test the listProfile operation with null options model parameter\n+  @Test(expectedExceptions = IllegalArgumentException.class)\n+  public void testListProfileNoOptions() throws Throwable {\n+    // construct the service\n+    constructClientService();\n+\n+    server.enqueue(new MockResponse());\n+\n+    // Invoke operation with null options model (negative test)\n+    postureManagementService.listProfile(null).execute();\n+  }\n+\n+  @Test\n+  public void testListScopesWOptions() throws Throwable {\n+    // Schedule some responses.\n+    String mockResponseBody = \"{\\\"scopes\\\": [{\\\"description\\\": \\\"This scope targets all of the resources that are available in our IBM Cloud staging environment.\\\", \\\"created_by\\\": \\\"IBMid-5500081P68\\\", \\\"modified_by\\\": \\\"IBMid-5500081P68\\\", \\\"scope_id\\\": 1, \\\"name\\\": \\\"My_Example_Scope\\\", \\\"enabled\\\": true, \\\"environment_type\\\": \\\"ibm\\\", \\\"created_time\\\": \\\"2021-02-26T04:07:25Z\\\", \\\"modified_time\\\": \\\"2021-02-26T04:07:25Z\\\", \\\"last_scan_type\\\": \\\"fact_collection\\\", \\\"last_scan_type_description\\\": \\\"Fact collection\\\", \\\"last_scan_status_updated_time\\\": \\\"2021-02-26T04:07:25Z\\\", \\\"collectors_id\\\": [12], \\\"scans\\\": [{\\\"scan_id\\\": 235, \\\"discover_id\\\": 49, \\\"status\\\": \\\"validation_completed\\\", \\\"status_message\\\": \\\"The collector aborted the task during upgrade.\\\"}]}]}\";\n+    String listScopesPath = \"/posture/v1/scopes\";\n+\n+    server.enqueue(new MockResponse()\n+    .setHeader(\"Content-type\", \"application/json\")\n+    .setResponseCode(200)\n+    .setBody(mockResponseBody));\n+\n+    constructClientService();\n+\n+    // Construct an instance of the ListScopesOptions model\n+    ListScopesOptions listScopesOptionsModel = new ListScopesOptions.Builder()\n+    .accountId(\"testString\")\n+    .name(\"testString\")\n+    .build();\n+\n+    // Invoke operation with valid options model (positive test)\n+    Response<ScopesList> response = postureManagementService.listScopes(listScopesOptionsModel).execute();\n+    assertNotNull(response);\n+    ScopesList responseObj = response.getResult();\n+    assertNotNull(responseObj);\n+\n+    // Verify the contents of the request\n+    RecordedRequest request = server.takeRequest();\n+    assertNotNull(request);\n+    assertEquals(request.getMethod(), \"GET\");\n+\n+    // Check query\n+    Map<String, String> query = TestUtilities.parseQueryString(request);\n+    assertNotNull(query);\n+    // Get query params\n+    assertEquals(query.get(\"account_id\"), \"testString\");\n+    assertEquals(query.get(\"name\"), \"testString\");\n+    // Check request path\n+    String parsedPath = TestUtilities.parseReqPath(request);\n+    assertEquals(parsedPath, listScopesPath);\n+  }\n+\n+  // Test the listScopes operation with null options model parameter\n+  @Test(expectedExceptions = IllegalArgumentException.class)\n+  public void testListScopesNoOptions() throws Throwable {\n+    // construct the service\n+    constructClientService();\n+\n+    server.enqueue(new MockResponse());\n+\n+    // Invoke operation with null options model (negative test)\n+    postureManagementService.listScopes(null).execute();\n+  }\n+\n+  /** Initialize the server */\n+  @BeforeMethod\n+  public void setUpMockServer() {\n+    try {\n+        server = new MockWebServer();\n+        // register handler\n+        server.start();\n+        }\n+    catch (IOException err) {\n+        fail(\"Failed to instantiate mock web server\");\n+    }\n+  }\n+\n+  @AfterMethod\n+  public void tearDownMockServer() throws IOException {\n+    server.shutdown();\n+    postureManagementService = null;\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "80febf4102575bdfdad8d694223e190f8bc03653",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ApplicabilityCriteriaTest.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ApplicabilityCriteriaTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ApplicabilityCriteriaTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ApplicabilityCriteriaTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ApplicabilityCriteria;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the ApplicabilityCriteria model.\n+ */\n+public class ApplicabilityCriteriaTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testApplicabilityCriteria() throws Throwable {\n+    ApplicabilityCriteria applicabilityCriteriaModel = new ApplicabilityCriteria();\n+    assertNull(applicabilityCriteriaModel.getEnvironment());\n+    assertNull(applicabilityCriteriaModel.getResource());\n+    assertNull(applicabilityCriteriaModel.getEnvironmentCategory());\n+    assertNull(applicabilityCriteriaModel.getResourceCategory());\n+    assertNull(applicabilityCriteriaModel.getResourceType());\n+    assertNull(applicabilityCriteriaModel.getSoftwareDetails());\n+    assertNull(applicabilityCriteriaModel.getOsDetails());\n+    assertNull(applicabilityCriteriaModel.getAdditionalDetails());\n+    assertNull(applicabilityCriteriaModel.getEnvironmentCategoryDescription());\n+    assertNull(applicabilityCriteriaModel.getEnvironmentDescription());\n+    assertNull(applicabilityCriteriaModel.getResourceCategoryDescription());\n+    assertNull(applicabilityCriteriaModel.getResourceTypeDescription());\n+    assertNull(applicabilityCriteriaModel.getResourceDescription());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "636f9bae92ad84f54e590344653aa7d0f19e40bb",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/CreateValidationScanOptionsTest.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/CreateValidationScanOptionsTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/CreateValidationScanOptionsTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/CreateValidationScanOptionsTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.CreateValidationScanOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the CreateValidationScanOptions model.\n+ */\n+public class CreateValidationScanOptionsTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testCreateValidationScanOptions() throws Throwable {\n+    CreateValidationScanOptions createValidationScanOptionsModel = new CreateValidationScanOptions.Builder()\n+      .accountId(\"testString\")\n+      .scopeId(Long.valueOf(\"1\"))\n+      .profileId(Long.valueOf(\"6\"))\n+      .groupProfileId(Long.valueOf(\"13\"))\n+      .build();\n+    assertEquals(createValidationScanOptionsModel.accountId(), \"testString\");\n+    assertEquals(createValidationScanOptionsModel.scopeId(), Long.valueOf(\"1\"));\n+    assertEquals(createValidationScanOptionsModel.profileId(), Long.valueOf(\"6\"));\n+    assertEquals(createValidationScanOptionsModel.groupProfileId(), Long.valueOf(\"13\"));\n+  }\n+\n+  @Test(expectedExceptions = IllegalArgumentException.class)\n+  public void testCreateValidationScanOptionsError() throws Throwable {\n+    new CreateValidationScanOptions.Builder().build();\n+  }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "1d23f79684e7dd54d02e988da3e9ebb5ce6a2e9e",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListProfileOptionsTest.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListProfileOptionsTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListProfileOptionsTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListProfileOptionsTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListProfileOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the ListProfileOptions model.\n+ */\n+public class ListProfileOptionsTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testListProfileOptions() throws Throwable {\n+    ListProfileOptions listProfileOptionsModel = new ListProfileOptions.Builder()\n+      .accountId(\"testString\")\n+      .name(\"testString\")\n+      .build();\n+    assertEquals(listProfileOptionsModel.accountId(), \"testString\");\n+    assertEquals(listProfileOptionsModel.name(), \"testString\");\n+  }\n+\n+  @Test(expectedExceptions = IllegalArgumentException.class)\n+  public void testListProfileOptionsError() throws Throwable {\n+    new ListProfileOptions.Builder().build();\n+  }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "957ef80558085c47e57a94d24cc1183643782e07",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListScopesOptionsTest.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListScopesOptionsTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListScopesOptionsTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ListScopesOptionsTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ListScopesOptions;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the ListScopesOptions model.\n+ */\n+public class ListScopesOptionsTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testListScopesOptions() throws Throwable {\n+    ListScopesOptions listScopesOptionsModel = new ListScopesOptions.Builder()\n+      .accountId(\"testString\")\n+      .name(\"testString\")\n+      .build();\n+    assertEquals(listScopesOptionsModel.accountId(), \"testString\");\n+    assertEquals(listScopesOptionsModel.name(), \"testString\");\n+  }\n+\n+  @Test(expectedExceptions = IllegalArgumentException.class)\n+  public void testListScopesOptionsError() throws Throwable {\n+    new ListScopesOptions.Builder().build();\n+  }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4330d94e972b72090d5e8398cb1820d72c9c2255",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfileTest.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfileTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfileTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfileTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ApplicabilityCriteria;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Profile;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the Profile model.\n+ */\n+public class ProfileTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testProfile() throws Throwable {\n+    Profile profileModel = new Profile();\n+    assertNull(profileModel.getName());\n+    assertNull(profileModel.getNoOfGoals());\n+    assertNull(profileModel.getDescription());\n+    assertNull(profileModel.getVersion());\n+    assertNull(profileModel.getCreatedBy());\n+    assertNull(profileModel.getModifiedBy());\n+    assertNull(profileModel.getReasonForDelete());\n+    assertNull(profileModel.getApplicabilityCriteria());\n+    assertNull(profileModel.getProfileId());\n+    assertNull(profileModel.getBaseProfile());\n+    assertNull(profileModel.getProfileType());\n+    assertNull(profileModel.getCreatedTime());\n+    assertNull(profileModel.getModifiedTime());\n+    assertNull(profileModel.isEnabled());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b0ff01447ead1d380610f1450e9830680e611acc",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfilesListTest.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfilesListTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfilesListTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ProfilesListTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ApplicabilityCriteria;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Profile;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ProfilesList;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the ProfilesList model.\n+ */\n+public class ProfilesListTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testProfilesList() throws Throwable {\n+    ProfilesList profilesListModel = new ProfilesList();\n+    assertNull(profilesListModel.getProfiles());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a24bf971812c045fbdbcda711b2c27a551cf1da7",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ResultTest.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ResultTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ResultTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ResultTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Result;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the Result model.\n+ */\n+public class ResultTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testResult() throws Throwable {\n+    Result resultModel = new Result();\n+    assertNull(resultModel.isResult());\n+    assertNull(resultModel.getMessage());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "457b544b3ee04f8aa5e3b61dce6e4cde8039b502",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScanTest.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScanTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScanTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScanTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Scan;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the Scan model.\n+ */\n+public class ScanTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testScan() throws Throwable {\n+    Scan scanModel = new Scan();\n+    assertNull(scanModel.getScanId());\n+    assertNull(scanModel.getDiscoverId());\n+    assertNull(scanModel.getStatus());\n+    assertNull(scanModel.getStatusMessage());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "25df799d8889011f9a8fe0df11e42b14b2f01e03",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopeTest.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopeTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopeTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopeTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Scan;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Scope;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the Scope model.\n+ */\n+public class ScopeTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testScope() throws Throwable {\n+    Scope scopeModel = new Scope();\n+    assertNull(scopeModel.getDescription());\n+    assertNull(scopeModel.getCreatedBy());\n+    assertNull(scopeModel.getModifiedBy());\n+    assertNull(scopeModel.getScopeId());\n+    assertNull(scopeModel.getName());\n+    assertNull(scopeModel.isEnabled());\n+    assertNull(scopeModel.getEnvironmentType());\n+    assertNull(scopeModel.getCreatedTime());\n+    assertNull(scopeModel.getModifiedTime());\n+    assertNull(scopeModel.getLastScanType());\n+    assertNull(scopeModel.getLastScanTypeDescription());\n+    assertNull(scopeModel.getLastScanStatusUpdatedTime());\n+    assertNull(scopeModel.getCollectorsId());\n+    assertNull(scopeModel.getScans());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "d184789ca3718538a104e295bd3f717f876efb4a",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopesListTest.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopesListTest.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopesListTest.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/model/ScopesListTest.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package com.ibm.cloud.platform_services.posture_management.v1.model;\n+\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Scan;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.Scope;\n+import com.ibm.cloud.platform_services.posture_management.v1.model.ScopesList;\n+import com.ibm.cloud.platform_services.posture_management.v1.utils.TestUtilities;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+/**\n+ * Unit test class for the ScopesList model.\n+ */\n+public class ScopesListTest {\n+  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();\n+  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();\n+\n+  @Test\n+  public void testScopesList() throws Throwable {\n+    ScopesList scopesListModel = new ScopesList();\n+    assertNull(scopesListModel.getScopes());\n+  }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e6080fec6ff8049b9964092fcaa9009d9b1dcc22",
    "filename": "modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/utils/TestUtilities.java",
    "status": "added",
    "additions": 129,
    "deletions": 0,
    "changes": 129,
    "blob_url": "https://github.com/IBM/platform-services-java-sdk/blob/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/utils/TestUtilities.java",
    "raw_url": "https://github.com/IBM/platform-services-java-sdk/raw/45555482f5682bd8653646011f388d89be269655/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/utils/TestUtilities.java",
    "contents_url": "https://api.github.com/repos/IBM/platform-services-java-sdk/contents/modules/posture-management/src/test/java/com/ibm/cloud/platform_services/posture_management/v1/utils/TestUtilities.java?ref=45555482f5682bd8653646011f388d89be269655",
    "patch": "@@ -0,0 +1,129 @@\n+/*\n+ * (C) Copyright IBM Corp. 2021.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.ibm.cloud.platform_services.posture_management.v1.utils;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.io.InputStream;\n+import java.io.ByteArrayInputStream;\n+\n+import okhttp3.mockwebserver.RecordedRequest;\n+import okhttp3.HttpUrl;\n+import com.ibm.cloud.sdk.core.util.DateUtils;\n+import com.ibm.cloud.sdk.core.util.GsonSingleton;\n+import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;\n+\n+/**\n+ *  A class used by the unit tests containing utility functions.\n+ */\n+public class TestUtilities {\n+    public static Map<String, Object> createMockMap() {\n+        Map<String, Object> mockMap = new HashMap<>();\n+        mockMap.put(\"foo\", \"bar\");\n+        return mockMap;\n+    }\n+\n+    public static HashMap<String, InputStream> createMockStreamMap() {\n+        return new HashMap<String, InputStream>() {\n+            { put(\"key1\", createMockStream(\"This is a mock file.\")); }\n+        };\n+    }\n+\n+    public static Map<String, String> parseQueryString(RecordedRequest req) {\n+        Map<String, String> queryMap = new HashMap<>();\n+\n+        try {\n+            HttpUrl requestUrl = req.getRequestUrl();\n+\n+            if (requestUrl != null) {\n+                Set<String> queryParamsNames = requestUrl.queryParameterNames();\n+                // map the parameter name to its corresponding value\n+                for (String p : queryParamsNames) {\n+                    // get the corresponding value for the parameter (p)\n+                    List<String> val = requestUrl.queryParameterValues(p);\n+                    if (val != null && !val.isEmpty()) {\n+                        String joinedQuery = String.join(\",\", val);\n+                        queryMap.put(p, joinedQuery);\n+                    }\n+                }\n+            }\n+            if (queryMap.isEmpty()) {\n+                return null;\n+            }\n+        } catch (Exception e) {\n+            return null;\n+        }\n+\n+        return queryMap;\n+    }\n+\n+    public static String parseReqPath(RecordedRequest req) {\n+        String parsedPath = null;\n+\n+        try {\n+            String fullPath = req.getPath();\n+            if (fullPath != null && !fullPath.isEmpty()) {\n+                // retrieve the path segment before the query parameter\n+                parsedPath = fullPath.split(\"\\\\?\", 2)[0];\n+            }\n+            if (parsedPath.isEmpty() || parsedPath == null) {\n+                return null;\n+            }\n+\n+        } catch (Exception e) {\n+            return null;\n+        }\n+\n+        return parsedPath;\n+    }\n+\n+    public static String serialize(Object obj) {\n+        return GsonSingleton.getGson().toJson(obj);\n+    }\n+\n+    public static <T> T deserialize(String json, Class<T> clazz) {\n+        return GsonSingleton.getGson().fromJson(json, clazz);\n+    }\n+\n+    public static InputStream createMockStream(String s) {\n+        return new ByteArrayInputStream(s.getBytes());\n+    }\n+\n+    public static List<FileWithMetadata> creatMockListFileWithMetadata() {\n+        List<FileWithMetadata> list = new ArrayList<FileWithMetadata>();\n+        byte[] fileBytes = {(byte) 0xde, (byte) 0xad, (byte) 0xbe, (byte) 0xef};\n+        InputStream inputStream = new ByteArrayInputStream(fileBytes);\n+        FileWithMetadata.Builder builder = new FileWithMetadata.Builder();\n+        builder.data(inputStream);\n+        FileWithMetadata fileWithMetadata = builder.build();\n+        list.add(fileWithMetadata);\n+\n+        return list;\n+    }\n+\n+    public static byte[] createMockByteArray(String bytes) {\n+        return bytes.getBytes();\n+    }\n+\n+    public static Date createMockDate(String date) throws Exception {\n+        return DateUtils.parseAsDate(date);\n+    }\n+\n+    public static Date createMockDateTime(String date) throws Exception {\n+        return DateUtils.parseAsDateTime(date);\n+    }\n+}\n\\ No newline at end of file"
  }
]
