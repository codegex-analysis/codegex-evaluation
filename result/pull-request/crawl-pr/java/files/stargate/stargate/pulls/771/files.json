[
  {
    "sha": "904a6033e23fb6a31e5e841957636f136316c03a",
    "filename": "restapi/src/main/java/io/stargate/web/impl/Server.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/stargate/stargate/blob/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/restapi/src/main/java/io/stargate/web/impl/Server.java",
    "raw_url": "https://github.com/stargate/stargate/raw/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/restapi/src/main/java/io/stargate/web/impl/Server.java",
    "contents_url": "https://api.github.com/repos/stargate/stargate/contents/restapi/src/main/java/io/stargate/web/impl/Server.java?ref=43fe42e1fbfb971aa0205d45e9195ac7daea2fc0",
    "patch": "@@ -42,6 +42,7 @@\n import io.stargate.web.resources.TableResource;\n import io.stargate.web.resources.v2.RowsResource;\n import io.stargate.web.resources.v2.schemas.ColumnsResource;\n+import io.stargate.web.resources.v2.schemas.IndexesResource;\n import io.stargate.web.resources.v2.schemas.KeyspacesResource;\n import io.stargate.web.resources.v2.schemas.TablesResource;\n import io.stargate.web.swagger.SwaggerUIResource;\n@@ -124,6 +125,7 @@ protected void configure() {\n     environment.jersey().register(TablesResource.class);\n     environment.jersey().register(KeyspacesResource.class);\n     environment.jersey().register(ColumnsResource.class);\n+    environment.jersey().register(IndexesResource.class);\n \n     // Documents API\n     environment.jersey().register(DocumentResourceV2.class);"
  },
  {
    "sha": "b9f6bef49ce332b9ace335430f1959ad69f19527",
    "filename": "restapi/src/main/java/io/stargate/web/models/IndexAdd.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/stargate/stargate/blob/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/restapi/src/main/java/io/stargate/web/models/IndexAdd.java",
    "raw_url": "https://github.com/stargate/stargate/raw/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/restapi/src/main/java/io/stargate/web/models/IndexAdd.java",
    "contents_url": "https://api.github.com/repos/stargate/stargate/contents/restapi/src/main/java/io/stargate/web/models/IndexAdd.java?ref=43fe42e1fbfb971aa0205d45e9195ac7daea2fc0",
    "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright The Stargate Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.stargate.web.models;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.annotations.ApiModelProperty;\n+import javax.validation.constraints.NotNull;\n+\n+public class IndexAdd {\n+  @NotNull private String table;\n+  @NotNull private String column;\n+  private String name;\n+  private String type;\n+  private IndexKind kind;\n+\n+  private boolean ifNotExists = false;\n+\n+  public void setTable(String table) {\n+    this.table = table;\n+  }\n+\n+  @ApiModelProperty(required = true, value = \"Table name\")\n+  public String getTable() {\n+    return table;\n+  }\n+\n+  public void setColumn(String column) {\n+    this.column = column;\n+  }\n+\n+  @ApiModelProperty(required = true, value = \"Column name\")\n+  public String getColumn() {\n+    return column;\n+  }\n+\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n+  @ApiModelProperty(value = \"The name of the index to add.\")\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setIfNotExists(boolean ifNotExists) {\n+    this.ifNotExists = ifNotExists;\n+  }\n+\n+  @ApiModelProperty(\n+      value =\n+          \"Determines whether to create a new index if an index with the same name exists. Attempting to create an existing index returns an error unless this option is true.\")\n+  public boolean getIfNotExists() {\n+    return ifNotExists;\n+  }\n+\n+  public void setType(String type) {\n+    this.type = type;\n+  }\n+\n+  @ApiModelProperty(value = \"A custom index class name or class path.\")\n+  public String getType() {\n+    return type;\n+  }\n+\n+  public void setKind(IndexKind kind) {\n+    this.kind = kind;\n+  }\n+\n+  @JsonProperty(\"kind\")\n+  @ApiModelProperty(value = \"The kind (ENTRIES, KEY, VALUES, FULL) of a index\")\n+  public IndexKind getKind() {\n+    return kind;\n+  }\n+}"
  },
  {
    "sha": "5243f3f738416bf82f106274861ca50643175db6",
    "filename": "restapi/src/main/java/io/stargate/web/models/IndexKind.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/stargate/stargate/blob/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/restapi/src/main/java/io/stargate/web/models/IndexKind.java",
    "raw_url": "https://github.com/stargate/stargate/raw/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/restapi/src/main/java/io/stargate/web/models/IndexKind.java",
    "contents_url": "https://api.github.com/repos/stargate/stargate/contents/restapi/src/main/java/io/stargate/web/models/IndexKind.java?ref=43fe42e1fbfb971aa0205d45e9195ac7daea2fc0",
    "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright The Stargate Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.stargate.web.models;\n+\n+public enum IndexKind {\n+  KEYS,\n+  VALUES,\n+  ENTRIES,\n+  FULL\n+}"
  },
  {
    "sha": "7b859239a43bfb3563202fbe49f97e644be6c111",
    "filename": "restapi/src/main/java/io/stargate/web/resources/v2/schemas/IndexesResource.java",
    "status": "added",
    "additions": 258,
    "deletions": 0,
    "changes": 258,
    "blob_url": "https://github.com/stargate/stargate/blob/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/restapi/src/main/java/io/stargate/web/resources/v2/schemas/IndexesResource.java",
    "raw_url": "https://github.com/stargate/stargate/raw/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/restapi/src/main/java/io/stargate/web/resources/v2/schemas/IndexesResource.java",
    "contents_url": "https://api.github.com/repos/stargate/stargate/contents/restapi/src/main/java/io/stargate/web/resources/v2/schemas/IndexesResource.java?ref=43fe42e1fbfb971aa0205d45e9195ac7daea2fc0",
    "patch": "@@ -0,0 +1,258 @@\n+/*\n+ * Copyright The Stargate Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.stargate.web.resources.v2.schemas;\n+\n+import static io.stargate.web.docsapi.resources.RequestToHeadersMapper.getAllHeaders;\n+\n+import com.codahale.metrics.annotation.Timed;\n+import io.stargate.auth.Scope;\n+import io.stargate.auth.SourceAPI;\n+import io.stargate.auth.UnauthorizedException;\n+import io.stargate.db.schema.CollectionIndexingType;\n+import io.stargate.db.schema.Column;\n+import io.stargate.db.schema.ImmutableCollectionIndexingType;\n+import io.stargate.db.schema.Keyspace;\n+import io.stargate.db.schema.Table;\n+import io.stargate.web.models.Error;\n+import io.stargate.web.models.IndexAdd;\n+import io.stargate.web.models.IndexKind;\n+import io.stargate.web.models.SuccessResponse;\n+import io.stargate.web.resources.AuthenticatedDB;\n+import io.stargate.web.resources.Db;\n+import io.stargate.web.resources.RequestHandler;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.*;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Api(\n+    produces = MediaType.APPLICATION_JSON,\n+    consumes = MediaType.APPLICATION_JSON,\n+    tags = {\"schemas\"})\n+@Path(\"/v2/schemas/keyspaces/{keyspaceName}/indexes\")\n+@Consumes(MediaType.APPLICATION_JSON)\n+@Produces(MediaType.APPLICATION_JSON)\n+public class IndexesResource {\n+  @Inject private Db db;\n+\n+  @Timed\n+  @POST\n+  @ApiOperation(\n+      value = \"Add an index to a table's column\",\n+      notes = \"Add an index to a single column of a table.\",\n+      response = SuccessResponse.class,\n+      code = 201)\n+  @ApiResponses(\n+      value = {\n+        @ApiResponse(code = 201, message = \"Created\", response = SuccessResponse.class),\n+        @ApiResponse(code = 400, message = \"Bad request\", response = Error.class),\n+        @ApiResponse(code = 401, message = \"Unauthorized\", response = Error.class),\n+        @ApiResponse(code = 500, message = \"Internal Server Error\", response = Error.class)\n+      })\n+  public Response addIndex(\n+      @ApiParam(\n+              value =\n+                  \"The token returned from the authorization endpoint. Use this token in each request.\",\n+              required = true)\n+          @HeaderParam(\"X-Cassandra-Token\")\n+          String token,\n+      @ApiParam(value = \"Name of the keyspace to use for the request.\", required = true)\n+          @PathParam(\"keyspaceName\")\n+          final String keyspaceName,\n+      @ApiParam(required = true) @NotNull final IndexAdd indexAdd,\n+      @Context HttpServletRequest request) {\n+    return RequestHandler.handle(\n+        () -> {\n+          Map<String, String> allHeaders = getAllHeaders(request);\n+          AuthenticatedDB authenticatedDB = db.getDataStoreForToken(token, allHeaders);\n+\n+          String tableName = indexAdd.getTable();\n+          String columnName = indexAdd.getColumn();\n+\n+          Keyspace keyspace = authenticatedDB.getDataStore().schema().keyspace(keyspaceName);\n+          if (keyspace == null) {\n+            return Response.status(Response.Status.BAD_REQUEST)\n+                .entity(\n+                    new Error(\n+                        String.format(\"Keyspace '%s' not found.\", keyspaceName),\n+                        Response.Status.BAD_REQUEST.getStatusCode()))\n+                .build();\n+          }\n+\n+          try {\n+            final Table tableMetadata = authenticatedDB.getTable(keyspaceName, tableName);\n+            final Column col = tableMetadata.column(columnName);\n+            if (col == null) {\n+              return Response.status(Response.Status.NOT_FOUND)\n+                  .entity(\n+                      new Error(\n+                          String.format(\"Column '%s' not found in table.\", columnName),\n+                          Response.Status.NOT_FOUND.getStatusCode()))\n+                  .build();\n+            }\n+          } catch (NotFoundException e) {\n+            return Response.status(Response.Status.NOT_FOUND)\n+                .entity(\n+                    new Error(\n+                        String.format(\"Table '%s' not found in keyspace.\", tableName),\n+                        Response.Status.NOT_FOUND.getStatusCode()))\n+                .build();\n+          }\n+\n+          createIndex(keyspaceName, indexAdd, authenticatedDB, tableName, columnName);\n+\n+          return Response.status(Response.Status.CREATED).entity(new SuccessResponse()).build();\n+        });\n+  }\n+\n+  private void createIndex(\n+      String keyspaceName,\n+      IndexAdd indexAdd,\n+      AuthenticatedDB authenticatedDB,\n+      String tableName,\n+      String columnName)\n+      throws UnauthorizedException, InterruptedException, java.util.concurrent.ExecutionException {\n+    db.getAuthorizationService()\n+        .authorizeSchemaWrite(\n+            authenticatedDB.getAuthenticationSubject(),\n+            keyspaceName,\n+            tableName,\n+            Scope.CREATE,\n+            SourceAPI.REST);\n+\n+    boolean indexKeys = indexAdd.getKind() == IndexKind.KEYS;\n+    boolean indexEntries = indexAdd.getKind() == IndexKind.ENTRIES;\n+    boolean indexValues = indexAdd.getKind() == IndexKind.VALUES;\n+    boolean indexFull = indexAdd.getKind() == IndexKind.FULL;\n+\n+    CollectionIndexingType indexingType =\n+        ImmutableCollectionIndexingType.builder()\n+            .indexEntries(indexEntries)\n+            .indexKeys(indexKeys)\n+            .indexValues(indexValues)\n+            .indexFull(indexFull)\n+            .build();\n+\n+    authenticatedDB\n+        .getDataStore()\n+        .queryBuilder()\n+        .create()\n+        .custom(indexAdd.getType())\n+        .index(indexAdd.getName())\n+        .ifNotExists(indexAdd.getIfNotExists())\n+        .on(keyspaceName, tableName)\n+        .column(columnName)\n+        .indexingType(indexingType)\n+        .build()\n+        .execute()\n+        .get();\n+  }\n+\n+  @Timed\n+  @DELETE\n+  @ApiOperation(\n+      value = \"Drop an index from keyspace\",\n+      notes = \"Drop an index\",\n+      response = SuccessResponse.class,\n+      code = 204)\n+  @ApiResponses(\n+      value = {\n+        @ApiResponse(code = 204, message = \"No Content\"),\n+        @ApiResponse(code = 400, message = \"Bad request\", response = Error.class),\n+        @ApiResponse(code = 401, message = \"Unauthorized\", response = Error.class),\n+        @ApiResponse(code = 500, message = \"Internal Server Error\", response = Error.class)\n+      })\n+  @Path(\"/{indexName}\")\n+  public Response dropIndex(\n+      @ApiParam(\n+              value =\n+                  \"The token returned from the authorization endpoint. Use this token in each request.\",\n+              required = true)\n+          @HeaderParam(\"X-Cassandra-Token\")\n+          String token,\n+      @ApiParam(value = \"Name of the keyspace to use for the request.\", required = true)\n+          @PathParam(\"keyspaceName\")\n+          final String keyspaceName,\n+      @ApiParam(value = \"Name of the index to use for the request.\", required = true)\n+          @PathParam(\"indexName\")\n+          final String indexName,\n+      @Context HttpServletRequest request) {\n+    return RequestHandler.handle(\n+        () -> {\n+          Map<String, String> allHeaders = getAllHeaders(request);\n+          AuthenticatedDB authenticatedDB = db.getDataStoreForToken(token, allHeaders);\n+\n+          Keyspace keyspace = authenticatedDB.getDataStore().schema().keyspace(keyspaceName);\n+          if (keyspace == null) {\n+            return Response.status(Response.Status.BAD_REQUEST)\n+                .entity(\n+                    new Error(\n+                        String.format(\"Keyspace '%s' not found.\", keyspaceName),\n+                        Response.Status.BAD_REQUEST.getStatusCode()))\n+                .build();\n+          }\n+\n+          Optional<Table> table =\n+              keyspace.tables().stream()\n+                  .filter(t -> t.indexes().stream().anyMatch(i -> indexName.equals(i.name())))\n+                  .findFirst();\n+\n+          if (!table.isPresent()) {\n+            return Response.status(Response.Status.BAD_REQUEST)\n+                .entity(\n+                    new Error(\n+                        String.format(\"Index '%s' not found.\", indexName),\n+                        Response.Status.BAD_REQUEST.getStatusCode()))\n+                .build();\n+          }\n+\n+          dropIndex(keyspaceName, indexName, authenticatedDB, table);\n+\n+          return Response.status(Response.Status.NO_CONTENT).build();\n+        });\n+  }\n+\n+  private void dropIndex(\n+      String keyspaceName, String indexName, AuthenticatedDB authenticatedDB, Optional<Table> table)\n+      throws UnauthorizedException, InterruptedException, java.util.concurrent.ExecutionException {\n+    db.getAuthorizationService()\n+        .authorizeSchemaWrite(\n+            authenticatedDB.getAuthenticationSubject(),\n+            keyspaceName,\n+            table.get().name(),\n+            Scope.DROP,\n+            SourceAPI.REST);\n+\n+    authenticatedDB\n+        .getDataStore()\n+        .queryBuilder()\n+        .drop()\n+        .index(keyspaceName, indexName)\n+        .build()\n+        .execute()\n+        .get();\n+  }\n+}"
  },
  {
    "sha": "91dd3b0e7365fde7a61956d9e45a3c3d1e1e592f",
    "filename": "testing/src/test/java/io/stargate/it/http/RestApiv2Test.java",
    "status": "modified",
    "additions": 146,
    "deletions": 0,
    "changes": 146,
    "blob_url": "https://github.com/stargate/stargate/blob/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/testing/src/test/java/io/stargate/it/http/RestApiv2Test.java",
    "raw_url": "https://github.com/stargate/stargate/raw/43fe42e1fbfb971aa0205d45e9195ac7daea2fc0/testing/src/test/java/io/stargate/it/http/RestApiv2Test.java",
    "contents_url": "https://api.github.com/repos/stargate/stargate/contents/testing/src/test/java/io/stargate/it/http/RestApiv2Test.java?ref=43fe42e1fbfb971aa0205d45e9195ac7daea2fc0",
    "patch": "@@ -27,6 +27,8 @@\n import io.stargate.web.models.ColumnDefinition;\n import io.stargate.web.models.Error;\n import io.stargate.web.models.GetResponseWrapper;\n+import io.stargate.web.models.IndexAdd;\n+import io.stargate.web.models.IndexKind;\n import io.stargate.web.models.Keyspace;\n import io.stargate.web.models.PrimaryKey;\n import io.stargate.web.models.ResponseWrapper;\n@@ -364,6 +366,150 @@ public void deleteTable() throws IOException {\n         HttpStatus.SC_NO_CONTENT);\n   }\n \n+  @Test\n+  public void createIndex() throws IOException {\n+    createKeyspace(keyspaceName);\n+    String tableName = \"tbl_createtable_\" + System.currentTimeMillis();\n+    createTestTable(\n+        tableName,\n+        Arrays.asList(\"id text\", \"firstName text\", \"email list<text>\"),\n+        Collections.singletonList(\"id\"),\n+        null);\n+\n+    IndexAdd indexAdd = new IndexAdd();\n+    indexAdd.setTable(tableName);\n+    indexAdd.setColumn(\"firstName\");\n+    indexAdd.setName(\"test_idx\");\n+    indexAdd.setIfNotExists(false);\n+\n+    String body =\n+        RestUtils.post(\n+            authToken,\n+            String.format(\"%s:8082/v2/schemas/keyspaces/%s/indexes\", host, keyspaceName),\n+            objectMapper.writeValueAsString(indexAdd),\n+            HttpStatus.SC_CREATED);\n+    SuccessResponse successResponse =\n+        objectMapper.readValue(body, new TypeReference<SuccessResponse>() {});\n+    assertThat(successResponse.getSuccess()).isTrue();\n+\n+    // don't create and index if it already exists and don't throw error\n+    indexAdd.setIfNotExists(true);\n+    body =\n+        RestUtils.post(\n+            authToken,\n+            String.format(\"%s:8082/v2/schemas/keyspaces/%s/indexes\", host, keyspaceName),\n+            objectMapper.writeValueAsString(indexAdd),\n+            HttpStatus.SC_CREATED);\n+    successResponse = objectMapper.readValue(body, new TypeReference<SuccessResponse>() {});\n+    assertThat(successResponse.getSuccess()).isTrue();\n+\n+    // throw error if index already exists\n+    indexAdd.setIfNotExists(false);\n+    body =\n+        RestUtils.post(\n+            authToken,\n+            String.format(\"%s:8082/v2/schemas/keyspaces/%s/indexes\", host, keyspaceName),\n+            objectMapper.writeValueAsString(indexAdd),\n+            HttpStatus.SC_BAD_REQUEST);\n+\n+    Error response = objectMapper.readValue(body, Error.class);\n+    assertThat(response.getCode()).isEqualTo(HttpStatus.SC_BAD_REQUEST);\n+    assertThat(response.getDescription())\n+        .isEqualTo(\"Bad request: An index named test_idx already exists\");\n+\n+    // index a collection\n+    indexAdd.setColumn(\"email\");\n+    indexAdd.setName(null);\n+    indexAdd.setKind(IndexKind.VALUES);\n+    body =\n+        RestUtils.post(\n+            authToken,\n+            String.format(\"%s:8082/v2/schemas/keyspaces/%s/indexes\", host, keyspaceName),\n+            objectMapper.writeValueAsString(indexAdd),\n+            HttpStatus.SC_CREATED);\n+    successResponse = objectMapper.readValue(body, new TypeReference<SuccessResponse>() {});\n+    assertThat(successResponse.getSuccess()).isTrue();\n+  }\n+\n+  @Test\n+  public void createInvalidIndex() throws IOException {\n+    createKeyspace(keyspaceName);\n+    String tableName = \"tbl_createtable_\" + System.currentTimeMillis();\n+    createTestTable(\n+        tableName,\n+        Arrays.asList(\"id text\", \"firstName text\", \"email list<text>\"),\n+        Collections.singletonList(\"id\"),\n+        null);\n+\n+    // invalid table\n+    IndexAdd indexAdd = new IndexAdd();\n+    indexAdd.setTable(\"invalid_table\");\n+    indexAdd.setColumn(\"firstName\");\n+    String body =\n+        RestUtils.post(\n+            authToken,\n+            String.format(\"%s:8082/v2/schemas/keyspaces/%s/indexes\", host, keyspaceName),\n+            objectMapper.writeValueAsString(indexAdd),\n+            HttpStatus.SC_NOT_FOUND);\n+    Error response = objectMapper.readValue(body, Error.class);\n+    assertThat(response.getCode()).isEqualTo(HttpStatus.SC_NOT_FOUND);\n+    assertThat(response.getDescription()).isEqualTo(\"Table 'invalid_table' not found in keyspace.\");\n+\n+    // invalid column\n+    indexAdd.setTable(tableName);\n+    indexAdd.setColumn(\"invalid_column\");\n+    body =\n+        RestUtils.post(\n+            authToken,\n+            String.format(\"%s:8082/v2/schemas/keyspaces/%s/indexes\", host, keyspaceName),\n+            objectMapper.writeValueAsString(indexAdd),\n+            HttpStatus.SC_NOT_FOUND);\n+\n+    response = objectMapper.readValue(body, Error.class);\n+    assertThat(response.getCode()).isEqualTo(HttpStatus.SC_NOT_FOUND);\n+    assertThat(response.getDescription()).isEqualTo(\"Column 'invalid_column' not found in table.\");\n+\n+    // invalid index kind\n+    indexAdd.setTable(tableName);\n+    indexAdd.setColumn(\"firstName\");\n+    indexAdd.setKind(IndexKind.ENTRIES);\n+    body =\n+        RestUtils.post(\n+            authToken,\n+            String.format(\"%s:8082/v2/schemas/keyspaces/%s/indexes\", host, keyspaceName),\n+            objectMapper.writeValueAsString(indexAdd),\n+            HttpStatus.SC_BAD_REQUEST);\n+\n+    response = objectMapper.readValue(body, Error.class);\n+    assertThat(response.getCode()).isEqualTo(HttpStatus.SC_BAD_REQUEST);\n+    assertThat(response.getDescription())\n+        .isEqualTo(\"Bad request: Indexing entries can only be used with a map\");\n+  }\n+\n+  @Test\n+  public void dropIndex() throws IOException {\n+    createKeyspace(keyspaceName);\n+    createIndex();\n+\n+    String indexName = \"test_idx\";\n+    RestUtils.delete(\n+        authToken,\n+        String.format(\"%s:8082/v2/schemas/keyspaces/%s/indexes/%s\", host, keyspaceName, indexName),\n+        HttpStatus.SC_NO_CONTENT);\n+\n+    indexName = \"invalid_idx\";\n+    String body =\n+        RestUtils.delete(\n+            authToken,\n+            String.format(\n+                \"%s:8082/v2/schemas/keyspaces/%s/indexes/%s\", host, keyspaceName, indexName),\n+            HttpStatus.SC_BAD_REQUEST);\n+\n+    Error response = objectMapper.readValue(body, Error.class);\n+    assertThat(response.getCode()).isEqualTo(HttpStatus.SC_BAD_REQUEST);\n+    assertThat(response.getDescription()).isEqualTo(\"Index 'invalid_idx' not found.\");\n+  }\n+\n   @Test\n   public void createTableWithNullOptions() throws IOException {\n     createKeyspace(keyspaceName);"
  }
]
