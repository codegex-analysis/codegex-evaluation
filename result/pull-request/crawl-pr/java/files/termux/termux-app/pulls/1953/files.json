[
  {
    "sha": "24b5882580b5ff39dce537e00bab223f688b0fc8",
    "filename": "app/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/termux/termux-app/blob/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/build.gradle",
    "raw_url": "https://github.com/termux/termux-app/raw/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/build.gradle",
    "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app/build.gradle?ref=9fd2cf9834eb9faf56011669be3fa91c52fc038e",
    "patch": "@@ -10,6 +10,7 @@ android {\n         implementation \"androidx.annotation:annotation:1.1.0\"\n         implementation \"androidx.viewpager:viewpager:1.0.0\"\n         implementation \"androidx.drawerlayout:drawerlayout:1.1.1\"\n+        implementation 'androidx.core:core:1.5.0-beta02'\n         implementation project(\":terminal-view\")\n     }\n "
  },
  {
    "sha": "faf0089bcc77079763cd2c1e2187f3db4685f7a4",
    "filename": "app/src/main/java/com/termux/app/BackgroundJob.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/termux/termux-app/blob/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/src/main/java/com/termux/app/BackgroundJob.java",
    "raw_url": "https://github.com/termux/termux-app/raw/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/src/main/java/com/termux/app/BackgroundJob.java",
    "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app/src/main/java/com/termux/app/BackgroundJob.java?ref=9fd2cf9834eb9faf56011669be3fa91c52fc038e",
    "patch": "@@ -36,7 +36,7 @@ public BackgroundJob(String cwd, String fileToExecute, final String[] args, fina\n \n     public BackgroundJob(String cwd, String fileToExecute, final String[] args, final TermuxService service, PendingIntent pendingIntent) {\n         String[] env = buildEnvironment(false, cwd);\n-        if (cwd == null) cwd = TermuxService.HOME_PATH;\n+        if (cwd == null || cwd.isEmpty()) cwd = TermuxService.HOME_PATH;\n \n         final String[] progArray = setupProcessArgs(fileToExecute, args);\n         final String processDescription = Arrays.toString(progArray);\n@@ -136,7 +136,7 @@ private static void addToEnvIfPresent(List<String> environment, String name) {\n     static String[] buildEnvironment(boolean failSafe, String cwd) {\n         new File(TermuxService.HOME_PATH).mkdirs();\n \n-        if (cwd == null) cwd = TermuxService.HOME_PATH;\n+        if (cwd == null || cwd.isEmpty()) cwd = TermuxService.HOME_PATH;\n \n         List<String> environment = new ArrayList<>();\n "
  },
  {
    "sha": "93b43cf606598c03f581d78d70da5db37dae69ae",
    "filename": "app/src/main/java/com/termux/app/RunCommandService.java",
    "status": "modified",
    "additions": 60,
    "deletions": 29,
    "changes": 89,
    "blob_url": "https://github.com/termux/termux-app/blob/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/src/main/java/com/termux/app/RunCommandService.java",
    "raw_url": "https://github.com/termux/termux-app/raw/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/src/main/java/com/termux/app/RunCommandService.java",
    "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app/src/main/java/com/termux/app/RunCommandService.java?ref=9fd2cf9834eb9faf56011669be3fa91c52fc038e",
    "patch": "@@ -21,23 +21,32 @@\n import java.util.Properties;\n \n /**\n- * When allow-external-apps property is set to \"true\" in ~/.termux/termux.properties, Termux \n- * is able to process execute intents sent by third-party applications.\n+ * Third-party apps that are not part of termux world can run commands in termux context by either\n+ * sending an intent to RunCommandService or becoming a plugin host for the termux-tasker plugin\n+ * client.\n  *\n- * Third-party program must declare com.termux.permission.RUN_COMMAND permission and it should be\n- * granted by user.\n+ * For the RunCommandService intent to work, there are 2 main requirements:\n+ * 1. The `allow-external-apps` property must be set to \"true\" in ~/.termux/termux.properties in\n+ * termux app, regardless of if the executable path is inside or outside the `~/.termux/tasker/`\n+ * directory.\n+ * 2. The intent sender/third-party app must request the `com.termux.permission.RUN_COMMAND`\n+ * permission in its `AndroidManifest.xml` and it should be granted by user to the app through the\n+ * app's App Info permissions page in android settings, likely under Additional Permissions.\n  *\n- * Absolute path of command or script must be given in \"RUN_COMMAND_PATH\" extra.\n- * The \"RUN_COMMAND_ARGUMENTS\", \"RUN_COMMAND_WORKDIR\" and \"RUN_COMMAND_BACKGROUND\" extras are \n+ * The absolute path of executable or script must be given in \"RUN_COMMAND_PATH\" extra.\n+ * The \"RUN_COMMAND_ARGUMENTS\", \"RUN_COMMAND_WORKDIR\" and \"RUN_COMMAND_BACKGROUND\" extras are\n  * optional. The workdir defaults to termux home. The background mode defaults to \"false\".\n  * The command path and workdir can optionally be prefixed with \"$PREFIX/\" or \"~/\" if an absolute\n  * path is not to be given.\n  *\n- * To automatically bring to foreground and start termux commands that were started with\n- * background mode \"false\" in android >= 10 without user having to click the notification manually,\n- * requires termux to be granted draw over apps permission due to new restrictions\n+ * To automatically bring termux session to foreground and start termux commands that were started\n+ * with background mode \"false\" in android >= 10 without user having to click the notification\n+ * manually requires termux to be granted draw over apps permission due to new restrictions\n  * of starting activities from the background, this also applies to Termux:Tasker plugin.\n  *\n+ * Check https://github.com/termux/termux-tasker for more details on allow-external-apps and draw\n+ * over apps and other limitations.\n+ *\n  * To reduce the chance of termux being killed by android even further due to violation of not\n  * being able to call startForeground() within ~5s of service start in android >= 8, the user\n  * may disable battery optimizations for termux.\n@@ -53,12 +62,18 @@\n  *   startService(intent);\n  *\n  * Sample code to run command \"top\" with \"am startservice\" command:\n- * am startservice --user 0 -n com.termux/com.termux.app.RunCommandService \n- * -a com.termux.RUN_COMMAND \n- * --es com.termux.RUN_COMMAND_PATH '/data/data/com.termux/files/usr/bin/top' \n- * --esa com.termux.RUN_COMMAND_ARGUMENTS '-n,5' \n- * --es com.termux.RUN_COMMAND_WORKDIR '/data/data/com.termux/files/home'\n+ * am startservice --user 0 -n com.termux/com.termux.app.RunCommandService \\\n+ * -a com.termux.RUN_COMMAND \\\n+ * --es com.termux.RUN_COMMAND_PATH '/data/data/com.termux/files/usr/bin/top' \\\n+ * --esa com.termux.RUN_COMMAND_ARGUMENTS '-n,5' \\\n+ * --es com.termux.RUN_COMMAND_WORKDIR '/data/data/com.termux/files/home' \\\n  * --ez com.termux.RUN_COMMAND_BACKGROUND 'false'\n+ *\n+ * If your third-party app is targeting sdk 30 (android 11), then it needs to add `com.termux`\n+ * package to the `queries` element or request `QUERY_ALL_PACKAGES` permission in its\n+ * `AndroidManifest.xml`. Otherwise it will get `PackageSetting{...... com.termux/......} BLOCKED`\n+ * errors in logcat and `RUN_COMMAND` won't work.\n+ * https://developer.android.com/training/basics/intents/package-visibility#package-name\n  */\n public class RunCommandService extends Service {\n \n@@ -92,20 +107,34 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         // Run again in case service is already started and onCreate() is not called\n         runStartForeground();\n \n-        if (allowExternalApps() && RUN_COMMAND_ACTION.equals(intent.getAction())) {\n-            Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(parsePath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n+        // If wrong action passed, then just return\n+        if (!RUN_COMMAND_ACTION.equals(intent.getAction())) {\n+            Log.e(\"termux\", \"Unexpected intent action to RunCommandService: \" + intent.getAction());\n+            return Service.START_NOT_STICKY;\n+        }\n \n-            Intent execIntent = new Intent(TermuxService.ACTION_EXECUTE, programUri);\n-            execIntent.setClass(this, TermuxService.class);\n-            execIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, intent.getStringArrayExtra(RUN_COMMAND_ARGUMENTS));\n-            execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, parsePath(intent.getStringExtra(RUN_COMMAND_WORKDIR)));\n-            execIntent.putExtra(TermuxService.EXTRA_EXECUTE_IN_BACKGROUND, intent.getBooleanExtra(RUN_COMMAND_BACKGROUND, false));\n+        // If allow-external-apps property to not set to \"true\"\n+        if (!allowExternalApps()) {\n+            Log.e(\"termux\", \"RunCommandService requires allow-external-apps property to be set to \\\"true\\\" in ~/.termux/termux.properties file.\");\n+            return Service.START_NOT_STICKY;\n+        }\n \n-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n-                this.startForegroundService(execIntent);\n-            } else {\n-                this.startService(execIntent);\n-            }\n+        Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(getExpandedTermuxPath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n+\n+        Intent execIntent = new Intent(TermuxService.ACTION_EXECUTE, programUri);\n+        execIntent.setClass(this, TermuxService.class);\n+        execIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, intent.getStringArrayExtra(RUN_COMMAND_ARGUMENTS));\n+        execIntent.putExtra(TermuxService.EXTRA_EXECUTE_IN_BACKGROUND, intent.getBooleanExtra(RUN_COMMAND_BACKGROUND, false));\n+\n+        String workingDirectory = intent.getStringExtra(RUN_COMMAND_WORKDIR);\n+        if (workingDirectory != null && !workingDirectory.isEmpty()) {\n+            execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, getExpandedTermuxPath(workingDirectory));\n+        }\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            this.startForegroundService(execIntent);\n+        } else {\n+            this.startService(execIntent);\n         }\n \n         runStopForeground();\n@@ -178,10 +207,12 @@ private boolean allowExternalApps() {\n     }\n \n     /** Replace \"$PREFIX/\" or \"~/\" prefix with termux absolute paths */\n-    private String parsePath(String path) {\n+    public static String getExpandedTermuxPath(String path) {\n         if(path != null && !path.isEmpty()) {\n-            path = path.replaceAll(\"^\\\\$PREFIX\\\\/\", TermuxService.PREFIX_PATH + \"/\");\n-            path = path.replaceAll(\"^~\\\\/\", TermuxService.HOME_PATH + \"/\");\n+            path = path.replaceAll(\"^\\\\$PREFIX$\", TermuxService.PREFIX_PATH);\n+            path = path.replaceAll(\"^\\\\$PREFIX/\", TermuxService.PREFIX_PATH + \"/\");\n+            path = path.replaceAll(\"^~/$\", TermuxService.HOME_PATH);\n+            path = path.replaceAll(\"^~/\", TermuxService.HOME_PATH + \"/\");\n         }\n \n         return path;"
  },
  {
    "sha": "b5d876815ed6a675fd6e0460b470ed04100eb636",
    "filename": "app/src/main/java/com/termux/app/TermuxActivity.java",
    "status": "modified",
    "additions": 12,
    "deletions": 5,
    "changes": 17,
    "blob_url": "https://github.com/termux/termux-app/blob/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/src/main/java/com/termux/app/TermuxActivity.java",
    "raw_url": "https://github.com/termux/termux-app/raw/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/src/main/java/com/termux/app/TermuxActivity.java",
    "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app/src/main/java/com/termux/app/TermuxActivity.java?ref=9fd2cf9834eb9faf56011669be3fa91c52fc038e",
    "patch": "@@ -414,7 +414,7 @@ public void onTitleChanged(TerminalSession updatedSession) {\n             public void onSessionFinished(final TerminalSession finishedSession) {\n                 if (mTermService.mWantsToStop) {\n                     // The service wants to stop as soon as possible.\n-                    finish();\n+                    finishActivityIfNotFinishing();\n                     return;\n                 }\n                 if (mIsVisible && finishedSession != getCurrentTermSession()) {\n@@ -550,7 +550,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 });\n             } else {\n                 // The service connected while not in foreground - just bail out.\n-                finish();\n+                finishActivityIfNotFinishing();\n             }\n         } else {\n             Intent i = getIntent();\n@@ -586,7 +586,14 @@ void renameSession(final TerminalSession sessionToRename) {\n     @Override\n     public void onServiceDisconnected(ComponentName name) {\n         // Respect being stopped from the TermuxService notification action.\n-        finish();\n+        finishActivityIfNotFinishing();\n+    }\n+\n+    public void finishActivityIfNotFinishing() {\n+        // prevent duplicate calls to finish() if called from multiple places\n+        if (!TermuxActivity.this.isFinishing()) {\n+            finish();\n+        }\n     }\n \n     @Nullable\n@@ -627,7 +634,7 @@ public void onBackPressed() {\n         if (getDrawer().isDrawerOpen(Gravity.LEFT)) {\n             getDrawer().closeDrawers();\n         } else {\n-            finish();\n+            finishActivityIfNotFinishing();\n         }\n     }\n \n@@ -989,7 +996,7 @@ public void removeFinishedSession(TerminalSession finishedSession) {\n         mListViewAdapter.notifyDataSetChanged();\n         if (mTermService.getSessions().isEmpty()) {\n             // There are no sessions to show, so finish the activity.\n-            finish();\n+            finishActivityIfNotFinishing();\n         } else {\n             if (index >= service.getSessions().size()) {\n                 index = service.getSessions().size() - 1;"
  },
  {
    "sha": "3cb714fa189e197b8617900e2e296312accb1dbd",
    "filename": "app/src/main/java/com/termux/app/TermuxService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/termux/termux-app/blob/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/src/main/java/com/termux/app/TermuxService.java",
    "raw_url": "https://github.com/termux/termux-app/raw/9fd2cf9834eb9faf56011669be3fa91c52fc038e/app/src/main/java/com/termux/app/TermuxService.java",
    "contents_url": "https://api.github.com/repos/termux/termux-app/contents/app/src/main/java/com/termux/app/TermuxService.java?ref=9fd2cf9834eb9faf56011669be3fa91c52fc038e",
    "patch": "@@ -282,7 +282,7 @@ public void onDestroy() {\n     TerminalSession createTermSession(String executablePath, String[] arguments, String cwd, boolean failSafe) {\n         new File(HOME_PATH).mkdirs();\n \n-        if (cwd == null) cwd = HOME_PATH;\n+        if (cwd == null || cwd.isEmpty()) cwd = HOME_PATH;\n \n         String[] env = BackgroundJob.buildEnvironment(failSafe, cwd);\n         boolean isLoginShell = false;"
  }
]
