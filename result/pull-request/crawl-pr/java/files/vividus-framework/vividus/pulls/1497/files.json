[
  {
    "sha": "4373ac84be394590b5a6b2eca92cae12258a8dec",
    "filename": "docs/modules/plugins/nav.adoc",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/docs/modules/plugins/nav.adoc",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/docs/modules/plugins/nav.adoc",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/docs/modules/plugins/nav.adoc?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -5,6 +5,8 @@\n ** xref:plugin-aws-kinesis.adoc[Kinesis]\n ** xref:plugin-aws-lambda.adoc[Lambda]\n ** xref:plugin-aws-s3.adoc[S3]\n+* xref:azure.adoc[Azure]\n+** xref:plugin-azure-functions.adoc[Functions]\n * xref:plugin-csv.adoc[CSV]\n * xref:plugin-datetime.adoc[Date/Time]\n * xref:plugin-db.adoc[Relational DB*]"
  },
  {
    "sha": "af9a9119d3f29d0b731238e22039d1d7c4600bf9",
    "filename": "docs/modules/plugins/pages/azure.adoc",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/docs/modules/plugins/pages/azure.adoc",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/docs/modules/plugins/pages/azure.adoc",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/docs/modules/plugins/pages/azure.adoc?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,6 @@\n+= What is Azure\n+\n+Microsoft https://azure.microsoft.com/[Azure] is a cloud computing service created by Microsoft for building, testing, deploying,\n+and managing applications and services through Microsoft-managed data centers.\n+\n+Vividus provides set of plugins to interact with the services."
  },
  {
    "sha": "6a33e130c07f4aa7d2a81cb789a190e805f6c424",
    "filename": "docs/modules/plugins/pages/plugin-azure-functions.adoc",
    "status": "added",
    "additions": 64,
    "deletions": 0,
    "changes": 64,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/docs/modules/plugins/pages/plugin-azure-functions.adoc",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/docs/modules/plugins/pages/plugin-azure-functions.adoc",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/docs/modules/plugins/pages/plugin-azure-functions.adoc?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,64 @@\n+= Azure functions Plugin\n+\n+The plugin provides functionality to interact with https://azure.microsoft.com/en-us/services/functions/[Azure Functions]\n+\n+== Installation\n+\n+.build.gradle\n+[source,gradle,subs=\"attributes+\"]\n+----\n+implementation(group: 'org.vividus', name: 'vividus-plugin-azure-functions', version: '{current-version}')\n+----\n+\n+== Configuration\n+\n+\n+=== Authentication\n+\n+authentication process relies on the configuration of environment variables. For example:\n+\n+\n+. `AZURE_CLIENT_ID` - an Azure client ID\n+. `AZURE_CLIENT_SECRET` - a client secret\n+. `AZURE_TENANT_ID` - an Azure tenant ID\n+. `AZURE_SUBSCRIPTION_ID` - an Azure subscription ID\n+\n+\n+See the official https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/identity/azure-identity#environment-variables[\"Azure identity\"] guide to get more details on what types of authentication could be used.\n+\n+\n+=== Azure Environment Selection\n+\n+The Azure environment could be selected via property: `azure.functions.environment`\n+The default value is AZURE\n+\n+Possible values are: AZURE, AZURE_CHINA, AZURE_GERMANY, AZURE_US_GOVERNMENT\n+\n+\n+== Steps\n+\n+\n+=== Function triggering\n+\n+Triggers a function\n+\n+[source,gherkin]\n+----\n+When I trigger funtion `$functionName` from function app `$functionAppName` in resource group `$resourceGroup` with payload:$payload and save response into `$scopes` variable `$variableNames`\n+----\n+\n+* `$functionName` - the name of the function to trigger\n+* `$functionAppName` - the name of the funciton app\n+* `$resourceGroup` - the resource group function relates to\n+* `$payload` - The JSON payload to send to a function(could be empty)\n+* `$scopes` - xref:parameters:variable-scope.adoc[The comma-separated set of the variables scopes].\n+* `$variableName` - The variable name to store results in JSON format.\n+\n+\n+.Trigger function\n+[source,gherkin]\n+----\n+When I trigger function `HttpTrigger1` from function app `vivdus-http-function` in resource group `vividus` with payload:\n+and save response into `scenario` variable `functionTrigger`\n+Then `${functionTrigger[4].statusCode}` is equal to `202`\n+----"
  },
  {
    "sha": "7dcf125d8ce6d616ca513224d4ae81e6aee846fd",
    "filename": "settings.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/settings.gradle",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/settings.gradle",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/settings.gradle?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -18,6 +18,7 @@ include 'vividus-plugin-aws-dynamodb'\n include 'vividus-plugin-aws-kinesis'\n include 'vividus-plugin-aws-lambda'\n include 'vividus-plugin-aws-s3'\n+include 'vividus-plugin-azure-functions'\n include 'vividus-plugin-browserstack'\n include 'vividus-plugin-csv'\n include 'vividus-plugin-datetime'"
  },
  {
    "sha": "a9e164d35c42bbab70ee44f1a58340e09cb52294",
    "filename": "vividus-plugin-azure-functions/build.gradle",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/build.gradle",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/build.gradle",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/build.gradle?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,16 @@\n+project.description = 'Vividus plugin for Azure Functions'\n+\n+dependencies {\n+    api project(':vividus-bdd-engine')\n+    implementation project(':vividus-soft-assert')\n+    implementation project(':vividus-util')\n+    implementation(group: 'com.azure.resourcemanager', name: 'azure-resourcemanager-appservice', version: '2.2.0')\n+    implementation(group: 'com.azure', name: 'azure-identity', version: '1.3.0-beta.2')\n+\n+    implementation(group: 'org.slf4j', name: 'slf4j-api', version: versions.slf4j)\n+\n+    testImplementation platform(group: 'org.junit', name: 'junit-bom', version: versions.junit)\n+    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter')\n+    testImplementation(group: 'org.mockito', name: 'mockito-junit-jupiter', version: versions.mockito)\n+    testImplementation(group: 'com.github.valfirst', name: 'slf4j-test', version: versions.slf4jTest)\n+}"
  },
  {
    "sha": "ccaee115b72163f8408e6ab5d7ebe7ab70b94fc1",
    "filename": "vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/service/FunctionService.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/service/FunctionService.java",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/service/FunctionService.java",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/service/FunctionService.java?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.azure.functions.service;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.management.profile.AzureProfile;\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.resourcemanager.appservice.AppServiceManager;\n+\n+public class FunctionService\n+{\n+    private final AzureProfile azureProfile;\n+\n+    public FunctionService(AzureProfile azureProfile)\n+    {\n+        this.azureProfile = azureProfile;\n+    }\n+\n+    private AppServiceManager createManager(ResponseCapturingHttpPipelinePolicy responseCapturingHttpPipelinePolicy)\n+    {\n+        TokenCredential credential = new DefaultAzureCredentialBuilder()\n+                .authorityHost(azureProfile.getEnvironment().getActiveDirectoryEndpoint()).build();\n+        return AppServiceManager.configure()\n+                                .withLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)\n+                                .withPolicy(responseCapturingHttpPipelinePolicy)\n+                                .authenticate(credential, azureProfile);\n+    }\n+\n+    public List<Map<String, Object>> triggerFunction(String resourceGroup, String appName, String functionName,\n+            Object payload)\n+    {\n+        ResponseCapturingHttpPipelinePolicy responseCapturingHttpPipelinePolicy =\n+                new ResponseCapturingHttpPipelinePolicy();\n+        createManager(responseCapturingHttpPipelinePolicy)\n+               .functionApps()\n+               .getByResourceGroup(resourceGroup, appName)\n+               .triggerFunction(functionName, payload);\n+        return responseCapturingHttpPipelinePolicy.getResponses();\n+    }\n+}"
  },
  {
    "sha": "22459072877057328182b7c13493e884b883beff",
    "filename": "vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/service/ResponseCapturingHttpPipelinePolicy.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/service/ResponseCapturingHttpPipelinePolicy.java",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/service/ResponseCapturingHttpPipelinePolicy.java",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/service/ResponseCapturingHttpPipelinePolicy.java?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.azure.functions.service;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class ResponseCapturingHttpPipelinePolicy implements HttpPipelinePolicy\n+{\n+    private final List<Map<String, Object>> recoreded = new ArrayList<>();\n+\n+    public List<Map<String, Object>> getResponses()\n+    {\n+        return List.copyOf(recoreded);\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next)\n+    {\n+        return  next.process().doOnSuccess(this::saveResponse);\n+    }\n+\n+    private void saveResponse(HttpResponse response)\n+    {\n+        recoreded.add(mutable(Map.of(\"url\", response.getRequest().getUrl(),\n+                             \"status-code\", response.getStatusCode(),\n+                             \"body\", response.getBodyAsString(),\n+                             \"headers\", response.getHeaders().toMap())));\n+    }\n+\n+    private <K, V> Map<K, V> mutable(Map<K, V> immutable)\n+    {\n+        return new HashMap<>(immutable);\n+    }\n+}"
  },
  {
    "sha": "e7e34a37710c1973f3824b1cc29dbdb3327850f0",
    "filename": "vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/steps/FunctionSteps.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/steps/FunctionSteps.java",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/steps/FunctionSteps.java",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/main/java/org/vividus/azure/functions/steps/FunctionSteps.java?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.azure.functions.steps;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.azure.functions.service.FunctionService;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.JsonUtils;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class FunctionSteps\n+{\n+    private final JsonUtils jsonUtils;\n+    private final FunctionService functionsService;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public FunctionSteps(JsonUtils jsonUtils, FunctionService functionsService, IBddVariableContext bddVariableContext)\n+    {\n+        this.jsonUtils = jsonUtils;\n+        this.functionsService = functionsService;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Triggers Azure function by its name. And saves responses from the service into variable with\n+     *  a provided scope and name\n+     * @param functionApp   the name of Azure Function App. The value can be retrieved by looking\n+     *                      at the function in the Azure Portal.\n+     * @param functionName  the name of the function to execute. The value can be retrieved by looking\n+     *                      at the function in the Azure Portal.\n+     * @param resourceGroup Resource group name. Resource group - container that holds related resources\n+     *                      for an Azure solution. The value can be retrieved by looking\n+     *                      at the function in the Azure Portal.\n+     * @param payload       the JSON that to provide to Function App function as input.\n+     * @param scopes       The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variables scopes<br>\n+     *                     <i>Available scopes:</i>\n+     *                     <ul>\n+     *                     <li><b>STEP</b> - the variable will be available only within the step,\n+     *                     <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     *                     <li><b>STORY</b> - the variable will be available within the whole story,\n+     *                     <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     *                     </ul>scopes\n+     * @param variableName The variable name to store results. If the variable name is my-var, the following\n+     *                     variables will be created:\n+     *                     <ul>\n+     *                     <li>${my-var[0].body} - the response body</li>\n+     *                     <li>${my-var[0].status-code} - the HTTP status code is in the 200 range for a successful\n+     *                     request</li>\n+     *                     <li>${my-var[0].headers} - the response headers</li>\n+     *                     <li>${my-var[0].url} - the request URL</li>\n+     *                     </ul>\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @When(\"I trigger function `$functionName` from function app `$functionAppName` in resource group `$resourceGroup`\"\n+            + \" with payload:$payload and save response into `$scopes` variable `$variableNames`\")\n+    public void triggerFunction(String functionName, String functionApp, String resourceGroup, String payload,\n+            Set<VariableScope> scopes, String variableName)\n+    {\n+        List<Map<String, Object>> responses = functionsService.triggerFunction(resourceGroup, functionApp, functionName,\n+                convertPayload(payload));\n+        responses.forEach(m -> m.compute(\"body\", (k, v) -> ((Mono<String>) v).block()));\n+        bddVariableContext.putVariable(scopes, variableName, responses);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<String, String> convertPayload(String payload)\n+    {\n+        if (StringUtils.isBlank(payload))\n+        {\n+            return Map.of();\n+        }\n+        return jsonUtils.toObject(payload, Map.class);\n+    }\n+}"
  },
  {
    "sha": "8ff71622e07be3920bfcb91096e8c92e1fda106f",
    "filename": "vividus-plugin-azure-functions/src/main/resources/log4j2-vividus-azure-functions.xml",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/resources/log4j2-vividus-azure-functions.xml",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/resources/log4j2-vividus-azure-functions.xml",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/main/resources/log4j2-vividus-azure-functions.xml?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration>\n+   <Loggers>\n+        <Logger name=\"com.azure.core\" level=\"ERROR\" additivity=\"false\">\n+            <AppenderRef ref=\"console\" />\n+            <AppenderRef ref=\"file\" />\n+        </Logger>\n+    </Loggers>\n+</Configuration>"
  },
  {
    "sha": "9618701d806e33ac7e32a2a5d56a025d5f4f6633",
    "filename": "vividus-plugin-azure-functions/src/main/resources/properties/defaults/default.properties",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/resources/properties/defaults/default.properties",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/resources/properties/defaults/default.properties",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/main/resources/properties/defaults/default.properties?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1 @@\n+azure.functions.environment=AZURE"
  },
  {
    "sha": "497a99e31715c3a981da8c411fe5c6c8fd43c466",
    "filename": "vividus-plugin-azure-functions/src/main/resources/spring.xml",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/resources/spring.xml",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/main/resources/spring.xml",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/main/resources/spring.xml?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n+    xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd\"\n+    default-lazy-init=\"true\">\n+\n+    <bean id=\"functionSteps\" class=\"org.vividus.azure.functions.steps.FunctionSteps\">\n+        <constructor-arg>\n+            <bean class=\"org.vividus.azure.functions.service.FunctionService\">\n+                <constructor-arg>\n+                    <bean class=\"com.azure.core.management.profile.AzureProfile\">\n+                        <constructor-arg type=\"com.azure.core.management.AzureEnvironment\" value=\"${azure.functions.environment}\" />\n+                    </bean>\n+                </constructor-arg>\n+            </bean>\n+        </constructor-arg>\n+    </bean>\n+\n+    <util:list id=\"stepBeanNames-Azure-Function\" value-type=\"java.lang.String\">\n+        <idref bean=\"functionSteps\" />\n+    </util:list>\n+</beans>"
  },
  {
    "sha": "c44ca7f1848eca35b89a96de85fb23f261fd83ad",
    "filename": "vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/service/FunctionServiceTests.java",
    "status": "added",
    "additions": 87,
    "deletions": 0,
    "changes": 87,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/service/FunctionServiceTests.java",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/service/FunctionServiceTests.java",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/service/FunctionServiceTests.java?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.azure.functions.service;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockConstruction;\n+import static org.mockito.Mockito.mockStatic;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Map;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.management.AzureEnvironment;\n+import com.azure.core.management.profile.AzureProfile;\n+import com.azure.resourcemanager.appservice.AppServiceManager;\n+import com.azure.resourcemanager.appservice.AppServiceManager.Configurable;\n+import com.azure.resourcemanager.appservice.models.FunctionApp;\n+import com.azure.resourcemanager.appservice.models.FunctionApps;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockedConstruction;\n+import org.mockito.MockedStatic;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FunctionServiceTests\n+{\n+    private static final Map<Object, Object> PAYLOAD = Map.of();\n+    private static final String FUNCTION = \"test\";\n+    private static final String FUNCTION_APP = \"vividus-tests\";\n+    private static final String RESOURCE_GROUP = \"vividus\";\n+    private static final String ENDPOINT = \"https://azure.dev\";\n+    @Mock private AzureEnvironment azureEnvironment;\n+    @Mock private AzureProfile azureProfile;\n+\n+    @InjectMocks private FunctionService functionService;\n+\n+    @Test\n+    void shouldExecuteAFunction()\n+    {\n+        try (MockedStatic<AppServiceManager> appServiceMock = mockStatic(AppServiceManager.class);\n+             MockedConstruction<ResponseCapturingHttpPipelinePolicy> policy =\n+                     mockConstruction(ResponseCapturingHttpPipelinePolicy.class))\n+        {\n+            when(azureProfile.getEnvironment()).thenReturn(azureEnvironment);\n+            when(azureEnvironment.getActiveDirectoryEndpoint()).thenReturn(ENDPOINT);\n+            Configurable configurable = mock(Configurable.class);\n+            appServiceMock.when(() -> AppServiceManager.configure()).thenReturn(configurable);\n+            when(configurable.withLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)).thenReturn(configurable);\n+            when(configurable.withPolicy(any(ResponseCapturingHttpPipelinePolicy.class))).thenReturn(configurable);\n+            AppServiceManager serviceManager = mock(AppServiceManager.class);\n+            when(configurable.authenticate(any(TokenCredential.class), eq(azureProfile))).thenReturn(serviceManager);\n+            FunctionApps functionApps = mock(FunctionApps.class);\n+            when(serviceManager.functionApps()).thenReturn(functionApps);\n+            FunctionApp functionApp = mock(FunctionApp.class);\n+            when(functionApps.getByResourceGroup(RESOURCE_GROUP, FUNCTION_APP)).thenReturn(functionApp);\n+\n+            functionService.triggerFunction(RESOURCE_GROUP, FUNCTION_APP, FUNCTION, PAYLOAD);\n+\n+            verify(azureProfile).getEnvironment();\n+            verify(azureEnvironment).getActiveDirectoryEndpoint();\n+            verify(functionApp).triggerFunction(FUNCTION, PAYLOAD);\n+            verify(policy.constructed().get(0)).getResponses();\n+        }\n+    }\n+}"
  },
  {
    "sha": "511228e53f3e4b19ee082fa24c7a14779502d242",
    "filename": "vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/service/ResponseCapturingHttpPipelinePolicyTests.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/service/ResponseCapturingHttpPipelinePolicyTests.java",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/service/ResponseCapturingHttpPipelinePolicyTests.java",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/service/ResponseCapturingHttpPipelinePolicyTests.java?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.azure.functions.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import reactor.core.publisher.Mono;\n+\n+@ExtendWith(MockitoExtension.class)\n+class ResponseCapturingHttpPipelinePolicyTests\n+{\n+    private static final String BODY = \"body\";\n+    private static final int SC_OK = 200;\n+    private static final String URL = \"https://azure.com\";\n+    @Mock private HttpPipelineCallContext context;\n+    @Mock private HttpPipelineNextPolicy next;\n+\n+    private ResponseCapturingHttpPipelinePolicy underTest = new ResponseCapturingHttpPipelinePolicy();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    void shouldCaptureResponseData() throws MalformedURLException\n+    {\n+        HttpResponse response = mock(HttpResponse.class);\n+        Mono<HttpResponse> mono = mock(Mono.class);\n+        Mono<String> body = Mono.just(BODY);\n+        when(response.getBodyAsString()).thenReturn(body);\n+        HttpHeaders headers = mock(HttpHeaders.class);\n+        when(response.getHeaders()).thenReturn(headers);\n+        Map<String, String> headersMap = Map.of(\"header\", \"value\");\n+        when(headers.toMap()).thenReturn(headersMap);\n+        HttpRequest request = mock(HttpRequest.class);\n+        URL url = URI.create(URL).toURL();\n+        when(request.getUrl()).thenReturn(url);\n+        when(response.getRequest()).thenReturn(request);\n+        when(response.getStatusCode()).thenReturn(SC_OK);\n+        when(mono.doOnSuccess(argThat(c -> {\n+            c.accept(response);\n+            return true;\n+        }))).thenReturn(mono);\n+        when(next.process()).thenReturn(mono);\n+\n+        underTest.process(context, next);\n+\n+        Map<String, Object> captured = underTest.getResponses().get(0);\n+        Assertions.assertAll(\n+            () -> assertEquals(headersMap, captured.get(\"headers\")),\n+            () -> assertEquals(body, captured.get(BODY)),\n+            () -> assertEquals(SC_OK, captured.get(\"status-code\")),\n+            () -> assertEquals(url, captured.get(\"url\")));\n+    }\n+}"
  },
  {
    "sha": "4ae11fd2ee5ce6bb05c4f56b8a4f8c40d492c04c",
    "filename": "vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/steps/FunctionStepsTests.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/steps/FunctionStepsTests.java",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/steps/FunctionStepsTests.java",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/test/java/org/vividus/azure/functions/steps/FunctionStepsTests.java?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.azure.functions.steps;\n+\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.azure.functions.service.FunctionService;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.JsonUtils;\n+\n+import reactor.core.publisher.Mono;\n+\n+@ExtendWith(MockitoExtension.class)\n+class FunctionStepsTests\n+{\n+    private static final String DATA = \"data\";\n+    private static final String BODY = \"body\";\n+    private static final Set<VariableScope> SCOPES = Set.of(VariableScope.STORY);\n+    private static final String VARIABLE_NAME = \"variableName\";\n+    private static final String FUNCTION_NAME = \"functionName\";\n+    private static final String APP_NAME = \"appName\";\n+    private static final String RESOURCE_GROUP = \"resourceGroup\";\n+    private static final String PAYLOAD = \"{\\\"key\\\":\\\"value\\\"}\";\n+\n+    @Mock private JsonUtils jsonUtils;\n+    @Mock private FunctionService functionService;\n+    @Mock private IBddVariableContext bddVariableContext;\n+\n+    @InjectMocks private FunctionSteps functionSteps;\n+\n+    @Test\n+    void shouldTriggerFunctionAndSaveResponsesToAScopedVariale()\n+    {\n+        Map<String, String> payloadMap = Map.of(\"key\", \"value\");\n+        when(jsonUtils.toObject(PAYLOAD, Map.class)).thenReturn(payloadMap);\n+        mockTrigger(payloadMap);\n+        functionSteps.triggerFunction(FUNCTION_NAME, APP_NAME, RESOURCE_GROUP, PAYLOAD,\n+                SCOPES, VARIABLE_NAME);\n+        verify(bddVariableContext).putVariable(SCOPES, VARIABLE_NAME, List.of(Map.of(BODY, DATA)));\n+    }\n+\n+    private void mockTrigger(Map<String, String> payloadMap)\n+    {\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(BODY, Mono.just(DATA));\n+        when(functionService.triggerFunction(RESOURCE_GROUP, APP_NAME, FUNCTION_NAME, payloadMap)).thenReturn(\n+                List.of(result));\n+    }\n+\n+    @Test\n+    void shouldTriggerFunctionWithEmptyPayload()\n+    {\n+        Map<String, String> payloadMap = Map.of();\n+        mockTrigger(payloadMap);\n+        functionSteps.triggerFunction(FUNCTION_NAME, APP_NAME, RESOURCE_GROUP, \"\", SCOPES, VARIABLE_NAME);\n+        verify(bddVariableContext).putVariable(SCOPES, VARIABLE_NAME, List.of(Map.of(BODY, DATA)));\n+        verifyNoInteractions(jsonUtils);\n+    }\n+}"
  },
  {
    "sha": "1f0955d450f0dc49ca715b1a0a88a5aa746ee11e",
    "filename": "vividus-plugin-azure-functions/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/vividus-framework/vividus/blob/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker",
    "raw_url": "https://github.com/vividus-framework/vividus/raw/5d1739c7f92708585b01d256cad229071d91aee7/vividus-plugin-azure-functions/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker",
    "contents_url": "https://api.github.com/repos/vividus-framework/vividus/contents/vividus-plugin-azure-functions/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker?ref=5d1739c7f92708585b01d256cad229071d91aee7",
    "patch": "@@ -0,0 +1 @@\n+mock-maker-inline"
  }
]
