[
  {
    "sha": "e59798fe364d253649d6e5dfbe680b061e94d83f",
    "filename": "maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/StartupReportConfiguration.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/StartupReportConfiguration.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/StartupReportConfiguration.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/StartupReportConfiguration.java?ref=9e4fce3f95d45f849cbe64989f4f9022f979ee5a",
    "patch": "@@ -248,7 +248,7 @@ public boolean isForkMode()\n         return isForkMode;\n     }\n \n-    private File resolveReportsDirectory( Integer forkNumber )\n+    public File resolveReportsDirectory( Integer forkNumber )\n     {\n         return forkNumber == null ? reportsDirectory : replaceForkThreadsInPath( reportsDirectory, forkNumber );\n     }"
  },
  {
    "sha": "a56d4a5cb751e276faca94ff3fcc652d8e405b8e",
    "filename": "maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/DefaultReporterFactory.java",
    "status": "modified",
    "additions": 207,
    "deletions": 43,
    "changes": 250,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/DefaultReporterFactory.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/DefaultReporterFactory.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/DefaultReporterFactory.java?ref=9e4fce3f95d45f849cbe64989f4f9022f979ee5a",
    "patch": "@@ -20,27 +20,33 @@\n  */\n \n import org.apache.maven.plugin.surefire.StartupReportConfiguration;\n+import org.apache.maven.plugin.surefire.extensions.DefaultStatelessReportMojoConfiguration;\n import org.apache.maven.plugin.surefire.log.api.ConsoleLogger;\n import org.apache.maven.plugin.surefire.log.api.Level;\n import org.apache.maven.plugin.surefire.runorder.StatisticsReporter;\n-import org.apache.maven.surefire.shared.utils.logging.MessageBuilder;\n+import org.apache.maven.surefire.api.report.ReportEntry;\n+import org.apache.maven.surefire.api.report.ReporterFactory;\n+import org.apache.maven.surefire.api.report.RunListener;\n+import org.apache.maven.surefire.api.report.SimpleReportEntry;\n+import org.apache.maven.surefire.api.report.StackTraceWriter;\n+import org.apache.maven.surefire.api.suite.RunResult;\n import org.apache.maven.surefire.extensions.ConsoleOutputReportEventListener;\n import org.apache.maven.surefire.extensions.StatelessReportEventListener;\n import org.apache.maven.surefire.extensions.StatelessTestsetInfoConsoleReportEventListener;\n import org.apache.maven.surefire.extensions.StatelessTestsetInfoFileReportEventListener;\n-import org.apache.maven.surefire.api.report.ReporterFactory;\n-import org.apache.maven.surefire.api.report.RunListener;\n import org.apache.maven.surefire.report.RunStatistics;\n-import org.apache.maven.surefire.api.report.StackTraceWriter;\n-import org.apache.maven.surefire.api.suite.RunResult;\n+import org.apache.maven.surefire.shared.utils.logging.MessageBuilder;\n \n import java.io.File;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Deque;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.TreeMap;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentLinkedQueue;\n \n import static org.apache.maven.plugin.surefire.log.api.Level.resolveLevel;\n@@ -54,8 +60,10 @@\n import static org.apache.maven.plugin.surefire.report.ReportEntryType.ERROR;\n import static org.apache.maven.plugin.surefire.report.ReportEntryType.FAILURE;\n import static org.apache.maven.plugin.surefire.report.ReportEntryType.SUCCESS;\n-import static org.apache.maven.surefire.shared.utils.logging.MessageUtils.buffer;\n+import static org.apache.maven.plugin.surefire.report.TestSetStats.TestSetMode;\n+import static org.apache.maven.surefire.api.util.internal.ObjectUtils.systemProps;\n import static org.apache.maven.surefire.api.util.internal.ObjectUtils.useNonNull;\n+import static org.apache.maven.surefire.shared.utils.logging.MessageUtils.buffer;\n \n /**\n  * Provides reporting modules on the plugin side.\n@@ -83,6 +91,8 @@\n     // from \"<testclass>.<testmethod>\" -> statistics about all the runs for error tests\n     private Map<String, List<TestMethodStats>> errorTests;\n \n+    private List<ClassStats> allClassStats = new ArrayList<>();\n+\n     public DefaultReporterFactory( StartupReportConfiguration reportConfiguration, ConsoleLogger consoleLogger )\n     {\n         this( reportConfiguration, consoleLogger, null );\n@@ -168,6 +178,7 @@ final void addListener( TestSetRunListener listener )\n     public RunResult close()\n     {\n         mergeTestHistoryResult();\n+        saveSummary();\n         runCompleted();\n         for ( TestSetRunListener listener : listeners )\n         {\n@@ -176,6 +187,39 @@ public RunResult close()\n         return globalStats.getRunResult();\n     }\n \n+    private void saveSummary()\n+    {\n+        Map<String, Deque<WrappedReportEntry>> testClassMethodRunHistory\n+            = new ConcurrentHashMap<String, Deque<WrappedReportEntry>>();\n+\n+        DefaultStatelessReportMojoConfiguration configuration =\n+            new DefaultStatelessReportMojoConfiguration( reportConfiguration.resolveReportsDirectory( forkNumber ),\n+                                                         reportConfiguration.getReportNameSuffix(),\n+                                                         reportConfiguration.isTrimStackTrace(),\n+                                                         reportConfiguration.getRerunFailingTestsCount(),\n+                                                         reportConfiguration.getXsdSchemaLocation(),\n+                                                         testClassMethodRunHistory );\n+\n+        StatelessXmlReporter reporter = new StatelessXmlReporter( configuration.getReportsDirectory(),\n+                                                                  configuration.getReportNameSuffix(),\n+                                                                  configuration.isTrimStackTrace(),\n+                                                                  configuration.getRerunFailingTestsCount(),\n+                                                                  configuration.getTestClassMethodRunHistory(),\n+                                                                  configuration.getXsdSchemaLocation(),\n+                                                                  \"3.0\",\n+                                                                  false,\n+                                                                  false,\n+                                                                  false,\n+                                                                  false );\n+        ReportEntry reportEntry = new SimpleReportEntry( \"TestSuite\", null, \"\", null, 12 );\n+        WrappedReportEntry testSetReportEntry =\n+                new WrappedReportEntry( reportEntry, ReportEntryType.SUCCESS, 12, null, null, systemProps() );\n+        TestSetStats stats = new TestSetStats( false, true, TestSetMode.TEST_SUITE );\n+        stats.setClassStats( allClassStats );\n+        stats.setRunStatistics( globalStats );\n+        reporter.testSetCompleted( testSetReportEntry, stats );\n+    }\n+\n     public void runStarting()\n     {\n         if ( reportConfiguration.isPrintSummary() )\n@@ -271,6 +315,77 @@ else if ( seenSuccess )\n         }\n     }\n \n+    /**\n+     *\n+     *  Maintains test class result state.\n+     *\n+     * @author Wing Lam\n+     */\n+    public class ClassStats\n+    {\n+        private String name;\n+        private int completedCount;\n+        private int failedCount;\n+        private int errorCount;\n+        private int skippedCount;\n+        public ClassStats( String name, int completedCount, int failedCount, int errorCount, int skippedCount )\n+        {\n+            this.name = name;\n+            this.completedCount = completedCount;\n+            this.failedCount = failedCount;\n+            this.errorCount = errorCount;\n+            this.skippedCount = skippedCount;\n+        }\n+        public String getName()\n+        {\n+            return name;\n+        }\n+        public int getCompletedCount()\n+        {\n+            return completedCount;\n+        }\n+        public int getFailures()\n+        {\n+            return failedCount;\n+        }\n+        public int getErrors()\n+        {\n+            return errorCount;\n+        }\n+        public int getSkipped()\n+        {\n+            return skippedCount;\n+        }\n+    }\n+\n+    /**\n+     * \n+     *  Maintains count for completed and skipped tests.\n+     *\n+     * @author Wing Lam\n+     */\n+    public class Counters\n+    {\n+        private int completedCount = 0;\n+        private int skipped = 0;\n+        public int getCompletedCount()\n+        {\n+            return completedCount;\n+        }\n+        public int getSkipped()\n+        {\n+            return skipped;\n+        }\n+        public void setCompletedCount( int completedCount )\n+        {\n+            this.completedCount = completedCount;\n+        }\n+        public void setSkipped( int skipped )\n+        {\n+            this.skipped = skipped;\n+        }\n+    }\n+\n     /**\n      * Merge all the TestMethodStats in each TestRunListeners and put results into flakyTests, failedTests and\n      * errorTests, indexed by test class and method name. Update globalStatistics based on the result of the merge.\n@@ -281,6 +396,7 @@ private void mergeTestHistoryResult()\n         flakyTests = new TreeMap<>();\n         failedTests = new TreeMap<>();\n         errorTests = new TreeMap<>();\n+        Map<String, List<TestMethodStats>> classToResult = new LinkedHashMap<String, List<TestMethodStats>>();\n \n         Map<String, List<TestMethodStats>> mergedTestHistoryResult = new HashMap<>();\n         // Merge all the stats for tests from listeners\n@@ -300,56 +416,104 @@ private void mergeTestHistoryResult()\n                 {\n                     currentMethodStats.add( methodStats );\n                 }\n+\n+                String className = methodStats.getTestClassName();\n+                List<TestMethodStats> classResults = classToResult.get( className );\n+                if ( classResults == null )\n+                {\n+                    classResults = new ArrayList<>();\n+                }\n+                classResults.add( methodStats );\n+                classToResult.put( className, classResults );\n             }\n         }\n \n         // Update globalStatistics by iterating through mergedTestHistoryResult\n-        int completedCount = 0, skipped = 0;\n-\n+        Counters counter = new Counters();\n         for ( Map.Entry<String, List<TestMethodStats>> entry : mergedTestHistoryResult.entrySet() )\n         {\n             List<TestMethodStats> testMethodStats = entry.getValue();\n             String testClassMethodName = entry.getKey();\n-            completedCount++;\n+            counter.setCompletedCount( counter.getCompletedCount() + 1 );\n+            mergeTestResultsHelper( testMethodStats,\n+                                    flakyTests,\n+                                    failedTests,\n+                                    errorTests,\n+                                    counter,\n+                                    testClassMethodName );\n+        }\n \n-            List<ReportEntryType> resultTypes = new ArrayList<>();\n-            for ( TestMethodStats methodStats : testMethodStats )\n-            {\n-                resultTypes.add( methodStats.getResultType() );\n-            }\n+        Map<String, List<TestMethodStats>> cflakyTests = new TreeMap<>();\n+        Map<String, List<TestMethodStats>> cfailedTests = new TreeMap<>();\n+        Map<String, List<TestMethodStats>> cerrorTests = new TreeMap<>();\n+        for ( Map.Entry<String, List<TestMethodStats>> entry : classToResult.entrySet() )\n+        {\n+            Counters ccounter = new Counters();\n+            List<TestMethodStats> testMethodStats = entry.getValue();\n+            String testClassMethodName = entry.getKey();\n+            ccounter.setCompletedCount( ccounter.getCompletedCount() + 1 );\n+            mergeTestResultsHelper( testMethodStats,\n+                                    cflakyTests,\n+                                    cfailedTests,\n+                                    cerrorTests,\n+                                    ccounter,\n+                                    testClassMethodName );\n+            ClassStats classStats = new ClassStats( testClassMethodName,\n+                                                    ccounter.completedCount,\n+                                                    cfailedTests.size(),\n+                                                    cerrorTests.size(),\n+                                                    ccounter.skipped );\n+            allClassStats.add( classStats );\n+        }\n \n-            switch ( getTestResultType( resultTypes, reportConfiguration.getRerunFailingTestsCount() ) )\n-            {\n-                case success:\n-                    // If there are multiple successful runs of the same test, count all of them\n-                    int successCount = 0;\n-                    for ( ReportEntryType type : resultTypes )\n+        globalStats.set( counter.completedCount,\n+                         errorTests.size(),\n+                         failedTests.size(),\n+                         counter.skipped,\n+                         flakyTests.size() );\n+    }\n+\n+    private void mergeTestResultsHelper( List<TestMethodStats> testMethodStats,\n+                                         Map<String, List<TestMethodStats>> flakyTests,\n+                                         Map<String, List<TestMethodStats>> failedTests,\n+                                         Map<String, List<TestMethodStats>> errorTests,\n+                                         Counters counter, String testClassMethodName )\n+    {\n+        List<ReportEntryType> resultTypes = new ArrayList<>();\n+        for ( TestMethodStats methodStats : testMethodStats )\n+        {\n+            resultTypes.add( methodStats.getResultType() );\n+        }\n+\n+        switch ( getTestResultType( resultTypes, reportConfiguration.getRerunFailingTestsCount() ) )\n+        {\n+            case success:\n+                // If there are multiple successful runs of the same test, count all of them\n+                int successCount = 0;\n+                for ( ReportEntryType type : resultTypes )\n+                {\n+                    if ( type == SUCCESS )\n                     {\n-                        if ( type == SUCCESS )\n-                        {\n-                            successCount++;\n-                        }\n+                        successCount++;\n                     }\n-                    completedCount += successCount - 1;\n-                    break;\n-                case skipped:\n-                    skipped++;\n-                    break;\n-                case flake:\n-                    flakyTests.put( testClassMethodName, testMethodStats );\n-                    break;\n-                case failure:\n-                    failedTests.put( testClassMethodName, testMethodStats );\n-                    break;\n-                case error:\n-                    errorTests.put( testClassMethodName, testMethodStats );\n-                    break;\n-                default:\n-                    throw new IllegalStateException( \"Get unknown test result type\" );\n-            }\n+                }\n+                counter.setCompletedCount( counter.getCompletedCount() + successCount - 1 );\n+                break;\n+            case skipped:\n+                counter.setSkipped( counter.getSkipped() + 1 );\n+                break;\n+            case flake:\n+                flakyTests.put( testClassMethodName, testMethodStats );\n+                break;\n+            case failure:\n+                failedTests.put( testClassMethodName, testMethodStats );\n+                break;\n+            case error:\n+                errorTests.put( testClassMethodName, testMethodStats );\n+                break;\n+            default:\n+                throw new IllegalStateException( \"Get unknown test result type\" );\n         }\n-\n-        globalStats.set( completedCount, errorTests.size(), failedTests.size(), skipped, flakyTests.size() );\n     }\n \n     /**"
  },
  {
    "sha": "e30fdc07b0d4092c8fb33581ff1f3417f9280bc0",
    "filename": "maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/StatelessXmlReporter.java",
    "status": "modified",
    "additions": 37,
    "deletions": 12,
    "changes": 49,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/StatelessXmlReporter.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/StatelessXmlReporter.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/StatelessXmlReporter.java?ref=9e4fce3f95d45f849cbe64989f4f9022f979ee5a",
    "patch": "@@ -20,11 +20,12 @@\n  */\n \n import org.apache.maven.plugin.surefire.booterclient.output.InPluginProcessDumpSingleton;\n-import org.apache.maven.surefire.shared.utils.xml.PrettyPrintXMLWriter;\n-import org.apache.maven.surefire.shared.utils.xml.XMLWriter;\n-import org.apache.maven.surefire.extensions.StatelessReportEventListener;\n+import org.apache.maven.plugin.surefire.report.DefaultReporterFactory.ClassStats;\n import org.apache.maven.surefire.api.report.ReporterException;\n import org.apache.maven.surefire.api.report.SafeThrowable;\n+import org.apache.maven.surefire.extensions.StatelessReportEventListener;\n+import org.apache.maven.surefire.shared.utils.xml.PrettyPrintXMLWriter;\n+import org.apache.maven.surefire.shared.utils.xml.XMLWriter;\n \n import java.io.BufferedOutputStream;\n import java.io.File;\n@@ -46,6 +47,7 @@\n import static org.apache.maven.plugin.surefire.report.DefaultReporterFactory.TestResultType;\n import static org.apache.maven.plugin.surefire.report.FileReporterUtils.stripIllegalFilenameChars;\n import static org.apache.maven.plugin.surefire.report.ReportEntryType.SUCCESS;\n+import static org.apache.maven.plugin.surefire.report.TestSetStats.TestSetMode;\n import static org.apache.maven.surefire.shared.utils.StringUtils.isBlank;\n \n @SuppressWarnings( { \"javadoc\", \"checkstyle:javadoctype\" } )\n@@ -132,9 +134,6 @@ public StatelessXmlReporter( File reportsDirectory, String reportNameSuffix, boo\n     @Override\n     public void testSetCompleted( WrappedReportEntry testSetReportEntry, TestSetStats testSetStats )\n     {\n-        Map<String, Map<String, List<WrappedReportEntry>>> classMethodStatistics =\n-                arrangeMethodStatistics( testSetReportEntry, testSetStats );\n-\n         OutputStream outputStream = getOutputStream( testSetReportEntry );\n         try ( OutputStreamWriter fw = getWriter( outputStream ) )\n         {\n@@ -144,15 +143,29 @@ public void testSetCompleted( WrappedReportEntry testSetReportEntry, TestSetStat\n             createTestSuiteElement( ppw, testSetReportEntry, testSetStats ); // TestSuite\n \n             showProperties( ppw, testSetReportEntry.getSystemProperties() );\n-\n-            for ( Entry<String, Map<String, List<WrappedReportEntry>>> statistics : classMethodStatistics.entrySet() )\n+            if ( testSetStats.getTestSetMode() == TestSetMode.TEST_CLASS )\n+            {\n+                Map<String, Map<String, List<WrappedReportEntry>>> classMethodStatistics =\n+                    arrangeMethodStatistics( testSetReportEntry, testSetStats );\n+                for ( Entry<String, Map<String, List<WrappedReportEntry>>> statistics : classMethodStatistics.entrySet() )\n+                {\n+                    for ( Entry<String, List<WrappedReportEntry>> thisMethodRuns : statistics.getValue().entrySet() )\n+                    {\n+                        serializeTestClass( outputStream, fw, ppw, thisMethodRuns.getValue() );\n+                    }\n+                }\n+            }\n+            else if ( testSetStats.getTestSetMode() == TestSetMode.TEST_SUITE )\n             {\n-                for ( Entry<String, List<WrappedReportEntry>> thisMethodRuns : statistics.getValue().entrySet() )\n+                List<ClassStats> classStats = testSetStats.getClassStats();\n+                if ( classStats != null )\n                 {\n-                    serializeTestClass( outputStream, fw, ppw, thisMethodRuns.getValue() );\n+                    for ( ClassStats stats : classStats )\n+                    {\n+                        startTestClassElement( ppw, stats );\n+                    }\n                 }\n             }\n-\n             ppw.endElement(); // TestSuite\n         }\n         catch ( Exception e )\n@@ -161,7 +174,7 @@ public void testSetCompleted( WrappedReportEntry testSetReportEntry, TestSetStat\n             // This method must be sail-safe and errors are in a dump log.\n             // The control flow must not be broken in TestSetRunListener#testSetCompleted.\n             InPluginProcessDumpSingleton.getSingleton()\n-                    .dumpException( e, e.getLocalizedMessage(), reportsDirectory );\n+                .dumpException( e, e.getLocalizedMessage(), reportsDirectory );\n         }\n     }\n \n@@ -389,6 +402,18 @@ private void startTestElement( XMLWriter ppw, WrappedReportEntry report )\n \n         ppw.addAttribute( \"time\", report.elapsedTimeAsString() );\n     }\n+ \n+    private void startTestClassElement( XMLWriter ppw, ClassStats classStats )\n+    {\n+        ppw.startElement( \"testclass\" );\n+        String name = classStats.getName();\n+        ppw.addAttribute( \"name\", name == null ? \"\" : extraEscapeAttribute( name ) );\n+        ppw.addAttribute( \"tests\", String.valueOf( classStats.getCompletedCount() ) );\n+        ppw.addAttribute( \"errors\", String.valueOf( classStats.getErrors() ) );\n+        ppw.addAttribute( \"skipped\", String.valueOf( classStats.getSkipped() ) );\n+        ppw.addAttribute( \"failures\", String.valueOf( classStats.getFailures() ) );\n+        ppw.endElement();\n+    }\n \n     private void createTestSuiteElement( XMLWriter ppw, WrappedReportEntry report, TestSetStats testSetStats )\n     {"
  },
  {
    "sha": "aabd60a3505a369ab3b521302957a49fd39b648f",
    "filename": "maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/TestMethodStats.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/TestMethodStats.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/TestMethodStats.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/TestMethodStats.java?ref=9e4fce3f95d45f849cbe64989f4f9022f979ee5a",
    "patch": "@@ -48,6 +48,18 @@ public String getTestClassMethodName()\n         return testClassMethodName;\n     }\n \n+    public String getTestClassName()\n+    {\n+        if ( testClassMethodName.contains( \".\" ) )\n+        {\n+            return testClassMethodName.substring( 0, testClassMethodName.lastIndexOf( \".\" ) );\n+        }\n+        else\n+        {\n+            return testClassMethodName;\n+        }\n+    }\n+\n     public ReportEntryType getResultType()\n     {\n         return resultType;"
  },
  {
    "sha": "82a8ce822ca64295d5e2311f3e396eb53818aec7",
    "filename": "maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/TestSetStats.java",
    "status": "modified",
    "additions": 47,
    "deletions": 1,
    "changes": 48,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/TestSetStats.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/TestSetStats.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/report/TestSetStats.java?ref=9e4fce3f95d45f849cbe64989f4f9022f979ee5a",
    "patch": "@@ -19,8 +19,10 @@\n  * under the License.\n  */\n \n-import org.apache.maven.surefire.shared.utils.logging.MessageBuilder;\n+import org.apache.maven.plugin.surefire.report.DefaultReporterFactory.ClassStats;\n import org.apache.maven.surefire.api.report.ReportEntry;\n+import org.apache.maven.surefire.report.RunStatistics;\n+import org.apache.maven.surefire.shared.utils.logging.MessageBuilder;\n \n import java.util.ArrayList;\n import java.util.Collection;\n@@ -46,6 +48,17 @@\n     private static final String IN_MARKER = \" - in \";\n     private static final String COMMA = \", \";\n \n+    /**\n+     *\n+     *  Specifies whether the TestSetStats are for the whole test class or test suite.\n+     *\n+     */\n+    public enum TestSetMode\n+    {\n+        TEST_SUITE,\n+        TEST_CLASS\n+    };\n+\n     private final Queue<WrappedReportEntry> reportEntries = new ConcurrentLinkedQueue<>();\n \n     private final boolean trimStackTrace;\n@@ -66,10 +79,20 @@\n \n     private long lastStartAt;\n \n+    private TestSetMode testSetMode;\n+\n+    private List<ClassStats> classStats;\n+\n     public TestSetStats( boolean trimStackTrace, boolean plainFormat )\n+    {\n+        this( trimStackTrace, plainFormat, TestSetMode.TEST_CLASS );\n+    }\n+\n+    public TestSetStats( boolean trimStackTrace, boolean plainFormat, TestSetMode testSetMode )\n     {\n         this.trimStackTrace = trimStackTrace;\n         this.plainFormat = plainFormat;\n+        this.testSetMode = testSetMode;\n     }\n \n     public int getElapsedSinceTestSetStart()\n@@ -165,6 +188,29 @@ public int getSkipped()\n         return skipped;\n     }\n \n+    public TestSetMode getTestSetMode()\n+    {\n+        return testSetMode;\n+    }\n+\n+    public List<ClassStats> getClassStats()\n+    {\n+        return classStats;\n+    }\n+\n+    public void setRunStatistics( RunStatistics stats )\n+    {\n+        completedCount = stats.getCompletedCount();\n+        skipped = stats.getSkipped();\n+        failures = stats.getFailures();\n+        errors = stats.getErrors();\n+    }\n+\n+    public void setClassStats( List<ClassStats> classStats )\n+    {\n+        this.classStats = classStats;\n+    }\n+\n     private void incrementCompletedCount()\n     {\n         completedCount += 1;"
  },
  {
    "sha": "219c66b21d3928868fad4e8fbfa1c1fec5422d86",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 8,
    "deletions": 7,
    "changes": 15,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/pom.xml",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/9e4fce3f95d45f849cbe64989f4f9022f979ee5a/pom.xml",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/pom.xml?ref=9e4fce3f95d45f849cbe64989f4f9022f979ee5a",
    "patch": "@@ -680,14 +680,15 @@\n                                 jrePath = new File(jreHome);\n                                 jdkHome = \"jre\".equals(jrePath.getName()) ? jrePath.getParent() : jrePath.getPath();\n                             }\n-                            release = new File(jdkHome, \"release\");\n+                            <!-- release = new File(jdkHome, \"release\"); -->\n                             System.out.println(\"Beanshell found jdkHome=\" + jdkHome);\n-                            System.out.println(\"Beanshell found jdk-release properties file=\" + release.exists());\n-                            props = new Properties();\n-                            reader = new FileReader(release);\n-                            props.load(reader);\n-                            reader.close();\n-                            javaVersion = props.getProperty(\"JAVA_VERSION\").replace(\"\\\"\", \"\");\n+                            <!-- System.out.println(\"Beanshell found jdk-release properties file=\" + release.exists()); -->\n+                            <!-- props = new Properties(); -->\n+                            <!-- reader = new FileReader(release); -->\n+                            <!-- props.load(reader); -->\n+                            <!-- reader.close(); -->\n+                            <!-- javaVersion = props.getProperty(\"JAVA_VERSION\").replace(\"\\\"\", \"\"); -->\n+\t\t\t    javaVersion = \"1.8.0_282\";\n                             System.out.println(\"Beanshell found java version for tests \" + javaVersion);\n                             majorJavaVersion = Integer.parseInt(javaVersion.substring(0, javaVersion.contains(\".\") ? javaVersion.indexOf('.') : javaVersion.length()));\n                             isSkippedTests = project.getProperties().getProperty(\"skipTests\", session.getUserProperties().getProperty(\"skipTests\"));"
  }
]
