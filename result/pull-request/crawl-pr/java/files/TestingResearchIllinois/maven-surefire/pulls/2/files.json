[
  {
    "sha": "57674b080c5aa9ce49b0186de2780b4cb72fbcc8",
    "filename": "maven-failsafe-plugin/src/main/java/org/apache/maven/plugin/failsafe/IntegrationTestMojo.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-failsafe-plugin/src/main/java/org/apache/maven/plugin/failsafe/IntegrationTestMojo.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-failsafe-plugin/src/main/java/org/apache/maven/plugin/failsafe/IntegrationTestMojo.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-failsafe-plugin/src/main/java/org/apache/maven/plugin/failsafe/IntegrationTestMojo.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -310,6 +310,10 @@\n     @Parameter( property = \"failsafe.runOrder\", defaultValue = \"filesystem\" )\n     private String runOrder;\n \n+    //TODO docs\n+    @Parameter( property = \"failsafe.methodRunOrder\", defaultValue = \"default\" )\n+    private String methodRunOrder;\n+\n     /**\n      * Sets the random seed that will be used to order the tests if {@code failsafe.runOrder} is set to {@code random}.\n      * <br>\n@@ -907,6 +911,12 @@ public void setRunOrder( String runOrder )\n         this.runOrder = runOrder;\n     }\n \n+    @Override\n+    public String getMethodRunOrder()\n+    {\n+        return methodRunOrder;\n+    }\n+\n     @Override\n     public Long getRunOrderRandomSeed()\n     {"
  },
  {
    "sha": "893b92a90bcb1b3fec61759693d5237cb3a28a59",
    "filename": "maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/AbstractSurefireMojo.java",
    "status": "modified",
    "additions": 10,
    "deletions": 3,
    "changes": 13,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/AbstractSurefireMojo.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/AbstractSurefireMojo.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/AbstractSurefireMojo.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -86,6 +86,7 @@\n import org.apache.maven.surefire.api.testset.TestSetFailedException;\n import org.apache.maven.surefire.api.util.DefaultScanResult;\n import org.apache.maven.surefire.api.util.RunOrder;\n+import org.apache.maven.surefire.util.MethodRunOrder;\n import org.apache.maven.toolchain.DefaultToolchain;\n import org.apache.maven.toolchain.Toolchain;\n import org.apache.maven.toolchain.ToolchainManager;\n@@ -679,7 +680,7 @@\n      *\n      * @since 2.2\n      */\n-    @Parameter( property = \"trimStackTrace\", defaultValue = \"true\" )\n+    @Parameter( property = \"trimStackTrace\", defaultValue = \"false\" )\n     private boolean trimStackTrace;\n \n     /**\n@@ -865,6 +866,8 @@\n \n     public abstract void setRunOrder( String runOrder );\n \n+    public abstract String getMethodRunOrder();\n+\n     public abstract Long getRunOrderRandomSeed();\n \n     public abstract void setRunOrderRandomSeed( Long runOrderRandomSeed );\n@@ -1291,7 +1294,8 @@ private RunResult executeProvider( @Nonnull ProviderInfo provider, @Nonnull Defa\n         ClassLoaderConfiguration classLoaderConfiguration = getClassLoaderConfiguration();\n         provider.addProviderProperties();\n         RunOrderParameters runOrderParameters =\n-            new RunOrderParameters( getRunOrder(), getStatisticsFile( getConfigChecksum() ), getRunOrderRandomSeed() );\n+            new RunOrderParameters( getRunOrder(), getStatisticsFile( getConfigChecksum() ), getRunOrderRandomSeed(),\n+                                    getMethodRunOrder() );\n \n         if ( isNotForking() )\n         {\n@@ -2754,6 +2758,7 @@ private String getConfigChecksum()\n         checksum.add( getObjectFactory() );\n         checksum.add( getFailIfNoTests() );\n         checksum.add( getRunOrder() );\n+        checksum.add( getMethodRunOrder().toString() );\n         checksum.add( getDependenciesToScan() );\n         checksum.add( getForkedProcessExitTimeoutInSeconds() );\n         checksum.add( getRerunFailingTestsCount() );\n@@ -3068,7 +3073,9 @@ protected void warnIfIllegalFailOnFlakeCount() throws MojoFailureException\n \n     private void printDefaultSeedIfNecessary()\n     {\n-        if ( getRunOrderRandomSeed() == null && getRunOrder().equals( RunOrder.RANDOM.name() ) )\n+        if ( getRunOrderRandomSeed() == null\n+             && ( getRunOrder().equals( RunOrder.RANDOM.name() )\n+                  || getMethodRunOrder().equals( MethodRunOrder.RANDOM.name() ) ) )\n         {\n             setRunOrderRandomSeed( System.nanoTime() );\n             getConsoleLogger().info("
  },
  {
    "sha": "174b4bd59ed5a83f3e2da487d018e030dd594543",
    "filename": "maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/booterclient/BooterSerializer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/booterclient/BooterSerializer.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/booterclient/BooterSerializer.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/booterclient/BooterSerializer.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -54,6 +54,7 @@\n import static org.apache.maven.surefire.booter.BooterConstants.INCLUDES_PROPERTY_PREFIX;\n import static org.apache.maven.surefire.booter.BooterConstants.ISTRIMSTACKTRACE;\n import static org.apache.maven.surefire.booter.BooterConstants.MAIN_CLI_OPTIONS;\n+import static org.apache.maven.surefire.booter.BooterConstants.METHOD_RUN_ORDER;\n import static org.apache.maven.surefire.booter.BooterConstants.PLUGIN_PID;\n import static org.apache.maven.surefire.booter.BooterConstants.PROCESS_CHECKER;\n import static org.apache.maven.surefire.booter.BooterConstants.PROVIDER_CONFIGURATION;\n@@ -163,6 +164,7 @@ File serialize( KeyValueSource sourceProperties, ProviderConfiguration providerC\n         {\n             properties.setProperty( RUN_ORDER, RunOrder.asString( runOrderParameters.getRunOrder() ) );\n             properties.setProperty( RUN_STATISTICS_FILE, runOrderParameters.getRunStatisticsFile() );\n+            properties.setProperty( METHOD_RUN_ORDER, runOrderParameters.getMethodRunOrder().toString() );\n             properties.setProperty( RUN_ORDER_RANDOM_SEED, runOrderParameters.getRunOrderRandomSeed() );\n         }\n "
  },
  {
    "sha": "a1be9607c66d4739c00c00b7a8b9932d5c645135",
    "filename": "maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/AbstractSurefireMojoJava7PlusTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/AbstractSurefireMojoJava7PlusTest.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/AbstractSurefireMojoJava7PlusTest.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/AbstractSurefireMojoJava7PlusTest.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -839,6 +839,12 @@ public void setRunOrder( String runOrder )\n \n         }\n \n+        @Override\n+        public String getMethodRunOrder()\n+        {\n+            return null;\n+        };\n+\n         @Override\n         public Long getRunOrderRandomSeed()\n         {"
  },
  {
    "sha": "7b3c3206c04eb946c8266843365bf3a409f959f8",
    "filename": "maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/AbstractSurefireMojoTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/AbstractSurefireMojoTest.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/AbstractSurefireMojoTest.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/AbstractSurefireMojoTest.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -2382,6 +2382,12 @@ public void setRunOrder( String runOrder )\n \n         }\n \n+        @Override\n+        public String getMethodRunOrder()\n+        {\n+            return null;\n+        };\n+\n         @Override\n         public Long getRunOrderRandomSeed()\n         {"
  },
  {
    "sha": "3f630ba3ab373641ddae41cfc03829379a3d924b",
    "filename": "maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/MojoMocklessTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/MojoMocklessTest.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/MojoMocklessTest.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/MojoMocklessTest.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -709,6 +709,12 @@ public void setRunOrder( String runOrder )\n \n         }\n \n+        @Override\n+        public String getMethodRunOrder()\n+        {\n+            return null;\n+        };\n+\n         @Override\n         public Long getRunOrderRandomSeed()\n         {"
  },
  {
    "sha": "d0b92452dfc7c715b6c9793c0e0197ee5a425aa5",
    "filename": "maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/booterclient/BooterDeserializerProviderConfigurationTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/booterclient/BooterDeserializerProviderConfigurationTest.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/booterclient/BooterDeserializerProviderConfigurationTest.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/booterclient/BooterDeserializerProviderConfigurationTest.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -39,6 +39,7 @@\n import org.apache.maven.surefire.api.testset.TestListResolver;\n import org.apache.maven.surefire.api.testset.TestRequest;\n import org.apache.maven.surefire.api.util.RunOrder;\n+import org.apache.maven.surefire.util.MethodRunOrder;\n import org.junit.After;\n import org.junit.Before;\n \n@@ -276,7 +277,8 @@ private ProviderConfiguration getTestProviderConfiguration( DirectoryScannerPara\n             new TestRequest( getSuiteXmlFileStrings(), getTestSourceDirectory(),\n                              new TestListResolver( USER_REQUESTED_TEST + \"#aUserRequestedTestMethod\" ),\n                     RERUN_FAILING_TEST_COUNT );\n-        RunOrderParameters runOrderParameters = new RunOrderParameters( RunOrder.DEFAULT, null );\n+        RunOrderParameters runOrderParameters = new RunOrderParameters( RunOrder.DEFAULT, null, null,\n+            MethodRunOrder.DEFAULT );\n         return new ProviderConfiguration( directoryScannerParameters, runOrderParameters, true, reporterConfiguration,\n                 new TestArtifactInfo( \"5.0\", \"ABC\" ), testSuiteDefinition, new HashMap<String, String>(), TEST_TYPED,\n                 readTestsFromInStream, cli, 0, Shutdown.DEFAULT, 0 );"
  },
  {
    "sha": "4fb64b54c65d570ccf1221117664e4994d73520d",
    "filename": "maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/booterclient/BooterDeserializerStartupConfigurationTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/booterclient/BooterDeserializerStartupConfigurationTest.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/booterclient/BooterDeserializerStartupConfigurationTest.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-common/src/test/java/org/apache/maven/plugin/surefire/booterclient/BooterDeserializerStartupConfigurationTest.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -38,6 +38,7 @@\n import org.apache.maven.surefire.api.testset.TestListResolver;\n import org.apache.maven.surefire.api.testset.TestRequest;\n import org.apache.maven.surefire.api.util.RunOrder;\n+import org.apache.maven.surefire.util.MethodRunOrder;\n import org.junit.After;\n import org.junit.Before;\n \n@@ -197,7 +198,8 @@ private ProviderConfiguration getProviderConfiguration()\n             new TestRequest( Arrays.asList( getSuiteXmlFileStrings() ), getTestSourceDirectory(),\n                              new TestListResolver( \"aUserRequestedTest#aUserRequestedTestMethod\" ) );\n \n-        RunOrderParameters runOrderParameters = new RunOrderParameters( RunOrder.DEFAULT, null );\n+        RunOrderParameters runOrderParameters = new RunOrderParameters( RunOrder.DEFAULT, null, null,\n+            MethodRunOrder.DEFAULT );\n         return new ProviderConfiguration( directoryScannerParameters, runOrderParameters, true, reporterConfiguration,\n                 new TestArtifactInfo( \"5.0\", \"ABC\" ), testSuiteDefinition, new HashMap<String, String>(),\n                 BooterDeserializerProviderConfigurationTest.TEST_TYPED, true, cli, 0, Shutdown.DEFAULT, 0 );"
  },
  {
    "sha": "5e547d7b252ed8480fdfe0b813d090edefe729d3",
    "filename": "maven-surefire-plugin/src/main/java/org/apache/maven/plugin/surefire/SurefirePlugin.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-plugin/src/main/java/org/apache/maven/plugin/surefire/SurefirePlugin.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/maven-surefire-plugin/src/main/java/org/apache/maven/plugin/surefire/SurefirePlugin.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/maven-surefire-plugin/src/main/java/org/apache/maven/plugin/surefire/SurefirePlugin.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -20,6 +20,9 @@\n  */\n \n import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n@@ -302,6 +305,10 @@\n     @Parameter( property = \"surefire.runOrder\", defaultValue = \"filesystem\" )\n     private String runOrder;\n \n+    //TODO docs\n+    @Parameter( property = \"surefire.methodRunOrder\", defaultValue = \"default\" )\n+    private String methodRunOrder;\n+\n     /**\n      * Sets the random seed that will be used to order the tests if {@code surefire.runOrder} is set to {@code random}.\n      * <br>\n@@ -629,6 +636,24 @@ public void setReportsDirectory( File reportsDirectory )\n     @Override\n     public String getTest()\n     {\n+        File f = new File( test );\n+        if ( f.exists() && !f.isDirectory ( ) )\n+        {\n+            try\n+            {\n+                List<String> l = Files.readAllLines( f.toPath(), Charset.defaultCharset( ) );\n+                StringBuilder sb = new StringBuilder( );\n+                for ( String s : l )\n+                {\n+                    sb.append( s + \",\" );\n+                }\n+                String s = sb.toString( );\n+                return s.substring( 0 , s.length( ) - 1 );\n+            }\n+            catch ( IOException e )\n+            {\n+            }\n+        }\n         return test;\n     }\n \n@@ -832,6 +857,13 @@ public void setRunOrder( String runOrder )\n         this.runOrder = runOrder;\n     }\n \n+\n+    @Override\n+    public String getMethodRunOrder()\n+    {\n+        return methodRunOrder;\n+    }\n+\n     @Override\n     public Long getRunOrderRandomSeed()\n     {"
  },
  {
    "sha": "a5ae1cb5bddfb18f7d45491c0d34b0f72fc70cd9",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/pom.xml",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/pom.xml",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/pom.xml?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -502,7 +502,7 @@\n         <plugin>\n           <groupId>org.codehaus.mojo</groupId>\n           <artifactId>animal-sniffer-maven-plugin</artifactId>\n-          <version>1.17</version>\n+          <version>1.18</version>\n         </plugin>\n         <plugin>\n           <artifactId>maven-surefire-plugin</artifactId>"
  },
  {
    "sha": "74138c77f7c5cc283f1060c13abd8509c1f9e928",
    "filename": "surefire-api/src/main/java/org/apache/maven/surefire/api/testset/RunOrderParameters.java",
    "status": "modified",
    "additions": 41,
    "deletions": 4,
    "changes": 45,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-api/src/main/java/org/apache/maven/surefire/api/testset/RunOrderParameters.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-api/src/main/java/org/apache/maven/surefire/api/testset/RunOrderParameters.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-api/src/main/java/org/apache/maven/surefire/api/testset/RunOrderParameters.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -21,6 +21,7 @@\n \n import java.io.File;\n import org.apache.maven.surefire.api.util.RunOrder;\n+import org.apache.maven.surefire.util.MethodRunOrder;\n \n /**\n  * @author Kristian Rosenvold\n@@ -31,39 +32,70 @@\n \n     private File runStatisticsFile;\n \n+    private final MethodRunOrder methodRunOrder;\n+\n     private Long runOrderRandomSeed;\n \n-    public RunOrderParameters( RunOrder[] runOrder, File runStatisticsFile )\n+    public RunOrderParameters( RunOrder[] runOrder, File runStatisticsFile, MethodRunOrder methodRunOrder )\n     {\n         this.runOrder = runOrder;\n         this.runStatisticsFile = runStatisticsFile;\n+        this.methodRunOrder = methodRunOrder;\n         this.runOrderRandomSeed = null;\n     }\n \n-    public RunOrderParameters( String runOrder, File runStatisticsFile )\n+    public RunOrderParameters( RunOrder[] runOrder, File runStatisticsFile, Long runOrderRandomSeed,\n+                               MethodRunOrder methodRunOrder )\n+    {\n+        this.runOrder = runOrder;\n+        this.runStatisticsFile = runStatisticsFile;\n+        this.methodRunOrder = methodRunOrder;\n+        this.runOrderRandomSeed = runOrderRandomSeed;\n+    }\n+\n+    public RunOrderParameters( String runOrder, File runStatisticsFile, Long runOrderRandomSeed, String methodRunOrder )\n     {\n         this.runOrder = runOrder == null ? RunOrder.DEFAULT : RunOrder.valueOfMulti( runOrder );\n         this.runStatisticsFile = runStatisticsFile;\n-        this.runOrderRandomSeed = null;\n+        this.methodRunOrder = MethodRunOrder.valueOf( methodRunOrder );\n+        this.runOrderRandomSeed = runOrderRandomSeed;\n     }\n \n     public RunOrderParameters( RunOrder[] runOrder, File runStatisticsFile, Long runOrderRandomSeed )\n     {\n         this.runOrder = runOrder;\n         this.runStatisticsFile = runStatisticsFile;\n         this.runOrderRandomSeed = runOrderRandomSeed;\n+        this.methodRunOrder = MethodRunOrder.DEFAULT;\n     }\n \n     public RunOrderParameters( String runOrder, File runStatisticsFile, Long runOrderRandomSeed )\n     {\n         this.runOrder = runOrder == null ? RunOrder.DEFAULT : RunOrder.valueOfMulti( runOrder );\n         this.runStatisticsFile = runStatisticsFile;\n         this.runOrderRandomSeed = runOrderRandomSeed;\n+        this.methodRunOrder = MethodRunOrder.DEFAULT;\n+    }\n+\n+    public RunOrderParameters( RunOrder[] runOrder, File runStatisticsFile )\n+    {\n+        this.runOrder = runOrder;\n+        this.runStatisticsFile = runStatisticsFile;\n+        this.runOrderRandomSeed = null;\n+        this.methodRunOrder = MethodRunOrder.DEFAULT;\n+    }\n+\n+    public RunOrderParameters( String runOrder, File runStatisticsFile )\n+    {\n+        this.runOrder = runOrder == null ? RunOrder.DEFAULT : RunOrder.valueOfMulti( runOrder );\n+        this.runStatisticsFile = runStatisticsFile;\n+        this.runOrderRandomSeed = null;\n+        this.methodRunOrder = MethodRunOrder.DEFAULT;\n     }\n \n     public static RunOrderParameters alphabetical()\n     {\n-        return new RunOrderParameters( new RunOrder[]{ RunOrder.ALPHABETICAL }, null );\n+        return new RunOrderParameters( new RunOrder[]{ RunOrder.ALPHABETICAL }, null, null, MethodRunOrder.DEFAULT );\n     }\n \n     public RunOrder[] getRunOrder()\n@@ -86,4 +118,9 @@ public File getRunStatisticsFile()\n         return runStatisticsFile;\n     }\n \n+    public MethodRunOrder getMethodRunOrder()\n+    {\n+        return methodRunOrder;\n+    }\n+\n }"
  },
  {
    "sha": "c2b14ad96ede6faa848900dd7aa72058acfb32c5",
    "filename": "surefire-api/src/main/java/org/apache/maven/surefire/api/util/DefaultRunOrderCalculator.java",
    "status": "modified",
    "additions": 205,
    "deletions": 1,
    "changes": 206,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-api/src/main/java/org/apache/maven/surefire/api/util/DefaultRunOrderCalculator.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-api/src/main/java/org/apache/maven/surefire/api/util/DefaultRunOrderCalculator.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-api/src/main/java/org/apache/maven/surefire/api/util/DefaultRunOrderCalculator.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -21,12 +21,20 @@\n \n import org.apache.maven.surefire.api.runorder.RunEntryStatisticsMap;\n import org.apache.maven.surefire.api.testset.RunOrderParameters;\n+import org.apache.maven.surefire.util.MethodRunOrder;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Random;\n \n@@ -78,9 +86,159 @@ public TestsToRun orderTestClasses( TestsToRun scannedClasses )\n         return new TestsToRun( new LinkedHashSet<>( result ) );\n     }\n \n+    @Override\n+    public Comparator<String> comparatorForTestMethods()\n+    {\n+        MethodRunOrder order = runOrderParameters.getMethodRunOrder();\n+        if ( MethodRunOrder.DEFAULT.equals( order ) )\n+        {\n+            return null;\n+        }\n+        else if ( MethodRunOrder.ALPHABETICAL.equals( order ) )\n+        {\n+            return new Comparator<String>()\n+            {\n+                @Override\n+                public int compare( String o1, String o2 )\n+                {\n+                    return o1.compareTo( o2 );\n+                }\n+            };\n+        }\n+        else if ( MethodRunOrder.REVERSE_ALPHABETICAL.equals( order ) )\n+        {\n+            return new Comparator<String>()\n+            {\n+                @Override\n+                public int compare( String o1, String o2 )\n+                {\n+                    return o2.compareTo( o1 );\n+                }\n+            };\n+        }\n+        else if ( MethodRunOrder.RANDOM.equals( order ) )\n+        {\n+            return new Comparator<String>()\n+            {\n+                HashMap<String, Integer> randomVals = new HashMap<>();\n+\n+                private int getRandom( String obj )\n+                {\n+                    if ( !randomVals.containsKey( obj ) )\n+                    {\n+                        randomVals.put( obj, random.nextInt() );\n+                    }\n+                    return randomVals.get( obj );\n+                }\n+\n+                @Override\n+                public int compare( String o1, String o2 )\n+                {\n+                    int i1 = getRandom( o1 );\n+                    int i2 = getRandom( o2 );\n+                    return ( i1 > i2 ? 1 : -1 );\n+                }\n+            };\n+        }\n+        else if ( MethodRunOrder.FLAKY_FINDING.equals( order ) )\n+        {\n+            String orderParam = parseFlakyTestOrder( System.getProperty( \"test\" ) );\n+            if ( orderParam == null )\n+            {\n+                throw new IllegalStateException( \"Please set system property -Dtest to use fixed order\" );\n+            }\n+            final LinkedHashMap<String, List<String>> orders = new LinkedHashMap<>();\n+            for ( String s : orderParam.split( \",\" ) )\n+            {\n+                String[] nameSplit = s.split( \"#\" );\n+                String className = nameSplit[0];\n+                String testName = nameSplit[1];\n+                String parenName = testName + \"(\" + className + \")\";\n+                addTestToOrders( className, orders, parenName );\n+            }\n+            return new Comparator<String>()\n+            {\n+\n+                @Override\n+                public int compare( String o1, String o2 )\n+                {\n+                    String className1 = o1;\n+                    if ( o1.contains( \"(\" ) )\n+                    {\n+                        String[] nameSplit1 = o1.split( \"\\\\(\" );\n+                        className1 = nameSplit1[1].substring( 0, nameSplit1[1].length() - 1 );\n+                        addTestToOrders( className1, orders, o1 );\n+                    }\n+\n+                    String className2 = o2;\n+                    if ( o2.contains( \"(\" ) )\n+                    {\n+                        String[] nameSplit2 = o2.split( \"\\\\(\" );\n+                        className2 = nameSplit2[1].substring( 0, nameSplit2[1].length() - 1 );\n+                        addTestToOrders( className2, orders, o2 );\n+                    }\n+\n+                    if ( ! className2.equals( className1 ) )\n+                    {\n+                        List<String> classOrders = new ArrayList<String>( orders.keySet() );\n+                        if ( classOrders.indexOf( className1 ) < classOrders.indexOf( className2 ) )\n+                        {\n+                            return -1;\n+                        }\n+                        else\n+                        {\n+                            return 1;\n+                        }\n+                    }\n+                    else\n+                    {\n+                        List<String> testOrders = orders.get( className2 );\n+                        if ( testOrders.indexOf( o1 ) < testOrders.indexOf( o2 ) )\n+                        {\n+                            return -1;\n+                        }\n+                        else\n+                        {\n+                            return 1;\n+                        }\n+                    }\n+                }\n+            };\n+        }\n+        else\n+        {\n+            throw new UnsupportedOperationException( \"Unsupported method run order: \" + order.name() );\n+        }\n+    }\n+\n+    public void addTestToOrders( String className, LinkedHashMap<String, List<String>> orders, String parenName )\n+    {\n+        List<String> classOrders = orders.get( className );\n+        if ( classOrders == null )\n+        {\n+            classOrders = new ArrayList<String>();\n+        }\n+        if ( ! classOrders.contains( parenName ) )\n+        {\n+            classOrders.add( parenName );\n+        }\n+        if ( ! orders.containsKey( className ) )\n+        {\n+            orders.put( className, classOrders );\n+        }\n+    }\n+\n     private void orderTestClasses( List<Class<?>> testClasses, RunOrder runOrder )\n     {\n-        if ( RunOrder.RANDOM.equals( runOrder ) )\n+        if ( System.getProperty( \"surefire.methodRunOrder\" ) != null\n+             && System.getProperty( \"surefire.methodRunOrder\" ).toLowerCase().equals( \"fixed\" ) )\n+        {\n+            List<Class<?>> sorted\n+                = sortClassesBySpecifiedOrder( testClasses, parseFlakyTestOrder( System.getProperty( \"test\" ) ) );\n+            testClasses.clear();\n+            testClasses.addAll( sorted );\n+        }\n+        else if ( RunOrder.RANDOM.equals( runOrder ) )\n         {\n             Collections.shuffle( testClasses, random );\n         }\n@@ -106,6 +264,52 @@ else if ( sortOrder != null )\n         }\n     }\n \n+    private String parseFlakyTestOrder( String s )\n+    {\n+        if ( s != null && s != \"\" )\n+        {\n+            File f = new File( s );\n+            if ( f.exists() && !f.isDirectory ( ) )\n+            {\n+                try\n+                {\n+                    List<String> l = Files.readAllLines( f.toPath(), Charset.defaultCharset( ) );\n+                    StringBuilder sb = new StringBuilder( );\n+                    for ( String sd : l )\n+                    {\n+                        sb.append( sd + \",\" );\n+                    }\n+                    String sd = sb.toString( );\n+                    return sd.substring( 0 , sd.length( ) - 1 );\n+                }\n+                catch ( IOException e )\n+                {\n+                }\n+            }\n+        }\n+        return s;\n+    }\n+\n+    private List<Class<?>> sortClassesBySpecifiedOrder( List<Class<?>> testClasses, String flakyTestOrder )\n+    {\n+        HashMap<String, Class<?>> classes = new HashMap<>();\n+        for ( Class<?> each : testClasses )\n+        {\n+            classes.put( each.getName(), each );\n+        }\n+        LinkedList<Class<?>> ret = new LinkedList<>();\n+        for ( String s : flakyTestOrder.split( \",\" ) )\n+        {\n+            String testClass = s.substring( 0, s.indexOf( '#' ) );\n+            Class<?> c = classes.remove( testClass );\n+            if ( c != null )\n+            {\n+                ret.add( c );\n+            }\n+        }\n+        return ret;\n+    }\n+\n     private Comparator<Class> getSortOrderComparator( RunOrder runOrder )\n     {\n         if ( RunOrder.ALPHABETICAL.equals( runOrder ) )"
  },
  {
    "sha": "2c58002089bb8a19c64c3b8d4243028bdc791076",
    "filename": "surefire-api/src/main/java/org/apache/maven/surefire/api/util/RunOrderCalculator.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-api/src/main/java/org/apache/maven/surefire/api/util/RunOrderCalculator.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-api/src/main/java/org/apache/maven/surefire/api/util/RunOrderCalculator.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-api/src/main/java/org/apache/maven/surefire/api/util/RunOrderCalculator.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -19,10 +19,14 @@\n  * under the License.\n  */\n \n+import java.util.Comparator;\n+\n /**\n  * @author Kristian Rosenvold\n  */\n public interface RunOrderCalculator\n {\n     TestsToRun orderTestClasses( TestsToRun scannedClasses );\n+\n+    Comparator<String> comparatorForTestMethods();\n }"
  },
  {
    "sha": "d41da320fbb8704acd0a1c446e3ecaef63caf5fa",
    "filename": "surefire-api/src/main/java/org/apache/maven/surefire/util/MethodRunOrder.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-api/src/main/java/org/apache/maven/surefire/util/MethodRunOrder.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-api/src/main/java/org/apache/maven/surefire/util/MethodRunOrder.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-api/src/main/java/org/apache/maven/surefire/util/MethodRunOrder.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -0,0 +1,100 @@\n+package org.apache.maven.surefire.util;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * TODO docs\n+ */\n+public class MethodRunOrder\n+{\n+\n+    public static final MethodRunOrder ALPHABETICAL = new MethodRunOrder( \"alphabetical\" );\n+    public static final MethodRunOrder REVERSE_ALPHABETICAL = new MethodRunOrder( \"reversealphabetical\" );\n+    public static final MethodRunOrder RANDOM = new MethodRunOrder( \"random\" );\n+    public static final MethodRunOrder FLAKY_FINDING = new MethodRunOrder( \"fixed\" );\n+    public static final MethodRunOrder DEFAULT = new MethodRunOrder( \"default\" );\n+\n+    private final String name;\n+\n+    MethodRunOrder( String name )\n+    {\n+        this.name = name;\n+    }\n+\n+    private static MethodRunOrder[] values()\n+    {\n+        return new MethodRunOrder[] {ALPHABETICAL, REVERSE_ALPHABETICAL, RANDOM, FLAKY_FINDING, DEFAULT};\n+    }\n+\n+    public boolean matches( String anotherName )\n+    {\n+        return name.equalsIgnoreCase( anotherName );\n+    }\n+\n+    public static MethodRunOrder valueOf( String name )\n+    {\n+        if ( name == null )\n+        {\n+            return null;\n+        }\n+        else\n+        {\n+            for ( MethodRunOrder each : values() )\n+            {\n+                if ( each.matches( name ) )\n+                {\n+                    return each;\n+                }\n+            }\n+        }\n+        String errorMessage = createMessageForMissingRunOrder( name );\n+        throw new IllegalArgumentException( errorMessage );\n+\n+    }\n+\n+    private static String createMessageForMissingRunOrder( String name )\n+    {\n+        MethodRunOrder[] methodRunOrders = values();\n+        StringBuilder message = new StringBuilder( \"There's no MethodRunOrder with the name \" );\n+        message.append( name );\n+        message.append( \". Please use one of the following RunOrders: \" );\n+        for ( int i = 0; i < methodRunOrders.length; i++ )\n+        {\n+            if ( i != 0 )\n+            {\n+                message.append( \", \" );\n+            }\n+            message.append( methodRunOrders[i] );\n+        }\n+        message.append( '.' );\n+        return message.toString();\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return name;\n+    }\n+\n+    public String name()\n+    {\n+        return name;\n+    }\n+}"
  },
  {
    "sha": "ecbfa87e3ca008a723bf317ded3ba03c6d123958",
    "filename": "surefire-booter/src/main/java/org/apache/maven/surefire/booter/BooterConstants.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-booter/src/main/java/org/apache/maven/surefire/booter/BooterConstants.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-booter/src/main/java/org/apache/maven/surefire/booter/BooterConstants.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-booter/src/main/java/org/apache/maven/surefire/booter/BooterConstants.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -47,6 +47,7 @@ private BooterConstants()\n     public static final String RUN_ORDER = \"runOrder\";\n     public static final String RUN_ORDER_RANDOM_SEED = \"runOrderRandomSeed\";\n     public static final String RUN_STATISTICS_FILE = \"runStatisticsFile\";\n+    public static final String METHOD_RUN_ORDER = \"methodRunOrder\";\n     public static final String TEST_SUITE_XML_FILES = \"testSuiteXmlFiles\";\n     public static final String PROVIDER_CONFIGURATION = \"providerConfiguration\";\n     public static final String FORKTESTSET = \"forkTestSet\";"
  },
  {
    "sha": "7689b9589d0806032be477d397d862fe0b053843",
    "filename": "surefire-booter/src/main/java/org/apache/maven/surefire/booter/BooterDeserializer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-booter/src/main/java/org/apache/maven/surefire/booter/BooterDeserializer.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-booter/src/main/java/org/apache/maven/surefire/booter/BooterDeserializer.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-booter/src/main/java/org/apache/maven/surefire/booter/BooterDeserializer.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -109,6 +109,7 @@ public ProviderConfiguration deserialize()\n         final String runOrder = properties.getProperty( RUN_ORDER );\n         final Long runOrderRandomSeed = properties.getLongProperty( RUN_ORDER_RANDOM_SEED );\n         final String runStatisticsFile = properties.getProperty( RUN_STATISTICS_FILE );\n+        final String methodRunOrder = properties.getProperty( METHOD_RUN_ORDER );\n \n         final int rerunFailingTestsCount = properties.getIntProperty( RERUN_FAILING_TESTS_COUNT );\n \n@@ -118,7 +119,7 @@ public ProviderConfiguration deserialize()\n \n         RunOrderParameters runOrderParameters\n                 = new RunOrderParameters( runOrder, runStatisticsFile == null ? null : new File( runStatisticsFile ),\n-                                          runOrderRandomSeed );\n+                                          runOrderRandomSeed, methodRunOrder );\n \n         TestArtifactInfo testNg = new TestArtifactInfo( testNgVersion, testArtifactClassifier );\n         TestRequest testSuiteDefinition ="
  },
  {
    "sha": "ddd727780635586e08fb647edcfebe71afefb8e4",
    "filename": "surefire-booter/src/main/java/org/apache/maven/surefire/booter/SurefireReflector.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-booter/src/main/java/org/apache/maven/surefire/booter/SurefireReflector.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-booter/src/main/java/org/apache/maven/surefire/booter/SurefireReflector.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-booter/src/main/java/org/apache/maven/surefire/booter/SurefireReflector.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -182,7 +182,8 @@ private Object createRunOrderParameters( RunOrderParameters runOrderParameters )\n         Constructor<?> constructor = getConstructor( this.runOrderParameters, arguments );\n         File runStatisticsFile = runOrderParameters.getRunStatisticsFile();\n         return newInstance( constructor, RunOrder.asString( runOrderParameters.getRunOrder() ), runStatisticsFile,\n-                            runOrderParameters.getRunOrderRandomSeed() );\n+                            runOrderParameters.getRunOrderRandomSeed(),\n+                            runOrderParameters.getMethodRunOrder().toString() );\n     }\n \n     private Object createTestArtifactInfo( TestArtifactInfo testArtifactInfo )"
  },
  {
    "sha": "e301a6fb9d0d4bc7e6ce23cc3ffe5b2ac8e0ed61",
    "filename": "surefire-booter/src/test/java/org/apache/maven/surefire/booter/SurefireReflectorTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-booter/src/test/java/org/apache/maven/surefire/booter/SurefireReflectorTest.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-booter/src/test/java/org/apache/maven/surefire/booter/SurefireReflectorTest.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-booter/src/test/java/org/apache/maven/surefire/booter/SurefireReflectorTest.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -33,6 +33,7 @@\n import org.apache.maven.surefire.api.testset.TestListResolver;\n import org.apache.maven.surefire.api.testset.TestRequest;\n import org.apache.maven.surefire.api.util.RunOrder;\n+import org.apache.maven.surefire.util.MethodRunOrder;\n \n import java.io.File;\n import java.lang.reflect.Method;\n@@ -114,7 +115,8 @@ public void testRunOrderParameters()\n         SurefireReflector surefireReflector = getReflector();\n         Object foo = getFoo();\n \n-        RunOrderParameters runOrderParameters = new RunOrderParameters( RunOrder.DEFAULT, new File( \".\" ) );\n+        RunOrderParameters runOrderParameters = new RunOrderParameters( RunOrder.DEFAULT, new File( \".\" ),\n+            0L, MethodRunOrder.DEFAULT );\n         surefireReflector.setRunOrderParameters( foo, runOrderParameters );\n         assertTrue( isCalled( foo ) );\n     }"
  },
  {
    "sha": "cd4862d95b2da646f1b2ea3c48a14c78efba29c4",
    "filename": "surefire-its/src/test/resources/surefire-818-ignored-tests-on-npe/pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-its/src/test/resources/surefire-818-ignored-tests-on-npe/pom.xml",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-its/src/test/resources/surefire-818-ignored-tests-on-npe/pom.xml",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-its/src/test/resources/surefire-818-ignored-tests-on-npe/pom.xml?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -31,6 +31,9 @@\n             <plugin>\n                 <artifactId>maven-surefire-plugin</artifactId>\n                 <version>${surefire.version}</version>\n+                <configuration>\n+                    <trimStackTrace>true</trimStackTrace>\n+                </configuration>\n             </plugin>\n         </plugins>\n     </build>"
  },
  {
    "sha": "7b345820f177c7351175dc003c9ac8415650453d",
    "filename": "surefire-providers/surefire-junit4/src/main/java/org/apache/maven/surefire/junit4/JUnit4Provider.java",
    "status": "modified",
    "additions": 18,
    "deletions": 3,
    "changes": 21,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-providers/surefire-junit4/src/main/java/org/apache/maven/surefire/junit4/JUnit4Provider.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-providers/surefire-junit4/src/main/java/org/apache/maven/surefire/junit4/JUnit4Provider.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-providers/surefire-junit4/src/main/java/org/apache/maven/surefire/junit4/JUnit4Provider.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -48,6 +48,7 @@\n import org.junit.runner.notification.StoppedByUserException;\n \n import java.util.Collection;\n+import java.util.Comparator;\n import java.util.Set;\n \n import static java.lang.reflect.Modifier.isAbstract;\n@@ -269,7 +270,8 @@ private void executeWithRerun( Class<?> clazz, Notifier notifier )\n             try\n             {\n                 notifier.asFailFast( isFailFast() );\n-                execute( clazz, notifier, hasMethodFilter ? createMethodFilter() : null );\n+                execute( clazz, notifier, hasMethodFilter ? createMethodFilter() : null,\n+                    runOrderCalculator.comparatorForTestMethods() );\n             }\n             finally\n             {\n@@ -286,7 +288,8 @@ private void executeWithRerun( Class<?> clazz, Notifier notifier )\n                     Set<Description> failures = generateFailingTestDescriptions( failureListener.getAllFailures() );\n                     failureListener.reset();\n                     Filter failureDescriptionFilter = createMatchAnyDescriptionFilter( failures );\n-                    execute( clazz, rerunNotifier, failureDescriptionFilter );\n+                    execute( clazz, rerunNotifier, failureDescriptionFilter,\n+                        runOrderCalculator.comparatorForTestMethods() );\n                 }\n             }\n         }\n@@ -348,12 +351,24 @@ private static boolean isJUnit4UpgradeCheck()\n         return System.getProperty( \"surefire.junit4.upgradecheck\" ) != null;\n     }\n \n-    private static void execute( Class<?> testClass, Notifier notifier, Filter filter )\n+    private static void execute( Class<?> testClass, Notifier notifier, Filter filter,\n+                                 final Comparator<String> runOrderComparator )\n     {\n         final int classModifiers = testClass.getModifiers();\n         if ( !isAbstract( classModifiers ) && !isInterface( classModifiers ) )\n         {\n             Request request = aClass( testClass );\n+            if ( runOrderComparator != null )\n+            {\n+                request = request.sortWith( new Comparator<Description>()\n+                {\n+                    @Override\n+                    public int compare( Description o1, Description o2 )\n+                    {\n+                        return runOrderComparator.compare( o1.toString(), o2.toString() );\n+                    }\n+                } );\n+            }\n             if ( filter != null )\n             {\n                 request = request.filterWith( filter );"
  },
  {
    "sha": "e842c712d048693082fc8391aacb5aa6991ade47",
    "filename": "surefire-providers/surefire-junit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreProvider.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-providers/surefire-junit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreProvider.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-providers/surefire-junit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreProvider.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-providers/surefire-junit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreProvider.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -145,7 +145,8 @@ public RunResult invoke( Object forkTestSet )\n \n         try\n         {\n-            JUnitCoreWrapper core = new JUnitCoreWrapper( notifier, jUnitCoreParameters, consoleStream );\n+            JUnitCoreWrapper core = new JUnitCoreWrapper( notifier, jUnitCoreParameters, consoleStream,\n+                runOrderCalculator );\n \n             if ( commandsReader != null )\n             {\n@@ -162,7 +163,8 @@ public RunResult invoke( Object forkTestSet )\n             {\n                 Notifier rerunNotifier = pureNotifier();\n                 notifier.copyListenersTo( rerunNotifier );\n-                JUnitCoreWrapper rerunCore = new JUnitCoreWrapper( rerunNotifier, jUnitCoreParameters, consoleStream );\n+                JUnitCoreWrapper rerunCore = new JUnitCoreWrapper( rerunNotifier, jUnitCoreParameters, consoleStream,\n+                    runOrderCalculator );\n                 for ( int i = 0; i < rerunFailingTestsCount && !testFailureListener.getAllFailures().isEmpty(); i++ )\n                 {\n                     Set<Description> failures = generateFailingTestDescriptions( testFailureListener.getAllFailures() );"
  },
  {
    "sha": "bf45ba5357409d6dfc1482ce0341aea49ecb4e80",
    "filename": "surefire-providers/surefire-junit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreWrapper.java",
    "status": "modified",
    "additions": 18,
    "deletions": 1,
    "changes": 19,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-providers/surefire-junit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreWrapper.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-providers/surefire-junit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreWrapper.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-providers/surefire-junit47/src/main/java/org/apache/maven/surefire/junitcore/JUnitCoreWrapper.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -24,6 +24,7 @@\n import org.apache.maven.surefire.junitcore.pc.ParallelComputerBuilder;\n import org.apache.maven.surefire.api.report.ConsoleStream;\n import org.apache.maven.surefire.api.testset.TestSetFailedException;\n+import org.apache.maven.surefire.api.util.RunOrderCalculator;\n import org.apache.maven.surefire.api.util.TestsToRun;\n import org.junit.Ignore;\n import org.junit.runner.Computer;\n@@ -36,6 +37,7 @@\n \n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Iterator;\n import java.util.Queue;\n \n@@ -55,12 +57,15 @@\n     private final Notifier notifier;\n     private final JUnitCoreParameters jUnitCoreParameters;\n     private final ConsoleStream consoleStream;\n+    private final RunOrderCalculator runOrderCalculator;\n \n-    JUnitCoreWrapper( Notifier notifier, JUnitCoreParameters jUnitCoreParameters, ConsoleStream consoleStream )\n+    JUnitCoreWrapper( Notifier notifier, JUnitCoreParameters jUnitCoreParameters, ConsoleStream consoleStream,\n+                      RunOrderCalculator runOrderCalculator )\n     {\n         this.notifier = notifier;\n         this.jUnitCoreParameters = jUnitCoreParameters;\n         this.consoleStream = consoleStream;\n+        this.runOrderCalculator = runOrderCalculator;\n     }\n \n     void execute( TestsToRun testsToRun, Filter filter )\n@@ -124,6 +129,18 @@ private void createRequestAndRun( Filter filter, Computer computer, JUnitCore ju\n         throws TestSetFailedException\n     {\n         Request req = classes( computer, classesToRun );\n+        final Comparator<String> testOrderComparator = runOrderCalculator.comparatorForTestMethods();\n+        if ( testOrderComparator != null )\n+        {\n+            req = req.sortWith( new Comparator<Description>()\n+            {\n+                @Override\n+                public int compare( Description o1, Description o2 )\n+                {\n+                    return testOrderComparator.compare( o1.toString(), o2.toString() );\n+                }\n+            } );\n+        }\n         if ( filter != null )\n         {\n             req = new FilteringRequest( req, filter );"
  },
  {
    "sha": "b5e677de7483f578216e6ba47ab0b4b689b79445",
    "filename": "surefire-providers/surefire-junit47/src/test/java/org/apache/maven/surefire/junitcore/Surefire746Test.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/TestingResearchIllinois/maven-surefire/blob/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-providers/surefire-junit47/src/test/java/org/apache/maven/surefire/junitcore/Surefire746Test.java",
    "raw_url": "https://github.com/TestingResearchIllinois/maven-surefire/raw/f29212d73f56aacf72a96bae29f7bd99f7eee478/surefire-providers/surefire-junit47/src/test/java/org/apache/maven/surefire/junitcore/Surefire746Test.java",
    "contents_url": "https://api.github.com/repos/TestingResearchIllinois/maven-surefire/contents/surefire-providers/surefire-junit47/src/test/java/org/apache/maven/surefire/junitcore/Surefire746Test.java?ref=f29212d73f56aacf72a96bae29f7bd99f7eee478",
    "patch": "@@ -53,7 +53,9 @@\n import org.apache.maven.surefire.api.report.ReporterFactory;\n import org.apache.maven.surefire.api.report.RunListener;\n import org.apache.maven.surefire.api.suite.RunResult;\n+import org.apache.maven.surefire.api.testset.RunOrderParameters;\n import org.apache.maven.surefire.api.testset.TestSetFailedException;\n+import org.apache.maven.surefire.api.util.DefaultRunOrderCalculator;\n import org.apache.maven.surefire.api.util.TestsToRun;\n \n import org.junit.Rule;\n@@ -137,7 +139,9 @@ public void surefireIsConfused_ByMultipleIgnore_OnClassLevel() throws Exception\n             exception.expect( TestSetFailedException.class );\n             JUnit4RunListener dummy = new JUnit4RunListener( new MockReporter() );\n             new JUnitCoreWrapper( new Notifier( dummy, 0 ), jUnitCoreParameters,\n-                    new DefaultDirectConsoleReporter( System.out ) ).execute( testsToRun, customRunListeners, null );\n+                    new DefaultDirectConsoleReporter( System.out ),\n+                    new DefaultRunOrderCalculator( RunOrderParameters.alphabetical(), 1 ) ).\n+                        execute( testsToRun, customRunListeners, null );\n         }\n         finally\n         {"
  }
]
