[
  {
    "sha": "12a3a295a2f6e30674bbf8fb03e658707f6d22a1",
    "filename": ".github/workflows/build-and-codecov.yml",
    "status": "removed",
    "additions": 0,
    "deletions": 22,
    "changes": 22,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/ae63f7275a53c86acde93148c279ba2089d5bad6/.github/workflows/build-and-codecov.yml",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/ae63f7275a53c86acde93148c279ba2089d5bad6/.github/workflows/build-and-codecov.yml",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/.github/workflows/build-and-codecov.yml?ref=ae63f7275a53c86acde93148c279ba2089d5bad6",
    "patch": "@@ -1,22 +0,0 @@\n-name: Build and Code Cov\n-\n-on: workflow_dispatch\n-\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-\n-    steps:\n-      - uses: actions/checkout@v2\n-\n-      - name: Set up JDK 1.8\n-        uses: actions/setup-java@v1\n-        with:\n-          java-version: 1.8\n-\n-      - name: Maven Verify\n-        run: mvn -B clean verify\n-      - name: Test Coverage\n-        uses: codecov/codecov-action@v1\n-        with:\n-          token: ${{ secrets.CODECOV_TOKEN }}"
  },
  {
    "sha": "1cff3aeca69e98c1aa55bac8502a016a3c7107bd",
    "filename": ".github/workflows/pipeline-azure-container-instance.yml",
    "status": "removed",
    "additions": 0,
    "deletions": 50,
    "changes": 50,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/ae63f7275a53c86acde93148c279ba2089d5bad6/.github/workflows/pipeline-azure-container-instance.yml",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/ae63f7275a53c86acde93148c279ba2089d5bad6/.github/workflows/pipeline-azure-container-instance.yml",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/.github/workflows/pipeline-azure-container-instance.yml?ref=ae63f7275a53c86acde93148c279ba2089d5bad6",
    "patch": "@@ -1,50 +0,0 @@\n-on: workflow_dispatch\n-name: Docker Image Azure Container Instance Deploy\n-\n-jobs:\n-  build-and-deploy:\n-    runs-on: ubuntu-latest\n-    steps:\n-      - name: Set up JDK\n-        uses: actions/setup-java@v1\n-        with:\n-          java-version: 1.8\n-\n-      - name: 'Checkout GitHub Action'\n-        uses: actions/checkout@master\n-\n-      - name: 'Login via Azure CLI'\n-        uses: azure/login@v1\n-        with:\n-          creds: ${{ secrets.AZURE_CREDENTIALS }}\n-\n-        ## to delete\n-      - name: Verify run id\n-        run: echo Run Id $GITHUB_RUN_ID\n-      - name: Output the branch name\n-        run: echo $(echo $GITHUB_REF | cut -d'/' -f 3)\n-        # && github.ref == 'refs/heads/master' not necessary\n-        ## commented block\n-\n-      - name: 'Build and push image'\n-        uses: azure/docker-login@v1\n-        with:\n-          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}\n-          username: ${{ secrets.REGISTRY_USERNAME }}\n-          password: ${{ secrets.REGISTRY_PASSWORD }}\n-      - run: |\n-          mvn -B package --file pom.xml\n-          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/app:${{ github.sha }}\n-          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/app:${{ github.sha }}\n-\n-      - name: 'Deploy to Azure Container Instances'\n-        uses: 'azure/aci-deploy@v1'\n-        with:\n-          resource-group: ${{ secrets.RESOURCE_GROUP }}\n-          dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}\n-          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/app:${{ github.sha }}\n-          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}\n-          registry-username: ${{ secrets.REGISTRY_USERNAME }}\n-          registry-password: ${{ secrets.REGISTRY_PASSWORD }}\n-          name: aci-app\n-          location: 'west europe'"
  },
  {
    "sha": "dffc49238b8b972c84ffb61577e7287b956b003e",
    "filename": ".github/workflows/pipeline-azure-webapp-docker.yml",
    "status": "modified",
    "additions": 6,
    "deletions": 21,
    "changes": 27,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/.github/workflows/pipeline-azure-webapp-docker.yml",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/.github/workflows/pipeline-azure-webapp-docker.yml",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/.github/workflows/pipeline-azure-webapp-docker.yml?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -8,24 +8,6 @@ on:\n \n jobs:\n \n-  codecov-tests:\n-    runs-on: ubuntu-latest\n-    steps:\n-      - uses: actions/checkout@v2\n-\n-      - name: Set up JDK\n-        uses: actions/setup-java@v1\n-        with:\n-          java-version: 1.8\n-\n-      - name: Maven Verify\n-        run: mvn -B clean verify\n-\n-      - name: Test Coverage\n-        uses: codecov/codecov-action@v1\n-        with:\n-          token: ${{ secrets.CODECOV_TOKEN }}\n-\n   sonarcloud:\n     runs-on: ubuntu-latest\n     steps:\n@@ -40,12 +22,15 @@ jobs:\n         env:\n           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n-        run: mvn -B verify sonar:sonar -Dsonar.projectKey=torbaAnton_CICD_test -Dsonar.organization=torbaanton -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.coverage.jacoco.xmlReportPaths=./target/site/jacoco/jacoco.xml\n+          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}\n+          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}\n+          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}\n+        run: mvn -B verify -Dspring-boot.run.jvmArguments=\"-Dspring.datasource.username=$SPRING_DATASOURCE_USERNAME -Dspring.datasource.password=$SPRING_DATASOURCE_PASSWORD -Dspring.datasource.url=$SPRING_DATASOURCE_URL\" sonar:sonar -Dsonar.projectKey=torbaAnton_CICD_test -Dsonar.organization=torbaanton -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.coverage.jacoco.xmlReportPaths=./target/site/jacoco/jacoco.xml\n \n   build-deploy:\n     if: github.event_name != 'pull_request'\n     runs-on: ubuntu-latest\n-    needs: [ sonarcloud, codecov-tests ]\n+    needs: [ sonarcloud ]\n     steps:\n       - uses: actions/checkout@v2\n \n@@ -72,7 +57,7 @@ jobs:\n \n       - uses: azure/webapps-deploy@v2\n         with:\n-          app-name: 'cicd-github-actions-docker'\n+          app-name: 'spring-boot-docker-webapp'\n           images: '${{ secrets.REGISTRY_LOGIN_SERVER }}/app:${{ github.sha }}'\n \n       - name: Azure logout"
  },
  {
    "sha": "199121d0e872f29eacfc7f74f9b5208fc1d4f828",
    "filename": ".github/workflows/sonar-cloud.yml",
    "status": "removed",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/ae63f7275a53c86acde93148c279ba2089d5bad6/.github/workflows/sonar-cloud.yml",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/ae63f7275a53c86acde93148c279ba2089d5bad6/.github/workflows/sonar-cloud.yml",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/.github/workflows/sonar-cloud.yml?ref=ae63f7275a53c86acde93148c279ba2089d5bad6",
    "patch": "@@ -1,18 +0,0 @@\n-name: SonarCloud\n-\n-on: workflow_dispatch\n-\n-jobs:\n-  sonarcloud:\n-    runs-on: ubuntu-latest\n-    steps:\n-      - uses: actions/checkout@v1\n-      - name: Set up JDK\n-        uses: actions/setup-java@v1\n-        with:\n-          java-version: 1.11\n-      - name: Analyze with SonarCloud\n-        env:\n-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n-          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n-        run: mvn -B verify sonar:sonar -Dsonar.projectKey=torbaAnton_CICD_test -Dsonar.organization=torbaanton -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.coverage.jacoco.xmlReportPaths=./target/site/jacoco/jacoco.xml"
  },
  {
    "sha": "fc30ba5c0ca64ea5a17013f8f76ecc3d86269515",
    "filename": "Dockerfile",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/Dockerfile",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/Dockerfile",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/Dockerfile?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -4,4 +4,4 @@ EXPOSE 8080\n USER spring:spring\n ARG JAR_FILE=target/*.jar\n COPY ${JAR_FILE} app.jar\n-ENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n\\ No newline at end of file\n+ENTRYPOINT [\"java\",\"-Dspring.profiles.active=dev\",\"-jar\",\"/app.jar\"]\n\\ No newline at end of file"
  },
  {
    "sha": "773a02e2596700a50d6bdffd1fc62b7a15436f1a",
    "filename": "azure-pipelines.yml",
    "status": "removed",
    "additions": 0,
    "deletions": 75,
    "changes": 75,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/ae63f7275a53c86acde93148c279ba2089d5bad6/azure-pipelines.yml",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/ae63f7275a53c86acde93148c279ba2089d5bad6/azure-pipelines.yml",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/azure-pipelines.yml?ref=ae63f7275a53c86acde93148c279ba2089d5bad6",
    "patch": "@@ -1,75 +0,0 @@\n-# Maven package Java project Web App to Linux on Azure\n-# Build your Java project and deploy it to Azure as a Linux web app\n-# Add steps that analyze code, save build artifacts, deploy, and more:\n-# https://docs.microsoft.com/azure/devops/pipelines/languages/java\n-\n-trigger: [ master ]\n-pr:\n-  autoCancel: true # default is true\n-  branches:\n-    include:\n-      - master\n-variables:\n-\n-  # Azure Resource Manager connection created during pipeline creation\n-  azureSubscription: 'a6c51175-f8cd-4d1b-86fd-987f10b4bc31'\n-\n-  # Web app name\n-  webAppName: 'cicd-azure-devops'\n-\n-  # Environment name\n-  environmentName: 'cicd-azure-devops'\n-\n-  # Agent VM image name\n-  vmImageName: 'ubuntu-latest'\n-\n-stages:\n-  - stage: Build\n-    displayName: Build stage\n-    jobs:\n-      - job: MavenPackageAndPublishArtifacts\n-        displayName: Maven Package and Publish Artifacts\n-        pool:\n-          vmImage: $(vmImageName)\n-\n-        steps:\n-          - task: Maven@3\n-            displayName: 'Maven Package'\n-            inputs:\n-              mavenPomFile: 'pom.xml'\n-          - task: PublishCodeCoverageResults@1\n-            inputs:\n-              #codeCoverageTool: 'JaCoCo' # Options: cobertura, jaCoCo\n-              summaryFileLocation: $(System.DefaultWorkingDirectory)/**/site/jacoco/jacoco.xml\n-\n-          - task: CopyFiles@2\n-            displayName: 'Copy Files to artifact staging directory'\n-            inputs:\n-              SourceFolder: '$(System.DefaultWorkingDirectory)'\n-              Contents: '**/target/*.?(war|jar)'\n-              TargetFolder: $(Build.ArtifactStagingDirectory)\n-\n-          - upload: $(Build.ArtifactStagingDirectory)\n-            artifact: drop\n-\n-  - stage: Deploy\n-    displayName: Deploy stage\n-    dependsOn: Build\n-    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))\n-    jobs:\n-      - deployment: DeployLinuxWebApp\n-        displayName: Deploy Linux Web App\n-        environment: $(environmentName)\n-        pool:\n-          vmImage: $(vmImageName)\n-        strategy:\n-          runOnce:\n-            deploy:\n-              steps:\n-                - task: AzureWebApp@1\n-                  displayName: 'Azure Web App Deploy: cicd-azure-devops'\n-                  inputs:\n-                    azureSubscription: $(azureSubscription)\n-                    appType: webAppLinux\n-                    appName: $(webAppName)\n-                    package: '$(Pipeline.Workspace)/drop/**/target/*.?(war|jar)'"
  },
  {
    "sha": "f76ab54c30b6dae812a0c3529183c8282fd63a75",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 164,
    "deletions": 79,
    "changes": 243,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/pom.xml",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/pom.xml",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/pom.xml?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -1,85 +1,170 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\t<modelVersion>4.0.0</modelVersion>\n-\t<parent>\n-\t\t<groupId>org.springframework.boot</groupId>\n-\t\t<artifactId>spring-boot-starter-parent</artifactId>\n-\t\t<version>2.3.0.RELEASE</version>\n-\t\t<relativePath/> <!-- lookup parent from repository -->\n-\t</parent>\n-\t<groupId>com.example</groupId>\n-\t<artifactId>spring-boot-docker</artifactId>\n-\t<version>0.0.1-SNAPSHOT</version>\n-\t<name>spring-boot-docker</name>\n-\t<description>Demo project for Spring Boot</description>\n-\t<properties>\n-\t\t<java.version>8</java.version>\n-\t</properties>\n-\t<dependencies>\n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n-\t\t</dependency>\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.3.0.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.example</groupId>\n+    <artifactId>spring-boot-docker</artifactId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <name>spring-boot-docker</name>\n+    <description>Demo project for Spring Boot</description>\n+    <properties>\n+        <java.version>8</java.version>\n+        <lombok.version>1.18.18</lombok.version>\n+        <springdoc-openapi-ui.version>1.5.5</springdoc-openapi-ui.version>\n+        <mapstruct.version>1.4.1.Final</mapstruct.version>\n+        <swagger.version>1.6.2</swagger.version>\n+        <sqlserver.version>8.4.1.jre8</sqlserver.version>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springdoc</groupId>\n+            <artifactId>springdoc-openapi-ui</artifactId>\n+            <version>${springdoc-openapi-ui.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <version>${lombok.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-actuator</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mapstruct</groupId>\n+            <artifactId>mapstruct</artifactId>\n+            <version>${mapstruct.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-jdbc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.microsoft.sqlserver</groupId>\n+            <artifactId>mssql-jdbc</artifactId>\n+            <version>${sqlserver.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <scope>runtime</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.swagger</groupId>\n+            <artifactId>swagger-annotations</artifactId>\n+            <version>${swagger.version}</version>\n+        </dependency>\n+    </dependencies>\n \n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n-\t\t\t<scope>test</scope>\n-\t\t</dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>org.springdoc</groupId>\n-\t\t\t<artifactId>springdoc-openapi-ui</artifactId>\n-\t\t\t<version>1.5.2</version>\n-\t\t</dependency>\n-\t\t\t<dependency>\n-\t\t\t\t<groupId>org.projectlombok</groupId>\n-\t\t\t\t<artifactId>lombok</artifactId>\n-\t\t\t\t<version>1.18.16</version>\n-\t\t\t\t<scope>provided</scope>\n-\t\t\t</dependency>\n-\t</dependencies>\n+    <profiles>\n+        <profile>\n+            <id>local</id>\n+            <properties>\n+                <active-profiles>local</active-profiles>\n+            </properties>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+            </activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>org.springdoc</groupId>\n+                    <artifactId>springdoc-openapi-ui</artifactId>\n+                    <version>${springdoc-openapi-ui.version}</version>\n+                </dependency>\n+            </dependencies>\n+        </profile>\n+        <profile>\n+            <id>dev</id>\n+            <properties>\n+                <active-profiles>dev</active-profiles>\n+            </properties>\n+        </profile>\n+    </profiles>\n \n-\t<build>\n-\t\t<plugins>\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.springframework.boot</groupId>\n-\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n-\t\t\t\t<version>2.4.2</version>\n-\t\t\t</plugin>\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.jacoco</groupId>\n-\t\t\t\t<artifactId>jacoco-maven-plugin</artifactId>\n-\t\t\t\t<version>0.8.4</version>\n-\t\t\t\t<executions>\n-\t\t\t\t\t<execution>\n-\t\t\t\t\t\t<goals>\n-\t\t\t\t\t\t\t<goal>prepare-agent</goal>\n-\t\t\t\t\t\t</goals>\n-\t\t\t\t\t</execution>\n-\t\t\t\t\t<!-- attached to Maven test phase -->\n-\t\t\t\t\t<execution>\n-\t\t\t\t\t\t<id>report</id>\n-\t\t\t\t\t\t<phase>test</phase>\n-\t\t\t\t\t\t<goals>\n-\t\t\t\t\t\t\t<goal>report</goal>\n-\t\t\t\t\t\t</goals>\n-\t\t\t\t\t</execution>\n-\t\t\t\t</executions>\n-\t\t\t</plugin>\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n-\t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\n-\t\t\t\t<version>2.22.2</version>\n-\t\t\t\t<configuration>\n-\t\t\t\t\t<reportFormat>plain</reportFormat>\n-\t\t\t\t\t<includes>\n-\t\t\t\t\t\t<include>**/*Test*.java</include>\n-\t\t\t\t\t\t<include>**/*IT*.java</include>\n-\t\t\t\t\t</includes>\n-\t\t\t\t</configuration>\n-\t\t\t</plugin>\n-\t\t</plugins>\n-\t</build>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version>\n+                <configuration>\n+                    <source>${java.version}</source>\n+                    <target>${java.version}</target>\n+                    <annotationProcessorPaths>\n+                        <path>\n+                            <groupId>org.projectlombok</groupId>\n+                            <artifactId>lombok</artifactId>\n+                            <version>${lombok.version}</version>\n+                        </path>\n+                        <path>\n+                            <groupId>org.mapstruct</groupId>\n+                            <artifactId>mapstruct-processor</artifactId>\n+                            <version>${mapstruct.version}</version>\n+                        </path>\n+                    </annotationProcessorPaths>\n+                    <compilerArgs>\n+                        <compilerArg>\n+                            -Amapstruct.defaultComponentModel=spring\n+                        </compilerArg>\n+                    </compilerArgs>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>2.22.2</version>\n+                <configuration>\n+                    <reportFormat>plain</reportFormat>\n+                    <includes>\n+                        <include>**/*Test*.java</include>\n+                        <include>**/*IT*.java</include>\n+                    </includes>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>\n+                <version>0.8.4</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>prepare-agent</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>report</id>\n+                        <phase>test</phase>\n+                        <goals>\n+                            <goal>report</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n \n </project>"
  },
  {
    "sha": "139aa1012a33cac5586c7fc766754562bc6218ba",
    "filename": "src/main/java/com/example/springbootdocker/controller/CategoryController.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/controller/CategoryController.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/controller/CategoryController.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/controller/CategoryController.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,86 @@\n+package com.example.springbootdocker.controller;\n+\n+import com.example.springbootdocker.mapper.CategoryRequestResponseMapper;\n+import com.example.springbootdocker.model.Category;\n+import com.example.springbootdocker.response.PageResponse;\n+import com.example.springbootdocker.request.CategoryRequest;\n+import com.example.springbootdocker.response.CategoryResponse;\n+import com.example.springbootdocker.service.CategoryService;\n+import com.example.springbootdocker.utils.PageResponseUtils;\n+import io.swagger.annotations.ApiOperation;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@Slf4j\n+@RestController\n+@RequestMapping(path = \"/categories\")\n+@RequiredArgsConstructor\n+public class CategoryController {\n+    private final CategoryService categoryService;\n+    private final CategoryRequestResponseMapper categoryRequestResponseMapper;\n+\n+    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ResponseStatus(HttpStatus.CREATED)\n+    @ApiOperation(value = \"Add a new category.\", response = CategoryResponse.class)\n+    public CategoryResponse create(@RequestBody CategoryRequest request) {\n+        log.debug(\"POST /categories - Add a new category\");\n+        Category category = categoryRequestResponseMapper.mapToCategory(request);\n+        Category createdCategory = categoryService.createCategory(category);\n+        return categoryRequestResponseMapper.mapToCategoryResponse(createdCategory);\n+    }\n+\n+    @GetMapping(path = \"/{categoryId}\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(value = \"Get a category by category ID.\", response = Category.class)\n+    public Category getCategory(@PathVariable Long categoryId) {\n+        log.debug(\"GET /categories/{categoryId} - Get a category by category ID\");\n+        return categoryService.getCategoryById(categoryId);\n+    }\n+\n+    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(value = \"Get categories.\", response = Category.class)\n+    public PageResponse<Category> getCategories(@RequestParam(value = \"page\", defaultValue = \"0\", required = false) int page,\n+                                                @RequestParam(value = \"size\", defaultValue = \"10\", required = false) int size,\n+                                                @RequestParam(value = \"direction\", defaultValue = \"asc\", required = false) String direction,\n+                                                @RequestParam(value = \"sortBy\", defaultValue = \"id\", required = false) String sortBy) {\n+        log.debug(\"GET /categories - Get categories\");\n+        PageRequest pageRequest\n+                = PageRequest.of(page, size, Sort.Direction.fromString(direction), sortBy);\n+        Page<Category> categoryPage = categoryService.getAllCategories(pageRequest);\n+\n+        return PageResponseUtils.getPageResponse(direction, sortBy, categoryPage);\n+    }\n+\n+    @PutMapping(path = \"/{categoryId}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(value = \"Update category by category ID.\", response = Category.class)\n+    public Category updateCategory(@PathVariable Long categoryId, @RequestBody CategoryRequest request) {\n+        log.debug(\"PUT /categories/{categoryId} - Update a category by category ID\");\n+\n+        return categoryService.updateCategory(categoryId, request);\n+    }\n+\n+    @DeleteMapping(path = \"/{categoryId}\")\n+    @ApiOperation(value = \"Remove category by category ID.\", response = ResponseEntity.class)\n+    public ResponseEntity<?> deleteCategory(@PathVariable Long categoryId) {\n+        log.debug(\"DELETE /categories/{categoryId} - Delete a category by category ID\");\n+\n+        categoryService.deleteCategory(categoryId);\n+\n+        return ResponseEntity.noContent().build();\n+    }\n+}"
  },
  {
    "sha": "c66b99fd4d64b62cd7ebb11f4de82048d1f87aa1",
    "filename": "src/main/java/com/example/springbootdocker/controller/CategoryProductsController.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/controller/CategoryProductsController.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/controller/CategoryProductsController.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/controller/CategoryProductsController.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,68 @@\n+package com.example.springbootdocker.controller;\n+\n+import com.example.springbootdocker.model.Product;\n+import com.example.springbootdocker.response.PageResponse;\n+import com.example.springbootdocker.service.ProductService;\n+import com.example.springbootdocker.utils.PageResponseUtils;\n+import io.swagger.annotations.ApiOperation;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@Slf4j\n+@RestController\n+@RequestMapping(path = \"/categories/{categoryId}/products\")\n+public class CategoryProductsController {\n+\n+    @Autowired\n+    private ProductService productService;\n+\n+    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(value = \"Get products by category ID.\", response = Product.class)\n+    public PageResponse<Product> retrieveAllProductsInCategory(@PathVariable Long categoryId, @RequestParam(value = \"page\", defaultValue = \"0\", required = false) int page,\n+                                                               @RequestParam(value = \"size\", defaultValue = \"10\", required = false) int size,\n+                                                               @RequestParam(value = \"direction\", defaultValue = \"asc\", required = false) String direction,\n+                                                               @RequestParam(value = \"sortBy\", defaultValue = \"id\", required = false) String sortBy,\n+                                                               @RequestParam(value = \"name\", required = false) String name,\n+                                                               @RequestParam(value = \"priceFrom\", required = false) Long priceFrom,\n+                                                               @RequestParam(value = \"priceTo\", required = false) Long priceTo) {\n+        log.debug(\"get /categories/{categoryId}/products - Get products in category by category ID\");\n+\n+        PageRequest pageRequest\n+                = PageRequest.of(page, size, Sort.Direction.fromString(direction), sortBy);\n+        Page<Product> productsInCategoryPage = productService.getAllProducts(categoryId, name, priceFrom, priceTo, pageRequest);\n+        return PageResponseUtils.getPageResponse(direction, sortBy, productsInCategoryPage);\n+    }\n+\n+    @PostMapping(path = \"/{productId}\")\n+    @ApiOperation(value = \"Add category to product by product ID and by category ID.\", response = ResponseEntity.class)\n+    public ResponseEntity<?> addCategoryToProduct(@PathVariable Long categoryId, @PathVariable Long productId) {\n+        log.debug(\"UPDATE /categories/{categoryId}/products/{productId} - Add a category to product by product ID and by category ID\");\n+\n+        productService.addCategory(productId, categoryId);\n+\n+        return ResponseEntity.status(HttpStatus.CREATED).build();\n+    }\n+\n+    @DeleteMapping(path = \"/{productId}\")\n+    @ApiOperation(value = \"Remove category from product by product ID and by category ID.\", response = ResponseEntity.class)\n+    public ResponseEntity<?> removeProduct(@PathVariable Long categoryId, @PathVariable Long productId) {\n+        log.debug(\"DELETE /categories/{categoryId}/products/{productId} - Delete a category from product by product ID and by category ID\");\n+\n+        productService.removeCategory(productId, categoryId);\n+\n+        return ResponseEntity.noContent().build();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "60eee2d51d419488505d23cc84b23e338fb3d783",
    "filename": "src/main/java/com/example/springbootdocker/controller/HealthCheckController.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/controller/HealthCheckController.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/controller/HealthCheckController.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/controller/HealthCheckController.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -1,11 +1,13 @@\n package com.example.springbootdocker.controller;\n \n import io.swagger.v3.oas.annotations.Operation;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n @RestController\n+@Slf4j\n public class HealthCheckController {\n \n     @Value(\"${endpoint-message}\")\n@@ -22,4 +24,5 @@ public String healthCheckEndpoint (){\n     public String propertyMessageEndpoint (){\n         return String.format(\"Message is: %s\", message);\n     }\n+\n }"
  },
  {
    "sha": "157b495ca95093d71f022c0b4d59935fc1742441",
    "filename": "src/main/java/com/example/springbootdocker/controller/ProductController.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/controller/ProductController.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/controller/ProductController.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/controller/ProductController.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,89 @@\n+package com.example.springbootdocker.controller;\n+\n+import com.example.springbootdocker.mapper.ProductRequestResponseMapper;\n+import com.example.springbootdocker.model.Product;\n+import com.example.springbootdocker.request.ProductRequest;\n+import com.example.springbootdocker.response.PageResponse;\n+import com.example.springbootdocker.response.ProductResponse;\n+import com.example.springbootdocker.service.ProductService;\n+import com.example.springbootdocker.utils.PageResponseUtils;\n+import io.swagger.annotations.ApiOperation;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@Slf4j\n+@RestController\n+@RequestMapping(path = \"/products\")\n+@RequiredArgsConstructor\n+public class ProductController {\n+    private final ProductService productService;\n+    private final ProductRequestResponseMapper productRequestResponseMapper;\n+\n+    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ResponseStatus(HttpStatus.CREATED)\n+    @ApiOperation(value = \"Add a new product.\", response = ProductResponse.class)\n+    public ProductResponse create(@RequestBody ProductRequest request) {\n+        log.debug(\"POST /products - Add a new product\");\n+        Product product = productRequestResponseMapper.mapToProduct(request);\n+        Product createdProduct = productService.createProduct(product);\n+        return productRequestResponseMapper.mapToProductResponse(createdProduct);\n+    }\n+\n+    @GetMapping(path = \"/{productId}\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(value = \"Get a product by product ID.\", notes = \"Get a product by product ID.\", response = Product.class)\n+    public Product getProduct(@PathVariable Long productId) {\n+        log.debug(\"GET /products/{productId} - Get a product by product ID\");\n+        return productService.getProductById(productId);\n+    }\n+\n+    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(value = \"Get products.\", response = Product.class)\n+    public PageResponse<Product> getProducts(@RequestParam(value = \"page\", defaultValue = \"0\", required = false) int page,\n+                                             @RequestParam(value = \"size\", defaultValue = \"10\", required = false) int size,\n+                                             @RequestParam(value = \"direction\", defaultValue = \"asc\", required = false) String direction,\n+                                             @RequestParam(value = \"sortBy\", defaultValue = \"id\", required = false) String sortBy,\n+                                             @RequestParam(value = \"name\", required = false) String name,\n+                                             @RequestParam(value = \"priceFrom\", required = false) Long priceFrom,\n+                                             @RequestParam(value = \"priceTo\", required = false) Long priceTo) {\n+        log.debug(\"GET /products - Get products\");\n+        PageRequest pageRequest\n+                = PageRequest.of(page, size, Sort.Direction.fromString(direction), sortBy);\n+        Page<Product> productPage = productService.getAllProducts(name, priceFrom, priceTo, pageRequest);\n+\n+        return PageResponseUtils.getPageResponse(direction, sortBy, productPage);\n+    }\n+\n+    @PutMapping(path = \"/{productId}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiOperation(value = \"Update  product by product ID.\", response = Product.class)\n+    public Product updateProduct(@PathVariable Long productId, @RequestBody ProductRequest request) {\n+        log.debug(\"PUT /products/{productId} - Delete a product by product ID\");\n+\n+        return productService.updateProduct(productId, request);\n+    }\n+\n+    @DeleteMapping(path = \"/{productId}\")\n+    @ApiOperation(value = \"Remove  product by product ID.\", response = Product.class)\n+    public ResponseEntity<?> deleteProduct(@PathVariable Long productId) {\n+        log.debug(\"DELETE /products/{productId} - Delete a product by product ID\");\n+\n+        productService.deleteProduct(productId);\n+\n+        return ResponseEntity.noContent().build();\n+    }\n+}"
  },
  {
    "sha": "80b02e83f8df205ed86cf96ab06f75ce33983898",
    "filename": "src/main/java/com/example/springbootdocker/dao/CategoryRepository.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/dao/CategoryRepository.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/dao/CategoryRepository.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/dao/CategoryRepository.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,10 @@\n+package com.example.springbootdocker.dao;\n+\n+import com.example.springbootdocker.entity.CategoryEntity;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+\n+@Repository\n+public interface CategoryRepository  extends JpaRepository<CategoryEntity, Long> {\n+}"
  },
  {
    "sha": "e5a0b48efdda0c5b3348b11dbce8bb3b8c8f7f99",
    "filename": "src/main/java/com/example/springbootdocker/dao/ProductRepository.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/dao/ProductRepository.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/dao/ProductRepository.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/dao/ProductRepository.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,28 @@\n+package com.example.springbootdocker.dao;\n+\n+import com.example.springbootdocker.entity.ProductEntity;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface ProductRepository extends JpaRepository<ProductEntity, Long> {\n+    String GET_PRODUCTS_ASSOCIATED_WITH_CATEGORY_SQL = \"select p.* from products p inner join products_categories pc on p.id = pc.product_id where pc.category_id = :categoryId and (:name is null or p.name LIKE %:name%) and (:priceFrom is null or p.price >= :priceFrom) and (:priceTo is null or p.price <= :priceTo)\";\n+    String COUNT_PRODUCTS_ASSOCIATED_WITH_CATEGORY_SQL = \"select count(1) from (\" + GET_PRODUCTS_ASSOCIATED_WITH_CATEGORY_SQL + \") as products\";\n+\n+    String GET_PRODUCTS_WITH_NAME_CONTAINING_AND_PRICE_IS_IN_RANGE_OPTIONALS = \"select p.* from products p where (:name is null or p.name LIKE %:name%) and (:priceFrom is null or p.price >= :priceFrom) and (:priceTo is null or p.price <= :priceTo)\";\n+    String COUNT_PRODUCTS_WITH_NAME_CONTAINING_AND_PRICE_IS_IN_RANGE_OPTIONALS = \"select count(1) from (\" + GET_PRODUCTS_WITH_NAME_CONTAINING_AND_PRICE_IS_IN_RANGE_OPTIONALS + \") as products\";\n+\n+\n+    @Query(value = GET_PRODUCTS_ASSOCIATED_WITH_CATEGORY_SQL, countQuery = COUNT_PRODUCTS_ASSOCIATED_WITH_CATEGORY_SQL, nativeQuery = true)\n+    Page<ProductEntity> findByAssociatedWithCategory(@Param(\"categoryId\") Long categoryId, @Param(\"name\") String name, @Param(\"priceFrom\") Long priceFrom, @Param(\"priceTo\") Long priceTo, Pageable pageable);\n+\n+    @Query(value = COUNT_PRODUCTS_ASSOCIATED_WITH_CATEGORY_SQL, nativeQuery = true)\n+    Integer countByAssociatedWithCategory(Long categoryId, String name, Long priceFrom, Long priceTo);\n+\n+    @Query(value = GET_PRODUCTS_WITH_NAME_CONTAINING_AND_PRICE_IS_IN_RANGE_OPTIONALS, countQuery = COUNT_PRODUCTS_WITH_NAME_CONTAINING_AND_PRICE_IS_IN_RANGE_OPTIONALS, nativeQuery = true)\n+    Page<ProductEntity> findAll (@Param(\"name\") String name, @Param(\"priceFrom\") Long priceFrom, @Param(\"priceTo\") Long priceTo, Pageable pageable);\n+}"
  },
  {
    "sha": "2b03b0d7fd3c65f860276d5aee3980be8ceb2ad7",
    "filename": "src/main/java/com/example/springbootdocker/entity/CategoryEntity.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/entity/CategoryEntity.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/entity/CategoryEntity.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/entity/CategoryEntity.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,41 @@\n+package com.example.springbootdocker.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import java.util.List;\n+\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@ToString(exclude = \"products\")\n+@Builder(toBuilder = true)\n+@Entity(name=\"categories\")\n+public class CategoryEntity {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(nullable = false)\n+    private Integer productCount;\n+\n+    @Column(nullable = false)\n+    private String name;\n+\n+    @JsonIgnore\n+    @ManyToMany(fetch = FetchType.LAZY, mappedBy = \"categories\")\n+    private List<ProductEntity> products;\n+\n+}"
  },
  {
    "sha": "e91f38b0b82dc0b5d31d7ea3f86f147f840f764b",
    "filename": "src/main/java/com/example/springbootdocker/entity/ProductEntity.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/entity/ProductEntity.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/entity/ProductEntity.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/entity/ProductEntity.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,42 @@\n+package com.example.springbootdocker.entity;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Builder(toBuilder = true)\n+@Entity(name=\"products\")\n+public class ProductEntity {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY) // maybe without\n+    private Long id;\n+\n+    @Column(nullable = false)\n+    private BigDecimal price;\n+\n+    @Column(nullable = false)\n+    private String name;\n+\n+    @ManyToMany\n+    @JoinTable(\n+            name = \"products_categories\",\n+            joinColumns = @JoinColumn(name = \"product_id\"),\n+            inverseJoinColumns = @JoinColumn(name = \"category_id\"))\n+    private List<CategoryEntity> categories;\n+}"
  },
  {
    "sha": "a034b59931a60af4796d84e861b5ba6c7ba4438f",
    "filename": "src/main/java/com/example/springbootdocker/exception/CategoryNotFoundException.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/exception/CategoryNotFoundException.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/exception/CategoryNotFoundException.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/exception/CategoryNotFoundException.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,17 @@\n+package com.example.springbootdocker.exception;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+@EqualsAndHashCode(callSuper = true)\n+@Data\n+public class CategoryNotFoundException extends RuntimeException {\n+    private static final long serialVersionUID = 1L;\n+\n+    private Long categoryId;\n+\n+    public CategoryNotFoundException(Long id) {\n+        super(\"Category not found \" + id);\n+        this.categoryId = id;\n+    }\n+}"
  },
  {
    "sha": "86a55e0e93db844aa44e7f0e13ede80cdf8f35ad",
    "filename": "src/main/java/com/example/springbootdocker/exception/ProductNotFoundException.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/exception/ProductNotFoundException.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/exception/ProductNotFoundException.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/exception/ProductNotFoundException.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,17 @@\n+package com.example.springbootdocker.exception;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+@EqualsAndHashCode(callSuper = true)\n+@Data\n+public class ProductNotFoundException extends RuntimeException {\n+    private static final long serialVersionUID = 1L;\n+\n+    private Long productId;\n+\n+    public ProductNotFoundException(Long id) {\n+        super(\"Product not found \" + id);\n+        this.productId = id;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "772af5dbf8cb02b7d5fecc1560151901d06b1a6e",
    "filename": "src/main/java/com/example/springbootdocker/mapper/CategoryRequestResponseMapper.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/mapper/CategoryRequestResponseMapper.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/mapper/CategoryRequestResponseMapper.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/mapper/CategoryRequestResponseMapper.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,15 @@\n+package com.example.springbootdocker.mapper;\n+\n+import com.example.springbootdocker.model.Category;\n+import com.example.springbootdocker.request.CategoryRequest;\n+import com.example.springbootdocker.response.CategoryResponse;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+\n+@Mapper(componentModel = \"spring\")\n+public interface CategoryRequestResponseMapper {\n+    Category mapToCategory(CategoryRequest source);\n+\n+    @Mapping(target = \"categoryId\", source = \"id\")\n+    CategoryResponse mapToCategoryResponse(Category source);\n+}"
  },
  {
    "sha": "19ccaf22b662d8c0c114527da3e808ba85b7dc49",
    "filename": "src/main/java/com/example/springbootdocker/mapper/CategoryToCategoryEntityMapper.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/mapper/CategoryToCategoryEntityMapper.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/mapper/CategoryToCategoryEntityMapper.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/mapper/CategoryToCategoryEntityMapper.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,12 @@\n+package com.example.springbootdocker.mapper;\n+\n+import com.example.springbootdocker.entity.CategoryEntity;\n+import com.example.springbootdocker.model.Category;\n+import org.mapstruct.Mapper;\n+\n+@Mapper(componentModel = \"spring\")\n+public interface CategoryToCategoryEntityMapper {\n+    CategoryEntity mapToCategoryEntity(Category source);\n+\n+    Category mapToCategory(CategoryEntity source);\n+}"
  },
  {
    "sha": "e4b018ff2be1cd1bad59939abcb0edd708f38cc3",
    "filename": "src/main/java/com/example/springbootdocker/mapper/ProductRequestResponseMapper.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/mapper/ProductRequestResponseMapper.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/mapper/ProductRequestResponseMapper.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/mapper/ProductRequestResponseMapper.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,16 @@\n+package com.example.springbootdocker.mapper;\n+\n+import com.example.springbootdocker.model.Product;\n+import com.example.springbootdocker.request.ProductRequest;\n+import com.example.springbootdocker.response.ProductResponse;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+\n+@Mapper(componentModel = \"spring\")\n+public interface ProductRequestResponseMapper {\n+\n+    Product mapToProduct(ProductRequest source);\n+\n+    @Mapping(target = \"productId\", source = \"id\")\n+    ProductResponse mapToProductResponse(Product source);\n+}"
  },
  {
    "sha": "01537b33519a236a6c0dd45d3a3ecbbe2ffeea48",
    "filename": "src/main/java/com/example/springbootdocker/mapper/ProductToProductEntityMapper.java",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/mapper/ProductToProductEntityMapper.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/mapper/ProductToProductEntityMapper.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/mapper/ProductToProductEntityMapper.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,15 @@\n+package com.example.springbootdocker.mapper;\n+\n+import com.example.springbootdocker.entity.ProductEntity;\n+import com.example.springbootdocker.model.Product;\n+import org.mapstruct.Mapper;\n+\n+@Mapper(componentModel = \"spring\")\n+public interface ProductToProductEntityMapper {\n+    ProductEntity mapToProductEntity(Product source);\n+\n+    Product mapToProduct(ProductEntity source);\n+}\n+\n+\n+"
  },
  {
    "sha": "f9b11bc923a06e5fb531fb0f5203f7e0665a418e",
    "filename": "src/main/java/com/example/springbootdocker/model/Category.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/model/Category.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/model/Category.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/model/Category.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,24 @@\n+package com.example.springbootdocker.model;\n+\n+import com.example.springbootdocker.entity.ProductEntity;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+\n+import java.util.List;\n+\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Builder(toBuilder = true)\n+public class Category {\n+\n+    private Long id;\n+    private Integer productCount;\n+    private String name;\n+    private List<ProductEntity> products;\n+\n+}"
  },
  {
    "sha": "3f3fad0cd1bb0e698ef3b7190b810b2dcc9becac",
    "filename": "src/main/java/com/example/springbootdocker/model/Product.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/model/Product.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/model/Product.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/model/Product.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,23 @@\n+package com.example.springbootdocker.model;\n+\n+import com.example.springbootdocker.entity.CategoryEntity;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Builder(toBuilder = true)\n+public class Product {\n+\n+    private Long id;\n+    private BigDecimal price;\n+    private String name;\n+    private List<CategoryEntity> categories;\n+}"
  },
  {
    "sha": "6ec6c43b2c6ce6f036c80d445758e11cd9e139b9",
    "filename": "src/main/java/com/example/springbootdocker/request/CategoryRequest.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/request/CategoryRequest.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/request/CategoryRequest.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/request/CategoryRequest.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,20 @@\n+package com.example.springbootdocker.request;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import javax.validation.constraints.NotEmpty;\n+import javax.validation.constraints.Size;\n+\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Builder\n+public class CategoryRequest {\n+\n+    @NotEmpty(message = \"name is required\")\n+    @Size(message = \"name must be equal to or lower than 100\", min = 1, max = 100)\n+    private String name;\n+}"
  },
  {
    "sha": "81bd66bfd8ccda185e3009c2270c29c81e39b45c",
    "filename": "src/main/java/com/example/springbootdocker/request/ProductRequest.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/request/ProductRequest.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/request/ProductRequest.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/request/ProductRequest.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,26 @@\n+package com.example.springbootdocker.request;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotEmpty;\n+import javax.validation.constraints.Size;\n+import java.math.BigDecimal;\n+\n+@Data\n+@AllArgsConstructor\n+@Builder\n+public class ProductRequest {\n+\n+    @NotEmpty(message = \"name is required\")\n+    @Size(message = \"name must be equal to or lower than 100\", min = 1, max = 100)\n+    private String name;\n+    @NotEmpty(message = \"price is required\")\n+    @Min(0)\n+    private BigDecimal price;\n+    @NotEmpty\n+    @Size(message = \"Currency must be in ISO 4217 format\", min = 3, max = 3)\n+    private String currency;\n+}"
  },
  {
    "sha": "64ca510ec1ee25c68de924d4979acf164bdb5e20",
    "filename": "src/main/java/com/example/springbootdocker/response/CategoryResponse.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/response/CategoryResponse.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/response/CategoryResponse.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/response/CategoryResponse.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,19 @@\n+package com.example.springbootdocker.response;\n+\n+import com.example.springbootdocker.entity.ProductEntity;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data\n+@AllArgsConstructor\n+@Builder(toBuilder = true)\n+public class CategoryResponse {\n+    private long categoryId;\n+    private Integer productCount;\n+    private String name;\n+    private List<ProductEntity> products;\n+}"
  },
  {
    "sha": "8afe91b7184ea63c70edabc6e8acc762b69c2ae1",
    "filename": "src/main/java/com/example/springbootdocker/response/PageResponse.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/response/PageResponse.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/response/PageResponse.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/response/PageResponse.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,21 @@\n+package com.example.springbootdocker.response;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data\n+@AllArgsConstructor\n+@Builder\n+public class PageResponse<T> {\n+    private int page;\n+    private int size;\n+    private String sortBy;\n+    private String direction;\n+    private int totalPages;\n+    private long totalElements;\n+    private List<T> content;\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e13a64eca8693acf266305f4bb89d88413abb61c",
    "filename": "src/main/java/com/example/springbootdocker/response/ProductResponse.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/response/ProductResponse.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/response/ProductResponse.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/response/ProductResponse.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,20 @@\n+package com.example.springbootdocker.response;\n+\n+import com.example.springbootdocker.entity.CategoryEntity;\n+import com.example.springbootdocker.model.Category;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+@Data\n+@AllArgsConstructor\n+@Builder(toBuilder = true)\n+public class ProductResponse {\n+    private long productId;\n+    private BigDecimal price;\n+    private String name;\n+    private List<Category> categories;\n+}"
  },
  {
    "sha": "91023580a26de67f2896a858b34d5b0c5f582ea1",
    "filename": "src/main/java/com/example/springbootdocker/service/CategoryService.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/service/CategoryService.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/service/CategoryService.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/service/CategoryService.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,22 @@\n+package com.example.springbootdocker.service;\n+\n+import com.example.springbootdocker.model.Category;\n+import com.example.springbootdocker.request.CategoryRequest;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+\n+public interface CategoryService {\n+\n+    Page<Category> getAllCategories(Pageable page);\n+\n+    Category getCategoryById(Long id);\n+\n+    Category createCategory(Category category);\n+\n+    Category updateCategory(Long categoryId, CategoryRequest categoryRequest);\n+\n+    void deleteCategory(Long categoryId);\n+\n+    Category updateCategoryProductCount(Category categor, Integer productCount);\n+\n+}"
  },
  {
    "sha": "400f01ccf7cf1c4f282d2be5d36e1e917889977e",
    "filename": "src/main/java/com/example/springbootdocker/service/ProductService.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/torbaAnton/CICD_test/blob/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/service/ProductService.java",
    "raw_url": "https://github.com/torbaAnton/CICD_test/raw/747216ea3d7bead53783d36b00c7ff27c1f7f9bb/src/main/java/com/example/springbootdocker/service/ProductService.java",
    "contents_url": "https://api.github.com/repos/torbaAnton/CICD_test/contents/src/main/java/com/example/springbootdocker/service/ProductService.java?ref=747216ea3d7bead53783d36b00c7ff27c1f7f9bb",
    "patch": "@@ -0,0 +1,29 @@\n+package com.example.springbootdocker.service;\n+\n+import com.example.springbootdocker.model.Category;\n+import com.example.springbootdocker.model.Product;\n+import com.example.springbootdocker.request.ProductRequest;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+\n+public interface ProductService {\n+    Page<Product> getAllProducts(String name, Long priceFrom, Long priceTo, Pageable page);\n+\n+    Page<Product> getAllProducts(Long categoryId, String name, Long priceFrom, Long priceTo, Pageable page);\n+\n+    Product getProductById(Long id);\n+\n+    Product createProduct(Product product);\n+\n+    Product updateProduct(Long productId, ProductRequest productRequest);\n+\n+    void deleteProduct(Long productId);\n+\n+    boolean hasCategory(Product product, Category category);\n+\n+    void addCategory(Long productId, Long categoryId);\n+\n+    void removeCategory(Long productId, Long categoryId);\n+\n+    Integer countProductsAssociated (Category category, String name, Long priceFrom, Long priceTo);\n+}"
  }
]
