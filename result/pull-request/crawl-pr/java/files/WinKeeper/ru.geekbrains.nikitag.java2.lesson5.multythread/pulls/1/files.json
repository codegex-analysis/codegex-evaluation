[
  {
    "sha": "744289df7500a556ea155fdc0d866a5b5fc2d36b",
    "filename": ".gitignore",
    "status": "added",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/WinKeeper/ru.geekbrains.nikitag.java2.lesson5.multythread/blob/98e53f6feaae3a82249ff11c865f1aa16daaadba/.gitignore",
    "raw_url": "https://github.com/WinKeeper/ru.geekbrains.nikitag.java2.lesson5.multythread/raw/98e53f6feaae3a82249ff11c865f1aa16daaadba/.gitignore",
    "contents_url": "https://api.github.com/repos/WinKeeper/ru.geekbrains.nikitag.java2.lesson5.multythread/contents/.gitignore?ref=98e53f6feaae3a82249ff11c865f1aa16daaadba",
    "patch": "@@ -0,0 +1,2 @@\n+# Project exclude paths\n+/target/\n\\ No newline at end of file"
  },
  {
    "sha": "2ed1da4cf9a89647c34aa3791e1ac0ab3cb852c1",
    "filename": "src/main/java/nikitag/java2/lesson5/multythread/homework/MainApp.java",
    "status": "modified",
    "additions": 53,
    "deletions": 17,
    "changes": 70,
    "blob_url": "https://github.com/WinKeeper/ru.geekbrains.nikitag.java2.lesson5.multythread/blob/98e53f6feaae3a82249ff11c865f1aa16daaadba/src/main/java/nikitag/java2/lesson5/multythread/homework/MainApp.java",
    "raw_url": "https://github.com/WinKeeper/ru.geekbrains.nikitag.java2.lesson5.multythread/raw/98e53f6feaae3a82249ff11c865f1aa16daaadba/src/main/java/nikitag/java2/lesson5/multythread/homework/MainApp.java",
    "contents_url": "https://api.github.com/repos/WinKeeper/ru.geekbrains.nikitag.java2.lesson5.multythread/contents/src/main/java/nikitag/java2/lesson5/multythread/homework/MainApp.java?ref=98e53f6feaae3a82249ff11c865f1aa16daaadba",
    "patch": "@@ -4,23 +4,18 @@\n     static final int SIZE = 10_000_000;\n     static final int HALF = SIZE / 2;\n \n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws InterruptedException {\n         //Простое замещение без разделения потока\n         firstMethod();\n-\n-\n-\n-\n-\n-\n+        secondMethod();\n+        thirdMethod();\n \n     }\n \n     public static void firstMethod() {\n-        float[] arr = new float[SIZE];\n         long a = System.currentTimeMillis();\n+        float[] arr = new float[SIZE];\n         Thread addOnes = new Thread(() -> {\n-            System.out.println();\n             for (int i = 0; i < arr.length; i++) {\n                 arr[i] = 1;\n             }\n@@ -32,36 +27,77 @@ public static void firstMethod() {\n             e.printStackTrace();\n         }\n         Thread useMathFormula = new Thread(() -> {\n-            System.out.println();\n             for (int i = 0; i < arr.length; i++) {\n-                arr[i] = (float)(arr[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+                arr[i] = (float) (arr[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n             }\n         });\n         useMathFormula.start();\n-        System.out.println(System.currentTimeMillis() - a);\n+\n+        System.out.println(\"Время завершения операции с одним потоком: \" + (System.currentTimeMillis() - a));\n     }\n \n     public static void secondMethod() {\n+        //Создаём отправную точку таймера\n+        long a = System.currentTimeMillis();\n         float[] arr = new float[SIZE];\n         //Создаём два массива для перезаписи половинок\n         float[] a1 = new float[HALF];\n         float[] a2 = new float[HALF];\n         //Инициируем из одного массива два других с перезаписью половин\n         System.arraycopy(arr, 0, a1, 0, HALF);\n         System.arraycopy(arr, HALF, a2, 0, HALF);\n-        long a = System.currentTimeMillis();\n         Thread firstHalf = new Thread(() -> {\n-            System.out.println();\n-            for (int i = 0; i < arr.length; i++) {\n-                arr[i] = 1;\n+            for (int i = 0; i < a1.length; i++) {\n+                a1[i] = 1;\n+                a1[i] = (float) (a1[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n             }\n+            System.arraycopy(a1, 0, arr, 0, HALF);\n         });\n+        firstHalf.start();\n+\n         Thread secondHalf = new Thread(() -> {\n+            for (int i = 0; i < a2.length; i++) {\n+                a2[i] = 1;\n+                a2[i] = (float) (a2[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+            }\n+            System.arraycopy(a2, 0, arr, HALF, HALF);\n+        });\n+        secondHalf.start();\n+\n+        System.out.println(\"Время завершения операции с двумя потоками: \" + (System.currentTimeMillis() - a));\n+    }\n+\n+    public static void thirdMethod() throws InterruptedException {\n+        long a = System.currentTimeMillis();\n+        float[] arr = new float[SIZE];\n+        float[] a1 = new float[HALF];\n+        float[] a2 = new float[HALF];\n+        Thread addOnes = new Thread(() -> {\n             System.out.println();\n             for (int i = 0; i < arr.length; i++) {\n                 arr[i] = 1;\n             }\n         });\n-        System.out.println(System.currentTimeMillis() - a);\n+        addOnes.start();\n+        addOnes.join();\n+        System.arraycopy(arr, 0, a1, 0, HALF);\n+        System.arraycopy(arr, HALF, a2, 0, HALF);\n+        Thread firstHalf = new Thread(() -> {\n+            for (int i = 0; i < a1.length; i++) {\n+                a1[i] = (float) (a1[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+            }\n+            System.arraycopy(a1, 0, arr, 0, HALF);\n+        });\n+        firstHalf.start();\n+\n+        Thread secondHalf = new Thread(() -> {\n+            for (int i = 0; i < a2.length; i++) {\n+                a2[i] = (float) (a2[i] * Math.sin(0.2f + i / 5) * Math.cos(0.2f + i / 5) * Math.cos(0.4f + i / 2));\n+            }\n+            System.arraycopy(a2, 0, arr, HALF, HALF);\n+        });\n+        secondHalf.start();\n+\n+        System.out.println(\"Время завершения операции с двумя потоками по заданию: \" + (System.currentTimeMillis() - a));\n     }\n }"
  }
]
