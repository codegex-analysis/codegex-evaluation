[
  {
    "sha": "dfe7c8c92c53c8ed348cb14d583e5b0701952674",
    "filename": "src/main/java/uk/gov/cshr/controller/ListIdentitiesController.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/Civil-Service-Human-Resources/identity-service/blob/0c2917c010e507a913bbac7f6c4d39c961a0591b/src/main/java/uk/gov/cshr/controller/ListIdentitiesController.java",
    "raw_url": "https://github.com/Civil-Service-Human-Resources/identity-service/raw/0c2917c010e507a913bbac7f6c4d39c961a0591b/src/main/java/uk/gov/cshr/controller/ListIdentitiesController.java",
    "contents_url": "https://api.github.com/repos/Civil-Service-Human-Resources/identity-service/contents/src/main/java/uk/gov/cshr/controller/ListIdentitiesController.java?ref=0c2917c010e507a913bbac7f6c4d39c961a0591b",
    "patch": "@@ -46,6 +46,16 @@ public ListIdentitiesController(IdentityRepository identityRepository) {\n         return ResponseEntity.ok(identityRepository.findAllNormalised().stream().collect(Collectors.toMap(o -> o.getUid(), o -> o)));\n     }\n \n+    @GetMapping(value =\"/api/identities/map-for-uids\", params = \"uids\")\n+    public ResponseEntity<Map<String, IdentityDTO>> listIdentitiesAsMapForUids(@RequestParam List<String> uids) {\n+        return ResponseEntity.ok(\n+                identityRepository\n+                        .findIdentitiesByUidsNormalised(uids)\n+                        .stream()\n+                        .collect(Collectors.toMap(IdentityDTO::getUid, o -> o))\n+        );\n+    }\n+\n     @GetMapping(value = \"/api/identities\", params = \"emailAddress\")\n     public ResponseEntity<IdentityDTO> findByEmailAddress(@RequestParam String emailAddress) {\n "
  },
  {
    "sha": "d0256189d403ce54df4e8236d50459f8cdd119a8",
    "filename": "src/main/java/uk/gov/cshr/repository/IdentityRepository.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Civil-Service-Human-Resources/identity-service/blob/0c2917c010e507a913bbac7f6c4d39c961a0591b/src/main/java/uk/gov/cshr/repository/IdentityRepository.java",
    "raw_url": "https://github.com/Civil-Service-Human-Resources/identity-service/raw/0c2917c010e507a913bbac7f6c4d39c961a0591b/src/main/java/uk/gov/cshr/repository/IdentityRepository.java",
    "contents_url": "https://api.github.com/repos/Civil-Service-Human-Resources/identity-service/contents/src/main/java/uk/gov/cshr/repository/IdentityRepository.java?ref=0c2917c010e507a913bbac7f6c4d39c961a0591b",
    "patch": "@@ -3,6 +3,7 @@\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.Modifying;\n import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n import uk.gov.cshr.domain.Identity;\n import uk.gov.cshr.dto.IdentityDTO;\n@@ -28,6 +29,10 @@\n                 \"from Identity i\")\n         List<IdentityDTO> findAllNormalised();\n \n+        @Query(\"select new uk.gov.cshr.dto.IdentityDTO(i.email, i.uid) \" +\n+                \"from Identity i where i.uid in (:uids)\")\n+        List<IdentityDTO> findIdentitiesByUidsNormalised(@Param(\"uids\") List<String> uids);\n+\n         Long countByAgencyTokenUid(String uid);\n \n         @Transactional"
  },
  {
    "sha": "7fa293947bbfceb0afa72b3ebc2594d0adf078da",
    "filename": "src/test/java/uk/gov/cshr/repository/IdentityRepositoryTest.java",
    "status": "modified",
    "additions": 62,
    "deletions": 3,
    "changes": 65,
    "blob_url": "https://github.com/Civil-Service-Human-Resources/identity-service/blob/0c2917c010e507a913bbac7f6c4d39c961a0591b/src/test/java/uk/gov/cshr/repository/IdentityRepositoryTest.java",
    "raw_url": "https://github.com/Civil-Service-Human-Resources/identity-service/raw/0c2917c010e507a913bbac7f6c4d39c961a0591b/src/test/java/uk/gov/cshr/repository/IdentityRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/Civil-Service-Human-Resources/identity-service/contents/src/test/java/uk/gov/cshr/repository/IdentityRepositoryTest.java?ref=0c2917c010e507a913bbac7f6c4d39c961a0591b",
    "patch": "@@ -7,8 +7,11 @@\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.transaction.annotation.Transactional;\n import uk.gov.cshr.domain.Identity;\n+import uk.gov.cshr.dto.IdentityDTO;\n \n import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.UUID;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n@@ -113,12 +116,68 @@ public void removeAgencyToken_doesNotSetNonAgencyTokenIdentityToInactiveOnNullTo\n         assertEquals(otherNonAgencyIdentity.toString(), postUpdateOtherNonAgencyIdentity.toString());\n     }\n \n+    @Test\n+    public void findIdentitiesByUidsNormalised_shouldReturnIdentitiesForGivenUids() {\n+\n+        String uid1 = UUID.randomUUID().toString();\n+        String uid2 = UUID.randomUUID().toString();\n+        String uid3 = UUID.randomUUID().toString();\n+        String uid4 = UUID.randomUUID().toString();\n+\n+        Identity identity1 = createIdentity(uid1, uid1, null);\n+        Identity identity2 = createIdentity(uid2, uid2, \"\");\n+        Identity identity3 = createIdentity(uid3, uid3, \"at\");\n+\n+        identityRepository.saveAndFlush(identity1);\n+        identityRepository.saveAndFlush(identity2);\n+        identityRepository.saveAndFlush(identity3);\n+\n+        List<String> uids1 = new ArrayList<>();\n+        uids1.add(uid1);\n+        uids1.add(uid2);\n+        uids1.add(uid3);\n+        List<IdentityDTO> result1 = identityRepository.findIdentitiesByUidsNormalised(uids1);\n+        assertEquals(3, result1.size());\n+        assertEquals(1, result1.stream().filter(r -> r.getUid().equals(uid1)).count());\n+        assertEquals(1, result1.stream().filter(r -> r.getUid().equals(uid2)).count());\n+        assertEquals(1, result1.stream().filter(r -> r.getUid().equals(uid3)).count());\n+\n+        List<String> uids2 = new ArrayList<>();\n+        uids2.add(uid1);\n+        uids2.add(uid2);\n+        List<IdentityDTO> result2 = identityRepository.findIdentitiesByUidsNormalised(uids2);\n+        assertEquals(2, result2.size());\n+        assertEquals(1, result2.stream().filter(r -> r.getUid().equals(uid1)).count());\n+        assertEquals(1, result2.stream().filter(r -> r.getUid().equals(uid2)).count());\n+\n+        List<String> uids3 = new ArrayList<>();\n+        uids3.add(uid1);\n+        uids3.add(uid4);\n+        List<IdentityDTO> result3 = identityRepository.findIdentitiesByUidsNormalised(uids3);\n+        assertEquals(1, result3.size());\n+        assertEquals(1, result3.stream().filter(r -> r.getUid().equals(uid1)).count());\n+        assertEquals(0, result3.stream().filter(r -> r.getUid().equals(uid4)).count());\n+\n+        List<String> uids4 = new ArrayList<>();\n+        uids4.add(uid4);\n+        List<IdentityDTO> result4 = identityRepository.findIdentitiesByUidsNormalised(uids4);\n+        assertEquals(0, result4.size());\n+        assertEquals(0, result4.stream().filter(r -> r.getUid().equals(uid4)).count());\n+\n+        List<String> uids5 = new ArrayList<>();\n+        List<IdentityDTO> result5 = identityRepository.findIdentitiesByUidsNormalised(uids5);\n+        assertEquals(0, result5.size());\n+    }\n+\n     private Identity createIdentity() {\n         return createIdentity(null);\n     }\n \n     private Identity createIdentity(String agencyTokenUid) {\n-        Identity identity = new Identity(UUID.randomUUID().toString(), String.format(EMAIL_TEMPLATE, UUID.randomUUID().toString()), PASSWORD, true, false, null, Instant.now(), false, false, agencyTokenUid);\n-        return identity;\n+        return createIdentity(UUID.randomUUID().toString(), UUID.randomUUID().toString(), agencyTokenUid);\n+    }\n+\n+    private Identity createIdentity(String uid, String emailPrefix, String agencyTokenUid) {\n+        return new Identity(uid, String.format(EMAIL_TEMPLATE, emailPrefix), PASSWORD, true, false, null, Instant.now(), false, false, agencyTokenUid);\n     }\n-}\n\\ No newline at end of file\n+}"
  }
]
