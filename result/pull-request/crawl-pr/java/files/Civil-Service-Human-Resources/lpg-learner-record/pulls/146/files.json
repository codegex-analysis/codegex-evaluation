[
  {
    "sha": "30e896d62d3eec61d4f02a9b31f6e6072875a2ca",
    "filename": "src/main/java/uk/gov/cslearning/record/api/ModuleRecordController.java",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/blob/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/main/java/uk/gov/cslearning/record/api/ModuleRecordController.java",
    "raw_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/raw/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/main/java/uk/gov/cslearning/record/api/ModuleRecordController.java",
    "contents_url": "https://api.github.com/repos/Civil-Service-Human-Resources/lpg-learner-record/contents/src/main/java/uk/gov/cslearning/record/api/ModuleRecordController.java?ref=fd863701abe9ce4f8f72d2d80df56dc2ddebf219",
    "patch": "@@ -13,7 +13,7 @@\n import java.util.List;\n \n @RestController\n-@RequestMapping(\"/reporting/module-records\")\n+@RequestMapping(\"/reporting\")\n public class ModuleRecordController {\n \n     private final ModuleRecordService moduleRecordService;\n@@ -22,11 +22,20 @@ public ModuleRecordController(ModuleRecordService moduleRecordService) {\n         this.moduleRecordService = moduleRecordService;\n     }\n \n-    @GetMapping(params = {\"from\", \"to\"})\n+    @GetMapping(value = \"/module-records\", params = {\"from\", \"to\"})\n     public ResponseEntity<List<ModuleRecordDto>> listForPeriod(\n             @RequestParam(\"from\") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,\n             @RequestParam(\"to\") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to\n     ) {\n         return ResponseEntity.ok(moduleRecordService.listRecordsForPeriod(from, to));\n     }\n+\n+    @GetMapping(value = \"/module-records-for-learners\", params = {\"from\", \"to\", \"learnerIds\"})\n+    public ResponseEntity<List<ModuleRecordDto>> listModuleRecordsForPeriodAndLearnerIds(\n+            @RequestParam(\"from\") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,\n+            @RequestParam(\"to\") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to,\n+            @RequestParam List<String> learnerIds\n+    ) {\n+        return ResponseEntity.ok(moduleRecordService.listRecordsForPeriodAndLearnerIds(from, to, learnerIds));\n+    }\n }"
  },
  {
    "sha": "7f4ee12053aa45b502f5dd50f1d8ff4b79b78300",
    "filename": "src/main/java/uk/gov/cslearning/record/dto/ModuleRecordDto.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/blob/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/main/java/uk/gov/cslearning/record/dto/ModuleRecordDto.java",
    "raw_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/raw/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/main/java/uk/gov/cslearning/record/dto/ModuleRecordDto.java",
    "contents_url": "https://api.github.com/repos/Civil-Service-Human-Resources/lpg-learner-record/contents/src/main/java/uk/gov/cslearning/record/dto/ModuleRecordDto.java?ref=fd863701abe9ce4f8f72d2d80df56dc2ddebf219",
    "patch": "@@ -12,15 +12,25 @@\n     private String learner;\n     private LocalDateTime stateChangeDate;\n     private LocalDateTime completedAt;\n+    private String moduleTitle;\n+    private String moduleType;\n+    private String courseId;\n+    private String courseTitle;\n \n     public ModuleRecordDto() {\n     }\n \n-    public ModuleRecordDto(String moduleId, State state, String learner, LocalDateTime stateChangeDate, LocalDateTime completedAt) {\n+    public ModuleRecordDto(String moduleId, State state, String learner,\n+                           LocalDateTime stateChangeDate, LocalDateTime completedAt,\n+                           String moduleTitle, String moduleType, String courseId, String courseTitle) {\n         this.moduleId = moduleId;\n         this.state = String.valueOf(state);\n         this.learner = learner;\n         this.stateChangeDate = stateChangeDate;\n         this.completedAt = completedAt;\n+        this.moduleTitle = moduleTitle;\n+        this.moduleType = moduleType;\n+        this.courseId = courseId;\n+        this.courseTitle = courseTitle;\n     }\n }"
  },
  {
    "sha": "59aad2a86a8fe14ac4a9fc53e9068f64040e433a",
    "filename": "src/main/java/uk/gov/cslearning/record/repository/ModuleRecordRepository.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/blob/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/main/java/uk/gov/cslearning/record/repository/ModuleRecordRepository.java",
    "raw_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/raw/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/main/java/uk/gov/cslearning/record/repository/ModuleRecordRepository.java",
    "contents_url": "https://api.github.com/repos/Civil-Service-Human-Resources/lpg-learner-record/contents/src/main/java/uk/gov/cslearning/record/repository/ModuleRecordRepository.java?ref=fd863701abe9ce4f8f72d2d80df56dc2ddebf219",
    "patch": "@@ -2,6 +2,7 @@\n \n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n import uk.gov.cslearning.record.domain.ModuleRecord;\n import uk.gov.cslearning.record.dto.ModuleRecordDto;\n@@ -11,10 +12,19 @@\n \n @Repository\n public interface ModuleRecordRepository extends JpaRepository<ModuleRecord, Long> {\n-    @Query(\"SELECT new uk.gov.cslearning.record.dto.ModuleRecordDto(mr.moduleId, mr.state, cr.identity.userId, mr.updatedAt,  mr.completionDate) \" +\n+    @Query(\"SELECT new uk.gov.cslearning.record.dto.ModuleRecordDto(mr.moduleId, mr.state, cr.identity.userId, mr.updatedAt,  mr.completionDate, mr.moduleTitle, mr.moduleType, mr.courseRecord.identity.courseId, mr.courseRecord.courseTitle) \" +\n             \"FROM ModuleRecord mr \" +\n             \"left join CourseRecord cr on cr.id = mr.courseRecord.id \" +\n             \"WHERE mr.updatedAt BETWEEN ?1 AND ?2 \" +\n             \"AND mr.courseRecord IS NOT EMPTY\")\n     List<ModuleRecordDto> findAllByCreatedAtBetweenAndCourseRecordIsNotNullNormalised(LocalDateTime from, LocalDateTime to);\n+\n+    @Query(\"SELECT new uk.gov.cslearning.record.dto.ModuleRecordDto(mr.moduleId, mr.state, cr.identity.userId, mr.updatedAt,  mr.completionDate, mr.moduleTitle, mr.moduleType, mr.courseRecord.identity.courseId, mr.courseRecord.courseTitle) \" +\n+            \"FROM ModuleRecord mr \" +\n+            \"left join CourseRecord cr on cr.id = mr.courseRecord.id \" +\n+            \"WHERE mr.updatedAt BETWEEN ?1 AND ?2 \" +\n+            \"AND mr.courseRecord.identity.userId in (?3) \" +\n+            \"AND mr.courseRecord IS NOT EMPTY\"\n+            )\n+    List<ModuleRecordDto> findForLearnerIdsByCreatedAtBetweenAndCourseRecordIsNotNullNormalised(LocalDateTime from, LocalDateTime to, List<String> learnerIds);\n }"
  },
  {
    "sha": "a9709e4b184e899f536139830dd19b1e3f6c5a42",
    "filename": "src/main/java/uk/gov/cslearning/record/service/ModuleRecordService.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/blob/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/main/java/uk/gov/cslearning/record/service/ModuleRecordService.java",
    "raw_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/raw/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/main/java/uk/gov/cslearning/record/service/ModuleRecordService.java",
    "contents_url": "https://api.github.com/repos/Civil-Service-Human-Resources/lpg-learner-record/contents/src/main/java/uk/gov/cslearning/record/service/ModuleRecordService.java?ref=fd863701abe9ce4f8f72d2d80df56dc2ddebf219",
    "patch": "@@ -22,4 +22,9 @@ public ModuleRecordService(ModuleRecordRepository moduleRecordRepository) {\n         return moduleRecordRepository\n                 .findAllByCreatedAtBetweenAndCourseRecordIsNotNullNormalised(periodStart.atStartOfDay(), periodEnd.plusDays(1).atStartOfDay());\n     }\n+\n+    public List<ModuleRecordDto> listRecordsForPeriodAndLearnerIds(LocalDate periodStart, LocalDate periodEnd, List<String> learnerIds) {\n+        return moduleRecordRepository\n+                .findForLearnerIdsByCreatedAtBetweenAndCourseRecordIsNotNullNormalised(periodStart.atStartOfDay(), periodEnd.plusDays(1).atStartOfDay(), learnerIds);\n+    }\n }"
  },
  {
    "sha": "7a8a7b5ac89dbfa70654ac387e377dcb41dfd8c4",
    "filename": "src/test/java/uk/gov/cslearning/record/repository/ModuleRecordRepositoryTest.java",
    "status": "modified",
    "additions": 86,
    "deletions": 1,
    "changes": 87,
    "blob_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/blob/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/test/java/uk/gov/cslearning/record/repository/ModuleRecordRepositoryTest.java",
    "raw_url": "https://github.com/Civil-Service-Human-Resources/lpg-learner-record/raw/fd863701abe9ce4f8f72d2d80df56dc2ddebf219/src/test/java/uk/gov/cslearning/record/repository/ModuleRecordRepositoryTest.java",
    "contents_url": "https://api.github.com/repos/Civil-Service-Human-Resources/lpg-learner-record/contents/src/test/java/uk/gov/cslearning/record/repository/ModuleRecordRepositoryTest.java?ref=fd863701abe9ce4f8f72d2d80df56dc2ddebf219",
    "patch": "@@ -12,6 +12,7 @@\n import uk.gov.cslearning.record.dto.ModuleRecordDto;\n \n import java.time.LocalDateTime;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n@@ -57,6 +58,90 @@ public void shouldReturnListOfRecordsCreatedBetweenTwoDates() {\n         assertEquals(moduleRecord2.getModuleId(), results.get(0).getModuleId());\n     }\n \n+    @Test\n+    public void shouldReturnListOfRecordsCreatedBetweenTwoDatesForGivenLearnerIds() {\n+\n+        List<String> learnerIds = new ArrayList<>();\n+        learnerIds.add(\"user-id-1\");\n+        learnerIds.add(\"user-id-2\");\n+\n+        CourseRecord courseRecord1 = new CourseRecord(\"course-id-1\", \"user-id-1\");\n+        courseRecord1.setCourseTitle(\"courseRecord1Title\");\n+\n+        LocalDateTime queryStart = LocalDateTime.now().minusDays(2);\n+\n+        ModuleRecord moduleRecord11 = new ModuleRecord(\"module-id-11\");\n+        moduleRecord11.setModuleTitle(\"moduleRecord11Title\");\n+        moduleRecord11.setModuleType(\"moduleRecord11Type\");\n+        moduleRecord11.setUpdatedAt(queryStart);\n+        moduleRecord11.setCompletionDate(queryStart);\n+        moduleRecord11.setState(State.COMPLETED);\n+        moduleRecord11.setCourseRecord(courseRecord1);\n+\n+        ModuleRecord moduleRecord12 = new ModuleRecord(\"module-id-12\");\n+        moduleRecord12.setModuleTitle(\"moduleRecord12Title\");\n+        moduleRecord12.setModuleType(\"moduleRecord12Type\");\n+        moduleRecord12.setUpdatedAt(queryStart);\n+        moduleRecord12.setCompletionDate(queryStart);\n+        moduleRecord12.setState(State.REGISTERED);\n+        moduleRecord12.setCourseRecord(courseRecord1);\n+\n+        ModuleRecord moduleRecord13 = new ModuleRecord(\"module-id-13\");\n+        moduleRecord13.setModuleTitle(\"moduleRecord13Title\");\n+        moduleRecord13.setModuleType(\"moduleRecord13Type\");\n+        moduleRecord13.setUpdatedAt(queryStart);\n+        moduleRecord13.setCompletionDate(queryStart);\n+        moduleRecord13.setState(State.IN_PROGRESS);\n+        moduleRecord13.setCourseRecord(courseRecord1);\n+\n+        CourseRecord courseRecord2 = new CourseRecord(\"course-id-2\", \"user-id-2\");\n+        courseRecord2.setCourseTitle(\"courseRecord2Title\");\n+\n+        ModuleRecord moduleRecord21 = new ModuleRecord(\"module-id-21\");\n+        moduleRecord21.setModuleTitle(\"moduleRecord21Title\");\n+        moduleRecord21.setModuleType(\"moduleRecord21Type\");\n+        moduleRecord21.setUpdatedAt(queryStart);\n+        moduleRecord21.setCompletionDate(queryStart);\n+        moduleRecord21.setState(State.APPROVED);\n+        moduleRecord21.setCourseRecord(courseRecord2);\n+\n+        ModuleRecord moduleRecord22 = new ModuleRecord(\"module-id-22\");\n+        moduleRecord22.setModuleTitle(\"moduleRecord22Title\");\n+        moduleRecord22.setModuleType(\"moduleRecord21Type\");\n+        moduleRecord22.setUpdatedAt(queryStart);\n+        moduleRecord22.setCompletionDate(queryStart);\n+        moduleRecord22.setState(State.REGISTERED);\n+        moduleRecord22.setCourseRecord(courseRecord2);\n+\n+        ModuleRecord moduleRecord23 = new ModuleRecord(\"module-id-23\");\n+        moduleRecord23.setModuleTitle(\"moduleRecord23Title\");\n+        moduleRecord23.setModuleType(\"moduleRecord23Type\");\n+        moduleRecord23.setUpdatedAt(LocalDateTime.now().minusDays(3));\n+        moduleRecord23.setCompletionDate(queryStart);\n+        moduleRecord23.setState(State.REGISTERED);\n+        moduleRecord23.setCourseRecord(courseRecord2);\n+\n+        List<ModuleRecord> moduleRecords = Arrays.asList(moduleRecord11, moduleRecord12, moduleRecord13, moduleRecord21, moduleRecord22, moduleRecord23);\n+        moduleRecordRepository.saveAll(moduleRecords);\n+\n+        LocalDateTime end = LocalDateTime.now().minusDays(1).minusMinutes(1);\n+        List<ModuleRecordDto> results = moduleRecordRepository.findForLearnerIdsByCreatedAtBetweenAndCourseRecordIsNotNullNormalised(queryStart, end, learnerIds);\n+\n+        assertEquals(5, results.size());\n+        for(int i = 0; i < results.size(); i++) {\n+            assertEquals(moduleRecords.get(i).getModuleId(), results.get(i).getModuleId());\n+            assertEquals(moduleRecords.get(i).getModuleTitle(), results.get(i).getModuleTitle());\n+            assertEquals(moduleRecords.get(i).getModuleType(), results.get(i).getModuleType());\n+            assertEquals(moduleRecords.get(i).getUpdatedAt(), results.get(i).getStateChangeDate());\n+            assertEquals(moduleRecords.get(i).getCompletionDate(), results.get(i).getCompletedAt());\n+            assertEquals(moduleRecords.get(i).getState().name(), results.get(i).getState());\n+            assertEquals(moduleRecords.get(i).getCourseRecord().getCourseId(), results.get(i).getCourseId());\n+            assertEquals(moduleRecords.get(i).getCourseRecord().getCourseTitle(), results.get(i).getCourseTitle());\n+            assertEquals(moduleRecords.get(i).getCourseRecord().getUserId(), results.get(i).getLearner());\n+            assertEquals(moduleRecords.get(i).getCourseRecord().getIdentity().getUserId(), results.get(i).getLearner());\n+        }\n+    }\n+\n     @Test\n     public void shouldPersistCourseRecordWithModuleRecord() {\n         String courseId = \"course-id\";\n@@ -69,4 +154,4 @@ public void shouldPersistCourseRecordWithModuleRecord() {\n \n         assertEquals(courseRecord, moduleRecordRepository.findById(id).get().getCourseRecord());\n     }\n-}\n\\ No newline at end of file\n+}"
  }
]
