[
  {
    "sha": "ee054caa63b1c48afca5bdee2fd87a1ad83d9780",
    "filename": "src/main/java/ch/njol/skript/effects/EffLoadServerIcon.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/SkriptLang/Skript/blob/6df288dacca34ac87730a5a46aa0eff43b73c113/src/main/java/ch/njol/skript/effects/EffLoadServerIcon.java",
    "raw_url": "https://github.com/SkriptLang/Skript/raw/6df288dacca34ac87730a5a46aa0eff43b73c113/src/main/java/ch/njol/skript/effects/EffLoadServerIcon.java",
    "contents_url": "https://api.github.com/repos/SkriptLang/Skript/contents/src/main/java/ch/njol/skript/effects/EffLoadServerIcon.java?ref=6df288dacca34ac87730a5a46aa0eff43b73c113",
    "patch": "@@ -27,6 +27,7 @@\n import org.bukkit.util.CachedServerIcon;\n import org.eclipse.jdt.annotation.Nullable;\n \n+import ch.njol.skript.ScriptLoader;\n import ch.njol.skript.Skript;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n@@ -69,6 +70,7 @@\n \t@SuppressWarnings({\"unchecked\", \"null\"})\n \t@Override\n \tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, SkriptParser.ParseResult parseResult) {\n+\t\tScriptLoader.hasDelayBefore = Kleenean.TRUE;\n \t\tif (!PAPER_EVENT_EXISTS) {\n \t\t\tSkript.error(\"The load server icon effect requires Paper 1.12.2 or newer\");\n \t\t\treturn false;\n@@ -79,7 +81,11 @@ public boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelaye\n \n     @Override\n     protected void execute(Event e) {\n-\t\tPath p = Paths.get(path.getSingle(e));\n+\t\tString pathString = path.getSingle(e);\n+\t\tif (pathString == null)\n+\t\t\treturn;\n+\t\t\n+\t\tPath p = Paths.get(pathString);\n \t\tif (Files.isRegularFile(p)) {\n \t\t\ttry {\n \t\t\t\tlastLoaded = Bukkit.loadServerIcon(p.toFile());"
  },
  {
    "sha": "9cfcdf3daac8c9b856ae807803b0d3f1fd2b5f17",
    "filename": "src/main/java/ch/njol/skript/util/AsyncEffect.java",
    "status": "modified",
    "additions": 29,
    "deletions": 34,
    "changes": 63,
    "blob_url": "https://github.com/SkriptLang/Skript/blob/6df288dacca34ac87730a5a46aa0eff43b73c113/src/main/java/ch/njol/skript/util/AsyncEffect.java",
    "raw_url": "https://github.com/SkriptLang/Skript/raw/6df288dacca34ac87730a5a46aa0eff43b73c113/src/main/java/ch/njol/skript/util/AsyncEffect.java",
    "contents_url": "https://api.github.com/repos/SkriptLang/Skript/contents/src/main/java/ch/njol/skript/util/AsyncEffect.java?ref=6df288dacca34ac87730a5a46aa0eff43b73c113",
    "patch": "@@ -18,6 +18,10 @@\n  */\n package ch.njol.skript.util;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n import ch.njol.skript.Skript;\n import ch.njol.skript.effects.Delay;\n import ch.njol.skript.lang.Effect;\n@@ -26,59 +30,50 @@\n import ch.njol.skript.timings.SkriptTimings;\n import ch.njol.skript.variables.Variables;\n \n-import org.bukkit.Bukkit;\n-import org.bukkit.event.Event;\n-import org.eclipse.jdt.annotation.Nullable;\n-\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-\n /**\n  * Effects that extend this class are ran asynchronously. Next trigger item will be ran\n  * in main server thread, as if there had been a delay before.\n  * <p>\n  * Majority of Skript and Minecraft APIs are not thread-safe, so be careful.\n- * Also, local variables are not available while executing asynchronous code.\n+ *\n+ * Make sure to add set {@link ch.njol.skript.ScriptLoader#hasDelayBefore} to\n+ * {@link ch.njol.util.Kleenean#TRUE} in the {@code init} method.\n  */\n public abstract class AsyncEffect extends Effect {\n \t\n \t@Override\n \t@Nullable\n \tprotected TriggerItem walk(Event e) {\n \t\tdebug(e, true);\n-\t\tTriggerItem next = getNext();\n \t\t\n \t\tDelay.addDelayedEvent(e); // Mark this event as delayed\n \t\tObject localVars = Variables.removeLocals(e); // Back up local variables\n \t\t\n-\t\tBukkit.getScheduler().runTaskAsynchronously(Skript.getInstance(), new Runnable() {\n-\t\t\t@SuppressWarnings(\"synthetic-access\")\n-\t\t\t@Override\n-\t\t\tpublic void run() {\n-\t\t\t\texecute(e); // Execute this effect\n-\t\t\t\t\n-\t\t\t\tBukkit.getScheduler().runTask(Skript.getInstance(), new Runnable() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void run() { // Walk to next item synchronously\n-\t\t\t\t\t\t// Re-set local variables\n-\t\t\t\t\t\tif (localVars != null)\n-\t\t\t\t\t\t\tVariables.setLocalVariables(e, localVars);\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tObject timing = null;\n-\t\t\t\t\t\tif (next != null) {\n-\t\t\t\t\t\t\tif (SkriptTimings.enabled()) { // getTrigger call is not free, do it only if we must\n-\t\t\t\t\t\t\t\tTrigger trigger = getTrigger();\n-\t\t\t\t\t\t\t\tif (trigger != null) {\n-\t\t\t\t\t\t\t\t\ttiming = SkriptTimings.start(trigger.getDebugLabel());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tTriggerItem.walk(next, e);\n+\t\tBukkit.getScheduler().runTaskAsynchronously(Skript.getInstance(), () -> {\n+\t\t\t// Re-set local variables\n+\t\t\tif (localVars != null)\n+\t\t\t\tVariables.setLocalVariables(e, localVars);\n+\t\t\t\n+\t\t\texecute(e); // Execute this effect\n+\t\t\t\n+\t\t\tif (getNext() != null) {\n+\t\t\t\tBukkit.getScheduler().runTask(Skript.getInstance(), () -> { // Walk to next item synchronously\n+\t\t\t\t\tObject timing = null;\n+\t\t\t\t\tif (SkriptTimings.enabled()) { // getTrigger call is not free, do it only if we must\n+\t\t\t\t\t\tTrigger trigger = getTrigger();\n+\t\t\t\t\t\tif (trigger != null) {\n+\t\t\t\t\t\t\ttiming = SkriptTimings.start(trigger.getDebugLabel());\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tVariables.removeLocals(e); // Clean up local vars, we may be exiting now\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tSkriptTimings.stop(timing); // Stop timing if it was even started\n \t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tTriggerItem.walk(getNext(), e);\n+\t\t\t\t\t\n+\t\t\t\t\tVariables.removeLocals(e); // Clean up local vars, we may be exiting now\n+\t\t\t\t\t\n+\t\t\t\t\tSkriptTimings.stop(timing); // Stop timing if it was even started\n \t\t\t\t});\n+\t\t\t} else {\n+\t\t\t\tVariables.removeLocals(e);\n \t\t\t}\n \t\t});\n \t\treturn null;"
  },
  {
    "sha": "469987b269acb0a506c2cfcf739bb3eed8f16925",
    "filename": "src/main/java/ch/njol/skript/variables/Variables.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/SkriptLang/Skript/blob/6df288dacca34ac87730a5a46aa0eff43b73c113/src/main/java/ch/njol/skript/variables/Variables.java",
    "raw_url": "https://github.com/SkriptLang/Skript/raw/6df288dacca34ac87730a5a46aa0eff43b73c113/src/main/java/ch/njol/skript/variables/Variables.java",
    "contents_url": "https://api.github.com/repos/SkriptLang/Skript/contents/src/main/java/ch/njol/skript/variables/Variables.java?ref=6df288dacca34ac87730a5a46aa0eff43b73c113",
    "patch": "@@ -28,6 +28,7 @@\n import java.util.Queue;\n import java.util.TreeMap;\n import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.locks.Lock;\n@@ -244,7 +245,7 @@ public void run() {\n \t/**\n \t * Not to be accessed outside of Bukkit's main thread!\n \t */\n-\tprivate final static Map<Event, VariablesMap> localVariables = new HashMap<>();\n+\tprivate final static Map<Event, VariablesMap> localVariables = new ConcurrentHashMap<>();\n \t\n \t/**\n \t * Remember to lock with {@link #getReadLock()} and to not make any changes!\n@@ -348,9 +349,7 @@ public static void setVariable(final String name, @Nullable Object value, final\n \t\t}\n \t\tif (local) {\n \t\t\tassert e != null : n;\n-\t\t\tVariablesMap map = localVariables.get(e);\n-\t\t\tif (map == null)\n-\t\t\t\tlocalVariables.put(e, map = new VariablesMap());\n+\t\t\tVariablesMap map = localVariables.computeIfAbsent(e, event -> new VariablesMap());\n \t\t\tmap.setVariable(n, value);\n \t\t} else {\n \t\t\tsetVariable(n, value);"
  }
]
