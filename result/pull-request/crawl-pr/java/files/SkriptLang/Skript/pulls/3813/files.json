[
  {
    "sha": "c2b4ba5b2e43ae7838fddb71fcd72bedb7d60846",
    "filename": "src/main/java/ch/njol/skript/Skript.java",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/SkriptLang/Skript/blob/5dcda1ead9c1d74c5a5f01bd8227fb2919940976/src/main/java/ch/njol/skript/Skript.java",
    "raw_url": "https://github.com/SkriptLang/Skript/raw/5dcda1ead9c1d74c5a5f01bd8227fb2919940976/src/main/java/ch/njol/skript/Skript.java",
    "contents_url": "https://api.github.com/repos/SkriptLang/Skript/contents/src/main/java/ch/njol/skript/Skript.java?ref=5dcda1ead9c1d74c5a5f01bd8227fb2919940976",
    "patch": "@@ -225,10 +225,16 @@ public static ServerPlatform getServerPlatform() {\n \t\t\treturn ServerPlatform.BUKKIT_UNKNOWN;\n \t\t}\n \t}\n-\t\n-\tpublic static boolean using64BitJava() {\n-\t\t// Property returned should either be \"Java HotSpot(TM) 64-Bit Server VM\" or \"OpenJDK 64-Bit Server VM\"\n-\t\treturn System.getProperty(\"java.vm.name\").contains(\"64\");\n+\n+\t/**\n+\t * Returns true if the underlying installed Java/JVM is 32-bit, false otherwise.\n+\t * Note that this depends on a internal system property and these can always be overridden by user using -D JVM options,\n+\t * more specifically, this method will return false on non OracleJDK/OpenJDK based JVMs, that don't include bit information in java.vm.name system property.\n+\t * @return Whether the installed Java/JVM is 32-bit or not.\n+\t */\n+\tprivate static boolean using32BitJava() {\n+\t\t// Property returned should either be \"Java HotSpot(TM) 32-Bit Server VM\" or \"OpenJDK 32-Bit Server VM\" if 32-bit and using OracleJDK/OpenJDK\n+\t\treturn System.getProperty(\"java.vm.name\").contains(\"32\");\n \t}\n \t\n \t/**\n@@ -277,12 +283,6 @@ private static boolean checkServerPlatform() {\n \t\t\tSkript.warning(\"Skript officially supports Paper and Spigot.\");\n \t\t}\n \t\t\n-\t\t// Throw a warning if the user is using 32-bit Java, since that is known to potentially cause StackOverflowErrors\n-\t\tif (!using64BitJava()) {\n-\t\t\tSkript.warning(\"You are currently using 32-bit Java. This may result in a StackOverflowError when loading aliases.\");\n-\t\t\tSkript.warning(\"Please update to 64-bit Java to remove this warning.\");\n-\t\t}\n-\t\t\n \t\t// If nothing got triggered, everything is probably ok\n \t\treturn true;\n \t}\n@@ -402,14 +402,14 @@ public void onEnable() {\n \t\ttry {\n \t\t\tAliases.load(); // Loaded before anything that might use them\n \t\t} catch (StackOverflowError e) {\n-\t\t\tif (using64BitJava()) {\n-\t\t\t\tthrow e; // Uh oh, this shouldn't happen. Re-throw the error.\n-\t\t\t} else {\n+\t\t\tif (using32BitJava()) {\n \t\t\t\tSkript.error(\"\");\n \t\t\t\tSkript.error(\"There was a StackOverflowError that occured while loading aliases.\");\n \t\t\t\tSkript.error(\"As you are currently using 32-bit Java, please update to 64-bit Java to resolve the error.\");\n \t\t\t\tSkript.error(\"Please report this issue to our GitHub only if updating to 64-bit Java does not fix the issue.\");\n \t\t\t\tSkript.error(\"\");\n+\t\t\t} else {\n+\t\t\t\tthrow e; // Uh oh, this shouldn't happen. Re-throw the error.\n \t\t\t}\n \t\t}\n \t\t"
  }
]
