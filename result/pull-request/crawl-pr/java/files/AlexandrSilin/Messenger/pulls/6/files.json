[
  {
    "sha": "df42782972c7a0335c6f26922a13b551435af15b",
    "filename": "Messenger.iml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AlexandrSilin/Messenger/blob/cb01e900999abaad0dde082930a93a2c84be5896/Messenger.iml",
    "raw_url": "https://github.com/AlexandrSilin/Messenger/raw/cb01e900999abaad0dde082930a93a2c84be5896/Messenger.iml",
    "contents_url": "https://api.github.com/repos/AlexandrSilin/Messenger/contents/Messenger.iml?ref=cb01e900999abaad0dde082930a93a2c84be5896",
    "patch": "@@ -7,6 +7,6 @@\n     </content>\n     <orderEntry type=\"inheritedJdk\" />\n     <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n-    <orderEntry type=\"library\" name=\"postgresql-42.2.19\" level=\"project\" />\n+    <orderEntry type=\"library\" name=\"postgresql-42.2.19\" level=\"application\" />\n   </component>\n </module>\n\\ No newline at end of file"
  },
  {
    "sha": "61a9bdf116e2b33686898cc39381a640dac4a366",
    "filename": "src/main/java/clientside/one/EchoClient.java",
    "status": "modified",
    "additions": 59,
    "deletions": 15,
    "changes": 74,
    "blob_url": "https://github.com/AlexandrSilin/Messenger/blob/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/clientside/one/EchoClient.java",
    "raw_url": "https://github.com/AlexandrSilin/Messenger/raw/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/clientside/one/EchoClient.java",
    "contents_url": "https://api.github.com/repos/AlexandrSilin/Messenger/contents/src/main/java/clientside/one/EchoClient.java?ref=cb01e900999abaad0dde082930a93a2c84be5896",
    "patch": "@@ -4,27 +4,38 @@\n import java.awt.*;\n import java.awt.event.WindowAdapter;\n import java.awt.event.WindowEvent;\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n \n import static java.lang.Thread.sleep;\n \n public class EchoClient extends JFrame {\n \n     private final Integer SERVER_PORT = 8081;\n     private final String SERVER_ADDRESS = \"localhost\";\n+\n     private Socket socket;\n+\n     private DataInputStream dis;\n     private DataOutputStream dos;\n+    private FileOutputStream fos;\n+    private RandomAccessFile accessFile;\n+\n+    private File history;\n+\n+    private ExecutorService executor;\n+\n     private boolean isAuthorized = false;\n     private boolean isTimeout = false;\n \n     private JTextField msgInputField;\n     private JTextArea chatArea;\n \n     public EchoClient() {\n+        executor = Executors.newCachedThreadPool();\n         try {\n             connection();\n         } catch (IOException e) {\n@@ -38,7 +49,7 @@ public void connection() throws IOException {\n         dis = new DataInputStream(socket.getInputStream());\n         dos = new DataOutputStream(socket.getOutputStream());\n \n-        new Thread(() -> {\n+        Thread timeout = new Thread(() -> {\n             try {\n                 sleep(120000);\n                 if (!isAuthorized){\n@@ -49,39 +60,73 @@ public void connection() throws IOException {\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }\n-        }).start();\n+        });\n \n-        new Thread(() -> {\n+        Thread write = new Thread(() -> {\n             try {\n                 sleep(2000);\n                 while (!isTimeout) {\n                     String messageFromServer = dis.readUTF();\n                     if (messageFromServer.startsWith(\"/authok\")) {\n                         isAuthorized = true;\n                         chatArea.append(messageFromServer + \"\\n\");\n+                        history = new File(\"history.txt\");\n+                        accessFile = new RandomAccessFile(history, \"r\");\n+                        try {\n+                            fos = new FileOutputStream(history, true);\n+                            StringBuilder message = new StringBuilder();\n+                            int number;\n+                            int countMessages = 0;\n+                            int start = (int) history.length() - 1;\n+                            accessFile.seek(start);\n+                            try {\n+                                while (start > 0 && countMessages < 100) {\n+                                    number = accessFile.read();\n+                                    start--;\n+                                    accessFile.seek(start);\n+                                    message.insert(0, (char)number);\n+                                    if ((char) number == '\\n'){\n+                                        countMessages++;\n+                                    }\n+                                }\n+                            } catch (IOException e) {\n+                                System.out.println(\"Can't read history\");\n+                            }\n+                            chatArea.append(message.toString());\n+                        } catch (FileNotFoundException e) {\n+                            System.out.println(\"File not found\");\n+                        }\n                         break;\n                     }\n                     chatArea.append(messageFromServer + \"\\n\");\n                 }\n \n                 while (isAuthorized) {\n-                    String messageFromServer = dis.readUTF();\n-                    chatArea.append(messageFromServer + \"\\n\");\n-                }\n-            } catch (IOException | InterruptedException ignored) {\n+                    String messageFromServer = dis.readUTF() + '\\n';\n+                    fos.write(messageFromServer.getBytes(StandardCharsets.UTF_8));\n+                    chatArea.append(messageFromServer);\n \n+                }\n+            } catch (IOException | InterruptedException e) {\n+                e.printStackTrace();\n             }\n-        }).start();\n+        });\n+\n+        executor.execute(timeout);\n+        executor.execute(write);\n     }\n \n     public void send() {\n         if (msgInputField.getText() != null && !msgInputField.getText().trim().isEmpty()) {\n             try {\n-                dos.writeUTF(msgInputField.getText());\n+                String message = msgInputField.getText();\n+                dos.writeUTF(message);\n                 if (msgInputField.getText().equals(\"/end\")) {\n                     isAuthorized = false;\n+                    fos.close();\n                     closeConnection();\n                 }\n+\n                 msgInputField.setText(\"\");\n             } catch (IOException ignored) {\n             }\n@@ -94,6 +139,7 @@ private void closeConnection() {\n             dos.close();\n             socket.close();\n             chatArea.append(\"Disconnected\\n\");\n+            executor.shutdownNow();\n         } catch (IOException ignored) {\n         }\n     }\n@@ -148,8 +194,6 @@ public void windowClosing(WindowEvent e) {\n     }\n \n     public static void main(String[] args) {\n-        SwingUtilities.invokeLater(() -> {\n-            new EchoClient();\n-        });\n+        SwingUtilities.invokeLater(EchoClient::new);\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "03b2a7d6775692b1dc7cd3fc3c5ee094dfc50b86",
    "filename": "src/main/java/clientside/three/EchoClient.java",
    "status": "modified",
    "additions": 59,
    "deletions": 15,
    "changes": 74,
    "blob_url": "https://github.com/AlexandrSilin/Messenger/blob/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/clientside/three/EchoClient.java",
    "raw_url": "https://github.com/AlexandrSilin/Messenger/raw/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/clientside/three/EchoClient.java",
    "contents_url": "https://api.github.com/repos/AlexandrSilin/Messenger/contents/src/main/java/clientside/three/EchoClient.java?ref=cb01e900999abaad0dde082930a93a2c84be5896",
    "patch": "@@ -4,27 +4,38 @@\n import java.awt.*;\n import java.awt.event.WindowAdapter;\n import java.awt.event.WindowEvent;\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n \n import static java.lang.Thread.sleep;\n \n public class EchoClient extends JFrame {\n \n     private final Integer SERVER_PORT = 8081;\n     private final String SERVER_ADDRESS = \"localhost\";\n+\n     private Socket socket;\n+\n     private DataInputStream dis;\n     private DataOutputStream dos;\n+    private FileOutputStream fos;\n+    private RandomAccessFile accessFile;\n+\n+    private File history;\n+\n+    private ExecutorService executor;\n+\n     private boolean isAuthorized = false;\n     private boolean isTimeout = false;\n \n     private JTextField msgInputField;\n     private JTextArea chatArea;\n \n     public EchoClient() {\n+        executor = Executors.newCachedThreadPool();\n         try {\n             connection();\n         } catch (IOException e) {\n@@ -38,7 +49,7 @@ public void connection() throws IOException {\n         dis = new DataInputStream(socket.getInputStream());\n         dos = new DataOutputStream(socket.getOutputStream());\n \n-        new Thread(() -> {\n+        Thread timeout = new Thread(() -> {\n             try {\n                 sleep(120000);\n                 if (!isAuthorized){\n@@ -49,39 +60,73 @@ public void connection() throws IOException {\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }\n-        }).start();\n+        });\n \n-        new Thread(() -> {\n+        Thread write = new Thread(() -> {\n             try {\n                 sleep(2000);\n                 while (!isTimeout) {\n                     String messageFromServer = dis.readUTF();\n                     if (messageFromServer.startsWith(\"/authok\")) {\n                         isAuthorized = true;\n                         chatArea.append(messageFromServer + \"\\n\");\n+                        history = new File(\"history.txt\");\n+                        accessFile = new RandomAccessFile(history, \"r\");\n+                        try {\n+                            fos = new FileOutputStream(history, true);\n+                            StringBuilder message = new StringBuilder();\n+                            int number;\n+                            int countMessages = 0;\n+                            int start = (int) history.length() - 1;\n+                            accessFile.seek(start);\n+                            try {\n+                                while (start > 0 && countMessages < 100) {\n+                                    number = accessFile.read();\n+                                    start--;\n+                                    accessFile.seek(start);\n+                                    message.insert(0, (char)number);\n+                                    if ((char) number == '\\n'){\n+                                        countMessages++;\n+                                    }\n+                                }\n+                            } catch (IOException e) {\n+                                System.out.println(\"Can't read history\");\n+                            }\n+                            chatArea.append(message.toString());\n+                        } catch (FileNotFoundException e) {\n+                            System.out.println(\"File not found\");\n+                        }\n                         break;\n                     }\n                     chatArea.append(messageFromServer + \"\\n\");\n                 }\n \n                 while (isAuthorized) {\n-                    String messageFromServer = dis.readUTF();\n-                    chatArea.append(messageFromServer + \"\\n\");\n-                }\n-            } catch (IOException | InterruptedException ignored) {\n+                    String messageFromServer = dis.readUTF() + '\\n';\n+                    fos.write(messageFromServer.getBytes(StandardCharsets.UTF_8));\n+                    chatArea.append(messageFromServer);\n \n+                }\n+            } catch (IOException | InterruptedException e) {\n+                e.printStackTrace();\n             }\n-        }).start();\n+        });\n+\n+        executor.execute(timeout);\n+        executor.execute(write);\n     }\n \n     public void send() {\n         if (msgInputField.getText() != null && !msgInputField.getText().trim().isEmpty()) {\n             try {\n-                dos.writeUTF(msgInputField.getText());\n+                String message = msgInputField.getText();\n+                dos.writeUTF(message);\n                 if (msgInputField.getText().equals(\"/end\")) {\n                     isAuthorized = false;\n+                    fos.close();\n                     closeConnection();\n                 }\n+\n                 msgInputField.setText(\"\");\n             } catch (IOException ignored) {\n             }\n@@ -94,6 +139,7 @@ private void closeConnection() {\n             dos.close();\n             socket.close();\n             chatArea.append(\"Disconnected\\n\");\n+            executor.shutdownNow();\n         } catch (IOException ignored) {\n         }\n     }\n@@ -148,8 +194,6 @@ public void windowClosing(WindowEvent e) {\n     }\n \n     public static void main(String[] args) {\n-        SwingUtilities.invokeLater(() -> {\n-            new EchoClient();\n-        });\n+        SwingUtilities.invokeLater(EchoClient::new);\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "d35f922b4662063b9884e58a54a697d075fb8bb3",
    "filename": "src/main/java/clientside/two/EchoClient.java",
    "status": "modified",
    "additions": 59,
    "deletions": 15,
    "changes": 74,
    "blob_url": "https://github.com/AlexandrSilin/Messenger/blob/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/clientside/two/EchoClient.java",
    "raw_url": "https://github.com/AlexandrSilin/Messenger/raw/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/clientside/two/EchoClient.java",
    "contents_url": "https://api.github.com/repos/AlexandrSilin/Messenger/contents/src/main/java/clientside/two/EchoClient.java?ref=cb01e900999abaad0dde082930a93a2c84be5896",
    "patch": "@@ -4,27 +4,38 @@\n import java.awt.*;\n import java.awt.event.WindowAdapter;\n import java.awt.event.WindowEvent;\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n \n import static java.lang.Thread.sleep;\n \n public class EchoClient extends JFrame {\n \n     private final Integer SERVER_PORT = 8081;\n     private final String SERVER_ADDRESS = \"localhost\";\n+\n     private Socket socket;\n+\n     private DataInputStream dis;\n     private DataOutputStream dos;\n+    private FileOutputStream fos;\n+    private RandomAccessFile accessFile;\n+\n+    private File history;\n+\n+    private ExecutorService executor;\n+\n     private boolean isAuthorized = false;\n     private boolean isTimeout = false;\n \n     private JTextField msgInputField;\n     private JTextArea chatArea;\n \n     public EchoClient() {\n+        executor = Executors.newCachedThreadPool();\n         try {\n             connection();\n         } catch (IOException e) {\n@@ -38,7 +49,7 @@ public void connection() throws IOException {\n         dis = new DataInputStream(socket.getInputStream());\n         dos = new DataOutputStream(socket.getOutputStream());\n \n-        new Thread(() -> {\n+        Thread timeout = new Thread(() -> {\n             try {\n                 sleep(120000);\n                 if (!isAuthorized){\n@@ -49,39 +60,73 @@ public void connection() throws IOException {\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }\n-        }).start();\n+        });\n \n-        new Thread(() -> {\n+        Thread write = new Thread(() -> {\n             try {\n                 sleep(2000);\n                 while (!isTimeout) {\n                     String messageFromServer = dis.readUTF();\n                     if (messageFromServer.startsWith(\"/authok\")) {\n                         isAuthorized = true;\n                         chatArea.append(messageFromServer + \"\\n\");\n+                        history = new File(\"history.txt\");\n+                        accessFile = new RandomAccessFile(history, \"r\");\n+                        try {\n+                            fos = new FileOutputStream(history, true);\n+                            StringBuilder message = new StringBuilder();\n+                            int number;\n+                            int countMessages = 0;\n+                            int start = (int) history.length() - 1;\n+                            accessFile.seek(start);\n+                            try {\n+                                while (start > 0 && countMessages < 100) {\n+                                    number = accessFile.read();\n+                                    start--;\n+                                    accessFile.seek(start);\n+                                    message.insert(0, (char)number);\n+                                    if ((char) number == '\\n'){\n+                                        countMessages++;\n+                                    }\n+                                }\n+                            } catch (IOException e) {\n+                                System.out.println(\"Can't read history\");\n+                            }\n+                            chatArea.append(message.toString());\n+                        } catch (FileNotFoundException e) {\n+                            System.out.println(\"File not found\");\n+                        }\n                         break;\n                     }\n                     chatArea.append(messageFromServer + \"\\n\");\n                 }\n \n                 while (isAuthorized) {\n-                    String messageFromServer = dis.readUTF();\n-                    chatArea.append(messageFromServer + \"\\n\");\n-                }\n-            } catch (IOException | InterruptedException ignored) {\n+                    String messageFromServer = dis.readUTF() + '\\n';\n+                    fos.write(messageFromServer.getBytes(StandardCharsets.UTF_8));\n+                    chatArea.append(messageFromServer);\n \n+                }\n+            } catch (IOException | InterruptedException e) {\n+                e.printStackTrace();\n             }\n-        }).start();\n+        });\n+\n+        executor.execute(timeout);\n+        executor.execute(write);\n     }\n \n     public void send() {\n         if (msgInputField.getText() != null && !msgInputField.getText().trim().isEmpty()) {\n             try {\n-                dos.writeUTF(msgInputField.getText());\n+                String message = msgInputField.getText();\n+                dos.writeUTF(message);\n                 if (msgInputField.getText().equals(\"/end\")) {\n                     isAuthorized = false;\n+                    fos.close();\n                     closeConnection();\n                 }\n+\n                 msgInputField.setText(\"\");\n             } catch (IOException ignored) {\n             }\n@@ -94,6 +139,7 @@ private void closeConnection() {\n             dos.close();\n             socket.close();\n             chatArea.append(\"Disconnected\\n\");\n+            executor.shutdownNow();\n         } catch (IOException ignored) {\n         }\n     }\n@@ -148,8 +194,6 @@ public void windowClosing(WindowEvent e) {\n     }\n \n     public static void main(String[] args) {\n-        SwingUtilities.invokeLater(() -> {\n-            new EchoClient();\n-        });\n+        SwingUtilities.invokeLater(EchoClient::new);\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "ca560e178b32927d769acb534993aafe11e5e8b0",
    "filename": "src/main/java/serverside/service/BaseAuthService.java",
    "status": "modified",
    "additions": 0,
    "deletions": 15,
    "changes": 15,
    "blob_url": "https://github.com/AlexandrSilin/Messenger/blob/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/serverside/service/BaseAuthService.java",
    "raw_url": "https://github.com/AlexandrSilin/Messenger/raw/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/serverside/service/BaseAuthService.java",
    "contents_url": "https://api.github.com/repos/AlexandrSilin/Messenger/contents/src/main/java/serverside/service/BaseAuthService.java?ref=cb01e900999abaad0dde082930a93a2c84be5896",
    "patch": "@@ -6,8 +6,6 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n-import java.util.ArrayList;\n-import java.util.List;\n \n public class BaseAuthService implements AuthService {\n \n@@ -21,7 +19,6 @@ public BaseAuthService() {\n         } catch (SQLException | ClassNotFoundException throwables) {\n             throwables.printStackTrace();\n         }\n-        //insert into users (\"login\", \"password\", \"nick\") values ('Vladimir', '123456', 'Three');\n     }\n \n     @Override\n@@ -40,16 +37,4 @@ public String getNickByLoginAndPassword(String login, String password) throws SQ\n                         \"'AND password = \" + \"'\" + password + \"'\");\n         return set.next() ? set.getString(\"nick\") : null;\n     }\n-\n-    /*private class Entry {\n-        private String login;\n-        private String password;\n-        private String nick;\n-\n-        public Entry(String login, String password, String nick) {\n-            this.login = login;\n-            this.password = password;\n-            this.nick = nick;\n-        }\n-    }*/\n }\n\\ No newline at end of file"
  },
  {
    "sha": "a60cf053251c9165f94a15e6c83834b2a33108d4",
    "filename": "src/main/java/serverside/service/ClientHandler.java",
    "status": "modified",
    "additions": 14,
    "deletions": 22,
    "changes": 36,
    "blob_url": "https://github.com/AlexandrSilin/Messenger/blob/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/serverside/service/ClientHandler.java",
    "raw_url": "https://github.com/AlexandrSilin/Messenger/raw/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/serverside/service/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/AlexandrSilin/Messenger/contents/src/main/java/serverside/service/ClientHandler.java?ref=cb01e900999abaad0dde082930a93a2c84be5896",
    "patch": "@@ -6,22 +6,27 @@\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n \n public class ClientHandler {\n \n     private MyServer myServer;\n     private Socket socket;\n+\n     private DataInputStream dis;\n     private DataOutputStream dos;\n+\n     private Connection connection;\n     private Statement statement;\n-    private File history;\n-    private FileInputStream fis;\n \n     private String name;\n     private long timer;\n \n+    private ExecutorService executor;\n+\n     public ClientHandler(MyServer myServer, Socket socket) {\n+        executor = Executors.newCachedThreadPool();\n         try {\n             this.myServer = myServer;\n             this.socket = socket;\n@@ -36,17 +41,17 @@ public ClientHandler(MyServer myServer, Socket socket) {\n                 throwables.printStackTrace();\n             }\n \n-            new Thread(() -> {\n+            Thread clientAuth = new Thread(() -> {\n                 try {\n                     authentication();\n                     readMessage();\n                 } catch (IOException ignored) {\n                 } finally {\n                     closeConnection();\n                 }\n+            });\n \n-            }).start();\n-\n+            executor.execute(clientAuth);\n         } catch (IOException e) {\n             closeConnection();\n             throw new RuntimeException(\"Problem with ClientHandler\");\n@@ -74,20 +79,6 @@ public void authentication() throws IOException {\n                         name = nick;\n                         myServer.broadcastMessage(\"Hello \" + name);\n                         myServer.subscribe(this);\n-                        history = myServer.getHistory();\n-                        fis = new FileInputStream(history);\n-                        StringBuilder message = new StringBuilder();\n-                        int number;\n-                        int countMessages = 0;\n-                        try {\n-                            while ((number = fis.read()) != -1 && countMessages < 100) {\n-                                message.append((char) number);\n-                                countMessages++;\n-                            }\n-                        } catch (IOException e) {\n-                            System.out.println(\"Can't read history\");\n-                        }\n-                        sendMessage(message.toString());\n                     } else {\n                         sendMessage(\"Nick is busy\");\n                     }\n@@ -106,7 +97,7 @@ public void authentication() throws IOException {\n \n     public void readMessage() throws IOException {\n \n-        new Thread(() -> {\n+        Thread clientMessage = new Thread(() -> {\n             timer = System.currentTimeMillis();\n             while (true) {\n                 if (System.currentTimeMillis() - timer > 300000) {\n@@ -115,14 +106,16 @@ public void readMessage() throws IOException {\n                 }\n             }\n             closeConnection();\n-        }).start();\n+        });\n \n+        executor.execute(clientMessage);\n         while (true) {\n             String messageFromClient = dis.readUTF().trim();\n             timer = System.currentTimeMillis();\n             System.out.println(name + \" send message \" + messageFromClient);\n             if (messageFromClient.startsWith(\"/\")){\n                 if (messageFromClient.equals(\"/end\")) {\n+                    executor.shutdownNow();\n                     return;\n                 }\n                 else if (messageFromClient.startsWith(\"/change\")){\n@@ -161,7 +154,6 @@ else if (messageFromClient.startsWith(\"/w\")) {\n                 }\n             } else {\n                 myServer.broadcastMessage(name + \": \" + messageFromClient);\n-                myServer.addToHistory(name + \": \" + messageFromClient);\n             }\n         }\n     }"
  },
  {
    "sha": "129368cf12b1a58e0fa23bf476c57df1d42aa1dc",
    "filename": "src/main/java/serverside/service/Connect.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AlexandrSilin/Messenger/blob/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/serverside/service/Connect.java",
    "raw_url": "https://github.com/AlexandrSilin/Messenger/raw/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/serverside/service/Connect.java",
    "contents_url": "https://api.github.com/repos/AlexandrSilin/Messenger/contents/src/main/java/serverside/service/Connect.java?ref=cb01e900999abaad0dde082930a93a2c84be5896",
    "patch": "@@ -5,7 +5,7 @@\n import java.sql.SQLException;\n \n public final class Connect {\n-    private static final String DB_URL = \"jdbc:postgresql://127.0.0.1:5432/postgres\";\n+    private static final String DB_URL = \"jdbc:postgresql://127.0.0.1:5433/postgres\";\n     private static final String USER = \"postgres\";\n     private static final String PASS = \"postgres\";\n     private static final String DRIVER = \"org.postgresql.Driver\";"
  },
  {
    "sha": "704f60ca646926ad98fc83b4561c826f8000e1e4",
    "filename": "src/main/java/serverside/service/MyServer.java",
    "status": "modified",
    "additions": 0,
    "deletions": 23,
    "changes": 23,
    "blob_url": "https://github.com/AlexandrSilin/Messenger/blob/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/serverside/service/MyServer.java",
    "raw_url": "https://github.com/AlexandrSilin/Messenger/raw/cb01e900999abaad0dde082930a93a2c84be5896/src/main/java/serverside/service/MyServer.java",
    "contents_url": "https://api.github.com/repos/AlexandrSilin/Messenger/contents/src/main/java/serverside/service/MyServer.java?ref=cb01e900999abaad0dde082930a93a2c84be5896",
    "patch": "@@ -13,8 +13,6 @@\n     private final int PORT = 8081;\n \n     private List<ClientHandler> clients;\n-    private File history;\n-    private FileOutputStream fos;\n \n     private AuthService authService;\n \n@@ -23,13 +21,6 @@ public AuthService getAuthService() {\n     }\n \n     public MyServer() {\n-        history = new File(\"history.txt\");\n-        try {\n-            fos = new FileOutputStream(history, true);\n-        } catch (FileNotFoundException e) {\n-            System.out.println(\"File not found\");\n-        }\n-\n         try (ServerSocket server = new ServerSocket(PORT)){\n             authService = new BaseAuthService();\n             authService.start();\n@@ -53,11 +44,6 @@ public MyServer() {\n     }\n \n     public synchronized void broadcastMessage(String message) {\n-        try {\n-            addToHistory(message);\n-        } catch (IOException e) {\n-            System.out.println(\"Can't write history\");\n-        }\n         for (ClientHandler c : clients) {\n             c.sendMessage(message);\n         }\n@@ -80,15 +66,6 @@ public boolean isNickBusy(String nick) {\n         return false;\n     }\n \n-    public void addToHistory(String message) throws IOException {\n-        message += '\\n';\n-        fos.write(message.getBytes(StandardCharsets.UTF_8));\n-    }\n-\n-    public File getHistory(){\n-        return history;\n-    }\n-\n     public List<ClientHandler> getClients(){\n         return clients;\n     }"
  }
]
