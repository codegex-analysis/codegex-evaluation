[
  {
    "sha": "53dc82e3b59c3a58fef111b1ca0cb7176d4cf9f6",
    "filename": "Projects/DesignPatterns/README.txt",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/README.txt",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/README.txt",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/README.txt?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,8 @@\n+Buzatu-Pahontu Mihnea-Nicolae\n+\n+Am creat un editor care poate compune imagini de tip \"ASCII Art\" din \n+forme geometrice simple.\n+Am folosit Singleton pentru Editor, Factory pentru a construi mai usor\n+formele geometrice si Decorator pentru a compune imaginea.\n+\n+Este inclus si un exemplu de imagine la care am lucrat prea mult :)"
  },
  {
    "sha": "9b9f2043f4af18cb60dae546bc133718800bc7b1",
    "filename": "Projects/DesignPatterns/sample.txt",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/sample.txt",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/sample.txt",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/sample.txt?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,20 @@\n+     %                                  \n+   %%%%%                                \n+  %%%%%%%                               \n+  %%%%%%%                               \n+ %%%%%%%%%            ^^^^^             \n+  %%%%%%%             ^^^^              \n+  %%%%%%%             ^^^  ^^^^         \n+   %%%%%              ^^   ^^^          \n+     %                ^    ^^   ^^^     \n+                           ^    ^^      \n+              *                 ^       \n+             *      *                   \n+             *     *                    \n+            ||    ||                    \n+         ###||####||###                 \n+~~~~~~~~~##############~~~~~~~~~~~~~~~~~\n+~~~~~~~~~~############~~~~~~~~~~~~~~~~~~\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  },
  {
    "sha": "9fd7c93585db05d94af095299e0ef61591659c22",
    "filename": "Projects/DesignPatterns/src/Circle.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Circle.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Circle.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/Circle.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,28 @@\n+public class Circle implements GeometricObject{\n+    private int[] poz;\n+    private int rad;\n+    private char fill;\n+\n+    public Circle() {\n+    }\n+\n+    public Circle(int pozX, int pozY, int diameter, char fill) {\n+        poz = new int[2];\n+        poz[1] = pozX;\n+        poz[0] = pozY;\n+        this.rad = diameter/2;\n+        this.fill = fill;\n+    }\n+\n+    @Override\n+    public char[][] drawOn(DecoratableImage image) {\n+        char[][] canvas = image.Decorate();\n+        if (poz[0] < 0 || poz[1] < 0)\n+            return canvas;\n+        for (int i = poz[0]; i < poz[0] + 2 * rad + 1 && i < image.getHeight(); i++)\n+            for (int j = poz[1]; j < poz[1] + 2 * rad + 1 && j < image.getWidth(); j++)\n+                if (Math.pow((i - poz[0] - rad), 2) + Math.pow((j - poz[1] - rad), 2) <= rad * rad + 0.5)\n+                    canvas[i][j] = fill;\n+        return canvas;\n+    }\n+}"
  },
  {
    "sha": "7cd6dd7bdcef9293d0766597782926c2a1ed25a0",
    "filename": "Projects/DesignPatterns/src/DecoratableImage.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/DecoratableImage.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/DecoratableImage.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/DecoratableImage.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,7 @@\n+public interface DecoratableImage {\n+    //Decorator\n+    int getHeight();\n+    int getWidth();\n+    DecoratableImage lastImage();\n+    char[][] Decorate();\n+}"
  },
  {
    "sha": "53af14ae4308b7f037ca300ba6152eae62b35601",
    "filename": "Projects/DesignPatterns/src/Editor.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Editor.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Editor.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/Editor.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,105 @@\n+import java.io.*;\n+\n+public class Editor {\n+    //Singleton\n+    public static Editor INSTANCE;\n+    private DecoratableImage image;\n+\n+    private Editor() {\n+    }\n+\n+    public static Editor getInstance() {\n+        if (INSTANCE == null) {\n+            INSTANCE = new Editor();\n+        }\n+        return INSTANCE;\n+    }\n+\n+    public void newImage(int height, int width, char fill) {\n+        image = new Image(height, width, fill);\n+    }\n+\n+    public void add(String type, int pozX, int pozY, int size, char fill) {\n+        add(GeometricObjectFactory.createGeometricObject(type, pozX, pozY, size, fill));\n+    }\n+\n+    public void add(GeometricObject obj) {\n+        if (obj == null)\n+            return;\n+        image = new ImageDecorator(image, obj);\n+    }\n+\n+    public void undo() {\n+        image = image.lastImage();\n+    }\n+\n+    public void print() {\n+        char[][] canvas = image.Decorate();\n+        for (int i = 0; i < image.getHeight(); i ++) {\n+            for (int j = 0; j < image.getWidth(); j ++) {\n+                System.out.print(canvas[i][j]);\n+            }\n+            System.out.print('\\n');\n+        }\n+    }\n+\n+    public void exportToTxt(String filename) {\n+        BufferedOutputStream outputStream;\n+        try {\n+            outputStream = new BufferedOutputStream(new FileOutputStream(new File(filename)));\n+        } catch (FileNotFoundException e) {\n+            System.out.println(\"Cannot create file.\");\n+            return;\n+        }\n+        char[][] canvas = image.Decorate();\n+        for (int i = 0; i < image.getHeight(); i ++) {\n+            for (int j = 0; j < image.getWidth(); j ++) {\n+                try {\n+                    outputStream.write(canvas[i][j]);\n+                } catch (IOException e) {\n+                    System.out.println(\"Cannot write to file.\");\n+                    return;\n+                }\n+            }\n+            try {\n+                outputStream.write('\\n');\n+            } catch (IOException e) {\n+                System.out.println(\"Cannot write to file.\");\n+                return;\n+            }\n+        }\n+        try {\n+            outputStream.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        //Simple test example\n+        Editor editor = Editor.getInstance();\n+        editor.newImage(20,40, ' ');\n+        editor.add(GeometricObjectFactory.createGeometricObject(\"square\", 0, 15, 100, '~'));\n+        editor.add(GeometricObjectFactory.createGeometricObject(\"circle\", 1, 0, 8, '%'));\n+        editor.add(GeometricObjectFactory.createGeometricObject(\"triangle\", 22, 4, 5, '^'));\n+        editor.add(\"triangle\", 27, 6, 4, '^');\n+        editor.add(\"triangle\", 32, 8, 3, '^');\n+        editor.add(\"rectangle\", 10, 14, 3, '#');\n+        editor.add(\"rectangle\", 16, 14, 3, '#');\n+        editor.add(\"square\", 9, 14, 2, '#');\n+        editor.add(\"square\", 21, 14, 2, '#');\n+        editor.add(\"square\", 12, 13, 2, '|');\n+        editor.add(\"square\", 18, 13, 2, '|');\n+        editor.add(\"square\", 13, 12, 1, '*');\n+        editor.add(\"square\", 19, 12, 1, '*');\n+        editor.add(\"square\", 13, 11, 1, '*');\n+        editor.add(\"square\", 20, 11, 1, '*');\n+        editor.add(\"square\", 14, 10, 1, '*');\n+        editor.exportToTxt(\"sample.txt\");\n+        editor.add(\"square\", 5, 5, 100, '$');\n+        editor.undo();\n+        editor.print();\n+\n+    }\n+\n+}"
  },
  {
    "sha": "ee7298a28d62778d20081c02a2f9ed25950817fe",
    "filename": "Projects/DesignPatterns/src/GeometricObject.java",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/GeometricObject.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/GeometricObject.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/GeometricObject.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,3 @@\n+public interface GeometricObject {\n+    char[][] drawOn(DecoratableImage image);\n+}"
  },
  {
    "sha": "ca5c0f0a4e5795d18b138e5248cbb65e72a9971f",
    "filename": "Projects/DesignPatterns/src/GeometricObjectFactory.java",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/GeometricObjectFactory.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/GeometricObjectFactory.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/GeometricObjectFactory.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,20 @@\n+public class GeometricObjectFactory {\n+    //Factory\n+    static GeometricObject createGeometricObject(String type, int pozX, int pozY, int size, char fill) {\n+        if (type.toLowerCase().equals(\"circle\")) {\n+            return new Circle(pozX, pozY, size, fill);\n+        }\n+        else if (type.toLowerCase().equals(\"square\")) {\n+            return new Square(pozX, pozY, size, fill);\n+        }\n+        else if (type.toLowerCase().equals(\"triangle\")) {\n+            return new Triangle(pozX, pozY, size, fill);\n+        }\n+        else if (type.toLowerCase().equals(\"rectangle\")) {\n+            return new Rectangle(pozX, pozY, size, fill);\n+        }\n+        else {\n+            return null;\n+        }\n+    }\n+}"
  },
  {
    "sha": "6c91275326a2b445e2aa318a8155b8389e1f75ae",
    "filename": "Projects/DesignPatterns/src/Image.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Image.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Image.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/Image.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,36 @@\n+public class Image implements DecoratableImage {\n+    private char[][] canvas;\n+    private int height;\n+    private int width;\n+\n+    public Image() {\n+    }\n+\n+    public Image(int height, int width, char fill) {\n+        this.height = height;\n+        this.width = width;\n+        canvas = new char[height][width];\n+        for (int i = 0; i < height; i++) {\n+            for (int j = 0; j < width; j++) {\n+                canvas[i][j] = fill;\n+            }\n+        }\n+    }\n+\n+    public DecoratableImage lastImage() {\n+        return this;\n+    }\n+\n+    public int getHeight() {\n+        return height;\n+    }\n+\n+    public int getWidth() {\n+        return width;\n+    }\n+\n+    @Override\n+    public char[][] Decorate() {\n+        return canvas;\n+    }\n+}"
  },
  {
    "sha": "dbc67b63b2ab716f1e8e723fd121dbd9de802f66",
    "filename": "Projects/DesignPatterns/src/ImageDecorator.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/ImageDecorator.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/ImageDecorator.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/ImageDecorator.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,29 @@\n+public class ImageDecorator implements DecoratableImage{\n+    //Decorator\n+    private final DecoratableImage image;\n+    private final GeometricObject object;\n+\n+    public ImageDecorator(DecoratableImage image, GeometricObject object) {\n+        this.image = image;\n+        this.object = object;\n+    }\n+\n+    public DecoratableImage lastImage() {\n+        return image;\n+    }\n+\n+    @Override\n+    public int getHeight() {\n+        return image.getHeight();\n+    }\n+\n+    @Override\n+    public int getWidth() {\n+        return image.getWidth();\n+    }\n+\n+    @Override\n+    public char[][] Decorate() {\n+        return object.drawOn(image);\n+    }\n+}"
  },
  {
    "sha": "028860e7f732ffc0f69f7d2a855e76417308fe71",
    "filename": "Projects/DesignPatterns/src/Rectangle.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Rectangle.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Rectangle.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/Rectangle.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,29 @@\n+public class Rectangle implements GeometricObject {\n+    private int[] poz;\n+    private int height, width;\n+    private char fill;\n+\n+    public Rectangle() {\n+    }\n+\n+    public Rectangle(int pozX, int pozY, int len, char fill) {\n+        poz = new int[2];\n+        poz[1] = pozX;\n+        poz[0] = pozY;\n+        this.height = len;\n+        this.width = len * 2;\n+        this.fill = fill;\n+    }\n+\n+    @Override\n+    public char[][] drawOn(DecoratableImage image) {\n+        char[][] canvas = image.Decorate();\n+        if (poz[0] < 0 || poz[1] < 0)\n+            return canvas;\n+        for (int i = poz[0]; i < poz[0] + height && i < image.getHeight(); i ++)\n+            for (int j = poz[1]; j < poz[1] + width && j < image.getWidth(); j ++)\n+                canvas[i][j] = fill;\n+\n+        return canvas;\n+    }\n+}"
  },
  {
    "sha": "50905969f82ac4d911e102cb7cd27492be9e5ad9",
    "filename": "Projects/DesignPatterns/src/Square.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Square.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Square.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/Square.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,28 @@\n+public class Square implements GeometricObject{\n+    private int[] poz;\n+    private int len;\n+    private char fill;\n+\n+    public Square() {\n+    }\n+\n+    public Square(int pozX, int pozY, int len, char fill) {\n+        poz = new int[2];\n+        poz[1] = pozX;\n+        poz[0] = pozY;\n+        this.len = len;\n+        this.fill = fill;\n+    }\n+\n+    @Override\n+    public char[][] drawOn(DecoratableImage image) {\n+        char[][] canvas = image.Decorate();\n+        if (poz[0] < 0 || poz[1] < 0)\n+            return canvas;\n+        for (int i = poz[0]; i < poz[0] + len && i < image.getHeight(); i ++)\n+            for (int j = poz[1]; j < poz[1] + len && j < image.getWidth(); j ++)\n+                canvas[i][j] = fill;\n+\n+        return canvas;\n+    }\n+}"
  },
  {
    "sha": "de7ef09e226acf9504993d88c59e7f7edaa90eae",
    "filename": "Projects/DesignPatterns/src/Triangle.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Triangle.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/Projects/DesignPatterns/src/Triangle.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Projects/DesignPatterns/src/Triangle.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -0,0 +1,28 @@\n+public class Triangle implements GeometricObject{\n+    private int[] poz;\n+    private int len;\n+    private char fill;\n+\n+    public Triangle() {\n+    }\n+\n+    public Triangle(int pozX, int pozY, int len, char fill) {\n+        poz = new int[2];\n+        poz[1] = pozX;\n+        poz[0] = pozY;\n+        this.len = len;\n+        this.fill = fill;\n+    }\n+\n+    @Override\n+    public char[][] drawOn(DecoratableImage image) {\n+        char[][] canvas = image.Decorate();\n+        if (poz[0] < 0 || poz[1] < 0)\n+            return canvas;\n+        for (int i = poz[0]; i < poz[0] + len && i < image.getHeight(); i++)\n+            for (int j = poz[1]; j < poz[1] + len && j < image.getWidth(); j++)\n+                if (i - poz[0] + j - poz[1] < len)\n+                    canvas[i][j] = fill;\n+        return canvas;\n+    }\n+}"
  },
  {
    "sha": "a6f3f7e5ddaa798276ffe251283f2c9d98169418",
    "filename": "_9_reactive/src/main/java/code/_2_challenge/_6_reactive_producers/ReactiveChallenge.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/_9_reactive/src/main/java/code/_2_challenge/_6_reactive_producers/ReactiveChallenge.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/_9_reactive/src/main/java/code/_2_challenge/_6_reactive_producers/ReactiveChallenge.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_9_reactive/src/main/java/code/_2_challenge/_6_reactive_producers/ReactiveChallenge.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -5,7 +5,7 @@\n import reactor.core.publisher.DirectProcessor;\n import reactor.core.publisher.EmitterProcessor;\n import reactor.core.publisher.ReplayProcessor;\n-import reactor.core.publisher.TopicProcessor;\n+//import reactor.core.publisher.TopicProcessor;\n \n public class ReactiveChallenge {\n     public static void main(String[] args) throws InterruptedException {"
  },
  {
    "sha": "8a7003cf84b1b71ea0def5b3a3c56847d833924e",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "status": "modified",
    "additions": 24,
    "deletions": 4,
    "changes": 28,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -8,15 +8,35 @@\n     private Pawn[][] pieces;\n \n     public ChessBoard() {\n-        pieces = new Pawn[MAX_BOARD_WIDTH][MAX_BOARD_HEIGHT];\n-\n+        pieces = new Pawn[MAX_BOARD_WIDTH + 1][MAX_BOARD_HEIGHT + 1];\n     }\n \n     public void Add(Pawn pawn, int xCoordinate, int yCoordinate, PieceColor pieceColor) {\n-        throw new UnsupportedOperationException(\"Need to implement ChessBoard.add()\");\n+        if (!IsLegalBoardPosition(xCoordinate, yCoordinate)) {\n+            pawn.setYCoordinate(-1);\n+            pawn.setXCoordinate(-1);\n+            return;\n+        }\n+\n+        pieces[xCoordinate][yCoordinate] = pawn;\n+        pawn.setXCoordinate(xCoordinate);\n+        pawn.setYCoordinate(yCoordinate);\n     }\n \n     public boolean IsLegalBoardPosition(int xCoordinate, int yCoordinate) {\n-        throw new UnsupportedOperationException(\"Need to implement ChessBoard.IsLegalBoardPosition()\");\n+        return 0 <= xCoordinate && xCoordinate < MAX_BOARD_HEIGHT\n+                && 0 <= yCoordinate && yCoordinate < MAX_BOARD_WIDTH\n+                && pieces[xCoordinate][yCoordinate] == null;\n+    }\n+\n+    public void movePiece(Pawn pawn, int newX, int newY) {\n+        Pawn old;\n+        old = pieces[pawn.getXCoordinate()][pawn.getYCoordinate()];\n+        if (old != null && old != pawn) {\n+            old.setYCoordinate(-1);\n+            old.setXCoordinate(-1);\n+        }\n+        pieces[pawn.getXCoordinate()][pawn.getYCoordinate()] = null;\n+        pieces[newX][newY] = pawn;\n     }\n }"
  },
  {
    "sha": "c3b1b8e88065cdea3c42a2782a8c79be50263ee0",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -44,7 +44,23 @@ private void setPieceColor(PieceColor value) {\n     }\n \n     public void Move(MovementType movementType, int newX, int newY) {\n-        throw new UnsupportedOperationException(\"Need to implement Pawn.Move()\") ;\n+        if (movementType.equals(MovementType.MOVE)) {\n+            if (!chessBoard.IsLegalBoardPosition(newX, newY))\n+                return;\n+\n+            if (newY < getYCoordinate() && newY >= getYCoordinate() - 2 && newX == getXCoordinate()) {\n+                chessBoard.movePiece(this, newX, newY);\n+                setXCoordinate(newX);\n+                setYCoordinate(newY);\n+            }\n+        }\n+        else if (movementType.equals(MovementType.CAPTURE)) {\n+            if (Math.abs(newX - getXCoordinate()) == 1 && newY == getYCoordinate() - 1) {\n+                chessBoard.movePiece(this, newX, newY);\n+                setXCoordinate(newX);\n+                setYCoordinate(newY);\n+            }\n+        }\n     }\n \n     @Override"
  },
  {
    "sha": "deda4da93a289128a7e2d3f468740d2b3cf0e07c",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/test/java/clean/code/chess/requirements/ChessBoardTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/clean_code_projects/_1_project_requirements_chess/src/test/java/clean/code/chess/requirements/ChessBoardTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/clean_code_projects/_1_project_requirements_chess/src/test/java/clean/code/chess/requirements/ChessBoardTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/test/java/clean/code/chess/requirements/ChessBoardTest.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -39,7 +39,7 @@ public void testIsLegalBoardPosition_True_X_equals_5_Y_equals_5() {\n     @Test\n     public void testIsLegalBoardPosition_False_X_equals_11_Y_equals_5() {\n         boolean isValidPosition = testSubject.IsLegalBoardPosition(11, 5);\n-        assertTrue(isValidPosition);\n+        assertFalse(isValidPosition);\n     }\n \n     @Test\n@@ -79,6 +79,8 @@ public void testLimits_The_Number_Of_Pawns()\n         {\n             Pawn pawn = new Pawn(PieceColor.BLACK);\n             int row = i / ChessBoard.MAX_BOARD_WIDTH;\n+            System.out.println(6 + row);\n+            System.out.println(i % ChessBoard.MAX_BOARD_WIDTH);\n             testSubject.Add(pawn, 6 + row, i % ChessBoard.MAX_BOARD_WIDTH, PieceColor.BLACK);\n             if (row < 1)\n             {"
  },
  {
    "sha": "3a5fba6586629f628a1aa4840004ea178eac763c",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/test/java/clean/code/chess/requirements/PawnTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/22401f6e7a25d53c5fe18ca6cb5235fada32129a/clean_code_projects/_1_project_requirements_chess/src/test/java/clean/code/chess/requirements/PawnTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/22401f6e7a25d53c5fe18ca6cb5235fada32129a/clean_code_projects/_1_project_requirements_chess/src/test/java/clean/code/chess/requirements/PawnTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/test/java/clean/code/chess/requirements/PawnTest.java?ref=22401f6e7a25d53c5fe18ca6cb5235fada32129a",
    "patch": "@@ -14,6 +14,7 @@\n     public void setUp() {\n         this.chessBoard = new ChessBoard();\n         this.testSubject = new Pawn(PieceColor.BLACK);\n+        this.testSubject.setChessBoard(this.chessBoard);\n     }\n \n     @Test"
  }
]
