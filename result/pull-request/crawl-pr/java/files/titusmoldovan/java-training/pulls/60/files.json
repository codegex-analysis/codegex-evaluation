[
  {
    "sha": "9b6d8084f844ea462c85bb8db2b90769d2714e20",
    "filename": "Project_2/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/main/java/clean/code/chess/requirements/ChessBoard.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -0,0 +1,54 @@\n+package clean.code.chess.requirements;\n+\n+public class ChessBoard {\n+\n+    public static int MAX_BOARD_WIDTH = 7;\n+    public static int MAX_BOARD_HEIGHT = 7;\n+\n+    private Pawn[][] pieces;\n+\n+    public ChessBoard() {\n+        pieces = new Pawn[MAX_BOARD_WIDTH][MAX_BOARD_HEIGHT];\n+\n+    }\n+\n+    public void Add(Pawn pawn, int xCoordinate, int yCoordinate, PieceColor pieceColor) {\n+\n+        if(!IsLegalBoardPosition(xCoordinate, yCoordinate) || pieces[xCoordinate][yCoordinate] != null) {\n+            pawn.setXCoordinate(-1);\n+            pawn.setYCoordinate(-1);\n+        }\n+        else\n+        {\n+            pawn.setXCoordinate(xCoordinate);\n+            pawn.setYCoordinate(yCoordinate);\n+            pieces[xCoordinate][yCoordinate] = pawn;\n+        }\n+\n+\n+    }\n+\n+    public boolean IsLegalBoardPosition(int xCoordinate, int yCoordinate) {\n+\n+        if(xCoordinate >= 0 && xCoordinate < MAX_BOARD_HEIGHT)\n+            if(yCoordinate >= 0 && yCoordinate < MAX_BOARD_WIDTH)\n+                return true;\n+\n+        return false;\n+    }\n+\n+    public void MoveChess(Pawn pawn, int X, int Y) {\n+\n+        if(!IsLegalBoardPosition(X, Y))\n+            return;\n+\n+        if(pieces[X][Y] != null) {\n+            pieces[X][Y].setXCoordinate(-1);\n+            pieces[X][Y].setYCoordinate(-1);\n+            pieces[X][Y] = null;\n+        }\n+\n+        pieces[X][Y] = pawn;\n+    }\n+\n+}"
  },
  {
    "sha": "326e0721fd46eb48d4f30bcf8c1ac21616a9ffc9",
    "filename": "Project_2/src/main/java/clean/code/chess/requirements/MovementType.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/main/java/clean/code/chess/requirements/MovementType.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/main/java/clean/code/chess/requirements/MovementType.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/main/java/clean/code/chess/requirements/MovementType.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -0,0 +1,6 @@\n+package clean.code.chess.requirements;\n+\n+public enum MovementType {\n+\n+    MOVE, CAPTURE;\n+}"
  },
  {
    "sha": "8df7ba6f66b227cd8ccd4f723d1f35e2ea39f104",
    "filename": "Project_2/src/main/java/clean/code/chess/requirements/Pawn.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/main/java/clean/code/chess/requirements/Pawn.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/main/java/clean/code/chess/requirements/Pawn.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/main/java/clean/code/chess/requirements/Pawn.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -0,0 +1,124 @@\n+package clean.code.chess.requirements;\n+\n+public class Pawn {\n+\n+    private ChessBoard chessBoard;\n+    private int xCoordinate;\n+    private int yCoordinate;\n+    private PieceColor pieceColor;\n+\n+    public Pawn(PieceColor pieceColor) {\n+        this.pieceColor = pieceColor;\n+    }\n+\n+    public ChessBoard getChesssBoard() {\n+        return chessBoard;\n+    }\n+\n+    public void setChessBoard(ChessBoard chessBoard) {\n+        this.chessBoard = chessBoard;\n+    }\n+\n+    public int getXCoordinate() {\n+        return xCoordinate;\n+    }\n+\n+    public void setXCoordinate(int value) {\n+        this.xCoordinate = value;\n+    }\n+\n+    public int getYCoordinate() {\n+        return yCoordinate;\n+    }\n+\n+    public void setYCoordinate(int value) {\n+        this.yCoordinate = value;\n+    }\n+\n+    public PieceColor getPieceColor() {\n+        return this.pieceColor;\n+    }\n+\n+    private void setPieceColor(PieceColor value) {\n+        pieceColor = value;\n+    }\n+\n+    public void Move(MovementType movementType, int newX, int newY) {\n+\n+\n+            if(!chessBoard.IsLegalBoardPosition(newX, newY))\n+                return;\n+\n+            if(pieceColor.equals(PieceColor.WHITE)) {\n+\n+                if (movementType.equals(MovementType.MOVE)) {\n+                    if (xCoordinate == newX) {\n+\n+                        if(newY == yCoordinate + 1) {\n+                            chessBoard.MoveChess(this, newX, newY);\n+                            setXCoordinate(newX);\n+                            setYCoordinate(newY);\n+                        }\n+                        else\n+                            if (newY == yCoordinate + 2 && yCoordinate == 0) {\n+                                chessBoard.MoveChess(this, newX, newY);\n+                                setXCoordinate(newX);\n+                                setYCoordinate(newY);\n+                            }\n+                    }\n+                }\n+\n+                if (movementType.equals(MovementType.CAPTURE)) {\n+                    if (xCoordinate == newX - 1 || xCoordinate == newX + 1) {\n+                        if (newY == yCoordinate + 1) {\n+                            chessBoard.MoveChess(this, newX, newY);\n+                            setXCoordinate(newX);\n+                            setYCoordinate(newY);\n+                        }\n+                    }\n+                }\n+            }\n+\n+        if(pieceColor.equals(PieceColor.BLACK)) {\n+\n+            if (movementType.equals(MovementType.MOVE)) {\n+                if (xCoordinate == newX) {\n+\n+                    if(newY == yCoordinate - 1) {\n+                        chessBoard.MoveChess(this, newX, newY);\n+                        setXCoordinate(newX);\n+                        setYCoordinate(newY);\n+                    }\n+                    else\n+                    if (newY == yCoordinate - 2 && yCoordinate == 7) {\n+                        chessBoard.MoveChess(this, newX, newY);\n+                        setXCoordinate(newX);\n+                        setYCoordinate(newY);\n+                    }\n+\n+                }\n+            }\n+\n+            if (movementType.equals(MovementType.CAPTURE)) {\n+                if (xCoordinate == newX - 1 || xCoordinate == newX + 1) {\n+                    if (newY == yCoordinate - 1) {\n+                        chessBoard.MoveChess(this, newX, newY);\n+                        setXCoordinate(newX);\n+                        setYCoordinate(newY);\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return CurrentPositionAsString();\n+    }\n+\n+    protected String CurrentPositionAsString() {\n+        String eol = System.lineSeparator();\n+        return String.format(\"Current X: {1}{0}Current Y: {2}{0}Piece Color: {3}\", eol, xCoordinate, yCoordinate, pieceColor);\n+    }\n+}"
  },
  {
    "sha": "77634809ffda114cbcff022ccb35e39cc8c2a31a",
    "filename": "Project_2/src/main/java/clean/code/chess/requirements/PieceColor.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/main/java/clean/code/chess/requirements/PieceColor.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/main/java/clean/code/chess/requirements/PieceColor.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/main/java/clean/code/chess/requirements/PieceColor.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -0,0 +1,7 @@\n+package clean.code.chess.requirements;\n+\n+public enum PieceColor {\n+\n+    BLACK, WHITE;\n+\n+}"
  },
  {
    "sha": "2eb8612b68317fee7a8199f53d1b29a4c418d7b4",
    "filename": "Project_2/src/out/test/test/clean/code/chess/requirements/ChessBoard.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/ChessBoard.class",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/ChessBoard.class",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/out/test/test/clean/code/chess/requirements/ChessBoard.class?ref=9c0748664112eb0599984f2c3acc1944533d161e"
  },
  {
    "sha": "55b92d716bb965292c797cb564c5f01774d93e74",
    "filename": "Project_2/src/out/test/test/clean/code/chess/requirements/ChessBoardTest.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/ChessBoardTest.class",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/ChessBoardTest.class",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/out/test/test/clean/code/chess/requirements/ChessBoardTest.class?ref=9c0748664112eb0599984f2c3acc1944533d161e"
  },
  {
    "sha": "cd57e06ea082f3eee09fea5d6c4edbc775301e70",
    "filename": "Project_2/src/out/test/test/clean/code/chess/requirements/MovementType.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/MovementType.class",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/MovementType.class",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/out/test/test/clean/code/chess/requirements/MovementType.class?ref=9c0748664112eb0599984f2c3acc1944533d161e"
  },
  {
    "sha": "866bce06a406e90fa21daf5bed4c42d27c87b003",
    "filename": "Project_2/src/out/test/test/clean/code/chess/requirements/Pawn.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/Pawn.class",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/Pawn.class",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/out/test/test/clean/code/chess/requirements/Pawn.class?ref=9c0748664112eb0599984f2c3acc1944533d161e"
  },
  {
    "sha": "2e8d8726090af6235e447e4379ac5a98f023bd2b",
    "filename": "Project_2/src/out/test/test/clean/code/chess/requirements/PawnTest.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/PawnTest.class",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/PawnTest.class",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/out/test/test/clean/code/chess/requirements/PawnTest.class?ref=9c0748664112eb0599984f2c3acc1944533d161e"
  },
  {
    "sha": "4e2a98f7512671dfd98f0a9c5e630ae417d2644e",
    "filename": "Project_2/src/out/test/test/clean/code/chess/requirements/PieceColor.class",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/PieceColor.class",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/out/test/test/clean/code/chess/requirements/PieceColor.class",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/out/test/test/clean/code/chess/requirements/PieceColor.class?ref=9c0748664112eb0599984f2c3acc1944533d161e"
  },
  {
    "sha": "2e971a3b38bbc4f519117fbc308efd18a8770fb6",
    "filename": "Project_2/src/test/java/clean/code/chess/requirements/ChessBoardTest.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/test/java/clean/code/chess/requirements/ChessBoardTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/test/java/clean/code/chess/requirements/ChessBoardTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/test/java/clean/code/chess/requirements/ChessBoardTest.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -0,0 +1,95 @@\n+package clean.code.chess.requirements;\n+\n+import junit.framework.TestCase;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ChessBoardTest extends TestCase {\n+\n+    private ChessBoard testSubject;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        testSubject = new ChessBoard();\n+    }\n+\n+    @Test\n+    public void testHas_MaxBoardWidth_of_7() {\n+        assertEquals(7, ChessBoard.MAX_BOARD_HEIGHT);\n+    }\n+\n+    @Test\n+    public void testHas_MaxBoardHeight_of_7() {\n+        assertEquals(7, ChessBoard.MAX_BOARD_HEIGHT);\n+    }\n+\n+    @Test\n+    public void testIsLegalBoardPosition_True_X_equals_0_Y_equals_0() {\n+        boolean isValidPosition = testSubject.IsLegalBoardPosition(0, 0);\n+        assertTrue(isValidPosition);\n+    }\n+\n+    @Test\n+    public void testIsLegalBoardPosition_True_X_equals_5_Y_equals_5() {\n+        boolean isValidPosition = testSubject.IsLegalBoardPosition(5, 5);\n+        Assert.assertTrue(isValidPosition);\n+    }\n+\n+    @Test\n+    public void testIsLegalBoardPosition_False_X_equals_11_Y_equals_5() {\n+        boolean isValidPosition = testSubject.IsLegalBoardPosition(11, 5);\n+        assertFalse(isValidPosition);\n+    }\n+\n+    @Test\n+    public void testIsLegalBoardPosition_False_X_equals_0_Y_equals_9() {\n+        boolean isValidPosition = testSubject.IsLegalBoardPosition(0, 9);\n+        assertFalse(isValidPosition);\n+    }\n+\n+    @Test\n+    public void testIsLegalBoardPosition_False_X_equals_11_Y_equals_0() {\n+        boolean isValidPosition = testSubject.IsLegalBoardPosition(11, 0);\n+        assertFalse(isValidPosition);\n+    }\n+\n+    @Test\n+    public void testIsLegalBoardPosition_False_For_Negative_Y_Values() {\n+        boolean isValidPosition = testSubject.IsLegalBoardPosition(5, -1);\n+        Assert.assertFalse(isValidPosition);\n+    }\n+\n+    @Test\n+    public void Avoids_Duplicate_Positioning() {\n+        Pawn firstPawn = new Pawn(PieceColor.BLACK);\n+        Pawn secondPawn = new Pawn(PieceColor.BLACK);\n+        testSubject.Add(firstPawn, 6, 3, PieceColor.BLACK);\n+        testSubject.Add(secondPawn, 6, 3, PieceColor.BLACK);\n+        assertEquals(6, firstPawn.getXCoordinate());\n+        assertEquals(3, firstPawn.getYCoordinate());\n+        assertEquals(-1, secondPawn.getXCoordinate());\n+        assertEquals(-1, secondPawn.getYCoordinate());\n+    }\n+\n+    @Test\n+    public void testLimits_The_Number_Of_Pawns()\n+    {\n+        for (int i = 0; i < 10; i++)\n+        {\n+            Pawn pawn = new Pawn(PieceColor.BLACK);\n+            int row = i / ChessBoard.MAX_BOARD_WIDTH;\n+            testSubject.Add(pawn, 6 + row, i % ChessBoard.MAX_BOARD_WIDTH, PieceColor.BLACK);\n+            if (row < 1)\n+            {\n+                assertEquals(6 + row, pawn.getXCoordinate());\n+                assertEquals(i % ChessBoard.MAX_BOARD_WIDTH, pawn.getYCoordinate());\n+            }\n+            else\n+            {\n+                assertEquals(-1, pawn.getXCoordinate());\n+                Assert.assertEquals(-1, pawn.getYCoordinate());\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3a5fba6586629f628a1aa4840004ea178eac763c",
    "filename": "Project_2/src/test/java/clean/code/chess/requirements/PawnTest.java",
    "status": "added",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/test/java/clean/code/chess/requirements/PawnTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/Project_2/src/test/java/clean/code/chess/requirements/PawnTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/Project_2/src/test/java/clean/code/chess/requirements/PawnTest.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -0,0 +1,57 @@\n+package clean.code.chess.requirements;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class PawnTest {\n+\n+    private ChessBoard chessBoard;\n+    private Pawn testSubject;\n+\n+    @Before\n+    public void setUp() {\n+        this.chessBoard = new ChessBoard();\n+        this.testSubject = new Pawn(PieceColor.BLACK);\n+        this.testSubject.setChessBoard(this.chessBoard);\n+    }\n+\n+    @Test\n+    public void testChessBoard_Add_Sets_XCoordinate() {\n+        this.chessBoard.Add(testSubject, 6, 3, PieceColor.BLACK);\n+        assertEquals(6, testSubject.getXCoordinate());\n+    }\n+\n+    @Test\n+    public void testChessBoard_Add_Sets_YCoordinate() {\n+        this.chessBoard.Add(testSubject, 6, 3, PieceColor.BLACK);\n+        assertEquals(3, testSubject.getYCoordinate());\n+    }\n+\n+\n+    @Test\n+    public void testPawn_Move_IllegalCoordinates_Right_DoesNotMove() {\n+        chessBoard.Add(testSubject, 6, 3, PieceColor.BLACK);\n+        testSubject.Move(MovementType.MOVE, 7, 3);\n+        assertEquals(6, testSubject.getXCoordinate());\n+        assertEquals(3, testSubject.getYCoordinate());\n+    }\n+\n+    @Test\n+    public void testPawn_Move_IllegalCoordinates_Left_DoesNotMove() {\n+        chessBoard.Add(testSubject, 6, 3, PieceColor.BLACK);\n+        testSubject.Move(MovementType.MOVE, 4, 3);\n+        assertEquals(6, testSubject.getXCoordinate());\n+        assertEquals(3, testSubject.getYCoordinate());\n+    }\n+\n+    @Test\n+    public void testPawn_Move_LegalCoordinates_Forward_UpdatesCoordinates() {\n+        chessBoard.Add(testSubject, 6, 3, PieceColor.BLACK);\n+        testSubject.Move(MovementType.MOVE, 6, 2);\n+        assertEquals(6, testSubject.getXCoordinate());\n+        assertEquals(2, testSubject.getYCoordinate());\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6d4679c5447861bba6e85500e340b900ef3eab23",
    "filename": "README.md",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/README.md",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/README.md",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/README.md?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,6 +1,7 @@\n # java-training\n \n # 1 basics\n+\n \t- code study\n \t\t- 1.1 hello world\n \t\t- 1.2 postfix increment\n@@ -13,7 +14,9 @@\n \t\t- 1.2 foobarqix\n \t\t- 1.3 pair of 2\n \t\t- 1.4 pair of 3\n+\n # 2 oo\n+\n \t- code study\n \t\t- 2.1 initialization order\n \t\t- 2.2 covariant return\n@@ -25,7 +28,9 @@\n \t\t- 2.1 two fighters\n \t\t- 2.2 movie database\n \t\t- 2.3 animal hierarchy\n+\n # 3 design patterns\n+\n \t- code study\n \t\t- 3.1 design patterns used in java apis\n \t- code challenges\n@@ -37,7 +42,9 @@\n \t\t- 3.6 builder\n \t\t- 3.7 decorations (hard)\n \t\t- 3.8 drinking time (hard)\n+\n # 4 exceptions & IO\n+\n \t- code study\n \t\t- 4.1 exceptions\n \t\t- 4.2 multicatch\n@@ -56,7 +63,9 @@\n \t\t- 4.3 anagram\n \t\t- 4.4 number to lcd\n \t\t- 4.5 occurence\n+\n # 5 generics\n+\n \t- activity \n \t\t- 5.1 generic sort\n \t- code study\n@@ -70,7 +79,9 @@\n \t\t- 5.3 generic linked list\n \t\t- 5.4 generic iterator\n \t\t- 5.5 generic binary search\n+\n # 6 collectinos\n+\n \t- activity\n \t\t- 6.1 resizable array\n \t- code study\n@@ -99,7 +110,9 @@\n \t\t- 6.7 my hashtable\n \t\t- 6.8 my arraylist\n \t\t- 6.9 my set\n+\n # 7 concurrency\n+\n \t- code study\n \t\t- 7.1 contention\n \t\t- 7.2 lack of coordination\n@@ -115,7 +128,9 @@\n \t\t- 7.2 bank transactions\n \t\t- 7.3 rock paper scissors\n \t\t- 7.4 dining philosopers (hard)\n+\n # 8 functional\n+\n \t- acitvity\n \t\t- 8.1 get highest score from a collection of objects\n \t- code study\n@@ -128,7 +143,9 @@\n \t\t- 8.1 consumer\n \t\t- 8.2 predicate\n \t\t- 8.3 lambda\n+\n # 9 reactive\n+\n \t- code study\n \t\t- 9.1 create flux\n \t\t- 9.2 create mono\n@@ -141,6 +158,8 @@\n \t\t- 9.3 operations\n \t\t- 9.4 transformations\n \t\t- 9.5 merges\n+\n # clean code projects\n+\n     - design patterns\n     - chess game\t\t\n\\ No newline at end of file"
  },
  {
    "sha": "3d940e257f63345d98f36c8d35a840f2b637f993",
    "filename": "_1_basics/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/pom.xml",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/pom.xml",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/pom.xml?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <parent>\n         <artifactId>java.training</artifactId>"
  },
  {
    "sha": "a426c46d85849ec100cda22d46e6fa45b6285dde",
    "filename": "_1_basics/src/main/java/code/_1_study/_1_hello_world/HelloWorld.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_1_hello_world/HelloWorld.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_1_hello_world/HelloWorld.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_1_study/_1_hello_world/HelloWorld.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,7 +1,7 @@\n package code._1_study._1_hello_world;\n \n public class HelloWorld {\n-  public static void main(String[] args) {\n-    System.out.println(\"hello world\");\n-  }\n+    public static void main(String[] args) {\n+        System.out.println(\"hello world\");\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "d0dd68b1bb482fa21a294703f3dc4e3ac7ce9c15",
    "filename": "_1_basics/src/main/java/code/_1_study/_2_postfix_increment/PostfixIncrement.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_2_postfix_increment/PostfixIncrement.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_2_postfix_increment/PostfixIncrement.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_1_study/_2_postfix_increment/PostfixIncrement.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,19 +1,19 @@\n package code._1_study._2_postfix_increment;\n \n public class PostfixIncrement {\n-  public static void main(String[] args) {\n-    int x = 0;\n-    while (x++ < 10) {\n-    }\n-    checkForXValue(x);\n+    public static void main(String[] args) {\n+        int x = 0;\n+        while (x++ < 10) {\n+        }\n+        checkForXValue(x);\n \n-  }\n+    }\n \n-  private static void checkForXValue(int x) {\n-    int expectedXValue = 11;\n+    private static void checkForXValue(int x) {\n+        int expectedXValue = 11;\n \n-    System.out.println(\"Guessed correctly the value of x ? - \" + (x == expectedXValue));\n+        System.out.println(\"Guessed correctly the value of x ? - \" + (x == expectedXValue));\n \n-  }\n+    }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "a53b4531a903101045aa26569513aa8b095c23b2",
    "filename": "_1_basics/src/main/java/code/_1_study/_3_summing_non_floating/SummingNonFloatingTypes.java",
    "status": "modified",
    "additions": 23,
    "deletions": 23,
    "changes": 46,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_3_summing_non_floating/SummingNonFloatingTypes.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_3_summing_non_floating/SummingNonFloatingTypes.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_1_study/_3_summing_non_floating/SummingNonFloatingTypes.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,30 +1,30 @@\n package code._1_study._3_summing_non_floating;\n \n public class SummingNonFloatingTypes {\n-  public static void main(String[] args) {\n-    sumBytes();\n-    sumShorts();\n-    sumInts();\n-  }\n+    public static void main(String[] args) {\n+        sumBytes();\n+        sumShorts();\n+        sumInts();\n+    }\n \n-  private static void sumBytes() {\n-    byte x = 5;\n-    byte y = 10;\n-    byte sum;\n-    sum = (byte) (x + y);\n-  }\n+    private static void sumBytes() {\n+        byte x = 5;\n+        byte y = 10;\n+        byte sum;\n+        sum = (byte) (x + y);\n+    }\n \n-  private static void sumShorts() {\n-    short x = 5;\n-    short y = 10;\n-    short sum;\n-    sum = (short) (x + y);\n-  }\n+    private static void sumShorts() {\n+        short x = 5;\n+        short y = 10;\n+        short sum;\n+        sum = (short) (x + y);\n+    }\n \n-  private static void sumInts() {\n-    int x = 5;\n-    int y = 10;\n-    int sum;\n-    sum = x + y;\n-  }\n+    private static void sumInts() {\n+        int x = 5;\n+        int y = 10;\n+        int sum;\n+        sum = x + y;\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "a0df719ef473aa6d14fc9a051c9afc479f2556bc",
    "filename": "_1_basics/src/main/java/code/_1_study/_4_comparing_integers/ComparingIntegers.java",
    "status": "modified",
    "additions": 17,
    "deletions": 17,
    "changes": 34,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_4_comparing_integers/ComparingIntegers.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_4_comparing_integers/ComparingIntegers.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_1_study/_4_comparing_integers/ComparingIntegers.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,24 +1,24 @@\n package code._1_study._4_comparing_integers;\n \n public class ComparingIntegers {\n-  public static void main(String[] args) {\n-    /*EX 1 */\n-    Integer i1 = 127;\n-    Integer i2 = 127;\n-    System.out.println(i1.equals(i2)); //why ?\n-    System.out.println(i1 == i2); //why ?\n+    public static void main(String[] args) {\n+        /*EX 1 */\n+        Integer i1 = 127;\n+        Integer i2 = 127;\n+        System.out.println(i1.equals(i2)); //why ?\n+        System.out.println(i1 == i2); //why ?\n \n-    /*EX 2 */\n-    Integer i11 = Integer.valueOf(127);\n-    Integer i22 = Integer.valueOf(127);\n-    System.out.println(i11.equals(i22)); //why ?\n-    System.out.println(i11 == i22); //why ?\n+        /*EX 2 */\n+        Integer i11 = Integer.valueOf(127);\n+        Integer i22 = Integer.valueOf(127);\n+        System.out.println(i11.equals(i22)); //why ?\n+        System.out.println(i11 == i22); //why ?\n \n-    /*EX 3 */\n-    Integer i111 = 128;\n-    Integer i222 = 128;\n-    System.out.println(i111.equals(i222)); //why ?\n-    System.out.println(i111 == i222); //why ?\n+        /*EX 3 */\n+        Integer i111 = 128;\n+        Integer i222 = 128;\n+        System.out.println(i111.equals(i222)); //why ?\n+        System.out.println(i111 == i222); //why ?\n \n-  }\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "0b7297de3237c2d31d7556d0dbc13ec432265f47",
    "filename": "_1_basics/src/main/java/code/_1_study/_5_slow_loops/SlowLoops.java",
    "status": "modified",
    "additions": 18,
    "deletions": 18,
    "changes": 36,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_5_slow_loops/SlowLoops.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_5_slow_loops/SlowLoops.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_1_study/_5_slow_loops/SlowLoops.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -4,24 +4,24 @@\n import java.time.Instant;\n \n public class SlowLoops {\n-  public static void main(String[] args) {\n-    loopUsingPrimitive();\n-    loopUsingWrapper();\n-  }\n+    public static void main(String[] args) {\n+        loopUsingPrimitive();\n+        loopUsingWrapper();\n+    }\n \n-  private static void loopUsingWrapper() {\n-    Instant start2 = Instant.now();\n-    for (Integer i = 0; i < 10_000_000; i++) ;\n-    Instant stop2 = Instant.now();\n-    Duration duration2 = Duration.between(start2, stop2);\n-    System.out.println(\"using wrapper: \" + duration2); //why is duration1 so different from duration2 ?\n-  }\n+    private static void loopUsingWrapper() {\n+        Instant start2 = Instant.now();\n+        for (Integer i = 0; i < 10_000_000; i++) ;\n+        Instant stop2 = Instant.now();\n+        Duration duration2 = Duration.between(start2, stop2);\n+        System.out.println(\"using wrapper: \" + duration2); //why is duration1 so different from duration2 ?\n+    }\n \n-  private static void loopUsingPrimitive() {\n-    Instant start1 = Instant.now();\n-    for (int i = 0; i < 10_000_000; i++) ;\n-    Instant stop1 = Instant.now();\n-    Duration duration1 = Duration.between(start1, stop1);\n-    System.out.println(\"using primitive: \" + duration1);\n-  }\n+    private static void loopUsingPrimitive() {\n+        Instant start1 = Instant.now();\n+        for (int i = 0; i < 10_000_000; i++) ;\n+        Instant stop1 = Instant.now();\n+        Duration duration1 = Duration.between(start1, stop1);\n+        System.out.println(\"using primitive: \" + duration1);\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "d98cebf691b8f4bded7308d4480760d54f7e2f04",
    "filename": "_1_basics/src/main/java/code/_1_study/_6_accessing_private_fields/AccessingPrivateFields.java",
    "status": "modified",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_6_accessing_private_fields/AccessingPrivateFields.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_6_accessing_private_fields/AccessingPrivateFields.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_1_study/_6_accessing_private_fields/AccessingPrivateFields.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -3,16 +3,16 @@\n import java.lang.reflect.Field;\n \n public class AccessingPrivateFields {\n-  public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException {\n-    Student student = new Student(\"John\", 21);\n+    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException {\n+        Student student = new Student(\"John\", 21);\n \n-    readPrivateField(student);\n+        readPrivateField(student);\n \n-  }\n+    }\n \n-  private static void readPrivateField(Student student) throws NoSuchFieldException, IllegalAccessException {\n-    Field field = student.getClass().getDeclaredField(\"name\");\n-    field.setAccessible(true);\n-    System.out.println(field.get(student));\n-  }\n+    private static void readPrivateField(Student student) throws NoSuchFieldException, IllegalAccessException {\n+        Field field = student.getClass().getDeclaredField(\"name\");\n+        field.setAccessible(true);\n+        System.out.println(field.get(student));\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "fbdedc1ac5b9ef479f5881d1dbceb1c907623d05",
    "filename": "_1_basics/src/main/java/code/_1_study/_6_accessing_private_fields/Student.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_6_accessing_private_fields/Student.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_1_study/_6_accessing_private_fields/Student.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_1_study/_6_accessing_private_fields/Student.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,11 +1,11 @@\n package code._1_study._6_accessing_private_fields;\n \n public class Student {\n-  private String name;\n-  private Integer age;\n+    private String name;\n+    private Integer age;\n \n-  public Student(String name, Integer age) {\n-    this.name = name;\n-    this.age = age;\n-  }\n+    public Student(String name, Integer age) {\n+        this.name = name;\n+        this.age = age;\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "47838aba3f1ebe680f1cde6ecad1f20eebd83dac",
    "filename": "_1_basics/src/main/java/code/_2_challenge/_1_fizzbuzz/FizzBuzz.java",
    "status": "modified",
    "additions": 42,
    "deletions": 42,
    "changes": 84,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_1_fizzbuzz/FizzBuzz.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_1_fizzbuzz/FizzBuzz.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_2_challenge/_1_fizzbuzz/FizzBuzz.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -2,49 +2,49 @@\n \n public class FizzBuzz {\n \n-  public String fizzBuzz(int i) {\n-    String s = \"\";\n-\n-    NumberWordCorrelation[] correlations = {\n-            new NumberWordCorrelation(3, \"Fizz\"),\n-            new NumberWordCorrelation(5, \"Buzz\"),\n-    };\n-    boolean isDivisible = false;\n-    for (NumberWordCorrelation correlation : correlations) {\n-      if (i % correlation.getNumber() == 0) {\n-        isDivisible = true;\n-        s += correlation.getWord();\n-      }\n+    public String fizzBuzz(int i) {\n+        String s = \"\";\n+\n+        NumberWordCorrelation[] correlations = {\n+                new NumberWordCorrelation(3, \"Fizz\"),\n+                new NumberWordCorrelation(5, \"Buzz\"),\n+        };\n+        boolean isDivisible = false;\n+        for (NumberWordCorrelation correlation : correlations) {\n+            if (i % correlation.getNumber() == 0) {\n+                isDivisible = true;\n+                s += correlation.getWord();\n+            }\n+        }\n+        if (!isDivisible) {\n+            s = String.valueOf(i);\n+        }\n+\n+\n+        return s;\n     }\n-    if (!isDivisible) {\n-      s = String.valueOf(i);\n-    }\n-\n \n-    return s;\n-  }\n-\n-  public String fizzBuzz2(int i) {\n-    String s = \"\";\n-\n-    NumberWordCorrelation[] correlations = {\n-            new NumberWordCorrelation(3, \"Fizz\"),\n-            new NumberWordCorrelation(5, \"Buzz\"),\n-            new NumberWordCorrelation(7, \"Rizz\"),\n-            new NumberWordCorrelation(9, \"Jazz\"),\n-    };\n-    boolean isDivisible = false;\n-    for (NumberWordCorrelation correlation : correlations) {\n-      if (i % correlation.getNumber() == 0) {\n-        isDivisible = true;\n-        s += correlation.getWord();\n-      }\n-    }\n-    if (!isDivisible) {\n-      s = String.valueOf(i);\n+    public String fizzBuzz2(int i) {\n+        String s = \"\";\n+\n+        NumberWordCorrelation[] correlations = {\n+                new NumberWordCorrelation(3, \"Fizz\"),\n+                new NumberWordCorrelation(5, \"Buzz\"),\n+                new NumberWordCorrelation(7, \"Rizz\"),\n+                new NumberWordCorrelation(9, \"Jazz\"),\n+        };\n+        boolean isDivisible = false;\n+        for (NumberWordCorrelation correlation : correlations) {\n+            if (i % correlation.getNumber() == 0) {\n+                isDivisible = true;\n+                s += correlation.getWord();\n+            }\n+        }\n+        if (!isDivisible) {\n+            s = String.valueOf(i);\n+        }\n+\n+\n+        return s;\n     }\n-\n-\n-    return s;\n-  }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "d95d3847ceef602a98acf994e196d233fc7d2d12",
    "filename": "_1_basics/src/main/java/code/_2_challenge/_1_fizzbuzz/NumberWordCorrelation.java",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_1_fizzbuzz/NumberWordCorrelation.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_1_fizzbuzz/NumberWordCorrelation.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_2_challenge/_1_fizzbuzz/NumberWordCorrelation.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,19 +1,19 @@\n package code._2_challenge._1_fizzbuzz;\n \n public class NumberWordCorrelation {\n-  private Integer number;\n-  private String word;\n+    private Integer number;\n+    private String word;\n \n-  public NumberWordCorrelation(Integer number, String word) {\n-    this.number = number;\n-    this.word = word;\n-  }\n+    public NumberWordCorrelation(Integer number, String word) {\n+        this.number = number;\n+        this.word = word;\n+    }\n \n-  public Integer getNumber() {\n-    return number;\n-  }\n+    public Integer getNumber() {\n+        return number;\n+    }\n \n-  public String getWord() {\n-    return word;\n-  }\n+    public String getWord() {\n+        return word;\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "01dd73ccec86d88067c15ff703d93788f04b764c",
    "filename": "_1_basics/src/main/java/code/_2_challenge/_2_foobarqix/FooBarQix.java",
    "status": "modified",
    "additions": 43,
    "deletions": 43,
    "changes": 86,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_2_foobarqix/FooBarQix.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_2_foobarqix/FooBarQix.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_2_challenge/_2_foobarqix/FooBarQix.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,54 +1,54 @@\n package code._2_challenge._2_foobarqix;\n \n public class FooBarQix {\n-  public String compute(int i) {\n-    String s = \"\";\n-    if (i % 3 == 0) s += \"Foo\";\n-    if (i % 5 == 0) s += \"Bar\";\n-    if (i % 7 == 0) s += \"Qix\";\n+    public String compute(int i) {\n+        String s = \"\";\n+        if (i % 3 == 0) s += \"Foo\";\n+        if (i % 5 == 0) s += \"Bar\";\n+        if (i % 7 == 0) s += \"Qix\";\n \n-    char[] digits = String.valueOf(i).toCharArray();\n-    for (char digit : digits) {\n+        char[] digits = String.valueOf(i).toCharArray();\n+        for (char digit : digits) {\n \n-      if (digit == '3') s += \"Foo\";\n-      if (digit == '5') s += \"Bar\";\n-      if (digit == '7') s += \"Qix\";\n+            if (digit == '3') s += \"Foo\";\n+            if (digit == '5') s += \"Bar\";\n+            if (digit == '7') s += \"Qix\";\n \n-    }\n-\n-    if (s.isEmpty()) {\n-      s = String.valueOf(i);\n-    }\n-    return s;\n-  }\n-\n-  public String compute2(int i) {\n-    String s = \"\";\n+        }\n \n-    boolean isDivisible = false;\n-    if (i % 3 == 0) {\n-      s += \"Foo\";\n-      isDivisible = true;\n-    }\n-    if (i % 5 == 0) {\n-      s += \"Bar\";\n-      isDivisible = true;\n-    }\n-    if (i % 7 == 0) {\n-      s += \"Qix\";\n-      isDivisible = true;\n+        if (s.isEmpty()) {\n+            s = String.valueOf(i);\n+        }\n+        return s;\n     }\n \n-    char[] digits = String.valueOf(i).toCharArray();\n-    for (char digit : digits) {\n-\n-      if (digit == '3') s += \"Foo\";\n-      else if (digit == '5') s += \"Bar\";\n-      else if (digit == '7') s += \"Qix\";\n-      else if (digit == '0') s += \"*\";\n-      else if (!isDivisible) s += digit;\n+    public String compute2(int i) {\n+        String s = \"\";\n+\n+        boolean isDivisible = false;\n+        if (i % 3 == 0) {\n+            s += \"Foo\";\n+            isDivisible = true;\n+        }\n+        if (i % 5 == 0) {\n+            s += \"Bar\";\n+            isDivisible = true;\n+        }\n+        if (i % 7 == 0) {\n+            s += \"Qix\";\n+            isDivisible = true;\n+        }\n+\n+        char[] digits = String.valueOf(i).toCharArray();\n+        for (char digit : digits) {\n+\n+            if (digit == '3') s += \"Foo\";\n+            else if (digit == '5') s += \"Bar\";\n+            else if (digit == '7') s += \"Qix\";\n+            else if (digit == '0') s += \"*\";\n+            else if (!isDivisible) s += digit;\n+        }\n+\n+        return s;\n     }\n-\n-    return s;\n-  }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "2e2998757da4f535a589efdce6b1badfbf63746c",
    "filename": "_1_basics/src/main/java/code/_2_challenge/_3_pair_of_2/PairOf2.java",
    "status": "modified",
    "additions": 21,
    "deletions": 21,
    "changes": 42,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_3_pair_of_2/PairOf2.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_3_pair_of_2/PairOf2.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_2_challenge/_3_pair_of_2/PairOf2.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,29 +1,29 @@\n package code._2_challenge._3_pair_of_2;\n \n public class PairOf2 {\n-  public Integer countPairs(Integer[] numbers) {\n-    Integer pairs = 0;\n-    Integer[] indexesIncludedInPairs = new Integer[numbers.length];\n-    int nrOfIndexesIncludedInPairs = 0;\n+    public Integer countPairs(Integer[] numbers) {\n+        Integer pairs = 0;\n+        Integer[] indexesIncludedInPairs = new Integer[numbers.length];\n+        int nrOfIndexesIncludedInPairs = 0;\n \n-    for (int i = 0; i < numbers.length - 1; i++) {\n-      for (int j = i + 1; j < numbers.length; j++) {\n-        boolean indexesIncludedInOtherPairs = false;\n-        for (int k = 0; k < nrOfIndexesIncludedInPairs; k++) {\n-          if (indexesIncludedInPairs[k] == i || indexesIncludedInPairs[k] == j) {\n-            indexesIncludedInOtherPairs = true;\n-          }\n+        for (int i = 0; i < numbers.length - 1; i++) {\n+            for (int j = i + 1; j < numbers.length; j++) {\n+                boolean indexesIncludedInOtherPairs = false;\n+                for (int k = 0; k < nrOfIndexesIncludedInPairs; k++) {\n+                    if (indexesIncludedInPairs[k] == i || indexesIncludedInPairs[k] == j) {\n+                        indexesIncludedInOtherPairs = true;\n+                    }\n+                }\n+                if (!indexesIncludedInOtherPairs && (numbers[i] + numbers[j] == 0)) {\n+                    indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = i;\n+                    indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = j;\n+                    pairs++;\n+                    //System.out.println(numbers[i] + \" + \" + numbers[j] + \" = \" + 0);\n+                    break;\n+                }\n+            }\n         }\n-        if (!indexesIncludedInOtherPairs && (numbers[i] + numbers[j] == 0)) {\n-          indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = i;\n-          indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = j;\n-          pairs++;\n-          //System.out.println(numbers[i] + \" + \" + numbers[j] + \" = \" + 0);\n-          break;\n-        }\n-      }\n+        return pairs;\n     }\n-    return pairs;\n-  }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "9e77b2e1fc761c81f30a71c194c2ce091268528d",
    "filename": "_1_basics/src/main/java/code/_2_challenge/_4_pair_of_3/PairOf3.java",
    "status": "modified",
    "additions": 23,
    "deletions": 23,
    "changes": 46,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_4_pair_of_3/PairOf3.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_2_challenge/_4_pair_of_3/PairOf3.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_2_challenge/_4_pair_of_3/PairOf3.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -1,31 +1,31 @@\n package code._2_challenge._4_pair_of_3;\n \n public class PairOf3 {\n-  public Integer countPairs(Integer[] numbers, int sum) {\n-    Integer pairs = 0;\n-    Integer[] indexesIncludedInPairs = new Integer[numbers.length];\n-    int nrOfIndexesIncludedInPairs = 0;\n-    for (int i = 0; i < numbers.length - 2; i++) {\n-      for (int j = i + 1; j < numbers.length - 1; j++) {\n-        for (int k = j + 1; k < numbers.length; k++) {\n-          boolean indexesIncludedInOtherPairs = false;\n-          for (int p = 0; p < nrOfIndexesIncludedInPairs; p++) {\n-            if (indexesIncludedInPairs[p] == i || indexesIncludedInPairs[p] == j || indexesIncludedInPairs[p] == k) {\n-              indexesIncludedInOtherPairs = true;\n+    public Integer countPairs(Integer[] numbers, int sum) {\n+        Integer pairs = 0;\n+        Integer[] indexesIncludedInPairs = new Integer[numbers.length];\n+        int nrOfIndexesIncludedInPairs = 0;\n+        for (int i = 0; i < numbers.length - 2; i++) {\n+            for (int j = i + 1; j < numbers.length - 1; j++) {\n+                for (int k = j + 1; k < numbers.length; k++) {\n+                    boolean indexesIncludedInOtherPairs = false;\n+                    for (int p = 0; p < nrOfIndexesIncludedInPairs; p++) {\n+                        if (indexesIncludedInPairs[p] == i || indexesIncludedInPairs[p] == j || indexesIncludedInPairs[p] == k) {\n+                            indexesIncludedInOtherPairs = true;\n+                        }\n+                    }\n+                    if (!indexesIncludedInOtherPairs && (numbers[i] + numbers[j] + numbers[k] == 0)) {\n+                        indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = i;\n+                        indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = j;\n+                        indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = k;\n+                        pairs++;\n+                        //System.out.println(numbers[i] + \" + \" + numbers[j] + \" + \" + numbers[k] + \" = \" + sum);\n+                        break;\n+                    }\n+                }\n             }\n-          }\n-          if (!indexesIncludedInOtherPairs && (numbers[i] + numbers[j] + numbers[k] == 0)) {\n-            indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = i;\n-            indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = j;\n-            indexesIncludedInPairs[nrOfIndexesIncludedInPairs++] = k;\n-            pairs++;\n-            //System.out.println(numbers[i] + \" + \" + numbers[j] + \" + \" + numbers[k] + \" = \" + sum);\n-            break;\n-          }\n         }\n-      }\n+        return pairs;\n     }\n-    return pairs;\n-  }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "3b87b45637999f58ed67968b2244d10c1dc7d868",
    "filename": "_1_basics/src/main/java/code/_3_in_class/Main.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_3_in_class/Main.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_3_in_class/Main.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_3_in_class/Main.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -2,7 +2,7 @@\n \n public class Main {\n \n-  public static void main(String[] args) {\n-    //TODO put your code changes in here\n-  }\n+    public static void main(String[] args) {\n+        //TODO put your code changes in here\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "95bb1182c6bae87cfdd208817332c2c0a8ebd7c3",
    "filename": "_1_basics/src/main/java/code/_4_student_effort/Main.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_4_student_effort/Main.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/main/java/code/_4_student_effort/Main.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/main/java/code/_4_student_effort/Main.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -2,7 +2,7 @@\n \n public class Main {\n \n-  public static void main(String[] args) {\n-    //TODO put your code changes in here\n-  }\n+    public static void main(String[] args) {\n+        //TODO put your code changes in here\n+    }\n }"
  },
  {
    "sha": "a2177f0dd62f10c84ef3a78336592497bc12d9cf",
    "filename": "_1_basics/src/test/java/code/_2_challenge/_1_fizzbuzz/FizzBuzzTest.java",
    "status": "modified",
    "additions": 57,
    "deletions": 57,
    "changes": 114,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/test/java/code/_2_challenge/_1_fizzbuzz/FizzBuzzTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/test/java/code/_2_challenge/_1_fizzbuzz/FizzBuzzTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/test/java/code/_2_challenge/_1_fizzbuzz/FizzBuzzTest.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -7,67 +7,67 @@\n import static java.util.Map.entry;\n \n public class FizzBuzzTest {\n-  public static Map<Integer, String> stage1 = Map.ofEntries(\n-          entry(1, \"1\"),\n-          entry(2, \"2\"),\n-          entry(3, \"Fizz\"),\n-          entry(4, \"4\"),\n-          entry(5, \"Buzz\"),\n-          entry(6, \"Fizz\"),\n-          entry(7, \"7\"),\n-          entry(8, \"8\"),\n-          entry(9, \"Fizz\"),\n-          entry(10, \"Buzz\"),\n-          entry(13, \"13\"),\n-          entry(14, \"14\"),\n-          entry(15, \"FizzBuzz\"),\n-          entry(16, \"16\"),\n-          entry(17, \"17\"),\n-          entry(18, \"Fizz\"),\n-          entry(19, \"19\"),\n-          entry(20, \"Buzz\"),\n-          entry(21, \"Fizz\"),\n-          entry(22, \"22\"),\n-          entry(23, \"23\"),\n-          entry(24, \"Fizz\"),\n-          entry(25, \"Buzz\"),\n-          entry(26, \"26\"),\n-          entry(27, \"Fizz\"),\n-          entry(28, \"28\"),\n-          entry(29, \"29\"),\n-          entry(30, \"FizzBuzz\")\n-  );\n+    public static Map<Integer, String> stage1 = Map.ofEntries(\n+            entry(1, \"1\"),\n+            entry(2, \"2\"),\n+            entry(3, \"Fizz\"),\n+            entry(4, \"4\"),\n+            entry(5, \"Buzz\"),\n+            entry(6, \"Fizz\"),\n+            entry(7, \"7\"),\n+            entry(8, \"8\"),\n+            entry(9, \"Fizz\"),\n+            entry(10, \"Buzz\"),\n+            entry(13, \"13\"),\n+            entry(14, \"14\"),\n+            entry(15, \"FizzBuzz\"),\n+            entry(16, \"16\"),\n+            entry(17, \"17\"),\n+            entry(18, \"Fizz\"),\n+            entry(19, \"19\"),\n+            entry(20, \"Buzz\"),\n+            entry(21, \"Fizz\"),\n+            entry(22, \"22\"),\n+            entry(23, \"23\"),\n+            entry(24, \"Fizz\"),\n+            entry(25, \"Buzz\"),\n+            entry(26, \"26\"),\n+            entry(27, \"Fizz\"),\n+            entry(28, \"28\"),\n+            entry(29, \"29\"),\n+            entry(30, \"FizzBuzz\")\n+    );\n \n-  public static Map<Integer, String> stage2 = Map.ofEntries(\n-          entry(7, \"Rizz\"),\n-          entry(9, \"FizzJazz\"),\n-          entry(14, \"Rizz\"),\n-          entry(18, \"FizzJazz\"),\n-          entry(21, \"FizzRizz\"),\n-          entry(27, \"FizzJazz\"),\n-          entry(28, \"Rizz\")\n-  );\n+    public static Map<Integer, String> stage2 = Map.ofEntries(\n+            entry(7, \"Rizz\"),\n+            entry(9, \"FizzJazz\"),\n+            entry(14, \"Rizz\"),\n+            entry(18, \"FizzJazz\"),\n+            entry(21, \"FizzRizz\"),\n+            entry(27, \"FizzJazz\"),\n+            entry(28, \"Rizz\")\n+    );\n \n-  @org.junit.Test\n-  public void stage1() {\n-    FizzBuzz FizzBuzz = new FizzBuzz();\n-    for (Map.Entry<Integer, String> entry : stage1.entrySet()) {\n-      Integer input = entry.getKey();\n-      String actual = FizzBuzz.fizzBuzz(entry.getKey());\n-      String expected = entry.getValue();\n-      Assert.assertEquals(\"for input: \" + input, expected, actual);\n+    @org.junit.Test\n+    public void stage1() {\n+        FizzBuzz FizzBuzz = new FizzBuzz();\n+        for (Map.Entry<Integer, String> entry : stage1.entrySet()) {\n+            Integer input = entry.getKey();\n+            String actual = FizzBuzz.fizzBuzz(entry.getKey());\n+            String expected = entry.getValue();\n+            Assert.assertEquals(\"for input: \" + input, expected, actual);\n+        }\n     }\n-  }\n \n-  @org.junit.Test\n-  public void stage2() {\n-    FizzBuzz FizzBuzz = new FizzBuzz();\n-    for (Map.Entry<Integer, String> entry : stage2.entrySet()) {\n-      Integer input = entry.getKey();\n-      String actual = FizzBuzz.fizzBuzz2(entry.getKey());\n-      String expected = entry.getValue();\n-      Assert.assertEquals(\"for input: \" + input, expected, actual);\n+    @org.junit.Test\n+    public void stage2() {\n+        FizzBuzz FizzBuzz = new FizzBuzz();\n+        for (Map.Entry<Integer, String> entry : stage2.entrySet()) {\n+            Integer input = entry.getKey();\n+            String actual = FizzBuzz.fizzBuzz2(entry.getKey());\n+            String expected = entry.getValue();\n+            Assert.assertEquals(\"for input: \" + input, expected, actual);\n+        }\n     }\n-  }\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "ded8ebf5830b6860aa760413670fd731c867cab5",
    "filename": "_1_basics/src/test/java/code/_2_challenge/_2_foobarqix/FooBarQixTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 42,
    "changes": 84,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/test/java/code/_2_challenge/_2_foobarqix/FooBarQixTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/9c0748664112eb0599984f2c3acc1944533d161e/_1_basics/src/test/java/code/_2_challenge/_2_foobarqix/FooBarQixTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_1_basics/src/test/java/code/_2_challenge/_2_foobarqix/FooBarQixTest.java?ref=9c0748664112eb0599984f2c3acc1944533d161e",
    "patch": "@@ -7,51 +7,51 @@\n import static java.util.Map.entry;\n \n public class FooBarQixTest {\n-  public static Map<Integer, String> stage1 = Map.ofEntries(\n-          entry(1, \"1\"),\n-          entry(2, \"2\"),\n-          entry(3, \"FooFoo\"),\n-          entry(4, \"4\"),\n-          entry(5, \"BarBar\"),\n-          entry(6, \"Foo\"),\n-          entry(7, \"QixQix\"),\n-          entry(8, \"8\"),\n-          entry(9, \"Foo\"),\n-          entry(10, \"Bar\"),\n-          entry(13, \"Foo\"),\n-          entry(15, \"FooBarBar\"),\n-          entry(21, \"FooQix\"),\n-          entry(33, \"FooFooFoo\"),\n-          entry(51, \"FooBar\"),\n-          entry(53, \"BarFoo\")\n-  );\n+    public static Map<Integer, String> stage1 = Map.ofEntries(\n+            entry(1, \"1\"),\n+            entry(2, \"2\"),\n+            entry(3, \"FooFoo\"),\n+            entry(4, \"4\"),\n+            entry(5, \"BarBar\"),\n+            entry(6, \"Foo\"),\n+            entry(7, \"QixQix\"),\n+            entry(8, \"8\"),\n+            entry(9, \"Foo\"),\n+            entry(10, \"Bar\"),\n+            entry(13, \"Foo\"),\n+            entry(15, \"FooBarBar\"),\n+            entry(21, \"FooQix\"),\n+            entry(33, \"FooFooFoo\"),\n+            entry(51, \"FooBar\"),\n+            entry(53, \"BarFoo\")\n+    );\n \n-  public static Map<Integer, String> stage2 = Map.ofEntries(\n-          entry(101, \"1*1\"),\n-          entry(303, \"FooFoo*Foo\"),\n-          entry(105, \"FooBarQix*Bar\"),\n-          entry(10101, \"FooQix**\")\n-  );\n+    public static Map<Integer, String> stage2 = Map.ofEntries(\n+            entry(101, \"1*1\"),\n+            entry(303, \"FooFoo*Foo\"),\n+            entry(105, \"FooBarQix*Bar\"),\n+            entry(10101, \"FooQix**\")\n+    );\n \n-  @org.junit.Test\n-  public void stage1() {\n-    FooBarQix FooBarQix = new FooBarQix();\n-    for (Map.Entry<Integer, String> entry : stage1.entrySet()) {\n-      Integer input = entry.getKey();\n-      String actual = FooBarQix.compute(entry.getKey());\n-      String expected = entry.getValue();\n-      Assert.assertEquals(\"for input: \" + input, expected, actual);\n+    @org.junit.Test\n+    public void stage1() {\n+        FooBarQix FooBarQix = new FooBarQix();\n+        for (Map.Entry<Integer, String> entry : stage1.entrySet()) {\n+            Integer input = entry.getKey();\n+            String actual = FooBarQix.compute(entry.getKey());\n+            String expected = entry.getValue();\n+            Assert.assertEquals(\"for input: \" + input, expected, actual);\n+        }\n     }\n-  }\n \n-  @org.junit.Test\n-  public void stage2() {\n-    FooBarQix FooBarQix = new FooBarQix();\n-    for (Map.Entry<Integer, String> entry : stage2.entrySet()) {\n-      Integer input = entry.getKey();\n-      String actual = FooBarQix.compute2(entry.getKey());\n-      String expected = entry.getValue();\n-      Assert.assertEquals(\"for input: \" + input, expected, actual);\n+    @org.junit.Test\n+    public void stage2() {\n+        FooBarQix FooBarQix = new FooBarQix();\n+        for (Map.Entry<Integer, String> entry : stage2.entrySet()) {\n+            Integer input = entry.getKey();\n+            String actual = FooBarQix.compute2(entry.getKey());\n+            String expected = entry.getValue();\n+            Assert.assertEquals(\"for input: \" + input, expected, actual);\n+        }\n     }\n-  }\n }\n\\ No newline at end of file"
  }
]
