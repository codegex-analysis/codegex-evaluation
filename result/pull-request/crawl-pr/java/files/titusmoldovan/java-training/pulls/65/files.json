[
  {
    "sha": "37c8886b432022769425439b10469c712a1c70dc",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/Main.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/Main.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/Main.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/Main.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,39 @@\n+import clean.code.chess.requirements.Game;\n+import clean.code.chess.requirements.PieceColor;\n+import clean.code.chess.requirements.Player;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+//        ChessBoard chessBoard = new ChessBoard();\n+//        chessBoard.getPieces().entrySet()\n+//                .stream()\n+//                .sorted(Map.Entry.<Coordinate, Piece>comparingByKey())\n+//                .forEach(System.out::println);\n+\n+        Player player1 = new Player(\"Player 1\", PieceColor.WHITE);\n+        Player player2 = new Player(\"Player 2\", PieceColor.BLACK);\n+\n+        Game game = new Game(player1,player2);\n+        game.startGame();\n+        System.out.println(\"Player 1 pieces:\");\n+        System.out.println(player1.getAvailablePieces());\n+        System.out.println(\"Player 2 pieces:\");\n+        System.out.println(player2.getAvailablePieces());\n+\n+        player1.movePiece(1,1,1,3);\n+        player1.movePiece(1,3,1,4);\n+        player1.movePiece(1,4,1,5);\n+        player1.capturePiece(1,5,2,6);\n+\n+\n+        System.out.println(player1.getAvailablePieces());\n+\n+\n+\n+    }\n+\n+\n+\n+}"
  },
  {
    "sha": "360c2a4290342b36a2e7316b9f58eb9b12db5c1a",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "status": "modified",
    "additions": 48,
    "deletions": 2,
    "changes": 50,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -1,15 +1,57 @@\n package clean.code.chess.requirements;\n \n+import clean.code.chess.requirements.Pieces.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class ChessBoard {\n \n     public static int MAX_BOARD_WIDTH = 7;\n     public static int MAX_BOARD_HEIGHT = 7;\n \n-    private Pawn[][] pieces;\n+    private Map<Coordinate, Piece> pieces = new HashMap<>();\n \n     public ChessBoard() {\n-        pieces = new Pawn[MAX_BOARD_WIDTH][MAX_BOARD_HEIGHT];\n+        loadPawns();\n+        loadOtherPieces();\n \n+        for(Piece piece : pieces.values()){\n+            piece.setChessBoard(this);\n+        }\n+    }\n+    private void loadOtherPieces() {\n+        for(int i = 0; i <= MAX_BOARD_WIDTH;i++){\n+            switch (i) {\n+                case 0,7:\n+                    pieces.put(new Coordinate(0,i),new Rook(PieceColor.WHITE,0,i));\n+                    pieces.put(new Coordinate(7,i),new Rook(PieceColor.BLACK,7,i));\n+                    break;\n+                case 1,6:\n+                    pieces.put(new Coordinate(0,i),new Bishop(PieceColor.WHITE,0,i));\n+                    pieces.put(new Coordinate(7,i),new Bishop(PieceColor.BLACK,7,i));\n+                    break;\n+                case 2,5:\n+                    pieces.put(new Coordinate(0,i),new Knight(PieceColor.WHITE,0,i));\n+                    pieces.put(new Coordinate(7,i),new Knight(PieceColor.BLACK,7,i));\n+                    break;\n+                case 3:\n+                    pieces.put(new Coordinate(0,i),new Queen(PieceColor.WHITE,0,i));\n+                    pieces.put(new Coordinate(7,i),new Queen(PieceColor.BLACK,7,i));\n+                    break;\n+                case 4:\n+                    pieces.put(new Coordinate(0,i),new King(PieceColor.WHITE,0,i));\n+                    pieces.put(new Coordinate(7,i),new King(PieceColor.BLACK,7,i));\n+\n+                    break;\n+            }\n+        }\n+    }\n+    private void loadPawns() {\n+        for(int i = 0; i <= MAX_BOARD_WIDTH; i++){\n+            pieces.put(new Coordinate(1,i),new Pawn(PieceColor.WHITE,1,i));\n+            pieces.put(new Coordinate(6,i),new Pawn(PieceColor.BLACK,6,i));\n+        }\n     }\n \n     public void Add(Pawn pawn, int xCoordinate, int yCoordinate, PieceColor pieceColor) {\n@@ -19,4 +61,8 @@ public void Add(Pawn pawn, int xCoordinate, int yCoordinate, PieceColor pieceCol\n     public boolean IsLegalBoardPosition(int xCoordinate, int yCoordinate) {\n         throw new UnsupportedOperationException(\"Need to implement ChessBoard.IsLegalBoardPosition()\");\n     }\n+\n+    public Map<Coordinate, Piece> getPieces() {\n+        return pieces;\n+    }\n }"
  },
  {
    "sha": "be122ac99894108913e2e543fccb51fdb562237c",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Coordinate.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Coordinate.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Coordinate.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Coordinate.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,68 @@\n+package clean.code.chess.requirements;\n+\n+import java.util.Objects;\n+\n+public class Coordinate implements Comparable<Coordinate> {\n+\n+    private int coordX;\n+    private int coordY;\n+\n+    public Coordinate(int coordX, int coordY) {\n+        this.coordX = coordX;\n+        this.coordY = coordY;\n+    }\n+\n+    public int getCoordX() {\n+        return coordX;\n+    }\n+\n+    public int getCoordY() {\n+        return coordY;\n+    }\n+\n+    public void setCoordX(int coordX) {\n+        this.coordX = coordX;\n+    }\n+\n+    public void setCoordY(int coordY) {\n+        this.coordY = coordY;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Coordinate{\" +\n+                \"coordX=\" + coordX +\n+                \", coordY=\" + coordY +\n+                '}';\n+    }\n+\n+    @Override\n+    public int compareTo(Coordinate o) {\n+        if (o.coordX == this.coordX){\n+            if(o.coordY > this.coordY){\n+                return -1;\n+            }else if (o.coordY < this.coordY){\n+                return 1;\n+            }else{\n+                return 0;\n+            }\n+        }else if( o.coordX > this.coordX){\n+            return -1;\n+        }else{\n+            return 1;\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof Coordinate)) return false;\n+        Coordinate that = (Coordinate) o;\n+        return coordX == that.coordX && coordY == that.coordY;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(coordX, coordY);\n+    }\n+}"
  },
  {
    "sha": "eb8cae0c94274cd2a335a70920a8a76619ee2d68",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Game.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Game.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Game.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Game.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,21 @@\n+package clean.code.chess.requirements;\n+\n+public class Game {\n+    private Player player1, player2;\n+    private ChessBoard chessBoard;\n+\n+    public Game(Player player1, Player player2) {\n+        this.player1 = player1;\n+        this.player2 = player2;\n+    }\n+\n+    public void startGame() {\n+        if(!player1.getPlayerColor().equals(player2.getPlayerColor())){\n+            chessBoard = new ChessBoard();\n+            player1.setChessBoard(chessBoard);\n+            player2.setChessBoard(chessBoard);\n+        }else{\n+            System.out.println(\"You can not\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "b4bbc0d15b9458c5ba2faf14018928d01b0a5dde",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java",
    "status": "removed",
    "additions": 0,
    "deletions": 59,
    "changes": 59,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/6a7666539287151260e7c5ec1480ef3b40e44dd7/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/6a7666539287151260e7c5ec1480ef3b40e44dd7/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java?ref=6a7666539287151260e7c5ec1480ef3b40e44dd7",
    "patch": "@@ -1,59 +0,0 @@\n-package clean.code.chess.requirements;\n-\n-public class Pawn {\n-\n-    private ChessBoard chessBoard;\n-    private int xCoordinate;\n-    private int yCoordinate;\n-    private PieceColor pieceColor;\n-\n-    public Pawn(PieceColor pieceColor) {\n-        this.pieceColor = pieceColor;\n-    }\n-\n-    public ChessBoard getChesssBoard() {\n-        return chessBoard;\n-    }\n-\n-    public void setChessBoard(ChessBoard chessBoard) {\n-        this.chessBoard = chessBoard;\n-    }\n-\n-    public int getXCoordinate() {\n-        return xCoordinate;\n-    }\n-\n-    public void setXCoordinate(int value) {\n-        this.xCoordinate = value;\n-    }\n-\n-    public int getYCoordinate() {\n-        return yCoordinate;\n-    }\n-\n-    public void setYCoordinate(int value) {\n-        this.yCoordinate = value;\n-    }\n-\n-    public PieceColor getPieceColor() {\n-        return this.pieceColor;\n-    }\n-\n-    private void setPieceColor(PieceColor value) {\n-        pieceColor = value;\n-    }\n-\n-    public void Move(MovementType movementType, int newX, int newY) {\n-        throw new UnsupportedOperationException(\"Need to implement Pawn.Move()\") ;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return CurrentPositionAsString();\n-    }\n-\n-    protected String CurrentPositionAsString() {\n-        String eol = System.lineSeparator();\n-        return String.format(\"Current X: {1}{0}Current Y: {2}{0}Piece Color: {3}\", eol, xCoordinate, yCoordinate, pieceColor);\n-    }\n-}"
  },
  {
    "sha": "bb9064b4316be726e0487e29668e88459390b423",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Bishop.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Bishop.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Bishop.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Bishop.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,55 @@\n+package clean.code.chess.requirements.Pieces;\n+\n+import clean.code.chess.requirements.Coordinate;\n+import clean.code.chess.requirements.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Bishop extends Piece{\n+\n+    public Bishop(PieceColor pieceColor, int xCoordinate, int yCoordinate) {\n+        super(pieceColor, xCoordinate, yCoordinate);\n+    }\n+\n+    @Override\n+    protected List<Coordinate> availablePositions(){\n+        List<Coordinate> positions = new ArrayList<>();\n+        if(xCoordinate + 3 <= 7) {\n+            if (yCoordinate + 1 <= 7) {\n+                positions.add(new Coordinate(xCoordinate + 3, yCoordinate + 1));\n+            } if (yCoordinate - 1 >= 0) {\n+                positions.add(new Coordinate(xCoordinate + 3, yCoordinate - 1));\n+            }\n+        }\n+        if (xCoordinate - 3  >= 0){\n+            if(yCoordinate + 1 < 7){\n+                positions.add(new Coordinate(xCoordinate-3,yCoordinate+1));\n+            } if (yCoordinate - 1 >= 0 ){\n+                positions.add(new Coordinate(xCoordinate-3,yCoordinate-1));\n+            }\n+        }\n+        if(yCoordinate + 3 <= 7) {\n+            if (xCoordinate + 1 <= 7) {\n+                positions.add(new Coordinate(xCoordinate + 1, yCoordinate + 3));\n+            } if (xCoordinate - 1 >= 0) {\n+                positions.add(new Coordinate(xCoordinate - 1, yCoordinate + 3));\n+            }\n+        }\n+        if (yCoordinate - 3  >= 0){\n+            if(xCoordinate + 1 <= 7){\n+                positions.add(new Coordinate(xCoordinate+1,yCoordinate-3));\n+            }if (xCoordinate - 1 >= 0 ){\n+                positions.add(new Coordinate(xCoordinate-1,yCoordinate-3));\n+            }\n+        }\n+        return positions;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Bishop{\" +\n+                \"pieceColor=\" + pieceColor +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "e3ebe8cf44b6f40100960bb0281aea35ae7d327d",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/King.java",
    "status": "added",
    "additions": 52,
    "deletions": 0,
    "changes": 52,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/King.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/King.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/King.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,52 @@\n+package clean.code.chess.requirements.Pieces;\n+\n+import clean.code.chess.requirements.Coordinate;\n+import clean.code.chess.requirements.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class King extends Piece {\n+    public King(PieceColor pieceColor, int xCoordinate, int yCoordinate) {\n+        super(pieceColor, xCoordinate, yCoordinate);\n+    }\n+\n+    @Override\n+    protected List<Coordinate> availablePositions() {\n+        List<Coordinate> positions = new ArrayList<>();\n+        if(xCoordinate+1 <=7 && yCoordinate+1 <=7){\n+            positions.add(new Coordinate(xCoordinate+1,yCoordinate+1));\n+        }\n+        if(xCoordinate+1 <=7 && yCoordinate-1 >=0){\n+            positions.add(new Coordinate(xCoordinate+1,yCoordinate-1));\n+        }\n+        if(xCoordinate-1 >=0 && yCoordinate -1 >=0){\n+            positions.add(new Coordinate(xCoordinate-1,yCoordinate-1));\n+        }\n+        if(xCoordinate -1 >=0 && yCoordinate+1 <=7){\n+            positions.add(new Coordinate(xCoordinate-1,yCoordinate+1));\n+        }\n+        if(xCoordinate+1 <= 7){\n+            positions.add(new Coordinate(xCoordinate+1,yCoordinate));\n+        }\n+        if(xCoordinate-1 >=0){\n+            positions.add(new Coordinate(xCoordinate-1,yCoordinate));\n+        }\n+        if(yCoordinate+1 <=7){\n+            positions.add(new Coordinate(xCoordinate,yCoordinate+1));\n+        }\n+        if(yCoordinate-1 >=0){\n+            positions.add(new Coordinate(xCoordinate,yCoordinate-1));\n+        }\n+        return positions;\n+\n+\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"King{\" +\n+                \"pieceColor=\" + pieceColor +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "b9c27eeb79b91f2e1e6cd0bbdd0c5c4df576b831",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Knight.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Knight.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Knight.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Knight.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,71 @@\n+package clean.code.chess.requirements.Pieces;\n+\n+import clean.code.chess.requirements.Coordinate;\n+import clean.code.chess.requirements.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Knight extends Piece{\n+    public Knight(PieceColor pieceColor, int xCoordinate, int yCoordinate) {\n+        super(pieceColor, xCoordinate, yCoordinate);\n+    }\n+\n+    @Override\n+    protected List<Coordinate> availablePositions() {\n+        List<Coordinate> availablePositions = new ArrayList<>();\n+        boolean while1 = false,while2 = false,while3 = false,while4 = false;\n+        for(int i = 1 ; i <= 7 ; i ++){\n+            while(xCoordinate+i <=7 && yCoordinate+i <=7 && !while1){\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate+i,yCoordinate+i))!=null){\n+                    availablePositions.add(new Coordinate(xCoordinate+i,yCoordinate+i));\n+                    while1 = true;\n+                    break;\n+                }else {\n+                    availablePositions.add(new Coordinate(xCoordinate+i,yCoordinate+i));\n+                }\n+            }\n+\n+            while(xCoordinate+i <=7 && yCoordinate-i >=0 && !while2){\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate+i,yCoordinate-i))!=null){\n+                    availablePositions.add(new Coordinate(xCoordinate+i,yCoordinate-i));\n+                    while2 = true;\n+                    break;\n+                }else {\n+                    availablePositions.add(new Coordinate(xCoordinate+i,yCoordinate-i));\n+                }\n+            }\n+            while(xCoordinate-i >=0 && yCoordinate+i <=7 && !while3){\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate-i,yCoordinate+i))!=null){\n+                    availablePositions.add(new Coordinate(xCoordinate-i,yCoordinate+i));\n+                    while3 = true;\n+                    break;\n+                }else {\n+                    availablePositions.add(new Coordinate(xCoordinate-i,yCoordinate+i));\n+                }\n+            }\n+\n+            while(xCoordinate-i >=0 && yCoordinate-i >=0 && !while4){\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate-i,yCoordinate-i))!=null){\n+                    availablePositions.add(new Coordinate(xCoordinate-i,yCoordinate-i));\n+                    while4 = true;\n+                    break;\n+                }else {\n+                    availablePositions.add(new Coordinate(xCoordinate-i,yCoordinate-i));\n+                }\n+            }\n+\n+            if(while1 && while2 && while3 && while4){\n+                break;\n+            }\n+        }\n+        return availablePositions;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Knight{\" +\n+                \"pieceColor=\" + pieceColor +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "fcd2e89394dc91c26965aa42c46c3a4074ca5022",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Pawn.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Pawn.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Pawn.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Pawn.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,91 @@\n+package clean.code.chess.requirements.Pieces;\n+\n+import clean.code.chess.requirements.Coordinate;\n+import clean.code.chess.requirements.MovementType;\n+import clean.code.chess.requirements.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Pawn extends Piece {\n+    public Pawn(PieceColor pieceColor, int xCoordinate, int yCoordinate) {\n+        super(pieceColor, xCoordinate, yCoordinate);\n+    }\n+\n+    public Pawn(PieceColor black) {\n+        super(black);\n+    }\n+\n+    @Override\n+    protected List<Coordinate> availablePositions() {\n+        List<Coordinate> positions = new ArrayList<>();\n+        if(xCoordinate==1){\n+            positions.add(new Coordinate(xCoordinate,yCoordinate+2));\n+            positions.add(new Coordinate(xCoordinate,yCoordinate+1));\n+        }else{\n+            positions.add(new Coordinate(xCoordinate,yCoordinate+1));\n+        }\n+        if(xCoordinate==6){\n+            positions.add(new Coordinate(xCoordinate,yCoordinate-2));\n+            positions.add(new Coordinate(xCoordinate,yCoordinate-1));\n+        }else{\n+            positions.add(new Coordinate(xCoordinate,yCoordinate-1));\n+        }\n+\n+        return positions;\n+    }\n+    protected List<Coordinate> capturePositions(){\n+        List<Coordinate> positions = new ArrayList<>();\n+        if(this.pieceColor.equals(PieceColor.WHITE)){\n+            if(yCoordinate+1 <=7 && xCoordinate +1 <=7){\n+                positions.add(new Coordinate(xCoordinate+1,yCoordinate+1));\n+            }\n+            if(yCoordinate+1 <=7 && xCoordinate - 1 >=0){\n+                positions.add(new Coordinate(xCoordinate-1,yCoordinate+1));\n+            }\n+        }\n+        if(this.pieceColor.equals(PieceColor.BLACK)){\n+            if(yCoordinate-1 >=0 && xCoordinate +1 <=7){\n+                positions.add(new Coordinate(xCoordinate+1,yCoordinate-1));\n+            }\n+            if(yCoordinate-1 >=0 && xCoordinate-1 >=0){\n+                positions.add(new Coordinate(xCoordinate-1,yCoordinate-1));\n+            }\n+        }\n+        return positions;\n+    }\n+\n+    @Override\n+    public void Move(MovementType movementType, int newX, int newY) {\n+        List<Coordinate> positions = new ArrayList<>();\n+        Coordinate desiredCoordinate = new Coordinate(newX,newY);\n+        if(movementType == MovementType.MOVE){\n+            positions = availablePositions();\n+            if (positions.contains(desiredCoordinate)) {\n+                this.xCoordinate = newX;\n+                this.yCoordinate = newY;\n+                System.out.println(\"Good moving position\");\n+                chessBoard.getPieces().remove(desiredCoordinate);\n+            }else{\n+                System.out.println(\"Unavailable moving position\");\n+            }\n+        }else{\n+            positions = capturePositions();\n+            if (positions.contains(desiredCoordinate)) {\n+                this.xCoordinate = newX;\n+                this.yCoordinate = newY;\n+                System.out.println(\"Good capture position\");\n+                chessBoard.getPieces().remove(desiredCoordinate);\n+            }else{\n+                System.out.println(\"Unavailable capture position\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Pawn{\" +\n+                \"pieceColor=\" + pieceColor +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "71ad9e674344f581072f8ed57fff3b57daa2364a",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Piece.java",
    "status": "added",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Piece.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Piece.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Piece.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,93 @@\n+package clean.code.chess.requirements.Pieces;\n+\n+import clean.code.chess.requirements.ChessBoard;\n+import clean.code.chess.requirements.Coordinate;\n+import clean.code.chess.requirements.MovementType;\n+import clean.code.chess.requirements.PieceColor;\n+\n+import java.util.List;\n+\n+public abstract class Piece {\n+\n+    protected ChessBoard chessBoard;\n+    protected PieceColor pieceColor;\n+\n+    protected int xCoordinate;\n+    protected int yCoordinate;\n+\n+    public Piece(PieceColor pieceColor, int xCoordinate, int yCoordinate) {\n+        this.pieceColor = pieceColor;\n+        this.xCoordinate = xCoordinate;\n+        this.yCoordinate = yCoordinate;\n+    }\n+\n+    public Piece(PieceColor color) {\n+        this.pieceColor = color;\n+    }\n+\n+    public ChessBoard getChesssBoard() {\n+        return chessBoard;\n+    }\n+\n+    public void setChessBoard(ChessBoard chessBoard) {\n+        this.chessBoard = chessBoard;\n+    }\n+\n+    public int getXCoordinate() {\n+        return xCoordinate;\n+    }\n+\n+    public void setXCoordinate(int value) {\n+        this.xCoordinate = value;\n+    }\n+\n+    public int getYCoordinate() {\n+        return yCoordinate;\n+    }\n+\n+    public void setYCoordinate(int value) {\n+        this.yCoordinate = value;\n+    }\n+\n+    public PieceColor getPieceColor() {\n+        return this.pieceColor;\n+    }\n+\n+    protected abstract List<Coordinate> availablePositions();\n+\n+    public void Move(MovementType movementType, int newX, int newY){\n+        Coordinate desiredCoordinate = new Coordinate(newX, newY);\n+\n+        List positions = availablePositions();\n+        if (positions.contains(desiredCoordinate)) {\n+            if (chessBoard.getPieces().get(desiredCoordinate) != null) {\n+                if (!chessBoard.getPieces().get(desiredCoordinate).getPieceColor().equals(pieceColor)) {\n+                    System.out.println(\"Good capture\");\n+                    this.xCoordinate = newX;\n+                    this.yCoordinate = newY;\n+                    chessBoard.getPieces().remove(desiredCoordinate);\n+                }else{\n+                    System.out.println(\"Unavailable position, your piece is here\");\n+                }\n+            } else {\n+                this.xCoordinate = newX;\n+                this.yCoordinate = newY;\n+                System.out.println(\"Good move\");\n+            }\n+        } else {\n+            System.out.println(\"Unavailable position\");\n+        }\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return CurrentPositionAsString();\n+    }\n+\n+    protected String CurrentPositionAsString() {\n+        String eol = System.lineSeparator();\n+        return String.format(\"Current X: {1}{0}Current Y: {2}{0}Piece Color: {3}\", eol, xCoordinate, yCoordinate, pieceColor);\n+    }\n+\n+}"
  },
  {
    "sha": "a5c7f909df562ecb45ebed2651c9e4db14921842",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Queen.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Queen.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Queen.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Queen.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,110 @@\n+package clean.code.chess.requirements.Pieces;\n+\n+import clean.code.chess.requirements.Coordinate;\n+import clean.code.chess.requirements.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Queen extends Piece{\n+\n+    public Queen(PieceColor pieceColor, int xCoordinate, int yCoordinate) {\n+        super(pieceColor, xCoordinate, yCoordinate);\n+    }\n+\n+    @Override\n+    protected List<Coordinate> availablePositions() {\n+        List<Coordinate> positions = new ArrayList<>();\n+        boolean while1 = false,while2 = false,while3 = false,while4 = false,\n+                while5=false,while6 = false, while7 =false,while8 = false;\n+\n+        for(int i = 0; i <= 7 ; i++) {\n+\n+            while (xCoordinate + i <= 7 && yCoordinate + i <= 7 && !while1) {\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate+i,yCoordinate+i))!=null){\n+                    positions.add(new Coordinate(xCoordinate + i, yCoordinate + i));\n+                    while1 = true;\n+                    break;\n+                }else {\n+                    positions.add(new Coordinate(xCoordinate + i, yCoordinate + i));\n+                }\n+            }\n+            while (xCoordinate + i <= 7 && yCoordinate - i >= 0 && !while2) {\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate+i,yCoordinate-i))!=null){\n+                    positions.add(new Coordinate(xCoordinate + i, yCoordinate - i));\n+                    while2 = true;\n+                    break;\n+                }else {\n+                    positions.add(new Coordinate(xCoordinate + i, yCoordinate - i));\n+                }\n+            }\n+            while (xCoordinate - i >= 0 && yCoordinate - i >= 0 && !while3) {\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate-i,yCoordinate-i))!=null){\n+                    positions.add(new Coordinate(xCoordinate - i, yCoordinate - i));\n+                    while3 = true;\n+                    break;\n+                }else {\n+                    positions.add(new Coordinate(xCoordinate - i, yCoordinate - i));\n+                }\n+            }\n+            while (xCoordinate - i >= 0 && yCoordinate + i <= 7 && !while4) {\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate-i,yCoordinate+i))!=null){\n+                    positions.add(new Coordinate(xCoordinate - i, yCoordinate + i));\n+                    while4 = true;\n+                    break;\n+                }else {\n+                    positions.add(new Coordinate(xCoordinate - i, yCoordinate + i));\n+                }\n+            }\n+            while (xCoordinate + i <= 7 && !while5) {\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate+i,yCoordinate))!=null){\n+                    positions.add(new Coordinate(xCoordinate + i, yCoordinate));\n+                    while5 = true;\n+                    break;\n+                }else {\n+                    positions.add(new Coordinate(xCoordinate + i, yCoordinate));\n+                }\n+            }\n+            while (xCoordinate - i >= 0 && !while6) {\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate-i,yCoordinate))!=null){\n+                    positions.add(new Coordinate(xCoordinate - i, yCoordinate));\n+                    while6 = true;\n+                    break;\n+                }else {\n+                    positions.add(new Coordinate(xCoordinate - i, yCoordinate));\n+                }\n+            }\n+            while (yCoordinate + i <= 7 && !while7) {\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate,yCoordinate+i))!=null){\n+                    positions.add(new Coordinate(xCoordinate, yCoordinate+i));\n+                    while7 = true;\n+                    break;\n+                }else {\n+                    positions.add(new Coordinate(xCoordinate, yCoordinate +i));\n+                }\n+            }\n+            while (yCoordinate - i >= 0 && !while8) {\n+                if (chessBoard.getPieces().get(new Coordinate(xCoordinate, yCoordinate - i)) != null) {\n+                    positions.add(new Coordinate(xCoordinate, yCoordinate - i));\n+                    while8 = true;\n+                    break;\n+                } else {\n+                    positions.add(new Coordinate(xCoordinate, yCoordinate - i));\n+                }\n+            }\n+            if(while1 && while2 && while3 && while4 && while5\n+                    && while6 && while7 && while8){\n+                break;\n+            }\n+        }\n+        return positions;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"Queen{\" +\n+                \"pieceColor=\" + pieceColor +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "48e0f83cb730b472deb680146c19392b11a2d93f",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Rook.java",
    "status": "added",
    "additions": 72,
    "deletions": 0,
    "changes": 72,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Rook.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Rook.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pieces/Rook.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,72 @@\n+package clean.code.chess.requirements.Pieces;\n+\n+import clean.code.chess.requirements.Coordinate;\n+import clean.code.chess.requirements.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Rook extends Piece{\n+    public Rook(PieceColor pieceColor, int xCoordinate, int yCoordinate) {\n+        super(pieceColor, xCoordinate, yCoordinate);\n+    }\n+\n+    @Override\n+    protected List<Coordinate> availablePositions() {\n+        List<Coordinate> availablePositions = new ArrayList<>();\n+        boolean while1 = false,while2 = false,while3 = false,while4 = false;\n+        for(int i = 1 ; i <= 7 ; i ++){\n+            while(xCoordinate+i <=7 && !while1){\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate+i,yCoordinate))!=null){\n+                    availablePositions.add(new Coordinate(xCoordinate+i,yCoordinate));\n+                    while1 = true;\n+                    break;\n+                }else {\n+                    availablePositions.add(new Coordinate(xCoordinate+i,yCoordinate));\n+                }\n+            }\n+\n+            while(yCoordinate-i >=0 && !while2){\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate,yCoordinate-i))!=null){\n+                    availablePositions.add(new Coordinate(xCoordinate,yCoordinate-i));\n+                    while2 = true;\n+                    break;\n+                }else {\n+                    availablePositions.add(new Coordinate(xCoordinate,yCoordinate-i));\n+                }\n+            }\n+            while(xCoordinate-i >=0 && !while3){\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate-i,yCoordinate))!=null){\n+                    availablePositions.add(new Coordinate(xCoordinate-i,yCoordinate));\n+                    while3 = true;\n+                    break;\n+                }else {\n+                    availablePositions.add(new Coordinate(xCoordinate-i,yCoordinate));\n+                }\n+            }\n+\n+            while(yCoordinate+i <=7 && !while4){\n+                if(chessBoard.getPieces().get(new Coordinate(xCoordinate,yCoordinate-i))!=null){\n+                    availablePositions.add(new Coordinate(xCoordinate,yCoordinate-i));\n+                    while4 = true;\n+                    break;\n+                }else {\n+                    availablePositions.add(new Coordinate(xCoordinate,yCoordinate-i));\n+                }\n+            }\n+\n+            if(while1 && while2 && while3 && while4){\n+                break;\n+            }\n+        }\n+        return availablePositions;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"Rook{\" +\n+                \"pieceColor=\" + pieceColor +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "789ec92cdb42b5def47158ca1b12401785d2d68b",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Player.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Player.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f0a24dc030071aa5ae94e31a1b5abf803b606e6b/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Player.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Player.java?ref=f0a24dc030071aa5ae94e31a1b5abf803b606e6b",
    "patch": "@@ -0,0 +1,60 @@\n+package clean.code.chess.requirements;\n+\n+import clean.code.chess.requirements.Pieces.Piece;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class Player {\n+\n+    private String name;\n+    private PieceColor playerColor;\n+    private ChessBoard chessBoard;\n+\n+\n+    public Player(String name, PieceColor playerColor) {\n+        this.name = name;\n+        this.playerColor = playerColor;\n+    }\n+\n+    public Map<Coordinate,Piece> getAvailablePieces() {\n+        Map<Coordinate, Piece> myPieces = new HashMap<>();\n+        for(Piece p : chessBoard.getPieces().values()){\n+            if(p.getPieceColor().equals(playerColor)){\n+                myPieces.put(new Coordinate(p.getXCoordinate(),p.getYCoordinate()),p);\n+            }\n+        }\n+        return myPieces;\n+    }\n+    public Map<Coordinate,Piece> getOpponentPieces(){\n+        Map<Coordinate, Piece> opPieces = new HashMap<>();\n+        for(Piece p : chessBoard.getPieces().values()){\n+            if(!p.getPieceColor().equals(playerColor)){\n+                opPieces.put(new Coordinate(p.getXCoordinate(),p.getYCoordinate()),p);\n+            }\n+        }\n+        return opPieces;\n+    }\n+\n+    public void movePiece(int curXCoord, int curYCoord, int nextXCoord, int nextYCoord){\n+        Piece piece = getAvailablePieces().get(new Coordinate(curXCoord,curYCoord));\n+        piece.Move(MovementType.MOVE,nextXCoord,nextYCoord);\n+    }\n+    public void capturePiece(int curXCoord, int curYCoord, int nextXCoord, int nextYCoord){\n+        Piece piece = getAvailablePieces().get(new Coordinate(curXCoord,curYCoord));\n+        piece.Move(MovementType.CAPTURE,nextXCoord,nextYCoord);\n+    }\n+\n+    public PieceColor getPlayerColor() {\n+        return playerColor;\n+    }\n+\n+    public ChessBoard getChessBoard() {\n+        return chessBoard;\n+    }\n+\n+    public void setChessBoard(ChessBoard chessBoard) {\n+        this.chessBoard = chessBoard;\n+    }\n+\n+}"
  }
]
