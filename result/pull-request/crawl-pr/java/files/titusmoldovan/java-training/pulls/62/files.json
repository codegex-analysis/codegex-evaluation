[
  {
    "sha": "f04927de72f087ad517a11b0910f0b8e3e7a98f8",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "status": "modified",
    "additions": 19,
    "deletions": 2,
    "changes": 21,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/ChessBoard.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -13,10 +13,27 @@ public ChessBoard() {\n     }\n \n     public void Add(Pawn pawn, int xCoordinate, int yCoordinate, PieceColor pieceColor) {\n-        throw new UnsupportedOperationException(\"Need to implement ChessBoard.add()\");\n+        if(!IsLegalBoardPosition(xCoordinate, yCoordinate) || pieces[xCoordinate][yCoordinate] != null){\n+           pawn.setXCoordinate(-1);\n+           pawn.setYCoordinate(-1);\n+        } else {\n+            pawn.setXCoordinate(xCoordinate);\n+            pawn.setYCoordinate(yCoordinate);\n+            pieces[xCoordinate][yCoordinate] = pawn;\n+        }\n     }\n \n     public boolean IsLegalBoardPosition(int xCoordinate, int yCoordinate) {\n-        throw new UnsupportedOperationException(\"Need to implement ChessBoard.IsLegalBoardPosition()\");\n+        if(xCoordinate >= 0 && xCoordinate < MAX_BOARD_WIDTH)\n+            if(yCoordinate >= 0 && yCoordinate < MAX_BOARD_HEIGHT)\n+            return true;\n+\n+\n+            return false;\n+\n+    }\n+\n+    public void removePawn(int xCoordinate, int yCoordinate){\n+        pieces[xCoordinate][yCoordinate] = null;\n     }\n }"
  },
  {
    "sha": "c7c672145dfbe4547faddef4d491bc6ef40616b8",
    "filename": "clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java",
    "status": "modified",
    "additions": 27,
    "deletions": 1,
    "changes": 28,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_1_project_requirements_chess/src/main/java/clean/code/chess/requirements/Pawn.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -44,7 +44,33 @@ private void setPieceColor(PieceColor value) {\n     }\n \n     public void Move(MovementType movementType, int newX, int newY) {\n-        throw new UnsupportedOperationException(\"Need to implement Pawn.Move()\") ;\n+        if(!chessBoard.IsLegalBoardPosition(newX, newY)){\n+            return;\n+        }\n+\n+        if(movementType == MovementType.CAPTURE){\n+            System.out.println(\"Not implemented yet\");\n+        }\n+        if(movementType == MovementType.MOVE){\n+            if(this.pieceColor == PieceColor.WHITE){\n+                if(xCoordinate == newX){\n+                    if(newY == yCoordinate +1){\n+                        chessBoard.removePawn(xCoordinate, yCoordinate);\n+                        chessBoard.Add(this, newX, newY, this.pieceColor);\n+                    }\n+                }\n+            }\n+            if(this.pieceColor == PieceColor.BLACK){\n+                if(xCoordinate == newX){\n+                    if(newY == yCoordinate -1){\n+                        chessBoard.removePawn(xCoordinate, yCoordinate);\n+                        chessBoard.Add(this, newX, newY, this.pieceColor);\n+                    }\n+                }\n+            }\n+\n+        }\n+\n     }\n \n     @Override"
  },
  {
    "sha": "cc167e99c6d89fd72d652dd840ccecd6cdaf2540",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Appetizer.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Appetizer.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Appetizer.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Appetizer.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,14 @@\n+package clean.code.design_patterns.requirements;\n+\n+public class Appetizer implements Food {\n+\n+    @Override\n+    public String prepareFood(){\n+        return \"Appetizer\";\n+    }\n+\n+    @Override\n+    public double foodPrice(){\n+        return 25.0;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ad710a82997359c0df383a98e1c3397e6c96120b",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/CompositionTest.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/CompositionTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/CompositionTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/CompositionTest.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,17 @@\n+package clean.code.design_patterns.requirements;\n+\n+public class CompositionTest {\n+\n+    //composition problem to imitate a pizza restaurant\n+\n+    public static void main(String[] args) {\n+        Kitchen kitchen = new Kitchen();\n+        Thread cook1 = new Cook(\"Cook1\",kitchen); cook1.start();\n+        Thread cook2 = new Cook(\"Cook2\",kitchen); cook2.start();\n+        Thread cook3 = new Cook(\"Cook3\",kitchen); cook3.start();\n+        Thread waiter1 = new Waiter(\"Waiter1\",kitchen); waiter1.start();\n+        Thread waiter2 = new Waiter(\"Waiter2\",kitchen); waiter2.start();\n+        Thread waiter3 = new Waiter(\"Waiter3\",kitchen); waiter3.start();\n+        Thread waiter4 = new Waiter(\"Waiter4\",kitchen); waiter4.start();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a754437688c33ce45b5a45e9d3fae08f9553a574",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Cook.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Cook.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Cook.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Cook.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,35 @@\n+package clean.code.design_patterns.requirements;\n+\n+\n+import java.util.*;\n+\n+public class Cook extends Thread {\n+    private String name;\n+    private Kitchen kitchen;\n+    private static int id;\n+\n+    //constructor\n+    public Cook(String name, Kitchen kitchen) {\n+        this.name = name;\n+        this.kitchen = kitchen;\n+    }\n+\n+\n+    //add a pizza to the kitchen class\n+    @Override\n+    public void run() {\n+        Random rand = new Random();\n+       while(true) {\n+           int noOfIngredients =rand.nextInt(4) + 3;\n+           int id1 = ++id;\n+           Pizza pizza = new Pizza(id1,noOfIngredients);\n+           kitchen.add(pizza);\n+           System.out.println(\"Pizza with id \" + pizza.getId() + \" having \" + pizza.getNumberOfIngredients() + \" ingredients was cooked\");\n+           try {\n+               sleep((5 + noOfIngredients) * 2);\n+           } catch (InterruptedException e) {\n+               e.printStackTrace();\n+           }\n+       }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8d1847d601fcfc982d72a36507433a57ee7a6d80",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Decorator.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Decorator.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Decorator.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Decorator.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,19 @@\n+package clean.code.design_patterns.requirements;\n+\n+public class Decorator implements Food{\n+    private Food newFood;\n+\n+    public Decorator(Food newFood) {\n+        this.newFood = newFood;\n+    }\n+\n+    @Override\n+    public String prepareFood() {\n+        return newFood.prepareFood();\n+    }\n+\n+    @Override\n+    public double foodPrice() {\n+        return newFood.foodPrice();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6d788daa4a7ba4fd47899ed8649485a72b169bb0",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/DecoratorTest.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/DecoratorTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/DecoratorTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/DecoratorTest.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,49 @@\n+package clean.code.design_patterns.requirements;\n+\n+import java.io.IOException;\n+import java.util.Scanner;\n+\n+public class DecoratorTest {\n+\n+    public static void main(String[] args) throws IOException {\n+        printMenu();\n+    }\n+\n+\n+    public static void printMenu() throws NumberFormatException, IOException {\n+        Scanner s = new Scanner(System.in);\n+        boolean check = true;\n+        while(check){\n+            System.out.println(\"==========Food Menu==========\");\n+            System.out.println(\"\\t1.Appetizer\");\n+            System.out.println(\"\\t2.ItalianFood\");\n+            System.out.println(\"\\t3.SpanishFood\");\n+            System.out.println(\"\\t4.Exit\");\n+            System.out.println(\"Enter your choice: \");\n+            int choice = s.nextInt();\n+            switch (choice){\n+                case 1: {\n+                    Appetizer appetizer = new Appetizer();\n+                    System.out.println(appetizer.prepareFood());\n+                    System.out.println(appetizer.foodPrice());\n+                    break;\n+                }\n+                case 2: {\n+                    Food food = new ItalianFood(new Appetizer());\n+                    System.out.println(food.prepareFood());\n+                    System.out.println(food.foodPrice());\n+                    break;\n+                }\n+                case 3: {\n+                    Food food1 = new SpanishFood(new Appetizer());\n+                    System.out.println(food1.prepareFood());\n+                    System.out.println(food1.foodPrice());\n+                    break;\n+                }\n+                case 4: {\n+                    check = false;\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "710fd88cbc4feee67ab88bbf10f46e0ab14ab7ed",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Food.java",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Food.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Food.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Food.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,6 @@\n+package clean.code.design_patterns.requirements;\n+\n+public interface Food {\n+    public String prepareFood();\n+    public double foodPrice();\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "f1dd8fbb4fc44cb0dcd65b25dc334e3e2f71b3d9",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/ItalianFood.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/ItalianFood.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/ItalianFood.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/ItalianFood.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,17 @@\n+package clean.code.design_patterns.requirements;\n+\n+public class ItalianFood extends Decorator{\n+    public ItalianFood(Food newFood) {\n+        super(newFood);\n+    }\n+\n+    @Override\n+    public String prepareFood() {\n+        return super.prepareFood()+ \" With Cannoli and Lasagna\";\n+    }\n+\n+    @Override\n+    public double foodPrice() {\n+        return super.foodPrice()+70.50;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a768c700eb88973b81ea5fd28137ae772a7ff5b4",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Kitchen.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Kitchen.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Kitchen.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Kitchen.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,40 @@\n+package clean.code.design_patterns.requirements;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+\n+//kitchen class\n+public class Kitchen {\n+\n+    private final Queue<Pizza> queue = new LinkedList<>();\n+    private static final int MAX_SIZE = 5; //the size of the queue\n+\n+    public synchronized void add(Pizza pizza){\n+        //block a thread from adding a pizza if the queue has more than 5 elements\n+        while(queue.size() > MAX_SIZE)\n+            try{\n+                System.out.println(\"Blocked add\");\n+                wait();\n+            } catch (InterruptedException e){\n+                e.printStackTrace();\n+            }\n+        //add the pizza and wake the next thread\n+        queue.add(pizza);\n+        notify();\n+    }\n+\n+\n+    public synchronized Pizza remove(){\n+        //if the queue is empty make the thread wait for an element to be added\n+        while (queue.isEmpty())\n+            try{\n+                System.out.println(\"Blocked remove\");\n+                wait();\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        //remove the pizza and notify the next thread\n+        notify();\n+        return queue.remove();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "913c11f23b14bbb8bbafee1c0b2eacf1b25af378",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Pizza.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Pizza.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Pizza.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Pizza.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,26 @@\n+package clean.code.design_patterns.requirements;\n+\n+//pizza class\n+public class Pizza {\n+    private int id; //separate id for every pizza baked\n+    private int numberOfIngredients; //the number of ingredients which is going to be random for every pizza(3 through 7)\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public int getNumberOfIngredients() {\n+        return numberOfIngredients;\n+    }\n+\n+    public Pizza(int id, int numberOfIngredients) {\n+        this.id = id;\n+        this.numberOfIngredients = numberOfIngredients;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Pizza number \" + id +\n+                \", having \" + numberOfIngredients + \" ingredients\";\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ed408b69a8b031153be9d98d7419e09ceb286f7f",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/SpanishFood.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/SpanishFood.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/SpanishFood.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/SpanishFood.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,17 @@\n+package clean.code.design_patterns.requirements;\n+\n+public class SpanishFood extends Decorator{\n+    public SpanishFood(Food newFood) {\n+        super(newFood);\n+    }\n+\n+    @Override\n+    public String prepareFood() {\n+        return super.prepareFood()+ \" With Gazpacho and Paella\";\n+    }\n+\n+    @Override\n+    public double foodPrice() {\n+        return super.foodPrice()+ 82.75;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7c9c5c8996dad64dcc3a7e74f64fc15bf001ec64",
    "filename": "clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Waiter.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Waiter.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/10806a00d88f3ef15e74310324d38d749594e3fb/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Waiter.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/clean_code_projects/_2_project_requirements_design_patterns/src/main/java/clean/code/design_patterns/requirements/Waiter.java?ref=10806a00d88f3ef15e74310324d38d749594e3fb",
    "patch": "@@ -0,0 +1,27 @@\n+package clean.code.design_patterns.requirements;\n+\n+//waiter class\n+public class Waiter extends Thread {\n+    private String name;\n+    private Kitchen kitchen;\n+\n+    public Waiter(String name, Kitchen kitchen){\n+        super();\n+        this.name = name;\n+        this.kitchen = kitchen;\n+    }\n+\n+    //take a pizza from the kitchen class\n+    @Override\n+    public void run() {\n+            while(true){\n+                Pizza pizza = kitchen.remove();\n+                System.out.println(pizza.toString() + \" has been taken for delivery.\");\n+                try{\n+                    sleep(10);\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+    }\n+}\n\\ No newline at end of file"
  }
]
