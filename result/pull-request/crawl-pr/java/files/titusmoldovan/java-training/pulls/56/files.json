[
  {
    "sha": "67c1836171009d015a0873af448e17e114e75bb1",
    "filename": "projects/pom.xml",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/pom.xml",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/pom.xml",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/pom.xml?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>java.training</artifactId>\n+        <groupId>brevity</groupId>\n+        <version>1.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>projects</artifactId>\n+\n+\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "d7b4e292d142696950b407bbf857c209d26e3112",
    "filename": "projects/src/main/java/chess/game/Main.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/Main.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/Main.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/Main.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,16 @@\n+package chess.game;\n+\n+import chess.game.domain.Board;\n+import chess.game.repository.Repository;\n+import chess.game.service.Service;\n+import chess.game.ui.Console;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Board board = new Board();\n+        Repository repository = new Repository(board);\n+        Service service = new Service(repository);\n+        Console console = new Console(service);\n+        console.run();\n+    }\n+}"
  },
  {
    "sha": "3ccd76e54dd8b3e0975b0a20384beda3c6374203",
    "filename": "projects/src/main/java/chess/game/domain/Board.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/Board.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/Board.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/Board.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,75 @@\n+package chess.game.domain;\n+\n+import chess.game.domain.pieces.King;\n+import chess.game.domain.pieces.Piece;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class Board {\n+    public static final int rows = 8;\n+    public static final int columns = 8;\n+    private final List<List<Piece>> grid;\n+    private int nrKings = 0;\n+\n+    public Board() {\n+        grid = new ArrayList<>();\n+        loadGrid();\n+    }\n+\n+    private void loadGrid() {\n+        for (int i = 0; i < Board.rows; i++) {\n+            List<Piece> row = new ArrayList<>();\n+            for (int j = 0; j < Board.columns; j++)\n+                row.add(null);\n+            grid.add(row);\n+        }\n+    }\n+\n+    public Piece get(Coordinates c) {\n+        return grid.get(c.getX()).get(c.getY());\n+    }\n+\n+    public void setGrid(Piece piece, Coordinates c) {\n+        List<Piece> gridRow = grid.get(c.getX());\n+        if (gridRow.get(c.getY()) != null && gridRow.get(c.getY()).getClass() == King.class)\n+            nrKings--;\n+        gridRow.set(c.getY(), piece);\n+        grid.set(c.getX(), gridRow);\n+    }\n+\n+    public boolean isEmpty(Coordinates c) {\n+        return grid.get(c.getX()).get(c.getY()) == null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(\"  \");\n+        for (int cols = 0; cols < Board.columns; cols++)\n+            stringBuilder.append(cols).append(\"  \");\n+        stringBuilder.append(\"\\n\");\n+        AtomicInteger cols = new AtomicInteger();\n+        cols.set(Board.columns - 1);\n+        grid.forEach(row -> {\n+            stringBuilder.append(cols.getAndDecrement()).append(\" \");\n+            row.forEach(e -> {\n+                if (e == null)\n+                    stringBuilder.append(\"__ \");\n+                else\n+                    stringBuilder.append(e.getSymbol()).append(\" \");\n+            });\n+            stringBuilder.append(\"\\n\");\n+        });\n+        return stringBuilder.toString();\n+    }\n+\n+    public int getNrKing() {\n+        return nrKings;\n+    }\n+\n+    public void setNrKing(int nrKings) {\n+        this.nrKings = nrKings;\n+    }\n+}"
  },
  {
    "sha": "b173566a4ccc9f9536ca4daae22e824046190114",
    "filename": "projects/src/main/java/chess/game/domain/Coordinates.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/Coordinates.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/Coordinates.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/Coordinates.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,47 @@\n+package chess.game.domain;\n+\n+import java.util.Objects;\n+\n+public class Coordinates {\n+    private int x;\n+    private int y;\n+\n+    public Coordinates(int x, int y) {\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    public int getX() {\n+        return x;\n+    }\n+\n+    public void setX(int x) {\n+        this.x = x;\n+    }\n+\n+    public int getY() {\n+        return y;\n+    }\n+\n+    public void setY(int y) {\n+        this.y = y;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Coordinates that = (Coordinates) o;\n+        return x == that.x && y == that.y;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(x, y);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + x + \" \" + y + \")\";\n+    }\n+}"
  },
  {
    "sha": "3afa9423efdf6aba28165db7fd178c0853589546",
    "filename": "projects/src/main/java/chess/game/domain/PieceColor.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/PieceColor.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/PieceColor.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/PieceColor.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,5 @@\n+package chess.game.domain;\n+\n+public enum PieceColor {\n+    BLACK, WHITE;\n+}"
  },
  {
    "sha": "b41973b0062aa715923381723f73210ce7658eda",
    "filename": "projects/src/main/java/chess/game/domain/pieces/Bishop.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Bishop.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Bishop.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/pieces/Bishop.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,59 @@\n+package chess.game.domain.pieces;\n+\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class Bishop extends Piece {\n+    public Bishop(PieceColor color) {\n+        super(color);\n+    }\n+\n+    @Override\n+    public String getSymbol() {\n+        if (this.getColor() == PieceColor.WHITE)\n+            return \"WB\";\n+        else\n+            return \"BB\";\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleMovements(Coordinates c) {\n+        List<Coordinates> coordinates = new ArrayList<>();\n+        int copyX = c.getX() + 1;\n+        int support = 1;\n+        while (copyX < Board.rows) {\n+            if (c.getY() - support >= 0)\n+                coordinates.add(new Coordinates(copyX, c.getY() - support));\n+            if (c.getY() + support < Board.columns)\n+                coordinates.add(new Coordinates(copyX, c.getY() + support));\n+            copyX++;\n+            support += 2;\n+        }\n+        copyX = c.getX() - 1;\n+        support = 1;\n+        while (copyX >= 0) {\n+            if (c.getY() - support >= 0)\n+                coordinates.add(new Coordinates(copyX, c.getY() - support));\n+            if (c.getY() + support < Board.columns)\n+                coordinates.add(new Coordinates(copyX, c.getY() + support));\n+            copyX--;\n+            support += 2;\n+        }\n+        return coordinates;\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleCaptures(Coordinates c) {\n+        return getPossibleMovements(c);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Bishop\";\n+    }\n+}"
  },
  {
    "sha": "7b892ff227c831bd13d4064593b579323925233e",
    "filename": "projects/src/main/java/chess/game/domain/pieces/King.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/King.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/King.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/pieces/King.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,56 @@\n+package chess.game.domain.pieces;\n+\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class King extends Piece {\n+    public King(PieceColor color) {\n+        super(color);\n+    }\n+\n+    @Override\n+    public String getSymbol() {\n+        if (this.getColor() == PieceColor.WHITE)\n+            return \"WK\";\n+        else\n+            return \"BK\";\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleMovements(Coordinates c) {\n+        List<Coordinates> coordinates = new ArrayList<>();\n+        if (c.getX() + 1 < Board.columns) {\n+            coordinates.add(new Coordinates(c.getX() + 1, c.getY()));\n+            if (c.getY() - 1 >= 0)\n+                coordinates.add(new Coordinates(c.getX() + 1, c.getY() - 1));\n+            if (c.getY() + 1 < Board.columns)\n+                coordinates.add(new Coordinates(c.getX() + 1, c.getY() + 1));\n+        }\n+        if (c.getX() - 1 >= 0) {\n+            coordinates.add(new Coordinates(c.getX() - 1, c.getY()));\n+            if (c.getY() - 1 >= 0)\n+                coordinates.add(new Coordinates(c.getX() - 1, c.getY() - 1));\n+            if (c.getY() + 1 < Board.columns)\n+                coordinates.add(new Coordinates(c.getX() - 1, c.getY() + 1));\n+        }\n+        if (c.getY() - 1 >= 0)\n+            coordinates.add(new Coordinates(c.getX(), c.getY() - 1));\n+        if (c.getY() + 1 < Board.columns)\n+            coordinates.add(new Coordinates(c.getX(), c.getY() + 1));\n+        return coordinates;\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleCaptures(Coordinates c) {\n+        return getPossibleMovements(c);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"King\";\n+    }\n+}"
  },
  {
    "sha": "0ec0f5526b8dcff490f1970a17748d44a8fe0a8c",
    "filename": "projects/src/main/java/chess/game/domain/pieces/Knight.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Knight.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Knight.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/pieces/Knight.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,63 @@\n+package chess.game.domain.pieces;\n+\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class Knight extends Piece {\n+    public Knight(PieceColor color) {\n+        super(color);\n+    }\n+\n+    @Override\n+    public String getSymbol() {\n+        if (this.getColor() == PieceColor.WHITE)\n+            return \"Wk\";\n+        else\n+            return \"Bk\";\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleMovements(Coordinates c) {\n+        List<Coordinates> coordinates = new ArrayList<>();\n+        if (c.getX() + 2 < Board.rows) {\n+            if (c.getY() - 1 >= 0)\n+                coordinates.add(new Coordinates(c.getX() + 2, c.getY() - 1));\n+            if (c.getY() + 1 < Board.columns)\n+                coordinates.add(new Coordinates(c.getX() + 2, c.getY() + 1));\n+        }\n+        if (c.getX() - 2 >= 0) {\n+            if (c.getY() - 1 >= 0)\n+                coordinates.add(new Coordinates(c.getX() - 2, c.getY() - 1));\n+            if (c.getY() + 1 < Board.columns)\n+                coordinates.add(new Coordinates(c.getX() - 2, c.getY() + 1));\n+        }\n+        if (c.getY() + 2 < Board.columns) {\n+            if (c.getX() - 1 >= 0)\n+                coordinates.add(new Coordinates(c.getX() - 1, c.getY() + 2));\n+            if (c.getX() + 1 < Board.rows)\n+                coordinates.add(new Coordinates(c.getX() + 1, c.getY() + 2));\n+        }\n+        if (c.getY() - 2 >= 0) {\n+            if (c.getX() - 1 >= 0)\n+                coordinates.add(new Coordinates(c.getX() - 1, c.getY() - 2));\n+            if (c.getX() + 1 < Board.rows)\n+                coordinates.add(new Coordinates(c.getX() + 1, c.getY() - 2));\n+        }\n+        return coordinates;\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleCaptures(Coordinates c) {\n+        return getPossibleMovements(c);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Knight\";\n+    }\n+}"
  },
  {
    "sha": "82a6ce8865b43597fbfc2d072a59f4e91c59229b",
    "filename": "projects/src/main/java/chess/game/domain/pieces/Pawn.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Pawn.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Pawn.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/pieces/Pawn.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,75 @@\n+package chess.game.domain.pieces;\n+\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class Pawn extends Piece {\n+    private boolean isFirstMove;\n+\n+    public Pawn(PieceColor color) {\n+        super(color);\n+        isFirstMove = true;\n+    }\n+\n+    @Override\n+    public String getSymbol() {\n+        if (this.getColor() == PieceColor.WHITE)\n+            return \"WP\";\n+        else\n+            return \"BP\";\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleMovements(Coordinates c) {\n+        List<Coordinates> coordinates = new ArrayList<>();\n+        if (this.getColor() == PieceColor.BLACK) {\n+            if (c.getX() + 1 < Board.rows) {\n+                coordinates.add(new Coordinates(c.getX() + 1, c.getY()));\n+                if (isFirstMove) {\n+                    coordinates.add(new Coordinates(c.getX() + 2, c.getY()));\n+                    isFirstMove = false;\n+                }\n+            }\n+        } else {\n+            if (c.getX() - 1 >= 0) {\n+                coordinates.add(new Coordinates(c.getX() - 1, c.getY()));\n+                if (isFirstMove) {\n+                    coordinates.add(new Coordinates(c.getX() - 2, c.getY()));\n+                    isFirstMove = false;\n+                }\n+            }\n+        }\n+        return coordinates;\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleCaptures(Coordinates c) {\n+        List<Coordinates> coordinates = new ArrayList<>();\n+        if (this.getColor() == PieceColor.WHITE) {\n+            if (c.getX() + 1 < Board.rows) {\n+                if (c.getY() - 1 >= 0)\n+                    coordinates.add(new Coordinates(c.getX() + 1, c.getY() - 1));\n+                if (c.getY() + 1 < Board.columns)\n+                    coordinates.add(new Coordinates(c.getX() + 1, c.getY() + 1));\n+            }\n+        } else {\n+            if (c.getX() - 1 >= 0) {\n+                if (c.getY() - 1 >= 0)\n+                    coordinates.add(new Coordinates(c.getX() - 1, c.getY() - 1));\n+                if (c.getY() + 1 < Board.columns)\n+                    coordinates.add(new Coordinates(c.getX() - 1, c.getY() + 1));\n+            }\n+        }\n+        return coordinates;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Pawn\";\n+    }\n+}"
  },
  {
    "sha": "f95b689a8c9331f5d43da4f4b2e3aa28360d848d",
    "filename": "projects/src/main/java/chess/game/domain/pieces/Piece.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Piece.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Piece.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/pieces/Piece.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,24 @@\n+package chess.game.domain.pieces;\n+\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+\n+import java.util.List;\n+\n+public abstract class Piece {\n+    private final PieceColor color;\n+\n+    public Piece(PieceColor color) {\n+        this.color = color;\n+    }\n+\n+    public PieceColor getColor() {\n+        return color;\n+    }\n+\n+    public abstract String getSymbol();\n+\n+    public abstract List<Coordinates> getPossibleMovements(Coordinates c);\n+\n+    public abstract List<Coordinates> getPossibleCaptures(Coordinates c);\n+}"
  },
  {
    "sha": "f34df461dc2aeeffefed8e414be50812f615169e",
    "filename": "projects/src/main/java/chess/game/domain/pieces/Queen.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Queen.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Queen.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/pieces/Queen.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,68 @@\n+package chess.game.domain.pieces;\n+\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class Queen extends Piece {\n+    public Queen(PieceColor color) {\n+        super(color);\n+    }\n+\n+    @Override\n+    public String getSymbol() {\n+        if (this.getColor() == PieceColor.WHITE)\n+            return \"WQ\";\n+        else\n+            return \"BQ\";\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleMovements(Coordinates c) {\n+        List<Coordinates> coordinates = new ArrayList<>();\n+        int copyX = c.getX() + 1;\n+        int support = 1;\n+        while (copyX < Board.rows) {\n+            if (c.getY() - support >= 0)\n+                coordinates.add(new Coordinates(copyX, c.getY() - support));\n+            if (c.getY() + support < Board.columns)\n+                coordinates.add(new Coordinates(copyX, c.getY() + support));\n+            copyX++;\n+            support += 2;\n+        }\n+        copyX = c.getX() - 1;\n+        support = 1;\n+        while (copyX >= 0) {\n+            if (c.getY() - support >= 0)\n+                coordinates.add(new Coordinates(copyX, c.getY() - support));\n+            if (c.getY() + support < Board.columns)\n+                coordinates.add(new Coordinates(copyX, c.getY() + support));\n+            copyX--;\n+            support += 2;\n+        }\n+        for (int i = Board.rows - 1; i >= 0; i--) {\n+            if (i != c.getX())\n+                coordinates.add(new Coordinates(i, c.getY()));\n+        }\n+        for (int i = Board.columns - 1; i >= 0; i--) {\n+            if (i != c.getY())\n+                coordinates.add(new Coordinates(c.getX(), i));\n+        }\n+        return coordinates;\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleCaptures(Coordinates c) {\n+        return getPossibleMovements(c);\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"Queen\";\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "79d3362a04947694d869e3f4175392332c871db8",
    "filename": "projects/src/main/java/chess/game/domain/pieces/Rook.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Rook.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/domain/pieces/Rook.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/domain/pieces/Rook.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,47 @@\n+package chess.game.domain.pieces;\n+\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class Rook extends Piece {\n+    public Rook(PieceColor color) {\n+        super(color);\n+    }\n+\n+    @Override\n+    public String getSymbol() {\n+        if (this.getColor() == PieceColor.WHITE)\n+            return \"WR\";\n+        else\n+            return \"BR\";\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleMovements(Coordinates c) {\n+        List<Coordinates> coordinates = new ArrayList<>();\n+        for (int i = Board.rows - 1; i >= 0; i--) {\n+            if (i != c.getX())\n+                coordinates.add(new Coordinates(i, c.getY()));\n+        }\n+        for (int i = Board.columns - 1; i >= 0; i--) {\n+            if (i != c.getY())\n+                coordinates.add(new Coordinates(c.getX(), i));\n+        }\n+        return coordinates;\n+    }\n+\n+    @Override\n+    public List<Coordinates> getPossibleCaptures(Coordinates c) {\n+        return getPossibleMovements(c);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Rook\";\n+    }\n+}"
  },
  {
    "sha": "968a247c79d8e5e61c151a63bf989a132aed8c79",
    "filename": "projects/src/main/java/chess/game/exceptions/ChessException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/exceptions/ChessException.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/exceptions/ChessException.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/exceptions/ChessException.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,7 @@\n+package chess.game.exceptions;\n+\n+public class ChessException extends RuntimeException {\n+    public ChessException(String msg) {\n+        super(msg);\n+    }\n+}"
  },
  {
    "sha": "080c8b1fabc067be0fdf9703d5855f5a8454de11",
    "filename": "projects/src/main/java/chess/game/exceptions/RepositoryException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/exceptions/RepositoryException.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/exceptions/RepositoryException.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/exceptions/RepositoryException.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,7 @@\n+package chess.game.exceptions;\n+\n+public class RepositoryException extends RuntimeException {\n+    public RepositoryException(String msg) {\n+        super(msg);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "e7ac14f7cdf8667e6516c4818738794a8ce7d51a",
    "filename": "projects/src/main/java/chess/game/repository/Repository.java",
    "status": "added",
    "additions": 114,
    "deletions": 0,
    "changes": 114,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/repository/Repository.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/repository/Repository.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/repository/Repository.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,114 @@\n+package chess.game.repository;\n+\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+import chess.game.domain.pieces.*;\n+import chess.game.exceptions.RepositoryException;\n+\n+import java.util.List;\n+\n+\n+public class Repository {\n+    private final Board board;\n+\n+    public Repository(Board board) {\n+        this.board = board;\n+        initializeBoard();\n+    }\n+\n+    public String getStringBoard() {\n+        return board.toString();\n+    }\n+\n+    public int getNrKings() {\n+        return board.getNrKing();\n+    }\n+\n+    private void checkPosition(Coordinates c) {\n+        StringBuilder msg = new StringBuilder();\n+        if (c.getX() < 0 || c.getX() >= Board.rows)\n+            msg.append(\"Invalid row!\\n\");\n+        if (c.getY() < 0 || c.getY() >= Board.columns)\n+            msg.append(\"Invalid column!\\n\");\n+        if (msg.length() > 0)\n+            throw new RepositoryException(msg.toString());\n+    }\n+\n+    private void addPiece(Piece piece, Coordinates c) {\n+        checkPosition(c);\n+        board.setGrid(piece, c);\n+    }\n+\n+    public void movePiece(Coordinates from, Coordinates to, PieceColor color) {\n+        checkPosition(from);\n+        checkPosition(to);\n+        if (board.isEmpty(from))\n+            throw new RepositoryException(\"No piece to move!\\n\");\n+        Piece piece = board.get(from);\n+        if (!piece.getColor().equals(color))\n+            throw new RepositoryException(\"Not your piece!\\n\");\n+        if (!board.isEmpty(to))\n+            throw new RepositoryException(\"Occupied position!\\n\");\n+        List<Coordinates> coordinates = piece.getPossibleMovements(from);\n+        if (!coordinates.contains(to))\n+            throw new RepositoryException(\"Invalid move for a \" + piece + \"!\\n\");\n+        board.setGrid(null, from);\n+        board.setGrid(piece, to);\n+    }\n+\n+    public void capturePiece(Coordinates from, Coordinates to, PieceColor color) {\n+        checkPosition(from);\n+        checkPosition(to);\n+        if (board.isEmpty(from))\n+            throw new RepositoryException(\"No piece with which to capture!\\n\");\n+        Piece piece = board.get(from);\n+        if (!piece.getColor().equals(color))\n+            throw new RepositoryException(\"Not your piece!\\n\");\n+        if (board.isEmpty(to))\n+            throw new RepositoryException(\"No piece to be captured!\\n\");\n+        List<Coordinates> coordinates = piece.getPossibleCaptures(from);\n+        if (!coordinates.contains(to))\n+            throw new RepositoryException(\"Invalid capture for a \" + piece + \"!\\n\");\n+        board.setGrid(null, from);\n+        board.setGrid(piece, to);\n+    }\n+\n+    private void initializeBoard() {\n+        addPiece(new Rook(PieceColor.WHITE), new Coordinates(7, 0));\n+        addPiece(new Knight(PieceColor.WHITE), new Coordinates(7, 1));\n+        addPiece(new Bishop(PieceColor.WHITE), new Coordinates(7, 2));\n+        addPiece(new Queen(PieceColor.WHITE), new Coordinates(7, 3));\n+        addPiece(new King(PieceColor.WHITE), new Coordinates(7, 4));\n+        board.setNrKing(board.getNrKing() + 1);\n+        addPiece(new Bishop(PieceColor.WHITE), new Coordinates(7, 5));\n+        addPiece(new Knight(PieceColor.WHITE), new Coordinates(7, 6));\n+        addPiece(new Rook(PieceColor.WHITE), new Coordinates(7, 7));\n+        addPiece(new Pawn(PieceColor.WHITE), new Coordinates(6, 0));\n+        addPiece(new Pawn(PieceColor.WHITE), new Coordinates(6, 1));\n+        addPiece(new Pawn(PieceColor.WHITE), new Coordinates(6, 2));\n+        addPiece(new Pawn(PieceColor.WHITE), new Coordinates(6, 3));\n+        addPiece(new Pawn(PieceColor.WHITE), new Coordinates(6, 4));\n+        addPiece(new Pawn(PieceColor.WHITE), new Coordinates(6, 5));\n+        addPiece(new Pawn(PieceColor.WHITE), new Coordinates(6, 6));\n+        addPiece(new Pawn(PieceColor.WHITE), new Coordinates(6, 7));\n+\n+        addPiece(new Rook(PieceColor.BLACK), new Coordinates(0, 0));\n+        addPiece(new Knight(PieceColor.BLACK), new Coordinates(0, 1));\n+        addPiece(new Bishop(PieceColor.BLACK), new Coordinates(0, 2));\n+        addPiece(new Queen(PieceColor.BLACK), new Coordinates(0, 3));\n+        addPiece(new King(PieceColor.BLACK), new Coordinates(0, 4));\n+        board.setNrKing(board.getNrKing() + 1);\n+        addPiece(new Bishop(PieceColor.BLACK), new Coordinates(0, 5));\n+        addPiece(new Knight(PieceColor.BLACK), new Coordinates(0, 6));\n+        addPiece(new Rook(PieceColor.BLACK), new Coordinates(0, 7));\n+        addPiece(new Pawn(PieceColor.BLACK), new Coordinates(1, 0));\n+        addPiece(new Pawn(PieceColor.BLACK), new Coordinates(1, 1));\n+        addPiece(new Pawn(PieceColor.BLACK), new Coordinates(1, 2));\n+        addPiece(new Pawn(PieceColor.BLACK), new Coordinates(1, 3));\n+        addPiece(new Pawn(PieceColor.BLACK), new Coordinates(1, 4));\n+        addPiece(new Pawn(PieceColor.BLACK), new Coordinates(1, 5));\n+        addPiece(new Pawn(PieceColor.BLACK), new Coordinates(1, 6));\n+        addPiece(new Pawn(PieceColor.BLACK), new Coordinates(1, 7));\n+    }\n+}"
  },
  {
    "sha": "d9b7c5a3a27487189b782369b1ea1ec08da67c93",
    "filename": "projects/src/main/java/chess/game/service/Service.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/service/Service.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/service/Service.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/service/Service.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,29 @@\n+package chess.game.service;\n+\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+import chess.game.repository.Repository;\n+\n+public class Service {\n+    private final Repository repository;\n+\n+    public Service(Repository repository) {\n+        this.repository = repository;\n+    }\n+\n+    public void movePiece(Coordinates from, Coordinates to, PieceColor color) {\n+        repository.movePiece(from, to, color);\n+    }\n+\n+    public void capturePiece(Coordinates from, Coordinates to, PieceColor color) {\n+        repository.capturePiece(from, to, color);\n+    }\n+\n+    public String getBoard() {\n+        return repository.getStringBoard();\n+    }\n+\n+    public boolean won() {\n+        return repository.getNrKings() < 2;\n+    }\n+}"
  },
  {
    "sha": "97c09201de25c48f9b38706a4cc052b8dd07827f",
    "filename": "projects/src/main/java/chess/game/ui/Console.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/ui/Console.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/main/java/chess/game/ui/Console.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/main/java/chess/game/ui/Console.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,83 @@\n+package chess.game.ui;\n+\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+import chess.game.exceptions.ChessException;\n+import chess.game.exceptions.RepositoryException;\n+import chess.game.service.Service;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+\n+public class Console {\n+    private final Service service;\n+\n+    public Console(Service service) {\n+        this.service = service;\n+    }\n+\n+    public void run() {\n+        boolean win = false;\n+        int player = 1;\n+        while (!win) {\n+            try {\n+                if (player == 1) {\n+                    System.out.println(service.getBoard());\n+                    System.out.println(\"Player 1:\");\n+                    runPlayer(PieceColor.WHITE);\n+                    win = service.won();\n+                    if (win) {\n+                        System.out.println(\"Player 1 won!\\n\");\n+                        break;\n+                    }\n+                    player = 2;\n+                } else {\n+                    System.out.println(service.getBoard());\n+                    System.out.println(\"Player 2:\");\n+                    runPlayer(PieceColor.BLACK);\n+                    win = service.won();\n+                    if (win) {\n+                        System.out.println(\"Player 2 won!\\n\");\n+                        break;\n+                    }\n+                    player = 1;\n+                }\n+            } catch (NumberFormatException | IOException | RepositoryException | ChessException e) {\n+                System.out.println(e.getMessage());\n+            }\n+        }\n+    }\n+\n+    private void runPlayer(PieceColor color) throws IOException {\n+        String option;\n+        Coordinates from, to;\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n+        System.out.println(\"Move or Capture? (input as m or c): \");\n+        option = bufferedReader.readLine();\n+        if (option.equals(\"m\")) {\n+            System.out.println(\"Choose coordinates for initial position: \");\n+            from = readCoordinates(bufferedReader);\n+            System.out.println(\"Choose coordinates for final position: \");\n+            to = readCoordinates(bufferedReader);\n+            service.movePiece(from, to, color);\n+        } else if (option.equals(\"c\")) {\n+            System.out.println(\"Choose coordinates for initial position: \");\n+            from = readCoordinates(bufferedReader);\n+            System.out.println(\"Choose coordinates for final position: \");\n+            to = readCoordinates(bufferedReader);\n+            service.capturePiece(from, to, color);\n+        } else\n+            throw new ChessException(\"Invalid option!\\n\");\n+    }\n+\n+    private Coordinates readCoordinates(BufferedReader bufferedReader) throws IOException {\n+        int x, y;\n+        System.out.println(\"Row: \");\n+        x = Integer.parseInt(bufferedReader.readLine());\n+        System.out.println(\"Column: \");\n+        y = Integer.parseInt(bufferedReader.readLine());\n+        return new Coordinates(Board.rows - 1 - x, y);\n+    }\n+}"
  },
  {
    "sha": "d32c2395c58b0d03bbfb93ff1570fc1164d861f0",
    "filename": "projects/src/test/java/BoardTest.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/test/java/BoardTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/test/java/BoardTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/test/java/BoardTest.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,42 @@\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+import chess.game.domain.pieces.Piece;\n+import chess.game.domain.pieces.Rook;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class BoardTest {\n+    private Board board;\n+\n+    @Before\n+    public void setUp() {\n+        board = new Board();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        board = null;\n+    }\n+\n+    @Test\n+    public void testSetGridAndGet() {\n+        Piece piece = new Rook(PieceColor.WHITE);\n+        board.setGrid(piece, new Coordinates(0, 0));\n+        Assert.assertEquals(piece, board.get(new Coordinates(0, 0)));\n+    }\n+\n+    @Test\n+    public void testIsEmpty() {\n+        Assert.assertTrue(board.isEmpty(new Coordinates(0, 0)));\n+    }\n+\n+    @Test\n+    public void testSetNrKingAndGetNrKing() {\n+        board.setNrKing(4);\n+        Assert.assertEquals(4, board.getNrKing());\n+    }\n+}\n+"
  },
  {
    "sha": "4e8f7b611b35b5981a86272958036d5a1930f4ee",
    "filename": "projects/src/test/java/PieceTest.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/test/java/PieceTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/test/java/PieceTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/test/java/PieceTest.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,46 @@\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+import chess.game.domain.pieces.Pawn;\n+import chess.game.domain.pieces.Piece;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+public class PieceTest {\n+    private Piece piece;\n+\n+    @Before\n+    public void setUp() {\n+        piece = new Pawn(PieceColor.WHITE);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        piece = null;\n+    }\n+\n+    @Test\n+    public void testGetColor() {\n+        Assert.assertEquals(PieceColor.WHITE, piece.getColor());\n+    }\n+\n+    @Test\n+    public void testGetSymbol() {\n+        Assert.assertEquals(\"WP\", piece.getSymbol());\n+    }\n+\n+    @Test\n+    public void testGetPossibleMovements() {\n+        Assert.assertEquals(Arrays.asList(new Coordinates(5, 0), new Coordinates(4, 0)), piece.getPossibleMovements(new Coordinates(6, 0)));\n+    }\n+\n+    @Test\n+    public void testGetPossibleCaptures() {\n+        Assert.assertEquals(Collections.singletonList(new Coordinates(7, 1)), piece.getPossibleCaptures(new Coordinates(6, 0)));\n+    }\n+}\n+"
  },
  {
    "sha": "82a92ea3743aed7951bb37ff9fc3d429c56374c7",
    "filename": "projects/src/test/java/RepositoryTest.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/test/java/RepositoryTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/test/java/RepositoryTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/test/java/RepositoryTest.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,58 @@\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+import chess.game.exceptions.RepositoryException;\n+import chess.game.repository.Repository;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class RepositoryTest {\n+    private Repository repository;\n+\n+    @Before\n+    public void setUp() {\n+        Board board = new Board();\n+        repository = new Repository(board);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        repository = null;\n+    }\n+\n+    @Test\n+    public void testGetStringBoard() {\n+        Assert.assertEquals(\"  0  1  2  3  4  5  6  7  \\n\" +\n+                \"7 BR Bk BB BQ BK BB Bk BR \\n\" +\n+                \"6 BP BP BP BP BP BP BP BP \\n\" +\n+                \"5 __ __ __ __ __ __ __ __ \\n\" +\n+                \"4 __ __ __ __ __ __ __ __ \\n\" +\n+                \"3 __ __ __ __ __ __ __ __ \\n\" +\n+                \"2 __ __ __ __ __ __ __ __ \\n\" +\n+                \"1 WP WP WP WP WP WP WP WP \\n\" +\n+                \"0 WR Wk WB WQ WK WB Wk WR \\n\", repository.getStringBoard());\n+    }\n+\n+    @Test\n+    public void testGetNrKings() {\n+        Assert.assertEquals(2, repository.getNrKings());\n+    }\n+\n+    @Test(expected = RepositoryException.class)\n+    public void testCapturePieceException() {\n+        repository.capturePiece(new Coordinates(1, 0), new Coordinates(3, 0), PieceColor.BLACK);\n+    }\n+\n+    @Test(expected = RepositoryException.class)\n+    public void testMovePieceException() {\n+        repository.movePiece(new Coordinates(6, 0), new Coordinates(5, 1), PieceColor.WHITE);\n+    }\n+\n+    @Test\n+    public void testMovePiece() {\n+        repository.movePiece(new Coordinates(6, 0), new Coordinates(5, 0), PieceColor.WHITE);\n+    }\n+}\n+"
  },
  {
    "sha": "17ed02e0776e85ad877a4b8448dd684c9ec68df5",
    "filename": "projects/src/test/java/ServiceTest.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/test/java/ServiceTest.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/4961cf20c67a03b64bc8c3dc0351373c0bc51560/projects/src/test/java/ServiceTest.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/projects/src/test/java/ServiceTest.java?ref=4961cf20c67a03b64bc8c3dc0351373c0bc51560",
    "patch": "@@ -0,0 +1,59 @@\n+import chess.game.domain.Board;\n+import chess.game.domain.Coordinates;\n+import chess.game.domain.PieceColor;\n+import chess.game.exceptions.RepositoryException;\n+import chess.game.repository.Repository;\n+import chess.game.service.Service;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ServiceTest {\n+    private Service service;\n+\n+    @Before\n+    public void setUp() {\n+        Board board = new Board();\n+        Repository repository = new Repository(board);\n+        service = new Service(repository);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        service = null;\n+    }\n+\n+    @Test\n+    public void testWon() {\n+        Assert.assertFalse(service.won());\n+    }\n+\n+    @Test\n+    public void testGetBoard() {\n+        Assert.assertEquals(\"  0  1  2  3  4  5  6  7  \\n\" +\n+                \"7 BR Bk BB BQ BK BB Bk BR \\n\" +\n+                \"6 BP BP BP BP BP BP BP BP \\n\" +\n+                \"5 __ __ __ __ __ __ __ __ \\n\" +\n+                \"4 __ __ __ __ __ __ __ __ \\n\" +\n+                \"3 __ __ __ __ __ __ __ __ \\n\" +\n+                \"2 __ __ __ __ __ __ __ __ \\n\" +\n+                \"1 WP WP WP WP WP WP WP WP \\n\" +\n+                \"0 WR Wk WB WQ WK WB Wk WR \\n\", service.getBoard());\n+    }\n+\n+    @Test(expected = RepositoryException.class)\n+    public void testCapturePieceException() {\n+        service.capturePiece(new Coordinates(1, 0), new Coordinates(3, 0), PieceColor.BLACK);\n+    }\n+\n+    @Test(expected = RepositoryException.class)\n+    public void testMovePieceException() {\n+        service.movePiece(new Coordinates(6, 0), new Coordinates(5, 1), PieceColor.WHITE);\n+    }\n+\n+    @Test\n+    public void testMovePiece() {\n+        service.movePiece(new Coordinates(6, 0), new Coordinates(5, 0), PieceColor.WHITE);\n+    }\n+}"
  }
]
