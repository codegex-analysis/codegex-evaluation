[
  {
    "sha": "ef71c4e090004950612149ef61f0ca7b8c917640",
    "filename": "_8_functional/src/main/java/code/_4_student_effort/Consumer/Tests/ConsumerTests.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Consumer/Tests/ConsumerTests.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Consumer/Tests/ConsumerTests.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_8_functional/src/main/java/code/_4_student_effort/Consumer/Tests/ConsumerTests.java?ref=f88c6d0179bad2e95783863712f34a0f2ee5a2cc",
    "patch": "@@ -0,0 +1,39 @@\n+package code._4_student_effort.Consumer.Tests;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+\n+public class ConsumerTests {\n+\n+    @Test\n+    public void consumer_1(){\n+        List<String> list = new ArrayList<>(Arrays.asList(\"a\",\"b\",\"c\"));\n+\n+        Consumer<List<String>> consumer = List::clear;\n+        consumer.accept(list);\n+\n+        Assert.assertEquals(list,new ArrayList<>());\n+    }\n+\n+    @Test\n+    public void consumer_2(){\n+        List<String> list1 = new ArrayList<>(Arrays.asList(\"a\",\"b\",\"c\"));\n+        List<String> list2 = new ArrayList<>(Arrays.asList(\"a\",\"b\",\"c\",\"first\",\"second\"));\n+\n+       Consumer<List<String>> c1 = list -> list.add(\"first\");\n+\n+       Consumer<List<String>> c2 = list -> list.add(\"second\");\n+\n+       Consumer<List<String>> consumer = c1.andThen(c2);\n+       consumer.accept(list1);\n+\n+       Assert.assertEquals(list1,list2);\n+    }\n+\n+}"
  },
  {
    "sha": "7133bf3fddaae7145fa96fd53430320b30d1f837",
    "filename": "_8_functional/src/main/java/code/_4_student_effort/Lambda/ExFive.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExFive.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExFive.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExFive.java?ref=f88c6d0179bad2e95783863712f34a0f2ee5a2cc",
    "patch": "@@ -0,0 +1,23 @@\n+package code._4_student_effort.Lambda;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ExFive implements Runnable {\n+    private List<Integer> numbers = new ArrayList<>();\n+\n+    public ExFive() {\n+        populateList();\n+    }\n+\n+    private void populateList(){\n+        for(int i = 0; i <= 100 ; i ++){\n+            numbers.add(i);\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        numbers.stream().forEach(System.out::println);\n+    }\n+}"
  },
  {
    "sha": "9407a59cadbf1497dc068060b9223518d95b185f",
    "filename": "_8_functional/src/main/java/code/_4_student_effort/Lambda/ExFour.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExFour.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExFour.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExFour.java?ref=f88c6d0179bad2e95783863712f34a0f2ee5a2cc",
    "patch": "@@ -0,0 +1,30 @@\n+package code._4_student_effort.Lambda;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ExFour {\n+\n+    private Map<String,String> map = new HashMap<>();\n+\n+    private StringBuilder sb = new StringBuilder();\n+\n+    public ExFour() {\n+        populateMap();\n+        flatMap();\n+    }\n+\n+    public void flatMap(){\n+        map.forEach((k,v)->{sb.append(k);sb.append(v);});\n+    }\n+\n+    private void populateMap(){\n+        map.put(\"1\",\"Football\");\n+        map.put(\"2\",\"Goal\");\n+        map.put(\"3\",\"Coach\");\n+    }\n+\n+    public String getSb() {\n+        return sb.toString();\n+    }\n+}"
  },
  {
    "sha": "3e54e2386010dbc7765139bf12f21f4cd4ca0de1",
    "filename": "_8_functional/src/main/java/code/_4_student_effort/Lambda/ExOne.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExOne.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExOne.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExOne.java?ref=f88c6d0179bad2e95783863712f34a0f2ee5a2cc",
    "patch": "@@ -0,0 +1,23 @@\n+package code._4_student_effort.Lambda;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class ExOne {\n+\n+    private StringBuilder sb = new StringBuilder();\n+    private List<String> words = new ArrayList<>(Arrays.asList(\"Europe\",\"dog\",\"vacance\",\"Java\"));\n+\n+    public ExOne() {\n+        this.words\n+                .forEach(s->sb.append(s.charAt(0)));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ExOne{\" +\n+                \"sb=\" + sb.toString() +\n+                '}';\n+    }\n+}"
  },
  {
    "sha": "d47387ba524024b07d170f94f8cc1f8c48d6b9ae",
    "filename": "_8_functional/src/main/java/code/_4_student_effort/Lambda/ExThree.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExThree.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExThree.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExThree.java?ref=f88c6d0179bad2e95783863712f34a0f2ee5a2cc",
    "patch": "@@ -0,0 +1,17 @@\n+package code._4_student_effort.Lambda;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class ExThree {\n+    private List<String> list = new ArrayList<>(Arrays.asList(\"flower\",\"tv\",\"table\",\"java\"));\n+\n+    public ExThree() {\n+        list.replaceAll(String::toUpperCase);\n+    }\n+\n+    public List<String> getList() {\n+        return list;\n+    }\n+}"
  },
  {
    "sha": "e137514572cb3f4927ce1d12a20916194055cf1f",
    "filename": "_8_functional/src/main/java/code/_4_student_effort/Lambda/ExTwo.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExTwo.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExTwo.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_8_functional/src/main/java/code/_4_student_effort/Lambda/ExTwo.java?ref=f88c6d0179bad2e95783863712f34a0f2ee5a2cc",
    "patch": "@@ -0,0 +1,17 @@\n+package code._4_student_effort.Lambda;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class ExTwo {\n+    private List<String> list = new ArrayList<>(Arrays.asList(\"Dog\",\"country\",\"chair\",\"Java\"));\n+\n+    public ExTwo() {\n+      this.list.removeIf(s -> s.length()%2 == 1 );\n+    }\n+\n+    public List<String> getList() {\n+        return list;\n+    }\n+}"
  },
  {
    "sha": "2ea89ede160572bb14141dfef8724cb964a5c584",
    "filename": "_8_functional/src/main/java/code/_4_student_effort/Lambda/Main.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/Main.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Lambda/Main.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_8_functional/src/main/java/code/_4_student_effort/Lambda/Main.java?ref=f88c6d0179bad2e95783863712f34a0f2ee5a2cc",
    "patch": "@@ -0,0 +1,22 @@\n+package code._4_student_effort.Lambda;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        ExOne ex1 = new ExOne();\n+        System.out.println(ex1);\n+\n+        ExTwo ex2 = new ExTwo();\n+        System.out.println(ex2.getList());\n+\n+        ExThree ex3 = new ExThree();\n+        System.out.println(ex3.getList());\n+\n+        ExFour ex4 = new ExFour();\n+        System.out.println(ex4.getSb());\n+\n+        new Thread(new ExFive()).start();\n+\n+    }\n+}"
  },
  {
    "sha": "f0ae674239abc28f3f5e5837714debe958a6ed5b",
    "filename": "_8_functional/src/main/java/code/_4_student_effort/Producer/PredicateChallenge.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/titusmoldovan/java-training/blob/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Producer/PredicateChallenge.java",
    "raw_url": "https://github.com/titusmoldovan/java-training/raw/f88c6d0179bad2e95783863712f34a0f2ee5a2cc/_8_functional/src/main/java/code/_4_student_effort/Producer/PredicateChallenge.java",
    "contents_url": "https://api.github.com/repos/titusmoldovan/java-training/contents/_8_functional/src/main/java/code/_4_student_effort/Producer/PredicateChallenge.java?ref=f88c6d0179bad2e95783863712f34a0f2ee5a2cc",
    "patch": "@@ -0,0 +1,60 @@\n+package code._4_student_effort.Producer;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.function.Predicate;\n+\n+public class PredicateChallenge {\n+\n+    /**\n+     * Given the predicate p1, write a predicate that\n+     * returns true if the string it tests is not empty.\n+     * This is a NOT operation on the predicate p1.\n+     */\n+    @Test\n+    public void predicate_1() {\n+        Predicate<String> p1 = s -> s.isEmpty();\n+\n+        Predicate<String> notPredicate = p1.negate();\n+\n+        Assert.assertFalse(notPredicate.test(\"\"));\n+        Assert.assertTrue(notPredicate.test(\"Not empty!\"));\n+    }\n+\n+    /**\n+     * Given the two predicates p1 and p2, write a predicate\n+     * that returns true is the string it tests is\n+     * neither null, neither empty.\n+     * This is a AND operation on the predicates p1 and p2.\n+     */\n+    @Test\n+    public void predicate_2() {\n+        Predicate<String> p1 = s -> s != null;\n+        Predicate<String> p2 = s -> !s.isEmpty();\n+\n+        Predicate<String> p3 = p1.and(p2);\n+\n+        Assert.assertFalse(p3.test(\"\"));\n+        Assert.assertFalse(p3.test(null));\n+        Assert.assertTrue(p3.test(\"Not empty!\"));\n+    }\n+\n+    /**\n+     * Given the two predicates p1 and p2, write a predicate that\n+     * returns true if the tested string is of length 4, true if\n+     * it starts with a J, but false if it is of length 4 and starts\n+     * with a J. This is a XOR operation on the predicates p1 and p2.\n+     */\n+    @Test\n+    public void predicate_3() {\n+        Predicate<String> p1 = s -> s.length() == 4;\n+        Predicate<String> p2 = s -> s.startsWith(\"J\");\n+\n+        Predicate<String> p3 = p1.and(p2.negate()).or(p1.negate().and(p2));\n+\n+        Assert.assertTrue(p3.test(\"True\"));\n+        Assert.assertTrue(p3.test(\"Julia\"));\n+        Assert.assertFalse(p3.test(\"Java\"));\n+    }\n+}"
  }
]
