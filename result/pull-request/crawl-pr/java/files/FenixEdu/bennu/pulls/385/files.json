[
  {
    "sha": "b4d9da2c5c7e3f62b4015c317a8c418abce6403f",
    "filename": "bennu-spring/src/main/java/org/fenixedu/bennu/spring/BaseController.java",
    "status": "modified",
    "additions": 80,
    "deletions": 0,
    "changes": 80,
    "blob_url": "https://github.com/FenixEdu/bennu/blob/ed5b8ac02dee5505e13627e8bea32c90591eaea6/bennu-spring/src/main/java/org/fenixedu/bennu/spring/BaseController.java",
    "raw_url": "https://github.com/FenixEdu/bennu/raw/ed5b8ac02dee5505e13627e8bea32c90591eaea6/bennu-spring/src/main/java/org/fenixedu/bennu/spring/BaseController.java",
    "contents_url": "https://api.github.com/repos/FenixEdu/bennu/contents/bennu-spring/src/main/java/org/fenixedu/bennu/spring/BaseController.java?ref=ed5b8ac02dee5505e13627e8bea32c90591eaea6",
    "patch": "@@ -1,10 +1,12 @@\n package org.fenixedu.bennu.spring;\n \n import com.google.common.base.Strings;\n+import com.google.gson.JsonArray;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n import org.fenixedu.bennu.core.domain.User;\n import org.fenixedu.bennu.core.i18n.BundleUtil;\n+import org.fenixedu.bennu.core.json.JsonUtils;\n import org.fenixedu.bennu.core.security.Authenticate;\n import org.fenixedu.bennu.core.util.CoreConfiguration;\n import org.fenixedu.commons.i18n.I18N;\n@@ -18,7 +20,10 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.function.BiFunction;\n import java.util.function.Consumer;\n+import java.util.function.Function;\n import java.util.stream.Stream;\n \n public class BaseController {\n@@ -49,6 +54,81 @@\n         return respond(status, response);\n     }\n \n+    /**\n+     * Responds the pagination results accordingly with the default page mapper.\n+     *\n+     * <p>Check {@link BaseController#respondPagination(Long, Long, List, Function, BiFunction)}\n+     * for the proper method documentation.</p>\n+     *\n+     * <p>Also check {@link BaseController#toPaginationPage(int, Stream)} for the default\n+     * page mapper.</p>\n+     *\n+     * @see BaseController#respondPagination(Long, Long, List, Function, BiFunction).\n+     * @param skip {@link Long} value to use as stream skip.\n+     * @param limit {@link Long} value to use as stream limit.\n+     * @param results {@link List} containing all results to be used, this value cannot be {@code null}.\n+     * @param resultMapper {@link Function} to be used as the result mapper, this value cannot be {@code null}.\n+     * @return {@link ResponseEntity} with an {@link HttpStatus} of 200 (ok) and the correspondent body.\n+     */\n+    public static <T> ResponseEntity<?> respondPagination(final Long skip, final Long limit, final List<T> results,\n+                                                          final Function<T, JsonObject> resultMapper) {\n+        return respondPagination(skip, limit, results, resultMapper, BaseController::toPaginationPage);\n+    }\n+\n+    /**\n+     * Responds a {@link ResponseEntity} with an {@link HttpStatus} of 200 (ok).\n+     *\n+     * <p>If either skip or limit are {@code null}, the response body will contain a\n+     * {@link JsonArray} with the mapped results.</p>\n+     *\n+     * <p>If both skip and limit values are passed, the response body will contain a\n+     * {@link JsonObject} with a {@link Integer} value of total items {@code \"totalItems\"}\n+     * and a {@link JsonArray} containing all the mapped results with the\n+     * skip and limit values applied {@code \"items\"}.</p>\n+     *\n+     * @param skip {@link Long} value to use as stream skip.\n+     * @param limit {@link Long} value to use as stream limit.\n+     * @param results {@link List} containing all results to be used, this value cannot be {@code null}.\n+     * @param resultMapper {@link Function} to be used as the result mapper, this value cannot be {@code null}.\n+     * @param pageMapper {@link BiFunction} to be used as the page mapper, this value cannot be {@code null}.\n+     * @return {@link ResponseEntity} with an {@link HttpStatus} of 200 (ok) and the correspondent body.\n+     */\n+    public static <T> ResponseEntity<?> respondPagination(final Long skip, final Long limit, final List<T> results,\n+                                                          final Function<T, JsonObject> resultMapper,\n+                                                          final BiFunction<Integer, Stream<JsonObject>, JsonObject> pageMapper) {\n+        final int totalItems = results.size();\n+        final Stream<JsonObject> result = results.stream()\n+                .skip(skip == null ? 0L : skip)\n+                .limit(limit == null ? Long.MAX_VALUE : limit)\n+                .map(resultMapper);\n+\n+        if (skip != null && limit != null) {\n+            return ok(pageMapper.apply(totalItems, result));\n+        }\n+        return respond(result);\n+    }\n+\n+    /**\n+     * This method is the default pagination page mapper.\n+     *\n+     * <p>Returns a {@link JsonObject} containing the {@code \"totalItems\"} param value\n+     * and a {@link JsonArray} {@code \"items\"} value of multiple {@link JsonObject}\n+     * containing the collected result.</p>\n+     *\n+     * <p>It is used in the {@link BaseController#respondPagination(Long, Long, List, Function)}\n+     * method as default page mapper.</p>\n+     *\n+     * @param totalItems int value of total items.\n+     * @param result {@link Stream} of {@link JsonObject} containing the result to be collected.\n+     * @return {@link JsonObject} with the corresponding properties.\n+     */\n+    public static JsonObject toPaginationPage(final int totalItems, final Stream<JsonObject> result) {\n+        return JsonUtils.toJson(data -> {\n+            data.addProperty(\"totalItems\", totalItems);\n+            data.add(\"items\", result.collect(StreamUtils.toJsonArray()));\n+        });\n+    }\n+\n     public static ResponseEntity<?> redirect(final String relativePath) {\n         final HttpHeaders headers = new HttpHeaders();\n         headers.add(\"Location\", CoreConfiguration.getConfiguration().applicationUrl().concat(relativePath));"
  }
]
