[
  {
    "sha": "6aa878aaa041a6823fea5f01d0013e2182d88573",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/NastiaZe/CashbackHacker/blob/9593174d4e81eec6974bb825d0dcb3799a1ff4e9/build.gradle",
    "raw_url": "https://github.com/NastiaZe/CashbackHacker/raw/9593174d4e81eec6974bb825d0dcb3799a1ff4e9/build.gradle",
    "contents_url": "https://api.github.com/repos/NastiaZe/CashbackHacker/contents/build.gradle?ref=9593174d4e81eec6974bb825d0dcb3799a1ff4e9",
    "patch": "@@ -10,10 +10,10 @@ repositories {\n }\n \n dependencies {\n-    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'\n-    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'\n+    testImplementation 'junit:junit:4.13'\n+    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.7.0'\n }\n \n test {\n-    useJUnitPlatform()\n+    useJUnit()\n }\n\\ No newline at end of file"
  },
  {
    "sha": "62203e2fefe1ff7362f00f2b36faf6d9f9924fb8",
    "filename": "src/test/java/ru/netology/service/CashbackHackServiceTest.java",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/NastiaZe/CashbackHacker/blob/9593174d4e81eec6974bb825d0dcb3799a1ff4e9/src/test/java/ru/netology/service/CashbackHackServiceTest.java",
    "raw_url": "https://github.com/NastiaZe/CashbackHacker/raw/9593174d4e81eec6974bb825d0dcb3799a1ff4e9/src/test/java/ru/netology/service/CashbackHackServiceTest.java",
    "contents_url": "https://api.github.com/repos/NastiaZe/CashbackHacker/contents/src/test/java/ru/netology/service/CashbackHackServiceTest.java?ref=9593174d4e81eec6974bb825d0dcb3799a1ff4e9",
    "patch": "@@ -0,0 +1,42 @@\n+package ru.netology.service;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class CashbackHackServiceTest {\n+    @Test\n+    public void shouldCalculateRemainIfAmountLoverBoundary() {\n+        CashbackHackService service = new CashbackHackService();\n+        int amount = 999;\n+\n+        int actual = service.remain(amount);\n+        int expected = 1;\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void shouldCalculateRemainIfAmountHigherBoundary() {\n+        CashbackHackService service = new CashbackHackService();\n+        int amount = 1100;\n+\n+        int actual = service.remain(amount);\n+        int expected = 900;\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void shouldCalculateRemainIfAmountIsBoundary() {\n+        CashbackHackService service = new CashbackHackService();\n+        int amount = 1000;\n+\n+        int actual = service.remain(amount);\n+        int expected = 0;\n+\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+}\n\\ No newline at end of file"
  }
]
