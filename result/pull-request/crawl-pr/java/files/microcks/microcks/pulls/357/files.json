[
  {
    "sha": "0db587a8790275f2c7ad34682879f14155b12111",
    "filename": "install/docker-compose/docker-compose.yml",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/docker-compose/docker-compose.yml",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/docker-compose/docker-compose.yml",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/install/docker-compose/docker-compose.yml?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -1,23 +1,25 @@\n-version: '2'\n+version: \"2\"\n \n services:\n   mongo:\n     image: mongo:3.4.23\n     container_name: microcks-db\n+    ports:\n+      - \"27017:27017\"\n     volumes:\n       - \"~/tmp/microcks-data:/data/db\"\n \n   keycloak:\n     image: jboss/keycloak:10.0.1\n     container_name: microcks-sso\n     ports:\n-      - \"18080:8080\"\n+      - \"8180:8080\"\n     environment:\n       KEYCLOAK_USER: \"admin\"\n       KEYCLOAK_PASSWORD: \"admin\"\n       KEYCLOAK_IMPORT: \"/tmp/microcks-realm.json\"\n-      KEYCLOAK_FRONTEND_URL: \"http://localhost:18080/auth\"\n-    volumes: \n+      KEYCLOAK_FRONTEND_URL: \"http://localhost:8180/auth\"\n+    volumes:\n       - \"./keycloak-realm/microcks-realm-sample.json:/tmp/microcks-realm.json\"\n \n   postman:\n@@ -41,4 +43,4 @@ services:\n       - TEST_CALLBACK_URL=http://microcks:8080\n       - SERVICES_UPDATE_INTERVAL=0 0 0/2 * * *\n       - KEYCLOAK_URL=http://keycloak:8080/auth\n-      - KEYCLOAK_PUBLIC_URL=http://localhost:18080/auth\n+      - KEYCLOAK_PUBLIC_URL=http://localhost:8180/auth"
  },
  {
    "sha": "87212c026cde26a8d928bdcd185030dd6f07bd33",
    "filename": "install/docker-compose/keycloak-realm/microcks-realm-sample.json",
    "status": "modified",
    "additions": 23,
    "deletions": 11,
    "changes": 34,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/docker-compose/keycloak-realm/microcks-realm-sample.json",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/docker-compose/keycloak-realm/microcks-realm-sample.json",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/install/docker-compose/keycloak-realm/microcks-realm-sample.json?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -5,19 +5,28 @@\n   \"enabled\": true,\n   \"sslRequired\": \"none\",\n   \"registrationAllowed\": false,\n-  \"users\" : [\n+  \"users\": [\n     {\n-      \"username\" : \"admin\",\n+      \"username\": \"admin\",\n       \"enabled\": true,\n-      \"credentials\" : [\n-        { \"type\" : \"password\",\n-          \"value\" : \"123\" }\n+      \"credentials\": [\n+        {\n+          \"type\": \"password\",\n+          \"value\": \"123\"\n+        }\n       ],\n       \"realmRoles\": [],\n       \"applicationRoles\": {\n-        \"realm-management\": [ \"manage-users\", \"manage-clients\" ],\n-        \"account\": [ \"manage-account\" ],\n-        \"microcks-app\": [ \"admin \"]\n+        \"realm-management\": [\n+          \"manage-users\",\n+          \"manage-clients\"\n+        ],\n+        \"account\": [\n+          \"manage-account\"\n+        ],\n+        \"microcks-app\": [\n+          \"admin \"\n+        ]\n       }\n     }\n   ],\n@@ -47,7 +56,9 @@\n     }\n   },\n   \"defaultRoles\": [],\n-  \"requiredCredentials\": [ \"password\" ],\n+  \"requiredCredentials\": [\n+    \"password\"\n+  ],\n   \"scopeMappings\": [],\n   \"clientScopeMappings\": {\n     \"microcks-app\": [\n@@ -87,7 +98,8 @@\n         \"+\"\n       ],\n       \"redirectUris\": [\n-        \"http://localhost:8080/*\"\n+        \"http://localhost:8080/*\",\n+        \"http://localhost:4200/*\"\n       ],\n       \"fullScopeAllowed\": false\n     },\n@@ -103,4 +115,4 @@\n     }\n   ],\n   \"keycloakVersion\": \"10.0.1\"\n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "70f2fd101b4ae7dc42bd7e68d065a520420b5577",
    "filename": "install/kubernetes/README.md",
    "status": "modified",
    "additions": 50,
    "deletions": 7,
    "changes": 57,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/README.md",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/README.md",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/install/kubernetes/README.md?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -74,6 +74,44 @@ You may want to configure an Identity Provider or add some users for your Microc\n username and password found into 'microcks-keycloak-admin' secret.\n ```\n \n+### Simple install - listening on sub context\n+\n+From the [Helm Hub](https://hub.helm.sh) directly - assuming here for the example, you are running `minikube`:\n+\n+```console\n+$ helm repo add microcks https://microcks.io/helm\n+\n+$ kubectl create namespace microcks\n+\n+$ helm install microcks microcks/microcks —-version 1.2.0 --namespace microcks \\\n+  --set microcks.url=microcks.$(minikube ip).nip.io \\\n+  --set 'microcks.baseContext=/mock-server/microcks/' \\\n+  --set keycloak.url=keycloak.$(minikube ip).nip.io \\\n+  --set 'keycloak.baseContext=/mock-server/auth/'\n+  \n+NAME: microcks\n+LAST DEPLOYED: Mon Jan 15 18:57:12 2021\n+NAMESPACE: microcks\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+NOTES:\n+Thank you for installing microcks.\n+\n+Your release is named microcks.\n+\n+To learn more about the release, try:\n+\n+  $ helm status microcks\n+  $ helm get microcks\n+\n+Microcks is available at https://microcks.192.168.64.6.nip.io/mock-server/microcks/.\n+\n+Keycloak has been deployed on https://keycloak.192.168.64.6.nip.io/mock-server/auth/ to protect user access.\n+You may want to configure an Identity Provider or add some users for your Microcks installation by login in using the\n+username and password found into 'microcks-keycloak-admin' secret.\n+```\n+\n ### Advanced install - with asynchronous mocking\n \n Since release `1.0.0`, Microcks support mocking of event-driven API thanks to [AsyncAPI Spec](https://asyncapi.com). Microcks will take car of publishing sample messages for you on a message broker. You mey reuse an existing broker of let Microcks deploy its own (this is the default when turning on this feature).\n@@ -144,8 +182,10 @@ The table below describe all the fields of the `values.yaml`, providing informat\n | Section    | Property           | Description   |\n | ------------- | ------------------ | ------------- |\n | `microcks`    | `url`              | **Mandatory**. The URL to use for exposing `Ingress` | \n-| `microcks`    | `ingressSecretRef` | **Optional**. The name of a TLS Secret for securing `Ingress`. If missing, self-signed certificate is generated. |\n-| `microcks`    | `ingressAnnotations`  | **Optional**. A map of annotations that will be added to the `Ingress` for Microcks main pod. | \n+| `microcks`    | `baseContext`      | **Mandatory**. The base context the service is listening on. Default is `/` | \n+| `microcks`    | `ingress.enable`   | **Mandatory**. Install `Ingress` resources. Default is `true`. |\n+| `microcks`    | `ingress.secretRef` | **Optional**. The name of a TLS Secret for securing `Ingress`. If missing, self-signed certificate is generated. |\n+| `microcks`    | `ingress.annotations`  | **Optional**. A map of annotations that will be added to the `Ingress` for Microcks main pod. | \n | `microcks`    | `replicas`         | **Optional**. The number of replicas for the Microcks main pod. Default is `1`. |\n | `microcks`    | `image`            | **Optional**. The reference of container image used. Chart comes with its default version. |\n | `microcks`    | `resources`        | **Optional**. Some resources constraints to apply on Microcks pods. This should be expressed using [Kubernetes syntax](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-requests-and-limits-of-pod-and-container). | \n@@ -154,9 +194,11 @@ The table below describe all the fields of the `values.yaml`, providing informat\n | `keycloak`    | `install`          | **Optional**. Flag for Keycloak installation. Default is `true`. Set to `false` if you want to reuse an existing Keycloak instance. |\n | `keycloak`    | `realm`            | **Optional**. Name of Keycloak realm to use. Should be setup only if `install` is `false` and you want to reuse an existing realm. Default is `microcks`. |\n | `keycloak`    | `url`              | **Mandatory**. The URL of Keycloak install - indeed just the hostname + port part - if it already exists or the one used for exposing Keycloak `Ingress`. |\n+| `keycloak`    | `baseContext`      | **Mandatory**. The base context KeyCloak is listening on. Default is `/auth/` | \n | `keycloak`    | `privateUrl`       | **Optional**. A private URL - a full URL here - used by the Microcks component to internally join Keycloak. This is also known as `backendUrl` in [Keycloak doc](https://www.keycloak.org/docs/latest/server_installation/#_hostname). When specified, the `keycloak.url` is used as `frontendUrl` in Keycloak terms. | \n-| `keycloak`    | `ingressSecretRef` | **Optional**. The name of a TLS Secret for securing `Ingress`. If missing, self-signed certificate is generated. |\n-| `keycloak`    | `ingressAnnotations`  | **Optional**. A map of annotations that will be added to the `Ingress` for Keycloak pod. |  \n+| `keycloak`    | `ingress.enable`   | **Mandatory**. Install `Ingress` resources. Default is `true`. |\n+| `keycloak`    | `ingress.secretRef` | **Optional**. The name of a TLS Secret for securing `Ingress`. If missing, self-signed certificate is generated. |\n+| `keycloak`    | `ingress.annotations`  | **Optional**. A map of annotations that will be added to the `Ingress` for Keycloak pod. |  \n | `keycloak`    | `image`            | **Optional**. The reference of container image used. Chart comes with its default version. |\n | `keycloak`    | `persistent`       | **Optional**. Flag for Keycloak persistence. Default is `true`. Set to `false` if you want an ephemeral Keycloak installation. |\n | `keycloak`    | `volumeSize`       | **Optional**. Size of persistent volume claim for Keycloak. Default is `1Gi`. Not used if not persistent install asked. |\n@@ -234,9 +276,10 @@ microcks-mongodb-6d558666dc-zdhxl               1/1     Running   0          39s\n microcks-postman-runtime-58bf695b59-nm858       1/1     Running   0          39s\n ```\n \n-## Deleting the Chart\n+## Deleting the installed Helm release \n \n ```console\n-$ helm delete microcks\n-$ helm del --purge microcks\n+$ helm delete microcks --namespace microcks\n+# To remove the helm repo\n+$ helm repo remove microcks\n ```\n\\ No newline at end of file"
  },
  {
    "sha": "7285a0705328d0a3ff6a34f867a619c562f83c44",
    "filename": "install/kubernetes/microcks/templates/NOTES.txt",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/templates/NOTES.txt",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/templates/NOTES.txt",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/install/kubernetes/microcks/templates/NOTES.txt?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -4,12 +4,12 @@ Your release is named {{ .Release.Name }}.\n \n To learn more about the release, try:\n \n-  $ helm status {{ .Release.Name }}\n-  $ helm get {{ .Release.Name }}\n+  $ helm status {{ .Release.Name }} --namespace {{ .Release.Namespace }}\n+  $ helm get all {{ .Release.Name }} --namespace {{ .Release.Namespace }}\n \n-Microcks is available at https://{{ .Values.microcks.url }}.\n+Microcks is available at https://{{ .Values.microcks.url }}{{ .Values.microcks.baseContext }}.\n \n-Keycloak has been deployed on https://{{ .Values.keycloak.url }}/auth to protect user access.\n+Keycloak has been deployed on https://{{ .Values.keycloak.url }}{{ .Values.keycloak.baseContext }} to protect user access.\n You may want to configure an Identity Provider or add some users for your Microcks installation by login in using the\n username and password found into '{{ .Values.appName }}-keycloak-admin' secret.\n \n@@ -18,6 +18,6 @@ username and password found into '{{ .Values.appName }}-keycloak-admin' secret.\n Kafka broker has been deployed on {{ .Values.appName }}-kafka.{{ .Values.features.async.kafka.url }}.\n It has been exposed using TLS passthrough of the Ingress controller, you shoud extract the certificate for your client using:\n \n-  $ kubectl get secret {{ .Values.appName }}-kafka-cluster-ca-cert -o jsonpath='{.data.ca\\.crt}' | base64 -d > ca.crt\n+  $ kubectl get secret {{ .Values.appName }}-kafka-cluster-ca-cert --namespace {{ .Release.Namespace }} -o jsonpath='{.data.ca\\.crt}' | base64 -d > ca.crt\n \n {{- end }}"
  },
  {
    "sha": "7fb452c5210b81ae5ec28177852dc218642a2439",
    "filename": "install/kubernetes/microcks/templates/configmap.yaml",
    "status": "modified",
    "additions": 40,
    "deletions": 3,
    "changes": 43,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/templates/configmap.yaml",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/templates/configmap.yaml",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/install/kubernetes/microcks/templates/configmap.yaml?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -32,7 +32,7 @@ data:\n     network.username=\n     network.password=\n \n-    validation.resourceUrl=https://{{ .Values.microcks.url }}/api/resources/\n+    validation.resourceUrl=https://{{ .Values.microcks.url }}{{ .Values.microcks.baseContext }}api/resources/\n     services.update.interval=${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}\n     mocks.rest.enable-cors-policy=${ENABLE_CORS_POLICY:true}\n \n@@ -273,7 +273,7 @@ data:\n             \"+\"\n           ],\n           \"redirectUris\": [\n-            \"https://{{ .Values.microcks.url }}/*\"\n+            \"https://{{ .Values.microcks.url }}{{ .Values.microcks.baseContext }}*\"\n           ],\n           \"fullScopeAllowed\": false\n         },\n@@ -351,4 +351,41 @@ data:\n     %kube.minion.supported-bindings=KAFKA{{ if .Values.features.async.mqtt.url }},MQTT{{ end }}\n     %kube.minion.restricted-frequencies=30,10\n     %kube.minion.default-avro-encoding={{ .Values.features.async.defaultAvroEncoding }}\n-{{- end -}}\n\\ No newline at end of file\n+{{- end -}}\n+{{- if .Values.keycloak.install }}\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: \"{{ .Values.appName }}-keycloak-startup\"\n+  labels:\n+    app: \"{{ .Values.appName }}\"\n+    container: keycloak\n+    group: microcks\n+data:\n+  contextPath.cli: |\n+    embed-server --server-config=standalone-ha.xml --std-out=echo\n+    batch\n+    {{- if ne .Values.keycloak.baseContext \"/auth\" }}\n+    /subsystem=keycloak-server/:write-attribute(name=web-context,value={{ if eq .Values.keycloak.baseContext \"\" }}/{{ else }}{{ trimAll \"/\" .Values.keycloak.baseContext }}{{ end }})\n+    {{- if eq .Values.keycloak.baseContext \"\" }}\n+    /subsystem=undertow/server=default-server/host=default-host:write-attribute(name=default-web-module,value=keycloak-server.war)\n+    {{- end }}\n+    {{- end }}\n+    run-batch\n+    stop-embedded-server\n+---\n+{{- end -}}\n+---\n+kind: ConfigMap\n+apiVersion: v1\n+metadata:\n+  name: \"{{ .Values.appName }}-environment-config-map\"\n+  labels:\n+    app: \"{{ .Values.appName }}\"\n+    container: spring\n+    group: microcks\n+data:\n+  environment.json: |\n+    {\"apiUrl\":\"https://{{ .Values.microcks.url }}{{ .Values.microcks.baseContext }}\", \"baseContext\": \"{{ .Values.microcks.baseContext }}\" ,\"production\":true}\n+---\n\\ No newline at end of file"
  },
  {
    "sha": "1fbcb79136c5ab350c45d5f2919b0841f8795904",
    "filename": "install/kubernetes/microcks/templates/deployment.yaml",
    "status": "modified",
    "additions": 30,
    "deletions": 10,
    "changes": 40,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/templates/deployment.yaml",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/templates/deployment.yaml",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/install/kubernetes/microcks/templates/deployment.yaml?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -66,10 +66,10 @@ spec:\n           - name: KEYCLOAK_URL\n             value: \"{{ .Values.keycloak.privateUrl }}\"\n           - name: KEYCLOAK_PUBLIC_URL\n-            value: https://{{ .Values.keycloak.url }}/auth\n+            value: https://{{ .Values.keycloak.url }}{{ .Values.keycloak.baseContext }}\n           {{- else }}\n           - name: KEYCLOAK_URL\n-            value: https://{{ .Values.keycloak.url }}/auth\n+            value: https://{{ .Values.keycloak.url }}{{ .Values.keycloak.baseContext }}\n           {{- end }}\n           {{- if and .Values.features.async.enabled }}\n           - name: ASYNC_MINION_URL\n@@ -81,11 +81,15 @@ spec:\n             {{- else }}\n             value: \"{{ .Values.features.async.kafka.url }}\"\n             {{- end }}\n+          {{- if ne .Values.microcks.baseContext \"/\" }}\n+          - name: SERVER_SERVLET_CONTEXT_PATH\n+            value: {{ trimSuffix \"/\" .Values.microcks.baseContext }}\n+          {{- end }}\n         resources:\n           {{- toYaml .Values.microcks.resources | nindent 10 }}\n         livenessProbe:\n           httpGet:\n-            path: \"/api/health\"\n+            path: \"{{ .Values.microcks.baseContext }}api/health\"\n             port: 8080\n             scheme: HTTP\n           initialDelaySeconds: 25\n@@ -95,7 +99,7 @@ spec:\n           failureThreshold: 3\n         readinessProbe:\n           httpGet:\n-            path: \"/api/health\"\n+            path: \"{{ .Values.microcks.baseContext }}api/health\"\n             port: 8080\n             scheme: HTTP\n           initialDelaySeconds: 35\n@@ -106,11 +110,16 @@ spec:\n         volumeMounts:\n           - name: \"{{ .Values.appName }}-config\"\n             mountPath: \"/deployments/config\"\n+          - name: \"{{ .Values.appName }}-environment-config-map\"\n+            mountPath: \"/deployments/assets/environment\"\n         terminationMessagePath: \"/dev/termination-log\"\n       volumes:\n         - name: \"{{ .Values.appName }}-config\"\n           configMap:\n             name: \"{{ .Values.appName }}-config\"\n+        - name: \"{{ .Values.appName }}-environment-config-map\"\n+          configMap:\n+            name: \"{{ .Values.appName }}-environment-config-map\"\n ---\n apiVersion: apps/v1\n kind: Deployment\n@@ -357,14 +366,25 @@ spec:\n           value: https://{{ .Values.keycloak.url }}/auth\n         {{- end }}\n         volumeMounts:\n-        - name: {{ .Values.appName }}-keycloak-config\n-          mountPath: \"/opt/jboss/keycloak/standalone/configuration/realm\"\n+          - name: {{ .Values.appName }}-keycloak-config\n+            mountPath: \"/opt/jboss/keycloak/standalone/configuration/realm\"\n+          - name: \"startup\"\n+            mountPath: /opt/jboss/startup-scripts/contextPath.cli\n+            subPath: contextPath.cli\n+            readOnly: true\n         securityContext:\n           privileged: false\n       volumes:\n-      - name: \"{{ .Values.appName }}-keycloak-config\"\n-        configMap:\n-          name: \"{{ .Values.appName }}-keycloak-config\"\n+        - name: \"{{ .Values.appName }}-keycloak-config\"\n+          configMap:\n+            name: \"{{ .Values.appName }}-keycloak-config\"\n+        - name: \"startup\"\n+          configMap:\n+            name: \"{{ .Values.appName }}-keycloak-startup\"\n+            defaultMode: 0555\n+            items:\n+              - key: contextPath.cli\n+                path: contextPath.cli\n       restartPolicy: Always\n       dnsPolicy: ClusterFirst\n ---\n@@ -519,4 +539,4 @@ spec:\n         - name: \"{{ .Values.appName }}-async-minion-config\"\n           configMap:\n             name: \"{{ .Values.appName }}-async-minion-config\"\n-{{- end }}\n\\ No newline at end of file\n+{{- end }}"
  },
  {
    "sha": "1d6f9458bb29101bfb69a5dafc2f60b061a8f329",
    "filename": "install/kubernetes/microcks/templates/ingress.yaml",
    "status": "modified",
    "additions": 25,
    "deletions": 11,
    "changes": 36,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/templates/ingress.yaml",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/templates/ingress.yaml",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/install/kubernetes/microcks/templates/ingress.yaml?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -1,10 +1,15 @@\n-kind: Ingress\n+{{- if .Values.microcks.ingress.enabled }}\n+{{- if semverCompare \">=1.14-0\" .Capabilities.KubeVersion.GitVersion -}}\n apiVersion: networking.k8s.io/v1beta1\n+{{- else -}}\n+apiVersion: extensions/v1beta1\n+{{- end }}\n+kind: Ingress\n metadata:\n   name: microcks\n   annotations:\n-    ingress.kubernetes.io/rewrite-target: /\n-  {{- with .Values.microcks.ingressAnnotations }}\n+    ingress.kubernetes.io/rewrite-target: \"{{ .Values.microcks.baseContext }}\"\n+  {{- with .Values.microcks.ingress.annotations }}\n     {{- toYaml . | nindent 4 }}\n   {{- end }}\n   labels:\n@@ -14,23 +19,30 @@ spec:\n   tls:\n   - hosts:\n     - \"{{ .Values.microcks.url }}\"\n-    secretName: {{ .Values.microcks.ingressSecretRef | default (print .Values.appName \"-microcks-ingress-secret\") }}\n+    secretName: {{ .Values.microcks.ingress.secretRef | default (print .Values.appName \"-microcks-ingress-secret\") }}\n   rules:\n   - host: \"{{ .Values.microcks.url }}\"\n     http:\n       paths:\n-      - backend:\n+      - path: \"{{ .Values.microcks.baseContext }}\"\n+        pathType: Prefix\n+        backend:\n           serviceName: \"{{ .Values.appName }}\"\n           servicePort: 8080\n-{{- if .Values.keycloak.install }}\n+{{- end }}\n+{{- if and .Values.keycloak.install .Values.keycloak.ingress.enabled }}\n ---\n-kind: Ingress\n+{{- if semverCompare \">=1.14-0\" .Capabilities.KubeVersion.GitVersion -}}\n apiVersion: networking.k8s.io/v1beta1\n+{{- else -}}\n+apiVersion: extensions/v1beta1\n+{{- end }}\n+kind: Ingress\n metadata:\n   name: keycloak\n   annotations:\n-    ingress.kubernetes.io/rewrite-target: /\n-  {{- with .Values.keycloak.ingressAnnotations }}\n+    ingress.kubernetes.io/rewrite-target: \"{{ .Values.keycloak.baseContext }}\"\n+  {{- with .Values.keycloak.ingress.annotations }}\n     {{- toYaml . | nindent 4 }}\n   {{- end }}\n   labels:\n@@ -40,12 +52,14 @@ spec:\n   tls:\n   - hosts:\n     - \"{{ .Values.keycloak.url }}\"\n-    secretName: {{ .Values.keycloak.ingressSecretRef | default (print .Values.appName \"-keycloak-ingress-secret\") }}\n+    secretName: {{ .Values.keycloak.ingress.secretRef | default (print .Values.appName \"-keycloak-ingress-secret\") }}\n   rules:\n   - host: \"{{ .Values.keycloak.url }}\"\n     http:\n       paths:\n-      - backend:\n+      - path: \"{{ .Values.keycloak.baseContext }}\"\n+        pathType: Prefix\n+        backend:\n           serviceName: \"{{ .Values.appName }}-keycloak\"\n           servicePort: 8080\n {{- end }}\n\\ No newline at end of file"
  },
  {
    "sha": "c37fad4c7d9e00575aa1b6cce218ea5d2f5238fc",
    "filename": "install/kubernetes/microcks/values.yaml",
    "status": "modified",
    "additions": 19,
    "deletions": 12,
    "changes": 31,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/values.yaml",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/install/kubernetes/microcks/values.yaml",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/install/kubernetes/microcks/values.yaml?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -2,12 +2,15 @@ appName: microcks\n \n microcks:\n   url: microcks-microcks.192.168.99.100.nip.io\n-  #url: microcks-microcks.192.168.64.6.nip.io\n-  #ingressSecretRef: my-secret-for-microcks-ingress\n-  #ingressAnnotations:\n-    #cert-manager.io/issuer: my-cert-issuer\n-    #kubernetes.io/tls-acme: \"true\"\n-    #kubernetes.io/ingress.class: nginx\n+  # baseContext should always end with a trailing `/`, e.g. `/mock-server/microcks/`\n+  baseContext: /\n+  ingress:\n+    enabled: true\n+    secretRef: my-secret-for-microcks-ingress\n+    annotations:\n+      kubernetes.io/ingress.class: nginx\n+      # cert-manager.io/issuer: my-cert-issuer\n+      # kubernetes.io/tls-acme: \"true\"\n   generateCert: true\n   image: quay.io/microcks/microcks:1.2.0\n   replicas: 1\n@@ -27,12 +30,16 @@ keycloak:\n   install: true\n   realm: microcks\n   url: keycloak-microcks.192.168.99.100.nip.io\n+  # baseContext should always end with a trailing `/`, e.g. `/mock-server/auth/`\n+  baseContext: /auth/\n   #privateUrl: http://microcks-keycloak.microcks.svc.cluster.local:8080/auth\n-  #ingressSecretRef: my-secret-for-keycloak-ingress\n-  #ingressAnnotations:\n-    #cert-manager.io/issuer: my-cert-issuer\n-    #kubernetes.io/tls-acme: \"true\"\n-    #kubernetes.io/ingress.class: nginx\n+  ingress:\n+    enabled: true\n+    secretRef: my-secret-for-keycloak-ingress\n+    annotations:\n+      kubernetes.io/ingress.class: nginx\n+      # cert-manager.io/issuer: my-cert-issuer\n+      # kubernetes.io/tls-acme: \"true\"\n   generateCert: true\n   image: jboss/keycloak:10.0.1\n   adminUsername: admin\n@@ -115,4 +122,4 @@ features:\n     enabled: false\n     labelKey: app\n     labelLabel: Application\n-    labelList: app,status\n+    labelList: app,status\n\\ No newline at end of file"
  },
  {
    "sha": "d80b4f150ceae175325836e312462e498af811b5",
    "filename": "webapp/README.md",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/README.md",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/README.md",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/README.md?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -4,7 +4,7 @@ For development purposes, frontend GUI and backend APIs have been separated and\n * Frontend is an Angular 6 application served by `ng serve` with livereload enabled,\n * Backend is a Spring Boot application served by Boot internal server\n \n-We also need a Keycloak server running on port `8180`. \n+We also need a Keycloak server running on port `8180`. You can run the Keycloak server as a container from docker-compose, just adjust the exposed port to `8180`.\n \n ### Pre-requisites\n \n@@ -25,7 +25,7 @@ $ ./standalone.sh -Djboss.socket.binding.port-offset=100\n In a terminal, start frontend GUI server using NG :\n \n ```\n-$ cd src/main/webapp\n+$ cd webapp/src/main/webapp\n $ ng serve\n ```\n "
  },
  {
    "sha": "45c272f4020ab02560e2325cfb77c0f6d05eab32",
    "filename": "webapp/src/main/resources/config/application.properties",
    "status": "modified",
    "additions": 6,
    "deletions": 13,
    "changes": 19,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/resources/config/application.properties",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/resources/config/application.properties",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/resources/config/application.properties?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -1,30 +1,27 @@\n # Application configuration properties\n spring.jackson.serialization.write-dates-as-timestamps=true\n spring.jackson.default-property-inclusion=non_null\n-\n tests-callback.url=${TEST_CALLBACK_URL:http://localhost:8080}\n postman-runner.url=${POSTMAN_RUNNER_URL:http://localhost:3000}\n async-minion.url=${ASYNC_MINION_URL:http://localhost:8081}\n-\n network.proxyHost=${PROXY_HOST:}\n network.proxyPort=${PROXY_PORT:}\n network.proxyUsername=${PROXY_USERNAME:}\n network.proxyPassword=${PROXY_PASSWORD:}\n network.nonProxyHosts=${PROXY_EXCLUDE:localhost|127.0.0.1|*.svc.cluster.local}\n-\n validation.resourceUrl=http://localhost:8080/api/resources/\n services.update.interval=${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}\n mocks.rest.enable-cors-policy=${ENABLE_CORS_POLICY:true}\n-\n-\n # Keycloak adapter configuration properties\n keycloak.auth-server-url=${KEYCLOAK_URL:http://localhost:8180/auth}\n keycloak.realm=microcks\n keycloak.resource=microcks-app\n keycloak.use-resource-role-mappings=true\n keycloak.bearer-only=true\n keycloak.ssl-required=external\n-\n+keycloak.cors=true\n+keycloak.cors-max-age=3600\n+keycloak.cors-allowed-methods=POST, PUT, DELETE, GET, OPTIONS\n keycloak.security-constraints[0].authRoles[0]=admin\n keycloak.security-constraints[0].authRoles[1]=manager\n keycloak.security-constraints[0].authRoles[2]=user\n@@ -34,29 +31,25 @@ keycloak.security-constraints[0].securityCollections[0].patterns[1]=/api/service\n keycloak.security-constraints[0].securityCollections[0].patterns[2]=/api/jobs\n keycloak.security-constraints[0].securityCollections[0].patterns[3]=/api/jobs/count\n #keycloak.security-constraints[0].securityCollections[0].patterns[4]=/api/tests\n-\n #keycloak.security-constraints[1].authRoles[0]=admin\n #keycloak.security-constraints[1].securityCollections[0].name=Admin stuffs\n #keycloak.security-constraints[1].securityCollections[0].patterns[0]=/api/jobs/*/*\n #keycloak.security-constraints[1].securityCollections[0].patterns[1]=/api/import\n #keycloak.security-constraints[1].securityCollections[0].patterns[2]=/api/export\n-\n #keycloak.security-constraints[2].authRoles[0]=manager\n #keycloak.security-constraints[2].securityCollections[0].patterns[0]=/api/services/*/*\n #keycloak.security-constraints[2].securityCollections[0].methods[0]=POST\n #keycloak.security-constraints[2].securityCollections[0].methods[1]=PUT\n #keycloak.security-constraints[2].securityCollections[0].methods[2]=DELETE\n-\n-\n # Keycloak access configuration properties\n sso.public-url=${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}\n-\n # Async mocking support.\n async-api.enabled=false\n async-api.default-binding=KAFKA\n async-api.default-frequency=3\n-\n # Kafka configuration properties\n spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:localhost:9092}\n spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\n-spring.kafka.producer.value-serializer=io.github.microcks.event.ServiceViewChangeEventSerializer\n\\ No newline at end of file\n+spring.kafka.producer.value-serializer=io.github.microcks.event.ServiceViewChangeEventSerializer\n+# Expose Angular environment configuration\n+spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:/deployments/assets/"
  },
  {
    "sha": "f366d0c9d69f52f47da391f0977e800abc565fa2",
    "filename": "webapp/src/main/webapp/angular.json",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/angular.json",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/angular.json",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/angular.json?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -80,9 +80,7 @@\n         \"serve\": {\n           \"builder\": \"@angular-devkit/build-angular:dev-server\",\n           \"options\": {\n-            \"browserTarget\": \"microcks-ui:build\",\n-            \"proxyConfig\": \"proxy.conf.json\"\n-          },\n+            \"browserTarget\": \"microcks-ui:build\"          },\n           \"configurations\": {\n             \"production\": {\n               \"browserTarget\": \"microcks-ui:build:production\""
  },
  {
    "sha": "85107439b32b4bc5312ba4dff04599084cae2b43",
    "filename": "webapp/src/main/webapp/proxy.conf.json",
    "status": "removed",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/microcks/microcks/blob/b05a5f07e946237cd2bb305548e32691f096b03e/webapp/src/main/webapp/proxy.conf.json",
    "raw_url": "https://github.com/microcks/microcks/raw/b05a5f07e946237cd2bb305548e32691f096b03e/webapp/src/main/webapp/proxy.conf.json",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/proxy.conf.json?ref=b05a5f07e946237cd2bb305548e32691f096b03e",
    "patch": "@@ -1,6 +0,0 @@\n-{\n-  \"/api\": {\n-    \"target\": \"http://localhost:8080\",\n-    \"secure\": false\n-  }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "2fa2a050f0b684ca9ed548bab340e4fbd415e323",
    "filename": "webapp/src/main/webapp/src/app/app.module.ts",
    "status": "modified",
    "additions": 12,
    "deletions": 6,
    "changes": 18,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/app.module.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/app.module.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/app.module.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -74,6 +74,8 @@ import { ArtifactUploaderDialogComponent } from './pages/importers/_components/u\n import { HubPageComponent } from './pages/hub/hub.page';\n import { HubPackagePageComponent } from './pages/hub/package/package.page';\n import { HubAPIVersionPageComponent } from './pages/hub/package/apiVersion/apiVersion.page';\n+import { APP_BASE_HREF } from '@angular/common';\n+\n \n import json from 'highlight.js/lib/languages/json';\n import xml from 'highlight.js/lib/languages/xml';\n@@ -84,8 +86,8 @@ import xml from 'highlight.js/lib/languages/xml';\n  */\n export function getHighlightLanguages() {\n   return [\n-    {name: 'json', func: json},\n-    {name: 'xml', func: xml}\n+    { name: 'json', func: json },\n+    { name: 'xml', func: xml }\n   ];\n }\n \n@@ -109,10 +111,10 @@ export function configLoader(configService: ConfigService) {\n     BrowserModule, FormsModule, AppRoutingModule, HttpClientModule,\n     BsDropdownModule.forRoot(), ModalModule.forRoot(), TabsModule.forRoot(), TooltipModule.forRoot(),\n     HighlightModule, FileUploadModule,\n-    AboutModalModule, \n+    AboutModalModule,\n     CardModule, DonutChartModule, SparklineChartModule,\n     ListModule, PaginationModule, ToolbarModule,\n-    WizardModule, ToastNotificationListModule, \n+    WizardModule, ToastNotificationListModule,\n   ],\n   providers: [\n     ConfigService, {\n@@ -132,10 +134,14 @@ export function configLoader(configService: ConfigService) {\n       useValue: {\n         languages: getHighlightLanguages\n       }\n-    }\n+    },\n+    {\n+      provide: APP_BASE_HREF,\n+      useValue: window['base-href']\n+    },\n   ],\n   entryComponents: [\n-    HelpDialogComponent, DynamicAPIDialogComponent, \n+    HelpDialogComponent, DynamicAPIDialogComponent,\n     EditLabelsDialogComponent, GenericResourcesDialogComponent,\n     ServiceRefsDialogComponent, ImporterWizardComponent, ArtifactUploaderDialogComponent\n   ],"
  },
  {
    "sha": "b75150db6b1fb35ea6440e591049ab139794f657",
    "filename": "webapp/src/main/webapp/src/app/components/vertical-nav/vertical-nav.component.html",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/components/vertical-nav/vertical-nav.component.html",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/components/vertical-nav/vertical-nav.component.html",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/components/vertical-nav/vertical-nav.component.html?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -6,9 +6,9 @@\n       <span class=\"icon-bar\"></span>\n       <span class=\"icon-bar\"></span>\n     </button>\n-    <a href=\"/\" class=\"navbar-brand\">\n+    <a href=\"{{ BASE_CONTEXT }}\" class=\"navbar-brand\">\n       <!-- <img class=\"navbar-brand-icon\" src=\"/assets/microcks.png\" alt=\"Microcks\"/> -->\n-      <img class=\"navbar-brand-icon\" src=\"/assets/microcks-logo-white-name.png\" alt=\"Microcks\"/>\n+      <img class=\"navbar-brand-icon\" src=\"{{ BASE_CONTEXT }}assets/microcks-logo-white-name.png\" alt=\"Microcks\"/>\n     </a>\n   </div>\n "
  },
  {
    "sha": "90f6de6f7f38d1a9ff8d3394cfe5e853c78cf112",
    "filename": "webapp/src/main/webapp/src/app/components/vertical-nav/vertical-nav.component.ts",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/components/vertical-nav/vertical-nav.component.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/components/vertical-nav/vertical-nav.component.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/components/vertical-nav/vertical-nav.component.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -12,6 +12,9 @@ import { VersionInfoService } from '../../services/versioninfo.service';\n import { User } from \"../../models/user.model\";\n import { ConfigService } from 'src/app/services/config.service';\n \n+import { environment } from 'src/environments/environment';\n+\n+export const BASE_CONTEXT = `${environment.baseContext}`\n \n // Thanks to https://github.com/onokumus/metismenu/issues/110#issuecomment-317254128\n //import * as $ from 'jquery';\n@@ -33,8 +36,8 @@ export class VerticalNavComponent implements OnInit {\n   }\n \n   ngOnInit() {\n-    this.user().subscribe( currentUser => {\n-      this.versionInfoSvc.getVersionInfo().subscribe( versionInfo => {\n+    this.user().subscribe(currentUser => {\n+      this.versionInfoSvc.getVersionInfo().subscribe(versionInfo => {\n         this.aboutConfig = {\n           additionalInfo: 'Microcks is Open Source mocking and testing platform for API and microservices. Visit https://microcks.io for more information.',\n           copyright: 'Distributed under Apache Licence v2.0',\n@@ -45,7 +48,7 @@ export class VerticalNavComponent implements OnInit {\n             { name: 'Version', value: versionInfo.versionId },\n             { name: 'Build timestamp', value: versionInfo.buildTimestamp },\n             { name: 'User Login', value: currentUser.login },\n-            { name: 'User Name', value: currentUser.name } ]\n+            { name: 'User Name', value: currentUser.name }]\n         } as AboutModalConfig;\n       });\n     });\n@@ -57,7 +60,7 @@ export class VerticalNavComponent implements OnInit {\n \n   public openHelpDialog() {\n     const initialState = {};\n-    this.modalRef = this.modalService.show(HelpDialogComponent, {initialState});\n+    this.modalRef = this.modalService.show(HelpDialogComponent, { initialState });\n   }\n \n   public openAboutModal(template: TemplateRef<any>): void {"
  },
  {
    "sha": "990b96a1f3a88f47e54720a1913702f9119d1778",
    "filename": "webapp/src/main/webapp/src/app/pages/admin/_components/snapshots.tab.ts",
    "status": "modified",
    "additions": 13,
    "deletions": 5,
    "changes": 18,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/pages/admin/_components/snapshots.tab.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/pages/admin/_components/snapshots.tab.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/pages/admin/_components/snapshots.tab.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -23,6 +23,13 @@ import { FileUploader } from 'ng2-file-upload';\n \n import { Service } from '../../../models/service.model';\n import { ServicesService } from '../../../services/services.service';\n+import { environment } from 'src/environments/environment';\n+\n+\n+const ENDPOINTS = {\n+  EXPORT: () => `${environment.apiUrl}api/export?`,\n+  IMPORT: () => `${environment.apiUrl}api/import`\n+};\n \n @Component({\n   selector: 'snapshots-tab',\n@@ -36,9 +43,10 @@ export class SnapshotsTabComponent implements OnInit {\n   servicesCount: number;\n \n   selectedServices: any = { ids: {} };\n-  uploader: FileUploader = new FileUploader({url: '/api/import', itemAlias: 'file'});\n+  uploader: FileUploader = new FileUploader({ url: ENDPOINTS.IMPORT(), itemAlias: 'file' });\n+\n \n-  constructor(private servicesSvc: ServicesService, private notificationService: NotificationService) {}\n+  constructor(private servicesSvc: ServicesService, private notificationService: NotificationService) { }\n \n   ngOnInit() {\n     this.getAllServices();\n@@ -50,7 +58,7 @@ export class SnapshotsTabComponent implements OnInit {\n     };\n   }\n \n-  getAllServices():void {\n+  getAllServices(): void {\n     this.servicesSvc.getServices(1, 1000).subscribe(\n       results => {\n         this.halfServices = results.slice(0, (results.length / 2) + 1);\n@@ -61,8 +69,8 @@ export class SnapshotsTabComponent implements OnInit {\n   }\n \n   public createExport(): void {\n-    var downloadPath = '/api/export?';\n-    Object.keys(this.selectedServices.ids).forEach(function(element, index, array) {\n+    var downloadPath = ENDPOINTS.EXPORT();\n+    Object.keys(this.selectedServices.ids).forEach(function (element, index, array) {\n       downloadPath += '&serviceIds=' + element;\n     });\n     window.open(downloadPath, '_blank', '');"
  },
  {
    "sha": "e53f831c1301a71af085ac5f149e4f728262af17",
    "filename": "webapp/src/main/webapp/src/app/pages/importers/_components/uploader.dialog.ts",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/pages/importers/_components/uploader.dialog.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/pages/importers/_components/uploader.dialog.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/pages/importers/_components/uploader.dialog.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -21,7 +21,11 @@ import { Component, OnInit } from '@angular/core';\n import { BsModalRef } from 'ngx-bootstrap/modal';\n import { Notification, NotificationEvent, NotificationService, NotificationType } from 'patternfly-ng/notification';\n import { FileUploader, FileItem, ParsedResponseHeaders } from 'ng2-file-upload';\n+import { environment } from 'src/environments/environment';\n \n+const ENDPOINTS = {\n+  ARTIFACT_UPLOAD: () => `${environment.apiUrl}api/artifact/upload`\n+};\n \n @Component({\n   selector: 'uploader-dialog',\n@@ -32,10 +36,10 @@ export class ArtifactUploaderDialogComponent implements OnInit {\n   title: string;\n   closeBtnName: string;\n \n-  uploader: FileUploader = new FileUploader({url: '/api/artifact/upload', itemAlias: 'file'});\n-  \n-  constructor(public bsModalRef: BsModalRef, private notificationService: NotificationService) {}\n- \n+  uploader: FileUploader = new FileUploader({ url: ENDPOINTS.ARTIFACT_UPLOAD(), itemAlias: 'file' });\n+\n+  constructor(public bsModalRef: BsModalRef, private notificationService: NotificationService) { }\n+\n   ngOnInit() {\n     this.uploader.onErrorItem = (item: FileItem, response: string, status: number, headers: ParsedResponseHeaders) => {\n       this.notificationService.message(NotificationType.DANGER,"
  },
  {
    "sha": "92c57a1937badf334d11fce3aba722f363e4154e",
    "filename": "webapp/src/main/webapp/src/app/pages/services/{serviceId}/service-detail.page.ts",
    "status": "modified",
    "additions": 39,
    "deletions": 30,
    "changes": 69,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/pages/services/%7BserviceId%7D/service-detail.page.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/pages/services/%7BserviceId%7D/service-detail.page.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/pages/services/%7BserviceId%7D/service-detail.page.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -36,6 +36,15 @@ import { ConfigService } from '../../../services/config.service';\n import { ContractsService } from '../../../services/contracts.service';\n import { ServicesService } from '../../../services/services.service';\n import { TestsService } from '../../../services/tests.service';\n+import { environment } from 'src/environments/environment';\n+\n+\n+const ENDPOINTS = {\n+  MOCK_URL: () => `${environment.apiUrl}`,\n+};\n+\n+\n+\n \n @Component({\n   selector: 'service-detail-page',\n@@ -56,16 +65,16 @@ export class ServiceDetailPageComponent implements OnInit {\n   operationsListConfig: ListConfig;\n   notifications: Notification[];\n \n-  constructor(private servicesSvc: ServicesService, private contractsSvc: ContractsService, \n-      private testsSvc: TestsService, protected authService: IAuthenticationService, private config: ConfigService,\n-      private modalService: BsModalService, private notificationService: NotificationService,\n-      private route: ActivatedRoute, private router: Router, private ref: ChangeDetectorRef) {\n+  constructor(private servicesSvc: ServicesService, private contractsSvc: ContractsService,\n+    private testsSvc: TestsService, protected authService: IAuthenticationService, private config: ConfigService,\n+    private modalService: BsModalService, private notificationService: NotificationService,\n+    private route: ActivatedRoute, private router: Router, private ref: ChangeDetectorRef) {\n   }\n \n   ngOnInit() {\n     this.notifications = this.notificationService.getNotifications();\n     this.serviceView = this.route.paramMap.pipe(\n-      switchMap((params: ParamMap) => \n+      switchMap((params: ParamMap) =>\n         this.servicesSvc.getServiceView(params.get('serviceId')))\n     );\n     this.contracts = this.route.paramMap.pipe(\n@@ -76,7 +85,7 @@ export class ServiceDetailPageComponent implements OnInit {\n       switchMap((params: ParamMap) =>\n         this.testsSvc.listByServiceId(params.get('serviceId')))\n     );\n-    this.serviceView.subscribe( view => {\n+    this.serviceView.subscribe(view => {\n       this.serviceId = view.service.id;\n       this.resolvedServiceView = view;\n       this.operations = view.service.operations;\n@@ -126,7 +135,7 @@ export class ServiceDetailPageComponent implements OnInit {\n     if (this.resolvedServiceView.service.metadata.labels != undefined) {\n       initialState.labels = JSON.parse(JSON.stringify(this.resolvedServiceView.service.metadata.labels));\n     }\n-    this.modalRef = this.modalService.show(EditLabelsDialogComponent, {initialState});\n+    this.modalRef = this.modalService.show(EditLabelsDialogComponent, { initialState });\n     this.modalRef.content.saveLabelsAction.subscribe((labels) => {\n       this.resolvedServiceView.service.metadata.labels = labels;\n       this.servicesSvc.updateServiceMetadata(this.resolvedServiceView.service, this.resolvedServiceView.service.metadata).subscribe(\n@@ -155,7 +164,7 @@ export class ServiceDetailPageComponent implements OnInit {\n       closeBtnName: 'Close',\n       service: this.resolvedServiceView.service\n     };\n-    this.modalRef = this.modalService.show(GenericResourcesDialogComponent, {initialState});\n+    this.modalRef = this.modalService.show(GenericResourcesDialogComponent, { initialState });\n   }\n \n   public getHeaderName(exchange: Exchange): string {\n@@ -172,11 +181,11 @@ export class ServiceDetailPageComponent implements OnInit {\n       result += \" is <code>required</code>\";\n     }\n     if (constraint.recopy) {\n-      if (result != \"Parameter \") { result += \", \"}\n+      if (result != \"Parameter \") { result += \", \" }\n       result += \" will be <code>recopied</code> as response header\"\n     }\n     if (constraint.mustMatchRegexp) {\n-      if (result != \"Parameter \") { result += \", \"}\n+      if (result != \"Parameter \") { result += \", \" }\n       result += \" must match the <code>\" + constraint.mustMatchRegexp + \"</code> regular expression\"\n     }\n     return result;\n@@ -187,7 +196,7 @@ export class ServiceDetailPageComponent implements OnInit {\n     if (operation.bindings != null) {\n       var result = \"\";\n       var bindings = Object.keys(operation.bindings);\n-      for (let i=0; i<bindings.length; i++) {\n+      for (let i = 0; i < bindings.length; i++) {\n         var b = bindings[i];\n         switch (b) {\n           case 'KAFKA':\n@@ -200,7 +209,7 @@ export class ServiceDetailPageComponent implements OnInit {\n             result += 'AMQP 1.0';\n             break;\n         }\n-        if (i+1 < bindings.length) {\n+        if (i + 1 < bindings.length) {\n           result += \", \";\n         }\n       }\n@@ -227,33 +236,33 @@ export class ServiceDetailPageComponent implements OnInit {\n \n   public formatMockUrl(operation: Operation, dispatchCriteria: string): string {\n     console.log(\"[ServiceDetailPageComponent.formatMockUrl()]\");\n-    var result = document.location.origin;\n+    var result = ENDPOINTS.MOCK_URL();\n \n     if (this.resolvedServiceView.service.type === ServiceType.REST) {\n-      result += '/rest/';\n+      result += 'rest/';\n       result += this.encodeUrl(this.resolvedServiceView.service.name) + '/' + this.resolvedServiceView.service.version;\n \n       var parts = {};\n       var params = {};\n       var operationName = operation.name;\n-      \n+\n       if (dispatchCriteria != null) {\n         var partsCriteria = (dispatchCriteria.indexOf('?') == -1 ? dispatchCriteria : dispatchCriteria.substring(0, dispatchCriteria.indexOf('?')));\n         var paramsCriteria = (dispatchCriteria.indexOf('?') == -1 ? null : dispatchCriteria.substring(dispatchCriteria.indexOf('?') + 1));\n \n         partsCriteria = this.encodeUrl(partsCriteria);\n-        partsCriteria.split('/').forEach(function(element, index, array) {\n-          if (element){\n+        partsCriteria.split('/').forEach(function (element, index, array) {\n+          if (element) {\n             parts[element.split('=')[0]] = element.split('=')[1];\n           }\n         });\n-      \n+\n         //operationName = operationName.replace(/{(\\w+)}/g, function(match, p1, string) {\n-        operationName = operationName.replace(/{([a-zA-Z0-9-_]+)}/g, function(match, p1, string) {\n+        operationName = operationName.replace(/{([a-zA-Z0-9-_]+)}/g, function (match, p1, string) {\n           return parts[p1];\n         });\n         // Support also Postman syntax with /:part\n-        operationName = operationName.replace(/:([a-zA-Z0-9-_]+)/g, function(match, p1, string) {\n+        operationName = operationName.replace(/:([a-zA-Z0-9-_]+)/g, function (match, p1, string) {\n           return parts[p1];\n         });\n         if (paramsCriteria != null) {\n@@ -265,14 +274,14 @@ export class ServiceDetailPageComponent implements OnInit {\n       operationName = this.removeVerbInUrl(operationName);\n       result += operationName;\n     } else if (this.resolvedServiceView.service.type === ServiceType.SOAP_HTTP) {\n-      result += '/soap/';\n+      result += 'soap/';\n       result += this.encodeUrl(this.resolvedServiceView.service.name) + '/' + this.resolvedServiceView.service.version;\n     } else if (this.resolvedServiceView.service.type === ServiceType.GENERIC_REST) {\n-      result += '/dynarest/';\n+      result += 'dynarest/';\n       var resourceName = this.removeVerbInUrl(operation.name);\n       result += this.encodeUrl(this.resolvedServiceView.service.name) + '/' + this.resolvedServiceView.service.version + resourceName;\n     }\n-    \n+\n     return result;\n   }\n   public formatAsyncDestination(operation: Operation, eventMessage: EventMessage): string {\n@@ -309,12 +318,12 @@ export class ServiceDetailPageComponent implements OnInit {\n \n   private removeVerbInUrl(operationName: string): string {\n     if (operationName.startsWith(\"GET \") || operationName.startsWith(\"PUT \")\n-        || operationName.startsWith(\"POST \") || operationName.startsWith(\"DELETE \")\n-        || operationName.startsWith(\"OPTIONS \") || operationName.startsWith(\"PATCH \")\n-        || operationName.startsWith(\"HEAD \") || operationName.startsWith(\"TRACE \")\n-        || operationName.startsWith(\"SUBSCRIBE \") || operationName.startsWith(\"PUBLISH \")) {\n+      || operationName.startsWith(\"POST \") || operationName.startsWith(\"DELETE \")\n+      || operationName.startsWith(\"OPTIONS \") || operationName.startsWith(\"PATCH \")\n+      || operationName.startsWith(\"HEAD \") || operationName.startsWith(\"TRACE \")\n+      || operationName.startsWith(\"SUBSCRIBE \") || operationName.startsWith(\"PUBLISH \")) {\n       operationName = operationName.slice(operationName.indexOf(' ') + 1);\n-    } \n+    }\n     return operationName;\n   }\n   private encodeUrl(url: string): string {\n@@ -330,8 +339,8 @@ export class ServiceDetailPageComponent implements OnInit {\n   }\n \n   public allowOperationsPropertiesEdit(): boolean {\n-    return (this.hasRole('admin') || this.hasRole('manager')) \n-        && (this.resolvedServiceView.service.type === 'REST' || (this.resolvedServiceView.service.type === 'EVENT' && this.asyncAPIFeatureEnabled()));\n+    return (this.hasRole('admin') || this.hasRole('manager'))\n+      && (this.resolvedServiceView.service.type === 'REST' || (this.resolvedServiceView.service.type === 'EVENT' && this.asyncAPIFeatureEnabled()));\n   }\n \n   public asyncAPIFeatureEnabled(): boolean {"
  },
  {
    "sha": "87eac4ac0719dfdf2c19bf295649f0fac49c41be",
    "filename": "webapp/src/main/webapp/src/app/services/auth.http-interceptor.ts",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/auth.http-interceptor.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/auth.http-interceptor.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/auth.http-interceptor.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -30,20 +30,20 @@ export class AuthenticationHttpInterceptor implements HttpInterceptor {\n   //constructor() { }\n \n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n-    console.log('[AuthenticationHttpInterceptor] intercept for ' + req.method);\n-    \n+    console.log('[AuthenticationHttpInterceptor] intercept for ' + req.method + ' ' + req.url);\n+\n     if (req.method === 'OPTIONS') {\n       return next.handle(req);\n     }\n-    \n+\n     // Build new set of headers for authentication purpose.\n     if (this.authService.isAuthenticated) {\n-      var authHeaders: {[header: string]: string} = {};\n+      var authHeaders: { [header: string]: string } = {};\n       this.authService.injectAuthHeaders(authHeaders);\n-      const changedReq = req.clone({setHeaders: authHeaders});\n+      const changedReq = req.clone({ setHeaders: authHeaders });\n       return next.handle(changedReq);\n     }\n-    \n+\n     return next.handle(req);\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "67e0c41fb83d86c0b9c913666729a0743efcf4ca",
    "filename": "webapp/src/main/webapp/src/app/services/config.service.ts",
    "status": "modified",
    "additions": 11,
    "deletions": 5,
    "changes": 16,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/config.service.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/config.service.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/config.service.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -19,6 +19,8 @@\n import { Injectable } from \"@angular/core\";\n import { HttpClient } from '@angular/common/http';\n import { User } from \"../models/user.model\";\n+import { environment } from 'src/environments/environment';\n+\n \n let DEFAULT_CONFIG: any = {\n   mode: \"dev\",\n@@ -27,6 +29,10 @@ let DEFAULT_CONFIG: any = {\n   }\n };\n \n+const ENDPOINTS = {\n+  CONFIG_URL: () => `${environment.apiUrl}api/features/config`\n+};\n+\n /**\n  * A base service holding configuration of Microcks App.\n  */\n@@ -35,7 +41,7 @@ export class ConfigService {\n \n   private config: any;\n \n-  \n+\n   constructor(private http: HttpClient) {\n     let w: any = window;\n     if (w[\"MicrocksConfig\"]) {\n@@ -86,12 +92,12 @@ export class ConfigService {\n     return <any>this.config.user;\n   }\n \n-  public loadConfiguredFeatures() : Promise<any>  {\n-    console.info(\"[ConfigService] Completing config with additional features...\");\n-    const featurePromise = this.http.get<any>('/api/features/config')\n+  public loadConfiguredFeatures(): Promise<any> {\n+    console.log(\"[ConfigService] Completing config with additional features...\");\n+    const featurePromise = this.http.get<any>(ENDPOINTS.CONFIG_URL())\n       .toPromise().then(results => {\n         this.config.features = results;\n-        console.info(\"[ConfigService] Got config: \" + JSON.stringify(this.config.features));\n+        console.log(\"[ConfigService] Got config: \" + JSON.stringify(this.config.features));\n         return results;\n       });\n     return featurePromise;"
  },
  {
    "sha": "a13305c05c50b9b7da1db830f355a61d37a0834e",
    "filename": "webapp/src/main/webapp/src/app/services/contracts.service.ts",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/contracts.service.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/contracts.service.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/contracts.service.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -19,17 +19,21 @@\n import { Injectable } from '@angular/core';\n import { HttpClient, HttpParams } from '@angular/common/http';\n import { Observable } from 'rxjs';\n+import { environment } from 'src/environments/environment';\n \n import { Contract } from '../models/service.model';\n \n+const ENDPOINTS = {\n+  GET_CONTRACT: () => `${environment.apiUrl}api/resources/service/`\n+};\n+\n @Injectable({ providedIn: 'root' })\n export class ContractsService {\n \n-  private rootUrl: string = '/api';\n \n   constructor(private http: HttpClient) { }\n \n   public listByServiceId(serviceId: string): Observable<Contract[]> {\n-    return this.http.get<Contract[]>(this.rootUrl + '/resources/service/' + serviceId);\n+    return this.http.get<Contract[]>(ENDPOINTS.GET_CONTRACT() + serviceId);\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "ca5b2ad29ae842191f24fba5baa9ec5d0c1d5f40",
    "filename": "webapp/src/main/webapp/src/app/services/importers.service.ts",
    "status": "modified",
    "additions": 15,
    "deletions": 12,
    "changes": 27,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/importers.service.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/importers.service.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/importers.service.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -19,52 +19,55 @@\n import { Injectable } from '@angular/core';\n import { HttpClient, HttpParams } from '@angular/common/http';\n import { Observable } from 'rxjs';\n+import { environment } from 'src/environments/environment';\n \n import { ImportJob } from '../models/importer.model';\n \n+const ENDPOINTS = {\n+  IMPORT_JOB: () => `${environment.apiUrl}api/jobs`,\n+  JOB_COUNT: () => `${environment.apiUrl}api/jobs/count`\n+};\n \n @Injectable({ providedIn: 'root' })\n export class ImportersService {\n \n-  private rootUrl: string = '/api';\n-\n   constructor(private http: HttpClient) { }\n \n   getImportJobs(page: number = 1, pageSize: number = 20): Observable<ImportJob[]> {\n     const options = { params: new HttpParams().set('page', String(page - 1)).set('size', String(pageSize)) };\n-    return this.http.get<ImportJob[]>(this.rootUrl + '/jobs', options);\n+    return this.http.get<ImportJob[]>(ENDPOINTS.IMPORT_JOB(), options);\n   }\n \n   filterImportJobs(filter: string): Observable<ImportJob[]> {\n     const options = { params: new HttpParams().set('name', filter) };\n-    return this.http.get<ImportJob[]>(this.rootUrl + '/jobs', options);\n+    return this.http.get<ImportJob[]>(ENDPOINTS.IMPORT_JOB(), options);\n   }\n \n-  countImportJobs(): Observable<any> { \n-    return this.http.get<any>(this.rootUrl + '/jobs/count');\n+  countImportJobs(): Observable<any> {\n+    return this.http.get<any>(ENDPOINTS.JOB_COUNT());\n   }\n \n   createImportJob(job: ImportJob): Observable<ImportJob> {\n-    return this.http.post<ImportJob>(this.rootUrl + '/jobs', job);\n+    return this.http.post<ImportJob>(ENDPOINTS.IMPORT_JOB(), job);\n   }\n \n   updateImportJob(job: ImportJob): Observable<ImportJob> {\n-    return this.http.post<ImportJob>(this.rootUrl + '/jobs/' + job.id, job);\n+    return this.http.post<ImportJob>(ENDPOINTS.IMPORT_JOB() + '/' + job.id, job);\n   }\n \n   deleteImportJob(job: ImportJob): Observable<ImportJob> {\n-    return this.http.delete<ImportJob>(this.rootUrl + '/jobs/' + job.id);\n+    return this.http.delete<ImportJob>(ENDPOINTS.IMPORT_JOB() + '/' + job.id);\n   }\n \n   activateImportJob(job: ImportJob): Observable<ImportJob> {\n-    return this.http.put<ImportJob>(this.rootUrl + '/jobs/' + job.id + '/activate', job);\n+    return this.http.put<ImportJob>(ENDPOINTS.IMPORT_JOB() + '/' + job.id + '/activate', job);\n   }\n \n   startImportJob(job: ImportJob): Observable<ImportJob> {\n-    return this.http.put<ImportJob>(this.rootUrl + '/jobs/' + job.id + '/start', job);\n+    return this.http.put<ImportJob>(ENDPOINTS.IMPORT_JOB() + '/' + job.id + '/start', job);\n   }\n \n   stopImportJob(job: ImportJob): Observable<ImportJob> {\n-    return this.http.put<ImportJob>(this.rootUrl + '/jobs/' + job.id + '/stop', job);\n+    return this.http.put<ImportJob>(ENDPOINTS.IMPORT_JOB() + '/' + job.id + '/stop', job);\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "f8aa4bf4724d8e4ca8dc743f8dc3e197044941ab",
    "filename": "webapp/src/main/webapp/src/app/services/invocations.service.ts",
    "status": "modified",
    "additions": 23,
    "deletions": 16,
    "changes": 39,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/invocations.service.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/invocations.service.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/invocations.service.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -19,54 +19,61 @@\n import { Injectable } from '@angular/core';\n import { HttpClient, HttpParams } from '@angular/common/http';\n import { Observable } from 'rxjs';\n+import { environment } from 'src/environments/environment';\n \n import { DailyInvocations } from '../models/metric.model';\n \n+const ENDPOINTS = {\n+  INVOCATIONS: () => `${environment.apiUrl}api/invocations`,\n+  INVOCATIONS_GLOBAL: () => ENDPOINTS.INVOCATIONS() + `/global`,\n+  INVOCATIONS_GLOBAL_LAST: () => ENDPOINTS.INVOCATIONS() + `/global/last`,\n+  INVOCATIONS_TOP: () => ENDPOINTS.INVOCATIONS() + `/top`,\n+\n+};\n+\n @Injectable({ providedIn: 'root' })\n export class InvocationsService {\n \n-  private rootUrl: string = '/api';\n-\n   constructor(private http: HttpClient) { }\n \n-  public getInvocationStats(day: Date) : Observable<DailyInvocations> {\n+  public getInvocationStats(day: Date): Observable<DailyInvocations> {\n     if (day != null) {\n       const dayStr = this.formatDayDate(day);\n       const options = { params: new HttpParams().set('day', dayStr) };\n-      return this.http.get<DailyInvocations>(this.rootUrl + '/invocations/global', options);\n+      return this.http.get<DailyInvocations>(ENDPOINTS.INVOCATIONS_GLOBAL(), options);\n     }\n-    return this.http.get<DailyInvocations>(this.rootUrl + '/invocations/global');\n+    return this.http.get<DailyInvocations>(ENDPOINTS.INVOCATIONS_GLOBAL());\n   }\n \n-  public getTopInvocations(day: Date) : Observable<DailyInvocations[]> {\n+  public getTopInvocations(day: Date): Observable<DailyInvocations[]> {\n     if (day != null) {\n       const dayStr = this.formatDayDate(day);\n       const options = { params: new HttpParams().set('day', dayStr) };\n-      return this.http.get<DailyInvocations[]>(this.rootUrl + '/invocations/top', options);\n+      return this.http.get<DailyInvocations[]>(ENDPOINTS.INVOCATIONS_TOP(), options);\n     }\n-    return this.http.get<DailyInvocations[]>(this.rootUrl + '/invocations/top');\n+    return this.http.get<DailyInvocations[]>(ENDPOINTS.INVOCATIONS_TOP());\n   }\n \n-  public getServiceInvocationStats(serviceName: string, serviceVersion: string, day: Date) : Observable<DailyInvocations> {\n+  public getServiceInvocationStats(serviceName: string, serviceVersion: string, day: Date): Observable<DailyInvocations> {\n     if (day != null) {\n       const dayStr = this.formatDayDate(day);\n       const options = { params: new HttpParams().set('day', dayStr) };\n-      return this.http.get<DailyInvocations>(this.rootUrl + '/invocations/' + serviceName + '/' + serviceVersion, options);\n+      return this.http.get<DailyInvocations>(ENDPOINTS.INVOCATIONS() + '/' + serviceName + '/' + serviceVersion, options);\n     }\n-    return this.http.get<DailyInvocations>(this.rootUrl + '/invocations/' + serviceName + '/' + serviceVersion);\n+    return this.http.get<DailyInvocations>(ENDPOINTS.INVOCATIONS() + '/' + serviceName + '/' + serviceVersion);\n   }\n \n-  public getInvocationsStatsTrend(limit: number) : Observable<any> {\n+  public getInvocationsStatsTrend(limit: number): Observable<any> {\n     if (limit != null) {\n       const options = { params: new HttpParams().set('limit', limit.toString()) };\n-      return this.http.get<any>(this.rootUrl + '/invocations/global/last', options);\n+      return this.http.get<any>(ENDPOINTS.INVOCATIONS_GLOBAL_LAST(), options);\n     }\n-    return this.http.get<any>(this.rootUrl + '/invocations/global/last');\n+    return this.http.get<any>(ENDPOINTS.INVOCATIONS_GLOBAL_LAST());\n   }\n \n-  public formatDayDate(day: Date) : string {\n+  public formatDayDate(day: Date): string {\n     var result = day.getFullYear().toString();\n-    result += day.getMonth() < 9 ? '0' + (day.getMonth()+1).toString() : (day.getMonth()+1).toString();\n+    result += day.getMonth() < 9 ? '0' + (day.getMonth() + 1).toString() : (day.getMonth() + 1).toString();\n     result += day.getDate() < 10 ? '0' + day.getDate().toString() : day.getDate().toString();\n     return result;\n   }"
  },
  {
    "sha": "399283ccad13782b0747f0d3e1396cdb383c8c8a",
    "filename": "webapp/src/main/webapp/src/app/services/secrets.service.ts",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/secrets.service.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/secrets.service.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/secrets.service.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -19,41 +19,42 @@\n import { Injectable } from '@angular/core';\n import { HttpClient, HttpParams } from '@angular/common/http';\n import { Observable } from 'rxjs';\n+import { environment } from 'src/environments/environment';\n \n import { Secret } from '../models/secret.model';\n import { IAuthenticationService } from './auth.service';\n \n-\n+const ENDPOINTS = {\n+  SECRETS: () => `${environment.apiUrl}api/secrets`\n+};\n @Injectable({ providedIn: 'root' })\n export class SecretsService {\n \n-  private rootUrl: string = '/api';\n-\n   constructor(private http: HttpClient) { }\n \n   getSecrets(page: number = 1, pageSize: number = 20): Observable<Secret[]> {\n     const options = { params: new HttpParams().set('page', String(page - 1)).set('size', String(pageSize)) };\n-    return this.http.get<Secret[]>(this.rootUrl + '/secrets', options);\n+    return this.http.get<Secret[]>(ENDPOINTS.SECRETS(), options);\n   }\n \n   filterSecrets(filter: string): Observable<Secret[]> {\n     const options = { params: new HttpParams().set('name', filter) };\n-    return this.http.get<Secret[]>(this.rootUrl + '/secrets', options);\n+    return this.http.get<Secret[]>(ENDPOINTS.SECRETS(), options);\n   }\n \n-  countSecrets(): Observable<any> { \n-    return this.http.get<any>(this.rootUrl + '/secrets/count');\n+  countSecrets(): Observable<any> {\n+    return this.http.get<any>(ENDPOINTS.SECRETS() + '/count');\n   }\n \n   createSecret(secret: Secret): Observable<Secret> {\n-    return this.http.post<Secret>(this.rootUrl + '/secrets', secret);\n+    return this.http.post<Secret>(ENDPOINTS.SECRETS(), secret);\n   }\n \n   updateSecret(secret: Secret): Observable<Secret> {\n-    return this.http.put<Secret>(this.rootUrl + '/secrets/' + secret.id, secret);\n+    return this.http.put<Secret>(ENDPOINTS.SECRETS() + '/' + secret.id, secret);\n   }\n \n   deleteSecret(secret: Secret): Observable<Secret> {\n-    return this.http.delete<Secret>(this.rootUrl + '/secrets/' + secret.id);\n+    return this.http.delete<Secret>(ENDPOINTS.SECRETS() + '/' + secret.id);\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "37ff3d13a98d1e7dba554ed054914f71417c64d2",
    "filename": "webapp/src/main/webapp/src/app/services/services.service.ts",
    "status": "modified",
    "additions": 22,
    "deletions": 17,
    "changes": 39,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/services.service.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/services.service.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/services.service.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -19,19 +19,24 @@\n import { Injectable } from '@angular/core';\n import { HttpClient, HttpParams } from '@angular/common/http';\n import { Observable } from 'rxjs';\n+import { environment } from 'src/environments/environment';\n \n import { Service, ServiceView, Api, GenericResource, OperationMutableProperties, Metadata } from '../models/service.model';\n \n+const ENDPOINTS = {\n+  GENERIC_RESOURCE: () => `${environment.apiUrl}api/genericresources/service`,\n+  SERVICES: () => `${environment.apiUrl}api/services`\n+};\n+\n @Injectable({ providedIn: 'root' })\n export class ServicesService {\n \n-  private rootUrl: string = '/api';\n \n   constructor(private http: HttpClient) { }\n \n   public getServices(page: number = 1, pageSize: number = 20): Observable<Service[]> {\n     const options = { params: new HttpParams().set('page', String(page - 1)).set('size', String(pageSize)) };\n-    return this.http.get<Service[]>(this.rootUrl + '/services', options);\n+    return this.http.get<Service[]>(ENDPOINTS.SERVICES(), options);\n   }\n \n   public filterServices(labelsFilter: Map<string, string>, nameFilter: string): Observable<Service[]> {\n@@ -40,60 +45,60 @@ export class ServicesService {\n       httpParams = httpParams.set('name', nameFilter);\n     }\n     if (labelsFilter != null) {\n-      for (let key of Array.from( labelsFilter.keys() )) {\n+      for (let key of Array.from(labelsFilter.keys())) {\n         httpParams = httpParams.set('labels.' + key, labelsFilter.get(key));\n       }\n     }\n-    \n+\n     const options = { params: httpParams };\n-    return this.http.get<Service[]>(this.rootUrl + '/services/search', options);\n+    return this.http.get<Service[]>(ENDPOINTS.SERVICES() + '/search', options);\n   }\n \n-  public countServices(): Observable<any> { \n-    return this.http.get<any>(this.rootUrl + '/services/count');\n+  public countServices(): Observable<any> {\n+    return this.http.get<any>(ENDPOINTS.SERVICES() + '/count');\n   }\n \n   public getServicesMap(): Observable<any> {\n-    return this.http.get<any>(this.rootUrl + '/services/map');\n+    return this.http.get<any>(ENDPOINTS.SERVICES() + '/map');\n   }\n \n   public getServicesLabels(): Observable<any> {\n-    return this.http.get<any>(this.rootUrl + '/services/labels');\n+    return this.http.get<any>(ENDPOINTS.SERVICES() + '/labels');\n   }\n \n   public getServiceView(serviceId: string): Observable<ServiceView> {\n     const options = { params: new HttpParams().set('messages', 'true') };\n-    return this.http.get<ServiceView>(this.rootUrl + '/services/' + serviceId, options);\n+    return this.http.get<ServiceView>(ENDPOINTS.SERVICES() + '/' + serviceId, options);\n   }\n \n   public getService(serviceId: string): Observable<Service> {\n     const options = { params: new HttpParams().set('messages', 'false') };\n-    return this.http.get<Service>(this.rootUrl + '/services/' + serviceId, options);\n+    return this.http.get<Service>(ENDPOINTS.SERVICES() + '/' + serviceId, options);\n   }\n \n   public createDynamicAPI(api: Api): Observable<Service> {\n-    return this.http.post<Service>(this.rootUrl + '/services/generic', api);\n+    return this.http.post<Service>(ENDPOINTS.SERVICES() + '/generic', api);\n   }\n \n   public deleteService(service: Service): Observable<Service> {\n-    return this.http.delete<Service>(this.rootUrl + '/services/' + service.id);\n+    return this.http.delete<Service>(ENDPOINTS.SERVICES() + '/' + service.id);\n   }\n \n   public getGenericResources(service: Service, page: number = 1, pageSize: number = 20): Observable<GenericResource[]> {\n     const options = { params: new HttpParams().set('page', String(page - 1)).set('size', String(pageSize)) };\n-    return this.http.get<GenericResource[]>(this.rootUrl + '/genericresources/service/' + service.id, options);\n+    return this.http.get<GenericResource[]>(ENDPOINTS.GENERIC_RESOURCE() + '/' + service.id, options);\n   }\n \n   public updateServiceMetadata(service: Service, metadata: Metadata): Observable<any> {\n-    return this.http.put<any>(this.rootUrl + '/services/' + service.id + '/metadata', metadata);\n+    return this.http.put<any>(ENDPOINTS.SERVICES() + '/' + service.id + '/metadata', metadata);\n   }\n \n   public updateServiceOperationProperties(service: Service, operationName: string, properties: OperationMutableProperties): Observable<any> {\n     const options = { params: new HttpParams().set('operationName', operationName) };\n-    return this.http.put<any>(this.rootUrl + '/services/' + service.id + '/operation', properties, options);\n+    return this.http.put<any>(ENDPOINTS.SERVICES() + '/' + service.id + '/operation', properties, options);\n   }\n \n   public countGenericResources(service: Service): Observable<any> {\n-    return this.http.get<any>(this.rootUrl + '/genericresources/service/' + service.id + '/count');\n+    return this.http.get<any>(ENDPOINTS.GENERIC_RESOURCE() + '/' + service.id + '/count');\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "dfd1fa9f4ad54fd7d1998456e6367f70d992bd69",
    "filename": "webapp/src/main/webapp/src/app/services/tests.service.ts",
    "status": "modified",
    "additions": 12,
    "deletions": 8,
    "changes": 20,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/tests.service.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/tests.service.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/tests.service.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -19,32 +19,36 @@\n import { Injectable } from '@angular/core';\n import { HttpClient, HttpParams } from '@angular/common/http';\n import { Observable } from 'rxjs';\n+import { environment } from 'src/environments/environment';\n \n import { TestRequest, TestResult } from '../models/test.model';\n import { RequestResponsePair, UnidirectionalEvent } from '../models/service.model';\n \n+const ENDPOINTS = {\n+  TESTS: () => `${environment.apiUrl}api/tests`,\n+  TESTS_SERVICES: () => ENDPOINTS.TESTS() + `/service`\n+};\n+\n @Injectable({ providedIn: 'root' })\n export class TestsService {\n \n-  private rootUrl: string = '/api';\n-\n   constructor(private http: HttpClient) { }\n \n   public listByServiceId(serviceId: string, page: number = 1, pageSize: number = 20): Observable<TestResult[]> {\n     const options = { params: new HttpParams().set('page', String(page - 1)).set('size', String(pageSize)) };\n-    return this.http.get<TestResult[]>(this.rootUrl + '/tests/service/' + serviceId, options);\n+    return this.http.get<TestResult[]>(ENDPOINTS.TESTS_SERVICES() + '/' + serviceId, options);\n   }\n \n   public countByServiceId(serviceId: string): Observable<any> {\n-    return this.http.get<any>(this.rootUrl + '/tests/service/' + serviceId + '/count');\n+    return this.http.get<any>(ENDPOINTS.TESTS_SERVICES() + '/' + serviceId + '/count');\n   }\n \n   public getTestResult(resultId: string): Observable<TestResult> {\n-    return this.http.get<any>(this.rootUrl + '/tests/' + resultId);\n+    return this.http.get<any>(ENDPOINTS.TESTS() + '/' + resultId);\n   }\n \n   public create(testRequest: TestRequest): Observable<TestResult> {\n-    return this.http.post<TestResult>(this.rootUrl +  '/tests', testRequest);\n+    return this.http.post<TestResult>(ENDPOINTS.TESTS(), testRequest);\n   }\n \n   public getMessages(test: TestResult, operation: string): Observable<RequestResponsePair> {\n@@ -53,7 +57,7 @@ export class TestsService {\n     operation = operation.replace(/\\//g, '_');\n     var testCaseId = test.id + '-' + test.testNumber + '-' + encodeURIComponent(operation);\n     console.log(\"[getMessages] called for \" + testCaseId);\n-    return this.http.get<RequestResponsePair>(this.rootUrl + '/tests/' + test.id + '/messages/' + testCaseId);\n+    return this.http.get<RequestResponsePair>(ENDPOINTS.TESTS() + '/' + test.id + '/messages/' + testCaseId);\n   }\n \n   public getEventMessages(test: TestResult, operation: string): Observable<UnidirectionalEvent> {\n@@ -62,6 +66,6 @@ export class TestsService {\n     operation = operation.replace(/\\//g, '_');\n     var testCaseId = test.id + '-' + test.testNumber + '-' + encodeURIComponent(operation);\n     console.log(\"[getEventMessages] called for \" + testCaseId);\n-    return this.http.get<UnidirectionalEvent>(this.rootUrl + '/tests/' + test.id + '/events/' + testCaseId);\n+    return this.http.get<UnidirectionalEvent>(ENDPOINTS.TESTS() + '/' + test.id + '/events/' + testCaseId);\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "6009bfe379dbca2c667c4ee686325d9cc81c033d",
    "filename": "webapp/src/main/webapp/src/app/services/users.service.ts",
    "status": "modified",
    "additions": 8,
    "deletions": 7,
    "changes": 15,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/users.service.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/users.service.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/users.service.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -20,6 +20,7 @@ import { Injectable } from '@angular/core';\n import { HttpClient, HttpParams } from '@angular/common/http';\n import { Observable } from 'rxjs';\n import { switchMap } from 'rxjs/operators';\n+import { environment } from 'src/environments/environment';\n \n import { User } from '../models/user.model';\n import { IAuthenticationService } from './auth.service';\n@@ -30,7 +31,7 @@ import { KeycloakAuthenticationService } from './auth-keycloak.service';\n export class UsersService {\n \n   private rootUrl: string = '/api';\n-  \n+\n   private microcksAppClientId: string;\n \n   constructor(private http: HttpClient, protected authService: IAuthenticationService) {\n@@ -72,33 +73,33 @@ export class UsersService {\n   getMicrocksAppClientId(): string {\n     return this.microcksAppClientId;\n   }\n-  \n+\n   filterUsers(filter: string): Observable<User[]> {\n     const options = { params: new HttpParams().set('search', filter) };\n     return this.http.get<User[]>(this.rootUrl + '/users', options);\n   }\n \n-  countUsers(): Observable<any> { \n+  countUsers(): Observable<any> {\n     return this.http.get<User[]>(this.rootUrl + '/users/count');\n   }\n \n   getUserRoles(userId: string): Observable<any[]> {\n     return this.http.get<any[]>(this.rootUrl + '/users/' + userId + '/role-mappings/clients/' + this.microcksAppClientId);\n   }\n \n-  assignRoleToUser(userId: string, role: string): Observable<any> { \n+  assignRoleToUser(userId: string, role: string): Observable<any> {\n     return this.getRoleByName(role).pipe(\n       switchMap((role: any) => {\n-        return this.http.post<any[]>(this.rootUrl + '/users/' + userId + '/role-mappings/clients/' + this.microcksAppClientId, [ role ]); \n+        return this.http.post<any[]>(this.rootUrl + '/users/' + userId + '/role-mappings/clients/' + this.microcksAppClientId, [role]);\n       })\n     );\n   }\n \n   removeRoleFromUser(userId: string, role: string): Observable<any> {\n     return this.getRoleByName(role).pipe(\n       switchMap((role: any) => {\n-        return this.http.request<any[]>('delete', \n-          this.rootUrl + '/users/' + userId + '/role-mappings/clients/' + this.microcksAppClientId, { body: [ role ] });\n+        return this.http.request<any[]>('delete',\n+          this.rootUrl + '/users/' + userId + '/role-mappings/clients/' + this.microcksAppClientId, { body: [role] });\n       })\n     );\n   }"
  },
  {
    "sha": "7f68dc46a91a80ae9df3e42b3cf591bad0b8ac94",
    "filename": "webapp/src/main/webapp/src/app/services/versioninfo.service.ts",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/versioninfo.service.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/app/services/versioninfo.service.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/app/services/versioninfo.service.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -19,15 +19,19 @@\n import { Injectable } from '@angular/core';\n import { HttpClient } from '@angular/common/http';\n import { Observable } from 'rxjs';\n+import { environment } from 'src/environments/environment';\n+\n+\n+const ENDPOINTS = {\n+  VERSION_INFO: () => `${environment.apiUrl}api/version/info/`\n+};\n \n @Injectable({ providedIn: 'root' })\n export class VersionInfoService {\n \n-  private rootUrl: string = '/api';\n-\n   constructor(private http: HttpClient) { }\n \n   public getVersionInfo(): Observable<any> {\n-    return this.http.get<any>(this.rootUrl + '/version/info/');\n+    return this.http.get<any>(ENDPOINTS.VERSION_INFO());\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "0c1ac4fe6d5ccf10f8e3105b34a40755e32ea0fa",
    "filename": "webapp/src/main/webapp/src/environments/environment-loader.ts",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/environments/environment-loader.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/environments/environment-loader.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/environments/environment-loader.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -0,0 +1,20 @@\n+import { environment as defaultEnvironment } from './environment';\n+\n+/**\n+ * Loads the environment available in the assets folder. This enables dynamic configuration for Docker images.\n+ */\n+export const environmentLoader = new Promise<any>((resolve, reject) => {\n+    const xmlhttp = new XMLHttpRequest();\n+    const url = './environment/environment.json';\n+    console.log(\"Loading environment from url\", url)\n+    xmlhttp.open('GET', url, true);\n+    xmlhttp.onload = () => {\n+        if (xmlhttp.status === 200) {\n+            resolve(JSON.parse(xmlhttp.responseText));\n+        } else {\n+            console.log('Default env is used!');\n+            resolve(defaultEnvironment);\n+        }\n+    };\n+    xmlhttp.send();\n+});"
  },
  {
    "sha": "8ec100abd762abe77f521ef2680ae36ff10921a4",
    "filename": "webapp/src/main/webapp/src/environments/environment.prod.ts",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/microcks/microcks/blob/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/environments/environment.prod.ts",
    "raw_url": "https://github.com/microcks/microcks/raw/39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e/webapp/src/main/webapp/src/environments/environment.prod.ts",
    "contents_url": "https://api.github.com/repos/microcks/microcks/contents/webapp/src/main/webapp/src/environments/environment.prod.ts?ref=39e0a7c40b0d93beef45f9bc6f78c04fc8ef523e",
    "patch": "@@ -1,3 +1,5 @@\n export const environment = {\n-  production: true\n+  production: true,\n+  apiUrl: 'http://localhost:8080/',\n+  baseContext: '/'\n };"
  }
]
