[
  {
    "sha": "94a25f7f4cb416c083d265558da75d457237d671",
    "filename": ".idea/vcs.xml",
    "status": "added",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/.idea/vcs.xml",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/.idea/vcs.xml",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/.idea/vcs.xml?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project version=\"4\">\n+  <component name=\"VcsDirectoryMappings\">\n+    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n+  </component>\n+</project>\n\\ No newline at end of file"
  },
  {
    "sha": "645bcd1ee85effa73265b4ee62f558fca51992c5",
    "filename": "client/src/main/java/client/Controller.java",
    "status": "modified",
    "additions": 129,
    "deletions": 13,
    "changes": 142,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/java/client/Controller.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/java/client/Controller.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/client/src/main/java/client/Controller.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -4,23 +4,27 @@\n import javafx.application.Platform;\n import javafx.event.ActionEvent;\n import javafx.fxml.FXML;\n+import javafx.fxml.FXMLLoader;\n import javafx.fxml.Initializable;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.PasswordField;\n-import javafx.scene.control.TextArea;\n-import javafx.scene.control.TextField;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.*;\n+import javafx.scene.input.MouseEvent;\n import javafx.scene.layout.HBox;\n+import javafx.stage.Modality;\n import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n \n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.Socket;\n import java.net.URL;\n-import java.util.ResourceBundle;\n+import java.nio.Buffer;\n+import java.util.*;\n \n \n public class Controller implements Initializable {\n+    @FXML\n+    private ListView<String> clientList;\n     @FXML\n     private HBox authPanel;\n     @FXML\n@@ -39,6 +43,8 @@\n     private TextField textField;\n \n     private Stage stage;\n+    private Stage regStage;\n+    private RegController regController;\n \n     private static Socket socket;\n     private static final int PORT = 8889;\n@@ -51,12 +57,17 @@\n \n     private String nickname;\n \n+    private String fileHistoryName = makeHistoryFileName(nickname);\n+\n+\n     private void setAuth(boolean auth) {\n         this.isAuth = auth;\n         messagePanel.setVisible(isAuth);\n         messagePanel.setManaged(isAuth);\n         authPanel.setVisible(!isAuth);\n         authPanel.setManaged(!isAuth);\n+        clientList.setVisible(isAuth);\n+        clientList.setManaged(isAuth);\n         if (!isAuth) {\n             nickname = \"\";\n         }\n@@ -66,9 +77,17 @@ private void setAuth(boolean auth) {\n \n     @Override\n     public void initialize(URL url, ResourceBundle resourceBundle) {\n-//        Platform.runLater(() -> textField.requestFocus());\n         Platform.runLater(()-> {\n             stage = (Stage) textField.getScene().getWindow();\n+            stage.setOnCloseRequest(windowEvent -> {\n+                if (socket != null && !socket.isClosed()) {\n+                    try {\n+                        out.writeUTF(Command.END);\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            });\n         });\n         setAuth(false);\n \n@@ -93,22 +112,44 @@ private void connect () {\n                             if (clientMessage.startsWith(Command.AUTH_OK)) {\n                                 nickname = clientMessage.split(\"\\\\s\")[1];\n                                 setAuth(true);\n+                                loadChatHistory();\n                                 break;\n                             }\n+                            if (clientMessage.equals(Command.REG_OK)) {\n+                                regController.resultOfTryToReg(true);\n+                            }\n+                            if (clientMessage.equals(Command.REG_FAIl)) {\n+                                regController.resultOfTryToReg(false);\n \n+                            }\n                         } else {\n                             textArea.appendText(clientMessage + \"\\n\");\n                         }\n                     }\n                     // общение\n                     while (true) {\n                         String clientMessage = in.readUTF();\n-                        if (clientMessage.equals(Command.END)) {\n-                            System.out.println(\"Disconnected\");\n-                            break;\n+                        if (clientMessage.startsWith(\"/\")) {\n+                            if (clientMessage.equals(Command.END)) {\n+                                System.out.println(\"Disconnected\");\n+                                break;\n+                            }\n+                            if (clientMessage.startsWith(Command.CLIENT_LIST)) {\n+                                String[] token = clientMessage.split(\"\\\\s\");\n+                                Platform.runLater(()-> {\n+                                    clientList.getItems().clear();\n+                                    for (int i = 1; i < token.length; i++) {\n+                                        clientList.getItems().add(token[i]);\n+                                    }\n+                                });\n+                            }\n+                        } else {\n+                            textArea.appendText(clientMessage + \"\\n\");\n+                            saveChatHistory(clientMessage);\n                         }\n-                        textArea.appendText(clientMessage + \"\\n\");\n                     }\n+                } catch (RuntimeException e) {\n+                    System.out.println(e.getMessage());\n                 } catch (IOException e) {\n                     e.printStackTrace();\n                 } finally {\n@@ -163,5 +204,80 @@ private void setTitle(String windowTitle) {\n         });\n     }\n \n+    @FXML\n+    public void clientListClick(MouseEvent mouseEvent) {\n+        System.out.println(clientList.getSelectionModel().getSelectedItem());\n+        String targetName = String.format(\"%s %s \", Command.WHISPER, clientList.getSelectionModel().getSelectedItem());\n+        textField.setText(targetName);\n+    }\n+\n+    @FXML\n+    public void tryToRegistration(ActionEvent actionEvent) {\n+        if (regStage == null) {\n+            createRegWindow();\n+        }\n+        regStage.show();\n+    }\n+\n+    private void createRegWindow() {\n+        try {\n+            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/reg.fxml\"));\n+            Parent root = fxmlLoader.load();\n+            regController = fxmlLoader.getController();\n+            regController.setController(this);\n+            regStage = new Stage();\n+            regStage.setTitle(\"ChatMe registration\");\n+            regStage.setScene(new Scene(root, 300, 400));\n+\n+            regStage.initModality(Modality.APPLICATION_MODAL);\n+            regStage.initStyle(StageStyle.UTILITY);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void tryToReg(String login, String password, String nickname) {\n+        String registrationData = String.format(\"%s %s %s %s\", Command.REGISTRATION, login, password, nickname);\n+        if (socket == null || socket.isClosed()) {\n+            connect();\n+        }\n+        try {\n+            out.writeUTF(registrationData);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private String makeHistoryFileName(String nickname) {\n+        File historyFile = new File(\"..\\\\\", nickname + \".txt\");\n+        if (!historyFile.exists()) {\n+            return nickname + \".txt\";\n+        }\n+        return null;\n+    }\n \n+    public void saveChatHistory(String message) throws IOException {\n+        PrintWriter outputStream = new PrintWriter(new FileWriter(makeHistoryFileName(nickname), true));\n+        outputStream.println(message);\n+    }\n+\n+    public void loadChatHistory() throws IOException {\n+        File historyFile = new File(\"..\\\\\", fileHistoryName);\n+        if (!historyFile.exists()) return;\n+        Scanner scanner = new Scanner(historyFile);\n+        int lines = 0;\n+        while (scanner.hasNextLine()) {\n+            lines++;\n+            scanner.nextLine();\n+        }\n+        scanner.close();\n+\n+        int start = lines - 100;\n+        if(start < 0) start = 0;\n+        BufferedReader reader = new BufferedReader(new FileReader(historyFile));\n+        for (int i = start; i >= 0; i--) {\n+            textArea.appendText(reader.readLine());\n+        }\n+        reader.close();\n+    }\n }"
  },
  {
    "sha": "ab600854bc3e0148854697ba6ee5cc7bd8b6d948",
    "filename": "client/src/main/java/client/RegController.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/java/client/RegController.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/java/client/RegController.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/client/src/main/java/client/RegController.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -0,0 +1,51 @@\n+package client;\n+\n+import javafx.event.ActionEvent;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.PasswordField;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+public class RegController {\n+    @FXML\n+    private TextField nicknameField;\n+    @FXML\n+    private PasswordField passwordField;\n+    @FXML\n+    private TextField loginField;\n+    @FXML\n+    private TextArea textArea;\n+    @FXML\n+    private Button registration;\n+\n+    private Controller controller;\n+\n+    public void setController(Controller controller) {\n+        this.controller = controller;\n+    }\n+\n+    @FXML\n+    public void tryToReg(ActionEvent actionEvent) {\n+        String login = loginField.getText().trim();\n+        String password = passwordField.getText().trim();\n+        String nickname = nicknameField.getText().trim();\n+        if(login.length()*password.length()*nickname.length() == 0) {\n+            textArea.appendText(\"Not enough data\");\n+            return;\n+        }\n+        if(login.contains(\" \") || password.contains(\" \") || nickname.contains(\" \")) {\n+            textArea.appendText(\"Only solid data allowed\");\n+            return;\n+        }\n+        controller.tryToReg(login, password, nickname);\n+    }\n+\n+    public void resultOfTryToReg(boolean success) {\n+        if (success) {\n+            textArea.appendText(\"Registration is successful.\\n\");\n+        } else {\n+            textArea.appendText(\"Registration is failed.\\n Login or nickname have been taken probably.\\n\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "aff599203e6c0cd13ffd01b5825f0d7c32f08cd7",
    "filename": "client/src/main/resources/CSS/style.css",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/resources/CSS/style.css",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/resources/CSS/style.css",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/client/src/main/resources/CSS/style.css?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -39,6 +39,13 @@\n     -fx-text-fill: white;\n }\n \n+#clientList {\n+    -fx-background-color: #17212B;\n+    -fx-font-size: 14;\n+    -fx-font-weight: normal;\n+    -fx-text-fill: white;\n+}\n+\n #textField {\n     -fx-background-color: #17212B;\n     -fx-control-inner-background: #17212B;"
  },
  {
    "sha": "5fcf1cc35b6dd6625b3f271c75a2653e7a29aab5",
    "filename": "client/src/main/resources/reg.fxml",
    "status": "added",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/resources/reg.fxml",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/resources/reg.fxml",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/client/src/main/resources/reg.fxml?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<?import javafx.scene.control.*?>\n+<?import javafx.scene.layout.*?>\n+\n+<?import java.net.URL?>\n+<VBox xmlns:fx=\"http://javafx.com/fxml\"\n+            fx:controller=\"client.RegController\">\n+    <stylesheets>\n+        <URL value=\"@/CSS/style.css\" />\n+    </stylesheets>\n+\n+    <TextField fx:id=\"loginField\" promptText=\"Your login\"/>\n+    <PasswordField fx:id=\"passwordField\" promptText=\"password\"/>\n+    <TextField fx:id=\"nicknameField\" promptText=\"Nickname\" onAction=\"#tryToReg\"/>\n+    <TextArea fx:id=\"textArea\" editable=\"false\" VBox.vgrow=\"ALWAYS\"/>\n+\n+    <Button fx:id=\"registration\" text=\"Reg\" minWidth=\"60\" onAction=\"#tryToReg\"/>\n+\n+</VBox>"
  },
  {
    "sha": "7f9d028ee7202fb4bde1646880eeadfc79bc4f88",
    "filename": "client/src/main/resources/sample.fxml",
    "status": "modified",
    "additions": 18,
    "deletions": 4,
    "changes": 22,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/resources/sample.fxml",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/client/src/main/resources/sample.fxml",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/client/src/main/resources/sample.fxml?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -47,17 +47,31 @@\n                 prefWidth=\"60\"\n                 prefHeight=\"40\"\n         minWidth=\"60\"/>\n+        <Button fx:id=\"reg\"\n+                text=\"Reg\"\n+                onAction=\"#tryToRegistration\"\n+                prefWidth=\"60\"\n+                prefHeight=\"40\"\n+                minWidth=\"60\"/>\n+    </HBox>\n+    <HBox VBox.vgrow=\"ALWAYS\">\n+        <TextArea fx:id=\"textArea\"\n+                  HBox.hgrow=\"ALWAYS\"\n+                  editable=\"false\"\n+                  wrapText=\"true\"/>\n+        <ListView fx:id=\"clientList\"\n+                  minWidth=\"120\"\n+                  visible=\"false\"\n+                  managed=\"false\"\n+                  onMouseReleased=\"#clientListClick\"/>\n     </HBox>\n-\n-    <TextArea fx:id=\"textArea\"\n-              VBox.vgrow=\"ALWAYS\"\n-              editable=\"false\"/>\n \n     <HBox fx:id=\"messagePanel\"\n             visible=\"false\"\n             managed=\"false\">\n         <TextField fx:id=\"textField\"\n                    onAction=\"#clickBtnSend\"\n+                   HBox.hgrow=\"ALWAYS\"\n                    promptText=\"Input your message\"/>\n \n         <Button fx:id=\"ButtonSend\""
  },
  {
    "sha": "27a5c2292dc4ae1d2741cf2d23679c216fad2a20",
    "filename": "commands/src/main/java/commands/Command.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/commands/src/main/java/commands/Command.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/commands/src/main/java/commands/Command.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/commands/src/main/java/commands/Command.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -5,4 +5,10 @@\n     public static final String AUTH = \"/auth\";\n     public static final String AUTH_OK = \"/authOk\";\n     public static final String WHISPER = \"/w\";\n+    public static final String CLIENT_LIST = \"/clientlist\";\n+    public static final String REGISTRATION = \"/reg\";\n+    public static final String REG_OK = \"/regOk\";\n+    public static final String REG_FAIl = \"/regFail\";\n+    public static final String NEW_NICK = \"/newname\";\n+\n }"
  },
  {
    "sha": "46383ac5c57f5b6bfb82b862c5baf27ecdee0771",
    "filename": "server/src/main/java/AuthService.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/AuthService.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/AuthService.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/server/src/main/java/AuthService.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -1,3 +1,5 @@\n public interface AuthService {\n     String GetNicknameByLogAndPass(String login, String password);\n+\n+    boolean registration(String login, String password, String nickname);\n }"
  },
  {
    "sha": "dbffa3079b52118c5b3cae286cb3b2ae08ccc8fb",
    "filename": "server/src/main/java/AuthServiceSQLite.java",
    "status": "added",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/AuthServiceSQLite.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/AuthServiceSQLite.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/server/src/main/java/AuthServiceSQLite.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -0,0 +1,10 @@\n+import java.sql.SQLException;\n+\n+public interface AuthServiceSQLite {\n+    void setConnection() throws ClassNotFoundException, SQLException;\n+    void createDb() throws SQLException;\n+    String GetNicknameByLogAndPass(String login, String password) throws SQLException, ClassNotFoundException;\n+    boolean registration(String login, String password, String nickname) throws SQLException, ClassNotFoundException;\n+    void closeDB() throws SQLException;\n+    boolean changeNickName(String login, String newNickname, String pass) throws SQLException;\n+}"
  },
  {
    "sha": "62740f9a7676808a424db2b95f40fe22e9a7d277",
    "filename": "server/src/main/java/ClientHandler.java",
    "status": "modified",
    "additions": 125,
    "deletions": 11,
    "changes": 136,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/ClientHandler.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/ClientHandler.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/server/src/main/java/ClientHandler.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -4,15 +4,27 @@\n import java.io.DataOutputStream;\n import java.io.IOException;\n import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.*;\n \n-public class ClientHandler {\n+public class ClientHandler implements Runnable {\n     private server server;\n     private Socket socket;\n \n     private DataInputStream in;\n     private DataOutputStream out;\n \n     private String nickname;\n+    private String login;\n+\n+    private final int TIME_OUT = 120000;\n+\n+    private final Logger logger = Logger.getLogger(server.class.getName());\n \n     public ClientHandler(server server, Socket socket) {\n         try {\n@@ -23,28 +35,56 @@ public ClientHandler(server server, Socket socket) {\n \n             new Thread(()-> {\n                 try {\n+                    socket.setSoTimeout(TIME_OUT);\n+                    server.getAuthService().setConnection();\n+                    Handler h = new FileHandler(\"Chat_log.log\");\n+                    h.setFormatter(new SimpleFormatter());\n+                    logger.addHandler(h);\n                     //логгирование\n                     while (true) {\n                         String tryToAuth = in.readUTF();\n                         if (tryToAuth.startsWith(\"/\")) {\n                             if (tryToAuth.equals(Command.END)) {\n-                                System.out.println(\"client was disconnected\");\n+                                logger.log(Level.FINE, login + \" disconnected\");\n+//                                System.out.println(\"client was disconnected\");\n                                 out.writeUTF(Command.END);\n                                 throw new RuntimeException(\"server disconnected us\");\n                             }\n                             if (tryToAuth.startsWith(Command.AUTH)) {\n                                 String[] token = tryToAuth.split(\"\\\\s\");\n                                 String newNick = server.getAuthService().GetNicknameByLogAndPass(token[1], token[2]);\n+                                login = token[1];\n                                 if (newNick != null) {\n-                                    nickname = newNick;\n-                                    sendMessage(Command.AUTH_OK + \" \" + nickname);\n-                                    server.subscribe(this);\n-                                    server.broadCastMessage(this, \" connected\");\n-                                    break;\n+                                    if (!server.isLoginAuthorized(login)) {\n+                                        nickname = newNick;\n+                                        sendMessage(Command.AUTH_OK + \" \" + nickname);\n+                                        server.subscribe(this);\n+                                        server.broadCastMessage(this, \" connected\");\n+                                        socket.setSoTimeout(0);\n+                                        logger.log(Level.FINE, login + \" Authorised\");\n+\n+                                        break;\n+                                    } else {\n+                                        sendMessage(\"The login has been authorized\");\n+                                    }\n                                 } else {\n                                     sendMessage(\"Wrong login / password\");\n                                 }\n                             }\n+                            if (tryToAuth.startsWith(Command.REGISTRATION)) {\n+                                String[] token = tryToAuth.split(\"\\\\s\");\n+                                if (token.length < 4) {\n+                                    continue;\n+                                }\n+                                boolean regSuccessful = server.getAuthService().registration(token[1], token[2], token[3]);\n+                                if (regSuccessful) {\n+                                    sendMessage(Command.REG_OK);\n+                                    logger.log(Level.FINE, login + \" have been registered successfully\");\n+\n+                                } else {\n+                                    sendMessage(Command.REG_FAIl);\n+                                }\n+                            }\n                         }\n                     }\n                     // общение\n@@ -55,24 +95,62 @@ public ClientHandler(server server, Socket socket) {\n                                 out.writeUTF(Command.END);\n                                 break;\n                             }\n+                            if (clientMessage.startsWith(Command.NEW_NICK)) {\n+                                String[] token = clientMessage.split(\"\\\\s\", 3);\n+                                if (token.length < 3) {\n+                                    sendMessage(\"Input the command like  \\\"/newNick yourNewNickname yourPassword\\\"\");\n+                                } else {\n+                                    boolean changeSuccessful = server.getAuthService().changeNickName(this.login, token[1], token[2]);\n+                                    if (changeSuccessful) {\n+                                        sendMessage(\"You've change your nickname from \" + this.nickname + \" to \" + token[1]);\n+                                        logger.log(Level.FINE, \"Client changed his nickname from \" + nickname + \" to \" + token[1]);\n+\n+                                    } else {\n+                                        sendMessage(\"Something went wrong\");\n+                                    }\n+                                }\n+                            }\n+                            if (clientMessage.startsWith(Command.WHISPER)) {\n+                                String[] token = clientMessage.split(\"\\\\s\", 3);\n+                                if (token.length < 3) {\n+                                    sendMessage(\"Input the command like  \\\"/w nickname p_message\\\"\");\n+                                } else {\n+                                    server.privateMessage(this, token[1], token[2]);\n+                                }\n+                            }\n                         } else {\n-                            server.broadCastMessage(this, clientMessage);\n+                            server.broadCastMessage(this, checkCensure(clientMessage));\n                         }\n                     }\n-                } catch (IOException e) {\n+                } catch (SocketTimeoutException e) {\n+                    logger.log(Level.WARNING, \"Client was disconnected by timeout \");\n+//                    System.out.println(\"Client was disconnected by timeout\");\n+                    try {\n+                        out.writeUTF(Command.END);\n+                    } catch (IOException ex) {\n+                        ex.printStackTrace();\n+                    }\n+                } catch (RuntimeException e) {\n+                    System.out.println(e.getMessage());\n+                } catch (IOException | SQLException | ClassNotFoundException e) {\n                     e.printStackTrace();\n                 } finally {\n-                    server.unsubscribe(this);\n                     server.broadCastMessage(this,\" disconnected\");\n+                    server.unsubscribe(this);\n                     try {\n+                        server.getAuthService().closeDB();\n                         socket.close();\n-                    } catch (IOException e) {\n+                    } catch (IOException | SQLException e) {\n                         e.printStackTrace();\n+                        logger.log(Level.SEVERE, \"hz\",e);\n+\n                     }\n                 }\n             }).start();\n         } catch (IOException e) {\n             e.printStackTrace();\n+            logger.log(Level.SEVERE, \"hz\", e);\n+\n         }\n \n     }\n@@ -89,4 +167,40 @@ public String getNickname() {\n         return nickname;\n     }\n \n+    public String getLogin() {\n+        return login;\n+    }\n+\n+    public String checkCensure(String message) {\n+        Map<String, String> censure = new HashMap<>();\n+        String finalString = \"\";\n+\n+        censure.put(\"спб\", \"СПб\");\n+        censure.put(\"москва\", \"Москва\");\n+        censure.put(\"урод\", \"редиска\");\n+\n+        String[] token = message.split(\"\\\\s\");\n+        Set entries = censure.entrySet();\n+        Iterator iterator = entries.iterator();\n+        while(iterator.hasNext()) {\n+            Map.Entry entry =(Map.Entry) iterator.next();\n+            Object key = entry.getKey();\n+            Object value = entry.getValue();\n+            for (String s : token) {\n+                if (s.equals(key)) {\n+                    s = (String) value;\n+                }\n+            }\n+        }\n+        for (String s : token) {\n+            finalString = finalString + \" \" + s;\n+        }\n+\n+        return finalString;\n+    }\n+\n+    @Override\n+    public void run() {\n+\n+    }\n }"
  },
  {
    "sha": "e305ddf7f194118b6e17a13de3694802d2617965",
    "filename": "server/src/main/java/SimpleAuthService.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/SimpleAuthService.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/SimpleAuthService.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/server/src/main/java/SimpleAuthService.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -39,4 +39,15 @@ public String GetNicknameByLogAndPass(String login, String password) {\n         }\n         return null;\n     }\n+\n+    @Override\n+    public boolean registration(String login, String password, String nickname) {\n+        for (UserData user : users) {\n+            if(user.login.equals(login) || user.nickName.equals(nickname)) {\n+                return false;\n+            }\n+        }\n+        users.add(new UserData(login, password, nickname));\n+        return true;\n+    }\n }"
  },
  {
    "sha": "0aa9b9f69df681fa905ebe3f758fd838afcac7c2",
    "filename": "server/src/main/java/SimpleAuthServiceSQLite.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/SimpleAuthServiceSQLite.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/SimpleAuthServiceSQLite.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/server/src/main/java/SimpleAuthServiceSQLite.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -0,0 +1,89 @@\n+import java.sql.*;\n+\n+public class SimpleAuthServiceSQLite implements AuthServiceSQLite {\n+    private Connection connection;\n+    private Statement statement;\n+    private ResultSet resultSet;\n+\n+    public SimpleAuthServiceSQLite() throws SQLException, ClassNotFoundException {\n+        setConnection();\n+        createDb();\n+        readDB();\n+    }\n+\n+    @Override\n+    public void setConnection() throws ClassNotFoundException, SQLException {\n+        Class.forName(\"org.sqlite.JDBC\");\n+        connection = DriverManager.getConnection(\"jdbc:sqlite:ChatDB.s2db\");\n+    }\n+\n+    @Override\n+    public void createDb() throws SQLException {\n+        statement = connection.createStatement();\n+        statement.execute(\n+                \"CREATE TABLE if not exists 'Users'\" +\n+                        \"('id' INTEGER PRIMARY KEY AUTOINCREMENT, 'login' text, 'pass' text, 'nickname' text);\");\n+    }\n+\n+    public void readDB() throws SQLException, ClassNotFoundException {\n+        resultSet = statement.executeQuery(\"SELECT * FROM users\");\n+        while (resultSet.next()) {\n+            int id = resultSet.getInt(\"id\");\n+            String login = resultSet.getString(\"login\");\n+            String pass = resultSet.getString(\"pass\");\n+            String nickname = resultSet.getString(\"nickname\");\n+            System.out.println(id + \" \" + login + \" \" + pass + \" \" + nickname);\n+        }\n+    }\n+\n+    @Override\n+    public String GetNicknameByLogAndPass(String login, String password) throws SQLException, ClassNotFoundException {\n+        resultSet = statement.executeQuery(\"SELECT * FROM users\");\n+        while (resultSet.next()) {\n+            int id = resultSet.getInt(\"id\");\n+            String loginDB = resultSet.getString(\"login\");\n+            String pass = resultSet.getString(\"pass\");\n+            String nickname = resultSet.getString(\"nickname\");\n+            if (login.equals(loginDB) && password.equals(pass)) {\n+                return nickname;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean registration (String login, String password, String nickname) throws SQLException, ClassNotFoundException {\n+        resultSet = statement.executeQuery(\"SELECT * FROM users\");\n+        while (resultSet.next()) {\n+            String loginDB = resultSet.getString(\"login\");\n+            String nicknameDB = resultSet.getString(\"nickname\");\n+            if (login.equals(loginDB) || nickname.equals(nicknameDB)) {\n+                return false;\n+            }\n+        }\n+        statement.execute(String.format(\"INSERT INTO 'Users' ('login', 'pass', 'nickname') VALUES ('%s', '%s', '%s')\", login, password, nickname));\n+        return true;\n+    }\n+\n+    @Override\n+    public void closeDB() throws SQLException {\n+        resultSet.close();\n+        statement.close();\n+        connection.close();\n+    }\n+\n+    @Override\n+    public boolean changeNickName(String login, String newNickname, String pass) throws SQLException {\n+        resultSet = statement.executeQuery(\"SELECT * FROM users\");\n+        while (resultSet.next()) {\n+            String loginDB = resultSet.getString(\"login\");\n+            String passwordDB = resultSet.getString(\"pass\");\n+            String nicknameDB = resultSet.getString(\"nickname\");\n+            if (login.equals(loginDB) && pass.equals(passwordDB) && !newNickname.equals(nicknameDB)) {\n+                statement.execute(String.format(\"UPDATE Users SET nickname =  '%s' WHERE login = '%s'\", newNickname, login));\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "3b4c0e199d1e212fc3fe16a878f097cde4daf530",
    "filename": "server/src/main/java/StartServer.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/StartServer.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/StartServer.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/server/src/main/java/StartServer.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -1,5 +1,7 @@\n+import java.sql.SQLException;\n+\n public class StartServer {\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws SQLException, ClassNotFoundException {\n         new server();\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "76ea0c4e64759892a249dfae69238042952fec31",
    "filename": "server/src/main/java/server.java",
    "status": "modified",
    "additions": 66,
    "deletions": 9,
    "changes": 75,
    "blob_url": "https://github.com/thesamebox/Lesson_7_8/blob/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/server.java",
    "raw_url": "https://github.com/thesamebox/Lesson_7_8/raw/369a682a10bbe2f581a8ce99008b36a642fe7f4d/server/src/main/java/server.java",
    "contents_url": "https://api.github.com/repos/thesamebox/Lesson_7_8/contents/server/src/main/java/server.java?ref=369a682a10bbe2f581a8ce99008b36a642fe7f4d",
    "patch": "@@ -1,54 +1,111 @@\n-import org.w3c.dom.ls.LSOutput;\n+import commands.Command;\n \n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n import java.io.IOException;\n import java.net.ServerSocket;\n import java.net.Socket;\n+import java.sql.SQLException;\n import java.util.List;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.logging.*;\n \n \n public class server {\n     private final int PORT = 8889;\n     private ServerSocket server;\n     private Socket socket;\n     private List<ClientHandler> clients;\n-    private AuthService authService;\n+    private AuthServiceSQLite authService;\n+    private ExecutorService executorService;\n+    private final int ThreadsPool = 50;\n \n+    private final Logger logger = Logger.getLogger(server.class.getName());\n \n-    public server() {\n+    public server() throws SQLException, ClassNotFoundException {\n         clients = new CopyOnWriteArrayList<>();\n-        authService = new SimpleAuthService();\n+        authService = new SimpleAuthServiceSQLite();\n         try {\n+            Handler h = new FileHandler(\"Chat.log\");\n+            h.setFormatter(new SimpleFormatter());\n+            logger.addHandler(h);\n+            executorService = Executors.newFixedThreadPool(ThreadsPool);\n             server = new ServerSocket(PORT);\n-            System.out.println(\"Server started.\");\n+            logger.log(Level.FINE, \"The server is started\");\n+//            System.out.println(\"Server started.\");\n             while (true) {\n                 socket = server.accept();\n+                logger.log(Level.INFO, \"Client connected\" + socket.getRemoteSocketAddress());\n                 System.out.println(\"Client connected\" + socket.getRemoteSocketAddress());\n-                new ClientHandler(this, socket);\n+                executorService.execute(new ClientHandler(this, socket));\n             }\n         } catch (IOException e) {\n             e.printStackTrace();\n+            logger.log(Level.SEVERE, \"Something went wrong\", e);\n+        } finally {\n+            logger.log(Level.OFF, \"The server is shut down\");\n+            executorService.shutdown();\n         }\n     }\n \n     public void broadCastMessage(ClientHandler sender, String message) {\n         String clientMessage = String.format(\"[ %s ] : %s\", sender.getNickname(), message);\n         for (ClientHandler client : clients) {\n             client.sendMessage(clientMessage);\n+            logger.log(Level.FINE, \"Client \" + sender + \" send a message\");\n         }\n     }\n \n+    public void privateMessage(ClientHandler senderNickname, String receiverNickname, String message) {\n+        String privateMessageFrom = String.format(\"Whisper from [ %s ] : %s\", senderNickname.getNickname(), message);\n+        String privateMessageTo = String.format(\"Whisper to [ %s ] : %s\", receiverNickname, message);\n+        for (ClientHandler client : clients) {\n+            if (client.getNickname().equals(receiverNickname)) {\n+                client.sendMessage(privateMessageFrom);\n+                if (!client.equals(senderNickname)) {\n+                    senderNickname.sendMessage(privateMessageTo);\n+                    logger.log(Level.FINE, \"Client \" + senderNickname + \" send a personal message to \" + receiverNickname);\n+                }\n+                return;\n+            }\n+        }\n+        senderNickname.sendMessage(\"User \\\"\" + receiverNickname + \"\\\" is not found\");\n+    }\n+\n     public void subscribe(ClientHandler clientHandler) {\n         clients.add(clientHandler);\n+        logger.log(Level.FINE, \"Client \" + clientHandler + \" joined to the chatroom\");\n+\n+        broadCastClientList();\n     }\n \n     public void unsubscribe(ClientHandler clientHandler) {\n         clients.remove(clientHandler);\n+        logger.log(Level.FINE, \"Client \" + clientHandler + \" joined to the chatroom\");\n+        broadCastClientList();\n     }\n \n-    public AuthService getAuthService() {\n+    public AuthServiceSQLite getAuthService() {\n         return authService;\n     }\n+\n+    public boolean isLoginAuthorized(String login) {\n+        for (ClientHandler client : clients) {\n+            if (client.getLogin().equals(login)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public void broadCastClientList() {\n+        StringBuilder nameLists = new StringBuilder(Command.CLIENT_LIST);\n+        for (ClientHandler client : clients) {\n+            nameLists.append(\" \").append(client.getNickname());\n+        }\n+        String list = nameLists.toString();\n+        for (ClientHandler client : clients) {\n+            client.sendMessage(list);\n+        }\n+    }\n }"
  }
]
