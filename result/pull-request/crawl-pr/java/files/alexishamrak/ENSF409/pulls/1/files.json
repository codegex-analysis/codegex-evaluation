[
  {
    "sha": "37b4a167557c18d6f05c0a5ea2e5b4238ab7cbb2",
    "filename": "Lesson19_IOStream/09_Internationalization/Translator.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/alexishamrak/ENSF409/blob/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson19_IOStream/09_Internationalization/Translator.java",
    "raw_url": "https://github.com/alexishamrak/ENSF409/raw/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson19_IOStream/09_Internationalization/Translator.java",
    "contents_url": "https://api.github.com/repos/alexishamrak/ENSF409/contents/Lesson19_IOStream/09_Internationalization/Translator.java?ref=6c0457794298effd9c8cee8644a26f2489a8372d",
    "patch": "@@ -1,7 +1,7 @@\n package edu.ucalgary.ensf409;\n \n   /* getTranslation()\n-   * getter method\n+   * getter method returning a stored TranslationText object.\n   */\n \n   /* translate()\n@@ -56,7 +56,7 @@\n   /* deserialize()\n    * Creates a TranslationText object from a .ser file. The files are named\n    * xx-YY.ser, where xx is the two-letter language code and YY is the two-\n-   * letter region code. es-bo.ser is an example. It can throw I/O exceptions.\n+   * letter region code. es-BO.ser is an example. It can throw I/O exceptions.\n    * No arguments. Returns void.\n   */\n "
  },
  {
    "sha": "d93a7a0bb107f75ea8b8e946ad10b32585172784",
    "filename": "Lesson20_Databases/01_DemoApplication/JDBCDemo.java",
    "status": "added",
    "additions": 110,
    "deletions": 0,
    "changes": 110,
    "blob_url": "https://github.com/alexishamrak/ENSF409/blob/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/01_DemoApplication/JDBCDemo.java",
    "raw_url": "https://github.com/alexishamrak/ENSF409/raw/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/01_DemoApplication/JDBCDemo.java",
    "contents_url": "https://api.github.com/repos/alexishamrak/ENSF409/contents/Lesson20_Databases/01_DemoApplication/JDBCDemo.java?ref=6c0457794298effd9c8cee8644a26f2489a8372d",
    "patch": "@@ -0,0 +1,110 @@\n+package edu.ucalgary.ensf409;\n+\n+import java.sql.*;\n+\n+public class JDBCDemo{\n+\n+    private Connection dbConnect;\n+    private ResultSet results;\n+            \n+    public JDBCDemo(){\n+    }\n+    \n+    public void createConnection(){\n+                \n+        try{\n+            dbConnect = DriverManager.getConnection(\"jdbc:mysql://localhost/pets\", \"Marasco\", \"ensf409\");\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    public String selectCats(){\n+\n+        StringBuffer catsAndOwners = new StringBuffer();\n+        \n+        try {                    \n+            Statement myStmt = dbConnect.createStatement();\n+            results = myStmt.executeQuery(\"SELECT * FROM cats\");\n+            \n+            while (results.next()){\n+                System.out.println(\"Print results: \" + results.getString(\"name\") + \", \" + results.getString(\"owner\"));\n+                \n+                catsAndOwners.append(results.getString(\"name\") + \", \" + results.getString(\"owner\"));\n+                catsAndOwners.append('\\n');\n+            }\n+            \n+            myStmt.close();\n+        } catch (SQLException ex) {\n+            ex.printStackTrace();\n+        }\n+        return catsAndOwners.toString();\n+    }    \n+    \n+    public void insertNewCat(String name, String owner, String birthdate){\n+\n+        try {\n+            \n+            String query = \"INSERT INTO cats (name, owner, birth) VALUES (?,?,?)\";\n+            PreparedStatement myStmt = dbConnect.prepareStatement(query);\n+            \n+            myStmt.setString(1, name);\n+            myStmt.setString(2, owner);\n+            myStmt.setString(3, birthdate);\n+            \n+            int rowCount = myStmt.executeUpdate();\n+            System.out.println(\"Rows affected: \" + rowCount);\n+            \n+            myStmt.close();\n+\n+        } catch (SQLException ex) {\n+            ex.printStackTrace();\n+        }\n+    }    \n+\n+    public void deleteCat(String name){\n+                    \n+        try {\n+            String query = \"DELETE FROM cats WHERE name = ?\";\n+            PreparedStatement myStmt = dbConnect.prepareStatement(query);\n+\n+            myStmt.setString(1, name);\n+                        \n+            int rowCount = myStmt.executeUpdate();\n+            System.out.println(\"Rows affected: \" + rowCount);\n+            \n+            myStmt.close();\n+\n+        } catch (SQLException ex) {\n+            ex.printStackTrace();\n+        }\n+\n+    }    \n+\n+    public void close() {\n+        try {\n+            results.close();\n+            dbConnect.close();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    public static void main(String[] args) {\n+\n+        JDBCDemo myJDBC = new JDBCDemo();\n+ \n+        myJDBC.createConnection();\n+        \n+        String allCats = myJDBC.selectCats();\n+        System.out.println(\"Here is a list of cats and owners: \");\n+        System.out.println(allCats);\n+        \n+        myJDBC.insertNewCat(\"Cookie\",\"Casey\",\"2013-11-13\");   \n+        myJDBC.selectCats();        \n+        myJDBC.deleteCat(\"Cookie\");\n+        myJDBC.selectCats();\n+        \n+        myJDBC.close();        \n+    }\n+}"
  },
  {
    "sha": "0d0747396e8832e250b843a6a0759f61eb6e6719",
    "filename": "Lesson20_Databases/02_ModifiedInsert/JDBCDemo.java",
    "status": "added",
    "additions": 114,
    "deletions": 0,
    "changes": 114,
    "blob_url": "https://github.com/alexishamrak/ENSF409/blob/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/02_ModifiedInsert/JDBCDemo.java",
    "raw_url": "https://github.com/alexishamrak/ENSF409/raw/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/02_ModifiedInsert/JDBCDemo.java",
    "contents_url": "https://api.github.com/repos/alexishamrak/ENSF409/contents/Lesson20_Databases/02_ModifiedInsert/JDBCDemo.java?ref=6c0457794298effd9c8cee8644a26f2489a8372d",
    "patch": "@@ -0,0 +1,114 @@\n+package edu.ucalgary.ensf409;\n+\n+import java.sql.*;\n+\n+public class JDBCDemo{\n+\n+    private Connection dbConnect;\n+    private ResultSet results;\n+            \n+    public JDBCDemo(){\n+    }\n+    \n+    public void createConnection(){\n+                \n+        try{\n+            dbConnect = DriverManager.getConnection(\"jdbc:mysql://localhost/pets\", \"Marasco\", \"ensf409\");\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    public String selectCats(){\n+\n+        StringBuffer catsAndOwners = new StringBuffer();\n+        \n+        try {                    \n+            Statement myStmt = dbConnect.createStatement();\n+            results = myStmt.executeQuery(\"SELECT * FROM cats\");\n+            \n+            while (results.next()){\n+                System.out.println(\"Print results: \" + results.getString(\"name\") + \", \" + results.getString(\"owner\"));\n+                \n+                catsAndOwners.append(results.getString(\"name\") + \", \" + results.getString(\"owner\"));\n+                catsAndOwners.append('\\n');\n+            }\n+            \n+            myStmt.close();\n+        } catch (SQLException ex) {\n+            ex.printStackTrace();\n+        }\n+        \n+        return catsAndOwners.toString();\n+\n+    }    \n+    \n+    public void insertNewCat(int id, String name, String owner, String birthdate){\n+\n+        try {\n+            \n+            String query = \"INSERT INTO cats (id, name, owner, birth) VALUES (?,?,?,?)\";\n+            PreparedStatement myStmt = dbConnect.prepareStatement(query);\n+            \n+            myStmt.setInt(1, id);\n+            myStmt.setString(2, name);\n+            myStmt.setString(3, owner);\n+            myStmt.setString(4, birthdate);\n+            \n+            int rowCount = myStmt.executeUpdate();\n+            System.out.println(\"Rows affected: \" + rowCount);\n+            \n+            myStmt.close();\n+\n+        } catch (SQLException ex) {\n+            ex.printStackTrace();\n+        }\n+    }    \n+\n+    public void deleteCat(String name){\n+                    \n+        try {\n+            String query = \"DELETE FROM cats WHERE name = ?\";\n+            PreparedStatement myStmt = dbConnect.prepareStatement(query);\n+\n+            myStmt.setString(1, name);\n+                        \n+            int rowCount = myStmt.executeUpdate();\n+            System.out.println(\"Rows affected: \" + rowCount);\n+            \n+            myStmt.close();\n+\n+        } catch (SQLException ex) {\n+            ex.printStackTrace();\n+        }\n+\n+    }    \n+\n+    public void close() {\n+        try {\n+            results.close();\n+            dbConnect.close();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    public static void main(String[] args) {\n+\n+        JDBCDemo myJDBC = new JDBCDemo();\n+ \n+        myJDBC.createConnection();\n+        \n+        String allCats = myJDBC.selectCats();\n+        System.out.println(\"Here is a list of cats and owners: \");\n+        System.out.println(allCats);\n+        \n+        myJDBC.insertNewCat(123,\"Cookie\",\"Casey\",\"2013-11-13\");   \n+        myJDBC.insertNewCat(10,\"Cookie\",\"Casey\",\"2013-11-13\");\n+        myJDBC.selectCats();        \n+        myJDBC.deleteCat(\"Cookie\");\n+        myJDBC.selectCats();\n+        \n+        myJDBC.close();        \n+    }\n+}"
  },
  {
    "sha": "48ee9cefe59420fa7865b020e1a505a45e2226d4",
    "filename": "Lesson20_Databases/03_Registration/Registration.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/alexishamrak/ENSF409/blob/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/03_Registration/Registration.java",
    "raw_url": "https://github.com/alexishamrak/ENSF409/raw/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/03_Registration/Registration.java",
    "contents_url": "https://api.github.com/repos/alexishamrak/ENSF409/contents/Lesson20_Databases/03_Registration/Registration.java?ref=6c0457794298effd9c8cee8644a26f2489a8372d",
    "patch": "@@ -0,0 +1,50 @@\n+package edu.ucalgary.ensf409;\n+\n+import java.sql.*;\n+\n+public class Registration{\n+\n+    public final String DBURL; //store the database url information\n+    public final String USERNAME; //store the user's account username\n+    public final String PASSWORD; //store the user's account password\n+    \n+    \n+\t// Some example test data is shown here.  This is not a full list of all possible tests (i.e. competitors under the age of 5, over 18, etc.)\n+\t// Tests will be done on a database with the same table names/attributes, but different data records.\n+\t\n+    public static void main(String[] args) {\n+\n+        Registration myJDBC = new Registration(\"jdbc:mysql://localhost/competition\",\"Marasco\",\"ensf409\");\n+        myJDBC.initializeConnection();\n+        \n+        System.out.println(myJDBC.selectAllNames(\"competitor\"));\n+        /*\n+        Example:\n+        Williams, Sophie\n+        Warren, Harper\n+        */\n+                \n+        System.out.println(myJDBC.selectAllNames(\"teacher\"));\n+        /*\n+        Example:\n+        Estrada, Ethan\n+        Lee, Jasmine\n+        */\n+\n+        System.out.println(myJDBC.showStudios());\n+        /*\n+        Example:\n+        Harmony Inc.\n+        Melody Time\n+        Music Mastery\n+        */\n+        \n+        myJDBC.insertNewCompetitor(\"123\", \"Smyth\", \"Ali\", 15, \"Oboe\", \"0023\");\n+        myJDBC.registerNewTeacher(\"0987\", \"Marasco\", \"Emily\", \"403-222-5656\", \"Marasco Music\", \"587-222-5656\", \"123 Main Street NW\");        \n+\n+        myJDBC.deleteCompetitor(\"123\");\n+        myJDBC.deleteTeacher(\"0987\");\n+        \n+    }\n+}\n+"
  },
  {
    "sha": "d06cba3cb365858625a41a3104547ced9eb72461",
    "filename": "Lesson20_Databases/03_Registration/competition.sql",
    "status": "added",
    "additions": 136,
    "deletions": 0,
    "changes": 136,
    "blob_url": "https://github.com/alexishamrak/ENSF409/blob/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/03_Registration/competition.sql",
    "raw_url": "https://github.com/alexishamrak/ENSF409/raw/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/03_Registration/competition.sql",
    "contents_url": "https://api.github.com/repos/alexishamrak/ENSF409/contents/Lesson20_Databases/03_Registration/competition.sql?ref=6c0457794298effd9c8cee8644a26f2489a8372d",
    "patch": "@@ -0,0 +1,136 @@\n+DROP DATABASE IF EXISTS COMPETITION;\n+CREATE DATABASE COMPETITION; \n+USE COMPETITION;\n+\n+\n+DROP TABLE IF EXISTS STUDIO;\n+CREATE TABLE STUDIO (\n+\tName\t\t\tvarchar(25) not null,\n+\tPhone\t\t\tchar(12),\n+\tAddress\t\t\tvarchar(25),\n+\tprimary key (Name)\n+);\n+\n+INSERT INTO STUDIO (Name, Phone, Address)\n+VALUES\n+('Music Mastery',\t'403-357-4457',\t'25 Heron Way NW'),\n+('Melody Time',\t'587-594-7593',\t'124 Watford Rise SE'),\n+('Harmony Inc.',\t'403-954-5232',\t'68 Cedar Drive NE');\n+\n+\n+DROP TABLE IF EXISTS TEACHER;\n+CREATE TABLE TEACHER (\n+\tTeacherID\t\tchar(4)\tnot null,\n+\tLName\t\t\tvarchar(25),\n+\tFName\t\t\tvarchar(25),\n+\tPhone\t\t\tchar(12),\n+\tStudioName\t\tvarchar(15),\n+\tprimary key (TeacherID),\n+\tforeign key (StudioName) references STUDIO(Name) ON UPDATE CASCADE\n+);\n+\n+INSERT INTO TEACHER (TeacherID, LName, FName, Phone, StudioName)\n+VALUES\n+('9202',\t'Jamison',\t'Colin',\t'403-345-9879',\t'Music Mastery'),\n+('7834',\t'Singh',\t'Ivan',\t'587-111-2345',\t'Melody Time'),\n+('1274',\t'Lee',\t'Jasmine',\t'403-998-4312',\t'Harmony Inc.'),\n+('6598',\t'Steele',\t'Amy',\t'587-434-1978',\t'Music Mastery'),\n+('0023',\t'Estrada',\t'Ethan',\t'587-744-3485',\t'Music Mastery'),\n+('3405',\t'Moore',\t'Ravi',\t'403-448-2238',\t'Harmony Inc.');\n+\n+\n+DROP TABLE IF EXISTS COMPETITOR;\n+CREATE TABLE COMPETITOR (\n+\tCompetitorID\tchar(3)\tnot null,\n+\tLName\t\t\tvarchar(25),\n+\tFName\t\t\tvarchar(25),\n+\tAge\t\t\t\tinteger not null,\n+\tInstrument\t\tvarchar(15),\n+\tTeacherID\t\tchar(4),\n+\tprimary key (CompetitorID),\n+\tforeign key (TeacherID) references TEACHER(TeacherID)\n+);\n+\n+INSERT INTO COMPETITOR (CompetitorID, LName, FName, Age, Instrument, TeacherID)\n+VALUES\n+('001',\t'Williams',\t'Sophie',\t7,\t'Flute',\t'7834'),\n+('157',\t'Bell',\t'Jalal',\t14,\t'Trombone',\t'1274'),\n+('052',\t'Turner',\t'Penny',\t10,\t'Piano',\t'7834'),\n+('188',\t'Wong',\t'Roy',\t11,\t'Flute',\t'9202'),\n+('133',\t'Sherman',\t'Noel',\t8,\t'Oboe',\t'6598'),\n+('110',\t'Torres',\t'Parker',\t13,\t'Piano',\t'0023'),\n+('045',\t'Warren',\t'Harper',\t12,\t'Trombone',\t'3405'),\n+('096',\t'Madani',\t'Amira',\t15,\t'Oboe',\t'1274');\n+\n+\n+DROP TABLE IF EXISTS COMPOSITION;\n+CREATE TABLE COMPOSITION (\n+\tMusicID\t\t\tchar(2) not null,\n+\tTitle\t\t\tvarchar(50),\n+\tComposer\t\tvarchar(25),\n+\tGenre\t\t\tvarchar(15),\n+\tprimary key (MusicID)\n+);\n+\n+INSERT INTO COMPOSITION(MusicID, Title, Composer, Genre)\n+VALUES\n+('C1',\t'Symphony No. 5 in C minor',\t'Beethoven',\t'Classical'),\n+('C2',\t'Concerto for Oboe and Strings',\t'Cimarosa',\t'Classical'),\n+('C3',\t'Symphony No. 40 in G minor',\t'Mozart',\t'Classical'),\n+('B1',\t'Suite No. 1 in G major',\t'Bach',\t'Baroque'),\n+('B2',\t'Canon in D major',\t'Pachelbel',\t'Baroque'),\n+('B3',\t'Concerto in G major',\t'Telemann',\t'Baroque'),\n+('R1',\t'Prelude, Op. 28, No. 4',\t'Chopin',\t'Romantic'),\n+('R2',\t'The Sleeping Beauty, Overture',\t'Tchaikovsky',\t'Romantic'),\n+('R3',\t'Carmen, Overture',\t'Bizet',\t'Romantic'),\n+('M1',\t'Childrens March',\t'Grainger',\t'Modern'),\n+('M2',\t'Jazz Suite No. 2 Waltz',\t'de Meij',\t'Modern'),\n+('M3',\t'English Folk Songs',\t'Vaughan Williams',\t'Modern');\n+\n+\n+DROP TABLE IF EXISTS CATEGORY;\n+CREATE TABLE CATEGORY (\n+\tCategoryID\t\tchar(3)\tnot null,\n+\tGenre\t\t\tvarchar(15),\n+\tAgeMin\t\t\tinteger,\n+\tAgeMax\t\t\tinteger,\n+\tCompDate\t\tdate,\n+\tCompTime\t\ttime,\n+\tprimary key (CategoryID)\n+);\n+\n+INSERT INTO CATEGORY(CategoryID, Genre, AgeMin, AgeMax, CompDate, CompTime)\n+VALUES\n+('001',\t'Classical',\t'5',\t'11',\t'2020-12-01',\t'10:00'),\n+('002',\t'Classical',\t'12',\t'18',\t'2020-12-01',\t'13:00'),\n+('003',\t'Romantic',\t'5',\t'11',\t'2020-12-02',\t'10:00'),\n+('004',\t'Romantic',\t'12',\t'18',\t'2020-12-02',\t'13:00'),\n+('005',\t'Baroque',\t'5',\t'11',\t'2020-12-03',\t'10:00'),\n+('006',\t'Baroque',\t'12',\t'18',\t'2020-12-03',\t'13:00'),\n+('007',\t'Modern',\t'5',\t'11',\t'2020-12-04',\t'10:00'),\n+('008',\t'Modern',\t'12',\t'18',\t'2020-12-04',\t'13:00');\n+\n+\n+DROP TABLE IF EXISTS PERFORMANCE;\n+CREATE TABLE PERFORMANCE (\n+\tCompetitorID\tchar(3)\tnot null,\n+\tCategoryID\t\tchar(3) not null,\n+\tMusicID\t\t\tchar(2) not null,\n+\tScore\t\t\tinteger,\n+\tprimary key (CompetitorID, CategoryID, MusicID),\n+\tforeign key (CompetitorID) references COMPETITOR(CompetitorID),\n+\tforeign key (CategoryID) references CATEGORY(CategoryID),\n+\tforeign key (MusicID) references COMPOSITION(MusicID)\n+);\n+\n+INSERT INTO PERFORMANCE(CompetitorID, CategoryID, MusicID, Score)\n+VALUES\n+('001',\t'003',\t'R1',\t'82'),\n+('157',\t'008',\t'M3',\t'69'),\n+('052',\t'003',\t'R1',\t'95'),\n+('188',\t'001',\t'C1',\t'75'),\n+('133',\t'005',\t'B2',\t'88'),\n+('110',\t'008',\t'M2',\t'65'),\n+('045',\t'004',\t'R2',\t'93'),\n+('096',\t'004',\t'R2',\t'90');\n+"
  },
  {
    "sha": "57ea4f98ba1713549916e7cb5e69662c1210893b",
    "filename": "Lesson20_Databases/mysql-connector-java-8.0.23.zip",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/alexishamrak/ENSF409/blob/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/mysql-connector-java-8.0.23.zip",
    "raw_url": "https://github.com/alexishamrak/ENSF409/raw/6c0457794298effd9c8cee8644a26f2489a8372d/Lesson20_Databases/mysql-connector-java-8.0.23.zip",
    "contents_url": "https://api.github.com/repos/alexishamrak/ENSF409/contents/Lesson20_Databases/mysql-connector-java-8.0.23.zip?ref=6c0457794298effd9c8cee8644a26f2489a8372d"
  }
]
