[
  {
    "sha": "806d0248e238de111f415df72c6acac384ce5e43",
    "filename": "TerminalChat/ChatClient/ChatClient.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/IlyaKIA/GeekRep/blob/f02c4275ee52db54f8f7828d381b7f35b092893a/TerminalChat/ChatClient/ChatClient.java",
    "raw_url": "https://github.com/IlyaKIA/GeekRep/raw/f02c4275ee52db54f8f7828d381b7f35b092893a/TerminalChat/ChatClient/ChatClient.java",
    "contents_url": "https://api.github.com/repos/IlyaKIA/GeekRep/contents/TerminalChat/ChatClient/ChatClient.java?ref=f02c4275ee52db54f8f7828d381b7f35b092893a",
    "patch": "@@ -0,0 +1,78 @@\n+package ChatClient;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.util.Scanner;\n+\n+public class ChatClient {\n+    private static final int PORT = 8085;\n+    private static final String ADDRESS = \"localhost\";\n+    private static Socket socket;\n+    private static DataInputStream input;\n+    private static DataOutputStream output;\n+    private static boolean isEnd;\n+    private static String inMsg;\n+    private static String msg;\n+    private static Scanner scanner;\n+\n+    public static void main(String[] args) throws IOException {\n+        scanner = new Scanner(System.in);\n+        socket = new Socket(ADDRESS, PORT);\n+        System.out.println(\"Client connected.\");\n+        input = new DataInputStream(socket.getInputStream());\n+        output = new DataOutputStream(socket.getOutputStream());\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    while (!isEnd){\n+                        inMsg = input.readUTF();\n+                        if (inMsg.toLowerCase().equals(\"/end\")){\n+                            isEnd = true;\n+                            closeConnection();\n+                            break;\n+                        }\n+                        System.out.println(\"Server: \" + inMsg);\n+                    }\n+                }catch (IOException e){\n+                    if (!isEnd) System.out.println(\"Error. Connection is failed.\");\n+                }\n+            }\n+        }).start();\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    while (!isEnd) {\n+                        msg = scanner.nextLine();\n+                        if (!msg.trim().isEmpty()) {\n+                            output.writeUTF(msg);\n+                            if (msg.toLowerCase().equals(\"/end\")) {\n+                                isEnd = true;\n+                                closeConnection();\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }catch (Exception e){\n+                    if (!isEnd) System.out.println(\"Error. Massage sending.\");\n+                }\n+            }\n+        }).start();\n+\n+    }\n+\n+    private static void closeConnection() {\n+        try {\n+            input.close();\n+            output.close();\n+            socket.close();\n+            System.out.println(\"Connection is closed.\");\n+            scanner.close();\n+        } catch (IOException e) {\n+            System.out.println(\"Error of connection ending.\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "51f745a99ffe77c12e422ca34a443cd4d0a24a72",
    "filename": "TerminalChat/ChatServer/ChatServer.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/IlyaKIA/GeekRep/blob/f02c4275ee52db54f8f7828d381b7f35b092893a/TerminalChat/ChatServer/ChatServer.java",
    "raw_url": "https://github.com/IlyaKIA/GeekRep/raw/f02c4275ee52db54f8f7828d381b7f35b092893a/TerminalChat/ChatServer/ChatServer.java",
    "contents_url": "https://api.github.com/repos/IlyaKIA/GeekRep/contents/TerminalChat/ChatServer/ChatServer.java?ref=f02c4275ee52db54f8f7828d381b7f35b092893a",
    "patch": "@@ -0,0 +1,92 @@\n+package ChatServer;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.Scanner;\n+\n+public class ChatServer {\n+    private static final int PORT = 8085;\n+    private static boolean isEnd;\n+    private static DataInputStream input;\n+    private static DataOutputStream output;\n+    private static Socket socket;\n+    private static Scanner scanner;\n+\n+    public static void main(String[] args) throws IOException {\n+        scanner = new Scanner(System.in);\n+\n+        try {\n+            ServerSocket serv = new ServerSocket(PORT);\n+            System.out.println(\"Server started.\");\n+            socket = serv.accept();\n+            System.out.println(\"Client connected.\");\n+            input = new DataInputStream(socket.getInputStream());\n+            output = new DataOutputStream(socket.getOutputStream());\n+        } catch (IOException e) {\n+            System.out.println(\"Error. Port is closed.\");\n+        }\n+\n+        //Read massage from net\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    while (!isEnd){\n+                        String msg = input.readUTF();\n+                        if (msg.toLowerCase().equals(\"/end\")){\n+                            isEnd = true;\n+                            //scanner.close();\n+                            closeConnection();\n+                            break;\n+                        }\n+                        System.out.println(\"User: \" + msg);\n+                    }\n+                } catch (IOException e) {\n+                    if (!isEnd) {\n+                        System.out.println(\"Error. Server stopped.\");\n+                    } else {\n+                        System.out.println(\"Client is disconnected.\");\n+                    }\n+                }\n+\n+            }\n+        }).start();\n+\n+        //Sending massage\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    while (!isEnd) {\n+                        String msg = scanner.nextLine();\n+                        output.writeUTF(msg);\n+                        if (!msg.trim().isEmpty()) {\n+                            if (msg.toLowerCase().equals(\"/end\")){\n+                                isEnd = true;\n+                                closeConnection();\n+                                break;\n+                            }\n+                        }\n+                    }\n+                }catch (Exception e){\n+                    if (!isEnd) System.out.println(\"Error. Massage sending.\");\n+                }\n+            }\n+        }).start();\n+    }\n+\n+    private static void closeConnection() {\n+        try {\n+            input.close();\n+            output.close();\n+            socket.close();\n+            System.out.println(\"Connection is closed.\");\n+            scanner.close();\n+        } catch (IOException e) {\n+            System.out.println(\"Error of connection ending.\");\n+        }\n+    }\n+}"
  }
]
