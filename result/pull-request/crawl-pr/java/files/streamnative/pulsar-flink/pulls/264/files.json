[
  {
    "sha": "bacb753c62e61eb6ff5bdcf00ee4dfd081cf0621",
    "filename": ".github/workflows/pr.yaml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/.github/workflows/pr.yaml",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/.github/workflows/pr.yaml",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/.github/workflows/pr.yaml?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -68,9 +68,9 @@ jobs:\n         run: |\n           apt update && apt install -y wget\n           cd /tmp\n-          wget -O 'apache-pulsar-2.6.1-bin.tar.gz' 'https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=pulsar/pulsar-2.6.1/apache-pulsar-2.6.1-bin.tar.gz'\n-          tar -xvzf apache-pulsar-2.6.1-bin.tar.gz\n-          cd apache-pulsar-2.6.1\n+          wget -O 'apache-pulsar-2.7.0-bin.tar.gz' 'https://archive.apache.org/dist/pulsar/pulsar-2.7.0/apache-pulsar-2.7.0-bin.tar.gz'\n+          tar -xvzf apache-pulsar-2.7.0-bin.tar.gz\n+          cd apache-pulsar-2.7.0\n           chmod +x ./bin/*\n           nohup ./bin/pulsar standalone --no-stream-storage -nfw &\n       - name: run batch test"
  },
  {
    "sha": "384845a98f0a3e1f12d3ee96cdf0e65f52e48a02",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 22,
    "deletions": 46,
    "changes": 68,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pom.xml",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pom.xml",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pom.xml?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -72,8 +72,9 @@\n \n     <!-- use Pulsar stable version -->\n     <pulsar.version>2.7.0</pulsar.version>\n-    <streamnative-tests.version>2.5.1</streamnative-tests.version>\n-    <testcontainers.version>1.14.3</testcontainers.version>\n+    <testcontainers.version>1.15.2</testcontainers.version>\n+    <powermock.version>2.0.2</powermock.version>\n+    <mockito.version>3.7.7</mockito.version>\n     <hamcrest.version>1.3</hamcrest.version>\n     <jackson.version>2.10.1</jackson.version>\n     <!-- plugin dependencies -->\n@@ -128,61 +129,36 @@\n       <type>jar</type>\n       <scope>test</scope>\n     </dependency>\n-\n     <dependency>\n-      <groupId>io.streamnative.tests</groupId>\n-      <artifactId>framework-common</artifactId>\n-      <version>${streamnative-tests.version}</version>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>testcontainers</artifactId>\n+      <version>${testcontainers.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>pulsar</artifactId>\n+      <version>${testcontainers.version}</version>\n       <scope>test</scope>\n-      <exclusions>\n-        <exclusion>\n-          <groupId>io.netty</groupId>\n-          <artifactId>netty-common</artifactId>\n-        </exclusion>\n-        <!-- exclusion log4j2-->\n-        <exclusion>\n-          <groupId>org.apache.logging.log4j</groupId>\n-          <artifactId>log4j-slf4j-impl</artifactId>\n-        </exclusion>\n-        <exclusion>\n-          <groupId>org.apache.logging.log4j</groupId>\n-          <artifactId>log4j-api</artifactId>\n-        </exclusion>\n-        <exclusion>\n-          <groupId>org.apache.logging.log4j</groupId>\n-          <artifactId>log4j-core</artifactId>\n-        </exclusion>\n-      </exclusions>\n     </dependency>\n     <dependency>\n-      <groupId>io.streamnative.tests</groupId>\n-      <artifactId>framework-pulsar</artifactId>\n-      <version>${streamnative-tests.version}</version>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <version>${mockito.version}</version>\n       <scope>test</scope>\n-      <exclusions>\n-        <exclusion>\n-          <groupId>org.apache.pulsar</groupId>\n-          <artifactId>*</artifactId>\n-        </exclusion>\n-        <exclusion>\n-          <groupId>org.apache.pulsar</groupId>\n-          <artifactId>pulsar-client-admin</artifactId>\n-        </exclusion>\n-      </exclusions>\n     </dependency>\n     <dependency>\n-      <groupId>commons-lang</groupId>\n-      <artifactId>commons-lang</artifactId>\n-      <version>2.6</version>\n-      <scope>compile</scope>\n+      <groupId>org.powermock</groupId>\n+      <artifactId>powermock-module-junit4</artifactId>\n+      <version>${powermock.version}</version>\n+      <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.testcontainers</groupId>\n-      <artifactId>testcontainers</artifactId>\n-      <version>${testcontainers.version}</version>\n+      <groupId>org.powermock</groupId>\n+      <artifactId>powermock-api-mockito2</artifactId>\n+      <version>${powermock.version}</version>\n       <scope>test</scope>\n     </dependency>\n-\n   </dependencies>\n \n   <build>"
  },
  {
    "sha": "03afc2ec4797ee55be3b28f24332216d547e5c0a",
    "filename": "pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/FlinkPulsarSource.java",
    "status": "modified",
    "additions": 121,
    "deletions": 24,
    "changes": 145,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/FlinkPulsarSource.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/FlinkPulsarSource.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/FlinkPulsarSource.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -14,15 +14,18 @@\n \n package org.apache.flink.streaming.connectors.pulsar;\n \n+import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.api.common.ExecutionConfig;\n import org.apache.flink.api.common.state.ListState;\n import org.apache.flink.api.common.state.ListStateDescriptor;\n import org.apache.flink.api.common.state.OperatorStateStore;\n import org.apache.flink.api.common.typeinfo.TypeHint;\n import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n import org.apache.flink.api.java.ClosureCleaner;\n-import org.apache.flink.api.java.tuple.Tuple3;\n+import org.apache.flink.api.java.tuple.Tuple2;\n import org.apache.flink.api.java.typeutils.ResultTypeQueryable;\n+import org.apache.flink.api.java.typeutils.runtime.TupleSerializer;\n import org.apache.flink.configuration.Configuration;\n import org.apache.flink.metrics.Counter;\n import org.apache.flink.runtime.state.CheckpointListener;\n@@ -35,14 +38,18 @@\n import org.apache.flink.streaming.api.operators.StreamingRuntimeContext;\n import org.apache.flink.streaming.connectors.pulsar.config.StartupMode;\n import org.apache.flink.streaming.connectors.pulsar.internal.CachedPulsarClient;\n+import org.apache.flink.streaming.connectors.pulsar.internal.MessageIdSerializer;\n import org.apache.flink.streaming.connectors.pulsar.internal.PulsarClientUtils;\n import org.apache.flink.streaming.connectors.pulsar.internal.PulsarCommitCallback;\n import org.apache.flink.streaming.connectors.pulsar.internal.PulsarDeserializationSchema;\n import org.apache.flink.streaming.connectors.pulsar.internal.PulsarFetcher;\n import org.apache.flink.streaming.connectors.pulsar.internal.PulsarMetadataReader;\n import org.apache.flink.streaming.connectors.pulsar.internal.PulsarOptions;\n+import org.apache.flink.streaming.connectors.pulsar.internal.PulsarSourceStateSerializer;\n import org.apache.flink.streaming.connectors.pulsar.internal.SourceSinkUtils;\n import org.apache.flink.streaming.connectors.pulsar.internal.TopicRange;\n+import org.apache.flink.streaming.connectors.pulsar.internal.TopicSubscription;\n+import org.apache.flink.streaming.connectors.pulsar.internal.TopicSubscriptionSerializer;\n import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n import org.apache.flink.util.ExceptionUtils;\n import org.apache.flink.util.SerializedValue;\n@@ -57,7 +64,10 @@\n import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n import org.apache.pulsar.shade.com.google.common.collect.Maps;\n \n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n@@ -89,6 +99,8 @@\n     /** State name of the consumer's partition offset states. */\n     private static final String OFFSETS_STATE_NAME = \"topic-partition-offset-states\";\n \n+    private static final String NEW_OFFSETS_STATE_NAME = \"new-topic-partition-offset-states\";\n+\n     // ------------------------------------------------------------------------\n     //  configuration state, set on the client relevant for all subtasks\n     // ------------------------------------------------------------------------\n@@ -105,14 +117,18 @@\n \n     private Map<TopicRange, MessageId> ownedTopicStarts;\n \n-    /** Optional timestamp extractor / watermark generator that will be run per pulsar partition,\n+    /**\n+     * Optional timestamp extractor / watermark generator that will be run per pulsar partition,\n      * to exploit per-partition timestamp characteristics.\n-     * The assigner is kept in serialized form, to deserialize it into multiple copies. */\n+     * The assigner is kept in serialized form, to deserialize it into multiple copies.\n+     */\n     private SerializedValue<AssignerWithPeriodicWatermarks<T>> periodicWatermarkAssigner;\n \n-    /** Optional timestamp extractor / watermark generator that will be run per pulsar partition,\n+    /**\n+     * Optional timestamp extractor / watermark generator that will be run per pulsar partition,\n      * to exploit per-partition timestamp characteristics.\n-     * The assigner is kept in serialized form, to deserialize it into multiple copies. */\n+     * The assigner is kept in serialized form, to deserialize it into multiple copies.\n+     */\n     private SerializedValue<AssignerWithPunctuatedWatermarks<T>> punctuatedWatermarkAssigner;\n \n     /** User configured value for discovery interval, in milliseconds. */\n@@ -128,14 +144,17 @@\n     /** Specific startup offsets; only relevant when startup mode is {@link StartupMode#SPECIFIC_OFFSETS}. */\n     private transient Map<TopicRange, MessageId> specificStartupOffsets;\n \n-    /** The subscription name to be used; only relevant when startup mode is {@link StartupMode#EXTERNAL_SUBSCRIPTION}\n+    /**\n+     * The subscription name to be used; only relevant when startup mode is {@link StartupMode#EXTERNAL_SUBSCRIPTION}\n      * If the subscription exists for a partition, we would start reading this partition from the subscription cursor.\n      * At the same time, checkpoint for the job would made progress on the subscription.\n      */\n     private String externalSubscriptionName;\n \n-    /** The subscription position to use when subscription does not exist (default is {@link MessageId#latest});\n-     * Only relevant when startup mode is {@link StartupMode#EXTERNAL_SUBSCRIPTION}. */\n+    /**\n+     * The subscription position to use when subscription does not exist (default is {@link MessageId#latest});\n+     * Only relevant when startup mode is {@link StartupMode#EXTERNAL_SUBSCRIPTION}.\n+     */\n     private MessageId subscriptionPosition = MessageId.latest;\n \n     // TODO: remove this when MessageId is serializable itself.\n@@ -169,9 +188,12 @@\n      */\n     private transient volatile TreeMap<TopicRange, MessageId> restoredState;\n \n-    /** Accessor for state in the operator state backend. */\n+    /**\n+     * Accessor for state in the operator state backend.\n+     */\n+    private transient ListState<Tuple2<TopicSubscription, MessageId>> unionOffsetStates;\n \n-    private transient ListState<Tuple3<TopicRange, MessageId, String>> unionOffsetStates;\n+    private int oldStateVersion = 0;\n \n     private volatile boolean stateSubEqualexternalSub = false;\n \n@@ -216,6 +238,7 @@ public FlinkPulsarSource(\n \n         CachedPulsarClient.setCacheSize(SourceSinkUtils.getClientCacheSize(caseInsensitiveParams));\n \n+        this.oldStateVersion = SourceSinkUtils.getOldStateVersion(caseInsensitiveParams);\n         if (this.clientConfigurationData.getServiceUrl() == null) {\n             throw new IllegalArgumentException(\"ServiceUrl must be supplied in the client configuration\");\n         }\n@@ -338,7 +361,8 @@ public FlinkPulsarSource(\n         return this;\n     }\n \n-    public FlinkPulsarSource<T> setStartFromSubscription(String externalSubscriptionName, MessageId subscriptionPosition) {\n+    public FlinkPulsarSource<T> setStartFromSubscription(String externalSubscriptionName,\n+                                                         MessageId subscriptionPosition) {\n         this.startupMode = StartupMode.EXTERNAL_SUBSCRIPTION;\n         this.externalSubscriptionName = checkNotNull(externalSubscriptionName);\n         this.subscriptionPosition = checkNotNull(subscriptionPosition);\n@@ -615,7 +639,6 @@ public void cancel() {\n         }\n     }\n \n-\n     // ------------------------------------------------------------------------\n     //  ResultTypeQueryable methods\n     // ------------------------------------------------------------------------\n@@ -625,7 +648,6 @@ public void cancel() {\n         return deserializer.getProducedType();\n     }\n \n-\n     // ------------------------------------------------------------------------\n     //  Checkpoint and restore\n     // ------------------------------------------------------------------------\n@@ -636,21 +658,28 @@ public void initializeState(FunctionInitializationContext context) throws Except\n \n         unionOffsetStates = stateStore.getUnionListState(\n                 new ListStateDescriptor<>(\n-                        OFFSETS_STATE_NAME,\n-                        TypeInformation.of(new TypeHint<Tuple3<TopicRange, MessageId, String>>() {\n-                        })));\n+                        NEW_OFFSETS_STATE_NAME,\n+                        createStateSerializer()\n+                ));\n \n         if (context.isRestored()) {\n             restoredState = new TreeMap<>();\n-            unionOffsetStates.get().forEach(e -> restoredState.put(e.f0, e.f1));\n-            for (Tuple3<TopicRange, MessageId, String> e : unionOffsetStates.get()) {\n-                if (e.f2 != null && e.f2.equals(externalSubscriptionName)) {\n+            Iterator<Tuple2<TopicSubscription, MessageId>> iterator = unionOffsetStates.get().iterator();\n+\n+            if (!iterator.hasNext()) {\n+                iterator = tryMigrationState(stateStore);\n+            }\n+            while (iterator.hasNext()) {\n+                final Tuple2<TopicSubscription, MessageId> tuple2 = iterator.next();\n+                final TopicRange topicRange =\n+                        new TopicRange(tuple2.f0.getTopic(), tuple2.f0.getRange().getPulsarRange());\n+                restoredState.put(topicRange, tuple2.f1);\n+                String subscriptionName = tuple2.f0.getSubscriptionName();\n+                if (!stateSubEqualexternalSub && StringUtils.equals(subscriptionName, externalSubscriptionName)) {\n                     stateSubEqualexternalSub = true;\n-                    log.info(\"Source restored state with subscriptionName {}\", e.f2);\n+                    log.info(\"Source restored state with subscriptionName {}\", subscriptionName);\n                 }\n-                break;\n             }\n-\n             log.info(\"Source subtask {} restored state {}\",\n                     taskIndex,\n                     StringUtils.join(restoredState.entrySet()));\n@@ -659,6 +688,64 @@ public void initializeState(FunctionInitializationContext context) throws Except\n         }\n     }\n \n+    @VisibleForTesting\n+    static TupleSerializer<Tuple2<TopicSubscription, MessageId>> createStateSerializer() {\n+        // explicit serializer will keep the compatibility with GenericTypeInformation and allow to\n+        // disableGenericTypes for users\n+        TypeSerializer<?>[] fieldSerializers =\n+                new TypeSerializer<?>[]{\n+                        TopicSubscriptionSerializer.INSTANCE,\n+                        MessageIdSerializer.INSTANCE\n+                };\n+        @SuppressWarnings(\"unchecked\")\n+        Class<Tuple2<TopicSubscription, MessageId>> tupleClass =\n+                (Class<Tuple2<TopicSubscription, MessageId>>) (Class<?>) Tuple2.class;\n+        return new TupleSerializer<>(tupleClass, fieldSerializers);\n+    }\n+\n+    private Iterator<Tuple2<TopicSubscription, MessageId>> tryMigrationState(OperatorStateStore stateStore)\n+            throws Exception {\n+        log.info(\"restore old state version {}\", oldStateVersion);\n+        PulsarSourceStateSerializer stateSerializer =\n+                new PulsarSourceStateSerializer(getRuntimeContext().getExecutionConfig());\n+        ListState<?> rawStates = stateStore.getUnionListState(new ListStateDescriptor<>(\n+                OFFSETS_STATE_NAME,\n+                stateSerializer.getSerializer(oldStateVersion)\n+        ));\n+\n+        ListState<String> oldUnionSubscriptionNameStates =\n+                stateStore.getUnionListState(\n+                        new ListStateDescriptor<>(\n+                                OFFSETS_STATE_NAME + \"_subName\",\n+                                TypeInformation.of(new TypeHint<String>() {\n+                                })));\n+        final Iterator<String> subNameIterator = oldUnionSubscriptionNameStates.get().iterator();\n+\n+        Iterator<?> tuple2s = rawStates.get().iterator();\n+        log.info(\"restore old state has data {}\", tuple2s.hasNext());\n+        final List<Tuple2<TopicSubscription, MessageId>> records = new ArrayList<>();\n+        while (tuple2s.hasNext()) {\n+            final Object next = tuple2s.next();\n+            Tuple2<TopicSubscription, MessageId> tuple2 = stateSerializer.deserialize(oldStateVersion, next);\n+\n+            String subName = tuple2.f0.getSubscriptionName();\n+            if (subNameIterator.hasNext()){\n+                subName = subNameIterator.next();\n+            }\n+            final TopicSubscription topicSubscription = TopicSubscription.builder()\n+                    .topic(tuple2.f0.getTopic())\n+                    .range(tuple2.f0.getRange())\n+                    .subscriptionName(subName)\n+                    .build();\n+            final Tuple2<TopicSubscription, MessageId> record = Tuple2.of(topicSubscription, tuple2.f1);\n+            log.info(\"migrationState {}\", record);\n+            records.add(record);\n+        }\n+        rawStates.clear();\n+        oldUnionSubscriptionNameStates.clear();\n+        return records.listIterator();\n+    }\n+\n     @Override\n     public void snapshotState(FunctionSnapshotContext context) throws Exception {\n         if (!running) {\n@@ -672,14 +759,24 @@ public void snapshotState(FunctionSnapshotContext context) throws Exception {\n                 // the fetcher has not yet been initialized, which means we need to return the\n                 // originally restored offsets or the assigned partitions\n                 for (Map.Entry<TopicRange, MessageId> entry : ownedTopicStarts.entrySet()) {\n-                    unionOffsetStates.add(Tuple3.of(entry.getKey(), entry.getValue(), getSubscriptionName()));\n+                    final TopicSubscription topicSubscription = TopicSubscription.builder()\n+                            .topic(entry.getKey().getTopic())\n+                            .range(entry.getKey().getRange())\n+                            .subscriptionName(getSubscriptionName())\n+                            .build();\n+                    unionOffsetStates.add(Tuple2.of(topicSubscription, entry.getValue()));\n                 }\n                 pendingOffsetsToCommit.put(context.getCheckpointId(), restoredState);\n             } else {\n                 Map<TopicRange, MessageId> currentOffsets = fetcher.snapshotCurrentState();\n                 pendingOffsetsToCommit.put(context.getCheckpointId(), currentOffsets);\n                 for (Map.Entry<TopicRange, MessageId> entry : currentOffsets.entrySet()) {\n-                    unionOffsetStates.add(Tuple3.of(entry.getKey(), entry.getValue(), getSubscriptionName()));\n+                    final TopicSubscription topicSubscription = TopicSubscription.builder()\n+                            .topic(entry.getKey().getTopic())\n+                            .range(entry.getKey().getRange())\n+                            .subscriptionName(getSubscriptionName())\n+                            .build();\n+                    unionOffsetStates.add(Tuple2.of(topicSubscription, entry.getValue()));\n                 }\n                 while (pendingOffsetsToCommit.size() > MAX_NUM_PENDING_CHECKPOINTS) {\n                     pendingOffsetsToCommit.remove(0);"
  },
  {
    "sha": "a44fef78b614d16ec1e7acdc5893f15998076533",
    "filename": "pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/MessageIdSerializer.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/MessageIdSerializer.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/MessageIdSerializer.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/MessageIdSerializer.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.connectors.pulsar.internal;\n+\n+import org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;\n+import org.apache.flink.core.memory.DataInputView;\n+import org.apache.flink.core.memory.DataOutputView;\n+\n+import org.apache.pulsar.client.api.MessageId;\n+\n+import java.io.IOException;\n+\n+/**\n+ * MessageId Serializer for flink state.\n+ */\n+public class MessageIdSerializer extends TypeSerializer<MessageId> {\n+\n+    public static final MessageIdSerializer INSTANCE = new MessageIdSerializer();\n+\n+    @Override\n+    public boolean isImmutableType() {\n+        return true;\n+    }\n+\n+    @Override\n+    public TypeSerializer<MessageId> duplicate() {\n+        return this;\n+    }\n+\n+    @Override\n+    public MessageId createInstance() {\n+        return MessageId.earliest;\n+    }\n+\n+    @Override\n+    public MessageId copy(MessageId from) {\n+        try {\n+            return MessageId.fromByteArray(from.toByteArray());\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"MessageId copy should not throw an exception\", e);\n+        }\n+    }\n+\n+    @Override\n+    public MessageId copy(MessageId from, MessageId reuse) {\n+        return copy(from);\n+    }\n+\n+    @Override\n+    public int getLength() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void serialize(MessageId record, DataOutputView target) throws IOException {\n+        final byte[] bytes = record.toByteArray();\n+        target.writeInt(bytes.length);\n+        target.write(bytes);\n+    }\n+\n+    @Override\n+    public MessageId deserialize(DataInputView source) throws IOException {\n+        int length = source.readInt();\n+        byte[] bytes = new byte[length];\n+        source.readFully(bytes);\n+        return MessageId.fromByteArray(bytes);\n+    }\n+\n+    @Override\n+    public MessageId deserialize(MessageId reuse, DataInputView source) throws IOException {\n+        return deserialize(source);\n+    }\n+\n+    @Override\n+    public void copy(DataInputView source, DataOutputView target) throws IOException {\n+        serialize(deserialize(source), target);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else {\n+            return obj != null && this.getClass() == obj.getClass();\n+        }\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return this.getClass().hashCode();\n+    }\n+\n+    @Override\n+    public TypeSerializerSnapshot<MessageId> snapshotConfiguration() {\n+        return new MessageIdSerializerSnapshot();\n+    }\n+\n+    // ------------------------------------------------------------------------\n+\n+    /**\n+     * Serializer configuration snapshot for compatibility and format evolution.\n+     */\n+    @SuppressWarnings(\"WeakerAccess\")\n+    public static final class MessageIdSerializerSnapshot extends SimpleTypeSerializerSnapshot<MessageId> {\n+\n+        public MessageIdSerializerSnapshot() {\n+            super(() -> INSTANCE);\n+        }\n+    }\n+}"
  },
  {
    "sha": "82cd76faa03090ac484f3b7552566c7883a37f03",
    "filename": "pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/PulsarOptions.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/PulsarOptions.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/PulsarOptions.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/PulsarOptions.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -54,6 +54,7 @@\n     public static final String COMMIT_MAX_RETRIES = \"commitmaxretries\";\n     public static final String FAIL_ON_DATA_LOSS_OPTION_KEY = \"failondataloss\";\n     public static final String ENABLE_KEY_HASH_RANGE_KEY = \"enable-key-hash-range\";\n+    public static final String OLD_STATE_VERSION = \"old-state-version\";\n \n     public static final String INSTRUCTION_FOR_FAIL_ON_DATA_LOSS_FALSE =\n             \"Some data may have been lost because they are not available in Pulsar any more; either the\\n\" +"
  },
  {
    "sha": "357a3525159f42e89326ffd71ca9e05e1ac386fa",
    "filename": "pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/PulsarSourceStateSerializer.java",
    "status": "added",
    "additions": 186,
    "deletions": 0,
    "changes": 186,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/PulsarSourceStateSerializer.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/PulsarSourceStateSerializer.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/PulsarSourceStateSerializer.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.connectors.pulsar.internal;\n+\n+import org.apache.flink.api.common.ExecutionConfig;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.common.typeutils.base.StringSerializer;\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.api.java.tuple.Tuple3;\n+import org.apache.flink.api.java.typeutils.runtime.TupleSerializer;\n+import org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;\n+import org.apache.flink.core.io.SimpleVersionedSerializer;\n+import org.apache.flink.core.memory.DataInputDeserializer;\n+import org.apache.flink.core.memory.DataOutputSerializer;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.client.api.MessageId;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.io.UnsupportedEncodingException;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Old PulsarSourceState Serializer for flink state.\n+ */\n+@Slf4j\n+public class PulsarSourceStateSerializer\n+        implements SimpleVersionedSerializer<Tuple2<TopicSubscription, MessageId>>, Serializable {\n+\n+    private static final int CURRENT_VERSION = 4;\n+\n+    private final ExecutionConfig executionConfig;\n+\n+    private Map<Integer, SerializableFunction<byte[], Tuple2<TopicSubscription, MessageId>>> oldStateSerializer;\n+\n+    public PulsarSourceStateSerializer(ExecutionConfig executionConfig) {\n+        this.executionConfig = executionConfig;\n+        this.oldStateSerializer = new LinkedHashMap<>();\n+        oldStateSerializer.put(0, bytes -> {\n+            final DataInputDeserializer deserializer = new DataInputDeserializer(bytes);\n+            Tuple2<String, MessageId> deserialize = getV0Serializer().deserialize(deserializer);\n+            TopicSubscription topicSubscription = TopicSubscription.builder()\n+                    .topic(deserialize.f0)\n+                    .range(SerializableRange.ofFullRange())\n+                    .build();\n+            return Tuple2.of(topicSubscription, deserialize.f1);\n+        });\n+        oldStateSerializer.put(1, bytes -> {\n+            final DataInputDeserializer deserializer = new DataInputDeserializer(bytes);\n+            Tuple2<TopicRange, MessageId> deserialize = getV1Serializer().deserialize(deserializer);\n+            TopicSubscription topicSubscription = TopicSubscription.builder()\n+                    .topic(deserialize.f0.getTopic())\n+                    .range(deserialize.f0.getRange())\n+                    .build();\n+            return Tuple2.of(topicSubscription, deserialize.f1);\n+        });\n+        oldStateSerializer.put(2, bytes -> {\n+            final DataInputDeserializer deserializer = new DataInputDeserializer(bytes);\n+            Tuple3<TopicRange, MessageId, String> deserialize = getV2Serializer().deserialize(deserializer);\n+            TopicSubscription topicSubscription = TopicSubscription.builder()\n+                    .topic(deserialize.f0.getTopic())\n+                    .range(deserialize.f0.getRange())\n+                    .subscriptionName(deserialize.f2)\n+                    .build();\n+            return Tuple2.of(topicSubscription, deserialize.f1);\n+        });\n+    }\n+\n+    @Override\n+    public int getVersion() {\n+        return CURRENT_VERSION;\n+    }\n+\n+    @Override\n+    public byte[] serialize(Tuple2<TopicSubscription, MessageId> obj) throws IOException {\n+        throw new UnsupportedEncodingException(\"for Pulsar source state migration only\");\n+    }\n+\n+    @Override\n+    public Tuple2<TopicSubscription, MessageId> deserialize(int version, byte[] serialized) throws IOException {\n+        Exception exception = null;\n+        for (Map.Entry<Integer, SerializableFunction<byte[], Tuple2<TopicSubscription, MessageId>>> entry : oldStateSerializer\n+                .entrySet()) {\n+            try {\n+                final Tuple2<TopicSubscription, MessageId> tuple2 = entry.getValue().apply(serialized);\n+                log.info(\"pulsar deser old state \" + tuple2);\n+                return tuple2;\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"not restore Pulsar state\", exception);\n+    }\n+\n+    public Tuple2<TopicSubscription, MessageId> deserialize(int version, Object oldStateObject) throws IOException {\n+        final DataOutputSerializer target = new DataOutputSerializer(1024 * 8);\n+        switch (version) {\n+            case 0:\n+                getV0Serializer().serialize((Tuple2<String, MessageId>) oldStateObject, target);\n+                break;\n+            case 1:\n+                getV1Serializer().serialize((Tuple2<TopicRange, MessageId>) oldStateObject, target);\n+                break;\n+            case 2:\n+                getV2Serializer().serialize((Tuple3<TopicRange, MessageId, String>) oldStateObject, target);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"unsupport old pulsar state version\");\n+        }\n+        return deserialize(version, target.getSharedBuffer());\n+    }\n+\n+    public TupleSerializer<Tuple2<String, MessageId>> getV0Serializer() {\n+        TypeSerializer<?>[] fieldSerializers =\n+                new TypeSerializer<?>[]{\n+                        StringSerializer.INSTANCE,\n+                        new KryoSerializer<>(MessageId.class, executionConfig)\n+                };\n+        @SuppressWarnings(\"unchecked\")\n+        Class<Tuple2<String, MessageId>> tupleClass =\n+                (Class<Tuple2<String, MessageId>>) (Class<?>) Tuple2.class;\n+        return new TupleSerializer<>(tupleClass, fieldSerializers);\n+    }\n+\n+    public TupleSerializer<Tuple2<TopicRange, MessageId>> getV1Serializer() {\n+        TypeSerializer<?>[] fieldSerializers =\n+                new TypeSerializer<?>[]{\n+                        new KryoSerializer<>(TopicRange.class, executionConfig),\n+                        new KryoSerializer<>(MessageId.class, executionConfig)\n+                };\n+        @SuppressWarnings(\"unchecked\")\n+        Class<Tuple2<TopicRange, MessageId>> tupleClass =\n+                (Class<Tuple2<TopicRange, MessageId>>) (Class<?>) Tuple2.class;\n+        return new TupleSerializer<>(tupleClass, fieldSerializers);\n+    }\n+\n+    public TupleSerializer<Tuple3<TopicRange, MessageId, String>> getV2Serializer() {\n+        TypeSerializer<?>[] fieldSerializers =\n+                new TypeSerializer<?>[]{\n+                        new KryoSerializer<>(TopicRange.class, executionConfig),\n+                        new KryoSerializer<>(MessageId.class, executionConfig),\n+                        new StringSerializer()\n+                };\n+        @SuppressWarnings(\"unchecked\")\n+        Class<Tuple3<TopicRange, MessageId, String>> tupleClass =\n+                (Class<Tuple3<TopicRange, MessageId, String>>) (Class<?>) Tuple3.class;\n+        return new TupleSerializer<>(tupleClass, fieldSerializers);\n+    }\n+\n+    public TupleSerializer<?> getSerializer(int oldStateVersion) {\n+        switch (oldStateVersion) {\n+            case 0:\n+                return getV0Serializer();\n+            case 1:\n+                return getV1Serializer();\n+            case 2:\n+                return getV2Serializer();\n+            default:\n+                throw new IllegalArgumentException(\"unsupport old pulsar state version\");\n+        }\n+    }\n+\n+    /**\n+     * Represents a serializable function that accepts one argument and produces a result.\n+     *\n+     * @param <T> the type of the input to the function\n+     * @param <R> the type of the result of the function\n+     */\n+    public interface SerializableFunction<T, R> extends Serializable {\n+        R apply(T param) throws Exception;\n+    }\n+}"
  },
  {
    "sha": "02f9852dd08822009e1db7824244df203ed7ed46",
    "filename": "pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SchemaTranslator.java",
    "status": "modified",
    "additions": 17,
    "deletions": 6,
    "changes": 23,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SchemaTranslator.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SchemaTranslator.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SchemaTranslator.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -26,11 +26,10 @@\n import org.apache.pulsar.client.impl.schema.DoubleSchema;\n import org.apache.pulsar.client.impl.schema.FloatSchema;\n import org.apache.pulsar.client.impl.schema.IntSchema;\n-import org.apache.pulsar.client.impl.schema.LocalDateSchema;\n-import org.apache.pulsar.client.impl.schema.LocalDateTimeSchema;\n import org.apache.pulsar.client.impl.schema.LongSchema;\n import org.apache.pulsar.client.impl.schema.ShortSchema;\n import org.apache.pulsar.common.schema.SchemaInfo;\n+import org.apache.pulsar.common.schema.SchemaType;\n \n import java.io.Serializable;\n \n@@ -43,7 +42,8 @@\n \n     public abstract TableSchema pulsarSchemaToTableSchema(SchemaInfo pulsarSchema) throws IncompatibleSchemaException;\n \n-    public abstract FieldsDataType pulsarSchemaToFieldsDataType(SchemaInfo pulsarSchema) throws IncompatibleSchemaException;\n+    public abstract FieldsDataType pulsarSchemaToFieldsDataType(SchemaInfo pulsarSchema)\n+            throws IncompatibleSchemaException;\n \n     public abstract DataType schemaInfo2SqlType(SchemaInfo si) throws IncompatibleSchemaException;\n \n@@ -55,11 +55,21 @@ public static Schema atomicType2PulsarSchema(DataType flinkType) throws Incompat\n             case VARBINARY:\n                 return BytesSchema.of();\n             case DATE:\n-                return LocalDateSchema.of();\n+                final SchemaInfo localDate = SchemaInfo.builder()\n+                        .name(\"LocalDate\")\n+                        .type(SchemaType.valueOf(\"LOCAL_DATE\"))\n+                        .schema(new byte[0])\n+                        .build();\n+                return Schema.getSchema(localDate);\n             case VARCHAR:\n                 return Schema.STRING;\n             case TIMESTAMP_WITHOUT_TIME_ZONE:\n-                return LocalDateTimeSchema.of();\n+                final SchemaInfo localDateTime = SchemaInfo.builder()\n+                        .name(\"LocalDateTime\")\n+                        .type(SchemaType.valueOf(\"LOCAL_DATE_TIME\"))\n+                        .schema(new byte[0])\n+                        .build();\n+                return Schema.getSchema(localDateTime);\n             case TINYINT:\n                 return ByteSchema.of();\n             case DOUBLE:\n@@ -73,7 +83,8 @@ public static Schema atomicType2PulsarSchema(DataType flinkType) throws Incompat\n             case SMALLINT:\n                 return ShortSchema.of();\n             default:\n-                throw new IncompatibleSchemaException(String.format(\"%s is not supported by Pulsar yet\", flinkType.toString()), null);\n+                throw new IncompatibleSchemaException(\n+                        String.format(\"%s is not supported by Pulsar yet\", flinkType.toString()), null);\n         }\n     }\n }"
  },
  {
    "sha": "fda4393feda8a8fa44f8fe7177e098247c8da308",
    "filename": "pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SchemaUtils.java",
    "status": "modified",
    "additions": 9,
    "deletions": 59,
    "changes": 68,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SchemaUtils.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SchemaUtils.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SchemaUtils.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -25,21 +25,6 @@\n import org.apache.pulsar.client.admin.PulsarAdminException;\n import org.apache.pulsar.client.api.schema.GenericRecord;\n import org.apache.pulsar.client.api.schema.GenericSchema;\n-import org.apache.pulsar.client.impl.schema.BooleanSchema;\n-import org.apache.pulsar.client.impl.schema.ByteSchema;\n-import org.apache.pulsar.client.impl.schema.BytesSchema;\n-import org.apache.pulsar.client.impl.schema.DateSchema;\n-import org.apache.pulsar.client.impl.schema.DoubleSchema;\n-import org.apache.pulsar.client.impl.schema.FloatSchema;\n-import org.apache.pulsar.client.impl.schema.IntSchema;\n-import org.apache.pulsar.client.impl.schema.LocalDateSchema;\n-import org.apache.pulsar.client.impl.schema.LocalDateTimeSchema;\n-import org.apache.pulsar.client.impl.schema.LocalTimeSchema;\n-import org.apache.pulsar.client.impl.schema.LongSchema;\n-import org.apache.pulsar.client.impl.schema.ShortSchema;\n-import org.apache.pulsar.client.impl.schema.TimeSchema;\n-import org.apache.pulsar.client.impl.schema.TimestampSchema;\n-import org.apache.pulsar.client.impl.schema.generic.GenericSchemaImpl;\n import org.apache.pulsar.client.internal.DefaultImplementation;\n import org.apache.pulsar.common.naming.TopicName;\n import org.apache.pulsar.common.protocol.schema.PostSchemaPayload;\n@@ -88,11 +73,13 @@ public static void uploadPulsarSchema(PulsarAdmin admin, String topic, SchemaInf\n                             String.format(\"Create schema for %s get 404\", TopicName.get(topic).toString()), pae);\n                 } else {\n                     throw new RuntimeException(\n-                            String.format(\"Failed to create schema information for %s\", TopicName.get(topic).toString()), pae);\n+                            String.format(\"Failed to create schema information for %s\",\n+                                    TopicName.get(topic).toString()), pae);\n                 }\n             } catch (Throwable e) {\n                 throw new RuntimeException(\n-                        String.format(\"Failed to create schema information for %s\", TopicName.get(topic).toString()), e);\n+                        String.format(\"Failed to create schema information for %s\", TopicName.get(topic).toString()),\n+                        e);\n             }\n         } else if (!existingSchema.equals(schemaInfo) && !compatibleSchema(existingSchema, schemaInfo)) {\n             throw new RuntimeException(\"Writing to a topic which have incompatible schema\");\n@@ -121,46 +108,7 @@ public static boolean compatibleSchema(SchemaInfo s1, SchemaInfo s2) {\n     }\n \n     public static org.apache.pulsar.client.api.Schema<?> getPulsarSchema(SchemaInfo schemaInfo) {\n-        switch (schemaInfo.getType()) {\n-            case BOOLEAN:\n-                return BooleanSchema.of();\n-            case INT8:\n-                return ByteSchema.of();\n-            case INT16:\n-                return ShortSchema.of();\n-            case INT32:\n-                return IntSchema.of();\n-            case INT64:\n-                return LongSchema.of();\n-            case STRING:\n-                return org.apache.pulsar.client.api.Schema.STRING;\n-            case FLOAT:\n-                return FloatSchema.of();\n-            case DOUBLE:\n-                return DoubleSchema.of();\n-            case BYTES:\n-            case NONE:\n-                return BytesSchema.of();\n-            case DATE:\n-                return DateSchema.of();\n-            case TIME:\n-                return TimeSchema.of();\n-            case TIMESTAMP:\n-                return TimestampSchema.of();\n-            // Note that this is a type only available in Pulsar 2.7.\n-            case LOCAL_DATE:\n-                return LocalDateSchema.of();\n-            case LOCAL_TIME:\n-                return LocalTimeSchema.of();\n-            case LOCAL_DATE_TIME:\n-                return LocalDateTimeSchema.of();\n-            case AVRO:\n-            case JSON:\n-                return GenericSchemaImpl.of(schemaInfo);\n-            default:\n-                throw new IllegalArgumentException(\"Retrieve schema instance from schema info for type \" +\n-                        schemaInfo.getType() + \" is not supported yet\");\n-        }\n+        return org.apache.pulsar.client.api.Schema.getSchema(schemaInfo);\n     }\n \n     static GenericSchema<GenericRecord> avroSchema2PulsarSchema(Schema avroSchema) {\n@@ -198,7 +146,8 @@ private static int computeMinBytesForPrecision(int precision) {\n         return numBytes;\n     }\n \n-    public static org.apache.pulsar.client.api.Schema<?> buildRowSchema(DataType dataType, RecordSchemaType recordSchemaType) {\n+    public static org.apache.pulsar.client.api.Schema<?> buildRowSchema(DataType dataType,\n+                                                                        RecordSchemaType recordSchemaType) {\n         org.apache.avro.Schema avroSchema = AvroSchemaConverter.convertToSchema(dataType.getLogicalType());\n         byte[] schemaBytes = avroSchema.toString().getBytes(StandardCharsets.UTF_8);\n         SchemaInfo si = new SchemaInfo();\n@@ -227,7 +176,8 @@ private static int computeMinBytesForPrecision(int precision) {\n         return org.apache.pulsar.client.api.Schema.generic(si);\n     }\n \n-    public static <T> org.apache.pulsar.client.api.Schema<T> buildSchemaForRecordClazz(Class<T> recordClazz, RecordSchemaType recordSchemaType) {\n+    public static <T> org.apache.pulsar.client.api.Schema<T> buildSchemaForRecordClazz(Class<T> recordClazz,\n+                                                                                       RecordSchemaType recordSchemaType) {\n         if (recordSchemaType == null) {\n             return org.apache.pulsar.client.api.Schema.AVRO(recordClazz);\n         }"
  },
  {
    "sha": "664bfcbd98ad75e2e594c3ecc91a197cc0cc6195",
    "filename": "pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SourceSinkUtils.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SourceSinkUtils.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SourceSinkUtils.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/SourceSinkUtils.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -162,4 +162,12 @@ public static Range distributeRange(int countOfSubTasks, int indexOfSubTasks) {\n \n         return Range.of(subTasksStartKey, subTasksEndKey);\n     }\n+\n+    public static int getOldStateVersion(Map<String, String> caseInsensitiveParams) {\n+        final String value = caseInsensitiveParams.get(PulsarOptions.OLD_STATE_VERSION);\n+        if (StringUtils.isBlank(value)){\n+            return 0;\n+        }\n+        return Integer.parseInt(value);\n+    }\n }"
  },
  {
    "sha": "e67d803406d5dfbefdbc0a9696c7709c87049dc7",
    "filename": "pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/TopicSubscription.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/TopicSubscription.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/TopicSubscription.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/TopicSubscription.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.connectors.pulsar.internal;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * TopicSubscription.\n+ */\n+@Data\n+@Builder\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class TopicSubscription implements Serializable {\n+\n+    private String topic;\n+\n+    private SerializableRange range;\n+\n+    private String subscriptionName;\n+}"
  },
  {
    "sha": "7b9a7e0913b84cb0d731ceb8b1323257a16402d8",
    "filename": "pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/TopicSubscriptionSerializer.java",
    "status": "added",
    "additions": 138,
    "deletions": 0,
    "changes": 138,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/TopicSubscriptionSerializer.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/TopicSubscriptionSerializer.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/main/java/org/apache/flink/streaming/connectors/pulsar/internal/TopicSubscriptionSerializer.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.connectors.pulsar.internal;\n+\n+import org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;\n+import org.apache.flink.core.memory.DataInputView;\n+import org.apache.flink.core.memory.DataOutputView;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+/**\n+ * TopicSubscription Serializer for flink state.\n+ */\n+public class TopicSubscriptionSerializer extends TypeSerializer<TopicSubscription> {\n+\n+    public static final TopicSubscriptionSerializer INSTANCE = new TopicSubscriptionSerializer();\n+\n+    @Override\n+    public boolean isImmutableType() {\n+        return true;\n+    }\n+\n+    @Override\n+    public TypeSerializer<TopicSubscription> duplicate() {\n+        return this;\n+    }\n+\n+    @Override\n+    public TopicSubscription createInstance() {\n+        return new TopicSubscription();\n+    }\n+\n+    @Override\n+    public TopicSubscription copy(TopicSubscription from) {\n+        return TopicSubscription.builder()\n+                .topic(from.getTopic())\n+                .subscriptionName(from.getSubscriptionName())\n+                .range(from.getRange())\n+                .build();\n+    }\n+\n+    @Override\n+    public TopicSubscription copy(TopicSubscription from, TopicSubscription reuse) {\n+        return copy(from);\n+    }\n+\n+    @Override\n+    public int getLength() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void serialize(TopicSubscription record, DataOutputView target) throws IOException {\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+             ObjectOutputStream out = new ObjectOutputStream(baos)) {\n+            out.writeObject(record);\n+            out.flush();\n+            final byte[] bytes = baos.toByteArray();\n+            target.writeInt(bytes.length);\n+            target.write(bytes);\n+        }\n+    }\n+\n+    @Override\n+    public TopicSubscription deserialize(DataInputView source) throws IOException {\n+        int length = source.readInt();\n+        byte[] serialized = new byte[length];\n+        source.readFully(serialized);\n+        try (ByteArrayInputStream bais = new ByteArrayInputStream(serialized);\n+             ObjectInputStream in = new ObjectInputStream(bais)) {\n+            try {\n+                return (TopicSubscription) in.readObject();\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public TopicSubscription deserialize(TopicSubscription reuse, DataInputView source) throws IOException {\n+        return deserialize(source);\n+    }\n+\n+    @Override\n+    public void copy(DataInputView source, DataOutputView target) throws IOException {\n+        serialize(deserialize(source), target);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else {\n+            return obj != null && this.getClass() == obj.getClass();\n+        }\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return this.getClass().hashCode();\n+    }\n+\n+    @Override\n+    public TypeSerializerSnapshot<TopicSubscription> snapshotConfiguration() {\n+        return new TopicSubscriptionSerializer.TopicSubscriptionSerializerSnapshot();\n+    }\n+\n+    // ------------------------------------------------------------------------\n+\n+    /**\n+     * Serializer configuration snapshot for compatibility and format evolution.\n+     */\n+    @SuppressWarnings(\"WeakerAccess\")\n+    public static final class TopicSubscriptionSerializerSnapshot extends SimpleTypeSerializerSnapshot<TopicSubscription> {\n+\n+        public TopicSubscriptionSerializerSnapshot() {\n+            super(() -> INSTANCE);\n+        }\n+    }\n+}"
  },
  {
    "sha": "e2f9ff85653b8eebc2585816c329c0cd118351d1",
    "filename": "pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarAuthTest.java",
    "status": "modified",
    "additions": 29,
    "deletions": 45,
    "changes": 74,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarAuthTest.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarAuthTest.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarAuthTest.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -21,34 +21,35 @@\n import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n import org.apache.flink.streaming.connectors.pulsar.internal.PulsarDeserializationSchema;\n import org.apache.flink.streaming.connectors.pulsar.internal.PulsarOptions;\n-import org.apache.flink.streaming.connectors.pulsar.testutils.PulsarContainer;\n import org.apache.flink.streaming.util.TestStreamEnvironment;\n import org.apache.flink.test.util.SuccessException;\n+import org.apache.flink.test.util.TestUtils;\n \n-import io.streamnative.tests.pulsar.service.PulsarServiceSpec;\n-import io.streamnative.tests.pulsar.service.testcontainers.containers.PulsarStandaloneContainer;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.pulsar.client.api.Message;\n import org.apache.pulsar.client.api.Producer;\n import org.apache.pulsar.client.api.PulsarClient;\n import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.Schema;\n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.testcontainers.containers.BindMode;\n-import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.PulsarContainer;\n import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.utility.DockerImageName;\n \n import java.io.IOException;\n+import java.time.Duration;\n import java.util.Properties;\n-import java.util.UUID;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n+import static org.testcontainers.containers.PulsarContainer.BROKER_HTTP_PORT;\n+\n /**\n  * pulsar auth tests.\n  */\n@@ -57,41 +58,30 @@\n     private static final Logger log = LoggerFactory.getLogger(PulsarAuthTest.class);\n     private static String serviceUrl;\n     private static String adminUrl;\n-    private static PulsarStandaloneContainer container;\n+    private static PulsarContainer pulsarService;\n     private static String authPluginClassName;\n     private static String authParamsString;\n \n     @BeforeClass\n     public static void prepare() throws Exception {\n-\n-        log.info(\"-------------------------------------------------------------------------\");\n         log.info(\"    Starting PulsarTestBase \");\n-        log.info(\"-------------------------------------------------------------------------\");\n-        if (System.getProperty(\"pulsar.systemtest.image\") == null) {\n-            System.setProperty(\"pulsar.systemtest.image\", \"apachepulsar/pulsar:2.7.0\");\n-        }\n-        PulsarServiceSpec spec = PulsarServiceSpec.builder()\n-                .clusterName(\"standalone-\" + UUID.randomUUID())\n-                .enableContainerLogging(false)\n-                .build();\n-        container = new PulsarContainer(spec.clusterName())\n-                .withClasspathResourceMapping(\"standalone.conf\", \"/pulsar/conf/standalone.conf\", BindMode.READ_ONLY)\n-                .withClasspathResourceMapping(\"my-secret.key\", \"/pulsar/conf/my-secret.key\", BindMode.READ_ONLY)\n-                .withClasspathResourceMapping(\"client.conf\", \"/pulsar/conf/client.conf\", BindMode.READ_ONLY)\n-                .withNetwork(Network.newNetwork())\n-                .withNetworkAliases(PulsarStandaloneContainer.NAME + \"-\" + spec.clusterName());\n-        if (spec.enableContainerLogging()) {\n-            container.withLogConsumer(new Slf4jLogConsumer(log));\n-        }\n-        container.start();\n-        serviceUrl = container.getExposedPlainTextServiceUrl();\n-        adminUrl = container.getExposedHttpServiceUrl();\n-\n-        Thread.sleep(30 * 1000);\n-        log.info(\"-------------------------------------------------------------------------\");\n-        log.info(\"Successfully started pulsar service at cluster \" + spec.clusterName());\n-        log.info(\"-------------------------------------------------------------------------\");\n-\n+        final String pulsarImage = System.getProperty(\"pulsar.systemtest.image\", \"apachepulsar/pulsar:2.7.0\");\n+        pulsarService = new PulsarContainer(DockerImageName.parse(pulsarImage));\n+        pulsarService\n+                .withClasspathResourceMapping(\"pulsar/auth-standalone.conf\", \"/pulsar/conf/standalone.conf\",\n+                        BindMode.READ_ONLY);\n+        pulsarService.withClasspathResourceMapping(\"pulsar/auth-client.conf\", \"/pulsar/conf/client.conf\",\n+                BindMode.READ_ONLY);\n+        pulsarService.waitingFor(new HttpWaitStrategy()\n+                .forPort(BROKER_HTTP_PORT)\n+                .forStatusCode(401)\n+                .forPath(\"/admin/v2/namespaces/public/default\")\n+                .withStartupTimeout(Duration.of(40, SECONDS)));\n+        pulsarService.start();\n+        pulsarService.followOutput(new Slf4jLogConsumer(log));\n+        serviceUrl = pulsarService.getPulsarBrokerUrl();\n+        adminUrl = pulsarService.getHttpServiceUrl();\n+        log.info(\"Successfully started pulsar service at cluster \" + pulsarService.getContainerName());\n     }\n \n     @AfterClass\n@@ -102,8 +92,8 @@ public static void shutDownServices() throws Exception {\n \n         TestStreamEnvironment.unsetAsContext();\n \n-        if (container != null) {\n-            container.stop();\n+        if (pulsarService != null) {\n+            pulsarService.stop();\n         }\n \n         log.info(\"-------------------------------------------------------------------------\");\n@@ -143,13 +133,7 @@ public void testSource() throws Exception {\n         environment.addSource(stringFlinkPulsarSource)\n                 .map(new IgnoreMap(total))\n                 .print();\n-        try {\n-            environment.execute();\n-        } catch (Exception e) {\n-            if (!(ExceptionUtils.getRootCause(e) instanceof SuccessException)) {\n-                Assert.fail();\n-            }\n-        }\n+        TestUtils.tryExecute(environment, \"test-auth-source\");\n     }\n \n     protected void sendMessage(String topic, PulsarClient pulsarClient, int total) throws PulsarClientException {"
  },
  {
    "sha": "144ca8301313f3cb88a3b9006c5f63739f46f94b",
    "filename": "pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarTestBase.java",
    "status": "modified",
    "additions": 20,
    "deletions": 31,
    "changes": 51,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarTestBase.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarTestBase.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/PulsarTestBase.java?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -25,9 +25,6 @@\n import org.apache.flink.streaming.util.TestStreamEnvironment;\n import org.apache.flink.util.TestLogger;\n \n-import io.streamnative.tests.pulsar.service.PulsarService;\n-import io.streamnative.tests.pulsar.service.PulsarServiceSpec;\n-import io.streamnative.tests.pulsar.service.testcontainers.PulsarStandaloneContainerService;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.NotImplementedException;\n import org.apache.commons.lang3.StringUtils;\n@@ -46,23 +43,28 @@\n import org.apache.pulsar.common.schema.SchemaType;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.testcontainers.containers.PulsarContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.utility.DockerImageName;\n \n-import java.net.URI;\n+import java.time.Duration;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n import java.util.UUID;\n import java.util.stream.Collectors;\n \n-import static org.mockito.Mockito.mock;\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+import static org.testcontainers.containers.PulsarContainer.BROKER_HTTP_PORT;\n \n /**\n  * Start / stop a Pulsar cluster.\n  */\n @Slf4j\n public abstract class PulsarTestBase extends TestLogger {\n \n-    protected static PulsarService pulsarService;\n+    protected static PulsarContainer pulsarService;\n \n     protected static String serviceUrl;\n \n@@ -92,47 +94,34 @@ public static String getAdminUrl() {\n \n     @BeforeClass\n     public static void prepare() throws Exception {\n-\n         adminUrl = System.getenv(\"PULSAR_ADMIN_URL\");\n         serviceUrl = System.getenv(\"PULSAR_SERVICE_URL\");\n         zkUrl = System.getenv(\"PULSAR_ZK_URL\");\n \n-        log.info(\"-------------------------------------------------------------------------\");\n         log.info(\"    Starting PulsarTestBase \");\n-        log.info(\"-------------------------------------------------------------------------\");\n-\n         if (StringUtils.isNotBlank(adminUrl) && StringUtils.isNotBlank(serviceUrl)) {\n-            pulsarService = mock(PulsarStandaloneContainerService.class);\n             log.info(\"    Use extend Pulsar Service \");\n         } else {\n-            if (System.getProperty(\"pulsar.systemtest.image\") == null) {\n-                System.setProperty(\"pulsar.systemtest.image\", \"apachepulsar/pulsar:2.7.0\");\n-            }\n-            PulsarServiceSpec spec = PulsarServiceSpec.builder()\n-                    .clusterName(\"standalone-\" + UUID.randomUUID())\n-                    .enableContainerLogging(false)\n-                    .build();\n-\n-            pulsarService = new PulsarStandaloneContainerService(spec);\n+            final String pulsarImage = System.getProperty(\"pulsar.systemtest.image\", \"apachepulsar/pulsar:2.7.0\");\n+            pulsarService = new PulsarContainer(DockerImageName.parse(pulsarImage));\n+            pulsarService.addExposedPort(2181);\n+            pulsarService.waitingFor(new HttpWaitStrategy()\n+                    .forPort(BROKER_HTTP_PORT)\n+                    .forStatusCode(200)\n+                    .forPath(\"/admin/v2/namespaces/public/default\")\n+                    .withStartupTimeout(Duration.of(40, SECONDS)));\n             pulsarService.start();\n-            for (URI uri : pulsarService.getServiceUris()) {\n-                if (uri != null && uri.getScheme().equals(\"pulsar\")) {\n-                    serviceUrl = uri.toString();\n-                } else if (uri != null && !uri.getScheme().equals(\"pulsar\")) {\n-                    adminUrl = uri.toString();\n-                }\n-            }\n-            zkUrl = ((PulsarStandaloneContainerService) pulsarService).getZkUrl();\n-            Thread.sleep(80 * 100L);\n+            pulsarService.followOutput(new Slf4jLogConsumer(log));\n+            serviceUrl = pulsarService.getPulsarBrokerUrl();\n+            adminUrl = pulsarService.getHttpServiceUrl();\n+            zkUrl = \"localhost:\" + pulsarService.getMappedPort(2181);\n         }\n         clientConfigurationData.setServiceUrl(serviceUrl);\n         consumerConfigurationData.setSubscriptionMode(SubscriptionMode.NonDurable);\n         consumerConfigurationData.setSubscriptionType(SubscriptionType.Exclusive);\n         consumerConfigurationData.setSubscriptionName(\"flink-\" + UUID.randomUUID());\n \n-        log.info(\"-------------------------------------------------------------------------\");\n         log.info(\"Successfully started pulsar service\");\n-        log.info(\"-------------------------------------------------------------------------\");\n     }\n \n     @AfterClass"
  },
  {
    "sha": "3c10e6f1b6acaa46ca151c5abca6a6d720f6b5c2",
    "filename": "pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/testutils/PulsarContainer.java",
    "status": "removed",
    "additions": 0,
    "deletions": 37,
    "changes": 37,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/00f8ec82212dee0d0fd30f84fd6d45cca064335e/pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/testutils/PulsarContainer.java",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/00f8ec82212dee0d0fd30f84fd6d45cca064335e/pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/testutils/PulsarContainer.java",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/test/java/org/apache/flink/streaming/connectors/pulsar/testutils/PulsarContainer.java?ref=00f8ec82212dee0d0fd30f84fd6d45cca064335e",
    "patch": "@@ -1,37 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.streaming.connectors.pulsar.testutils;\n-\n-import io.streamnative.tests.pulsar.service.testcontainers.containers.PulsarStandaloneContainer;\n-\n-/**\n- * pulsar container.\n- */\n-public class PulsarContainer extends PulsarStandaloneContainer {\n-    /**\n-     * Construct the pulsar container for cluster <tt>clusterName</tt> with the provided <tt>image</tt>.\n-     *\n-     * @param clusterName cluster name\n-     */\n-    public PulsarContainer(String clusterName) {\n-        super(clusterName);\n-    }\n-\n-    @Override\n-    protected void configure() {\n-        super.configure();\n-        setCommand(\"standalone --no-stream-storage -nfw\");\n-    }\n-}"
  },
  {
    "sha": "7864f2f40537250732daa2a24eded902117abc32",
    "filename": "pulsar-flink-connector/src/test/resources/my-secret.key",
    "status": "removed",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/00f8ec82212dee0d0fd30f84fd6d45cca064335e/pulsar-flink-connector/src/test/resources/my-secret.key",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/00f8ec82212dee0d0fd30f84fd6d45cca064335e/pulsar-flink-connector/src/test/resources/my-secret.key",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/test/resources/my-secret.key?ref=00f8ec82212dee0d0fd30f84fd6d45cca064335e",
    "patch": "@@ -1 +0,0 @@\n-duaQk8phAAWZH5ohiZV92EE2/qqB3u//XHqE2T3BP10=\n\\ No newline at end of file"
  },
  {
    "sha": "3ff6605f63674c61f113357b34b8b87f51d1092a",
    "filename": "pulsar-flink-connector/src/test/resources/pulsar/auth-client.conf",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/test/resources/pulsar/auth-client.conf",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/test/resources/pulsar/auth-client.conf",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/test/resources/pulsar/auth-client.conf?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "previous_filename": "pulsar-flink-connector/src/test/resources/client.conf"
  },
  {
    "sha": "dda46f919919bffebfdcf871497cf36600facb8f",
    "filename": "pulsar-flink-connector/src/test/resources/pulsar/auth-standalone.conf",
    "status": "renamed",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/streamnative/pulsar-flink/blob/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/test/resources/pulsar/auth-standalone.conf",
    "raw_url": "https://github.com/streamnative/pulsar-flink/raw/f3d8514b1aa5bb81aef317c73b663196f1757023/pulsar-flink-connector/src/test/resources/pulsar/auth-standalone.conf",
    "contents_url": "https://api.github.com/repos/streamnative/pulsar-flink/contents/pulsar-flink-connector/src/test/resources/pulsar/auth-standalone.conf?ref=f3d8514b1aa5bb81aef317c73b663196f1757023",
    "patch": "@@ -349,8 +349,7 @@ authenticationEnabled=true\n # Autentication provider name list, which is comma separated list of class names\n authenticationProviders=org.apache.pulsar.broker.authentication.AuthenticationProviderToken\n \n-tokenSecretKey=/pulsar/conf/my-secret.key\n-#tokenSecretKey=data:;base64,duaQk8phAAWZH5ohiZV92EE2/qqB3u//XHqE2T3BP10=\n+tokenSecretKey=data:base64,duaQk8phAAWZH5ohiZV92EE2/qqB3u//XHqE2T3BP10=\n \n # Enforce authorization\n authorizationEnabled=true",
    "previous_filename": "pulsar-flink-connector/src/test/resources/standalone.conf"
  }
]
