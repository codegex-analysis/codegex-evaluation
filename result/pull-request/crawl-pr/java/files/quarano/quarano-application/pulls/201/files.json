[
  {
    "sha": "cbb8fff4319832ac600ba77236e2ad6e95a7cb99",
    "filename": "backend/pom.xml",
    "status": "modified",
    "additions": 53,
    "deletions": 3,
    "changes": 56,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/pom.xml",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/pom.xml",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/pom.xml?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -30,7 +30,6 @@\n \t</properties>\n \n \t<profiles>\n-\n \t\t<profile>\n \t\t\t<id>localDev</id>\n \t\t\t<activation>\n@@ -198,6 +197,41 @@\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-web</artifactId>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.json</groupId>\n+\t\t\t<artifactId>json</artifactId>\n+\t\t\t<version>20201115</version>\n+\t\t</dependency>\n+\t\t<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->\n+\t\t<dependency>\n+\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n+\t\t\t<artifactId>jackson-databind</artifactId>\n+\t\t\t<version>2.11.2</version>\n+\t\t</dependency>\n+\t\t<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-webflux -->\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-webflux</artifactId>\n+\t\t\t<version>2.3.2.RELEASE</version>\n+\t\t</dependency>\n+\t\t<!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct -->\n+\t\t<dependency>\n+\t\t\t<groupId>org.mapstruct</groupId>\n+\t\t\t<artifactId>mapstruct</artifactId>\n+\t\t\t<version>1.4.2.Final</version>\n+\t\t</dependency>\n+\t\t<!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct-processor -->\n+\t\t<dependency>\n+\t\t\t<groupId>org.mapstruct</groupId>\n+\t\t\t<artifactId>mapstruct-processor</artifactId>\n+\t\t\t<version>1.4.2.Final</version>\n+\t\t</dependency>\n+\t\t<!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-rest-core -->\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.data</groupId>\n+\t\t\t<artifactId>spring-data-rest-core</artifactId>\n+\t\t\t<version>3.4.5</version>\n+\t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-starter-validation</artifactId>\n@@ -364,14 +398,30 @@\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-devtools</artifactId>\n+\t\t\t<optional>true</optional>\n \t\t</dependency>\n \t\t<dependency>\n \t\t\t<groupId>org.springframework.boot</groupId>\n \t\t\t<artifactId>spring-boot-configuration-processor</artifactId>\n \t\t\t<optional>true</optional>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.httpcomponents</groupId>\n+\t\t\t<artifactId>httpasyncclient</artifactId>\n+\t\t\t<version>4.1.4</version>\n+\t\t</dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-configuration-processor</artifactId>\n+            <version>2.4.1</version>\n+\t\t\t<optional>true</optional>\n+        </dependency>\n \n-\t</dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-quartz</artifactId>\n+\t\t</dependency>\n+    </dependencies>\n \n \t<build>\n \t\t<finalName>${project.artifactId}</finalName>\n@@ -497,6 +547,7 @@\n \t\t\t\t\t\t\t<goal>javadoc-no-fork</goal>\n \t\t\t\t\t\t</goals>\n \t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<failOnError>false</failOnError>\n \t\t\t\t\t\t\t<doclet>capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet</doclet>\n \t\t\t\t\t\t\t<docletArtifact>\n \t\t\t\t\t\t\t\t<groupId>capital.scalable</groupId>\n@@ -597,7 +648,6 @@\n \t\t\t\t\t</execution>\n \t\t\t\t</executions>\n \t\t\t</plugin>\n-\n \t\t</plugins>\n \n \t</build>"
  },
  {
    "sha": "8eeea63e2555a2d1cc407a5f751777c14109faba",
    "filename": "backend/src/main/java/quarano/Quarano.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/Quarano.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/Quarano.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/Quarano.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -8,6 +8,7 @@\n import quarano.core.web.RepositoryMappingModule;\n \n import java.lang.reflect.Field;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Properties;\n \n@@ -71,10 +72,9 @@ public static void main(String... args) throws Exception {\n \n \t\tClassPathResource resource = new ClassPathResource(\"git.properties\");\n \t\tProperties properties = PropertiesLoaderUtils.loadProperties(resource);\n-\n \t\tSpringApplication application = new SpringApplication(Quarano.class);\n \t\tapplication.setBanner(new QuaranoBanner(properties));\n-\t\tapplication.run(args);\n+\t\tApplicationContext ctx = application.run(args);\n \t}\n \n \t@Bean"
  },
  {
    "sha": "e268e486084b8df41d583e14ad3f3a597867d6a4",
    "filename": "backend/src/main/java/quarano/department/TrackedCase.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/department/TrackedCase.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/department/TrackedCase.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/department/TrackedCase.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -27,6 +27,7 @@\n import java.util.UUID;\n \n import javax.persistence.*;\n+import javax.validation.constraints.Null;\n \n import org.apache.commons.lang3.ObjectUtils;\n import org.jmolecules.ddd.types.Identifier;\n@@ -79,7 +80,9 @@\n \tprivate Quarantine quarantine = null;\n \n \t@Nullable\n-\t@Setter(AccessLevel.NONE) //\n+\tprivate @Getter @Setter String sormasUuid = null;\n+\n+\t@Nullable @Setter(AccessLevel.NONE) //\n \t@Column(name = \"quarantine_last_modified\") //\n \tprivate LocalDateTime quarantineLastModified = null;\n "
  },
  {
    "sha": "99be27b88d6adb55a78b95f650795ec950b37d8c",
    "filename": "backend/src/main/java/quarano/sormas_integration/SormasClient.java",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/SormasClient.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/SormasClient.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/SormasClient.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,104 @@\n+package quarano.sormas_integration;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.json.JSONException;\n+import org.springframework.boot.context.properties.ConstructorBinding;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.Base64Utils;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import quarano.sormas_integration.indexcase.SormasCase;\n+import quarano.sormas_integration.person.SormasContact;\n+import quarano.sormas_integration.person.SormasPerson;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * @author Federico Grasso\n+ */\n+@Slf4j\n+@EnableAsync\n+@ConstructorBinding\n+@RequiredArgsConstructor\n+@Component\n+public class SormasClient {\n+\n+    private WebClient client;\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    private String sormasUrl;\n+    private String sormasUser;\n+    private String sormasPass;\n+\n+    public SormasClient(String sormasUrl, String sormasUser, String sormasPass) {\n+\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, true);\n+\n+        this.sormasUrl = sormasUrl;\n+        this.sormasUser = sormasUser;\n+        this.sormasPass = sormasPass;\n+\n+        client = WebClient\n+                .create(this.sormasUrl);\n+    }\n+\n+    private WebClient.ResponseSpec GetRequest(String route){\n+        return client.get()\n+                .uri(route)\n+                .header(\"Authorization\", \"Basic \" + Base64Utils\n+                        .encodeToString((sormasUser + \":\" + sormasPass).getBytes(StandardCharsets.UTF_8)))\n+                .retrieve();\n+    }\n+\n+    private WebClient.ResponseSpec PostRequest(String route, Object bodyRequest){\n+        return client.post()\n+                .uri(route)\n+                .header(\"Authorization\", \"Basic \" + Base64Utils\n+                        .encodeToString((sormasUser + \":\" + sormasPass).getBytes(StandardCharsets.UTF_8)))\n+                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n+                .body(Mono.just(bodyRequest), Object.class)\n+                .retrieve();\n+    }\n+\n+    public Flux<SormasCase> getCases(Date since) throws JSONException {\n+        log.info(\"Getting cases since \" + since);\n+        return GetRequest(\"/cases/all/\" + since.getTime())\n+                .bodyToFlux(SormasCase.class);\n+    }\n+\n+    public Flux<SormasPerson> getPersons(Date since) throws JSONException {\n+        log.info(\"Getting persons since \" + since);\n+        return GetRequest(\"/persons/all/\" + since.getTime())\n+                .bodyToFlux(SormasPerson.class);\n+    }\n+\n+    public Mono<String[]> postPersons(List<SormasPerson> persons){\n+        log.info(\"Starting person insert on SORMAS...\");\n+        return PostRequest(\"/persons/push\", persons)\n+                .bodyToMono(String[].class);\n+    }\n+\n+    public Mono<String[]> postContacts(List<SormasContact> contacts){\n+        log.info(\"Starting contact insert on SORMAS...\");\n+        return PostRequest(\"/contacts/push\", contacts)\n+                .bodyToMono(String[].class);\n+    }\n+\n+    public Mono<String[]> postCases(List<SormasCase> cases){\n+        log.info(\"Starting case insert on SORMAS...\");\n+        return PostRequest(\"/cases/push\", cases)\n+                .bodyToMono(String[].class);\n+    }\n+}"
  },
  {
    "sha": "3b44da90e8536fadb575ba7352c60349f20c3573",
    "filename": "backend/src/main/java/quarano/sormas_integration/SynchContacts.java",
    "status": "added",
    "additions": 257,
    "deletions": 0,
    "changes": 257,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/SynchContacts.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/SynchContacts.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/SynchContacts.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,257 @@\n+package quarano.sormas_integration;\n+\n+import io.vavr.Tuple2;\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+import quarano.account.DepartmentRepository;\n+import quarano.core.web.MapperWrapper;\n+import quarano.department.TrackedCase;\n+import quarano.department.TrackedCaseRepository;\n+import quarano.sormas_integration.backlog.ContactsSyncBacklogRepository;\n+import quarano.sormas_integration.mapping.SormasContactDto;\n+import quarano.sormas_integration.mapping.SormasContactMapper;\n+import quarano.sormas_integration.mapping.SormasPersonDto;\n+import quarano.sormas_integration.mapping.SormasPersonMapper;\n+import quarano.sormas_integration.person.SormasContact;\n+import quarano.sormas_integration.person.SormasPerson;\n+import quarano.sormas_integration.report.ContactsSyncReport;\n+import quarano.sormas_integration.report.ContactsSyncReportRepository;\n+import quarano.sormas_integration.report.IndexSyncReport;\n+import quarano.tracking.*;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+@Data\n+@Setter(AccessLevel.NONE)\n+@RequiredArgsConstructor\n+@Component\n+public class SynchContacts {\n+\n+    private final @NonNull MapperWrapper mapper;\n+    private final @NonNull TrackedCaseRepository trackedCases;\n+    private final @NonNull TrackedPersonRepository trackedPersons;\n+    private final @NonNull DepartmentRepository departments;\n+    private final @NonNull ContactsSyncReportRepository reports;\n+    private final @NonNull ContactsSyncBacklogRepository backlog;\n+\n+    @org.springframework.beans.factory.annotation.Value(\"${quarano.sormas-integration.sormasurl:}\")\n+    private String sormasUrl;\n+    @org.springframework.beans.factory.annotation.Value(\"${quarano.sormas-integration.sormasuser:}\")\n+    private String sormasUser;\n+    @Value(\"${quarano.sormas-integration.sormaspass:}\")\n+    private String sormasPassword;\n+    @Value(\"${quarano.sormas-synch.master.contacts:}\")\n+    private String master;\n+\n+    @Scheduled(cron=\"${quarano.sormas-synch.interval.contacts:-}\")\n+    public void syncContactCases() {\n+        if(StringUtils.isNotBlank(sormasUrl)) {\n+            log.info(\"Contact cases synchronization started\");\n+            log.info(\"MASTER: \" + master);\n+\n+            // Store starting date of sync\n+            log.debug(\"Creating report instance...\");\n+            ContactsSyncReport newReport = new ContactsSyncReport(\n+                    0,\n+                    new Date(),\n+                    System.currentTimeMillis(),\n+                    ContactsSyncReport.ReportStatus.STARTED\n+            );\n+            log.info(\"Report instance created\");\n+\n+            // Retrieving reports number...\n+            long reportsCount = reports.count();\n+\n+            try{\n+                log.debug(\"Getting last report...\");\n+                List<ContactsSyncReport> report = reports.getOrderBySyncDateDesc();\n+\n+                // if reports table is not empty...\n+                if(!report.isEmpty()){\n+                    ContactsSyncReport singleReport = report.get(0);\n+\n+                    // if is already present an active report quit current synchronization\n+                    if(singleReport.getStatus().equals(IndexSyncReport.ReportStatus.STARTED)){\n+                        log.warn(\"Another schedule is already running... ABORTED\");\n+                        return;\n+                    }\n+                }\n+\n+                // Save current synchronization entry\n+                reports.save(newReport);\n+\n+                SormasClient sormasClient = new SormasClient(sormasUrl, sormasUser, sormasPassword);\n+\n+                // if master is sormas...\n+                if(master.equals(\"sormas\")) {\n+                }\n+                // if master is quarano\n+                else if(master.equals(\"quarano\")) {\n+                    // if reports table is empty\n+                    if(reportsCount == 0){\n+                        // start an initial synchronization\n+                        initialSynchFromQuarano(sormasClient);\n+                    }\n+                    // else\n+                    else{\n+                        // start a standard synchronization\n+                        syncCasesFromQuarano(sormasClient, newReport.getSyncDate());\n+                    }\n+                }\n+\n+                // Save report with success status\n+                newReport.setSyncTime(System.nanoTime() - newReport.getSyncTime());\n+                newReport.setStatus(ContactsSyncReport.ReportStatus.SUCCESS);\n+                reports.save(newReport);\n+                log.info(\"Report saved\");\n+            }\n+            catch(Exception ex){\n+                // Save report with failed status\n+                log.error(ex.getMessage(), ex);\n+                newReport.setSyncTime(System.nanoTime() - newReport.getSyncTime());\n+                newReport.setStatus(ContactsSyncReport.ReportStatus.FAILED);\n+                reports.save(newReport);\n+            }\n+        }\n+        else {\n+            log.warn(\"Sormas URL not present: NON-INTEGRATED MODE\");\n+        }\n+    }\n+\n+    // Initial synchronization from Quarano\n+    private void initialSynchFromQuarano(SormasClient sormasClient) {\n+\n+        // Get first tracked persons page\n+        Page<TrackedPerson> personsPage = trackedPersons.findAll(PageRequest.of(0, 1000));\n+\n+        int pages = personsPage.getTotalPages();\n+\n+        // for every page...\n+        for(int i = 0; i < pages; i++){\n+\n+            List<TrackedPerson> persons = personsPage.stream().collect(Collectors.toList());\n+\n+            List<TrackedPerson> indexPersons = new ArrayList<>();\n+\n+            // for every tracked person...\n+            for(int j = 0; j < persons.size(); j++){\n+                TrackedPerson trackedPerson = persons.get(j);\n+\n+                // Search Tracked Case related to person\n+                Optional<TrackedCase> trackedCaseQuery = trackedCases.findByTrackedPerson(trackedPerson);\n+\n+                if(trackedCaseQuery.isPresent()){\n+                    TrackedCase trackedCase = trackedCaseQuery.get();\n+                    // if case is of type CONTACT\n+                    if(trackedCase.isContactCase()){\n+                        // synchronize person\n+                        indexPersons.add(trackedPerson);\n+                    }\n+                }\n+            }\n+\n+            synchronizePersons(sormasClient, indexPersons);\n+            synchronizeContacts(sormasClient, indexPersons);\n+\n+            if(i + 1 < pages){\n+                personsPage = trackedPersons.findAll(PageRequest.of(i + 1, 1000));\n+            }\n+        }\n+    }\n+\n+    private void syncCasesFromQuarano(SormasClient sormasClient, Date synchDate) {\n+        // Determine IDs to sync\n+        ArrayList<UUID> entities = backlog.findBySyncDate(synchDate);\n+\n+        List<TrackedPerson> indexPersons = new ArrayList<>();\n+\n+        // for every tracked person...\n+        for(int i = 0; i < entities.size(); i++){\n+            UUID entity = entities.get(i);\n+\n+            // Fetch person from Database\n+            Optional<TrackedPerson> trackedPersonQuery = trackedPersons.findById(TrackedPerson.TrackedPersonIdentifier.of(entity));\n+\n+            if(trackedPersonQuery.isPresent()){\n+\n+                TrackedPerson trackedPerson = trackedPersonQuery.get();\n+\n+                // Search Tracked Case related to person\n+                Optional<TrackedCase> trackedCaseQuery = trackedCases.findByTrackedPerson(trackedPerson);\n+\n+                if(trackedCaseQuery.isPresent()){\n+\n+                    TrackedCase trackedCase = trackedCaseQuery.get();\n+\n+                    // if case is of type CONTACT\n+                    if(trackedCase.isContactCase()){\n+                        indexPersons.add(trackedPerson);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // synchronize persons\n+        List<TrackedPerson> successPersons = synchronizePersons(sormasClient, indexPersons);\n+        // synchronize cases\n+        synchronizeContacts(sormasClient, indexPersons);\n+\n+        successPersons.forEach(person -> {\n+            // Delete from backlog\n+            backlog.deleteAfterSynchronization(UUID.fromString(person.getId().toString()), synchDate);\n+        });\n+    }\n+\n+    private List<TrackedPerson> synchronizePersons(SormasClient sormasClient, List<TrackedPerson> persons){\n+        List<SormasPerson> sormasPersons = new ArrayList<>();\n+        List<TrackedPerson> successPersons = new ArrayList<>();\n+\n+        persons.forEach(person -> {\n+            if(StringUtils.isBlank(person.getSormasUuid())){\n+                // Create Sormas ID\n+                person.setSormasUuid(UUID.randomUUID().toString());\n+            }\n+\n+            // Map TrackedPerson to SormasPerson\n+            SormasPersonDto personDto = mapper.map(person, SormasPersonDto.class);\n+            SormasPerson sormasPerson = SormasPersonMapper.INSTANCE.map(personDto);\n+\n+            sormasPersons.add(sormasPerson);\n+        });\n+\n+        // Push to Sormas\n+        String[] response = sormasClient.postPersons(sormasPersons).block();\n+\n+        for(int i = 0; i < response.length; i++){\n+            if(response[i].equals(\"OK\")){\n+                trackedPersons.save(persons.get(i));\n+                successPersons.add(persons.get(i));\n+            }\n+        }\n+\n+        return successPersons;\n+    }\n+\n+    private void synchronizeContacts(SormasClient sormasClient, List<TrackedPerson> persons){\n+        List<SormasContact> sormasContacts = new ArrayList<>();\n+\n+        persons.forEach(person -> {\n+            // Map TrackedPerson to SormasContact\n+            SormasContactDto contactDto = mapper.map(person, SormasContactDto.class);\n+            SormasContact sormasContact = SormasContactMapper.INSTANCE.map(contactDto);\n+\n+            sormasContacts.add(sormasContact);\n+        });\n+\n+        // Push to Sormas\n+        String[] response = sormasClient.postContacts(sormasContacts).block();\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a6df6c5878e8f59d11032e00f54fcdf496fa08a4",
    "filename": "backend/src/main/java/quarano/sormas_integration/SynchIndex.java",
    "status": "added",
    "additions": 546,
    "deletions": 0,
    "changes": 546,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/SynchIndex.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/SynchIndex.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/SynchIndex.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,546 @@\n+package quarano.sormas_integration;\n+\n+import io.vavr.Tuple2;\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+import quarano.account.Department;\n+import quarano.account.DepartmentRepository;\n+import quarano.core.Address;\n+import quarano.core.EmailAddress;\n+import quarano.core.PhoneNumber;\n+import quarano.core.ZipCode;\n+import quarano.core.web.MapperWrapper;\n+import quarano.department.CaseType;\n+import quarano.department.TrackedCase;\n+import quarano.department.TrackedCaseRepository;\n+import quarano.sormas_integration.backlog.IndexSyncBacklogRepository;\n+import quarano.sormas_integration.indexcase.SormasCase;\n+import quarano.sormas_integration.indexcase.SormasCasePerson;\n+import quarano.sormas_integration.mapping.SormasCaseDto;\n+import quarano.sormas_integration.mapping.SormasCaseMapper;\n+import quarano.sormas_integration.mapping.SormasPersonDto;\n+import quarano.sormas_integration.mapping.SormasPersonMapper;\n+import quarano.sormas_integration.person.SormasPerson;\n+import quarano.sormas_integration.report.IndexSyncReport;\n+import quarano.sormas_integration.report.IndexSyncReportRepository;\n+import quarano.tracking.TrackedPerson;\n+import quarano.tracking.TrackedPersonRepository;\n+import quarano.tracking.web.TrackedPersonDto;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.LocalDate;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author Federico Grasso\n+ */\n+\n+@Slf4j\n+@Data\n+@Setter(AccessLevel.NONE)\n+@RequiredArgsConstructor\n+@Component\n+public class SynchIndex {\n+\n+    private @Getter @Setter(value = AccessLevel.PACKAGE) String cronSchedule;\n+    private final @NonNull MapperWrapper mapper;\n+    private final @NonNull TrackedCaseRepository trackedCases;\n+    private final @NonNull TrackedPersonRepository trackedPersons;\n+    private final @NonNull DepartmentRepository departments;\n+    private final @NonNull IndexSyncReportRepository reports;\n+    private final @NonNull IndexSyncBacklogRepository backlog;\n+    private HashMap<String, TrackedPerson> personsFromQuarano = new HashMap<>();\n+    private HashMap<String, Department> departmentsFromQuarano = new HashMap<>();\n+\n+    @Value(\"${quarano.sormas-integration.sormasurl:}\")\n+    private String sormasUrl;\n+    @Value(\"${quarano.sormas-integration.sormasuser:}\")\n+    private String sormasUser;\n+    @Value(\"${quarano.sormas-integration.sormaspass:}\")\n+    private String sormasPassword;\n+    @Value(\"${quarano.sormas-synch.master.indexcases:}\")\n+    private String master;\n+\n+    @Scheduled(cron=\"${quarano.sormas-synch.interval.indexcases:-}\")\n+    public void syncIndexCases() {\n+        if(StringUtils.isNotBlank(sormasUrl)){\n+            log.info(\"Index cases synchronization started\");\n+            log.info(\"MASTER: \" + master);\n+\n+            log.debug(\"Creating report instance...\");\n+            IndexSyncReport newReport = new IndexSyncReport(\n+                    0,\n+                    0,\n+                    new Date(),\n+                    System.currentTimeMillis(),\n+                    IndexSyncReport.ReportStatus.STARTED\n+            );\n+            log.info(\"Report instance created\");\n+\n+            // Retrieving reports number...\n+            long reportsCount = reports.count();\n+\n+            try{\n+                SormasClient sormasClient = new SormasClient(sormasUrl, sormasUser, sormasPassword);\n+\n+                log.debug(\"Getting last report...\");\n+                List<IndexSyncReport> report = reports.getOrderBySyncDateDesc();\n+\n+                Date since = new Date(0);\n+\n+                // if reports table is not empty...\n+                if(!report.isEmpty()){\n+                    IndexSyncReport singleReport = report.get(0);\n+                    log.debug(\"Report list is not empty\");\n+\n+                    // if is already present an active report quit current synchronization\n+                    if(singleReport.getStatus().equals(IndexSyncReport.ReportStatus.STARTED)){\n+                        log.warn(\"Another schedule is already running... ABORTED\");\n+                        return;\n+                    }\n+\n+                    List<IndexSyncReport> lastSuccessfulReport = reports.getSuccessfulOrderBySyncDateDesc();\n+\n+                    if(!lastSuccessfulReport.isEmpty()){\n+                        since = lastSuccessfulReport.get(0).getSyncDate();\n+                    }\n+                }\n+\n+                log.info(\"Last sync: \" + since);\n+\n+                // Save current synchronization entry\n+                reports.save(newReport);\n+\n+                // if master is sormas...\n+                if(master.equals(\"sormas\")) {\n+                    syncCasesFromSormas(sormasClient, since, newReport);\n+                }\n+                else if(master.equals(\"quarano\")) {\n+                    // if reports table is empty\n+                    if(reportsCount == 0){\n+                        // start an initial synchronization\n+                        initialSynchFromQuarano(sormasClient);\n+                    }\n+                    // else\n+                    else{\n+                        // start a standard synchronization\n+                        syncCasesFromQuarano(sormasClient, newReport.getSyncDate());\n+                    }\n+\n+                    // Save report with success status\n+                    newReport.setSyncTime(System.nanoTime() - newReport.getSyncTime());\n+                    newReport.setStatus(IndexSyncReport.ReportStatus.SUCCESS);\n+                    reports.save(newReport);\n+                    log.info(\"Report saved\");\n+                }\n+                else{\n+                    // Save report with success status\n+                    newReport.setSyncTime(System.nanoTime() - newReport.getSyncTime());\n+                    newReport.setStatus(IndexSyncReport.ReportStatus.SUCCESS);\n+                    reports.save(newReport);\n+                    log.info(\"Report saved\");\n+                }\n+            }\n+            catch(Exception ex){\n+                // Save report with failed status\n+                log.error(ex.getMessage(), ex);\n+                newReport.setSyncTime(System.nanoTime() - newReport.getSyncTime());\n+                newReport.setStatus(IndexSyncReport.ReportStatus.FAILED);\n+                reports.save(newReport);\n+            }\n+        }\n+        else{\n+            log.warn(\"Sormas URL not present: NON-INTEGRATED MODE\");\n+        }\n+    }\n+\n+    private void syncCasesFromSormas(SormasClient sormasClient, Date since, IndexSyncReport newReport){\n+        personsFromQuarano.clear();\n+        departmentsFromQuarano.clear();\n+\n+        Mono<List<SormasPerson>> persons = sormasClient.getPersons(since).collectList();\n+        Mono<List<SormasCase>> cases = sormasClient.getCases(since).collectList();\n+\n+        Mono.zip(cases, persons).flatMap(data -> {\n+            /*** FETCH ALL CASES THAT HAS BEEN CHANGED ***/\n+            List<SormasCase> casesResponse = data.getT1();\n+            /*** FETCH ALL PERSONS THAT HAS BEEN CHANGED ***/\n+            List<SormasPerson> personsResponse = data.getT2();\n+\n+            List<SormasPerson> remainingPersons = data.getT2();\n+\n+            newReport.setCasesNumber(casesResponse.size());\n+            newReport.setPersonsNumber(personsResponse.size());\n+\n+            log.info(casesResponse.size() + \" cases to handle\");\n+            log.info(personsResponse.size() + \" persons to handle\");\n+\n+            /*** for each case... ***/\n+            for(int i = 0; i < casesResponse.size(); i++){\n+                // current case\n+                SormasCase sormasCase = casesResponse.get(i);\n+                log.info(\"Case UUID: \" + sormasCase.getUuid());\n+                // person of current case\n+                SormasCasePerson casePerson = sormasCase.getPerson();\n+\n+                /*** Check if person already exists inside Quarano system ***/\n+                TrackedPerson personFromQuarano = getPersonFromQuarano(casePerson.getUuid());\n+\n+                /*** if exists... ***/\n+                if(personFromQuarano != null){\n+                    log.debug(\"Case person already exists\");\n+                    // Update TrackedPerson\n+\n+                    SormasPerson personRelatedToCase = personsResponse.stream()\n+                            .filter(person ->\n+                                    casePerson.getUuid().equals(person.getUuid()) &&\n+                                            person.getEmailAddress() != null && !person.getEmailAddress().equals(\"\")\n+                            )\n+                            .findFirst()\n+                            .orElse(null);\n+\n+                    log.debug(\"Updating tracked person...\");\n+\n+                    if(personRelatedToCase != null){\n+                        personFromQuarano = updatePerson(personFromQuarano, personRelatedToCase);\n+                        if(checkPerson(personFromQuarano)) {\n+                            trackedPersons.save(personFromQuarano);\n+                            log.debug(\"Tracked person updated\");\n+                        }\n+\n+                        log.debug(\"Retrieving person cases...\");\n+                        Optional<TrackedCase> personCase = trackedCases.findByTrackedPerson(personFromQuarano);\n+                        log.debug(\"Person cases retrieved\");\n+\n+                        /***\n+                         * If TrackedPerson has TrackedCase of CaseType INDEX\n+                         * Transform ContactCase to IndexCase\n+                         ***/\n+                        if(!personCase.get().getType().equals(CaseType.INDEX)){\n+                            TrackedCase modifiedCase = personCase.get();\n+                            modifiedCase.setType(CaseType.INDEX);\n+                            trackedCases.save(modifiedCase);\n+                            log.debug(\"Case related to person saved to INDEX\");\n+                        }\n+\n+                        remainingPersons.remove(personRelatedToCase);\n+                    }\n+                }\n+                /*** else... ***/\n+                else {\n+                    /*** Find according person from Sormas person response ***/\n+                    SormasPerson personRelatedToCase = personsResponse.stream()\n+                            .filter(person ->\n+                                    casePerson.getUuid().equals(person.getUuid()) &&\n+                                            person.getEmailAddress() != null && !person.getEmailAddress().equals(\"\")\n+                            )\n+                            .findFirst()//.findAny()\n+                            .orElse(null);\n+\n+                    if (personRelatedToCase != null) {\n+                        /*** Store new TrackedCase with type INDEX and new TrackedPerson ***/\n+                        log.debug(\"Case person is new on Quarano\");\n+                        TrackedPersonDto personDto = mapper.map(SormasPersonMapper.INSTANCE.map(personRelatedToCase), TrackedPersonDto.class);\n+                        TrackedPerson trackedPerson = mapper.map(personDto, TrackedPerson.class);\n+\n+                        if(checkPerson(trackedPerson)){\n+                            if(sormasCase.getDistrict() != null){\n+                                Department department = getDepartment(sormasCase.getDistrict().getCaption());\n+\n+                                SormasCaseDto caseDto = mapper.map(SormasCaseMapper.INSTANCE.map(sormasCase), SormasCaseDto.class);\n+                                TrackedCase trackedCase = mapper.map(caseDto, new TrackedCase(trackedPerson, CaseType.INDEX, department));\n+                                trackedCases.save(trackedCase);\n+                                log.info(\"Case saved\");\n+                            }\n+                        }\n+                    }\n+                    else{\n+                        log.warn(\"Person related to case \" + sormasCase.getUuid() + \"does not have an Email or is non present in persons response\");\n+                    }\n+\n+                    remainingPersons.remove(personRelatedToCase);\n+                }\n+            }\n+            /*** Handle Persons not handled above ***/\n+            for(int i = 0; i < remainingPersons.size(); i++){\n+                SormasPerson person = remainingPersons.get(i);\n+\n+                TrackedPerson personFromQuarano = getPersonFromQuarano(person.getUuid());\n+\n+                if(personFromQuarano != null){\n+                    personFromQuarano = updatePerson(personFromQuarano, person);\n+                    if(checkPerson(personFromQuarano)) {\n+                        trackedPersons.save(personFromQuarano);\n+                        log.debug(\"Tracked person updated\");\n+                    }\n+                }\n+            }\n+\n+            /***\n+             * Update since value\n+             ***/\n+\n+            newReport.setSyncTime(System.nanoTime() - newReport.getSyncTime());\n+            newReport.setStatus(IndexSyncReport.ReportStatus.SUCCESS);\n+            reports.save(newReport);\n+            log.info(\"Report saved\");\n+\n+            return Mono.empty();\n+        }).subscribe();\n+    }\n+\n+    private Boolean checkPerson(TrackedPerson quaranoEntity){\n+        if(quaranoEntity.getAddress() == null){\n+            log.warn(\"Person with UUID \" + quaranoEntity.getSormasUuid() + \" does not have a valid address\");\n+        }\n+        if(quaranoEntity.getMobilePhoneNumber() == null){\n+            log.warn(\"Person with UUID \" + quaranoEntity.getSormasUuid() + \" does not have a valid phone\");\n+        }\n+        if(quaranoEntity.getDateOfBirth() == null){\n+            log.warn(\"Person with UUID \" + quaranoEntity.getSormasUuid() + \" does not have a valid birth date\");\n+        }\n+        if(quaranoEntity.getEmailAddress() == null){\n+            log.warn(\"Person with UUID \" + quaranoEntity.getSormasUuid() + \" does not have an email address\");\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private Department getDepartment(String name){\n+        Department department = getDepartmentFromQuarano(name);\n+\n+        if(department == null){\n+            log.warn(\"Department\" + name + \"not exists\");\n+            department = new Department(name);\n+            departments.save(department);\n+            log.debug(\"Department saved\");\n+        }\n+\n+        return department;\n+    }\n+\n+    private TrackedPerson getPersonFromQuarano(String uuid){\n+        TrackedPerson trackedPerson = personsFromQuarano.get(uuid);\n+\n+        if(trackedPerson == null){\n+            Optional<TrackedPerson> existingPerson = trackedPersons.findBySormasUuid(uuid);\n+\n+            if(existingPerson.isPresent()){\n+                trackedPerson = existingPerson.get();\n+                personsFromQuarano.put(uuid, trackedPerson);\n+                return trackedPerson;\n+            }\n+        }\n+\n+        return trackedPerson;\n+    }\n+\n+    private Department getDepartmentFromQuarano(String name){\n+        Department department = departmentsFromQuarano.get(name);\n+\n+        if(department == null){\n+            log.debug(\"Check district \" + name);\n+            Optional<Department> departmentQuery = departments.findByName(name);\n+\n+            if(departmentQuery.isPresent()){\n+                department = departmentQuery.get();\n+                departmentsFromQuarano.put(name, department);\n+                return department;\n+            }\n+        }\n+\n+        return department;\n+    }\n+\n+    private TrackedPerson updatePerson(TrackedPerson trackedPerson, SormasPerson sormasPerson){\n+        if(StringUtils.isNotBlank(sormasPerson.getEmailAddress())){\n+            trackedPerson.setEmailAddress(EmailAddress.of(sormasPerson.getEmailAddress()));\n+        }\n+\n+        if(StringUtils.isNotBlank(sormasPerson.getPhone())){\n+            trackedPerson.setPhoneNumber(PhoneNumber.of(sormasPerson.getPhone()));\n+            trackedPerson.setMobilePhoneNumber(PhoneNumber.of(sormasPerson.getPhone()));\n+        }\n+\n+        if(\n+                sormasPerson.getBirthdateYYYY() != null &&\n+                        sormasPerson.getBirthdateMM() != null &&\n+                        sormasPerson.getBirthdateDD() != null\n+        ) {\n+            trackedPerson.setDateOfBirth(LocalDate.of(\n+                    sormasPerson.getBirthdateYYYY(),\n+                    sormasPerson.getBirthdateMM(),\n+                    sormasPerson.getBirthdateDD()\n+            ));\n+        }\n+\n+        try{\n+            if(StringUtils.isNoneBlank(\n+                    sormasPerson.getAddress().getStreet(),\n+                    sormasPerson.getAddress().getCity(),\n+                    sormasPerson.getAddress().getPostalCode()\n+            ))\n+            {\n+                trackedPerson.setAddress(new Address(\n+                        sormasPerson.getAddress().getStreet(),\n+                        Address.HouseNumber.NONE,\n+                        sormasPerson.getAddress().getCity(),\n+                        ZipCode.of(sormasPerson.getAddress().getPostalCode())\n+                ));\n+            }\n+        }\n+        catch (IllegalArgumentException ex){\n+            log.warn(\"Illegal Address\");\n+        }\n+\n+        return trackedPerson;\n+    }\n+\n+    // Initial synchronization from Quarano\n+    private void initialSynchFromQuarano(SormasClient sormasClient) {\n+\n+        // Get first tracked persons page\n+        Page<TrackedPerson> personsPage = trackedPersons.findAll(PageRequest.of(0, 1000));\n+\n+        int pages = personsPage.getTotalPages();\n+\n+        // for every page...\n+        for(int i = 0; i < pages; i++){\n+            List<TrackedPerson> persons = personsPage.stream().collect(Collectors.toList());\n+\n+            List<TrackedPerson> indexPersons = new ArrayList<>();\n+            List<Tuple2<TrackedCase, TrackedPerson>> indexCases = new ArrayList<>();\n+\n+            // for every tracked person...\n+            for(int j = 0; j < persons.size(); j++){\n+                TrackedPerson trackedPerson = persons.get(j);\n+\n+                // Search Tracked Case related to person\n+                Optional<TrackedCase> trackedCaseQuery = trackedCases.findByTrackedPerson(trackedPerson);\n+\n+                if(trackedCaseQuery.isPresent()){\n+                    TrackedCase trackedCase = trackedCaseQuery.get();\n+                    // if case is of type INDEX\n+                    if(trackedCase.isIndexCase()){\n+                        // synchronize person\n+                        indexPersons.add(trackedPerson);\n+                        indexCases.add(new Tuple2<>(trackedCase, trackedPerson));\n+                    }\n+                }\n+            }\n+\n+            synchronizePersons(sormasClient, indexPersons);\n+            synchronizeCases(sormasClient, indexCases);\n+\n+            if(i + 1 < pages){\n+                personsPage = trackedPersons.findAll(PageRequest.of(i + 1, 1000));\n+            }\n+        }\n+    }\n+\n+    private void syncCasesFromQuarano(SormasClient sormasClient, Date synchDate) {\n+        // Determine IDs to sync\n+        ArrayList<UUID> entities = backlog.findBySyncDate(synchDate);\n+\n+        List<TrackedPerson> indexPersons = new ArrayList<>();\n+        List<Tuple2<TrackedCase, TrackedPerson>> indexCases = new ArrayList<>();\n+\n+        for(int i = 0; i < entities.size(); i++){\n+            UUID entity = entities.get(i);\n+\n+            // Fetch person from Database\n+            Optional<TrackedPerson> trackedPersonQuery = trackedPersons.findById(TrackedPerson.TrackedPersonIdentifier.of(entity));\n+\n+            if(trackedPersonQuery.isPresent()){\n+\n+                TrackedPerson trackedPerson = trackedPersonQuery.get();\n+\n+                // Search Tracked Case related to person\n+                Optional<TrackedCase> trackedCaseQuery = trackedCases.findByTrackedPerson(trackedPerson);\n+\n+                if(trackedCaseQuery.isPresent()){\n+\n+                    TrackedCase trackedCase = trackedCaseQuery.get();\n+                    // if case is of type INDEX\n+                    if(trackedCase.isIndexCase()){\n+\n+                        indexPersons.add(trackedPerson);\n+                        indexCases.add(new Tuple2<>(trackedCase, trackedPerson));\n+                    }\n+                }\n+            }\n+        }\n+\n+        // synchronize persons\n+        List<TrackedPerson> successPersons = synchronizePersons(sormasClient, indexPersons);\n+        // synchronize cases\n+        synchronizeCases(sormasClient, indexCases);\n+\n+        successPersons.forEach(person -> {\n+            // Delete from backlog\n+            backlog.deleteAfterSynchronization(UUID.fromString(person.getId().toString()), synchDate);\n+        });\n+    }\n+\n+    private List<TrackedPerson> synchronizePersons(SormasClient sormasClient, List<TrackedPerson> persons){\n+        List<SormasPerson> sormasPersons = new ArrayList<>();\n+        List<TrackedPerson> successPersons = new ArrayList<>();\n+\n+        persons.forEach(person -> {\n+            if(StringUtils.isBlank(person.getSormasUuid())){\n+                // Create Sormas ID\n+                person.setSormasUuid(UUID.randomUUID().toString());\n+            }\n+\n+            // Map TrackedPerson to SormasPerson\n+            SormasPersonDto personDto = mapper.map(person, SormasPersonDto.class);\n+            SormasPerson sormasPerson = SormasPersonMapper.INSTANCE.map(personDto);\n+\n+            sormasPersons.add(sormasPerson);\n+        });\n+\n+        // Push to Sormas\n+        String[] response = sormasClient.postPersons(sormasPersons).block();\n+\n+        for(int i = 0; i < response.length; i++){\n+            if(response[i].equals(\"OK\")){\n+                trackedPersons.save(persons.get(i));\n+                successPersons.add(persons.get(i));\n+            }\n+        }\n+\n+        return successPersons;\n+    }\n+\n+    private void synchronizeCases(SormasClient sormasClient, List<Tuple2<TrackedCase, TrackedPerson>> indexCases){\n+        List<SormasCase> sormasCases = new ArrayList<>();\n+\n+        indexCases.forEach(caze -> {\n+            if(StringUtils.isBlank(caze._1.getSormasUuid())){\n+                // Create Sormas ID\n+                caze._1.setSormasUuid(UUID.randomUUID().toString());\n+            }\n+            // Map TrackedCase to SormasCase\n+            SormasCase sormasCase = SormasCaseMapper.INSTANCE.map(caze._1, caze._2);\n+\n+            sormasCases.add(sormasCase);\n+        });\n+\n+        // Push to Sormas\n+        String[] response = sormasClient.postCases(sormasCases).block();\n+\n+        for(int i = 0; i < response.length; i++){\n+            if(response[i].equals(\"OK\")){\n+                trackedCases.save(indexCases.get(i)._1());\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "e52955a383f6c571fbad43fb7e2fe81a1f19c1e0",
    "filename": "backend/src/main/java/quarano/sormas_integration/backlog/ContactsSyncBacklogRepository.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/backlog/ContactsSyncBacklogRepository.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/backlog/ContactsSyncBacklogRepository.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/backlog/ContactsSyncBacklogRepository.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,27 @@\n+package quarano.sormas_integration.backlog;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * Contacts Backlog Table repository\n+ */\n+public interface ContactsSyncBacklogRepository extends JpaRepository<ContactsSynchBacklog, Long> {\n+    // Returns all modified or inserted records after specified date\n+    @Query(\"select distinct b.id from ContactsSynchBacklog b where b.syncDate <= :syncDate\")\n+    ArrayList<UUID> findBySyncDate(Date syncDate);\n+\n+    // Delete all entries related to specified UUID after specified date\n+    @Transactional\n+    @Modifying\n+    @Query(\"delete from ContactsSynchBacklog b where b.syncDate <= :syncDate and b.id = :uuid\")\n+    void deleteAfterSynchronization(UUID uuid, Date syncDate);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "3f6dff341be5fb50ffb3816c5e4a2e55c8a22e6f",
    "filename": "backend/src/main/java/quarano/sormas_integration/backlog/ContactsSynchBacklog.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/backlog/ContactsSynchBacklog.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/backlog/ContactsSynchBacklog.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/backlog/ContactsSynchBacklog.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,31 @@\n+package quarano.sormas_integration.backlog;\n+\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.persistence.*;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * Contacts Backlog Table\n+ */\n+\n+@Entity\n+@Table(name = \"contacts_synch_backlog\")\n+@Setter(AccessLevel.PUBLIC)\n+@Data\n+@Slf4j\n+@NoArgsConstructor(force = true, access = AccessLevel.PUBLIC)\n+@AllArgsConstructor(access = AccessLevel.PUBLIC)\n+public class ContactsSynchBacklog {\n+    @NonNull\n+    private UUID id;\n+\n+    @Id\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @NonNull\n+    private Date syncDate;\n+}"
  },
  {
    "sha": "e8617a38c5d0409fa51eea9ae09ed5f8d4b8481c",
    "filename": "backend/src/main/java/quarano/sormas_integration/backlog/IndexSyncBacklogRepository.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/backlog/IndexSyncBacklogRepository.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/backlog/IndexSyncBacklogRepository.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/backlog/IndexSyncBacklogRepository.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,30 @@\n+package quarano.sormas_integration.backlog;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+/**\n+ * @author Federico Grasso\n+ */\n+\n+/**\n+ * Index Backlog Table repository\n+ */\n+\n+public interface IndexSyncBacklogRepository extends JpaRepository<IndexSynchBacklog, Long> {\n+    // Returns all modified or inserted records after specified date\n+    @Query(\"select distinct b.id from IndexSynchBacklog b where b.syncDate <= :syncDate\")\n+    ArrayList<UUID> findBySyncDate(Date syncDate);\n+\n+    // Delete all entries related to specified UUID after specified date\n+    @Transactional\n+    @Modifying\n+    @Query(\"delete from IndexSynchBacklog b where b.syncDate <= :syncDate and b.id = :uuid\")\n+    void deleteAfterSynchronization(UUID uuid, Date syncDate);\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "8572dd586091348104f214f10bf1e2b68b363494",
    "filename": "backend/src/main/java/quarano/sormas_integration/backlog/IndexSynchBacklog.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/backlog/IndexSynchBacklog.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/backlog/IndexSynchBacklog.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/backlog/IndexSynchBacklog.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,32 @@\n+package quarano.sormas_integration.backlog;\n+\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.persistence.*;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+/**\n+ * @author Federico Grasso\n+ */\n+\n+/**\n+ * Index Backlog Table\n+ */\n+@Entity\n+@Table(name = \"index_synch_backlog\")\n+@Setter(AccessLevel.PUBLIC)\n+@Data\n+@Slf4j\n+@NoArgsConstructor(force = true, access = AccessLevel.PUBLIC)\n+@AllArgsConstructor(access = AccessLevel.PUBLIC)\n+public class IndexSynchBacklog {\n+    @NonNull\n+    private UUID id;\n+\n+    @Id\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @NonNull\n+    private Date syncDate;\n+}"
  },
  {
    "sha": "33f167ccd6da18a4617d5177cc19f8586e5fe4c6",
    "filename": "backend/src/main/java/quarano/sormas_integration/indexcase/SormasCase.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/indexcase/SormasCase.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/indexcase/SormasCase.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/indexcase/SormasCase.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,76 @@\n+package quarano.sormas_integration.indexcase;\n+\n+import lombok.*;\n+\n+import java.util.Date;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * SORMAS Case model\n+ */\n+@Data\n+@AllArgsConstructor(access = AccessLevel.PUBLIC)\n+@NoArgsConstructor(access = AccessLevel.PUBLIC)\n+public class SormasCase {\n+    private String uuid;\n+    private Date reportDate;\n+    private Date quarantineTo;\n+    private Date quarantineFrom;\n+    private SormasCasePerson person;\n+    private SormasCaseDistrict district;\n+\n+    /**\n+     * Getters and setter\n+     * (Already defined with Lombok\n+     * but re-defined to make properties accessible by MapStruct)\n+     */\n+\n+    public String getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(String uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public Date getReportDate() {\n+        return reportDate;\n+    }\n+\n+    public void setReportDate(Date reportDate) {\n+        this.reportDate = reportDate;\n+    }\n+\n+    public Date getQuarantineTo() {\n+        return quarantineTo;\n+    }\n+\n+    public void setQuarantineTo(Date quarantineTo) {\n+        this.quarantineTo = quarantineTo;\n+    }\n+\n+    public Date getQuarantineFrom() {\n+        return quarantineFrom;\n+    }\n+\n+    public void setQuarantineFrom(Date quarantineFrom) {\n+        this.quarantineFrom = quarantineFrom;\n+    }\n+\n+    public SormasCasePerson getPerson() {\n+        return person;\n+    }\n+\n+    public void setPerson(SormasCasePerson person) {\n+        this.person = person;\n+    }\n+\n+    public SormasCaseDistrict getDistrict() {\n+        return district;\n+    }\n+\n+    public void setDistrict(SormasCaseDistrict district) {\n+        this.district = district;\n+    }\n+}"
  },
  {
    "sha": "c9268514b08b472f99b24e9ab3a14542a91f1d98",
    "filename": "backend/src/main/java/quarano/sormas_integration/indexcase/SormasCaseDistrict.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/indexcase/SormasCaseDistrict.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/indexcase/SormasCaseDistrict.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/indexcase/SormasCaseDistrict.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,41 @@\n+package quarano.sormas_integration.indexcase;\n+\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * SORMAS Case District\n+ */\n+@Data\n+@RequiredArgsConstructor(staticName = \"of\")\n+@AllArgsConstructor(access = AccessLevel.PUBLIC)\n+public class SormasCaseDistrict {\n+    private String uuid;\n+    private String caption;\n+\n+    /**\n+     * Getters and setter\n+     * (Already defined with Lombok\n+     * but re-defined to make properties accessible by MapStruct)\n+     */\n+\n+    public String getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(String uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public String getCaption() {\n+        return caption;\n+    }\n+\n+    public void setCaption(String caption) {\n+        this.caption = caption;\n+    }\n+}"
  },
  {
    "sha": "ec5dac704ea44f6ee45d8c3d81e40946091ae4c8",
    "filename": "backend/src/main/java/quarano/sormas_integration/indexcase/SormasCasePerson.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/indexcase/SormasCasePerson.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/indexcase/SormasCasePerson.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/indexcase/SormasCasePerson.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,50 @@\n+package quarano.sormas_integration.indexcase;\n+\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * SORMAS Case Person model\n+ */\n+@Data\n+@RequiredArgsConstructor(staticName = \"of\")\n+@AllArgsConstructor(access = AccessLevel.PUBLIC)\n+public class SormasCasePerson {\n+    private String uuid;\n+    private String firstName;\n+    private String lastName;\n+\n+    /**\n+     * Getters and setter\n+     * (Already defined with Lombok\n+     * but re-defined to make properties accessible by MapStruct)\n+     */\n+\n+    public String getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(String uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+}"
  },
  {
    "sha": "d7a8e7e97fe85279a74b87b30ae18a362a0b4f45",
    "filename": "backend/src/main/java/quarano/sormas_integration/listeners/HibernateListenerConfigurer.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/listeners/HibernateListenerConfigurer.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/listeners/HibernateListenerConfigurer.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/listeners/HibernateListenerConfigurer.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,32 @@\n+package quarano.sormas_integration.listeners;\n+\n+import org.hibernate.event.service.spi.EventListenerRegistry;\n+import org.hibernate.event.spi.EventType;\n+import org.hibernate.internal.SessionFactoryImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.PersistenceUnit;\n+\n+@Component\n+public class HibernateListenerConfigurer {\n+\n+    @PersistenceUnit\n+    private EntityManagerFactory emf;\n+\n+    @Inject\n+    private UpdateListener updateListener;\n+    @Inject\n+    private InsertListener insertListener;\n+\n+    @PostConstruct\n+    protected void init() {\n+        SessionFactoryImpl sessionFactory = emf.unwrap(SessionFactoryImpl.class);\n+        EventListenerRegistry registry = sessionFactory.getServiceRegistry().getService(EventListenerRegistry.class);\n+        registry.getEventListenerGroup(EventType.POST_UPDATE).appendListener(updateListener);\n+        registry.getEventListenerGroup(EventType.POST_INSERT).appendListener(insertListener);\n+    }\n+}"
  },
  {
    "sha": "e8bf8d32c01f612678060883be08745303cb10bc",
    "filename": "backend/src/main/java/quarano/sormas_integration/listeners/InsertListener.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/listeners/InsertListener.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/listeners/InsertListener.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/listeners/InsertListener.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,63 @@\n+package quarano.sormas_integration.listeners;\n+\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.hibernate.FlushMode;\n+import org.hibernate.event.spi.PostInsertEvent;\n+import org.hibernate.event.spi.PostInsertEventListener;\n+import org.hibernate.persister.entity.EntityPersister;\n+import org.springframework.stereotype.Component;\n+import quarano.sormas_integration.backlog.ContactsSyncBacklogRepository;\n+import quarano.sormas_integration.backlog.ContactsSynchBacklog;\n+import quarano.sormas_integration.backlog.IndexSyncBacklogRepository;\n+import quarano.sormas_integration.backlog.IndexSynchBacklog;\n+import quarano.sormas_integration.report.IndexSyncReport;\n+import quarano.tracking.TrackedPerson;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+@Slf4j\n+@RequiredArgsConstructor\n+@Component\n+class InsertListener implements PostInsertEventListener {\n+\n+    @Override\n+    public void onPostInsert(PostInsertEvent postInsertEvent) {\n+        if(postInsertEvent.getEntity() instanceof TrackedPerson){\n+\n+            log.debug(\"Trigger invoked...\");\n+\n+            postInsertEvent.getSession().createNativeQuery(\n+                    \"INSERT INTO index_synch_backlog (id, sync_date) \" +\n+                            \"VALUES (:id, :sync_date)\")\n+                    .setParameter(\"id\", ((TrackedPerson) postInsertEvent.getEntity())\n+                            .getId()\n+                            .toString())\n+                    .setParameter(\"sync_date\", new Date())\n+                    .setFlushMode(FlushMode.MANUAL)\n+                    .executeUpdate();\n+\n+            postInsertEvent.getSession().createNativeQuery(\n+                    \"INSERT INTO contacts_synch_backlog (id, sync_date) \" +\n+                            \"VALUES (:id, :sync_date)\")\n+                    .setParameter(\"id\", ((TrackedPerson) postInsertEvent.getEntity())\n+                            .getId()\n+                            .toString())\n+                    .setParameter(\"sync_date\", new Date())\n+                    .setFlushMode(FlushMode.MANUAL)\n+                    .executeUpdate();\n+        }\n+    }\n+\n+    @Override\n+    public boolean requiresPostCommitHanding(EntityPersister entityPersister) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean requiresPostCommitHandling(EntityPersister persister) {\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "1ce9ef56bccda60933cf768dd6ce8952bceee676",
    "filename": "backend/src/main/java/quarano/sormas_integration/listeners/UpdateListener.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/listeners/UpdateListener.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/listeners/UpdateListener.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/listeners/UpdateListener.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,62 @@\n+package quarano.sormas_integration.listeners;\n+\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.hibernate.FlushMode;\n+import org.hibernate.event.spi.PostUpdateEvent;\n+import org.hibernate.event.spi.PostUpdateEventListener;\n+import org.hibernate.persister.entity.EntityPersister;\n+import org.springframework.stereotype.Component;\n+import quarano.sormas_integration.backlog.ContactsSyncBacklogRepository;\n+import quarano.sormas_integration.backlog.ContactsSynchBacklog;\n+import quarano.sormas_integration.backlog.IndexSyncBacklogRepository;\n+import quarano.sormas_integration.backlog.IndexSynchBacklog;\n+import quarano.tracking.TrackedPerson;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+@Slf4j\n+@RequiredArgsConstructor\n+@Component\n+class UpdateListener implements PostUpdateEventListener {\n+\n+    @Override\n+    public void onPostUpdate(PostUpdateEvent postUpdateEvent) {\n+        if(postUpdateEvent.getEntity() instanceof TrackedPerson){\n+\n+            log.debug(\"Trigger invoked...\");\n+\n+            postUpdateEvent.getSession().createNativeQuery(\n+                    \"INSERT INTO index_synch_backlog (id, sync_date) \" +\n+                            \"VALUES (:id, :sync_date)\")\n+                    .setParameter(\"id\", ((TrackedPerson) postUpdateEvent.getEntity())\n+                            .getId()\n+                            .toString())\n+                    .setParameter(\"sync_date\", new Date())\n+                    .setFlushMode(FlushMode.MANUAL)\n+                    .executeUpdate();\n+\n+            postUpdateEvent.getSession().createNativeQuery(\n+                    \"INSERT INTO contacts_synch_backlog (id, sync_date) \" +\n+                            \"VALUES (:id, :sync_date)\")\n+                    .setParameter(\"id\", ((TrackedPerson) postUpdateEvent.getEntity())\n+                            .getId()\n+                            .toString())\n+                    .setParameter(\"sync_date\", new Date())\n+                    .setFlushMode(FlushMode.MANUAL)\n+                    .executeUpdate();\n+        }\n+    }\n+\n+    @Override\n+    public boolean requiresPostCommitHanding(EntityPersister entityPersister) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean requiresPostCommitHandling(EntityPersister persister) {\n+        return false;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "169956079b7d442fa4c5c2d036816785becf8fe7",
    "filename": "backend/src/main/java/quarano/sormas_integration/mapping/SormasCaseDto.java",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasCaseDto.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasCaseDto.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/mapping/SormasCaseDto.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,71 @@\n+package quarano.sormas_integration.mapping;\n+\n+import java.time.LocalDate;\n+\n+public class SormasCaseDto {\n+    private String lastName;\n+    private String firstName;\n+    private LocalDate testDate;\n+    private LocalDate quarantineStartDate;\n+    private LocalDate quarantineEndDate;\n+\n+    private boolean infected = true;\n+\n+    private String sormasUuid;\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public LocalDate getTestDate() {\n+        return testDate;\n+    }\n+\n+    public void setTestDate(LocalDate testDate) {\n+        this.testDate = testDate;\n+    }\n+\n+    public LocalDate getQuarantineStartDate() {\n+        return quarantineStartDate;\n+    }\n+\n+    public void setQuarantineStartDate(LocalDate quarantineStartDate) {\n+        this.quarantineStartDate = quarantineStartDate;\n+    }\n+\n+    public LocalDate getQuarantineEndDate() {\n+        return quarantineEndDate;\n+    }\n+\n+    public void setQuarantineEndDate(LocalDate quarantineEndDate) {\n+        this.quarantineEndDate = quarantineEndDate;\n+    }\n+\n+    public boolean isInfected() {\n+        return infected;\n+    }\n+\n+    public void setInfected(boolean infected) {\n+        this.infected = infected;\n+    }\n+\n+    public String getSormasUuid() {\n+        return sormasUuid;\n+    }\n+\n+    public void setSormasUuid(String sormasUuid) {\n+        this.sormasUuid = sormasUuid;\n+    }\n+}"
  },
  {
    "sha": "522e3a68c50f0d5fc3bf433c5ac175c15881a981",
    "filename": "backend/src/main/java/quarano/sormas_integration/mapping/SormasCaseMapper.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasCaseMapper.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasCaseMapper.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/mapping/SormasCaseMapper.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,76 @@\n+package quarano.sormas_integration.mapping;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.factory.Mappers;\n+import quarano.department.TrackedCase;\n+import quarano.sormas_integration.indexcase.SormasCase;\n+import quarano.sormas_integration.indexcase.SormasCaseDistrict;\n+import quarano.sormas_integration.indexcase.SormasCasePerson;\n+import quarano.tracking.TrackedPerson;\n+\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.UUID;\n+\n+/**\n+ * @author Federico Grasso\n+ */\n+@Mapper\n+public interface SormasCaseMapper {\n+    SormasCaseMapper INSTANCE = Mappers.getMapper( SormasCaseMapper.class );\n+\n+    @Mapping(target = \"lastName\", source = \"person.lastName\")\n+    @Mapping(target = \"firstName\", source = \"person.firstName\")\n+    @Mapping(target = \"sormasUuid\", source = \"uuid\")\n+    @Mapping(target = \"testDate\", source = \"reportDate\")\n+    @Mapping(target = \"quarantineStartDate\", source = \"quarantineTo\")\n+    @Mapping(target = \"quarantineEndDate\", source = \"quarantineFrom\")\n+    SormasCaseDto map(SormasCase source);\n+\n+    @Mapping(target = \"uuid\", expression = \"java(getUUID(source))\")\n+    @Mapping(target = \"person\", expression = \"java(getPerson(person))\")\n+    @Mapping(target = \"district\", expression = \"java(getDistrict(source))\")\n+    @Mapping(target = \"reportDate\", expression = \"java(getReportDate(source))\")\n+    @Mapping(target = \"quarantineTo\", expression = \"java(getQuarantineTo(source))\")\n+    @Mapping(target = \"quarantineFrom\", expression = \"java(getQuarantineFrom(source))\")\n+    SormasCase map(TrackedCase source, TrackedPerson person);\n+\n+    default String getUUID(TrackedCase source){\n+        return source.getSormasUuid();\n+    }\n+\n+    default SormasCasePerson getPerson(TrackedPerson source){\n+        return new SormasCasePerson(\n+                source.getSormasUuid(),\n+                source.getFirstName(),\n+                source.getLastName()\n+        );\n+    }\n+\n+    default SormasCaseDistrict getDistrict(TrackedCase source){\n+        return new SormasCaseDistrict(\n+                UUID.randomUUID().toString(),\n+                source.getDepartment().getName()\n+        );\n+    }\n+\n+    default Date getQuarantineTo(TrackedCase source){\n+        return convertToDateViaInstant(source.getQuarantine().getTo());\n+    }\n+\n+    default Date getQuarantineFrom(TrackedCase source){\n+        return convertToDateViaInstant(source.getQuarantine().getFrom());\n+    }\n+\n+    default Date getReportDate(TrackedCase source){\n+        return convertToDateViaInstant(source.getTestResult().getTestDate());\n+    }\n+\n+    default Date convertToDateViaInstant(LocalDate dateToConvert) {\n+        return java.util.Date.from(dateToConvert.atStartOfDay()\n+                .atZone(ZoneId.systemDefault())\n+                .toInstant());\n+    }\n+}"
  },
  {
    "sha": "1eecf4ff0fc2c887b3a5a5c6df1edd89ce24be69",
    "filename": "backend/src/main/java/quarano/sormas_integration/mapping/SormasContactDto.java",
    "status": "added",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasContactDto.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasContactDto.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/mapping/SormasContactDto.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,31 @@\n+package quarano.sormas_integration.mapping;\n+\n+public class SormasContactDto {\n+    private String firstName;\n+    private String lastName;\n+    private String sormasUuid;\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getSormasUuid() {\n+        return sormasUuid;\n+    }\n+\n+    public void setSormasUuid(String sormasUuid) {\n+        this.sormasUuid = sormasUuid;\n+    }\n+}"
  },
  {
    "sha": "0dc9580e3b5d27a554faa28f773b452b5318c570",
    "filename": "backend/src/main/java/quarano/sormas_integration/mapping/SormasContactMapper.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasContactMapper.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasContactMapper.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/mapping/SormasContactMapper.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,32 @@\n+package quarano.sormas_integration.mapping;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.factory.Mappers;\n+import quarano.core.EmailAddress;\n+import quarano.sormas_integration.person.SormasContact;\n+import quarano.sormas_integration.person.SormasContactPerson;\n+\n+import java.time.LocalDate;\n+import java.util.UUID;\n+\n+/**\n+ * @author Federico Grasso\n+ */\n+@Mapper\n+public interface SormasContactMapper {\n+    SormasContactMapper INSTANCE = Mappers.getMapper( SormasContactMapper.class );\n+\n+    @Mapping(target = \"uuid\", expression = \"java(createNewUUID())\")\n+    @Mapping(target = \"person\", expression = \"java(getContactPerson(contact))\")\n+    SormasContact map(SormasContactDto contact);\n+\n+    default String createNewUUID(){\n+        return UUID.randomUUID().toString();\n+    }\n+\n+    default SormasContactPerson getContactPerson(SormasContactDto contact){\n+        return new SormasContactPerson(contact.getSormasUuid(), contact.getFirstName(), contact.getLastName());\n+    }\n+}\n+"
  },
  {
    "sha": "62b5ac6f98a1869e47e3ab855d584734990f1b47",
    "filename": "backend/src/main/java/quarano/sormas_integration/mapping/SormasPersonDto.java",
    "status": "added",
    "additions": 103,
    "deletions": 0,
    "changes": 103,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasPersonDto.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasPersonDto.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/mapping/SormasPersonDto.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,103 @@\n+package quarano.sormas_integration.mapping;\n+\n+import quarano.core.Address;\n+import quarano.core.EmailAddress;\n+import quarano.core.PhoneNumber;\n+import quarano.tracking.TrackedPerson;\n+\n+import java.time.LocalDate;\n+import java.util.Locale;\n+\n+public class SormasPersonDto {\n+\n+    private TrackedPerson.TrackedPersonIdentifier id;\n+    private String firstName;\n+    private String lastName;\n+    private PhoneNumber phoneNumber;\n+    private PhoneNumber mobilePhoneNumber;\n+    private EmailAddress emailAddress;\n+    private LocalDate dateOfBirth;\n+    private Address address;\n+    private String sormasUuid;\n+    private Locale locale;\n+\n+    public TrackedPerson.TrackedPersonIdentifier getId() {\n+        return id;\n+    }\n+\n+    public void setId(TrackedPerson.TrackedPersonIdentifier id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public PhoneNumber getPhoneNumber() {\n+        return phoneNumber;\n+    }\n+\n+    public void setPhoneNumber(PhoneNumber phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+\n+    public PhoneNumber getMobilePhoneNumber() {\n+        return mobilePhoneNumber;\n+    }\n+\n+    public void setMobilePhoneNumber(PhoneNumber mobilePhoneNumber) {\n+        this.mobilePhoneNumber = mobilePhoneNumber;\n+    }\n+\n+    public EmailAddress getEmailAddress() {\n+        return emailAddress;\n+    }\n+\n+    public void setEmailAddress(EmailAddress emailAddress) {\n+        this.emailAddress = emailAddress;\n+    }\n+\n+    public LocalDate getDateOfBirth() {\n+        return dateOfBirth;\n+    }\n+\n+    public void setDateOfBirth(LocalDate dateOfBirth) {\n+        this.dateOfBirth = dateOfBirth;\n+    }\n+\n+    public Address getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(Address address) {\n+        this.address = address;\n+    }\n+\n+    public String getSormasUuid() {\n+        return sormasUuid;\n+    }\n+\n+    public void setSormasUuid(String sormasUuid) {\n+        this.sormasUuid = sormasUuid;\n+    }\n+\n+    public Locale getLocale() {\n+        return locale;\n+    }\n+\n+    public void setLocale(Locale locale) {\n+        this.locale = locale;\n+    }\n+}"
  },
  {
    "sha": "710e0dd1daae3674745923e469868f77b665b8f9",
    "filename": "backend/src/main/java/quarano/sormas_integration/mapping/SormasPersonMapper.java",
    "status": "added",
    "additions": 153,
    "deletions": 0,
    "changes": 153,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasPersonMapper.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/mapping/SormasPersonMapper.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/mapping/SormasPersonMapper.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,153 @@\n+package quarano.sormas_integration.mapping;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.factory.Mappers;\n+import quarano.core.Address;\n+import quarano.core.EmailAddress;\n+import quarano.core.PhoneNumber;\n+import quarano.core.ZipCode;\n+import quarano.sormas_integration.person.SormasPerson;\n+import quarano.sormas_integration.person.SormasPersonAddress;\n+\n+import java.time.LocalDate;\n+import java.util.UUID;\n+\n+/**\n+ * @author Federico Grasso\n+ */\n+@Mapper\n+public interface SormasPersonMapper {\n+    SormasPersonMapper INSTANCE = Mappers.getMapper( SormasPersonMapper.class );\n+\n+    @Mapping(target = \"sormasUuid\", source = \"uuid\")\n+    @Mapping(target = \"emailAddress\", expression = \"java(getEmailAddress(source.getEmailAddress()))\")\n+    @Mapping(target = \"phoneNumber\", expression = \"java(getPhoneNumber(source.getPhone()))\")\n+    @Mapping(target = \"mobilePhoneNumber\", expression = \"java(getPhoneNumber(source.getPhone()))\")\n+    @Mapping(target = \"dateOfBirth\", expression = \"java(getDateOfBirth(source))\")\n+    @Mapping(target = \"address\", expression = \"java(getAddress(source))\")\n+    SormasPersonDto map(SormasPerson source);\n+\n+    @Mapping(target = \"uuid\", source = \"sormasUuid\")\n+    @Mapping(target = \"emailAddress\", expression = \"java(getStringEmailAddress(source.getEmailAddress()))\")\n+    @Mapping(target = \"phone\", expression = \"java(getStringPhoneNumber(source.getPhoneNumber()))\")\n+    @Mapping(target = \"address\", expression = \"java(getInversAddress(source.getAddress()))\")\n+    @Mapping(target = \"birthdateDD\", expression = \"java(getDay(source.getDateOfBirth()))\")\n+    @Mapping(target = \"birthdateMM\", expression = \"java(getMonth(source.getDateOfBirth()))\")\n+    @Mapping(target = \"birthdateYYYY\", expression = \"java(getYear(source.getDateOfBirth()))\")\n+    SormasPerson map(SormasPersonDto source);\n+\n+    default String getStringEmailAddress(EmailAddress emailAddress){\n+        if(emailAddress != null){\n+            return emailAddress.toString();\n+        }\n+        return null;\n+    }\n+\n+    default String getStringPhoneNumber(PhoneNumber phoneNumber){\n+        if(phoneNumber != null){\n+            return phoneNumber.toString();\n+        }\n+        return null;\n+    }\n+\n+    default SormasPersonAddress getInversAddress(Address address){\n+        if(address != null){\n+            return new SormasPersonAddress(\n+                    address.getCity(),\n+                    address.getZipCode() == null ? null : address.getZipCode().toString(),\n+                    address.getStreet(),\n+                    address.getHouseNumber().toString(),\n+                    UUID.randomUUID().toString()\n+            );\n+        }\n+\n+        return null;\n+    }\n+\n+    default Integer getDay(LocalDate date){\n+        if(date != null){\n+            return date.getDayOfMonth();\n+        }\n+\n+        return null;\n+    }\n+\n+    default Integer getMonth(LocalDate date){\n+        if(date != null){\n+            return date.getMonthValue();\n+        }\n+\n+        return null;\n+    }\n+\n+    default Integer getYear(LocalDate date){\n+        if(date != null){\n+            return date.getYear();\n+        }\n+\n+        return null;\n+    }\n+\n+    default EmailAddress getEmailAddress(String email) {\n+        try{\n+            if(StringUtils.isNotBlank(email)){\n+                return EmailAddress.of(email);\n+            }\n+            return null;\n+        }\n+        catch (IllegalArgumentException ex){\n+            return null;\n+        }\n+    }\n+\n+    default PhoneNumber getPhoneNumber(String phone) {\n+        try{\n+            if(StringUtils.isNotBlank(phone)){\n+                return PhoneNumber.of(phone);\n+            }\n+            return null;\n+        }\n+        catch (IllegalArgumentException ex){\n+            return null;\n+        }\n+    }\n+\n+    default LocalDate getDateOfBirth(SormasPerson source){\n+        if(\n+                source.getBirthdateYYYY() != null &&\n+                source.getBirthdateMM() != null &&\n+                source.getBirthdateDD() != null\n+        ) {\n+            return LocalDate.of(\n+                    source.getBirthdateYYYY(),\n+                    source.getBirthdateMM(),\n+                    source.getBirthdateDD()\n+            );\n+        }\n+        return null;\n+    }\n+\n+    default Address getAddress(SormasPerson source){\n+        try{\n+            if(StringUtils.isNoneBlank(\n+                    source.getAddress().getStreet(),\n+                    source.getAddress().getCity(),\n+                    source.getAddress().getPostalCode()\n+            )\n+            ) {\n+                return new Address(\n+                        source.getAddress().getStreet(),\n+                        Address.HouseNumber.NONE,\n+                        source.getAddress().getCity(),\n+                        ZipCode.of(source.getAddress().getPostalCode())\n+                );\n+            }\n+            return null;\n+        }\n+        catch (IllegalArgumentException ex){\n+            return null;\n+        }\n+    }\n+}"
  },
  {
    "sha": "b5fe46bea6396c407086a28f88d37008896f8a0c",
    "filename": "backend/src/main/java/quarano/sormas_integration/person/SormasContact.java",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/person/SormasContact.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/person/SormasContact.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/person/SormasContact.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,39 @@\n+package quarano.sormas_integration.person;\n+\n+import lombok.*;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * SORMAS Contact model\n+ */\n+\n+@Data\n+@AllArgsConstructor(access = AccessLevel.PUBLIC)\n+@NoArgsConstructor(access = AccessLevel.PUBLIC)\n+public class SormasContact {\n+    private String uuid;\n+    private SormasContactPerson person;\n+\n+    /**\n+     * Getters and setter\n+     * (Already defined with Lombok\n+     * but re-defined to make properties accessible by MapStruct)\n+     */\n+\n+    public String getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(String uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public SormasContactPerson getPerson() {\n+        return person;\n+    }\n+\n+    public void setPerson(SormasContactPerson person) {\n+        this.person = person;\n+    }\n+}"
  },
  {
    "sha": "3d435069d1bfa473d8a1ba60edae48f643ca0e94",
    "filename": "backend/src/main/java/quarano/sormas_integration/person/SormasContactPerson.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/person/SormasContactPerson.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/person/SormasContactPerson.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/person/SormasContactPerson.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,51 @@\n+package quarano.sormas_integration.person;\n+\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * SORMAS Contact person model\n+ */\n+\n+@Data\n+@RequiredArgsConstructor(staticName = \"of\")\n+@AllArgsConstructor(access = AccessLevel.PUBLIC)\n+public class SormasContactPerson {\n+    private String uuid;\n+    private String firstName;\n+    private String lastName;\n+\n+    /**\n+     * Getters and setter\n+     * (Already defined with Lombok\n+     * but re-defined to make properties accessible by MapStruct)\n+     */\n+\n+    public String getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(String uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+}"
  },
  {
    "sha": "7ebdd8b670ef689f529a5ddbaf1ae22010741ad1",
    "filename": "backend/src/main/java/quarano/sormas_integration/person/SormasPerson.java",
    "status": "added",
    "additions": 103,
    "deletions": 0,
    "changes": 103,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/person/SormasPerson.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/person/SormasPerson.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/person/SormasPerson.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,103 @@\n+package quarano.sormas_integration.person;\n+\n+\n+import lombok.*;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * SORMAS Person model\n+ */\n+\n+@Data\n+@NoArgsConstructor(access = AccessLevel.PUBLIC)\n+@AllArgsConstructor(access = AccessLevel.PUBLIC)\n+public class SormasPerson {\n+    private String uuid;\n+    private String firstName;\n+    private String lastName;\n+    private String emailAddress;\n+    private String phone;\n+    private SormasPersonAddress address;\n+    private Integer birthdateDD;\n+    private Integer birthdateMM;\n+    private Integer birthdateYYYY;\n+\n+    /**\n+     * Getters and setter\n+     * (Already defined with Lombok\n+     * but re-defined to make properties accessible by MapStruct)\n+     */\n+\n+    public String getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(String uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getEmailAddress() {\n+        return emailAddress;\n+    }\n+\n+    public void setEmailAddress(String emailAddress) {\n+        this.emailAddress = emailAddress;\n+    }\n+\n+    public String getPhone() {\n+        return phone;\n+    }\n+\n+    public void setPhone(String phone) {\n+        this.phone = phone;\n+    }\n+\n+    public SormasPersonAddress getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(SormasPersonAddress address) {\n+        this.address = address;\n+    }\n+\n+    public Integer getBirthdateDD() {\n+        return birthdateDD;\n+    }\n+\n+    public void setBirthdateDD(Integer birthdateDD) {\n+        this.birthdateDD = birthdateDD;\n+    }\n+\n+    public Integer getBirthdateMM() {\n+        return birthdateMM;\n+    }\n+\n+    public void setBirthdateMM(Integer birthdateMM) {\n+        this.birthdateMM = birthdateMM;\n+    }\n+\n+    public Integer getBirthdateYYYY() {\n+        return birthdateYYYY;\n+    }\n+\n+    public void setBirthdateYYYY(Integer birthdateYYYY) {\n+        this.birthdateYYYY = birthdateYYYY;\n+    }\n+}"
  },
  {
    "sha": "cb3d2f8bd40c03972d201136cb3f1c8ad2c2256e",
    "filename": "backend/src/main/java/quarano/sormas_integration/person/SormasPersonAddress.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/person/SormasPersonAddress.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/person/SormasPersonAddress.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/person/SormasPersonAddress.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,65 @@\n+package quarano.sormas_integration.person;\n+\n+import lombok.*;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * SORMAS Person Address model\n+ */\n+@Data\n+@RequiredArgsConstructor(staticName = \"of\")\n+@AllArgsConstructor(access = AccessLevel.PUBLIC)\n+public class SormasPersonAddress {\n+    private String city;\n+    private String postalCode;\n+    private String street;\n+    private String houseNumber;\n+    private String uuid;\n+\n+    /**\n+     * Getters and setter\n+     * (Already defined with Lombok\n+     * but re-defined to make properties accessible by MapStruct)\n+     */\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getStreet() {\n+        return street;\n+    }\n+\n+    public void setStreet(String street) {\n+        this.street = street;\n+    }\n+\n+    public String getHouseNumber() {\n+        return houseNumber;\n+    }\n+\n+    public void setHouseNumber(String houseNumber) {\n+        this.houseNumber = houseNumber;\n+    }\n+\n+    public String getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(String uuid) {\n+        this.uuid = uuid;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "430a5983b7a1059cb9dc1177ca2c9a7553a2a881",
    "filename": "backend/src/main/java/quarano/sormas_integration/report/ContactsSyncReport.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/report/ContactsSyncReport.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/report/ContactsSyncReport.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/report/ContactsSyncReport.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,44 @@\n+package quarano.sormas_integration.report;\n+\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.persistence.*;\n+import java.util.Date;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * Contacts Synchronization Report Table\n+ */\n+\n+@Entity\n+@Table(name = \"contacts_sync_report\")\n+@Setter(AccessLevel.PUBLIC)\n+@Data\n+@Slf4j\n+@AllArgsConstructor\n+@NoArgsConstructor(force = true, access = AccessLevel.PRIVATE)\n+public class ContactsSyncReport {\n+\n+    @NonNull\n+    private Integer personsNumber;\n+\n+    @Id\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @NonNull\n+    private Date syncDate;\n+\n+    @NonNull\n+    private Long syncTime;\n+\n+    @NonNull\n+    private ReportStatus status;\n+\n+    public enum ReportStatus {\n+        STARTED,\n+        FAILED,\n+        SUCCESS\n+    }\n+}\n+"
  },
  {
    "sha": "f91d0da53dd0d6ac558d75c2b6dc61d005d82996",
    "filename": "backend/src/main/java/quarano/sormas_integration/report/ContactsSyncReportRepository.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/report/ContactsSyncReportRepository.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/report/ContactsSyncReportRepository.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/report/ContactsSyncReportRepository.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,18 @@\n+package quarano.sormas_integration.report;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * Contacts Synchronization Report Table repository\n+ */\n+\n+public interface ContactsSyncReportRepository extends JpaRepository<ContactsSyncReport, Long> {\n+    // Returns most recent report entity\n+    @Query(nativeQuery = true, value = \"SELECT * FROM contacts_sync_report ORDER BY sync_date DESC LIMIT 1\")\n+    List<ContactsSyncReport> getOrderBySyncDateDesc();\n+}"
  },
  {
    "sha": "7320ddd59b751266322220e2d1673a6c65592c12",
    "filename": "backend/src/main/java/quarano/sormas_integration/report/IndexSyncReport.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/report/IndexSyncReport.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/report/IndexSyncReport.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/report/IndexSyncReport.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,47 @@\n+package quarano.sormas_integration.report;\n+\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.persistence.*;\n+import java.util.Date;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * Index Synchronization Report Table\n+ */\n+\n+@Entity\n+@Table(name = \"index_sync_report\")\n+@Setter(AccessLevel.PUBLIC)\n+@Data\n+@Slf4j\n+@AllArgsConstructor\n+@NoArgsConstructor(force = true, access = AccessLevel.PRIVATE)\n+public class IndexSyncReport {\n+\n+    @NonNull\n+    private Integer personsNumber;\n+\n+    @NonNull\n+    private Integer casesNumber;\n+\n+    @Id\n+    @Temporal(TemporalType.TIMESTAMP)\n+    @NonNull\n+    private Date syncDate;\n+\n+    @NonNull\n+    private Long syncTime;\n+\n+    @NonNull\n+    private ReportStatus status;\n+\n+    public enum ReportStatus {\n+        STARTED,\n+        FAILED,\n+        SUCCESS\n+    }\n+}\n+"
  },
  {
    "sha": "ad55d1779946fbe8e3084aeaac26ec808bd28981",
    "filename": "backend/src/main/java/quarano/sormas_integration/report/IndexSyncReportRepository.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/quarano/quarano-application/blob/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/report/IndexSyncReportRepository.java",
    "raw_url": "https://github.com/quarano/quarano-application/raw/edf7015f15382131432739514cbc6f02f63b2139/backend/src/main/java/quarano/sormas_integration/report/IndexSyncReportRepository.java",
    "contents_url": "https://api.github.com/repos/quarano/quarano-application/contents/backend/src/main/java/quarano/sormas_integration/report/IndexSyncReportRepository.java?ref=edf7015f15382131432739514cbc6f02f63b2139",
    "patch": "@@ -0,0 +1,22 @@\n+package quarano.sormas_integration.report;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Federico Grasso\n+ *\n+ * Index Synchronization Report Table repository\n+ */\n+\n+public interface IndexSyncReportRepository extends JpaRepository<IndexSyncReport, Long> {\n+    // Return most recent report entity\n+    @Query(nativeQuery = true, value = \"SELECT * FROM index_sync_report ORDER BY sync_date DESC LIMIT 1\")\n+    List<IndexSyncReport> getOrderBySyncDateDesc();\n+\n+    // Get most recent successful report entity\n+    @Query(nativeQuery = true, value = \"SELECT * FROM index_sync_report WHERE status = 2 ORDER BY sync_date DESC LIMIT 1\")\n+    List<IndexSyncReport> getSuccessfulOrderBySyncDateDesc();\n+}"
  }
]
