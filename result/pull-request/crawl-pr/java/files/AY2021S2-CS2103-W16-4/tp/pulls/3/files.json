[
  {
    "sha": "b6ec5405f3d175417043b28f3699553e05bfadba",
    "filename": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "status": "modified",
    "additions": 14,
    "deletions": 17,
    "changes": 31,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/commands/EditCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/logic/commands/EditCommand.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -19,11 +19,11 @@\n import seedu.address.commons.util.CollectionUtil;\n import seedu.address.logic.commands.exceptions.CommandException;\n import seedu.address.model.Model;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -96,10 +96,9 @@ private static Person createEditedPerson(Person personToEdit, EditPersonDescript\n         Name updatedName = editPersonDescriptor.getName().orElse(personToEdit.getName());\n         Phone updatedPhone = editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());\n         Email updatedEmail = editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());\n-        Address updatedAddress = editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());\n         Set<Tag> updatedTags = editPersonDescriptor.getTags().orElse(personToEdit.getTags());\n-\n-        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);\n+        Remark updatedRemark = editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());\n+        return new Person(updatedName, updatedPhone, updatedEmail, updatedRemark, updatedTags);\n     }\n \n     @Override\n@@ -128,9 +127,8 @@ public boolean equals(Object other) {\n         private Name name;\n         private Phone phone;\n         private Email email;\n-        private Address address;\n         private Set<Tag> tags;\n-\n+        private Remark remark;\n         public EditPersonDescriptor() {}\n \n         /**\n@@ -141,15 +139,15 @@ public EditPersonDescriptor(EditPersonDescriptor toCopy) {\n             setName(toCopy.name);\n             setPhone(toCopy.phone);\n             setEmail(toCopy.email);\n-            setAddress(toCopy.address);\n             setTags(toCopy.tags);\n+            setRemark(toCopy.remark);\n         }\n \n         /**\n          * Returns true if at least one field is edited.\n          */\n         public boolean isAnyFieldEdited() {\n-            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);\n+            return CollectionUtil.isAnyNonNull(name, phone, email, tags);\n         }\n \n         public void setName(Name name) {\n@@ -176,14 +174,6 @@ public void setEmail(Email email) {\n             return Optional.ofNullable(email);\n         }\n \n-        public void setAddress(Address address) {\n-            this.address = address;\n-        }\n-\n-        public Optional<Address> getAddress() {\n-            return Optional.ofNullable(address);\n-        }\n-\n         /**\n          * Sets {@code tags} to this object's {@code tags}.\n          * A defensive copy of {@code tags} is used internally.\n@@ -219,8 +209,15 @@ public boolean equals(Object other) {\n             return getName().equals(e.getName())\n                     && getPhone().equals(e.getPhone())\n                     && getEmail().equals(e.getEmail())\n-                    && getAddress().equals(e.getAddress())\n                     && getTags().equals(e.getTags());\n         }\n+\n+        public Optional<Remark> getRemark() {\n+            return Optional.of(remark);\n+        }\n+\n+        public void setRemark(Remark remark) {\n+            this.remark = remark;\n+        }\n     }\n }"
  },
  {
    "sha": "2bb90baa36e389ef6aae399ff7287908e4a14dc3",
    "filename": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/logic/commands/RemarkCommand.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -0,0 +1,89 @@\n+package seedu.address.logic.commands;\n+\n+import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;\n+import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;\n+\n+import java.util.List;\n+\n+import seedu.address.commons.core.Messages;\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.logic.commands.exceptions.CommandException;\n+import seedu.address.model.Model;\n+import seedu.address.model.person.Person;\n+import seedu.address.model.person.Remark;\n+\n+\n+/**\n+ * Changes the remark of an existing person in the address book.\n+ */\n+public class RemarkCommand extends Command {\n+\n+    public static final String COMMAND_WORD = \"remark\";\n+\n+    public static final String MESSAGE_USAGE = COMMAND_WORD + \": Edits the remark of the person identified \"\n+            + \"by the index number used in the last person listing. \"\n+            + \"Existing remark will be overwritten by the input.\\n\"\n+            + \"Parameters: INDEX (must be a positive integer) \"\n+            + \"r/ [REMARK]\\n\"\n+            + \"Example: \" + COMMAND_WORD + \" 1 \"\n+            + \"r/ Likes to swim.\";\n+\n+    public static final String MESSAGE_NOT_IMPLEMENTED_YET = \"Remark command not implemented yet\";\n+    public static final String MESSAGE_ADD_REMARK_SUCCESS = \"Added remark to Person: %1$s\";\n+    public static final String MESSAGE_DELETE_REMARK_SUCCESS = \"Removed remark from Person: %1$s\";\n+    public static final String MESSAGE_ARGUMENTS = \"Index: %1$d, Remark: %2$s\";\n+    private final Index index;\n+\n+    private final Remark remark;\n+\n+    /**\n+     * @param index of the person in the filtered person list to edit the remark\n+     * @param remark of the person to be updated to\n+     */\n+    public RemarkCommand(Index index, Remark remark) {\n+        requireAllNonNull(index, remark);\n+\n+        this.index = index;\n+        this.remark = remark;\n+    }\n+\n+    @Override\n+    public CommandResult execute(Model model) throws CommandException {\n+        List<Person> lastShownList = model.getFilteredPersonList();\n+\n+        if (index.getZeroBased() >= lastShownList.size()) {\n+            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);\n+        }\n+\n+        Person personToEdit = lastShownList.get(index.getZeroBased());\n+        Person editedPerson = new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),\n+                remark, personToEdit.getTags());\n+\n+        model.setPerson(personToEdit, editedPerson);\n+        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);\n+\n+        return new CommandResult(generateSuccessMessage(editedPerson));\n+    }\n+\n+    private String generateSuccessMessage(Person personToEdit) {\n+        String message = !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;\n+        return String.format(message, personToEdit);\n+    }\n+    @Override\n+    public boolean equals(Object other) {\n+        // short circuit if same object\n+        if (other == this) {\n+            return true;\n+        }\n+\n+        // instanceof handles nulls\n+        if (!(other instanceof RemarkCommand)) {\n+            return false;\n+        }\n+\n+        // state check\n+        RemarkCommand e = (RemarkCommand) other;\n+        return index.equals(e.index)\n+                && remark.equals(e.remark);\n+    }\n+}"
  },
  {
    "sha": "2940f126e390e53f67d5c0cde77b2bd2858f782b",
    "filename": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/logic/parser/AddCommandParser.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -5,18 +5,19 @@\n import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;\n \n import java.util.Set;\n import java.util.stream.Stream;\n \n import seedu.address.logic.commands.AddCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -41,10 +42,9 @@ public AddCommand parse(String args) throws ParseException {\n         Name name = ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());\n         Phone phone = ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());\n         Email email = ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());\n-        Address address = ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());\n         Set<Tag> tagList = ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));\n-\n-        Person person = new Person(name, phone, email, address, tagList);\n+        Remark remark = ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());\n+        Person person = new Person(name, phone, email, remark, tagList);\n \n         return new AddCommand(person);\n     }"
  },
  {
    "sha": "eff2d21e832e9400a683a02493266bbd579bd224",
    "filename": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/logic/parser/AddressBookParser.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -15,6 +15,7 @@\n import seedu.address.logic.commands.FindCommand;\n import seedu.address.logic.commands.HelpCommand;\n import seedu.address.logic.commands.ListCommand;\n+import seedu.address.logic.commands.RemarkCommand;\n import seedu.address.logic.parser.exceptions.ParseException;\n \n /**\n@@ -59,6 +60,9 @@ public Command parseCommand(String userInput) throws ParseException {\n         case FindCommand.COMMAND_WORD:\n             return new FindCommandParser().parse(arguments);\n \n+        case RemarkCommand.COMMAND_WORD:\n+            return new RemarkCommandParser().parse(arguments);\n+\n         case ListCommand.COMMAND_WORD:\n             return new ListCommand();\n "
  },
  {
    "sha": "96be13b3772054877f32a657a7ffd8f9c85ad303",
    "filename": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/logic/parser/CliSyntax.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -11,5 +11,6 @@\n     public static final Prefix PREFIX_EMAIL = new Prefix(\"e/\");\n     public static final Prefix PREFIX_ADDRESS = new Prefix(\"a/\");\n     public static final Prefix PREFIX_TAG = new Prefix(\"t/\");\n+    public static final Prefix PREFIX_REMARK = new Prefix(\"r/\");\n \n }"
  },
  {
    "sha": "dea2943ee2a4fdf9ae508676ff5551f7b14e2210",
    "filename": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/logic/parser/EditCommandParser.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -52,9 +52,6 @@ public EditCommand parse(String args) throws ParseException {\n         if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {\n             editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));\n         }\n-        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {\n-            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));\n-        }\n         parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);\n \n         if (!editPersonDescriptor.isAnyFieldEdited()) {"
  },
  {
    "sha": "b2f64fbe4547fb1383e3e843dea17bc1104f891e",
    "filename": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "status": "modified",
    "additions": 11,
    "deletions": 16,
    "changes": 27,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/logic/parser/ParserUtil.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -9,10 +9,10 @@\n import seedu.address.commons.core.index.Index;\n import seedu.address.commons.util.StringUtil;\n import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -50,6 +50,16 @@ public static Name parseName(String name) throws ParseException {\n         return new Name(trimmedName);\n     }\n \n+    public static Remark parseRemark(String remark) throws ParseException {\n+        requireNonNull(remark);\n+        String trimmedName = remark.trim();\n+        if (!Remark.isValidName(trimmedName)) {\n+            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);\n+        }\n+        return new Remark(trimmedName);\n+    }\n+\n+\n     /**\n      * Parses a {@code String phone} into a {@code Phone}.\n      * Leading and trailing whitespaces will be trimmed.\n@@ -65,21 +75,6 @@ public static Phone parsePhone(String phone) throws ParseException {\n         return new Phone(trimmedPhone);\n     }\n \n-    /**\n-     * Parses a {@code String address} into an {@code Address}.\n-     * Leading and trailing whitespaces will be trimmed.\n-     *\n-     * @throws ParseException if the given {@code address} is invalid.\n-     */\n-    public static Address parseAddress(String address) throws ParseException {\n-        requireNonNull(address);\n-        String trimmedAddress = address.trim();\n-        if (!Address.isValidAddress(trimmedAddress)) {\n-            throw new ParseException(Address.MESSAGE_CONSTRAINTS);\n-        }\n-        return new Address(trimmedAddress);\n-    }\n-\n     /**\n      * Parses a {@code String email} into an {@code Email}.\n      * Leading and trailing whitespaces will be trimmed."
  },
  {
    "sha": "51ad1da23a2b310b2c241bb2b2c5af98083f4fe9",
    "filename": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/logic/parser/RemarkCommandParser.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -0,0 +1,36 @@\n+package seedu.address.logic.parser;\n+import static java.util.Objects.requireNonNull;\n+import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;\n+import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;\n+\n+import seedu.address.commons.core.index.Index;\n+import seedu.address.commons.exceptions.IllegalValueException;\n+import seedu.address.logic.commands.RemarkCommand;\n+import seedu.address.logic.parser.exceptions.ParseException;\n+import seedu.address.model.person.Remark;\n+\n+public class RemarkCommandParser {\n+    /**\n+     * Parses the given {@code String} of arguments in the context of the RemarkCommand\n+     * and returns a RemardCommand object for execution.\n+     * @param args\n+     * @return RemarkCommand Object\n+     * @throws ParseException ParseException if the user input does not conform the expected format\n+     */\n+    public RemarkCommand parse(String args) throws ParseException {\n+        requireNonNull(args);\n+        ArgumentMultimap argMultimap = ArgumentTokenizer.tokenize(args,\n+                PREFIX_REMARK);\n+        Index index;\n+        try {\n+            index = ParserUtil.parseIndex(argMultimap.getPreamble());\n+        } catch (IllegalValueException ive) {\n+            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,\n+                    RemarkCommand.MESSAGE_USAGE), ive);\n+        }\n+\n+        String remark = argMultimap.getValue(PREFIX_REMARK).orElse(\"\");\n+\n+        return new RemarkCommand(index, new Remark(remark));\n+    }\n+}"
  },
  {
    "sha": "60472ca22a0982a5def9545a9cc4d79745058850",
    "filename": "src/main/java/seedu/address/model/person/Address.java",
    "status": "removed",
    "additions": 0,
    "deletions": 57,
    "changes": 57,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/a541026a0f5eeb7bb6ed077c03bc2ca252b06307/src/main/java/seedu/address/model/person/Address.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/a541026a0f5eeb7bb6ed077c03bc2ca252b06307/src/main/java/seedu/address/model/person/Address.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/model/person/Address.java?ref=a541026a0f5eeb7bb6ed077c03bc2ca252b06307",
    "patch": "@@ -1,57 +0,0 @@\n-package seedu.address.model.person;\n-\n-import static java.util.Objects.requireNonNull;\n-import static seedu.address.commons.util.AppUtil.checkArgument;\n-\n-/**\n- * Represents a Person's address in the address book.\n- * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}\n- */\n-public class Address {\n-\n-    public static final String MESSAGE_CONSTRAINTS = \"Addresses can take any values, and it should not be blank\";\n-\n-    /*\n-     * The first character of the address must not be a whitespace,\n-     * otherwise \" \" (a blank string) becomes a valid input.\n-     */\n-    public static final String VALIDATION_REGEX = \"[^\\\\s].*\";\n-\n-    public final String value;\n-\n-    /**\n-     * Constructs an {@code Address}.\n-     *\n-     * @param address A valid address.\n-     */\n-    public Address(String address) {\n-        requireNonNull(address);\n-        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);\n-        value = address;\n-    }\n-\n-    /**\n-     * Returns true if a given string is a valid email.\n-     */\n-    public static boolean isValidAddress(String test) {\n-        return test.matches(VALIDATION_REGEX);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return value;\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        return other == this // short circuit if same object\n-                || (other instanceof Address // instanceof handles nulls\n-                && value.equals(((Address) other).value)); // state check\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return value.hashCode();\n-    }\n-\n-}"
  },
  {
    "sha": "a422c0d63724c294672fd511dacce770c0b35d81",
    "filename": "src/main/java/seedu/address/model/person/Person.java",
    "status": "modified",
    "additions": 10,
    "deletions": 14,
    "changes": 24,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/model/person/Person.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/model/person/Person.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/model/person/Person.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -19,20 +19,18 @@\n     private final Name name;\n     private final Phone phone;\n     private final Email email;\n-\n-    // Data fields\n-    private final Address address;\n+    private final Remark remark;\n     private final Set<Tag> tags = new HashSet<>();\n \n     /**\n      * Every field must be present and not null.\n      */\n-    public Person(Name name, Phone phone, Email email, Address address, Set<Tag> tags) {\n-        requireAllNonNull(name, phone, email, address, tags);\n+    public Person(Name name, Phone phone, Email email, Remark remark, Set<Tag> tags) {\n+        requireAllNonNull(name, phone, email, tags);\n         this.name = name;\n         this.phone = phone;\n         this.email = email;\n-        this.address = address;\n+        this.remark = remark;\n         this.tags.addAll(tags);\n     }\n \n@@ -48,10 +46,6 @@ public Email getEmail() {\n         return email;\n     }\n \n-    public Address getAddress() {\n-        return address;\n-    }\n-\n     /**\n      * Returns an immutable tag set, which throws {@code UnsupportedOperationException}\n      * if modification is attempted.\n@@ -91,14 +85,14 @@ public boolean equals(Object other) {\n         return otherPerson.getName().equals(getName())\n                 && otherPerson.getPhone().equals(getPhone())\n                 && otherPerson.getEmail().equals(getEmail())\n-                && otherPerson.getAddress().equals(getAddress())\n+                && otherPerson.getRemark().equals(getRemark())\n                 && otherPerson.getTags().equals(getTags());\n     }\n \n     @Override\n     public int hashCode() {\n         // use this method for custom fields hashing instead of implementing your own\n-        return Objects.hash(name, phone, email, address, tags);\n+        return Objects.hash(name, phone, email, tags);\n     }\n \n     @Override\n@@ -109,8 +103,7 @@ public String toString() {\n                 .append(getPhone())\n                 .append(\"; Email: \")\n                 .append(getEmail())\n-                .append(\"; Address: \")\n-                .append(getAddress());\n+                .append(getRemark());\n \n         Set<Tag> tags = getTags();\n         if (!tags.isEmpty()) {\n@@ -120,4 +113,7 @@ public String toString() {\n         return builder.toString();\n     }\n \n+    public Remark getRemark() {\n+        return remark;\n+    }\n }"
  },
  {
    "sha": "51b76140a9d6cb1a5087167778fe8b7b6bfb5539",
    "filename": "src/main/java/seedu/address/model/person/Remark.java",
    "status": "added",
    "additions": 49,
    "deletions": 0,
    "changes": 49,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/model/person/Remark.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/model/person/Remark.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/model/person/Remark.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -0,0 +1,49 @@\n+package seedu.address.model.person;\n+\n+import static java.util.Objects.requireNonNull;\n+import static seedu.address.model.person.Name.VALIDATION_REGEX;\n+\n+\n+/**\n+ * Represents a Person's remark in the address book.\n+ * Guarantees: immutable; is always valid\n+ */\n+public class Remark {\n+\n+    public static final String MESSAGE_CONSTRAINTS =\n+            \"Remark should only contain alphanumeric characters and spaces, and it should not be blank\";\n+    public final String value;\n+\n+    /**\n+     * Remark Object\n+     * @param remark\n+     */\n+    public Remark(String remark) {\n+        requireNonNull(remark);\n+        value = remark;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return value;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        return other == this // short circuit if same object\n+                || (other instanceof Remark // instanceof handles nulls\n+                && value.equals(((Remark) other).value)); // state check\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return value.hashCode();\n+    }\n+\n+    /**\n+     * Returns true if a given string is a valid name.\n+     */\n+    public static boolean isValidName(String test) {\n+        return test.matches(VALIDATION_REGEX);\n+    }\n+}"
  },
  {
    "sha": "d5fa2f0973cbd417ab80549619aef3a0e5f7127e",
    "filename": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "status": "modified",
    "additions": 8,
    "deletions": 13,
    "changes": 21,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/model/util/SampleDataUtil.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -6,37 +6,32 @@\n \n import seedu.address.model.AddressBook;\n import seedu.address.model.ReadOnlyAddressBook;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n  * Contains utility methods for populating {@code AddressBook} with sample data.\n  */\n public class SampleDataUtil {\n+    public static final Remark EMPTY_REMARK = new Remark(\"\");\n     public static Person[] getSamplePersons() {\n         return new Person[] {\n             new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),\n-                new Address(\"Blk 30 Geylang Street 29, #06-40\"),\n-                getTagSet(\"friends\")),\n+                    EMPTY_REMARK, getTagSet(\"friends\")),\n             new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),\n-                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),\n-                getTagSet(\"colleagues\", \"friends\")),\n+                    EMPTY_REMARK, getTagSet(\"colleagues\", \"friends\")),\n             new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),\n-                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),\n-                getTagSet(\"neighbours\")),\n+                    EMPTY_REMARK, getTagSet(\"neighbours\")),\n             new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),\n-                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),\n-                getTagSet(\"family\")),\n+                    EMPTY_REMARK, getTagSet(\"family\")),\n             new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),\n-                new Address(\"Blk 47 Tampines Street 20, #17-35\"),\n-                getTagSet(\"classmates\")),\n+                    EMPTY_REMARK, getTagSet(\"classmates\")),\n             new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),\n-                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),\n-                getTagSet(\"colleagues\"))\n+                    EMPTY_REMARK, getTagSet(\"colleagues\"))\n         };\n     }\n "
  },
  {
    "sha": "9e2ae000e2e606d2705209503e58abe9cec49f7c",
    "filename": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "status": "modified",
    "additions": 11,
    "deletions": 16,
    "changes": 27,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/storage/JsonAdaptedPerson.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -10,11 +10,11 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import seedu.address.commons.exceptions.IllegalValueException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n \n /**\n@@ -27,20 +27,20 @@\n     private final String name;\n     private final String phone;\n     private final String email;\n-    private final String address;\n+    private final String remark;\n     private final List<JsonAdaptedTag> tagged = new ArrayList<>();\n \n     /**\n      * Constructs a {@code JsonAdaptedPerson} with the given person details.\n      */\n     @JsonCreator\n     public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,\n-            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,\n-            @JsonProperty(\"tagged\") List<JsonAdaptedTag> tagged) {\n+            @JsonProperty(\"email\") String email, @JsonProperty(\"remark\") String remark,\n+                             @JsonProperty(\"tagged\") List<JsonAdaptedTag> tagged) {\n         this.name = name;\n         this.phone = phone;\n         this.email = email;\n-        this.address = address;\n+        this.remark = remark;\n         if (tagged != null) {\n             this.tagged.addAll(tagged);\n         }\n@@ -53,7 +53,7 @@ public JsonAdaptedPerson(Person source) {\n         name = source.getName().fullName;\n         phone = source.getPhone().value;\n         email = source.getEmail().value;\n-        address = source.getAddress().value;\n+        remark = source.getRemark().value;\n         tagged.addAll(source.getTags().stream()\n                 .map(JsonAdaptedTag::new)\n                 .collect(Collectors.toList()));\n@@ -92,18 +92,13 @@ public Person toModelType() throws IllegalValueException {\n         if (!Email.isValidEmail(email)) {\n             throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);\n         }\n-        final Email modelEmail = new Email(email);\n-\n-        if (address == null) {\n-            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));\n-        }\n-        if (!Address.isValidAddress(address)) {\n-            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);\n+        if (remark == null) {\n+            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));\n         }\n-        final Address modelAddress = new Address(address);\n-\n+        final Email modelEmail = new Email(email);\n         final Set<Tag> modelTags = new HashSet<>(personTags);\n-        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);\n+        final Remark remark = new Remark(this.remark);\n+        return new Person(modelName, modelPhone, modelEmail, remark, modelTags);\n     }\n \n }"
  },
  {
    "sha": "648a9a2c926abf9fbc0ba253c80de10a1fe93045",
    "filename": "src/main/java/seedu/address/ui/PersonCard.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/ui/PersonCard.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/java/seedu/address/ui/PersonCard.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/java/seedu/address/ui/PersonCard.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -35,7 +35,7 @@\n     @FXML\n     private Label phone;\n     @FXML\n-    private Label address;\n+    private Label remark;\n     @FXML\n     private Label email;\n     @FXML\n@@ -50,8 +50,8 @@ public PersonCard(Person person, int displayedIndex) {\n         id.setText(displayedIndex + \". \");\n         name.setText(person.getName().fullName);\n         phone.setText(person.getPhone().value);\n-        address.setText(person.getAddress().value);\n         email.setText(person.getEmail().value);\n+        remark.setText(person.getRemark().value);\n         person.getTags().stream()\n                 .sorted(Comparator.comparing(tag -> tag.tagName))\n                 .forEach(tag -> tags.getChildren().add(new Label(tag.tagName)));"
  },
  {
    "sha": "98b6b2d2e5a7d157196de9b092d589bba32a555a",
    "filename": "src/main/resources/view/PersonListCard.fxml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/resources/view/PersonListCard.fxml",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/main/resources/view/PersonListCard.fxml",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/main/resources/view/PersonListCard.fxml?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -29,8 +29,8 @@\n       </HBox>\n       <FlowPane fx:id=\"tags\" />\n       <Label fx:id=\"phone\" styleClass=\"cell_small_label\" text=\"\\$phone\" />\n-      <Label fx:id=\"address\" styleClass=\"cell_small_label\" text=\"\\$address\" />\n       <Label fx:id=\"email\" styleClass=\"cell_small_label\" text=\"\\$email\" />\n+      <Label fx:id=\"remark\" styleClass=\"cell_small_label\" text=\"\\$remark\" />\n     </VBox>\n   </GridPane>\n </HBox>"
  },
  {
    "sha": "e342fecdc02309afa1df50b7a8e0257f69dbdc68",
    "filename": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -2,12 +2,10 @@\n   \"persons\": [ {\n     \"name\": \"Valid Person\",\n     \"phone\": \"9482424\",\n-    \"email\": \"hans@example.com\",\n-    \"address\": \"4th street\"\n+    \"email\": \"hans@example.com\"\n   }, {\n     \"name\": \"Person With Invalid Phone Field\",\n     \"phone\": \"948asdf2424\",\n-    \"email\": \"hans@example.com\",\n-    \"address\": \"4th street\"\n+    \"email\": \"hans@example.com\"\n   } ]\n }"
  },
  {
    "sha": "b6156e4bc23369e9b99fcecd100b560372968669",
    "filename": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -2,7 +2,6 @@\n   \"persons\": [ {\n     \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",\n     \"phone\": \"9482424\",\n-    \"email\": \"hans@example.com\",\n-    \"address\": \"4th street\"\n+    \"email\": \"hans@example.com\"\n   } ]\n }"
  },
  {
    "sha": "192bf1d023714f4d185bf782367a4cd3990f2178",
    "filename": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -3,12 +3,12 @@\n     \"name\": \"Alice Pauline\",\n     \"phone\": \"94351253\",\n     \"email\": \"alice@example.com\",\n-    \"address\": \"123, Jurong West Ave 6, #08-111\",\n+    \"remark\" : \"\",\n     \"tagged\": [ \"friends\" ]\n   }, {\n     \"name\": \"Alice Pauline\",\n     \"phone\": \"94351253\",\n     \"email\": \"pauline@example.com\",\n-    \"address\": \"4th street\"\n+    \"remark\" : \"\"\n   } ]\n }"
  },
  {
    "sha": "671f3da654cef765d365d5b9bcf6e1fdef02633c",
    "filename": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -2,7 +2,6 @@\n   \"persons\": [ {\n     \"name\": \"Hans Muster\",\n     \"phone\": \"9482424\",\n-    \"email\": \"invalid@email!3e\",\n-    \"address\": \"4th street\"\n+    \"email\": \"invalid@email!3e\"\n   } ]\n }"
  },
  {
    "sha": "508744188dd6c349951fb3a91e530edbe449f9ec",
    "filename": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -4,43 +4,43 @@\n     \"name\" : \"Alice Pauline\",\n     \"phone\" : \"94351253\",\n     \"email\" : \"alice@example.com\",\n-    \"address\" : \"123, Jurong West Ave 6, #08-111\",\n+    \"remark\" : \"\",\n     \"tagged\" : [ \"friends\" ]\n   }, {\n     \"name\" : \"Benson Meier\",\n     \"phone\" : \"98765432\",\n     \"email\" : \"johnd@example.com\",\n-    \"address\" : \"311, Clementi Ave 2, #02-25\",\n+    \"remark\" : \"\",\n     \"tagged\" : [ \"owesMoney\", \"friends\" ]\n   }, {\n     \"name\" : \"Carl Kurz\",\n     \"phone\" : \"95352563\",\n     \"email\" : \"heinz@example.com\",\n-    \"address\" : \"wall street\",\n+    \"remark\" : \"\",\n     \"tagged\" : [ ]\n   }, {\n     \"name\" : \"Daniel Meier\",\n     \"phone\" : \"87652533\",\n     \"email\" : \"cornelia@example.com\",\n-    \"address\" : \"10th street\",\n+    \"remark\" : \"\",\n     \"tagged\" : [ \"friends\" ]\n   }, {\n     \"name\" : \"Elle Meyer\",\n     \"phone\" : \"9482224\",\n     \"email\" : \"werner@example.com\",\n-    \"address\" : \"michegan ave\",\n+    \"remark\" : \"\",\n     \"tagged\" : [ ]\n   }, {\n     \"name\" : \"Fiona Kunz\",\n     \"phone\" : \"9482427\",\n     \"email\" : \"lydia@example.com\",\n-    \"address\" : \"little tokyo\",\n+    \"remark\" : \"\",\n     \"tagged\" : [ ]\n   }, {\n     \"name\" : \"George Best\",\n     \"phone\" : \"9482442\",\n     \"email\" : \"anna@example.com\",\n-    \"address\" : \"4th street\",\n+    \"remark\" : \"\",\n     \"tagged\" : [ ]\n   } ]\n }"
  },
  {
    "sha": "99b82b125c83b96972777280e81938eb78e10b90",
    "filename": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/java/seedu/address/logic/parser/AddCommandParserTest.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -32,7 +32,6 @@\n import org.junit.jupiter.api.Test;\n \n import seedu.address.logic.commands.AddCommand;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n@@ -63,9 +62,6 @@ public void parse_allFieldsPresent_success() {\n         assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB\n                 + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n \n-        // multiple addresses - last address accepted\n-        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY\n-                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));\n \n         // multiple tags - all accepted\n         Person expectedPersonMultipleTags = new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\n@@ -98,10 +94,6 @@ public void parse_compulsoryFieldMissing_failure() {\n         assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,\n                 expectedMessage);\n \n-        // missing address prefix\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,\n-                expectedMessage);\n-\n         // all prefixes missing\n         assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,\n                 expectedMessage);\n@@ -121,10 +113,6 @@ public void parse_invalidValue_failure() {\n         assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB\n                 + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);\n \n-        // invalid address\n-        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC\n-                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);\n-\n         // invalid tag\n         assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB\n                 + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
  },
  {
    "sha": "074c307ff7909342a6128d7e7f834324a91b8852",
    "filename": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 13,
    "changes": 16,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/java/seedu/address/logic/parser/EditCommandParserTest.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -5,7 +5,6 @@\n import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;\n-import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;\n import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;\n import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;\n import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;\n@@ -16,7 +15,6 @@\n import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;\n import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;\n-import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;\n import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;\n@@ -36,7 +34,6 @@\n import seedu.address.commons.core.index.Index;\n import seedu.address.logic.commands.EditCommand;\n import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Phone;\n@@ -84,7 +81,6 @@ public void parse_invalidValue_failure() {\n         assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name\n         assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone\n         assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email\n-        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address\n         assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag\n \n         // invalid phone followed by valid email\n@@ -112,7 +108,7 @@ public void parse_allFieldsSpecified_success() {\n                 + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;\n \n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)\n-                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)\n+                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)\n                 .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();\n         EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n \n@@ -152,12 +148,6 @@ public void parse_oneFieldSpecified_success() {\n         expectedCommand = new EditCommand(targetIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n \n-        // address\n-        userInput = targetIndex.getOneBased() + ADDRESS_DESC_AMY;\n-        descriptor = new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();\n-        expectedCommand = new EditCommand(targetIndex, descriptor);\n-        assertParseSuccess(parser, userInput, expectedCommand);\n-\n         // tags\n         userInput = targetIndex.getOneBased() + TAG_DESC_FRIEND;\n         descriptor = new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();\n@@ -173,7 +163,7 @@ public void parse_multipleRepeatedFields_acceptsLast() {\n                 + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;\n \n         EditPersonDescriptor descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)\n-                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\n+                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)\n                 .build();\n         EditCommand expectedCommand = new EditCommand(targetIndex, descriptor);\n \n@@ -193,7 +183,7 @@ public void parse_invalidValueFollowedByValidValue_success() {\n         userInput = targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB\n                 + PHONE_DESC_BOB;\n         descriptor = new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)\n-                .withAddress(VALID_ADDRESS_BOB).build();\n+                .build();\n         expectedCommand = new EditCommand(targetIndex, descriptor);\n         assertParseSuccess(parser, userInput, expectedCommand);\n     }"
  },
  {
    "sha": "f13bf574e84db1d47ca014aab214649eefd0ef87",
    "filename": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 25,
    "changes": 25,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/java/seedu/address/logic/parser/ParserUtilTest.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -14,7 +14,6 @@\n import org.junit.jupiter.api.Test;\n \n import seedu.address.logic.parser.exceptions.ParseException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Phone;\n@@ -101,30 +100,6 @@ public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exc\n         Phone expectedPhone = new Phone(VALID_PHONE);\n         assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));\n     }\n-\n-    @Test\n-    public void parseAddress_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> ParserUtil.parseAddress((String) null));\n-    }\n-\n-    @Test\n-    public void parseAddress_invalidValue_throwsParseException() {\n-        assertThrows(ParseException.class, () -> ParserUtil.parseAddress(INVALID_ADDRESS));\n-    }\n-\n-    @Test\n-    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {\n-        Address expectedAddress = new Address(VALID_ADDRESS);\n-        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));\n-    }\n-\n-    @Test\n-    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {\n-        String addressWithWhitespace = WHITESPACE + VALID_ADDRESS + WHITESPACE;\n-        Address expectedAddress = new Address(VALID_ADDRESS);\n-        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));\n-    }\n-\n     @Test\n     public void parseEmail_null_throwsNullPointerException() {\n         assertThrows(NullPointerException.class, () -> ParserUtil.parseEmail((String) null));"
  },
  {
    "sha": "bcd0f4f0428ed762041db5f5a406d9de8b12ea39",
    "filename": "src/test/java/seedu/address/model/person/AddressTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 32,
    "changes": 32,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/model/person/AddressTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/model/person/AddressTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/java/seedu/address/model/person/AddressTest.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -1,36 +1,4 @@\n package seedu.address.model.person;\n \n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static seedu.address.testutil.Assert.assertThrows;\n-\n-import org.junit.jupiter.api.Test;\n-\n public class AddressTest {\n-\n-    @Test\n-    public void constructor_null_throwsNullPointerException() {\n-        assertThrows(NullPointerException.class, () -> new Address(null));\n-    }\n-\n-    @Test\n-    public void constructor_invalidAddress_throwsIllegalArgumentException() {\n-        String invalidAddress = \"\";\n-        assertThrows(IllegalArgumentException.class, () -> new Address(invalidAddress));\n-    }\n-\n-    @Test\n-    public void isValidAddress() {\n-        // null address\n-        assertThrows(NullPointerException.class, () -> Address.isValidAddress(null));\n-\n-        // invalid addresses\n-        assertFalse(Address.isValidAddress(\"\")); // empty string\n-        assertFalse(Address.isValidAddress(\" \")); // spaces only\n-\n-        // valid addresses\n-        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));\n-        assertTrue(Address.isValidAddress(\"-\")); // one character\n-        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address\n-    }\n }"
  },
  {
    "sha": "50fd5ca70327e8e2c6687d067d9708911141bbf0",
    "filename": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 26,
    "changes": 34,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -12,7 +12,6 @@\n import org.junit.jupiter.api.Test;\n \n import seedu.address.commons.exceptions.IllegalValueException;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Phone;\n@@ -23,11 +22,10 @@\n     private static final String INVALID_ADDRESS = \" \";\n     private static final String INVALID_EMAIL = \"example.com\";\n     private static final String INVALID_TAG = \"#friend\";\n-\n     private static final String VALID_NAME = BENSON.getName().toString();\n     private static final String VALID_PHONE = BENSON.getPhone().toString();\n     private static final String VALID_EMAIL = BENSON.getEmail().toString();\n-    private static final String VALID_ADDRESS = BENSON.getAddress().toString();\n+    private static final String VALID_REMARK = BENSON.getRemark().toString();\n     private static final List<JsonAdaptedTag> VALID_TAGS = BENSON.getTags().stream()\n             .map(JsonAdaptedTag::new)\n             .collect(Collectors.toList());\n@@ -41,69 +39,53 @@ public void toModelType_validPersonDetails_returnsPerson() throws Exception {\n     @Test\n     public void toModelType_invalidName_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = Name.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullName_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_invalidPhone_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = Phone.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullPhone_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_invalidEmail_throwsIllegalValueException() {\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);\n+                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = Email.MESSAGE_CONSTRAINTS;\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n \n     @Test\n     public void toModelType_nullEmail_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);\n+        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_REMARK, VALID_TAGS);\n         String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());\n         assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n     }\n-\n-    @Test\n-    public void toModelType_invalidAddress_throwsIllegalValueException() {\n-        JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);\n-        String expectedMessage = Address.MESSAGE_CONSTRAINTS;\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n-    @Test\n-    public void toModelType_nullAddress_throwsIllegalValueException() {\n-        JsonAdaptedPerson person = new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);\n-        String expectedMessage = String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());\n-        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);\n-    }\n-\n     @Test\n     public void toModelType_invalidTags_throwsIllegalValueException() {\n         List<JsonAdaptedTag> invalidTags = new ArrayList<>(VALID_TAGS);\n         invalidTags.add(new JsonAdaptedTag(INVALID_TAG));\n         JsonAdaptedPerson person =\n-                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);\n+                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_REMARK, invalidTags);\n         assertThrows(IllegalValueException.class, person::toModelType);\n     }\n "
  },
  {
    "sha": "60f8b888d125fbe8893f01a25ab229f939fb9cd2",
    "filename": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "status": "modified",
    "additions": 0,
    "deletions": 10,
    "changes": 10,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -5,7 +5,6 @@\n import java.util.stream.Stream;\n \n import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;\n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n@@ -35,7 +34,6 @@ public EditPersonDescriptorBuilder(Person person) {\n         descriptor.setName(person.getName());\n         descriptor.setPhone(person.getPhone());\n         descriptor.setEmail(person.getEmail());\n-        descriptor.setAddress(person.getAddress());\n         descriptor.setTags(person.getTags());\n     }\n \n@@ -63,14 +61,6 @@ public EditPersonDescriptorBuilder withEmail(String email) {\n         return this;\n     }\n \n-    /**\n-     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.\n-     */\n-    public EditPersonDescriptorBuilder withAddress(String address) {\n-        descriptor.setAddress(new Address(address));\n-        return this;\n-    }\n-\n     /**\n      * Parses the {@code tags} into a {@code Set<Tag>} and set it to the {@code EditPersonDescriptor}\n      * that we are building."
  },
  {
    "sha": "35d22bbf81151625bdc81d05f0c21ffd59baaad4",
    "filename": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "status": "modified",
    "additions": 14,
    "deletions": 6,
    "changes": 20,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/testutil/PersonBuilder.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/testutil/PersonBuilder.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/java/seedu/address/testutil/PersonBuilder.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -3,11 +3,11 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-import seedu.address.model.person.Address;\n import seedu.address.model.person.Email;\n import seedu.address.model.person.Name;\n import seedu.address.model.person.Person;\n import seedu.address.model.person.Phone;\n+import seedu.address.model.person.Remark;\n import seedu.address.model.tag.Tag;\n import seedu.address.model.util.SampleDataUtil;\n \n@@ -20,11 +20,12 @@\n     public static final String DEFAULT_PHONE = \"85355255\";\n     public static final String DEFAULT_EMAIL = \"amy@gmail.com\";\n     public static final String DEFAULT_ADDRESS = \"123, Jurong West Ave 6, #08-111\";\n+    public static final String DEFAULT_REMARK = \"She likes aardvarks.\";\n \n     private Name name;\n     private Phone phone;\n     private Email email;\n-    private Address address;\n+    private Remark remark;\n     private Set<Tag> tags;\n \n     /**\n@@ -34,7 +35,7 @@ public PersonBuilder() {\n         name = new Name(DEFAULT_NAME);\n         phone = new Phone(DEFAULT_PHONE);\n         email = new Email(DEFAULT_EMAIL);\n-        address = new Address(DEFAULT_ADDRESS);\n+        remark = new Remark(DEFAULT_REMARK);\n         tags = new HashSet<>();\n     }\n \n@@ -45,7 +46,7 @@ public PersonBuilder(Person personToCopy) {\n         name = personToCopy.getName();\n         phone = personToCopy.getPhone();\n         email = personToCopy.getEmail();\n-        address = personToCopy.getAddress();\n+        remark = personToCopy.getRemark();\n         tags = new HashSet<>(personToCopy.getTags());\n     }\n \n@@ -69,7 +70,6 @@ public PersonBuilder withTags(String ... tags) {\n      * Sets the {@code Address} of the {@code Person} that we are building.\n      */\n     public PersonBuilder withAddress(String address) {\n-        this.address = new Address(address);\n         return this;\n     }\n \n@@ -89,8 +89,16 @@ public PersonBuilder withEmail(String email) {\n         return this;\n     }\n \n+    /**\n+     * Sets the {@code Remark} of the {@code Person} that we are building.\n+     */\n+    public PersonBuilder withRemark(String remark) {\n+        this.remark = new Remark(remark);\n+        return this;\n+    }\n+\n     public Person build() {\n-        return new Person(name, phone, email, address, tags);\n+        return new Person(name, phone, email, remark, tags);\n     }\n \n }"
  },
  {
    "sha": "ce10a0f1f127a6a1198fd7ec900a6b2f05a3e857",
    "filename": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/blob/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/testutil/TypicalPersons.java",
    "raw_url": "https://github.com/AY2021S2-CS2103-W16-4/tp/raw/fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c/src/test/java/seedu/address/testutil/TypicalPersons.java",
    "contents_url": "https://api.github.com/repos/AY2021S2-CS2103-W16-4/tp/contents/src/test/java/seedu/address/testutil/TypicalPersons.java?ref=fcf8fe9c6280d1837ba4dd1705232f3fbeb7c52c",
    "patch": "@@ -25,11 +25,11 @@\n \n     public static final Person ALICE = new PersonBuilder().withName(\"Alice Pauline\")\n             .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")\n-            .withPhone(\"94351253\")\n+            .withPhone(\"94351253\").withRemark(\"She likes aardvarks.\")\n             .withTags(\"friends\").build();\n     public static final Person BENSON = new PersonBuilder().withName(\"Benson Meier\")\n             .withAddress(\"311, Clementi Ave 2, #02-25\")\n-            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")\n+            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withRemark(\"He can't take beer!\")\n             .withTags(\"owesMoney\", \"friends\").build();\n     public static final Person CARL = new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")\n             .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
  }
]
