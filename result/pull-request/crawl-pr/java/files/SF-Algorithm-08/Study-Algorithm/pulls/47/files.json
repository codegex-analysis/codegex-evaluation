[
  {
    "sha": "43b5ab439aaf78be03aca9a969d8efc970030838",
    "filename": "김민기/3월 3주차/boj0010_210127_5052_g4/boj_5052_전화번호목록.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/blob/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0010_210127_5052_g4/boj_5052_%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8%EB%AA%A9%EB%A1%9D.java",
    "raw_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/raw/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0010_210127_5052_g4/boj_5052_%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8%EB%AA%A9%EB%A1%9D.java",
    "contents_url": "https://api.github.com/repos/SF-Algorithm-08/Study-Algorithm/contents/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0010_210127_5052_g4/boj_5052_%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8%EB%AA%A9%EB%A1%9D.java?ref=08c049f27385d138ca90fe9b2fe5d9783b4996e9",
    "patch": "@@ -0,0 +1,43 @@\n+package boj.boj0010_210127_5052_g4;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.Arrays;\n+\n+public class boj_5052_전화번호목록 {\n+    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+    static StringBuilder sb = new StringBuilder();\n+\n+    static int N ;\n+    static String[] arr;\n+\n+    static void init() throws IOException{\n+        N = Integer.parseInt(br.readLine());\n+        arr = new String[N];\n+\n+        for(int i = 0 ; i < N ; i++){\n+            arr[i] = br.readLine().trim();\n+        }\n+        Arrays.sort(arr);\n+    }\n+\n+    static boolean solve(){\n+        for(int i = 1 ; i < N ; i++){\n+            int len = Math.min(arr[i].length(), arr[i-1].length());\n+            if(arr[i].substring(0, len).equals(arr[i - 1].substring(0, len)))       return false;\n+        }\n+        return true;\n+    }\n+\n+    public static void main(String[] args) throws IOException{\n+        int T = Integer.parseInt(br.readLine());\n+\n+        for(int tc = 1 ; tc <= T ; tc++){\n+            init();\n+            if(!solve())    sb.append(\"NO\").append(\"\\n\");\n+            else            sb.append(\"YES\").append(\"\\n\");\n+        }\n+        System.out.print(sb);\n+    }\n+}"
  },
  {
    "sha": "605300e84fd05d428da629cd7860dc6424eb1260",
    "filename": "김민기/3월 3주차/boj0010_210127_5052_g4/boj_5052_전화번호목록_Trie.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/blob/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0010_210127_5052_g4/boj_5052_%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8%EB%AA%A9%EB%A1%9D_Trie.java",
    "raw_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/raw/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0010_210127_5052_g4/boj_5052_%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8%EB%AA%A9%EB%A1%9D_Trie.java",
    "contents_url": "https://api.github.com/repos/SF-Algorithm-08/Study-Algorithm/contents/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0010_210127_5052_g4/boj_5052_%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8%EB%AA%A9%EB%A1%9D_Trie.java?ref=08c049f27385d138ca90fe9b2fe5d9783b4996e9",
    "patch": "@@ -0,0 +1,51 @@\n+package boj.boj0010_210127_5052_g4;\n+\n+import java.io.*;\n+\n+public class boj_5052_전화번호목록_Trie {\n+\tprivate static class Trie{\n+\t\tboolean isEnd;\n+\t\tTrie[] child;\n+\n+\t\tTrie(int childNum){\n+\t\t\tthis.child = new Trie[childNum];\n+\t\t}\n+\n+\t\tprivate boolean addChild(char[] numbers){\n+\t\t\tTrie curr = this;\n+\t\t\tfor(int i = 0 ; i < numbers.length; i++){\n+\t\t\t\tint val = numbers[i] - '0';\n+\t\t\t\tif(curr.child[val] == null)         curr.child[val] = new Trie(10);\n+\t\t\t\t//이미 다른 문자열의 마지막으로 저장되어 있을 때 예외\n+\t\t\t\telse if(curr.child[val].isEnd)      return false;\n+\t\t\t\t//트라이에 자식이 있는데 마지막 문자열일 경우 예외\n+\t\t\t\telse if(i == numbers.length - 1)    return false;\n+\t\t\t\tif(i == numbers.length - 1)         curr.child[val].isEnd = true;\n+\t\t\t\tcurr = curr.child[val];\n+\t\t\t}\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n+\tprivate static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\n+\tprivate static boolean solve() throws IOException{\n+\t\tTrie root = new Trie(10);\n+\t\tint N = Integer.parseInt(br.readLine());\n+\t\tboolean flag = true;\n+\t\tfor(int i = 0 ; i < N; i++){\n+\t\t\tchar[] in = br.readLine().toCharArray();\n+\t\t\tif(flag && !root.addChild(in))  flag = false;\n+\t\t}\n+\t\treturn flag;\n+\t}\n+\n+\tpublic static void main(String[] args) throws IOException{\n+\t\tint T = Integer.parseInt(br.readLine());\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tfor(int tc = 1 ; tc <= T; tc++){\n+\t\t\tsb.append(solve() ? \"YES\" : \"NO\").append(\"\\n\");\n+\t\t}\n+\t\tSystem.out.println(sb);\n+\t}\n+}"
  },
  {
    "sha": "6155c8867fefdcdb1759115c65e54cf5ce785a51",
    "filename": "김민기/3월 3주차/boj0010_210127_5052_g4/readme.md",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/blob/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0010_210127_5052_g4/readme.md",
    "raw_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/raw/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0010_210127_5052_g4/readme.md",
    "contents_url": "https://api.github.com/repos/SF-Algorithm-08/Study-Algorithm/contents/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0010_210127_5052_g4/readme.md?ref=08c049f27385d138ca90fe9b2fe5d9783b4996e9",
    "patch": "@@ -0,0 +1,26 @@\n+## 문제 정의\n+\n+1. 각 테스트 케이스 T( 1 ≤ T ≤ 50) 별로 전화번호 목록이 입력됩니다.\n+2. 전화번호의 수 N (1 ≤ N ≤ 10000)이 주어지고 다음 열부터 N 개열에 10자리 미만의 전화번호가 주어집니다.\n+3. 각 전화번호 목록에서 어떤 한 전화번호가 다른 전화번호의 접두어가 되면 안됩니다.\n+4. 접두어가 되는 경우가 있을 경우엔 NO, 하나도 없는 경우에는 YES 출력합니다.\n+\n+## 문제풀이\n+\n+### 문자열 비교 풀이\n+\n+1. 전화번호 목록을 모두 받아 공백을 지우고 배열에 저장합니다.\n+2. 저장된 배열을 정렬한 후 i = 1 부터 i = N 까지 i와 i - 1를 비교합니다. \n+3. 비교 시 둘 중 길이가 짧은 문자열의 길이로 두 문자열을 자른 후 서로가 같은지 비교합니다. 같으면 false\n+4. 모두 검사가 끝났음에도 NO가 아니라면 YES를 출력합니다.\n+\n+### 트라이\n+\n+1. 트라이를 만들고 각 입력의 첫번째 수부터 끝까지 자식을 만들면서 저장합니다.\n+2. 마지막일 경우 해당 트라이 객체에 `isEnd` 플래그를 마킹합니다.\n+3. 입력을 받아 트라이를 만드는 과정 중 `isEnd` 플래그가 `true` 인 트라이를 지나게 된다면 `false` 를 반환합니다.\n+\n+\n+## 후기\n+\n+문제를 제출한 후 알고리즘 구분에 `트라이` 가 있는 것을 보고 찾아보면서 문제를 다시풀어봤습니다. 공부해야할 게 더 늘어난 것 같습니다.\n\\ No newline at end of file"
  },
  {
    "sha": "0e92befaca0a297ea4b24fd5cf5819670fac5bf6",
    "filename": "김민기/3월 3주차/boj0068_210317_2573_g4/readme.md",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/blob/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0068_210317_2573_g4/readme.md",
    "raw_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/raw/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0068_210317_2573_g4/readme.md",
    "contents_url": "https://api.github.com/repos/SF-Algorithm-08/Study-Algorithm/contents/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0068_210317_2573_g4/readme.md?ref=08c049f27385d138ca90fe9b2fe5d9783b4996e9",
    "patch": "@@ -0,0 +1,18 @@\n+## 문제 정의\n+\n+1. `N` 행 `M` (3 ≤ N, M ≤ 300)열로 이루어진 2차원배열이 주어집니다. 배열의 각 값은 빙산의 높이를 이야기합니다.\n+2. 빙산은 매년 동서남북으로 맡닿아있는 바다의 수만큼 크기가 감소합니다. 빙산이 녹아서 동서남북 방향 기준 분리가 된다면 처음으로 분리가 된 최소의 시간을 출력합니다.\n+3. 빙산이 다 녹을 때까지 분리되지 않으면 0을 출력합니다.\n+\n+## 문제풀이\n+\n+1. 먼저 매 해 빙산이 이어져 있는지 검사합니다.\n+    1. 방문 배열을 초기화 한 후, 제일 처음 만나는 빙산으로부터 시작해서 `bfs` 탐색을 합니다. 탐색 이후 다른 빙산을 만나게 되면 종료하고 햇수를 반환합니다.\n+2. 전부 이어져 있다면 모든 빙산으로부터 4방탐색하여 빙산의 높이를 감소시킵니다.\n+    1. 이 때 빙산을 한번에 녹여야 하므로 녹아 없어진 빙산은 `-1` 로 저장한 후 모든 빙산을 탐색한 후 후처리를 합니다.\n+\n+## 후기\n+\n+빙산을 순차적으로 녹이면 다음 빙산 탐색 때 주변의 물의 수가 변동될 수 있으므로 한번에 녹여야 합니다. 이 예외처리를 더 효율적으로 할 수 있는 방법이 있을 것 같습니다.\n+\n+문제를 풀면서 배열 입력을 `N` * `M` 이 아니라 `N` * `N` 으로 받아서 런타임 에러가 났고 디버깅하는데 엄청 많은 시간을 썼습니다😭 코드를 꼼꼼하게 작성해야겠습니다.\n\\ No newline at end of file"
  },
  {
    "sha": "776261ac9d993465caf1a51fd445d922236509cf",
    "filename": "김민기/3월 3주차/boj0068_210317_2573_g4/백준_2573번_빙산.java",
    "status": "added",
    "additions": 114,
    "deletions": 0,
    "changes": 114,
    "blob_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/blob/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0068_210317_2573_g4/%EB%B0%B1%EC%A4%80_2573%EB%B2%88_%EB%B9%99%EC%82%B0.java",
    "raw_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/raw/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0068_210317_2573_g4/%EB%B0%B1%EC%A4%80_2573%EB%B2%88_%EB%B9%99%EC%82%B0.java",
    "contents_url": "https://api.github.com/repos/SF-Algorithm-08/Study-Algorithm/contents/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0068_210317_2573_g4/%EB%B0%B1%EC%A4%80_2573%EB%B2%88_%EB%B9%99%EC%82%B0.java?ref=08c049f27385d138ca90fe9b2fe5d9783b4996e9",
    "patch": "@@ -0,0 +1,114 @@\n+package boj.boj0068_210317_2573_g4;\n+\n+import java.util.*;\n+import java.io.*;\n+\n+public class 백준_2573번_빙산 {\n+\tprivate static class Node{\n+\t\tint row;\n+\t\tint col;\n+\t\tpublic Node(int row, int col){\n+\t\t\tthis.row = row;\n+\t\t\tthis.col = col;\n+\t\t}\n+\t}\n+\n+\tprivate static final int[][] DIR = {{-1, 1, 0, 0}, {0, 0, -1, 1}};\n+\n+\tprivate static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\tprivate static StringTokenizer st;\n+\n+\tprivate static int N;\n+\tprivate static int M;\n+\tprivate static int[][] map;\n+\tprivate static boolean[][] visited;\n+\n+\tprivate static Deque<Node> q = new ArrayDeque<>();\n+\n+\tprivate static void init() throws IOException{\n+\t\tst = new StringTokenizer(br.readLine());\n+\t\tN = Integer.parseInt(st.nextToken());\n+\t\tM = Integer.parseInt(st.nextToken());\n+\n+\t\tmap = new int[N][M];\n+\n+\t\tfor(int i = 0 ; i < N; i++){\n+\t\t\tst = new StringTokenizer(br.readLine());\n+\t\t\tfor(int j = 0 ; j < M; j ++){\n+\t\t\t\tmap[i][j] = Integer.parseInt(st.nextToken());\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static void bfs(Node start){\n+\t\tq.clear();\n+\t\tq.offer(start);\n+\n+\t\twhile (!q.isEmpty()){\n+\t\t\tNode curr = q.poll();\n+\t\t\tint r = curr.row;\n+\t\t\tint c = curr.col;\n+\n+\t\t\tfor(int i = 0 ; i < 4 ; i++){\n+\t\t\t\tint nr = r + DIR[0][i];\n+\t\t\t\tint nc = c + DIR[1][i];\n+\n+\t\t\t\tif(nr >= N || nr < 0 || nc >= M || nc < 0 || map[nr][nc] == 0 || visited[nr][nc] ) continue;\n+\t\t\t\tvisited[nr][nc] = true;\n+\t\t\t\tq.offer(new Node(nr, nc));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static void melt(){\n+\t\tfor(int r = 0 ; r < N; r++){\n+\t\t\tfor(int c = 0 ; c < M ; c++){\n+\t\t\t\tif(map[r][c] == 0) continue;\n+\t\t\t\tint cnt = 0;\n+\t\t\t\tfor(int i = 0 ; i < 4; i++){\n+\t\t\t\t\tint nr = r + DIR[0][i];\n+\t\t\t\t\tint nc = c + DIR[1][i];\n+\n+\t\t\t\t\tif(nr >= N || nr < 0 || nc >= M || nc < 0 || map[nr][nc] != 0) continue;\n+\t\t\t\t\tcnt++;\n+\t\t\t\t}\n+\t\t\t\tmap[r][c] = (map[r][c] - cnt) <= 0 ? -1 : (map[r][c] - cnt);\n+\t\t\t}\n+\t\t}\n+\t\tfor(int r = 0; r < N; r ++){\n+\t\t\tfor(int c = 0 ; c < M ; c++){\n+\t\t\t\tmap[r][c] = map[r][c] == -1 ? 0 : map[r][c];\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static int find(){\n+\t\tint cnt = 0;\n+\t\tvisited = new boolean[N][M];\n+\t\tfor(int r = 0; r < N ; r++){\n+\t\t\tfor(int c = 0; c < M; c++){\n+\t\t\t\tif(map[r][c] == 0 || visited[r][c]) continue;\n+\t\t\t\tif(++cnt == 2)                      return 2;\n+\t\t\t\tbfs(new Node(r, c));\n+\t\t\t}\n+\t\t}\n+\t\treturn cnt;\n+\t}\n+\n+\n+\tprivate static int solve(){\n+\t\tint ret = 0;\n+\t\twhile(true){\n+\t\t\tint val = find();\n+\t\t\tif(val != 1)    return val == 0 ? 0 : ret;\n+\t\t\tmelt();\n+\t\t\tret++;\n+\t\t}\n+\t}\n+\n+\tpublic static void main(String[] args) throws IOException{\n+\t\tinit();\n+\t\tSystem.out.println(solve());\n+\t}\n+\n+}"
  },
  {
    "sha": "1cf05b470655314bc860e2ee9c9b1a60f8cdee09",
    "filename": "김민기/3월 3주차/boj0070_210318_6118_s1/readme.md",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/blob/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0070_210318_6118_s1/readme.md",
    "raw_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/raw/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0070_210318_6118_s1/readme.md",
    "contents_url": "https://api.github.com/repos/SF-Algorithm-08/Study-Algorithm/contents/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0070_210318_6118_s1/readme.md?ref=08c049f27385d138ca90fe9b2fe5d9783b4996e9",
    "patch": "@@ -0,0 +1,15 @@\n+## 문제 정의\n+\n+1. `N` (2 ≤ N 20,000) 개의 헛간이 있을 때 `M` (1 ≤ M ≤ 50,000)열에 걸쳐 헛간의 연결정보가 주어집니다.\n+2. `1` 번 헛간으로부터 가장 먼 헛간 중 헛간 번호가 가장 낮은 값, `1` 번 헛간으로부터 거리와 같은 거리를 갖는 헛간의 수를 공백으로 구분하여 출력합니다.\n+\n+## 문제 풀이\n+\n+1. 같은 깊이에 있는 그래프에서 헛간 번호가 가장 낮은 헛간부터 탐색하기 위해 우선순위 큐 인접리스트로 그래프를 구현합니다.\n+2. 1번 헛간부터 탐색을 시작하여 거리를 인덱스로하는 2차원 배열에 가장 먼 거리의 가장 낮은 헛간 번호와 그와 같은 거리를 갖는 헛간의 수를 저장합니다.\n+\n+## 후기\n+\n+우선순위 큐로 탐색순서를 정렬하여 가장 먼 거리에 먼저 도착하는 좌표가 정답 좌표인줄 알았으나 부분 그래프에서 탐색 순서는 부모의 헛간 번호에 의존하므로 답을 풀이하는데 실패했습니다.\n+\n+결국 가장 낮은 헛간 번호를 출력해야 하므로 헛간 번호순서로 탐색하기 위해 우선순위 큐를 사용했지만 탐색 순서와 관계없이 같은 거리에 있는 모든 헛간 중 가장 낮은 값을 출력해야 하므로 모든 헛간번호를 비교해야합니다.\n\\ No newline at end of file"
  },
  {
    "sha": "7a163ab5d1785620514e3787d5679196979335cd",
    "filename": "김민기/3월 3주차/boj0070_210318_6118_s1/백준_6118번_숨바꼭질.java",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/blob/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0070_210318_6118_s1/%EB%B0%B1%EC%A4%80_6118%EB%B2%88_%EC%88%A8%EB%B0%94%EA%BC%AD%EC%A7%88.java",
    "raw_url": "https://github.com/SF-Algorithm-08/Study-Algorithm/raw/08c049f27385d138ca90fe9b2fe5d9783b4996e9/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0070_210318_6118_s1/%EB%B0%B1%EC%A4%80_6118%EB%B2%88_%EC%88%A8%EB%B0%94%EA%BC%AD%EC%A7%88.java",
    "contents_url": "https://api.github.com/repos/SF-Algorithm-08/Study-Algorithm/contents/%EA%B9%80%EB%AF%BC%EA%B8%B0/3%EC%9B%94%203%EC%A3%BC%EC%B0%A8/boj0070_210318_6118_s1/%EB%B0%B1%EC%A4%80_6118%EB%B2%88_%EC%88%A8%EB%B0%94%EA%BC%AD%EC%A7%88.java?ref=08c049f27385d138ca90fe9b2fe5d9783b4996e9",
    "patch": "@@ -0,0 +1,59 @@\n+package boj.boj0070_210318_6118_s1;\n+\n+import java.util.*;\n+import java.io.*;\n+\n+public class 백준_6118번_숨바꼭질 {\n+\tprivate final static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n+\n+\tprivate static final List<PriorityQueue<Integer>> list = new ArrayList<>();\n+\tprivate static int[][] arr;\n+\tprivate static boolean[] visited;\n+\n+\tprivate static void init() throws IOException{\n+\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n+\t\tint N = Integer.parseInt(st.nextToken());\n+\t\tint M = Integer.parseInt(st.nextToken());\n+\t\tarr = new int[N + 1][2];\n+\t\tvisited = new boolean[N + 1];\n+\n+\t\tfor(int i = 0 ; i < N + 1 ; i++){\n+\t\t\tlist.add(new PriorityQueue<>());\n+\t\t}\n+\t\tfor(int i = 0 ; i < M ; i++){\n+\t\t\tst = new StringTokenizer(br.readLine());\n+\t\t\tint from = Integer.parseInt(st.nextToken());\n+\t\t\tint to = Integer.parseInt(st.nextToken());\n+\t\t\tlist.get(from).offer(to);\n+\t\t\tlist.get(to).offer(from);\n+\t\t}\n+\t}\n+\n+\tprivate static int bfs(int start){\n+\t\tQueue<Integer> q = new ArrayDeque<>();\n+\t\tint dist = 0;\n+\t\tvisited[start] = true;\n+\t\tq.offer(start);\n+\t\twhile(!q.isEmpty()){\n+\t\t\tdist++;\n+\t\t\tfor(int i = 0, size = q.size(); i < size ; i++){\n+\t\t\t\tint curr = q.poll();\n+\t\t\t\twhile(list.get(curr).iterator().hasNext()){\n+\t\t\t\t\tint go = list.get(curr).poll();\n+\t\t\t\t\tif(visited[go])     continue;\n+\t\t\t\t\tarr[dist][0] = arr[dist][0] == 0 ? go : Math.min(arr[dist][0], go);\n+\t\t\t\t\tarr[dist][1] ++;\n+\t\t\t\t\tvisited[go] = true;\n+\t\t\t\t\tq.offer(go);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn --dist;\n+\t}\n+\n+\tpublic static void main(String[] args) throws IOException{\n+\t\tinit();\n+\t\tint res = bfs(1);\n+\t\tSystem.out.println(arr[res][0] + \" \" + res + \" \" + arr[res][1]);\n+\t}\n+}"
  }
]
