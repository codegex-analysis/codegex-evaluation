[
  {
    "sha": "c93c352ccaa04faf48107e923ab3aac2f7a9b149",
    "filename": ".github/scripts/build-rc-images-for-docker.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/build-rc-images-for-docker.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/build-rc-images-for-docker.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/build-rc-images-for-docker.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -3,8 +3,6 @@ set -euxo pipefail\n \n echo \"Building Release Candidate Images\"\n mvn package -Pprod -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n-mvn package -Pprod -Pinfinispan -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n mvn package -Pprod -Pkafkasql -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n mvn package -Pprod -Psql -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n-mvn package -Pprod -Pstreams -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n make CONTAINER_IMAGE_TAG=latest-snapshot tenant-manager-container"
  },
  {
    "sha": "b9528f1057b8bc71808a83701d96a2ca5c404a4c",
    "filename": ".github/scripts/build-release-images-for-docker.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/build-release-images-for-docker.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/build-release-images-for-docker.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/build-release-images-for-docker.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -10,20 +10,16 @@ case $BRANCH_NAME in\n   \"master\")\n        echo \"Building Release Images for Branch '$BRANCH_NAME'\"\n        mvn package -Pprod -DskipTests -Ddocker -Ddocker.tag.name=latest-release -pl distro/docker\n-       mvn package -Pprod -Pinfinispan -DskipTests -Ddocker -Ddocker.tag.name=latest-release -pl distro/docker\n        mvn package -Pprod -Pkafkasql -DskipTests -Ddocker -Ddocker.tag.name=latest-release -pl distro/docker\n        mvn package -Pprod -Psql -DskipTests -Ddocker -Ddocker.tag.name=latest-release -pl distro/docker\n-       mvn package -Pprod -Pstreams -DskipTests -Ddocker -Ddocker.tag.name=latest-release -pl distro/docker\n        make CONTAINER_IMAGE_TAG=latest-release tenant-manager-container\n        ;;\n \n    *)\n        echo \"Building Release Images for Branch '$BRANCH_NAME'\"\n        mvn package -Pprod -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-release -pl distro/docker\n-       mvn package -Pprod -Pinfinispan -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-release -pl distro/docker\n        mvn package -Pprod -Pkafkasql -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-release -pl distro/docker\n        mvn package -Pprod -Psql -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-release -pl distro/docker\n-       mvn package -Pprod -Pstreams -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-release -pl distro/docker\n        make CONTAINER_IMAGE_TAG=${BRANCH_NAME}-release tenant-manager-container\n        ;; \n esac\n\\ No newline at end of file"
  },
  {
    "sha": "647d10c94903e0350126a3dfdd3d3b4f507d7e9e",
    "filename": ".github/scripts/build-snapshot-images-for-docker.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/build-snapshot-images-for-docker.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/build-snapshot-images-for-docker.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/build-snapshot-images-for-docker.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -14,21 +14,17 @@ case $BRANCH_NAME in\n        # if master branch, tag image with \"latest-snapshot\"\n        echo \"Building Snapshot Images for Branch '$BRANCH_NAME'\"\n        mvn package -Pprod -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n-       mvn package -Pprod -Pinfinispan -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n        mvn package -Pprod -Pkafkasql -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n        mvn package -Pprod -Psql -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n-       mvn package -Pprod -Pstreams -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot -pl distro/docker\n        make CONTAINER_IMAGE_TAG=latest-snapshot tenant-manager-container\n        ;;\n \n    *)\n        # if other than master, tag image in the form \"${BRANCH_NAME}-snapshot\"\n        echo \"Building Snapshot Images for Branch '$BRANCH_NAME'\"\n        mvn package -Pprod -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-snapshot -pl distro/docker\n-       mvn package -Pprod -Pinfinispan -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-snapshot -pl distro/docker\n        mvn package -Pprod -Pkafkasql -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-snapshot -pl distro/docker\n        mvn package -Pprod -Psql -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-snapshot -pl distro/docker\n-       mvn package -Pprod -Pstreams -DskipTests -Ddocker -Ddocker.tag.name=${BRANCH_NAME}-snapshot -pl distro/docker\n        make CONTAINER_IMAGE_TAG=${BRANCH_NAME}-snapshot tenant-manager-container\n        ;; \n esac"
  },
  {
    "sha": "81371d28df940015d9511dd22f47e31556397138",
    "filename": ".github/scripts/push-rc-images-to-docker.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-rc-images-to-docker.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-rc-images-to-docker.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/push-rc-images-to-docker.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -7,13 +7,9 @@ VERSION=\"$1\"\n echo \"Pushing Release Candidate Images\"\n docker push apicurio/apicurio-registry-mem:latest-snapshot\n docker push apicurio/apicurio-registry-mem:${VERSION}\n-docker push apicurio/apicurio-registry-infinispan:latest-snapshot\n-docker push apicurio/apicurio-registry-infinispan:${VERSION}\n docker push apicurio/apicurio-registry-kafkasql:latest-snapshot\n docker push apicurio/apicurio-registry-kafkasql:${VERSION}\n docker push apicurio/apicurio-registry-sql:latest-snapshot\n docker push apicurio/apicurio-registry-sql:${VERSION}\n-docker push apicurio/apicurio-registry-streams:latest-snapshot\n-docker push apicurio/apicurio-registry-streams:${VERSION}\n docker push apicurio/apicurio-registry-tenant-manager-api:latest-snapshot\n docker push apicurio/apicurio-registry-tenant-manager-api:${VERSION}"
  },
  {
    "sha": "ba12885af9a37be92724a6783dbbe069b5a7efbd",
    "filename": ".github/scripts/push-rc-images-to-quay.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-rc-images-to-quay.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-rc-images-to-quay.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/push-rc-images-to-quay.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -7,14 +7,10 @@ VERSION=\"$1\"\n echo \"Pushing Release Candidate Images\"\n docker push quay.io/apicurio/apicurio-registry-mem:latest-snapshot\n docker push quay.io/apicurio/apicurio-registry-mem:${VERSION}\n-docker push quay.io/apicurio/apicurio-registry-infinispan:latest-snapshot\n-docker push quay.io/apicurio/apicurio-registry-infinispan:${VERSION}\n docker push quay.io/apicurio/apicurio-registry-kafkasql:latest-snapshot\n docker push quay.io/apicurio/apicurio-registry-kafkasql:${VERSION}\n docker push quay.io/apicurio/apicurio-registry-sql:latest-snapshot\n docker push quay.io/apicurio/apicurio-registry-sql:${VERSION}\n-docker push quay.io/apicurio/apicurio-registry-streams:latest-snapshot\n-docker push quay.io/apicurio/apicurio-registry-streams:${VERSION}\n docker push quay.io/apicurio/apicurio-registry-tenant-manager-api:latest-snapshot\n docker push quay.io/apicurio/apicurio-registry-tenant-manager-api:${VERSION}\n  "
  },
  {
    "sha": "b533872aa5e4000fac3448cf1450b771272e3066",
    "filename": ".github/scripts/push-release-images-to-docker.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-release-images-to-docker.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-release-images-to-docker.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/push-release-images-to-docker.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -11,14 +11,10 @@ case $BRANCH_NAME in\n        echo \"Pushing Release Images for Branch '$BRANCH_NAME'\"\n        docker push apicurio/apicurio-registry-mem:latest-release\n        docker push apicurio/apicurio-registry-mem:${VERSION}\n-       docker push apicurio/apicurio-registry-infinispan:latest-release\n-       docker push apicurio/apicurio-registry-infinispan:${VERSION}\n        docker push apicurio/apicurio-registry-kafkasql:latest-release\n        docker push apicurio/apicurio-registry-kafkasql:${VERSION}\n        docker push apicurio/apicurio-registry-sql:latest-release\n        docker push apicurio/apicurio-registry-sql:${VERSION}\n-       docker push apicurio/apicurio-registry-streams:latest-release\n-       docker push apicurio/apicurio-registry-streams:${VERSION}\n        docker push apicurio/apicurio-registry-tenant-manager-api:latest-release\n        docker push apicurio/apicurio-registry-tenant-manager-api:${VERSION}\n        ;;\n@@ -27,14 +23,10 @@ case $BRANCH_NAME in\n        echo \"Pushing Release Images for Branch '$BRANCH_NAME'\"\n        docker push apicurio/apicurio-registry-mem:${BRANCH_NAME}-release\n        docker push apicurio/apicurio-registry-mem:${VERSION}\n-       docker push apicurio/apicurio-registry-infinispan:${BRANCH_NAME}-release\n-       docker push apicurio/apicurio-registry-infinispan:${VERSION}\n        docker push apicurio/apicurio-registry-kafkasql:${BRANCH_NAME}-release\n        docker push apicurio/apicurio-registry-kafkasql:${VERSION}\n        docker push apicurio/apicurio-registry-sql:${BRANCH_NAME}-release\n        docker push apicurio/apicurio-registry-sql:${VERSION}\n-       docker push apicurio/apicurio-registry-streams:${BRANCH_NAME}-release\n-       docker push apicurio/apicurio-registry-streams:${VERSION}\n        docker push apicurio/apicurio-registry-tenant-manager-api:${BRANCH_NAME}-release\n        docker push apicurio/apicurio-registry-tenant-manager-api:${VERSION}\n        ;;"
  },
  {
    "sha": "923a0963739305f92be18706738a0a2dec2b469c",
    "filename": ".github/scripts/push-release-images-to-quay.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-release-images-to-quay.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-release-images-to-quay.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/push-release-images-to-quay.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -11,14 +11,10 @@ case $BRANCH_NAME in\n        echo \"Pushing Release Images for Branch '$BRANCH_NAME'\"\n        docker push quay.io/apicurio/apicurio-registry-mem:latest-release\n        docker push quay.io/apicurio/apicurio-registry-mem:${VERSION}\n-       docker push quay.io/apicurio/apicurio-registry-infinispan:latest-release\n-       docker push quay.io/apicurio/apicurio-registry-infinispan:${VERSION}\n        docker push quay.io/apicurio/apicurio-registry-kafkasql:latest-release\n        docker push quay.io/apicurio/apicurio-registry-kafkasql:${VERSION}\n        docker push quay.io/apicurio/apicurio-registry-sql:latest-release\n        docker push quay.io/apicurio/apicurio-registry-sql:${VERSION}\n-       docker push quay.io/apicurio/apicurio-registry-streams:latest-release\n-       docker push quay.io/apicurio/apicurio-registry-streams:${VERSION}\n        docker push quay.io/apicurio/apicurio-registry-tenant-manager-api:latest-release\n        docker push quay.io/apicurio/apicurio-registry-tenant-manager-api:${VERSION}\n        ;;\n@@ -27,14 +23,10 @@ case $BRANCH_NAME in\n        echo \"Pushing Release Images for Branch '$BRANCH_NAME'\"\n        docker push quay.io/apicurio/apicurio-registry-mem:${BRANCH_NAME}-release\n        docker push quay.io/apicurio/apicurio-registry-mem:${VERSION}\n-       docker push quay.io/apicurio/apicurio-registry-infinispan:${BRANCH_NAME}-release\n-       docker push quay.io/apicurio/apicurio-registry-infinispan:${VERSION}\n        docker push quay.io/apicurio/apicurio-registry-kafkasql:${BRANCH_NAME}-release\n        docker push quay.io/apicurio/apicurio-registry-kafkasql:${VERSION}\n        docker push quay.io/apicurio/apicurio-registry-sql:${BRANCH_NAME}-release\n        docker push quay.io/apicurio/apicurio-registry-sql:${VERSION}\n-       docker push quay.io/apicurio/apicurio-registry-streams:${BRANCH_NAME}-release\n-       docker push quay.io/apicurio/apicurio-registry-streams:${VERSION}\n        docker push quay.io/apicurio/apicurio-registry-tenant-manager-api:${BRANCH_NAME}-release\n        docker push quay.io/apicurio/apicurio-registry-tenant-manager-api:${VERSION}\n        ;;"
  },
  {
    "sha": "5b3acc0a2b467ec3d1d3780bba834db5d7fba623",
    "filename": ".github/scripts/push-snapshot-images-to-docker.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-snapshot-images-to-docker.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-snapshot-images-to-docker.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/push-snapshot-images-to-docker.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -13,20 +13,16 @@ case $BRANCH_NAME in\n     \"master\")\n        echo \"Pushing Snapshot Images for Branch '$BRANCH_NAME'\"\n        docker push apicurio/apicurio-registry-mem:latest-snapshot\n-       docker push apicurio/apicurio-registry-infinispan:latest-snapshot\n        docker push apicurio/apicurio-registry-kafkasql:latest-snapshot\n        docker push apicurio/apicurio-registry-sql:latest-snapshot\n-       docker push apicurio/apicurio-registry-streams:latest-snapshot\n        docker push apicurio/apicurio-registry-tenant-manager-api:latest-snapshot\n        ;;\n \n     *)\n        echo \"Pushing Snapshot Images for Branch '$BRANCH_NAME'\"\n        docker push apicurio/apicurio-registry-mem:${BRANCH_NAME}-snapshot\n-       docker push apicurio/apicurio-registry-infinispan:${BRANCH_NAME}-snapshot\n        docker push apicurio/apicurio-registry-kafkasql:${BRANCH_NAME}-snapshot\n        docker push apicurio/apicurio-registry-sql:${BRANCH_NAME}-snapshot\n-       docker push apicurio/apicurio-registry-streams:${BRANCH_NAME}-snapshot\n        docker push apicurio/apicurio-registry-tenant-manager-api:${BRANCH_NAME}-snapshot\n        ;;\n esac"
  },
  {
    "sha": "d5959e864d41092dfa632296e66adb37c36c1100",
    "filename": ".github/scripts/push-snapshot-images-to-quay.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-snapshot-images-to-quay.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/push-snapshot-images-to-quay.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/push-snapshot-images-to-quay.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -13,20 +13,16 @@ case $BRANCH_NAME in\n     \"master\")\n        echo \"Pushing Snapshot Images for Branch '$BRANCH_NAME'\"\n        docker push quay.io/apicurio/apicurio-registry-mem:latest-snapshot\n-       docker push quay.io/apicurio/apicurio-registry-infinispan:latest-snapshot\n        docker push quay.io/apicurio/apicurio-registry-kafkasql:latest-snapshot\n        docker push quay.io/apicurio/apicurio-registry-sql:latest-snapshot\n-       docker push quay.io/apicurio/apicurio-registry-streams:latest-snapshot\n        docker push quay.io/apicurio/apicurio-registry-tenant-manager-api:latest-snapshot\n        ;;\n \n     *)\n        echo \"Pushing Snapshot Images for Branch '$BRANCH_NAME'\"\n        docker push quay.io/apicurio/apicurio-registry-mem:${BRANCH_NAME}-snapshot\n-       docker push quay.io/apicurio/apicurio-registry-infinispan:${BRANCH_NAME}-snapshot\n        docker push quay.io/apicurio/apicurio-registry-kafkasql:${BRANCH_NAME}-snapshot\n        docker push quay.io/apicurio/apicurio-registry-sql:${BRANCH_NAME}-snapshot\n-       docker push quay.io/apicurio/apicurio-registry-streams:${BRANCH_NAME}-snapshot\n        docker push quay.io/apicurio/apicurio-registry-tenant-manager-api:${BRANCH_NAME}-snapshot\n        ;;\n esac"
  },
  {
    "sha": "975d4a78073f5d99c77f0b4eca3a3e555ddd03e5",
    "filename": ".github/scripts/tag-rc-images-for-quay.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/tag-rc-images-for-quay.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/tag-rc-images-for-quay.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/tag-rc-images-for-quay.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -7,14 +7,10 @@ VERSION=\"$1\"\n echo \"Tagging Release Candidate Images\"\n docker image tag apicurio/apicurio-registry-mem:latest-snapshot quay.io/apicurio/apicurio-registry-mem:latest-snapshot\n docker image tag apicurio/apicurio-registry-mem:${VERSION} quay.io/apicurio/apicurio-registry-mem:${VERSION}\n-docker image tag apicurio/apicurio-registry-infinispan:latest-snapshot quay.io/apicurio/apicurio-registry-infinispan:latest-snapshot\n-docker image tag apicurio/apicurio-registry-infinispan:${VERSION} quay.io/apicurio/apicurio-registry-infinispan:${VERSION}\n docker image tag apicurio/apicurio-registry-kafkasql:latest-snapshot quay.io/apicurio/apicurio-registry-kafkasql:latest-snapshot\n docker image tag apicurio/apicurio-registry-kafkasql:${VERSION} quay.io/apicurio/apicurio-registry-kafkasql:${VERSION}\n docker image tag apicurio/apicurio-registry-sql:latest-snapshot quay.io/apicurio/apicurio-registry-sql:latest-snapshot\n docker image tag apicurio/apicurio-registry-sql:${VERSION} quay.io/apicurio/apicurio-registry-sql:${VERSION}\n-docker image tag apicurio/apicurio-registry-streams:latest-snapshot quay.io/apicurio/apicurio-registry-streams:latest-snapshot\n-docker image tag apicurio/apicurio-registry-streams:${VERSION} quay.io/apicurio/apicurio-registry-streams:${VERSION}\n docker image tag apicurio/apicurio-registry-tenant-manager-api:latest-snapshot quay.io/apicurio/apicurio-registry-tenant-manager-api:latest-snapshot\n docker image tag apicurio/apicurio-registry-tenant-manager-api:${VERSION} quay.io/apicurio/apicurio-registry-tenant-manager-api:${VERSION}\n  \n\\ No newline at end of file"
  },
  {
    "sha": "2e4c809d643e2670607f2662f9ce9dd9e2fa988a",
    "filename": ".github/scripts/tag-release-images-for-quay.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/tag-release-images-for-quay.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/tag-release-images-for-quay.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/tag-release-images-for-quay.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -11,14 +11,10 @@ case $BRANCH_NAME in\n        echo \"Tagging Release Images for Branch '$BRANCH_NAME'\"\n        docker image tag apicurio/apicurio-registry-mem:latest-release quay.io/apicurio/apicurio-registry-mem:latest-release\n        docker image tag apicurio/apicurio-registry-mem:${VERSION} quay.io/apicurio/apicurio-registry-mem:${VERSION}\n-       docker image tag apicurio/apicurio-registry-infinispan:latest-release quay.io/apicurio/apicurio-registry-infinispan:latest-release\n-       docker image tag apicurio/apicurio-registry-infinispan:${VERSION} quay.io/apicurio/apicurio-registry-infinispan:${VERSION}\n        docker image tag apicurio/apicurio-registry-kafkasql:latest-release quay.io/apicurio/apicurio-registry-kafkasql:latest-release\n        docker image tag apicurio/apicurio-registry-kafkasql:${VERSION} quay.io/apicurio/apicurio-registry-kafkasql:${VERSION}\n        docker image tag apicurio/apicurio-registry-sql:latest-release quay.io/apicurio/apicurio-registry-sql:latest-release\n        docker image tag apicurio/apicurio-registry-sql:${VERSION} quay.io/apicurio/apicurio-registry-sql:${VERSION}\n-       docker image tag apicurio/apicurio-registry-streams:latest-release quay.io/apicurio/apicurio-registry-streams:latest-release\n-       docker image tag apicurio/apicurio-registry-streams:${VERSION} quay.io/apicurio/apicurio-registry-streams:${VERSION}\n        docker image tag apicurio/apicurio-registry-tenant-manager-api:latest-release quay.io/apicurio/apicurio-registry-tenant-manager-api:latest-release\n        docker image tag apicurio/apicurio-registry-tenant-manager-api:${VERSION} quay.io/apicurio/apicurio-registry-tenant-manager-api:${VERSION}\n        ;;\n@@ -27,14 +23,10 @@ case $BRANCH_NAME in\n        echo \"Tagging Release Images for Branch '$BRANCH_NAME'\"\n        docker image tag apicurio/apicurio-registry-mem:${BRANCH_NAME}-release quay.io/apicurio/apicurio-registry-mem:${BRANCH_NAME}-release\n        docker image tag apicurio/apicurio-registry-mem:${VERSION} quay.io/apicurio/apicurio-registry-mem:${VERSION}\n-       docker image tag apicurio/apicurio-registry-infinispan:${BRANCH_NAME}-release quay.io/apicurio/apicurio-registry-infinispan:${BRANCH_NAME}-release\n-       docker image tag apicurio/apicurio-registry-infinispan:${VERSION} quay.io/apicurio/apicurio-registry-infinispan:${VERSION}\n        docker image tag apicurio/apicurio-registry-kafkasql:${BRANCH_NAME}-release quay.io/apicurio/apicurio-registry-kafkasql:${BRANCH_NAME}-release\n        docker image tag apicurio/apicurio-registry-kafkasql:${VERSION} quay.io/apicurio/apicurio-registry-kafkasql:${VERSION}\n        docker image tag apicurio/apicurio-registry-sql:${BRANCH_NAME}-release quay.io/apicurio/apicurio-registry-sql:${BRANCH_NAME}-release\n        docker image tag apicurio/apicurio-registry-sql:${VERSION} quay.io/apicurio/apicurio-registry-sql:${VERSION}\n-       docker image tag apicurio/apicurio-registry-streams:${BRANCH_NAME}-release quay.io/apicurio/apicurio-registry-streams:${BRANCH_NAME}-release\n-       docker image tag apicurio/apicurio-registry-streams:${VERSION} quay.io/apicurio/apicurio-registry-streams:${VERSION}\n        docker image tag apicurio/apicurio-registry-tenant-manager-api:${BRANCH_NAME}-release quay.io/apicurio/apicurio-registry-tenant-manager-api:${BRANCH_NAME}-release\n        docker image tag apicurio/apicurio-registry-tenant-manager-api:${VERSION} quay.io/apicurio/apicurio-registry-tenant-manager-api:${VERSION}\n        ;;"
  },
  {
    "sha": "bd0ebc81a59aefd51f5c54dd17527c5b29966650",
    "filename": ".github/scripts/tag-snapshot-images-for-quay.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/tag-snapshot-images-for-quay.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/tag-snapshot-images-for-quay.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/tag-snapshot-images-for-quay.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -13,20 +13,16 @@ case $BRANCH_NAME in\n   \"master\")\n        echo \"Tagging Snapshot Images for Branch '$BRANCH_NAME'\"\n        docker image tag apicurio/apicurio-registry-mem:latest-snapshot quay.io/apicurio/apicurio-registry-mem:latest-snapshot\n-       docker image tag apicurio/apicurio-registry-infinispan:latest-snapshot quay.io/apicurio/apicurio-registry-infinispan:latest-snapshot\n        docker image tag apicurio/apicurio-registry-kafkasql:latest-snapshot quay.io/apicurio/apicurio-registry-kafkasql:latest-snapshot\n        docker image tag apicurio/apicurio-registry-sql:latest-snapshot quay.io/apicurio/apicurio-registry-sql:latest-snapshot\n-       docker image tag apicurio/apicurio-registry-streams:latest-snapshot quay.io/apicurio/apicurio-registry-streams:latest-snapshot\n        docker image tag apicurio/apicurio-registry-tenant-manager-api:latest-snapshot quay.io/apicurio/apicurio-registry-tenant-manager-api:latest-snapshot\n        ;;\n \n    *)\n        echo \"Tagging Snapshot Images for Branch '$BRANCH_NAME'\"\n        docker image tag apicurio/apicurio-registry-mem:${BRANCH_NAME}-snapshot quay.io/apicurio/apicurio-registry-mem:${BRANCH_NAME}-snapshot\n-       docker image tag apicurio/apicurio-registry-infinispan:${BRANCH_NAME}-snapshot quay.io/apicurio/apicurio-registry-infinispan:${BRANCH_NAME}-snapshot\n        docker image tag apicurio/apicurio-registry-kafkasql:${BRANCH_NAME}-snapshot quay.io/apicurio/apicurio-registry-kafkasql:${BRANCH_NAME}-snapshot\n        docker image tag apicurio/apicurio-registry-sql:${BRANCH_NAME}-snapshot quay.io/apicurio/apicurio-registry-sql:${BRANCH_NAME}-snapshot\n-       docker image tag apicurio/apicurio-registry-streams:${BRANCH_NAME}-snapshot quay.io/apicurio/apicurio-registry-streams:${BRANCH_NAME}-snapshot\n        docker image tag apicurio/apicurio-registry-tenant-manager-api:${BRANCH_NAME}-snapshot quay.io/apicurio/apicurio-registry-tenant-manager-api:${BRANCH_NAME}-snapshot\n        ;;\n "
  },
  {
    "sha": "486474bf587ba6bf65be782e7feb5b0be77390cc",
    "filename": ".github/scripts/verify-docker-release.sh",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/verify-docker-release.sh",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/scripts/verify-docker-release.sh",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/scripts/verify-docker-release.sh?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -12,7 +12,7 @@\n ##                                                                                                                                                                                         ##\n ## USAGE: The script accepts image names as paramaters. We can pass as many image names as we want.                                                                                        ##\n ##                                                                                                                                                                                         ##\n-## EXAMPLE: ./verify-docker-release.sh apicurio/apicurio-registry-infinispan:1.2.3.Final apicurio/apicurio-registry-infinispan:latest apicurio/apicurio-registry-infinispan:latest-release ## \n+## EXAMPLE: ./verify-docker-release.sh apicurio/apicurio-registry-sql:1.2.3.Final apicurio/apicurio-registry-sql:latest apicurio/apicurio-registry-sql:latest-release ## \n ##                                                                                                                                                                                         ##\n ############################################################################################################################################################################################# \n "
  },
  {
    "sha": "eccbbe873888dd5b7104daa168d2bea9364909cd",
    "filename": ".github/workflows/integration-tests.yaml",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/integration-tests.yaml",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/integration-tests.yaml",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/workflows/integration-tests.yaml?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -55,29 +55,30 @@ jobs:\n         run: mvn -N io.takari:maven:wrapper -Dmaven=3.6.3\n \n       - name: Build All Variants\n-        run: ./mvnw clean install -Pprod -Psql -Pstreams -Pkafkasql -Pmultitenancy -Pinfinispan -DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n-\n+        run: ./mvnw clean install -Pprod -Psql -Pkafkasql -Pmultitenancy -DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n       - name: Build integration-tests-common\n         run: ./mvnw install -Pintegration-tests -pl integration-tests/integration-tests-common\n+\n       - name: Run UI tests - only PRs\n         if: github.ref != 'refs/heads/master'\n         run: ./mvnw verify -Pintegration-tests -Pui -Pinmemory -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress -DtrimStackTrace=false\n-      - name: Run Integration Tests - streams\n-        run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Pstreams -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress\n-      - name: Run Integration Tests - streams clustered\n-        run: ./mvnw verify -Pintegration-tests -Pclustered -Pstreams -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress\n+      \n       - name: Run Integration Tests - sql\n         run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Psql -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress\n-      - name: Run Integration Tests - infinispan\n-        run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Pinfinispan -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress\n+      - name: Run Integration Tests - sql clustered\n+        run: ./mvnw verify -Pintegration-tests -Pclustered -Psql -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress\n       - name: Run Integration Tests - kafkasql\n         run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Pkafkasql -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress\n+      - name: Run Integration Tests - kafkasql clustered\n+        run: ./mvnw verify -Pintegration-tests -Pclustered -Pkafkasql -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress\n       - name: Run Integration Tests - multitenancy\n         run: ./mvnw verify -Pintegration-tests -Pmultitenancy -Psql -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress -DtrimStackTrace=false\n-      - name: Run Legacy Tests - streams\n-        run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Pstreams -pl integration-tests/legacy-tests -Dmaven.javadoc.skip=true --no-transfer-progress\n+\n+      - name: Run Legacy Tests - kafkasql\n+        run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Pkafkasql -pl integration-tests/legacy-tests -Dmaven.javadoc.skip=true --no-transfer-progress\n       - name: Run Legacy Tests - sql\n         run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Psql -pl integration-tests/legacy-tests -Dmaven.javadoc.skip=true --no-transfer-progress\n+\n       - name: Collect logs\n         if: failure()\n         run: ./.github/scripts/collect_logs.sh"
  },
  {
    "sha": "2be5ea74d94ed50faa7cf37c9695c774daaabf75",
    "filename": ".github/workflows/kubernetes-tests-manual.yaml",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/kubernetes-tests-manual.yaml",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/kubernetes-tests-manual.yaml",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/workflows/kubernetes-tests-manual.yaml?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -38,15 +38,14 @@ jobs:\n             ${{ runner.os }}-maven-\n \n       - name: Build All Variants\n-        run: mvn clean install -Pprod -Psql -Pinfinispan -Pstreams -Pmultitenancy -DskipTests\n+        run: mvn clean install -Pprod -Psql -Pkafkasql -Pmultitenancy -DskipTests\n         \n       - name: Build The Tagged Docker Images\n         run: |\n           cd distro/docker\n           mvn package -Pprod -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot\n           mvn package -Pprod -Psql -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot\n-          mvn package -Pprod -Pinfinispan -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot\n-          mvn package -Pprod -Pstreams -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot\n+          mvn package -Pprod -Pkafkasql -DskipTests -Ddocker -Ddocker.tag.name=latest-snapshot\n \n       - name: Kubernetes Tests\n         run: CI_BUILD=true APICURIO_IMAGES_TAG=\"latest-snapshot\" E2E_APICURIO_TESTS_PROFILE=${{ github.event.inputs.apicurio-tests-profile }} ./.github/scripts/test_apicurio_kubernetes.sh"
  },
  {
    "sha": "a057006ee66a2c6126e8755808793004142fa08f",
    "filename": ".github/workflows/kubernetes-tests.yaml",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/kubernetes-tests.yaml",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/kubernetes-tests.yaml",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/workflows/kubernetes-tests.yaml?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -36,15 +36,14 @@ jobs:\n         run: mvn -N io.takari:maven:wrapper -Dmaven=3.6.3\n \n       - name: Build All Variants\n-        run: ./mvnw clean install -Pprod -Psql -Pinfinispan -Pstreams -Pmultitenancy -DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n+        run: ./mvnw clean install -Pprod -Psql -Pkafkasql -Pmultitenancy -DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n \n       - name: Build The Tagged Docker Images\n         run: |\n           cd distro/docker\n           mvn package -Pprod -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n           mvn package -Pprod -Psql -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n-          mvn package -Pprod -Pinfinispan -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n-          mvn package -Pprod -Pstreams -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n+          mvn package -Pprod -Pkafkasql -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n \n       - name: Kubernetes Tests\n         run: CI_BUILD=true APICURIO_IMAGES_TAG=\"latest-ci\" E2E_APICURIO_TESTS_PROFILE=acceptance ./.github/scripts/test_apicurio_kubernetes.sh\n@@ -75,15 +74,14 @@ jobs:\n           architecture: x64\n \n       - name: Build All Variants\n-        run: mvn clean install -Pprod -Psql -Pinfinispan -Pstreams -Pmultitenancy -DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress\n+        run: mvn clean install -Pprod -Psql -Pkafkasql -Pmultitenancy -DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress\n \n       - name: Build The Tagged Docker Images\n         run: |\n           cd distro/docker\n           mvn package -Pprod -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n           mvn package -Pprod -Psql -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n-          mvn package -Pprod -Pinfinispan -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n-          mvn package -Pprod -Pstreams -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n+          mvn package -Pprod -Pkafkasql -DskipTests -Ddocker -Ddocker.tag.name=latest-ci\n \n       - name: Kubernetes Tests\n         run: CI_BUILD=true APICURIO_IMAGES_TAG=\"latest-ci\" E2E_APICURIO_TESTS_PROFILE=clustered ./.github/scripts/test_apicurio_kubernetes.sh"
  },
  {
    "sha": "e51cc4e94462136591312587456a5d9d1f65db5e",
    "filename": ".github/workflows/maven-snapshot-release.yaml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/maven-snapshot-release.yaml",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/maven-snapshot-release.yaml",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/workflows/maven-snapshot-release.yaml?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -19,4 +19,4 @@ jobs:\n     \n       - name: Maven Deploy\n         if: github.ref == 'refs/heads/master'\n-        run: mvn deploy --batch-mode -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -Pmultitenancy -DskipTests -Pgithub --settings /home/runner/.m2/settings.xml\n+        run: mvn deploy --batch-mode -Pprod -Psql -Pmultitenancy -DskipTests -Pgithub --settings /home/runner/.m2/settings.xml"
  },
  {
    "sha": "e21392a2ec7152da128f3fb9c65f86d9156cb979",
    "filename": ".github/workflows/nightly-build.yaml",
    "status": "modified",
    "additions": 1,
    "deletions": 10,
    "changes": 11,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/nightly-build.yaml",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/nightly-build.yaml",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/workflows/nightly-build.yaml?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -23,32 +23,23 @@ jobs:\n           uses: actions/checkout@v2\n             \n         - name: Build Registry\n-          run: ./mvnw clean install -Pprod -Psql -Pstreams -Pkafkasql -Pmultitenancy -Pinfinispan -Dquarkus.version=999-SNAPSHOT\n+          run: ./mvnw clean install -Pprod -Psql -Pkafkasql -Pmultitenancy -Dquarkus.version=999-SNAPSHOT\n \n         - name: Set test profile to all\n           run: echo \"test_profile=all\" >> $GITHUB_ENV\n \n         - name: Build integration-tests-common\n           run: ./mvnw install -Pintegration-tests -pl integration-tests/integration-tests-common -Dquarkus.version=999-SNAPSHOT\n \n-        - name: Run Integration Tests - streams\n-          run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Pstreams -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress -Dquarkus.version=999-SNAPSHOT\n-\n         - name: Run Integration Tests - sql\n           run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Psql -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress -Dquarkus.version=999-SNAPSHOT\n \n-        - name: Run Integration Tests - infinispan\n-          run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Pinfinispan -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress -Dquarkus.version=999-SNAPSHOT\n-\n         - name: Run Integration Tests - kafkasql\n           run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Pkafkasql -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress -Dquarkus.version=999-SNAPSHOT\n \n         - name: Run Integration Tests - multitenancy\n           run: ./mvnw verify -Pintegration-tests -Pmultitenancy -Psql -pl integration-tests/testsuite -Dmaven.javadoc.skip=true --no-transfer-progress -DtrimStackTrace=false -Dquarkus.version=999-SNAPSHOT \n \n-        - name: Run Legacy Tests - streams\n-          run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Pstreams -pl integration-tests/legacy-tests -Dmaven.javadoc.skip=true --no-transfer-progress -Dquarkus.version=999-SNAPSHOT\n-            \n         - name: Run Legacy Tests - sql\n           run: ./mvnw verify -Pintegration-tests -P${{ env.test_profile }} -Psql -pl integration-tests/legacy-tests -Dmaven.javadoc.skip=true --no-transfer-progress -Dquarkus.version=999-SNAPSHOT\n "
  },
  {
    "sha": "df3a0c9a438c251e34b4cc82c7c8c80635b0477f",
    "filename": ".github/workflows/release-candidate.yaml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/release-candidate.yaml",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/release-candidate.yaml",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/workflows/release-candidate.yaml?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -79,7 +79,7 @@ jobs:\n         run: |\n           cd registry\n           mvn -N io.takari:maven:wrapper -Dmaven=3.6.3\n-          ./mvnw clean install -Pprod -Psql -Pinfinispan -Pstreams -Pkafkasql -DskipTests -Pmultitenancy -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n+          ./mvnw clean install -Pprod -Psql -Pkafkasql -DskipTests -Pmultitenancy -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n \n       - name: Build Examples\n         run: |"
  },
  {
    "sha": "55fdf90653e73f53489930eb1794fc5f37dab9a4",
    "filename": ".github/workflows/release.yaml",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/release.yaml",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/release.yaml",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/workflows/release.yaml?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -113,7 +113,7 @@ jobs:\n         run: |\n           cd registry\n           mvn -N io.takari:maven:wrapper -Dmaven=3.6.3\n-          ./mvnw clean install -Pprod -Psql -Pinfinispan -Pstreams -Pkafkasql -DskipTests  -Pmultitenancy -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n+          ./mvnw clean install -Pprod -Psql -Pkafkasql -DskipTests  -Pmultitenancy -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n \n       - name: Build Examples\n         run: |\n@@ -268,15 +268,9 @@ jobs:\n       - name: Verify Docker Release For mem\n         run: ./.github/scripts/verify-docker-release.sh apicurio/apicurio-registry-mem:${{ github.event.inputs.release-version}} apicurio/apicurio-registry-mem:latest-release \n      \n-      - name: Verify Docker Release For streams\n-        run: ./.github/scripts/verify-docker-release.sh apicurio/apicurio-registry-streams:${{ github.event.inputs.release-version}} apicurio/apicurio-registry-streams:latest-release \n-    \n       - name: Verify Docker Release For sql\n         run: ./.github/scripts/verify-docker-release.sh apicurio/apicurio-registry-sql:${{ github.event.inputs.release-version}} apicurio/apicurio-registry-sql:latest-release \n     \n-      - name: Verify Docker Release For infinispan\n-        run: ./.github/scripts/verify-docker-release.sh apicurio/apicurio-registry-infinispan:${{ github.event.inputs.release-version}} apicurio/apicurio-registry-infinispan:latest-release \n- \n       - name: Verify Docker Release For kafkasql\n         run: ./.github/scripts/verify-docker-release.sh apicurio/apicurio-registry-kafkasql:${{ github.event.inputs.release-version}} apicurio/apicurio-registry-kafkasql:latest-release \n "
  },
  {
    "sha": "dcab5f9bab5cba3da08a4570b487bbc8ca647d69",
    "filename": ".github/workflows/verify.yaml",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/verify.yaml",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/.github/workflows/verify.yaml",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/.github/workflows/verify.yaml?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -44,10 +44,10 @@ jobs:\n         run: mvn -N io.takari:maven:wrapper -Dmaven=3.6.3\n \n       - name: Build and Test All Variants\n-        run: ./mvnw clean install -Pprod -Psql -Pstreams -Pkafkasql -Pinfinispan -Pmultitenancy -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n+        run: ./mvnw clean install -Pprod -Psql -Pkafkasql -Pmultitenancy -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n \n       - name: Build Asyncmem Variant\n-        run: ./mvnw install -Pprod -Pasyncmem -DskipTests -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n+        run: ./mvnw install -Pprod -DskipTests -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5\n \n       - name: Login to DockerHub Registry\n         if: github.event_name == 'push'"
  },
  {
    "sha": "e9e48b32e1ca12f1732f56e052491b6d15d22cf9",
    "filename": "app/pom.xml",
    "status": "modified",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/app/pom.xml",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/app/pom.xml",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/app/pom.xml?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -77,6 +77,30 @@\n             <artifactId>quarkus-kotlin</artifactId>\n         </dependency>\n \n+        <!-- Persistence -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jdbc-h2</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jdbc-postgresql</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-agroal</artifactId>\n+        </dependency>\n+\n+        <!-- JDBI -->\n+        <dependency>\n+            <groupId>org.jdbi</groupId>\n+            <artifactId>jdbi3-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-codec</groupId>\n+            <artifactId>commons-codec</artifactId>\n+        </dependency>\n+\n         <!-- Third Party Libraries -->\n         <dependency>\n             <groupId>io.apicurio</groupId>\n@@ -162,6 +186,16 @@\n             <artifactId>quarkus-junit5</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-test-common</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>io.rest-assured</groupId>\n             <artifactId>rest-assured</artifactId>"
  },
  {
    "sha": "291bbae7bd91d5f7ffff1589c5ccc143f69a73a9",
    "filename": "app/src/main/java/io/apicurio/registry/ccompat/store/FacadeConverter.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/ccompat/store/FacadeConverter.java",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/ccompat/store/FacadeConverter.java",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/app/src/main/java/io/apicurio/registry/ccompat/store/FacadeConverter.java?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -35,7 +35,7 @@ public static Schema convert(String subject, StoredArtifactDto storedArtifact) {\n         return new Schema(\n                 convertUnsigned(storedArtifact.getContentId()),\n                 subject,\n-                convertUnsigned(storedArtifact.getVersion().intValue()),\n+                convertUnsigned(storedArtifact.getVersionId()),\n                 storedArtifact.getContent().content()\n         );\n     }\n@@ -44,7 +44,7 @@ public static SchemaContent convert(ContentHandle content) {\n         return new SchemaContent(content.content());\n     }\n \n-    public static SubjectVersion convert(String artifactId, Long version) {\n-        return new SubjectVersion(artifactId, version);\n+    public static SubjectVersion convert(String artifactId, Number version) {\n+        return new SubjectVersion(artifactId, version.longValue());\n     }\n }"
  },
  {
    "sha": "5de8a94126c3d560bf514ac224123b0313e7cb93",
    "filename": "app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacade.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacade.java",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacade.java",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacade.java?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -84,7 +84,7 @@\n     CompatibilityCheckResponse testCompatibilityBySubjectName(String subject, String version,\n             SchemaContent request);\n \n-    <T> T parseVersionString(String subject, String versionString, Function<Long, T> then);\n+    <T> T parseVersionString(String subject, String versionString, Function<String, T> then);\n \n     RuleConfigurationDto getGlobalRule(RuleType ruleType);\n "
  },
  {
    "sha": "8a603a68b5598123dfe0e7dcb2e9499a5d466c3f",
    "filename": "app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacadeImpl.java",
    "status": "modified",
    "additions": 21,
    "deletions": 15,
    "changes": 36,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacadeImpl.java",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacadeImpl.java",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacadeImpl.java?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -40,12 +40,12 @@\n import io.apicurio.registry.types.ArtifactType;\n import io.apicurio.registry.types.Current;\n import io.apicurio.registry.types.RuleType;\n+import io.apicurio.registry.util.VersionUtil;\n \n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.SortedSet;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionStage;\n import java.util.function.Function;\n@@ -65,6 +65,7 @@\n     @Inject\n     RulesService rulesService;\n \n+    @Override\n     public List<String> getSubjects() {\n         // TODO maybe not necessary...\n         return new ArrayList<>(storage.getArtifactIds(null));\n@@ -75,14 +76,15 @@\n \n         return storage.getArtifactVersionsByContentId(contentId)\n                 .stream()\n-                .map(artifactMetaData -> FacadeConverter.convert(artifactMetaData.getId(), artifactMetaData.getVersion()))\n+                .map(artifactMetaData -> FacadeConverter.convert(artifactMetaData.getId(), artifactMetaData.getVersionId()))\n                 .collect(Collectors.toList());\n     }\n \n     @Override\n     public List<Integer> deleteSubject(String subject) throws ArtifactNotFoundException, RegistryStorageException {\n         return storage.deleteArtifact(null, subject)\n                 .stream()\n+                .map(VersionUtil::toInteger)\n                 .map(FacadeConverter::convertUnsigned)\n                 .collect(Collectors.toList());\n     }\n@@ -107,7 +109,9 @@ public Schema getSchema(String subject, String versionString) throws ArtifactNot\n     public List<Integer> getVersions(String subject) throws ArtifactNotFoundException, RegistryStorageException {\n         return storage.getArtifactVersions(null, subject)\n                 .stream()\n+                .map(VersionUtil::toLong)\n                 .map(FacadeConverter::convertUnsigned)\n+                .sorted()\n                 .collect(Collectors.toList());\n     }\n \n@@ -131,7 +135,7 @@ public Schema getSchema(String subject, SchemaContent schema) throws ArtifactNot\n         } catch (ArtifactNotFoundException nfe) {\n             // This is OK - when it happens just move on and create\n         }\n-        \n+\n         // TODO Should this creation and updating of an artifact be a different operation?\n         // TODO method that returns a completion stage should not throw an exception\n         CompletionStage<ArtifactMetaDataDto> artifactMeta = createOrUpdateArtifact(subject, schema, ArtifactType.fromValue(schemaType));\n@@ -141,7 +145,7 @@ public Schema getSchema(String subject, SchemaContent schema) throws ArtifactNot\n \n     @Override\n     public int deleteSchema(String subject, String versionString) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n-        return FacadeConverter.convertUnsigned(parseVersionString(subject, versionString, version -> {\n+        return VersionUtil.toInteger(parseVersionString(subject, versionString, version -> {\n             storage.deleteArtifactVersion(null, subject, version);\n             return version;\n         }));\n@@ -169,12 +173,11 @@ public void createOrUpdateGlobalRule(RuleType type, RuleConfigurationDto dto) {\n     public CompatibilityCheckResponse testCompatibilityBySubjectName(String subject, String version,\n             SchemaContent request) {\n \n-        return parseVersionString(subject, version, parsedVersion -> {\n-\n+        return parseVersionString(subject, version, v -> {\n             try {\n                 final ArtifactVersionMetaDataDto artifact = storage\n-                        .getArtifactVersionMetaData(null, subject, parsedVersion);\n-                rulesService.applyRules(null, subject, parsedVersion, artifact.getType(),\n+                        .getArtifactVersionMetaData(null, subject, v);\n+                rulesService.applyRules(null, subject, v, artifact.getType(),\n                         ContentHandle.create(request.getSchema()));\n                 return CompatibilityCheckResponse.IS_COMPATIBLE;\n             } catch (RuleViolationException ex) {\n@@ -188,10 +191,10 @@ public CompatibilityCheckResponse testCompatibilityBySubjectName(String subject,\n         try {\n             if (!doesArtifactExist(subject)) {\n                 rulesService.applyRules(null, subject, artifactType, ContentHandle.create(schema), RuleApplicationType.CREATE);\n-                res = storage.createArtifact(null, subject, artifactType, ContentHandle.create(schema));\n+                res = storage.createArtifact(null, subject, null, artifactType, ContentHandle.create(schema));\n             } else {\n                 rulesService.applyRules(null, subject, artifactType, ContentHandle.create(schema), RuleApplicationType.UPDATE);\n-                res = storage.updateArtifact(null, subject, artifactType, ContentHandle.create(schema));\n+                res = storage.updateArtifact(null, subject, null, artifactType, ContentHandle.create(schema));\n             }\n         } catch (RuleViolationException ex) {\n             if (ex.getRuleType() == RuleType.VALIDITY) {\n@@ -211,17 +214,20 @@ public CompatibilityCheckResponse testCompatibilityBySubjectName(String subject,\n      * On success, call the \"then\" function with the parsed version (MUST NOT be null) and return it's result.\n      * Optionally provide an \"else\" function that will receive the exception that would be otherwise thrown.\n      */\n-    public <T> T parseVersionString(String subject, String versionString, Function<Long, T> then) {\n-        long version;\n+    @Override\n+    public <T> T parseVersionString(String subject, String versionString, Function<String, T> then) {\n+        String version;\n+        // TODO possibly need to ignore\n         if (\"latest\".equals(versionString)) {\n-            SortedSet<Long> versions = storage.getArtifactVersions(null, subject);\n-            version = versions.last();\n+            ArtifactMetaDataDto latest = storage.getArtifactMetaData(null, subject);\n+            version = latest.getVersion();\n         } else {\n             try {\n-                version = Integer.parseUnsignedInt(versionString); // required by the spec, ignoring the possible leading \"+\"\n+                Integer.parseUnsignedInt(versionString); // required by the spec, ignoring the possible leading \"+\"\n             } catch (NumberFormatException e) {\n                 throw new IllegalArgumentException(\"Illegal version format: \" + versionString, e);\n             }\n+            version = versionString;\n         }\n         return then.apply(version);\n     }"
  },
  {
    "sha": "f72ba47bbaa7614ce454c2812cc8cbdfe6c9a02a",
    "filename": "app/src/main/java/io/apicurio/registry/cncf/schemaregistry/impl/SchemagroupsResourceImpl.java",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/cncf/schemaregistry/impl/SchemagroupsResourceImpl.java",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/cncf/schemaregistry/impl/SchemagroupsResourceImpl.java",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/app/src/main/java/io/apicurio/registry/cncf/schemaregistry/impl/SchemagroupsResourceImpl.java?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -16,7 +16,7 @@\n \n package io.apicurio.registry.cncf.schemaregistry.impl;\n \n-import static io.apicurio.registry.cncf.schemaregistry.impl.CNCFApiUtil.*;\n+import static io.apicurio.registry.cncf.schemaregistry.impl.CNCFApiUtil.dtoToSchemaGroup;\n import static io.apicurio.registry.metrics.MetricIDs.REST_CONCURRENT_REQUEST_COUNT;\n import static io.apicurio.registry.metrics.MetricIDs.REST_CONCURRENT_REQUEST_COUNT_DESC;\n import static io.apicurio.registry.metrics.MetricIDs.REST_GROUP_TAG;\n@@ -79,6 +79,7 @@\n import io.apicurio.registry.types.Current;\n import io.apicurio.registry.types.RuleType;\n import io.apicurio.registry.util.ArtifactTypeUtil;\n+import io.apicurio.registry.util.VersionUtil;\n import io.quarkus.security.identity.SecurityIdentity;\n \n /**\n@@ -226,10 +227,10 @@ public Response getLatestSchema(String groupId, String schemaId) {\n         try {\n             if (!artifactExists(groupId, schemaId)) {\n                 rulesService.applyRules(groupId, schemaId, artifactType, content, RuleApplicationType.CREATE);\n-                res = storage.createArtifactWithMetadata(groupId, schemaId, artifactType, content, metadata);\n+                res = storage.createArtifactWithMetadata(groupId, schemaId, null, artifactType, content, metadata);\n             } else {\n                 rulesService.applyRules(groupId, schemaId, artifactType, content, RuleApplicationType.UPDATE);\n-                res = storage.updateArtifactWithMetadata(groupId, schemaId, artifactType, content, metadata);\n+                res = storage.updateArtifactWithMetadata(groupId, schemaId, null, artifactType, content, metadata);\n             }\n         } catch (RuleViolationException ex) {\n             if (ex.getRuleType() == RuleType.VALIDITY) {\n@@ -264,9 +265,9 @@ public void deleteSchema(String groupId, String schemaId) {\n     @Override\n     public Response getSchemaVersion(String groupId, String schemaId, Integer versionNumber) {\n         verifyGroupExists(groupId);\n-        StoredArtifactDto artifact = storage.getArtifactVersion(groupId, schemaId, versionNumber);\n+        StoredArtifactDto artifact = storage.getArtifactVersion(groupId, schemaId, VersionUtil.toString(versionNumber));\n \n-        ArtifactVersionMetaDataDto metadata = storage.getArtifactVersionMetaData(groupId, schemaId, versionNumber);\n+        ArtifactVersionMetaDataDto metadata = storage.getArtifactVersionMetaData(groupId, schemaId, VersionUtil.toString(versionNumber));\n         String contentType = metadata.getProperties().get(PROP_CONTENT_TYPE);\n \n         return Response.ok(artifact.getContent(), contentType).build();\n@@ -275,7 +276,7 @@ public Response getSchemaVersion(String groupId, String schemaId, Integer versio\n     @Override\n     public void deleteSchemaVersion(String groupId, String schemaId, Integer versionNumber) {\n         verifyGroupExists(groupId);\n-        storage.deleteArtifactVersion(groupId, schemaId, versionNumber);\n+        storage.deleteArtifactVersion(groupId, schemaId, VersionUtil.toString(versionNumber));\n     }\n \n     private boolean artifactExists(String groupId, String schemaId) {"
  },
  {
    "sha": "46b514b74f0ad256edfb6a3b9750e9f9c33e7c88",
    "filename": "app/src/main/java/io/apicurio/registry/content/canon/XmlContentCanonicalizer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/content/canon/XmlContentCanonicalizer.java",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/content/canon/XmlContentCanonicalizer.java",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/app/src/main/java/io/apicurio/registry/content/canon/XmlContentCanonicalizer.java?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 JBoss Inc\n+ * Copyright 2020 Red Hat Inc\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License."
  },
  {
    "sha": "407a0e6b5cf994743e2e6d3b9bf36d32b3e58934",
    "filename": "app/src/main/java/io/apicurio/registry/events/EventSourcedRegistryStorage.java",
    "status": "modified",
    "additions": 29,
    "deletions": 25,
    "changes": 54,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/events/EventSourcedRegistryStorage.java",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/events/EventSourcedRegistryStorage.java",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/app/src/main/java/io/apicurio/registry/events/EventSourcedRegistryStorage.java?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -19,7 +19,6 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.SortedSet;\n import java.util.concurrent.CompletionStage;\n \n import io.apicurio.registry.content.ContentHandle;\n@@ -109,45 +108,50 @@ public void updateArtifactState(String groupId, String artifactId, ArtifactState\n     }\n \n     @Override\n-    public void updateArtifactState(String groupId, String artifactId, Long version, ArtifactState state) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n+    public void updateArtifactState(String groupId, String artifactId, String version, ArtifactState state)\n+            throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n         storage.updateArtifactState(groupId, artifactId, version, state);\n         ArtifactStateChange data = new ArtifactStateChange();\n         data.setGroupId(groupId);\n         data.setArtifactId(artifactId);\n         data.setState(state.value());\n-        data.setVersion(Long.toString(version));\n+        data.setVersion(version);\n         fireEvent(RegistryEventType.ARTIFACT_STATE_CHANGED, artifactId, data, null);\n     }\n \n     @Override\n-    public CompletionStage<ArtifactMetaDataDto> createArtifact(String groupId, String artifactId, ArtifactType artifactType, ContentHandle content)\n+    public CompletionStage<ArtifactMetaDataDto> createArtifact(String groupId, String artifactId,\n+            String version, ArtifactType artifactType, ContentHandle content)\n             throws ArtifactAlreadyExistsException, RegistryStorageException {\n-        return storage.createArtifact(groupId, artifactId, artifactType, content)\n+        return storage.createArtifact(groupId, artifactId, version, artifactType, content)\n                 .whenComplete((meta, ex) -> {\n                     ArtifactId data = new ArtifactId();\n                     data.setGroupId(groupId);\n                     data.setArtifactId(artifactId);\n-                    data.setVersion(Long.toString(meta.getVersion()));\n+                    data.setVersion(meta.getVersion());\n                     fireEvent(RegistryEventType.ARTIFACT_CREATED, artifactId, data, ex);\n                 });\n     }\n \n+    /**\n+     * @see io.apicurio.registry.storage.RegistryStorage#createArtifactWithMetadata(java.lang.String, java.lang.String, java.lang.String, io.apicurio.registry.types.ArtifactType, io.apicurio.registry.content.ContentHandle, io.apicurio.registry.storage.dto.EditableArtifactMetaDataDto)\n+     */\n     @Override\n-    public CompletionStage<ArtifactMetaDataDto> createArtifactWithMetadata(String groupId, String artifactId, ArtifactType artifactType, ContentHandle content,\n-            EditableArtifactMetaDataDto metaData) throws ArtifactAlreadyExistsException, RegistryStorageException {\n-        return storage.createArtifactWithMetadata(groupId, artifactId, artifactType, content, metaData)\n+    public CompletionStage<ArtifactMetaDataDto> createArtifactWithMetadata(String groupId, String artifactId, String version,\n+            ArtifactType artifactType, ContentHandle content, EditableArtifactMetaDataDto metaData) throws ArtifactAlreadyExistsException, RegistryStorageException {\n+        return storage.createArtifactWithMetadata(groupId, artifactId, version, artifactType, content, metaData)\n                 .whenComplete((meta, ex) -> {\n                     ArtifactId data = new ArtifactId();\n                     data.setGroupId(groupId);\n                     data.setArtifactId(artifactId);\n-                    data.setVersion(Long.toString(meta.getVersion()));\n+                    data.setVersion(meta.getVersion());\n                     fireEvent(RegistryEventType.ARTIFACT_CREATED, artifactId, data, ex);\n                 });\n     }\n \n     @Override\n-    public SortedSet<Long> deleteArtifact(String groupId, String artifactId) throws ArtifactNotFoundException, RegistryStorageException {\n-        SortedSet<Long> set = storage.deleteArtifact(groupId, artifactId);\n+    public List<String> deleteArtifact(String groupId, String artifactId) throws ArtifactNotFoundException, RegistryStorageException {\n+        List<String> set = storage.deleteArtifact(groupId, artifactId);\n         ArtifactId data = new ArtifactId();\n         data.setGroupId(groupId);\n         data.setArtifactId(artifactId);\n@@ -179,27 +183,27 @@ public ContentHandle getArtifactByContentId(long contentId) throws ContentNotFou\n     }\n \n     @Override\n-    public CompletionStage<ArtifactMetaDataDto> updateArtifact(String groupId, String artifactId, ArtifactType artifactType, ContentHandle content)\n+    public CompletionStage<ArtifactMetaDataDto> updateArtifact(String groupId, String artifactId, String version, ArtifactType artifactType, ContentHandle content)\n             throws ArtifactNotFoundException, RegistryStorageException {\n-        return storage.updateArtifact(groupId, artifactId, artifactType, content)\n+        return storage.updateArtifact(groupId, artifactId, version, artifactType, content)\n                 .whenComplete((meta, ex) -> {\n                     ArtifactId data = new ArtifactId();\n                     data.setGroupId(groupId);\n                     data.setArtifactId(artifactId);\n-                    data.setVersion(Long.toString(meta.getVersion()));\n+                    data.setVersion(meta.getVersion());\n                     fireEvent(RegistryEventType.ARTIFACT_UPDATED, artifactId, data, ex);\n                 });\n     }\n \n     @Override\n-    public CompletionStage<ArtifactMetaDataDto> updateArtifactWithMetadata(String groupId, String artifactId, ArtifactType artifactType, ContentHandle content,\n+    public CompletionStage<ArtifactMetaDataDto> updateArtifactWithMetadata(String groupId, String artifactId, String version, ArtifactType artifactType, ContentHandle content,\n             EditableArtifactMetaDataDto metaData) throws ArtifactNotFoundException, RegistryStorageException {\n-        return storage.updateArtifactWithMetadata(groupId, artifactId, artifactType, content, metaData)\n+        return storage.updateArtifactWithMetadata(groupId, artifactId, version, artifactType, content, metaData)\n                 .whenComplete((meta, ex) -> {\n                     ArtifactId data = new ArtifactId();\n                     data.setGroupId(groupId);\n                     data.setArtifactId(artifactId);\n-                    data.setVersion(Long.toString(meta.getVersion()));\n+                    data.setVersion(meta.getVersion());\n                     fireEvent(RegistryEventType.ARTIFACT_UPDATED, artifactId, data, ex);\n                 });\n     }\n@@ -290,7 +294,7 @@ public void deleteArtifactRule(String groupId, String artifactId, RuleType rule)\n     }\n \n     @Override\n-    public SortedSet<Long> getArtifactVersions(String groupId, String artifactId) throws ArtifactNotFoundException, RegistryStorageException {\n+    public List<String> getArtifactVersions(String groupId, String artifactId) throws ArtifactNotFoundException, RegistryStorageException {\n         return storage.getArtifactVersions(groupId, artifactId);\n     }\n \n@@ -306,34 +310,34 @@ public StoredArtifactDto getArtifactVersion(long id) throws ArtifactNotFoundExce\n     }\n \n     @Override\n-    public StoredArtifactDto getArtifactVersion(String groupId, String artifactId, long version) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n+    public StoredArtifactDto getArtifactVersion(String groupId, String artifactId, String version) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n         return storage.getArtifactVersion(groupId, artifactId, version);\n     }\n \n     @Override\n-    public void deleteArtifactVersion(String groupId, String artifactId, long version) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n+    public void deleteArtifactVersion(String groupId, String artifactId, String version) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n         storage.deleteArtifactVersion(groupId, artifactId, version);\n         ArtifactId data = new ArtifactId();\n         data.setGroupId(groupId);\n         data.setArtifactId(artifactId);\n-        data.setVersion(Long.toString(version));\n+        data.setVersion(version);\n         fireEvent(RegistryEventType.ARTIFACT_DELETED, artifactId, data, null);\n     }\n \n     @Override\n-    public ArtifactVersionMetaDataDto getArtifactVersionMetaData(String groupId, String artifactId, long version)\n+    public ArtifactVersionMetaDataDto getArtifactVersionMetaData(String groupId, String artifactId, String version)\n             throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n         return storage.getArtifactVersionMetaData(groupId, artifactId, version);\n     }\n \n     @Override\n-    public void updateArtifactVersionMetaData(String groupId, String artifactId, long version, EditableArtifactMetaDataDto metaData)\n+    public void updateArtifactVersionMetaData(String groupId, String artifactId, String version, EditableArtifactMetaDataDto metaData)\n             throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n         storage.updateArtifactVersionMetaData(groupId, artifactId, version, metaData);\n     }\n \n     @Override\n-    public void deleteArtifactVersionMetaData(String groupId, String artifactId, long version) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n+    public void deleteArtifactVersionMetaData(String groupId, String artifactId, String version) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n         storage.deleteArtifactVersionMetaData(groupId, artifactId, version);\n     }\n "
  },
  {
    "sha": "73f52349230ce9d7839bced1a286bc6cd0a4f9f3",
    "filename": "app/src/main/java/io/apicurio/registry/ibmcompat/api/impl/ApiServiceImpl.java",
    "status": "modified",
    "additions": 25,
    "deletions": 20,
    "changes": 45,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/ibmcompat/api/impl/ApiServiceImpl.java",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/ibmcompat/api/impl/ApiServiceImpl.java",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/app/src/main/java/io/apicurio/registry/ibmcompat/api/impl/ApiServiceImpl.java?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -22,7 +22,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.SortedSet;\n import java.util.TreeSet;\n import java.util.concurrent.CompletionException;\n import java.util.stream.Collectors;\n@@ -66,6 +65,7 @@\n import io.apicurio.registry.types.ArtifactType;\n import io.apicurio.registry.types.Current;\n import io.apicurio.registry.util.ArtifactIdGenerator;\n+import io.apicurio.registry.util.VersionUtil;\n \n /**\n  * @author Ales Justin\n@@ -100,21 +100,21 @@ private SchemaVersion getLatestSchemaVersion(String schemaid) {\n         return getSchemaVersionFromStorage(schemaid, storage.getArtifact(null, schemaid).getVersion());\n     }\n \n-    private SchemaVersion getSchemaVersionFromStorage(String schemaid, Long versionid) {\n+    private SchemaVersion getSchemaVersionFromStorage(String schemaid, String versionid) {\n         SchemaVersion schemaVersion = null;\n         try {\n             ArtifactVersionMetaDataDto avmdd = storage.getArtifactVersionMetaData(null, schemaid, versionid);\n-            schemaVersion = getSchemaVersion(avmdd.getVersion(), avmdd.getName(), avmdd.getCreatedOn(), avmdd.getState(), avmdd.getDescription());\n+            schemaVersion = getSchemaVersion(avmdd.getVersionId(), avmdd.getVersion(), avmdd.getName(), avmdd.getCreatedOn(), avmdd.getState(), avmdd.getDescription());\n         } catch (ArtifactNotFoundException e) {\n             // If artifact version does not exist (which may occur due to race conditions), swallow\n             // the exception here and return a null result, to be filtered out\n         }\n         return schemaVersion;\n     }\n \n-    private SchemaVersion getSchemaVersion(long id, String name, long createdOn, ArtifactState state, String description) {\n+    private SchemaVersion getSchemaVersion(int versionId, String version, String name, long createdOn, ArtifactState state, String description) {\n         SchemaVersion schemaVersion = new SchemaVersion();\n-        schemaVersion.setId((int) id);\n+        schemaVersion.setId(versionId);\n         schemaVersion.setDate(new Date(createdOn));\n         schemaVersion.setName(name);\n         schemaVersion.setEnabled(!ArtifactState.DISABLED.equals(state));\n@@ -199,18 +199,18 @@ private void handleArtifactCreation(AsyncResponse response, String artifactId, A\n         try {\n             schemaVersions.addAll(getSchemaVersions(artifactId));\n \n-            if (schemaVersions.isEmpty() || amdd.getVersion() != schemaVersions.get(schemaVersions.size() - 1).getId()) {\n+            if (schemaVersions.isEmpty() || amdd.getVersionId() != schemaVersions.get(schemaVersions.size() - 1).getId()) {\n                 // Async artifactStore types may not yet be ready to call artifactStore.getArtifactVersionMetaData(),\n                 // so add the new version to the response\n-                schemaVersions.add(getSchemaVersion(amdd.getVersion(), amdd.getName(), amdd.getCreatedOn(), amdd.getState(), null));\n+                schemaVersions.add(getSchemaVersion(amdd.getVersionId(), amdd.getVersion(), amdd.getName(), amdd.getCreatedOn(), amdd.getState(), null));\n             } else {\n                 // Async artifactStore types may not have updated the version metadata yet, so set the version name in the response\n                 schemaVersions.get(schemaVersions.size() - 1).setName(amdd.getName());\n             }\n         } catch (ArtifactNotFoundException anfe) {\n             // If this is a newly created schema, async artifactStore types may not yet be ready to call\n             // artifactStore.getArtifactVersions(), so add the new version to the response\n-            schemaVersions.add(getSchemaVersion(amdd.getVersion(), amdd.getName(), amdd.getCreatedOn(), amdd.getState(), null));\n+            schemaVersions.add(getSchemaVersion(amdd.getVersionId(), amdd.getVersion(), amdd.getName(), amdd.getCreatedOn(), amdd.getState(), null));\n         } catch (Throwable throwable) {\n             response.resume(t);\n             return;\n@@ -267,10 +267,10 @@ private void setSchemaVersionState(ArtifactState artifactState, SchemaVersion ve\n     }\n \n     private void updateArtifactVersionState(String schemaid, int versionnum, ArtifactState artifactState) {\n-        ArtifactVersionMetaDataDto avmdd = storage.getArtifactVersionMetaData(null, schemaid, versionnum);\n+        ArtifactVersionMetaDataDto avmdd = storage.getArtifactVersionMetaData(null, schemaid, VersionUtil.toString(versionnum));\n         if (artifactState != null && !artifactState.equals(avmdd.getState())) {\n             // Modify the artifact version state\n-            storage.updateArtifactState(null, schemaid, Long.valueOf(versionnum), artifactState);\n+            storage.updateArtifactState(null, schemaid, VersionUtil.toString(versionnum), artifactState);\n         }\n     }\n \n@@ -335,15 +335,15 @@ public void apiSchemasPost(AsyncResponse response, NewSchema schema, boolean ver\n             Map<String, String> properties = new HashMap<>();\n             properties.put(SCHEMA_NAME_ADDITIONAL_PROPERTY, schemaName);\n             dto.setProperties(properties);\n-            storage.createArtifactWithMetadata(null, artifactId, ArtifactType.AVRO, content, dto)\n+            storage.createArtifactWithMetadata(null, artifactId, null, ArtifactType.AVRO, content, dto)\n                 .whenComplete((amdd, t) -> handleArtifactCreation(response, artifactId, amdd, t));\n         }\n     }\n \n     @Override\n     public Response apiSchemasSchemaidDelete(String schemaid)\n     throws ArtifactNotFoundException {\n-        SortedSet<Long> ids = storage.deleteArtifact(null, schemaid);\n+        List<String> ids = storage.deleteArtifact(null, schemaid);\n         return Response.status(Response.Status.NO_CONTENT).entity(ids).build();\n     }\n \n@@ -363,8 +363,13 @@ public Response apiSchemasSchemaidPatch(String schemaid, List<SchemaModification\n         ArtifactState artifactState = getPatchedArtifactState(schemaModificationPatches);\n         if(artifactState != null) {\n             // Modify all the artifact version states\n-            for (Long versionid : storage.getArtifactVersions(null, schemaid)) {\n-                updateArtifactVersionState(schemaid, versionid.intValue(), artifactState);\n+            for (String version : storage.getArtifactVersions(null, schemaid)) {\n+                try {\n+                    int versionnum = Integer.parseInt(version);\n+                    updateArtifactVersionState(schemaid, versionnum, artifactState);\n+                } catch (NumberFormatException e) {\n+                    // TODO what to do with an incompatible version #\n+                }\n             }\n         }\n         String schemaStateComment = getPatchedArtifactStateComment(schemaModificationPatches);\n@@ -424,15 +429,15 @@ public void apiSchemasSchemaidVersionsPost(AsyncResponse response, String schema\n         } else {\n             EditableArtifactMetaDataDto dto = new EditableArtifactMetaDataDto();\n             dto.setName(newSchemaVersion.getVersion());\n-            storage.updateArtifactWithMetadata(null, schemaid, ArtifactType.AVRO, body, dto)\n+            storage.updateArtifactWithMetadata(null, schemaid, null, ArtifactType.AVRO, body, dto)\n                 .whenComplete((amdd, t) -> handleArtifactCreation(response, schemaid, amdd, t));\n         }\n     }\n \n     @Override\n     public Response apiSchemasSchemaidVersionsVersionnumDelete(String schemaid, int versionnum)\n     throws ArtifactNotFoundException {\n-        storage.deleteArtifactVersion(null, schemaid, versionnum);\n+        storage.deleteArtifactVersion(null, schemaid, VersionUtil.toString(versionnum));\n         return Response.status(Response.Status.NO_CONTENT).build();\n     }\n \n@@ -441,7 +446,7 @@ public Schema apiSchemasSchemaidVersionsVersionnumGet(String schemaid, int versi\n     throws ArtifactNotFoundException {\n         Schema schema = new Schema();\n         populateSchemaSummary(schemaid, schema);\n-        StoredArtifactDto artifact = storage.getArtifactVersion(null, schemaid, versionnum);\n+        StoredArtifactDto artifact = storage.getArtifactVersion(null, schemaid, VersionUtil.toString(versionnum));\n         schema.setDefinition(artifact.getContent().content());\n         schema.setVersion(getSchemaVersionFromStorage(schemaid, artifact.getVersion()));\n         return schema;\n@@ -456,12 +461,12 @@ public Response apiSchemasSchemaidVersionsVersionnumPatch(String schemaid, int v\n \n         String schemaVersionStateComment = getPatchedArtifactStateComment(schemaModificationPatches);\n         if (schemaVersionStateComment != null) {\n-            ArtifactVersionMetaDataDto avmdd = storage.getArtifactVersionMetaData(null, schemaid, versionnum);\n+            ArtifactVersionMetaDataDto avmdd = storage.getArtifactVersionMetaData(null, schemaid, VersionUtil.toString(versionnum));\n             EditableArtifactMetaDataDto dto = EditableArtifactMetaDataDto.builder()\n                 .name(avmdd.getName())\n                 .description(schemaVersionStateComment)\n                 .build();\n-            storage.updateArtifactVersionMetaData(null, schemaid, versionnum, dto);\n+            storage.updateArtifactVersionMetaData(null, schemaid, VersionUtil.toString(versionnum), dto);\n         }\n \n         // Return the updated schema info\n@@ -474,7 +479,7 @@ public Response apiSchemasSchemaidVersionsVersionnumPatch(String schemaid, int v\n                 .stream()\n                 .filter(version -> versionnum == version.getId())\n                 .findFirst()\n-                .orElseThrow(() -> new VersionNotFoundException(null, schemaid, versionnum));\n+                .orElseThrow(() -> new VersionNotFoundException(null, schemaid, VersionUtil.toString(versionnum)));\n         setSchemaVersionState(artifactState, schemaVersion);\n \n         return Response.ok().entity(info).build();"
  },
  {
    "sha": "878b40831888a1755224e4ca2cc06da6d7ec2e01",
    "filename": "app/src/main/java/io/apicurio/registry/rest/HeadersHack.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/Apicurio/apicurio-registry/blob/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/rest/HeadersHack.java",
    "raw_url": "https://github.com/Apicurio/apicurio-registry/raw/776dcbcb1e7fb5630b78804359d12446f215262c/app/src/main/java/io/apicurio/registry/rest/HeadersHack.java",
    "contents_url": "https://api.github.com/repos/Apicurio/apicurio-registry/contents/app/src/main/java/io/apicurio/registry/rest/HeadersHack.java?ref=776dcbcb1e7fb5630b78804359d12446f215262c",
    "patch": "@@ -32,14 +32,14 @@ public static void checkIfDeprecated(\n             Supplier<ArtifactState> stateSupplier,\n             String groupId,\n             String artifactId,\n-            Number version,\n+            Object version,\n             Response.ResponseBuilder builder\n     ) {\n         if (stateSupplier.get() == ArtifactState.DEPRECATED) {\n             builder.header(Headers.DEPRECATED, true);\n             builder.header(Headers.GROUP_ID, groupId);\n             builder.header(Headers.ARTIFACT_ID, artifactId);\n-            builder.header(Headers.VERSION, version);\n+            builder.header(Headers.VERSION, version != null ? String.valueOf(version) : null);\n         }\n     }\n }"
  }
]
