[
  {
    "sha": "5d1e1048523de18597d86295748a747deff57b23",
    "filename": "assets/map/points.json",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/RSCPlus/rscplus/blob/04bf3b0453e0b4e442235b5881e07100b6ef99d8/assets/map/points.json",
    "raw_url": "https://github.com/RSCPlus/rscplus/raw/04bf3b0453e0b4e442235b5881e07100b6ef99d8/assets/map/points.json",
    "contents_url": "https://api.github.com/repos/RSCPlus/rscplus/contents/assets/map/points.json?ref=04bf3b0453e0b4e442235b5881e07100b6ef99d8",
    "patch": "@@ -39,7 +39,9 @@\n     { \"type\": \"bank\", \"x\": 285, \"y\": 1366 },\n     { \"type\": \"bank\", \"x\": 300, \"y\": 1510 },\n     { \"type\": \"bank\", \"x\": 676, \"y\": 2252 },\n+    { \"type\": \"bank\", \"x\": 695, \"y\": 1718 },\n     { \"type\": \"bank\", \"x\": 784, \"y\": 1835 },\n+    { \"type\": \"bank\", \"x\": 935, \"y\": 1347 },\n     { \"type\": \"bank\", \"x\": 1119, \"y\": 1476 },\n     { \"type\": \"bank\", \"x\": 1234, \"y\": 2546 },\n     { \"type\": \"bank\", \"x\": 1447, \"y\": 1651 },"
  },
  {
    "sha": "b300157257583bc5ca5d3a1bab14d99a893ac928",
    "filename": "src/Client/ConfigWindow.java",
    "status": "modified",
    "additions": 41,
    "deletions": 74,
    "changes": 115,
    "blob_url": "https://github.com/RSCPlus/rscplus/blob/04bf3b0453e0b4e442235b5881e07100b6ef99d8/src/Client/ConfigWindow.java",
    "raw_url": "https://github.com/RSCPlus/rscplus/raw/04bf3b0453e0b4e442235b5881e07100b6ef99d8/src/Client/ConfigWindow.java",
    "contents_url": "https://api.github.com/repos/RSCPlus/rscplus/contents/src/Client/ConfigWindow.java?ref=04bf3b0453e0b4e442235b5881e07100b6ef99d8",
    "patch": "@@ -23,6 +23,7 @@\n import Game.Camera;\n import Game.Client;\n import Game.Game;\n+import Game.Item;\n import Game.KeyboardHandler;\n import Game.Replay;\n import java.awt.BorderLayout;\n@@ -155,7 +156,9 @@\n   private JCheckBox generalPanelLogTimestampsCheckbox;\n   private JCheckBox generalPanelLogForceLevelCheckbox;\n   private JCheckBox generalPanelLogForceTimestampsCheckbox;\n-  private JSlider generalPanelCommandPatchModeSlider;\n+  private JCheckBox generalPanelCommandPatchQuestCheckbox;\n+  private JCheckBox generalPanelCommandPatchEdibleRaresCheckbox;\n+  private JCheckBox generalPanelCommandPatchDiskOfReturningCheckbox;\n   private JCheckBox generalPanelBypassAttackCheckbox;\n   private JCheckBox generalPanelKeepScrollbarPosMagicPrayerCheckbox;\n   private JCheckBox generalPanelRoofHidingCheckbox;\n@@ -773,10 +776,6 @@ public void actionPerformed(ActionEvent e) {\n     generalPanelInventoryFullAlertCheckbox.setToolTipText(\n         \"Displays a large notice when the inventory is full\");\n \n-    generalPanelBypassAttackCheckbox = addCheckbox(\"Always left click to attack\", generalPanel);\n-    generalPanelBypassAttackCheckbox.setToolTipText(\n-        \"Left click attack monsters regardless of level difference\");\n-\n     generalPanelKeepScrollbarPosMagicPrayerCheckbox =\n         addCheckbox(\"Keep Magic & Prayer scrollbar position\", generalPanel);\n     generalPanelKeepScrollbarPosMagicPrayerCheckbox.setToolTipText(\n@@ -802,6 +801,28 @@ public void actionPerformed(ActionEvent e) {\n     generalPanelCameraMovableRelativeCheckbox.setToolTipText(\n         \"Camera movement will follow the player position\");\n \n+    addSettingsHeader(generalPanel, \"Menu/Item patching\");\n+\n+    generalPanelBypassAttackCheckbox = addCheckbox(\"Always left click to attack\", generalPanel);\n+    generalPanelBypassAttackCheckbox.setToolTipText(\n+        \"Left click attack monsters regardless of level difference\");\n+    generalPanelBypassAttackCheckbox.setBorder(new EmptyBorder(7, 0, 10, 0));\n+\n+    generalPanelCommandPatchEdibleRaresCheckbox =\n+        addCheckbox(\"Disable the ability to ingest holiday items or rares\", generalPanel);\n+    generalPanelCommandPatchEdibleRaresCheckbox.setToolTipText(\n+        \"Applies to the Easter Egg, Pumpkin, and the Half Wine.\");\n+\n+    generalPanelCommandPatchQuestCheckbox =\n+        addCheckbox(\"Swap eat & use options on Quest Items\", generalPanel);\n+    generalPanelCommandPatchQuestCheckbox.setToolTipText(\n+        \"Applies to giant Carp, chocolaty milk, Rock cake, and nightshade.\");\n+\n+    generalPanelCommandPatchDiskOfReturningCheckbox =\n+        addCheckbox(\"Remove the spin option from the Disk of Returning\", generalPanel);\n+    generalPanelCommandPatchDiskOfReturningCheckbox.setToolTipText(\n+        \"There is no reason to want to do this. Kept in RSC+ as a historic option.\");\n+\n     JPanel generalPanelNamePatchModePanel = new JPanel();\n     generalPanelNamePatchModePanel.setAlignmentX(Component.LEFT_ALIGNMENT);\n     generalPanelNamePatchModePanel.setMaximumSize(new Dimension(300, 60));\n@@ -818,12 +839,12 @@ public void actionPerformed(ActionEvent e) {\n     generalPanelNamePatchModeSlider.setMaximum(3);\n     generalPanelNamePatchModeSlider.setPreferredSize(new Dimension(33, 0));\n     generalPanelNamePatchModeSlider.setAlignmentX(Component.LEFT_ALIGNMENT);\n-    generalPanelNamePatchModeSlider.setBorder(new EmptyBorder(0, 0, 5, 0));\n+    generalPanelNamePatchModeSlider.setBorder(new EmptyBorder(0, 0, 10, 0));\n     generalPanelNamePatchModeSlider.setOrientation(SwingConstants.VERTICAL);\n     generalPanelNamePatchModePanel.add(generalPanelNamePatchModeSlider);\n \n     JPanel generalPanelNamePatchModeTextPanel = new JPanel();\n-    generalPanelNamePatchModeTextPanel.setPreferredSize(new Dimension(255, 55));\n+    generalPanelNamePatchModeTextPanel.setPreferredSize(new Dimension(255, 80));\n     generalPanelNamePatchModeTextPanel.setLayout(new BorderLayout());\n     generalPanelNamePatchModeTextPanel.setBorder(new EmptyBorder(0, 10, 0, 0));\n     generalPanelNamePatchModePanel.add(generalPanelNamePatchModeTextPanel);\n@@ -864,69 +885,6 @@ public void stateChanged(ChangeEvent e) {\n           }\n         });\n \n-    JPanel generalPanelCommandPatchModePanel = new JPanel();\n-    generalPanelCommandPatchModePanel.setAlignmentX(Component.LEFT_ALIGNMENT);\n-    generalPanelCommandPatchModePanel.setMaximumSize(new Dimension(300, 60));\n-    generalPanelCommandPatchModePanel.setLayout(\n-        new BoxLayout(generalPanelCommandPatchModePanel, BoxLayout.X_AXIS));\n-    generalPanel.add(generalPanelCommandPatchModePanel);\n-\n-    generalPanelCommandPatchModeSlider = new JSlider();\n-    generalPanelCommandPatchModeSlider.setMajorTickSpacing(1);\n-    generalPanelCommandPatchModeSlider.setPaintLabels(true);\n-    generalPanelCommandPatchModeSlider.setPaintTicks(true);\n-    generalPanelCommandPatchModeSlider.setSnapToTicks(true);\n-    generalPanelCommandPatchModeSlider.setMinimum(0);\n-    generalPanelCommandPatchModeSlider.setMaximum(3);\n-    generalPanelCommandPatchModeSlider.setPreferredSize(new Dimension(33, 0));\n-    generalPanelCommandPatchModeSlider.setAlignmentX(Component.LEFT_ALIGNMENT);\n-    generalPanelCommandPatchModeSlider.setBorder(new EmptyBorder(0, 0, 5, 0));\n-    generalPanelCommandPatchModeSlider.setOrientation(SwingConstants.VERTICAL);\n-    generalPanelCommandPatchModePanel.add(generalPanelCommandPatchModeSlider);\n-\n-    JPanel generalPanelCommandPatchModeTextPanel = new JPanel();\n-    generalPanelCommandPatchModeTextPanel.setPreferredSize(new Dimension(255, 55));\n-    generalPanelCommandPatchModeTextPanel.setLayout(new BorderLayout());\n-    generalPanelCommandPatchModeTextPanel.setBorder(new EmptyBorder(0, 10, 0, 0));\n-    generalPanelCommandPatchModePanel.add(generalPanelCommandPatchModeTextPanel);\n-\n-    JLabel generalPanelCommandPatchModeTitle =\n-        new JLabel(\"<html><b>Item command patch mode</b> (Requires restart)</html>\");\n-    generalPanelCommandPatchModeTitle.setToolTipText(\n-        \"Reworks certain discontinued/quest-only item edible commands with improved versions\");\n-    generalPanelCommandPatchModeTextPanel.add(\n-        generalPanelCommandPatchModeTitle, BorderLayout.PAGE_START);\n-    generalPanelCommandPatchModeDesc = new JLabel(\"\");\n-    generalPanelCommandPatchModeTextPanel.add(\n-        generalPanelCommandPatchModeDesc, BorderLayout.CENTER);\n-\n-    generalPanelCommandPatchModeSlider.addChangeListener(\n-        new ChangeListener() {\n-\n-          @Override\n-          public void stateChanged(ChangeEvent e) {\n-            switch (generalPanelCommandPatchModeSlider.getValue()) {\n-              case 3:\n-                generalPanelCommandPatchModeDesc.setText(\"<html>Apply both 1 & 2 changes</html>\");\n-                break;\n-              case 2:\n-                generalPanelCommandPatchModeDesc.setText(\n-                    \"<html>Swap eat/drink option with use on quest-only items</html>\");\n-                break;\n-              case 1:\n-                generalPanelCommandPatchModeDesc.setText(\n-                    \"<html>Remove eat/drink option on discontinued items</html>\");\n-                break;\n-              case 0:\n-                generalPanelCommandPatchModeDesc.setText(\"<html>No item command patching</html>\");\n-                break;\n-              default:\n-                Logger.Error(\"Invalid log verbosity value\");\n-                break;\n-            }\n-          }\n-        });\n-\n     generalPanelPatchGenderCheckbox =\n         addCheckbox(\n             \"Correct gender to body type in appearance screen (Requires restart)\", generalPanel);\n@@ -2407,8 +2365,12 @@ public void synchronizeGuiValues() {\n         Settings.INVENTORY_FULL_ALERT.get(Settings.currentProfile));\n     generalPanelNamePatchModeSlider.setValue(Settings.NAME_PATCH_TYPE.get(Settings.currentProfile));\n     generalPanelLogVerbositySlider.setValue(Settings.LOG_VERBOSITY.get(Settings.currentProfile));\n-    generalPanelCommandPatchModeSlider.setValue(\n-        Settings.COMMAND_PATCH_TYPE.get(Settings.currentProfile));\n+    generalPanelCommandPatchQuestCheckbox.setSelected(\n+        Settings.COMMAND_PATCH_QUEST.get(Settings.currentProfile));\n+    generalPanelCommandPatchEdibleRaresCheckbox.setSelected(\n+        Settings.COMMAND_PATCH_EDIBLE_RARES.get(Settings.currentProfile));\n+    generalPanelCommandPatchDiskOfReturningCheckbox.setSelected(\n+        Settings.COMMAND_PATCH_DISK.get(Settings.currentProfile));\n     generalPanelBypassAttackCheckbox.setSelected(\n         Settings.ATTACK_ALWAYS_LEFT_CLICK.get(Settings.currentProfile));\n     generalPanelKeepScrollbarPosMagicPrayerCheckbox.setSelected(\n@@ -2671,8 +2633,12 @@ public void saveSettings() {\n         Settings.currentProfile, generalPanelLogForceTimestampsCheckbox.isSelected());\n     Settings.LOG_FORCE_LEVEL.put(\n         Settings.currentProfile, generalPanelLogForceLevelCheckbox.isSelected());\n-    Settings.COMMAND_PATCH_TYPE.put(\n-        Settings.currentProfile, generalPanelCommandPatchModeSlider.getValue());\n+    Settings.COMMAND_PATCH_DISK.put(\n+        Settings.currentProfile, generalPanelCommandPatchDiskOfReturningCheckbox.isSelected());\n+    Settings.COMMAND_PATCH_EDIBLE_RARES.put(\n+        Settings.currentProfile, generalPanelCommandPatchEdibleRaresCheckbox.isSelected());\n+    Settings.COMMAND_PATCH_QUEST.put(\n+        Settings.currentProfile, generalPanelCommandPatchQuestCheckbox.isSelected());\n     Settings.ATTACK_ALWAYS_LEFT_CLICK.put(\n         Settings.currentProfile, generalPanelBypassAttackCheckbox.isSelected());\n     Settings.KEEP_SCROLLBAR_POS_MAGIC_PRAYER.put(\n@@ -2933,6 +2899,7 @@ public void applySettings() {\n     synchronizeGuiValues();\n     QueueWindow.syncColumnsWithSettings();\n     QueueWindow.playlistTable.repaint();\n+    Item.patchItemCommands();\n   }\n \n   public void synchronizePresetOptions() {"
  },
  {
    "sha": "003659d715ed315895ada9b291eec33506da961d",
    "filename": "src/Client/Settings.java",
    "status": "modified",
    "additions": 59,
    "deletions": 22,
    "changes": 81,
    "blob_url": "https://github.com/RSCPlus/rscplus/blob/04bf3b0453e0b4e442235b5881e07100b6ef99d8/src/Client/Settings.java",
    "raw_url": "https://github.com/RSCPlus/rscplus/raw/04bf3b0453e0b4e442235b5881e07100b6ef99d8/src/Client/Settings.java",
    "contents_url": "https://api.github.com/repos/RSCPlus/rscplus/contents/src/Client/Settings.java?ref=04bf3b0453e0b4e442235b5881e07100b6ef99d8",
    "patch": "@@ -90,7 +90,11 @@\n   public static HashMap<String, Boolean> FATIGUE_ALERT = new HashMap<String, Boolean>();\n   public static HashMap<String, Boolean> INVENTORY_FULL_ALERT = new HashMap<String, Boolean>();\n   public static HashMap<String, Integer> NAME_PATCH_TYPE = new HashMap<String, Integer>();\n-  public static HashMap<String, Integer> COMMAND_PATCH_TYPE = new HashMap<String, Integer>();\n+  public static HashMap<String, Integer> COMMAND_PATCH_LEGACY = new HashMap<String, Integer>();\n+  public static HashMap<String, Boolean> COMMAND_PATCH_QUEST = new HashMap<String, Boolean>();\n+  public static HashMap<String, Boolean> COMMAND_PATCH_EDIBLE_RARES =\n+      new HashMap<String, Boolean>();\n+  public static HashMap<String, Boolean> COMMAND_PATCH_DISK = new HashMap<String, Boolean>();\n   public static HashMap<String, Boolean> ATTACK_ALWAYS_LEFT_CLICK = new HashMap<String, Boolean>();\n   public static HashMap<String, Boolean> KEEP_SCROLLBAR_POS_MAGIC_PRAYER =\n       new HashMap<String, Boolean>();\n@@ -442,18 +446,56 @@ public static void definePresets(Properties props) {\n         \"custom\", getPropInt(props, \"name_patch_type\", NAME_PATCH_TYPE.get(\"default\")));\n \n     /**\n-     * Defines to what extent fix the item commands should be patched. 0 - No item command patching\n-     * 1 - Disable item consumption on discontinued rares 2 - Swap item command, i.e. use instead of\n-     * consuming on quest-only items 3 - Apply both fixes 1 and 2\n+     * LEGACY, NOT USED EXCEPT TO MIGRATE SETTINGS Defines to what extent fix the item commands\n+     * should be patched. 0 - No item command patching 1 - Disable item consumption on discontinued\n+     * rares 2 - Swap item command, i.e. use instead of consuming on quest-only items 3 - Apply both\n+     * fixes 1 and 2\n      */\n-    COMMAND_PATCH_TYPE.put(\"vanilla\", 0);\n-    COMMAND_PATCH_TYPE.put(\"vanilla_resizable\", 0);\n-    COMMAND_PATCH_TYPE.put(\"lite\", 1);\n-    COMMAND_PATCH_TYPE.put(\"default\", 1);\n-    COMMAND_PATCH_TYPE.put(\"heavy\", 3);\n-    COMMAND_PATCH_TYPE.put(\"all\", 3);\n-    COMMAND_PATCH_TYPE.put(\n-        \"custom\", getPropInt(props, \"command_patch_type\", COMMAND_PATCH_TYPE.get(\"default\")));\n+    COMMAND_PATCH_LEGACY.put(\"vanilla\", 0);\n+    COMMAND_PATCH_LEGACY.put(\"vanilla_resizable\", 0);\n+    COMMAND_PATCH_LEGACY.put(\"lite\", 0);\n+    COMMAND_PATCH_LEGACY.put(\"default\", 0);\n+    COMMAND_PATCH_LEGACY.put(\"heavy\", 0);\n+    COMMAND_PATCH_LEGACY.put(\"all\", 0);\n+    COMMAND_PATCH_LEGACY.put(\n+        \"custom\", getPropInt(props, \"command_patch_type\", COMMAND_PATCH_LEGACY.get(\"default\")));\n+\n+    COMMAND_PATCH_QUEST.put(\"vanilla\", false);\n+    COMMAND_PATCH_QUEST.put(\"vanilla_resizable\", false);\n+    COMMAND_PATCH_QUEST.put(\"lite\", false);\n+    COMMAND_PATCH_QUEST.put(\"default\", false);\n+    COMMAND_PATCH_QUEST.put(\"heavy\", false);\n+    COMMAND_PATCH_QUEST.put(\"all\", true);\n+    COMMAND_PATCH_QUEST.put(\n+        \"custom\",\n+        getPropBoolean(\n+            props,\n+            \"command_patch_quest\",\n+            COMMAND_PATCH_QUEST.get(\"default\") || COMMAND_PATCH_LEGACY.get(\"default\") >= 2));\n+\n+    COMMAND_PATCH_EDIBLE_RARES.put(\"vanilla\", false);\n+    COMMAND_PATCH_EDIBLE_RARES.put(\"vanilla_resizable\", false);\n+    COMMAND_PATCH_EDIBLE_RARES.put(\"lite\", false);\n+    COMMAND_PATCH_EDIBLE_RARES.put(\"default\", true);\n+    COMMAND_PATCH_EDIBLE_RARES.put(\"heavy\", true);\n+    COMMAND_PATCH_EDIBLE_RARES.put(\"all\", true);\n+    COMMAND_PATCH_EDIBLE_RARES.put(\n+        \"custom\",\n+        getPropBoolean(\n+            props,\n+            \"command_patch_edible_rares\",\n+            COMMAND_PATCH_EDIBLE_RARES.get(\"default\")\n+                || COMMAND_PATCH_LEGACY.get(\"default\") == 1\n+                || COMMAND_PATCH_LEGACY.get(\"default\") == 3));\n+\n+    COMMAND_PATCH_DISK.put(\"vanilla\", false);\n+    COMMAND_PATCH_DISK.put(\"vanilla_resizable\", false);\n+    COMMAND_PATCH_DISK.put(\"lite\", false);\n+    COMMAND_PATCH_DISK.put(\"default\", false);\n+    COMMAND_PATCH_DISK.put(\"heavy\", false);\n+    COMMAND_PATCH_DISK.put(\"all\", true);\n+    COMMAND_PATCH_DISK.put(\n+        \"custom\", getPropBoolean(props, \"command_patch_disk\", COMMAND_PATCH_DISK.get(\"default\")));\n \n     ATTACK_ALWAYS_LEFT_CLICK.put(\"vanilla\", false);\n     ATTACK_ALWAYS_LEFT_CLICK.put(\"vanilla_resizable\", false);\n@@ -1387,14 +1429,6 @@ public static void definePresets(Properties props) {\n       save(\"custom\");\n     }\n \n-    if (COMMAND_PATCH_TYPE.get(\"custom\") < 0) {\n-      COMMAND_PATCH_TYPE.put(\"custom\", 0);\n-      save(\"custom\");\n-    } else if (COMMAND_PATCH_TYPE.get(\"custom\") > 3) {\n-      COMMAND_PATCH_TYPE.put(\"custom\", 3);\n-      save(\"custom\");\n-    }\n-\n     if (FATIGUE_FIGURES.get(\"custom\") < 1) {\n       FATIGUE_FIGURES.put(\"custom\", 1);\n       save(\"custom\");\n@@ -1750,7 +1784,10 @@ public static void save(String preset) {\n       props.setProperty(\"fatigue_alert\", Boolean.toString(FATIGUE_ALERT.get(preset)));\n       props.setProperty(\"inventory_full_alert\", Boolean.toString(INVENTORY_FULL_ALERT.get(preset)));\n       props.setProperty(\"name_patch_type\", Integer.toString(NAME_PATCH_TYPE.get(preset)));\n-      props.setProperty(\"command_patch_type\", Integer.toString(COMMAND_PATCH_TYPE.get(preset)));\n+      props.setProperty(\"command_patch_quest\", Boolean.toString(COMMAND_PATCH_QUEST.get(preset)));\n+      props.setProperty(\n+          \"command_patch_edible_rares\", Boolean.toString(COMMAND_PATCH_EDIBLE_RARES.get(preset)));\n+      props.setProperty(\"command_patch_disk\", Boolean.toString(COMMAND_PATCH_DISK.get(preset)));\n       props.setProperty(\"bypass_attack\", Boolean.toString(ATTACK_ALWAYS_LEFT_CLICK.get(preset)));\n       props.setProperty(\n           \"keep_scrollbar_pos_magic_prayer\",\n@@ -2635,7 +2672,7 @@ public static void restoreDefaultGeneral() {\n     FATIGUE_ALERT = true;\n     INVENTORY_FULL_ALERT = false;\n     NAME_PATCH_TYPE = 3;\n-    COMMAND_PATCH_TYPE = 3;\n+    COMMAND_PATCH_LEGACY = 3;\n     BYPASS_ATTACK = false;\n     HIDE_ROOFS = true;\n     COLORIZE = true;"
  },
  {
    "sha": "03d181df62e0c15346a4cdef0b8dc3813aae0f41",
    "filename": "src/Game/Item.java",
    "status": "modified",
    "additions": 21,
    "deletions": 14,
    "changes": 35,
    "blob_url": "https://github.com/RSCPlus/rscplus/blob/04bf3b0453e0b4e442235b5881e07100b6ef99d8/src/Game/Item.java",
    "raw_url": "https://github.com/RSCPlus/rscplus/raw/04bf3b0453e0b4e442235b5881e07100b6ef99d8/src/Game/Item.java",
    "contents_url": "https://api.github.com/repos/RSCPlus/rscplus/contents/src/Game/Item.java?ref=04bf3b0453e0b4e442235b5881e07100b6ef99d8",
    "patch": "@@ -135,33 +135,40 @@ public static void queryDatabaseAndPatchItem(Connection c, String query) {\n   }\n \n   /**\n-   * Patches discontinued edible item commands specified by {@link Settings#COMMAND_PATCH_TYPE}.\n-   * Removes completely the option to eat/drink\n+   * Patches discontinued edible item commands. Removes completely the option to eat or drink them\n    */\n   public static void patchItemCommands() {\n-    int commandPatchType = Settings.COMMAND_PATCH_TYPE.get(Settings.currentProfile);\n-    // ids of Half full wine jug, Disk of Returning, Pumpkin, Easter egg\n-    int[] edible_rare_item_ids = {246, 387, 422, 677};\n+    // ids of Half full wine jug, Pumpkin, Easter egg\n+    int[] edible_rare_item_ids = {246, 422, 677};\n+    String[] edible_rare_item_original_commands = {\"Drink\", \"eat\", \"eat\"};\n \n-    if (commandPatchType == 1 || commandPatchType == 3) {\n-      for (int i : edible_rare_item_ids) {\n-        item_commands[i] = \"\";\n+    for (int i = 0; i < edible_rare_item_ids.length; i++) {\n+      if (Settings.COMMAND_PATCH_EDIBLE_RARES.get(Settings.currentProfile)) {\n+        item_commands[edible_rare_item_ids[i]] = \"\";\n+      } else {\n+        item_commands[edible_rare_item_ids[i]] = edible_rare_item_original_commands[i];\n       }\n     }\n+\n+    // Disk of Returning patch, remove the ability to spin the disk.\n+    // Really not necessary, unless you are in Thordur's black hole and don't want to ever leave.\n+    // Keeping this setting since it existed in RSC+ before we knew whether or not it would consume\n+    // the disk.\n+    if (Settings.COMMAND_PATCH_DISK.get(Settings.currentProfile)) {\n+      item_commands[387] = \"\";\n+    } else {\n+      item_commands[387] = \"spin\";\n+    }\n   }\n \n-  /**\n-   * Patches quest only edible item commands specified by Settings.COMMANDS_PATCH_TYPE. Swaps around\n-   * the option to eat/drink\n-   */\n+  /** Patches quest only edible item commands. Swaps around the option to eat/drink */\n   public static boolean shouldPatch(int index) {\n     if (Settings.SPEEDRUNNER_MODE_ACTIVE.get(Settings.currentProfile)) return false;\n \n-    int commandPatchType = Settings.COMMAND_PATCH_TYPE.get(Settings.currentProfile);\n     // ids of giant Carp, chocolaty milk, Rock cake, nightshade\n     int[] edible_quest_item_ids = {718, 770, 1061, 1086};\n     boolean found = false;\n-    if (commandPatchType == 2 || commandPatchType == 3) {\n+    if (Settings.COMMAND_PATCH_QUEST.get(Settings.currentProfile)) {\n       for (int i : edible_quest_item_ids) {\n         if (index == i) {\n           found = true;"
  },
  {
    "sha": "6b419e1fc3c46069c6b981eb9bd20f3e0a22390c",
    "filename": "src/Game/Renderer.java",
    "status": "modified",
    "additions": 11,
    "deletions": 14,
    "changes": 25,
    "blob_url": "https://github.com/RSCPlus/rscplus/blob/04bf3b0453e0b4e442235b5881e07100b6ef99d8/src/Game/Renderer.java",
    "raw_url": "https://github.com/RSCPlus/rscplus/raw/04bf3b0453e0b4e442235b5881e07100b6ef99d8/src/Game/Renderer.java",
    "contents_url": "https://api.github.com/repos/RSCPlus/rscplus/contents/src/Game/Renderer.java?ref=04bf3b0453e0b4e442235b5881e07100b6ef99d8",
    "patch": "@@ -264,22 +264,21 @@ public static void present(Graphics g, Image image) {\n           NPC npc = iterator.next(); // TODO: Remove unnecessary allocations\n           Color color = color_low;\n \n-          boolean show = false;\n-          boolean extend = false;\n+          boolean showName = false;\n           if (npc.type == NPC.TYPE_PLAYER) {\n             color = color_fatigue;\n \n             if (Client.isFriend(npc.name)\n                 && (Settings.SHOW_FRIEND_NAME_OVERLAY.get(Settings.currentProfile)\n                     || Settings.SHOW_PLAYER_NAME_OVERLAY.get(Settings.currentProfile))) {\n               color = color_hp;\n-              show = true;\n+              showName = true;\n             } else if (Settings.SHOW_PLAYER_NAME_OVERLAY.get(Settings.currentProfile)) {\n-              show = true;\n+              showName = true;\n             }\n           } else if (npc.type == NPC.TYPE_MOB\n               && Settings.SHOW_NPC_NAME_OVERLAY.get(Settings.currentProfile)) {\n-            show = true;\n+            showName = true;\n           }\n \n           if (Settings.SHOW_HITBOX.get(Settings.currentProfile)) {\n@@ -310,23 +309,21 @@ public static void present(Graphics g, Image image) {\n             }\n           }\n \n-          if (Settings.SHOW_HP_PRAYER_FATIGUE_OVERLAY.get(Settings.currentProfile)\n-              && npc.name != null) {\n+          // draw npc's name\n+          if (showName && npc.name != null) {\n             int x = npc.x + (npc.width / 2);\n             int y = npc.y - 20;\n             for (Iterator<Point> locIterator = entity_text_loc.iterator();\n                 locIterator.hasNext(); ) {\n               Point loc = locIterator.next(); // TODO: Remove unnecessary allocations\n               if (loc.x == x && loc.y == y) y -= 12;\n             }\n-            if (show) {\n-              extend = Settings.EXTEND_IDS_OVERLAY.get(Settings.currentProfile);\n-              String text = npc.name;\n-              if (extend) {\n-                text += (\" (\" + npc.id + \"-\" + npc.id2 + \")\");\n-              }\n-              drawShadowText(g2, text, x, y, color, true);\n+\n+            String text = npc.name;\n+            if (Settings.EXTEND_IDS_OVERLAY.get(Settings.currentProfile)) {\n+              text += (\" (\" + npc.id + \"-\" + npc.id2 + \")\");\n             }\n+            drawShadowText(g2, text, x, y, color, true);\n             entity_text_loc.add(new Point(x, y));\n           }\n         }"
  }
]
