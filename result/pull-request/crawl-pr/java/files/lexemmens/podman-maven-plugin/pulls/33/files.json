[
  {
    "sha": "058a1816d9b378ef346bab452fa3c37c3637e1bd",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/lexemmens/podman-maven-plugin/blob/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/CHANGELOG.md",
    "raw_url": "https://github.com/lexemmens/podman-maven-plugin/raw/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/lexemmens/podman-maven-plugin/contents/CHANGELOG.md?ref=64b0380d152ccb945b7cc6c18f7cc63a02a09b33",
    "patch": "@@ -1,5 +1,9 @@\n ## Changelog\n-### 1.5.0 (09-02-2021)\n+### 1.6.0 (08-03-2020)\n+### Bugs\n+* ([#32](https://github.com/lexemmens/podman-maven-plugin/issues/32) - When tagging an image, the plugin might skip one or more steps due to unexpected multiline output for a build step)\n+\n+### 1.5.0 (09-02-2020)\n #### Bugs\n * ([#28](https://github.com/lexemmens/podman-maven-plugin/issues/28)) Changed algorithm for image hash detection when using multistage containerfiles to use lookahead instead of look back.\n "
  },
  {
    "sha": "b19980ea92e0bc4627fec9972c62429686383494",
    "filename": "src/main/java/nl/lexemmens/podman/BuildMojo.java",
    "status": "modified",
    "additions": 14,
    "deletions": 76,
    "changes": 90,
    "blob_url": "https://github.com/lexemmens/podman-maven-plugin/blob/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/main/java/nl/lexemmens/podman/BuildMojo.java",
    "raw_url": "https://github.com/lexemmens/podman-maven-plugin/raw/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/main/java/nl/lexemmens/podman/BuildMojo.java",
    "contents_url": "https://api.github.com/repos/lexemmens/podman-maven-plugin/contents/src/main/java/nl/lexemmens/podman/BuildMojo.java?ref=64b0380d152ccb945b7cc6c18f7cc63a02a09b33",
    "patch": "@@ -1,5 +1,6 @@\n package nl.lexemmens.podman;\n \n+import nl.lexemmens.podman.helper.MultiStageBuildOutputHelper;\n import nl.lexemmens.podman.image.ImageConfiguration;\n import nl.lexemmens.podman.service.ServiceHub;\n import org.apache.maven.plugin.MojoExecutionException;\n@@ -9,18 +10,14 @@\n \n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+\n \n /**\n  * BuildMojo for building container images using Podman\n  */\n @Mojo(name = \"build\", defaultPhase = LifecyclePhase.INSTALL)\n public class BuildMojo extends AbstractPodmanMojo {\n \n-    private static final Pattern IMAGE_HASH_PATTERN = Pattern.compile(\"\\\\b([A-Fa-f0-9]{11,64})\\\\b\");\n-\n     /**\n      * Indicates if building container images should be skipped\n      */\n@@ -33,6 +30,17 @@\n     @Parameter(property = \"podman.skip.tag\", defaultValue = \"false\")\n     boolean skipTag;\n \n+    private final MultiStageBuildOutputHelper buildOutputHelper;\n+\n+    /**\n+     * Constructor\n+     */\n+    public BuildMojo() {\n+        super();\n+\n+        this.buildOutputHelper = new MultiStageBuildOutputHelper();\n+    }\n+\n     @Override\n     public void executeInternal(ServiceHub hub) throws MojoExecutionException {\n         if (skipBuild) {\n@@ -74,78 +82,8 @@ private void buildContainerImage(ImageConfiguration image, ServiceHub hub) throw\n \n         if (image.getBuild().isMultistageContainerFile()) {\n             getLog().info(\"Detected multistage Containerfile...\");\n-            determineImageHashes(image, processOutput);\n-        }\n-    }\n-\n-    private void determineImageHashes(ImageConfiguration image, List<String> processOutput) {\n-        // Use size -2 as the last line is the image hash of the final image, which we already captured before.\n-        Pattern stagePattern = image.getBuild().getMultistageContainerfilePattern();\n-        getLog().debug(\"Using regular expression: \" + stagePattern);\n-\n-        // We are interested in output that starts either with:\n-        // * STEP\n-        // * -->\n-        //\n-        // STEP means a build step\n-        // --> means the result of a build step\n-        //\n-        // The last line always contain the final image hash, which not interesting in this case.\n-\n-\n-        String currentStage = null;\n-        String lastKnownImageHash = null;\n-        for (int i = 0; i <= processOutput.size() - 2; i++) {\n-            // Read current line and next line (this is safe as we only loop until size - 2)\n-            String currentLine = processOutput.get(i);\n-            String nextLine = processOutput.get(i + 1);\n-\n-            // Check if the current line defines a new stage\n-            Matcher stageMatcher = stagePattern.matcher(currentLine);\n-            boolean currentLineDefinesStage = stageMatcher.find();\n-\n-            getLog().debug(\"Processing line: '\" + currentLine + \"', matches: \" + currentLineDefinesStage);\n-\n-            // Check if the next line contains a hash\n-            Optional<String> imageHashOptional = retrieveImageHashFromLine(nextLine);\n-\n-            if(currentLineDefinesStage) {\n-                boolean isFirstStage = currentStage == null;\n-\n-                if(!isFirstStage) {\n-                    // If it is not the first stage, then we must save the image hash of the previous stage\n-                    getLog().info(\"Final image for stage \" + currentStage + \" is: \" + lastKnownImageHash);\n-                    image.getImageHashPerStage().put(currentStage, lastKnownImageHash);\n-                }\n-\n-                currentStage = stageMatcher.group(3);\n-                lastKnownImageHash = null;\n-\n-                getLog().debug(\"Found stage in Containerfile: \" + currentStage);\n-            } else if(currentLine.startsWith(\"STEP\") && imageHashOptional.isPresent()) {\n-                lastKnownImageHash = imageHashOptional.get();\n-                getLog().debug(\"Stage \" + currentStage + \", current image hash: \" + lastKnownImageHash);\n-            } else {\n-                getLog().debug(\"Not a (valid) step output, continuing...\");\n-            }\n+            buildOutputHelper.recordImageHashes(getLog(), image, processOutput);\n         }\n-\n-        // Save the last image hash we know\n-        getLog().info(\"Final image for stage \" + currentStage + \" is: \" + lastKnownImageHash);\n-        image.getImageHashPerStage().put(currentStage, lastKnownImageHash);\n-\n-        getLog().debug(\"Collected hashes: \" + image.getImageHashPerStage());\n-    }\n-\n-\n-    private Optional<String> retrieveImageHashFromLine(String line) {\n-        String imageHash = null;\n-        Matcher matcher = IMAGE_HASH_PATTERN.matcher(line);\n-        if (matcher.find()) {\n-            imageHash = matcher.group(1);\n-        }\n-\n-        return Optional.ofNullable(imageHash);\n     }\n \n     private void tagContainerImage(ImageConfiguration image, ServiceHub hub) throws MojoExecutionException {"
  },
  {
    "sha": "283f74b63683f93d1fc8c08b9402abcba06e2959",
    "filename": "src/main/java/nl/lexemmens/podman/helper/MultiStageBuildOutputHelper.java",
    "status": "added",
    "additions": 226,
    "deletions": 0,
    "changes": 226,
    "blob_url": "https://github.com/lexemmens/podman-maven-plugin/blob/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/main/java/nl/lexemmens/podman/helper/MultiStageBuildOutputHelper.java",
    "raw_url": "https://github.com/lexemmens/podman-maven-plugin/raw/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/main/java/nl/lexemmens/podman/helper/MultiStageBuildOutputHelper.java",
    "contents_url": "https://api.github.com/repos/lexemmens/podman-maven-plugin/contents/src/main/java/nl/lexemmens/podman/helper/MultiStageBuildOutputHelper.java?ref=64b0380d152ccb945b7cc6c18f7cc63a02a09b33",
    "patch": "@@ -0,0 +1,226 @@\n+package nl.lexemmens.podman.helper;\n+\n+import nl.lexemmens.podman.image.ImageConfiguration;\n+import org.apache.maven.plugin.logging.Log;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Utility class that helps to determine the image hashes in case of a multiline Containerfile\n+ */\n+public final class MultiStageBuildOutputHelper {\n+\n+    private static final Pattern IMAGE_HASH_PATTERN = Pattern.compile(\"\\\\b([A-Fa-f0-9]{11,64})\\\\b\");\n+\n+    /**\n+     * <p>\n+     * Tries to determine the image hashes from the output of a Podman build command when using multistage\n+     * containerfiles.\n+     * </p>\n+     * <p>\n+     * This method uses a lookahead strategy to determine the image hashes. It does not care about individual\n+     * steps but only looks for stages and image hashes. Image hashes must be either 11 or 64 characters in\n+     * length in order to be detected.\n+     * </p>\n+     * <p>\n+     * Identification starts at a line that defines a stage, i.e. <code>FROM [something] AS stageName</code>. From\n+     * there it will process every next line until it hits the next stage or reaches the last line, whatever\n+     * comes first. During reading of lines, the last image hash found will be recorded. When a next stage\n+     * has been found, the last image hash found will be associated with the stage that was being processed.\n+     * </p>\n+     * <p>\n+     * To be more specific, the following steps are taken by this method, in the order as listed below:\n+     * </p>\n+     * <ul>\n+     *     <li>\n+     *         Read the first line of the output\n+     *     </li>\n+     *     <li>\n+     *         Retrieve the current stage from the the line. If the stage is <code>null</code>, then continue\n+     *         with the next line\n+     *     </li>\n+     *     <li>\n+     *         If a stage has been found, find the image hash\n+     *     </li>\n+     *     <li>\n+     *         Record the image hash for the current stage\n+     *     </li>\n+     * </ul>\n+     * <p>\n+     * This method allows STEP definitions in a Containerfile to produce multiline output.\n+     * </p>\n+     *\n+     * @param log           Maven's logger for log output\n+     * @param image         The image configuration\n+     * @param processOutput The output of a Podman build command\n+     */\n+    public void recordImageHashes(Log log, ImageConfiguration image, List<String> processOutput) {\n+        // Use size -2 as the last line is the image hash of the final image, which we already captured before.\n+        Pattern stagePattern = image.getBuild().getMultistageContainerfilePattern();\n+        log.debug(\"Using regular expression: \" + stagePattern);\n+\n+        // We are interested in output that starts either with:\n+        // * STEP\n+        // * -->\n+        //\n+        // STEP means a Podman build step\n+        // --> means the result of a build step. This line contains a hash (post 1.x)\n+        //\n+        // The last line always contain the final image hash, which not interesting in this case.\n+        //\n+        // A STEP may produce multiline output.\n+\n+        // The last line (size - 1) contains the image hash. We want the hash produced by the STEP, which is on the second to last line\n+        int lastLine = processOutput.size() - 2;\n+        int searchIndex = 0;\n+        while (searchIndex <= lastLine) {\n+            String currentStage;\n+\n+            // Read current line\n+            String currentLine = processOutput.get(searchIndex);\n+\n+            // Determine the current stage\n+            currentStage = getCurrentStage(log, stagePattern, currentLine);\n+            if(currentStage == null) {\n+                searchIndex++;\n+                continue;\n+            }\n+\n+            // Find the corresponding image hash\n+            ImageHashSearchResult imageHashSearchResult = findImageHash(log, processOutput, searchIndex + 1, stagePattern);\n+\n+            // Save it\n+            recordImageHash(log, image, currentStage, imageHashSearchResult);\n+\n+            // Continue with next iteration or break the loop if we have reached the last line\n+            if (imageHashSearchResult.isLastLine) {\n+                break;\n+            } else {\n+                searchIndex = imageHashSearchResult.nextIndex;\n+            }\n+        }\n+\n+        log.debug(\"Collected hashes: \" + image.getImageHashPerStage());\n+    }\n+\n+    private static void recordImageHash(Log log, ImageConfiguration image, String currentStage, ImageHashSearchResult imageHashSearchResult) {\n+        if (imageHashSearchResult.imageHash == null) {\n+            log.warn(\"No image hash found for stage: '\" + currentStage + \"'\");\n+        } else {\n+            log.info(\"Final image for stage \" + currentStage + \" is: \" + imageHashSearchResult.imageHash);\n+            image.getImageHashPerStage().put(currentStage, imageHashSearchResult.imageHash);\n+        }\n+    }\n+\n+    private static String getCurrentStage(Log log, Pattern stagePattern, String currentLine) {\n+        String currentStage = null;\n+\n+        // Check if the current line defines a new stage\n+        Matcher stageMatcher = stagePattern.matcher(currentLine);\n+        boolean currentLineDefinesStage = stageMatcher.find();\n+\n+        log.debug(\"Processing line: '\" + currentLine + \"'\");\n+        if (currentLineDefinesStage) {\n+            currentStage = stageMatcher.group(3);\n+            log.debug(\"Processing stage in Containerfile: \" + currentStage);\n+        }\n+        return currentStage;\n+    }\n+\n+    // Javadoc at private method to provide some context\n+\n+    /**\n+     * <p>\n+     * Tries to determine the image hash for a provided stage by searching the output of a Podman build\n+     * command from the provided index. Returns a {@link ImageHashSearchResult}.\n+     * </p>\n+     * <p>\n+     * This method will process each line, starting from a given inex, and check if it contains either a\n+     * hash or a new stage definition, whatever comes first.\n+     * </p>\n+     * <p>\n+     * The search result maybe one of the following:\n+     * </p>\n+     * <ul>\n+     *     <li>\n+     *         A step does not necessarily produce a hash. I don't know whether it is possible that a stage results in no hash, but it is a case that is at\n+     *         least covered. In this case the hash in the {@link ImageHashSearchResult} will be <code>null</code>\n+     *     </li>\n+     *     <li>\n+     *         If a stage has been found, an instance of {@link ImageHashSearchResult} will be returned. It a hash was found, it contains this hash. The\n+     *         {@link ImageHashSearchResult} also contains the index of the next stage or -1 if the last line was reached. In the latter case, the <code>lastLine</code>\n+     *         identifier in the {@link ImageHashSearchResult} has the value <coe>true</coe>\n+     *     </li>\n+     * </ul>\n+     *\n+     * @param log               Maven logger\n+     * @param processOutput     The output of the podman build command\n+     * @param searchStartIndex  The index of the output from where the search to start\n+     * @param multiStagePattern The pattern to use to recognise a new stage in a containerfile.\n+     * @return An instance of {@link ImageHashSearchResult} containing the hash (if found) and the index of the next stage. It also has an identifier that can be used\n+     * to detect if the last row of the build output has been reached.\n+     */\n+    private static ImageHashSearchResult findImageHash(Log log, List<String> processOutput, int searchStartIndex, Pattern multiStagePattern) {\n+        ImageHashSearchResult searchResult = ImageHashSearchResult.EMPTY    ;\n+        String lastKnownImageHash = null;\n+\n+        int lastLine = processOutput.size() - 2;\n+\n+        for (int idx = searchStartIndex; idx <= lastLine; idx++) {\n+            boolean isLastLine = idx == lastLine;\n+\n+            String candidate = processOutput.get(idx);\n+            log.debug(\"Processing candidate: '\" + candidate + \"'\");\n+\n+            // Check if the candidate line defines a new stage\n+            Matcher nextStageMatcher = multiStagePattern.matcher(candidate);\n+            boolean candidateLineDefinesStage = nextStageMatcher.find();\n+\n+            Optional<String> imageHashOptional = retrieveImageHashFromLine(candidate);\n+            if (!candidateLineDefinesStage && imageHashOptional.isPresent()) {\n+                // Record the image hash we found\n+                lastKnownImageHash = imageHashOptional.get();\n+                log.debug(\"Derived hash: '\" + lastKnownImageHash + \"' from:     \" + candidate);\n+            }\n+\n+            if (candidateLineDefinesStage || isLastLine) {\n+                searchResult = new ImageHashSearchResult(lastKnownImageHash, idx, isLastLine);\n+\n+                // Stop searching and continue with the outer loop as we found a new stage.\n+                break;\n+            } else {\n+                log.debug(\"No stage or image hash on line: \" + candidate);\n+            }\n+        }\n+\n+        return searchResult;\n+    }\n+\n+    private static Optional<String> retrieveImageHashFromLine(String line) {\n+        String imageHash = null;\n+        Matcher matcher = IMAGE_HASH_PATTERN.matcher(line);\n+        if (matcher.find()) {\n+            imageHash = matcher.group(1);\n+        }\n+\n+        return Optional.ofNullable(imageHash);\n+    }\n+\n+    private static class ImageHashSearchResult {\n+\n+        private static final ImageHashSearchResult EMPTY = new ImageHashSearchResult(null, -1, true);\n+\n+        private final String imageHash;\n+        private final int nextIndex;\n+        private final boolean isLastLine;\n+\n+        public ImageHashSearchResult(String imageHash, int nextIndex, boolean isLastLine) {\n+            this.imageHash = imageHash;\n+            this.nextIndex = nextIndex;\n+            this.isLastLine = isLastLine;\n+        }\n+    }\n+}"
  },
  {
    "sha": "1f0f4344e7b9b9a28076486c7566bee0ed8b794a",
    "filename": "src/main/java/nl/lexemmens/podman/image/PodmanConfiguration.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/lexemmens/podman-maven-plugin/blob/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/main/java/nl/lexemmens/podman/image/PodmanConfiguration.java",
    "raw_url": "https://github.com/lexemmens/podman-maven-plugin/raw/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/main/java/nl/lexemmens/podman/image/PodmanConfiguration.java",
    "contents_url": "https://api.github.com/repos/lexemmens/podman-maven-plugin/contents/src/main/java/nl/lexemmens/podman/image/PodmanConfiguration.java?ref=64b0380d152ccb945b7cc6c18f7cc63a02a09b33",
    "patch": "@@ -94,6 +94,7 @@ public File getRunDirectory() {\n      * Validates and initializes this configuration\n      *\n      * @param log Access to Maven's log system for informational purposes.\n+     * @param project The Maven Project\n      * @throws MojoExecutionException In case validation fails.\n      */\n     public void initAndValidate(MavenProject project, Log log) throws MojoExecutionException {"
  },
  {
    "sha": "06e4d0a8a0e025e934b60b4e86e2bbb3f54fa980",
    "filename": "src/test/java/nl/lexemmens/podman/BuildMojoTest.java",
    "status": "modified",
    "additions": 80,
    "deletions": 20,
    "changes": 100,
    "blob_url": "https://github.com/lexemmens/podman-maven-plugin/blob/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/test/java/nl/lexemmens/podman/BuildMojoTest.java",
    "raw_url": "https://github.com/lexemmens/podman-maven-plugin/raw/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/test/java/nl/lexemmens/podman/BuildMojoTest.java",
    "contents_url": "https://api.github.com/repos/lexemmens/podman-maven-plugin/contents/src/test/java/nl/lexemmens/podman/BuildMojoTest.java?ref=64b0380d152ccb945b7cc6c18f7cc63a02a09b33",
    "patch": "@@ -409,13 +409,13 @@ public void testMultiStageBuildTagOnlyFinalImage() throws MojoExecutionException\n         verify(log, times(1)).info(\"Detected multistage Containerfile...\");\n \n         // At random verify some lines\n-        verify(log, times(1)).debug(\"Processing line: 'STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base', matches: true\");\n-        verify(log, times(1)).debug(\"Processing line: 'STEP 7: LABEL Build-User=sample-user2 Git-Repository-Url=null', matches: false\");\n+        verify(log, times(1)).debug(\"Processing line: 'STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base'\");\n+        verify(log, times(1)).debug(\"Processing candidate: 'STEP 7: LABEL Build-User=sample-user2 Git-Repository-Url=null'\");\n \n         // Verify stage detection\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: base\");\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: phase\");\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: phase2\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: base\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase2\");\n \n         // Verify hashes for stages\n         verify(log, times(1)).info(\"Final image for stage base is: 7e72c870614\");\n@@ -465,13 +465,73 @@ public void testMultiStageBuildWithCustomTagPerStage() throws MojoExecutionExcep\n         verify(log, times(1)).info(\"Detected multistage Containerfile...\");\n \n         // At random verify some lines\n-        verify(log, times(1)).debug(\"Processing line: 'STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base', matches: true\");\n-        verify(log, times(1)).debug(\"Processing line: 'STEP 7: LABEL Build-User=sample-user2 Git-Repository-Url=null', matches: false\");\n+        verify(log, times(1)).debug(\"Processing line: 'STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base'\");\n+        verify(log, times(1)).debug(\"Processing candidate: 'STEP 7: LABEL Build-User=sample-user2 Git-Repository-Url=null'\");\n \n         // Verify stage detection\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: base\");\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: phase\");\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: phase2\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: base\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase2\");\n+\n+        // Verify hashes for stages\n+        verify(log, times(1)).info(\"Final image for stage base is: 7e72c870614\");\n+        verify(log, times(1)).info(\"Final image for stage phase is: 7f55eab001a\");\n+        verify(log, times(1)).info(\"Final image for stage phase2 is: d2efc6645cb\");\n+\n+        // Verify tagging image\n+        verify(log, times(1)).info(\"Tagging container image 7f55eab001a from stage phase as registry.example.com/image-name-number-1:0.2.1\");\n+        verify(log, times(1)).info(\"Tagging container image d2efc6645cb from stage phase2 as registry.example.com/image-name-number-2:0.2.1\");\n+        verify(log, times(0)).info(\"Tagging container image d2efc6645cb as registry.example.com/sample:1.0.0\");\n+\n+        verify(podmanExecutorService, times(1)).tag(\"7f55eab001a\", \"registry.example.com/image-name-number-1:0.2.1\");\n+        verify(podmanExecutorService, times(1)).tag(\"d2efc6645cb\", \"registry.example.com/image-name-number-2:0.2.1\");\n+\n+        verify(log, times(1)).info(\"Built container image.\");\n+    }\n+\n+    @Test\n+    public void testMultiStageContainerFileWithMultilineOutputStep() throws MojoExecutionException, IOException, URISyntaxException {\n+        URI sampleBuildOutputUri = PushMojoTest.class.getResource(\"/multistagecontainerfile/samplebuildoutput_multiline_step.txt\").toURI();\n+        Path sampleBuildOutputPath = Paths.get(sampleBuildOutputUri);\n+\n+        List<String> buildOutputUnderTest = null;\n+        try (Stream<String> buildSampleOutput = Files.lines(sampleBuildOutputPath)) {\n+            buildOutputUnderTest = buildSampleOutput.collect(Collectors.toList());\n+        }\n+\n+        Assertions.assertNotNull(buildOutputUnderTest);\n+\n+        PodmanConfiguration podman = new TestPodmanConfigurationBuilder().setTlsVerify(TlsVerify.FALSE).build();\n+        ImageConfiguration image = new TestImageConfigurationBuilder(\"sample\")\n+                .setContainerfileDir(\"src/test/resources/multistagecontainerfile\")\n+                .setTags(new String[]{\"0.2.1\"})\n+                .setCreateLatestTag(false)\n+                .setUseCustomImageNameForMultiStageContainerfile(true)\n+                .addCustomImageNameForBuildStage(\"phase\", \"image-name-number-1\")\n+                .addCustomImageNameForBuildStage(\"phase2\", \"image-name-number-2\")\n+                .build();\n+        configureMojo(podman, image, true, false, false, false, true);\n+\n+        when(mavenProject.getBuild()).thenReturn(build);\n+        when(build.getDirectory()).thenReturn(\"target\");\n+        when(serviceHubFactory.createServiceHub(isA(Log.class), isA(MavenProject.class), isA(MavenFileFilter.class), isA(PodmanConfiguration.class), isA(Settings.class), isA(SettingsDecrypter.class))).thenReturn(serviceHub);\n+        when(serviceHub.getContainerfileDecorator()).thenReturn(containerfileDecorator);\n+        when(serviceHub.getPodmanExecutorService()).thenReturn(podmanExecutorService);\n+        when(podmanExecutorService.build(isA(ImageConfiguration.class))).thenReturn(buildOutputUnderTest);\n+\n+        buildMojo.execute();\n+\n+        // Verify logging\n+        verify(log, times(1)).info(\"Detected multistage Containerfile...\");\n+\n+        // At random verify some lines\n+        verify(log, times(1)).debug(\"Processing line: 'STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base'\");\n+        verify(log, times(1)).debug(\"Processing candidate: 'STEP 8: LABEL Build-User=sample-user2 Git-Repository-Url=null'\");\n+\n+        // Verify stage detection\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: base\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase2\");\n \n         // Verify hashes for stages\n         verify(log, times(1)).info(\"Final image for stage base is: 7e72c870614\");\n@@ -525,13 +585,13 @@ public void testMultiStageBuildWithCustomTagPerStageFinalLineDifferent() throws\n         verify(log, times(1)).info(\"Detected multistage Containerfile...\");\n \n         // At random verify some lines\n-        verify(log, times(1)).debug(\"Processing line: 'STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base', matches: true\");\n-        verify(log, times(1)).debug(\"Processing line: 'STEP 7: LABEL Build-User=sample-user2 Git-Repository-Url=null', matches: false\");\n+        verify(log, times(1)).debug(\"Processing line: 'STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base'\");\n+        verify(log, times(1)).debug(\"Processing candidate: 'STEP 7: LABEL Build-User=sample-user2 Git-Repository-Url=null'\");\n \n         // Verify stage detection\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: base\");\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: phase\");\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: phase2\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: base\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase2\");\n \n         // Verify hashes for stages\n         verify(log, times(1)).info(\"Final image for stage base is: 7e72c870614\");\n@@ -584,13 +644,13 @@ public void testMultiStageBuildWithCustomTagPerStagePodman1x() throws MojoExecut\n         verify(log, times(1)).info(\"Detected multistage Containerfile...\");\n \n         // At random verify some lines\n-        verify(log, times(1)).debug(\"Processing line: 'STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base', matches: true\");\n-        verify(log, times(1)).debug(\"Processing line: 'STEP 7: LABEL Build-User=sample-user2 Git-Repository-Url=null', matches: false\");\n+        verify(log, times(1)).debug(\"Processing line: 'STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base'\");\n+        verify(log, times(1)).debug(\"Processing candidate: 'STEP 7: LABEL Build-User=sample-user2 Git-Repository-Url=null'\");\n \n         // Verify stage detection\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: base\");\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: phase\");\n-        verify(log, times(1)).debug(\"Found stage in Containerfile: phase2\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: base\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase\");\n+        verify(log, times(1)).debug(\"Processing stage in Containerfile: phase2\");\n \n         // Verify hashes for stages\n         verify(log, times(1)).info(\"Final image for stage base is: 823ed30df4abf7574498d5f766b0ebf70793d73a99fc4220dda200c5131b60ce\");"
  },
  {
    "sha": "43f2fb1719e6aed36a88b56f6b8a7484ef4ae3e8",
    "filename": "src/test/resources/multistagecontainerfile/samplebuildoutput_multiline_step.txt",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/lexemmens/podman-maven-plugin/blob/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/test/resources/multistagecontainerfile/samplebuildoutput_multiline_step.txt",
    "raw_url": "https://github.com/lexemmens/podman-maven-plugin/raw/64b0380d152ccb945b7cc6c18f7cc63a02a09b33/src/test/resources/multistagecontainerfile/samplebuildoutput_multiline_step.txt",
    "contents_url": "https://api.github.com/repos/lexemmens/podman-maven-plugin/contents/src/test/resources/multistagecontainerfile/samplebuildoutput_multiline_step.txt?ref=64b0380d152ccb945b7cc6c18f7cc63a02a09b33",
    "patch": "@@ -0,0 +1,55 @@\n+Building container image...\n+STEP 1: FROM nexus.example:15000/adoptopenjdk/openjdk11:11.0.3 AS base\n+Getting image source signatures\n+Copying blob sha256:df15d82c4ffe976522b836c1f0c300e289f797cb2e302df1b7d0b917af7d3795\n+Copying blob sha256:c29f4698c17768b4bf36dde25d584231424db9f4b9c9e67cce8980cfc50efbc1\n+Copying blob sha256:b08df05e829707fdd711d6669671a0dd0431a20ca7ae89d7cd415e0025ba3a84\n+Copying blob sha256:ad26192fb1166465550d702a8418c67ecda7b089149870f48673d8f0fb5ab8c1\n+Copying blob sha256:95c2c089cb32f9959093f091b223b04c3a8e0e0aa8b703c0052ebfe9be5f0b3c\n+Copying blob sha256:67300986eedeec2c7442a3b30e65142200b72dc72dc6da2e945a0f06d5e9183b\n+Copying config sha256:c83be72afce332f5c3c3ae4992f3340479fee3115d7f449afebf39d0b6eb16b6\n+Writing manifest to image destination\n+Storing signatures\n+STEP 2: LABEL Build-User=example Git-Repository-Url=null\n+--> ab579b718da\n+STEP 3: ENV RUN_CMD=\"exec java -jar a-sample-jar-file.jar\"\n+--> d8874e40423\n+STEP 4: ls -al\n+some_file\n+other_file\n+another_file\n+blabla\n+test\n+--> 642d8df202a\n+STEP 5: WORKDIR /application\n+--> 932d8db203e\n+STEP 6: ENTRYPOINT /application\n+--> 7e72c870614\n+STEP 7: FROM 7e72c870614c842cefe268dec15cd84d8abd64be16a0c4f76d4883846b1e6104 AS phase\n+STEP 8: LABEL Build-User=sample-user2 Git-Repository-Url=null\n+--> f6d4d237662\n+STEP 9: COPY target/a-sample-jar-file.jar ./\n+--> 1149d5e6695\n+STEP 10: ls -al\n+some_file\n+other_file\n+another_file\n+blabla\n+test\n+STEP 11: ENTRYPOINT ${RUN_CMD}\n+--> 7f55eab001a\n+STEP 12: FROM 7e72c870614c842cefe268dec15cd84d8abd64be16a0c4f76d4883846b1e6104 AS phase2\n+STEP 13: LABEL Build-User=another-user Git-Repository-Url=null\n+--> 521e4fbdc40\n+STEP 14: COPY target/some-other-jar-file.jar ./\n+--> 15db404a6fb\n+STEP 15: ls -al\n+some_file\n+other_file\n+another_file\n+blabla\n+test\n+STEP 16: ENTRYPOINT ${RUN_CMD}\n+STEP 17: COMMIT\n+--> d2efc6645cb\n+7f55eab001adf2dfeas8adc03ef847dd3d2b4fa42b4fa418ca4cdeb6eaef8f3b"
  }
]
