[
  {
    "sha": "67e2c7d0785445c632fb9d71324239e6c460bb35",
    "filename": "src/main/java/com/nexmo/HangmanApplication.java",
    "status": "modified",
    "additions": 6,
    "deletions": 7,
    "changes": 13,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/HangmanApplication.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/HangmanApplication.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/HangmanApplication.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,18 +1,17 @@\n package com.nexmo;\n \n-import javax.servlet.ServletContext;\n-import javax.servlet.ServletException;\n-\n+import com.nexmo.dto.HangmanSessionBean;\n+import com.nexmo.filters.CookieSetter;\n+import com.nexmo.filters.GuessLetterFilter;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.domain.EntityScan;\n import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.web.WebApplicationInitializer;\n \n-import com.nexmo.dto.HangmanSessionBean;\n-import com.nexmo.filters.CookieSetter;\n-import com.nexmo.filters.GuessLetterFilter;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n \n \n //implement WebApplicationInitializer to configure web.xml programmatically\n@@ -30,7 +29,7 @@ public static void main(String[] args) {\n \n \t@Override\n \tpublic void onStartup(ServletContext servletContext) throws ServletException {\n-\n+\t\t//do nothing\n \t}\n \t\n \t@Bean"
  },
  {
    "sha": "338b1f6af04b0b5a876d298b5acf5f4a0a83991f",
    "filename": "src/main/java/com/nexmo/controllers/HangmanCtrl.java",
    "status": "modified",
    "additions": 19,
    "deletions": 19,
    "changes": 38,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/controllers/HangmanCtrl.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/controllers/HangmanCtrl.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/controllers/HangmanCtrl.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,53 +1,53 @@\n package com.nexmo.controllers;\n \n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpSession;\n-\n+import com.nexmo.dto.AnswerDto;\n+import com.nexmo.dto.HangmanDto;\n+import com.nexmo.exceptions.HangmanException;\n+import com.nexmo.services.HangmanSvc;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n-import com.nexmo.dto.AnswerDto;\n-import com.nexmo.dto.HangmanDto;\n-import com.nexmo.exceptions.HangmanException;\n-import com.nexmo.services.HangmanSvc;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n \n @Controller\n @RequestMapping(\"/api/v1/hangman\")\n public class HangmanCtrl {\n-\t\n+\n \t@Autowired\n \tHangmanSvc hangmanSvc;\n-\t\n-\t@RequestMapping(value={\"newgame\"}, method = {RequestMethod.GET})\n+\n+\t@GetMapping(value = {\"newgame\"})\n \t@ResponseBody\n \tpublic HangmanDto hangman(HttpServletRequest request, HttpSession session) {\n \t\treturn hangmanSvc.defaultGame(request);\n \t}\n-\t\n-\t@RequestMapping(value={\"anothergame\"}, method = {RequestMethod.POST})\n+\n+\t@PostMapping(value = {\"anothergame\"})\n \t@ResponseBody\n \tpublic HangmanDto anotherHangman(@RequestBody HangmanDto oldHangmanDto, HttpServletRequest request) {\n \t\treturn hangmanSvc.anotherGame(oldHangmanDto, request);\n \t}\n-\t\n-\t@RequestMapping(value={\"guessword\"}, method = {RequestMethod.POST}, consumes=\"application/json\")\n+\n+\t@PostMapping(value = {\"guessword\"}, consumes = \"application/json\")\n \t@ResponseBody\n \tpublic AnswerDto guessWord(@RequestBody AnswerDto answerDto) throws HangmanException {\n \t\thangmanSvc.processAnswer(answerDto);\n \t\treturn answerDto;\n \t}\n-\t\n-\t@RequestMapping(value={\"updategame\"}, method = {RequestMethod.POST}, consumes=\"application/json\")\n+\n+\t@PostMapping(value = {\"updategame\"}, consumes = \"application/json\")\n \t@ResponseBody\n \tpublic void updateHangmanStat(@RequestBody HangmanDto oldHangmanDto) {\n \t\thangmanSvc.updateHangman(oldHangmanDto);\n \t}\n-\t\n-\t\n+\n+\n }\n \n "
  },
  {
    "sha": "94b10087be54bc790cc0563e197bf3d41e8a8d2a",
    "filename": "src/main/java/com/nexmo/controllers/HangmanManagerCtrl.java",
    "status": "modified",
    "additions": 14,
    "deletions": 15,
    "changes": 29,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/controllers/HangmanManagerCtrl.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/controllers/HangmanManagerCtrl.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/controllers/HangmanManagerCtrl.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,39 +1,38 @@\n package com.nexmo.controllers;\n \n+import com.nexmo.dto.HangmanMgmtDto;\n+import com.nexmo.entities.HangmanWord;\n+import com.nexmo.services.HangmanManagerSvc;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n-import com.nexmo.dto.HangmanMgmtDto;\n-import com.nexmo.entities.HangmanWord;\n-import com.nexmo.services.HangmanManagerSvc;\n-\n \n @Controller\n @RequestMapping(\"/api/v1/hangman/management\")\n public class HangmanManagerCtrl {\n-\t\n+\n \t@Autowired\n \tprivate HangmanManagerSvc hangmanManagerSvc;\n-\t\n-\t\n-\t@RequestMapping(value={\"allstartedgames\"}, method = {RequestMethod.GET})\n+\n+\n+\t@GetMapping(value = {\"allstartedgames\"})\n \t@ResponseBody\n \tpublic HangmanMgmtDto getAllStartedGames() {\n-\t\tHangmanMgmtDto hangmanMgmtDto = hangmanManagerSvc.getAllStartedGames();\n-\t\treturn hangmanMgmtDto;\n+\t\treturn hangmanManagerSvc.getAllStartedGames();\n \t}\n-\t\n-\t@RequestMapping(value={\"allstatistics\"}, method = {RequestMethod.GET})\n+\n+\t@GetMapping(value = {\"allstatistics\"})\n \t@ResponseBody\n \tpublic HangmanMgmtDto getAllStatistics() {\n \t\treturn hangmanManagerSvc.getAllGameStat();\n \t}\n-\t\n-\t@RequestMapping(value={\"addguessword\"}, method = {RequestMethod.POST})\n+\n+\t@PostMapping(value = {\"addguessword\"})\n \t@ResponseBody\n \tpublic void createGuessWord(@RequestBody HangmanMgmtDto hangmanMgmtDto) {\n \t\tHangmanWord hangmanWord = hangmanMgmtDto.getHangmanWord();"
  },
  {
    "sha": "a5d43081aa634e7ed5770cbce25956e7d2c1a9f9",
    "filename": "src/main/java/com/nexmo/entities/HangmanMgmt.java",
    "status": "modified",
    "additions": 8,
    "deletions": 9,
    "changes": 17,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/entities/HangmanMgmt.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/entities/HangmanMgmt.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/entities/HangmanMgmt.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,7 +1,5 @@\n package com.nexmo.entities;\n \n-import java.io.Serializable;\n-\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -10,31 +8,32 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import java.io.Serializable;\n \n @Entity(name = \"HangmanMgmt\")\n @Table(name=\"HANGMAN_MGMT_TABLE\")\n public class HangmanMgmt implements Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n-\t\n+\n \t@Id\n \t@GeneratedValue(strategy = GenerationType.AUTO)\n \t@Column(unique = true, nullable = false, name = \"HANGMANMGMT_ID\")\n \tprivate Long id;\n-\t\n+\n \t@Column(nullable = false)\n \tprivate String state; //STARTED | STOPPED\n-\t\n+\n \tprivate String hangmanCategory; //retrieved hangman word Category\n-\tprivate String hangmanValue; //retrieved hangman word Value;\n-\t\n+\tprivate String hangmanValue;\n+\n \tprivate String playerStatus; //WINNER | LOSER\n \tprivate String playerIpAddress;\n-\t\n+\n \t@OneToOne\n \t@JoinColumn(name = \"HANGMANWORD_ID\")\n \tprivate HangmanWord hangmanWord;\n-\t\n+\n \tpublic Long getId() {\n \t\treturn id;\n \t}"
  },
  {
    "sha": "fd561c7a494f88798f20dc47e462d152ced7273c",
    "filename": "src/main/java/com/nexmo/filters/CookieSetter.java",
    "status": "modified",
    "additions": 7,
    "deletions": 8,
    "changes": 15,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/filters/CookieSetter.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/filters/CookieSetter.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/filters/CookieSetter.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,6 +1,6 @@\n package com.nexmo.filters;\n \n-import java.io.IOException;\n+import org.springframework.stereotype.Component;\n \n import javax.servlet.Filter;\n import javax.servlet.FilterChain;\n@@ -11,36 +11,35 @@\n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-\n-import org.springframework.stereotype.Component;\n+import java.io.IOException;\n \n @Component\n public class CookieSetter implements Filter {\n \n \t@Override\n \tpublic void init(FilterConfig filterConfig) throws ServletException {\n-\t\t\n+\t\t//do nothing\n \t}\n \n \t@Override\n \tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n \t\t\tthrows IOException, ServletException {\n \t\tHttpServletRequest req = (HttpServletRequest) request;\n \t\tHttpServletResponse resp = (HttpServletResponse) response;\n-\t\t\n-\t\tif(req.getSession().isNew() == true) {\n+\n+\t\tif (req.getSession().isNew()) {\n \t\t\tString sessionId = req.getSession().getId();\n \t\t\tCookie cookie = new Cookie(\"JSESSIONID\", sessionId);\n \t\t\tcookie.setMaxAge(Integer.MAX_VALUE);\n \t\t\tresp.addCookie(cookie);\n \t\t}\n-\t\t\n+\n \t\tchain.doFilter(req, resp);\n \t}\n \n \t@Override\n \tpublic void destroy() {\n-\t\t\n+\t\t//do nothing\n \t}\n \n }"
  },
  {
    "sha": "96a339fdd2e206b8cfd5d1592758f9271c143b9f",
    "filename": "src/main/java/com/nexmo/filters/GuessLetterFilter.java",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/filters/GuessLetterFilter.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/filters/GuessLetterFilter.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/filters/GuessLetterFilter.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,6 +1,10 @@\n package com.nexmo.filters;\n \n-import java.io.IOException;\n+import com.nexmo.dao.PlayerDataRepository;\n+import com.nexmo.dto.HangmanSessionBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.stereotype.Component;\n \n import javax.servlet.Filter;\n import javax.servlet.FilterChain;\n@@ -10,13 +14,7 @@\n import javax.servlet.ServletResponse;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.DependsOn;\n-import org.springframework.stereotype.Component;\n-\n-import com.nexmo.dao.PlayerDataRepository;\n-import com.nexmo.dto.HangmanSessionBean;\n+import java.io.IOException;\n \n @Component\n @DependsOn(\"hangmanSessionBean\")\n@@ -30,8 +28,8 @@\n \t\n \t@Override\n \tpublic void init(FilterConfig filterConfig) throws ServletException {\n-\t\t// TODO Auto-generated method stub\n-\t\t\n+\t\t//do nothing\n+\n \t}\n \n \t@Override\n@@ -46,8 +44,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n \n \t@Override\n \tpublic void destroy() {\n-\t\t// TODO Auto-generated method stub\n-\t\t\n+\t\t//do nothing\n+\n \t}\n \n }"
  },
  {
    "sha": "0231cdff56ca815c381ecb1e28f5d3b6821dbe5c",
    "filename": "src/main/java/com/nexmo/services/HangmanManagerSvc.java",
    "status": "modified",
    "additions": 2,
    "deletions": 5,
    "changes": 7,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/services/HangmanManagerSvc.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/services/HangmanManagerSvc.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/services/HangmanManagerSvc.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,14 +1,11 @@\n package com.nexmo.services;\n \n-import java.util.List;\n-\n import com.nexmo.dto.HangmanMgmtDto;\n import com.nexmo.entities.HangmanMgmt;\n import com.nexmo.entities.HangmanWord;\n import com.nexmo.entities.PlayerData;\n-import com.nexmo.entities.PlayerData;\n-import com.nexmo.entities.PlayerData;\n-import com.nexmo.entities.PlayerData;\n+\n+import java.util.List;\n \n public interface HangmanManagerSvc {\n \t"
  },
  {
    "sha": "fd08ac79783630e8289b2f7168842921b91d8bcf",
    "filename": "src/main/java/com/nexmo/services/HangmanMngrSvcImpl.java",
    "status": "modified",
    "additions": 8,
    "deletions": 11,
    "changes": 19,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/services/HangmanMngrSvcImpl.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/services/HangmanMngrSvcImpl.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/services/HangmanMngrSvcImpl.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,20 +1,19 @@\n package com.nexmo.services;\n \n-import java.util.List;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import org.springframework.transaction.annotation.Transactional;\n-\n import com.nexmo.dao.HangmanDao;\n import com.nexmo.dao.PlayerDataRepository;\n import com.nexmo.dto.HangmanMgmtDto;\n import com.nexmo.entities.HangmanMgmt;\n import com.nexmo.entities.HangmanWord;\n import com.nexmo.entities.PlayerData;\n import com.nexmo.util.HangmanConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n \n @Service\n public class HangmanMngrSvcImpl implements HangmanManagerSvc {\n@@ -109,9 +108,7 @@ public void createPlayerData(String sessionId, Long hangmanMgmtId) {\n \n \t@Override\n \tpublic PlayerData existingActivePlayer(String sessionId) {\n-\t\tPlayerData data = playerDataRepo.findBySessionIdAndHangmanMgmtState(sessionId,\n-\t\t\t\tHangmanConstants.HANGMAN_STARTED);\n-\t\treturn data;\n+\t\treturn playerDataRepo.findBySessionIdAndHangmanMgmtState(sessionId, HangmanConstants.HANGMAN_STARTED);\n \t}\n \n \t@Override"
  },
  {
    "sha": "6ecd19b37d9a1f535bc28b52688cf53914988621",
    "filename": "src/main/java/com/nexmo/services/HangmanSvcImpl.java",
    "status": "modified",
    "additions": 29,
    "deletions": 35,
    "changes": 64,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/services/HangmanSvcImpl.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/services/HangmanSvcImpl.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/services/HangmanSvcImpl.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,18 +1,5 @@\n package com.nexmo.services;\n \n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Random;\n-\n-import javax.servlet.http.HttpServletRequest;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n import com.nexmo.dto.AnswerDto;\n import com.nexmo.dto.HangmanDto;\n import com.nexmo.dto.HangmanSessionBean;\n@@ -21,6 +8,17 @@\n import com.nexmo.entities.PlayerData;\n import com.nexmo.exceptions.HangmanException;\n import com.nexmo.util.HangmanConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n \n @Service\n public class HangmanSvcImpl implements HangmanSvc {\n@@ -35,39 +33,37 @@\n \t\n \t@Override\n \tpublic HangmanDto defaultGame(HttpServletRequest request) {\n-\t\t\n-\t\t\n+\n+\n \t\t//check if there is an existing mgmtData\n \t\tPlayerData data = hangmanManagerSvc.existingActivePlayer(request.getSession().getId());\n-\t\tif(null != data) {\n+\t\tif (null != data) {\n \t\t\treturn getExistingGame(data);\n \t\t}\n-\t\t\n+\n \t\t//RETRIEVE WITH NO CATEGORY\n \t\tList<HangmanWord> retrievedHangmanWordList = hangmanManagerSvc.getAllGuessWordList();\n \t\tint selectedGuessWordId = randomSelectFromDb(retrievedHangmanWordList);\n \t\tHangmanWord selectedWord = retrievedHangmanWordList.get(selectedGuessWordId);\n-\t\tlogger.debug(\">>>>>> selectedWord: \" + selectedWord.getValue());\n-\t\t\n+\t\tlogger.debug(\">>>>>> selectedWord: {}\", selectedWord.getValue());\n+\n \t\tHangmanDto hangman = new HangmanDto();\n \t\thangman.setGuessWordId(selectedWord.getId());\n \t\thangman.setGuessWordlength(selectedWord.getValue().length());\n \t\thangman.setChances(HangmanConstants.DEFAULT_CHANCES);\n \t\thangman.setTimeLimit(HangmanConstants.DEFAULT_TIME_LIMIT);\n-\t\t\n+\n \t\t//CREATE GAME STAT\n \t\tHangmanMgmt hangmanMgmt = new HangmanMgmt();\n \t\thangmanMgmt.setHangmanValue(selectedWord.getValue());\n \t\thangmanMgmt.setHangmanCategory(selectedWord.getCategory());\n \t\thangmanMgmt.setState(HangmanConstants.HANGMAN_STARTED);\n \t\thangmanMgmt.setHangmanWord(selectedWord);\n-\t\tif(null != request) {\n-\t\t\thangmanMgmt.setPlayerIpAddress(request.getRemoteAddr());\n-\t\t}\n+\t\thangmanMgmt.setPlayerIpAddress(request.getRemoteAddr());\n \t\tLong gameId = hangmanManagerSvc.createGameStat(hangmanMgmt);\n \t\thangmanManagerSvc.createPlayerData(request.getSession().getId(), gameId);\n \t\thangman.setGameId(gameId);\n-\t\t\n+\n \t\treturn hangman;\n \t}\n \t\n@@ -94,8 +90,7 @@ private HangmanDto getExistingGame(PlayerData playerData) {\n \tprivate int randomSelectFromDb(List<HangmanWord> listFromDb) {\n \t\tint listFromDbSize = listFromDb.size();\n \t\tRandom random = new Random();\n-\t\tint selectWordInt = random.ints(0, (listFromDbSize-1)).findFirst().getAsInt();\n-\t\treturn selectWordInt;\n+\t\treturn random.ints(0, (listFromDbSize - 1)).findFirst().getAsInt();\n \t}\n \t\n \t@Override\n@@ -127,27 +122,26 @@ public void processAnswer(AnswerDto answerDto) throws HangmanException {\n \t\tList<Integer> newLetterIndexList = new ArrayList<>();\n \t\t\n \t\tfor(Integer key : guessWordMap.keySet()) {\n-\t\t\tif(null != prevLetterIndexList && prevLetterIndexList.contains(key.intValue())) {\n-\t\t\t\tcontinue;\n-\t\t\t} else {\n-\t\t\t\t\n-\t\t\t\tif(guessWordMap.get(key).equalsIgnoreCase(userGuessLetter)) {\n+\t\t\tif (null == prevLetterIndexList || !prevLetterIndexList.contains(key)) {\n+\n+\t\t\t\tif (guessWordMap.get(key).equalsIgnoreCase(userGuessLetter)) {\n \t\t\t\t\tnewLetterIndexList.add(key);\n+\t\t\t\t\tassert prevLetterIndexList != null;\n \t\t\t\t\tprevLetterIndexList.add(key);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\t\n-\t\tif(newLetterIndexList.size() == 0) {\n+\n+\t\tif (newLetterIndexList.isEmpty()) {\n \t\t\tanswerDto.setCorrectAnswer(false);\n \t\t\thangmanManagerSvc.registerUsedChances(hangmanSessionBean.getSessionId());\n \t\t} else {\n \t\t\tanswerDto.setCorrectAnswer(true);\n \t\t\tanswerDto.setCorrectLetter(userGuessLetter);\n-\t\t\t\n+\n \t\t\thangmanManagerSvc.registerGuessedLetters(hangmanSessionBean.getSessionId(), answerDto.getGuessLetter());\n \t\t\tString correctIndices = \"\";\n-\t\t\tfor(Integer element : prevLetterIndexList) {\n+\t\t\tfor (Integer element : prevLetterIndexList) {\n \t\t\t\tcorrectIndices = correctIndices.concat(element.toString());\n \t\t\t}\n \t\t\thangmanManagerSvc.registerCorrectIndices(hangmanSessionBean.getSessionId(), correctIndices);"
  },
  {
    "sha": "b341088ee21e11def634a305945322612dae6c9a",
    "filename": "src/main/java/com/nexmo/sessionlisteners/SessionListenerHM.java",
    "status": "modified",
    "additions": 4,
    "deletions": 9,
    "changes": 13,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/sessionlisteners/SessionListenerHM.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/main/java/com/nexmo/sessionlisteners/SessionListenerHM.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/main/java/com/nexmo/sessionlisteners/SessionListenerHM.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,16 +1,11 @@\n package com.nexmo.sessionlisteners;\n \n-import javax.servlet.http.HttpSessionEvent;\n-import javax.servlet.http.HttpSessionListener;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n-import com.nexmo.entities.HangmanMgmt;\n-import com.nexmo.services.HangmanManagerSvc;\n-import com.nexmo.util.HangmanConstants;\n+import javax.servlet.http.HttpSessionEvent;\n+import javax.servlet.http.HttpSessionListener;\n \n @Component\n public class SessionListenerHM implements HttpSessionListener {\n@@ -20,13 +15,13 @@\n \t@Override\n \tpublic void sessionCreated(HttpSessionEvent arg0) {\n \t\tlogger.debug(\"======= sessionCreated =======\");\n-\t\tlogger.debug(\">>>>>> SESSION ID: \" + arg0.getSession().getId());\n+\t\tlogger.debug(\">>>>>> SESSION ID: {}\", arg0.getSession().getId());\n \t}\n \n \t@Override\n \tpublic void sessionDestroyed(HttpSessionEvent arg0) {\n \t\tlogger.debug(\"======= sessionDestroyed =======\");\n-\t\tlogger.debug(\">>>>>> SESSION EXPIRED: \" + arg0.getSession().getId());\n+\t\tlogger.debug(\">>>>>> SESSION EXPIRED: {}\", arg0.getSession().getId());\n \t}\n \n }"
  },
  {
    "sha": "791e86bb2f2eabb5fe03d3b4157b9e629a9ea0ff",
    "filename": "src/test/java/com/nexmo/hangman/HangmanDaoTest.java",
    "status": "modified",
    "additions": 43,
    "deletions": 43,
    "changes": 86,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/test/java/com/nexmo/hangman/HangmanDaoTest.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/test/java/com/nexmo/hangman/HangmanDaoTest.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/test/java/com/nexmo/hangman/HangmanDaoTest.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,10 +1,9 @@\n package com.nexmo.hangman;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.util.List;\n-\n+import com.nexmo.dao.HangmanDao;\n+import com.nexmo.entities.HangmanMgmt;\n+import com.nexmo.entities.HangmanWord;\n+import com.nexmo.util.HangmanConstants;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -16,10 +15,11 @@\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.transaction.annotation.Transactional;\n \n-import com.nexmo.dao.HangmanDao;\n-import com.nexmo.entities.HangmanMgmt;\n-import com.nexmo.entities.HangmanWord;\n-import com.nexmo.util.HangmanConstants;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)\n@@ -39,25 +39,25 @@\n \tpublic void getNumberOfStartedGamesTest() {\n \t\thangmanReportInitial();\n \t\tLong num = hangmanDao.getNumberOfStartedGames(HangmanConstants.HANGMAN_STARTED);\n-\t\tassertTrue(num.longValue() == 1l);\n+\t\tassertEquals(1l, num.longValue());\n \t}\n \t\n \t@Test\n \tpublic void updateHangmanReportTest() {\n \t\tLong id = hangmanReportInitial();\n \t\tHangmanMgmt oldObj = hangmanDao.getHangmanRepById(id);\n-\t\tassertTrue(oldObj.getState().equals(HangmanConstants.HANGMAN_STARTED));\n-\t\t\n+\t\tassertEquals(HangmanConstants.HANGMAN_STARTED, oldObj.getState());\n+\n \t\tHangmanMgmt updateObj = new HangmanMgmt();\n \t\tupdateObj.setId(id);\n \t\tupdateObj.setState(HangmanConstants.HANGMAN_STOPPED);\n \t\tupdateObj.setPlayerStatus(HangmanConstants.HANGMAN_LOSER);\n \t\thangmanDao.updateHangmanReport(updateObj);\n-\t\t\n+\n \t\toldObj = new HangmanMgmt();\n \t\toldObj = hangmanDao.getHangmanRepById(id);\n-\t\tassertTrue(oldObj.getState().equals(HangmanConstants.HANGMAN_STOPPED));\n-\t\tassertTrue(oldObj.getPlayerStatus().equals(HangmanConstants.HANGMAN_LOSER));\n+\t\tassertEquals(HangmanConstants.HANGMAN_STOPPED, oldObj.getState());\n+\t\tassertEquals(HangmanConstants.HANGMAN_LOSER, oldObj.getPlayerStatus());\n \t}\n \t\n \tprivate Long hangmanReportInitial() {\n@@ -66,10 +66,10 @@ private Long hangmanReportInitial() {\n \t\tstat.setHangmanValue(\"SAMPLE VALUE\");\n \t\tstat.setState(HangmanConstants.HANGMAN_STARTED);\n \t\tLong genId = hangmanDao.createHangmanReport(stat);\n-\t\t\n+\n \t\tList<HangmanMgmt> list = hangmanDao.getHangmanRepByState(HangmanConstants.HANGMAN_STARTED);\n-\t\tassertTrue(list.size() == 1);\n-\t\tassertTrue(genId.longValue() == list.get(0).getId().longValue());\n+\t\tassertEquals(1, list.size());\n+\t\tassertEquals(genId.longValue(), list.get(0).getId().longValue());\n \t\treturn genId;\n \t}\n \t\n@@ -78,8 +78,8 @@ public void deleteHangmanReportByIdTest() {\n \t\tLong genId = hangmanReportInitial();\n \t\thangmanDao.deleteHangmanReportById(genId);\n \t\tList<HangmanMgmt> list = hangmanDao.getAllHangmanReport();\n-\t\tassertTrue(list.size() == 0);\n-\t\t\n+\t\tassertEquals(0, list.size());\n+\n \t}\n \t\n \t@Test\n@@ -92,7 +92,7 @@ public void createRetrieveHangmanReportTest() {\n \tpublic void retrieveInitializedGuessWordTest() {\n \t\tList<HangmanWord> resultList = hangmanDao.retrieveGuessWordListByCategory(INITIALIZED_CATEGORY);\n \t\tassertNotNull(resultList);\n-\t\tassertTrue(resultList.size() == INITIALIZED_ITEMS_COUNT);\n+\t\tassertEquals(INITIALIZED_ITEMS_COUNT, resultList.size());\n \t}\n \t\n \t@Test\n@@ -109,76 +109,76 @@ public void retrieveHangmanWordByCategoryTest() {\n \t\thangmanWord.setCategory(category);\n \t\thangmanWord.setValue(\"STRAWBERRY\");\n \t\thangmanDao.createGuessWord(hangmanWord);\n-\t\t\n+\n \t\thangmanWord = new HangmanWord();\n \t\thangmanWord.setCategory(category);\n \t\thangmanWord.setValue(\"PINEAPPLE\");\n \t\thangmanDao.createGuessWord(hangmanWord);\n-\t\t\n+\n \t\tList<HangmanWord> resultList = hangmanDao.retrieveGuessWordListByCategory(INITIALIZED_CATEGORY);\n \t\tassertNotNull(resultList);\n-\t\tassertTrue(resultList.size() == INITIALIZED_ITEMS_COUNT);\n-\t\t\n+\t\tassertEquals(INITIALIZED_ITEMS_COUNT, resultList.size());\n+\n \t\tresultList = hangmanDao.retrieveGuessWordListByCategory(category);\n \t\tassertNotNull(resultList);\n-\t\tassertTrue(resultList.size() == 3);\n-\t\t\n+\t\tassertEquals(3, resultList.size());\n+\n \t}\n \t\n \t@Test\n \tpublic void getHangmanWordByIdTest() {\n-\t\t\n+\n \t\t/*\n \t\t * FROM data.sql:\n \t\t * WHISKEY = 1\n \t\t * GIN = 2\n \t\t */\n-\t\t\n+\n \t\tList<HangmanWord> resultList = hangmanDao.retrieveGuessWordListByCategory(INITIALIZED_CATEGORY);\n \t\tassertNotNull(resultList);\n-\t\tassertTrue(resultList.size() == INITIALIZED_ITEMS_COUNT);\n-\t\t\n+\t\tassertEquals(INITIALIZED_ITEMS_COUNT, resultList.size());\n+\n \t\tHangmanWord hangmanWord = hangmanDao.retrieveGuessWordById(Long.valueOf(1l));\n \t\tassertTrue(hangmanWord.getValue().equalsIgnoreCase(\"WHISKEY\"));\n-\t\t\n+\n \t\thangmanWord = hangmanDao.retrieveGuessWordById(Long.valueOf(2l));\n \t\tassertTrue(hangmanWord.getValue().equalsIgnoreCase(\"GIN\"));\n-\t\t\n+\n \t}\n \t\n \t@Test\n \tpublic void deleteHangmanWordByIdTest() {\n-\t\t\n+\n \t\t/*\n \t\t * FROM data.sql:\n \t\t * WHISKEY = 1\n \t\t * GIN = 2\n \t\t * TEQUILA = 3\n \t\t */\n-\t\t\n+\n \t\tList<HangmanWord> resultList = hangmanDao.retrieveGuessWordListByCategory(INITIALIZED_CATEGORY);\n \t\tassertNotNull(resultList);\n-\t\tassertTrue(resultList.size() == INITIALIZED_ITEMS_COUNT);\n-\t\t\n+\t\tassertEquals(INITIALIZED_ITEMS_COUNT, resultList.size());\n+\n \t\t//delete TEQUILA\n \t\thangmanDao.deleteGuessWordById(Long.valueOf(3l));\n-\t\t\n+\n \t\tresultList = hangmanDao.retrieveGuessWordListByCategory(INITIALIZED_CATEGORY);\n \t\tassertNotNull(resultList);\n-\t\tassertTrue(resultList.size() == INITIALIZED_ITEMS_COUNT - 1);\n-\t\t\n+\t\tassertEquals(INITIALIZED_ITEMS_COUNT - 1, resultList.size());\n+\n \t\t//delete all under INITIALIZED CATEGORY\n \t\thangmanDao.deleteGuessWordListCategory(INITIALIZED_CATEGORY);\n-\t\t\n+\n \t\tresultList = hangmanDao.retrieveGuessWordListByCategory(INITIALIZED_CATEGORY);\n-\t\tassertTrue(resultList.size() == 0);\n+\t\tassertEquals(0, resultList.size());\n \t}\n \t\n \t@Test\n \tpublic void retrieveAllHangmanWordTest() {\n \t\tList<HangmanWord> resultList = hangmanDao.retrieveAllGuessWordList();\n \t\tassertNotNull(resultList);\n-\t\tassertTrue(resultList.size() == INITIALIZED_ITEMS_COUNT);\n+\t\tassertEquals(INITIALIZED_ITEMS_COUNT, resultList.size());\n \t}\n \n }"
  },
  {
    "sha": "8f8b9e57e4ed6aa5f40f8bdbcb854a0e28b9b3ef",
    "filename": "src/test/java/com/nexmo/hangman/HangmanIntegrationTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 23,
    "changes": 37,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/test/java/com/nexmo/hangman/HangmanIntegrationTest.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/test/java/com/nexmo/hangman/HangmanIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/test/java/com/nexmo/hangman/HangmanIntegrationTest.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,10 +1,8 @@\n package com.nexmo.hangman;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.util.List;\n-\n+import com.nexmo.dto.HangmanDto;\n+import com.nexmo.dto.HangmanMgmtDto;\n+import com.nexmo.util.HangmanConstants;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n@@ -13,17 +11,15 @@\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n import org.springframework.boot.test.web.client.TestRestTemplate;\n-import org.springframework.http.HttpEntity;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.annotation.DirtiesContext.ClassMode;\n import org.springframework.test.context.TestPropertySource;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import com.nexmo.dto.AnswerDto;\n-import com.nexmo.dto.HangmanDto;\n-import com.nexmo.dto.HangmanMgmtDto;\n-import com.nexmo.util.HangmanConstants;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)\n@@ -44,32 +40,27 @@\n \t@Autowired\n     private TestRestTemplate restTemplate;\n \t\n-\t@Test\n-\tpublic void addGuessWordTest() {\n-\t\t\n-\t}\n-\t\n \t@Test\n \tpublic void allStatisticsTest() {\n \t\t//make new game 1\n-\t\tinitialNewGame(); \n+\t\tinitialNewGame();\n \t\t//make new game 2\n \t\tResponseEntity<HangmanDto> responseEntity = restTemplate.getForEntity(HANGMAN_API_DEFAULT_NEWGAME, HangmanDto.class);\n \t\t//make new game 3\n \t\tresponseEntity = restTemplate.getForEntity(HANGMAN_API_DEFAULT_NEWGAME, HangmanDto.class);\n-\t\t\n+\n \t\tResponseEntity<HangmanMgmtDto> hangmanMgmtDtoEntityResp = restTemplate.getForEntity(HANGMAN_API_MGMT_ALLGAMES, HangmanMgmtDto.class);\n \t\tHangmanMgmtDto hangmanMgmtDtoBody = hangmanMgmtDtoEntityResp.getBody();\n-\t\tassertTrue(hangmanMgmtDtoBody.getAllReports().size() == 3);\n-\t\t\n+\t\tassertEquals(3, hangmanMgmtDtoBody.getAllReports().size());\n+\n \t}\n \t\n \t@Test\n \tpublic void getAllStartedGamesTest() {\n \t\tinitialNewGame();\n \t\tResponseEntity<HangmanMgmtDto> hangmanMgmtDtoResponse = restTemplate.getForEntity(HANGMAN_API_MNGR_STARTEDGAMES, HangmanMgmtDto.class);\n-\t\tassertTrue(hangmanMgmtDtoResponse.getBody().getNumberOfStartedGames().longValue() == 1l);\n-\t\t\n+\t\tassertEquals(1l, hangmanMgmtDtoResponse.getBody().getNumberOfStartedGames().longValue());\n+\n \t}\n \t\n \t@Test\n@@ -88,8 +79,8 @@ private Long initialNewGame() {\n \t\t//GET NEW GAME WITH DEFAULT SETTINGS\n \t\tResponseEntity<HangmanDto> responseEntity = restTemplate.getForEntity(HANGMAN_API_DEFAULT_NEWGAME, HangmanDto.class);\n \t\tHangmanDto hangmanDtoResponse = responseEntity.getBody();\n-\t\tassertTrue(hangmanDtoResponse.getChances() == HangmanConstants.DEFAULT_CHANCES);\n-\t\tassertTrue(hangmanDtoResponse.getTimeLimit() == HangmanConstants.DEFAULT_TIME_LIMIT);\n+\t\tassertEquals(HangmanConstants.DEFAULT_CHANCES, hangmanDtoResponse.getChances());\n+\t\tassertEquals(HangmanConstants.DEFAULT_TIME_LIMIT, hangmanDtoResponse.getTimeLimit());\n \t\tassertNotNull(hangmanDtoResponse.getGameId());\n \t\tlogger.debug(\">>>>>> CREATED GAME ID: \" + hangmanDtoResponse.getGameId());\n \t\treturn hangmanDtoResponse.getGameId();"
  },
  {
    "sha": "1260dbd7d91f5b4c28cb27ea4d7e0f3c752bc823",
    "filename": "src/test/java/com/nexmo/hangman/HangmanServiceTest.java",
    "status": "modified",
    "additions": 25,
    "deletions": 27,
    "changes": 52,
    "blob_url": "https://github.com/jlessard93/springboot-hangman/blob/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/test/java/com/nexmo/hangman/HangmanServiceTest.java",
    "raw_url": "https://github.com/jlessard93/springboot-hangman/raw/82353c4a32498ad77089b5746b40f4be5b8f9e4d/src/test/java/com/nexmo/hangman/HangmanServiceTest.java",
    "contents_url": "https://api.github.com/repos/jlessard93/springboot-hangman/contents/src/test/java/com/nexmo/hangman/HangmanServiceTest.java?ref=82353c4a32498ad77089b5746b40f4be5b8f9e4d",
    "patch": "@@ -1,34 +1,32 @@\n package com.nexmo.hangman;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import com.nexmo.dto.AnswerDto;\n+import com.nexmo.dto.HangmanDto;\n+import com.nexmo.dto.HangmanSessionBean;\n+import com.nexmo.entities.HangmanWord;\n+import com.nexmo.exceptions.HangmanException;\n+import com.nexmo.services.HangmanManagerSvc;\n+import com.nexmo.services.HangmanSvcImpl;\n+import com.nexmo.util.HangmanConstants;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.mock.web.MockHttpSession;\n import org.springframework.test.context.TestPropertySource;\n import org.springframework.test.context.junit4.SpringRunner;\n \n-import com.nexmo.dto.AnswerDto;\n-import com.nexmo.dto.HangmanDto;\n-import com.nexmo.dto.HangmanSessionBean;\n-import com.nexmo.entities.HangmanWord;\n-import com.nexmo.entities.PlayerData;\n-import com.nexmo.exceptions.HangmanException;\n-import com.nexmo.services.HangmanManagerSvc;\n-import com.nexmo.services.HangmanSvcImpl;\n-import com.nexmo.util.HangmanConstants;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n \n @RunWith(SpringRunner.class)\n //@SpringBootTest\n@@ -61,30 +59,30 @@ public void defaultGameTest() {\n \t\tassertNotNull(hangmanDto);\n \t\tassertTrue(hangmanDto.getGuessWordId().longValue() == 1l || hangmanDto.getGuessWordId().longValue() == 2l\n \t\t\t\t|| hangmanDto.getGuessWordId().longValue() == 3l);\n-\t\tassertTrue(hangmanDto.getChances() == HangmanConstants.DEFAULT_CHANCES);\n+\t\tassertEquals(HangmanConstants.DEFAULT_CHANCES, hangmanDto.getChances());\n \t}\n \t\n \t@Test\n \tpublic void processAnswerTest() throws HangmanException {\n-\t\t\n+\n \t\thangmanSessionBean.setSessionId(\"1\");\n-\t\t\n-\t\tLong sampleId = new Long(1l);\n+\n+\t\tLong sampleId = 1l;\n \t\tString guessLetter = \"s\";\n-\t\t\n+\n \t\twhen(mockedHangmanManagerSvc.getGuessWordById(sampleId)).thenReturn(getMockedHangmanWordById(sampleId));\n-\t\t\n+\n \t\tAnswerDto answer = new AnswerDto();\n \t\tanswer.setGuessWordId(sampleId);\n \t\tanswer.setGuessLetter(guessLetter);\n-\t\t\n+\n \t\tMockito.doNothing().when(mockedHangmanManagerSvc).registerGuessedLetters(Mockito.anyString(), Mockito.anyString());\n \t\tmockedHangmanSvcImpl.processAnswer(answer);\n-\t\t\n+\n \t\tassertTrue(answer.isCorrectAnswer());\n \t\tassertTrue(answer.getCorrectLetter().equalsIgnoreCase(guessLetter));\n-\t\tassertTrue(answer.getNewLetterIndexList().size() == 2);\n-\t\t\n+\t\tassertEquals(2, answer.getNewLetterIndexList().size());\n+\n \t}\n \t\n \tprivate HangmanWord getMockedHangmanWordById(Long id) {"
  }
]
