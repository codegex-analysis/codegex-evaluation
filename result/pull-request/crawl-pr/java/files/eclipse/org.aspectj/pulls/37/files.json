[
  {
    "sha": "b362f92c3c5457191a7cbe98f4a0abb6ea17e1e6",
    "filename": "bcel-builder/src/main/java/org/aspectj/apache/bcel/util/ClassLoaderRepository.java",
    "status": "modified",
    "additions": 36,
    "deletions": 10,
    "changes": 46,
    "blob_url": "https://github.com/eclipse/org.aspectj/blob/1d095788f17ccf373b67d537be60023539b45145/bcel-builder/src/main/java/org/aspectj/apache/bcel/util/ClassLoaderRepository.java",
    "raw_url": "https://github.com/eclipse/org.aspectj/raw/1d095788f17ccf373b67d537be60023539b45145/bcel-builder/src/main/java/org/aspectj/apache/bcel/util/ClassLoaderRepository.java",
    "contents_url": "https://api.github.com/repos/eclipse/org.aspectj/contents/bcel-builder/src/main/java/org/aspectj/apache/bcel/util/ClassLoaderRepository.java?ref=1d095788f17ccf373b67d537be60023539b45145",
    "patch": "@@ -64,6 +64,7 @@\n import java.util.AbstractMap;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import java.util.WeakHashMap;\n@@ -73,11 +74,11 @@\n \n /**\n  * The repository maintains information about which classes have been loaded.\n- * \n+ *\n  * It loads its data from the ClassLoader implementation passed into its constructor.\n- * \n+ *\n  * @see org.aspectj.apache.bcel.Repository\n- * \n+ *\n  * @version $Id: ClassLoaderRepository.java,v 1.13 2009/09/09 19:56:20 aclement Exp $\n  * @author <A HREF=\"mailto:markus.dahm@berlin.de\">M. Dahm</A>\n  * @author David Dixon-Peugh\n@@ -95,6 +96,16 @@\n \n \tpublic static boolean useSharedCache = System.getProperty(\"org.aspectj.apache.bcel.useSharedCache\", \"true\").equalsIgnoreCase(\"true\");\n \n+\t//Cache not found classes as well to prevent unnecessary file I/O operations\n+\tpublic static final boolean useUnavailableClassesCache =\n+\t\tSystem.getProperty(\"org.aspectj.apache.bcel.useUnavailableClassesCache\", \"true\").equalsIgnoreCase(\"true\");\n+\t//Ignore cache clear requests to not build up the cache over and over again\n+\tpublic static final boolean ignoreCacheClearRequests =\n+\t\tSystem.getProperty(\"org.aspectj.apache.bcel.ignoreCacheClearRequests\", \"true\").equalsIgnoreCase(\"true\");\n+\n+\t//Second cache for the unavailable classes\n+\tprivate static Set<String> unavailableClasses = new HashSet<String>();\n+\n \tprivate static int cacheHitsShared = 0;\n \tprivate static int missSharedEvicted = 0; // Misses in shared cache access due to reference GC\n \tprivate long timeManipulatingURLs = 0L;\n@@ -183,8 +194,10 @@ public Set entrySet() {\n \n \t\t@Override\n \t\tpublic void clear() {\n-\t\t\tprocessQueue();\n-\t\t\tmap.clear();\n+\t\t\tif (!ignoreCacheClearRequests) {\n+\t\t\t\tprocessQueue();\n+\t\t\t\tmap.clear();\n+\t\t\t}\n \t\t}\n \n \t\t@Override\n@@ -281,12 +294,19 @@ private URL toURL(String className) {\n \t */\n \tpublic JavaClass loadClass(String className) throws ClassNotFoundException {\n \n+\t\t//Quick evaluation of unavailable classes to prevent unnecessary file I/O\n+\t\tif (useUnavailableClassesCache && unavailableClasses.contains(className))\n+\t\t\tthrow new ClassNotFoundException(className + \" not found.\");\n+\n \t\t// translate to a URL\n \t\tlong time = System.currentTimeMillis();\n \t\tjava.net.URL url = toURL(className);\n \t\ttimeManipulatingURLs += (System.currentTimeMillis() - time);\n-\t\tif (url == null)\n+\t\tif (url == null) {\n+\t\t\tif (useUnavailableClassesCache)\n+\t\t\t\tunavailableClasses.add(className);\n \t\t\tthrow new ClassNotFoundException(className + \" not found - unable to determine URL\");\n+\t\t}\n \n \t\tJavaClass clazz = null;\n \n@@ -314,6 +334,9 @@ public JavaClass loadClass(String className) throws ClassNotFoundException {\n \t\t\tInputStream is = (useSharedCache ? url.openStream() : loaderRef.getClassLoader().getResourceAsStream(\n \t\t\t\t\tclassFile + \".class\"));\n \t\t\tif (is == null) {\n+\t\t\t\tif (useUnavailableClassesCache) {\n+\t\t\t\t\tunavailableClasses.add(className);\n+\t\t\t\t}\n \t\t\t\tthrow new ClassNotFoundException(className + \" not found using url \" + url);\n \t\t\t}\n \t\t\tClassParser parser = new ClassParser(is, className);\n@@ -326,6 +349,7 @@ public JavaClass loadClass(String className) throws ClassNotFoundException {\n \t\t\tclassesLoadedCount++;\n \t\t\treturn clazz;\n \t\t} catch (IOException e) {\n+\t\t\tunavailableClasses.add(className);\n \t\t\tthrow new ClassNotFoundException(e.toString());\n \t\t}\n \t}\n@@ -384,10 +408,12 @@ public JavaClass loadClass(Class clazz) throws ClassNotFoundException {\n \n \t/** Clear all entries from the local cache */\n \tpublic void clear() {\n-\t\tif (useSharedCache)\n-\t\t\tsharedCache.clear();\n-\t\telse\n-\t\t\tlocalCache.clear();\n+\t\tif (!ignoreCacheClearRequests) {\n+\t\t\tif (useSharedCache)\n+\t\t\t\tsharedCache.clear();\n+\t\t\telse\n+\t\t\t\tlocalCache.clear();\n+\t\t}\n \t}\n \n }"
  },
  {
    "sha": "044362bd316928dea86e704bb70d66ce8a69c686",
    "filename": "weaver/src/main/java/org/aspectj/weaver/reflect/Java15AnnotationFinder.java",
    "status": "modified",
    "additions": 46,
    "deletions": 21,
    "changes": 67,
    "blob_url": "https://github.com/eclipse/org.aspectj/blob/1d095788f17ccf373b67d537be60023539b45145/weaver/src/main/java/org/aspectj/weaver/reflect/Java15AnnotationFinder.java",
    "raw_url": "https://github.com/eclipse/org.aspectj/raw/1d095788f17ccf373b67d537be60023539b45145/weaver/src/main/java/org/aspectj/weaver/reflect/Java15AnnotationFinder.java",
    "contents_url": "https://api.github.com/repos/eclipse/org.aspectj/contents/weaver/src/main/java/org/aspectj/weaver/reflect/Java15AnnotationFinder.java?ref=1d095788f17ccf373b67d537be60023539b45145",
    "patch": "@@ -1,10 +1,10 @@\n /* *******************************************************************\n  * Copyright (c) 2005, 2017 Contributors.\n- * All rights reserved. \n- * This program and the accompanying materials are made available \n- * under the terms of the Eclipse Public License v1.0 \n- * which accompanies this distribution and is available at \n- * http://eclipse.org/legal/epl-v10.html \n+ * All rights reserved.\n+ * This program and the accompanying materials are made available\n+ * under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution and is available at\n+ * http://eclipse.org/legal/epl-v10.html\n  * ******************************************************************/\n package org.aspectj.weaver.reflect;\n \n@@ -31,7 +31,7 @@\n import org.aspectj.weaver.bcel.BcelWeakClassLoaderReference;\n \n /**\n- * \n+ *\n  * @author Adrian Colyer\n  * @author Andy Clement\n  */\n@@ -41,9 +41,17 @@\n \n \tprivate Repository bcelRepository;\n \tprivate BcelWeakClassLoaderReference classLoaderRef;\n+\n+\tprivate static Repository staticBcelRepository;\n+\tprivate static BcelWeakClassLoaderReference staticClassLoaderRef;\n+\n \tprivate World world;\n \tprivate static boolean useCachingClassLoaderRepository;\n-\t\n+\n+\t//Use single instance of Repository and ClassLoader\n+\tpublic static final boolean useSingleInstances =\n+\t\tSystem.getProperty(\"org.aspectj.apache.bcel.useSingleRepositoryInstance\", \"true\").equalsIgnoreCase(\"true\");\n+\n \tstatic {\n \t\ttry {\n \t\t\tuseCachingClassLoaderRepository = System.getProperty(\"Xset:bcelRepositoryCaching\",\"true\").equalsIgnoreCase(\"true\");\n@@ -57,12 +65,29 @@ public Java15AnnotationFinder() {\n \t}\n \n \tpublic void setClassLoader(ClassLoader aLoader) {\n-\t\tthis.classLoaderRef = new BcelWeakClassLoaderReference(aLoader);\n+\t\t//Set class loader ref\n+\t\tif (useSingleInstances && staticClassLoaderRef == null)\n+\t\t\tstaticClassLoaderRef = new BcelWeakClassLoaderReference(aLoader);\n+\t\telse\n+\t\t\tthis.classLoaderRef = new BcelWeakClassLoaderReference(aLoader);\n+\n+\t\t//Set repository\n \t\tif (useCachingClassLoaderRepository) {\n-\t\t\tthis.bcelRepository = new ClassLoaderRepository(classLoaderRef);\n-\t\t} else {\n-\t\t\tthis.bcelRepository = new NonCachingClassLoaderRepository(classLoaderRef);\n+\t\t\tif (useSingleInstances && staticBcelRepository == null)\n+\t\t\t\tstaticBcelRepository = new ClassLoaderRepository(getClassLoader());\n+\t\t\telse\n+\t\t\t\tthis.bcelRepository = new ClassLoaderRepository(getClassLoader());\n \t\t}\n+\t\telse {\n+\t\t\tif (useSingleInstances && staticBcelRepository == null)\n+\t\t\t\tstaticBcelRepository = new NonCachingClassLoaderRepository(getClassLoader());\n+\t\t\telse\n+\t\t\t\tthis.bcelRepository = new NonCachingClassLoaderRepository(getClassLoader());\n+\t\t}\n+\t}\n+\n+\tprivate Repository getBcelRepository() {\n+\t\treturn useSingleInstances ? staticBcelRepository : bcelRepository;\n \t}\n \n \tpublic void setWorld(World aWorld) {\n@@ -111,7 +136,7 @@ public Object getAnnotationFromMember(ResolvedType annotationType, Member aMembe\n \t}\n \n \tprivate ClassLoader getClassLoader() {\n-\t\treturn classLoaderRef.getClassLoader();\n+\t\treturn useSingleInstances ? staticClassLoaderRef.getClassLoader() : classLoaderRef.getClassLoader();\n \t}\n \n \tpublic AnnotationAJ getAnnotationOfType(UnresolvedType ofType, Member onMember) {\n@@ -144,7 +169,7 @@ public AnnotationAJ getAnnotationOfType(UnresolvedType ofType, Member onMember)\n \t\t\t\tanns = bcelField.getAnnotations();\n \t\t\t}\n \t\t\t// the answer is cached and we don't want to hold on to memory\n-\t\t\tbcelRepository.clear();\n+\t\t\tgetBcelRepository().clear();\n \t\t\t// OPTIMIZE make constant 0 size array for sharing\n \t\t\tif (anns == null)\n \t\t\t\tanns = new org.aspectj.apache.bcel.classfile.annotation.AnnotationGen[0];\n@@ -163,7 +188,7 @@ public AnnotationAJ getAnnotationOfType(UnresolvedType ofType, Member onMember)\n \n \tpublic String getAnnotationDefaultValue(Member onMember) {\n \t\ttry {\n-\t\t\tJavaClass jc = bcelRepository.loadClass(onMember.getDeclaringClass());\n+\t\t\tJavaClass jc = getBcelRepository().loadClass(onMember.getDeclaringClass());\n \t\t\tif (onMember instanceof Method) {\n \t\t\t\torg.aspectj.apache.bcel.classfile.Method bcelMethod = jc.getMethod((Method) onMember);\n \n@@ -199,7 +224,7 @@ public String getAnnotationDefaultValue(Member onMember) {\n \t\t// we can just use reflection.\n \t\tif (!areRuntimeAnnotationsSufficient) {\n \t\t\ttry {\n-\t\t\t\tJavaClass jc = bcelRepository.loadClass(onMember.getDeclaringClass());\n+\t\t\t\tJavaClass jc = getBcelRepository().loadClass(onMember.getDeclaringClass());\n \t\t\t\torg.aspectj.apache.bcel.classfile.annotation.AnnotationGen[] anns = null;\n \t\t\t\tif (onMember instanceof Method) {\n \t\t\t\t\torg.aspectj.apache.bcel.classfile.Method bcelMethod = jc.getMethod((Method) onMember);\n@@ -214,7 +239,7 @@ public String getAnnotationDefaultValue(Member onMember) {\n \t\t\t\t\tanns = bcelField.getAnnotations();\n \t\t\t\t}\n \t\t\t\t// the answer is cached and we don't want to hold on to memory\n-\t\t\t\tbcelRepository.clear();\n+\t\t\t\tgetBcelRepository().clear();\n \t\t\t\tif (anns == null || anns.length == 0) {\n \t\t\t\t\treturn ResolvedType.NONE;\n \t\t\t\t}\n@@ -245,9 +270,9 @@ public String getAnnotationDefaultValue(Member onMember) {\n \t\t// annotations so we bail out to Bcel and then chuck away the JavaClass so that we\n \t\t// don't hog memory.\n \t\ttry {\n-\t\t\tJavaClass jc = bcelRepository.loadClass(forClass);\n+\t\t\tJavaClass jc = getBcelRepository().loadClass(forClass);\n \t\t\torg.aspectj.apache.bcel.classfile.annotation.AnnotationGen[] anns = jc.getAnnotations();\n-\t\t\tbcelRepository.clear();\n+\t\t\tgetBcelRepository().clear();\n \t\t\tif (anns == null) {\n \t\t\t\treturn ResolvedType.NONE;\n \t\t\t} else {\n@@ -275,7 +300,7 @@ public String getAnnotationDefaultValue(Member onMember) {\n \t\t\treturn null;\n \n \t\ttry {\n-\t\t\tJavaClass jc = bcelRepository.loadClass(forMember.getDeclaringClass());\n+\t\t\tJavaClass jc = getBcelRepository().loadClass(forMember.getDeclaringClass());\n \t\t\tLocalVariableTable lvt = null;\n \t\t\tint numVars = 0;\n \t\t\tif (forMember instanceof Method) {\n@@ -319,7 +344,7 @@ public String getAnnotationDefaultValue(Member onMember) {\n \t\t// don't hog\n \t\t// memory.\n \t\ttry {\n-\t\t\tJavaClass jc = bcelRepository.loadClass(onMember.getDeclaringClass());\n+\t\t\tJavaClass jc = getBcelRepository().loadClass(onMember.getDeclaringClass());\n \t\t\torg.aspectj.apache.bcel.classfile.annotation.AnnotationGen[][] anns = null;\n \t\t\tif (onMember instanceof Method) {\n \t\t\t\torg.aspectj.apache.bcel.classfile.Method bcelMethod = jc.getMethod((Method) onMember);\n@@ -339,7 +364,7 @@ public String getAnnotationDefaultValue(Member onMember) {\n \t\t\t\t// anns = null;\n \t\t\t}\n \t\t\t// the answer is cached and we don't want to hold on to memory\n-\t\t\tbcelRepository.clear();\n+\t\t\tgetBcelRepository().clear();\n \t\t\tif (anns == null)\n \t\t\t\treturn NO_PARAMETER_ANNOTATIONS;\n \t\t\tResolvedType[][] result = new ResolvedType[anns.length][];"
  }
]
