[
  {
    "sha": "77ddeae5234427b5985a89b0b0711679cc26454e",
    "filename": "server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/GrammarPreprocessorListenerImpl.java",
    "status": "modified",
    "additions": 15,
    "deletions": 6,
    "changes": 21,
    "blob_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/blob/357e4d1eecaa52d8d39466ff34a6089e59fea8f7/server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/GrammarPreprocessorListenerImpl.java",
    "raw_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/357e4d1eecaa52d8d39466ff34a6089e59fea8f7/server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/GrammarPreprocessorListenerImpl.java",
    "contents_url": "https://api.github.com/repos/eclipse/che-che4z-lsp-for-cobol/contents/server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/GrammarPreprocessorListenerImpl.java?ref=357e4d1eecaa52d8d39466ff34a6089e59fea8f7",
    "patch": "@@ -122,7 +122,7 @@\n   public ExtendedDocument getResult() {\n     if (!replacingClauses.isEmpty()) {\n       String replaceableStmt = peek().toString();\n-      String content = handleReplace(replaceableStmt, \"\");\n+      String content = handleReplace(replaceableStmt);\n       mergeAndUpdateTopTwoElement(content);\n     }\n     nestedMappings.put(\n@@ -273,11 +273,20 @@ public void exitReplaceAreaStart(ReplaceAreaStartContext ctx) {\n     accumulateExcludedStatementShift(ctx.getSourceInterval());\n   }\n \n-  private String handleReplace(String replaceableStmt, String replaceOffStmt) {\n-    String content = applyReplacing(replaceableStmt, replacingClauses);\n-    return content\n-        + PreprocessorStringUtils.getMaskedTextPreservingNewLine(\n-            replaceOffStmt, ProcessingConstants.WS);\n+  @Override\n+  public void enterReplaceOffStatement(ReplaceOffStatementContext ctx) {\n+    push();\n+  }\n+\n+  @Override\n+  public void exitReplaceOffStatement(ReplaceOffStatementContext ctx) {\n+    replacingClauses.clear();\n+    pop();\n+    accumulateExcludedStatementShift(ctx.getSourceInterval());\n+  }\n+\n+  private String handleReplace(String replaceableStmt) {\n+    return applyReplacing(replaceableStmt, replacingClauses);\n   }\n \n   @Override"
  },
  {
    "sha": "46fa796b1eb4bf3a1d069cacc0ab9d19da63319f",
    "filename": "server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/ReplacePreProcessorListener.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/blob/357e4d1eecaa52d8d39466ff34a6089e59fea8f7/server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/ReplacePreProcessorListener.java",
    "raw_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/357e4d1eecaa52d8d39466ff34a6089e59fea8f7/server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/ReplacePreProcessorListener.java",
    "contents_url": "https://api.github.com/repos/eclipse/che-che4z-lsp-for-cobol/contents/server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/ReplacePreProcessorListener.java?ref=357e4d1eecaa52d8d39466ff34a6089e59fea8f7",
    "patch": "@@ -28,7 +28,6 @@\n import org.eclipse.lsp.cobol.core.model.Locality;\n import org.eclipse.lsp.cobol.core.model.ResultWithErrors;\n import org.eclipse.lsp.cobol.core.model.SyntaxError;\n-import org.eclipse.lsp.cobol.core.preprocessor.delegates.util.PreprocessorStringUtils;\n import org.eclipse.lsp.cobol.core.preprocessor.delegates.util.ReplacingService;\n import org.eclipse.lsp.cobol.core.preprocessor.delegates.util.TokenUtils;\n import org.eclipse.lsp4j.Position;\n@@ -158,7 +157,7 @@ public void exitReplaceOffStatement(CobolPreprocessor.ReplaceOffStatementContext\n     String content = applyReplacing(read(), replacingClauses);\n     replacingClauses.clear();\n     mergeAndUpdateTopTwoElement(\n-        content + PreprocessorStringUtils.getMaskedTextPreservingNewLine(replaceOffStmt, \" \"));\n+        content + replaceOffStmt);\n   }\n \n   private String applyReplacing(String rawContent, List<Pair<String, String>> replacePatterns) {"
  },
  {
    "sha": "10a30e7afe71f88ff77a60f2b92357aeb2e69106",
    "filename": "server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/util/PreprocessorStringUtils.java",
    "status": "modified",
    "additions": 0,
    "deletions": 23,
    "changes": 23,
    "blob_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/blob/357e4d1eecaa52d8d39466ff34a6089e59fea8f7/server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/util/PreprocessorStringUtils.java",
    "raw_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/357e4d1eecaa52d8d39466ff34a6089e59fea8f7/server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/util/PreprocessorStringUtils.java",
    "contents_url": "https://api.github.com/repos/eclipse/che-che4z-lsp-for-cobol/contents/server/src/main/java/org/eclipse/lsp/cobol/core/preprocessor/delegates/util/PreprocessorStringUtils.java?ref=357e4d1eecaa52d8d39466ff34a6089e59fea8f7",
    "patch": "@@ -30,27 +30,4 @@\n   public String trimQuotes(@NonNull String line) {\n     return line.replaceAll(\"(?:^[\\\"'])|(?:[\\\"']$)\", \"\");\n   }\n-\n-  /**\n-   * Return a text by replacing all characters by mask char, preserving the relative position of\n-   * each character's previous position. Preserves a new line. A substitution of a partial text\n-   * returned by this method in a document, would not disturb the token mapping for rest of the\n-   * document.\n-   *\n-   * <p>For example, getMaskedTextPreservingNewLine(\"\"abc\\n\" + \"xyz\\n\" + \"klm\"\", \"*\") would return\n-   *\n-   * <p>***\n-   *\n-   * <p>***\n-   *\n-   * <p>***\n-   *\n-   * @param text Reference text\n-   * @param mask text mask\n-   * @return a masked text\n-   */\n-  @NonNull\n-  public String getMaskedTextPreservingNewLine(@NonNull String text, @NonNull String mask) {\n-    return text.replaceAll(\"[^\" + System.lineSeparator() + \"]\", mask);\n-  }\n }"
  },
  {
    "sha": "0fb8af4da6559cc05824ab7393a9afec502b6898",
    "filename": "server/src/test/java/org/eclipse/lsp/cobol/usecases/TestReplaceCompilerDirective.java",
    "status": "modified",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/blob/357e4d1eecaa52d8d39466ff34a6089e59fea8f7/server/src/test/java/org/eclipse/lsp/cobol/usecases/TestReplaceCompilerDirective.java",
    "raw_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/raw/357e4d1eecaa52d8d39466ff34a6089e59fea8f7/server/src/test/java/org/eclipse/lsp/cobol/usecases/TestReplaceCompilerDirective.java",
    "contents_url": "https://api.github.com/repos/eclipse/che-che4z-lsp-for-cobol/contents/server/src/test/java/org/eclipse/lsp/cobol/usecases/TestReplaceCompilerDirective.java?ref=357e4d1eecaa52d8d39466ff34a6089e59fea8f7",
    "patch": "@@ -18,9 +18,12 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import org.eclipse.lsp.cobol.positive.CobolText;\n+import org.eclipse.lsp.cobol.service.CopybookProcessingMode;\n import org.eclipse.lsp.cobol.usecases.engine.UseCaseEngine;\n import org.junit.jupiter.api.Test;\n \n+import java.util.Collections;\n+\n /** Test the REPLACE compiler directive. */\n class TestReplaceCompilerDirective {\n   private static final String BASE =\n@@ -89,6 +92,29 @@\n           + \"           MOVE 0 to {$PAYROLL-WEEK}.\\n\"\n           + \"           MOVE 0 to {$PAYROLL-GROSS-ID}.\";\n \n+  private static final String TEXT5 =\n+      BASE\n+          + \"       REPLACE ==:ABC:== BY ==XYZ==.\\n\"\n+          + \"       01  {$*PARENT}.\\n\"\n+          + \"5      COPY {~REPL} REPLACING ==CPYNAME== BY ==STRUCT1==.\\n\"\n+          + \"       REPLACE LEADING ==TAG== BY ==Payroll==.\\n\"\n+          + \"       01  {$*TAG^PAYROLL}.\\n\"\n+          + \"            02  {$*TAG-WEEK^PAYROLL-WEEK}          PIC S99.\\n\"\n+          + \"            02  {$*TAG-GROSS-PAY^PAYROLL-GROSS-PAY}     PIC S9(5)V99.\\n\"\n+          + \"            02  {$*TAG-HOURS^PAYROLL-HOURS}         PIC S999  OCCURS 1 TO 52 TIMES\\n\"\n+          + \"       DEPENDING ON {$TAG-WEEK^PAYROLL-WEEK} OF {$TAG^PAYROLL}.\\n\"\n+          + \"       REPLACE OFF.\\n\"\n+          + \"8      PROCEDURE DIVISION.\\n\"\n+          + \"\\n\"\n+          + \"           MOVE 0 to {$PAYROLL-WEEK}.\\n\"\n+          + \"           REPLACE ==:TADA:== BY ==Payroll==.\\n\"\n+          + \"           MOVE 0 to {$:TADA:-GROSS-PAY^PAYROLL-GROSS-PAY}.\\n\"\n+          + \"           MOVE 0 to {$XYZ-ID}.\\n\"\n+          + \"           MOVE 0 to {$ACC-ID}.\\n\"\n+          + \"           MOVE 0 to {$TAG-STRUCT1}.\\n\"\n+          + \"       END PROGRAM TESTREPL.\\n\"\n+          + \" \\n\";\n+\n   private static final String REPL =\n       \"       05 {$*:ABC:-ID^XYZ-ID} PIC 9.\\n\" + \"       COPY {~CPYNAME^STRUCT1}.\";\n   private static final String REPL_NAME = \"REPL\";\n@@ -134,4 +160,14 @@ void testReplaceWorksCompletelyInsideACopybook() {\n         ImmutableList.of(new CobolText(REPL_NAME, REPL2), new CobolText(STRUCT1_NAME, STRUCT1)),\n         ImmutableMap.of());\n   }\n+\n+  @Test\n+  void testCorrectVariableDefinitionAfterReplace() {\n+    UseCaseEngine.runTest(\n+            TEXT5,\n+            ImmutableList.of(new CobolText(REPL_NAME, REPL2), new CobolText(STRUCT1_NAME, STRUCT1)),\n+            ImmutableMap.of(),\n+            Collections.emptyList(),\n+            CopybookProcessingMode.ENABLED);\n+  }\n }"
  }
]
