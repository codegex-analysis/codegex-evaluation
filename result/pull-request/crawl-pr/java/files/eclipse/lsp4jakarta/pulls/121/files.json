[
  {
    "sha": "bea6c8c6e917a29ab78c7749bfdcd3cafc17584b",
    "filename": "jakarta-eclipse/org.eclipse.lsp4jakarta.core/src/org/jakarta/jdt/cdi/ManagedBeanConstants.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/eclipse/lsp4jakarta/blob/0e17da243118ff8adeaa4aea316ac5a8791be9eb/jakarta-eclipse/org.eclipse.lsp4jakarta.core/src/org/jakarta/jdt/cdi/ManagedBeanConstants.java",
    "raw_url": "https://github.com/eclipse/lsp4jakarta/raw/0e17da243118ff8adeaa4aea316ac5a8791be9eb/jakarta-eclipse/org.eclipse.lsp4jakarta.core/src/org/jakarta/jdt/cdi/ManagedBeanConstants.java",
    "contents_url": "https://api.github.com/repos/eclipse/lsp4jakarta/contents/jakarta-eclipse/org.eclipse.lsp4jakarta.core/src/org/jakarta/jdt/cdi/ManagedBeanConstants.java?ref=0e17da243118ff8adeaa4aea316ac5a8791be9eb",
    "patch": "@@ -23,11 +23,22 @@\n     /* Annotation Constants */\n     public static final String PRODUCES = \"Produces\";\n     public static final String INJECT = \"Inject\";\n+    public static final String DISPOSES = \"Disposes\";\n+    public static final String OBSERVES = \"Observes\";\n+    public static final String OBSERVES_ASYNC = \"ObservesAsync\";\n+    \n     \n     public static final String DIAGNOSTIC_SOURCE = \"jakarta-cdi\";\n     public static final String DIAGNOSTIC_CODE = \"InvalidManagedBeanAnnotation\";\n     public static final String DIAGNOSTIC_CODE_PRODUCES_INJECT = \"RemoveProducesOrInject\";\n+    \n     public static final String CONSTRUCTOR_DIAGNOSTIC_CODE = \"InvalidManagedBeanConstructor\";\n+    \n+    \n+    public static final String DIAGNOSTIC_CODE_INVALID_INJECT_PARAM = \"RemoveInjectOrConflictedAnnotations\";\n+    \n+    public static final Set<String> INVALID_INJECT_PARAMS = new HashSet<String>(Arrays.asList(DISPOSES, OBSERVES, OBSERVES_ASYNC));\n+    \n     public static final DiagnosticSeverity SEVERITY = DiagnosticSeverity.Error;\n \n     // List can be found in the cdi doc here:"
  },
  {
    "sha": "6252ec779a4c2cdae845cffcae0a5e0b845c3af4",
    "filename": "jakarta-eclipse/org.eclipse.lsp4jakarta.core/src/org/jakarta/jdt/cdi/ManagedBeanDiagnosticsCollector.java",
    "status": "modified",
    "additions": 59,
    "deletions": 16,
    "changes": 75,
    "blob_url": "https://github.com/eclipse/lsp4jakarta/blob/0e17da243118ff8adeaa4aea316ac5a8791be9eb/jakarta-eclipse/org.eclipse.lsp4jakarta.core/src/org/jakarta/jdt/cdi/ManagedBeanDiagnosticsCollector.java",
    "raw_url": "https://github.com/eclipse/lsp4jakarta/raw/0e17da243118ff8adeaa4aea316ac5a8791be9eb/jakarta-eclipse/org.eclipse.lsp4jakarta.core/src/org/jakarta/jdt/cdi/ManagedBeanDiagnosticsCollector.java",
    "contents_url": "https://api.github.com/repos/eclipse/lsp4jakarta/contents/jakarta-eclipse/org.eclipse.lsp4jakarta.core/src/org/jakarta/jdt/cdi/ManagedBeanDiagnosticsCollector.java?ref=0e17da243118ff8adeaa4aea316ac5a8791be9eb",
    "patch": "@@ -14,7 +14,9 @@\n package org.jakarta.jdt.cdi;\n \n import java.util.List;\n+import java.util.Set;\n import java.util.Arrays;\n+import java.util.TreeSet;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -23,6 +25,7 @@\n import org.eclipse.jdt.core.ICompilationUnit;\n import org.eclipse.jdt.core.IField;\n import org.eclipse.jdt.core.IJavaElement;\n+import org.eclipse.jdt.core.ILocalVariable;\n import org.eclipse.jdt.core.IMethod;\n import org.eclipse.jdt.core.ISourceRange;\n import org.eclipse.jdt.core.IType;\n@@ -31,7 +34,6 @@\n import org.eclipse.lsp4j.Range;\n import org.jakarta.jdt.DiagnosticsCollector;\n import org.jakarta.jdt.JDTUtils;\n-import org.jakarta.jdt.persistence.PersistenceConstants;\n import org.jakarta.lsp4e.Activator;\n \n import static org.jakarta.jdt.cdi.ManagedBeanConstants.*;\n@@ -90,7 +92,7 @@ public void collectDiagnostics(ICompilationUnit unit, List<Diagnostic> diagnosti\n                      * any scope other than @Dependent, the container automatically detects the\n                      * problem and treats it as a definition error.\n                      * \n-                     * https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#managed_beans\n+                     * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#managed_beans\n                      */\n                     if (isManagedBean && Flags.isPublic(fieldFlags) && !Flags.isStatic(fieldFlags)\n                             && managedBeanAnnotations.stream()\n@@ -107,26 +109,23 @@ public void collectDiagnostics(ICompilationUnit unit, List<Diagnostic> diagnosti\n                  * go through each field and method to make sure @Produces and @Inject are not\n                  * used together\n                  * \n-                 * see: https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#\n-                 * declaring_producer_field\n-                 * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#\n-                 * declaring_producer_method\n-                 * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#\n-                 * declaring_injected_field\n-                 * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#\n-                 * declaring_initializer\n+                 * see: \n+                 * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#declaring_producer_field\n+                 * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#declaring_producer_method\n+                 * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#declaring_injected_field\n+                 * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#declaring_initializer\n                  * \n                  */\n                 for (IMethod method : type.getMethods()) {\n                     IAnnotation ProducesAnnotation = null;\n-                    IAnnotation InjectClassAnnotation = null;\n+                    IAnnotation InjectAnnotation = null;\n                     for (IAnnotation annotation : method.getAnnotations()) {\n                         if (annotation.getElementName().equals(ManagedBeanConstants.PRODUCES))\n                             ProducesAnnotation = annotation;\n                         if (annotation.getElementName().equals(ManagedBeanConstants.INJECT))\n-                            InjectClassAnnotation = annotation;\n+                            InjectAnnotation = annotation;\n                     }\n-                    if (ProducesAnnotation != null && InjectClassAnnotation != null) {\n+                    if (ProducesAnnotation != null && InjectAnnotation != null) {\n                         // A single method cannot have the same\n                         diagnostics.add(createDiagnostic(method, unit,\n                                 \"@Produces and @Inject annotations cannot be used on the same field or property\",\n@@ -136,14 +135,14 @@ public void collectDiagnostics(ICompilationUnit unit, List<Diagnostic> diagnosti\n \n                 for (IField field : type.getFields()) {\n                     IAnnotation ProducesAnnotation = null;\n-                    IAnnotation InjectClassAnnotation = null;\n+                    IAnnotation InjectAnnotation = null;\n                     for (IAnnotation annotation : field.getAnnotations()) {\n                         if (annotation.getElementName().equals(ManagedBeanConstants.PRODUCES))\n                             ProducesAnnotation = annotation;\n                         if (annotation.getElementName().equals(ManagedBeanConstants.INJECT))\n-                            InjectClassAnnotation = annotation;\n+                            InjectAnnotation = annotation;\n                     }\n-                    if (ProducesAnnotation != null && InjectClassAnnotation != null) {\n+                    if (ProducesAnnotation != null && InjectAnnotation != null) {\n                         // A single field cannot have the same\n                         diagnostics.add(createDiagnostic(field, unit,\n                                 \"@Produces and @Inject annotations cannot be used on the same field or property\",\n@@ -192,9 +191,53 @@ else if (!hasParameterizedInjectConstructor)\n \n                     }\n                 }\n+\n+                /* ========= Inject and Disposes, Observes, ObservesAsync Annotations Checks========= */\n+                /*\n+                 * go through each method to make sure @Inject\n+                 * and @Disposes, @Observes, @ObservesAsync are not used together\n+                 * \n+                 * see: \n+                 * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#declaring_bean_constructor\n+                 * https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html#declaring_initializer\n+                 * \n+                 */\n+                for (IMethod method : type.getMethods()) {\n+                    IAnnotation InjectAnnotation = null;\n+\n+                    for (IAnnotation annotation : method.getAnnotations()) {\n+                        if (annotation.getElementName().equals(ManagedBeanConstants.INJECT))\n+                            InjectAnnotation = annotation;\n+                    }\n+\n+                    if (InjectAnnotation == null)\n+                        continue;\n+\n+                    Set<String> invalidInjectAnnotations = new TreeSet<>();\n+                    for (ILocalVariable param : method.getParameters()) {\n+                        for (IAnnotation annotation : param.getAnnotations()) {\n+                            if (ManagedBeanConstants.INVALID_INJECT_PARAMS.contains(annotation.getElementName())) {\n+                                invalidInjectAnnotations.add(\"@\" + annotation.getElementName());\n+                            }\n+                        }\n+                    }\n+\n+                    if(!invalidInjectAnnotations.isEmpty()) {\n+                        String label = createInvalidInjectLabel(invalidInjectAnnotations);\n+                        diagnostics.add(createDiagnostic(method, unit, label, ManagedBeanConstants.DIAGNOSTIC_CODE_INVALID_INJECT_PARAM));\n+                    }\n+\n+                }\n             }\n+\n         } catch (JavaModelException e) {\n             Activator.logException(\"Cannot calculate diagnostics\", e);\n         }\n     }\n+\n+    private String createInvalidInjectLabel(Set<String> invalidAnnotations) {\n+        String label = \"A bean constructor or a method annotated with @Inject cannot have parameter(s) annotated with \";\n+        label += String.join(\", \", invalidAnnotations);\n+        return label;\n+    }\n }"
  },
  {
    "sha": "259f153a3cfe6dbe3c9a3d1ab17a609f299c307a",
    "filename": "jakarta-eclipse/org.eclipse.lsp4jakarta.tests/projects/jakarta-sample/src/main/java/io/openliberty/sample/jakarta/cdi/InjectAndDisposesObservesObservesAsync.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/eclipse/lsp4jakarta/blob/0e17da243118ff8adeaa4aea316ac5a8791be9eb/jakarta-eclipse/org.eclipse.lsp4jakarta.tests/projects/jakarta-sample/src/main/java/io/openliberty/sample/jakarta/cdi/InjectAndDisposesObservesObservesAsync.java",
    "raw_url": "https://github.com/eclipse/lsp4jakarta/raw/0e17da243118ff8adeaa4aea316ac5a8791be9eb/jakarta-eclipse/org.eclipse.lsp4jakarta.tests/projects/jakarta-sample/src/main/java/io/openliberty/sample/jakarta/cdi/InjectAndDisposesObservesObservesAsync.java",
    "contents_url": "https://api.github.com/repos/eclipse/lsp4jakarta/contents/jakarta-eclipse/org.eclipse.lsp4jakarta.tests/projects/jakarta-sample/src/main/java/io/openliberty/sample/jakarta/cdi/InjectAndDisposesObservesObservesAsync.java?ref=0e17da243118ff8adeaa4aea316ac5a8791be9eb",
    "patch": "@@ -0,0 +1,50 @@\n+package io.openliberty.sample.jakarta.cdi;\n+\n+import jakarta.inject.Inject;\n+import jakarta.enterprise.inject.Disposes;\n+import jakarta.enterprise.event.Observes;\n+import jakarta.enterprise.event.ObservesAsync;\n+\n+public class InjectAndDisposesObservesObservesAsync {\n+    \n+    @Inject\n+    public String greetDisposes(@Disposes String name) {\n+        return \"Hi \" + name + \"!\";\n+    }\n+    \n+    \n+    @Inject\n+    public String greetObserves(@Observes String name) {\n+        return \"Hi \" + name + \"!\";\n+    }\n+    \n+    \n+    @Inject\n+    public String greetObservesAsync(@ObservesAsync String name) {\n+        return \"Hi \" + name + \"!\";\n+    }\n+    \n+    \n+    @Inject\n+    public String greetDisposesObserves(@Disposes String name1, @Observes String name2) {\n+        return \"Hi \" + name1 + \" and \" + name2 + \"!\";\n+    }\n+    \n+    \n+    @Inject\n+    public String greetObservesObservesAsync(@Observes String name1, @ObservesAsync String name2) {\n+        return \"Hi \" + name1 + \" and \" + name2 + \"!\";\n+    }\n+    \n+    \n+    @Inject\n+    public String greetDisposesObservesAsync(@Disposes String name1, @ObservesAsync String name2) {\n+        return \"Hi \" + name1 + \" and \" + name2 + \"!\";\n+    }\n+    \n+    \n+    @Inject\n+    public String greetDisposesObservesObservesAsync(@Disposes String name1, @Observes String name2, @ObservesAsync String name3) {\n+        return \"Hi \" + name1 + \", \" + name2 + \" and \" + name3 + \"!\";\n+    }\n+}"
  },
  {
    "sha": "beb24156d0d8d10aff08a970187671b944f6aa6d",
    "filename": "jakarta-eclipse/org.eclipse.lsp4jakarta.tests/src/main/java/org/eclipse/lsp4jakarta/jdt/cdi/ManagedBeanTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 1,
    "changes": 43,
    "blob_url": "https://github.com/eclipse/lsp4jakarta/blob/0e17da243118ff8adeaa4aea316ac5a8791be9eb/jakarta-eclipse/org.eclipse.lsp4jakarta.tests/src/main/java/org/eclipse/lsp4jakarta/jdt/cdi/ManagedBeanTest.java",
    "raw_url": "https://github.com/eclipse/lsp4jakarta/raw/0e17da243118ff8adeaa4aea316ac5a8791be9eb/jakarta-eclipse/org.eclipse.lsp4jakarta.tests/src/main/java/org/eclipse/lsp4jakarta/jdt/cdi/ManagedBeanTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/lsp4jakarta/contents/jakarta-eclipse/org.eclipse.lsp4jakarta.tests/src/main/java/org/eclipse/lsp4jakarta/jdt/cdi/ManagedBeanTest.java?ref=0e17da243118ff8adeaa4aea316ac5a8791be9eb",
    "patch": "@@ -47,7 +47,7 @@ public void managedBeanAnnotations() throws Exception {\n     }\n     \n     @Test\n-    public void peoducesAndInject() throws Exception {\n+    public void producesAndInject() throws Exception {\n         JDTUtils utils = JDT_UTILS;\n         IJavaProject javaProject = loadJavaProject(\"jakarta-sample\", \"\");\n         IFile javaFile = javaProject.getProject()\n@@ -86,4 +86,45 @@ public void peoducesAndInject() throws Exception {\n         assertJavaCodeAction(codeActionParams2, utils, ca3, ca4);\n     }\n \n+    @Test\n+    public void injectAndDisposesObservesObservesAsync() throws Exception {\n+        JDTUtils utils = JDT_UTILS;\n+        IJavaProject javaProject = loadJavaProject(\"jakarta-sample\", \"\");\n+        IFile javaFile = javaProject.getProject()\n+                .getFile(new Path(\"src/main/java/io/openliberty/sample/jakarta/cdi/InjectAndDisposesObservesObservesAsync.java\"));\n+        String uri = javaFile.getLocation().toFile().toURI().toString();\n+        \n+        JakartaDiagnosticsParams diagnosticsParams = new JakartaDiagnosticsParams();\n+        diagnosticsParams.setUris(Arrays.asList(uri));\n+        \n+        Diagnostic d1 = d(10, 18, 31,\n+                \"A bean constructor or a method annotated with @Inject cannot have parameter(s) annotated with @Disposes\",\n+                DiagnosticSeverity.Error, \"jakarta-cdi\", \"RemoveInjectOrConflictedAnnotations\");\n+        \n+        Diagnostic d2 = d(16, 18, 31,\n+                \"A bean constructor or a method annotated with @Inject cannot have parameter(s) annotated with @Observes\",\n+                DiagnosticSeverity.Error, \"jakarta-cdi\", \"RemoveInjectOrConflictedAnnotations\");\n+        \n+        Diagnostic d3 = d(22, 18, 36,\n+                \"A bean constructor or a method annotated with @Inject cannot have parameter(s) annotated with @ObservesAsync\",\n+                DiagnosticSeverity.Error, \"jakarta-cdi\", \"RemoveInjectOrConflictedAnnotations\");\n+        \n+        Diagnostic d4 = d(28, 18, 39,\n+                \"A bean constructor or a method annotated with @Inject cannot have parameter(s) annotated with @Disposes, @Observes\",\n+                DiagnosticSeverity.Error, \"jakarta-cdi\", \"RemoveInjectOrConflictedAnnotations\");\n+        \n+        Diagnostic d5 = d(34, 18, 44,\n+                \"A bean constructor or a method annotated with @Inject cannot have parameter(s) annotated with @Observes, @ObservesAsync\",\n+                DiagnosticSeverity.Error, \"jakarta-cdi\", \"RemoveInjectOrConflictedAnnotations\");\n+        \n+        Diagnostic d6 = d(40, 18, 44,\n+                \"A bean constructor or a method annotated with @Inject cannot have parameter(s) annotated with @Disposes, @ObservesAsync\",\n+                DiagnosticSeverity.Error, \"jakarta-cdi\", \"RemoveInjectOrConflictedAnnotations\");\n+        \n+        Diagnostic d7 = d(46, 18, 52,\n+                \"A bean constructor or a method annotated with @Inject cannot have parameter(s) annotated with @Disposes, @Observes, @ObservesAsync\",\n+                DiagnosticSeverity.Error, \"jakarta-cdi\", \"RemoveInjectOrConflictedAnnotations\");\n+        \n+        assertJavaDiagnostics(diagnosticsParams, utils, d1, d2, d3, d4, d5, d6, d7);\n+    }\n }"
  }
]
