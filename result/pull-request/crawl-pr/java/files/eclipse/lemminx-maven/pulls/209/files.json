[
  {
    "sha": "1750211c1fd9b15154e5d36a41bf40f665d3d1c7",
    "filename": "lemminx-maven/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse/lemminx-maven/blob/32762a0d735306dbc98f058581fdfb472bf3b9e7/lemminx-maven/pom.xml",
    "raw_url": "https://github.com/eclipse/lemminx-maven/raw/32762a0d735306dbc98f058581fdfb472bf3b9e7/lemminx-maven/pom.xml",
    "contents_url": "https://api.github.com/repos/eclipse/lemminx-maven/contents/lemminx-maven/pom.xml?ref=32762a0d735306dbc98f058581fdfb472bf3b9e7",
    "patch": "@@ -22,7 +22,7 @@\n \t\t<lemminx.maven.indexDirectory>${project.build.directory}/test-index</lemminx.maven.indexDirectory>\r\n \t\t<maven.repo.local>${settings.localRepository}</maven.repo.local>\r\n \t\t<junit-jupiter.version>5.7.0</junit-jupiter.version>\r\n-\t\t<lemminx.version>0.15.0</lemminx.version>\r\n+\t\t<lemminx.version>0.15.1-SNAPSHOT</lemminx.version>\r\n \t</properties>\r\n \r\n \t<dependencies>\r"
  },
  {
    "sha": "dd11cd556077794b62d0abbc099bbb2b53ffc7da",
    "filename": "lemminx-maven/src/main/java/org/eclipse/lemminx/extensions/maven/participants/completion/MavenCompletionParticipant.java",
    "status": "modified",
    "additions": 16,
    "deletions": 8,
    "changes": 24,
    "blob_url": "https://github.com/eclipse/lemminx-maven/blob/32762a0d735306dbc98f058581fdfb472bf3b9e7/lemminx-maven/src/main/java/org/eclipse/lemminx/extensions/maven/participants/completion/MavenCompletionParticipant.java",
    "raw_url": "https://github.com/eclipse/lemminx-maven/raw/32762a0d735306dbc98f058581fdfb472bf3b9e7/lemminx-maven/src/main/java/org/eclipse/lemminx/extensions/maven/participants/completion/MavenCompletionParticipant.java",
    "contents_url": "https://api.github.com/repos/eclipse/lemminx-maven/contents/lemminx-maven/src/main/java/org/eclipse/lemminx/extensions/maven/participants/completion/MavenCompletionParticipant.java?ref=32762a0d735306dbc98f058581fdfb472bf3b9e7",
    "patch": "@@ -93,6 +93,7 @@\n import org.eclipse.lsp4j.Position;\n import org.eclipse.lsp4j.Range;\n import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.jsonrpc.CancelChecker;\n import org.eclipse.lsp4j.jsonrpc.messages.Either;\n \n public class MavenCompletionParticipant extends CompletionParticipantAdapter {\n@@ -129,7 +130,7 @@ public MavenCompletionParticipant(MavenLemminxExtension plugin) {\n \t}\n \n \t@Override\n-\tpublic void onTagOpen(ICompletionRequest request, ICompletionResponse response) throws Exception {\n+\tpublic void onTagOpen(ICompletionRequest request, ICompletionResponse response, CancelChecker cancelChecker) throws Exception {\n \t\tif (!MavenLemminxExtension.match(request.getXMLDocument())) {\n \t\t\treturn;\n \t\t}\n@@ -194,7 +195,7 @@ public void onTagOpen(ICompletionRequest request, ICompletionResponse response)\n \t}\n \n \t@Override\n-\tpublic void onXMLContent(ICompletionRequest request, ICompletionResponse response) throws Exception {\n+\tpublic void onXMLContent(ICompletionRequest request, ICompletionResponse response, CancelChecker cancelChecker) throws Exception {\n \t\tif (!MavenLemminxExtension.match(request.getXMLDocument())) {\n \t\t\treturn;\n \t\t}\n@@ -247,7 +248,7 @@ public void onXMLContent(ICompletionRequest request, ICompletionResponse respons\n \t\t\t\t\t\tisPlugin ? plugin.getLocalRepositorySearcher().searchPluginGroupIds()\n \t\t\t\t\t\t\t\t: plugin.getLocalRepositorySearcher().searchGroupIds(),\n \t\t\t\t\t\tFunction.identity(), Function.identity(), request).forEach(response::addCompletionAttribute);\n-\t\t\t\tinternalCollectRemoteGAVCompletion(request, isPlugin, allArtifactInfos, response);\n+\t\t\t\tinternalCollectRemoteGAVCompletion(request, isPlugin, allArtifactInfos, response, cancelChecker);\n \t\t\t}\n \t\t\tinternalCollectWorkspaceArtifacts(request, allArtifactInfos, groupId, artifactId);\n \t\t\tbreak;\n@@ -265,7 +266,7 @@ public void onXMLContent(ICompletionRequest request, ICompletionResponse respons\n \t\t\t\t\t\t\t\t.filter(gav -> !groupId.isPresent() || gav.getGroupId().equals(groupId.get()))\n \t\t\t\t\t\t\t\t// TODO pass description as documentation\n \t\t\t\t\t\t\t\t.map(this::toArtifactInfo).collect(Collectors.toList()));\n-\t\t\t\tinternalCollectRemoteGAVCompletion(request, isPlugin, allArtifactInfos, response);\n+\t\t\t\tinternalCollectRemoteGAVCompletion(request, isPlugin, allArtifactInfos, response, cancelChecker);\n \t\t\t}\n \t\t\tinternalCollectWorkspaceArtifacts(request, allArtifactInfos, groupId, artifactId);\n \t\t\tbreak;\n@@ -278,7 +279,7 @@ public void onXMLContent(ICompletionRequest request, ICompletionResponse respons\n \t\t\t\t\t\t\t.map(Gav::getVersion).map(DefaultArtifactVersion::new)\n \t\t\t\t\t\t\t.map(version -> toCompletionItem(version.toString(), null, request.getReplaceRange()))\n \t\t\t\t\t\t\t.ifPresent(response::addCompletionItem);\n-\t\t\t\t\tinternalCollectRemoteGAVCompletion(request, isPlugin, allArtifactInfos, response);\n+\t\t\t\t\tinternalCollectRemoteGAVCompletion(request, isPlugin, allArtifactInfos, response, cancelChecker);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tOptional<MavenProject> filesystem = computeFilesystemParent(request);\n@@ -304,14 +305,14 @@ public void onXMLContent(ICompletionRequest request, ICompletionResponse respons\n \t\t\t// TODO completion/resolve to get description for local artifacts\n \t\t\tallArtifactInfos.addAll(plugin.getLocalRepositorySearcher().getLocalArtifactsLastVersion().stream()\n \t\t\t\t\t.map(this::toArtifactInfo).collect(Collectors.toList()));\n-\t\t\tinternalCollectRemoteGAVCompletion(request, false, allArtifactInfos, response);\n+\t\t\tinternalCollectRemoteGAVCompletion(request, false, allArtifactInfos, response, cancelChecker);\n \t\t\tbreak;\n \t\tcase PLUGINS_ELT:\n \t\tcase PLUGIN_ELT:\n \t\t\t// TODO completion/resolve to get description for local artifacts\n \t\t\tallArtifactInfos.addAll(plugin.getLocalRepositorySearcher().getLocalPluginArtifacts().stream()\n \t\t\t\t\t.map(this::toArtifactInfo).collect(Collectors.toList()));\n-\t\t\tinternalCollectRemoteGAVCompletion(request, true, allArtifactInfos, response);\n+\t\t\tinternalCollectRemoteGAVCompletion(request, true, allArtifactInfos, response, cancelChecker);\n \t\t\tbreak;\n \t\tcase PARENT_ELT:\n \t\t\tOptional<MavenProject> filesystem = computeFilesystemParent(request);\n@@ -609,7 +610,7 @@ private CompletionItem toErrorCompletionItem(Throwable e) {\n \t}\n \n \tprivate void internalCollectRemoteGAVCompletion(ICompletionRequest request, boolean onlyPlugins,\n-\t\t\tCollection<ArtifactInfo> artifactInfosCollector, ICompletionResponse nonArtifactCollector) {\n+\t\t\tCollection<ArtifactInfo> artifactInfosCollector, ICompletionResponse nonArtifactCollector, CancelChecker cancelChecker) {\n \t\tDOMElement node = request.getParentElement();\n \t\tDependency artifactToSearch = MavenParseUtils.parseArtifact(node);\n \t\tif (artifactToSearch == null) {\n@@ -629,12 +630,14 @@ private void internalCollectRemoteGAVCompletion(ICompletionRequest request, bool\n \t\tplugin.getIndexSearcher().ifPresent(indexSearcher -> {\n \t\t\ttry {\n \t\t\t\tCompletableFuture.allOf(remoteArtifactRepositories.stream().map(repository -> {\n+\t\t\t\t\tcancelChecker.checkCanceled();\n \t\t\t\t\tfinal CompletionItem updatingItem = new CompletionItem(\"Updating index for \" + repository);\n \t\t\t\t\tupdatingItem.setPreselect(true);\n \t\t\t\t\tupdatingItem.setInsertText(\"\");\n \t\t\t\t\tupdatingItem.setKind(CompletionItemKind.Event);\n \t\t\t\t\tupdateItems.add(updatingItem);\n \t\t\t\t\treturn indexSearcher.getIndexingContext(URI.create(repository)).thenApplyAsync(index -> {\n+\t\t\t\t\t\tcancelChecker.checkCanceled();\n \t\t\t\t\t\tswitch (node.getLocalName()) {\n \t\t\t\t\t\tcase GROUP_ID_ELT:\n \t\t\t\t\t\t\t// TODO: just pass only plugins boolean, and make getGroupId's accept a boolean\n@@ -648,6 +651,7 @@ private void internalCollectRemoteGAVCompletion(ICompletionRequest request, bool\n \t\t\t\t\t\t\t\t\t\t.map(groupId -> toCompletionItem(groupId, null, range))\n \t\t\t\t\t\t\t\t\t\t.forEach(nonArtifactCollector::addCompletionItem);\n \t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcancelChecker.checkCanceled();\n \t\t\t\t\t\t\treturn updatingItem;\n \t\t\t\t\t\tcase ARTIFACT_ID_ELT:\n \t\t\t\t\t\t\tif (onlyPlugins) {\n@@ -656,6 +660,7 @@ private void internalCollectRemoteGAVCompletion(ICompletionRequest request, bool\n \t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\tartifactInfosCollector.addAll(indexSearcher.getArtifacts(artifactToSearch, index));\n \t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcancelChecker.checkCanceled();\n \t\t\t\t\t\t\treturn updatingItem;\n \t\t\t\t\t\tcase VERSION_ELT:\n \t\t\t\t\t\t\tif (onlyPlugins) {\n@@ -667,14 +672,17 @@ private void internalCollectRemoteGAVCompletion(ICompletionRequest request, bool\n \t\t\t\t\t\t\t\t\t\t.map(version -> toCompletionItem(version.toString(), null, range))\n \t\t\t\t\t\t\t\t\t\t.forEach(nonArtifactCollector::addCompletionItem);\n \t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcancelChecker.checkCanceled();\n \t\t\t\t\t\t\treturn updatingItem;\n \t\t\t\t\t\tcase DEPENDENCIES_ELT:\n \t\t\t\t\t\tcase DEPENDENCY_ELT:\n \t\t\t\t\t\t\tartifactInfosCollector.addAll(indexSearcher.getArtifacts(artifactToSearch, index));\n+\t\t\t\t\t\t\tcancelChecker.checkCanceled();\n \t\t\t\t\t\t\treturn updatingItem;\n \t\t\t\t\t\tcase PLUGINS_ELT:\n \t\t\t\t\t\tcase PLUGIN_ELT:\n \t\t\t\t\t\t\tartifactInfosCollector.addAll(indexSearcher.getPluginArtifacts(artifactToSearch, index));\n+\t\t\t\t\t\t\tcancelChecker.checkCanceled();\n \t\t\t\t\t\t\treturn updatingItem;\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn (CompletionItem) null;"
  }
]
