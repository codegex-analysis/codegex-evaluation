[
  {
    "sha": "0e1735252779b840813227a7491fe6086a7773bd",
    "filename": "hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/ConditionalErrorHandler.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/eclipse/hawkbit/blob/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/ConditionalErrorHandler.java",
    "raw_url": "https://github.com/eclipse/hawkbit/raw/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/ConditionalErrorHandler.java",
    "contents_url": "https://api.github.com/repos/eclipse/hawkbit/contents/hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/ConditionalErrorHandler.java?ref=fa04160ad484090d06689666e473f25ca22ea2d6",
    "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.exception;\n+\n+/**\n+ * An handler that will handle a specific event if it can. Otherwise it\n+ * delegates it further in the chain.\n+ */\n+@FunctionalInterface\n+public interface ConditionalErrorHandler<T> {\n+\n+    /**\n+     * Handle the given error if possible, otherwise delegate it to the\n+     * {@link EventHandlerChain}\n+     *\n+     * @param event\n+     *            the event\n+     * @param chain\n+     *            the EventHandlerChain\n+     */\n+    void handle(T event, EventHandlerChain<T> chain);\n+\n+}"
  },
  {
    "sha": "14db8259d2c0a7b70a8400bd5f3240e8c3d031f4",
    "filename": "hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/ErrorHandlerChain.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/eclipse/hawkbit/blob/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/ErrorHandlerChain.java",
    "raw_url": "https://github.com/eclipse/hawkbit/raw/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/ErrorHandlerChain.java",
    "contents_url": "https://api.github.com/repos/eclipse/hawkbit/contents/hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/ErrorHandlerChain.java?ref=fa04160ad484090d06689666e473f25ca22ea2d6",
    "patch": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.exception;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+\n+/**\n+ * Implementation of {@link EventHandlerChain} based on any kind of event to\n+ * iterate over all {@link ConditionalErrorHandler}\n+ */\n+public class ErrorHandlerChain<T> implements EventHandlerChain<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ErrorHandlerChain.class);\n+\n+    private final Iterator<ConditionalErrorHandler<T>> iterator;\n+    private final Optional<Callable<?>> fallback;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param iterator\n+     *            of {@link ConditionalErrorHandler}\n+     */\n+    ErrorHandlerChain(final Iterator<ConditionalErrorHandler<T>> iterator) {\n+        this(iterator, null);\n+    }\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param iterator\n+     *            of {@link ConditionalErrorHandler}\n+     */\n+    ErrorHandlerChain(final Iterator<ConditionalErrorHandler<T>> iterator, final Callable<Void> fallback) {\n+        this.iterator = iterator;\n+        this.fallback = Optional.ofNullable(fallback);\n+    }\n+\n+    /**\n+     * Create an instance of {@link ErrorHandlerChain} by a given list of\n+     * {@link ConditionalErrorHandler}\n+     *\n+     * @param errorHandlers\n+     *            list of {@link ConditionalErrorHandler}\n+     * @return instance of {@link ErrorHandlerChain}\n+     * @param <T>\n+     *            the event type\n+     */\n+    public static <T> ErrorHandlerChain<T> getHandler(final List<ConditionalErrorHandler<T>> errorHandlers) {\n+        return new ErrorHandlerChain<>(errorHandlers.iterator());\n+    }\n+\n+    /**\n+     * Create an instance of {@link ErrorHandlerChain} by a given list of\n+     * {@link ConditionalErrorHandler}\n+     *\n+     * @param errorHandlers\n+     *            list of {@link ConditionalErrorHandler}\n+     * @param callable\n+     *            this callable will be called in case no handler can process the\n+     *            event\n+     * @return instance of {@link ErrorHandlerChain}\n+     * @param <T>\n+     *            the event type\n+     */\n+    public static <T> ErrorHandlerChain<T> getHandler(final List<ConditionalErrorHandler<T>> errorHandlers,\n+            Callable<Void> callable) {\n+        return new ErrorHandlerChain<>(errorHandlers.iterator(), callable);\n+    }\n+\n+    @Override\n+    public void doHandle(T event) {\n+        if (iterator.hasNext()) {\n+            final ConditionalErrorHandler<T> handler = iterator.next();\n+            handler.handle(event, this);\n+        } else {\n+            fallback.ifPresent(callable -> {\n+                try {\n+                    callable.call();\n+                } catch (Exception e) {\n+                    LOGGER.error(\"Could not handle event with fallback mechanism.\", e);\n+                }\n+            });\n+        }\n+    }\n+}"
  },
  {
    "sha": "ff88be095e556cdcdf0bebdb3dedc502f862d61c",
    "filename": "hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/EventHandlerChain.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/eclipse/hawkbit/blob/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/EventHandlerChain.java",
    "raw_url": "https://github.com/eclipse/hawkbit/raw/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/EventHandlerChain.java",
    "contents_url": "https://api.github.com/repos/eclipse/hawkbit/contents/hawkbit-core/src/main/java/org/eclipse/hawkbit/exception/EventHandlerChain.java?ref=fa04160ad484090d06689666e473f25ca22ea2d6",
    "patch": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.exception;\n+\n+/**\n+ * A chain where an event is passed through all handlers until one is found that\n+ * can process the event.\n+ *\n+ * @param <T>\n+ *            generic type of event.\n+ */\n+@FunctionalInterface\n+public interface EventHandlerChain<T> {\n+\n+    /**\n+     * Pass the event and search for a suitable handler\n+     *\n+     * @param event\n+     *            the event\n+     */\n+    void doHandle(final T event);\n+}"
  },
  {
    "sha": "2539f36de6c83b498156946da135ac7548979115",
    "filename": "hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/MyUI.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/eclipse/hawkbit/blob/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/MyUI.java",
    "raw_url": "https://github.com/eclipse/hawkbit/raw/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/MyUI.java",
    "contents_url": "https://api.github.com/repos/eclipse/hawkbit/contents/hawkbit-runtime/hawkbit-update-server/src/main/java/org/eclipse/hawkbit/app/MyUI.java?ref=fa04160ad484090d06689666e473f25ca22ea2d6",
    "patch": "@@ -11,6 +11,7 @@\n import org.eclipse.hawkbit.ui.AbstractHawkbitUI;\n import org.eclipse.hawkbit.ui.ErrorView;\n import org.eclipse.hawkbit.ui.UiProperties;\n+import org.eclipse.hawkbit.ui.components.ConditionalUiErrorHandler;\n import org.eclipse.hawkbit.ui.components.NotificationUnreadButton;\n import org.eclipse.hawkbit.ui.menu.DashboardMenu;\n import org.eclipse.hawkbit.ui.push.EventPushStrategy;\n@@ -26,6 +27,8 @@\n import com.vaadin.spring.annotation.SpringUI;\n import com.vaadin.spring.navigator.SpringViewProvider;\n \n+import java.util.List;\n+\n /**\n  * Example hawkBit UI implementation.\n  * \n@@ -49,9 +52,10 @@\n     MyUI(final EventPushStrategy pushStrategy, final UIEventBus eventBus, final UIEventProvider eventProvider,\n             final SpringViewProvider viewProvider, final ApplicationContext context, final DashboardMenu dashboardMenu,\n             final ErrorView errorview, final NotificationUnreadButton notificationUnreadButton,\n-            final UiProperties uiProperties, final VaadinMessageSource i18n) {\n+            final UiProperties uiProperties, final VaadinMessageSource i18n,\n+            final List<ConditionalUiErrorHandler> uiErrorHandler) {\n         super(pushStrategy, eventBus, eventProvider, viewProvider, context, dashboardMenu, errorview,\n-                notificationUnreadButton, uiProperties, i18n);\n+                notificationUnreadButton, uiProperties, i18n, uiErrorHandler);\n     }\n \n }"
  },
  {
    "sha": "4bc418b28eca823abb76b5d900f81cfd528245fc",
    "filename": "hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/AbstractHawkbitUI.java",
    "status": "modified",
    "additions": 10,
    "deletions": 3,
    "changes": 13,
    "blob_url": "https://github.com/eclipse/hawkbit/blob/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/AbstractHawkbitUI.java",
    "raw_url": "https://github.com/eclipse/hawkbit/raw/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/AbstractHawkbitUI.java",
    "contents_url": "https://api.github.com/repos/eclipse/hawkbit/contents/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/AbstractHawkbitUI.java?ref=fa04160ad484090d06689666e473f25ca22ea2d6",
    "patch": "@@ -8,7 +8,8 @@\n  */\n package org.eclipse.hawkbit.ui;\n \n-import org.eclipse.hawkbit.ui.components.HawkbitUIErrorHandler;\n+import org.eclipse.hawkbit.ui.components.ConditionalUiErrorHandler;\n+import org.eclipse.hawkbit.ui.components.DelegatingConditionalUiErrorHandler;\n import org.eclipse.hawkbit.ui.components.NotificationUnreadButton;\n import org.eclipse.hawkbit.ui.menu.DashboardEvent.PostViewChangeEvent;\n import org.eclipse.hawkbit.ui.menu.DashboardMenu;\n@@ -47,6 +48,8 @@\n import com.vaadin.ui.VerticalLayout;\n import com.vaadin.ui.themes.ValoTheme;\n \n+import java.util.List;\n+\n /**\n  * Vaadin management UI.\n  *\n@@ -76,11 +79,14 @@\n \n     private final transient HawkbitEntityEventListener entityEventsListener;\n \n+    private final DelegatingConditionalUiErrorHandler delegatingUiErrorHandler;\n+    \n     protected AbstractHawkbitUI(final EventPushStrategy pushStrategy, final UIEventBus eventBus,\n             final UIEventProvider eventProvider, final SpringViewProvider viewProvider,\n             final ApplicationContext context, final DashboardMenu dashboardMenu, final ErrorView errorview,\n             final NotificationUnreadButton notificationUnreadButton, final UiProperties uiProperties,\n-            final VaadinMessageSource i18n) {\n+            final VaadinMessageSource i18n,\n+            final List<ConditionalUiErrorHandler> conditionalUiErrorHandler) {\n         this.pushStrategy = pushStrategy;\n         this.viewProvider = viewProvider;\n         this.context = context;\n@@ -90,6 +96,7 @@ protected AbstractHawkbitUI(final EventPushStrategy pushStrategy, final UIEventB\n         this.uiProperties = uiProperties;\n         this.i18n = i18n;\n \n+        this.delegatingUiErrorHandler = new DelegatingConditionalUiErrorHandler(conditionalUiErrorHandler);\n         this.entityEventsListener = new HawkbitEntityEventListener(eventBus, eventProvider, notificationUnreadButton);\n     }\n \n@@ -184,7 +191,7 @@ public void afterViewChange(final ViewChangeEvent event) {\n         setNavigator(navigator);\n \n         if (UI.getCurrent().getErrorHandler() == null) {\n-            UI.getCurrent().setErrorHandler(new HawkbitUIErrorHandler());\n+            UI.getCurrent().setErrorHandler(delegatingUiErrorHandler);\n         }\n \n         LOG.debug(\"Current locale of the application is : {}\", getLocale());"
  },
  {
    "sha": "04d0c180e1fc980ac0022e12275eceebbc8c9f19",
    "filename": "hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/AbstractUIErrorHandler.java",
    "status": "renamed",
    "additions": 50,
    "deletions": 48,
    "changes": 98,
    "blob_url": "https://github.com/eclipse/hawkbit/blob/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/AbstractUIErrorHandler.java",
    "raw_url": "https://github.com/eclipse/hawkbit/raw/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/AbstractUIErrorHandler.java",
    "contents_url": "https://api.github.com/repos/eclipse/hawkbit/contents/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/AbstractUIErrorHandler.java?ref=fa04160ad484090d06689666e473f25ca22ea2d6",
    "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2015 Bosch Software Innovations GmbH and others.\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n  *\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n@@ -8,52 +8,58 @@\n  */\n package org.eclipse.hawkbit.ui.components;\n \n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import javax.validation.ConstraintViolation;\n-import javax.validation.ConstraintViolationException;\n-\n+import com.vaadin.icons.VaadinIcons;\n+import com.vaadin.server.ClientConnector;\n+import com.vaadin.server.DefaultErrorHandler;\n+import com.vaadin.server.ErrorEvent;\n+import com.vaadin.server.Page;\n+import com.vaadin.shared.Connector;\n+import com.vaadin.ui.Component;\n+import com.vaadin.ui.UI;\n import org.eclipse.hawkbit.ui.common.notification.ParallelNotification;\n import org.eclipse.hawkbit.ui.utils.SPUIStyleDefinitions;\n import org.eclipse.hawkbit.ui.utils.SpringContextHolder;\n import org.eclipse.hawkbit.ui.utils.UINotification;\n import org.eclipse.hawkbit.ui.utils.VaadinMessageSource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.core.NestedExceptionUtils;\n import org.springframework.util.StringUtils;\n \n-import com.vaadin.icons.VaadinIcons;\n-import com.vaadin.server.ClientConnector.ConnectorErrorEvent;\n-import com.vaadin.server.DefaultErrorHandler;\n-import com.vaadin.server.ErrorEvent;\n-import com.vaadin.server.Page;\n-import com.vaadin.server.UploadException;\n-import com.vaadin.shared.Connector;\n-import com.vaadin.ui.Component;\n-import com.vaadin.ui.Notification;\n-import com.vaadin.ui.UI;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n- * Default handler for Hawkbit UI.\n+ * Abstract error handler for the UI.\n  */\n-public class HawkbitUIErrorHandler extends DefaultErrorHandler {\n+public abstract class AbstractUIErrorHandler extends DefaultErrorHandler {\n \n     private static final long serialVersionUID = 1L;\n-    private static final Logger LOG = LoggerFactory.getLogger(HawkbitUIErrorHandler.class);\n+    private final transient Logger logger = LoggerFactory.getLogger(this.getClass());\n \n-    @Override\n-    public void error(final ErrorEvent event) {\n-\n-        // filter upload exceptions\n-        if (event.getThrowable() instanceof UploadException) {\n-            return;\n-        }\n+    /**\n+     * Create and print a notification by the root cause of the problem.\n+     * \n+     * @param event the error event\n+     */\n+    protected void showNotification(final ErrorEvent event) {\n+        showNotification(event, buildNotification(event));\n+    }\n \n-        final Notification notification = buildNotification(getRootExceptionFrom(event));\n-        if (event instanceof ConnectorErrorEvent) {\n-            final Connector connector = ((ConnectorErrorEvent) event).getConnector();\n+    /**\n+     * Print the given notification.\n+     * \n+     * @param event\n+     *            the error event\n+     * @param notification\n+     *            the notification\n+     */\n+    protected void showNotification(final ErrorEvent event, final ParallelNotification notification) {\n+        if (event instanceof ClientConnector.ConnectorErrorEvent) {\n+            final Connector connector = ((ClientConnector.ConnectorErrorEvent) event).getConnector();\n             if (connector instanceof UI) {\n                 final UI uiInstance = (UI) connector;\n                 uiInstance.access(() -> notification.show(uiInstance.getPage()));\n@@ -70,20 +76,15 @@ public void error(final ErrorEvent event) {\n         notification.show(Page.getCurrent());\n     }\n \n-    private static Throwable getRootExceptionFrom(final ErrorEvent event) {\n+    protected static Throwable getRootExceptionFrom(final ErrorEvent event) {\n         return getRootCauseOf(event.getThrowable());\n     }\n \n-    private static Throwable getRootCauseOf(final Throwable ex) {\n-\n-        if (ex.getCause() != null) {\n-            return getRootCauseOf(ex.getCause());\n-        }\n-\n-        return ex;\n+    protected static Throwable getRootCauseOf(final Throwable ex) {\n+        return NestedExceptionUtils.getRootCause(ex);\n     }\n \n-    private static Optional<Page> getPageOriginError(final ErrorEvent event) {\n+    protected static Optional<Page> getPageOriginError(final ErrorEvent event) {\n \n         final Component errorOrigin = findAbstractComponent(event);\n \n@@ -95,25 +96,26 @@ private static Throwable getRootCauseOf(final Throwable ex) {\n     }\n \n     /**\n-     * Method to build a notification based on an exception.\n-     * \n-     * @param ex\n-     *            the throwable\n+     * Method to build a notification based on an {@link ErrorEvent}.\n+     *\n+     * @param event\n+     *            the error event\n      * @return a hawkbit error notification message\n      */\n-    protected ParallelNotification buildNotification(final Throwable ex) {\n+    protected ParallelNotification buildNotification(final ErrorEvent event) {\n+        final Throwable rootException = getRootExceptionFrom(event);\n \n-        LOG.error(\"Error in UI: \", ex);\n+        logger.error(\"Error in UI: \", rootException);\n \n-        final String errorMessage = extractMessageFrom(ex);\n+        final String errorMessage = extractMessageFrom(rootException);\n         final VaadinMessageSource i18n = SpringContextHolder.getInstance().getBean(VaadinMessageSource.class);\n \n         return buildErrorNotification(i18n.getMessage(\"caption.error\"), errorMessage);\n     }\n \n     /**\n      * Method to build a error notification based on caption and description.\n-     * \n+     *\n      * @param caption\n      *            Caption\n      * @param description",
    "previous_filename": "hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/HawkbitUIErrorHandler.java"
  },
  {
    "sha": "39102d5cce3d72531bd0c2330c58c4bf83ca424f",
    "filename": "hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/ConditionalUiErrorHandler.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/eclipse/hawkbit/blob/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/ConditionalUiErrorHandler.java",
    "raw_url": "https://github.com/eclipse/hawkbit/raw/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/ConditionalUiErrorHandler.java",
    "contents_url": "https://api.github.com/repos/eclipse/hawkbit/contents/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/ConditionalUiErrorHandler.java?ref=fa04160ad484090d06689666e473f25ca22ea2d6",
    "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.ui.components;\n+\n+import com.vaadin.server.ErrorEvent;\n+import org.eclipse.hawkbit.exception.ConditionalErrorHandler;\n+\n+/**\n+ * Extends the {@link ConditionalErrorHandler} for {@link ErrorEvent} for UI\n+ * purpose.\n+ */\n+public abstract class ConditionalUiErrorHandler extends AbstractUIErrorHandler\n+        implements ConditionalErrorHandler<ErrorEvent> {\n+\n+}"
  },
  {
    "sha": "e388dcd63a9fad8936331410361746e6a39749ff",
    "filename": "hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/DefaultHawkbitUIErrorHandler.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/eclipse/hawkbit/blob/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/DefaultHawkbitUIErrorHandler.java",
    "raw_url": "https://github.com/eclipse/hawkbit/raw/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/DefaultHawkbitUIErrorHandler.java",
    "contents_url": "https://api.github.com/repos/eclipse/hawkbit/contents/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/DefaultHawkbitUIErrorHandler.java?ref=fa04160ad484090d06689666e473f25ca22ea2d6",
    "patch": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.ui.components;\n+\n+import com.vaadin.server.ErrorEvent;\n+import com.vaadin.server.UploadException;\n+\n+/**\n+ * Default handler for the Hawkbit UI.\n+ */\n+public class DefaultHawkbitUIErrorHandler extends AbstractUIErrorHandler {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Override\n+    public void error(final ErrorEvent event) {\n+\n+        // filter upload exceptions\n+        if (event.getThrowable() instanceof UploadException) {\n+            return;\n+        }\n+\n+        showNotification(event);\n+    }\n+\n+}"
  },
  {
    "sha": "f34baf66f5990ca3f7666e36e2bd8e85d3b007ea",
    "filename": "hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/DelegatingConditionalUiErrorHandler.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/eclipse/hawkbit/blob/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/DelegatingConditionalUiErrorHandler.java",
    "raw_url": "https://github.com/eclipse/hawkbit/raw/fa04160ad484090d06689666e473f25ca22ea2d6/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/DelegatingConditionalUiErrorHandler.java",
    "contents_url": "https://api.github.com/repos/eclipse/hawkbit/contents/hawkbit-ui/src/main/java/org/eclipse/hawkbit/ui/components/DelegatingConditionalUiErrorHandler.java?ref=fa04160ad484090d06689666e473f25ca22ea2d6",
    "patch": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2021 Bosch.IO GmbH and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+package org.eclipse.hawkbit.ui.components;\n+\n+import com.vaadin.server.ErrorEvent;\n+import com.vaadin.server.ErrorHandler;\n+import org.eclipse.hawkbit.exception.ConditionalErrorHandler;\n+import org.eclipse.hawkbit.exception.ErrorHandlerChain;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Delegates an error from type {@link ErrorEvent} to any matching\n+ * {@link ConditionalUiErrorHandler}. If no handler can deal with the error, the\n+ * default {@link DefaultHawkbitUIErrorHandler} is used.\n+ */\n+public class DelegatingConditionalUiErrorHandler implements ErrorHandler {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingConditionalUiErrorHandler.class);\n+\n+    private final transient List<ConditionalErrorHandler<ErrorEvent>> errorHandlers;\n+    private final DefaultHawkbitUIErrorHandler defaultErrorHandler;\n+\n+    /**\n+     * Constructor\n+     * \n+     * @param conditionalErrorHandler\n+     *            all existing conditional based error handler\n+     */\n+    public DelegatingConditionalUiErrorHandler(final List<ConditionalUiErrorHandler> conditionalErrorHandler) {\n+        this.errorHandlers = new ArrayList<>(conditionalErrorHandler);\n+        this.defaultErrorHandler = new DefaultHawkbitUIErrorHandler();\n+    }\n+\n+    @Override\n+    public void error(final ErrorEvent event) {\n+        ErrorHandlerChain.getHandler(errorHandlers, () -> {\n+            LOGGER.debug(\"No suitable UI error handler found - will use default one.\");\n+            defaultErrorHandler.error(event);\n+            return null;\n+        }).doHandle(event);\n+    }\n+\n+}"
  }
]
