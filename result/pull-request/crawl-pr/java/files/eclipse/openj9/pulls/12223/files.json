[
  {
    "sha": "81f41c8eab435302b9c8a398928ac06822fe72ef",
    "filename": "runtime/compiler/control/J9Options.cpp",
    "status": "modified",
    "additions": 34,
    "deletions": 9,
    "changes": 43,
    "blob_url": "https://github.com/eclipse/openj9/blob/7cc4312f70b4a511773f77664818cf310929e407/runtime/compiler/control/J9Options.cpp",
    "raw_url": "https://github.com/eclipse/openj9/raw/7cc4312f70b4a511773f77664818cf310929e407/runtime/compiler/control/J9Options.cpp",
    "contents_url": "https://api.github.com/repos/eclipse/openj9/contents/runtime/compiler/control/J9Options.cpp?ref=7cc4312f70b4a511773f77664818cf310929e407",
    "patch": "@@ -1069,29 +1069,42 @@ bool J9::Options::showPID()\n #if defined(J9VM_OPT_JITSERVER)\n static std::string readFileToString(char *fileName)\n    {\n-   I_32 fileId = j9jit_fopen_existing(fileName);\n-   if (fileId == -1)\n+   PORT_ACCESS_FROM_PORT(TR::Compiler->portLib);\n+   FILE *f = fopen(fileName, \"rb\");\n+   if (!f)\n+      {\n+      j9tty_printf(PORTLIB, \"Fatal Error: Unable to open file (%s)\\n\", fileName);\n       return \"\";\n+      }\n    const uint32_t BUFFER_SIZE = 4096; // 4KB\n    const uint32_t MAX_FILE_SIZE_IN_PAGES = 16; // 64KB\n    char buf[BUFFER_SIZE];\n    std::string fileStr(\"\");\n    int readSize = 0;\n    int iter = 0;\n    do {\n-      readSize = j9jit_fread(fileId, buf, BUFFER_SIZE);\n-      fileStr.append(buf, readSize);\n+      readSize = fread(buf, 1, BUFFER_SIZE, f);\n+      fileStr = fileStr.append(buf, readSize);\n       ++iter;\n-   } while ((readSize == BUFFER_SIZE) && (iter < MAX_FILE_SIZE_IN_PAGES));\n-   j9jit_fcloseId(fileId);\n+   } while ((readSize == BUFFER_SIZE) && (iter <= MAX_FILE_SIZE_IN_PAGES));\n+   fclose(f);\n \n-   if (iter < MAX_FILE_SIZE_IN_PAGES)\n+   if (iter <= MAX_FILE_SIZE_IN_PAGES)\n+      {\n       return fileStr;\n+      }\n    else\n+      {\n+      j9tty_printf(\n+         PORTLIB,\n+         \"Fatal Error: File (%s) is too large, max allowed size is %dKB\\n\",\n+         fileName,\n+         BUFFER_SIZE * MAX_FILE_SIZE_IN_PAGES / 1000);\n       return \"\";\n+      }\n    }\n \n-static void JITServerParseCommonOptions(J9JavaVM *vm, TR::CompilationInfo *compInfo)\n+static bool JITServerParseCommonOptions(J9JavaVM *vm, TR::CompilationInfo *compInfo)\n    {\n    const char *xxJITServerPortOption = \"-XX:JITServerPort=\";\n    const char *xxJITServerTimeoutOption = \"-XX:JITServerTimeout=\";\n@@ -1136,6 +1149,10 @@ static void JITServerParseCommonOptions(J9JavaVM *vm, TR::CompilationInfo *compI\n          compInfo->addJITServerSslKey(key);\n          compInfo->addJITServerSslCert(cert);\n          }\n+      else\n+         {\n+         return false;\n+         }\n       }\n \n    if (xxJITServerSSLRootCertsArgIndex >= 0)\n@@ -1145,7 +1162,10 @@ static void JITServerParseCommonOptions(J9JavaVM *vm, TR::CompilationInfo *compI\n       std::string cert = readFileToString(fileName);\n       if (!cert.empty())\n          compInfo->setJITServerSslRootCerts(cert);\n+      else\n+         return false;\n       }\n+   return true;\n    }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n \n@@ -2046,7 +2066,12 @@ J9::Options::fePreProcess(void * base)\n                }\n             }\n          }\n-      JITServerParseCommonOptions(vm, compInfo);\n+      if (!JITServerParseCommonOptions(vm, compInfo))\n+         {\n+         // Could not parse JITServer options successfully\n+         return false;\n+         }\n+\n       if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::CLIENT)\n          {\n          // Generate a random identifier for this JITServer instance."
  }
]
