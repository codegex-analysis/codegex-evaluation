[
  {
    "sha": "b3b1e4dd0efbca651b97427c75bc77d4385ebb2a",
    "filename": "doc/build-instructions/Build_Instructions_V11.md",
    "status": "modified",
    "additions": 18,
    "deletions": 24,
    "changes": 42,
    "blob_url": "https://github.com/eclipse/openj9/blob/2eb823b5f8645b03e558354a6d7f914ae22b3658/doc/build-instructions/Build_Instructions_V11.md",
    "raw_url": "https://github.com/eclipse/openj9/raw/2eb823b5f8645b03e558354a6d7f914ae22b3658/doc/build-instructions/Build_Instructions_V11.md",
    "contents_url": "https://api.github.com/repos/eclipse/openj9/contents/doc/build-instructions/Build_Instructions_V11.md?ref=2eb823b5f8645b03e558354a6d7f914ae22b3658",
    "patch": "@@ -102,7 +102,7 @@ apt-get update \\\n ```\n \n 2. The previous step installed g++-7 and gcc-7 packages, which might be different\n-than the default version installed on your system. Export variables to set the \n+than the default version installed on your system. Export variables to set the\n version used in the build.\n ```\n export CC=gcc-7 CXX=g++-7\n@@ -158,8 +158,8 @@ bash configure --with-boot-jdk=/usr/lib/jvm/adoptojdk-java-11\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl={fetched|system|path_to_library}`\n@@ -293,8 +293,8 @@ where `<cups_include_path>` is the absolute path to CUPS. For example, `/opt/fre\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl={fetched|system|path_to_library}`\n@@ -370,18 +370,12 @@ You must install a number of software dependencies to create a suitable build en\n - [Microsoft Visual Studio 2017]( https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&rel=15), which is the default compiler level used by OpenJDK11; or [Microsoft Visual Studio 2013]( https://go.microsoft.com/fwlink/?LinkId=532495), which is chosen to compile if VS2017 isn't installed.\n - [Freemarker V2.3.8](https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download) - only when building with `--with-cmake=no`\n - [LLVM/Clang](http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe)\n-- [NASM Assembler v2.13.03 or newer](https://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D)\n \n Add the binary path of Clang to the `PATH` environment variable to override the older version of clang integrated in Cygwin. e.g.\n ```\n export PATH=\"/cygdrive/c/Program Files/LLVM/bin:$PATH\" (in Cygwin)\n ```\n \n-Add the path to `nasm.exe` to the `PATH` environment variable to override the older version of NASM installed in Cygwin. e.g.\n-```\n-export PATH=\"/cygdrive/c/Program Files/NASM:$PATH\" (in Cygwin)\n-```\n-\n Update your `LIB` and `INCLUDE` environment variables to provide a path to the Windows debugging tools with the following commands:\n \n ```\n@@ -464,8 +458,8 @@ Note: there is no need to specify --with-toolchain-version for 2017 as it will b\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl=path_to_library`, where `path_to_library` specifies the path to the prebuilt OpenSSL library that you obtained in **2. Get the source**. If you want to include the OpenSSL cryptographic library in the OpenJDK binary, you must also include `--enable-openssl-bundling`.\n@@ -602,8 +596,8 @@ bash configure --with-boot-jdk=<path_to_boot_JDK11>\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl=path_to_library`, where `path_to_library` specifies the path to the prebuilt OpenSSL library that you obtained in **2. Get the source**. If you want to include the OpenSSL cryptographic library in the OpenJDK binary, you must also include `--enable-openssl-bundling`.\n@@ -746,8 +740,8 @@ bash configure --openjdk-target=${OPENJ9_CC_PREFIX} \\\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that uses OpenSSL, you must specify `--with-openssl={system|path_to_library}`\n@@ -939,7 +933,7 @@ Login: `root`\n Password: `riscv`\n \n The following screen messages show up after logging in the system with the root account\n-e.g. \n+e.g.\n ```\n Welcome to the Fedora/RISC-V stage4 disk image\n https://fedoraproject.org/wiki/Architectures/RISC-V\n@@ -986,7 +980,7 @@ Login: `root`\n Password: `riscv`\n \n The following screen messages show up after logging in the system with the root account\n-e.g. \n+e.g.\n ```\n Welcome to the Fedora/RISC-V disk image\n https://fedoraproject.org/wiki/Architectures/RISC-V\n@@ -1017,7 +1011,7 @@ SMP Mon Jan 6 17:31:22 UTC 2020 riscv64 riscv64 riscv64 GNU/Linux\n \n :bulb:\n Given that the root account is rejected in login remotely via SSH, you need\n-to create a user account on `Fedora_Developer_Rawhide` to establish another \n+to create a user account on `Fedora_Developer_Rawhide` to establish another\n session to communicate with the target system as follows:\n \n Create a user account on `Fedora_Developer_Rawhide`:\n@@ -1219,7 +1213,7 @@ Run the following configure command to set up the cross-compilation environment\n export RISCV64=<path_to_gnu_cross_toolchain>  #e.g. /opt/riscv_toolchain_linux\n export PATH=\"$RISCV64/bin:$PATH\"\n \n-bash configure --disable-warnings-as-errors \\ \n+bash configure --disable-warnings-as-errors \\\n                --disable-ddr \\\n                --with-boot-jdk=<path_to_build_JDK_for_cross_compilation> \\   #the `build-JDK` created at step 5\n                --with-build-jdk=<path_to_build_JDK_for_cross_compilation> \\  #the `build-JDK` created at step 5\n@@ -1233,7 +1227,7 @@ For installed cross-toolchain package, run the following configure command to se\n ```\n export RISCV_TOOLCHAIN_TYPE=install  #specify the install type to use the installed cross-toolchain for the cross-compilation\n \n-bash configure --disable-warnings-as-errors \\ \n+bash configure --disable-warnings-as-errors \\\n                --disable-ddr \\\n                --with-boot-jdk=<path_to_build_JDK_for_cross_compilation> \\   #the `build-JDK` created at step 5\n                --with-build-jdk=<path_to_build_JDK_for_cross_compilation> \\  #the `build-JDK` created at step 5\n@@ -1255,8 +1249,8 @@ You can check the version of OpenSSL on your target system as follows:\n e.g.\n ```\n <your_fedora_mount_directory>/usr/bin# file openssl\n-openssl: ELF 64-bit LSB executable, UCB RISC-V, version 1 (SYSV), \n-dynamically linked, interpreter /lib/ld-linux-riscv64-lp64d.so.1, \n+openssl: ELF 64-bit LSB executable, UCB RISC-V, version 1 (SYSV),\n+dynamically linked, interpreter /lib/ld-linux-riscv64-lp64d.so.1,\n for GNU/Linux 4.15.0, BuildID[sha1]=715cfde5a3bdc6ff31b6cc2e449f06df1b3c465a, not stripped\n ```\n "
  },
  {
    "sha": "4de25f6037d33e54694b14df6c08abda081413c7",
    "filename": "doc/build-instructions/Build_Instructions_V16.md",
    "status": "modified",
    "additions": 10,
    "deletions": 16,
    "changes": 26,
    "blob_url": "https://github.com/eclipse/openj9/blob/2eb823b5f8645b03e558354a6d7f914ae22b3658/doc/build-instructions/Build_Instructions_V16.md",
    "raw_url": "https://github.com/eclipse/openj9/raw/2eb823b5f8645b03e558354a6d7f914ae22b3658/doc/build-instructions/Build_Instructions_V16.md",
    "contents_url": "https://api.github.com/repos/eclipse/openj9/contents/doc/build-instructions/Build_Instructions_V16.md?ref=2eb823b5f8645b03e558354a6d7f914ae22b3658",
    "patch": "@@ -149,8 +149,8 @@ bash configure --with-boot-jdk=/usr/lib/jvm/adoptojdk-java-15\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl={fetched|system|path_to_library}`\n@@ -286,8 +286,8 @@ where `<cups_include_path>` is the absolute path to CUPS. For example, `/opt/fre\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl={fetched|system|path_to_library}`\n@@ -363,18 +363,12 @@ You must install a number of software dependencies to create a suitable build en\n - [Microsoft Visual Studio 2019](https://aka.ms/vs/16/release/vs_community.exe), which is the default compiler level used by OpenJDK16.\n - [Freemarker V2.3.8](https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download) - only when building with `--with-cmake=no`\n - [LLVM/Clang](http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe)\n-- [NASM Assembler v2.13.03 or newer](https://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D)\n \n Add the binary path of Clang to the `PATH` environment variable to override the older version of clang integrated in Cygwin. e.g.\n ```\n export PATH=\"/cygdrive/c/Program Files/LLVM/bin:$PATH\" (in Cygwin)\n ```\n \n-Add the path to `nasm.exe` to the `PATH` environment variable to override the older version of NASM installed in Cygwin. e.g.\n-```\n-export PATH=\"/cygdrive/c/Program Files/NASM:$PATH\" (in Cygwin)\n-```\n-\n Update your `LIB` and `INCLUDE` environment variables to provide a path to the Windows debugging tools with the following commands:\n \n ```\n@@ -451,8 +445,8 @@ Note: If you have multiple versions of Visual Studio installed, you can enforce\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl=path_to_library`, where `path_to_library` specifies the path to the prebuilt OpenSSL library that you obtained in **2. Get the source**. If you want to include the OpenSSL cryptographic library in the OpenJDK binary, you must also include `--enable-openssl-bundling`.\n@@ -589,8 +583,8 @@ bash configure --with-boot-jdk=<path_to_boot_JDK15>\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl=path_to_library`, where `path_to_library` specifies the path to the prebuilt OpenSSL library that you obtained in **2. Get the source**. If you want to include the OpenSSL cryptographic library in the OpenJDK binary, you must also include `--enable-openssl-bundling`.\n@@ -732,8 +726,8 @@ bash configure --openjdk-target=${OPENJ9_CC_PREFIX} \\\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that uses OpenSSL, you must specify `--with-openssl={system|path_to_library}`"
  },
  {
    "sha": "bc36f4cd2afd29a5ce90de0e22830aaa8be40fb9",
    "filename": "doc/build-instructions/Build_Instructions_V8.md",
    "status": "modified",
    "additions": 12,
    "deletions": 18,
    "changes": 30,
    "blob_url": "https://github.com/eclipse/openj9/blob/2eb823b5f8645b03e558354a6d7f914ae22b3658/doc/build-instructions/Build_Instructions_V8.md",
    "raw_url": "https://github.com/eclipse/openj9/raw/2eb823b5f8645b03e558354a6d7f914ae22b3658/doc/build-instructions/Build_Instructions_V8.md",
    "contents_url": "https://api.github.com/repos/eclipse/openj9/contents/doc/build-instructions/Build_Instructions_V8.md?ref=2eb823b5f8645b03e558354a6d7f914ae22b3658",
    "patch": "@@ -103,7 +103,7 @@ apt-get update \\\n ```\n \n 2. The previous step installed g++-7 and gcc-7 packages, which might be different\n-than the default version installed on your system. Export variables to set the \n+than the default version installed on your system. Export variables to set the\n version used in the build.\n ```\n export CC=gcc-7 CXX=g++-7\n@@ -159,8 +159,8 @@ bash configure --with-boot-jdk=/usr/lib/jvm/adoptojdk-java-80\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl={fetched|system|path_to_library}`\n@@ -172,7 +172,7 @@ Mixed references is the default to build when no options are specified. _Note th\n   - `path_to_library` uses a custom OpenSSL library that's already built.\n \n   If you want to include the OpenSSL cryptographic library in the OpenJDK binary, you must include `--enable-openssl-bundling`.\n-  \n+\n :pencil: When building using `--with-cmake=no`, you must specify `freemarker.jar` with an absolute path, such as `--with-freemarker-jar=/root/freemarker.jar`.\n \n ### 4. Build\n@@ -290,8 +290,8 @@ where `<cups_include_path>` is the absolute path to CUPS. For example, `/opt/fre\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl={fetched|system|path_to_library}`\n@@ -368,7 +368,6 @@ You must install a number of software dependencies to create a suitable build en\n - [Freemarker V2.3.8](https://sourceforge.net/projects/freemarker/files/freemarker/2.3.8/freemarker-2.3.8.tar.gz/download) - only when building with `--with-cmake=no`\n - [Freetype2 V2.5.3](https://www.freetype.org/)\n - [LLVM/Clang 64bit](http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe) or [LLVM/Clang 32bit](http://releases.llvm.org/7.0.0/LLVM-7.0.0-win32.exe)\n-- [NASM Assembler v2.13.03 or newer](https://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D)\n \n Add the binary path of Clang to the `PATH` environment variable to override the older version of clang integrated in Cygwin. e.g.\n ```\n@@ -377,11 +376,6 @@ or\n export PATH=\"/cygdrive/c/Program Files/LLVM_32/bin:$PATH\" (in Cygwin for 32bit)\n ```\n \n-Add the path to `nasm.exe` to the `PATH` environment variable to override the older version of NASM installed in Cygwin. e.g.\n-```\n-export PATH=\"/cygdrive/c/Program Files/NASM:$PATH\" (in Cygwin)\n-```\n-\n Update your `LIB` and `INCLUDE` environment variables to provide a path to the Windows debugging tools with the following commands:\n \n ```\n@@ -470,8 +464,8 @@ Note: If you have multiple versions of Visual Studio installed, you can enforce\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl=path_to_library`, where `path_to_library` specifies the path to the prebuilt OpenSSL library that you obtained in **2. Get the source**. If you want to include the OpenSSL cryptographic library in the OpenJDK binary, you must also include `--enable-openssl-bundling`.\n@@ -632,8 +626,8 @@ bash configure \\\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that includes OpenSSL, you must specify `--with-openssl=path_to_library`, where `path_to_library` specifies the path to the prebuilt OpenSSL library that you obtained in **2. Get the source**. If you want to include the OpenSSL cryptographic library in the OpenJDK binary, you must also include `--enable-openssl-bundling`.\n@@ -737,8 +731,8 @@ bash configure --with-boot-jdk=<path_to_boot_JDK>\n Mixed references is the default to build when no options are specified. _Note that `--with-cmake=no` cannot be used to build mixed references._ `configure` options include:\n - `--with-mixedrefs` create a mixed references static build (equivalent to `--with-mixedrefs=static`)\n - `--with-mixedrefs=no` create a build supporting compressed references only\n-- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks \n-- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice \n+- `--with-mixedrefs=dynamic` create a mixed references build that uses runtime checks\n+- `--with-mixedrefs=static` (this is the default) create a mixed references build which avoids runtime checks by compiling source twice\n - `--with-noncompressedrefs` create a build supporting non-compressed references only\n \n :pencil: **OpenSSL support:** If you want to build an OpenJDK that uses OpenSSL, you must specify `--with-openssl={system|path_to_library}`"
  }
]
