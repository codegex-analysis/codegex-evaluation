[
  {
    "sha": "edbe94be3e23b94e0085b7a16dcf657c8d3f271e",
    "filename": "core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/ast/SyntaxTreeBuilder.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/ast/SyntaxTreeBuilder.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/ast/SyntaxTreeBuilder.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/ast/SyntaxTreeBuilder.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -11016,6 +11016,11 @@ private Token jj_consume_token(int kind) throws ParseException {\n \t}\n \n \tstatic private final class LookaheadSuccess extends java.lang.Error {\n+\n+\t\t@Override\n+\t\tpublic synchronized Throwable fillInStackTrace() {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n \tfinal private LookaheadSuccess jj_ls = new LookaheadSuccess();"
  },
  {
    "sha": "fd2ef8dad20c58e0327a9e1f95743ffb966212fd",
    "filename": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/ast/constraintcomponents/MinCountConstraintComponent.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/ast/constraintcomponents/MinCountConstraintComponent.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/ast/constraintcomponents/MinCountConstraintComponent.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/ast/constraintcomponents/MinCountConstraintComponent.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -46,6 +46,10 @@ public SourceConstraintComponent getConstraintComponent() {\n \tpublic PlanNode generateTransactionalValidationPlan(ConnectionsGroup connectionsGroup, boolean logValidationPlans,\n \t\t\tPlanNodeProvider overrideTargetNode, Scope scope) {\n \n+\t\tif (minCount <= 0) {\n+\t\t\treturn new EmptyNode();\n+\t\t}\n+\n \t\tPlanNode target = getTargetChain()\n \t\t\t\t.getEffectiveTarget(\"_target\", scope, connectionsGroup.getRdfsSubClassOfReasoner())\n \t\t\t\t.getPlanNode(connectionsGroup, scope, true);"
  },
  {
    "sha": "e311c12b5ea64124368a2174b62f3da23417c3c5",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/AbstractShaclTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/AbstractShaclTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/AbstractShaclTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/AbstractShaclTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -42,7 +42,6 @@\n import org.apache.jena.update.UpdateAction;\n import org.eclipse.rdf4j.IsolationLevel;\n import org.eclipse.rdf4j.IsolationLevels;\n-import org.eclipse.rdf4j.model.BNode;\n import org.eclipse.rdf4j.model.Model;\n import org.eclipse.rdf4j.model.Resource;\n import org.eclipse.rdf4j.model.Statement;"
  },
  {
    "sha": "3939ab5d397bdb55f39a48b11c9d4d21d03dca1c",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/BulkedExternalInnerJoinTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 25,
    "changes": 34,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/BulkedExternalInnerJoinTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/BulkedExternalInnerJoinTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/BulkedExternalInnerJoinTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -1,50 +1,34 @@\n package org.eclipse.rdf4j.sail.shacl;\n \n-import static org.junit.Assert.assertEquals;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import org.eclipse.rdf4j.model.IRI;\n-import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n-import org.eclipse.rdf4j.model.vocabulary.DCAT;\n-import org.eclipse.rdf4j.model.vocabulary.RDFS;\n-import org.eclipse.rdf4j.sail.SailConnection;\n-import org.eclipse.rdf4j.sail.memory.MemoryStore;\n-import org.eclipse.rdf4j.sail.shacl.mock.MockConsumePlanNode;\n-import org.eclipse.rdf4j.sail.shacl.mock.MockInputPlanNode;\n-import org.junit.Test;\n-\n public class BulkedExternalInnerJoinTest {\n \t/*\n \t * @Test public void gapInResultsFromQueryTest() {\n-\t * \n+\t *\n \t * SimpleValueFactory vf = SimpleValueFactory.getInstance(); IRI a = vf.createIRI(\"http://a\"); IRI b =\n \t * vf.createIRI(\"http://b\"); IRI c = vf.createIRI(\"http://c\"); IRI d = vf.createIRI(\"http://d\");\n-\t * \n+\t *\n \t * PlanNode left = new MockInputPlanNode( Arrays.asList(new Tuple(Collections.singletonList(a)), new\n \t * Tuple(Collections.singletonList(b)), new Tuple(Collections.singletonList(c)), new\n \t * Tuple(Collections.singletonList(d))));\n-\t * \n+\t *\n \t * MemoryStore sailRepository = new MemoryStore(); sailRepository.init();\n-\t * \n+\t *\n \t * try (SailConnection connection = sailRepository.getConnection()) { connection.begin(); connection.addStatement(b,\n \t * DCAT.ACCESS_URL, RDFS.RESOURCE); connection.addStatement(d, DCAT.ACCESS_URL, RDFS.SUBPROPERTYOF);\n \t * connection.commit(); } try (SailConnection connection = sailRepository.getConnection()) {\n-\t * \n+\t *\n \t * BulkedExternalInnerJoin bulkedExternalInnerJoin = new BulkedExternalInnerJoin(left, connection,\n \t * \"?a <http://www.w3.org/ns/dcat#accessURL> ?c. \", false, null, \"?a\", \"?c\");\n-\t * \n+\t *\n \t * List<Tuple> tuples = new MockConsumePlanNode(bulkedExternalInnerJoin).asList();\n-\t * \n+\t *\n \t * tuples.forEach(System.out::println);\n-\t * \n+\t *\n \t * assertEquals(\"[http://b, http://www.w3.org/2000/01/rdf-schema#Resource]\",\n \t * Arrays.toString(tuples.get(0).getLine().toArray()));\n \t * assertEquals(\"[http://d, http://www.w3.org/2000/01/rdf-schema#subPropertyOf]\",\n \t * Arrays.toString(tuples.get(1).getLine().toArray()));\n-\t * \n+\t *\n \t * } }\n \t */\n }"
  },
  {
    "sha": "1f3f9430fef714672c6e5bf52f4a5231da9ca1c0",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/DeadlockTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/DeadlockTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/DeadlockTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/DeadlockTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -47,6 +47,8 @@ public void test() throws IOException {\n \t\t\t\t\t\t.execute();\n \t\t\t\tconnection.commit();\n \t\t\t}\n+\n+\t\t\tshaclRepository.shutDown();\n \t\t}\n \t}\n "
  },
  {
    "sha": "c9e5966d24b9665691c2150f2ed71b5f84a3fa5a",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/EqualsJoinTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/EqualsJoinTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/EqualsJoinTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/EqualsJoinTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -11,8 +11,6 @@\n import static junit.framework.TestCase.assertEquals;\n import static junit.framework.TestCase.assertTrue;\n \n-import java.util.ArrayDeque;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;"
  },
  {
    "sha": "33557351d490ce950d84222b44100521668e13fd",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ExtendedFeaturesetTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ExtendedFeaturesetTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ExtendedFeaturesetTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ExtendedFeaturesetTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -35,8 +35,8 @@ public static void afterClass() {\n \t@Test\n \tpublic void testDashIsDisabledByDefault() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"test-cases/class/allSubjects/shacl.ttl\",\n-\t\t\t\tfalse);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"test-cases/class/allSubjects/shacl.ttl\"\n+\t\t);\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \t\t\tconnection.begin();\n@@ -49,8 +49,8 @@ public void testDashIsDisabledByDefault() throws Exception {\n \t@Test(expected = ShaclSailValidationException.class)\n \tpublic void testThatDashCanBeEnabled() throws Throwable {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"test-cases/class/allSubjects/shacl.ttl\",\n-\t\t\t\tfalse);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"test-cases/class/allSubjects/shacl.ttl\"\n+\t\t);\n \t\t((ShaclSail) shaclRepository.getSail()).setDashDataShapes(true);\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n@@ -69,7 +69,7 @@ public void testThatDashCanBeEnabled() throws Throwable {\n \tpublic void testTargetShapeIsDisabledByDefault() throws Exception {\n \n \t\tSailRepository shaclRepository = Utils\n-\t\t\t\t.getInitializedShaclRepository(\"test-cases/class/simpleTargetShape/shacl.ttl\", false);\n+\t\t\t\t.getInitializedShaclRepository(\"test-cases/class/simpleTargetShape/shacl.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \t\t\tconnection.begin();\n@@ -85,7 +85,7 @@ public void testTargetShapeIsDisabledByDefault() throws Exception {\n \tpublic void testThatTargetShapesCanBeEnabled() throws Throwable {\n \n \t\tSailRepository shaclRepository = Utils\n-\t\t\t\t.getInitializedShaclRepository(\"test-cases/class/simpleTargetShape/shacl.ttl\", false);\n+\t\t\t\t.getInitializedShaclRepository(\"test-cases/class/simpleTargetShape/shacl.ttl\");\n \n \t\t((ShaclSail) shaclRepository.getSail()).setDashDataShapes(true);\n \t\t((ShaclSail) shaclRepository.getSail()).setEclipseRdf4jShaclExtensions(true);"
  },
  {
    "sha": "6a23689b38dab6dfbebc7d2037008b1fd11273a4",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/InnerJoinTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/InnerJoinTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/InnerJoinTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/InnerJoinTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -10,8 +10,6 @@\n \n import static junit.framework.TestCase.assertTrue;\n \n-import java.util.ArrayDeque;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;"
  },
  {
    "sha": "9c6ddfa6add24eaab73eea97c75ce7e21de226dd",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/MultithreadedNativeStoreTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/MultithreadedNativeStoreTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/MultithreadedNativeStoreTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/MultithreadedNativeStoreTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -11,7 +11,6 @@\n import org.eclipse.rdf4j.sail.nativerdf.NativeStore;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Ignore;\n \n public class MultithreadedNativeStoreTest extends MultithreadedTest {\n "
  },
  {
    "sha": "99cc912b81a23e650330bdc033dacdb44c0b830c",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/OrderingTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -8,9 +8,6 @@\n \n package org.eclipse.rdf4j.sail.shacl;\n \n-import static junit.framework.TestCase.assertEquals;\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n import org.eclipse.rdf4j.model.ValueFactory;\n import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n "
  },
  {
    "sha": "446a858604054cd605e0f1d36c8dc9cae770eb6c",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/PrepareCommitTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/PrepareCommitTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/PrepareCommitTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/PrepareCommitTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -212,7 +212,7 @@ public void testAutomaticRollback2() throws IOException {\n \n \t@Test\n \tpublic void testAutomaticRollbackRepository() throws IOException {\n-\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"shacl.ttl\", false);\n+\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"shacl.ttl\");\n \n \t\tboolean exception = false;\n \t\tBNode bNode = SimpleValueFactory.getInstance().createBNode();"
  },
  {
    "sha": "85b0c98f567934f13352c2ca1448f2045d9b5d85",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/SerializableTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/SerializableTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/SerializableTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/SerializableTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -35,7 +35,7 @@\n \t@Test\n \tpublic void testMaxCountSnapshot() throws IOException, InterruptedException {\n \t\tfor (int i = 0; i < 10; i++) {\n-\t\t\tSailRepository repo = Utils.getInitializedShaclRepository(\"shaclMax.ttl\", false);\n+\t\t\tSailRepository repo = Utils.getInitializedShaclRepository(\"shaclMax.ttl\");\n \n \t\t\tSail sail = repo.getSail();\n //\t\t\t((ShaclSail) sail).setGlobalLogValidationExecution(true);\n@@ -61,7 +61,7 @@ public void testMaxCountSnapshot() throws IOException, InterruptedException {\n \t@Test\n \tpublic void testMaxCountSerializable() throws IOException, InterruptedException {\n \n-\t\tSailRepository repo = Utils.getInitializedShaclRepository(\"shaclMax.ttl\", false);\n+\t\tSailRepository repo = Utils.getInitializedShaclRepository(\"shaclMax.ttl\");\n \n \t\tmultithreadedMaxCountViolation(IsolationLevels.SERIALIZABLE, repo);\n \n@@ -82,7 +82,7 @@ public void testMaxCountSerializable() throws IOException, InterruptedException\n \t@Test\n \tpublic void testMaxCount2Serializable() throws IOException, InterruptedException {\n \n-\t\tSailRepository repo = Utils.getInitializedShaclRepository(\"shaclMax.ttl\", false);\n+\t\tSailRepository repo = Utils.getInitializedShaclRepository(\"shaclMax.ttl\");\n \n \t\tmultithreadedMaxCount2Violation(IsolationLevels.SERIALIZABLE, repo);\n \n@@ -103,7 +103,7 @@ public void testMaxCount2Serializable() throws IOException, InterruptedException\n \t@Test\n \tpublic void testMaxCount2Snapshot() throws IOException, InterruptedException {\n \n-\t\tSailRepository repo = Utils.getInitializedShaclRepository(\"shaclMax.ttl\", false);\n+\t\tSailRepository repo = Utils.getInitializedShaclRepository(\"shaclMax.ttl\");\n \n \t\tmultithreadedMaxCount2Violation(IsolationLevels.SNAPSHOT, repo);\n \n@@ -125,7 +125,7 @@ public void testMaxCount2Snapshot() throws IOException, InterruptedException {\n \tpublic void serializableParallelValidation() throws Throwable {\n \n \t\tSailRepository repo = Utils\n-\t\t\t\t.getInitializedShaclRepository(\"test-cases/complex/targetShapeAndQualifiedShape/shacl.ttl\", false);\n+\t\t\t\t.getInitializedShaclRepository(\"test-cases/complex/targetShapeAndQualifiedShape/shacl.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) repo.getSail();\n "
  },
  {
    "sha": "a253fd33fcc473be9761b50175fb635bdbec8ccf",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TempTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 11,
    "changes": 22,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TempTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TempTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TempTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -43,7 +43,7 @@ public static void afterClass() {\n \t@Test\n \tpublic void a() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \n@@ -81,7 +81,7 @@ public void a() throws Exception {\n \n \t@Test\n \tpublic void b() throws Exception {\n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \n@@ -110,7 +110,7 @@ public void b() throws Exception {\n \n \t@Test(expected = RepositoryException.class)\n \tpublic void maxCount() throws Exception {\n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclMax.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclMax.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \n@@ -145,7 +145,7 @@ public void maxCount() throws Exception {\n \t@Test\n \tpublic void minCount() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \n@@ -172,7 +172,7 @@ public void minCount() throws Exception {\n \t@Test\n \tpublic void leftOuterJoin() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \n@@ -209,7 +209,7 @@ public void leftOuterJoin() throws Exception {\n \t@Test(expected = RepositoryException.class)\n \tpublic void testShapeWithoutTargetClassRemove() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \n@@ -230,7 +230,7 @@ public void testShapeWithoutTargetClassRemove() throws Exception {\n \t@Test(expected = RepositoryException.class)\n \tpublic void testShapeWithoutTargetClassAdd() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \n@@ -250,7 +250,7 @@ public void testShapeWithoutTargetClassAdd() throws Exception {\n \t@Test\n \tpublic void testShapeWithoutTargetClassValid() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\");\n \n \t\t((ShaclSail) shaclRepository.getSail()).setUndefinedTargetValidatesAllSubjects(true);\n \n@@ -280,7 +280,7 @@ public void testShapeWithoutTargetClassValid() throws Exception {\n \t@Test(expected = ShaclSailValidationException.class)\n \tpublic void testUndefinedTargetClassValidatesAllSubjects() throws Throwable {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \n@@ -335,7 +335,7 @@ public void testUndefinedTargetClassValidatesAllSubjects() throws Throwable {\n \t@Test(expected = ShaclSailValidationException.class)\n \tpublic void testUndefinedTargetClassValidatesAllSubjects2() throws Throwable {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \n@@ -386,7 +386,7 @@ public void testUndefinedTargetClassValidatesAllSubjects2() throws Throwable {\n \t@Test\n \tpublic void testUndefinedTargetClassValidatesAllSubjects3() throws Throwable {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacleNoTargetClass.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n "
  },
  {
    "sha": "5a3047f20c026a966890ebf1a4043548f40bbe22",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TrackAddedStatementsTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TrackAddedStatementsTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TrackAddedStatementsTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TrackAddedStatementsTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -35,7 +35,7 @@\n \t@Test\n \tpublic void testCleanup() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -54,7 +54,7 @@ public void testCleanup() throws Exception {\n \t@Test\n \tpublic void testTransactions() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -77,7 +77,7 @@ public void testTransactions() throws Exception {\n \t@Test\n \tpublic void testRollback() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -108,7 +108,7 @@ public void testRollback() throws Exception {\n \t@Test\n \tpublic void testTrandactionRollbackCleanup() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -138,7 +138,7 @@ public void testTrandactionRollbackCleanup() throws Exception {\n \t@Test\n \tpublic void testValidationFailedCausesRollback() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -166,7 +166,7 @@ public void testValidationFailedCausesRollback() throws Exception {\n \t@Test\n \tpublic void testCleanupOnClose() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shacl.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -189,7 +189,7 @@ public void testCleanupOnClose() throws Exception {\n \t@Test\n \tpublic void testAddRemoveAddRemove() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -219,7 +219,7 @@ public void testAddRemoveAddRemove() throws Exception {\n \t@Test\n \tpublic void testAdd() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -254,7 +254,7 @@ public void testAdd() throws Exception {\n \t@Test\n \tpublic void testAddRemove() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -286,7 +286,7 @@ public void testAddRemove() throws Exception {\n \t@Test\n \tpublic void testRemove() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -316,7 +316,7 @@ public void testRemove() throws Exception {\n \t@Test\n \tpublic void testRemoveWithoutAdding() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -342,7 +342,7 @@ public void testRemoveWithoutAdding() throws Exception {\n \t@Test\n \tpublic void testSingleRemove() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n \n@@ -369,7 +369,7 @@ public void testSingleRemove() throws Exception {\n \t@Test\n \tpublic void testSingleAdd() throws Exception {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"empty.ttl\");\n \t\t((ShaclSail) shaclRepository.getSail()).setIgnoreNoShapesLoadedException(true);\n \t\tshaclRepository.init();\n "
  },
  {
    "sha": "fdf826359589a34a2f6ef7de7c68f93d0edb41f8",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TransactionSettingsTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TransactionSettingsTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TransactionSettingsTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TransactionSettingsTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -8,11 +8,8 @@\n \n package org.eclipse.rdf4j.sail.shacl;\n \n-import org.eclipse.rdf4j.IsolationLevels;\n import org.eclipse.rdf4j.repository.sail.SailRepository;\n import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n-import org.eclipse.rdf4j.sail.NotifyingSailConnection;\n-import org.eclipse.rdf4j.sail.SailConnection;\n import org.eclipse.rdf4j.sail.memory.MemoryStore;\n import org.junit.Test;\n "
  },
  {
    "sha": "b701dbec866355ee6212351091f5cf2648ae2fb6",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TruncatedValidationReportTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TruncatedValidationReportTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TruncatedValidationReportTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/TruncatedValidationReportTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -44,7 +44,7 @@ public static void beforeClass() {\n \n \t@Test\n \tpublic void testTotal() throws IOException {\n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclRepository.getSail();\n \t\tsail.setValidationResultsLimitTotal(10);\n@@ -65,7 +65,7 @@ public void testTotal() throws IOException {\n \t@Test\n \tpublic void testPerConstraint() throws IOException {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclRepository.getSail();\n \t\tsail.setValidationResultsLimitPerConstraint(10);\n@@ -88,7 +88,7 @@ public void testPerConstraint() throws IOException {\n \t@Test\n \tpublic void testPerConstraint2() throws IOException {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclRepository.getSail();\n \t\tsail.setValidationResultsLimitPerConstraint(10);\n@@ -113,7 +113,7 @@ public void testPerConstraint2() throws IOException {\n \t@Test\n \tpublic void testZeroTotal() throws IOException {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclRepository.getSail();\n \t\tsail.setValidationResultsLimitTotal(0);\n@@ -135,7 +135,7 @@ public void testZeroTotal() throws IOException {\n \t@Test\n \tpublic void testZeroPerConstraint() throws IOException {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclRepository.getSail();\n \t\tsail.setValidationResultsLimitPerConstraint(0);\n@@ -157,7 +157,7 @@ public void testZeroPerConstraint() throws IOException {\n \t@Test\n \tpublic void testTotalAndPerConstraint() throws IOException {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclRepository.getSail();\n \t\tsail.setValidationResultsLimitTotal(20);\n@@ -181,7 +181,7 @@ public void testTotalAndPerConstraint() throws IOException {\n \t@Test\n \tpublic void testTotalAndPerConstraint2() throws IOException {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclRepository.getSail();\n \t\tsail.setValidationResultsLimitTotal(20);\n@@ -204,7 +204,7 @@ public void testTotalAndPerConstraint2() throws IOException {\n \t@Test\n \tpublic void testNoLimit() throws IOException {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tValidationReport validationReport = getValidationReport(shaclRepository);\n \t\tshaclRepository.shutDown();\n@@ -226,7 +226,7 @@ public void testNoLimit() throws IOException {\n \t@Test\n \tpublic void testLimitIsEqualToSize() throws IOException {\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclRepository.getSail();\n \t\tsail.setValidationResultsLimitTotal(NUMBER_OF_FAILURES * 2);\n@@ -251,7 +251,7 @@ public void testLimitIsEqualToSize() throws IOException {\n \n \t@Test\n \tpublic void testRevalidate() throws IOException {\n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\", true);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"shaclDatatypeAndMinCount.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclRepository.getSail();\n \t\tsail.setValidationResultsLimitPerConstraint(15);"
  },
  {
    "sha": "2b48f877ef3384ac5d5889fedb2c50b7f5d3e039",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/UnknownShapesTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/UnknownShapesTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/UnknownShapesTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/UnknownShapesTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -38,7 +38,7 @@ public void testPropertyShapes() throws IOException, InterruptedException {\n \t\tMyAppender newAppender = new MyAppender();\n \t\troot.addAppender(newAppender);\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"unknownProperties.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"unknownProperties.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \t\t\tconnection.begin();\n@@ -69,7 +69,7 @@ public void testComplexPath() throws IOException, InterruptedException {\n \t\tMyAppender newAppender = new MyAppender();\n \t\troot.addAppender(newAppender);\n \n-\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"complexPath.ttl\", false);\n+\t\tSailRepository shaclRepository = Utils.getInitializedShaclRepository(\"complexPath.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclRepository.getConnection()) {\n \t\t\tconnection.begin();"
  },
  {
    "sha": "61fad7f9a02ef95e7932d773f2e222a178b27f00",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/Utils.java",
    "status": "modified",
    "additions": 60,
    "deletions": 3,
    "changes": 63,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/Utils.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/Utils.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/Utils.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -8,11 +8,15 @@\n \n package org.eclipse.rdf4j.sail.shacl;\n \n+import java.io.Closeable;\n+import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URL;\n import java.util.UUID;\n \n+import org.apache.commons.io.FileUtils;\n+import org.assertj.core.util.Files;\n import org.eclipse.rdf4j.IsolationLevels;\n import org.eclipse.rdf4j.RDF4JException;\n import org.eclipse.rdf4j.model.IRI;\n@@ -30,6 +34,8 @@\n import org.eclipse.rdf4j.sail.Sail;\n import org.eclipse.rdf4j.sail.SailConnection;\n import org.eclipse.rdf4j.sail.memory.MemoryStore;\n+import org.eclipse.rdf4j.sail.nativerdf.NativeStore;\n+import org.eclipse.rdf4j.sail.shacl.testimp.TestNotifyingSail;\n \n /**\n  * @author Håvard Ottestad\n@@ -76,10 +82,8 @@ public static void loadShapeData(SailRepository repo, URL resourceName)\n \t\t}\n \t}\n \n-\tpublic static SailRepository getInitializedShaclRepository(String shapeData,\n-\t\t\tboolean undefinedTargetClassValidatesAllSubjects) throws IOException {\n+\tpublic static SailRepository getInitializedShaclRepository(String shapeData) throws IOException {\n \t\tShaclSail sail = new ShaclSail(new MemoryStore());\n-\t\tsail.setUndefinedTargetValidatesAllSubjects(undefinedTargetClassValidatesAllSubjects);\n \t\tSailRepository repo = new SailRepository(sail);\n \t\tUtils.loadShapeData(repo, shapeData);\n \t\treturn repo;\n@@ -91,6 +95,30 @@ public static ShaclSail getInitializedShaclSail(String shapeData) throws IOExcep\n \t\treturn sail;\n \t}\n \n+\tpublic static ShaclSail getInitializedShaclSailNativeStore(TemporaryFolder file, String shapeData)\n+\t\t\tthrows IOException {\n+\t\tNativeStore baseSail = getNativeStore(file);\n+\n+\t\tShaclSail sail = new ShaclSail(baseSail);\n+\t\tUtils.loadShapeData(sail, shapeData);\n+\t\treturn sail;\n+\t}\n+\n+\tpublic static Sail getTestNotifyingSailNativeStore(TemporaryFolder file) {\n+\t\tNativeStore baseSail = getNativeStore(file);\n+\n+\t\treturn new TestNotifyingSail(baseSail);\n+\t}\n+\n+\tprivate static NativeStore getNativeStore(TemporaryFolder file) {\n+\t\tNativeStore baseSail = new NativeStore(file.getFile());\n+\t\tbaseSail.setValueCacheSize(100);\n+\t\tbaseSail.setNamespaceCacheSize(100);\n+\t\tbaseSail.setValueIDCacheSize(100);\n+\t\tbaseSail.setNamespaceIDCacheSize(100);\n+\t\treturn baseSail;\n+\t}\n+\n \tpublic static Sail getInitializedShaclSail(NotifyingSail baseSail, String shaclFileName) throws IOException {\n \t\tShaclSail sail = new ShaclSail(baseSail);\n \t\tUtils.loadShapeData(sail, shaclFileName);\n@@ -136,6 +164,10 @@ public static void loadInitialData(SailRepository repo, String resourceName) thr\n \n \t}\n \n+\tpublic static TemporaryFolder newTemporaryFolder() {\n+\t\treturn new TemporaryFolder();\n+\t}\n+\n \tstatic class Ex {\n \n \t\tpublic final static String ns = \"http://example.com/ns#\";\n@@ -154,4 +186,29 @@ public static IRI createIri() {\n \t\t\treturn SimpleValueFactory.getInstance().createIRI(ns + UUID.randomUUID().toString());\n \t\t}\n \t}\n+\n+\tpublic static class TemporaryFolder implements Closeable {\n+\n+\t\tFile file;\n+\n+\t\tpublic TemporaryFolder() {\n+\t\t\tthis.file = Files.newTemporaryFolder();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() {\n+\t\t\ttry {\n+\t\t\t\tif (file != null) {\n+\t\t\t\t\tFileUtils.deleteDirectory(file);\n+\t\t\t\t}\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic File getFile() {\n+\t\t\treturn file;\n+\t\t}\n+\t}\n+\n }"
  },
  {
    "sha": "cc9f7fc4dbb3fae206e3b008521e10ebe61e57f7",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ValidationReportTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ValidationReportTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ValidationReportTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ValidationReportTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -36,7 +36,7 @@\n \n \t@Test\n \tpublic void simpleFirstTest() throws IOException {\n-\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"shacl.ttl\", false);\n+\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"shacl.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclSail.getConnection()) {\n \n@@ -95,7 +95,7 @@ public void simpleFirstTest() throws IOException {\n \n \t@Test\n \tpublic void withoutPathTest() throws IOException {\n-\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"shaclValidateTarget.ttl\", false);\n+\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"shaclValidateTarget.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclSail.getConnection()) {\n \n@@ -147,7 +147,7 @@ public void withoutPathTest() throws IOException {\n \t@Test\n \tpublic void nestedLogicalOrSupport() throws IOException {\n \n-\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"test-cases/or/datatype/shacl.ttl\", false);\n+\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"test-cases/or/datatype/shacl.ttl\");\n \n \t\ttry (SailRepositoryConnection connection = shaclSail.getConnection()) {\n \n@@ -208,7 +208,7 @@ public void nestedLogicalOrSupport() throws IOException {\n \t@Test\n \tpublic void testHasValueIn() throws IOException {\n \n-\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"test-cases/hasValueIn/simple/shacl.ttl\", false);\n+\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"test-cases/hasValueIn/simple/shacl.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclSail.getSail();\n \t\tsail.setDashDataShapes(true);\n@@ -265,7 +265,7 @@ public void testHasValueIn() throws IOException {\n \t@Test\n \tpublic void testHasValue() throws IOException {\n \n-\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"test-cases/hasValue/simple/shacl.ttl\", false);\n+\t\tSailRepository shaclSail = Utils.getInitializedShaclRepository(\"test-cases/hasValue/simple/shacl.ttl\");\n \n \t\tShaclSail sail = (ShaclSail) shaclSail.getSail();\n \t\tsail.setDashDataShapes(true);"
  },
  {
    "sha": "9cd423d0b32a30873fa0a3b3a44b3c6a85d8c66a",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/W3cComplianceTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/W3cComplianceTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/W3cComplianceTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/W3cComplianceTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -1,7 +1,6 @@\n package org.eclipse.rdf4j.sail.shacl;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n@@ -18,15 +17,13 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import org.eclipse.rdf4j.model.BNode;\n import org.eclipse.rdf4j.model.Literal;\n import org.eclipse.rdf4j.model.Model;\n import org.eclipse.rdf4j.model.Resource;\n import org.eclipse.rdf4j.model.Statement;\n import org.eclipse.rdf4j.model.Value;\n import org.eclipse.rdf4j.model.impl.DynamicModel;\n import org.eclipse.rdf4j.model.impl.DynamicModelFactory;\n-import org.eclipse.rdf4j.model.impl.LinkedHashModel;\n import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n import org.eclipse.rdf4j.model.vocabulary.RDF;\n import org.eclipse.rdf4j.model.vocabulary.SHACL;"
  },
  {
    "sha": "b67c8b1dbed7fcbc34ffdecd419efafd02dd25bd",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ast/planNodes/ValidationTupleTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ast/planNodes/ValidationTupleTest.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ast/planNodes/ValidationTupleTest.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/ast/planNodes/ValidationTupleTest.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -9,7 +9,6 @@\n \n import static org.junit.Assert.assertEquals;\n \n-import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Arrays;\n "
  },
  {
    "sha": "356f38013ed69a5d008910a73556d718ad47b7c5",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/AddRemoveBenchmarkEmpty.java",
    "status": "modified",
    "additions": 34,
    "deletions": 9,
    "changes": 43,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/AddRemoveBenchmarkEmpty.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/AddRemoveBenchmarkEmpty.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/AddRemoveBenchmarkEmpty.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -83,18 +83,43 @@ public void setUp() throws InterruptedException {\n \t@Benchmark\n \tpublic void shacl() throws Exception {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"shaclDatatype.ttl\"));\n-\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n-\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\t\tconnection.remove((Resource) null, null, null);\n-\t\t\t\tconnection.add(statements);\n-\t\t\t\tconnection.commit();\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"shaclDatatype.ttl\"));\n+\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\t\tconnection.remove((Resource) null, null, null);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n \t\t\t}\n+\n+\t\t\trepository.shutDown();\n \t\t}\n \n-\t\trepository.shutDown();\n+\t}\n+\n+\t@Benchmark\n+\tpublic void noShacl() throws Exception {\n+\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\tSailRepository repository = new SailRepository(Utils.getTestNotifyingSailNativeStore(temporaryFolder));\n+\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\t\tconnection.remove((Resource) null, null, null);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n "
  },
  {
    "sha": "f66ef2327392e4cb8ddb648b61ac223864e1b94f",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/BulkedBenchmark.java",
    "status": "removed",
    "additions": 0,
    "deletions": 122,
    "changes": 122,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/86159c4f5ecbadcd3413b96e1c0211260634c9e4/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/BulkedBenchmark.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/86159c4f5ecbadcd3413b96e1c0211260634c9e4/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/BulkedBenchmark.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/BulkedBenchmark.java?ref=86159c4f5ecbadcd3413b96e1c0211260634c9e4",
    "patch": "@@ -1,122 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2019 Eclipse RDF4J contributors.\n- * All rights reserved. This program and the accompanying materials\n- * are made available under the terms of the Eclipse Distribution License v1.0\n- * which accompanies this distribution, and is available at\n- * http://www.eclipse.org/org/documents/edl-v10.php.\n- *******************************************************************************/\n-\n-package org.eclipse.rdf4j.sail.shacl.benchmark;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-\n-import org.eclipse.rdf4j.model.IRI;\n-import org.eclipse.rdf4j.model.Resource;\n-import org.eclipse.rdf4j.model.ValueFactory;\n-import org.eclipse.rdf4j.model.vocabulary.RDF;\n-import org.eclipse.rdf4j.model.vocabulary.RDFS;\n-import org.eclipse.rdf4j.query.algebra.evaluation.util.ValueComparator;\n-import org.eclipse.rdf4j.repository.sail.SailRepository;\n-import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n-import org.eclipse.rdf4j.sail.SailConnection;\n-import org.eclipse.rdf4j.sail.memory.MemoryStore;\n-import org.eclipse.rdf4j.sail.shacl.GlobalValidationExecutionLogging;\n-import org.eclipse.rdf4j.sail.shacl.ShaclSailConnection;\n-import org.eclipse.rdf4j.sail.shacl.ast.planNodes.BulkedExternalInnerJoin;\n-import org.eclipse.rdf4j.sail.shacl.ast.planNodes.BulkedExternalLeftOuterJoin;\n-import org.eclipse.rdf4j.sail.shacl.ast.planNodes.PlanNode;\n-import org.eclipse.rdf4j.sail.shacl.ast.planNodes.ValidationTuple;\n-import org.eclipse.rdf4j.sail.shacl.mock.MockConsumePlanNode;\n-import org.eclipse.rdf4j.sail.shacl.mock.MockInputPlanNode;\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Level;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-import org.slf4j.LoggerFactory;\n-\n-import ch.qos.logback.classic.Logger;\n-\n-/**\n- * @author Håvard Ottestad\n- */\n-@State(Scope.Benchmark)\n-@Warmup(iterations = 20)\n-@BenchmarkMode({ Mode.AverageTime })\n-@Fork(value = 1, jvmArgs = { \"-Xms8G\", \"-Xmx8G\" })\n-//@Fork(value = 1, jvmArgs = {\"-Xms8G\", \"-Xmx8G\", \"-XX:StartFlightRecording=delay=15s,duration=120s,filename=recording.jfr,settings=profile\", \"-XX:FlightRecorderOptions=samplethreads=true,stackdepth=1024\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+DebugNonSafepoints\"})\n-@Measurement(iterations = 10)\n-@OutputTimeUnit(TimeUnit.MILLISECONDS)\n-public class BulkedBenchmark {\n-\t{\n-\t\tGlobalValidationExecutionLogging.loggingEnabled = false;\n-\t}\n-\n-\tprivate final static int SIZE = 10000;\n-\tprivate static final String QUERY = \"?a <\" + RDFS.LABEL + \"> ?c\";\n-\n-\tprivate final SailRepository repository = new SailRepository(new MemoryStore());\n-//\tprivate final List<ValidationTuple> subjects;\n-//\n-//\tpublic BulkedBenchmark() {\n-//\n-//\t\trepository.init();\n-//\n-//\t\tList<Resource> subjects = new ArrayList<>();\n-//\n-//\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-//\t\t\tconnection.begin();\n-//\t\t\tValueFactory vf = connection.getValueFactory();\n-//\t\t\tfor (int i = 0; i < SIZE; i++) {\n-//\t\t\t\tIRI iri = vf.createIRI(\"http://example.com/\" + i);\n-//\t\t\t\tconnection.add(iri, RDF.TYPE, RDFS.RESOURCE);\n-//\t\t\t\tconnection.add(iri, RDFS.LABEL, vf.createLiteral(\"label_\" + i));\n-//\t\t\t\tsubjects.add(iri);\n-//\t\t\t}\n-//\n-//\t\t\tconnection.commit();\n-//\t\t}\n-//\n-//\t\tValueComparator valueComparator = new ValueComparator();\n-//\t\tsubjects.sort(valueComparator);\n-//\n-//\t\tthis.subjects = subjects.stream().map(Tuple::new).collect(Collectors.toList());\n-//\n-//\t}\n-//\n-//\t@Setup(Level.Invocation)\n-//\tpublic void setUp() throws InterruptedException {\n-//\t\tLogger root = (Logger) LoggerFactory.getLogger(ShaclSailConnection.class.getName());\n-//\t\troot.setLevel(ch.qos.logback.classic.Level.INFO);\n-//\t\tSystem.gc();\n-//\t\tThread.sleep(100);\n-//\t}\n-//\n-//\t@Benchmark\n-//\tpublic int innerJoin() {\n-//\t\ttry (SailConnection connection = repository.getSail().getConnection()) {\n-//\t\t\tPlanNode bulkedExternalInnerJoin = new BulkedExternalInnerJoin(new MockInputPlanNode(subjects), connection,\n-//\t\t\t\t\tQUERY, false, null, \"?a\", \"?c\");\n-//\t\t\treturn new MockConsumePlanNode(bulkedExternalInnerJoin).asList().size();\n-//\t\t}\n-//\t}\n-//\n-//\t@Benchmark\n-//\tpublic int outerJoin() {\n-//\t\ttry (SailConnection connection = repository.getSail().getConnection()) {\n-//\t\t\tPlanNode bulkedExternalInnerJoin = new BulkedExternalLeftOuterJoin(new MockInputPlanNode(subjects),\n-//\t\t\t\t\tconnection, QUERY, false, null, \"?a\", \"?c\");\n-//\t\t\treturn new MockConsumePlanNode(bulkedExternalInnerJoin).asList().size();\n-//\t\t}\n-//\t}\n-\n-}"
  },
  {
    "sha": "0323f3cb2e965e31861766f6192e6cd28e405f31",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ClassBenchmarkEmpty.java",
    "status": "modified",
    "additions": 46,
    "deletions": 40,
    "changes": 86,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ClassBenchmarkEmpty.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ClassBenchmarkEmpty.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ClassBenchmarkEmpty.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -20,11 +20,9 @@\n import org.eclipse.rdf4j.query.BindingSet;\n import org.eclipse.rdf4j.repository.sail.SailRepository;\n import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n-import org.eclipse.rdf4j.sail.memory.MemoryStore;\n import org.eclipse.rdf4j.sail.shacl.GlobalValidationExecutionLogging;\n import org.eclipse.rdf4j.sail.shacl.ShaclSailConnection;\n import org.eclipse.rdf4j.sail.shacl.Utils;\n-import org.eclipse.rdf4j.sail.shacl.testimp.TestNotifyingSail;\n import org.openjdk.jmh.annotations.Benchmark;\n import org.openjdk.jmh.annotations.BenchmarkMode;\n import org.openjdk.jmh.annotations.Fork;\n@@ -78,74 +76,82 @@ public void setUp() throws InterruptedException {\n \n \t@Benchmark\n \tpublic void shacl() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"shaclClassBenchmark.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"shaclClassBenchmark.ttl\"));\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin();\n-\t\t\tconnection.commit();\n-\t\t}\n-\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin();\n-\t\t\t\tconnection.add(statements);\n \t\t\t\tconnection.commit();\n \t\t\t}\n+\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin();\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\trepository.shutDown();\n \t\t}\n-\t\trepository.shutDown();\n \n \t}\n \n \t@Benchmark\n \tpublic void noShacl() {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(new TestNotifyingSail(new MemoryStore()));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getTestNotifyingSailNativeStore(temporaryFolder));\n \n-\t\trepository.init();\n+\t\t\trepository.init();\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin();\n-\t\t\tconnection.commit();\n-\t\t}\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin();\n-\t\t\t\tconnection.add(statements);\n \t\t\t\tconnection.commit();\n \t\t\t}\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin();\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\trepository.shutDown();\n \t\t}\n-\t\trepository.shutDown();\n \n \t}\n \n \t@Benchmark\n \tpublic void sparqlInsteadOfShacl() {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(new MemoryStore());\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getTestNotifyingSailNativeStore(temporaryFolder));\n \n-\t\trepository.init();\n+\t\t\trepository.init();\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin();\n-\t\t\tconnection.commit();\n-\t\t}\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin();\n-\t\t\t\tconnection.add(statements);\n-\t\t\t\ttry (Stream<BindingSet> stream = connection\n-\t\t\t\t\t\t.prepareTupleQuery(\"select * where {?a a <\" + FOAF.PERSON + \">. ?a <\"\n-\t\t\t\t\t\t\t\t+ FOAF.KNOWS + \"> ?c. FILTER(NOT EXISTS{?c a <\" + FOAF.PERSON + \">})}\")\n-\t\t\t\t\t\t.evaluate()\n-\t\t\t\t\t\t.stream()) {\n-\t\t\t\t\tstream.forEach(System.out::println);\n-\t\t\t\t}\n \t\t\t\tconnection.commit();\n \t\t\t}\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin();\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\ttry (Stream<BindingSet> stream = connection\n+\t\t\t\t\t\t\t.prepareTupleQuery(\"select * where {?a a <\" + FOAF.PERSON + \">. ?a <\"\n+\t\t\t\t\t\t\t\t\t+ FOAF.KNOWS + \"> ?c. FILTER(NOT EXISTS{?c a <\" + FOAF.PERSON + \">})}\")\n+\t\t\t\t\t\t\t.evaluate()\n+\t\t\t\t\t\t\t.stream()) {\n+\t\t\t\t\t\tstream.forEach(System.out::println);\n+\t\t\t\t\t}\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\trepository.shutDown();\n \t\t}\n-\t\trepository.shutDown();\n-\n \t}\n \n }"
  },
  {
    "sha": "3c45ad0d526ee328fda52c060d096aeb09c824a4",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexBenchmark.java",
    "status": "modified",
    "additions": 99,
    "deletions": 75,
    "changes": 174,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexBenchmark.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexBenchmark.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexBenchmark.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -86,33 +86,39 @@ public void setUp() throws InterruptedException {\n \n \t@Benchmark\n \tpublic void shaclParallelCache() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n-\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n-\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(true);\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n+\t\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n+\t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(true);\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.prepareUpdate(transaction1).execute();\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.prepareUpdate(transaction1).execute();\n+\t\t\t\tconnection.commit();\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.prepareUpdate(transaction2).execute();\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.prepareUpdate(transaction2).execute();\n+\t\t\t\tconnection.commit();\n \n-\t\t}\n+\t\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n \n \t@Benchmark\n \tpublic void shaclNoTransactions() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n-\t\trepository.shutDown();\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n \n@@ -151,129 +157,147 @@ public void shaclPropertiesSwitch() {\n \n \t@Benchmark\n \tpublic void shaclEmptyTransactions() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n-\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n+\t\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.commit();\n \n-\t\t}\n+\t\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n \n \t@Benchmark\n \tpublic void shaclNothingToValidateTransactions() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n-\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n+\t\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.add(connection.getValueFactory().createBNode(), RDFS.LABEL,\n-\t\t\t\t\tconnection.getValueFactory().createLiteral(\"\"));\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.add(connection.getValueFactory().createBNode(), RDFS.LABEL,\n+\t\t\t\t\t\tconnection.getValueFactory().createLiteral(\"\"));\n+\t\t\t\tconnection.commit();\n \n-\t\t}\n+\t\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n \n \t@Benchmark\n \tpublic void shaclParallelCacheSingleTransactionNoIsolation() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n-\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n-\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(true);\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n+\t\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n+\t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(true);\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \n-\t\t\tconnection.begin(IsolationLevels.NONE);\n-\t\t\tconnection.prepareUpdate(transaction1).execute();\n+\t\t\t\tconnection.begin(IsolationLevels.NONE);\n+\t\t\t\tconnection.prepareUpdate(transaction1).execute();\n \n-\t\t\tconnection.prepareUpdate(transaction2).execute();\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.prepareUpdate(transaction2).execute();\n+\t\t\t\tconnection.commit();\n \n-\t\t}\n+\t\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n \n \t@Benchmark\n \tpublic void shaclParallel() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n-\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n-\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(false);\n+\t\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n+\t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(false);\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.prepareUpdate(transaction1).execute();\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.prepareUpdate(transaction1).execute();\n+\t\t\t\tconnection.commit();\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.prepareUpdate(transaction2).execute();\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.prepareUpdate(transaction2).execute();\n+\t\t\t\tconnection.commit();\n \n-\t\t}\n+\t\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n \n \t@Benchmark\n \tpublic void shaclCache() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n-\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n+\t\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.prepareUpdate(transaction1).execute();\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.prepareUpdate(transaction1).execute();\n+\t\t\t\tconnection.commit();\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.prepareUpdate(transaction2).execute();\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.prepareUpdate(transaction2).execute();\n+\t\t\t\tconnection.commit();\n \n-\t\t}\n+\t\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n \n \t@Benchmark\n \tpublic void shacl() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n-\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n-\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(false);\n+\t\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n+\t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(false);\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.prepareUpdate(transaction1).execute();\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.prepareUpdate(transaction1).execute();\n+\t\t\t\tconnection.commit();\n \n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.prepareUpdate(transaction2).execute();\n-\t\t\tconnection.commit();\n+\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\tconnection.prepareUpdate(transaction2).execute();\n+\t\t\t\tconnection.commit();\n \n-\t\t}\n+\t\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n "
  },
  {
    "sha": "74ad0e11c4a8574a64a7b6c33003153b2190ec8e",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexLargeBenchmark.java",
    "status": "modified",
    "additions": 68,
    "deletions": 130,
    "changes": 198,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexLargeBenchmark.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexLargeBenchmark.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexLargeBenchmark.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -9,22 +9,18 @@\n package org.eclipse.rdf4j.sail.shacl.benchmark;\n \n import java.io.BufferedInputStream;\n-import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n-import org.assertj.core.util.Files;\n import org.eclipse.rdf4j.IsolationLevels;\n import org.eclipse.rdf4j.model.impl.SimpleValueFactory;\n import org.eclipse.rdf4j.model.vocabulary.RDFS;\n import org.eclipse.rdf4j.repository.sail.SailRepository;\n import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n import org.eclipse.rdf4j.rio.RDFFormat;\n-import org.eclipse.rdf4j.sail.memory.MemoryStore;\n-import org.eclipse.rdf4j.sail.nativerdf.NativeStore;\n import org.eclipse.rdf4j.sail.shacl.GlobalValidationExecutionLogging;\n import org.eclipse.rdf4j.sail.shacl.ShaclSail;\n import org.eclipse.rdf4j.sail.shacl.ShaclSailConnection;\n@@ -60,29 +56,29 @@\n \t\tGlobalValidationExecutionLogging.loggingEnabled = false;\n \t}\n \n-\tprivate static String transaction1;\n-\tprivate static String transaction2;\n-\tprivate static String transaction3;\n-\tprivate static String transaction4;\n+\tprivate static final String transaction1;\n+\tprivate static final String transaction2;\n+\tprivate static final String transaction3;\n+\tprivate static final String transaction4;\n \n \tstatic {\n \t\ttry {\n \t\t\ttransaction1 = IOUtils.toString(\n \t\t\t\t\tComplexLargeBenchmark.class.getClassLoader()\n \t\t\t\t\t\t\t.getResourceAsStream(\"complexBenchmark/transaction1.qr\"),\n-\t\t\t\t\t\"utf-8\");\n+\t\t\t\t\tStandardCharsets.UTF_8);\n \t\t\ttransaction2 = IOUtils.toString(\n \t\t\t\t\tComplexLargeBenchmark.class.getClassLoader()\n \t\t\t\t\t\t\t.getResourceAsStream(\"complexBenchmark/transaction2.qr\"),\n-\t\t\t\t\t\"utf-8\");\n+\t\t\t\t\tStandardCharsets.UTF_8);\n \t\t\ttransaction3 = IOUtils.toString(\n \t\t\t\t\tComplexLargeBenchmark.class.getClassLoader()\n \t\t\t\t\t\t\t.getResourceAsStream(\"complexBenchmark/transaction3.qr\"),\n-\t\t\t\t\t\"utf-8\");\n+\t\t\t\t\tStandardCharsets.UTF_8);\n \t\t\ttransaction4 = IOUtils.toString(\n \t\t\t\t\tComplexLargeBenchmark.class.getClassLoader()\n \t\t\t\t\t\t\t.getResourceAsStream(\"complexBenchmark/transaction4.qr\"),\n-\t\t\t\t\t\"utf-8\");\n+\t\t\t\t\tStandardCharsets.UTF_8);\n \n \t\t} catch (IOException e) {\n \t\t\tthrow new RuntimeException();\n@@ -92,14 +88,16 @@\n \tprivate SailRepository repository;\n \n \t@Setup(Level.Invocation)\n-\tpublic void setUp() throws InterruptedException {\n+\tpublic void setUp() throws InterruptedException, IOException {\n \n \t\t((Logger) LoggerFactory.getLogger(ShaclSailConnection.class.getName()))\n \t\t\t\t.setLevel(ch.qos.logback.classic.Level.ERROR);\n \t\t((Logger) LoggerFactory.getLogger(ShaclSail.class.getName())).setLevel(ch.qos.logback.classic.Level.ERROR);\n \n-\t\ttry {\n-\t\t\trepository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\trepository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n \t\t\t((ShaclSail) repository.getSail()).disableValidation();\n \n@@ -112,8 +110,6 @@ public void setUp() throws InterruptedException {\n \t\t\t}\n \n \t\t\t((ShaclSail) repository.getSail()).enableValidation();\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n \n \t\tSystem.gc();\n@@ -223,10 +219,11 @@ public void shaclTwoTransactionPreloaded() {\n \t}\n \n \t@Benchmark\n-\tpublic void noPreloading() {\n+\tpublic void noPreloading() throws IOException {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n \t\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n \t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(true);\n@@ -242,17 +239,16 @@ public void noPreloading() {\n \n \t\t\trepository.shutDown();\n \n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n \n \t}\n \n \t@Benchmark\n-\tpublic void noPreloadingParallel() {\n+\tpublic void noPreloadingParallel() throws IOException {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n \t\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n \t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(true);\n@@ -268,17 +264,16 @@ public void noPreloadingParallel() {\n \n \t\t\trepository.shutDown();\n \n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n \n \t}\n \n \t@Benchmark\n-\tpublic void noPreloadingParallelNoCache() {\n+\tpublic void noPreloadingParallelNoCache() throws IOException {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n \t\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n \t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(false);\n@@ -294,17 +289,16 @@ public void noPreloadingParallelNoCache() {\n \n \t\t\trepository.shutDown();\n \n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n-\n \t}\n \n \t@Benchmark\n-\tpublic void noPreloadingNonEmpty() {\n+\tpublic void noPreloadingNonEmpty() throws IOException {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \t\t\t((ShaclSail) repository.getSail()).disableValidation();\n \t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.NONE);\n@@ -327,18 +321,17 @@ public void noPreloadingNonEmpty() {\n \t\t\t}\n \n \t\t\trepository.shutDown();\n-\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n \n \t}\n \n \t@Benchmark\n-\tpublic void noPreloadingNonEmptyParallel() {\n+\tpublic void noPreloadingNonEmptyParallel() throws IOException {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \t\t\t((ShaclSail) repository.getSail()).disableValidation();\n \t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.NONE);\n@@ -362,17 +355,16 @@ public void noPreloadingNonEmptyParallel() {\n \n \t\t\trepository.shutDown();\n \n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n-\n \t}\n \n \t@Benchmark\n-\tpublic void noPreloadingRevalidate() {\n+\tpublic void noPreloadingRevalidate() throws IOException {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n \t\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n \t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(true);\n@@ -396,18 +388,17 @@ public void noPreloadingRevalidate() {\n \t\t\t}\n \n \t\t\trepository.shutDown();\n-\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n \n \t}\n \n \t@Benchmark\n-\tpublic void noPreloadingRevalidateLowMem() {\n+\tpublic void noPreloadingRevalidateLowMem() throws IOException {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n \t\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n \t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(false);\n@@ -431,18 +422,16 @@ public void noPreloadingRevalidateLowMem() {\n \t\t\t}\n \n \t\t\trepository.shutDown();\n-\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n \n \t}\n \n \t@Benchmark\n-\tpublic void noPreloadingBulk() {\n+\tpublic void noPreloadingBulk() throws IOException {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n \t\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n \t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(true);\n@@ -457,17 +446,16 @@ public void noPreloadingBulk() {\n \n \t\t\trepository.shutDown();\n \n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n-\n \t}\n \n \t@Benchmark\n-\tpublic void noPreloadingBulkParallelCached() {\n+\tpublic void noPreloadingBulkParallelCached() throws IOException {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n \t\t\t((ShaclSail) repository.getSail()).setParallelValidation(false);\n \t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(false);\n@@ -484,51 +472,6 @@ public void noPreloadingBulkParallelCached() {\n \t\t\t}\n \n \t\t\trepository.shutDown();\n-\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\n-\t}\n-\n-\t@Benchmark\n-\tpublic void noPreloadingRevalidateNativeStore() throws IOException {\n-\t\tFile file = Files.newTemporaryFolder();\n-\n-\t\ttry {\n-\n-\t\t\tSailRepository repository = new SailRepository(\n-\t\t\t\t\tUtils.getInitializedShaclSail(new NativeStore(file, \"spoc,ospc,psoc\"),\n-\t\t\t\t\t\t\t\"complexBenchmark/shacl.ttl\"));\n-\n-\t\t\t((ShaclSail) repository.getSail()).setParallelValidation(true);\n-\t\t\t((ShaclSail) repository.getSail()).setCacheSelectNodes(true);\n-\n-\t\t\t((ShaclSail) repository.getSail()).disableValidation();\n-\n-\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\t\tconnection.begin(IsolationLevels.NONE);\n-\t\t\t\ttry (InputStream resourceAsStream = getData()) {\n-\t\t\t\t\tconnection.add(resourceAsStream, \"\", RDFFormat.TURTLE);\n-\t\t\t\t}\n-\t\t\t\tconnection.commit();\n-\t\t\t}\n-\n-\t\t\t((ShaclSail) repository.getSail()).enableValidation();\n-\n-\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\t\tconnection.begin(IsolationLevels.NONE);\n-\t\t\t\t((ShaclSailConnection) connection.getSailConnection()).revalidate();\n-\t\t\t\tconnection.commit();\n-\t\t\t}\n-\n-\t\t\trepository.shutDown();\n-\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t} finally {\n-\t\t\tFileUtils.deleteDirectory(file);\n-\n \t\t}\n \n \t}\n@@ -598,10 +541,11 @@ public void shaclCacheUpdatePreloaded() {\n \t}\n \n \t@Benchmark\n-\tpublic void disabledValidationSail() {\n+\tpublic void disabledValidationSail() throws IOException {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \t\t\t((ShaclSail) repository.getSail()).disableValidation();\n \n \t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n@@ -615,18 +559,17 @@ public void disabledValidationSail() {\n \t\t\t((ShaclSail) repository.getSail()).enableValidation();\n \n \t\t\trepository.shutDown();\n-\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n \n \t}\n \n \t@Benchmark\n-\tpublic void disabledValidationTransaction() {\n+\tpublic void disabledValidationTransaction() throws IOException {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"complexBenchmark/shacl.ttl\"));\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"complexBenchmark/shacl.ttl\"));\n \n \t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.NONE, ShaclSail.TransactionSettings.ValidationApproach.Disabled);\n@@ -637,18 +580,16 @@ public void disabledValidationTransaction() {\n \t\t\t}\n \n \t\t\trepository.shutDown();\n-\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n \n \t}\n \n \t@Benchmark\n-\tpublic void noShacl() {\n+\tpublic void noShacl() throws IOException {\n \n-\t\ttry {\n-\t\t\tSailRepository repository = new SailRepository(new MemoryStore());\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n+\n+\t\t\tSailRepository repository = new SailRepository(Utils.getTestNotifyingSailNativeStore(temporaryFolder));\n \n \t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.NONE);\n@@ -659,9 +600,6 @@ public void noShacl() {\n \t\t\t}\n \n \t\t\trepository.shutDown();\n-\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n \t\t}\n \n \t}"
  },
  {
    "sha": "bc84b40b5c24c6ce9547cc506f3d51cfd48a3f3d",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexTargetBenchmark.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexTargetBenchmark.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexTargetBenchmark.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/ComplexTargetBenchmark.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -128,6 +128,7 @@ public void invocationSetup() throws IOException, InterruptedException {\n \n \t\tSystem.gc();\n \t\tThread.sleep(100);\n+\n \t}\n \n \t@Benchmark"
  },
  {
    "sha": "40c365107332b810ad70d90c07fdd2b1853daa9a",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkEmpty.java",
    "status": "modified",
    "additions": 48,
    "deletions": 43,
    "changes": 91,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkEmpty.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkEmpty.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkEmpty.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -22,11 +22,9 @@\n import org.eclipse.rdf4j.query.BindingSet;\n import org.eclipse.rdf4j.repository.sail.SailRepository;\n import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n-import org.eclipse.rdf4j.sail.memory.MemoryStore;\n import org.eclipse.rdf4j.sail.shacl.GlobalValidationExecutionLogging;\n import org.eclipse.rdf4j.sail.shacl.ShaclSailConnection;\n import org.eclipse.rdf4j.sail.shacl.Utils;\n-import org.eclipse.rdf4j.sail.shacl.testimp.TestNotifyingSail;\n import org.openjdk.jmh.annotations.Benchmark;\n import org.openjdk.jmh.annotations.BenchmarkMode;\n import org.openjdk.jmh.annotations.Fork;\n@@ -78,77 +76,84 @@ public void setUp() throws InterruptedException {\n \n \t@Benchmark\n \tpublic void shacl() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"shaclDatatype.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"shaclDatatype.ttl\"));\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.commit();\n-\t\t}\n-\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\t\tconnection.add(statements);\n \t\t\t\tconnection.commit();\n \t\t\t}\n-\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n \n+\t\t\trepository.shutDown();\n+\t\t}\n \t}\n \n \t@Benchmark\n \tpublic void noShacl() {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(new TestNotifyingSail(new MemoryStore()));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getTestNotifyingSailNativeStore(temporaryFolder));\n \n-\t\trepository.init();\n+\t\t\trepository.init();\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.commit();\n-\t\t}\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\t\tconnection.add(statements);\n \t\t\t\tconnection.commit();\n \t\t\t}\n-\t\t}\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\trepository.shutDown();\n \n-//\t\trepository.shutDown();\n+\t\t}\n \n \t}\n \n \t@Benchmark\n \tpublic void sparqlInsteadOfShacl() {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(new MemoryStore());\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getTestNotifyingSailNativeStore(temporaryFolder));\n \n-\t\trepository.init();\n+\t\t\trepository.init();\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.commit();\n-\t\t}\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\t\tconnection.add(statements);\n-\t\t\t\ttry (Stream<BindingSet> stream = connection\n-\t\t\t\t\t\t.prepareTupleQuery(\"select * where {?a a <\" + RDFS.RESOURCE + \">; <\" + FOAF.AGE\n-\t\t\t\t\t\t\t\t+ \"> ?age. FILTER(datatype(?age) != <http://www.w3.org/2001/XMLSchema#int>)}\")\n-\t\t\t\t\t\t.evaluate()\n-\t\t\t\t\t\t.stream()) {\n-\t\t\t\t\tstream.forEach(System.out::println);\n-\t\t\t\t}\n \t\t\t\tconnection.commit();\n \t\t\t}\n-\t\t}\n-\n-//\t\trepository.shutDown();\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\ttry (Stream<BindingSet> stream = connection\n+\t\t\t\t\t\t\t.prepareTupleQuery(\"select * where {?a a <\" + RDFS.RESOURCE + \">; <\" + FOAF.AGE\n+\t\t\t\t\t\t\t\t\t+ \"> ?age. FILTER(datatype(?age) != <http://www.w3.org/2001/XMLSchema#int>)}\")\n+\t\t\t\t\t\t\t.evaluate()\n+\t\t\t\t\t\t\t.stream()) {\n+\t\t\t\t\t\tstream.forEach(System.out::println);\n+\t\t\t\t\t}\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n \n+\t\t\trepository.shutDown();\n+\t\t}\n \t}\n \n }"
  },
  {
    "sha": "7d859c99cec09502e216addc1248f854c32950a2",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkLinear.java",
    "status": "modified",
    "additions": 27,
    "deletions": 24,
    "changes": 51,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkLinear.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkLinear.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkLinear.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -21,11 +21,9 @@\n import org.eclipse.rdf4j.model.vocabulary.RDFS;\n import org.eclipse.rdf4j.repository.sail.SailRepository;\n import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n-import org.eclipse.rdf4j.sail.memory.MemoryStore;\n import org.eclipse.rdf4j.sail.shacl.GlobalValidationExecutionLogging;\n import org.eclipse.rdf4j.sail.shacl.ShaclSailConnection;\n import org.eclipse.rdf4j.sail.shacl.Utils;\n-import org.eclipse.rdf4j.sail.shacl.testimp.TestNotifyingSail;\n import org.openjdk.jmh.annotations.Benchmark;\n import org.openjdk.jmh.annotations.BenchmarkMode;\n import org.openjdk.jmh.annotations.Fork;\n@@ -87,46 +85,51 @@ public void setUp() throws InterruptedException {\n \n \t@Benchmark\n \tpublic void shacl() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"shaclDatatype.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"shaclDatatype.ttl\"));\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.commit();\n-\t\t}\n-\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\t\tconnection.add(statements);\n \t\t\t\tconnection.commit();\n \t\t\t}\n-\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n \n+\t\t\trepository.shutDown();\n+\t\t}\n \t}\n \n \t@Benchmark\n \tpublic void noShacl() {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(new TestNotifyingSail(new MemoryStore()));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getTestNotifyingSailNativeStore(temporaryFolder));\n \n-\t\trepository.init();\n+\t\t\trepository.init();\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\tconnection.commit();\n-\t\t}\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n-\t\t\t\tconnection.add(statements);\n \t\t\t\tconnection.commit();\n \t\t\t}\n-\t\t}\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SNAPSHOT);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\trepository.shutDown();\n+\t\t}\n \t}\n \n }"
  },
  {
    "sha": "169988e2aff0e8875c041d7bfd9523134276aa6e",
    "filename": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkSerializableEmpty.java",
    "status": "modified",
    "additions": 49,
    "deletions": 44,
    "changes": 93,
    "blob_url": "https://github.com/eclipse/rdf4j/blob/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkSerializableEmpty.java",
    "raw_url": "https://github.com/eclipse/rdf4j/raw/ac297114f592e5f2c682af83bb9f2851559b02a3/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkSerializableEmpty.java",
    "contents_url": "https://api.github.com/repos/eclipse/rdf4j/contents/core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/DatatypeBenchmarkSerializableEmpty.java?ref=ac297114f592e5f2c682af83bb9f2851559b02a3",
    "patch": "@@ -22,11 +22,9 @@\n import org.eclipse.rdf4j.query.BindingSet;\n import org.eclipse.rdf4j.repository.sail.SailRepository;\n import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n-import org.eclipse.rdf4j.sail.memory.MemoryStore;\n import org.eclipse.rdf4j.sail.shacl.GlobalValidationExecutionLogging;\n import org.eclipse.rdf4j.sail.shacl.ShaclSailConnection;\n import org.eclipse.rdf4j.sail.shacl.Utils;\n-import org.eclipse.rdf4j.sail.shacl.testimp.TestNotifyingSail;\n import org.openjdk.jmh.annotations.Benchmark;\n import org.openjdk.jmh.annotations.BenchmarkMode;\n import org.openjdk.jmh.annotations.Fork;\n@@ -78,77 +76,84 @@ public void setUp() throws InterruptedException {\n \n \t@Benchmark\n \tpublic void shacl() throws Exception {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(Utils.getInitializedShaclSail(\"shaclDatatype.ttl\"));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getInitializedShaclSailNativeStore(temporaryFolder, \"shaclDatatype.ttl\"));\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin(IsolationLevels.SERIALIZABLE);\n-\t\t\tconnection.commit();\n-\t\t}\n-\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.SERIALIZABLE);\n-\t\t\t\tconnection.add(statements);\n \t\t\t\tconnection.commit();\n \t\t\t}\n-\t\t}\n \n-\t\trepository.shutDown();\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SERIALIZABLE);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\trepository.shutDown();\n+\t\t}\n \n \t}\n \n \t@Benchmark\n \tpublic void noShacl() {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(new TestNotifyingSail(new MemoryStore()));\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getTestNotifyingSailNativeStore(temporaryFolder));\n \n-\t\trepository.init();\n+\t\t\trepository.init();\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin(IsolationLevels.SERIALIZABLE);\n-\t\t\tconnection.commit();\n-\t\t}\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.SERIALIZABLE);\n-\t\t\t\tconnection.add(statements);\n \t\t\t\tconnection.commit();\n \t\t\t}\n-\t\t}\n-\n-\t\trepository.shutDown();\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SERIALIZABLE);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n \n+\t\t\trepository.shutDown();\n+\t\t}\n \t}\n \n \t@Benchmark\n \tpublic void sparqlInsteadOfShacl() {\n+\t\ttry (Utils.TemporaryFolder temporaryFolder = Utils.newTemporaryFolder()) {\n \n-\t\tSailRepository repository = new SailRepository(new MemoryStore());\n+\t\t\tSailRepository repository = new SailRepository(\n+\t\t\t\t\tUtils.getTestNotifyingSailNativeStore(temporaryFolder));\n \n-\t\trepository.init();\n+\t\t\trepository.init();\n \n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tconnection.begin(IsolationLevels.SERIALIZABLE);\n-\t\t\tconnection.commit();\n-\t\t}\n-\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n-\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n \t\t\t\tconnection.begin(IsolationLevels.SERIALIZABLE);\n-\t\t\t\tconnection.add(statements);\n-\t\t\t\ttry (Stream<BindingSet> stream = connection\n-\t\t\t\t\t\t.prepareTupleQuery(\"select * where {?a a <\" + RDFS.RESOURCE + \">; <\" + FOAF.AGE\n-\t\t\t\t\t\t\t\t+ \"> ?age. FILTER(datatype(?age) != <http://www.w3.org/2001/XMLSchema#int>)}\")\n-\t\t\t\t\t\t.evaluate()\n-\t\t\t\t\t\t.stream()) {\n-\t\t\t\t\tstream.forEach(System.out::println);\n-\t\t\t\t}\n \t\t\t\tconnection.commit();\n \t\t\t}\n-\t\t}\n-\n-\t\trepository.shutDown();\n+\t\t\ttry (SailRepositoryConnection connection = repository.getConnection()) {\n+\t\t\t\tfor (List<Statement> statements : allStatements) {\n+\t\t\t\t\tconnection.begin(IsolationLevels.SERIALIZABLE);\n+\t\t\t\t\tconnection.add(statements);\n+\t\t\t\t\ttry (Stream<BindingSet> stream = connection\n+\t\t\t\t\t\t\t.prepareTupleQuery(\"select * where {?a a <\" + RDFS.RESOURCE + \">; <\" + FOAF.AGE\n+\t\t\t\t\t\t\t\t\t+ \"> ?age. FILTER(datatype(?age) != <http://www.w3.org/2001/XMLSchema#int>)}\")\n+\t\t\t\t\t\t\t.evaluate()\n+\t\t\t\t\t\t\t.stream()) {\n+\t\t\t\t\t\tstream.forEach(System.out::println);\n+\t\t\t\t\t}\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t}\n+\t\t\t}\n \n+\t\t\trepository.shutDown();\n+\t\t}\n \t}\n \n }"
  }
]
