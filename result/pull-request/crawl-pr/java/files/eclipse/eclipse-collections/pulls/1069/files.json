[
  {
    "sha": "a38102588de9cc156bee6fc3968f5d0191d8e0f2",
    "filename": "eclipse-collections/src/main/java/org/eclipse/collections/impl/collector/Collectors2.java",
    "status": "modified",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/eclipse/eclipse-collections/blob/282608f9a71716b03de79c22fc8f296e02ee3ba1/eclipse-collections/src/main/java/org/eclipse/collections/impl/collector/Collectors2.java",
    "raw_url": "https://github.com/eclipse/eclipse-collections/raw/282608f9a71716b03de79c22fc8f296e02ee3ba1/eclipse-collections/src/main/java/org/eclipse/collections/impl/collector/Collectors2.java",
    "contents_url": "https://api.github.com/repos/eclipse/eclipse-collections/contents/eclipse-collections/src/main/java/org/eclipse/collections/impl/collector/Collectors2.java?ref=282608f9a71716b03de79c22fc8f296e02ee3ba1",
    "patch": "@@ -58,6 +58,7 @@\n import org.eclipse.collections.api.factory.Maps;\n import org.eclipse.collections.api.factory.Sets;\n import org.eclipse.collections.api.factory.SortedBags;\n+import org.eclipse.collections.api.factory.SortedMaps;\n import org.eclipse.collections.api.factory.SortedSets;\n import org.eclipse.collections.api.factory.Stacks;\n import org.eclipse.collections.api.list.ImmutableList;\n@@ -67,6 +68,7 @@\n import org.eclipse.collections.api.map.MutableMapIterable;\n import org.eclipse.collections.api.map.primitive.MutableObjectDoubleMap;\n import org.eclipse.collections.api.map.primitive.MutableObjectLongMap;\n+import org.eclipse.collections.api.map.sorted.MutableSortedMap;\n import org.eclipse.collections.api.multimap.ImmutableMultimap;\n import org.eclipse.collections.api.multimap.MutableMultimap;\n import org.eclipse.collections.api.multimap.bag.ImmutableBagMultimap;\n@@ -723,6 +725,81 @@ private Collectors2()\n                 EMPTY_CHARACTERISTICS);\n     }\n \n+    /**\n+     * <p>Returns the elements as a MutableSortedMap applying the keyFunction and valueFunction to each element.</p>\n+     * <p>Examples:</p>\n+     * {@code MutableSortedMap<Integer, String> map1 =\n+     * Interval.oneTo(5).stream().collect(Collectors2.toSortedMap(Functions.identity(), Object::toString));}<br>\n+     * {@code MutableSortedMap<Integer, String> map2 =\n+     * Interval.oneTo(5).reduceInPlace(Collectors2.toSortedMap(Functions.identity(), Object::toString));}\n+     * <p>\n+     * Equivalent to using @{@link RichIterable#toSortedMap(Function, Function)}\n+     * </p>\n+     * {@code MutableSortedMap<Integer, String> map = Interval.oneTo(5).toSortedMap(Functions.identity(), Object::toString);}\n+     */\n+    public static <T, K, V> Collector<T, ?, MutableSortedMap<K, V>> toSortedMap(\n+            Function<? super T, ? extends K> keyFunction,\n+            Function<? super T, ? extends V> valueFunction)\n+    {\n+        return Collector.of(\n+                SortedMaps.mutable::empty,\n+                (map, each) -> map.put(keyFunction.valueOf(each), valueFunction.valueOf(each)),\n+                (r1, r2) ->\n+                {\n+                    r1.putAll(r2);\n+                    return r1;\n+                },\n+                EMPTY_CHARACTERISTICS);\n+    }\n+\n+    /**\n+     * <p>Returns the elements as a MutableSortedMap applying the keyFunction and valueFunction to each element sorted using the specified comparator.</p>\n+     * <p>Examples:</p>\n+     * {@code MutableSortedMap<Integer, String> map1 =\n+     * Interval.oneTo(5).stream().collect(Collectors2.toSortedMap(Comparators.naturalOrder(), Functions.identity(), Object::toString));}<br>\n+     * {@code MutableSortedMap<Integer, String> map2 =\n+     * Interval.oneTo(5).reduceInPlace(Collectors2.toSortedMap(Comparators.naturalOrder(), Functions.identity(), Object::toString));}\n+     * <p>\n+     * Equivalent to using @{@link RichIterable#toSortedMap(Comparator, Function, Function)}\n+     * </p>\n+     * {@code MutableSortedMap<Integer, String> map = Interval.oneTo(5).toSortedMap(Comparators.naturalOrder(), Functions.identity(), Object::toString);}\n+     */\n+    public static <T, K, V> Collector<T, ?, MutableSortedMap<K, V>> toSortedMap(\n+            Comparator<? super K> comparator,\n+            Function<? super T, ? extends K> keyFunction,\n+            Function<? super T, ? extends V> valueFunction)\n+    {\n+        return Collector.of(\n+                () -> SortedMaps.mutable.with(comparator),\n+                (map, each) -> map.put(keyFunction.valueOf(each), valueFunction.valueOf(each)),\n+                (r1, r2) ->\n+                {\n+                    r1.putAll(r2);\n+                    return r1;\n+                },\n+                EMPTY_CHARACTERISTICS);\n+    }\n+\n+    /**\n+     * <p>Returns the elements as a MutableSortedMap applying the keyFunction and valueFunction to each element sorted using the specified {@code sortBy} function.</p>\n+     * <p>Examples:</p>\n+     * {@code MutableSortedMap<Integer, String> map1 =\n+     * Interval.oneTo(5).stream().collect(Collectors2.toSortedMap(Object::toString, Functions.identity(), Object::toString));}<br>\n+     * {@code MutableSortedMap<Integer, String> map2 =\n+     * Interval.oneTo(5).reduceInPlace(Collectors2.toSortedMap(Object::toString, Functions.identity(), Object::toString));}\n+     * <p>\n+     * Equivalent to using @{@link RichIterable#toSortedMapBy(Function, Function, Function)}\n+     * </p>\n+     * {@code MutableSortedMap<Integer, String> map = Interval.oneTo(5).toSortedMap(Object::toString, Functions.identity(), Object::toString);}\n+     */\n+    public static <T, K, V, KK extends Comparable<? super KK>> Collector<T, ?, MutableSortedMap<K, V>> toSortedMapBy(\n+            Function<? super K, KK> sortBy,\n+            Function<? super T, ? extends K> keyFunction,\n+            Function<? super T, ? extends V> valueFunction)\n+    {\n+        return Collectors2.toSortedMap(Comparator.comparing(sortBy), keyFunction, valueFunction);\n+    }\n+\n     /**\n      * Returns the counts of all of the values returned by applying the specified function to each\n      * item of the Stream."
  }
]
