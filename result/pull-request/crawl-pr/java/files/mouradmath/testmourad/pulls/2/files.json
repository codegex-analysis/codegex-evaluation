[
  {
    "sha": "dbb9e07ff9f4bfdfcbd7b14e998a4f9f4c22ad6e",
    "filename": ".jhipster/Country.json",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Country.json",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Country.json",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/.jhipster/Country.json?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,30 @@\n+{\n+  \"name\": \"Country\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"countryName\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-one\",\n+      \"otherEntityName\": \"region\",\n+      \"otherEntityRelationshipName\": \"country\",\n+      \"relationshipName\": \"region\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": true\n+    }\n+  ],\n+  \"changelogDate\": \"20210305204827\",\n+  \"entityTableName\": \"country\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"serviceImpl\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "af1bdfd7452ef4a6c3ffd6cf9c8ada245636a71f",
    "filename": ".jhipster/Department.json",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Department.json",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Department.json",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/.jhipster/Department.json?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,40 @@\n+{\n+  \"name\": \"Department\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"departmentName\",\n+      \"fieldType\": \"String\",\n+      \"fieldValidateRules\": [\n+        \"required\"\n+      ]\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-one\",\n+      \"otherEntityName\": \"location\",\n+      \"otherEntityRelationshipName\": \"department\",\n+      \"relationshipName\": \"location\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": true\n+    },\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"employee\",\n+      \"otherEntityRelationshipName\": \"department\",\n+      \"javadoc\": \"A relationship\",\n+      \"relationshipName\": \"employee\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210305205027\",\n+  \"entityTableName\": \"department\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"serviceImpl\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "83750c83e371f480bca97b4348ffd306127c95bd",
    "filename": ".jhipster/Employee.json",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Employee.json",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Employee.json",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/.jhipster/Employee.json?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,69 @@\n+{\n+  \"name\": \"Employee\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"firstName\",\n+      \"fieldType\": \"String\",\n+      \"javadoc\": \"The firstname attribute.\"\n+    },\n+    {\n+      \"fieldName\": \"lastName\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"email\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"phoneNumber\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"hireDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"salary\",\n+      \"fieldType\": \"Long\"\n+    },\n+    {\n+      \"fieldName\": \"commissionPct\",\n+      \"fieldType\": \"Long\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-many\",\n+      \"otherEntityName\": \"job\",\n+      \"otherEntityRelationshipName\": \"employee\",\n+      \"relationshipName\": \"job\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"employee\",\n+      \"otherEntityRelationshipName\": \"employee\",\n+      \"relationshipName\": \"manager\",\n+      \"otherEntityField\": \"id\"\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"department\",\n+      \"otherEntityRelationshipName\": \"employee\",\n+      \"javadoc\": \"Another side of the same relationship\",\n+      \"relationshipName\": \"department\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210305205227\",\n+  \"javadoc\": \"The Employee entity.\",\n+  \"entityTableName\": \"employee\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"infinite-scroll\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "e7ba585583eb7efe6bafec91088c55bb0b38b4fd",
    "filename": ".jhipster/Job.json",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Job.json",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Job.json",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/.jhipster/Job.json?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,45 @@\n+{\n+  \"name\": \"Job\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"jobTitle\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"minSalary\",\n+      \"fieldType\": \"Long\"\n+    },\n+    {\n+      \"fieldName\": \"maxSalary\",\n+      \"fieldType\": \"Long\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-many\",\n+      \"otherEntityName\": \"task\",\n+      \"otherEntityRelationshipName\": \"job\",\n+      \"relationshipName\": \"task\",\n+      \"otherEntityField\": \"title\",\n+      \"ownerSide\": true\n+    },\n+    {\n+      \"relationshipType\": \"many-to-one\",\n+      \"otherEntityName\": \"employee\",\n+      \"otherEntityRelationshipName\": \"job\",\n+      \"relationshipName\": \"employee\",\n+      \"otherEntityField\": \"id\"\n+    }\n+  ],\n+  \"changelogDate\": \"20210305205327\",\n+  \"entityTableName\": \"job\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"pagination\",\n+  \"service\": \"no\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "412cf0de84cdae3eaa85da21a8529d89b09ad4f2",
    "filename": ".jhipster/JobHistory.json",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/JobHistory.json",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/JobHistory.json",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/.jhipster/JobHistory.json?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,55 @@\n+{\n+  \"name\": \"JobHistory\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"startDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"endDate\",\n+      \"fieldType\": \"Instant\"\n+    },\n+    {\n+      \"fieldName\": \"language\",\n+      \"fieldType\": \"Language\",\n+      \"fieldValues\": \"FRENCH,ENGLISH,SPANISH\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-one\",\n+      \"otherEntityName\": \"job\",\n+      \"otherEntityRelationshipName\": \"jobHistory\",\n+      \"relationshipName\": \"job\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": true\n+    },\n+    {\n+      \"relationshipType\": \"one-to-one\",\n+      \"otherEntityName\": \"department\",\n+      \"otherEntityRelationshipName\": \"jobHistory\",\n+      \"relationshipName\": \"department\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": true\n+    },\n+    {\n+      \"relationshipType\": \"one-to-one\",\n+      \"otherEntityName\": \"employee\",\n+      \"otherEntityRelationshipName\": \"jobHistory\",\n+      \"relationshipName\": \"employee\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": true\n+    }\n+  ],\n+  \"changelogDate\": \"20210305205427\",\n+  \"entityTableName\": \"job_history\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"infinite-scroll\",\n+  \"service\": \"serviceImpl\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "e219a02765b97b15d6103c7255a802e9ae72ae66",
    "filename": ".jhipster/Location.json",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Location.json",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Location.json",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/.jhipster/Location.json?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,43 @@\n+{\n+  \"name\": \"Location\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"streetAddress\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"postalCode\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"city\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"stateProvince\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"one-to-one\",\n+      \"otherEntityName\": \"country\",\n+      \"otherEntityRelationshipName\": \"location\",\n+      \"relationshipName\": \"country\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": true\n+    }\n+  ],\n+  \"changelogDate\": \"20210305204927\",\n+  \"javadoc\": \"not an ignored comment\",\n+  \"entityTableName\": \"location\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"serviceImpl\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "0bc325d38d492c237b8e074819eda9ce67ab58c6",
    "filename": ".jhipster/Region.json",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Region.json",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Region.json",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/.jhipster/Region.json?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,21 @@\n+{\n+  \"name\": \"Region\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"regionName\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [],\n+  \"changelogDate\": \"20210305204727\",\n+  \"entityTableName\": \"region\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"serviceImpl\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "3690ee7cef67258ddabe754e5c865498410978cc",
    "filename": ".jhipster/Task.json",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Task.json",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/.jhipster/Task.json",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/.jhipster/Task.json?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,35 @@\n+{\n+  \"name\": \"Task\",\n+  \"fields\": [\n+    {\n+      \"fieldName\": \"title\",\n+      \"fieldType\": \"String\"\n+    },\n+    {\n+      \"fieldName\": \"description\",\n+      \"fieldType\": \"String\"\n+    }\n+  ],\n+  \"relationships\": [\n+    {\n+      \"relationshipType\": \"many-to-many\",\n+      \"otherEntityName\": \"job\",\n+      \"otherEntityRelationshipName\": \"task\",\n+      \"relationshipName\": \"job\",\n+      \"otherEntityField\": \"id\",\n+      \"ownerSide\": false\n+    }\n+  ],\n+  \"changelogDate\": \"20210305205127\",\n+  \"javadoc\": \"Task entity.\\\\n@author The JHipster team.\",\n+  \"entityTableName\": \"task\",\n+  \"dto\": \"no\",\n+  \"pagination\": \"no\",\n+  \"service\": \"serviceImpl\",\n+  \"jpaMetamodelFiltering\": false,\n+  \"fluentMethods\": true,\n+  \"readOnly\": false,\n+  \"embedded\": false,\n+  \"clientRootFolder\": \"\",\n+  \"applications\": \"*\"\n+}"
  },
  {
    "sha": "9a40060b6a94ee540edb9a3ded8857bd802dfc40",
    "filename": "src/main/java/com/mycompany/myapp/config/CacheConfiguration.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/config/CacheConfiguration.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/config/CacheConfiguration.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/config/CacheConfiguration.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -47,6 +47,18 @@ public JCacheManagerCustomizer cacheManagerCustomizer() {\n             createCache(cm, com.mycompany.myapp.domain.User.class.getName());\n             createCache(cm, com.mycompany.myapp.domain.Authority.class.getName());\n             createCache(cm, com.mycompany.myapp.domain.User.class.getName() + \".authorities\");\n+            createCache(cm, com.mycompany.myapp.domain.Region.class.getName());\n+            createCache(cm, com.mycompany.myapp.domain.Country.class.getName());\n+            createCache(cm, com.mycompany.myapp.domain.Location.class.getName());\n+            createCache(cm, com.mycompany.myapp.domain.Department.class.getName());\n+            createCache(cm, com.mycompany.myapp.domain.Department.class.getName() + \".employees\");\n+            createCache(cm, com.mycompany.myapp.domain.Task.class.getName());\n+            createCache(cm, com.mycompany.myapp.domain.Task.class.getName() + \".jobs\");\n+            createCache(cm, com.mycompany.myapp.domain.Employee.class.getName());\n+            createCache(cm, com.mycompany.myapp.domain.Employee.class.getName() + \".jobs\");\n+            createCache(cm, com.mycompany.myapp.domain.Job.class.getName());\n+            createCache(cm, com.mycompany.myapp.domain.Job.class.getName() + \".tasks\");\n+            createCache(cm, com.mycompany.myapp.domain.JobHistory.class.getName());\n             // jhipster-needle-ehcache-add-entry\n         };\n     }"
  },
  {
    "sha": "012b6449316e44561eeb2e578d3df3b43052ee0f",
    "filename": "src/main/java/com/mycompany/myapp/domain/Country.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Country.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Country.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/domain/Country.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,91 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Country.\n+ */\n+@Entity\n+@Table(name = \"country\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Country implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"country_name\")\n+    private String countryName;\n+\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Region region;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountryName() {\n+        return countryName;\n+    }\n+\n+    public Country countryName(String countryName) {\n+        this.countryName = countryName;\n+        return this;\n+    }\n+\n+    public void setCountryName(String countryName) {\n+        this.countryName = countryName;\n+    }\n+\n+    public Region getRegion() {\n+        return region;\n+    }\n+\n+    public Country region(Region region) {\n+        this.region = region;\n+        return this;\n+    }\n+\n+    public void setRegion(Region region) {\n+        this.region = region;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Country)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Country) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Country{\" +\n+            \"id=\" + getId() +\n+            \", countryName='\" + getCountryName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "36e7b65fa7452cde0c3276f9bd93845025ca383d",
    "filename": "src/main/java/com/mycompany/myapp/domain/Department.java",
    "status": "added",
    "additions": 129,
    "deletions": 0,
    "changes": 129,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Department.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Department.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/domain/Department.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,129 @@\n+package com.mycompany.myapp.domain;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.*;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Department.\n+ */\n+@Entity\n+@Table(name = \"department\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Department implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @NotNull\n+    @Column(name = \"department_name\", nullable = false)\n+    private String departmentName;\n+\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Location location;\n+\n+    /**\n+     * A relationship\n+     */\n+    @ApiModelProperty(value = \"A relationship\")\n+    @OneToMany(mappedBy = \"department\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    private Set<Employee> employees = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getDepartmentName() {\n+        return departmentName;\n+    }\n+\n+    public Department departmentName(String departmentName) {\n+        this.departmentName = departmentName;\n+        return this;\n+    }\n+\n+    public void setDepartmentName(String departmentName) {\n+        this.departmentName = departmentName;\n+    }\n+\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    public Department location(Location location) {\n+        this.location = location;\n+        return this;\n+    }\n+\n+    public void setLocation(Location location) {\n+        this.location = location;\n+    }\n+\n+    public Set<Employee> getEmployees() {\n+        return employees;\n+    }\n+\n+    public Department employees(Set<Employee> employees) {\n+        this.employees = employees;\n+        return this;\n+    }\n+\n+    public Department addEmployee(Employee employee) {\n+        this.employees.add(employee);\n+        employee.setDepartment(this);\n+        return this;\n+    }\n+\n+    public Department removeEmployee(Employee employee) {\n+        this.employees.remove(employee);\n+        employee.setDepartment(null);\n+        return this;\n+    }\n+\n+    public void setEmployees(Set<Employee> employees) {\n+        this.employees = employees;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Department)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Department) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Department{\" +\n+            \"id=\" + getId() +\n+            \", departmentName='\" + getDepartmentName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "b36cfc9108cf4d5fb2ce5d17d834ddee143a0270",
    "filename": "src/main/java/com/mycompany/myapp/domain/Employee.java",
    "status": "added",
    "additions": 254,
    "deletions": 0,
    "changes": 254,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Employee.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Employee.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/domain/Employee.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,254 @@\n+package com.mycompany.myapp.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.time.Instant;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * The Employee entity.\n+ */\n+@ApiModel(description = \"The Employee entity.\")\n+@Entity\n+@Table(name = \"employee\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Employee implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    /**\n+     * The firstname attribute.\n+     */\n+    @ApiModelProperty(value = \"The firstname attribute.\")\n+    @Column(name = \"first_name\")\n+    private String firstName;\n+\n+    @Column(name = \"last_name\")\n+    private String lastName;\n+\n+    @Column(name = \"email\")\n+    private String email;\n+\n+    @Column(name = \"phone_number\")\n+    private String phoneNumber;\n+\n+    @Column(name = \"hire_date\")\n+    private Instant hireDate;\n+\n+    @Column(name = \"salary\")\n+    private Long salary;\n+\n+    @Column(name = \"commission_pct\")\n+    private Long commissionPct;\n+\n+    @OneToMany(mappedBy = \"employee\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    private Set<Job> jobs = new HashSet<>();\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"employees\", allowSetters = true)\n+    private Employee manager;\n+\n+    /**\n+     * Another side of the same relationship\n+     */\n+    @ApiModelProperty(value = \"Another side of the same relationship\")\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"employees\", allowSetters = true)\n+    private Department department;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public Employee firstName(String firstName) {\n+        this.firstName = firstName;\n+        return this;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public Employee lastName(String lastName) {\n+        this.lastName = lastName;\n+        return this;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public Employee email(String email) {\n+        this.email = email;\n+        return this;\n+    }\n+\n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public String getPhoneNumber() {\n+        return phoneNumber;\n+    }\n+\n+    public Employee phoneNumber(String phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+        return this;\n+    }\n+\n+    public void setPhoneNumber(String phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+\n+    public Instant getHireDate() {\n+        return hireDate;\n+    }\n+\n+    public Employee hireDate(Instant hireDate) {\n+        this.hireDate = hireDate;\n+        return this;\n+    }\n+\n+    public void setHireDate(Instant hireDate) {\n+        this.hireDate = hireDate;\n+    }\n+\n+    public Long getSalary() {\n+        return salary;\n+    }\n+\n+    public Employee salary(Long salary) {\n+        this.salary = salary;\n+        return this;\n+    }\n+\n+    public void setSalary(Long salary) {\n+        this.salary = salary;\n+    }\n+\n+    public Long getCommissionPct() {\n+        return commissionPct;\n+    }\n+\n+    public Employee commissionPct(Long commissionPct) {\n+        this.commissionPct = commissionPct;\n+        return this;\n+    }\n+\n+    public void setCommissionPct(Long commissionPct) {\n+        this.commissionPct = commissionPct;\n+    }\n+\n+    public Set<Job> getJobs() {\n+        return jobs;\n+    }\n+\n+    public Employee jobs(Set<Job> jobs) {\n+        this.jobs = jobs;\n+        return this;\n+    }\n+\n+    public Employee addJob(Job job) {\n+        this.jobs.add(job);\n+        job.setEmployee(this);\n+        return this;\n+    }\n+\n+    public Employee removeJob(Job job) {\n+        this.jobs.remove(job);\n+        job.setEmployee(null);\n+        return this;\n+    }\n+\n+    public void setJobs(Set<Job> jobs) {\n+        this.jobs = jobs;\n+    }\n+\n+    public Employee getManager() {\n+        return manager;\n+    }\n+\n+    public Employee manager(Employee employee) {\n+        this.manager = employee;\n+        return this;\n+    }\n+\n+    public void setManager(Employee employee) {\n+        this.manager = employee;\n+    }\n+\n+    public Department getDepartment() {\n+        return department;\n+    }\n+\n+    public Employee department(Department department) {\n+        this.department = department;\n+        return this;\n+    }\n+\n+    public void setDepartment(Department department) {\n+        this.department = department;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Employee)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Employee) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Employee{\" +\n+            \"id=\" + getId() +\n+            \", firstName='\" + getFirstName() + \"'\" +\n+            \", lastName='\" + getLastName() + \"'\" +\n+            \", email='\" + getEmail() + \"'\" +\n+            \", phoneNumber='\" + getPhoneNumber() + \"'\" +\n+            \", hireDate='\" + getHireDate() + \"'\" +\n+            \", salary=\" + getSalary() +\n+            \", commissionPct=\" + getCommissionPct() +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "04e682cdefe662a72651fea12942e36c09f9cb2f",
    "filename": "src/main/java/com/mycompany/myapp/domain/Job.java",
    "status": "added",
    "additions": 160,
    "deletions": 0,
    "changes": 160,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Job.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Job.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/domain/Job.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,160 @@\n+package com.mycompany.myapp.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A Job.\n+ */\n+@Entity\n+@Table(name = \"job\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Job implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"job_title\")\n+    private String jobTitle;\n+\n+    @Column(name = \"min_salary\")\n+    private Long minSalary;\n+\n+    @Column(name = \"max_salary\")\n+    private Long maxSalary;\n+\n+    @ManyToMany\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    @JoinTable(name = \"job_task\",\n+               joinColumns = @JoinColumn(name = \"job_id\", referencedColumnName = \"id\"),\n+               inverseJoinColumns = @JoinColumn(name = \"task_id\", referencedColumnName = \"id\"))\n+    private Set<Task> tasks = new HashSet<>();\n+\n+    @ManyToOne\n+    @JsonIgnoreProperties(value = \"jobs\", allowSetters = true)\n+    private Employee employee;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getJobTitle() {\n+        return jobTitle;\n+    }\n+\n+    public Job jobTitle(String jobTitle) {\n+        this.jobTitle = jobTitle;\n+        return this;\n+    }\n+\n+    public void setJobTitle(String jobTitle) {\n+        this.jobTitle = jobTitle;\n+    }\n+\n+    public Long getMinSalary() {\n+        return minSalary;\n+    }\n+\n+    public Job minSalary(Long minSalary) {\n+        this.minSalary = minSalary;\n+        return this;\n+    }\n+\n+    public void setMinSalary(Long minSalary) {\n+        this.minSalary = minSalary;\n+    }\n+\n+    public Long getMaxSalary() {\n+        return maxSalary;\n+    }\n+\n+    public Job maxSalary(Long maxSalary) {\n+        this.maxSalary = maxSalary;\n+        return this;\n+    }\n+\n+    public void setMaxSalary(Long maxSalary) {\n+        this.maxSalary = maxSalary;\n+    }\n+\n+    public Set<Task> getTasks() {\n+        return tasks;\n+    }\n+\n+    public Job tasks(Set<Task> tasks) {\n+        this.tasks = tasks;\n+        return this;\n+    }\n+\n+    public Job addTask(Task task) {\n+        this.tasks.add(task);\n+        task.getJobs().add(this);\n+        return this;\n+    }\n+\n+    public Job removeTask(Task task) {\n+        this.tasks.remove(task);\n+        task.getJobs().remove(this);\n+        return this;\n+    }\n+\n+    public void setTasks(Set<Task> tasks) {\n+        this.tasks = tasks;\n+    }\n+\n+    public Employee getEmployee() {\n+        return employee;\n+    }\n+\n+    public Job employee(Employee employee) {\n+        this.employee = employee;\n+        return this;\n+    }\n+\n+    public void setEmployee(Employee employee) {\n+        this.employee = employee;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Job)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Job) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Job{\" +\n+            \"id=\" + getId() +\n+            \", jobTitle='\" + getJobTitle() + \"'\" +\n+            \", minSalary=\" + getMinSalary() +\n+            \", maxSalary=\" + getMaxSalary() +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "da80043a90facc52baabfea3573fdbe2dcb6e2a8",
    "filename": "src/main/java/com/mycompany/myapp/domain/JobHistory.java",
    "status": "added",
    "additions": 163,
    "deletions": 0,
    "changes": 163,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/JobHistory.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/JobHistory.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/domain/JobHistory.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,163 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.time.Instant;\n+\n+import com.mycompany.myapp.domain.enumeration.Language;\n+\n+/**\n+ * A JobHistory.\n+ */\n+@Entity\n+@Table(name = \"job_history\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class JobHistory implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"start_date\")\n+    private Instant startDate;\n+\n+    @Column(name = \"end_date\")\n+    private Instant endDate;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"language\")\n+    private Language language;\n+\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Job job;\n+\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Department department;\n+\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Employee employee;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Instant getStartDate() {\n+        return startDate;\n+    }\n+\n+    public JobHistory startDate(Instant startDate) {\n+        this.startDate = startDate;\n+        return this;\n+    }\n+\n+    public void setStartDate(Instant startDate) {\n+        this.startDate = startDate;\n+    }\n+\n+    public Instant getEndDate() {\n+        return endDate;\n+    }\n+\n+    public JobHistory endDate(Instant endDate) {\n+        this.endDate = endDate;\n+        return this;\n+    }\n+\n+    public void setEndDate(Instant endDate) {\n+        this.endDate = endDate;\n+    }\n+\n+    public Language getLanguage() {\n+        return language;\n+    }\n+\n+    public JobHistory language(Language language) {\n+        this.language = language;\n+        return this;\n+    }\n+\n+    public void setLanguage(Language language) {\n+        this.language = language;\n+    }\n+\n+    public Job getJob() {\n+        return job;\n+    }\n+\n+    public JobHistory job(Job job) {\n+        this.job = job;\n+        return this;\n+    }\n+\n+    public void setJob(Job job) {\n+        this.job = job;\n+    }\n+\n+    public Department getDepartment() {\n+        return department;\n+    }\n+\n+    public JobHistory department(Department department) {\n+        this.department = department;\n+        return this;\n+    }\n+\n+    public void setDepartment(Department department) {\n+        this.department = department;\n+    }\n+\n+    public Employee getEmployee() {\n+        return employee;\n+    }\n+\n+    public JobHistory employee(Employee employee) {\n+        this.employee = employee;\n+        return this;\n+    }\n+\n+    public void setEmployee(Employee employee) {\n+        this.employee = employee;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof JobHistory)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((JobHistory) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"JobHistory{\" +\n+            \"id=\" + getId() +\n+            \", startDate='\" + getStartDate() + \"'\" +\n+            \", endDate='\" + getEndDate() + \"'\" +\n+            \", language='\" + getLanguage() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "41f2bdaff0830d461abe8a0ff9b26ccef3c25c37",
    "filename": "src/main/java/com/mycompany/myapp/domain/Location.java",
    "status": "added",
    "additions": 144,
    "deletions": 0,
    "changes": 144,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Location.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Location.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/domain/Location.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,144 @@\n+package com.mycompany.myapp.domain;\n+\n+import io.swagger.annotations.ApiModel;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * not an ignored comment\n+ */\n+@ApiModel(description = \"not an ignored comment\")\n+@Entity\n+@Table(name = \"location\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Location implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"street_address\")\n+    private String streetAddress;\n+\n+    @Column(name = \"postal_code\")\n+    private String postalCode;\n+\n+    @Column(name = \"city\")\n+    private String city;\n+\n+    @Column(name = \"state_province\")\n+    private String stateProvince;\n+\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Country country;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getStreetAddress() {\n+        return streetAddress;\n+    }\n+\n+    public Location streetAddress(String streetAddress) {\n+        this.streetAddress = streetAddress;\n+        return this;\n+    }\n+\n+    public void setStreetAddress(String streetAddress) {\n+        this.streetAddress = streetAddress;\n+    }\n+\n+    public String getPostalCode() {\n+        return postalCode;\n+    }\n+\n+    public Location postalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+        return this;\n+    }\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public Location city(String city) {\n+        this.city = city;\n+        return this;\n+    }\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getStateProvince() {\n+        return stateProvince;\n+    }\n+\n+    public Location stateProvince(String stateProvince) {\n+        this.stateProvince = stateProvince;\n+        return this;\n+    }\n+\n+    public void setStateProvince(String stateProvince) {\n+        this.stateProvince = stateProvince;\n+    }\n+\n+    public Country getCountry() {\n+        return country;\n+    }\n+\n+    public Location country(Country country) {\n+        this.country = country;\n+        return this;\n+    }\n+\n+    public void setCountry(Country country) {\n+        this.country = country;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Location)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Location) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Location{\" +\n+            \"id=\" + getId() +\n+            \", streetAddress='\" + getStreetAddress() + \"'\" +\n+            \", postalCode='\" + getPostalCode() + \"'\" +\n+            \", city='\" + getCity() + \"'\" +\n+            \", stateProvince='\" + getStateProvince() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "970e9871805d222197ffaa2e94fe9b1c08ddb622",
    "filename": "src/main/java/com/mycompany/myapp/domain/Region.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Region.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Region.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/domain/Region.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,74 @@\n+package com.mycompany.myapp.domain;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A Region.\n+ */\n+@Entity\n+@Table(name = \"region\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Region implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"region_name\")\n+    private String regionName;\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getRegionName() {\n+        return regionName;\n+    }\n+\n+    public Region regionName(String regionName) {\n+        this.regionName = regionName;\n+        return this;\n+    }\n+\n+    public void setRegionName(String regionName) {\n+        this.regionName = regionName;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Region)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Region) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Region{\" +\n+            \"id=\" + getId() +\n+            \", regionName='\" + getRegionName() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "afeff1275a8df231300bbe5e4e5f19f0b5c5c698",
    "filename": "src/main/java/com/mycompany/myapp/domain/Task.java",
    "status": "added",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Task.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/Task.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/domain/Task.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,126 @@\n+package com.mycompany.myapp.domain;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.annotations.ApiModel;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Task entity.\\n@author The JHipster team.\n+ */\n+@ApiModel(description = \"Task entity.\\n@author The JHipster team.\")\n+@Entity\n+@Table(name = \"task\")\n+@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+public class Task implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"title\")\n+    private String title;\n+\n+    @Column(name = \"description\")\n+    private String description;\n+\n+    @ManyToMany(mappedBy = \"tasks\")\n+    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\n+    @JsonIgnore\n+    private Set<Job> jobs = new HashSet<>();\n+\n+    // jhipster-needle-entity-add-field - JHipster will add fields here\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public Task title(String title) {\n+        this.title = title;\n+        return this;\n+    }\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public Task description(String description) {\n+        this.description = description;\n+        return this;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public Set<Job> getJobs() {\n+        return jobs;\n+    }\n+\n+    public Task jobs(Set<Job> jobs) {\n+        this.jobs = jobs;\n+        return this;\n+    }\n+\n+    public Task addJob(Job job) {\n+        this.jobs.add(job);\n+        job.getTasks().add(this);\n+        return this;\n+    }\n+\n+    public Task removeJob(Job job) {\n+        this.jobs.remove(job);\n+        job.getTasks().remove(this);\n+        return this;\n+    }\n+\n+    public void setJobs(Set<Job> jobs) {\n+        this.jobs = jobs;\n+    }\n+    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof Task)) {\n+            return false;\n+        }\n+        return id != null && id.equals(((Task) o).id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31;\n+    }\n+\n+    // prettier-ignore\n+    @Override\n+    public String toString() {\n+        return \"Task{\" +\n+            \"id=\" + getId() +\n+            \", title='\" + getTitle() + \"'\" +\n+            \", description='\" + getDescription() + \"'\" +\n+            \"}\";\n+    }\n+}"
  },
  {
    "sha": "6a0ba70c37fa7b31b64228c88529038a46cf8b88",
    "filename": "src/main/java/com/mycompany/myapp/domain/enumeration/Language.java",
    "status": "added",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/enumeration/Language.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/domain/enumeration/Language.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/domain/enumeration/Language.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,8 @@\n+package com.mycompany.myapp.domain.enumeration;\n+\n+/**\n+ * The Language enumeration.\n+ */\n+public enum Language {\n+    FRENCH, ENGLISH, SPANISH\n+}"
  },
  {
    "sha": "00bdf19892fc0e48861b248e8c9ebe788c409f3b",
    "filename": "src/main/java/com/mycompany/myapp/repository/CountryRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/CountryRepository.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/CountryRepository.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/repository/CountryRepository.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Country;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Country entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface CountryRepository extends JpaRepository<Country, Long> {\n+}"
  },
  {
    "sha": "5bb113dd70125904cbbfea35684766f1563b8908",
    "filename": "src/main/java/com/mycompany/myapp/repository/DepartmentRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/DepartmentRepository.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/DepartmentRepository.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/repository/DepartmentRepository.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Department;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Department entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface DepartmentRepository extends JpaRepository<Department, Long> {\n+}"
  },
  {
    "sha": "66271c878962d79ed9b3f65e26349b3aea14bf71",
    "filename": "src/main/java/com/mycompany/myapp/repository/EmployeeRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/EmployeeRepository.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/EmployeeRepository.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/repository/EmployeeRepository.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Employee;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Employee entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface EmployeeRepository extends JpaRepository<Employee, Long> {\n+}"
  },
  {
    "sha": "5882ef0a647611820a6c30882d83254eb7be6acc",
    "filename": "src/main/java/com/mycompany/myapp/repository/JobHistoryRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/JobHistoryRepository.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/JobHistoryRepository.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/repository/JobHistoryRepository.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.JobHistory;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the JobHistory entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface JobHistoryRepository extends JpaRepository<JobHistory, Long> {\n+}"
  },
  {
    "sha": "2d85a83421cc1b46aa3d0a5a3db43d95416e05cf",
    "filename": "src/main/java/com/mycompany/myapp/repository/JobRepository.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/JobRepository.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/JobRepository.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/repository/JobRepository.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,29 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Job;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Spring Data  repository for the Job entity.\n+ */\n+@Repository\n+public interface JobRepository extends JpaRepository<Job, Long> {\n+\n+    @Query(value = \"select distinct job from Job job left join fetch job.tasks\",\n+        countQuery = \"select count(distinct job) from Job job\")\n+    Page<Job> findAllWithEagerRelationships(Pageable pageable);\n+\n+    @Query(\"select distinct job from Job job left join fetch job.tasks\")\n+    List<Job> findAllWithEagerRelationships();\n+\n+    @Query(\"select job from Job job left join fetch job.tasks where job.id =:id\")\n+    Optional<Job> findOneWithEagerRelationships(@Param(\"id\") Long id);\n+}"
  },
  {
    "sha": "e7fc9ca2d26e1ab20705ea153c6bd9c84dbafe4e",
    "filename": "src/main/java/com/mycompany/myapp/repository/LocationRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/LocationRepository.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/LocationRepository.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/repository/LocationRepository.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Location;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Location entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface LocationRepository extends JpaRepository<Location, Long> {\n+}"
  },
  {
    "sha": "792d7bbbf92e749e9cca8a29772f9171ab53bfca",
    "filename": "src/main/java/com/mycompany/myapp/repository/RegionRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/RegionRepository.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/RegionRepository.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/repository/RegionRepository.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Region;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Region entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface RegionRepository extends JpaRepository<Region, Long> {\n+}"
  },
  {
    "sha": "bad607a6c6b7ef8b3d26a0c714e3be5308c00a21",
    "filename": "src/main/java/com/mycompany/myapp/repository/TaskRepository.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/TaskRepository.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/repository/TaskRepository.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/repository/TaskRepository.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,14 @@\n+package com.mycompany.myapp.repository;\n+\n+import com.mycompany.myapp.domain.Task;\n+\n+import org.springframework.data.jpa.repository.*;\n+import org.springframework.stereotype.Repository;\n+\n+/**\n+ * Spring Data  repository for the Task entity.\n+ */\n+@SuppressWarnings(\"unused\")\n+@Repository\n+public interface TaskRepository extends JpaRepository<Task, Long> {\n+}"
  },
  {
    "sha": "00691e1a85fac1c5c303dd9acb87893a5d93c0c0",
    "filename": "src/main/java/com/mycompany/myapp/service/CountryService.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/service/CountryService.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/service/CountryService.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/service/CountryService.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,43 @@\n+package com.mycompany.myapp.service;\n+\n+import com.mycompany.myapp.domain.Country;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Service Interface for managing {@link Country}.\n+ */\n+public interface CountryService {\n+\n+    /**\n+     * Save a country.\n+     *\n+     * @param country the entity to save.\n+     * @return the persisted entity.\n+     */\n+    Country save(Country country);\n+\n+    /**\n+     * Get all the countries.\n+     *\n+     * @return the list of entities.\n+     */\n+    List<Country> findAll();\n+\n+\n+    /**\n+     * Get the \"id\" country.\n+     *\n+     * @param id the id of the entity.\n+     * @return the entity.\n+     */\n+    Optional<Country> findOne(Long id);\n+\n+    /**\n+     * Delete the \"id\" country.\n+     *\n+     * @param id the id of the entity.\n+     */\n+    void delete(Long id);\n+}"
  },
  {
    "sha": "93a2d6eb6797162af293c1cdd6c1ecf5a5147b4b",
    "filename": "src/main/java/com/mycompany/myapp/service/DepartmentService.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/service/DepartmentService.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/service/DepartmentService.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/service/DepartmentService.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,43 @@\n+package com.mycompany.myapp.service;\n+\n+import com.mycompany.myapp.domain.Department;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Service Interface for managing {@link Department}.\n+ */\n+public interface DepartmentService {\n+\n+    /**\n+     * Save a department.\n+     *\n+     * @param department the entity to save.\n+     * @return the persisted entity.\n+     */\n+    Department save(Department department);\n+\n+    /**\n+     * Get all the departments.\n+     *\n+     * @return the list of entities.\n+     */\n+    List<Department> findAll();\n+\n+\n+    /**\n+     * Get the \"id\" department.\n+     *\n+     * @param id the id of the entity.\n+     * @return the entity.\n+     */\n+    Optional<Department> findOne(Long id);\n+\n+    /**\n+     * Delete the \"id\" department.\n+     *\n+     * @param id the id of the entity.\n+     */\n+    void delete(Long id);\n+}"
  },
  {
    "sha": "5f0114f36183162f03dd478dafe3195c88e4f1f5",
    "filename": "src/main/java/com/mycompany/myapp/service/JobHistoryService.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/service/JobHistoryService.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/service/JobHistoryService.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/service/JobHistoryService.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,46 @@\n+package com.mycompany.myapp.service;\n+\n+import com.mycompany.myapp.domain.JobHistory;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Service Interface for managing {@link JobHistory}.\n+ */\n+public interface JobHistoryService {\n+\n+    /**\n+     * Save a jobHistory.\n+     *\n+     * @param jobHistory the entity to save.\n+     * @return the persisted entity.\n+     */\n+    JobHistory save(JobHistory jobHistory);\n+\n+    /**\n+     * Get all the jobHistories.\n+     *\n+     * @param pageable the pagination information.\n+     * @return the list of entities.\n+     */\n+    Page<JobHistory> findAll(Pageable pageable);\n+\n+\n+    /**\n+     * Get the \"id\" jobHistory.\n+     *\n+     * @param id the id of the entity.\n+     * @return the entity.\n+     */\n+    Optional<JobHistory> findOne(Long id);\n+\n+    /**\n+     * Delete the \"id\" jobHistory.\n+     *\n+     * @param id the id of the entity.\n+     */\n+    void delete(Long id);\n+}"
  },
  {
    "sha": "16137e39b31f6e168fc2a1449e510ee71e8b276d",
    "filename": "src/main/java/com/mycompany/myapp/service/LocationService.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/mouradmath/testmourad/blob/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/service/LocationService.java",
    "raw_url": "https://github.com/mouradmath/testmourad/raw/3ef29c706da83225c229c1ddbf24f23fdd9c8e42/src/main/java/com/mycompany/myapp/service/LocationService.java",
    "contents_url": "https://api.github.com/repos/mouradmath/testmourad/contents/src/main/java/com/mycompany/myapp/service/LocationService.java?ref=3ef29c706da83225c229c1ddbf24f23fdd9c8e42",
    "patch": "@@ -0,0 +1,43 @@\n+package com.mycompany.myapp.service;\n+\n+import com.mycompany.myapp.domain.Location;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Service Interface for managing {@link Location}.\n+ */\n+public interface LocationService {\n+\n+    /**\n+     * Save a location.\n+     *\n+     * @param location the entity to save.\n+     * @return the persisted entity.\n+     */\n+    Location save(Location location);\n+\n+    /**\n+     * Get all the locations.\n+     *\n+     * @return the list of entities.\n+     */\n+    List<Location> findAll();\n+\n+\n+    /**\n+     * Get the \"id\" location.\n+     *\n+     * @param id the id of the entity.\n+     * @return the entity.\n+     */\n+    Optional<Location> findOne(Long id);\n+\n+    /**\n+     * Delete the \"id\" location.\n+     *\n+     * @param id the id of the entity.\n+     */\n+    void delete(Long id);\n+}"
  }
]
