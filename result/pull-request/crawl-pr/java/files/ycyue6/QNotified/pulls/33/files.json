[
  {
    "sha": "cf2596d28ef1e409283cde3139f6c7fc9f86ece4",
    "filename": "app/src/main/java/me/ketal/hook/ShowMsgAt.kt",
    "status": "modified",
    "additions": 33,
    "deletions": 12,
    "changes": 45,
    "blob_url": "https://github.com/ycyue6/QNotified/blob/5b934003017dd823ee7519a3de6582d11064a5ba/app/src/main/java/me/ketal/hook/ShowMsgAt.kt",
    "raw_url": "https://github.com/ycyue6/QNotified/raw/5b934003017dd823ee7519a3de6582d11064a5ba/app/src/main/java/me/ketal/hook/ShowMsgAt.kt",
    "contents_url": "https://api.github.com/repos/ycyue6/QNotified/contents/app/src/main/java/me/ketal/hook/ShowMsgAt.kt?ref=5b934003017dd823ee7519a3de6582d11064a5ba",
    "patch": "@@ -29,10 +29,12 @@ import android.text.style.ClickableSpan\n import android.view.View\n import android.view.ViewGroup\n import android.widget.TextView\n+import androidx.core.view.forEach\n import de.robv.android.xposed.XC_MethodHook\n import ltd.nextalone.util.findHostView\n import me.ketal.dispacher.OnBubbleBuilder\n import me.singleneuron.qn_kernel.data.MsgRecordData\n+import me.singleneuron.qn_kernel.data.MsgRecordData.Companion.MSG_TYPE_REPLY_TEXT\n import me.singleneuron.qn_kernel.data.MsgRecordData.Companion.MSG_TYPE_TEXT\n import me.singleneuron.qn_kernel.data.hostInfo\n import nil.nadph.qnotified.MainHook\n@@ -54,27 +56,46 @@ object ShowMsgAt : CommonDelayableHook(\"Ketal_HideTroopLevel\"), OnBubbleBuilder\n         val extStr = chatMessage.extStr ?: return\n         val json = JSONObject(extStr)\n         if (json.has(\"troop_at_info_list\")) {\n+            val at = JSONArray(json[\"troop_at_info_list\"] as String)\n             when (chatMessage.msgType) {\n-                MSG_TYPE_TEXT -> {\n-                    val textView = rootView.findHostView<TextView>(\"chat_item_content_layout\")!!\n-                    val at = JSONArray(json[\"troop_at_info_list\"] as String)\n-                    val spannableString = SpannableString(textView.text)\n-                    for (i in 0 until at.length()) {\n-                        val con = at[i] as JSONObject\n-                        val uin = con[\"uin\"].toString().toLong()\n-                        val start = con[\"startPos\"] as Int\n-                        val length = con[\"textLen\"] as Int\n-                        spannableString.setSpan(OpenQQSpan(uin), start, start + length, Spannable.SPAN_EXCLUSIVE_INCLUSIVE)\n+                MSG_TYPE_TEXT, // TODO MSG_TYPE_MIX,\n+                MSG_TYPE_REPLY_TEXT -> {\n+                    when (val content = rootView.findHostView<View>(\"chat_item_content_layout\")!!) {\n+                        is TextView -> {\n+                            copeAtInfo(content, at)\n+                        }\n+                        is ViewGroup -> {\n+                            content.forEach {\n+                                if (it is TextView)\n+                                    copeAtInfo(it, at)\n+                            }\n+                        }\n+                        else -> {\n+                            Utils.logd(\"暂不支持的控件类型--->$content\")\n+                            return\n+                        }\n                     }\n-                    textView.text = spannableString\n-                    textView.movementMethod = LinkMovementMethod.getInstance()\n                 }\n                 else -> {\n                     Utils.logd(\"暂不支持的消息类型--->${chatMessage.msgType}\")\n+                    return\n                 }\n             }\n         }\n     }\n+\n+    private fun copeAtInfo(textView: TextView, at: JSONArray) {\n+        val spannableString = SpannableString(textView.text)\n+        for (i in 0 until at.length()) {\n+            val con = at[i] as JSONObject\n+            val uin = con[\"uin\"].toString().toLong()\n+            val start = con[\"startPos\"] as Int\n+            val length = con[\"textLen\"] as Int\n+            spannableString.setSpan(OpenQQSpan(uin), start, start + length, Spannable.SPAN_EXCLUSIVE_INCLUSIVE)\n+        }\n+        textView.text = spannableString\n+        textView.movementMethod = LinkMovementMethod.getInstance()\n+    }\n }\n \n class OpenQQSpan(val qq: Long) : ClickableSpan() {"
  }
]
