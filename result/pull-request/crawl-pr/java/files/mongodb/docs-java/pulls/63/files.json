[
  {
    "sha": "c74f20663a4ef71968bc2ac790180db6e1564a48",
    "filename": "source/fundamentals/builders/updates.txt",
    "status": "modified",
    "additions": 508,
    "deletions": 0,
    "changes": 508,
    "blob_url": "https://github.com/mongodb/docs-java/blob/6cda1e6d64714f0b44f4325607e540e72f4c0817/source/fundamentals/builders/updates.txt",
    "raw_url": "https://github.com/mongodb/docs-java/raw/6cda1e6d64714f0b44f4325607e540e72f4c0817/source/fundamentals/builders/updates.txt",
    "contents_url": "https://api.github.com/repos/mongodb/docs-java/contents/source/fundamentals/builders/updates.txt?ref=6cda1e6d64714f0b44f4325607e540e72f4c0817",
    "patch": "@@ -11,3 +11,511 @@ Updates Builders\n    :class: singlecol\n \n .. _updates-builders:\n+\n+Overview \n+--------\n+\n+This guide shows you how to specify **updates** using the Java Driver\n+:doc:`builders </fundamentals/builders/>`. Update builders provide\n+helper methods for the following types of updates:\n+\n+- :ref:`Field Updates <field_updates>`\n+- :ref:`Array Updates <array_updates>`\n+- :ref:`Combining Multiple Update Operators <multiple_updates>`\n+\n+Some methods that expect updates are:\n+\n+- updateOne()\n+- updateMany()\n+- bulkWrite()\n+\n+The :java-core-api:`Updates <com/mongodb/client/model/Updates.html>`\n+class provides static factory methods for all the MongoDB update\n+operators. Each method returns an instance of the :ref:`Bson <bson>`\n+type, which you can pass to any method that expects an update argument.\n+\n+.. tip::\n+\n+   For brevity, you may choose to import the methods of the ``Updates`` class statically:\n+\n+   .. code-block:: java\n+\n+      import static com.mongodb.client.model.Updates.*;\n+\n+   The examples below assume this static import.\n+\n+The examples in this guide use the following document: \n+\n+.. code-block:: json\n+\n+   {\n+       \"_id\": 1, \n+       \"color\": \"red\", \n+       \"qty\": 5, \n+       \"vendor\": [ \"A\", \"D\", \"M\" ], \n+       \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+.. _field_updates:\n+\n+Field Updates\n+-------------\n+\n+Set\n+~~~\n+\n+Use the :java-core-api:`set() <com/mongodb/client/model/Updates.html#set(java.lang.String,TItem)>`\n+method to assign the value of a field in an update operation.\n+\n+The following example sets the value of the ``qty`` field to \"11\": \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin setUpdate\n+   :end-before: end setUpdate\n+\n+The example above updates the original document to the following state:\n+\n+.. code-block:: json\n+   :copyable: false\n+\n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 11, \n+      \"vendor\": [ \"A\", \"D\", \"M\" ], \n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Unset\n+~~~~~\n+Use the :java-core-api:`unset() <com/mongodb/client/model/Updates.html#unset(java.lang.String)>` method\n+to delete the value of a field in an update operation.\n+\n+The following example deletes the ``qty`` field:\n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin unsetUpdate\n+   :end-before: end unsetUpdate\n+\n+The example above updates the original document to the following state:\n+   \n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"vendor\": [ \"A\", \"D\", \"M\" ], \n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Set On Insert\n+~~~~~~~~~~~~~\n+Use the :java-core-api:`setOnInsert() <com/mongodb/client/model/Updates.html#setOnInsert(java.lang.String,TItem)>`\n+method to assign the value of a field in an update operation on an\n+insert of a document.\n+\n+The following example sets the value of the ``qty`` field to \"5\"\n+if an upsert resulted in the insert of a document: \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin setOnInsertUpdate\n+   :end-before: end setOnInsertUpdate\n+\n+The example above updates the original document to the following state:\n+   \n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 5, \n+      \"vendor\": [ \"A\", \"D\", \"M\" ], \n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+.. note::\n+\n+   If the document is not inserted, no change will occur.\n+\n+Increment\n+~~~~~~~~~\n+Use the :java-core-api:`inc() <com/mongodb/client/model/Updates.html#inc(java.lang.String,java.lang.Number)>`\n+method to increment the value of a numeric field in an update operation.\n+\n+The following example increments the value of the ``qty`` field by\n+\"3\": \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin incUpdate\n+   :end-before: end incUpdate\n+\n+The example above updates the original document to the following state:\n+   \n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 8, \n+      \"vendor\": [ \"A\", \"D\", \"M\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Multiply\n+~~~~~~~~\n+Use the :java-core-api:`mul() <com/mongodb/client/model/Updates.html#mul(java.lang.String,java.lang.Number)>`\n+method to multiply the value of a numeric field in an update operation.\n+\n+The following example multiplies the value of the ``qty`` field by\n+\"2\": \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin mulUpdate\n+   :end-before: end mulUpdate\n+\n+The example above updates the original document to the following state:\n+   \n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 10, \n+      \"vendor\": [ \"A\", \"D\", \"M\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Rename\n+~~~~~~\n+Use the :java-core-api:`rename() <com/mongodb/client/model/Updates.html#rename(java.lang.String,java.lang.String)>`\n+method to rename the value of a field in an update operation.\n+\n+The following example renames the ``qty`` field to \"quantity\":\n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin renameUpdate\n+   :end-before: end renameUpdate\n+   \n+The example above updates the document to the following state:\n+   \n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1,\n+      \"color\": \"red\", \"\n+      vendor\": [ \"A\", \"D\", \"M\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\"), \n+      \"quantity\": 5\n+   }\n+\n+Min\n+~~~\n+Use the :java-core-api:`min() <com/mongodb/client/model/Updates.html#min(java.lang.String,TItem)>`\n+method to update the value of a field with the smaller number of the two\n+specified in an update operation.\n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin minUpdate\n+   :end-before: end minUpdate\n+\n+The example above updates the document to the following state:\n+   \n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      qty\": 2, \n+      \"vendor\": [ \"A\", \"D\", \"M\" ], \n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Max\n+~~~\n+Use the :java-core-api:`max() <com/mongodb/client/model/Updates.html#max(java.lang.String,TItem)>`\n+method to update the value of a field with the larger number of the two\n+specified in an update operation.\n+\n+The following example sets the value of the ``qty`` field to the\n+maximum of its current value and \"8\": \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin maxUpdate\n+   :end-before: end maxUpdate\n+\n+The example above updates the document to the following state:\n+   \n+.. code-block:: json\n+  :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 8, \n+      \"vendor\": [ \"A\", \"D\", \"M\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Current Date\n+~~~~~~~~~~~~\n+Use the :java-core-api:`currentDate() <com/mongodb/client/model/Updates.html#currentDate(java.lang.String)>`\n+method to assign the value of a field in an update operation to the\n+current date as a :manual:`date </reference/bson-types/#document-bson-type-date>`\n+or :manual:`timestamp <reference/bson-types/#document-bson-type-timestamp>`.\n+\n+The following example sets the value of the ``lastModified`` field to\n+the current date as a BSON date type:\n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin currentDateUpdate\n+   :end-before: end currentDateUpdate\n+\n+The example above updates the document to the following state:\n+   \n+.. code-block:: json\n+  :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 5, \n+      \"vendor\": [ \"A\", \"D\", \"M\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T15:33:54.136Z\")\n+   }\n+\n+Bit\n+~~~\n+Use the :java-core-api:`bitwiseOr() <com/mongodb/client/model/Updates.html#bitwiseOr(java.lang.String,int)>`,\n+:java-core-api:`bitwiseAnd() <com/mongodb/client/model/Updates.html#bitwiseAnd(java.lang.String,int)>`,\n+and :java-core-api:`bitwiseXor() <com/mongodb/client/model/Updates.html#bitwiseXor(java.lang.String,int)>`\n+methods to perform a bitwise update of the integral value of a field in\n+an update operation. \n+\n+The following example performs a bitwise AND between the number\n+\"10\" and the integral value of the ``qty`` field: \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin bitwiseOrUpdate\n+   :end-before: end bitwiseOrUpdate\n+   \n+The bitwise operation results in 15:\n+\n+.. code-block:: none\n+   :copyable: false\n+   \n+   0101\n+   1010\n+   ----\n+   1111\n+\n+The example above updates the document to the following state:\n+\n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 15,\n+      \"vendor\": [ \"A\", \"D\", \"M\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+.. _array_updates:\n+\n+Array Updates\n+-------------\n+\n+Add to Set\n+~~~~~~~~~~\n+Use the :java-core-api:`addToSet() <com/mongodb/client/model/Updates.html#addToSet(java.lang.String,TItem)>`\n+method to append a value to an array if the value is not already present\n+in an update operation. \n+\n+The following example adds the value \"C\" to the array value of\n+the ``vendor`` field: \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin addToSetUpdate\n+   :end-before: end addToSetUpdate\n+\n+The example above updates the document to the following state:\n+   \n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 5, \n+      \"vendor\": [ \"A\", \"D\", \"M\", \"C\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Pop\n+~~~\n+Use the :java-core-api:`popFirst() <com/mongodb/client/model/Updates.html#popFirst(java.lang.String)>`\n+method to remove the first element of an array and the\n+:java-core-api:`popLast() <com/mongodb/client/model/Updates.html#popLast(java.lang.String)>`\n+method to remove the last element of an array in an update operation. \n+\n+The following example pops the first element off of the array value\n+of the ``vendor`` field:  \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin popFirstUpdate\n+   :end-before: end popFirstUpdate\n+\n+The example above updates the document to the following state:\n+   \n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 5, \n+      \"vendor\": [ \"D\", \"M\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Pull All\n+~~~~~~~~\n+Use the :java-core-api:`pullAll() <com/mongodb/client/model/Updates.html#pullAll(java.lang.String,java.util.List)>`\n+method to remove all instances of values from an existing array in\n+an update operation. \n+\n+The following example removes vendor \"A\" and \"M\" from the ``vendor`` array: \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin pullAllUpdate\n+   :end-before: end pullAllUpdate\n+\n+The example above updates the document to the following state:\n+   \n+.. code-block:: json\n+  :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 5, \n+      \"vendor\": [ \"D\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Pull\n+~~~~\n+Use the :java-core-api:`pull() <com/mongodb/client/model/Updates.html#pull(java.lang.String,TItem)>`\n+method to remove all instances of a value from an existing array in\n+an update operation. \n+\n+The following example removes the value \"D\" from the ``vendor``\n+array: \n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin pullUpdate\n+   :end-before: end pullUpdate\n+\n+The example above updates the document to the following state:\n+   \n+.. code-block:: json\n+  :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 5, \n+      \"vendor\": [ \"A\", \"M\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+Push\n+~~~~\n+Use the :java-core-api:`push() <com/mongodb/client/model/Updates.html#push(java.lang.String,TItem)>`\n+method to append a value to an array in an update operation.\n+\n+The following examples pushes \"C\" to the ``vendor`` array:\n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin pushUpdate\n+   :end-before: end pushUpdate\n+\n+The example above updates the document to the following state:\n+\n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"red\", \n+      \"qty\": 5, \n+      \"vendor\": [ \"A\", \"D\", \"M\", \"C\" ],\n+      \"lastModified\" = 2ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }\n+\n+.. _multiple_updates:\n+\n+Combining Multiple Update Operators\n+-----------------------------------\n+An application can update multiple fields of a single document by\n+combining two or more of the update operators described above. \n+\n+The following example increments the value of the ``qty`` field by \"6\", sets\n+the value of the ``color`` field to \"purple\", and pushes \"R\" to\n+the ``vendor`` field:\n+\n+.. literalinclude:: /includes/fundamentals/code-snippets/builders/Updates.java\n+   :language: java\n+   :dedent:\n+   :start-after: begin combineUpdate\n+   :end-before: end combineUpdate\n+\n+The example above updates the document to the following state:\n+   \n+.. code-block:: json\n+   :copyable: false\n+      \n+   {\n+      \"_id\": 1, \n+      \"color\": \"purple\", \n+      \"qty\": 11, \n+      \"vendor\": [ \"A\", \"D\", \"M\", \"R\" ],\n+      \"lastModified\" = ISODate(\"2021-03-05T00:00:00.000Z\")\n+   }"
  },
  {
    "sha": "956e4bc24ca4b319507af1fddcab80de342586a8",
    "filename": "source/includes/fundamentals/code-snippets/builders/Updates.java",
    "status": "added",
    "additions": 264,
    "deletions": 0,
    "changes": 264,
    "blob_url": "https://github.com/mongodb/docs-java/blob/6cda1e6d64714f0b44f4325607e540e72f4c0817/source/includes/fundamentals/code-snippets/builders/Updates.java",
    "raw_url": "https://github.com/mongodb/docs-java/raw/6cda1e6d64714f0b44f4325607e540e72f4c0817/source/includes/fundamentals/code-snippets/builders/Updates.java",
    "contents_url": "https://api.github.com/repos/mongodb/docs-java/contents/source/includes/fundamentals/code-snippets/builders/Updates.java?ref=6cda1e6d64714f0b44f4325607e540e72f4c0817",
    "patch": "@@ -0,0 +1,264 @@\n+package docs.builders;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.client.model.UpdateOptions;\n+\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.text.ParsePosition;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+\n+import static com.mongodb.client.model.Updates.*;\n+import static com.mongodb.client.model.Filters.*;\n+import static com.mongodb.client.model.UpdateOptions.*;\n+\n+public class Updates {\n+\n+    private final MongoCollection<Document> collection;\n+    private final MongoClient mongoClient;\n+    private final MongoDatabase database;\n+\n+    private Updates() {\n+        // begin declaration\n+        final String uri = System.getenv(\"DRIVER_REF_URI\");\n+\n+        mongoClient = MongoClients.create(uri);\n+        database = mongoClient.getDatabase(\"builders\");\n+        collection = database.getCollection(\"updates\");\n+        // end declaration\n+    }\n+\n+    public static void main(String[] args) {\n+        Updates updates = new Updates();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"setUpdate:\");\n+        updates.setUpdate();\n+        updates.resetCollection(updates);\n+        \n+        System.out.println(\"unsetUpdate:\");\n+        updates.unsetUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"setOnInsertUpdate:\");\n+        updates.setOnInsertUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"incUpdate:\");\n+        updates.incUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"mulUpdate:\");\n+        updates.mulUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"renameUpdate:\");\n+        updates.renameUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"minUpdate:\");\n+        updates.minUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"maxUpdate:\");\n+        updates.maxUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"currentDateUpdate:\");\n+        updates.currentDateUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"bitwiseOrUpdate:\");\n+        updates.bitwiseOrUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"addToSetUpdate:\");\n+        updates.addToSetUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"popFirstUpdate:\");\n+        updates.popFirstUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"pullAllUpdate:\");\n+        updates.pullAllUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"pullUpdate:\");\n+        updates.pullUpdate();\n+        updates.resetCollection(updates);\n+        \n+        System.out.println(\"pushUpdate:\");\n+        updates.pushUpdate();\n+        updates.resetCollection(updates);\n+\n+        System.out.println(\"combineUpdate:\");\n+        updates.combineUpdate();\n+        updates.resetCollection(updates);\n+\n+    }\n+\n+    private void setUpdate() {\n+        // begin setUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = set(\"qty\", 11);\n+        collection.updateOne(filter, update);\n+        // end setUpdate\n+    }\n+    private void unsetUpdate() {\n+        // begin unsetUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = unset(\"qty\");\n+        collection.updateOne(filter, update);\n+        // end unsetUpdate\n+    }\n+\n+    private void setOnInsertUpdate() {\n+        // begin setOnInsertUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = setOnInsert(\"qty\", 7);\n+        collection.updateOne(filter, update, new UpdateOptions().upsert(true));\n+        // end setOnInsertUpdate\n+    }\n+\n+    private void incUpdate() {\n+        // begin incUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = inc(\"qty\", 3);\n+        collection.updateOne(filter, update);\n+        // end incUpdate\n+    }\n+\n+    private void mulUpdate() {\n+        // begin mulUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = mul(\"qty\", 2);\n+        collection.updateOne(filter, update);\n+        // end mulUpdate\n+    }\n+\n+    private void renameUpdate() {\n+        // begin renameUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = rename(\"qty\", \"quantity\");\n+        collection.updateOne(filter, update);\n+        // end renameUpdate\n+    }\n+\n+    private void minUpdate() {\n+        // begin minUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = min(\"qty\", 2);\n+        collection.updateOne(filter, update);\n+        // end minUpdate\n+    }\n+\n+    private void maxUpdate() {\n+        // begin maxUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = max(\"qty\", 8);\n+        collection.updateOne(filter, update);\n+        // end maxUpdate\n+    }\n+\n+    private void currentDateUpdate() {\n+        // begin currentDateUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = currentDate(\"lastModified\");\n+        collection.updateOne(filter, update);\n+        // end currentDateUpdate\n+    }\n+\n+    private void bitwiseOrUpdate() {\n+        // begin bitwiseOrUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = bitwiseOr(\"qty\", 10);\n+        collection.updateOne(filter, update);\n+        // end bitwiseOrUpdate\n+    }\n+\n+    private void addToSetUpdate() {\n+        // begin addToSetUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = addToSet(\"vendor\", \"C\");\n+        collection.updateOne(filter, update);\n+        // end addToSetUpdate\n+    }\n+\n+    private void popFirstUpdate() {\n+        // begin popFirstUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = popFirst(\"vendor\");\n+        collection.updateOne(filter, update);\n+        // end popFirstUpdate\n+    }\n+\n+    private void pullAllUpdate() {\n+        // begin pullAllUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = pullAll(\"vendor\", Arrays.asList(\"A\", \"M\"));\n+        collection.updateOne(filter, update);\n+        // end pullAllUpdate\n+    }\n+\n+    private void pullUpdate() {\n+        // begin pullUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = pull(\"vendor\", \"D\");\n+        collection.updateOne(filter, update);\n+        // end pullUpdate\n+    }\n+\n+    private void pushUpdate() {\n+        // begin pushUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = push(\"vendor\", \"C\");\n+        collection.updateOne(filter, update);\n+        // end pushUpdate\n+    }\n+\n+    private void combineUpdate() {\n+        // begin combineUpdate\n+        Bson filter = eq(\"_id\", 1);\n+        Bson update = combine(set(\"color\", \"purple\"), inc(\"qty\", 6), push(\"vendor\", \"R\"));\n+        collection.updateOne(filter, update);\n+        // end combineUpdate\n+    }\n+\n+    private void preview(){\n+        Bson filter = new Document();\n+        List<Document> res = new ArrayList();\n+        System.out.println(collection.find(filter).into(res));\n+    }\n+\n+    public void resetCollection(Updates updates){\n+        updates.preview();\n+        collection.drop();\n+        updates.setupCollection();\n+    }\n+\n+    private void setupCollection() {\n+        String [] vendors = {\"A\", \"D\", \"M\"};\n+        List<String> vendor_list = Arrays.asList(vendors);\n+\n+        String today = \"03/05/2021\";\n+        Date lastModified = new SimpleDateFormat(\"MM/dd/yyyy\").parse(today,  new ParsePosition(0));\n+\n+        Document demoDocument = new Document(\"_id\", 1)\n+                                .append(\"color\", \"red\")\n+                                .append(\"qty\", 5)\n+                                .append(\"vendor\", vendor_list)\n+                                .append(\"lastModified\", lastModified);\n+\n+        collection.insertOne(demoDocument);\n+\n+    }\n+}"
  }
]
