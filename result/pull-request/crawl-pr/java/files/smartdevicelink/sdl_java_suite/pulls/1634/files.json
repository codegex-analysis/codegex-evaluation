[
  {
    "sha": "f9c6cdfd356e3558a0ab773df18a04e8f22f6c5f",
    "filename": ".gitmodules",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/.gitmodules",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/.gitmodules",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/.gitmodules?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -1,4 +1,4 @@\n [submodule \"generator/rpc_spec\"]\n \tpath = generator/rpc_spec\n \turl = https://github.com/smartdevicelink/rpc_spec.git\n-\tbranch = master\n+\tbranch = develop"
  },
  {
    "sha": "e9fc24953d889181db9ae5ad74ec02200cb20716",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 43,
    "deletions": 75,
    "changes": 118,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/CHANGELOG.md",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/CHANGELOG.md?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -1,127 +1,95 @@\n-# 5.0.0 Release Notes\n+# 5.1.0 Release Notes\n \n ## Summary:\n ||Version|\n |--|--|\n-| **Protocol** | 5.3.0\n-| **RPC** | 7.0.0\n-| **Tested Targeting** | Android 29\n+| **Protocol** | 5.4.0\n+| **RPC** | 7.1.0\n+| **Tested Targeting** | Android 30\n \n ## Features:\n \n-- [[SDL 0242] Subtle Alert Style](https://github.com/smartdevicelink/sdl_java_suite/issues/1120)\n+- [[SDL 0296] Possibility to update video streaming capabilities during ignition cycle](https://github.com/smartdevicelink/sdl_java_suite/issues/1410)\n \n-- [[SDL 0278] Screen Manager Template Management](https://github.com/smartdevicelink/sdl_java_suite/issues/1327)\n+- [[SDL 0282] Screen Manager Alert Manager](https://github.com/smartdevicelink/sdl_java_suite/issues/1304)\n \n-- [[SDL 0148] Template Improvements: Additional SubMenus](https://github.com/smartdevicelink/sdl_java_suite/issues/716)\n+- [[SDL 0269] New vehicle data ClimateData ](https://github.com/smartdevicelink/sdl_java_suite/issues/1247)\n \n-- [[SDL 0268] Main Menu Updating and Pagination](https://github.com/smartdevicelink/sdl_java_suite/issues/1254)\n+- [[SDL 0262] New vehicle data SeatOccupancy](https://github.com/smartdevicelink/sdl_java_suite/issues/1240)\n \n-- [[SDL 0152] Driver Distraction Improvements: Command List Limitations](https://github.com/smartdevicelink/sdl_java_suite/issues/729)\n+- [[SDL 0198] - Media Skip Indicators](https://github.com/smartdevicelink/sdl_java_suite/issues/871)\n \n-- [[SDL 0311] Make RPC Setters Chainable](https://github.com/smartdevicelink/sdl_java_suite/issues/1421)\n-\n-- [[SDL 0308] Add a Reason Parameter to All Protocol NAKs](https://github.com/smartdevicelink/sdl_java_suite/issues/1379)\n-\n-- [[SDL 0253] New vehicle data StabilityControlsStatus](https://github.com/smartdevicelink/sdl_java_suite/issues/1204)\n-\n-- [[SDL 0266] New vehicle data GearStatus](https://github.com/smartdevicelink/sdl_java_suite/issues/1256)\n-\n-- [[SDL 0261] New vehicle data WindowStatus](https://github.com/smartdevicelink/sdl_java_suite/issues/1243)\n-\n-- [[SDL 0257] New vehicle data HandsOffSteering](https://github.com/smartdevicelink/sdl_java_suite/issues/1224)\n-\n-- [[SDL 0256] Refactor Fuel Information Related Vehicle Data](https://github.com/smartdevicelink/sdl_java_suite/issues/1223)\n-\n-- [[SDL 0273] WebEngine Projection mode](https://github.com/smartdevicelink/sdl_java_suite/issues/1375)\n-\n-- [[SDL 0202] Supported Character Sets](https://github.com/smartdevicelink/sdl_java_suite/issues/950)\n \n ## Enhancements:\n \n-- [[SDL 0286] Java Suite Cleanup](https://github.com/smartdevicelink/sdl_java_suite/issues/1306)\n+- [[SDL 0180] Broaden Choice Uniqueness](https://github.com/smartdevicelink/sdl_java_suite/issues/811)\n \n-- [Android X support](https://github.com/smartdevicelink/sdl_java_suite/issues/1094)\n+- [[SDL 0305] Homogenize TextFieldName](https://github.com/smartdevicelink/sdl_java_suite/issues/1367)\n \n-- [RPC Generator should use @deprecated annotation in JavaDocs when applicable](https://github.com/smartdevicelink/sdl_java_suite/issues/1448)\n+- [[SDL 0238] Keyboard Enhancements](https://github.com/smartdevicelink/sdl_java_suite/issues/1121)\n \n-- [RPC Generator needs to be updated to generate correct Android X imports](https://github.com/smartdevicelink/sdl_java_suite/issues/1444)\n+- [[SDL 0267] Main Menu UI Updates](https://github.com/smartdevicelink/sdl_java_suite/issues/1246)\n \n-- [onError should be removed from OnRPCResponseListener](https://github.com/smartdevicelink/sdl_java_suite/issues/1455)\n+- [[SDL 0274] Add preferred FPS to VideoStreamingCapability](https://github.com/smartdevicelink/sdl_java_suite/issues/1268)\n \n-- [SystemCapabilityManager & HapticInterfaceManager should be moved to the managers package](https://github.com/smartdevicelink/sdl_java_suite/issues/1432)\n+- [[SDL 0292] Improve VirtualDisplayEncoder for stable frame rate](https://github.com/smartdevicelink/sdl_java_suite/issues/1361)\n \n-- [[SDL 0193] Update SDL-Android minimum SDK](https://github.com/smartdevicelink/sdl_java_suite/issues/835)\n+- [[SDL 0255] Enhance BodyInformation vehicle data ](https://github.com/smartdevicelink/sdl_java_suite/issues/1234)\n \n-- [Refactor Text & Graphic Manager](https://github.com/smartdevicelink/sdl_java_suite/issues/1464)\n+- [[SDL 0244] Custom Playback Rates for SetMediaClockTimer](https://github.com/smartdevicelink/sdl_java_suite/issues/1147)\n \n-- [Refactor session and protocol interfaces](https://github.com/smartdevicelink/sdl_java_suite/pull/1430)\n+- [Refactor FileManager to use queues ](https://github.com/smartdevicelink/sdl_java_suite/issues/1572)\n \n-- [Remove SdlProxy classes](https://github.com/smartdevicelink/sdl_java_suite/pull/1471)\n+- [Taskmaster should be updated to the latest version](https://github.com/smartdevicelink/sdl_java_suite/issues/1589)\n \n-- [Remove FrameData Class](https://github.com/smartdevicelink/sdl_java_suite/pull/1466)\n+- [Refactor VoiceCommandManager to use queues](https://github.com/smartdevicelink/sdl_java_suite/issues/1549)\n \n-- [Two StreamPacketizer classes](https://github.com/smartdevicelink/sdl_java_suite/issues/1272)\n+- [[SDL 0323] - Align video streaming parameters with VideoStreamingCapability](https://github.com/smartdevicelink/sdl_java_suite/issues/1569)\n \n-- [SdlFile in javaSE should have a constructor that takes URI as file source](https://github.com/smartdevicelink/sdl_java_suite/issues/1469)\n+- [[SDL 0285] ShowConstantTBT Description Update](https://github.com/smartdevicelink/sdl_java_suite/issues/1573)\n \n-- [The default value for overwrite property in SdlFile should be false to align with iOS ](https://github.com/smartdevicelink/sdl_java_suite/issues/1451)\n \n-- [Deprecated RPC APIs that don't exist in the spec should be removed ](https://github.com/smartdevicelink/sdl_java_suite/issues/1446)\n-\n-- [[SDL 0200] - Removing URL Parameter Max Length](https://github.com/smartdevicelink/sdl_java_suite/issues/906)\n-\n-- [Integration validator](https://github.com/smartdevicelink/sdl_java_suite/pull/1436)\n-\n-- [Gradle dependencies needs to be updates](https://github.com/smartdevicelink/sdl_java_suite/issues/1459)\n-\n-- [BSON library should be updated to the latest version (1.2.2)](https://github.com/smartdevicelink/sdl_java_suite/issues/1542)\n-\n-- [Update Project Documentation in README](https://github.com/smartdevicelink/sdl_java_suite/issues/1534)\n+## Bug Fixes:\n \n-- [Feature/lockscreen ui testing](https://github.com/smartdevicelink/sdl_java_suite/pull/1527)\n+- [Empty string bug with Menu Cell](https://github.com/smartdevicelink/sdl_java_suite/issues/1623)\n \n-## Bug Fixes:\n+- [CRC is not set for PutFile in FileManager](https://github.com/smartdevicelink/sdl_java_suite/issues/1622)\n \n-- [LockScreen behavior is incorrect for Display Always and Dismissible](https://github.com/smartdevicelink/sdl_java_suite/issues/1515)\n+- [Fix spelling of \"auxillary\" in StaticIconName.java](https://github.com/smartdevicelink/sdl_java_suite/issues/1632)\n \n-- [NPE with SoftButtonCapabilities using Core](https://github.com/smartdevicelink/sdl_java_suite/issues/1499)\n+- [Main Menu UI Updates Don't Take TextFieldName / ImageFieldName into account](https://github.com/smartdevicelink/sdl_java_suite/issues/1628)\n \n-- [NPE Enum doesn't exist](https://github.com/smartdevicelink/sdl_java_suite/issues/1495)\n+- [Choice set default timeout needs to have the same behavior as the AlertManager and needs to be aligned with iOS](https://github.com/smartdevicelink/sdl_java_suite/issues/1630)\n \n-- [NullPointerException While updating Image/Text after layout Change.](https://github.com/smartdevicelink/sdl_java_suite/issues/1465)\n+- [@deprecated annotation in class Javadoc makes the whole class marked as deprecated ](https://github.com/smartdevicelink/sdl_java_suite/issues/1626)\n \n-- [javaSE and javaEE links in the readme file don't reference the latest version of the library ](https://github.com/smartdevicelink/sdl_java_suite/issues/1449)\n+- [SDL failed to start video streaming if users enable WiFi on the head unit after the NaviAPP is activated](https://github.com/smartdevicelink/sdl_java_suite/issues/1235)\n \n-- [ScreenManager doesn't work when app register on backup transport](https://github.com/smartdevicelink/sdl_java_suite/issues/1518)\n+- [SDL failed to start video streaming if users enable WiFi on the phone later 150s after the NaviAPP is activated](https://github.com/smartdevicelink/sdl_java_suite/issues/1236)\n \n-- [Difficult to import sdl_android as source library](https://github.com/smartdevicelink/sdl_java_suite/issues/1048)\n+- [Missing permission check in IntegrationValidator](https://github.com/smartdevicelink/sdl_java_suite/issues/1615)\n \n-- [Some cloud apps fail to download icons ](https://github.com/smartdevicelink/sdl_java_suite/issues/1513)\n+- [OnRPCNotificationListener for ON_Button_Press JavaSE ](https://github.com/smartdevicelink/sdl_java_suite/issues/1397)\n \n-- [ANRs (Application Not Responding) occur when switching from App1 to App2 on HU.](https://github.com/smartdevicelink/sdl_java_suite/issues/1398)\n+- [Remove Refresh Handler from SdlRemoteDisplay](https://github.com/smartdevicelink/sdl_java_suite/issues/858)\n \n-- [Lists with initial values of null are not returned properly in RPCs](https://github.com/smartdevicelink/sdl_java_suite/issues/1473)\n+- [New thread is started for every decode operation in AudioDecoderCompat](https://github.com/smartdevicelink/sdl_java_suite/issues/1596)\n \n-- [ClassCastException when calling RPC getter method returning Float type](https://github.com/smartdevicelink/sdl_java_suite/issues/1407)\n+- [Tests fail because current code state doesn't match MOBILE_API](https://github.com/smartdevicelink/sdl_java_suite/issues/1597)\n \n-- [TransportManager.exitLegacyMode () : NullPointerException ](https://github.com/smartdevicelink/sdl_java_suite/issues/1412)\n+- [Only auto-overwrite non-persistent files on RPC v4.3 and below](https://github.com/smartdevicelink/sdl_java_suite/issues/1580)\n \n-- [RPC Generator is not generating the corresponding Javadoc for min & max attributes ](https://github.com/smartdevicelink/sdl_java_suite/issues/1438)\n+- [Avoid re-uploading blank artwork](https://github.com/smartdevicelink/sdl_java_suite/issues/1579)\n \n-- [RPC Generator is generating enum values with wrong capitalization](https://github.com/smartdevicelink/sdl_java_suite/issues/1425)\n+- [OnServiceError for Nav and PCM is called even if no service from that type is started](https://github.com/smartdevicelink/sdl_java_suite/issues/1574)\n \n-- [RPC generator strips text after @TODO](https://github.com/smartdevicelink/sdl_java_suite/issues/1506)\n+- [Setting a `SDLArtwork`'s `overwrite` property to true does not work with screen manager](https://github.com/smartdevicelink/sdl_java_suite/issues/1346)\n \n-- [Some RPCs in the code do not exactly match the spec](https://github.com/smartdevicelink/sdl_java_suite/issues/1545)\n+- [Supporting devices with SDL 2.0.0](https://github.com/smartdevicelink/sdl_java_suite/issues/1541)\n \n-- [Fix issue in setting MediaTrack in the T&G manager](https://github.com/smartdevicelink/sdl_java_suite/pull/1544)\n+- [Gradle 4.1 compatibility issues ](https://github.com/smartdevicelink/sdl_java_suite/issues/1551)\n \n-- [There are a few deprecated functions that don't link to the correct function](https://github.com/smartdevicelink/sdl_java_suite/issues/1536)\n+- [BitConverter NullPointerExeptions](https://github.com/smartdevicelink/sdl_java_suite/issues/193)\n \n-- [Some cloud apps fail to download icons](https://github.com/smartdevicelink/sdl_java_suite/issues/1513)\n- \n-- [Fix inconsistency with HMICapabilities API names](https://github.com/smartdevicelink/sdl_java_suite/pull/1508)\n \n-- [LockScreen behavior is incorrect for Display Always and Dismissible](https://github.com/smartdevicelink/sdl_java_suite/issues/1515)\n "
  },
  {
    "sha": "f3ef53f289642c8cd0e2230e5053cc213c7ba3f2",
    "filename": "VERSION",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/VERSION",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/VERSION",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/VERSION?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -1 +1 @@\n-5.0.0\n+RC_5.1.0"
  },
  {
    "sha": "e18f5832220b28480081ab25601e5c31a8efb2db",
    "filename": "android/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/build.gradle",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/build.gradle",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/build.gradle?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -7,7 +7,7 @@ buildscript {\n         jcenter()\n     }\n     dependencies {\n-        classpath 'com.android.tools.build:gradle:4.0.1'\n+        classpath 'com.android.tools.build:gradle:4.1.1'\n         \n \n         // NOTE: Do not place your application dependencies here; they belong"
  },
  {
    "sha": "d62774b2316e86752d67e0b9d99fd7bf6518c2b2",
    "filename": "android/gradle/wrapper/gradle-wrapper.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/gradle/wrapper/gradle-wrapper.properties",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/gradle/wrapper/gradle-wrapper.properties",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/gradle/wrapper/gradle-wrapper.properties?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -1,6 +1,6 @@\n-#Wed Aug 19 13:26:39 EDT 2020\n+#Fri Nov 06 10:04:32 EST 2020\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-6.1.1-all.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-6.5-all.zip"
  },
  {
    "sha": "7640e89c50666b3e9bbca8382f1e1dba99bc2f8b",
    "filename": "android/hello_sdl_android/build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/hello_sdl_android/build.gradle",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/hello_sdl_android/build.gradle",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/hello_sdl_android/build.gradle?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -1,11 +1,11 @@\n apply plugin: 'com.android.application'\n \n android {\n-    compileSdkVersion 29\n+    compileSdkVersion 30\n     defaultConfig {\n         applicationId \"com.sdl.hellosdlandroid\"\n         minSdkVersion 16\n-        targetSdkVersion 29\n+        targetSdkVersion 30\n         versionCode 1\n         versionName \"1.0\"\n         testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'"
  },
  {
    "sha": "c6e9ce3efe9537875652a5194386f341f85b2454",
    "filename": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java",
    "status": "modified",
    "additions": 26,
    "deletions": 12,
    "changes": 38,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -11,11 +11,13 @@\n import android.os.IBinder;\n import android.util.Log;\n \n+import com.smartdevicelink.managers.AlertCompletionListener;\n import com.smartdevicelink.managers.CompletionListener;\n import com.smartdevicelink.managers.SdlManager;\n import com.smartdevicelink.managers.SdlManagerListener;\n import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n import com.smartdevicelink.managers.lifecycle.LifecycleConfigurationUpdate;\n+import com.smartdevicelink.managers.screen.AlertView;\n import com.smartdevicelink.managers.screen.OnButtonListener;\n import com.smartdevicelink.managers.screen.choiceset.ChoiceCell;\n import com.smartdevicelink.managers.screen.choiceset.ChoiceSet;\n@@ -26,7 +28,6 @@\n import com.smartdevicelink.managers.screen.menu.VoiceCommandSelectionListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n-import com.smartdevicelink.proxy.rpc.Alert;\n import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n import com.smartdevicelink.proxy.rpc.OnButtonPress;\n import com.smartdevicelink.proxy.rpc.OnHMIStatus;\n@@ -47,6 +48,7 @@\n import com.smartdevicelink.transport.MultiplexTransportConfig;\n import com.smartdevicelink.transport.TCPTransportConfig;\n import com.smartdevicelink.util.DebugTool;\n+import com.smartdevicelink.util.SystemInfo;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -239,6 +241,12 @@ public LifecycleConfigurationUpdate managerShouldUpdateLifecycle(Language langua\n                         return null;\n                     }\n                 }\n+\n+                @Override\n+                public boolean onSystemInfoReceived(SystemInfo systemInfo) {\n+                    //Check the SystemInfo object to ensure that the connection to the device should continue\n+                    return true;\n+                }\n             };\n \n             // Create App Icon, this is set in the SdlManager builder\n@@ -290,15 +298,15 @@ private void sendMenus() {\n         // some voice commands\n         List<String> voice2 = Collections.singletonList(\"Cell two\");\n \n-        MenuCell mainCell1 = new MenuCell(\"Test Cell 1 (speak)\", livio, null, new MenuSelectionListener() {\n+        MenuCell mainCell1 = new MenuCell(\"Test Cell 1 (speak)\", \"Secondary Text\", \"Tertiary Text\", livio, livio, null, new MenuSelectionListener() {\n             @Override\n             public void onTriggered(TriggerSource trigger) {\n                 Log.i(TAG, \"Test cell 1 triggered. Source: \" + trigger.toString());\n                 showTest();\n             }\n         });\n \n-        MenuCell mainCell2 = new MenuCell(\"Test Cell 2\", null, voice2, new MenuSelectionListener() {\n+        MenuCell mainCell2 = new MenuCell(\"Test Cell 2\", \"Secondary Text\", null, null, null, voice2, new MenuSelectionListener() {\n             @Override\n             public void onTriggered(TriggerSource trigger) {\n                 Log.i(TAG, \"Test cell 2 triggered. Source: \" + trigger.toString());\n@@ -307,31 +315,31 @@ public void onTriggered(TriggerSource trigger) {\n \n         // SUB MENU\n \n-        MenuCell subCell1 = new MenuCell(\"SubCell 1\", null, null, new MenuSelectionListener() {\n+        MenuCell subCell1 = new MenuCell(\"SubCell 1\", null, null, null, null, null, new MenuSelectionListener() {\n             @Override\n             public void onTriggered(TriggerSource trigger) {\n                 Log.i(TAG, \"Sub cell 1 triggered. Source: \" + trigger.toString());\n             }\n         });\n \n-        MenuCell subCell2 = new MenuCell(\"SubCell 2\", null, null, new MenuSelectionListener() {\n+        MenuCell subCell2 = new MenuCell(\"SubCell 2\", null, null, null, null, null, new MenuSelectionListener() {\n             @Override\n             public void onTriggered(TriggerSource trigger) {\n                 Log.i(TAG, \"Sub cell 2 triggered. Source: \" + trigger.toString());\n             }\n         });\n \n         // sub menu parent cell\n-        MenuCell mainCell3 = new MenuCell(\"Test Cell 3 (sub menu)\", MenuLayout.LIST, null, Arrays.asList(subCell1, subCell2));\n+        MenuCell mainCell3 = new MenuCell(\"Test Cell 3 (sub menu)\", null, null, MenuLayout.LIST, null, null, Arrays.asList(subCell1, subCell2));\n \n-        MenuCell mainCell4 = new MenuCell(\"Show Perform Interaction\", null, null, new MenuSelectionListener() {\n+        MenuCell mainCell4 = new MenuCell(\"Show Perform Interaction\", null, null, null, null, null, new MenuSelectionListener() {\n             @Override\n             public void onTriggered(TriggerSource trigger) {\n                 showPerformInteraction();\n             }\n         });\n \n-        MenuCell mainCell5 = new MenuCell(\"Clear the menu\", null, null, new MenuSelectionListener() {\n+        MenuCell mainCell5 = new MenuCell(\"Clear the menu\", null, null, null,null, null, new MenuSelectionListener() {\n             @Override\n             public void onTriggered(TriggerSource trigger) {\n                 Log.i(TAG, \"Clearing Menu. Source: \" + trigger.toString());\n@@ -417,10 +425,16 @@ private void showTest() {\n     }\n \n     private void showAlert(String text) {\n-        Alert alert = new Alert();\n-        alert.setAlertText1(text);\n-        alert.setDuration(5000);\n-        sdlManager.sendRPC(alert);\n+        AlertView.Builder builder = new AlertView.Builder();\n+        builder.setText(text);\n+        builder.setTimeout(5);\n+        AlertView alertView = builder.build();\n+        sdlManager.getScreenManager().presentAlert(alertView, new AlertCompletionListener() {\n+            @Override\n+            public void onComplete(boolean success, Integer tryAgainTime) {\n+                Log.i(TAG, \"Alert presented: \"+ success);\n+            }\n+        });\n     }\n \n     // Choice Set"
  },
  {
    "sha": "55044c6775984acd1f77ab806fba1f36aeb6bd1d",
    "filename": "android/sdl_android/build.gradle",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/build.gradle",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/build.gradle",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/build.gradle?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -1,14 +1,15 @@\n apply plugin: 'com.android.library'\n \n android {\n-    compileSdkVersion 29\n+    compileSdkVersion 30\n     defaultConfig {\n         minSdkVersion 16\n-        targetSdkVersion 29\n-        versionCode 17\n+        targetSdkVersion 30\n+        versionCode 18\n         versionName new File(projectDir.path, ('/../../VERSION')).text.trim()\n-        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'\n+        buildConfigField \"String\", \"VERSION_NAME\", '\\\"' + versionName + '\\\"'\n         resValue \"string\", \"SDL_LIB_VERSION\", '\\\"' + versionName + '\\\"'\n+        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'\n     }\n     buildTypes {\n         release {\n@@ -40,9 +41,8 @@ android {\n }\n \n dependencies {\n-    api fileTree(dir: 'libs', include: ['*.jar'])\n-    api 'com.smartdevicelink:bson_java_port:1.2.2'\n-    api 'com.livio.taskmaster:taskmaster:0.3.0'\n+    api fileTree(dir: 'libs', include: ['*.jar', '*.aar'])\n+    api 'com.livio.taskmaster:taskmaster:0.4.0'\n     api 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n     api 'androidx.annotation:annotation:1.1.0'\n     annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.2.0'"
  },
  {
    "sha": "0da8ec68652c11c98cc7f266951aeda14ba277b0",
    "filename": "android/sdl_android/libs/bson_java_port-release.aar",
    "status": "added",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/libs/bson_java_port-release.aar",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/libs/bson_java_port-release.aar",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/libs/bson_java_port-release.aar?ref=e1f055547aed7aabae802c95b114889e42c5dede"
  },
  {
    "sha": "88f3cdf4c10d05d66fb9ee0d24f3f0c802c052cf",
    "filename": "android/sdl_android/src/androidTest/assets/json/AddCommand.json",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/AddCommand.json",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/AddCommand.json",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/assets/json/AddCommand.json?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -17,6 +17,10 @@\n         \"parentID\": 194,\n         \"position\": 1,\n         \"menuName\": \"My Command\"\n+      },\n+      \"secondaryImage\": {\n+        \"value\": \"cmdImage1.png\",\n+        \"imageType\": \"DYNAMIC\"\n       }\n     }\n   },"
  },
  {
    "sha": "2c9a7e3266e636bfe54eaffee9a5b5fcb6f81757",
    "filename": "android/sdl_android/src/androidTest/assets/json/AddSubMenu.json",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/AddSubMenu.json",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/AddSubMenu.json",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/assets/json/AddSubMenu.json?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -9,6 +9,12 @@\n       \"menuIcon\": {\n         \"value\": \"cmdImage1.png\",\n         \"imageType\": \"DYNAMIC\"\n+      },\n+      \"secondaryText\": \"Secondary Text\",\n+      \"tertiaryText\": \"Tertiary Text\",\n+      \"secondaryImage\": {\n+        \"value\": \"cmdImage1.png\",\n+        \"imageType\": \"DYNAMIC\"\n       }\n     }\n   },"
  },
  {
    "sha": "8ce24a63e29ec4e3708592dd0bf41c68f0f8e477",
    "filename": "android/sdl_android/src/androidTest/assets/json/GetVehicleData.json",
    "status": "modified",
    "additions": 39,
    "deletions": 2,
    "changes": 41,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/GetVehicleData.json",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/GetVehicleData.json",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/assets/json/GetVehicleData.json?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -35,7 +35,9 @@\n       \"gearStatus\": true,\n       \"oemCustomVehicleDataName\": true,\n       \"windowStatus\": true,\n-      \"stabilityControlsStatus\": true\n+      \"stabilityControlsStatus\": true,\n+      \"climateData\": true,\n+      \"seatOccupancy\": true\n     }\n   },\n   \"response\": {\n@@ -183,6 +185,17 @@\n         \"transmissionType\": \"ELECTRIC_VARIABLE\",\n         \"actualGear\": \"PARK\"\n       },\n+      \"climateData\": {\n+        \"atmosphericPressure\": 100.0,\n+        \"externalTemperature\": {\n+          \"unit\": \"CELSIUS\",\n+          \"value\": 100.0\n+        },\n+        \"cabinTemperature\": {\n+          \"unit\": \"CELSIUS\",\n+          \"value\": 100.0\n+        }\n+      },\n       \"windowStatus\": [\n         {\n           \"location\": {\n@@ -194,7 +207,31 @@\n             \"deviation\": 3\n           }\n         }\n-      ]\n+      ],\n+      \"seatOccupancy\": {\n+        \"seatsOccupied\": [\n+          {\n+            \"seatLocation\": {\n+              \"grid\": {\n+                \"row\": 2,\n+                \"col\": 3\n+              }\n+            },\n+            \"conditionActive\": true\n+          }\n+        ],\n+        \"seatsBelted\": [\n+          {\n+            \"seatLocation\": {\n+              \"grid\": {\n+                \"row\": 2,\n+                \"col\": 3\n+              }\n+            },\n+            \"conditionActive\": true\n+          }\n+        ]\n+      }\n     }\n   }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "57a8aa20b573a0ca276cb0da1464e91fed6394d9",
    "filename": "android/sdl_android/src/androidTest/assets/json/SubscribeVehicleData.json",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/SubscribeVehicleData.json",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/SubscribeVehicleData.json",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/assets/json/SubscribeVehicleData.json?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -35,7 +35,9 @@\n       \"gearStatus\": true,\n       \"oemCustomVehicleDataName\": true,\n       \"windowStatus\": true,\n-      \"handsOffSteering\": true\n+      \"handsOffSteering\": true,\n+      \"climateData\": true,\n+      \"seatOccupancy\": true\n     }\n   },\n   \"response\": {\n@@ -173,6 +175,14 @@\n       \"windowStatus\": {\n         \"dataType\": \"VEHICLEDATA_WINDOWSTATUS\",\n         \"resultCode\": \"SUCCESS\"\n+      },\n+      \"climateData\": {\n+        \"dataType\": \"VEHICLEDATA_CLIMATEDATA\",\n+        \"resultCode\": \"SUCCESS\"\n+      },\n+      \"seatOccupancy\": {\n+        \"dataType\": \"VEHICLEDATA_SEATOCCUPANCY\",\n+        \"resultCode\": \"SUCCESS\"\n       }\n     }\n   }"
  },
  {
    "sha": "3dfbf984cdb7d4e70c96cccefe69e8c033e8157b",
    "filename": "android/sdl_android/src/androidTest/assets/json/UnsubscribeVehicleData.json",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/UnsubscribeVehicleData.json",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/assets/json/UnsubscribeVehicleData.json",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/assets/json/UnsubscribeVehicleData.json?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -35,7 +35,9 @@\n       \"handsOffSteering\": true,\n       \"gearStatus\": true,\n       \"oemCustomVehicleDataName\": true,\n-      \"windowStatus\": true\n+      \"windowStatus\": true,\n+      \"climateData\": true,\n+      \"seatOccupancy\": true\n     }\n   },\n   \"response\": {\n@@ -173,6 +175,14 @@\n       \"windowStatus\": {\n         \"dataType\": \"VEHICLEDATA_WINDOWSTATUS\",\n         \"resultCode\": \"SUCCESS\"\n+      },\n+      \"seatOccupancy\": {\n+        \"dataType\": \"VEHICLEDATA_SEATOCCUPANCY\",\n+        \"resultCode\": \"SUCCESS\"\n+      },\n+      \"climateData\": {\n+        \"dataType\": \"VEHICLEDATA_CLIMATEDATA\",\n+        \"resultCode\": \"SUCCESS\"\n       }\n     }\n   }"
  },
  {
    "sha": "2f93c8307db32a80a81825e6d528a1ef4ef7e45f",
    "filename": "android/sdl_android/src/androidTest/java/com/android/grafika/gles/OffscreenSurfaceTest.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/android/grafika/gles/OffscreenSurfaceTest.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/android/grafika/gles/OffscreenSurfaceTest.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/android/grafika/gles/OffscreenSurfaceTest.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -0,0 +1,105 @@\n+package com.android.grafika.gles;\n+\n+import android.opengl.GLES20;\n+import android.os.Environment;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import android.util.Log;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class OffscreenSurfaceTest {\n+\n+\tprivate final String TAG = OffscreenSurfaceTest.class.getSimpleName();\n+\tprivate final int mWidth = 1280;\n+\tprivate final int mHeight = 720;\n+\tprivate final int mIterations = 100;\n+\n+\t@Test\n+\tpublic void testReadPixels() {\n+\t\tEglCore eglCore = new EglCore(null, 0);\n+\t\tOffscreenSurface offscreenSurface = new OffscreenSurface(eglCore, mWidth, mHeight);\n+\t\tfloat time = runReadPixelsTest(offscreenSurface);\n+\t\tLog.d(TAG, \"runReadPixelsTest returns \" + time + \" msec\");\n+\t}\n+\n+\t// HELPER test method\n+\t/**\n+\t * Does a simple bit of rendering and then reads the pixels back.\n+\t *\n+\t * @return total time (msec order) spent on glReadPixels()\n+\t */\n+\tprivate float runReadPixelsTest(OffscreenSurface eglSurface) {\n+\t\tlong totalTime = 0;\n+\n+\t\teglSurface.makeCurrent();\n+\n+\t\tByteBuffer pixelBuf = ByteBuffer.allocateDirect(mWidth * mHeight * 4);\n+\t\tpixelBuf.order(ByteOrder.LITTLE_ENDIAN);\n+\n+\t\tLog.d(TAG, \"Running...\");\n+\t\tfloat colorMult = 1.0f / mIterations;\n+\t\tfor (int i = 0; i < mIterations; i++) {\n+\t\t\tif ((i % (mIterations / 8)) == 0) {\n+\t\t\t\tLog.d(TAG, \"iteration \" + i);\n+\t\t\t}\n+\n+\t\t\t// Clear the screen to a solid color, then add a rectangle.  Change the color\n+\t\t\t// each time.\n+\t\t\tfloat r = i * colorMult;\n+\t\t\tfloat g = 1.0f - r;\n+\t\t\tfloat b = (r + g) / 2.0f;\n+\t\t\tGLES20.glClearColor(r, g, b, 1.0f);\n+\t\t\tGLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);\n+\n+\t\t\tGLES20.glEnable(GLES20.GL_SCISSOR_TEST);\n+\t\t\tGLES20.glScissor(mWidth / 4, mHeight / 4, mWidth / 2, mHeight / 2);\n+\t\t\tGLES20.glClearColor(b, g, r, 1.0f);\n+\t\t\tGLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);\n+\t\t\tGLES20.glDisable(GLES20.GL_SCISSOR_TEST);\n+\n+\t\t\t// Try to ensure that rendering has finished.\n+\t\t\tGLES20.glFinish();\n+\t\t\tGLES20.glReadPixels(0, 0, 1, 1,\n+\t\t\t\t\tGLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixelBuf);\n+\n+\t\t\t// Time individual extraction.  Ideally we'd be timing a bunch of these calls\n+\t\t\t// and measuring the aggregate time, but we want the isolated time, and if we\n+\t\t\t// just read the same buffer repeatedly we might get some sort of cache effect.\n+\t\t\tlong startWhen = System.nanoTime();\n+\t\t\tGLES20.glReadPixels(0, 0, mWidth, mHeight,\n+\t\t\t\t\tGLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixelBuf);\n+\t\t\ttotalTime += System.nanoTime() - startWhen;\n+\t\t}\n+\t\tLog.d(TAG, \"done\");\n+\n+\t\t// It's not the good idea to request external strage permission in unit test.\n+\t\tboolean requireStoragePermission = false;\n+\t\tif (requireStoragePermission) {\n+\t\t\tlong startWhen = System.nanoTime();\n+\t\t\tFile file = new File(Environment.getExternalStorageDirectory(),\n+\t\t\t\t\t\"test.png\");\n+\t\t\ttry {\n+\t\t\t\teglSurface.saveFrame(file);\n+\t\t\t} catch (IOException ioe) {\n+\t\t\t\tthrow new RuntimeException(ioe);\n+\t\t\t}\n+\t\t\tLog.d(TAG, \"Saved frame in \" + ((System.nanoTime() - startWhen) / 1000000) + \"ms\");\n+\t\t\tassertTrue(file.exists());\n+\t\t} else {\n+\t\t\t// here' we can recognize Unit Test succeeded, but anyway checks to see totalTime and buffer capacity.\n+\t\t\tassertTrue(pixelBuf.capacity() > 0 && totalTime > 0);\n+\t\t}\n+\n+\t\treturn (float)totalTime / 1000000f;\n+\t}\n+\n+}"
  },
  {
    "sha": "041d0bbed59d5c1eec550849bb5b8d639c041cd6",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/AlertViewTest.java",
    "status": "added",
    "additions": 78,
    "deletions": 0,
    "changes": 78,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/AlertViewTest.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/AlertViewTest.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/AlertViewTest.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -0,0 +1,78 @@\n+package com.smartdevicelink;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.managers.screen.AlertAudioData;\n+import com.smartdevicelink.managers.screen.AlertView;\n+import com.smartdevicelink.managers.screen.SoftButtonObject;\n+import com.smartdevicelink.managers.screen.SoftButtonState;\n+import com.smartdevicelink.proxy.rpc.enums.FileType;\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AlertViewTest {\n+\n+    @Test\n+    public void testAlertView() {\n+        SdlArtwork artwork1 = new SdlArtwork(\"test1\", FileType.GRAPHIC_PNG, 1, true);\n+        SdlArtwork artwork2 = new SdlArtwork(\"test2\", FileType.GRAPHIC_PNG, 2, true);\n+\n+        SoftButtonState softButtonState1 = new SoftButtonState(\"object1-state1\", \"o1s1\", new SdlArtwork(\"image1\", FileType.GRAPHIC_PNG, 3, true));\n+        SoftButtonObject softButtonObject1 = new SoftButtonObject(\"object1\", Arrays.asList(softButtonState1), softButtonState1.getName(), null);\n+        SoftButtonObject softButtonObject2 = new SoftButtonObject(\"object2\", Arrays.asList(softButtonState1), softButtonState1.getName(), null);\n+\n+        AlertAudioData alertAudioData = new AlertAudioData(\"hi\");\n+\n+        AlertView.Builder builder = new AlertView.Builder();\n+        builder.setText(\"Test\");\n+        builder.setTertiaryText(\"Test\");\n+        builder.setSecondaryText(\"Test\");\n+        builder.setTimeout(1);\n+        builder.setIcon(artwork1);\n+        builder.setSoftButtons(Collections.singletonList(softButtonObject1));\n+        builder.setDefaultTimeOut(3);\n+        builder.setAudio(alertAudioData);\n+        builder.setShowWaitIndicator(true);\n+        AlertView alertView = builder.build();\n+\n+        assertEquals(alertView.getText(), \"Test\");\n+        assertEquals(alertView.getSecondaryText(), \"Test\");\n+        assertEquals(alertView.getTertiaryText(), \"Test\");\n+        assertTrue(alertView.getAudio().getAudioData().size() > 0);\n+        assertEquals(alertView.getIcon().getName(), \"test1\");\n+        assertEquals(alertView.getSoftButtons().get(0).getName(), \"object1\");\n+        assertEquals(alertView.getDefaultTimeout(), 3);\n+        assertEquals(alertView.getTimeout().intValue(), 3);\n+        assertEquals(alertView.isShowWaitIndicator(), true);\n+\n+        alertView.setText(\"Test2\");\n+        alertView.setTertiaryText(\"Test2\");\n+        alertView.setSecondaryText(\"Test2\");\n+        alertView.setDefaultTimeout(6);\n+        alertView.setTimeout(6);\n+        alertView.setAudio(alertAudioData);\n+        alertView.setIcon(artwork2);\n+        alertView.setSoftButtons(Collections.singletonList(softButtonObject2));\n+        alertView.setShowWaitIndicator(false);\n+\n+        assertEquals(alertView.getText(), \"Test2\");\n+        assertEquals(alertView.getSecondaryText(), \"Test2\");\n+        assertEquals(alertView.getTertiaryText(), \"Test2\");\n+        assertTrue(alertView.getAudio().getAudioData().size() > 0);\n+        assertEquals(alertView.getIcon().getName(), \"test2\");\n+        assertEquals(alertView.getSoftButtons().get(0).getName(), \"object2\");\n+        assertEquals(alertView.getDefaultTimeout(), 6);\n+        assertEquals(alertView.getTimeout().intValue(), 6);\n+        assertEquals(alertView.isShowWaitIndicator(), false);\n+\n+    }\n+}"
  },
  {
    "sha": "db9ce11ac18ad8cb57272328a53fb9724143e43a",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/SdlManagerTests.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/SdlManagerTests.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/SdlManagerTests.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/SdlManagerTests.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -7,6 +7,7 @@\n import com.livio.taskmaster.Taskmaster;\n import com.smartdevicelink.managers.lifecycle.LifecycleConfigurationUpdate;\n import com.smartdevicelink.managers.lockscreen.LockScreenConfig;\n+import com.smartdevicelink.managers.permission.PermissionManager;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCMessage;\n import com.smartdevicelink.proxy.RPCRequest;\n@@ -23,6 +24,7 @@\n import com.smartdevicelink.test.TestValues;\n import com.smartdevicelink.transport.BaseTransportConfig;\n import com.smartdevicelink.transport.TCPTransportConfig;\n+import com.smartdevicelink.util.SystemInfo;\n \n import org.junit.Before;\n import org.junit.Test;\n@@ -114,6 +116,11 @@ public void onError(String info, Exception e) {\n             public LifecycleConfigurationUpdate managerShouldUpdateLifecycle(Language language, Language hmiLanguage) {\n                 return null;\n             }\n+\n+            @Override\n+            public boolean onSystemInfoReceived(SystemInfo systemInfo) {\n+                return true;\n+            }\n         };\n \n         // build manager object - use all setters, will test using getters below\n@@ -134,6 +141,10 @@ public LifecycleConfigurationUpdate managerShouldUpdateLifecycle(Language langua\n \n         // mock internalInterface and set it manually\n         internalInterface = mock(ISdl.class);\n+        manager.set_internalInterface(internalInterface);\n+        PermissionManager permissionManager = mock(PermissionManager.class);\n+\n+        when(internalInterface.getPermissionManager()).thenReturn(permissionManager);\n         when(internalInterface.getTaskmaster()).thenReturn(new Taskmaster.Builder().build());\n         manager._internalInterface = internalInterface;\n "
  },
  {
    "sha": "d81b9ccc62f011fe6f8007b75e4b7931793a3a92",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/audio/AudioStreamManagerTest.java",
    "status": "modified",
    "additions": 15,
    "deletions": 4,
    "changes": 19,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/audio/AudioStreamManagerTest.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/audio/AudioStreamManagerTest.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/audio/AudioStreamManagerTest.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -9,6 +9,7 @@\n \r\n import androidx.test.platform.app.InstrumentationRegistry;\r\n \r\n+import com.livio.taskmaster.Taskmaster;\r\n import com.smartdevicelink.managers.CompletionListener;\r\n import com.smartdevicelink.managers.ISdl;\r\n import com.smartdevicelink.managers.audio.AudioStreamManager.SampleType;\r\n@@ -50,6 +51,7 @@\n import static org.mockito.Mockito.spy;\r\n import static org.mockito.Mockito.timeout;\r\n import static org.mockito.Mockito.verify;\r\n+import static org.mockito.Mockito.when;\r\n \r\n public class AudioStreamManagerTest extends TestCase {\r\n     public static final String TAG = AudioStreamManagerTest.class.getSimpleName();\r\n@@ -107,7 +109,7 @@ public Void answer(InvocationOnMock invocation) {\n             }\r\n         };\r\n \r\n-        ISdl internalInterface = mock(ISdl.class);\r\n+        ISdl internalInterface = createISdlMock();\r\n         SystemCapabilityManager systemCapabilityManager = mock(SystemCapabilityManager.class);\r\n         doReturn(systemCapabilityManager).when(internalInterface).getSystemCapabilityManager();\r\n         AudioPassThruCapabilities audioCapabilities = new AudioPassThruCapabilities(SamplingRate._16KHZ, BitsPerSample._16_BIT, AudioType.PCM);\r\n@@ -299,7 +301,7 @@ public Void answer(InvocationOnMock invocation) {\n             }\r\n         };\r\n \r\n-        ISdl internalInterface = mock(ISdl.class);\r\n+        ISdl internalInterface = createISdlMock();\r\n         SystemCapabilityManager systemCapabilityManager = mock(SystemCapabilityManager.class);\r\n         doReturn(systemCapabilityManager).when(internalInterface).getSystemCapabilityManager();\r\n         doReturn(true).when(internalInterface).isConnected();\r\n@@ -530,7 +532,7 @@ public Void answer(InvocationOnMock invocation) {\n             }\r\n         };\r\n \r\n-        ISdl internalInterface = mock(ISdl.class);\r\n+        ISdl internalInterface = createISdlMock();\r\n         SystemCapabilityManager systemCapabilityManager = mock(SystemCapabilityManager.class);\r\n         doReturn(systemCapabilityManager).when(internalInterface).getSystemCapabilityManager();\r\n         doReturn(true).when(internalInterface).isConnected();\r\n@@ -609,7 +611,7 @@ public Void answer(InvocationOnMock invocation) {\n             }\r\n         };\r\n \r\n-        ISdl internalInterface = mock(ISdl.class);\r\n+        ISdl internalInterface = createISdlMock();\r\n         SystemCapabilityManager systemCapabilityManager = mock(SystemCapabilityManager.class);\r\n         doReturn(systemCapabilityManager).when(internalInterface).getSystemCapabilityManager();\r\n         doReturn(true).when(internalInterface).isConnected();\r\n@@ -747,4 +749,13 @@ private void updateWaveHeaderLength(RandomAccessFile stream, long audiolength) t\n         stream.write((int) ((audiolength >> 16) & 0xff));\r\n         stream.write((int) ((audiolength >> 24) & 0xff));\r\n     }\r\n+\r\n+    private ISdl createISdlMock() {\r\n+        ISdl internalInterface = mock(ISdl.class);\r\n+        Taskmaster taskmaster = new Taskmaster.Builder().build();\r\n+        taskmaster.start();\r\n+\r\n+        when(internalInterface.getTaskmaster()).thenReturn(taskmaster);\r\n+        return internalInterface;\r\n+    }\r\n }\r"
  },
  {
    "sha": "90bedd4349f3d6ee600a5e846dff0c2c0d693f3f",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/file/FileManagerTests.java",
    "status": "modified",
    "additions": 319,
    "deletions": 402,
    "changes": 721,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/file/FileManagerTests.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/file/FileManagerTests.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/file/FileManagerTests.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -2,14 +2,17 @@\n \n import android.content.Context;\n import android.net.Uri;\n+import android.os.Handler;\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n \n+import com.livio.taskmaster.Taskmaster;\n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n import com.smartdevicelink.managers.ISdl;\n import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n import com.smartdevicelink.managers.file.filetypes.SdlFile;\n+import com.smartdevicelink.protocol.enums.SessionType;\n import com.smartdevicelink.proxy.RPCMessage;\n import com.smartdevicelink.proxy.RPCRequest;\n import com.smartdevicelink.proxy.rpc.DeleteFile;\n@@ -18,32 +21,34 @@\n import com.smartdevicelink.proxy.rpc.ListFilesResponse;\n import com.smartdevicelink.proxy.rpc.PutFile;\n import com.smartdevicelink.proxy.rpc.PutFileResponse;\n+import com.smartdevicelink.proxy.rpc.SdlMsgVersion;\n import com.smartdevicelink.proxy.rpc.enums.FileType;\n import com.smartdevicelink.proxy.rpc.enums.Result;\n import com.smartdevicelink.proxy.rpc.enums.StaticIconName;\n-import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n import com.smartdevicelink.test.TestValues;\n+import com.smartdevicelink.util.Version;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n \n import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertFalse;\n+import static junit.framework.TestCase.assertNull;\n import static junit.framework.TestCase.assertTrue;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n /**\n  * This is a unit test class for the SmartDeviceLink library manager class :\n@@ -54,73 +59,21 @@\n     public static final String TAG = \"FileManagerTests\";\n     private Context mTestContext;\n     private SdlFile validFile;\n+    private Handler mainHandler;\n+    private Version rpcVersion;\n+    private long mtuSize;\n \n     // SETUP / HELPERS\n \n     @Before\n     public void setUp() throws Exception {\n         mTestContext = getInstrumentation().getTargetContext();\n-        validFile = new SdlFile();\n-        validFile.setName(TestValues.GENERAL_STRING);\n-        validFile.setFileData(TestValues.GENERAL_BYTE_ARRAY);\n-        validFile.setPersistent(false);\n+        mainHandler = new Handler(mTestContext.getMainLooper());\n+        rpcVersion = new Version(7, 0, 0);\n+        mtuSize = 131072;\n+        validFile = new SdlFile(TestValues.GENERAL_STRING, FileType.BINARY, TestValues.GENERAL_STRING.getBytes(), false);\n     }\n \n-    private Answer<Void> onPutFileFailureOnError = new Answer<Void>() {\n-        @Override\n-        public Void answer(InvocationOnMock invocation) throws Throwable {\n-            Object[] args = invocation.getArguments();\n-            RPCRequest message = (RPCRequest) args[0];\n-            if (message instanceof PutFile) {\n-                int correlationId = message.getCorrelationID();\n-                PutFileResponse putFileResponse = new PutFileResponse(false, Result.REJECTED);\n-                putFileResponse.setInfo(\"Binary data empty\");\n-                message.getOnRPCResponseListener().onResponse(correlationId, putFileResponse);\n-            }\n-            return null;\n-        }\n-    };\n-\n-    private Answer<Void> onSendRequestsFailOnError = new Answer<Void>() {\n-        @Override\n-        public Void answer(InvocationOnMock invocation) throws Throwable {\n-            Object[] args = invocation.getArguments();\n-            List<RPCRequest> rpcs = (List<RPCRequest>) args[0];\n-            OnMultipleRequestListener listener = (OnMultipleRequestListener) args[1];\n-            if (rpcs.get(0) instanceof PutFile) {\n-                for (RPCRequest message : rpcs) {\n-                    int correlationId = message.getCorrelationID();\n-                    listener.addCorrelationId(correlationId);\n-                    PutFileResponse putFileResponse = new PutFileResponse(false, Result.REJECTED);\n-                    putFileResponse.setInfo(\"Binary data empty\");\n-                    listener.onResponse(correlationId, putFileResponse);\n-                }\n-                listener.onFinished();\n-            }\n-            return null;\n-        }\n-    };\n-\n-    private Answer<Void> onListFileUploadSuccess = new Answer<Void>() {\n-        @Override\n-        public Void answer(InvocationOnMock invocation) throws Throwable {\n-            Object[] args = invocation.getArguments();\n-            List<RPCRequest> rpcs = (List<RPCRequest>) args[0];\n-            OnMultipleRequestListener listener = (OnMultipleRequestListener) args[1];\n-            if (rpcs.get(0) instanceof PutFile) {\n-                for (RPCRequest message : rpcs) {\n-                    int correlationId = message.getCorrelationID();\n-                    listener.addCorrelationId(correlationId);\n-                    PutFileResponse putFileResponse = new PutFileResponse();\n-                    putFileResponse.setSuccess(true);\n-                    listener.onResponse(correlationId, putFileResponse);\n-                }\n-                listener.onFinished();\n-            }\n-            return null;\n-        }\n-    };\n-\n     private Answer<Void> onListFilesSuccess = new Answer<Void>() {\n         @Override\n         public Void answer(InvocationOnMock invocation) {\n@@ -169,104 +122,72 @@ public Void answer(InvocationOnMock invocation) {\n         }\n     };\n \n-    private Answer<Void> onListDeleteRequestSuccess = new Answer<Void>() {\n+    private Answer<Void> onDeleteFileSuccess = new Answer<Void>() {\n         @Override\n         public Void answer(InvocationOnMock invocation) {\n             Object[] args = invocation.getArguments();\n-            List<RPCRequest> rpcs = (List<RPCRequest>) args[0];\n-            OnMultipleRequestListener listener = (OnMultipleRequestListener) args[1];\n-            if (rpcs.get(0) instanceof DeleteFile) {\n-                for (RPCRequest message : rpcs) {\n-                    int correlationId = message.getCorrelationID();\n-                    listener.addCorrelationId(correlationId);\n-                    DeleteFileResponse deleteFileResponse = new DeleteFileResponse();\n-                    deleteFileResponse.setSuccess(true);\n-                    listener.onResponse(correlationId, deleteFileResponse);\n-                }\n-                listener.onFinished();\n+            RPCRequest message = (RPCRequest) args[0];\n+            if (message instanceof DeleteFile) {\n+                int correlationId = message.getCorrelationID();\n+                DeleteFileResponse deleteFileResponse = new DeleteFileResponse();\n+                deleteFileResponse.setSuccess(true);\n+                message.getOnRPCResponseListener().onResponse(correlationId, deleteFileResponse);\n             }\n             return null;\n         }\n     };\n \n-    private Answer<Void> onListDeleteRequestFail = new Answer<Void>() {\n+    private Answer<Void> onDeleteFileFailure = new Answer<Void>() {\n         @Override\n         public Void answer(InvocationOnMock invocation) {\n             Object[] args = invocation.getArguments();\n-            List<RPCRequest> rpcs = (List<RPCRequest>) args[0];\n-            OnMultipleRequestListener listener = (OnMultipleRequestListener) args[1];\n-            if (rpcs.get(0) instanceof DeleteFile) {\n-                for (RPCRequest message : rpcs) {\n-                    int correlationId = message.getCorrelationID();\n-                    listener.addCorrelationId(correlationId);\n-                    DeleteFileResponse deleteFileResponse = new DeleteFileResponse(false, Result.REJECTED);\n-                    deleteFileResponse.setInfo(\"Binary data empty\");\n-                    listener.onResponse(correlationId, deleteFileResponse);\n-                }\n-                listener.onFinished();\n-            }\n-            return null;\n-        }\n-    };\n-\n-    private Answer<Void> onSendRequestsFailPartialOnError = new Answer<Void>() {\n-        @Override\n-        public Void answer(InvocationOnMock invocation) throws Throwable {\n-            Object[] args = invocation.getArguments();\n-            List<RPCRequest> rpcs = (List<RPCRequest>) args[0];\n-            OnMultipleRequestListener listener = (OnMultipleRequestListener) args[1];\n-            if (rpcs.get(0) instanceof PutFile) {\n-                boolean flip = false;\n-                for (RPCRequest message : rpcs) {\n-                    int correlationId = message.getCorrelationID();\n-                    listener.addCorrelationId(correlationId);\n-                    PutFileResponse putFileResponse = new PutFileResponse();\n-                    if (flip) {\n-                        putFileResponse.setSuccess(true);\n-                        flip = false;\n-                        listener.onResponse(correlationId, putFileResponse);\n-                    } else {\n-                        flip = true;\n-                        putFileResponse.setSuccess(false);\n-                        putFileResponse.setResultCode(Result.REJECTED);\n-                        putFileResponse.setInfo(\"Binary data empty\");\n-                        listener.onResponse(correlationId, putFileResponse);\n-                    }\n-                }\n-                listener.onFinished();\n+            RPCRequest message = (RPCRequest) args[0];\n+            if (message instanceof DeleteFile) {\n+                int correlationId = message.getCorrelationID();\n+                DeleteFileResponse deleteFileResponse = new DeleteFileResponse(false, Result.REJECTED);\n+                deleteFileResponse.setInfo(\"Binary data empty\");\n+                message.getOnRPCResponseListener().onResponse(correlationId, deleteFileResponse);\n             }\n             return null;\n         }\n     };\n \n-    // TESTS\n-\n     /**\n      * Test deleting list of files, success\n      */\n     @Test\n     public void testDeleteRemoteFilesWithNamesSuccess() {\n-        final ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onListDeleteRequestSuccess).when(internalInterface).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n+        doAnswer(onDeleteFileSuccess).when(internalInterface).sendRPC(any(DeleteFile.class));\n \n-        final List<String> fileNames = new ArrayList<>();\n-        fileNames.add(\"Julian\");\n-        fileNames.add(\"Jake\");\n+        final List<String> fileNames = Arrays.asList(\"Julian\", \"Jake\");\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n-        fileManagerConfig.setFileRetryCount(2);\n \n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n+            public void onComplete(final boolean success) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertTrue(success);\n+                    }\n+                });\n+\n+                fileManager.mutableRemoteFileNames.addAll(fileNames);\n+\n                 fileManager.deleteRemoteFilesWithNames(fileNames, new MultipleFileCompletionListener() {\n                     @Override\n-                    public void onComplete(Map<String, String> errors) {\n-                        assertTrue(errors == null);\n+                    public void onComplete(final Map<String, String> errors) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertNull(errors);\n+                            }\n+                        });\n                     }\n                 });\n             }\n@@ -278,27 +199,36 @@ public void onComplete(Map<String, String> errors) {\n      */\n     @Test\n     public void testDeleteRemoteFilesWithNamesFail() {\n-        final ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onListDeleteRequestFail).when(internalInterface).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n+        doAnswer(onDeleteFileFailure).when(internalInterface).sendRPC(any(DeleteFile.class));\n \n-        final List<String> fileNames = new ArrayList<>();\n-        fileNames.add(\"Julian\");\n-        fileNames.add(\"Jake\");\n+        final List<String> fileNames = Arrays.asList(\"Julian\", \"Jake\");\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n-        fileManagerConfig.setFileRetryCount(2);\n \n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n+            public void onComplete(final boolean success) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertTrue(success);\n+                    }\n+                });\n+\n+                fileManager.mutableRemoteFileNames.addAll(fileNames);\n                 fileManager.deleteRemoteFilesWithNames(fileNames, new MultipleFileCompletionListener() {\n                     @Override\n-                    public void onComplete(Map<String, String> errors) {\n-                        assertTrue(errors.size() == 2);\n+                    public void onComplete(final Map<String, String> errors) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertEquals(2, errors.size());\n+                            }\n+                        });\n                     }\n                 });\n             }\n@@ -310,10 +240,10 @@ public void onComplete(Map<String, String> errors) {\n      */\n     @Test\n     public void testFileUploadRetry() {\n-        final ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onPutFileFailureOnError).when(internalInterface).sendRPC(any(PutFile.class));\n+        doAnswer(onPutFileFailure).when(internalInterface).sendRPC(any(PutFile.class));\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n         fileManagerConfig.setFileRetryCount(2);\n@@ -324,138 +254,140 @@ public void testFileUploadRetry() {\n \n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n+            public void onComplete(final boolean success1) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertTrue(success1);\n+                    }\n+                });\n+\n                 fileManager.uploadFile(validFile, new CompletionListener() {\n                     @Override\n-                    public void onComplete(boolean success) {\n-                        assertFalse(success);\n+                    public void onComplete(final boolean success2) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertFalse(success2);\n+                                verify(internalInterface, times(4)).sendRPC(any(RPCMessage.class));\n+                            }\n+                        });\n                     }\n                 });\n             }\n         });\n-        verify(internalInterface, times(4)).sendRPC(any(RPCMessage.class));\n     }\n \n     /**\n      * Test reUploading failed Artwork\n      */\n     @Test\n     public void testArtworkUploadRetry() {\n-        final ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onPutFileFailureOnError).when(internalInterface).sendRPC(any(PutFile.class));\n-\n-        final SdlFile validFile2 = new SdlFile();\n-        validFile2.setName(TestValues.GENERAL_STRING + \"2\");\n-        validFile2.setFileData(TestValues.GENERAL_BYTE_ARRAY);\n-        validFile2.setPersistent(false);\n-        validFile2.setType(FileType.GRAPHIC_PNG);\n-\n-        final SdlFile validFile3 = new SdlFile();\n-        validFile3.setName(TestValues.GENERAL_STRING + \"3\");\n-        validFile3.setFileData(TestValues.GENERAL_BYTE_ARRAY);\n-        validFile3.setPersistent(false);\n-        validFile3.setType(FileType.GRAPHIC_BMP);\n+        doAnswer(onPutFileFailure).when(internalInterface).sendRPC(any(PutFile.class));\n \n-        validFile.setType(FileType.GRAPHIC_JPEG);\n+        final SdlArtwork validArtwork = new SdlArtwork(TestValues.GENERAL_STRING + \"1\", FileType.GRAPHIC_JPEG, TestValues.GENERAL_STRING.getBytes(), false);\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n         fileManagerConfig.setArtworkRetryCount(2);\n \n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n-                fileManager.uploadFile(validFile, new CompletionListener() {\n-                    @Override\n-                    public void onComplete(boolean success) {\n-                        assertFalse(success);\n-                        verify(internalInterface, times(4)).sendRPC(any(RPCMessage.class));\n-                    }\n-                });\n-\n-                fileManager.uploadFile(validFile2, new CompletionListener() {\n+            public void onComplete(final boolean success1) {\n+                assertOnMainThread(new Runnable() {\n                     @Override\n-                    public void onComplete(boolean success) {\n-                        assertFalse(success);\n-                        verify(internalInterface, times(7)).sendRPC(any(RPCMessage.class));\n+                    public void run() {\n+                        assertTrue(success1);\n                     }\n                 });\n \n-                fileManager.uploadFile(validFile3, new CompletionListener() {\n+                fileManager.uploadArtwork(validArtwork, new CompletionListener() {\n                     @Override\n-                    public void onComplete(boolean success) {\n-                        assertFalse(success);\n+                    public void onComplete(final boolean success2) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertFalse(success2);\n+                                verify(internalInterface, times(4)).sendRPC(any(RPCMessage.class));\n+                            }\n+                        });\n                     }\n                 });\n             }\n         });\n-        verify(internalInterface, times(10)).sendRPC(any(RPCMessage.class));\n     }\n \n     /**\n      * Test retry uploading failed list of files\n      */\n     @Test\n     public void testListFilesUploadRetry() {\n-        final ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onSendRequestsFailOnError).when(internalInterface).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n-\n-        SdlFile validFile2 = new SdlFile();\n-        validFile2.setName(TestValues.GENERAL_STRING + \"2\");\n-        validFile2.setFileData(TestValues.GENERAL_BYTE_ARRAY);\n-        validFile2.setPersistent(false);\n-        validFile2.setType(FileType.GRAPHIC_JPEG);\n+        doAnswer(onPutFileFailure).when(internalInterface).sendRPC(any(PutFile.class));\n \n-        validFile.setType(FileType.AUDIO_WAVE);\n+        final SdlArtwork validFile2 = new SdlArtwork(TestValues.GENERAL_STRING + \"2\", FileType.GRAPHIC_JPEG, TestValues.GENERAL_STRING.getBytes(), false);\n \n-        final List<SdlFile> list = new ArrayList<>();\n-        list.add(validFile);\n-        list.add(validFile2);\n+        final List<SdlFile> list = Arrays.asList(validFile, validFile2);\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n-        fileManagerConfig.setArtworkRetryCount(2);\n-        fileManagerConfig.setFileRetryCount(4);\n+        fileManagerConfig.setFileRetryCount(3);\n+        fileManagerConfig.setArtworkRetryCount(4);\n \n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                fileManager.uploadFiles(list, new MultipleFileCompletionListener() {\n+            public void onComplete(final boolean success1) {\n+                assertOnMainThread(new Runnable() {\n                     @Override\n-                    public void onComplete(Map<String, String> errors) {\n-                        assertTrue(errors.size() == 2); // We need to make sure it kept track of both Files\n+                    public void run() {\n+                        assertTrue(success1);\n                     }\n                 });\n \n+                fileManager.uploadFiles(list, new MultipleFileCompletionListener() {\n+                    @Override\n+                    public void onComplete(final Map<String, String> errors) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertEquals(2, errors.size()); // We need to make sure it kept track of both Files\n+                                verify(internalInterface, times(9)).sendRPC(any(PutFile.class));\n+                            }\n+                        });\n+                    }\n+                });\n             }\n         });\n-        verify(internalInterface, times(5)).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n     }\n \n     /**\n      * Testing the initialization of FileManager\n      */\n     @Test\n     public void testInitializationSuccess() {\n-        ISdl internalInterface = mock(ISdl.class);\n+        ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n-                assertEquals(fileManager.getState(), BaseSubManager.READY);\n-                assertEquals(fileManager.getRemoteFileNames(), TestValues.GENERAL_STRING_LIST);\n-                assertEquals(TestValues.GENERAL_INT, fileManager.getBytesAvailable());\n+            public void onComplete(final boolean success) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertTrue(success);\n+                        assertEquals(fileManager.getState(), BaseSubManager.READY);\n+                        assertEquals(fileManager.getRemoteFileNames(), TestValues.GENERAL_STRING_LIST);\n+                        assertEquals(TestValues.GENERAL_INT, fileManager.getBytesAvailable());\n+                    }\n+                });\n             }\n         });\n     }\n@@ -465,8 +397,7 @@ public void onComplete(boolean success) {\n      */\n     @Test\n     public void testFileUploadSuccess() {\n-        ISdl internalInterface = mock(ISdl.class);\n-\n+        ISdl internalInterface = createISdlMock();\n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n         doAnswer(onPutFileSuccess).when(internalInterface).sendRPC(any(PutFile.class));\n \n@@ -475,27 +406,39 @@ public void testFileUploadSuccess() {\n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n+            public void onComplete(final boolean success1) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertTrue(success1);\n+                    }\n+                });\n+\n                 fileManager.uploadFile(validFile, new CompletionListener() {\n                     @Override\n-                    public void onComplete(boolean success) {\n-                        assertTrue(success);\n+                    public void onComplete(final boolean success2) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertTrue(success2);\n+                                assertTrue(fileManager.getRemoteFileNames().contains(validFile.getName()));\n+                                assertTrue(fileManager.hasUploadedFile(validFile));\n+                                assertEquals(TestValues.GENERAL_INT, fileManager.getBytesAvailable());\n+                            }\n+                        });\n+\n                     }\n                 });\n             }\n         });\n-        assertTrue(fileManager.getRemoteFileNames().contains(validFile.getName()));\n-        assertTrue(fileManager.hasUploadedFile(validFile));\n-        assertEquals(TestValues.GENERAL_INT, fileManager.getBytesAvailable());\n     }\n \n     /**\n      * Testing failed file upload.\n      */\n     @Test\n     public void testFileUploadFailure() {\n-        ISdl internalInterface = mock(ISdl.class);\n+        ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n         doAnswer(onPutFileFailure).when(internalInterface).sendRPC(any(PutFile.class));\n@@ -504,14 +447,24 @@ public void testFileUploadFailure() {\n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n+            public void onComplete(final boolean success1) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertTrue(success1);\n+                    }\n+                });\n                 fileManager.uploadFile(validFile, new CompletionListener() {\n                     @Override\n-                    public void onComplete(boolean success) {\n-                        assertFalse(success);\n-                        assertFalse(fileManager.getRemoteFileNames().contains(validFile.getName()));\n-                        assertFalse(fileManager.hasUploadedFile(validFile));\n+                    public void onComplete(final boolean success2) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertFalse(success2);\n+                                assertFalse(fileManager.getRemoteFileNames().contains(validFile.getName()));\n+                                assertFalse(fileManager.hasUploadedFile(validFile));\n+                            }\n+                        });\n                     }\n                 });\n             }\n@@ -523,69 +476,89 @@ public void onComplete(boolean success) {\n      */\n     @Test\n     public void testFileUploadForStaticIcon() {\n-        ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n+            public void onComplete(final boolean success1) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertTrue(success1);\n+                    }\n+                });\n                 SdlArtwork artwork = new SdlArtwork(StaticIconName.ALBUM);\n                 fileManager.uploadFile(artwork, new CompletionListener() {\n                     @Override\n-                    public void onComplete(boolean success) {\n-                        assertTrue(success);\n+                    public void onComplete(final boolean success2) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertFalse(success2);\n+                                verify(internalInterface, times(1)).sendRPC(any(RPCMessage.class));\n+                            }\n+                        });\n                     }\n                 });\n             }\n         });\n-        verify(internalInterface, times(1)).sendRPC(any(RPCMessage.class));\n     }\n \n     /**\n      * Testing uploadFiles for staticIcons, verifying that it doesn't actually upload.\n      */\n     @Test\n     public void testMultipleFileUploadsForStaticIcon() {\n-        ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onListFileUploadSuccess).when(internalInterface).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n+        doAnswer(onPutFileSuccess).when(internalInterface).sendRPC(any(PutFile.class));\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n-                SdlArtwork artwork = new SdlArtwork(StaticIconName.ALBUM);\n+            public void onComplete(final boolean success1) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertTrue(success1);\n+                    }\n+                });\n+\n+                SdlArtwork artwork1 = new SdlArtwork(StaticIconName.ALBUM);\n                 SdlArtwork artwork2 = new SdlArtwork(StaticIconName.FILENAME);\n-                List<SdlArtwork> testStaticIconUpload = new ArrayList<>();\n-                testStaticIconUpload.add(artwork);\n-                testStaticIconUpload.add(artwork2);\n+                List<SdlArtwork> testStaticIconUpload = Arrays.asList(artwork1, artwork2);\n+\n                 fileManager.uploadFiles(testStaticIconUpload, new MultipleFileCompletionListener() {\n                     @Override\n-                    public void onComplete(Map<String, String> errors) {\n-                        assertTrue(errors == null);\n+                    public void onComplete(final Map<String, String> errors) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertEquals(2, errors.size());\n+                                verify(internalInterface, times(0)).sendRPC(any(PutFile.class));\n+                            }\n+                        });\n                     }\n                 });\n             }\n         });\n-        verify(internalInterface, times(0)).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n     }\n \n     /**\n      * Testing uploadFiles for static icons and nonStatic icons in the same list.\n      */\n     @Test\n     public void testMultipleFileUploadsForPartialStaticIcon() {\n-        ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onListFileUploadSuccess).when(internalInterface).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n+        doAnswer(onPutFileSuccess).when(internalInterface).sendRPC(any(PutFile.class));\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n@@ -595,55 +568,65 @@ public void onComplete(boolean success) {\n                 assertTrue(success);\n                 SdlArtwork artwork = new SdlArtwork(StaticIconName.ALBUM);\n                 SdlArtwork artwork2 = new SdlArtwork(StaticIconName.FILENAME);\n-                List<SdlFile> testFileuploads = new ArrayList<>();\n-                testFileuploads.add(artwork);\n-                testFileuploads.add(artwork2);\n-                testFileuploads.add(validFile);\n-                fileManager.uploadFiles(testFileuploads, new MultipleFileCompletionListener() {\n+                List<SdlFile> testFileUploads = Arrays.asList(artwork, artwork2, validFile);\n+                fileManager.uploadFiles(testFileUploads, new MultipleFileCompletionListener() {\n                     @Override\n-                    public void onComplete(Map<String, String> errors) {\n-                        assertTrue(errors == null);\n+                    public void onComplete(final Map<String, String> errors) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertEquals(2, errors.size());\n+                                verify(internalInterface, times(1)).sendRPC(any(PutFile.class));\n+                            }\n+                        });\n                     }\n                 });\n             }\n         });\n-        verify(internalInterface, times(1)).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n     }\n \n     /**\n      * Test to make sure you cannot upload an SdlFile with invalid data\n      */\n     @Test\n     public void testInvalidSdlFileInput() {\n-        ISdl internalInterface = mock(ISdl.class);\n+        ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n-                SdlFile sdlFile = new SdlFile();\n-                // Don't set name\n+            public void onComplete(final boolean success1) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertTrue(success1);\n+                    }\n+                });\n+\n+                SdlFile sdlFile;\n+\n+                // Test 1 - Don't set name\n+                sdlFile = new SdlFile();\n                 sdlFile.setFileData(TestValues.GENERAL_BYTE_ARRAY);\n                 checkForUploadFailure(fileManager, sdlFile);\n \n+                // Test 2 - Don't set data\n                 sdlFile = new SdlFile();\n                 sdlFile.setName(TestValues.GENERAL_STRING);\n-                // Don't set data\n                 checkForUploadFailure(fileManager, sdlFile);\n \n+                // Test 3 - Give an invalid resource ID\n                 sdlFile = new SdlFile();\n                 sdlFile.setName(TestValues.GENERAL_STRING);\n-                // Give an invalid resource ID\n                 sdlFile.setResourceId(TestValues.GENERAL_INT);\n                 checkForUploadFailure(fileManager, sdlFile);\n \n+                // Test4 - Set invalid Uri\n                 sdlFile = new SdlFile();\n                 sdlFile.setName(TestValues.GENERAL_STRING);\n-                // Set invalid Uri\n                 Uri testUri = Uri.parse(\"http://www.google.com\");\n                 sdlFile.setUri(testUri);\n                 checkForUploadFailure(fileManager, sdlFile);\n@@ -658,19 +641,17 @@ public void onComplete(boolean success) {\n      * @param sdlFile     - SdlFile with invalid data to test uploading\n      */\n     private void checkForUploadFailure(FileManager fileManager, SdlFile sdlFile) {\n-        boolean error = false;\n-\n-        try {\n-            fileManager.uploadFile(sdlFile, new CompletionListener() {\n-                @Override\n-                public void onComplete(boolean success) {\n-                }\n-            });\n-        } catch (IllegalArgumentException e) {\n-            error = true;\n-        }\n-\n-        assertTrue(error);\n+        fileManager.uploadFile(sdlFile, new CompletionListener() {\n+            @Override\n+            public void onComplete(final boolean success) {\n+                assertOnMainThread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        assertFalse(success);\n+                    }\n+                });\n+            }\n+        });\n     }\n \n     /**\n@@ -683,8 +664,7 @@ public void testInvalidSdlArtworkInput() {\n         // Set invalid type\n         for (FileType fileType : FileType.values()) {\n             boolean shouldError = true, didError = false;\n-            if (fileType.equals(FileType.GRAPHIC_BMP) || fileType.equals(FileType.GRAPHIC_PNG)\n-                    || fileType.equals(FileType.GRAPHIC_JPEG)) {\n+            if (fileType.equals(FileType.GRAPHIC_BMP) || fileType.equals(FileType.GRAPHIC_PNG) || fileType.equals(FileType.GRAPHIC_JPEG)) {\n                 shouldError = false;\n             }\n             try {\n@@ -701,153 +681,67 @@ public void testInvalidSdlArtworkInput() {\n      */\n     @Test\n     public void testMultipleFileUpload() {\n-        ISdl internalInterface = mock(ISdl.class);\n+        ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onListFileUploadSuccess).when(internalInterface).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n+        doAnswer(onPutFileSuccess).when(internalInterface).sendRPC(any(PutFile.class));\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n-\n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n             public void onComplete(boolean success) {\n-                assertTrue(success);\n-                final List<SdlFile> filesToUpload = new ArrayList<>();\n-                filesToUpload.add(validFile);\n-\n-                SdlFile validFile2 = new SdlFile();\n-                validFile2.setName(TestValues.GENERAL_STRING + \"2\");\n-                validFile2.setFileData(TestValues.GENERAL_BYTE_ARRAY);\n-                validFile2.setPersistent(false);\n-                validFile2.setType(FileType.GRAPHIC_JPEG);\n-                filesToUpload.add(validFile2);\n-\n+                SdlFile validFile2 = new SdlFile(TestValues.GENERAL_STRING + \"2\", FileType.GRAPHIC_JPEG, TestValues.GENERAL_STRING.getBytes(), false);\n+                List<SdlFile> filesToUpload = Arrays.asList(validFile, validFile2);\n                 fileManager.uploadFiles(filesToUpload, new MultipleFileCompletionListener() {\n                     @Override\n-                    public void onComplete(Map<String, String> errors) {\n-                        assertNull(errors);\n-                    }\n-                });\n-            }\n-        });\n-    }\n-\n-    /**\n-     * Testing uploading multiple files with some failing.\n-     */\n-    @Test\n-    public void testMultipleFileUploadPartialFailure() {\n-        ISdl internalInterface = mock(ISdl.class);\n-\n-        doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onSendRequestsFailPartialOnError).when(internalInterface).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n-\n-        SdlFile validFile2 = new SdlFile();\n-        validFile2.setName(TestValues.GENERAL_STRING + \"2\");\n-        validFile2.setFileData(TestValues.GENERAL_BYTE_ARRAY);\n-        validFile2.setPersistent(false);\n-        validFile2.setType(FileType.GRAPHIC_JPEG);\n-\n-        SdlFile validFile3 = new SdlFile();\n-        validFile3.setName(TestValues.GENERAL_STRING + \"3\");\n-        validFile3.setFileData(TestValues.GENERAL_BYTE_ARRAY);\n-        validFile3.setPersistent(false);\n-        validFile3.setType(FileType.GRAPHIC_JPEG);\n-\n-        validFile.setType(FileType.AUDIO_WAVE);\n-\n-        final List<SdlFile> filesToUpload = new ArrayList<>();\n-        filesToUpload.add(validFile);\n-        filesToUpload.add(validFile2);\n-        filesToUpload.add(validFile3);\n-\n-        FileManagerConfig fileManagerConfig = new FileManagerConfig();\n-        fileManagerConfig.setArtworkRetryCount(0);\n-        fileManagerConfig.setFileRetryCount(0);\n-        final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n-        fileManager.start(new CompletionListener() {\n-            @Override\n-            public void onComplete(boolean success) {\n-                fileManager.uploadFiles(filesToUpload,\n-                        new MultipleFileCompletionListener() {\n+                    public void onComplete(final Map<String, String> errors) {\n+                        assertOnMainThread(new Runnable() {\n                             @Override\n-                            public void onComplete(Map<String, String> errors) {\n-                                assertTrue(errors.size() == 2);\n+                            public void run() {\n+                                assertNull(errors);\n                             }\n                         });\n+                    }\n+                });\n             }\n         });\n-        assertFalse(fileManager.hasUploadedFile(validFile) && fileManager.hasUploadedFile(validFile3));\n-        assertTrue(fileManager.hasUploadedFile(validFile2));\n     }\n \n     /**\n      * Testing uploading multiple SdlArtwork files.\n      */\n     @Test\n     public void testMultipleArtworkUploadSuccess() {\n-        ISdl internalInterface = mock(ISdl.class);\n+        ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onListFileUploadSuccess).when(internalInterface).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n+        doAnswer(onPutFileSuccess).when(internalInterface).sendRPC(any(PutFile.class));\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n         final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n         fileManager.start(new CompletionListener() {\n             @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(success);\n-                int fileNum = 1;\n-                final List<SdlArtwork> artworkToUpload = new ArrayList<>();\n-                SdlArtwork sdlArtwork = new SdlArtwork();\n-                sdlArtwork.setName(\"art\" + fileNum++);\n-                Uri uri = Uri.parse(\"android.resource://\" + mTestContext.getPackageName() + \"/drawable/ic_sdl\");\n-                sdlArtwork.setUri(uri);\n-                sdlArtwork.setType(FileType.GRAPHIC_PNG);\n-                artworkToUpload.add(sdlArtwork);\n-\n-                sdlArtwork = new SdlArtwork();\n-                sdlArtwork.setName(\"art\" + fileNum++);\n-                uri = Uri.parse(\"android.resource://\" + mTestContext.getPackageName() + \"/drawable/sdl_tray_icon\");\n-                sdlArtwork.setUri(uri);\n-                sdlArtwork.setType(FileType.GRAPHIC_PNG);\n-                artworkToUpload.add(sdlArtwork);\n-\n-                fileManager.uploadFiles(artworkToUpload,\n-                        new MultipleFileCompletionListener() {\n+            public void onComplete(boolean success1) {\n+                SdlArtwork sdlArtwork1 = new SdlArtwork(\"artwork1\", FileType.GRAPHIC_JPEG, Uri.parse(\"android.resource://\" + mTestContext.getPackageName() + \"/drawable/ic_sdl\"), false);\n+                SdlArtwork sdlArtwork2 = new SdlArtwork(\"artwork2\", FileType.GRAPHIC_PNG, Uri.parse(\"android.resource://\" + mTestContext.getPackageName() + \"/drawable/sdl_tray_icon\"), false);\n+                final List<SdlArtwork> artworkToUpload = Arrays.asList(sdlArtwork1, sdlArtwork2);\n+\n+                fileManager.uploadFiles(artworkToUpload, new MultipleFileCompletionListener() {\n+                    @Override\n+                    public void onComplete(final Map<String, String> errors) {\n+                        assertOnMainThread(new Runnable() {\n                             @Override\n-                            public void onComplete(Map<String, String> errors) {\n+                            public void run() {\n                                 assertNull(errors);\n                                 List<String> uploadedFileNames = fileManager.getRemoteFileNames();\n                                 for (SdlArtwork artwork : artworkToUpload) {\n                                     assertTrue(uploadedFileNames.contains(artwork.getName()));\n                                 }\n                             }\n                         });\n-            }\n-        });\n-    }\n-\n-    /**\n-     * Testing uploading persistent SdlFile\n-     */\n-    @Test\n-    public void testPersistentFileUploaded() {\n-        ISdl internalInterface = mock(ISdl.class);\n-\n-        doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-\n-        final SdlFile file = new SdlFile();\n-        file.setName(TestValues.GENERAL_STRING_LIST.get(0));\n-        file.setPersistent(true);\n-\n-        FileManagerConfig fileManagerConfig = new FileManagerConfig();\n-        final FileManager fileManager = new FileManager(internalInterface, mTestContext, fileManagerConfig);\n-        fileManager.start(new CompletionListener() {\n-            @Override\n-            public void onComplete(boolean success) {\n-                assertTrue(fileManager.hasUploadedFile(file));\n+                    }\n+                });\n             }\n         });\n     }\n@@ -870,7 +764,7 @@ public void testFileManagerConfig() {\n      */\n     @Test\n     public void testOverwriteFileProperty() {\n-        ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n         doAnswer(onPutFileSuccess).when(internalInterface).sendRPC(any(PutFile.class));\n@@ -881,24 +775,32 @@ public void testOverwriteFileProperty() {\n         fileManager.start(new CompletionListener() {\n             @Override\n             public void onComplete(boolean success) {\n-                assertTrue(success);\n                 fileManager.uploadFile(validFile, new CompletionListener() {\n                     @Override\n-                    public void onComplete(boolean success) {\n-                        assertTrue(success);\n+                    public void onComplete(final boolean success1) {\n+                        assertOnMainThread(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                assertTrue(success1);\n+                            }\n+                        });\n                         validFile.setOverwrite(false);\n                         fileManager.uploadFile(validFile, new CompletionListener() {\n                             @Override\n-                            public void onComplete(boolean success) {\n-                                assertTrue(success);\n+                            public void onComplete(final boolean success2) {\n+                                assertOnMainThread(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        assertTrue(success2);\n+                                        verify(internalInterface, times(2)).sendRPC(any(RPCMessage.class));\n+                                    }\n+                                });\n                             }\n                         });\n-\n                     }\n                 });\n             }\n         });\n-        verify(internalInterface, times(2)).sendRPC(any(RPCMessage.class));\n     }\n \n     /**\n@@ -907,20 +809,14 @@ public void onComplete(boolean success) {\n      */\n     @Test\n     public void testOverWriteFilePropertyListFiles() {\n-        final ISdl internalInterface = mock(ISdl.class);\n+        final ISdl internalInterface = createISdlMock();\n \n         doAnswer(onListFilesSuccess).when(internalInterface).sendRPC(any(ListFiles.class));\n-        doAnswer(onListFileUploadSuccess).when(internalInterface).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n+        doAnswer(onPutFileSuccess).when(internalInterface).sendRPC(any(PutFile.class));\n \n-        final SdlFile validFile2 = new SdlFile();\n-        validFile2.setName(TestValues.GENERAL_STRING + \"2\");\n-        validFile2.setFileData(TestValues.GENERAL_BYTE_ARRAY);\n-        validFile2.setPersistent(false);\n-        validFile2.setType(FileType.GRAPHIC_JPEG);\n+        final SdlArtwork validFile2 = new SdlArtwork(TestValues.GENERAL_STRING + \"2\", FileType.GRAPHIC_JPEG, TestValues.GENERAL_STRING.getBytes(), false);\n \n-        final List<SdlFile> list = new ArrayList<>();\n-        list.add(validFile);\n-        list.add(validFile2);\n+        final List<SdlFile> list = Arrays.asList(validFile, validFile2);\n \n         FileManagerConfig fileManagerConfig = new FileManagerConfig();\n         fileManagerConfig.setArtworkRetryCount(2);\n@@ -937,16 +833,21 @@ public void onComplete(Map<String, String> errors) {\n                         validFile2.setOverwrite(false);\n                         fileManager.uploadFiles(list, new MultipleFileCompletionListener() {\n                             @Override\n-                            public void onComplete(Map<String, String> errors) {\n-                                assertNull(errors);\n+                            public void onComplete(final Map<String, String> errors) {\n+                                assertOnMainThread(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        assertNull(errors);\n+                                        verify(internalInterface, times(2)).sendRPC(any(PutFile.class));\n+                                    }\n+                                });\n                             }\n                         });\n                     }\n                 });\n \n             }\n         });\n-        verify(internalInterface, times(1)).sendRPCs(any(List.class), any(OnMultipleRequestListener.class));\n     }\n \n     /**\n@@ -1005,4 +906,20 @@ public void testSdlFileEquals() {\n         artwork2 = new SdlFile(\"image1\", FileType.GRAPHIC_PNG, 1, false);\n         assertTrue(artwork1.equals(artwork2));\n     }\n+\n+    // Asserts on Taskmaster threads will fail silently so we need to do the assertions on main thread if the code is triggered from Taskmaster\n+    private void assertOnMainThread(Runnable runnable) {\n+        mainHandler.post(runnable);\n+    }\n+\n+    private ISdl createISdlMock() {\n+        ISdl internalInterface = mock(ISdl.class);\n+        Taskmaster taskmaster = new Taskmaster.Builder().build();\n+        taskmaster.start();\n+\n+        when(internalInterface.getTaskmaster()).thenReturn(taskmaster);\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(new SdlMsgVersion(rpcVersion));\n+        when(internalInterface.getMtu(any(SessionType.class))).thenReturn(mtuSize);\n+        return internalInterface;\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "28f09f8bbb5d53a48f291992f369a98852ad04a8",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lifecycle/SystemCapabilityManagerTests.java",
    "status": "modified",
    "additions": 18,
    "deletions": 3,
    "changes": 21,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lifecycle/SystemCapabilityManagerTests.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lifecycle/SystemCapabilityManagerTests.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lifecycle/SystemCapabilityManagerTests.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -7,6 +7,7 @@\n import com.livio.taskmaster.Taskmaster;\n import com.smartdevicelink.managers.ISdl;\n import com.smartdevicelink.managers.ManagerUtility;\n+import com.smartdevicelink.managers.permission.PermissionManager;\n import com.smartdevicelink.protocol.ISdlServiceListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.protocol.enums.SessionType;\n@@ -98,6 +99,8 @@ public void setUp() throws Exception {\n         videoStreamingCapability.setMaxBitrate(TestValues.GENERAL_INT);\n         videoStreamingCapability.setPreferredResolution(TestValues.GENERAL_IMAGERESOLUTION);\n         videoStreamingCapability.setSupportedFormats(TestValues.GENERAL_VIDEOSTREAMINGFORMAT_LIST);\n+        videoStreamingCapability.setPreferredFPS(TestValues.GENERAL_INTEGER);\n+        videoStreamingCapability.setAdditionalVideoStreamingCapabilities(TestValues.GENERAL_ADDITIONAL_CAPABILITY_LIST);\n         systemCapability.setCapabilityForType(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n     }\n \n@@ -204,16 +207,18 @@ public void testParseRAI() {\n     @Test\n     public void testNullDisplayCapabilitiesEnablesAllTextAndImageFields() {\n         List<DisplayCapability> displayCapabilityList = createDisplayCapabilityList(null, TestValues.GENERAL_BUTTONCAPABILITIES_LIST, TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST);\n-        assertEquals(displayCapabilityList.get(0).getWindowCapabilities().get(0).getTextFields().size(), 32);\n-        assertEquals(displayCapabilityList.get(0).getWindowCapabilities().get(0).getImageFields().size(), 16);\n+        assertEquals(displayCapabilityList.get(0).getWindowCapabilities().get(0).getTextFields().size(), 38);\n+        assertEquals(displayCapabilityList.get(0).getWindowCapabilities().get(0).getImageFields().size(), 18);\n     }\n \n     @Test\n     public void testGetVSCapability() {\n         VideoStreamingCapability vsCapability = new VideoStreamingCapability();\n         vsCapability.setMaxBitrate(TestValues.GENERAL_INT);\n         vsCapability.setPreferredResolution(TestValues.GENERAL_IMAGERESOLUTION);\n+        vsCapability.setAdditionalVideoStreamingCapabilities(TestValues.GENERAL_ADDITIONAL_CAPABILITY_LIST);\n         vsCapability.setSupportedFormats(TestValues.GENERAL_VIDEOSTREAMINGFORMAT_LIST);\n+        vsCapability.setPreferredFPS(TestValues.GENERAL_INTEGER);\n \n         SystemCapability cap = new SystemCapability();\n         cap.setSystemCapabilityType(SystemCapabilityType.VIDEO_STREAMING);\n@@ -959,7 +964,7 @@ public void removeServiceListener(SessionType serviceType, ISdlServiceListener s\n         }\n \n         @Override\n-        public void startVideoService(VideoStreamingParameters parameters, boolean encrypted) {\n+        public void startVideoService(VideoStreamingParameters parameters, boolean encrypted, boolean withPendingRestart) {\n         }\n \n         @Override\n@@ -1037,6 +1042,11 @@ public Version getProtocolVersion() {\n             return new Version(1, 0, 0);\n         }\n \n+        @Override\n+        public long getMtu(SessionType serviceType) {\n+            return 0;\n+        }\n+\n         @Override\n         public boolean isTransportForServiceAvailable(SessionType serviceType) {\n             return false;\n@@ -1059,5 +1069,10 @@ public Taskmaster getTaskmaster() {\n         public SystemCapabilityManager getSystemCapabilityManager() {\n             return null;\n         }\n+\n+        @Override\n+        public PermissionManager getPermissionManager() {\n+            return null;\n+        }\n     }\n }"
  },
  {
    "sha": "3459c6e3442230c10418f2cca280b45627f5ceb7",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/AlertAudioDataTest.java",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/AlertAudioDataTest.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/AlertAudioDataTest.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/AlertAudioDataTest.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -0,0 +1,56 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.smartdevicelink.managers.file.filetypes.SdlFile;\n+import com.smartdevicelink.proxy.rpc.enums.FileType;\n+import com.smartdevicelink.proxy.rpc.enums.SpeechCapabilities;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.Collections;\n+\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AlertAudioDataTest {\n+    SdlFile testAudio;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        Context mTestContext = getInstrumentation().getContext();\n+        Uri uri1 = Uri.parse(\"android.resource://\" + mTestContext.getPackageName() + \"/raw/test_audio_square_250hz_80amp_1s.mp3\");\n+        testAudio = new SdlFile(\"TestAudioFile\", FileType.AUDIO_MP3, uri1, false);\n+    }\n+\n+    @Test\n+    public void testConstructors() {\n+        AlertAudioData alertAudioData1 = new AlertAudioData(\"phoneticString\", SpeechCapabilities.TEXT);\n+        alertAudioData1.setPlayTone(true);\n+        assertEquals(\"phoneticString\", alertAudioData1.getAudioData().get(0).getText());\n+        assertTrue(alertAudioData1.isPlayTone());\n+\n+        AlertAudioData alertAudioData2 = new AlertAudioData(\"spokenString\");\n+        assertEquals(\"spokenString\", alertAudioData2.getAudioData().get(0).getText());\n+\n+        AlertAudioData alertAudioData3 = new AlertAudioData(testAudio);\n+        assertEquals(alertAudioData3.getAudioData().get(0).getText(), testAudio.getName());\n+    }\n+\n+    @Test\n+    public void testAdd() {\n+        AlertAudioData alertAudioData1 = new AlertAudioData(\"phoneticString\", SpeechCapabilities.TEXT);\n+        alertAudioData1.addAudioFiles(Collections.singletonList(testAudio));\n+        alertAudioData1.addPhoneticSpeechSynthesizerStrings(Collections.singletonList(\"addition\"), SpeechCapabilities.TEXT);\n+        alertAudioData1.addSpeechSynthesizerStrings(Collections.singletonList(\"addition2\"));\n+        alertAudioData1.addAudioFiles(Collections.singletonList(testAudio));\n+        assertEquals(\"phoneticString\", alertAudioData1.getAudioData().get(0).getText());\n+        assertEquals(testAudio.getName(), alertAudioData1.getAudioData().get(1).getText());\n+        assertEquals(\"addition\", alertAudioData1.getAudioData().get(2).getText());\n+        assertEquals(\"addition2\", alertAudioData1.getAudioData().get(3).getText());\n+    }\n+}"
  },
  {
    "sha": "1655b3d08e424d3a621fce016e0c672208c5b08d",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/AlertManagerTest.java",
    "status": "added",
    "additions": 166,
    "deletions": 0,
    "changes": 166,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/AlertManagerTest.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/AlertManagerTest.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/AlertManagerTest.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -0,0 +1,166 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.livio.taskmaster.Taskmaster;\n+import com.smartdevicelink.managers.AlertCompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.managers.lifecycle.OnSystemCapabilityListener;\n+import com.smartdevicelink.managers.lifecycle.SystemCapabilityManager;\n+import com.smartdevicelink.managers.permission.OnPermissionChangeListener;\n+import com.smartdevicelink.managers.permission.PermissionManager;\n+import com.smartdevicelink.managers.permission.PermissionStatus;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.rpc.DisplayCapability;\n+import com.smartdevicelink.proxy.rpc.ImageField;\n+import com.smartdevicelink.proxy.rpc.SoftButtonCapabilities;\n+import com.smartdevicelink.proxy.rpc.TextField;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.SystemCapabilityType;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+import com.smartdevicelink.test.TestValues;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AlertManagerTest {\n+    AlertManager alertManager;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        // mock things\n+        ISdl internalInterface = mock(ISdl.class);\n+        FileManager fileManager = mock(FileManager.class);\n+        PermissionManager permissionManager = mock(PermissionManager.class);\n+\n+        when(internalInterface.getPermissionManager()).thenReturn(permissionManager);\n+\n+        Taskmaster taskmaster = new Taskmaster.Builder().build();\n+        taskmaster.start();\n+        when(internalInterface.getTaskmaster()).thenReturn(taskmaster);\n+\n+        Answer<Void> permissionAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                OnPermissionChangeListener onPermissionChangeListener = (OnPermissionChangeListener) args[2];\n+                Map<FunctionID, PermissionStatus > allowedPermissions = new HashMap<>();\n+                int permissionGroupStatus = PermissionManager.PERMISSION_GROUP_STATUS_DISALLOWED;\n+                onPermissionChangeListener.onPermissionsChange(allowedPermissions,permissionGroupStatus);\n+                return null;\n+            }\n+        };\n+        doAnswer(permissionAnswer).when(permissionManager).addListener(any(List.class), anyInt(), any(OnPermissionChangeListener.class));\n+\n+        Answer<Void> onSystemCapabilityAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                OnSystemCapabilityListener onSystemCapabilityListener = (OnSystemCapabilityListener) args[1];\n+                WindowCapability windowCapability = getWindowCapability(3);\n+                DisplayCapability displayCapability = new DisplayCapability();\n+                displayCapability.setWindowCapabilities(Collections.singletonList(windowCapability));\n+                List<DisplayCapability> capabilities = Collections.singletonList(displayCapability);\n+                onSystemCapabilityListener.onCapabilityRetrieved(capabilities);\n+                return null;\n+            }\n+        };\n+\n+        SystemCapabilityManager systemCapabilityManager = mock(SystemCapabilityManager.class);\n+        doAnswer(onSystemCapabilityAnswer).when(systemCapabilityManager).addOnSystemCapabilityListener(eq(SystemCapabilityType.DISPLAYS), any(OnSystemCapabilityListener.class));\n+        doReturn(systemCapabilityManager).when(internalInterface).getSystemCapabilityManager();\n+\n+        alertManager = new AlertManager(internalInterface, fileManager);\n+    }\n+\n+    @Test\n+    public void testInstantiation() {\n+        assertNotNull(alertManager.currentWindowCapability);\n+        assertNotNull(alertManager.nextCancelId);\n+        assertFalse(alertManager.isAlertRPCAllowed);\n+    }\n+\n+    @Test\n+    public void testPresentAlert() {\n+        AlertView.Builder builder = new AlertView.Builder();\n+        AlertView alertView = builder.build();\n+        alertManager.presentAlert(alertView, new AlertCompletionListener() {\n+            @Override\n+            public void onComplete(boolean success, Integer tryAgainTime) {\n+\n+            }\n+        });\n+        assertTrue(alertManager.transactionQueue.getTasksAsList().size() == 1);\n+    }\n+\n+    private WindowCapability getWindowCapability(int numberOfAlertFields) {\n+        TextField alertText1 = new TextField();\n+        alertText1.setName(TextFieldName.alertText1);\n+        TextField alertText2 = new TextField();\n+        alertText2.setName(TextFieldName.alertText2);\n+        TextField alertText3 = new TextField();\n+        alertText3.setName(TextFieldName.alertText3);\n+        TextField mainField4 = new TextField();\n+        mainField4.setName(TextFieldName.mainField4);\n+\n+        List<TextField> textFieldList = new ArrayList<>();\n+\n+        textFieldList.add(alertText1);\n+        textFieldList.add(alertText2);\n+        textFieldList.add(alertText3);\n+\n+        List<TextField> returnList = new ArrayList<>();\n+\n+        if (numberOfAlertFields > 0) {\n+            for (int i = 0; i < numberOfAlertFields; i++) {\n+                returnList.add(textFieldList.get(i));\n+            }\n+        }\n+\n+        WindowCapability windowCapability = new WindowCapability();\n+        windowCapability.setTextFields(returnList);\n+\n+        ImageField imageField = new ImageField();\n+        imageField.setName(ImageFieldName.alertIcon);\n+        List<ImageField> imageFieldList = new ArrayList<>();\n+        imageFieldList.add(imageField);\n+        windowCapability.setImageFields(imageFieldList);\n+\n+        windowCapability.setImageFields(imageFieldList);\n+\n+        SoftButtonCapabilities softButtonCapabilities = new SoftButtonCapabilities();\n+        softButtonCapabilities.setImageSupported(TestValues.GENERAL_BOOLEAN);\n+        softButtonCapabilities.setShortPressAvailable(TestValues.GENERAL_BOOLEAN);\n+        softButtonCapabilities.setLongPressAvailable(TestValues.GENERAL_BOOLEAN);\n+        softButtonCapabilities.setUpDownAvailable(TestValues.GENERAL_BOOLEAN);\n+        softButtonCapabilities.setTextSupported(TestValues.GENERAL_BOOLEAN);\n+\n+        windowCapability.setSoftButtonCapabilities(Collections.singletonList(softButtonCapabilities));\n+        return windowCapability;\n+    }\n+\n+}"
  },
  {
    "sha": "1283992a28f45be3250d6628029d807c19ea3297",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/PresentAlertOperationTest.java",
    "status": "added",
    "additions": 315,
    "deletions": 0,
    "changes": 315,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/PresentAlertOperationTest.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/PresentAlertOperationTest.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/PresentAlertOperationTest.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -0,0 +1,315 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.AlertCompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.managers.file.MultipleFileCompletionListener;\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.managers.file.filetypes.SdlFile;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.rpc.Alert;\n+import com.smartdevicelink.proxy.rpc.AlertResponse;\n+import com.smartdevicelink.proxy.rpc.CancelInteraction;\n+import com.smartdevicelink.proxy.rpc.CancelInteractionResponse;\n+import com.smartdevicelink.proxy.rpc.ImageField;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SdlMsgVersion;\n+import com.smartdevicelink.proxy.rpc.SoftButtonCapabilities;\n+import com.smartdevicelink.proxy.rpc.TextField;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.FileType;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.SpeechCapabilities;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+import com.smartdevicelink.test.TestValues;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class PresentAlertOperationTest {\n+\n+    private PresentAlertOperation presentAlertOperation;\n+    private WindowCapability defaultMainWindowCapability;\n+    private AlertView alertView;\n+    private AlertAudioData alertAudioData;\n+    SdlArtwork testAlertArtwork, testSoftButtonArtwork;\n+    ISdl internalInterface;\n+    FileManager fileManager;\n+    SoftButtonState alertSoftButtonState;\n+    SoftButtonObject alertSoftButtonObject;\n+    private List<SpeechCapabilities> speechCapabilities;\n+    SdlFile testAudio;\n+    AlertCompletionListener alertCompletionListener;\n+    BaseAlertManager.AlertSoftButtonClearListener alertSoftButtonClearListener;\n+\n+    private Answer<Void> onArtworkUploadSuccess = new Answer<Void>() {\n+        @Override\n+        public Void answer(InvocationOnMock invocation) {\n+            Object[] args = invocation.getArguments();\n+            MultipleFileCompletionListener listener = (MultipleFileCompletionListener) args[1];\n+            listener.onComplete(null);\n+            return null;\n+        }\n+    };\n+\n+    private Answer<Void> onAlertSuccess = new Answer<Void>() {\n+        @Override\n+        public Void answer(InvocationOnMock invocation) {\n+            Object[] args = invocation.getArguments();\n+            RPCRequest message = (RPCRequest) args[0];\n+            if (message instanceof Alert) {\n+                int correlationId = message.getCorrelationID();\n+                AlertResponse alertResponse = new AlertResponse();\n+                alertResponse.setSuccess(true);\n+                message.getOnRPCResponseListener().onResponse(correlationId, alertResponse);\n+            }\n+            return null;\n+        }\n+    };\n+\n+    private Answer<Void> onCancelAlert = new Answer<Void>() {\n+        @Override\n+        public Void answer(InvocationOnMock invocation) {\n+            Object[] args = invocation.getArguments();\n+            RPCRequest message = (RPCRequest) args[0];\n+            if (message instanceof CancelInteraction) {\n+                int correlationId = message.getCorrelationID();\n+                CancelInteractionResponse cancelInteraction = new CancelInteractionResponse();\n+                cancelInteraction.setSuccess(true);\n+                message.getOnRPCResponseListener().onResponse(correlationId, cancelInteraction);\n+            }\n+            return null;\n+        }\n+    };\n+\n+    Task task;\n+    @Before\n+    public void setUp() throws Exception {\n+        Context mTestContext = getInstrumentation().getContext();\n+        // mock things\n+        internalInterface = mock(ISdl.class);\n+        fileManager = mock(FileManager.class);\n+        task = mock(Task.class);\n+\n+        alertSoftButtonClearListener = new BaseAlertManager.AlertSoftButtonClearListener() {\n+            @Override\n+            public void onButtonClear(List<SoftButtonObject> softButtonObjects) {\n+\n+            }\n+        };\n+        testAlertArtwork = new SdlArtwork();\n+        testAlertArtwork.setName(\"testArtwork1\");\n+        Uri uri1 = Uri.parse(\"android.resource://\" + mTestContext.getPackageName() + \"/drawable/ic_sdl\");\n+        testAlertArtwork.setUri(uri1);\n+        testAlertArtwork.setType(FileType.GRAPHIC_PNG);\n+\n+        testSoftButtonArtwork = new SdlArtwork();\n+        Uri uri2 = Uri.parse(\"android.resource://\" + mTestContext.getPackageName() + \"drawable-hdpi/sdl_lockscreen_icon.png\");\n+        testSoftButtonArtwork.setName(\"testArtwork2\");\n+        testSoftButtonArtwork.setUri(uri2);\n+        testSoftButtonArtwork.setType(FileType.GRAPHIC_PNG);\n+\n+        Uri uri3 = Uri.parse(\"android.resource://\" + mTestContext.getPackageName() + \"/raw/test_audio_square_250hz_80amp_1s.mp3\");\n+        testAudio = new SdlFile(\"TestAudioFile\", FileType.AUDIO_MP3, uri3, false);\n+\n+        alertAudioData = new AlertAudioData(\"Spoken Sting\");\n+        alertAudioData.setPlayTone(true);\n+        alertAudioData.addAudioFiles(Collections.singletonList(testAudio));\n+\n+        alertSoftButtonState = new SoftButtonState(\"state1\", \"State 1\", testSoftButtonArtwork);\n+        SoftButtonObject.OnEventListener onEventListener = new SoftButtonObject.OnEventListener() {\n+            @Override\n+            public void onPress(SoftButtonObject softButtonObject, OnButtonPress onButtonPress) {\n+\n+            }\n+\n+            @Override\n+            public void onEvent(SoftButtonObject softButtonObject, OnButtonEvent onButtonEvent) {\n+\n+            }\n+        };\n+        alertSoftButtonObject = new SoftButtonObject(\"Soft button 1\", alertSoftButtonState, onEventListener);\n+\n+        AlertView.Builder builder = new AlertView.Builder();\n+        builder.setText(\"test\");\n+        builder.setSecondaryText(\"secondaryText\");\n+        builder.setTertiaryText(\"tertiaryText\");\n+        builder.setAudio(alertAudioData);\n+        builder.setIcon(testAlertArtwork);\n+        builder.setDefaultTimeOut(10);\n+        builder.setTimeout(5);\n+        builder.setSoftButtons(Collections.singletonList(alertSoftButtonObject));\n+        builder.setShowWaitIndicator(true);\n+        alertView = builder.build();\n+\n+        defaultMainWindowCapability = getWindowCapability(3);\n+        speechCapabilities = new ArrayList<SpeechCapabilities>();\n+        speechCapabilities.add(SpeechCapabilities.FILE);\n+        alertCompletionListener = new AlertCompletionListener() {\n+            @Override\n+            public void onComplete(boolean success, Integer tryAgainTime) {\n+\n+            }\n+        };\n+        presentAlertOperation = new PresentAlertOperation(internalInterface, alertView, defaultMainWindowCapability, speechCapabilities, fileManager, 1, alertCompletionListener, alertSoftButtonClearListener);\n+        when(fileManager.fileNeedsUpload(any(SdlFile.class))).thenReturn(true);\n+    }\n+\n+    @Test\n+    public void testPresentAlertTruncatedText() {\n+        doAnswer(onAlertSuccess).when(internalInterface).sendRPC(any(Alert.class));\n+        // Same response works for uploading artworks as it does for files\n+\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(new SdlMsgVersion(6, 0));\n+        WindowCapability windowCapability = getWindowCapability(1);\n+        PresentAlertOperation presentAlertOperation = new PresentAlertOperation(internalInterface, alertView, windowCapability, speechCapabilities, fileManager, 1, alertCompletionListener, alertSoftButtonClearListener);\n+        Alert alert = presentAlertOperation.alertRpc();\n+\n+        assertEquals(alert.getAlertText1(), alertView.getText() + \" - \" + alertView.getSecondaryText() + \" - \" + alertView.getTertiaryText());\n+\n+        windowCapability = getWindowCapability(2);\n+\n+         presentAlertOperation = new PresentAlertOperation(internalInterface, alertView, windowCapability, speechCapabilities, fileManager, 1, alertCompletionListener, alertSoftButtonClearListener);\n+        alert = presentAlertOperation.alertRpc();\n+        assertEquals(alert.getAlertText1(), alertView.getText());\n+        assertEquals(alert.getAlertText2(),alertView.getSecondaryText() + \" - \" + alertView.getTertiaryText());\n+    }\n+\n+    @Test\n+    public void testPresentAlertHappyPath() {\n+        doAnswer(onAlertSuccess).when(internalInterface).sendRPC(any(Alert.class));\n+        // Same response works for uploading artworks as it does for files\n+        doAnswer(onArtworkUploadSuccess).when(fileManager).uploadArtworks(any(List.class), any(MultipleFileCompletionListener.class));\n+        doAnswer(onArtworkUploadSuccess).when(fileManager).uploadFiles(any(List.class), any(MultipleFileCompletionListener.class));\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(new SdlMsgVersion(6, 0));\n+\n+        // Test Images need to be uploaded, sending text and uploading images\n+        presentAlertOperation.onExecute();\n+\n+        // Verifies that uploadArtworks gets called only with the fist presentAlertOperation.onExecute call\n+        verify(fileManager, times(1)).uploadArtworks(any(List.class), any(MultipleFileCompletionListener.class));\n+\n+        verify(fileManager, times(1)).uploadFiles(any(List.class), any(MultipleFileCompletionListener.class));\n+\n+        verify(internalInterface, times(1)).sendRPC(any(Alert.class));\n+    }\n+\n+    @Test\n+    public void testPresentAlertNoAudioAndArtwork() {\n+        doAnswer(onAlertSuccess).when(internalInterface).sendRPC(any(Alert.class));\n+\n+        AlertView.Builder builder = new AlertView.Builder();\n+        builder.setText(\"Hi\");\n+        builder.build();\n+        AlertView alertView1 = builder.build();\n+\n+        presentAlertOperation = new PresentAlertOperation(internalInterface, alertView1, defaultMainWindowCapability, speechCapabilities, fileManager, 2, alertCompletionListener, alertSoftButtonClearListener);\n+\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(new SdlMsgVersion(6, 0));\n+\n+        // Test Images need to be uploaded, sending text and uploading images\n+        presentAlertOperation.onExecute();\n+\n+        // Verifies that uploadArtworks gets called only with the fist presentAlertOperation.onExecute call\n+        verify(fileManager, times(0)).uploadArtworks(any(List.class), any(MultipleFileCompletionListener.class));\n+        verify(fileManager, times(0)).uploadFiles(any(List.class), any(MultipleFileCompletionListener.class));\n+\n+        verify(internalInterface, times(1)).sendRPC(any(Alert.class));\n+    }\n+\n+    @Test\n+    public void testPresentAlertNoImages() {\n+        doAnswer(onAlertSuccess).when(internalInterface).sendRPC(any(Alert.class));\n+        // Same response works for uploading artworks as it does for files\n+        doAnswer(onArtworkUploadSuccess).when(fileManager).uploadArtworks(any(List.class), any(MultipleFileCompletionListener.class));\n+        doAnswer(onArtworkUploadSuccess).when(fileManager).uploadFiles(any(List.class), any(MultipleFileCompletionListener.class));\n+\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(new SdlMsgVersion(6, 0));\n+\n+        // Test Images need to be uploaded, sending text and uploading images\n+        presentAlertOperation.onExecute();\n+\n+        // Verifies that uploadArtworks gets called only with the fist presentAlertOperation.onExecute call\n+        verify(fileManager, times(1)).uploadArtworks(any(List.class), any(MultipleFileCompletionListener.class));\n+        verify(internalInterface, times(1)).sendRPC(any(Alert.class));\n+    }\n+\n+    @Test\n+    public void testCancelOperation() {\n+        //Cancel right away\n+        presentAlertOperation.cancelTask();\n+        presentAlertOperation.onExecute();\n+        verify(internalInterface, times(0)).sendRPC(any(Alert.class));\n+    }\n+\n+    private WindowCapability getWindowCapability(int numberOfAlertFields) {\n+        TextField alertText1 = new TextField();\n+        alertText1.setName(TextFieldName.alertText1);\n+        TextField alertText2 = new TextField();\n+        alertText2.setName(TextFieldName.alertText2);\n+        TextField alertText3 = new TextField();\n+        alertText3.setName(TextFieldName.alertText3);\n+        TextField mainField4 = new TextField();\n+        mainField4.setName(TextFieldName.mainField4);\n+\n+        List<TextField> textFieldList = new ArrayList<>();\n+\n+        textFieldList.add(alertText1);\n+        textFieldList.add(alertText2);\n+        textFieldList.add(alertText3);\n+\n+        List<TextField> returnList = new ArrayList<>();\n+\n+        if (numberOfAlertFields > 0) {\n+            for (int i = 0; i < numberOfAlertFields; i++) {\n+                returnList.add(textFieldList.get(i));\n+            }\n+        }\n+\n+        WindowCapability windowCapability = new WindowCapability();\n+        windowCapability.setTextFields(returnList);\n+\n+        ImageField imageField = new ImageField();\n+        imageField.setName(ImageFieldName.alertIcon);\n+        List<ImageField> imageFieldList = new ArrayList<>();\n+        imageFieldList.add(imageField);\n+        windowCapability.setImageFields(imageFieldList);\n+\n+        windowCapability.setImageFields(imageFieldList);\n+\n+        SoftButtonCapabilities softButtonCapabilities = new SoftButtonCapabilities();\n+        softButtonCapabilities.setImageSupported(TestValues.GENERAL_BOOLEAN);\n+        softButtonCapabilities.setShortPressAvailable(TestValues.GENERAL_BOOLEAN);\n+        softButtonCapabilities.setLongPressAvailable(TestValues.GENERAL_BOOLEAN);\n+        softButtonCapabilities.setUpDownAvailable(TestValues.GENERAL_BOOLEAN);\n+        softButtonCapabilities.setTextSupported(TestValues.GENERAL_BOOLEAN);\n+\n+        windowCapability.setSoftButtonCapabilities(Collections.singletonList(softButtonCapabilities));\n+        return windowCapability;\n+    }\n+}"
  },
  {
    "sha": "6ccf93aeb40d2b0caf606d27590cc8e7be32f741",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/ScreenManagerTests.java",
    "status": "modified",
    "additions": 93,
    "deletions": 0,
    "changes": 93,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/ScreenManagerTests.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/ScreenManagerTests.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/ScreenManagerTests.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -7,6 +7,7 @@\n import com.smartdevicelink.managers.ISdl;\n import com.smartdevicelink.managers.file.FileManager;\n import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.managers.permission.PermissionManager;\n import com.smartdevicelink.managers.screen.menu.DynamicMenuUpdatesMode;\n import com.smartdevicelink.proxy.rpc.enums.FileType;\n import com.smartdevicelink.proxy.rpc.enums.MetadataType;\n@@ -18,9 +19,11 @@\n import org.junit.runner.RunWith;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertFalse;\n import static junit.framework.TestCase.assertNull;\n import static junit.framework.TestCase.assertTrue;\n import static org.mockito.Mockito.mock;\n@@ -41,6 +44,9 @@ public void setUp() throws Exception {\n \n         ISdl internalInterface = mock(ISdl.class);\n         when(internalInterface.getTaskmaster()).thenReturn(new Taskmaster.Builder().build());\n+        PermissionManager permissionManager = mock(PermissionManager.class);\n+\n+        when(internalInterface.getPermissionManager()).thenReturn(permissionManager);\n         FileManager fileManager = mock(FileManager.class);\n         screenManager = new ScreenManager(internalInterface, fileManager);\n         screenManager.start(null);\n@@ -174,4 +180,91 @@ public void testSetSoftButtonObjects() {\n         assertEquals(screenManager.getSoftButtonObjectById(200), softButtonObject2);\n     }\n \n+    @Test\n+    public void testSettingSoftButtonId() {\n+        // Create softButtonObject1\n+        SoftButtonState softButtonState1 = new SoftButtonState(\"object1-state1\", \"it is\", testArtwork);\n+        SoftButtonState softButtonState2 = new SoftButtonState(\"object1-state2\", \"Wed\", testArtwork);\n+        SoftButtonObject softButtonObject1 = new SoftButtonObject(\"object1\", Arrays.asList(softButtonState1, softButtonState2), softButtonState1.getName(), null);\n+        softButtonObject1.setButtonId(100);\n+\n+        // Create softButtonObject2\n+        SoftButtonState softButtonState3 = new SoftButtonState(\"object2-state1\", \"my\", testArtwork);\n+        SoftButtonState softButtonState4 = new SoftButtonState(\"object2-state2\", \"dudes!\", null);\n+        SoftButtonObject softButtonObject2 = new SoftButtonObject(\"object2\", Arrays.asList(softButtonState3, softButtonState4), softButtonState3.getName(), null);\n+        softButtonObject2.setButtonId(200);\n+\n+        List<SoftButtonObject> softButtonObjects = Arrays.asList(softButtonObject1, softButtonObject2);\n+        assertTrue(screenManager.checkAndAssignButtonIds(softButtonObjects, BaseScreenManager.ManagerLocation.SOFTBUTTON_MANAGER));\n+        screenManager.softButtonIDBySoftButtonManager.add(200);\n+        assertFalse(screenManager.checkAndAssignButtonIds(softButtonObjects, BaseScreenManager.ManagerLocation.ALERT_MANAGER));\n+        screenManager.softButtonIDByAlertManager.add(100);\n+        assertFalse(screenManager.checkAndAssignButtonIds(softButtonObjects, BaseScreenManager.ManagerLocation.SOFTBUTTON_MANAGER));\n+        screenManager.softButtonIDByAlertManager.clear();\n+        screenManager.softButtonIDBySoftButtonManager.clear();\n+        assertTrue(screenManager.checkAndAssignButtonIds(softButtonObjects, BaseScreenManager.ManagerLocation.ALERT_MANAGER));\n+        softButtonObject1.setButtonId(400);\n+        softButtonObject2.setButtonId(500);\n+        assertTrue(screenManager.checkAndAssignButtonIds(softButtonObjects, BaseScreenManager.ManagerLocation.SOFTBUTTON_MANAGER));\n+        SoftButtonObject softButtonObject3 = new SoftButtonObject(\"object1\", Arrays.asList(softButtonState1, softButtonState2), softButtonState1.getName(), null);\n+        SoftButtonObject softButtonObject4 = new SoftButtonObject(\"object2\", Arrays.asList(softButtonState3, softButtonState4), softButtonState3.getName(), null);\n+        assertTrue(screenManager.checkAndAssignButtonIds(softButtonObjects, BaseScreenManager.ManagerLocation.SOFTBUTTON_MANAGER));\n+\n+\n+\n+\n+\n+    }\n+    @Test\n+    public void testAssigningIdsToSoftButtonObjects() {\n+        SoftButtonObject sbo1, sbo2, sbo3, sbo4, sbo5;\n+\n+        // Case 1 - don't set id for any button (Manager should set ids automatically starting from 1 and up)\n+        sbo1 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo2 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo3 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo4 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo5 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        screenManager.checkAndAssignButtonIds(Arrays.asList(sbo1, sbo2, sbo3, sbo4, sbo5), BaseScreenManager.ManagerLocation.SOFTBUTTON_MANAGER);\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 1, sbo1.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 2, sbo2.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 3, sbo3.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 4, sbo4.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 5, sbo5.getButtonId());\n+\n+\n+        // Case 2 - Set ids for all buttons (Manager shouldn't alter the ids set by developer)\n+        sbo1 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo1.setButtonId(100);\n+        sbo2 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo2.setButtonId(200);\n+        sbo3 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo3.setButtonId(300);\n+        sbo4 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo4.setButtonId(400);\n+        sbo5 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo5.setButtonId(500);\n+        screenManager.checkAndAssignButtonIds(Arrays.asList(sbo1, sbo2, sbo3, sbo4, sbo5), BaseScreenManager.ManagerLocation.SOFTBUTTON_MANAGER);\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 100, sbo1.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 200, sbo2.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 300, sbo3.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 400, sbo4.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 500, sbo5.getButtonId());\n+\n+\n+        // Case 3 - Set ids for some buttons (Manager shouldn't alter the ids set by developer. And it should assign ids for the ones that don't have id)\n+        sbo1 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo1.setButtonId(50);\n+        sbo2 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo3 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo4 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        sbo4.setButtonId(100);\n+        sbo5 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n+        screenManager.checkAndAssignButtonIds(Arrays.asList(sbo1, sbo2, sbo3, sbo4, sbo5), BaseScreenManager.ManagerLocation.SOFTBUTTON_MANAGER);\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 50, sbo1.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 101, sbo2.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 102, sbo3.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 100, sbo4.getButtonId());\n+        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 103, sbo5.getButtonId());\n+    }\n }"
  },
  {
    "sha": "becc01a749651a260c91da155ba7c246068cdcf4",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SoftButtonManagerTests.java",
    "status": "modified",
    "additions": 5,
    "deletions": 53,
    "changes": 58,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SoftButtonManagerTests.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SoftButtonManagerTests.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SoftButtonManagerTests.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -8,6 +8,7 @@\n import com.smartdevicelink.managers.file.FileManager;\n import com.smartdevicelink.managers.file.MultipleFileCompletionListener;\n import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.managers.file.filetypes.SdlFile;\n import com.smartdevicelink.managers.lifecycle.OnSystemCapabilityListener;\n import com.smartdevicelink.managers.lifecycle.SystemCapabilityManager;\n import com.smartdevicelink.protocol.enums.FunctionID;\n@@ -129,6 +130,10 @@ public Void answer(InvocationOnMock invocation) {\n         doAnswer(onFileManagerUploadAnswer).when(fileManager).uploadArtworks(any(List.class), any(MultipleFileCompletionListener.class));\n \n \n+        // We still want the mock fileManager to use the real implementation for fileNeedsUpload()\n+        when(fileManager.fileNeedsUpload(any(SdlFile.class))).thenCallRealMethod();\n+\n+\n         // Create softButtonManager\n         Taskmaster taskmaster = new Taskmaster.Builder().build();\n         taskmaster.start();\n@@ -299,59 +304,6 @@ public void testSoftButtonObject() {\n         assertEquals(softButtonState1, softButtonObject1.getCurrentState());\n     }\n \n-    @Test\n-    public void testAssigningIdsToSoftButtonObjects() {\n-        SoftButtonObject sbo1, sbo2, sbo3, sbo4, sbo5;\n-\n-        // Case 1 - don't set id for any button (Manager should set ids automatically starting from 1 and up)\n-        sbo1 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo2 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo3 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo4 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo5 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        softButtonManager.checkAndAssignButtonIds(Arrays.asList(sbo1, sbo2, sbo3, sbo4, sbo5));\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 1, sbo1.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 2, sbo2.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 3, sbo3.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 4, sbo4.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 5, sbo5.getButtonId());\n-\n-\n-        // Case 2 - Set ids for all buttons (Manager shouldn't alter the ids set by developer)\n-        sbo1 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo1.setButtonId(100);\n-        sbo2 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo2.setButtonId(200);\n-        sbo3 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo3.setButtonId(300);\n-        sbo4 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo4.setButtonId(400);\n-        sbo5 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo5.setButtonId(500);\n-        softButtonManager.checkAndAssignButtonIds(Arrays.asList(sbo1, sbo2, sbo3, sbo4, sbo5));\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 100, sbo1.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 200, sbo2.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 300, sbo3.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 400, sbo4.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 500, sbo5.getButtonId());\n-\n-\n-        // Case 3 - Set ids for some buttons (Manager shouldn't alter the ids set by developer. And it should assign ids for the ones that don't have id)\n-        sbo1 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo1.setButtonId(50);\n-        sbo2 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo3 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo4 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        sbo4.setButtonId(100);\n-        sbo5 = new SoftButtonObject(null, Collections.EMPTY_LIST, null, null);\n-        softButtonManager.checkAndAssignButtonIds(Arrays.asList(sbo1, sbo2, sbo3, sbo4, sbo5));\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 50, sbo1.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 101, sbo2.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 102, sbo3.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 100, sbo4.getButtonId());\n-        assertEquals(\"SoftButtonObject id doesn't match the expected value\", 103, sbo5.getButtonId());\n-    }\n-\n     /**\n      * Test custom overridden softButtonObject equals method\n      */"
  },
  {
    "sha": "4af040863e5ed78487f5fcf4ca18cf63757e5606",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperationTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperationTest.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperationTest.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperationTest.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -176,6 +176,10 @@ public void setUp() throws Exception {\n         // mock things\n         internalInterface = mock(ISdl.class);\n         fileManager = mock(FileManager.class);\n+\n+        // We still want the mock fileManager to use the real implementation for fileNeedsUpload()\n+        when(fileManager.fileNeedsUpload(any(SdlFile.class))).thenCallRealMethod();\n+\n         setUpCompletionListener();\n         textField1 = \"It is\";\n         textField2 = \"Wednesday\";"
  },
  {
    "sha": "0dde875eab393cc53316252bad8b0aa66a05077b",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceCellTests.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceCellTests.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceCellTests.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceCellTests.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -61,6 +61,7 @@ public void testSettersAndGetters() {\n         choiceCell.setVoiceCommands(TestValues.GENERAL_STRING_LIST);\n         choiceCell.setArtwork(artwork);\n         choiceCell.setSecondaryArtwork(artwork);\n+        choiceCell.setUniqueText(TestValues.GENERAL_STRING);\n \n         // use getters and assert equality\n         assertEquals(choiceCell.getText(), TestValues.GENERAL_STRING);\n@@ -70,6 +71,7 @@ public void testSettersAndGetters() {\n         assertEquals(choiceCell.getArtwork(), artwork);\n         assertEquals(choiceCell.getSecondaryArtwork(), artwork);\n         assertEquals(choiceCell.getChoiceId(), MAX_ID);\n+        assertEquals(choiceCell.getUniqueText(), TestValues.GENERAL_STRING);\n     }\n \n     @Test\n@@ -87,6 +89,7 @@ public void testConstructors() {\n         assertEquals(choiceCell.getArtwork(), artwork);\n         assertEquals(choiceCell.getSecondaryArtwork(), artwork);\n         assertEquals(choiceCell.getChoiceId(), MAX_ID);\n+        assertEquals(choiceCell.getUniqueText(), choiceCell.getText());\n \n \n         choiceCell = new ChoiceCell(TestValues.GENERAL_STRING, TestValues.GENERAL_STRING, TestValues.GENERAL_STRING, TestValues.GENERAL_STRING_LIST, artwork, artwork);\n@@ -97,6 +100,8 @@ public void testConstructors() {\n         assertEquals(choiceCell.getArtwork(), artwork);\n         assertEquals(choiceCell.getSecondaryArtwork(), artwork);\n         assertEquals(choiceCell.getChoiceId(), MAX_ID);\n+        assertEquals(choiceCell.getUniqueText(), choiceCell.getText());\n+\n     }\n \n     @Test\n@@ -116,6 +121,11 @@ public void testCellEquality() {\n         choiceCell3.setSecondaryText(TestValues.GENERAL_STRING);\n         choiceCell3.setTertiaryText(TestValues.GENERAL_STRING);\n \n+        //UniqueText should not be taken into consideration when checking equality\n+        choiceCell.setUniqueText(TestValues.GENERAL_STRING);\n+        choiceCell2.setUniqueText(TestValues.GENERAL_STRING);\n+        choiceCell3.setUniqueText(TestValues.GENERAL_STRING);\n+\n         // Make sure our overridden method works, even though these are different objects in memory\n         assertTrue(choiceCell.equals(choiceCell2));\n         assertFalse(choiceCell.equals(choiceCell3));"
  },
  {
    "sha": "16ea857f5547688a5d3013c01fdc38379260f251",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceSetManagerTests.java",
    "status": "modified",
    "additions": 163,
    "deletions": 12,
    "changes": 175,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceSetManagerTests.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceSetManagerTests.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceSetManagerTests.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -34,15 +34,19 @@\n  */\n \n package com.smartdevicelink.managers.screen.choiceset;\n-\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n \n import com.livio.taskmaster.Taskmaster;\n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.ISdl;\n import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.proxy.rpc.KeyboardCapabilities;\n+import com.smartdevicelink.proxy.rpc.KeyboardLayoutCapability;\n import com.smartdevicelink.proxy.rpc.KeyboardProperties;\n+import com.smartdevicelink.proxy.rpc.SdlMsgVersion;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n import com.smartdevicelink.proxy.rpc.enums.HMILevel;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardInputMask;\n import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n import com.smartdevicelink.proxy.rpc.enums.KeypressMode;\n import com.smartdevicelink.proxy.rpc.enums.Language;\n@@ -54,10 +58,12 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n+import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.List;\n \n import static junit.framework.TestCase.assertEquals;\n@@ -86,6 +92,7 @@ public void setUp() throws Exception {\n         FileManager fileManager = mock(FileManager.class);\n         taskmaster = new Taskmaster.Builder().build();\n         when(internalInterface.getTaskmaster()).thenReturn(taskmaster);\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(new SdlMsgVersion(7, 0));\n         csm = new ChoiceSetManager(internalInterface, fileManager);\n \n         assertEquals(csm.getState(), BaseSubManager.SETTING_UP);\n@@ -148,29 +155,37 @@ public void onError(String error) {\n         ChoiceSet choiceSet1 = new ChoiceSet(\"test\", Collections.<ChoiceCell>emptyList(), choiceSetSelectionListener);\n         assertFalse(csm.setUpChoiceSet(choiceSet1));\n \n-        // cells cant have duplicate text\n+        // Identical cells will not be allowed\n         ChoiceCell cell1 = new ChoiceCell(\"test\");\n         ChoiceCell cell2 = new ChoiceCell(\"test\");\n         ChoiceSet choiceSet2 = new ChoiceSet(\"test\", Arrays.asList(cell1, cell2), choiceSetSelectionListener);\n         assertFalse(csm.setUpChoiceSet(choiceSet2));\n \n-        // cells cannot mix and match VR / non-VR\n-        ChoiceCell cell3 = new ChoiceCell(\"test\", Collections.singletonList(\"Test\"), null);\n-        ChoiceCell cell4 = new ChoiceCell(\"test2\");\n+        // cells that have duplicate text will be allowed if there is another property to make them unique because a unique name will be assigned and used\n+        ChoiceCell cell3 = new ChoiceCell(\"test\");\n+        cell3.setSecondaryText(\"text 1\");\n+        ChoiceCell cell4 = new ChoiceCell(\"test\");\n+        cell4.setSecondaryText(\"text 2\");\n         ChoiceSet choiceSet3 = new ChoiceSet(\"test\", Arrays.asList(cell3, cell4), choiceSetSelectionListener);\n-        assertFalse(csm.setUpChoiceSet(choiceSet3));\n+        assertTrue(csm.setUpChoiceSet(choiceSet3));\n \n-        // VR Commands must be unique\n+        // cells cannot mix and match VR / non-VR\n         ChoiceCell cell5 = new ChoiceCell(\"test\", Collections.singletonList(\"Test\"), null);\n-        ChoiceCell cell6 = new ChoiceCell(\"test2\", Collections.singletonList(\"Test\"), null);\n+        ChoiceCell cell6 = new ChoiceCell(\"test2\");\n         ChoiceSet choiceSet4 = new ChoiceSet(\"test\", Arrays.asList(cell5, cell6), choiceSetSelectionListener);\n         assertFalse(csm.setUpChoiceSet(choiceSet4));\n \n-        // Passing Case\n+        // VR Commands must be unique\n         ChoiceCell cell7 = new ChoiceCell(\"test\", Collections.singletonList(\"Test\"), null);\n-        ChoiceCell cell8 = new ChoiceCell(\"test2\", Collections.singletonList(\"Test2\"), null);\n+        ChoiceCell cell8 = new ChoiceCell(\"test2\", Collections.singletonList(\"Test\"), null);\n         ChoiceSet choiceSet5 = new ChoiceSet(\"test\", Arrays.asList(cell7, cell8), choiceSetSelectionListener);\n-        assertTrue(csm.setUpChoiceSet(choiceSet5));\n+        assertFalse(csm.setUpChoiceSet(choiceSet5));\n+\n+        // Passing Case\n+        ChoiceCell cell9 = new ChoiceCell(\"test\", Collections.singletonList(\"Test\"), null);\n+        ChoiceCell cell10 = new ChoiceCell(\"test2\", Collections.singletonList(\"Test2\"), null);\n+        ChoiceSet choiceSet6 = new ChoiceSet(\"test\", Arrays.asList(cell9, cell10), choiceSetSelectionListener);\n+        assertTrue(csm.setUpChoiceSet(choiceSet6));\n     }\n \n     @Test\n@@ -193,7 +208,7 @@ public void testUpdateIdsOnChoices() {\n         ChoiceCell cell1 = new ChoiceCell(\"test\");\n         ChoiceCell cell2 = new ChoiceCell(\"test2\");\n         ChoiceCell cell3 = new ChoiceCell(\"test3\");\n-        HashSet<ChoiceCell> cellSet = new HashSet<>();\n+        LinkedHashSet<ChoiceCell> cellSet = new LinkedHashSet<>();\n         cellSet.add(cell1);\n         cellSet.add(cell2);\n         cellSet.add(cell3);\n@@ -208,6 +223,32 @@ public void testUpdateIdsOnChoices() {\n         assertNotSame(cell3.getChoiceId(), 2000000000);\n     }\n \n+    @Test\n+    public void testAddUniqueNamesToCells() {\n+        ChoiceCell cell1 = new ChoiceCell(\"McDonalds\", \"1 mile away\", null, null, null, null);\n+        ChoiceCell cell2 = new ChoiceCell(\"McDonalds\", \"2 mile away\", null, null, null, null);\n+        ChoiceCell cell3 = new ChoiceCell(\"Starbucks\", \"3 mile away\", null, null, null, null);\n+        ChoiceCell cell4 = new ChoiceCell(\"McDonalds\", \"4 mile away\", null, null, null, null);\n+        ChoiceCell cell5 = new ChoiceCell(\"Starbucks\", \"5 mile away\", null, null, null, null);\n+        ChoiceCell cell6 = new ChoiceCell(\"Meijer\", \"6 mile away\", null, null, null, null);\n+        LinkedHashSet<ChoiceCell> cellList = new LinkedHashSet<>();\n+        cellList.add(cell1);\n+        cellList.add(cell2);\n+        cellList.add(cell3);\n+        cellList.add(cell4);\n+        cellList.add(cell5);\n+        cellList.add(cell6);\n+\n+        csm.addUniqueNamesToCells(cellList);\n+\n+        assertEquals(cell1.getUniqueText(), \"McDonalds\");\n+        assertEquals(cell2.getUniqueText(), \"McDonalds (2)\");\n+        assertEquals(cell3.getUniqueText(), \"Starbucks\");\n+        assertEquals(cell4.getUniqueText(), \"McDonalds (3)\");\n+        assertEquals(cell5.getUniqueText(), \"Starbucks (2)\");\n+        assertEquals(cell6.getUniqueText(), \"Meijer\");\n+    }\n+\n     @Test\n     public void testChoicesToBeRemovedFromPendingWithArray() {\n \n@@ -288,6 +329,116 @@ public void testPresentingKeyboardShouldNotReturnCancelIDIfKeyboardCannotBeSent(\n         assertNull(cancelId);\n     }\n \n+    @Test\n+    public void testDefaultWindowCapabilityNotSet() throws NoSuchFieldException, IllegalAccessException {\n+        ISdl internalInterface = mock(ISdl.class);\n+        when(internalInterface.getTaskmaster()).thenReturn(taskmaster);\n+        FileManager fileManager = mock(FileManager.class);\n+\n+        // Test direct set\n+        ChoiceSetManager newCSM = new ChoiceSetManager(internalInterface, fileManager);\n+        newCSM.setKeyboardConfiguration(newCSM.defaultKeyboardConfiguration());\n+        Field field = BaseChoiceSetManager.class.getDeclaredField(\"keyboardConfiguration\");\n+        field.setAccessible(true);\n+        KeyboardProperties properties = (KeyboardProperties)field.get(newCSM);\n+        assertEquals(properties, csm.defaultKeyboardConfiguration());\n+\n+        // Test presentKeyboard\n+        newCSM = new ChoiceSetManager(internalInterface, fileManager);\n+        newCSM.presentKeyboard(\"qwerty\", newCSM.defaultKeyboardConfiguration(), null);\n+        field = BaseChoiceSetManager.class.getDeclaredField(\"keyboardConfiguration\");\n+        field.setAccessible(true);\n+        properties = (KeyboardProperties)field.get(newCSM);\n+        assertEquals(properties, csm.defaultKeyboardConfiguration());\n+    }\n+\n+    @Test\n+    public void testDefaultWindowCapabilityTooManyKeys() throws NoSuchFieldException, IllegalAccessException {\n+        ISdl internalInterface = mock(ISdl.class);\n+        when(internalInterface.getTaskmaster()).thenReturn(taskmaster);\n+        FileManager fileManager = mock(FileManager.class);\n+\n+        ChoiceSetManager newCSM = new ChoiceSetManager(internalInterface, fileManager);\n+        WindowCapability smallKeysAmountCapability = new WindowCapability();\n+        KeyboardCapabilities capabilities = new KeyboardCapabilities();\n+        capabilities.setMaskInputCharactersSupported(true);\n+        KeyboardLayout layout = KeyboardLayout.QWERTY;\n+        capabilities.setSupportedKeyboards(Collections.singletonList(new KeyboardLayoutCapability(layout, 1)));\n+        smallKeysAmountCapability.setKeyboardCapabilities(capabilities);\n+        newCSM.defaultMainWindowCapability = smallKeysAmountCapability;\n+\n+        KeyboardProperties setProperties = new KeyboardProperties();\n+        setProperties.setKeyboardLayout(layout);\n+        setProperties.setCustomKeys(Arrays.asList(\"1\", \"2\"));\n+\n+        newCSM.setKeyboardConfiguration(setProperties);\n+        Field field = BaseChoiceSetManager.class.getDeclaredField(\"keyboardConfiguration\");\n+        field.setAccessible(true);\n+\n+        KeyboardProperties getProperties = (KeyboardProperties)field.get(newCSM);\n+\n+        assertEquals(getProperties.getCustomKeys().size(), 1);\n+    }\n+\n+    @Test\n+    public void testCustomKeysNull() throws NoSuchFieldException, IllegalAccessException {\n+        ISdl internalInterface = mock(ISdl.class);\n+        when(internalInterface.getTaskmaster()).thenReturn(taskmaster);\n+        FileManager fileManager = mock(FileManager.class);\n+\n+        ChoiceSetManager newCSM = new ChoiceSetManager(internalInterface, fileManager);\n+        WindowCapability smallKeysAmountCapability = new WindowCapability();\n+        KeyboardCapabilities capabilities = new KeyboardCapabilities();\n+        capabilities.setMaskInputCharactersSupported(true);\n+        KeyboardLayout layout = KeyboardLayout.QWERTY;\n+        capabilities.setSupportedKeyboards(Collections.singletonList(new KeyboardLayoutCapability(layout, 0)));\n+        smallKeysAmountCapability.setKeyboardCapabilities(capabilities);\n+        newCSM.defaultMainWindowCapability = smallKeysAmountCapability;\n+\n+        KeyboardProperties setProperties = new KeyboardProperties();\n+        setProperties.setKeyboardLayout(layout);\n+        setProperties.setCustomKeys(new ArrayList<String>());\n+\n+        newCSM.setKeyboardConfiguration(setProperties);\n+        Field field = BaseChoiceSetManager.class.getDeclaredField(\"keyboardConfiguration\");\n+        field.setAccessible(true);\n+\n+        KeyboardProperties getProperties = (KeyboardProperties)field.get(newCSM);\n+\n+        assertNull(getProperties.getCustomKeys());\n+    }\n+\n+    @Test\n+    public void testMaskInputCharactersNotSupported() throws NoSuchFieldException, IllegalAccessException {\n+        ISdl internalInterface = mock(ISdl.class);\n+        when(internalInterface.getTaskmaster()).thenReturn(taskmaster);\n+        FileManager fileManager = mock(FileManager.class);\n+\n+        ChoiceSetManager newCSM = new ChoiceSetManager(internalInterface, fileManager);\n+        WindowCapability maskInputNotSupportedCapability = new WindowCapability();\n+        KeyboardCapabilities capabilities = new KeyboardCapabilities();\n+\n+        capabilities.setMaskInputCharactersSupported(false);\n+        KeyboardLayout layout = KeyboardLayout.QWERTY;\n+        capabilities.setSupportedKeyboards(Collections.singletonList(new KeyboardLayoutCapability(layout, 0)));\n+\n+        maskInputNotSupportedCapability.setKeyboardCapabilities(capabilities);\n+\n+        newCSM.defaultMainWindowCapability = maskInputNotSupportedCapability;\n+\n+        KeyboardProperties setProperties = new KeyboardProperties();\n+        setProperties.setKeyboardLayout(layout);\n+        setProperties.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n+\n+        newCSM.setKeyboardConfiguration(setProperties);\n+        Field field = BaseChoiceSetManager.class.getDeclaredField(\"keyboardConfiguration\");\n+        field.setAccessible(true);\n+\n+        KeyboardProperties getProperties = (KeyboardProperties)field.get(newCSM);\n+\n+        assertNull(getProperties.getMaskInputCharacters());\n+    }\n+\n     @Test\n     public void testDismissingExecutingKeyboard() {\n         Integer testCancelID = 42;"
  },
  {
    "sha": "1e2c7359a33ff8bc3d78150b3b9348b734abb06d",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceSetTests.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceSetTests.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceSetTests.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/ChoiceSetTests.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -79,13 +79,31 @@ public void testSettersAndGetters() {\n         assertEquals(choiceSet.getTimeout(), defaultTimeout);\n         assertEquals(choiceSet.getChoices(), choices);\n         assertEquals(choiceSet.getChoiceSetSelectionListener(), listener);\n+\n+        // Test timeout and default timeout\n+        choiceSet.setDefaultTimeout(20);\n+        assertEquals(choiceSet.getDefaultTimeout(), 20);\n+        choiceSet.setDefaultTimeout(1);\n+        assertEquals(choiceSet.getDefaultTimeout(), 5);\n+        choiceSet.setDefaultTimeout(101);\n+        assertEquals(choiceSet.getDefaultTimeout(), 100);\n+\n+        choiceSet.setTimeout(20);\n+        assertEquals(choiceSet.getTimeout().intValue(), 20);\n+        choiceSet.setTimeout(1);\n+        assertEquals(choiceSet.getTimeout().intValue(), 5);\n+        choiceSet.setTimeout(101);\n+        assertEquals(choiceSet.getTimeout().intValue(), 100);\n+        // Reset default value for other unit test\n+        choiceSet.setDefaultTimeout(10);\n     }\n \n     @Test\n     public void testConstructors() {\n \n         // first constructor was tested in previous method, use the rest here\n         ChoiceSet choiceSet = new ChoiceSet(TestValues.GENERAL_STRING, layout, TestValues.GENERAL_INTEGER, TestValues.GENERAL_STRING, TestValues.GENERAL_STRING, TestValues.GENERAL_STRING, TestValues.GENERAL_VRHELPITEM_LIST, TestValues.GENERAL_KEYBOARDPROPERTIES, choices, listener);\n+\n         assertEquals(choiceSet.getTitle(), TestValues.GENERAL_STRING);\n         assertEquals(choiceSet.getInitialPrompt().get(0).getText(), TestValues.GENERAL_STRING);\n         assertEquals(choiceSet.getHelpPrompt().get(0).getText(), TestValues.GENERAL_STRING);\n@@ -95,6 +113,7 @@ public void testConstructors() {\n         assertEquals(choiceSet.getChoices(), choices);\n         assertEquals(choiceSet.getChoiceSetSelectionListener(), listener);\n \n+\n         ChoiceSet choiceSet2 = new ChoiceSet(TestValues.GENERAL_STRING, layout, TestValues.GENERAL_INTEGER, TestValues.GENERAL_TTSCHUNK_LIST, TestValues.GENERAL_TTSCHUNK_LIST, TestValues.GENERAL_TTSCHUNK_LIST, TestValues.GENERAL_VRHELPITEM_LIST, TestValues.GENERAL_KEYBOARDPROPERTIES, choices, listener);\n         assertEquals(choiceSet2.getTitle(), TestValues.GENERAL_STRING);\n         assertEquals(choiceSet2.getInitialPrompt(), TestValues.GENERAL_TTSCHUNK_LIST);"
  },
  {
    "sha": "9e879a73aa06d614fb4ce8bb305a5d1a0a350e3f",
    "filename": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/PreloadChoicesOperationTests.java",
    "status": "modified",
    "additions": 11,
    "deletions": 10,
    "changes": 21,
    "blob_url": "https://github.com/smartdevicelink/sdl_java_suite/blob/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/PreloadChoicesOperationTests.java",
    "raw_url": "https://github.com/smartdevicelink/sdl_java_suite/raw/e1f055547aed7aabae802c95b114889e42c5dede/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/PreloadChoicesOperationTests.java",
    "contents_url": "https://api.github.com/repos/smartdevicelink/sdl_java_suite/contents/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/choiceset/PreloadChoicesOperationTests.java?ref=e1f055547aed7aabae802c95b114889e42c5dede",
    "patch": "@@ -40,6 +40,7 @@\n import com.smartdevicelink.managers.ISdl;\n import com.smartdevicelink.managers.file.FileManager;\n import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.managers.file.filetypes.SdlFile;\n import com.smartdevicelink.proxy.rpc.ImageField;\n import com.smartdevicelink.proxy.rpc.TextField;\n import com.smartdevicelink.proxy.rpc.WindowCapability;\n@@ -57,13 +58,16 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.List;\n \n import static junit.framework.TestCase.assertEquals;\n import static junit.framework.TestCase.assertFalse;\n import static junit.framework.TestCase.assertNotNull;\n import static junit.framework.TestCase.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n @RunWith(AndroidJUnit4.class)\n public class PreloadChoicesOperationTests {\n@@ -78,7 +82,7 @@ public void setUp() throws Exception {\n \n         ChoiceCell cell1 = new ChoiceCell(\"cell 1\");\n         ChoiceCell cell2 = new ChoiceCell(\"cell 2\", null, TestValues.GENERAL_ARTWORK);\n-        HashSet<ChoiceCell> cellsToPreload = new HashSet<>();\n+        LinkedHashSet<ChoiceCell> cellsToPreload = new LinkedHashSet<>();\n         cellsToPreload.add(cell1);\n         cellsToPreload.add(cell2);\n \n@@ -101,6 +105,10 @@ public void setUp() throws Exception {\n \n         ISdl internalInterface = mock(ISdl.class);\n         FileManager fileManager = mock(FileManager.class);\n+\n+        // We still want the mock fileManager to use the real implementation for fileNeedsUpload()\n+        when(fileManager.fileNeedsUpload(any(SdlFile.class))).thenCallRealMethod();\n+\n         preloadChoicesOperation = new PreloadChoicesOperation(internalInterface, fileManager, null, windowCapability, true, cellsToPreload, null);\n     }\n \n@@ -111,7 +119,7 @@ public void setUpNullWindowCapability() {\n \n         ChoiceCell cell1 = new ChoiceCell(\"cell 1\");\n         ChoiceCell cell2 = new ChoiceCell(\"cell 2\", null, TestValues.GENERAL_ARTWORK);\n-        HashSet<ChoiceCell> cellsToPreload = new HashSet<>();\n+        LinkedHashSet<ChoiceCell> cellsToPreload = new LinkedHashSet<>();\n         cellsToPreload.add(cell1);\n         cellsToPreload.add(cell2);\n \n@@ -128,7 +136,7 @@ public void setUpEmptyWindowCapability() {\n \n         ChoiceCell cell1 = new ChoiceCell(\"cell 1\");\n         ChoiceCell cell2 = new ChoiceCell(\"cell 2\", null, TestValues.GENERAL_ARTWORK);\n-        HashSet<ChoiceCell> cellsToPreload = new HashSet<>();\n+        LinkedHashSet<ChoiceCell> cellsToPreload = new LinkedHashSet<>();\n         cellsToPreload.add(cell1);\n         cellsToPreload.add(cell2);\n \n@@ -147,13 +155,6 @@ public void setUpEmptyWindowCapability() {\n         preloadChoicesOperationEmptyCapability = new PreloadChoicesOperation(internalInterface, fileManager, null, windowCapability, true, cellsToPreload, null);\n     }\n \n-\n-    @Test\n-    public void testArtworkNeedsUpload() {\n-        boolean test = preloadChoicesOperation.artworkNeedsUpload(TestValues.GENERAL_ARTWORK);\n-        assertTrue(test);\n-    }\n-\n     @Test\n     public void testArtworksToUpload() {\n         List<SdlArtwork> artworksToUpload = preloadChoicesOperation.artworksToUpload();"
  }
]
