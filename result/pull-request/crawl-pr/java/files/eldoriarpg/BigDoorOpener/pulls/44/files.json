[
  {
    "sha": "e60257c6d40b0f622983ce9a4243fc344fb20598",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 11,
    "deletions": 5,
    "changes": 16,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/pom.xml",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/pom.xml",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/pom.xml?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -6,7 +6,7 @@\n \n     <groupId>de.eldoria</groupId>\n     <artifactId>bigdoorsopener</artifactId>\n-    <version>2.3.3</version>\n+    <version>2.4.0</version>\n     <name>BigDoorsOpener</name>\n     <url>https://github.com/eldoriarpg/BigDoorOpener</url>\n     <description>Open and close doors automatically on certain conditions</description>\n@@ -20,7 +20,7 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n-                <version>3.5</version>\n+                <version>3.8.1</version>\n                 <configuration>\n                     <source>8</source>\n                     <target>8</target>\n@@ -29,7 +29,7 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-shade-plugin</artifactId>\n-                <version>3.2.3</version>\n+                <version>3.2.4</version>\n                 <!-- Do not include the <configuration>...</configuration> part if you are using Sponge! -->\n                 <configuration>\n                     <relocations>\n@@ -126,10 +126,16 @@\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n-            <groupId>de.eldoria.EldoUtilities</groupId>\n+            <groupId>de.eldoria</groupId>\n             <artifactId>EldoUtilitiesCore</artifactId>\n-            <version>1.7.3</version>\n+            <version>1.7.8</version>\n             <scope>compile</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.bstats</groupId>\n+                    <artifactId>bstats-bukkit</artifactId>\n+                </exclusion>\n+            </exclusions>\n         </dependency>\n         <dependency>\n             <groupId>net.kyori</groupId>"
  },
  {
    "sha": "7a8b7261306ed041a899d5c73845f2b3d636d5b3",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/commands/BDOCommand.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/BDOCommand.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/BDOCommand.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/commands/BDOCommand.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -2,6 +2,7 @@\n \n import com.google.common.cache.Cache;\n import de.eldoria.bigdoorsopener.commands.bdosubcommands.About;\n+import de.eldoria.bigdoorsopener.commands.bdosubcommands.AddCondition;\n import de.eldoria.bigdoorsopener.commands.bdosubcommands.CloneDoor;\n import de.eldoria.bigdoorsopener.commands.bdosubcommands.CopyCondition;\n import de.eldoria.bigdoorsopener.commands.bdosubcommands.DoorList;\n@@ -52,6 +53,7 @@ public BDOCommand(BigDoorsOpener plugin, BigDoors doors, Config config, DoorChec\n         registerCommand(\"reload\", new Reload(config, doorChecker, plugin));\n         registerCommand(\"removeCondition\", new RemoveCondition(doors, config));\n         registerCommand(\"setCondition\", new SetCondition(doors, config));\n+        registerCommand(\"addCondition\", new AddCondition(doors, config));\n         registerCommand(\"setEvaluator\", new SetEvaluator(doors, config));\n         registerCommand(\"stayOpen\", new StayOpen(doors, config));\n         registerCommand(\"unregister\", new Unregister(doors, config));"
  },
  {
    "sha": "7d0ab75ccaa133a89aa6f20c2706231bb119d2a6",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/AddCondition.java",
    "status": "added",
    "additions": 113,
    "deletions": 0,
    "changes": 113,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/AddCondition.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/AddCondition.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/AddCondition.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -0,0 +1,113 @@\n+package de.eldoria.bigdoorsopener.commands.bdosubcommands;\n+\n+import de.eldoria.bigdoorsopener.config.Config;\n+import de.eldoria.bigdoorsopener.core.adapter.BigDoorsAdapterCommand;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionContainer;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionRegistrar;\n+import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n+import de.eldoria.bigdoorsopener.util.Permissions;\n+import de.eldoria.eldoutilities.localization.Replacement;\n+import de.eldoria.eldoutilities.utils.ArrayUtil;\n+import nl.pim16aap2.bigDoors.BigDoors;\n+import nl.pim16aap2.bigDoors.Door;\n+import org.bukkit.command.Command;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Player;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class AddCondition extends BigDoorsAdapterCommand {\n+\n+    public AddCondition(BigDoors bigDoors, Config config) {\n+        super(bigDoors, config);\n+    }\n+\n+    @Override\n+    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n+        if (denyAccess(sender, Permissions.USE)) {\n+            return true;\n+        }\n+\n+        if (argumentsInvalid(sender, args, 2,\n+                \"<$syntax.doorId$> <$syntax.condition$> [$syntax.conditionValues$]\")) {\n+            return true;\n+        }\n+\n+        Player player = getPlayerFromSender(sender);\n+\n+        Door playerDoor = getPlayerDoor(args[0], player);\n+\n+        if (playerDoor == null) {\n+            return true;\n+        }\n+\n+        ConditionalDoor conditionalDoor = getOrRegister(playerDoor, player);\n+\n+        if (conditionalDoor == null) {\n+            return true;\n+        }\n+\n+        Optional<ConditionContainer> conditionByName = ConditionRegistrar.getConditionByName(args[1]);\n+\n+        if (!conditionByName.isPresent()) {\n+            messageSender().sendLocalizedError(sender, \"error.invalidConditionType\");\n+            return true;\n+        }\n+\n+        ConditionContainer condition = conditionByName.get();\n+\n+        String group = condition.getGroup();\n+\n+        if (denyAccess(player, Permissions.getConditionPermission(condition),\n+                Permissions.ALL_CONDITION)) {\n+            return true;\n+        }\n+\n+        String[] conditionArgs = new String[0];\n+        if (args.length > 2) {\n+            conditionArgs = Arrays.copyOfRange(args, 2, args.length);\n+        }\n+\n+        condition.create(player, messageSender(), c -> conditionalDoor.getConditionBag().addCondition(c), conditionArgs);\n+\n+        if (conditionalDoor.getEvaluationType() == ConditionalDoor.EvaluationType.CUSTOM) {\n+            Pattern compile = Pattern.compile(group, Pattern.CASE_INSENSITIVE);\n+            if (!compile.matcher(conditionalDoor.getEvaluator()).find()) {\n+                messageSender().sendLocalizedError(player, \"warning.valueNotInEvaluator\",\n+                        Replacement.create(\"VALUE\", group).addFormatting('6'));\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {\n+        if (args.length == 1) {\n+            return getDoorCompletion(sender, args[0]);\n+        }\n+        if (args.length == 2) {\n+            return ArrayUtil.startingWithInArray(args[1], ConditionRegistrar.getConditions().toArray(new String[0])).collect(Collectors.toList());\n+        }\n+\n+        Optional<ConditionContainer> conditionByName = ConditionRegistrar.getConditionByName(args[1]);\n+\n+        if (!conditionByName.isPresent()) {\n+            return Collections.singletonList(localizer().getMessage(\"error.invalidConditionType\"));\n+        }\n+\n+        ConditionContainer container = conditionByName.get();\n+\n+        if (denyAccess(sender, true, Permissions.getConditionPermission(container.getGroup()), Permissions.ALL_CONDITION)) {\n+            return Collections.singletonList(localizer().getMessage(\"error.permission\",\n+                    Replacement.create(\"PERMISSION\", Permissions.getConditionPermission(container.getGroup()) + \", \" + Permissions.ALL_CONDITION)));\n+        }\n+        return container.onTabComplete(sender, localizer(), Arrays.copyOfRange(args, 2, args.length));\n+    }\n+}"
  },
  {
    "sha": "a6152806659a7d1822502620231e8c7833c41c89",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/CopyCondition.java",
    "status": "modified",
    "additions": 93,
    "deletions": 74,
    "changes": 167,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/CopyCondition.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/CopyCondition.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/CopyCondition.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -9,7 +9,9 @@\n import de.eldoria.bigdoorsopener.door.conditioncollections.ConditionBag;\n import de.eldoria.bigdoorsopener.util.Permissions;\n import de.eldoria.eldoutilities.localization.Replacement;\n+import de.eldoria.eldoutilities.utils.ArgumentUtils;\n import de.eldoria.eldoutilities.utils.ArrayUtil;\n+import de.eldoria.eldoutilities.utils.Parser;\n import nl.pim16aap2.bigDoors.BigDoors;\n import nl.pim16aap2.bigDoors.Door;\n import org.bukkit.command.Command;\n@@ -21,107 +23,124 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n+import java.util.OptionalInt;\n import java.util.stream.Collectors;\n \n public class CopyCondition extends BigDoorsAdapterCommand {\n \n-\tpublic CopyCondition(BigDoors bigDoors, Config config) {\n-\t\tsuper(bigDoors, config);\n-\t}\n+    public CopyCondition(BigDoors bigDoors, Config config) {\n+        super(bigDoors, config);\n+    }\n \n-\t@Override\n-\tpublic boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n-\t\tif (denyAccess(sender, Permissions.USE)) {\n-\t\t\treturn true;\n-\t\t}\n+    @Override\n+    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n+        if (denyAccess(sender, Permissions.USE)) {\n+            return true;\n+        }\n \n-\t\tif (argumentsInvalid(sender, args, 2,\n-\t\t\t\t\"<$syntax.sourceDoor$> <$syntax.targetDoor$> [$syntax.condition$]\")) {\n-\t\t\treturn true;\n-\t\t}\n+        if (argumentsInvalid(sender, args, 2,\n+                \"<$syntax.sourceDoor$> <$syntax.targetDoor$> [$syntax.condition$]\")) {\n+            return true;\n+        }\n \n-\t\tPlayer playerFromSender = getPlayerFromSender(sender);\n+        Player playerFromSender = getPlayerFromSender(sender);\n \n-\t\tDoor playerSourceDoor = getPlayerDoor(args[0], playerFromSender);\n+        Door playerSourceDoor = getPlayerDoor(args[0], playerFromSender);\n \n-\t\tif (playerSourceDoor == null) {\n-\t\t\treturn true;\n-\t\t}\n+        if (playerSourceDoor == null) {\n+            return true;\n+        }\n \n-\t\tConditionalDoor sourceDoor = getOrRegister(playerSourceDoor, playerFromSender);\n+        ConditionalDoor sourceDoor = getOrRegister(playerSourceDoor, playerFromSender);\n \n-\t\tif (sourceDoor == null) {\n-\t\t\treturn true;\n-\t\t}\n+        if (sourceDoor == null) {\n+            return true;\n+        }\n \n-\t\tDoor playerTargetDoor = getPlayerDoor(args[1], playerFromSender);\n+        Door playerTargetDoor = getPlayerDoor(args[1], playerFromSender);\n \n-\t\tif (playerTargetDoor == null) {\n-\t\t\treturn true;\n-\t\t}\n+        if (playerTargetDoor == null) {\n+            return true;\n+        }\n \n-\t\tConditionalDoor targetDoor = getOrRegister(playerTargetDoor, playerFromSender);\n+        ConditionalDoor targetDoor = getOrRegister(playerTargetDoor, playerFromSender);\n \n-\t\tif (targetDoor == null) {\n-\t\t\treturn true;\n-\t\t}\n+        if (targetDoor == null) {\n+            return true;\n+        }\n \n-\t\tConditionBag sourceBag = sourceDoor.getConditionBag();\n+        ConditionBag sourceBag = sourceDoor.getConditionBag();\n \n-\t\tif (args.length == 2) {\n-\t\t\tif (denyAccess(sender, Permissions.ALL_CONDITION)) {\n-\t\t\t\treturn true;\n-\t\t\t}\n+        if (args.length == 2) {\n+            if (denyAccess(sender, Permissions.ALL_CONDITION)) {\n+                return true;\n+            }\n \n-\t\t\ttargetDoor.setConditionBag(sourceBag.copy());\n-\t\t\tmessageSender().sendLocalizedMessage(sender, \"copyCondition.copiedAll\",\n-\t\t\t\t\tReplacement.create(\"SOURCE\", playerSourceDoor.getName()).addFormatting('6'),\n-\t\t\t\t\tReplacement.create(\"TARGET\", playerTargetDoor.getName()).addFormatting('6'));\n-\t\t\treturn true;\n-\t\t}\n+            targetDoor.setConditionBag(sourceBag.copy());\n+            messageSender().sendLocalizedMessage(sender, \"copyCondition.copiedAll\",\n+                    Replacement.create(\"SOURCE\", playerSourceDoor.getName()).addFormatting('6'),\n+                    Replacement.create(\"TARGET\", playerTargetDoor.getName()).addFormatting('6'));\n+            return true;\n+        }\n \n-\t\tOptional<ConditionGroup> optionalGroup = ConditionRegistrar.getConditionGroup(args[2]);\n+        Optional<ConditionGroup> optionalGroup = ConditionRegistrar.getConditionGroup(args[2]);\n \n-\t\tif (!optionalGroup.isPresent()) {\n-\t\t\tmessageSender().sendLocalizedError(sender, \"error.invalidConditionType\");\n-\t\t\treturn true;\n-\t\t}\n+        if (!optionalGroup.isPresent()) {\n+            messageSender().sendLocalizedError(sender, \"error.invalidConditionType\");\n+            return true;\n+        }\n \n-\t\tConditionGroup conditionGroup = optionalGroup.get();\n+        ConditionGroup conditionGroup = optionalGroup.get();\n \n-\t\tif (denyAccess(sender, Permissions.getConditionPermission(conditionGroup.getName()), Permissions.ALL_CONDITION)) {\n-\t\t\treturn true;\n-\t\t}\n+        if (denyAccess(sender, Permissions.getConditionPermission(conditionGroup.getName()), Permissions.ALL_CONDITION)) {\n+            return true;\n+        }\n \n-\t\tConditionBag targetBag = targetDoor.getConditionBag();\n+        ConditionBag targetBag = targetDoor.getConditionBag();\n \n-\t\tOptional<DoorCondition> condition = sourceBag.getCondition(conditionGroup);\n \n-\t\tif (!condition.isPresent()) {\n-\t\t\tmessageSender().sendLocalizedError(sender, \"error.conditionNotSet\");\n-\t\t\treturn true;\n-\t\t}\n+        String id = ArgumentUtils.getOrDefault(args, 2, \"0\");\n+        OptionalInt optionalInt = Parser.parseInt(id);\n+        if (!optionalInt.isPresent()) {\n+            messageSender().sendLocalizedError(sender, \"error.invalidNumber\");\n+            return true;\n+        }\n \n-\t\ttargetBag.putCondition(condition.get().clone());\n+        List<DoorCondition> condition = sourceBag.getConditions(conditionGroup);\n \n-\t\tmessageSender().sendLocalizedMessage(sender, \"copyCondition.copiedSingle\",\n-\t\t\t\tReplacement.create(\"CONDITION\", conditionGroup.getName()).addFormatting('6'),\n-\t\t\t\tReplacement.create(\"SOURCE\", playerSourceDoor.getName()).addFormatting('6'),\n-\t\t\t\tReplacement.create(\"TARGET\", playerTargetDoor.getName()).addFormatting('6'));\n-\t\treturn true;\n-\t}\n+        if (condition.isEmpty()) {\n+            messageSender().sendLocalizedError(sender, \"error.conditionNotSet\");\n+            return true;\n+        }\n \n-\t@Override\n-\tpublic @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {\n-\t\tif (args.length == 1) {\n-\t\t\treturn getDoorCompletion(sender, args[0]);\n-\t\t}\n-\t\tif (args.length == 2) {\n-\t\t\treturn getDoorCompletion(sender, args[1]);\n-\t\t}\n-\t\tif (args.length == 3) {\n-\t\t\treturn ArrayUtil.startingWithInArray(args[2], ConditionRegistrar.getGroups().toArray(new String[0])).collect(Collectors.toList());\n+\t\tif (condition.size() < optionalInt.getAsInt()) {\n+\t\t\tmessageSender().sendLocalizedError(sender, \"error.conditionNotSet\");\n+\t\t\treturn true;\n \t\t}\n-\t\treturn Collections.emptyList();\n-\t}\n+\n+\t\ttargetBag.setCondition(condition.get(optionalInt.getAsInt()).clone());\n+\n+        messageSender().sendLocalizedMessage(sender, \"copyCondition.copiedSingle\",\n+                Replacement.create(\"CONDITION\", conditionGroup.getName()).addFormatting('6'),\n+                Replacement.create(\"SOURCE\", playerSourceDoor.getName()).addFormatting('6'),\n+                Replacement.create(\"TARGET\", playerTargetDoor.getName()).addFormatting('6'));\n+        return true;\n+    }\n+\n+    @Override\n+    public @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {\n+        if (args.length == 1) {\n+            return getDoorCompletion(sender, args[0]);\n+        }\n+        if (args.length == 2) {\n+            return getDoorCompletion(sender, args[1]);\n+        }\n+        if (args.length == 3) {\n+            return ArrayUtil.startingWithInArray(args[2], ConditionRegistrar.getGroups().toArray(new String[0])).collect(Collectors.toList());\n+        }\n+        if (args.length == 4) {\n+            return Collections.singletonList(localizer().getMessage(\"tabcomplete.conditionId\"));\n+        }\n+        return Collections.emptyList();\n+    }\n }"
  },
  {
    "sha": "d8e00e48b9ff645b90eaa24211ac74fc4e484172",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/GiveKey.java",
    "status": "modified",
    "additions": 19,
    "deletions": 12,
    "changes": 31,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/GiveKey.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/GiveKey.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/GiveKey.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -3,14 +3,11 @@\n import de.eldoria.bigdoorsopener.conditions.DoorCondition;\n import de.eldoria.bigdoorsopener.conditions.item.Item;\n import de.eldoria.bigdoorsopener.config.Config;\n-import de.eldoria.bigdoorsopener.core.BigDoorsOpener;\n import de.eldoria.bigdoorsopener.core.adapter.BigDoorsAdapterCommand;\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.util.Permissions;\n import de.eldoria.eldoutilities.container.Pair;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n-import de.eldoria.eldoutilities.messages.MessageSender;\n import de.eldoria.eldoutilities.utils.ArgumentUtils;\n import de.eldoria.eldoutilities.utils.Parser;\n import nl.pim16aap2.bigDoors.BigDoors;\n@@ -26,14 +23,9 @@\n \n import java.util.Collections;\n import java.util.List;\n-import java.util.Optional;\n import java.util.OptionalInt;\n import java.util.stream.Collectors;\n \n-import static de.eldoria.bigdoorsopener.commands.CommandHelper.argumentsInvalid;\n-import static de.eldoria.bigdoorsopener.commands.CommandHelper.denyAccess;\n-import static de.eldoria.bigdoorsopener.commands.CommandHelper.getPlayerFromSender;\n-\n public class GiveKey extends BigDoorsAdapterCommand {\n \n     public GiveKey(BigDoors bigDoors, Config config) {\n@@ -42,7 +34,7 @@ public GiveKey(BigDoors bigDoors, Config config) {\n \n     @Override\n     public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n-        if (denyAccess(sender, Permissions.USE)) {\n+        if (denyAccess(sender, Permissions.GIVE_KEY)) {\n             return true;\n         }\n \n@@ -66,14 +58,26 @@ public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command\n             return true;\n         }\n \n-        Optional<DoorCondition> condition = door.first.getConditionBag().getCondition(\"item\");\n+        List<DoorCondition> condition = door.first.getConditionBag().getConditions(\"item\");\n \n-        if (!condition.isPresent()) {\n+        if (!condition.isEmpty()) {\n             messageSender().sendLocalizedError(sender, \"error.noItemConditionSet\");\n             return true;\n         }\n \n-        ItemStack item = ((Item) condition.get()).getItem();\n+        String id = ArgumentUtils.getOrDefault(args, 1, \"0\");\n+        OptionalInt optionalInt = Parser.parseInt(id);\n+        if (!optionalInt.isPresent()) {\n+            messageSender().sendLocalizedError(sender, \"error.invalidNumber\");\n+            return true;\n+        }\n+\n+        if (condition.size() < optionalInt.getAsInt()) {\n+            messageSender().sendLocalizedError(sender, \"error.conditionNotSet\");\n+            return true;\n+        }\n+\n+        ItemStack item = ((Item) condition.get(optionalInt.getAsInt())).getItem();\n \n         OptionalInt amount = ArgumentUtils.getOptionalParameter(args, 1, OptionalInt.of(64), Parser::parseInt);\n \n@@ -127,6 +131,9 @@ public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command\n                     .map(HumanEntity::getName)\n                     .collect(Collectors.toList());\n         }\n+        if (args.length == 4) {\n+            return Collections.singletonList(localizer().getMessage(\"tabcomplete.conditionId\"));\n+        }\n         return Collections.emptyList();\n     }\n }"
  },
  {
    "sha": "7ca12c1201303727a4c2b96bb6faa029a9a01810",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/Info.java",
    "status": "modified",
    "additions": 94,
    "deletions": 90,
    "changes": 184,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/Info.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/Info.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/Info.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -2,14 +2,14 @@\n \n import de.eldoria.bigdoorsopener.conditions.DoorCondition;\n import de.eldoria.bigdoorsopener.config.Config;\n-import de.eldoria.bigdoorsopener.core.BigDoorsOpener;\n import de.eldoria.bigdoorsopener.core.adapter.BigDoorsAdapterCommand;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionContainer;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionRegistrar;\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.door.conditioncollections.ConditionBag;\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.bigdoorsopener.util.Permissions;\n import de.eldoria.eldoutilities.container.Pair;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import net.kyori.adventure.platform.bukkit.BukkitAudiences;\n import net.kyori.adventure.text.Component;\n import net.kyori.adventure.text.TextComponent;\n@@ -26,95 +26,99 @@\n import org.jetbrains.annotations.Nullable;\n \n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n-\n-import static de.eldoria.bigdoorsopener.commands.CommandHelper.argumentsInvalid;\n-import static de.eldoria.bigdoorsopener.commands.CommandHelper.denyAccess;\n-import static de.eldoria.bigdoorsopener.commands.CommandHelper.getPlayerFromSender;\n+import java.util.Map;\n+import java.util.Optional;\n \n public class Info extends BigDoorsAdapterCommand {\n-\tprivate final BukkitAudiences bukkitAudiences;\n-\n-\tpublic Info(BigDoors bigDoors, Plugin plugin, Config config) {\n-\t\tsuper(bigDoors, config);\n-\t\tbukkitAudiences = BukkitAudiences.create(plugin);\n-\t}\n-\n-\t@Override\n-\tpublic boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n-\t\tif (denyAccess(sender, Permissions.USE)) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tif (argumentsInvalid(sender, args, 1, \"<$syntax.doorId$>\")) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tPlayer playerFromSender = getPlayerFromSender(sender);\n-\n-\t\tPair<ConditionalDoor, Door> door = getConditionalPlayerDoor(args[0], playerFromSender);\n-\t\tif (door == null) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tConditionalDoor cDoor = door.first;\n-\t\tTextComponent.Builder component = Component.text()\n-\t\t\t\t.append(Component.text(door.second.getName() + \" \", C.highlightColor, TextDecoration.BOLD))\n-\t\t\t\t.append(Component.text(\"(Id:\" + door.second.getDoorUID() + \") \", C.highlightColor, TextDecoration.BOLD))\n-\t\t\t\t.append(Component.text(localizer().getMessage(\"info.info\"), C.baseColor, TextDecoration.BOLD))\n-\t\t\t\t.append(Component.newline())\n-\t\t\t\t.append(Component.text(localizer().getMessage(\"info.state\") + \" \", C.baseColor))\n-\t\t\t\t.append(Component.text(localizer().getMessage(cDoor.isEnabled() ? \"info.state.enabled\" : \"info.state.disabled\"), C.highlightColor))\n-\t\t\t\t.append(Component.newline())\n-\t\t\t\t.append(Component.text(localizer().getMessage(\"info.world\") + \" \", C.baseColor))\n-\t\t\t\t.append(Component.text(cDoor.getWorld(), C.highlightColor))\n-\t\t\t\t.append(Component.newline())\n-\t\t\t\t.append(Component.text(\"\"));\n-\n-\t\t// append evaluator\n-\t\tcomponent.append(Component.text(localizer().getMessage(\"info.evaluator\") + \" \", C.baseColor));\n-\t\tif (cDoor.getEvaluationType() == ConditionalDoor.EvaluationType.CUSTOM) {\n-\t\t\tcomponent.append(Component.text(cDoor.getEvaluator() + \" \", C.highlightColor))\n-\t\t\t\t\t.append(Component.text(\"[\" + localizer().getMessage(\"info.edit\") + \"]\", NamedTextColor.GREEN, TextDecoration.UNDERLINED)\n-\t\t\t\t\t\t\t.clickEvent(ClickEvent.suggestCommand(\"/bdo setEvaluator \" + cDoor.getDoorUID() + \" custom \" + cDoor.getEvaluator())));\n-\t\t} else {\n-\t\t\tcomponent.append(Component.text(cDoor.getEvaluationType().name(), C.highlightColor));\n-\t\t}\n-\t\tcomponent.append(Component.newline());\n-\n-\t\t// append open time\n-\t\tcomponent.append(Component.text(localizer().getMessage(\"info.stayOpen\") + \" \", C.baseColor))\n-\t\t\t\t.append(Component.text(cDoor.getStayOpen() + \" \",C.highlightColor))\n-\t\t\t\t.append(Component.text(\"[\" + localizer().getMessage(\"info.edit\") + \"]\", NamedTextColor.GREEN, TextDecoration.UNDERLINED)\n-\t\t\t\t\t\t.clickEvent(ClickEvent.suggestCommand(\"/bdo stayOpen \" + cDoor.getDoorUID() + \" \" + cDoor.getStayOpen())))\n-\t\t\t\t.append(Component.newline());\n-\n-\t\t// start of key list\n-\t\tcomponent.append(Component.text(localizer().getMessage(\"info.conditions\"), C.highlightColor, TextDecoration.BOLD));\n-\n-\t\tConditionBag conditionBag = cDoor.getConditionBag();\n-\n-\t\tfor (DoorCondition condition : conditionBag.getConditions()) {\n-\t\t\tcomponent.append(Component.newline())\n-\t\t\t\t\t.append(condition.getDescription(localizer()))\n-\t\t\t\t\t.append(Component.newline())\n-\t\t\t\t\t.append(Component.text(\"[\" + localizer().getMessage(\"info.remove\") + \"]\", NamedTextColor.DARK_RED, TextDecoration.UNDERLINED)\n-\t\t\t\t\t\t\t.clickEvent(ClickEvent.runCommand(condition.getRemoveCommand(cDoor))))\n-\t\t\t\t\t.append(Component.text(\" \"))\n-\t\t\t\t\t.append(Component.text(\"[\" + localizer().getMessage(\"info.edit\") + \"]\", NamedTextColor.GREEN, TextDecoration.UNDERLINED)\n-\t\t\t\t\t\t\t.clickEvent(ClickEvent.suggestCommand(condition.getCreationCommand(cDoor))));\n-\t\t}\n-\n-\t\tbukkitAudiences.sender(sender).sendMessage(component.build());\n-\t\treturn true;\n-\n-\t}\n-\n-\t@Override\n-\tpublic @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {\n-\t\tif (args.length == 1) {\n-\t\t\treturn getDoorCompletion(sender, args[0]);\n-\t\t}\n-\t\treturn Collections.emptyList();\n-\t}\n+    private final BukkitAudiences bukkitAudiences;\n+\n+    public Info(BigDoors bigDoors, Plugin plugin, Config config) {\n+        super(bigDoors, config);\n+        bukkitAudiences = BukkitAudiences.create(plugin);\n+    }\n+\n+    @Override\n+    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n+        if (denyAccess(sender, Permissions.USE)) {\n+            return true;\n+        }\n+\n+        if (argumentsInvalid(sender, args, 1, \"<$syntax.doorId$>\")) {\n+            return true;\n+        }\n+\n+        Player playerFromSender = getPlayerFromSender(sender);\n+\n+        Pair<ConditionalDoor, Door> door = getConditionalPlayerDoor(args[0], playerFromSender);\n+        if (door == null) {\n+            return true;\n+        }\n+\n+        ConditionalDoor cDoor = door.first;\n+        TextComponent.Builder component = Component.text()\n+                .append(Component.text(door.second.getName() + \" \", C.highlightColor, TextDecoration.BOLD))\n+                .append(Component.text(\"(Id:\" + door.second.getDoorUID() + \") \", C.highlightColor, TextDecoration.BOLD))\n+                .append(Component.text(localizer().getMessage(\"info.info\"), C.baseColor, TextDecoration.BOLD))\n+                .append(Component.newline())\n+                .append(Component.text(localizer().getMessage(\"info.state\") + \" \", C.baseColor))\n+                .append(Component.text(localizer().getMessage(cDoor.isEnabled() ? \"info.state.enabled\" : \"info.state.disabled\"), C.highlightColor))\n+                .append(Component.newline())\n+                .append(Component.text(localizer().getMessage(\"info.world\") + \" \", C.baseColor))\n+                .append(Component.text(cDoor.getWorld(), C.highlightColor))\n+                .append(Component.newline())\n+                .append(Component.text(\"\"));\n+\n+        // append evaluator\n+        component.append(Component.text(localizer().getMessage(\"info.evaluator\") + \" \", C.baseColor));\n+        if (cDoor.getEvaluationType() == ConditionalDoor.EvaluationType.CUSTOM) {\n+            component.append(Component.text(cDoor.getEvaluator() + \" \", C.highlightColor))\n+                    .append(Component.text(\"[\" + localizer().getMessage(\"info.edit\") + \"]\", NamedTextColor.GREEN, TextDecoration.UNDERLINED)\n+                            .clickEvent(ClickEvent.suggestCommand(\"/bdo setEvaluator \" + cDoor.getDoorUID() + \" custom \" + cDoor.getEvaluator())));\n+        } else {\n+            component.append(Component.text(cDoor.getEvaluationType().name(), C.highlightColor));\n+        }\n+        component.append(Component.newline());\n+\n+        // append open time\n+        component.append(Component.text(localizer().getMessage(\"info.stayOpen\") + \" \", C.baseColor))\n+                .append(Component.text(cDoor.getStayOpen() + \" \", C.highlightColor))\n+                .append(Component.text(\"[\" + localizer().getMessage(\"info.edit\") + \"]\", NamedTextColor.GREEN, TextDecoration.UNDERLINED)\n+                        .clickEvent(ClickEvent.suggestCommand(\"/bdo stayOpen \" + cDoor.getDoorUID() + \" \" + cDoor.getStayOpen())))\n+                .append(Component.newline());\n+\n+        // start of key list\n+        component.append(Component.text(localizer().getMessage(\"info.conditions\"), C.highlightColor, TextDecoration.BOLD));\n+\n+        ConditionBag conditionBag = cDoor.getConditionBag();\n+\n+        Map<String, Integer> groupCount = new HashMap<>();\n+\n+        for (DoorCondition condition : conditionBag.getConditions()) {\n+            Optional<ConditionContainer> containerByClass = ConditionRegistrar.getContainerByClass(condition.getClass());\n+            Integer id = groupCount.compute(containerByClass.get().getGroup(), (k, v) -> v == null ? 0 : v + 1);\n+            component.append(Component.newline())\n+                    .append(Component.text(id + \" | \", NamedTextColor.AQUA))\n+                    .append(condition.getDescription(localizer()))\n+                    .append(Component.newline())\n+                    .append(Component.text(\"[\" + localizer().getMessage(\"info.remove\") + \"]\", NamedTextColor.DARK_RED, TextDecoration.UNDERLINED)\n+                            .clickEvent(ClickEvent.runCommand(condition.getRemoveCommand(cDoor) + \" \" + id)))\n+                    .append(Component.text(\" \"))\n+                    .append(Component.text(\"[\" + localizer().getMessage(\"info.edit\") + \"]\", NamedTextColor.GREEN, TextDecoration.UNDERLINED)\n+                            .clickEvent(ClickEvent.suggestCommand(condition.getCreationCommand(cDoor))));\n+        }\n+\n+        bukkitAudiences.sender(sender).sendMessage(component.build());\n+        return true;\n+\n+    }\n+\n+    @Override\n+    public @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {\n+        if (args.length == 1) {\n+            return getDoorCompletion(sender, args[0]);\n+        }\n+        return Collections.emptyList();\n+    }\n }"
  },
  {
    "sha": "bff15429e7e80bffa67a560a88cc70beca2f87e1",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/RemoveCondition.java",
    "status": "modified",
    "additions": 94,
    "deletions": 79,
    "changes": 173,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/RemoveCondition.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/RemoveCondition.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/RemoveCondition.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -8,7 +8,9 @@\n import de.eldoria.bigdoorsopener.door.conditioncollections.ConditionBag;\n import de.eldoria.bigdoorsopener.util.Permissions;\n import de.eldoria.eldoutilities.localization.Replacement;\n+import de.eldoria.eldoutilities.utils.ArgumentUtils;\n import de.eldoria.eldoutilities.utils.ArrayUtil;\n+import de.eldoria.eldoutilities.utils.Parser;\n import nl.pim16aap2.bigDoors.BigDoors;\n import nl.pim16aap2.bigDoors.Door;\n import org.bukkit.command.Command;\n@@ -20,88 +22,101 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n+import java.util.OptionalInt;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n public class RemoveCondition extends BigDoorsAdapterCommand {\n \n-\tpublic RemoveCondition(BigDoors bigDoors, Config config) {\n-\t\tsuper(bigDoors, config);\n-\t}\n-\n-\t@Override\n-\tpublic boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n-\t\tif (denyAccess(sender, Permissions.USE)) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tif (argumentsInvalid(sender, args, 2,\n-\t\t\t\t\"<$syntax.doorId$> <$syntax.condition$>\")){\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tPlayer playerFromSender = getPlayerFromSender(sender);\n-\n-\t\tDoor playerDoor = getPlayerDoor(args[0], playerFromSender);\n-\n-\t\tif (playerDoor == null) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tConditionalDoor cDoor = getOrRegister(playerDoor, playerFromSender);\n-\n-\t\tif (cDoor == null) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tOptional<ConditionGroup> optionalGroup = ConditionRegistrar.getConditionGroup(args[1]);\n-\n-\t\tif (!optionalGroup.isPresent()) {\n-\t\t\tmessageSender().sendLocalizedError(sender, \"error.invalidConditionType\");\n-\t\t\treturn true;\n-\t\t}\n-\t\tConditionGroup container = optionalGroup.get();\n-\n-\t\tString group = container.getName();\n-\n-\t\tif (denyAccess(sender, Permissions.getConditionPermission(group), Permissions.ALL_CONDITION)) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tConditionBag conditionBag = cDoor.getConditionBag();\n-\n-\t\tif (!conditionBag.isConditionSet(container)) {\n-\t\t\tmessageSender().sendLocalizedError(sender, \"error.conditionNotSet\");\n-\t\t\treturn true;\n-\t\t} else {\n-\t\t\tconditionBag.removeCondition(container);\n-\t\t}\n-\n-\t\tmessageSender().sendLocalizedMessage(sender, \"removeCondition.\" + group);\n-\n-\t\t// check if condition is in evaluator if a custom evaluator is present.\n-\t\tif (cDoor.getEvaluationType() == ConditionalDoor.EvaluationType.CUSTOM) {\n-\t\t\tPattern compile = Pattern.compile(group, Pattern.CASE_INSENSITIVE);\n-\t\t\tif (compile.matcher(cDoor.getEvaluator()).find()) {\n-\t\t\t\tmessageSender().sendLocalizedError(sender, \"warning.valueStillUsed\",\n-\t\t\t\t\t\tReplacement.create(\"VALUE\", group).addFormatting('6'));\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (conditionBag.isEmpty()) {\n-\t\t\tmessageSender().sendLocalizedMessage(sender, \"warning.chainIsEmpty\");\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {\n-\t\tif (args.length == 1) {\n-\t\t\treturn getDoorCompletion(sender, args[0]);\n-\t\t}\n-\t\tif (args.length == 2) {\n-\t\t\treturn ArrayUtil.startingWithInArray(args[1], ConditionRegistrar.getGroups().toArray(new String[0])).collect(Collectors.toList());\n-\t\t}\n-\t\treturn Collections.emptyList();\n-\t}\n+    public RemoveCondition(BigDoors bigDoors, Config config) {\n+        super(bigDoors, config);\n+    }\n+\n+    @Override\n+    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {\n+        if (denyAccess(sender, Permissions.USE)) {\n+            return true;\n+        }\n+\n+        if (argumentsInvalid(sender, args, 2,\n+                \"<$syntax.doorId$> <$syntax.condition$>\")) {\n+            return false;\n+        }\n+\n+        Player playerFromSender = getPlayerFromSender(sender);\n+\n+        Door playerDoor = getPlayerDoor(args[0], playerFromSender);\n+\n+        if (playerDoor == null) {\n+            return true;\n+        }\n+\n+        ConditionalDoor cDoor = getOrRegister(playerDoor, playerFromSender);\n+\n+        if (cDoor == null) {\n+            return true;\n+        }\n+\n+        Optional<ConditionGroup> optionalGroup = ConditionRegistrar.getConditionGroup(args[1]);\n+\n+        if (!optionalGroup.isPresent()) {\n+            messageSender().sendLocalizedError(sender, \"error.invalidConditionType\");\n+            return true;\n+        }\n+        ConditionGroup container = optionalGroup.get();\n+\n+        String group = container.getName();\n+\n+        if (denyAccess(sender, Permissions.getConditionPermission(group), Permissions.ALL_CONDITION)) {\n+            return true;\n+        }\n+\n+        ConditionBag conditionBag = cDoor.getConditionBag();\n+\n+        if (!conditionBag.isConditionSet(container)) {\n+            messageSender().sendLocalizedError(sender, \"error.conditionNotSet\");\n+            return true;\n+        } else {\n+            String id = ArgumentUtils.getOrDefault(args, 2, \"0\");\n+            OptionalInt optionalInt = Parser.parseInt(id);\n+            if (!optionalInt.isPresent()) {\n+                messageSender().sendLocalizedError(sender, \"error.invalidNumber\");\n+                return true;\n+            }\n+            if (!conditionBag.removeCondition(container, optionalInt.getAsInt())) {\n+                messageSender().sendLocalizedError(sender, \"error.conditionNotSet\");\n+                return true;\n+            }\n+        }\n+\n+        messageSender().sendLocalizedMessage(sender, \"removeCondition.\" + group);\n+\n+        // check if condition is in evaluator if a custom evaluator is present.\n+        if (cDoor.getEvaluationType() == ConditionalDoor.EvaluationType.CUSTOM) {\n+            Pattern compile = Pattern.compile(group, Pattern.CASE_INSENSITIVE);\n+            if (compile.matcher(cDoor.getEvaluator()).find()) {\n+                messageSender().sendLocalizedError(sender, \"warning.valueStillUsed\",\n+                        Replacement.create(\"VALUE\", group).addFormatting('6'));\n+            }\n+        }\n+\n+        if (conditionBag.isEmpty()) {\n+            messageSender().sendLocalizedMessage(sender, \"warning.chainIsEmpty\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {\n+        if (args.length == 1) {\n+            return getDoorCompletion(sender, args[0]);\n+        }\n+        if (args.length == 2) {\n+            return ArrayUtil.startingWithInArray(args[1], ConditionRegistrar.getGroups().toArray(new String[0])).collect(Collectors.toList());\n+        }\n+        if (args.length == 3) {\n+            return Collections.singletonList(localizer().getMessage(\"tabcomplete.conditionId\"));\n+        }\n+        return Collections.emptyList();\n+    }\n }"
  },
  {
    "sha": "648d7040ba8e8b4b865b13a85689c9ddf2feb9c4",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/SetCondition.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/SetCondition.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/SetCondition.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/commands/bdosubcommands/SetCondition.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -83,7 +83,7 @@ public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command\n             conditionArgs = Arrays.copyOfRange(args, 2, args.length);\n         }\n \n-        condition.create(player, messageSender(), conditionalDoor.getConditionBag(), conditionArgs);\n+        condition.create(player, messageSender(), c -> conditionalDoor.getConditionBag().setCondition(c), conditionArgs);\n \n         if (conditionalDoor.getEvaluationType() == ConditionalDoor.EvaluationType.CUSTOM) {\n             Pattern compile = Pattern.compile(group, Pattern.CASE_INSENSITIVE);"
  },
  {
    "sha": "0699b4ebc22773471426b0cf6e6e53434b781b31",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/DoorCondition.java",
    "status": "modified",
    "additions": 55,
    "deletions": 55,
    "changes": 110,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/DoorCondition.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/DoorCondition.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/DoorCondition.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -16,67 +16,67 @@\n  * A interface which represents a condition which opens a door under specific circumstances.\n  */\n public interface DoorCondition extends ConfigurationSerializable, Cloneable {\n-\tString SET_COMMAND = \"/bdo setCondition \";\n-\tString REMOVE_COMMAND = \"/bdo removeCondition \";\n+    String SET_COMMAND = \"/bdo setCondition \";\n+    String REMOVE_COMMAND = \"/bdo removeCondition \";\n \n-\tstatic ILocalizer localizer() {\n-\t\treturn BigDoorsOpener.localizer();\n-\t}\n+    static ILocalizer localizer() {\n+        return BigDoorsOpener.localizer();\n+    }\n \n-\t/**\n-\t * Indicates if the key would open the door under the current circumstances.\n-\t *\n-\t * @param player       player which should be checked. Is null if the condition is {@link Scope#WORLD}\n-\t * @param world        world of the door\n-\t * @param door         door data\n-\t * @param currentState the current state of the door.\n-\t *\n-\t * @return true if the key settings are matched.\n-\t */\n-\tBoolean isOpen(@Nullable Player player, @NotNull World world, @NotNull ConditionalDoor door, @NotNull boolean currentState);\n+    /**\n+     * Indicates if the key would open the door under the current circumstances.\n+     *\n+     * @param player       player which should be checked. Is null if the condition is {@link Scope#WORLD}\n+     * @param world        world of the door\n+     * @param door         door data\n+     * @param currentState the current state of the door.\n+     *\n+     * @return true if the key settings are matched.\n+     */\n+    Boolean isOpen(@Nullable Player player, @NotNull World world, @NotNull ConditionalDoor door, @NotNull boolean currentState);\n \n-\t/**\n-\t * Get the description of the door condition.\n-\t *\n-\t * @param localizer localizer instance for translation\n-\t *\n-\t * @return text component with description.\n-\t */\n-\tComponent getDescription(ILocalizer localizer);\n+    /**\n+     * Get the description of the door condition.\n+     *\n+     * @param localizer localizer instance for translation\n+     *\n+     * @return text component with description.\n+     */\n+    Component getDescription(ILocalizer localizer);\n \n-\t/**\n-\t * Get the command to set this condition with the current settings.\n-\t *\n-\t * @param door door of condition\n-\t *\n-\t * @return creation command as string.\n-\t */\n-\tString getCreationCommand(ConditionalDoor door);\n+    /**\n+     * Get the command to set this condition with the current settings.\n+     *\n+     * @param door door of condition\n+     *\n+     * @return creation command as string.\n+     */\n+    String getCreationCommand(ConditionalDoor door);\n \n-\t/**\n-\t * Get the command to remove this condition\n-\t *\n-\t * @param door door of condition\n-\t *\n-\t * @return creation command as string.\n-\t */\n-\tString getRemoveCommand(ConditionalDoor door);\n+    /**\n+     * Get the command to remove this condition\n+     *\n+     * @param door door of condition\n+     *\n+     * @return creation command as string.\n+     */\n+    String getRemoveCommand(ConditionalDoor door);\n \n-\t/**\n-\t * This method is called after the check for the door of this condition is done and a new evaluation cycle starts.\n-\t * Deletes any internal data in this condition\n-\t */\n-\tdefault void evaluated() {\n-\t}\n+    /**\n+     * This method is called after the check for the door of this condition is done and a new evaluation cycle starts.\n+     * Deletes any internal data in this condition\n+     */\n+    default void evaluated() {\n+    }\n \n-\tDoorCondition clone();\n+    DoorCondition clone();\n \n-\t/**\n-\t * This method will be called when a door with this key was opened. Only once. This method will only be called, when\n-\t * the {@link ConditionContainer#getScope()} is set to {@link Scope#PLAYER}.\n-\t *\n-\t * @param player player which opened the door.\n-\t */\n-\tdefault void opened(Player player) {\n-\t}\n+    /**\n+     * This method will be called when a door with this key was opened. Only once. This method will only be called, when\n+     * the {@link ConditionContainer#getScope()} is set to {@link Scope#PLAYER}.\n+     *\n+     * @param player player which opened the door.\n+     */\n+    default void opened(Player player) {\n+    }\n }"
  },
  {
    "sha": "e9bc5d6b9fe8ad14907eb3f8b3063b208140a7ca",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/item/Item.java",
    "status": "modified",
    "additions": 214,
    "deletions": 212,
    "changes": 426,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/Item.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/Item.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/item/Item.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -7,13 +7,15 @@\n import de.eldoria.eldoutilities.crossversion.function.VersionFunction;\n import de.eldoria.eldoutilities.crossversion.functionbuilder.VersionFunctionBuilder;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n+import de.eldoria.eldoutilities.utils.ObjUtil;\n import lombok.Getter;\n import net.kyori.adventure.text.Component;\n import net.kyori.adventure.text.TextComponent;\n import net.kyori.adventure.text.event.HoverEvent;\n import net.kyori.adventure.text.format.NamedTextColor;\n+import org.apache.commons.lang.ObjectUtils;\n+import org.bukkit.Material;\n import org.bukkit.command.CommandSender;\n import org.bukkit.enchantments.Enchantment;\n import org.bukkit.entity.Player;\n@@ -29,215 +31,215 @@\n \n @Getter\n public abstract class Item implements DoorCondition {\n-\tprivate final ItemStack item;\n-\tprivate final boolean consumed;\n-\n-\tprivate final VersionFunction<Player, Boolean> handCheck = VersionFunctionBuilder.functionBuilder(Player.class, Boolean.class)\n-\t\t\t.addVersionFunctionBetween(\n-\t\t\t\t\tServerVersion.MC_1_9, ServerVersion.MC_1_16,\n-\t\t\t\t\tp -> hasPlayerItemInMainHand(p) || hasPlayerItemInOffHand(p))\n-\t\t\t.addVersionFunction((p) -> {\n-\t\t\t\tItemStack item = p.getItemInHand();\n-\t\t\t\tif (item.getAmount() < getItem().getAmount()) {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t\treturn item.isSimilar(getItem());\n-\t\t\t}, ServerVersion.MC_1_8).build();\n-\n-\tprivate final VersionFunction<Player, Boolean> takeFromHand = VersionFunctionBuilder.functionBuilder(Player.class, Boolean.class)\n-\t\t\t.addVersionFunctionBetween(\n-\t\t\t\t\tServerVersion.MC_1_9, ServerVersion.MC_1_16,\n-\t\t\t\t\t(p) -> {\n-\t\t\t\t\t\tif (hasPlayerItemInMainHand(p)) {\n-\t\t\t\t\t\t\ttakeFromMainHand(p);\n-\t\t\t\t\t\t\treturn true;\n-\t\t\t\t\t\t} else if (hasPlayerItemInOffHand(p)) {\n-\t\t\t\t\t\t\ttakeFromOffHand(p);\n-\t\t\t\t\t\t\treturn true;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\treturn false;\n-\t\t\t\t\t}).addVersionFunction(\n-\t\t\t\t\tp -> {\n-\t\t\t\t\t\tif (handCheck.apply(p)) {\n-\t\t\t\t\t\t\tItemStack item = p.getItemInHand();\n-\t\t\t\t\t\t\titem.setAmount(item.getAmount() - getItem().getAmount());\n-\t\t\t\t\t\t\tp.setItemInHand(item);\n-\t\t\t\t\t\t\tp.updateInventory();\n-\t\t\t\t\t\t\treturn true;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\treturn false;\n-\t\t\t\t\t}, ServerVersion.MC_1_8).build();\n-\n-\t/**\n-\t * Creates a new item key\n-\t *\n-\t * @param item     item stack which defines the item needed to open the door. amount matters.\n-\t * @param consumed true if the items are consumed when the door is opened\n-\t */\n-\tpublic Item(ItemStack item, boolean consumed) {\n-\t\tthis.item = item;\n-\t\tthis.consumed = consumed;\n-\t}\n-\n-\tpublic static List<String> onTabComplete(CommandSender sender, ILocalizer localizer, String[] args) {\n-\t\tif (args.length == 1) {\n-\t\t\treturn Collections.singletonList(\"<\" + localizer.getMessage(\"syntax.amount\") + \">\");\n-\t\t}\n-\t\tif (args.length == 2) {\n-\t\t\tif (args[1].isEmpty()) {\n-\t\t\t\treturn Arrays.asList(\"true\", \"false\");\n-\t\t\t}\n-\t\t\treturn Arrays.asList(\"[\" + localizer.getMessage(\"tabcomplete.consumed\") + \"]\", \"true\", \"false\");\n-\t\t}\n-\t\treturn Collections.emptyList();\n-\t}\n-\n-\t/**\n-\t * This method will be called when a door with this key was opened. Only once.\n-\t *\n-\t * @param player player which opened the door.\n-\t */\n-\t@Override\n-\tpublic abstract void opened(Player player);\n-\n-\t/**\n-\t * Checks if a player has a item in the off or main hand.\n-\t *\n-\t * @param player player to check\n-\t *\n-\t * @return true if the player has the item in one of his hands.\n-\t */\n-\tprotected boolean hasPlayerItemInHand(Player player) {\n-\t\treturn handCheck.apply(player);\n-\t}\n-\n-\t/**\n-\t * Checks if a player has a item in the main hand.\n-\t *\n-\t * @param player player to check\n-\t *\n-\t * @return true if the player has the item in his main hand.\n-\t */\n-\tprivate boolean hasPlayerItemInMainHand(Player player) {\n-\t\tItemStack item = player.getInventory().getItemInMainHand();\n-\t\tif (item.getAmount() < getItem().getAmount()) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn item.isSimilar(getItem());\n-\t}\n-\n-\t/**\n-\t * Checks if a player has a item in the off hand.\n-\t *\n-\t * @param player player to check\n-\t *\n-\t * @return true if the player has the item in his main hands.\n-\t */\n-\tprivate boolean hasPlayerItemInOffHand(Player player) {\n-\t\tItemStack item = player.getInventory().getItemInOffHand();\n-\t\tif (item.getAmount() < getItem().getAmount()) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn item.isSimilar(getItem());\n-\t}\n-\n-\t/**\n-\t * Checks if a player has a item in his inventory.\n-\t *\n-\t * @param player player to check\n-\t *\n-\t * @return true if the player has the item in his inventory.\n-\t */\n-\tprotected boolean hasPlayerItemInInventory(Player player) {\n-\t\tPlayerInventory inventory = player.getInventory();\n-\t\treturn inventory.containsAtLeast(getItem(), getItem().getAmount());\n-\t}\n-\n-\t/**\n-\t * Takes the item from the off hand.\n-\t *\n-\t * @param player player to take items from\n-\t */\n-\tprivate void takeFromOffHand(Player player) {\n-\t\tItemStack item = player.getInventory().getItemInMainHand();\n-\t\titem.setAmount(item.getAmount() - getItem().getAmount());\n-\t\tplayer.getInventory().setItemInMainHand(item);\n-\t\tplayer.updateInventory();\n-\t}\n-\n-\t/**\n-\t * Takes the item from the main hand.\n-\t *\n-\t * @param player player to take items from\n-\t */\n-\tprivate void takeFromMainHand(Player player) {\n-\t\tItemStack item = player.getInventory().getItemInMainHand();\n-\t\titem.setAmount(item.getAmount() - getItem().getAmount());\n-\t\tplayer.getInventory().setItemInMainHand(item);\n-\t\tplayer.updateInventory();\n-\t}\n-\n-\t/**\n-\t * Takes the item from the inventory.\n-\t *\n-\t * @param player player to take items from\n-\t */\n-\tprotected void takeFromInventory(Player player) {\n-\t\tplayer.getInventory().removeItem(getItem());\n-\t\tplayer.updateInventory();\n-\t}\n-\n-\t/**\n-\t * Takes the item from the main or off hand.\n-\t *\n-\t * @param player player to take items from\n-\t */\n-\tprotected boolean tryTakeFromHands(Player player) {\n-\t\treturn takeFromHand.apply(player);\n-\t}\n-\n-\t@Override\n-\tpublic @NotNull Map<String, Object> serialize() {\n-\t\treturn SerializationUtil.newBuilder()\n-\t\t\t\t.add(\"item\", item)\n-\t\t\t\t.add(\"consumed\", consumed)\n-\t\t\t\t.build();\n-\t}\n-\n-\t@Override\n-\tpublic Component getDescription(ILocalizer localizer) {\n-\t\tItemMeta meta = item.getItemMeta();\n-\t\tTextComponent.Builder builder = Component.text();\n-\t\tif (meta != null) {\n-\t\t\tbuilder.append(Component.text(meta.getDisplayName(), NamedTextColor.AQUA));\n-\t\t\tif (meta.getLore() != null) {\n-\t\t\t\tfor (String s : meta.getLore()) {\n-\t\t\t\t\tbuilder.append(Component.newline())\n-\t\t\t\t\t\t\t.append(Component.text(s, NamedTextColor.LIGHT_PURPLE));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tfor (Map.Entry<Enchantment, Integer> entry : meta.getEnchants().entrySet()) {\n-\t\t\t\tbuilder.append(Component.newline())\n-\t\t\t\t\t\t.append(Component.text(entry.getKey().getKey().getKey() + \" \"\n-\t\t\t\t\t\t\t\t+ entry.getValue().toString(), NamedTextColor.GRAY));\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn Component.text()\n-\t\t\t\t.append(Component.text(localizer.getMessage(\"conditionDesc.item\") + \" \", C.baseColor))\n-\t\t\t\t.append(Component.text(\"[\" + item.getType().name().toLowerCase() + \"] x\" + item.getAmount(), C.highlightColor)\n-\t\t\t\t\t\t.hoverEvent(HoverEvent.showText(builder.build())))\n-\t\t\t\t.append(Component.newline())\n-\t\t\t\t.append(Component.text(localizer.getMessage(\"conditionDesc.consumed\") + \" \", C.baseColor))\n-\t\t\t\t.append(Component.text(Boolean.toString(isConsumed()), C.highlightColor))\n-\t\t\t\t.build();\n-\t}\n-\n-\t@Override\n-\tpublic String getRemoveCommand(ConditionalDoor door) {\n-\t\treturn REMOVE_COMMAND + door.getDoorUID() + \" item\";\n-\t}\n-\n-\t@Override\n-\tpublic abstract Item clone();\n+    private final ItemStack item;\n+    private final boolean consumed;\n+\n+    private final VersionFunction<Player, Boolean> handCheck = VersionFunctionBuilder.functionBuilder(Player.class, Boolean.class)\n+            .addVersionFunctionBetween(\n+                    ServerVersion.MC_1_9, ServerVersion.MC_1_16,\n+                    p -> hasPlayerItemInMainHand(p) || hasPlayerItemInOffHand(p))\n+            .addVersionFunction((p) -> {\n+                ItemStack item = p.getItemInHand();\n+                if (item.getAmount() < getItem().getAmount()) {\n+                    return false;\n+                }\n+                return item.isSimilar(getItem());\n+            }, ServerVersion.MC_1_8).build();\n+\n+    private final VersionFunction<Player, Boolean> takeFromHand = VersionFunctionBuilder.functionBuilder(Player.class, Boolean.class)\n+            .addVersionFunctionBetween(\n+                    ServerVersion.MC_1_9, ServerVersion.MC_1_16,\n+                    (p) -> {\n+                        if (hasPlayerItemInMainHand(p)) {\n+                            takeFromMainHand(p);\n+                            return true;\n+                        } else if (hasPlayerItemInOffHand(p)) {\n+                            takeFromOffHand(p);\n+                            return true;\n+                        }\n+                        return false;\n+                    }).addVersionFunction(\n+                    p -> {\n+                        if (handCheck.apply(p)) {\n+                            ItemStack item = p.getItemInHand();\n+                            item.setAmount(item.getAmount() - getItem().getAmount());\n+                            p.setItemInHand(item);\n+                            p.updateInventory();\n+                            return true;\n+                        }\n+                        return false;\n+                    }, ServerVersion.MC_1_8).build();\n+\n+    /**\n+     * Creates a new item key\n+     *\n+     * @param item     item stack which defines the item needed to open the door. amount matters.\n+     * @param consumed true if the items are consumed when the door is opened\n+     */\n+    public Item(ItemStack item, boolean consumed) {\n+        this.item = ObjUtil.nonNull(item, new ItemStack(Material.AIR));\n+        this.consumed = consumed;\n+    }\n+\n+    public static List<String> onTabComplete(CommandSender sender, ILocalizer localizer, String[] args) {\n+        if (args.length == 1) {\n+            return Collections.singletonList(\"<\" + localizer.getMessage(\"syntax.amount\") + \">\");\n+        }\n+        if (args.length == 2) {\n+            if (args[1].isEmpty()) {\n+                return Arrays.asList(\"true\", \"false\");\n+            }\n+            return Arrays.asList(\"[\" + localizer.getMessage(\"tabcomplete.consumed\") + \"]\", \"true\", \"false\");\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * This method will be called when a door with this key was opened. Only once.\n+     *\n+     * @param player player which opened the door.\n+     */\n+    @Override\n+    public abstract void opened(Player player);\n+\n+    /**\n+     * Checks if a player has a item in the off or main hand.\n+     *\n+     * @param player player to check\n+     *\n+     * @return true if the player has the item in one of his hands.\n+     */\n+    protected boolean hasPlayerItemInHand(Player player) {\n+        return handCheck.apply(player);\n+    }\n+\n+    /**\n+     * Checks if a player has a item in the main hand.\n+     *\n+     * @param player player to check\n+     *\n+     * @return true if the player has the item in his main hand.\n+     */\n+    private boolean hasPlayerItemInMainHand(Player player) {\n+        ItemStack item = player.getInventory().getItemInMainHand();\n+        if (item.getAmount() < this.item.getAmount()) {\n+            return false;\n+        }\n+        return item.isSimilar(getItem());\n+    }\n+\n+    /**\n+     * Checks if a player has a item in the off hand.\n+     *\n+     * @param player player to check\n+     *\n+     * @return true if the player has the item in his main hands.\n+     */\n+    private boolean hasPlayerItemInOffHand(Player player) {\n+        ItemStack item = player.getInventory().getItemInOffHand();\n+        if (item.getAmount() < getItem().getAmount()) {\n+            return false;\n+        }\n+        return item.isSimilar(getItem());\n+    }\n+\n+    /**\n+     * Checks if a player has a item in his inventory.\n+     *\n+     * @param player player to check\n+     *\n+     * @return true if the player has the item in his inventory.\n+     */\n+    protected boolean hasPlayerItemInInventory(Player player) {\n+        PlayerInventory inventory = player.getInventory();\n+        return inventory.containsAtLeast(getItem(), getItem().getAmount());\n+    }\n+\n+    /**\n+     * Takes the item from the off hand.\n+     *\n+     * @param player player to take items from\n+     */\n+    private void takeFromOffHand(Player player) {\n+        ItemStack item = player.getInventory().getItemInMainHand();\n+        item.setAmount(item.getAmount() - getItem().getAmount());\n+        player.getInventory().setItemInMainHand(item);\n+        player.updateInventory();\n+    }\n+\n+    /**\n+     * Takes the item from the main hand.\n+     *\n+     * @param player player to take items from\n+     */\n+    private void takeFromMainHand(Player player) {\n+        ItemStack item = player.getInventory().getItemInMainHand();\n+        item.setAmount(item.getAmount() - getItem().getAmount());\n+        player.getInventory().setItemInMainHand(item);\n+        player.updateInventory();\n+    }\n+\n+    /**\n+     * Takes the item from the inventory.\n+     *\n+     * @param player player to take items from\n+     */\n+    protected void takeFromInventory(Player player) {\n+        player.getInventory().removeItem(getItem());\n+        player.updateInventory();\n+    }\n+\n+    /**\n+     * Takes the item from the main or off hand.\n+     *\n+     * @param player player to take items from\n+     */\n+    protected boolean tryTakeFromHands(Player player) {\n+        return takeFromHand.apply(player);\n+    }\n+\n+    @Override\n+    public @NotNull Map<String, Object> serialize() {\n+        return SerializationUtil.newBuilder()\n+                .add(\"item\", item)\n+                .add(\"consumed\", consumed)\n+                .build();\n+    }\n+\n+    @Override\n+    public Component getDescription(ILocalizer localizer) {\n+        ItemMeta meta = item.getItemMeta();\n+        TextComponent.Builder builder = Component.text();\n+        if (meta != null) {\n+            builder.append(Component.text(meta.getDisplayName(), NamedTextColor.AQUA));\n+            if (meta.getLore() != null) {\n+                for (String s : meta.getLore()) {\n+                    builder.append(Component.newline())\n+                            .append(Component.text(s, NamedTextColor.LIGHT_PURPLE));\n+                }\n+            }\n+            for (Map.Entry<Enchantment, Integer> entry : meta.getEnchants().entrySet()) {\n+                builder.append(Component.newline())\n+                        .append(Component.text(entry.getKey().getKey().getKey() + \" \"\n+                                + entry.getValue().toString(), NamedTextColor.GRAY));\n+            }\n+        }\n+\n+        return Component.text()\n+                .append(Component.text(localizer.getMessage(\"conditionDesc.item\") + \" \", C.baseColor))\n+                .append(Component.text(\"[\" + item.getType().name().toLowerCase() + \"] x\" + item.getAmount(), C.highlightColor)\n+                        .hoverEvent(HoverEvent.showText(builder.build())))\n+                .append(Component.newline())\n+                .append(Component.text(localizer.getMessage(\"conditionDesc.consumed\") + \" \", C.baseColor))\n+                .append(Component.text(Boolean.toString(isConsumed()), C.highlightColor))\n+                .build();\n+    }\n+\n+    @Override\n+    public String getRemoveCommand(ConditionalDoor door) {\n+        return REMOVE_COMMAND + door.getDoorUID() + \" item\";\n+    }\n+\n+    @Override\n+    public abstract Item clone();\n }"
  },
  {
    "sha": "d40713abfe30841c766d64f9b7a14165e01a20a5",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemConditionListener.java",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemConditionListener.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemConditionListener.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemConditionListener.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -4,13 +4,12 @@\n import de.eldoria.bigdoorsopener.conditions.item.interacting.ItemInteraction;\n import de.eldoria.bigdoorsopener.config.Config;\n import de.eldoria.bigdoorsopener.core.adapter.BigDoorsAdapter;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import nl.pim16aap2.bigDoors.BigDoors;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n import org.bukkit.event.player.PlayerInteractEvent;\n \n-import java.util.Optional;\n+import java.util.List;\n \n /**\n  * This listener controls when a player tries to open a door with a item.\n@@ -27,10 +26,12 @@ public ItemConditionListener(BigDoors bigDoors, Config config) {\n     public void onItemInteract(PlayerInteractEvent event) {\n         config.getDoors().forEach(d -> {\n             if (!d.isEnabled()) return;\n-            Optional<DoorCondition> item = d.getConditionBag().getCondition(\"item\");\n-            if ((!item.isPresent())) return;\n-            if (item.get() instanceof ItemInteraction) {\n-                ((ItemInteraction) item.get()).clicked(event, isAvailableToOpen(d));\n+            List<DoorCondition> items = d.getConditionBag().getConditions(\"item\");\n+            if ((items.isEmpty())) return;\n+            for (DoorCondition item : items) {\n+                if (item instanceof ItemInteraction) {\n+                    ((ItemInteraction) item).clicked(event, isAvailableToOpen(d));\n+                }\n             }\n         });\n     }"
  },
  {
    "sha": "141f6a0cb6884d946072341518d03a1703103670",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemHolding.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemHolding.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemHolding.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemHolding.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -6,7 +6,6 @@\n import de.eldoria.bigdoorsopener.core.conditions.Scope;\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -81,7 +80,7 @@ public static ConditionContainer getConditionContainer() {\n                     ItemStack itemInMainHand = player.getInventory().getItemInMainHand().clone();\n \n                     itemInMainHand.setAmount(amount.getAsInt());\n-                    conditionBag.putCondition(new ItemHolding(itemInMainHand, consume.get()));\n+                    conditionBag.accept(new ItemHolding(itemInMainHand, consume.get()));\n                     messageSender.sendMessage(player, localizer.getMessage(\"setCondition.itemHolding\"));\n \n                 })"
  },
  {
    "sha": "29d7cbfb7525ede5d4da33b1ad3650d799beae97",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemOwning.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemOwning.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemOwning.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/item/ItemOwning.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -6,7 +6,6 @@\n import de.eldoria.bigdoorsopener.core.conditions.Scope;\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -74,7 +73,7 @@ public static ConditionContainer getConditionContainer() {\n                     ItemStack itemInMainHand = player.getInventory().getItemInMainHand().clone();\n \n                     itemInMainHand.setAmount(amount.getAsInt());\n-                    conditionBag.putCondition(new ItemOwning(itemInMainHand, consume.get()));\n+                    conditionBag.accept(new ItemOwning(itemInMainHand, consume.get()));\n                     messageSender.sendMessage(player, localizer.getMessage(\"setCondition.itemOwning\"));\n                 })\n                 .onTabComplete(Item::onTabComplete)"
  },
  {
    "sha": "c54a69771df9e982ab3fd049094a7b6eea113230",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/item/interacting/ItemBlock.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/interacting/ItemBlock.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/interacting/ItemBlock.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/item/interacting/ItemBlock.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -9,7 +9,6 @@\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -124,7 +123,7 @@ public static ConditionContainer getConditionContainer() {\n                         if (event.getClickedBlock() == null) return false;\n                         BlockVector blockVector = event.getClickedBlock().getLocation().toVector().toBlockVector();\n                         itemBlock.setPosition(blockVector);\n-                        conditionBag.putCondition(itemBlock);\n+                        conditionBag.accept(itemBlock);\n                         event.setCancelled(true);\n                         mSender.sendMessage(player, localizer.getMessage(\"setCondition.itemBlockRegistered\"));\n                         return true;"
  },
  {
    "sha": "23b4756553f87d8e839cf76e9b89879eb7467960",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/item/interacting/ItemClick.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/interacting/ItemClick.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/item/interacting/ItemClick.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/item/interacting/ItemClick.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -7,7 +7,6 @@\n import de.eldoria.bigdoorsopener.core.conditions.Scope;\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -82,7 +81,7 @@ public static ConditionContainer getConditionContainer() {\n                     ItemStack itemInMainHand = player.getInventory().getItemInMainHand().clone();\n \n                     itemInMainHand.setAmount(amount.getAsInt());\n-                    conditionBag.putCondition(new ItemClick(itemInMainHand, consume.get()));\n+                    conditionBag.accept(new ItemClick(itemInMainHand, consume.get()));\n                     messageSender.sendMessage(player, localizer.getMessage(\"setCondition.itemClick\"));\n                 })\n                 .onTabComplete(Item::onTabComplete)"
  },
  {
    "sha": "cad5173a428920095b5783e1700b99877bad9035",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/location/Proximity.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/location/Proximity.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/location/Proximity.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/location/Proximity.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -8,7 +8,6 @@\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.eldoutilities.functions.TriFunction;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -109,7 +108,7 @@ public static ConditionContainer getConditionContainer() {\n                         return;\n                     }\n \n-                    conditionBag.putCondition(new Proximity(vector, form));\n+                    conditionBag.accept(new Proximity(vector, form));\n \n                     // TODO: display region Maybe some day. In a far future...\n "
  },
  {
    "sha": "6d324377fa9ca0073a4931994bcb78452c0fa48b",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/location/Region.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/location/Region.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/location/Region.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/location/Region.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -12,7 +12,6 @@\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -107,7 +106,7 @@ public static ConditionContainer getConditionContainer() {\n                         messageSender.sendError(player, localizer.getMessage(\"error.regionNotFound\"));\n                         return;\n                     }\n-                    conditionBag.putCondition(new Region(region, player.getWorld()));\n+                    conditionBag.accept(new Region(region, player.getWorld()));\n                     messageSender.sendMessage(player, localizer.getMessage(\"setCondition.region\"));\n \n                 })"
  },
  {
    "sha": "0c0dd85ee88f821b0751d2688ac894e5867263a8",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/location/SimpleRegion.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/location/SimpleRegion.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/location/SimpleRegion.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/location/SimpleRegion.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -10,7 +10,6 @@\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.messages.MessageSender;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n@@ -76,7 +75,7 @@ public boolean invoke(PlayerInteractEvent event, MessageSender messageSender) {\n                                 messageSender.sendMessage(player, localizer.getMessage(\"setCondition.secondPoint\"));\n                                 return false;\n                             }\n-                            conditionBag.putCondition(new SimpleRegion(first, vec, world));\n+                            conditionBag.accept(new SimpleRegion(first, vec, world));\n                             event.setCancelled(true);\n                             messageSender.sendMessage(player, localizer.getMessage(\"setCondition.simpleRegionRegisterd\"));\n                             return true;\n@@ -97,7 +96,6 @@ public Boolean isOpen(Player player, World world, ConditionalDoor door, boolean\n                 if (pos.getX() > maximum.getX() || pos.getX() < minimum.getX()) return false;\n                 if (pos.getY() > maximum.getY() || pos.getY() < minimum.getY()) return false;\n                 return !(pos.getZ() > maximum.getZ()) && !(pos.getZ() < minimum.getZ());\n-\n             });\n         } catch (ExecutionException e) {\n             BigDoorsOpener.logger().log(Level.WARNING, \"Could not compute value\", e);"
  },
  {
    "sha": "4b90615c12de15554d90f046623d7f1457db0994",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/permission/DoorPermission.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/permission/DoorPermission.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/permission/DoorPermission.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/permission/DoorPermission.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -9,7 +9,6 @@\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -81,7 +80,7 @@ public static ConditionContainer getConditionContainer() {\n                         messageSender.sendError(player, localizer.getMessage(\"error.invalidAccessLevel\"));\n                         return;\n                     }\n-                    conditionBag.putCondition(new DoorPermission(i));\n+                    conditionBag.accept(new DoorPermission(i));\n                     messageSender.sendMessage(player, localizer.getMessage(\"setCondition.doorPermission\"));\n \n                 })"
  },
  {
    "sha": "f240deb07b63a50da55d35e70e20a9ed784b8437",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/permission/PermissionNode.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/permission/PermissionNode.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/permission/PermissionNode.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/permission/PermissionNode.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -7,7 +7,6 @@\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -52,7 +51,7 @@ public static ConditionContainer getConditionContainer() {\n                         return;\n                     }\n \n-                    conditionBag.putCondition(new PermissionNode(arguments[0]));\n+                    conditionBag.accept(new PermissionNode(arguments[0]));\n                     messageSender.sendMessage(player, localizer.getMessage(\"setCondition.permissionNode\"));\n \n                 })"
  },
  {
    "sha": "8919e33bf8527717ddcc59fab294f1689bc565b6",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/Placeholder.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/Placeholder.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/Placeholder.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/Placeholder.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -10,7 +10,6 @@\n import de.eldoria.bigdoorsopener.util.JsSyntaxHelper;\n import de.eldoria.eldoutilities.container.Pair;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -95,7 +94,7 @@ public static ConditionContainer getConditionContainer() {\n                                     Replacement.create(\"ERROR\", result.second).addFormatting('6')));\n                             return;\n                         case FINE:\n-                            conditionBag.putCondition(new Placeholder(JsSyntaxHelper.translateEvaluator(evaluator)));\n+                            conditionBag.accept(new Placeholder(JsSyntaxHelper.translateEvaluator(evaluator)));\n                             break;\n                     }\n "
  },
  {
    "sha": "84139b3a847e75cdd771e5e37c60988028c1355f",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/Time.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/Time.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/Time.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/Time.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -10,7 +10,6 @@\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -121,7 +120,7 @@ public static ConditionContainer getConditionContainer() {\n                         messageSender.sendError(player, localizer.getMessage(\"error.invalidBoolean\"));\n                         return;\n                     }\n-                    conditionBag.putCondition(new Time(open.getAsInt(), close.getAsInt(), force.get()));\n+                    conditionBag.accept(new Time(open.getAsInt(), close.getAsInt(), force.get()));\n                     messageSender.sendMessage(player, localizer.getMessage(\"setCondition.time\",\n                             Replacement.create(\"OPEN\", Parser.parseTicksToTime(open.getAsInt())),\n                             Replacement.create(\"CLOSE\", Parser.parseTicksToTime(close.getAsInt()))));"
  },
  {
    "sha": "21483284121cff17b1d1ec06bc926f7eb7c7b442",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/mythicmobs/MythicMob.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/mythicmobs/MythicMob.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/mythicmobs/MythicMob.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/mythicmobs/MythicMob.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -8,7 +8,6 @@\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.utils.ArrayUtil;\n@@ -69,7 +68,7 @@ public static ConditionContainer getConditionContainer() {\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n \n-\t\t\t\t\tconditionBag.putCondition(new MythicMob(mob));\n+\t\t\t\t\tconditionBag.accept(new MythicMob(mob));\n \t\t\t\t\tmessageSender.sendMessage(player, localizer().getMessage(\"setCondition.mythicMob\"));\n \n \t\t\t\t})"
  },
  {
    "sha": "4eb0450f00e1d8c267694539a870e9b8e8a8db8b",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/mythicmobs/MythicMobsListener.java",
    "status": "modified",
    "additions": 4,
    "deletions": 5,
    "changes": 9,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/mythicmobs/MythicMobsListener.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/mythicmobs/MythicMobsListener.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/mythicmobs/MythicMobsListener.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -3,13 +3,12 @@\n import de.eldoria.bigdoorsopener.conditions.DoorCondition;\n import de.eldoria.bigdoorsopener.config.Config;\n import de.eldoria.bigdoorsopener.core.adapter.BigDoorsAdapter;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import io.lumine.xikage.mythicmobs.api.bukkit.events.MythicMobDeathEvent;\n import nl.pim16aap2.bigDoors.BigDoors;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n \n-import java.util.Optional;\n+import java.util.List;\n \n public class MythicMobsListener extends BigDoorsAdapter implements Listener {\n \n@@ -23,9 +22,9 @@ public MythicMobsListener(BigDoors bigDoors, Config config) {\n     @EventHandler\n     public void onMobDeath(MythicMobDeathEvent event) {\n         config.getDoors().forEach(d -> {\n-            Optional<DoorCondition> mythicMob = d.getConditionBag().getCondition(\"mythicMob\");\n-            if (!mythicMob.isPresent()) return;\n-            ((MythicMob) mythicMob.get()).killed(event, isAvailableToOpen(d));\n+            List<DoorCondition> mythicMobs = d.getConditionBag().getConditions(\"mythicMob\");\n+            if (mythicMobs.isEmpty()) return;\n+            mythicMobs.forEach(m -> ((MythicMob) m).killed(event, isAvailableToOpen(d)));\n         });\n     }\n }"
  },
  {
    "sha": "4b7033689e6dfb2d3f1838727f05c925707a0111",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/weather/Weather.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/weather/Weather.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/weather/Weather.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/standalone/weather/Weather.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -10,7 +10,6 @@\n import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n import de.eldoria.bigdoorsopener.util.C;\n import de.eldoria.eldoutilities.localization.ILocalizer;\n-import de.eldoria.eldoutilities.localization.Localizer;\n import de.eldoria.eldoutilities.localization.Replacement;\n import de.eldoria.eldoutilities.serialization.SerializationUtil;\n import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n@@ -89,7 +88,7 @@ public static ConditionContainer getConditionContainer() {\n                         return;\n                     }\n \n-                    conditionBag.putCondition(new Weather(weatherType, forceWeather.get()));\n+                    conditionBag.accept(new Weather(weatherType, forceWeather.get()));\n                     messageSender.sendMessage(player, localizer.getMessage(\"setCondition.weather\",\n                             Replacement.create(\"OPEN\", weatherType == WeatherType.CLEAR\n                                     ? localizer.getMessage(\"conditionDesc.clear\")"
  },
  {
    "sha": "ac836275c76e79024fab9ba3de3773b14d47424e",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldLocation.java",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldLocation.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldLocation.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldLocation.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -0,0 +1,14 @@\n+package de.eldoria.bigdoorsopener.conditions.worldlocation;\n+\n+import de.eldoria.bigdoorsopener.conditions.DoorCondition;\n+import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n+\n+public interface WorldLocation extends DoorCondition {\n+    @Override\n+    default String getRemoveCommand(ConditionalDoor door) {\n+        return REMOVE_COMMAND + door.getDoorUID() + \" worldlocation\";\n+    }\n+\n+    @Override\n+    WorldLocation clone();\n+}"
  },
  {
    "sha": "6cea40883669ffb795af8d37088e99621a8730e6",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldProximity.java",
    "status": "added",
    "additions": 213,
    "deletions": 0,
    "changes": 213,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldProximity.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldProximity.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldProximity.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -0,0 +1,213 @@\n+package de.eldoria.bigdoorsopener.conditions.worldlocation;\n+\n+import de.eldoria.bigdoorsopener.core.BigDoorsOpener;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionContainer;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionRegistrar;\n+import de.eldoria.bigdoorsopener.core.conditions.Scope;\n+import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n+import de.eldoria.bigdoorsopener.util.C;\n+import de.eldoria.eldoutilities.functions.TriFunction;\n+import de.eldoria.eldoutilities.localization.ILocalizer;\n+import de.eldoria.eldoutilities.localization.Replacement;\n+import de.eldoria.eldoutilities.serialization.SerializationUtil;\n+import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n+import de.eldoria.eldoutilities.utils.ArgumentUtils;\n+import de.eldoria.eldoutilities.utils.ArrayUtil;\n+import de.eldoria.eldoutilities.utils.EnumUtil;\n+import de.eldoria.eldoutilities.utils.Parser;\n+import net.kyori.adventure.text.Component;\n+import net.kyori.adventure.text.format.NamedTextColor;\n+import org.bukkit.World;\n+import org.bukkit.configuration.serialization.SerializableAs;\n+import org.bukkit.entity.Player;\n+import org.bukkit.util.Vector;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.OptionalDouble;\n+import java.util.stream.Collectors;\n+\n+import static de.eldoria.bigdoorsopener.commands.CommandHelper.argumentsInvalid;\n+\n+/**\n+ * A condition which opens the door when the player is within a specific range of defined by geometric form\n+ */\n+@SerializableAs(\"worldProximityCondition\")\n+public class WorldProximity implements WorldLocation {\n+    private final Vector dimensions;\n+    private final ProximityForm proximityForm;\n+\n+    public WorldProximity(Vector dimensions, ProximityForm proximityForm) {\n+        this.dimensions = dimensions;\n+        this.proximityForm = proximityForm;\n+    }\n+\n+    public WorldProximity(Map<String, Object> map) {\n+        TypeResolvingMap resolvingMap = SerializationUtil.mapOf(map);\n+        dimensions = resolvingMap.getValue(\"dimensions\");\n+        String formString = resolvingMap.getValue(\"proximityForm\");\n+        formString = formString.replaceAll(\"(?i)elipsoid\", \"ellipsoid\");\n+        proximityForm = EnumUtil.parse(formString, ProximityForm.class);\n+    }\n+\n+    public static ConditionContainer getConditionContainer() {\n+        return ConditionContainer.ofClass(WorldProximity.class, Scope.WORLD)\n+                .withFactory((player, messageSender, conditionBag, arguments) -> {\n+                    ILocalizer localizer = BigDoorsOpener.localizer();\n+                    if (argumentsInvalid(player, messageSender, localizer, arguments, 1,\n+                            \"<\" + localizer.getMessage(\"syntax.doorId\") + \"> <\"\n+                                    + localizer.getMessage(\"syntax.condition\") + \"> <\"\n+                                    + localizer.getMessage(\"tabcomplete.dimensions\") + \"> [\"\n+                                    + localizer.getMessage(\"syntax.proximityForm\") + \"]\")) {\n+                        return;\n+                    }\n+\n+                    Vector vector;\n+                    String[] coords = arguments[0].split(\",\");\n+\n+                    // parse the size.\n+                    if (coords.length == 1) {\n+                        OptionalDouble size = Parser.parseDouble(arguments[0]);\n+                        if (!size.isPresent()) {\n+                            messageSender.sendError(player, localizer.getMessage(\"error.invalidNumber\"));\n+                            return;\n+                        }\n+                        vector = new Vector(size.getAsDouble(), size.getAsDouble(), size.getAsDouble());\n+                    } else if (coords.length == 3) {\n+                        OptionalDouble x = Parser.parseDouble(coords[0]);\n+                        OptionalDouble y = Parser.parseDouble(coords[1]);\n+                        OptionalDouble z = Parser.parseDouble(coords[2]);\n+                        if (x.isPresent() && y.isPresent() && z.isPresent()) {\n+                            vector = new Vector(x.getAsDouble(), y.getAsDouble(), z.getAsDouble());\n+                        } else {\n+                            messageSender.sendError(player, localizer.getMessage(\"error.invalidNumber\"));\n+                            return;\n+                        }\n+                    } else {\n+                        messageSender.sendError(player, localizer.getMessage(\"error.invalidVector\"));\n+                        return;\n+                    }\n+\n+                    // check if vector is inside bounds.\n+                    if (vector.getX() < 1 || vector.getX() > 100\n+                            || vector.getY() < 1 || vector.getY() > 100\n+                            || vector.getZ() < 1 || vector.getZ() > 100) {\n+                        messageSender.sendError(player, localizer.getMessage(\"error.invalidRange\",\n+                                Replacement.create(\"MIN\", 1).addFormatting('6'),\n+                                Replacement.create(\"MAX\", 100).addFormatting('6')));\n+                        return;\n+                    }\n+\n+                    WorldProximity.ProximityForm form = ArgumentUtils.getOptionalParameter(arguments, 1, WorldProximity.ProximityForm.CUBOID, (s) -> EnumUtil.parse(s, WorldProximity.ProximityForm.class));\n+\n+                    if (form == null) {\n+                        messageSender.sendError(player, localizer.getMessage(\"error.invalidForm\"));\n+                        return;\n+                    }\n+\n+                    conditionBag.accept(new WorldProximity(vector, form));\n+\n+                    // TODO: display region Maybe some day. In a far future...\n+\n+                    messageSender.sendMessage(player, localizer.getMessage(\"setCondition.proximity\"));\n+                })\n+                .onTabComplete((sender, localizer, args) -> {\n+                    final String[] proximityForm = Arrays.stream(WorldProximity.ProximityForm.values())\n+                            .map(v -> v.name().toLowerCase())\n+                            .toArray(String[]::new);\n+\n+                    if (args.length == 1) {\n+                        return Arrays.asList(\"<\" + localizer.getMessage(\"tabcomplete.dimensions\") + \">\", \"<x,y,z>\");\n+                    }\n+                    if (args.length == 2) {\n+                        return ArrayUtil.startingWithInArray(args[1], proximityForm).collect(Collectors.toList());\n+                    }\n+                    return Collections.emptyList();\n+                })\n+                .withMeta(\"worldProximity\", \"worldLocation\", ConditionContainer.Builder.Cost.PLAYER_LOW.cost)\n+                .build();\n+    }\n+\n+    @Override\n+    public Boolean isOpen(Player player, World world, ConditionalDoor door, boolean currentState) {\n+        for (Player worldPlayer : world.getPlayers()) {\n+            Vector vector = worldPlayer.getLocation().toVector();\n+            if (proximityForm.check.apply(door.getPosition(),\n+                    new Vector(vector.getBlockX(), vector.getBlockY(), vector.getBlockZ()),\n+                    dimensions)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Component getDescription(ILocalizer localizer) {\n+        Optional<ConditionContainer> containerByClass = ConditionRegistrar.getContainerByClass(getClass());\n+\n+        return Component.text(\n+                localizer.getMessage(\"conditionDesc.type.proximity\",\n+                        Replacement.create(\"NAME\", containerByClass\n+                                .map(ConditionContainer::getName).orElse(\"undefined\"))), NamedTextColor.AQUA)\n+                .append(Component.newline())\n+                .append(Component.text(localizer.getMessage(\"conditionDesc.size\") + \" \", C.baseColor))\n+                .append(Component.text(dimensions.toString(), C.highlightColor))\n+                .append(Component.newline())\n+                .append(Component.text(localizer.getMessage(\"conditionDesc.proximityForm\") + \" \", C.baseColor))\n+                .append(Component.text(localizer.getMessage(proximityForm.localKey), C.highlightColor));\n+    }\n+\n+    @Override\n+    public String getCreationCommand(ConditionalDoor door) {\n+        return SET_COMMAND + door.getDoorUID() + \" proximity \"\n+                + dimensions.getX() + \",\" + dimensions.getY() + \",\" + dimensions.getZ()\n+                + \" \" + proximityForm.name().toLowerCase();\n+    }\n+\n+    @Override\n+    public WorldProximity clone() {\n+        return new WorldProximity(dimensions, proximityForm);\n+    }\n+\n+    @Override\n+    public @NotNull Map<String, Object> serialize() {\n+        return SerializationUtil.newBuilder()\n+                .add(\"dimensions\", dimensions)\n+                .add(\"proximityForm\", proximityForm)\n+                .build();\n+    }\n+\n+    public enum ProximityForm {\n+        CUBOID(\"conditionDesc.proximityForm.cuboid\",\n+                (point, target, dimensions) -> {\n+                    if (Math.abs(point.getX() - target.getX()) > dimensions.getX()) return false;\n+                    if (Math.abs(point.getY() - target.getY()) > dimensions.getY()) return false;\n+                    return !(Math.abs(point.getZ() - target.getZ()) > dimensions.getZ());\n+                }),\n+        ELLIPSOID(\"conditionDesc.proximityForm.ellipsoid\",\n+                (point, target, dimensions) ->\n+                        Math.pow((target.getX() - point.getX()) / dimensions.getX(), 2)\n+                                + Math.pow((target.getY() - point.getY()) / dimensions.getY(), 2)\n+                                + Math.pow((target.getZ() - point.getZ()) / dimensions.getZ(), 2) <= 1),\n+        CYLINDER(\"conditionDesc.proximityForm.cylinder\",\n+                (point, target, dimensions) -> {\n+                    if (Math.abs(point.getY() - target.getY()) > dimensions.getY()) return false;\n+                    return Math.pow(target.getX() - point.getX(), 2) / Math.pow(dimensions.getX(), 2)\n+                            + Math.pow(target.getZ() - point.getZ(), 2) / Math.pow(dimensions.getZ(), 2) <= 1;\n+                });\n+\n+        /**\n+         * point, target, dimension\n+         */\n+        public TriFunction<Vector, Vector, Vector, Boolean> check;\n+        public final String localKey;\n+\n+        ProximityForm(String localKey, TriFunction<Vector, Vector, Vector, Boolean> check) {\n+            this.localKey = localKey;\n+            this.check = check;\n+        }\n+    }\n+}"
  },
  {
    "sha": "dac77fcb61596b7cf4a9cdf4777924965dc641aa",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldRegion.java",
    "status": "added",
    "additions": 168,
    "deletions": 0,
    "changes": 168,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldRegion.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldRegion.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldRegion.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -0,0 +1,168 @@\n+package de.eldoria.bigdoorsopener.conditions.worldlocation;\n+\n+import com.google.common.cache.Cache;\n+import com.sk89q.worldedit.bukkit.BukkitAdapter;\n+import com.sk89q.worldguard.protection.managers.RegionManager;\n+import com.sk89q.worldguard.protection.regions.ProtectedRegion;\n+import com.sk89q.worldguard.protection.regions.RegionContainer;\n+import de.eldoria.bigdoorsopener.core.BigDoorsOpener;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionContainer;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionRegistrar;\n+import de.eldoria.bigdoorsopener.core.conditions.Scope;\n+import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n+import de.eldoria.bigdoorsopener.util.C;\n+import de.eldoria.eldoutilities.localization.ILocalizer;\n+import de.eldoria.eldoutilities.localization.Replacement;\n+import de.eldoria.eldoutilities.serialization.SerializationUtil;\n+import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n+import net.kyori.adventure.text.Component;\n+import net.kyori.adventure.text.format.NamedTextColor;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.World;\n+import org.bukkit.configuration.serialization.SerializableAs;\n+import org.bukkit.entity.Player;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static de.eldoria.bigdoorsopener.commands.CommandHelper.argumentsInvalid;\n+\n+/**\n+ * A condition which opens the door, when a player is inside a world guard region.\n+ */\n+@SerializableAs(\"worldRegionCondition\")\n+public class WorldRegion implements WorldLocation {\n+    private final ProtectedRegion region;\n+    private final World world;\n+    private final String worldName;\n+    private final String regionId;\n+\n+    private final Cache<Location, Boolean> cache = C.getExpiringCache();\n+\n+    public WorldRegion(ProtectedRegion region, World world) {\n+        this.region = region;\n+        this.world = world;\n+        this.worldName = world.getName();\n+        this.regionId = region.getId();\n+    }\n+\n+    private WorldRegion(World world, ProtectedRegion region, String regionId, String worldName) {\n+        this.world = world;\n+        this.region = region;\n+        this.worldName = worldName;\n+        this.regionId = regionId;\n+    }\n+\n+    public WorldRegion(Map<String, Object> map) {\n+        TypeResolvingMap resolvingMap = SerializationUtil.mapOf(map);\n+        worldName = resolvingMap.getValue(\"world\");\n+        regionId = resolvingMap.getValue(\"region\");\n+        if (BigDoorsOpener.getRegionContainer() != null) {\n+            world = Bukkit.getWorld(worldName);\n+            if (world == null) {\n+                region = null;\n+                return;\n+            }\n+            region = BigDoorsOpener.getRegionContainer().get(BukkitAdapter.adapt(world)).getRegion(regionId);\n+            return;\n+        }\n+        world = null;\n+        region = null;\n+        BigDoorsOpener.logger().warning(\"A region key is used but world guard was not found.\");\n+    }\n+\n+    public static ConditionContainer getConditionContainer() {\n+        return ConditionContainer.ofClass(WorldRegion.class, Scope.WORLD)\n+                .withFactory((player, messageSender, conditionBag, arguments) -> {\n+                    final RegionContainer regionContainer = BigDoorsOpener.getRegionContainer();\n+                    ILocalizer localizer = BigDoorsOpener.localizer();\n+                    if (regionContainer == null) {\n+                        messageSender.sendError(player, localizer.getMessage(\"error.wgNotEnabled\"));\n+                        return;\n+                    }\n+\n+                    if (argumentsInvalid(player, messageSender, localizer, arguments, 1,\n+                            \"<\" + localizer.getMessage(\"syntax.doorId\") + \"> <\"\n+                                    + localizer.getMessage(\"syntax.condition\") + \"> <\"\n+                                    + localizer.getMessage(\"tabcomplete.regionName\") + \">\")) {\n+                        return;\n+                    }\n+\n+                    if (player == null) {\n+                        messageSender.sendError(null, localizer.getMessage(\"error.notAllowedFromConsole\"));\n+                        return;\n+                    }\n+                    RegionManager rm = regionContainer.get(BukkitAdapter.adapt(player.getWorld()));\n+                    if (rm == null) {\n+                        messageSender.sendError(player, localizer.getMessage(\"error.regionNotFound\"));\n+                        return;\n+                    }\n+                    ProtectedRegion region = rm.getRegion(arguments[0]);\n+                    if (region == null) {\n+                        messageSender.sendError(player, localizer.getMessage(\"error.regionNotFound\"));\n+                        return;\n+                    }\n+                    conditionBag.accept(new WorldRegion(region, player.getWorld()));\n+                    messageSender.sendMessage(player, localizer.getMessage(\"setCondition.region\"));\n+\n+                })\n+                .onTabComplete((sender, localizer, args) -> {\n+                    if (args.length == 1) {\n+                        return Collections.singletonList(\"<\" + localizer.getMessage(\"tabcomplete.regionName\") + \">\");\n+                    }\n+                    return Collections.emptyList();\n+                })\n+                .withMeta(\"worldRegion\", \"worldLocation\", ConditionContainer.Builder.Cost.PLAYER_MEDIUM.cost)\n+                .build();\n+    }\n+\n+    @Override\n+    public Boolean isOpen(Player player, World world, ConditionalDoor door, boolean currentState) {\n+        if (world != this.world) return false;\n+        if (region == null) return null;\n+        for (Player worldPlayer : world.getPlayers()) {\n+            if (region.contains(BukkitAdapter.asBlockVector(worldPlayer.getLocation()))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Component getDescription(ILocalizer localizer) {\n+        Optional<ConditionContainer> containerByClass = ConditionRegistrar.getContainerByClass(getClass());\n+\n+        return Component.text(\n+                localizer.getMessage(\"conditionDesc.type.region\",\n+                        Replacement.create(\"NAME\", containerByClass\n+                                .map(ConditionContainer::getName).orElse(\"undefined\"))), NamedTextColor.AQUA)\n+                .append(Component.newline())\n+                .append(Component.text(localizer.getMessage(\"conditionDesc.region\") + \" \", C.baseColor))\n+                .append(Component.text(regionId, C.highlightColor))\n+                .append(Component.newline())\n+                .append(Component.text(localizer.getMessage(\"conditionDesc.world\") + \" \", C.baseColor))\n+                .append(Component.text(worldName, C.highlightColor));\n+    }\n+\n+    @Override\n+    public String getCreationCommand(ConditionalDoor door) {\n+        return SET_COMMAND + door.getDoorUID() + \" region \" + regionId;\n+    }\n+\n+    @Override\n+    public WorldRegion clone() {\n+        return new WorldRegion(world, region, worldName, regionId);\n+    }\n+\n+    @Override\n+    public @NotNull Map<String, Object> serialize() {\n+        return SerializationUtil.newBuilder()\n+                .add(\"world\", worldName)\n+                .add(\"region\", regionId)\n+                .build();\n+    }\n+\n+}"
  },
  {
    "sha": "70657e1995df29da89605b35555957058d2f17b9",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldSimpleRegion.java",
    "status": "added",
    "additions": 141,
    "deletions": 0,
    "changes": 141,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldSimpleRegion.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldSimpleRegion.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/conditions/worldlocation/WorldSimpleRegion.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -0,0 +1,141 @@\n+package de.eldoria.bigdoorsopener.conditions.worldlocation;\n+\n+import com.google.common.cache.Cache;\n+import de.eldoria.bigdoorsopener.core.BigDoorsOpener;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionContainer;\n+import de.eldoria.bigdoorsopener.core.conditions.ConditionRegistrar;\n+import de.eldoria.bigdoorsopener.core.conditions.Scope;\n+import de.eldoria.bigdoorsopener.core.listener.registration.InteractionRegistrationObject;\n+import de.eldoria.bigdoorsopener.core.listener.registration.RegisterInteraction;\n+import de.eldoria.bigdoorsopener.door.ConditionalDoor;\n+import de.eldoria.bigdoorsopener.util.C;\n+import de.eldoria.eldoutilities.localization.ILocalizer;\n+import de.eldoria.eldoutilities.localization.Replacement;\n+import de.eldoria.eldoutilities.messages.MessageSender;\n+import de.eldoria.eldoutilities.serialization.SerializationUtil;\n+import de.eldoria.eldoutilities.serialization.TypeResolvingMap;\n+import net.kyori.adventure.text.Component;\n+import net.kyori.adventure.text.format.NamedTextColor;\n+import org.bukkit.Location;\n+import org.bukkit.World;\n+import org.bukkit.configuration.serialization.SerializableAs;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.Action;\n+import org.bukkit.event.player.PlayerInteractEvent;\n+import org.bukkit.util.BlockVector;\n+import org.bukkit.util.Vector;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+@SerializableAs(\"worldSimpleRegionCondition\")\n+public class WorldSimpleRegion implements WorldLocation {\n+    private final BlockVector minimum;\n+    private final BlockVector maximum;\n+    private final String world;\n+\n+    private final Cache<Location, Boolean> cache = C.getExpiringCache(10, TimeUnit.SECONDS);\n+\n+    public WorldSimpleRegion(BlockVector first, BlockVector second, String world) {\n+        this.world = world;\n+        this.minimum = BlockVector.getMinimum(first, second).toBlockVector();\n+        this.maximum = BlockVector.getMaximum(first, second).toBlockVector();\n+    }\n+\n+    public WorldSimpleRegion(Map<String, Object> map) {\n+        TypeResolvingMap resolvingMap = SerializationUtil.mapOf(map);\n+        minimum = resolvingMap.getValue(\"minimum\");\n+        maximum = resolvingMap.getValue(\"maximum\");\n+        world = resolvingMap.getValue(\"world\");\n+    }\n+\n+    public static ConditionContainer getConditionContainer() {\n+        return ConditionContainer.ofClass(WorldSimpleRegion.class, Scope.WORLD)\n+                .withFactory((player, messageSender, conditionBag, arguments) -> {\n+                    ILocalizer localizer = BigDoorsOpener.localizer();\n+                    messageSender.sendMessage(player, localizer.getMessage(\"setCondition.firstPoint\"));\n+                    RegisterInteraction.getInstance().register(player, new InteractionRegistrationObject() {\n+                        private String world;\n+                        private BlockVector first;\n+\n+                        @Override\n+                        public boolean invoke(PlayerInteractEvent event, MessageSender messageSender) {\n+                            if (event.getAction() != Action.LEFT_CLICK_BLOCK) {\n+                                return false;\n+                            }\n+                            BlockVector vec = event.getClickedBlock().getLocation().toVector().toBlockVector();\n+                            if (first == null) {\n+                                world = event.getPlayer().getWorld().getName();\n+                                first = vec;\n+                                event.setCancelled(true);\n+                                messageSender.sendMessage(player, localizer.getMessage(\"setCondition.secondPoint\"));\n+                                return false;\n+                            }\n+                            conditionBag.accept(new WorldSimpleRegion(first, vec, world));\n+                            event.setCancelled(true);\n+                            messageSender.sendMessage(player, localizer.getMessage(\"setCondition.simpleRegionRegisterd\"));\n+                            return true;\n+                        }\n+                    });\n+\n+                })\n+                .onTabComplete((sender, localizer, args) -> Collections.emptyList())\n+                .withMeta(\"worldSimpleRegion\", \"worldLocation\", ConditionContainer.Builder.Cost.PLAYER_LOW.cost)\n+                .build();\n+    }\n+\n+    @Override\n+    public Boolean isOpen(Player player, World world, ConditionalDoor door, boolean currentState) {\n+        for (Player worldPlayer : world.getPlayers()) {\n+            Vector pos = player.getLocation().toVector();\n+            if (pos.getX() > maximum.getX() || pos.getX() < minimum.getX()) continue;\n+            if (pos.getY() > maximum.getY() || pos.getY() < minimum.getY()) continue;\n+            if (!(pos.getZ() > maximum.getZ()) && !(pos.getZ() < minimum.getZ())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Component getDescription(ILocalizer localizer) {\n+        Optional<ConditionContainer> containerByClass = ConditionRegistrar.getContainerByClass(getClass());\n+\n+        return Component.text(\n+                localizer.getMessage(\"conditionDesc.type.simpleRegion\",\n+                        Replacement.create(\"NAME\", containerByClass\n+                                .map(ConditionContainer::getName).orElse(\"undefined\"))), NamedTextColor.AQUA)\n+                .append(Component.newline())\n+                .append(Component.text(localizer.getMessage(\"conditionDesc.world\") + \" \", C.baseColor))\n+                .append(Component.text(world, C.highlightColor))\n+                .append(Component.newline())\n+                .append(Component.text(localizer.getMessage(\"conditionDesc.minPoint\") + \" \", C.baseColor))\n+                .append(Component.text(minimum.toString(), C.highlightColor))\n+                .append(Component.newline())\n+                .append(Component.text(localizer.getMessage(\"conditionDesc.maxPoint\") + \" \", C.baseColor))\n+                .append(Component.text(maximum.toString(), C.highlightColor));\n+    }\n+\n+    @Override\n+    public String getCreationCommand(ConditionalDoor door) {\n+        return SET_COMMAND + door.getDoorUID() + \" simpleRegion\";\n+    }\n+\n+    @Override\n+    public WorldSimpleRegion clone() {\n+        return new WorldSimpleRegion(minimum, maximum, world);\n+    }\n+\n+    @Override\n+    public @NotNull Map<String, Object> serialize() {\n+        return SerializationUtil.newBuilder()\n+                .add(\"minimum\", minimum)\n+                .add(\"maximum\", maximum)\n+                .add(\"world\", world)\n+                .build();\n+    }\n+\n+}"
  },
  {
    "sha": "33038867bb24825c43b150f5a3b88ae4885ae037",
    "filename": "src/main/java/de/eldoria/bigdoorsopener/config/Config.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/eldoriarpg/BigDoorOpener/blob/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/config/Config.java",
    "raw_url": "https://github.com/eldoriarpg/BigDoorOpener/raw/273d7b27dfee945343f66ece607251bbbb051180/src/main/java/de/eldoria/bigdoorsopener/config/Config.java",
    "contents_url": "https://api.github.com/repos/eldoriarpg/BigDoorOpener/contents/src/main/java/de/eldoria/bigdoorsopener/config/Config.java?ref=273d7b27dfee945343f66ece607251bbbb051180",
    "patch": "@@ -122,17 +122,17 @@ private void updateVersion0() {\n                 ConditionBag conditionBag = cD.getConditionBag();\n \n                 if (tD.getPermission() != null && !tD.getPermission().isEmpty()) {\n-                    conditionBag.putCondition(new PermissionNode(tD.getPermission()));\n+                    conditionBag.setCondition(new PermissionNode(tD.getPermission()));\n                     log.info(\"Adding permission condition.\");\n                 }\n \n                 if (!tD.isPermanentlyClosed()) {\n-                    conditionBag.putCondition(new Time(tD.getTicksOpen(), tD.getTicksClose(), false));\n+                    conditionBag.setCondition(new Time(tD.getTicksOpen(), tD.getTicksClose(), false));\n                     log.info(\"Adding time condition.\");\n                 }\n \n                 if (tD.getOpenRange() > 0) {\n-                    conditionBag.putCondition(\n+                    conditionBag.setCondition(\n                             new Proximity(\n                                     new Vector(tD.getOpenRange(), tD.getOpenRange(), tD.getOpenRange()),\n                                     Proximity.ProximityForm.ELLIPSOID));"
  }
]
