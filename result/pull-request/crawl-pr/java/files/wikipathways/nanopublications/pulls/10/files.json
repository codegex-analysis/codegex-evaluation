[
  {
    "sha": "cd9addda35db425728010121439bd66ff486cb7f",
    "filename": "dependency-reduced-pom.xml",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/wikipathways/nanopublications/blob/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/dependency-reduced-pom.xml",
    "raw_url": "https://github.com/wikipathways/nanopublications/raw/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/dependency-reduced-pom.xml",
    "contents_url": "https://api.github.com/repos/wikipathways/nanopublications/contents/dependency-reduced-pom.xml?ref=3b1514ca1eb96dd264a87df100c49f6f0421b7ac",
    "patch": "@@ -0,0 +1,51 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+  <modelVersion>4.0.0</modelVersion>\r\n+  <groupId>nl.unimaas.bigcat.wikipathways.nanopubs</groupId>\r\n+  <artifactId>wikipathways.nanopubs</artifactId>\r\n+  <version>1-SNAPSHOT</version>\r\n+  <build>\r\n+    <plugins>\r\n+      <plugin>\r\n+        <artifactId>maven-compiler-plugin</artifactId>\r\n+        <version>2.3.2</version>\r\n+        <configuration>\r\n+          <source>1.8</source>\r\n+          <target>1.8</target>\r\n+          <showDeprecation>true</showDeprecation>\r\n+          <showWarnings>true</showWarnings>\r\n+          <fork>true</fork>\r\n+        </configuration>\r\n+      </plugin>\r\n+      <plugin>\r\n+        <artifactId>maven-shade-plugin</artifactId>\r\n+        <version>2.4.3</version>\r\n+        <executions>\r\n+          <execution>\r\n+            <phase>package</phase>\r\n+            <goals>\r\n+              <goal>shade</goal>\r\n+            </goals>\r\n+            <configuration>\r\n+              <transformers>\r\n+                <transformer />\r\n+              </transformers>\r\n+            </configuration>\r\n+          </execution>\r\n+        </executions>\r\n+        <configuration />\r\n+      </plugin>\r\n+    </plugins>\r\n+  </build>\r\n+  <repositories>\r\n+    <repository>\r\n+      <id>apache-repo-releases</id>\r\n+      <url>https://repository.apache.org/content/repositories/snapshots/</url>\r\n+    </repository>\r\n+  </repositories>\r\n+  <properties>\r\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n+    <junit.version>4.8.1</junit.version>\r\n+  </properties>\r\n+</project>\r\n+\r"
  },
  {
    "sha": "105f43c4d14b71355f4f3c8ab5ae9b40153e1212",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/wikipathways/nanopublications/blob/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/pom.xml",
    "raw_url": "https://github.com/wikipathways/nanopublications/raw/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/pom.xml",
    "contents_url": "https://api.github.com/repos/wikipathways/nanopublications/contents/pom.xml?ref=3b1514ca1eb96dd264a87df100c49f6f0421b7ac",
    "patch": "@@ -57,6 +57,11 @@\n   </build>\n \n   <dependencies>\n+    <dependency>\n+\t    <groupId>com.googlecode.json-simple</groupId>\n+\t    <artifactId>json-simple</artifactId>\n+\t    <version>1.1.1</version>\n+\t</dependency>\n   \t<dependency>\n   \t\t<groupId>org.nanopub</groupId>\n   \t\t<artifactId>nanopub</artifactId>"
  },
  {
    "sha": "8bda9d0767d0e32bc1a43afa903dcf3fd70d7acf",
    "filename": "pubmed_data.json",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/wikipathways/nanopublications/blob/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/pubmed_data.json",
    "raw_url": "https://github.com/wikipathways/nanopublications/raw/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/pubmed_data.json",
    "contents_url": "https://api.github.com/repos/wikipathways/nanopublications/contents/pubmed_data.json?ref=3b1514ca1eb96dd264a87df100c49f6f0421b7ac"
  },
  {
    "sha": "1a88faf3eb5078eaac8c78db51d7b8977161cac3",
    "filename": "src/main/java/nl/unimaas/bigcat/wikipathways/nanopubs/NanoPubs.java",
    "status": "modified",
    "additions": 85,
    "deletions": 2,
    "changes": 87,
    "blob_url": "https://github.com/wikipathways/nanopublications/blob/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/src/main/java/nl/unimaas/bigcat/wikipathways/nanopubs/NanoPubs.java",
    "raw_url": "https://github.com/wikipathways/nanopublications/raw/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/src/main/java/nl/unimaas/bigcat/wikipathways/nanopubs/NanoPubs.java",
    "contents_url": "https://api.github.com/repos/wikipathways/nanopublications/contents/src/main/java/nl/unimaas/bigcat/wikipathways/nanopubs/NanoPubs.java?ref=3b1514ca1eb96dd264a87df100c49f6f0421b7ac",
    "patch": "@@ -26,19 +26,25 @@\n */\n package nl.unimaas.bigcat.wikipathways.nanopubs;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.ParseException;\n \n import org.nanopub.MalformedNanopubException;\n import org.nanopub.Nanopub;\n+import org.nanopub.NanopubCreator;\n import org.nanopub.NanopubImpl;\n import org.nanopub.NanopubUtils;\n import org.nanopub.trusty.MakeTrustyNanopub;\n import org.openrdf.model.Resource;\n import org.openrdf.model.Statement;\n import org.openrdf.model.URI;\n+import org.openrdf.model.ValueFactory;\n import org.openrdf.model.vocabulary.RDF;\n import org.openrdf.repository.RepositoryException;\n import org.openrdf.repository.RepositoryResult;\n@@ -57,6 +63,10 @@ protected static void createNanoPublications(String topic)\n \t\tOPSWPRDFFiles.createNanopublications(data, \"constructs/\" + topic + \".insert\");\n \t\tSailRepositoryConnection conn = data.getConnection();\n \t\tRepositoryResult<Resource> result = conn.getContextIDs();\n+\t\t\n+\t\t// Load the pubmed JSON data\n+\t\tJSONObject jsonData = PubMed.loadJSONData();\n+\t\t\n \t\tStringBuffer buffer = new StringBuffer();\n \t\tint pubCount = 0;\n \t\twhile (result.hasNext()) {\n@@ -92,8 +102,9 @@ protected static void createNanoPublications(String topic)\n \t\t\tnamespaces.put(\"pmid\", \"http://identifiers.org/pubmed/\");\n \t\t\tnamespaces.put(\"obo\", \"http://purl.obolibrary.org/obo/\");\n \t\t\tnamespaces.put(\"pav\", \"http://purl.org/pav/>\");\n-\t\t\tNanopub nanopub = new NanopubImpl(data, (URI)nanopubId, prefixes, namespaces);\n-\t\t\tnanopub = MakeTrustyNanopub.transform(nanopub);\n+\t\t\tNanopubImpl nanopubImpl = new NanopubImpl(data, (URI)nanopubId, prefixes, namespaces);\n+\t\t\tNanopub np = updateNanopublication(nanopubImpl, conn, jsonData);\n+\t\t\tNanopub nanopub = MakeTrustyNanopub.transform(np);\n \t\t\tbuffer.append(NanopubUtils.writeToString(nanopub, RDFFormat.TRIG)).append(\"\\n\\n\");\n \t\t}\n \t\tconn.close();\n@@ -104,4 +115,76 @@ protected static void createNanoPublications(String topic)\n \t\tResourceHelper.saveToFile(topic + \".\" + subsetPrefix + \".trig\", buffer.toString());\n \t\tSystem.out.println(\"Number of saved nanopubs: \" + pubCount);\n \t}\n+\n+\tprivate static Nanopub updateNanopublication(NanopubImpl nanopub, SailRepositoryConnection conn, JSONObject jsonData) {\n+\t\tNanopubCreator npCreator = new NanopubCreator();\n+\t\tnpCreator.setNanopubUri(nanopub.getUri());\n+\t\tValueFactory factory = conn.getValueFactory();\n+\t\t\n+\t\t// Add Namespaces\n+\t\tfor(String prefix : nanopub.getNsPrefixes())\n+\t\t{\n+\t\t\t//System.out.println(prefix);\n+\t\t\t//System.out.println(np.getNamespace(prefix));\n+\t\t\tString namespace = nanopub.getNamespace(prefix);\n+\t\t\tnpCreator.addNamespace(prefix, namespace);\n+\t\t}\n+\t\tnpCreator.addNamespace(\"pav\", \"http://purl.org/pav/\");\n+\t\t\n+\t\t//Add Assertion Statements\n+\t\tnpCreator.setAssertionUri(nanopub.getAssertionUri());\n+\t\tfor(Statement st : nanopub.getAssertion())\n+\t\t{\n+\t\t\tnpCreator.addAssertionStatement(st.getSubject(), st.getPredicate(), st.getObject());\n+\t\t}\n+\t\t\n+\t\t//Add Provenance Statements\n+\t\tnpCreator.setProvenanceUri(nanopub.getProvenanceUri());\n+\t\tDate pubDate = new Date();\n+\t\t\n+\t\tfor(Statement st : nanopub.getProvenance())\n+\t\t{\n+\t\t\tif(st.getObject().stringValue().startsWith(\"http://identifiers.org/pubmed/\"))\n+\t\t\t{\n+\t\t\t\ttry {\n+\t\t\t\t\tpubDate = PubMed.getPubDate(st.getObject().stringValue().split(\"/pubmed/\")[1], jsonData);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t} catch (ParseException e) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tnpCreator.addProvenanceStatement(st.getSubject(), st.getPredicate(), st.getObject());\n+\t\t}\n+\t\t\n+\t\t//Add PubInfo Statements\n+\t\tnpCreator.setPubinfoUri(nanopub.getPubinfoUri());\n+\t\tResource sub = null;\n+\t\tfor(Statement st : nanopub.getPubinfo())\n+\t\t{\n+\t\t\tif(st.getSubject().equals(nanopub.getUri()))\n+\t\t\t\tsub = st.getSubject();\n+\t\t\t//sub = st.getSubject();\n+\t\t\tif(st.getPredicate().stringValue().equals(\"http://purl.org/dc/terms/created\"))\n+\t\t\t{\n+\t\t\t\tnpCreator.addPubinfoStatement(st.getSubject(), factory.createURI(\"http://purl.org/pav/\",\"createdOn\"), st.getObject());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tnpCreator.addPubinfoStatement(st.getSubject(), st.getPredicate(), st.getObject());\n+\t\t\t}\t\n+\t\t}\n+\t\t\n+\t\tnpCreator.addPubinfoStatement(sub, factory.createURI(\"http://purl.org/pav/\",\"authoredOn\"), factory.createLiteral(pubDate));\n+\t\t\n+\t\t///////////////////////////////////////////////////////////////\n+\t\tnpCreator.setNanopubUri(nanopub.getUri());\n+\t\t\n+\t\ttry {\n+\t\t\treturn npCreator.finalizeNanopub();\n+\t\t} catch (MalformedNanopubException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t\n+\t\treturn null;\n+\t}\n }"
  },
  {
    "sha": "4bbbccdc08ebd1365d71896bc8885bb3fa4c8489",
    "filename": "src/main/java/nl/unimaas/bigcat/wikipathways/nanopubs/PubMed.java",
    "status": "added",
    "additions": 97,
    "deletions": 0,
    "changes": 97,
    "blob_url": "https://github.com/wikipathways/nanopublications/blob/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/src/main/java/nl/unimaas/bigcat/wikipathways/nanopubs/PubMed.java",
    "raw_url": "https://github.com/wikipathways/nanopublications/raw/3b1514ca1eb96dd264a87df100c49f6f0421b7ac/src/main/java/nl/unimaas/bigcat/wikipathways/nanopubs/PubMed.java",
    "contents_url": "https://api.github.com/repos/wikipathways/nanopublications/contents/src/main/java/nl/unimaas/bigcat/wikipathways/nanopubs/PubMed.java?ref=3b1514ca1eb96dd264a87df100c49f6f0421b7ac",
    "patch": "@@ -0,0 +1,97 @@\n+/* Copyright (C) 2015-2016  Egon Willighagen <egon.willighagen@gmail.com>\r\n+ *\r\n+ * All rights reserved.\r\n+ * \r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions are met:\r\n+ *   - Redistributions of source code must retain the above copyright\r\n+ *     notice, this list of conditions and the following disclaimer.\r\n+ *   - Redistributions in binary form must reproduce the above copyright\r\n+ *     notice, this list of conditions and the following disclaimer in the\r\n+ *     documentation and/or other materials provided with the distribution.\r\n+ *   - Neither the name of the <organization> nor the\r\n+ *     names of its contributors may be used to endorse or promote products\r\n+ *     derived from this software without specific prior written permission.\r\n+ * \r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+ * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ */\r\n+package nl.unimaas.bigcat.wikipathways.nanopubs;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.FileReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStreamReader;\r\n+import java.io.Reader;\r\n+import java.net.HttpURLConnection;\r\n+import java.net.URL;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Date;\r\n+\r\n+import org.json.simple.JSONObject;\r\n+import org.json.simple.parser.JSONParser;\r\n+import org.json.simple.parser.ParseException;\r\n+\r\n+public class PubMed {\r\n+\tpublic static JSONObject loadJSONData()\r\n+\t{\r\n+\t\tJSONObject jsonData = new JSONObject();\r\n+\t\t\r\n+\t\ttry (Reader reader = new FileReader(\"pubmed_data.json\")) {\r\n+\t\t\tJSONParser parser = new JSONParser();\r\n+\t\t\tJSONObject jsObj = (JSONObject) parser.parse(reader);\r\n+\t\t\tjsonData = (JSONObject) jsObj.get(\"result\");\r\n+           return jsonData;\r\n+\t\t}\r\n+\t\tcatch(Exception e)\r\n+\t\t{\r\n+\t\t\tSystem.out.println(\"Please provide the pubmed json data.\");\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn null;\r\n+\t}\r\n+\t   public static Date getPubDate(String pubmedId, JSONObject jsonData) throws IOException, ParseException {\r\n+\t\t   if(isNumeric(pubmedId))\r\n+\t\t   {\r\n+\t\t\t   JSONObject jsPubmed = (JSONObject) jsonData.get(pubmedId);\r\n+\t\t\t   SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n+\t\t\t\t  \r\n+\t\t\t   Date date = null;\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tif(jsPubmed!=null)\r\n+\t\t\t\t\t\tdate = format.parse(jsPubmed.get(\"pubdate\").toString());\r\n+\t\t\t\t\telse\r\n+\t\t\t\t\t\tdate = format.parse(\"0000-00-00\");\r\n+\t\t\t\t} catch (java.text.ParseException e) {\r\n+\t\t\t\t}\r\n+\t\t\t\t  return date;\r\n+\t\t   }\r\n+\t\t   \r\n+\t\t   return null;\r\n+\t   }\r\n+\t   \r\n+\t   public static boolean isNumeric(final String str) {\r\n+\r\n+\t       if (str == null || str.length() == 0) {\r\n+\t           return false;\r\n+\t       }\r\n+\r\n+\t       try {\r\n+\r\n+\t           Integer.parseInt(str);\r\n+\t           return true;\r\n+\r\n+\t       } catch (NumberFormatException e) {\r\n+\t           return false;\r\n+\t       }\r\n+\r\n+\t   }\r\n+}\r"
  }
]
