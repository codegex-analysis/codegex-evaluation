[
  {
    "sha": "d05c9c38f5c17e5f762f4c73064d89b4ae628452",
    "filename": "src/main/bash/OpenCVClient/client_exe.sh",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/bash/OpenCVClient/client_exe.sh",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/bash/OpenCVClient/client_exe.sh",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/bash/OpenCVClient/client_exe.sh?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -1,11 +1,14 @@\n #runs the OpenCVClient with parameters or from environment variables\n-while getopts i:m:b:s: flag\n+while getopts i:m:r:b:s:l:v: flag\n do\n     case \"${flag}\" in\n         i) clientid=${OPTARG};;\n         m) masterurl=${OPTARG};;\n+        r) registerCommand=${OPTARG};;\n         b) beatcommand=${OPTARG};;\n         s) getservercommand=${OPTARG};;\n+        l) latencyreportcommand=${OPTARG};;\n+        v) interval=${OPTARG};;\n     esac\n done\n-export JAVA_HOME=/usr/local/jdk-11.0.2 && export PATH=$PATH:$JAVA_HOME/bin && java -Djava.library.path=gen/ -cp usr/share/java/jackson-core-2.4.2.jar:usr/share/java/jackson-databind-2.4.2.jar:usr/share/java/jackson-annotations-2.4.2.jar:usr/share/java/:gen/opencv-450.jar:. Application.MarkerDetection.OpenCVClient.OpenCVClient CLIENT_ID=$clientid MASTER_URL=$masterurl BEAT_COMMAND=$beatcommand GET_SERVER_COMMAND=$getservercommand\n\\ No newline at end of file\n+export JAVA_HOME=/usr/local/jdk-11.0.2 && export PATH=$PATH:$JAVA_HOME/bin && java -Djava.library.path=gen/ -cp usr/share/java/jackson-core-2.4.2.jar:usr/share/java/jackson-databind-2.4.2.jar:usr/share/java/jackson-annotations-2.4.2.jar:usr/share/java/:gen/opencv-450.jar:. Application.MarkerDetection.OpenCVClient.OpenCVClient CLIENT_ID=$clientid MASTER_URL=$masterurl REGISTER_COMMAND=$registerCommand BEAT_COMMAND=$beatcommand GET_SERVER_COMMAND=$getservercommand LATENCY_REPORT_COMMAND=$latencyreportcommand INTERVAL=$interval\n\\ No newline at end of file"
  },
  {
    "sha": "c3642e83faf0d3194ac5fc31577a489a22246dac",
    "filename": "src/main/bash/OpenCVServer/server_exe.sh",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/bash/OpenCVServer/server_exe.sh",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/bash/OpenCVServer/server_exe.sh",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/bash/OpenCVServer/server_exe.sh?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -1,5 +1,5 @@\n #runs the OpenCVServer with parameters or from environment variables\n-while getopts i:a:m:b:c:p: flag\n+while getopts i:a:m:b:c:p:v: flag\n do\n     case \"${flag}\" in\n         i) serverid=${OPTARG};;\n@@ -8,6 +8,7 @@ do\n         b) beatcommand=${OPTARG};;\n         c) connected=${OPTARG};;\n         p) port=${OPTARG};;\n+        v) interval=${OPTARG};;\n     esac\n done\n-export JAVA_HOME=/usr/local/jdk-11.0.2 && export PATH=$PATH:$JAVA_HOME/bin && java -Djava.library.path=gen/ -cp usr/share/java/jackson-core-2.4.2.jar:usr/share/java/jackson-databind-2.4.2.jar:usr/share/java/jackson-annotations-2.4.2.jar:usr/share/java/:gen/opencv-450.jar:. Application.MarkerDetection.OpenCVServer.OpenCVServer SERVER_ID=$serverid SERVER_IP=$serverip MASTER_URL=$masterurl BEAT_COMMAND=$beatcommand CONNECTED=$connected PORT=$port test\n\\ No newline at end of file\n+export JAVA_HOME=/usr/local/jdk-11.0.2 && export PATH=$PATH:$JAVA_HOME/bin && java -Djava.library.path=gen/ -cp usr/share/java/jackson-core-2.4.2.jar:usr/share/java/jackson-databind-2.4.2.jar:usr/share/java/jackson-annotations-2.4.2.jar:usr/share/java/:gen/opencv-450.jar:. Application.MarkerDetection.OpenCVServer.OpenCVServer SERVER_ID=$serverid SERVER_IP=$serverip MASTER_URL=$masterurl BEAT_COMMAND=$beatcommand CONNECTED=$connected PORT=$port INTERVAL=$interval test\n\\ No newline at end of file"
  },
  {
    "sha": "54a96e8068234cb0e3143045fe162046d0564902",
    "filename": "src/main/java/Application/Commons/CoreOperator.java",
    "status": "added",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Commons/CoreOperator.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Commons/CoreOperator.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/Commons/CoreOperator.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -0,0 +1,5 @@\n+package Application.Commons;\n+\n+public interface CoreOperator {\n+    void startMasterCommunication();\n+}"
  },
  {
    "sha": "68d8e096302ce88f67b3baaef355cb53f1d56884",
    "filename": "src/main/java/Application/MarkerDetection/OpenCVClient/LatencyReporterOperator.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/LatencyReporterOperator.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/LatencyReporterOperator.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/MarkerDetection/OpenCVClient/LatencyReporterOperator.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -0,0 +1,28 @@\n+package Application.MarkerDetection.OpenCVClient;\n+\n+import Application.Utilities.RESTHandler;\n+\n+import java.io.IOException;\n+import java.net.ConnectException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+//TODO refactor the sender into utilities\n+public class LatencyReporterOperator {\n+    public String url;\n+    private final RESTHandler handler;\n+\n+    public LatencyReporterOperator(String url) {\n+        this.url = url;\n+        this.handler = new RESTHandler();\n+    }\n+\n+    public void report(String body) throws IOException, InterruptedException, IllegalArgumentException, SecurityException {\n+        if(body!=null && !body.isEmpty()) {\n+            handler.sendPostRequest(url, body);\n+        }\n+    }\n+}"
  },
  {
    "sha": "4d3f05db481c20ec6db38065a7aa6dc1e3e93d1c",
    "filename": "src/main/java/Application/MarkerDetection/OpenCVClient/LatencyReporterRunner.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/LatencyReporterRunner.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/LatencyReporterRunner.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/MarkerDetection/OpenCVClient/LatencyReporterRunner.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -0,0 +1,38 @@\n+package Application.MarkerDetection.OpenCVClient;\n+\n+import java.io.IOException;\n+\n+public class LatencyReporterRunner implements Runnable {\n+    //TODO implement and use exit and running values\n+    private final OpenCVClientOperator activeOperator;\n+    private final LatencyReporterOperator reporter;\n+\n+    private volatile boolean exit = false;\n+    private volatile boolean running = false;\n+\n+    public LatencyReporterRunner(String url) {\n+        activeOperator = OpenCVClientOperator.getInstance();\n+        reporter = new LatencyReporterOperator(url);\n+    }\n+    @Override\n+    public void run() {\n+        while(true) {\n+            String reportedBody = null;\n+            try {\n+                //TODO get reported body\n+                reportedBody = activeOperator.getReportBody();\n+                reporter.report(reportedBody);\n+            } catch (IOException | InterruptedException e) {\n+                e.printStackTrace();\n+                System.out.println(e);\n+            }\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+                System.out.println(e);\n+            }\n+\n+        }\n+    }\n+}"
  },
  {
    "sha": "afcc2409ccdee4855015d19663a53fc9cf49b2bd",
    "filename": "src/main/java/Application/MarkerDetection/OpenCVClient/MasterCommunicationRunner.java",
    "status": "modified",
    "additions": 30,
    "deletions": 1,
    "changes": 31,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/MasterCommunicationRunner.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/MasterCommunicationRunner.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/MarkerDetection/OpenCVClient/MasterCommunicationRunner.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -1,23 +1,31 @@\n package Application.MarkerDetection.OpenCVClient;\n \n import java.io.IOException;\n+import java.util.concurrent.Semaphore;\n \n public class MasterCommunicationRunner implements Runnable {\n     //TODO today, request assign client during the first time\n     private final OpenCVClientOperator activeOperator;\n     private ConnectionEvaluator evaluation;\n     public MasterCommunicator communicator;\n \n+    private volatile boolean exit = false;\n+    private volatile boolean running = true;\n+    private volatile boolean paused = false;\n+    private final Semaphore pauseBlock;\n+\n     public MasterCommunicationRunner(String masterUrl) {\n         activeOperator = OpenCVClientOperator.getInstance();\n         evaluation = new ConnectionEvaluator();\n         communicator = new MasterCommunicator(masterUrl);\n+        pauseBlock = new Semaphore(1);\n     }\n \n     @Override\n     public void run() {\n-        while(true) {\n+        while(!exit) {\n             try {\n+                checkPause();\n                 activeOperator.setupTcpConnection(communicator.getServer());\n                 activeOperator.setServerUtilization(true);\n             } catch (InterruptedException | IllegalArgumentException | IOException e) {\n@@ -44,4 +52,25 @@ public void run() {\n             }\n         }\n     }\n+\n+    public boolean isRunning() {\n+        return running;\n+    }\n+\n+    private void checkPause() throws InterruptedException {\n+        if (paused) {\n+            running = false;\n+            pauseBlock.acquire();\n+        }\n+    }\n+\n+    public void pause() {\n+        paused = true;\n+    }\n+\n+    public void resume() {\n+        paused = false;\n+        running = true;\n+        pauseBlock.release();\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "f5b9b688c6cbb599e13b3de7f95666fd6a671d55",
    "filename": "src/main/java/Application/MarkerDetection/OpenCVClient/MasterCommunicator.java",
    "status": "modified",
    "additions": 7,
    "deletions": 30,
    "changes": 37,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/MasterCommunicator.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/MasterCommunicator.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/MarkerDetection/OpenCVClient/MasterCommunicator.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -1,49 +1,26 @@\n package Application.MarkerDetection.OpenCVClient;\n \n import java.io.IOException;\n-import java.net.ConnectException;\n-import java.net.http.HttpClient;\n-import java.net.http.HttpRequest;\n-import java.net.http.HttpResponse;\n-import java.net.URI;\n-import java.time.Duration;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n+import Application.Utilities.RESTHandler;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.JsonNode;\n \n public class MasterCommunicator {\n     //TODO consider moving url to configuration\n     public String url;\n-    private final HttpClient client = HttpClient.newBuilder()\n-            .version(HttpClient.Version.HTTP_1_1)\n-            .followRedirects(HttpClient.Redirect.NORMAL)\n-            .connectTimeout(Duration.ofSeconds(20))\n-            .build();\n+    private final RESTHandler handler;\n \n     public MasterCommunicator(String masterUrl) {\n         url = masterUrl;\n+        this.handler = new RESTHandler();\n     }\n \n     public String getServer() throws InterruptedException, IOException {\n-        String serverInformation = \"\";\n-        HttpRequest request = HttpRequest.newBuilder()\n-                .uri(URI.create(url))\n-                .timeout(Duration.ofMinutes(1))\n-                .header(\"Content-Type\", \"application/json\")\n-                .GET()\n-                .build();\n-        HttpResponse<String> response =\n-                client.send(request, HttpResponse.BodyHandlers.ofString());\n-        switch (response.statusCode()) {\n-            case 200:\n-                ObjectMapper mapper = new ObjectMapper();\n-                JsonNode node = mapper.readTree(response.body());\n-                serverInformation = node.findValue(\"ipAddress\").asText();\n-                break;\n-            case 400: throw new ConnectException(\"400 - Bad Request\");\n-            default: throw new ConnectException(\"404 - Not found\");\n-        }\n+        String getRequestBody = handler.sendGetRequest(url);\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode node = mapper.readTree(getRequestBody);\n+        String serverInformation = node.findValue(\"ipAddress\").asText();\n \n         return serverInformation;\n     }"
  },
  {
    "sha": "dcb0b566dbcc87336836e90103dbaa050d40b4ab",
    "filename": "src/main/java/Application/MarkerDetection/OpenCVClient/OpenCVClient.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/OpenCVClient.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/OpenCVClient.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/MarkerDetection/OpenCVClient/OpenCVClient.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -6,7 +6,9 @@\n     //TODO implement debug mode\n     private Thread processingThread;\n     private Thread masterCommunicationThread;\n+    private Thread registrationThread;\n     private Thread heartBeatThread;\n+    private Thread latencyReporterThread;\n \n     public static void main(String[] args) {\n         OpenCVUtil.initOpenCVSharedLibrary();\n@@ -17,14 +19,20 @@ public static void main(String[] args) {\n             activeOperator.setupClientRunners(args);\n             activeClient.heartBeatThread = new Thread(activeOperator.beatRunner, \"HeartBeatThread\");\n             activeClient.heartBeatThread.start();\n+            activeClient.registrationThread = new Thread(activeOperator.registrationRunner, \"RegistrationThread\");\n+            activeClient.registrationThread.start();\n             activeClient.masterCommunicationThread = new Thread(activeOperator.masterCommunicationRunner, \"MasterCommunicationThread\");\n             activeClient.masterCommunicationThread.start();\n             activeClient.processingThread = new Thread(activeOperator.processingRunner, \"ProcessingThread\");\n             activeClient.processingThread.start();\n+            activeClient.latencyReporterThread = new Thread(activeOperator.reportRunner, \"LatencyReporterThread\");\n+            activeClient.latencyReporterThread.start();\n \n+            activeClient.registrationThread.join();\n             activeClient.heartBeatThread.join();\n             activeClient.masterCommunicationThread.join();\n             activeClient.processingThread.join();\n+            activeClient.latencyReporterThread.join();\n         } catch (IllegalArgumentException | InterruptedException e) {\n             e.printStackTrace();\n         }"
  },
  {
    "sha": "d4336ea1437648673993feb2be0c54eb95e2d8e4",
    "filename": "src/main/java/Application/MarkerDetection/OpenCVClient/OpenCVClientOperator.java",
    "status": "modified",
    "additions": 101,
    "deletions": 8,
    "changes": 109,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/OpenCVClientOperator.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/OpenCVClientOperator.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/MarkerDetection/OpenCVClient/OpenCVClientOperator.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -1,44 +1,54 @@\n package Application.MarkerDetection.OpenCVClient;\n \n+import Application.Commons.CoreOperator;\n import Application.Utilities.*;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.opencv.core.Mat;\n \n import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n import java.io.*;\n import java.net.Socket;\n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n import java.util.concurrent.Semaphore;\n \n-public class OpenCVClientOperator {\n+public class OpenCVClientOperator implements CoreOperator {\n     private Socket clientSocket;\n     private BufferedReader in;\n     private DataOutputStream out;\n     private DetectMarker detector;\n     private ObjectMapper mapper;\n+    private String clientId;\n \n     //TODO allow fixed values to be set externally or update system to reduce reliance on fixed file names\n     private final String fileName= \"singlemarkerssource.png\";\n     private final String resultFileName = \"detected.png\";\n     private final String fileExtension = \"png\";\n     private Mat subject;\n     private BufferedImage currentImage;\n+    private List<String> reportQueue;\n \n     public Semaphore ipLock;\n     public Semaphore serverLock;\n+    public Semaphore reportLock;\n \n     //Server Communication Properties\n     public boolean utilizeServer;\n     private String ip;\n     private int port;\n     public boolean connected;\n \n+    public RegistrationRunner registrationRunner;\n     public HeartBeatRunner beatRunner;\n     public MasterCommunicationRunner masterCommunicationRunner;\n     public ProcessingRunner processingRunner;\n+    public LatencyReporterRunner reportRunner;\n \n     private static OpenCVClientOperator instance = null;\n \n@@ -48,9 +58,17 @@ private OpenCVClientOperator() {\n         mapper = new ObjectMapper();\n         ipLock = new Semaphore(1);\n         serverLock = new Semaphore(1);\n+        reportLock = new Semaphore(1);\n         utilizeServer = false;\n         detector = new DetectMarker();\n         connected = false;\n+        reportQueue = new ArrayList<>();\n+        clientId = \"\";\n+    }\n+\n+    public void startMasterCommunication() {\n+        beatRunner.resume();\n+        masterCommunicationRunner.resume();\n     }\n \n     public static OpenCVClientOperator getInstance() {\n@@ -125,13 +143,15 @@ public void setupTcpConnection(String ipAddress) throws IllegalArgumentException\n \n     public void setupClientRunners(String[] args) throws IllegalArgumentException {\n         String[] argument;\n-        String clientId = \"\";\n         String masterUrl = \"\";\n+        String registerCommand = \"\";\n         String beatCommand = \"\";\n         String getServerCommand = \"\";\n+        String latencyReportCommand = \"\";\n         processingRunner = new ProcessingRunner();\n+        int interval = 1000;\n \n-        List<String> missingParameterList = new ArrayList<>(List.of(\"CLIENT_ID\", \"MASTER_URL\", \"BEAT_COMMAND\", \"GET_SERVER_COMMAND\"));\n+        List<String> missingParameterList = new ArrayList<>(List.of(\"CLIENT_ID\", \"MASTER_URL\", \"REGISTER_COMMAND\", \"BEAT_COMMAND\", \"GET_SERVER_COMMAND\", \"LATENCY_REPORT_COMMAND\"));\n \n         //TODO move beat and get server commands to other input methods such as configuration files\n         for(int i=0; i<args.length; i++) {\n@@ -146,6 +166,10 @@ public void setupClientRunners(String[] args) throws IllegalArgumentException {\n                         masterUrl = argument[1];\n                         missingParameterList.remove(\"MASTER_URL\");\n                         break;\n+                    case \"REGISTER_COMMAND\":\n+                        registerCommand = argument[1];\n+                        missingParameterList.remove(\"REGISTER_COMMAND\");\n+                        break;\n                     case \"BEAT_COMMAND\":\n                         beatCommand = argument[1];\n                         missingParameterList.remove(\"BEAT_COMMAND\");\n@@ -154,6 +178,13 @@ public void setupClientRunners(String[] args) throws IllegalArgumentException {\n                         getServerCommand = argument[1];\n                         missingParameterList.remove(\"GET_SERVER_COMMAND\");\n                         break;\n+                    case \"LATENCY_REPORT_COMMAND\":\n+                        latencyReportCommand = argument[1];\n+                        missingParameterList.remove(\"LATENCY_REPORT_COMMAND\");\n+                        break;\n+                    case \"INTERVAL\":\n+                        interval = Integer.parseInt(argument[1]);\n+                        break;\n                     default:\n                         throw new IllegalArgumentException(\"Invalid argument\");\n                 }\n@@ -163,12 +194,18 @@ public void setupClientRunners(String[] args) throws IllegalArgumentException {\n         if(missingParameterList.size() > 0) {\n             throw new IllegalArgumentException(\"Missing Parameter: \" + String.join(\",\", missingParameterList));\n         }\n+        String registrationUrl = masterUrl +registerCommand;\n         String beatUrl = masterUrl + beatCommand;\n         String beatBody =  \"{\\\"id\\\" : \\\"\" + clientId + \"\\\"}\";\n-        beatRunner = new HeartBeatRunner(beatUrl, beatBody);\n         String masterCommunicationUrl = masterUrl + getServerCommand + clientId;\n+        String reportUrl = masterUrl + latencyReportCommand;\n \n+        registrationRunner = new RegistrationRunner(instance, registrationUrl, beatBody);\n+        beatRunner = new HeartBeatRunner(beatUrl, beatBody, interval);\n+        beatRunner.pause();\n         masterCommunicationRunner = new MasterCommunicationRunner(masterCommunicationUrl);\n+        masterCommunicationRunner.pause();\n+        reportRunner = new LatencyReporterRunner(reportUrl);\n     }\n \n     public void detectMarkerInServer() throws RemoteExecutionException {\n@@ -194,14 +231,71 @@ public void detectMarkerInClient() {\n         detector.detect(subject);\n     }\n \n-    public void markerDetection() {\n+    //TODO move this to a latency reporter utility\n+    public void queueLatencyReport(String location, boolean serverUsage, long startTime, long endTime) throws JsonProcessingException, InterruptedException {\n+        String timestamp = new SimpleDateFormat(\"YYYY-mm-dd_HH:mm:ss\").format(new Date());\n+        long latency = (endTime-startTime)/1000000;\n+        String reportedIp=\"\";\n+        if(debugMode) {\n+            System.out.println(\"[\" + timestamp + \"] Detected in \" + location + \" Execution Time: \" + latency + \"ms\");\n+        }\n+        try {\n+            ipLock.acquire();\n+            reportedIp = ip;\n+        } finally {\n+            ipLock.release();\n+        }\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode resultObject = mapper.createObjectNode();\n+        resultObject.put(\"timestamp\", timestamp);\n+        resultObject.put(\"latency\", latency);\n+        resultObject.put(\"use_server\", serverUsage);\n+        resultObject.put(\"server_ip\", reportedIp);\n+\n+        String result = mapper.writeValueAsString(resultObject);\n+\n+        try {\n+            reportLock.acquire();\n+            reportQueue.add(result);\n+        } finally {\n+            reportLock.release();\n+        }\n+    }\n+\n+    public String getReportBody() {\n+        String returnedResult = \"\";\n+        try {\n+            reportLock.acquire();\n+            if(!reportQueue.isEmpty()) {\n+                ObjectMapper mapper = new ObjectMapper();\n+                ObjectNode result = mapper.createObjectNode();\n+                String reportFileName = \"report_\" + clientId + \".txt\";\n+\n+                result.put(\"path\", reportFileName);\n+                result.put(\"content\", String.join(\"\", reportQueue));\n+                returnedResult = mapper.writeValueAsString(result);\n+                reportQueue.clear();\n+            }\n+        } catch (InterruptedException | JsonProcessingException e) {\n+            e.printStackTrace();\n+        } finally {\n+            reportLock.release();\n+        }\n+        return returnedResult;\n+    }\n+\n+    public void markerDetection() throws JsonProcessingException, InterruptedException {\n         Mat result;\n         long startTime = System.nanoTime();\n         String location = \"Client\";\n         subject = ImageProcessor.getImageMat(fileName);\n+        boolean serverUsage = false;\n \n         try {\n             serverLock.acquire();\n+            serverUsage = utilizeServer;\n+\n             if(utilizeServer) {\n                 detectMarkerInServer();\n                 location = \"Server\";\n@@ -210,6 +304,7 @@ public void markerDetection() {\n             }\n         } catch (RemoteExecutionException e) {\n             detectMarkerInClient();\n+            serverUsage = false;\n         } catch (InterruptedException e) {\n             e.printStackTrace();\n         } finally {\n@@ -221,8 +316,6 @@ public void markerDetection() {\n \n         long endTime = System.nanoTime();\n \n-        if(debugMode) {\n-            System.out.println(\"Detected in \" + location + \" Execution Time: \" + ((endTime-startTime)/1000000) + \"ms\");\n-        }\n+        queueLatencyReport(location, serverUsage, startTime, endTime);\n     }\n }"
  },
  {
    "sha": "d89db9341904ae6d89b4c63b10f5284486933eb4",
    "filename": "src/main/java/Application/MarkerDetection/OpenCVClient/ProcessingRunner.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/ProcessingRunner.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVClient/ProcessingRunner.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/MarkerDetection/OpenCVClient/ProcessingRunner.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -1,5 +1,7 @@\n package Application.MarkerDetection.OpenCVClient;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n public class ProcessingRunner implements Runnable {\n     //TODO implement and use exit and running values\n     private final OpenCVClientOperator activeOperator;\n@@ -13,7 +15,11 @@ public ProcessingRunner() {\n     @Override\n     public void run() {\n         while(true) {\n-            activeOperator.markerDetection();\n+            try {\n+                activeOperator.markerDetection();\n+            } catch (JsonProcessingException | InterruptedException e) {\n+                e.printStackTrace();\n+            }\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {"
  },
  {
    "sha": "ca88e881bad34dd86e9bd5c41d498ea98a3d10a7",
    "filename": "src/main/java/Application/MarkerDetection/OpenCVServer/OpenCVServerOperator.java",
    "status": "modified",
    "additions": 34,
    "deletions": 10,
    "changes": 44,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVServer/OpenCVServerOperator.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/MarkerDetection/OpenCVServer/OpenCVServerOperator.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/MarkerDetection/OpenCVServer/OpenCVServerOperator.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -8,28 +8,33 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import Application.Commons.CoreOperator;\n import Application.Utilities.*;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import org.opencv.core.Mat;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n-public class OpenCVServerOperator {\n+public class OpenCVServerOperator implements CoreOperator {\n     private ServerSocket serverSocket;\n     private Socket clientSocket;\n     private DataInputStream in;\n     private PrintWriter out;\n     private DetectMarker detector;\n+\n+    private String serverId;\n+    private String serverIp;\n     private int port;\n+    private boolean connected;\n \n     private String fileName;\n \n     private BufferedImage currentImage;\n \n     public ServerRunner serverRunner;\n     public HeartBeatRunner beatRunner;\n-    private boolean connected;\n+    private String beatBody;\n \n     private static OpenCVServerOperator instance = null;\n \n@@ -39,6 +44,9 @@ private OpenCVServerOperator() {\n         fileName= \"read.png\";\n         detector = new DetectMarker();\n         connected = false;\n+        beatBody = \"\";\n+        serverId = \"\";\n+        serverIp = \"\";\n     }\n \n     public void startConnection() throws IOException {\n@@ -48,11 +56,13 @@ public void startConnection() throws IOException {\n             out = new PrintWriter(clientSocket.getOutputStream(), true);\n             in = new DataInputStream(clientSocket.getInputStream());\n             connected = true;\n+            updateBeatBody();\n         }\n     }\n \n     public void processing() throws IOException, IllegalArgumentException {\n         currentImage = ImageIO.read(in);\n+        \n         if(currentImage != null) {\n             Mat subject = ImageProcessor.getBufferedImageMat(currentImage);\n \n@@ -82,6 +92,7 @@ public void stopConnection() throws RemoteExecutionException {\n             clientSocket.close();\n             serverSocket.close();\n             connected = false;\n+            updateBeatBody();\n         } catch (IOException | NullPointerException e) {\n             throw new RemoteExecutionException(e);\n         }\n@@ -98,9 +109,7 @@ public void setupServerRunners(String[] args) throws IllegalArgumentException {\n         String[] argument;\n         String masterUrl = \"\";\n         String beatCommand = \"\";\n-        String serverId = \"\";\n-        String serverIp = \"\";\n-        boolean connected = false;\n+        int interval = 1000;\n         serverRunner = new ServerRunner();\n \n         List<String> missingParameterList = new ArrayList<>(List.of(\"SERVER_ID\", \"SERVER_IP\", \"MASTER_URL\", \"BEAT_COMMAND\", \"PORT\")); // Connected has default value of false\n@@ -126,13 +135,13 @@ public void setupServerRunners(String[] args) throws IllegalArgumentException {\n                         beatCommand = argument[1];\n                         missingParameterList.remove(\"BEAT_COMMAND\");\n                         break;\n-                    case \"CONNECTED\":\n-                        connected = Boolean.parseBoolean(argument[1]);\n-                        break;\n                     case \"PORT\":\n                         port = Integer.parseInt(argument[1]);\n                         missingParameterList.remove(\"PORT\");\n                         break;\n+                    case \"INTERVAL\":\n+                        interval = Integer.parseInt(argument[1]);\n+                        break;\n                     default:\n                         throw new IllegalArgumentException(\"Invalid argument\");\n                 }\n@@ -144,7 +153,22 @@ public void setupServerRunners(String[] args) throws IllegalArgumentException {\n         }\n \n         String beatUrl = masterUrl + beatCommand;\n-        String beatBody =  \"{\\\"id\\\": \\\"\" + serverId + \"\\\", \\\"ipAddress\\\": \\\"\" + serverIp + \":\" + port + \"\\\", \\\"connected\\\": \" + connected + \"}\";\n-        beatRunner = new HeartBeatRunner(beatUrl, beatBody);\n+        updateBeatBodyContent();\n+        beatRunner = new HeartBeatRunner(beatUrl, beatBody, interval);\n+        startMasterCommunication();\n+    }\n+\n+    private void updateBeatBodyContent() {\n+        beatBody =  \"{\\\"id\\\": \\\"\" + serverId + \"\\\", \\\"ipAddress\\\": \\\"\" + serverIp + \":\" + port + \"\\\", \\\"connected\\\": \" + connected + \"}\";\n+    }\n+\n+    private void updateBeatBody() {\n+        updateBeatBodyContent();\n+        beatRunner.beater.setBody(beatBody);\n+    }\n+\n+    @Override\n+    public void startMasterCommunication() {\n+        beatRunner.resume();\n     }\n }"
  },
  {
    "sha": "6544793ae773a55f336a5a3198b817c83498d071",
    "filename": "src/main/java/Application/Utilities/EdpHeartbeat.java",
    "status": "removed",
    "additions": 0,
    "deletions": 41,
    "changes": 41,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/eb41ce7271167ea06dfc713c82f2dbf074f6b9ac/src/main/java/Application/Utilities/EdpHeartbeat.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/eb41ce7271167ea06dfc713c82f2dbf074f6b9ac/src/main/java/Application/Utilities/EdpHeartbeat.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/Utilities/EdpHeartbeat.java?ref=eb41ce7271167ea06dfc713c82f2dbf074f6b9ac",
    "patch": "@@ -1,41 +0,0 @@\n-package Application.Utilities;\n-\n-import java.io.IOException;\n-import java.net.ConnectException;\n-import java.net.URI;\n-import java.net.http.HttpClient;\n-import java.net.http.HttpRequest;\n-import java.net.http.HttpResponse;\n-import java.time.Duration;\n-\n-public class EdpHeartbeat {\n-    public String url;\n-    public String body;\n-    private final HttpClient client = HttpClient.newBuilder()\n-            .version(HttpClient.Version.HTTP_1_1)\n-            .followRedirects(HttpClient.Redirect.NORMAL)\n-            .connectTimeout(Duration.ofSeconds(20))\n-            .build();\n-    \n-    public EdpHeartbeat(String url, String body) {\n-        this.url = url;\n-        this.body = body;\n-    }\n-\n-    public void beat() throws IOException, InterruptedException, IllegalArgumentException, SecurityException {\n-            HttpRequest request = HttpRequest.newBuilder()\n-                    .uri(URI.create(url))\n-                    .timeout(Duration.ofMinutes(1))\n-                    .header(\"Content-Type\", \"application/json\")\n-                    .POST(HttpRequest.BodyPublishers.ofString(body))\n-                    .build();\n-            HttpResponse<String> response =\n-                    client.send(request, HttpResponse.BodyHandlers.ofString());\n-        switch (response.statusCode()) {\n-            case 200:\n-                break;\n-            case 400: throw new ConnectException(\"400 - Bad Request\");\n-            default: throw new ConnectException(\"404 - Not found\");\n-        }\n-    }\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "69ab0d54dfca01741c5c4bd3c034e0cc9b95e006",
    "filename": "src/main/java/Application/Utilities/HeartBeatOperator.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/HeartBeatOperator.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/HeartBeatOperator.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/Utilities/HeartBeatOperator.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -0,0 +1,23 @@\n+package Application.Utilities;\n+\n+import java.io.IOException;\n+\n+public class HeartBeatOperator {\n+    public String url;\n+    public String body;\n+    private final RESTHandler handler;\n+    \n+    public HeartBeatOperator(String url, String body) {\n+        this.url = url;\n+        this.body = body;\n+        this.handler = new RESTHandler();\n+    }\n+\n+    public void beat() throws IOException, InterruptedException, IllegalArgumentException, SecurityException {\n+        handler.sendPostRequest(url, body);\n+    }\n+\n+    public void setBody(String body){\n+        this.body = body;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "218ff3f79fafb1452df2ce844ca945323d9c9638",
    "filename": "src/main/java/Application/Utilities/HeartBeatRunner.java",
    "status": "modified",
    "additions": 47,
    "deletions": 6,
    "changes": 53,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/HeartBeatRunner.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/HeartBeatRunner.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/Utilities/HeartBeatRunner.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -1,21 +1,29 @@\n package Application.Utilities;\n \n import java.io.IOException;\n+import java.util.concurrent.Semaphore;\n \n public class HeartBeatRunner implements Runnable {\n     //TODO implement and use exit and running values\n-    private final EdpHeartbeat beater;\n+    public final HeartBeatOperator beater;\n+\n+    private final int interval;\n \n     private volatile boolean exit = false;\n-    private volatile boolean running = false;\n+    private volatile boolean running = true;\n+    private volatile boolean paused = false;\n+    private final Semaphore pauseBlock;\n \n-    public HeartBeatRunner(String url, String body) {\n-        beater = new EdpHeartbeat(url, body);\n+    public HeartBeatRunner(String url, String body, int interval) {\n+        beater = new HeartBeatOperator(url, body);\n+        pauseBlock = new Semaphore(1);\n+        this.interval = interval;\n     }\n     @Override\n     public void run() {\n-        while(true) {\n+        while(!exit) {\n             try {\n+                checkPause();\n                 beater.beat();\n             } catch (IOException | InterruptedException | SecurityException e) {\n                 e.printStackTrace();\n@@ -24,10 +32,43 @@ public void run() {\n             }\n \n             try {\n-                Thread.sleep(1000);\n+                Thread.sleep(interval);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }\n         }\n     }\n+\n+    /**\n+     * When called, the runner terminates\n+     */\n+    public void exit(){\n+        exit = true;\n+        running = false;\n+    }\n+\n+    /**\n+     * See if the current runner is running\n+     * @return True if the runner is running, otherwise false.\n+     */\n+    public boolean isRunning() {\n+        return running;\n+    }\n+\n+    private void checkPause() throws InterruptedException {\n+        if (paused) {\n+            running = false;\n+            pauseBlock.acquire();\n+        }\n+    }\n+\n+    public void pause() {\n+        paused = true;\n+    }\n+\n+    public void resume() {\n+        paused = false;\n+        running = true;\n+        pauseBlock.release();\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "5b5511f2fd06601cd593c530432ac1898948dee1",
    "filename": "src/main/java/Application/Utilities/RESTHandler.java",
    "status": "added",
    "additions": 58,
    "deletions": 0,
    "changes": 58,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/RESTHandler.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/RESTHandler.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/Utilities/RESTHandler.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -0,0 +1,58 @@\n+package Application.Utilities;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.net.ConnectException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+public class RESTHandler {\n+    private final HttpClient client = HttpClient.newBuilder()\n+            .version(HttpClient.Version.HTTP_1_1)\n+            .followRedirects(HttpClient.Redirect.NORMAL)\n+            .connectTimeout(Duration.ofSeconds(20))\n+            .build();\n+\n+    public void sendPostRequest(String url, String body) throws IOException, InterruptedException, IllegalArgumentException, SecurityException {\n+        HttpRequest request = HttpRequest.newBuilder()\n+                .uri(URI.create(url))\n+                .timeout(Duration.ofMinutes(1))\n+                .header(\"Content-Type\", \"application/json\")\n+                .POST(HttpRequest.BodyPublishers.ofString(body))\n+                .build();\n+        HttpResponse<String> response =\n+                client.send(request, HttpResponse.BodyHandlers.ofString());\n+        switch (response.statusCode()) {\n+            case 200:\n+                break;\n+            case 400: throw new ConnectException(\"400 - Bad Request\");\n+            default: throw new ConnectException(\"404 - Not found\");\n+        }\n+    }\n+\n+    public String sendGetRequest(String url) throws IOException, InterruptedException {\n+        String responseBody = \"\";\n+        HttpRequest request = HttpRequest.newBuilder()\n+                .uri(URI.create(url))\n+                .timeout(Duration.ofMinutes(1))\n+                .header(\"Content-Type\", \"application/json\")\n+                .GET()\n+                .build();\n+        HttpResponse<String> response =\n+                client.send(request, HttpResponse.BodyHandlers.ofString());\n+        switch (response.statusCode()) {\n+            case 200:\n+                responseBody = response.body();\n+                break;\n+            case 400: throw new ConnectException(\"400 - Bad Request\");\n+            default: throw new ConnectException(\"404 - Not found\");\n+        }\n+\n+        return responseBody;\n+    }\n+}"
  },
  {
    "sha": "21328be014ade4bf18a5eb4707f3027ce91efc92",
    "filename": "src/main/java/Application/Utilities/RegistrationOperator.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/RegistrationOperator.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/RegistrationOperator.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/Utilities/RegistrationOperator.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -0,0 +1,24 @@\n+package Application.Utilities;\n+\n+import Application.Commons.CoreOperator;\n+\n+import java.io.IOException;\n+\n+public class RegistrationOperator {\n+    public String url;\n+    public String body;\n+    private final RESTHandler handler;\n+    private final CoreOperator activeOperator;\n+\n+    public RegistrationOperator(CoreOperator operator, String url, String body) {\n+        this.url = url;\n+        this.body = body;\n+        this.handler = new RESTHandler();\n+        this.activeOperator = operator;\n+    }\n+\n+    public void register() throws IOException, InterruptedException, IllegalArgumentException, SecurityException {\n+        handler.sendPostRequest(url, body);\n+        activeOperator.startMasterCommunication();\n+    }\n+}"
  },
  {
    "sha": "7ba90eed8c482033572216b8f9b7ee3a678a3868",
    "filename": "src/main/java/Application/Utilities/RegistrationRunner.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/RegistrationRunner.java",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/java/Application/Utilities/RegistrationRunner.java",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/java/Application/Utilities/RegistrationRunner.java?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -0,0 +1,46 @@\n+package Application.Utilities;\n+\n+import Application.Commons.CoreOperator;\n+\n+import java.io.IOException;\n+\n+public class RegistrationRunner implements Runnable {\n+    //TODO implement and use exit and running values\n+    private final RegistrationOperator registrar;\n+\n+    private volatile boolean exit = false;\n+    private volatile boolean running = true;\n+\n+    public RegistrationRunner(CoreOperator activeOperator, String url, String body) {\n+        registrar = new RegistrationOperator(activeOperator, url, body);\n+    }\n+    @Override\n+    public void run() {\n+        while(!exit) {\n+            try {\n+                registrar.register();\n+                exit = true;\n+                running = false;\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * When called, the runner terminates\n+     */\n+    public void exit(){\n+        exit = true;\n+    }\n+\n+    /**\n+     * See if the current runner is running\n+     * @return True if the runner is running, otherwise false.\n+     */\n+    public boolean isRunning() {\n+        return running;\n+    }\n+}"
  },
  {
    "sha": "e380061f57fd014e47231e694bfa6a8cbde544a0",
    "filename": "src/main/resources/Configuration.json",
    "status": "modified",
    "additions": 25,
    "deletions": 1,
    "changes": 26,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/resources/Configuration.json",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/resources/Configuration.json",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/resources/Configuration.json?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -12,8 +12,11 @@\n         {\"name\" : \"post1\",\"URL\": \"/post_test\",\"command\": \"test1 $body\",\"information\":  []},\n         {\"name\" : \"post2\",\"URL\": \"/post_test2\",\"command\": \"test2 $name $number\",\"information\": [\"name\", \"number\"]},\n         {\"name\" : \"client\",\"URL\": \"/client/register\",\"command\": \"register_client $body\",\"information\":  []},\n+        {\"name\" : \"client_beat\",\"URL\": \"/client/beat\",\"command\": \"beat_client $body\",\"information\":  []},\n         {\"name\" : \"node\",\"URL\": \"/node/register\",\"command\": \"register_node $body\",\"information\":  []},\n-        {\"name\" : \"assign\",\"URL\": \"/client/assign\",\"command\": \"assign_client $id\",\"information\":  [\"id\"]}\n+        {\"name\" : \"node_beat\",\"URL\": \"/node/beat\",\"command\": \"beat_node $body\",\"information\":  []},\n+        {\"name\" : \"assign\",\"URL\": \"/client/assign\",\"command\": \"assign_client $id\",\"information\":  [\"id\"]},\n+        {\"name\" : \"report\",\"URL\": \"/client/report\",\"command\": \"report_latency $path $content\",\"information\":  [\"path\", \"content\"]}\n       ],\n       \"GET\" : [\n         {\"name\" : \"get1\", \"URL\":  \"/limit_test\"},\n@@ -158,6 +161,27 @@\n       \"commands\" : {\n         \"give_node $client_id $node_json_body\": \"toGET resource $client_id $node_json_body\"\n       }\n+    },\n+    {\n+      \"in\" : \"rest.report\",\n+      \"out\" : \"util.fileOut\",\n+      \"commands\" : {\n+        \"report_latency $path $content\": \"file_out append $path $content\"\n+      }\n+    },\n+    {\n+      \"in\" : \"rest.report\",\n+      \"out\" : \"console.out\",\n+      \"commands\" : {\n+        \"report_latency $path $content\": \"console append to $path information: $content\"\n+      }\n+    },\n+    {\n+      \"in\" : \"rest.client_beat\",\n+      \"out\" : \"console.out\",\n+      \"commands\" : {\n+        \"beat_client $client_as_json_string\": \"console beat client $client_as_json_string\"\n+      }\n     }\n   ]\n }\n\\ No newline at end of file"
  },
  {
    "sha": "a885d553b68d4f295cbe10f55118546b339105af",
    "filename": "src/main/resources/OpenCVClient/Dockerfile",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/resources/OpenCVClient/Dockerfile",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/resources/OpenCVClient/Dockerfile",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/resources/OpenCVClient/Dockerfile?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -10,6 +10,7 @@ RUN chmod +x install.sh && sync && ./install.sh && rm install.sh\n \n #copy and build codes\n COPY bash/OpenCVCommon/build_classes.sh build_classes.sh\n+COPY java/Application/Commons/*.java /Application/Commons/\n COPY java/Application/MarkerDetection/OpenCVClient/*.java /Application/MarkerDetection/OpenCVClient/\n COPY java/Application/Utilities/*.java /Application/Utilities/\n WORKDIR /"
  },
  {
    "sha": "44a0f6c6c9f5145284c8471efcae97848c2894ff",
    "filename": "src/main/resources/OpenCVServer/Dockerfile",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/blob/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/resources/OpenCVServer/Dockerfile",
    "raw_url": "https://github.com/EdgeLab-FHDO/Edge-Diagnostic-Platform/raw/65e828d833b44a1ea963788c704ee95a2448dfd1/src/main/resources/OpenCVServer/Dockerfile",
    "contents_url": "https://api.github.com/repos/EdgeLab-FHDO/Edge-Diagnostic-Platform/contents/src/main/resources/OpenCVServer/Dockerfile?ref=65e828d833b44a1ea963788c704ee95a2448dfd1",
    "patch": "@@ -9,6 +9,7 @@ RUN chmod +x install.sh && sync && ./install.sh && rm install.sh\n \n #copy and build codes\n COPY bash/OpenCVCommon/build_classes.sh build_classes.sh\n+COPY java/Application/Commons/*.java /Application/Commons/\n COPY java/Application/MarkerDetection/OpenCVServer/*.java /Application/MarkerDetection/OpenCVServer/\n COPY java/Application/Utilities/*.java /Application/Utilities/\n WORKDIR /"
  }
]
