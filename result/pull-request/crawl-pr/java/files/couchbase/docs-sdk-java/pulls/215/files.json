[
  {
    "sha": "c4843ac9a84410a8a8b39acf35c9bacb8e1b0b09",
    "filename": "modules/concept-docs/examples/BucketsAndClustersExample.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/BucketsAndClustersExample.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/BucketsAndClustersExample.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/concept-docs/examples/BucketsAndClustersExample.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -50,7 +50,7 @@ public void buckets_and_clusters_1() throws Exception {\n     BucketManager manager = cluster.buckets();\n     bucketSettings = BucketSettings.create(\"myBucket\");\n     manager.createBucket(bucketSettings);\n-    // end::buckets_and_clusters_1[];\n+    // end::buckets_and_clusters_1[]\n   }\n \n   public static void main(String[] args) throws Exception {"
  },
  {
    "sha": "f6cb84f315b5ba3b18ab4ac51776ea80d45f91b2",
    "filename": "modules/concept-docs/examples/CompressionExample.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/CompressionExample.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/CompressionExample.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/concept-docs/examples/CompressionExample.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -50,7 +50,7 @@ public void compression_1() throws Exception {\n         // start compressing at 1024 bytes\n         .compressionConfig(CompressionConfig.minSize(1024))\n         .build();\n-    // end::compression_1[];\n+    // end::compression_1[]\n   }\n \n   public static void main(String[] args) throws Exception {"
  },
  {
    "sha": "013354473ed76991dd53f4f7970b963a3c2d0e2b",
    "filename": "modules/concept-docs/examples/DataModelExample.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/DataModelExample.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/DataModelExample.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/concept-docs/examples/DataModelExample.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -47,7 +47,7 @@ private void init() {\n   public void data_model_1() throws Exception {\n     // tag::data_model_1[]\n     Map<String, String> myMap = collection.map(\"name\", String.class);\n-    // end::data_model_1[];\n+    // end::data_model_1[]\n   }\n \n   public static void main(String[] args) throws Exception {"
  },
  {
    "sha": "c175a334e62daf27eddde6eb0e2805c27d9acbd1",
    "filename": "modules/concept-docs/examples/N1qlQueryExample.java",
    "status": "modified",
    "additions": 16,
    "deletions": 5,
    "changes": 21,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/N1qlQueryExample.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/N1qlQueryExample.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/concept-docs/examples/N1qlQueryExample.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -63,26 +63,30 @@ public void n1ql_query_1() throws Exception {\n         \"select count(*) from `travel-sample` where type = \\\"airports\\\" and country = ?\",\n         QueryOptions.queryOptions().adhoc(false).parameters(JsonArray.from(\"France\"))\n     );\n-    // end::n1ql_query_1[];\n+    // end::n1ql_query_1[]\n   }\n \n   public void n1ql_query_2() throws Exception {\n     try {\n+      setup_dropIndexes();\n       // tag::n1ql_query_2[]\n       QueryIndexManager indexManager = cluster.queryIndexes();\n+\n       indexManager.createPrimaryIndex(bucketName);\n       indexManager.createIndex(bucketName, \"ix_name\", Collections.singletonList(\"name\"));\n       indexManager.createIndex(bucketName, \"ix_email\", Collections.singletonList(\"email\"));\n-      // end::n1ql_query_2[];\n+      // end::n1ql_query_2[]\n     } catch (IndexExistsException e) {\n       System.err.println(e);\n     }\n   }\n \n   public void n1ql_query_3() throws Exception {\n     try {\n+      setup_dropIndexes();\n       // tag::n1ql_query_3[]\n       QueryIndexManager indexManager = cluster.queryIndexes();\n+\n       indexManager.createPrimaryIndex(bucketName,\n           CreatePrimaryQueryIndexOptions.createPrimaryQueryIndexOptions().deferred(true));\n       indexManager.createIndex(bucketName, \"ix_name\", Collections.singletonList(\"name\"),\n@@ -91,7 +95,7 @@ public void n1ql_query_3() throws Exception {\n           CreateQueryIndexOptions.createQueryIndexOptions().deferred(true));\n       indexManager.buildDeferredIndexes(bucketName);\n       indexManager.watchIndexes(bucketName, Arrays.asList(\"ix_name\", \"ix_email\"), Duration.ofMinutes(5));\n-      // end::n1ql_query_3[];\n+      // end::n1ql_query_3[]\n     } catch (IndexExistsException e) {\n       System.err.println(e);\n     }\n@@ -110,7 +114,7 @@ public void n1ql_query_4() throws Exception {\n         QueryOptions.queryOptions()\n             .parameters(JsonObject.create().put(\"id\", id))\n     );\n-    // end::n1ql_query_4[];\n+    // end::n1ql_query_4[]\n   }\n \n   public void n1ql_query_5() throws Exception {\n@@ -121,7 +125,14 @@ public void n1ql_query_5() throws Exception {\n             .parameters(JsonObject.create().put(\"id\", id))\n             .scanConsistency(QueryScanConsistency.REQUEST_PLUS)\n     );\n-    // end::n1ql_query_5[];\n+    // end::n1ql_query_5[]\n+  }\n+\n+  private void setup_dropIndexes() {\n+    QueryIndexManager indexManager = cluster.queryIndexes();\n+    indexManager.dropPrimaryIndex(bucketName);\n+    indexManager.dropIndex(bucketName, \"ix_name\");\n+    indexManager.dropIndex(bucketName, \"ix_email\");\n   }\n \n   public static void main(String[] args) throws Exception {"
  },
  {
    "sha": "7554c975134c5b67415d26d9e33e74ecd5395439",
    "filename": "modules/concept-docs/examples/XattrExample.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/XattrExample.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/examples/XattrExample.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/concept-docs/examples/XattrExample.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -53,7 +53,7 @@ public void xattr_1() throws Exception {\n         Collections.singletonList(\n             LookupInSpec.get(LookupInMacro.EXPIRY_TIME).xattr())\n     );\n-    // end::xattr_1[];\n+    // end::xattr_1[]\n   }\n \n   public static void main(String[] args) throws Exception {"
  },
  {
    "sha": "3ed439228d89472cb5f96cd3e2c81c717daad4a6",
    "filename": "modules/concept-docs/pages/documents.adoc",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/pages/documents.adoc",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/pages/documents.adoc",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/concept-docs/pages/documents.adoc?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -2,7 +2,7 @@\n :nav-title: Documents & Doc Ops\n :page-topic-type: concept\n //:page-aliases: ROOT:core-operations.adoc\n-:page-aliases: ROOT:documents.adoc,ROOT:documents-basics.adoc,ROOT:documents-atomic.adoc,6.6@server:developer-guide:expiry.adoc,6.6@server:developer-guide:creating-documents.adoc\n+:page-aliases: ROOT:documents.adoc,ROOT:documents-basics.adoc,ROOT:documents-atomic.adoc\n \n [abstract]\n Couchbase supports CRUD operations, various data structures, and binary documents."
  },
  {
    "sha": "880603eead2085ca83e89163445e66e68f5a18e1",
    "filename": "modules/concept-docs/pages/n1ql-query.adoc",
    "status": "modified",
    "additions": 25,
    "deletions": 4,
    "changes": 29,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/pages/n1ql-query.adoc",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/concept-docs/pages/n1ql-query.adoc",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/concept-docs/pages/n1ql-query.adoc?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -23,8 +23,8 @@ include::example$N1qlQueryExample.java[tag=n1ql_query_1,indent=0]\n == Indexes\n \n The Couchbase Query Service makes use of xref:6.5@server:learn:services-and-indexes/indexes/indexes.adoc[_indexes_] in order to do its work.\n-Indexes replicate subsets of documents from data nodes over to index nodes, \n-allowing specific data (for example, specific document properties) to be retrieved quickly, \n+Indexes replicate subsets of documents from data nodes over to index nodes,\n+allowing specific data (for example, specific document properties) to be retrieved quickly,\n and to distribute load away from data nodes in xref:6.5@server:learn:services-and-indexes/services/services.adoc[MDS] topologies.\n \n [IMPORTANT]\n@@ -55,7 +55,7 @@ SELECT name, email FROM `users` WHERE name=\"Monty Python\" OR email=\"monty@python\n ----\n \n Indexes help improve the performance of a query.\n-When an index includes the actual values of all the fields specified in the query, \n+When an index includes the actual values of all the fields specified in the query,\n the index _covers_ the query, and eliminates the need to fetch the actual values from the Data Service.\n An index, in this case, is called a _covering index_, and the query is called a _covered_ query.\n For more information, see xref:6.5@server:n1ql:n1ql-language-reference/covering-indexes.adoc[Covering Indexes].\n@@ -83,7 +83,7 @@ BUILD INDEX ON `users`(`#primary`, `ix_name`, `ix_email`);\n ----\n \n The indexes are not built until the `BUILD INDEX` statement is executed.\n-At this point, the server scans all of the documents in the `users` bucket, \n+At this point, the server scans all of the documents in the `users` bucket,\n and indexes it for all of the applicable indexes (in this case, those that have a `name` or `email` field).\n \n Building deferred indexes can also be done via the SDK:\n@@ -120,3 +120,24 @@ include::example$N1qlQueryExample.java[tag=n1ql_query_5,indent=0]\n \n This gives the application developer more control over the balance between performance (latency) and consistency,\n and allows optimization on a case-by-case basis.\n+\n+== Collections and Scopes, and the Query Context\n+\n+From the _beta version of the next Couchbase Server release, 7.0β_ the xref:7.0@server:learn:data/scopes-and-collections.adoc[Collections] feature lets you logically group similar documents into Collections.\n+\n+You can query collections in N1QL, by referring to an fully qualified keyspace. For example, to list the documents in the `airline` collection in the `inventory` scope:\n+\n+[source,n1ql]\n+----\n+SELECT * FROM `travel-sample`.inventory.airline;\n+----\n+\n+As a convenience, you can also query a partial keyspace from the xref:7.0@server:n1ql:n1ql-intro:sysinfo.adoc#query-context[Query Context] of a specific Scope. For example, from the context of `{backtick}travel-sample{backtick}.inventory`, you could abbreviate the previous query to:\n+\n+[source,n1ql]\n+----\n+SELECT * FROM airline;\n+----\n+\n+To do this, you can xref:7.0@server:tools:query-workbench.adoc#query-context[Set a Query Context] in the Query Workbench\n+or xref:howtos:n1ql-queries-with-sdk.adoc#querying-at-scope-level[query at scope level] using the SDK."
  },
  {
    "sha": "3c83fdfd15e64ced58ba3db81b0b3dfbe7bf70b1",
    "filename": "modules/devguide/examples/java/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/devguide/examples/java/pom.xml",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/devguide/examples/java/pom.xml",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/devguide/examples/java/pom.xml?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -8,7 +8,7 @@\n   <properties>\n     <maven.compiler.source>1.8</maven.compiler.source>\n     <maven.compiler.target>1.8</maven.compiler.target>\n-    <log4j.version>1.2.17</log4j.version>\n+    <log4j.version>2.13.3</log4j.version>\n     <slf4j.version>1.7.30</slf4j.version>\n   </properties>\n "
  },
  {
    "sha": "0618352dfa3b43267b7301ff5aa96b0910290429",
    "filename": "modules/hello-world/examples/DocParser.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/hello-world/examples/DocParser.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/hello-world/examples/DocParser.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/hello-world/examples/DocParser.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -291,7 +291,7 @@ public void process(String fileName) throws IOException {\n               methodLines.add(\"    \" + line); // remaining lines\n               continued = line.contains(\"// continued\"); // don't close-out this method.\n             } // while content between ---- and ---- of [source,java]\n-            methodLines.add(\"    // end::\" + javaName + \"_\" + sourceSection + \"[]\");\n+            methodLines.add(\"    // end::\" + javaName + \"_\" + sourceSection + \"[]\")\n             if (!dontEncapsulate && !continued) { // close off the method\n               methodLines.add(\"  }\\n\");\n             }"
  },
  {
    "sha": "23378bf7fc94499ea6763c7b75c2d524d5bd9767",
    "filename": "modules/howtos/examples/Analytics.java",
    "status": "modified",
    "additions": 80,
    "deletions": 22,
    "changes": 102,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/Analytics.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/Analytics.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/examples/Analytics.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -14,8 +14,19 @@\n  * limitations under the License.\n  */\n \n+ /*\n+  * You need the following datasets created:\n+  *\n+  *  CREATE DATASET `airports` ON `travel-sample` where `type` = \"airport\";\n+  *  CREATE DATASET `huge-dataset` ON `travel-sample`;\n+  *  ALTER COLLECTION `travel-sample`.`inventory`.`airport` ENABLE ANALYTICS;\n+  *  CONNECT LINK Local;\n+  */\n+\n // tag::imports[]\n import com.couchbase.client.core.error.CouchbaseException;\n+import com.couchbase.client.java.Scope;\n+import com.couchbase.client.java.Bucket;\n import com.couchbase.client.java.Cluster;\n import com.couchbase.client.java.analytics.AnalyticsResult;\n import com.couchbase.client.java.analytics.AnalyticsScanConsistency;\n@@ -36,6 +47,20 @@\n \n   static Cluster cluster = Cluster.connect(\"localhost\", \"Administrator\", \"password\");\n \n+  public static void show(String description, AnalyticsResult result) {\n+    System.out.println(description);\n+\n+    for (JsonObject row : result.rowsAsObject()) {\n+      System.out.println(\"Found row: \" + row);\n+    }\n+\n+    System.out.println(\"Reported execution time: \"\n+      + result.metaData().metrics().executionTime());\n+\n+      System.out.println();\n+  }\n+\n+\n   public static void main(String... args) {\n     {\n       // tag::simple[]\n@@ -49,6 +74,9 @@ public static void main(String... args) {\n \n         System.out.println(\"Reported execution time: \"\n           + result.metaData().metrics().executionTime());\n+\n+        System.out.println();\n+\n       } catch (CouchbaseException ex) {\n         ex.printStackTrace();\n       }\n@@ -59,55 +87,59 @@ public static void main(String... args) {\n       // tag::named[]\n       AnalyticsResult result = cluster.analyticsQuery(\n         \"select count(*) from airports where country = $country\",\n-        analyticsOptions().parameters(JsonObject.create().put(\"country\", \"France\"))\n-      );\n+        analyticsOptions().parameters(JsonObject.create().put(\"country\", \"France\")));\n       // end::named[]\n+      show(\"named\", result);\n     }\n \n-\n     {\n       // tag::positional[]\n       AnalyticsResult result = cluster.analyticsQuery(\n         \"select count(*) from airports where country = ?\",\n         analyticsOptions().parameters(JsonArray.from(\"France\"))\n       );\n       // end::positional[]\n+      show(\"positional\", result);\n     }\n \n     {\n       // tag::scanconsistency[]\n       AnalyticsResult result = cluster.analyticsQuery(\n-        \"select ...\",\n+        \"select count(*) from airports where country = 'France'\",\n         analyticsOptions().scanConsistency(AnalyticsScanConsistency.REQUEST_PLUS)\n       );\n       // end::scanconsistency[]\n+      show(\"scanconsistency\", result);\n     }\n \n     {\n       // tag::clientcontextid[]\n       AnalyticsResult result = cluster.analyticsQuery(\n-        \"select ...\",\n+        \"select count(*) from airports where country = 'France'\",\n         analyticsOptions().clientContextId(\"user-44\" + UUID.randomUUID())\n       );\n       // end::clientcontextid[]\n+      show(\"clientcontextid\", result);\n     }\n \n     {\n       // tag::priority[]\n       AnalyticsResult result = cluster.analyticsQuery(\n-        \"select ...\",\n+        \"select count(*) from airports where country = 'France'\",\n         analyticsOptions().priority(true)\n       );\n       // end::priority[]\n+      show(\"priority\", result);\n     }\n \n     {\n       // tag::readonly[]\n       AnalyticsResult result = cluster.analyticsQuery(\n-        \"select ...\",\n+        \"select count(*) from airports where country = 'France'\",\n         analyticsOptions().readonly(true)\n       );\n       // end::readonly[]\n+      show(\"readonly\", result);\n     }\n \n     {\n@@ -122,50 +154,76 @@ public static void main(String... args) {\n     {\n       // tag::rowsasobject[]\n       AnalyticsResult result = cluster.analyticsQuery(\n-        \"select * from `travel-sample` limit 10\"\n+        \"select * from airports limit 3\"\n       );\n       for (JsonObject row : result.rowsAsObject()) {\n         System.out.println(\"Found row: \" + row);\n       }\n       // end::rowsasobject[]\n+      System.out.println();\n     }\n \n     {\n-      // tag::simplereactive[]\n-      Mono<ReactiveAnalyticsResult> result = cluster\n-        .reactive()\n-        .analyticsQuery(\"select 1=1\");\n-\n-      result\n-        .flatMapMany(ReactiveAnalyticsResult::rowsAsObject)\n-        .subscribe(row -> System.out.println(\"Found row: \" + row));\n-      // end::simplereactive[]\n+      // tag::handle-collection[]\n+      AnalyticsResult result = cluster.analyticsQuery(\n+        \"SELECT airportname, country FROM `travel-sample`.inventory.airport WHERE country='France' LIMIT 3\");\n+      // end::handle-collection[]\n+      show(\"handle-collection\", result);\n     }\n \n+    // {\n+    //   // tag::handle-scope[]\n+    //   Bucket bucket = cluster.bucket(\"travel-sample\");\n+    //   Scope scope = bucket.scope(\"inventory\");\n+    //   AnalyticsResult result = scope.analyticsQuery(\n+    //     \"SELECT airportname, country FROM `airport` WHERE country='France' LIMIT 4\");\n+    //   // end::handle-scope[]\n+    //   show(\"handle-scope\", result);\n+    // }\n+\n+    System.out.println(\"Disconnecting...\");\n+    cluster.disconnect();\n+  }\n+\n+  public static void asyncExamples(String... args) {\n     {\n+      {\n+        System.out.println(\"simplereactive\");\n+        // tag::simplereactive[]\n+        Mono<ReactiveAnalyticsResult> result = cluster\n+          .reactive()\n+          .analyticsQuery(\"select 1=1\");\n+\n+        result\n+          .flatMapMany(ReactiveAnalyticsResult::rowsAsObject)\n+          .subscribe(row -> System.out.println(\"Found row: \" + row));\n+        // end::simplereactive[]\n+      }\n+\n+      System.out.println(\"backpressure\");\n       // tag::backpressure[]\n       Mono<ReactiveAnalyticsResult> result = cluster\n         .reactive()\n-        .analyticsQuery(\"select * from hugeDataset\");\n+        .analyticsQuery(\"select * from `huge-dataset`\");\n \n       result\n         .flatMapMany(ReactiveAnalyticsResult::rowsAsObject)\n         .subscribe(new BaseSubscriber<JsonObject>() {\n           // Number of outstanding requests\n-          final AtomicInteger oustanding = new AtomicInteger(0);\n+          final AtomicInteger outstanding = new AtomicInteger(0);\n \n           @Override\n           protected void hookOnSubscribe(Subscription subscription) {\n             request(10); // initially request to rows\n-            oustanding.set(10);\n+            outstanding.set(10);\n           }\n \n           @Override\n           protected void hookOnNext(JsonObject value) {\n             process(value);\n-            if (oustanding.decrementAndGet() == 0) {\n+            if (outstanding.decrementAndGet() == 0) {\n               request(10);\n-              oustanding.set(10);\n+              outstanding.set(10);\n             }\n           }\n       });"
  },
  {
    "sha": "519ad6bb54a785af079931f6058580ee85c1f1cf",
    "filename": "modules/howtos/examples/CollectingInformationAndLogging.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/CollectingInformationAndLogging.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/CollectingInformationAndLogging.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/examples/CollectingInformationAndLogging.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -49,7 +49,7 @@ private void init(){\n     bucket = cluster.bucket(bucketName);\n     scope = bucket.defaultScope();\n     collection = bucket.defaultCollection();\n-    // end::connection_1[];\n+    // end::connection_1[]\n   }\n   public void collecting_information_and_logging_1() throws Exception { // file: howtos/pages/collecting-information-and-logging.adoc line: 114\n     // tag::collecting_information_and_logging_1[]\n@@ -60,7 +60,7 @@ public void collecting_information_and_logging_1() throws Exception { // file: h\n         \th.setLevel(Level.FINE);\n     \t}\n     }\n-    // end::collecting_information_and_logging_1[];\n+    // end::collecting_information_and_logging_1[]\n   }\n \n   public void collecting_information_and_logging_2() throws Exception { // file: howtos/pages/collecting-information-and-logging.adoc line: 131\n@@ -72,7 +72,7 @@ public void collecting_information_and_logging_2() throws Exception { // file: h\n         .disableSlf4J(true)\n       )\n       .build();\n-    // end::collecting_information_and_logging_2[];\n+    // end::collecting_information_and_logging_2[]\n   }\n \n   public void collecting_information_and_logging_3() throws Exception { // file: howtos/pages/collecting-information-and-logging.adoc line: 163\n@@ -92,13 +92,13 @@ public void collecting_information_and_logging_3() throws Exception { // file: h\n     );\n \n     Bucket bucket = cluster.bucket(bucketName);\n-    // end::collecting_information_and_logging_3[];\n+    // end::collecting_information_and_logging_3[]\n   }\n \n   public void collecting_information_and_logging_4() throws Exception { // file: howtos/pages/collecting-information-and-logging.adoc line: 206\n     // tag::collecting_information_and_logging_4[]\n     LogRedaction.setRedactionLevel(RedactionLevel.FULL);\n-    // end::collecting_information_and_logging_4[];\n+    // end::collecting_information_and_logging_4[]\n   }\n \n   public static void main(String[] args) throws Exception{"
  },
  {
    "sha": "197f777958c9e179d90b2e0908968d1f7520a39e",
    "filename": "modules/howtos/examples/EncryptingUsingSDK.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/EncryptingUsingSDK.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/EncryptingUsingSDK.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/examples/EncryptingUsingSDK.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -58,7 +58,7 @@ private void init() {\n     cluster = Cluster.connect(connectionString, ClusterOptions.clusterOptions(username, password).environment(environment));\n     bucket = cluster.bucket(\"travel-sample\");\n     scope = bucket.defaultScope();\n-    collection = bucket.defaultCollection();    // end::connection_1[];\n+    collection = bucket.defaultCollection();    // end::connection_1[]\n   }\n \n   public void encrypting_using_sdk_1() throws Exception { // file: howtos/pages/encrypting-using-sdk.adoc line: 60"
  },
  {
    "sha": "d059411cced0817d3080e586e8bd265d6717226a",
    "filename": "modules/howtos/examples/KvOperations.java",
    "status": "modified",
    "additions": 200,
    "deletions": 166,
    "changes": 366,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/KvOperations.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/KvOperations.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/examples/KvOperations.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -15,205 +15,239 @@\n  */\n \n // tag::imports[]\n-import com.couchbase.client.core.error.*;\n-import com.couchbase.client.core.msg.kv.DurabilityLevel;\n-import com.couchbase.client.java.*;\n-import com.couchbase.client.java.json.*;\n-import com.couchbase.client.java.kv.*;\n+import static com.couchbase.client.java.kv.GetOptions.getOptions;\n+import static com.couchbase.client.java.kv.InsertOptions.insertOptions;\n+import static com.couchbase.client.java.kv.ReplaceOptions.replaceOptions;\n+import static com.couchbase.client.java.kv.UpsertOptions.upsertOptions;\n \n import java.time.Duration;\n import java.time.Instant;\n import java.time.Period;\n \n-import static com.couchbase.client.java.kv.GetOptions.getOptions;\n-import static com.couchbase.client.java.kv.InsertOptions.insertOptions;\n-import static com.couchbase.client.java.kv.ReplaceOptions.replaceOptions;\n-import static com.couchbase.client.java.kv.UpsertOptions.upsertOptions;\n+import com.couchbase.client.core.error.CasMismatchException;\n+import com.couchbase.client.core.error.CouchbaseException;\n+import com.couchbase.client.core.error.DocumentExistsException;\n+import com.couchbase.client.core.error.DocumentNotFoundException;\n+import com.couchbase.client.core.error.DurabilityImpossibleException;\n+import com.couchbase.client.core.error.ReplicaNotConfiguredException;\n+import com.couchbase.client.core.msg.kv.DurabilityLevel;\n+import com.couchbase.client.java.AsyncCollection;\n+import com.couchbase.client.java.Bucket;\n+import com.couchbase.client.java.Cluster;\n+import com.couchbase.client.java.Collection;\n+import com.couchbase.client.java.ReactiveCollection;\n+import com.couchbase.client.java.Scope;\n+import com.couchbase.client.java.json.JsonObject;\n+import com.couchbase.client.java.kv.GetResult;\n+import com.couchbase.client.java.kv.MutationResult;\n+import com.couchbase.client.java.kv.PersistTo;\n+import com.couchbase.client.java.kv.ReplicateTo;\n // end::imports[]\n \n-class KvOperations {\n+public class KvOperations {\n \n   public static void main(String... args) {\n \n-Cluster cluster = Cluster.connect(\"127.0.0.1\", \"Administrator\", \"password\");\n+    Cluster cluster = Cluster.connect(\"localhost\", \"Administrator\", \"password\");\n \n-Bucket bucket = cluster.bucket(\"default\");\n-Scope scope = bucket.scope(\"_default\");\n-Collection collection = scope.collection(\"_default\");\n+    Bucket bucket = cluster.bucket(\"travel-sample\");\n+    Scope scope = bucket.scope(\"_default\");\n+    Collection collection = scope.collection(\"_default\");\n \n-JsonObject json = JsonObject.create()\n-  .put(\"title\", \"My Blog Post\")\n-  .put(\"author\", \"mike\");\n+    JsonObject json = JsonObject.create().put(\"title\", \"My Blog Post\").put(\"author\", \"mike\");\n \n+    // tag::apis[]\n+    AsyncCollection asynccollection = collection.async();\n+    ReactiveCollection reactivecollection = collection.reactive();\n+    // end::apis[]\n \n-// tag::apis[]\n-AsyncCollection asyncCollection = collection.async();\n-ReactiveCollection reactiveCollection = collection.reactive();\n-// end::apis[]\n+    {\n+      System.out.println(\"\\nExample: [upsert]\");\n+      // tag::upsert[]\n+      JsonObject content = JsonObject.create().put(\"author\", \"mike\").put(\"title\", \"My Blog Post 1\");\n \n-{\n-// tag::upsert[]\n-JsonObject content = JsonObject.create().put(\"author\", \"mike\").put(\"title\",\"My Blog Post 1\");\n+      MutationResult result = collection.upsert(\"document-key\", content);\n+      // end::upsert[]\n+    }\n \n-MutationResult result = collection.upsert(\"document-key\", content);\n-// end::upsert[]\n-}\n+    {\n+      System.out.println(\"\\nExample: [insert]\");\n+      // tag::insert[]\n+      try {\n+        JsonObject content = JsonObject.create().put(\"title\", \"My Blog Post 2\");\n+        MutationResult insertResult = collection.insert(\"document-key2\", content);\n+      } catch (DocumentExistsException ex) {\n+        System.err.println(\"The document already exists!\");\n+      } catch (CouchbaseException ex) {\n+        System.err.println(\"Something else happened: \" + ex);\n+      }\n+      // end::insert[]\n+    }\n \n-{\n-// tag::insert[]\n-try {\n-  JsonObject content = JsonObject.create().put(\"title\", \"My Blog Post 2\");\n-  MutationResult insertResult = collection.insert(\"document-key\", content);\n-} catch (DocumentExistsException ex) {\n-  System.err.println(\"The document already exists!\");\n-} catch (CouchbaseException ex) {\n-  System.err.println(\"Something else happened: \" + ex);\n-}\n-// end::insert[]\n-}\n+    {\n+      System.out.println(\"\\nExample: [get-simple]\");\n+      // tag::get-simple[]\n+      try {\n+        GetResult getResult = collection.get(\"document-key\");\n+        String title = getResult.contentAsObject().getString(\"title\");\n+        System.out.println(title); // title == \"My Blog Post\"\n+      } catch (DocumentNotFoundException ex) {\n+        System.out.println(\"Document not found!\");\n+      }\n+      // end::get-simple[]\n+    }\n \n-{\n-// tag::get-simple[]\n-try {\n-  GetResult getResult = collection.get(\"document-key\");\n-  String title = getResult.contentAsObject().getString(\"title\");\n-  System.out.println(title); // title == \"My Blog Post\"\n-} catch (DocumentNotFoundException ex) {\n-  System.out.println(\"Document not found!\");\n-}\n-// end::get-simple[]\n-}\n+    {\n+      System.out.println(\"\\nExample: [get]\");\n+      // tag::get[]\n+      GetResult found = collection.get(\"document-key\");\n+      JsonObject content = found.contentAsObject();\n+      if (content.getString(\"author\").equals(\"mike\")) {\n+        // do something\n+      } else {\n+        // do something else\n+      }\n+      // end::get[]\n+    }\n \n-{\n-// tag::get[]\n-GetResult found = collection.get(\"document-key\");\n-JsonObject content = found.contentAsObject();\n-if (content.getString(\"author\").equals(\"mike\")) {\n-    // do something\n-} else {\n-    // do something else\n-}\n-// end::get[]\n-}\n+    {\n+      System.out.println(\"\\nExample: [replace]\");\n+      // tag::replace[]\n+      collection.upsert(\"my-document\", JsonObject.create().put(\"initial\", true));\n \n-{\n-// tag::replace[]\n-collection.upsert(\"my-document\", JsonObject.create().put(\"initial\", true));\n+      GetResult result = collection.get(\"my-document\");\n+      JsonObject content = result.contentAsObject();\n+      content.put(\"modified\", true).put(\"initial\", false);\n+      collection.replace(\"my-document\", content, replaceOptions().cas(result.cas()));\n+      // end::replace[]\n+    }\n \n-GetResult result = collection.get(\"my-document\");\n-JsonObject content = result.contentAsObject();\n-content.put(\"modified\", true).put(\"initial\", false);\n-collection.replace(\"my-document\", content, replaceOptions().cas(result.cas()));\n-// end::replace[]\n-}\n+    {\n+      System.out.println(\"\\nExample: [replace-retry]\");\n+      // tag::replace-retry[]\n+      String id = \"my-document\";\n+      collection.upsert(id, JsonObject.create().put(\"initial\", true));\n+\n+      GetResult found = collection.get(id);\n+      JsonObject content = found.contentAsObject();\n+      content.put(\"modified\", true).put(\"initial\", false);\n+      while (true) {\n+        try {\n+          collection.replace(id, content, replaceOptions().cas(found.cas()));\n+          break; // if successful, break out of the retry loop\n+        } catch (CasMismatchException ex) {\n+          // don't do anything, we'll retry the loop\n+        }\n+      }\n+      // end::replace-retry[]\n+    }\n \n-{\n-// tag::replace-retry[]\n-String id = \"my-document\";\n-collection.upsert(id, JsonObject.create().put(\"initial\", true));\n-\n-GetResult found = collection.get(id);\n-JsonObject content = found.contentAsObject();\n-content.put(\"modified\", true).put(\"initial\", false);\n-while (true) {\n-    try {\n-        collection.replace(id, content, replaceOptions().cas(found.cas()));\n-        break; // if successful, break out of the retry loop\n-    } catch (CasMismatchException ex) {\n-        // don't do anything, we'll retry the loop\n+    {\n+      System.out.println(\"\\nExample: [remove]\");\n+      // tag::remove[]\n+      try {\n+        collection.remove(\"my-document\");\n+      } catch (DocumentNotFoundException ex) {\n+        System.out.println(\"Document did not exist when trying to remove\");\n+      }\n+      // end::remove[]\n     }\n-}\n-// end::replace-retry[]\n-}\n \n-{\n-// tag::remove[]\n-try {\n-  collection.remove(\"my-document\");\n-} catch (DocumentNotFoundException ex) {\n-  System.out.println(\"Document did not exist when trying to remove\");\n-}\n-// end::remove[]\n-}\n+    {\n+      System.out.println(\"\\nExample: [durability]\");\n+      try {\n+        // tag::durability[]\n+        collection.upsert(\"my-document\", JsonObject.create().put(\"doc\", true),\n+            upsertOptions().durability(DurabilityLevel.MAJORITY));\n+        // end::durability[]\n+      } catch (DurabilityImpossibleException di) {\n+        System.out.println(di);\n+      }\n+    }\n \n-{\n-  try {\n-// tag::durability[]\n-    collection.upsert(\n-        \"my-document\",\n-        JsonObject.create()\n-            .put(\"doc\",\n-                true),\n-        upsertOptions().durability(DurabilityLevel.MAJORITY)\n-    );\n-// end::durability[]\n-  } catch(DurabilityImpossibleException di) {\n-    System.out.println(di);\n-  }\n-}\n+    {\n+      System.out.println(\"\\nExample: [durability-observed]\");\n+      try {\n+        // tag::durability-observed[]\n+        collection.upsert(\"my-document\", JsonObject.create().put(\"doc\", true),\n+            upsertOptions().durability(PersistTo.NONE, ReplicateTo.TWO));\n+        // end::durability-observed[]\n+      } catch (ReplicaNotConfiguredException rnc) {\n+        System.out.println(rnc);\n+      }\n+    }\n \n-{\n-  try {\n-// tag::durability-observed[]\n-    collection.upsert(\n-        \"my-document\",\n-        JsonObject.create()\n-            .put(\"doc\",\n-                true),\n-        upsertOptions().durability(PersistTo.NONE,\n-            ReplicateTo.TWO)\n-    );\n-// end::durability-observed[]\n-  } catch(ReplicaNotConfiguredException rnc){\n-    System.out.println(rnc);\n-  }\n-}\n+    {\n+      System.out.println(\"\\nExample: [expiry-insert]\");\n+      // tag::expiry-insert[]\n+      MutationResult insertResult = collection.insert(\"my-document2\", json,\n+          insertOptions().expiry(Duration.ofHours(2)));\n+      // end::expiry-insert[]\n+    }\n \n-{\n-// tag::expiry-insert[]\n-MutationResult insertResult = collection.insert(\n-  \"my-document\",\n-  json,\n-  insertOptions().expiry(Duration.ofHours(2))\n-);\n-// end::expiry-insert[]\n-}\n+    {\n+      System.out.println(\"\\nExample: [expiry-insert-instant]\");\n+      // tag::expiry-insert-instant[]\n+      MutationResult insertResult = collection.insert(\"my-document3\", json,\n+          insertOptions().expiry(Instant.now().plus(Period.ofDays(62))));\n+      // end::expiry-insert-instant[]\n+    }\n \n-{\n-// tag::expiry-insert-instant[]\n-MutationResult insertResult = collection.insert(\n-  \"my-document\",\n-  json,\n-  insertOptions().expiry(Instant.now().plus(Period.ofMonths(2)))\n-);\n-// end::expiry-insert-instant[]\n-}\n+    {\n+      System.out.println(\"\\nExample: [expiry-get]\");\n+      // tag::expiry-get[]\n+      GetResult result = collection.get(\"my-document3\", getOptions().withExpiry(true));\n+      System.out.println(\"Expiry of found doc: \" + result.expiry());\n+      // end::expiry-get[]\n \n-{\n-// tag::expiry-get[]\n-GetResult found = collection.get(\"my-document\", getOptions().withExpiry(true));\n-System.out.println(\"Expiry of found doc: \" + found.expiry());\n-// end::expiry-get[]\n-}\n+      System.out.println(\"cas value: \" + result.cas());\n+    }\n \n-{\n-// tag::expiry-replace[]\n-GetResult found = collection.get(\"my-document\", getOptions().withExpiry(true));\n+    {\n+      System.out.println(\"\\nExample: [expiry-replace]\");\n+      // tag::expiry-replace[]\n+      GetResult found = collection.get(\"my-document3\", getOptions().withExpiry(true));\n \n-collection.replace(\n-  \"my-document\",\n-  json,\n-  replaceOptions().expiry(found.expiryTime().get())\n-);\n-// end::expiry-replace[]\n-}\n+      MutationResult result = collection.replace(\"my-document3\", json,\n+          replaceOptions().expiry(found.expiryTime().get()));\n+      // end::expiry-replace[]\n \n-{\n-// tag::expiry-touch[]\n-collection.getAndTouch(\"my-document\", Duration.ofDays(1));\n-// end::expiry-touch[]\n-}\n+      System.out.println(\"cas value: \" + result.cas());\n+    }\n+\n+    {\n+      System.out.println(\"\\nExample: [expiry-touch]\");\n+      // tag::expiry-touch[]\n+      GetResult result = collection.getAndTouch(\"my-document3\", Duration.ofDays(1));\n+      // end::expiry-touch[]\n+\n+      System.out.println(\"cas value: \" + result.cas());\n+    }\n \n+    {\n+      System.out.println(\"\\nExample: [named-collection-upsert]\");\n+      // tag::named-collection-upsert[]\n+      Scope agentScope = bucket.scope(\"tenant_agent_00\");\n+      Collection usersCollection = agentScope.collection(\"users\");\n+\n+      JsonObject content = JsonObject.create().put(\"name\", \"John Doe\").put(\"preferred_email\",\n+          \"johndoe111@test123.test\");\n+      MutationResult result = usersCollection.upsert(\"user-key\", content);\n+      // end::named-collection-upsert[]\n+\n+      System.out.println(\"cas value: \" + result.cas());\n+    }\n+\n+    // Cleans up example data from the _default collection\n+    // to avoid errors when running the sample code (mainly for `insert` examples).\n+    cleanupData(collection);\n   }\n \n+  private static void cleanupData(Collection collection) throws CouchbaseException {\n+    System.out.println(\"\\nCleaning up example data....\");\n+\n+    collection.remove(\"document-key2\");\n+    collection.remove(\"my-document2\");\n+    collection.remove(\"my-document3\");\n+  }\n }"
  },
  {
    "sha": "db3974c807e35c31db916a1106d9bf88069381bd",
    "filename": "modules/howtos/examples/Queries.java",
    "status": "modified",
    "additions": 82,
    "deletions": 68,
    "changes": 150,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/Queries.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/Queries.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/examples/Queries.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -15,166 +15,180 @@\n  */\n \n // tag::imports[]\n+import static com.couchbase.client.java.query.QueryOptions.queryOptions;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n import com.couchbase.client.core.error.CouchbaseException;\n-import com.couchbase.client.java.*;\n-import com.couchbase.client.java.json.*;\n+import com.couchbase.client.java.Bucket;\n+import com.couchbase.client.java.Cluster;\n+import com.couchbase.client.java.Collection;\n+import com.couchbase.client.java.Scope;\n+import com.couchbase.client.java.json.JsonArray;\n+import com.couchbase.client.java.json.JsonObject;\n import com.couchbase.client.java.kv.MutationResult;\n import com.couchbase.client.java.kv.MutationState;\n-import com.couchbase.client.java.query.*;\n-import org.reactivestreams.Subscription;\n-import reactor.core.publisher.*;\n+import com.couchbase.client.java.query.QueryOptions;\n+import com.couchbase.client.java.query.QueryResult;\n+import com.couchbase.client.java.query.QueryScanConsistency;\n+import com.couchbase.client.java.query.ReactiveQueryResult;\n \n-import java.util.UUID;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import org.reactivestreams.Subscription;\n \n-import static com.couchbase.client.java.query.QueryOptions.queryOptions;\n+import reactor.core.publisher.BaseSubscriber;\n+import reactor.core.publisher.Mono;\n // end::imports[]\n \n-\n-class Queries {\n+public class Queries {\n \n   static Cluster cluster = Cluster.connect(\"localhost\", \"Administrator\", \"password\");\n \n   public static void main(String... args) {\n     {\n+      System.out.println(\"Example: [simple]\");\n       // tag::simple[]\n       try {\n-        final QueryResult result = cluster\n-          .query(\"select * from `travel-sample` limit 10\", queryOptions().metrics(true));\n+        final QueryResult result = cluster.query(\"select * from `travel-sample` limit 10\",\n+            queryOptions().metrics(true));\n \n         for (JsonObject row : result.rowsAsObject()) {\n           System.out.println(\"Found row: \" + row);\n         }\n \n-        System.out.println(\"Reported execution time: \"\n-          + result.metaData().metrics().get().executionTime());\n+        System.out.println(\"Reported execution time: \" + result.metaData().metrics().get().executionTime());\n       } catch (CouchbaseException ex) {\n         ex.printStackTrace();\n       }\n       // end::simple[]\n     }\n \n     {\n+      System.out.println(\"\\nExample: [named]\");\n       // tag::named[]\n       QueryResult result = cluster.query(\n-        \"select count(*) from `travel-sample` where type = \\\"airport\\\" and country = $country\",\n-        queryOptions().parameters(JsonObject.create().put(\"country\", \"France\"))\n-      );\n+          \"select count(*) from `travel-sample` where type = \\\"airport\\\" and country = $country\",\n+          queryOptions().parameters(JsonObject.create().put(\"country\", \"France\")));\n       // end::named[]\n     }\n \n-\n     {\n+      System.out.println(\"\\nExample: [positional]\");\n       // tag::positional[]\n       QueryResult result = cluster.query(\n-        \"select count(*) from `travel-sample` where type = \\\"airport\\\" and country = ?\",\n-        queryOptions().parameters(JsonArray.from(\"France\"))\n-      );\n+          \"select count(*) from `travel-sample` where type = \\\"airport\\\" and country = ?\",\n+          queryOptions().parameters(JsonArray.from(\"France\")));\n       // end::positional[]\n     }\n \n     {\n+      System.out.println(\"\\nExample: [scanconsistency]\");\n       // tag::scanconsistency[]\n       QueryResult result = cluster.query(\n-        \"select ...\",\n-        queryOptions().scanConsistency(QueryScanConsistency.REQUEST_PLUS)\n-      );\n+          \"select count(*) from `travel-sample` where type = \\\"airport\\\" and country = 'France'\",\n+          queryOptions().scanConsistency(QueryScanConsistency.REQUEST_PLUS));\n       // end::scanconsistency[]\n     }\n \n     {\n+      System.out.println(\"\\nExample: [scanconsistency_with]\");\n       // tag::scanconsistency_with[]\n       Bucket bucket = cluster.bucket(\"travel-sample\");\n       Collection collection = bucket.defaultCollection();\n-      MutationResult mr = collection.upsert(\"someDoc\",JsonObject.create().put(\"name\", \"roi\"));\n+      MutationResult mr = collection.upsert(\"someDoc\", JsonObject.create().put(\"name\", \"roi\"));\n       MutationState mutationState = MutationState.from(mr.mutationToken().get());\n \n       QueryOptions qo = QueryOptions.queryOptions().consistentWith(mutationState);\n-      QueryResult result = cluster.query(\n-        \"select raw meta().id from `bucket1` limit 100;\",qo\n-      );\n+      QueryResult result = cluster.query(\"select raw meta().id from `travel-sample` limit 100;\", qo);\n       // end::scanconsistency_with[]\n     }\n \n     {\n+      System.out.println(\"\\nExample: [clientcontextid]\");\n       // tag::clientcontextid[]\n       QueryResult result = cluster.query(\n-        \"select ...\",\n-        queryOptions().clientContextId(\"user-44\" + UUID.randomUUID())\n-      );\n+          \"select count(*) from `travel-sample` where type = \\\"airport\\\" and country = 'France'\",\n+          queryOptions().clientContextId(\"user-44\" + UUID.randomUUID()));\n       // end::clientcontextid[]\n     }\n \n     {\n+      System.out.println(\"\\nExample: [readonly]\");\n       // tag::readonly[]\n       QueryResult result = cluster.query(\n-        \"select ...\",\n-        queryOptions().readonly(true)\n-      );\n+          \"select count(*) from `travel-sample` where type = \\\"airport\\\" and country = 'France'\",\n+          queryOptions().readonly(true));\n       // end::readonly[]\n     }\n \n     {\n+      System.out.println(\"\\nExample: [printmetrics]\");\n       // tag::printmetrics[]\n       QueryResult result = cluster.query(\"select 1=1\", queryOptions().metrics(true));\n-      System.err.println(\n-        \"Execution time: \" + result.metaData().metrics().get().executionTime()\n-      );\n+      System.err.println(\"Execution time: \" + result.metaData().metrics().get().executionTime());\n       // end::printmetrics[]\n     }\n \n     {\n+      System.out.println(\"\\nExample: [rowsasobject]\");\n       // tag::rowsasobject[]\n-      QueryResult result = cluster.query(\n-        \"select * from `travel-sample` limit 10\"\n-      );\n+      QueryResult result = cluster.query(\"select * from `travel-sample` limit 10\");\n       for (JsonObject row : result.rowsAsObject()) {\n         System.out.println(\"Found row: \" + row);\n       }\n       // end::rowsasobject[]\n     }\n \n     {\n+      System.out.println(\"\\nExample: [simplereactive]\");\n       // tag::simplereactive[]\n-      Mono<ReactiveQueryResult> result = cluster\n-        .reactive()\n-        .query(\"select 1=1\");\n+      Mono<ReactiveQueryResult> result = cluster.reactive().query(\"select 1=1\");\n \n-      result\n-        .flatMapMany(ReactiveQueryResult::rowsAsObject)\n-        .subscribe(row -> System.out.println(\"Found row: \" + row));\n+      result.flatMapMany(ReactiveQueryResult::rowsAsObject).subscribe(row -> System.out.println(\"Found row: \" + row));\n       // end::simplereactive[]\n     }\n \n     {\n+      System.out.println(\"\\nExample: [backpressure]\");\n       // tag::backpressure[]\n-      Mono<ReactiveQueryResult> result = cluster\n-        .reactive()\n-        .query(\"select * from hugeBucket\");\n-\n-      result\n-        .flatMapMany(ReactiveQueryResult::rowsAsObject)\n-        .subscribe(new BaseSubscriber<JsonObject>() {\n-          // Number of outstanding requests\n-          final AtomicInteger oustanding = new AtomicInteger(0);\n-\n-          @Override\n-          protected void hookOnSubscribe(Subscription subscription) {\n-            request(10); // initially request to rows\n-            oustanding.set(10);\n-          }\n+      Mono<ReactiveQueryResult> result = cluster.reactive().query(\"select * from `travel-sample`\");\n+\n+      result.flatMapMany(ReactiveQueryResult::rowsAsObject).subscribe(new BaseSubscriber<JsonObject>() {\n+        // Number of outstanding requests\n+        final AtomicInteger oustanding = new AtomicInteger(0);\n+\n+        @Override\n+        protected void hookOnSubscribe(Subscription subscription) {\n+          request(10); // initially request to rows\n+          oustanding.set(10);\n+        }\n \n-          @Override\n-          protected void hookOnNext(JsonObject value) {\n-            process(value);\n-            if (oustanding.decrementAndGet() == 0) {\n-              request(10);\n-            }\n+        @Override\n+        protected void hookOnNext(JsonObject value) {\n+          process(value);\n+          if (oustanding.decrementAndGet() == 0) {\n+            request(10);\n           }\n-        });\n+        }\n+      });\n       // end::backpressure[]\n     }\n \n+    {\n+      System.out.println(\"\\nExample: [scope-level-query]\");\n+      // tag::scope-level-query[]\n+      Bucket bucket = cluster.bucket(\"travel-sample\");\n+      Scope scope = bucket.scope(\"inventory\");\n+\n+      QueryResult result = scope.query(\"select * from `airline` where country = $country LIMIT 10\",\n+          queryOptions().parameters(JsonObject.create().put(\"country\", \"France\")));\n+\n+      for (JsonObject row : result.rowsAsObject()) {\n+        System.out.println(\"Found row: \" + row);\n+      }\n+      // end::scope-level-query[]\n+    }\n+\n   }\n \n   static void process(JsonObject value) {"
  },
  {
    "sha": "d99a2e27efb4a5baefe3858f47402eb4de3ec1fb",
    "filename": "modules/howtos/examples/managing_connections.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/managing_connections.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/examples/managing_connections.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/examples/managing_connections.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -47,7 +47,7 @@ private void init() {\n \t\tcluster = Cluster.connect(connectionString, ClusterOptions.clusterOptions(username, password).environment(environment));\n \t\tbucket = cluster.bucket(\"travel-sample\");\n \t\tscope = bucket.defaultScope();\n-\t\tcollection = bucket.defaultCollection();    // end::connection_1[];\n+\t\tcollection = bucket.defaultCollection();    // end::connection_1[]\n \t}\n \n \tpublic void managing_connections_5() throws Exception { // file: howtos/pages/managing-connections.adoc line: 125\n@@ -62,7 +62,7 @@ public void managing_connections_5() throws Exception { // file: howtos/pages/ma\n \t\tAuthenticator authenticator = PasswordAuthenticator.create(username, password);\n \t\tClusterOptions options = ClusterOptions.clusterOptions(authenticator);\n \t\tCluster cluster = Cluster.connect(seedNodes, options);\n-\t\t// end::managing_connections_5[];\n+\t\t// end::managing_connections_5[]\n \t}\n \n \tpublic void managing_connections_8() throws Exception { // file: howtos/pages/managing-connections.adoc line: 242\n@@ -71,7 +71,7 @@ public void managing_connections_8() throws Exception { // file: howtos/pages/ma\n \t\tcluster.waitUntilReady(Duration.ofSeconds(10));\n \t\tBucket bucket = cluster.bucket(\"travel-sample\");\n \t\tCollection collection = bucket.defaultCollection();\n-\t\t// end::managing_connections_8[];\n+\t\t// end::managing_connections_8[]\n \t}\n \n \tpublic void managing_connections_9() throws Exception { // file: howtos/pages/managing-connections.adoc line: 252\n@@ -80,7 +80,7 @@ public void managing_connections_9() throws Exception { // file: howtos/pages/ma\n \t\tcluster.waitUntilReady(Duration.ofSeconds(10));\n \t\tBucket bucket = cluster.bucket(\"travel-sample\");\n \t\tCollection collection = bucket.defaultCollection();\n-\t\t// end::managing_connections_9[];\n+\t\t// end::managing_connections_9[]\n \t}\n \n \tpublic static void main(String[] args) throws Exception {"
  },
  {
    "sha": "eeb0b19ea57ce2506a8830b557cfa02c93b5d618",
    "filename": "modules/howtos/pages/analytics-using-sdk.adoc",
    "status": "modified",
    "additions": 35,
    "deletions": 5,
    "changes": 40,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/pages/analytics-using-sdk.adoc",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/pages/analytics-using-sdk.adoc",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/pages/analytics-using-sdk.adoc?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -75,7 +75,7 @@ Note that you cannot use parameters in all positions. If you put it in an unsupp\n \n When performing an analytics query, the response you receive is an `AnalyticsResult`. If no exception gets raised the request succeeded and provides access to both the rows returned and also associated `AnalyticsMetaData`.\n \n-Rows can be consumed either through a `JsonObject` directly, turned into a java collection instance (like a `Map`) or into your POJO of choice mapping directly to your domain logic. \n+Rows can be consumed either through a `JsonObject` directly, turned into a java collection instance (like a `Map`) or into your POJO of choice mapping directly to your domain logic.\n \n [source,java]\n ----\n@@ -193,8 +193,38 @@ This query will stream all rows as they become available form the server. If you\n include::example$Analytics.java[tag=backpressure,indent=0]\n ----\n \n-In this example we initially request a batch size of 10 rows (so streaming can begin). \n-Then as each row gets streamed it is written to a `process()` method which does whatever it needs to do to process. \n-Then a counter is decremented, and once all of the 10 outstanding rows are processed another batch is loaded. \n-Please note that with reactive code, if your `process()` method equivalent is blocking, you *must* move it onto another scheduler so that the I/O threads are not stalled. \n+In this example we initially request a batch size of 10 rows (so streaming can begin).\n+Then as each row gets streamed it is written to a `process()` method which does whatever it needs to do to process.\n+Then a counter is decremented, and once all of the 10 outstanding rows are processed another batch is loaded.\n+Please note that with reactive code, if your `process()` method equivalent is blocking, you *must* move it onto another scheduler so that the I/O threads are not stalled.\n We always recommend not blocking in the first place in reactive code.\n+\n+== Scoped Queries on Named Collections\n+\n+In addition to creating a dataset with a WHERE clause to filter the results to documents with certain characteristics, SDK 3.1 now allows you to create a dataset against a named collection, for example:\n+\n+[source,n1ql]\n+----\n+ALTER COLLECTION `travel-sample`.inventory.airport ENABLE ANALYTICS;\n+\n+-- NB: this is more or less equivalent to:\n+CREATE DATAVERSE `travel-sample`.inventory;\n+CREATE DATASET `travel-sample`.inventory.airport ON `travel-sample`.inventory.airport;\n+----\n+\n+We can then query the Dataset as normal, using the fully qualified keyspace:\n+\n+[source,java]\n+----\n+include::../examples/Analytics.java[tag=handle-collection,indent=0]\n+----\n+\n+////\n+Note that using the `CREATE DATASET` syntax we could choose any Dataset name in any Dataverse, including the default.\n+However the SDK supports this standard convention, allowing us to query from the Scope object:\n+\n+[source,java]\n+----\n+include::../examples/Analytics.java[tag=handle-scope,indent=0]\n+----\n+////\n\\ No newline at end of file"
  },
  {
    "sha": "fe6878ab5448b75216c550f2e5cf6de1dbedf295",
    "filename": "modules/howtos/pages/kv-operations.adoc",
    "status": "modified",
    "additions": 18,
    "deletions": 1,
    "changes": 19,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/pages/kv-operations.adoc",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/pages/kv-operations.adoc",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/pages/kv-operations.adoc?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -2,12 +2,14 @@\n :navtitle: KV Operations\n :page-topic-type: howto\n :page-aliases: document-operations.adoc,ROOT:documents-creating,ROOT:documents-updating,ROOT:documents-retrieving,ROOT:documents-deleting\n+:example-source: 3.2@java-sdk:howtos:example$Queries.java\n+include::howtos:partial$attributes.adoc[]\n \n [abstract]\n Key Value (KV) or data service offers the simplest way to retrieve or mutate data where the key is known.\n Here we cover CRUD operations, document expiration, and optimistic locking with CAS.\n \n-The complete code sample used on this page can be downloaded from https://github.com/couchbase/docs-sdk-java/blob/release/3.1/modules/howtos/examples/KvOperations.java[here].\n+The complete code sample used on this page can be downloaded from https://github.com/couchbase/docs-sdk-java/blob/release/3.2/modules/howtos/examples/KvOperations.java[here].\n \n At its heart Couchbase Server is a high-performance key-value store, and the key-value interface outlined below is the fastest and best method to perform operations involving single documents.\n \n@@ -279,6 +281,21 @@ include::example$KvOperations.cs[tag=binarydecrementwithoptions,indent=0]\n ////\n NOTE: Increment & Decrement are considered part of the ‘binary’ API and as such may still be subject to change\n \n+== Scoped KV Operations\n+\n+From version 3.0.0 of the Java SDK, it is possible to perform scoped key-value operations on named xref:7.0@server:learn:data/scopes-and-collections.adoc[`Collections`] _with the beta version of the next Couchbase Server release, 7.0β_.\n+See the https://docs.couchbase.com/sdk-api/couchbase-java-client/com/couchbase/client/java/Collection.html[API docs] for more information.\n+\n+CAUTION: This feature is marked xref:project-docs:compatibility.adoc#interface-stability[_Uncommitted_].\n+Expect a promotion to _Committed_ API in a future minor release.\n+\n+Here is an example showing an upsert in the `users` collection, which lives in the `travel-sample.tenant_agent_00` keyspace:\n+\n+[source,java]\n+----\n+include::example$KvOperations.java[tag=named-collection-upsert]\n+----\n+\n \n == Additional resources\n "
  },
  {
    "sha": "57564778131908e8b118e197644258fffd1c2083",
    "filename": "modules/howtos/pages/n1ql-queries-with-sdk.adoc",
    "status": "modified",
    "additions": 30,
    "deletions": 35,
    "changes": 65,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/pages/n1ql-queries-with-sdk.adoc",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/pages/n1ql-queries-with-sdk.adoc",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/pages/n1ql-queries-with-sdk.adoc?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -2,10 +2,8 @@\n :navtitle: N1QL from the SDK\n :page-topic-type: howto\n :page-aliases: n1ql-query,ROOT:querying-n1ql\n-:lang: Java\n-:version: 3.1.2\n-:example-source: 3.1@java-sdk:howtos:example$Queries.java\n-:example-source-lang: java\n+:example-source: 3.2@java-sdk:howtos:example$Queries.java\n+include::howtos:partial$attributes.adoc[]\n \n [abstract]\n You can query for documents in Couchbase using the N1QL query language, a language based on SQL, but designed for structured and flexible JSON documents.\n@@ -47,7 +45,7 @@ If you are using a cluster older than Couchbase Server 6.5, it is required that\n \n == Parameterized Queries\n \n-Supplying parameters as individual arguments to the query allows the query engine to optimize the parsing and planning of the query. \n+Supplying parameters as individual arguments to the query allows the query engine to optimize the parsing and planning of the query.\n You can either supply these parameters by name or by position.\n \n The first example shows how to provide them by name:\n@@ -70,7 +68,7 @@ Note that you cannot use parameters in all positions. If you put it in an unsupp\n \n == The Query Result\n \n-When performing a query, the response you receive is a `QueryResult`. \n+When performing a query, the response you receive is a `QueryResult`.\n If no exception gets raised the request succeeded and provides access to both the rows returned and also associated `QueryMetaData`.\n \n Rows can be consumed either through a `JsonObject` directly, turned into a java collection instance (like a `Map`) or into your POJO of choice mapping directly to your domain logic.\n@@ -130,34 +128,34 @@ The query service provides an array of options to customize your query. The foll\n \n == Scan Consistency\n \n-By default, the query engine will return whatever is currently in the index at the time of query (this mode is also called `QueryScanConsistency.NOT_BOUNDED`). \n-If you need to include everything that has just been written, a different scan consistency must be chosen. \n+By default, the query engine will return whatever is currently in the index at the time of query (this mode is also called `QueryScanConsistency.NOT_BOUNDED`).\n+If you need to include everything that has just been written, a different scan consistency must be chosen.\n If `QueryScanConsistency.REQUEST_PLUS` is chosen, it will likely take a bit longer to return the results but the query engine will make sure that it is as up-to-date as possible.\n \n [source,java]\n ----\n include::example$Queries.java[tag=scanconsistency,indent=0]\n ----\n \n-You can also use `consistentWith(MutationState)` for a more narrowed-down scan consistency. \n-Construct the `MutationState` from individual `MutationToken`s that are returned from KV `MutationResult`s to make sure at least those mutations are visible. \n+You can also use `consistentWith(MutationState)` for a more narrowed-down scan consistency.\n+Construct the `MutationState` from individual `MutationToken`s that are returned from KV `MutationResult`s to make sure at least those mutations are visible.\n Depending on the index update rate this might provide a speedier response.\n \n [source,java]\n ----\n include::example$Queries.java[tag=scanconsistency_with,indent=0]\n ----\n \n-Note that you cannot use this method and `scanConsistency(QueryScanConsistency)` at the same time, since they are mutually exclusive. \n-As a rule of thumb, if you only care about being consistent with the mutation you just wrote on the same thread or app, use this method. \n+Note that you cannot use this method and `scanConsistency(QueryScanConsistency)` at the same time, since they are mutually exclusive.\n+As a rule of thumb, if you only care about being consistent with the mutation you just wrote on the same thread or app, use this method.\n If you need \"global\" scan consistency, use `QueryScanConsistency.REQUEST_PLUS` on `scanConsistency(QueryScanConsistency)`.\n \n \n === Client Context Id\n \n-The SDK will always send a client context ID with each query, even if none is provided by the user. \n-By default a UUID will be generated that is mirrored back from the query engine and can be used for debugging purposes. \n-A custom string can always be provided if you want to introduce application-specific semantics into it (so that for example in a network dump it shows up with a certain identifier). \n+The SDK will always send a client context ID with each query, even if none is provided by the user.\n+By default a UUID will be generated that is mirrored back from the query engine and can be used for debugging purposes.\n+A custom string can always be provided if you want to introduce application-specific semantics into it (so that for example in a network dump it shows up with a certain identifier).\n Whatever is chosen, we recommend making sure it is unique so different queries can be distinguished during debugging or monitoring.\n \n [source,java]\n@@ -167,8 +165,8 @@ include::example$Queries.java[tag=clientcontextid,indent=0]\n \n === Readonly\n \n-If the query is marked as readonly, both the server and the SDK can improve processing of the operation. \n-On the client side, the SDK can be more liberal with retries because it can be sure that there are no state-mutating side-effects happening. \n+If the query is marked as readonly, both the server and the SDK can improve processing of the operation.\n+On the client side, the SDK can be more liberal with retries because it can be sure that there are no state-mutating side-effects happening.\n The query engine will ensure that actually no data is mutated when parsing and planning the query.\n \n [source,java]\n@@ -178,21 +176,21 @@ include::example$Queries.java[tag=readonly,indent=0]\n \n === Custom JSON Serializer\n \n-Like with all JSON apis, it is possible to customize the JSON serializer. \n-It allows to plug in your own library (like GSON) or custom configured mappings on your own Jackson serializer. \n+Like with all JSON apis, it is possible to customize the JSON serializer.\n+It allows to plug in your own library (like GSON) or custom configured mappings on your own Jackson serializer.\n This in turn makes it possible to serialize rows into POJOs or other structures that your application defines and the SDK has no idea about.\n \n Please see the xref:transcoders-nonjson.adoc[documentation on transcoding and serialization] for more information.\n \n \n == Reactive And Async APIs\n \n-In addition to the blocking API on `Cluster`, the SDK provides reactive and async APIs on `ReactiveCluster` or `AsyncCluster` respectively. \n-If you are in doubt of which API to use, we recommend looking at the reactive first. \n-It builds on top of reactor, a powerful library that allows you to compose reactive computations and deal with error handling and other related concerns (like retry) in an elegant manner. \n+In addition to the blocking API on `Cluster`, the SDK provides reactive and async APIs on `ReactiveCluster` or `AsyncCluster` respectively.\n+If you are in doubt of which API to use, we recommend looking at the reactive first.\n+It builds on top of reactor, a powerful library that allows you to compose reactive computations and deal with error handling and other related concerns (like retry) in an elegant manner.\n The async API on the other hand exposes a `CompletableFuture` and is more meant for lower level integration into other libraries or if you need the last drop of performance.\n \n-Also, there is another reason you want to use the reactive API: streaming large results with backpressure from the application side. \n+Also, there is another reason you want to use the reactive API: streaming large results with backpressure from the application side.\n Both the blocking and async APIs have no means of signalling backpressure in a good way, so if you need it the reactive API is your best option.\n \n [TIP]\n@@ -209,24 +207,26 @@ A simple reactive query is similar to the blocking one:\n include::example$Queries.java[tag=simplereactive,indent=0]\n ----\n \n-This query will stream all rows as they become available form the server. \n+This query will stream all rows as they become available form the server.\n If you want to manually control the data flow (which is important if you are streaming a lot of rows which could cause a potential out of memory situation) you can do this by using explicit `request()` calls.\n \n [source,java]\n ----\n include::example$Queries.java[tag=backpressure,indent=0]\n ----\n \n-In this example we initially request a batch size of 10 rows (so streaming can begin). \n-Then as each row gets streamed it is written to a `process()` method which does whatever it needs to do to process. \n-Then a counter is decremented and once all of the 10 outstanding rows are processed another batch is loaded. \n-Please note that if your `process()` method equivalent is blocking, like always with reactive code, you *must* move it onto another scheduler so that the I/O threads are not stalled. \n+In this example we initially request a batch size of 10 rows (so streaming can begin).\n+Then as each row gets streamed it is written to a `process()` method which does whatever it needs to do to process.\n+Then a counter is decremented and once all of the 10 outstanding rows are processed another batch is loaded.\n+Please note that if your `process()` method equivalent is blocking, like always with reactive code, you *must* move it onto another scheduler so that the I/O threads are not stalled.\n As always we recommend not blocking in the first place in reactive code.\n \n \n == Querying at Scope Level\n \n-From version 3.0.8 of the Java SDK, it is possible to query off the xref:7.0@server:learn:data/scopes-and-collections.adoc[`Scope` level] _with the beta version of the next Couchbase Server release, 7.0β_,\n+From version 3.0.8 of the Java SDK, it is possible to query off the\n+xref:concept-docs:n1ql-query.adoc#collections-and-scopes-and-the-query-context[`Scope` level]\n+_with the beta version of the next Couchbase Server release, 7.0β_,\n using the `scope.query()` method.\n It takes the statement as a required argument, and then allows additional options if needed.\n \n@@ -237,12 +237,7 @@ A complete list of `QueryOptions` can be found in the https://docs.couchbase.com\n \n [source,java]\n ----\n-QueryResult result = scope.query(\n-  \"select * from `airline` limit 10\"\n-);\n-for (JsonObject row : result.rowsAsObject()) {\n-  System.out.println(\"Found row: \" + row);\n-}\n+include::example$Queries.java[tag=scope-level-query]\n ----\n \n == Additional Resources"
  },
  {
    "sha": "064c28b9b738e75a0498d510645055e54efc2b43",
    "filename": "modules/howtos/partials/attributes.adoc",
    "status": "added",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/partials/attributes.adoc",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/howtos/partials/attributes.adoc",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/howtos/partials/attributes.adoc?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -0,0 +1,3 @@\n+:lang: Java\n+:version: 3.1.2\n+:example-source-lang: java"
  },
  {
    "sha": "cdcc830420e04ed99a6b14ad9f336d890bac7db4",
    "filename": "modules/ref/examples/DataStructuresExample.java",
    "status": "modified",
    "additions": 20,
    "deletions": 20,
    "changes": 40,
    "blob_url": "https://github.com/couchbase/docs-sdk-java/blob/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/ref/examples/DataStructuresExample.java",
    "raw_url": "https://github.com/couchbase/docs-sdk-java/raw/13135cb7a90b5a2d06c4f4433c8e18391d23937f/modules/ref/examples/DataStructuresExample.java",
    "contents_url": "https://api.github.com/repos/couchbase/docs-sdk-java/contents/modules/ref/examples/DataStructuresExample.java?ref=13135cb7a90b5a2d06c4f4433c8e18391d23937f",
    "patch": "@@ -63,97 +63,97 @@ private void init() {\n     arrayList = new CouchbaseArrayList(\"arrayListId\", collection, String.class, ArrayListOptions.arrayListOptions());\n     arraySet = new CouchbaseArraySet(\"arraySetId\", collection, String.class, ArraySetOptions.arraySetOptions());\n     queue = new CouchbaseQueue(\"queueId\", collection, String.class, QueueOptions.queueOptions());\n-    // end::data_structures_0[];\n+    // end::data_structures_0[]\n   }\n \n   public void data_structures_1() throws Exception {\n     // tag::data_structures_1[]\n     map.put(\"some_key\", \"value\");\n-    // end::data_structures_1[];\n+    // end::data_structures_1[]\n   }\n \n   public void data_structures_2() throws Exception {\n     // tag::data_structures_2[]\n     map.remove(\"some_key\");\n-    // end::data_structures_2[];\n+    // end::data_structures_2[]\n   }\n \n   public void data_structures_3() throws Exception {\n     // tag::data_structures_3[]\n     map.get(\"some_key\"); //=> value\n-    // end::data_structures_3[];\n+    // end::data_structures_3[]\n   }\n \n   public void data_structures_4() throws Exception {\n     // tag::data_structures_4[]\n     arrayList.add(1234);\n-    // end::data_structures_4[];\n+    // end::data_structures_4[]\n   }\n \n   public void data_structures_5() throws Exception {\n     // tag::data_structures_5[]\n     arrayList.add(0, \"hello world\");\n-    // end::data_structures_5[];\n+    // end::data_structures_5[]\n   }\n \n   public void data_structures_6() throws Exception {\n     // tag::data_structures_6[]\n     arrayList.remove(1);\n-    // end::data_structures_6[];\n+    // end::data_structures_6[]\n   }\n \n   public void data_structures_7() throws Exception {\n     // tag::data_structures_7[]\n     arrayList.set(0, \"first value\");\n-    // end::data_structures_7[];\n+    // end::data_structures_7[]\n   }\n \n   public void data_structures_8() throws Exception {\n     // tag::data_structures_8[]\n     arrayList.get(0);\n-    // end::data_structures_8[];\n+    // end::data_structures_8[]\n   }\n \n   public void data_structures_9() throws Exception {\n     // tag::data_structures_9[]\n     arraySet.add(\"some_value\");\n-    // end::data_structures_9[];\n+    // end::data_structures_9[]\n   }\n \n   public void data_structures_10() throws Exception {\n     // tag::data_structures_10[]\n     Set set = arraySet;\n-    // end::data_structures_10[];\n+    // end::data_structures_10[]\n   }\n \n   public void data_structures_11() throws Exception {\n     // tag::data_structures_11[]\n     arraySet.contains(\"value\");\n-    // end::data_structures_11[];\n+    // end::data_structures_11[]\n   }\n \n   public void data_structures_12() throws Exception {\n     // tag::data_structures_12[]\n     arraySet.remove(\"some_value\");\n-    // end::data_structures_12[];\n+    // end::data_structures_12[]\n   }\n \n   public void data_structures_13() throws Exception {\n     // tag::data_structures_13[]\n     queue.add(\"job123\");\n-    // end::data_structures_13[];\n+    // end::data_structures_13[]\n   }\n \n   public void data_structures_14() throws Exception {\n     // tag::data_structures_14[]\n     Object item = queue.poll(); //=> \"job123\"\n-    // end::data_structures_14[];\n+    // end::data_structures_14[]\n   }\n \n   public void data_structures_15() throws Exception {\n     // tag::data_structures_15[]\n     int len = arrayList.size(); //=> 42\n-    // end::data_structures_15[];\n+    // end::data_structures_15[]\n   }\n \n   public void data_structures_16() throws Exception {\n@@ -167,7 +167,7 @@ public void data_structures_16() throws Exception {\n     // What does the JSON document look like?\n     System.out.println(collection.get(\"mapDocId\").contentAsObject());\n     //=> {\"flavor\":\"Chocolate\",\"color\":\"Blue\"}\n-    // end::data_structures_16[];\n+    // end::data_structures_16[]\n   }\n \n   public void data_structures_17() throws Exception {\n@@ -182,7 +182,7 @@ public void data_structures_17() throws Exception {\n     // What does the JSON document look like?\n     System.out.println(collection.get(\"listDocId\").contentAsArray());\n     //=> [\"Alice\",\"Bob\",\"Alice\"]\n-    // end::data_structures_17[];\n+    // end::data_structures_17[]\n   }\n \n   public void data_structures_18() throws Exception {\n@@ -197,7 +197,7 @@ public void data_structures_18() throws Exception {\n     // What does the JSON document look like?\n     System.out.println(collection.get(\"setDocId\").contentAsArray());\n     //=> [\"Alice\",\"Bob\"]\n-    // end::data_structures_18[];\n+    // end::data_structures_18[]\n   }\n \n   public void data_structures_19() throws Exception {\n@@ -222,7 +222,7 @@ public void data_structures_19() throws Exception {\n     // What does the JSON document look like after draining the queue?\n     System.out.println(collection.get(\"queueDocId\").contentAsArray());\n     //=> []\n-    // end::data_structures_19[];\n+    // end::data_structures_19[]\n   }\n \n   public static void main(String[] args) throws Exception {"
  }
]
