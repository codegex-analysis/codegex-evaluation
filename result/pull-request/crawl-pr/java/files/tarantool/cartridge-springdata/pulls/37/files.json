[
  {
    "sha": "8334499bd5f24fe380aafc45fb371008f659ce68",
    "filename": "README.md",
    "status": "modified",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/README.md",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/README.md",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/README.md?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -217,6 +217,44 @@ The corresponding function in on Tarantool Cartridge router may look like (uses\n \n See more examples in the module tests.\n \n+### Composite primary key\n+\n+You can create an entity representing a Tarantool tuple with composite \n+primary index. For this you need to use @TarantoolIdClass annotation on entity\n+to specify the type of id. Also you need to mark all 'id' fields in the entity \n+with standard @Id annotation.\n+\n+See the example:\n+\n+```java\n+\n+public class BookTranslationId {\n+    private Integer bookId;\n+    private String language;\n+    private Integer edition;\n+}\n+\n+@Tuple(\"book_translation\")\n+@TarantoolIdClass(BookTranslationId.class)\n+public class BookTranslation {\n+    @Id\n+    @Field(value = \"id\")\n+    private Integer bookId;\n+    @Id\n+    private String language;\n+    @Id\n+    private Integer edition;\n+    \n+    private String translator;\n+    private String comments;\n+}\n+\n+public interface BookTranslationRepository \n+        extends TarantoolRepository<BookTranslation, BookTranslationId> {\n+}\n+\n+```\n+\n ## Contributing to Spring Data Tarantool\n \n Contributions and issues are welcome, feel free to add them to this"
  },
  {
    "sha": "507d1139d0785c93d5c24b0b19aa14bfee1122e9",
    "filename": "src/main/java/org/springframework/data/tarantool/core/TarantoolOperations.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/TarantoolOperations.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/TarantoolOperations.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/main/java/org/springframework/data/tarantool/core/TarantoolOperations.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -299,4 +299,10 @@\n      * @return entity converter\n      */\n     TarantoolConverter getConverter();\n+\n+    /**\n+     *  Truncate space (remove all data records in the space on each node).\n+     * @param spaceName\n+     */\n+    void truncate(String spaceName);\n }"
  },
  {
    "sha": "da5b110fb0241ac8a26533568ace646b7694d3f7",
    "filename": "src/main/java/org/springframework/data/tarantool/core/TarantoolTemplate.java",
    "status": "modified",
    "additions": 100,
    "deletions": 17,
    "changes": 117,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/TarantoolTemplate.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/TarantoolTemplate.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/main/java/org/springframework/data/tarantool/core/TarantoolTemplate.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -1,11 +1,14 @@\n package org.springframework.data.tarantool.core;\n \n+import io.tarantool.driver.ProxyTarantoolClient;\n import io.tarantool.driver.api.SingleValueCallResult;\n import io.tarantool.driver.api.TarantoolClient;\n import io.tarantool.driver.api.TarantoolResult;\n import io.tarantool.driver.api.conditions.Conditions;\n import io.tarantool.driver.api.tuple.TarantoolTuple;\n import io.tarantool.driver.api.tuple.TarantoolTupleImpl;\n+import io.tarantool.driver.exceptions.TarantoolClientException;\n+import io.tarantool.driver.exceptions.TarantoolSpaceOperationException;\n import io.tarantool.driver.mappers.CallResultMapper;\n import io.tarantool.driver.mappers.MessagePackMapper;\n import io.tarantool.driver.mappers.MessagePackObjectMapper;\n@@ -16,15 +19,20 @@\n import org.springframework.dao.DataAccessException;\n import org.springframework.dao.DataRetrievalFailureException;\n import org.springframework.data.mapping.MappingException;\n-import org.springframework.data.mapping.PersistentPropertyAccessor;\n import org.springframework.data.tarantool.core.convert.TarantoolConverter;\n import org.springframework.data.tarantool.core.mapping.TarantoolMappingContext;\n import org.springframework.data.tarantool.core.mapping.TarantoolPersistentEntity;\n import org.springframework.data.tarantool.core.mapping.TarantoolPersistentProperty;\n+import org.springframework.data.tarantool.exceptions.TarantoolEntityMappingException;\n+import org.springframework.data.tarantool.exceptions.TarantoolTypeConversionException;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.ReflectionUtils;\n import sun.reflect.generics.reflectiveObjects.NotImplementedException;\n \n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n@@ -98,7 +106,7 @@ public TarantoolTemplate(\n \n         TarantoolPersistentEntity<?> entity = mappingContext.getRequiredPersistentEntity(entityClass);\n         TarantoolResult<TarantoolTuple> result = executeSync(() -> {\n-            Conditions query = idQueryFromEntity(id).withLimit(1);\n+            Conditions query = idQueryFromObject(id, entityClass).withLimit(1);\n             return tarantoolClient.space(entity.getSpaceName()).select(query);\n         });\n         return mapFirstToEntity(result, entityClass);\n@@ -207,7 +215,7 @@ private TupleOperations setNonNullFieldsFromTuple(TarantoolTuple tuple) {\n         Assert.notNull(id, \"ID must not be null!\");\n         Assert.notNull(entityClass, \"Entity class must not be null!\");\n \n-        Conditions query = idQueryFromEntity(id);\n+        Conditions query = idQueryFromObject(id, entityClass);\n         return removeInternal(query, entityClass);\n     }\n \n@@ -380,29 +388,89 @@ private Conditions idQueryFromTuple(TarantoolTuple tuple, TarantoolPersistentEnt\n         return Conditions.indexEquals(0, idValue);\n     }\n \n+    /**\n+     * Build conditions query from entity object that contains id.\n+     * This object can be:\n+     *  - the entity object (Book, Employee etc)\n+     *\n+     * @param source the entity object\n+     * @return condition for this id object\n+     */\n     private <T> Conditions idQueryFromEntity(T source) {\n         TarantoolPersistentEntity<?> entity = mappingContext.getPersistentEntity(source.getClass());\n-        Object idValue = source;\n-        if (entity != null) {\n-            TarantoolPersistentProperty idProperty = entity.getIdProperty();\n-            if (idProperty == null) {\n-                throw new MappingException(\"No ID property specified on entity \" + source.getClass());\n+        Assert.notNull(entity, \"Failed to get entity class for \" + source.getClass());\n+\n+        Object idValue = entity.getIdentifierAccessor(source).getRequiredIdentifier();\n+\n+        List<Object> indexPartValues = getIndexPartValues(idValue, entity);\n+        return createIndexEqualsConditionFromParts(indexPartValues);\n+    }\n+\n+    /**\n+     * Build conditions query from object that contains id.\n+     * This object can be:\n+     *  - the basic type representing id of an entity (Integer, String,  etc)\n+     *  - the 'TarantoolIdClass' object if entity has composite ID\n+     *\n+     * @param source the id object\n+     * @param entityClass class of entity\n+     * @return condition for this id object\n+     */\n+    private <T> Conditions idQueryFromObject(T source, Class<?> entityClass) {\n+        TarantoolPersistentEntity<?> entity = mappingContext.getPersistentEntity(entityClass);\n+        Assert.notNull(entity, \"Failed to get entity class for \" + entityClass);\n+\n+        List<Object> indexPartValues = getIndexPartValues(source, entity);\n+        return createIndexEqualsConditionFromParts(indexPartValues);\n+    }\n+\n+    private <T> List<Object> getIndexPartValues(T source, TarantoolPersistentEntity<?> entity) {\n+        return entity.hasTarantoolIdClassAnnotation() ?\n+                getIndexPartsFromCompositeIdValue(source, entity)\n+                : Collections.singletonList((Object) source);\n+    }\n+\n+    private List<Object> getIndexPartsFromCompositeIdValue(Object idValue, TarantoolPersistentEntity<?> entity) {\n+        //for each property get field name and map to idValue bean property value\n+        List<Object> list = new ArrayList<>();\n+        Class<?> idClass = entity.getTarantoolIdClass();\n+        Assert.notNull(idClass, \"TarantoolIdClass is null for entity \" + entity);\n+\n+        for (Field f : idValue.getClass().getDeclaredFields()) {\n+            TarantoolPersistentProperty property = entity.getPersistentProperty(f.getName());\n+            Assert.notNull(property, \"Property \" + f.getName() + \"does not exist in entity \" + entity);\n+            if(!property.isIdProperty()) {\n+                throw new TarantoolTypeConversionException(idValue.getClass(), idClass);\n             }\n \n-            PersistentPropertyAccessor<?> propertyAccessor = entity.getPropertyAccessor(source);\n-            idValue = propertyAccessor.getProperty(idProperty);\n-            if (idValue == null) {\n-                throw new MappingException(\"ID property value is null\");\n+            ReflectionUtils.makeAccessible(f);\n+            try {\n+                list.add(f.get(idValue));\n+            } catch (IllegalAccessException e) {\n+                throw new TarantoolEntityMappingException(entity.getClass(), e);\n             }\n         }\n-        Optional<Class<?>> basicTargetType = converter.getCustomConversions().getCustomWriteTarget(idValue.getClass());\n-        if (basicTargetType.isPresent()) {\n-            idValue = converter.getConversionService().convert(idValue, basicTargetType.get());\n-        }\n+        return list;\n+    }\n+\n+    private Conditions createIndexEqualsConditionFromParts(List<Object> indexPartValues) {\n+        List<Object> indexPartValuesConverted = indexPartValues.stream()\n+                .map( obj -> {\n+                    Optional<Class<?>> basicTargetType = converter\n+                            .getCustomConversions()\n+                            .getCustomWriteTarget(obj.getClass());\n+\n+                    return basicTargetType.isPresent() ?\n+                            converter.getConversionService().convert(obj, basicTargetType.get())\n+                            : obj;\n+                })\n+                .collect(Collectors.toList());\n \n-        return Conditions.indexEquals(0, Collections.singletonList(idValue));\n+        final int PK_INDEX_ID = 0;\n+        return Conditions.indexEquals(PK_INDEX_ID, indexPartValuesConverted);\n     }\n \n+\n     private <T> T mapFirstToEntity(TarantoolResult<TarantoolTuple> tuples, Class<T> entityClass) {\n         return mapToEntity(tuples.stream()\n                         .findFirst()\n@@ -429,6 +497,21 @@ public TarantoolConverter getConverter() {\n         return converter;\n     }\n \n+    @Override\n+    public void truncate(String spaceName) {\n+        //FIXME implement truncate in cartridge-driver and remove this temporary hack\n+        if(tarantoolClient instanceof ProxyTarantoolClient) {\n+            boolean result = executeSync(() -> tarantoolClient.callForSingleResult(\n+                    \"crud.truncate\",\n+                    Collections.singletonList(spaceName), Boolean.class));\n+            if(!result) {\n+                throw new TarantoolSpaceOperationException(\"CRUD failed to truncate space \" + spaceName);\n+            }\n+        } else  {\n+            throw new UnsupportedOperationException(\"Truncate operation is not supported in the driver yet\");\n+        }\n+    }\n+\n     private <R> R executeSync(Supplier<CompletableFuture<R>> func) {\n         return getFutureValue(func.get());\n     }"
  },
  {
    "sha": "9ce91b8098e30416484ca2f6524f886e57927302",
    "filename": "src/main/java/org/springframework/data/tarantool/core/mapping/BasicTarantoolPersistentEntity.java",
    "status": "modified",
    "additions": 90,
    "deletions": 0,
    "changes": 90,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/mapping/BasicTarantoolPersistentEntity.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/mapping/BasicTarantoolPersistentEntity.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/main/java/org/springframework/data/tarantool/core/mapping/BasicTarantoolPersistentEntity.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -1,13 +1,24 @@\n package org.springframework.data.tarantool.core.mapping;\n \n+import lombok.SneakyThrows;\n+import org.springframework.data.mapping.IdentifierAccessor;\n+import org.springframework.data.mapping.TargetAwareIdentifierAccessor;\n import org.springframework.data.mapping.model.BasicPersistentEntity;\n import org.springframework.data.util.TypeInformation;\n+import org.springframework.util.Assert;\n+import org.springframework.util.ReflectionUtils;\n import org.springframework.util.StringUtils;\n \n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Objects;\n+\n /**\n  * Basic representation of a persistent entity\n  *\n  * @author Alexey Kuzin\n+ * @author Vladimir Rogach\n  */\n public class BasicTarantoolPersistentEntity<T>\n         extends BasicPersistentEntity<T, TarantoolPersistentProperty>\n@@ -17,6 +28,7 @@ public BasicTarantoolPersistentEntity(TypeInformation<T> information) {\n         super(information);\n     }\n \n+\n     @Override\n     public String getSpaceName() {\n         Tuple annotationField = getType().getAnnotation(Tuple.class);\n@@ -32,4 +44,82 @@ public String getSpaceName() {\n     public boolean hasTupleAnnotation() {\n         return getType().getAnnotation(Tuple.class) != null;\n     }\n+\n+    @Override\n+    public boolean hasTarantoolIdClassAnnotation() {\n+        return getType().getAnnotation(TarantoolIdClass.class) != null;\n+    }\n+\n+    @Override\n+    public Class<?> getTarantoolIdClass() {\n+        if (!hasTarantoolIdClassAnnotation()) {\n+            return null;\n+        }\n+        return getType().getAnnotation(TarantoolIdClass.class).value();\n+    }\n+\n+\n+    @Override\n+    protected TarantoolPersistentProperty returnPropertyIfBetterIdPropertyCandidateOrNull(TarantoolPersistentProperty property) {\n+        if (hasTarantoolIdClassAnnotation()) {\n+            // id accessor will be used to access multiple id's\n+//            return null;\n+            return property.isIdProperty() ? property : null;\n+        }\n+        return super.returnPropertyIfBetterIdPropertyCandidateOrNull(property);\n+    }\n+\n+    @Override\n+    public IdentifierAccessor getIdentifierAccessor(Object bean) {\n+        if (hasTarantoolIdClassAnnotation()) {\n+            return new TarantoolCompositeIdentifierAccessor(this, bean);\n+        }\n+        return super.getIdentifierAccessor(bean);\n+    }\n+\n+    private static class TarantoolCompositeIdentifierAccessor extends TargetAwareIdentifierAccessor {\n+\n+        private final BasicTarantoolPersistentEntity<?> entity;\n+        private final Object bean;\n+\n+        TarantoolCompositeIdentifierAccessor(BasicTarantoolPersistentEntity<?> entity, Object bean) {\n+            super(bean);\n+            this.entity = entity;\n+            this.bean = bean;\n+        }\n+\n+        //FIXME\n+        @SneakyThrows\n+        @Override\n+        public Object getIdentifier() {\n+            Class<?> idClass = entity.getTarantoolIdClass();\n+            Assert.notNull(idClass, \"ID class is null for entity \" + entity);\n+\n+            if (idClass.isInstance(bean)) {\n+                return bean;\n+            }\n+            Object id = Objects.requireNonNull(idClass).newInstance();\n+\n+\n+            for (Field field : idClass.getDeclaredFields()) {\n+                if (!Modifier.isStatic(field.getModifiers())) {\n+                    TarantoolPersistentProperty property = entity.getPersistentProperty(field.getName());\n+\n+                    Assert.notNull(property, \"Property '\"+ field.getName() + \"' is null for \" + entity);\n+                    Assert.isTrue(property.isIdProperty(),\n+                            \"Property '\"+ field.getName() + \"' is not an ID property for \" + entity +\n+                                    \".Please check @Id annotation.\");\n+\n+                    Method getter = property.getGetter();\n+                    Assert.notNull(getter, \"Getter of '\"+ field.getName() + \"'is null for \" + entity);\n+\n+                    ReflectionUtils.makeAccessible(field);\n+                    field.set(id, getter.invoke(bean));\n+                }\n+            }\n+            return id;\n+        }\n+    }\n+\n+\n }"
  },
  {
    "sha": "d529b042d2a97f24676a40ae62b8a2c8f309e302",
    "filename": "src/main/java/org/springframework/data/tarantool/core/mapping/TarantoolIdClass.java",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/mapping/TarantoolIdClass.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/mapping/TarantoolIdClass.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/main/java/org/springframework/data/tarantool/core/mapping/TarantoolIdClass.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -0,0 +1,45 @@\n+package org.springframework.data.tarantool.core.mapping;\n+\n+import org.springframework.core.annotation.AliasFor;\n+import org.springframework.data.annotation.Persistent;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Specifies a composite primary key for this entity (marked as {@link Tuple}.\n+ *\n+ * The specified class must contain all properties\n+ * that are parts of primary index of the tuple.\n+ * These properties must be present in the entity\n+ * and marked with {@link org.springframework.data.annotation.Id}.\n+ * Types of properties in primary key class and the entity must correspond.\n+ *\n+ *      Example:\n+ *\n+ *      public class BookId {\n+ *         String name;\n+ *         String author;\n+ *      }\n+ *\n+ *      @TarantoolIdClass(io.tarantool.example.BookId)\n+ *      @Tuple(table='book')\n+ *      public class Book {\n+ *         @Id String name;\n+ *         @Id String author;\n+ *         ...\n+ *      }\n+ *\n+ * @author Vladimir Rogach\n+ */\n+@Persistent\n+@Inherited\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.TYPE })\n+public @interface TarantoolIdClass {\n+\n+    Class value();\n+}"
  },
  {
    "sha": "5d3c69f495db0398a0c466280b4f5dfe075d8120",
    "filename": "src/main/java/org/springframework/data/tarantool/core/mapping/TarantoolPersistentEntity.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/mapping/TarantoolPersistentEntity.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/core/mapping/TarantoolPersistentEntity.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/main/java/org/springframework/data/tarantool/core/mapping/TarantoolPersistentEntity.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -1,6 +1,7 @@\n package org.springframework.data.tarantool.core.mapping;\n \n import org.springframework.data.mapping.PersistentEntity;\n+import org.springframework.lang.Nullable;\n \n /**\n  * Represents an entity to be persisted\n@@ -19,4 +20,17 @@\n      * Returns true, if the {@link Tuple} annotation is set on the class\n      */\n     boolean hasTupleAnnotation();\n+\n+\n+    /**\n+     * @return true if the {@link TarantoolIdClass} annotation is set on the class\n+     */\n+    boolean hasTarantoolIdClassAnnotation();\n+\n+    /**\n+     * @return type specified in {@link TarantoolIdClass} or null if annotation was not specified\n+     */\n+    @Nullable\n+    Class<?> getTarantoolIdClass();\n+\n }"
  },
  {
    "sha": "55ce22afdcab04394be825f44cc7ef5b15fbee03",
    "filename": "src/main/java/org/springframework/data/tarantool/exceptions/TarantoolEntityMappingException.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/exceptions/TarantoolEntityMappingException.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/exceptions/TarantoolEntityMappingException.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/main/java/org/springframework/data/tarantool/exceptions/TarantoolEntityMappingException.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -0,0 +1,19 @@\n+package org.springframework.data.tarantool.exceptions;\n+\n+import io.tarantool.driver.exceptions.TarantoolException;\n+\n+/**\n+ * Types mapping exception class.\n+ *\n+ * @author Vladimir Rogach\n+ */\n+public class TarantoolEntityMappingException extends TarantoolException {\n+    public TarantoolEntityMappingException(Class<?> entityCls, String details) {\n+        super(\"Error on operations with entity \" + entityCls.getTypeName() + \": \" + details);\n+    }\n+\n+    public TarantoolEntityMappingException(Class<?> entityCls, Throwable cause) {\n+        super(\"Error on operations with entity \" + entityCls.getTypeName(), cause);\n+    }\n+\n+}"
  },
  {
    "sha": "19b3f5849e7cf412e05aacf67235ad81ac27a553",
    "filename": "src/main/java/org/springframework/data/tarantool/exceptions/TarantoolTypeConversionException.java",
    "status": "added",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/exceptions/TarantoolTypeConversionException.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/exceptions/TarantoolTypeConversionException.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/main/java/org/springframework/data/tarantool/exceptions/TarantoolTypeConversionException.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -0,0 +1,18 @@\n+package org.springframework.data.tarantool.exceptions;\n+\n+import io.tarantool.driver.exceptions.TarantoolException;\n+\n+/**\n+ * Types mapping exception class.\n+ *\n+ * @author Vladimir Rogach\n+ */\n+public class TarantoolTypeConversionException extends TarantoolException {\n+    public TarantoolTypeConversionException(String fromType, String toType) {\n+        super(\"Failed to perform conversion from \" + fromType + \" to \" + toType);\n+    }\n+\n+    public TarantoolTypeConversionException(Class<?> fromCls, Class<?> toCls) {\n+        this(fromCls.getTypeName(), toCls.getTypeName());\n+    }\n+}"
  },
  {
    "sha": "916661245163deee26d33e22e6c9489fe9649cbc",
    "filename": "src/main/java/org/springframework/data/tarantool/repository/support/SimpleTarantoolRepository.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/repository/support/SimpleTarantoolRepository.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/main/java/org/springframework/data/tarantool/repository/support/SimpleTarantoolRepository.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/main/java/org/springframework/data/tarantool/repository/support/SimpleTarantoolRepository.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -22,9 +22,9 @@\n public class SimpleTarantoolRepository<T, ID> implements TarantoolRepository<T, ID> {\n \n     private final TarantoolOperations tarantoolOperations;\n-    private final EntityInformation<T, ID> entityInformation;\n+    private final TarantoolEntityInformation<T, ID> entityInformation;\n \n-    public SimpleTarantoolRepository(EntityInformation<T, ID> entityInformation,\n+    public SimpleTarantoolRepository(TarantoolEntityInformation<T, ID> entityInformation,\n                                      TarantoolOperations tarantoolOperations) {\n         this.entityInformation = entityInformation;\n         this.tarantoolOperations = tarantoolOperations;\n@@ -107,6 +107,6 @@ public void deleteAll(Iterable<? extends T> iterable) {\n \n     @Override\n     public void deleteAll() {\n-        throw new UnsupportedOperationException(\"Truncate operation is not supported in the driver yet\");\n+        tarantoolOperations.truncate(entityInformation.getSpaceName());\n     }\n }"
  },
  {
    "sha": "77d0bd07882c6bae8672c8ba9babc35ad23f2b3d",
    "filename": "src/test/java/org/springframework/data/tarantool/BaseIntegrationTest.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/BaseIntegrationTest.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/BaseIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/java/org/springframework/data/tarantool/BaseIntegrationTest.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -1,10 +1,17 @@\n package org.springframework.data.tarantool;\n \n+import io.tarantool.driver.api.TarantoolClient;\n+import io.tarantool.driver.api.TarantoolResult;\n+import io.tarantool.driver.api.tuple.TarantoolTuple;\n+import lombok.SneakyThrows;\n import org.junit.ClassRule;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.data.tarantool.repository.TarantoolRepository;\n import org.springframework.test.context.DynamicPropertyRegistry;\n import org.springframework.test.context.DynamicPropertySource;\n import org.testcontainers.containers.TarantoolCartridgeContainer;\n@@ -13,6 +20,15 @@\n import org.testcontainers.junit.jupiter.Container;\n import org.testcontainers.junit.jupiter.Testcontainers;\n \n+import javax.annotation.PostConstruct;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+\n /**\n  * @author Alexey Kuzin\n  */"
  },
  {
    "sha": "104ec2b77b4242bfc1c1711611aa3bcfe9193fed",
    "filename": "src/test/java/org/springframework/data/tarantool/BaseIntegrationTestStub.java",
    "status": "added",
    "additions": 132,
    "deletions": 0,
    "changes": 132,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/BaseIntegrationTestStub.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/BaseIntegrationTestStub.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/java/org/springframework/data/tarantool/BaseIntegrationTestStub.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -0,0 +1,132 @@\n+package org.springframework.data.tarantool;\n+\n+import io.tarantool.driver.api.TarantoolClient;\n+import io.tarantool.driver.api.TarantoolResult;\n+import io.tarantool.driver.api.tuple.TarantoolTuple;\n+import lombok.SneakyThrows;\n+import org.junit.jupiter.api.Disabled;\n+import org.mockito.internal.matchers.ArrayEquals;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.data.tarantool.core.TarantoolTemplate;\n+import org.springframework.data.tarantool.repository.TarantoolRepository;\n+import org.springframework.test.context.DynamicPropertyRegistry;\n+import org.springframework.test.context.DynamicPropertySource;\n+import org.springframework.util.Assert;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A stub class for debugging with localhost cluster.\n+ *\n+ * Inherit this class instead of {@link BaseIntegrationTest} to debug\n+ * your test without invoking testcontainers.\n+ *\n+ * @author Vladimir Rogach\n+ */\n+@SpringBootTest(classes = TestConfig.class,\n+        properties = {\n+                \"tarantool.host=localhost\",\n+                \"tarantool.port=3301\",\n+                \"tarantool.username=admin\",\n+                \"tarantool.password=testapp-cluster-cookie\"\n+})\n+public class BaseIntegrationTestStub {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BaseIntegrationTestStub.class);\n+\n+    @Autowired\n+    private List<TarantoolRepository<?,?>> availableRepos;\n+\n+    @Autowired\n+    private TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> client;\n+\n+    protected final static TarantoolContainerStub tarantoolContainer = new TarantoolContainerStub();\n+\n+    @PostConstruct\n+    private void initStub() {\n+        // wipe all data in cluster before running tests\n+        availableRepos.forEach(TarantoolRepository::deleteAll);\n+\n+        tarantoolContainer.setClient(this.client);\n+        tarantoolContainer.runDeferred();\n+        logger.info(\"Container STUB initialized.\");\n+    }\n+\n+    /**\n+     * This class mimics a tarantool testcontainer but works with a running cluster.\n+     */\n+    public static class TarantoolContainerStub {\n+\n+        private final Logger logger = LoggerFactory.getLogger(BaseIntegrationTestStub.class);\n+\n+        private TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> client;\n+        private final List<String> deferredScripts = new ArrayList<>();\n+\n+        /**\n+         * Reads given resource file as a string.\n+         *\n+         * @param fileName path to the resource file\n+         * @return the file's contents\n+         * @throws IOException if read fails for any reason\n+         */\n+        String getResourceFileAsString(String fileName) throws IOException {\n+            ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+            try (InputStream is = classLoader.getResourceAsStream(fileName)) {\n+                if (is == null) return null;\n+                try (InputStreamReader isr = new InputStreamReader(is);\n+                     BufferedReader reader = new BufferedReader(isr)) {\n+                    return reader.lines().collect(Collectors.joining(System.lineSeparator()));\n+                }\n+            }\n+        }\n+\n+        public CompletableFuture<List<?>> executeScript(String script) {\n+            if(client == null) {\n+                // Client is initialized only after DI is finished.\n+                // So it is null during static init phase.\n+                // We put init commands to a buffer and will execute it a bit later.\n+                deferredScripts.add(script);\n+                return CompletableFuture.completedFuture(Collections.singletonList(true));\n+            }\n+            try {\n+                String cmd = getResourceFileAsString(script);\n+                logger.info(\"Executing command from script \" + script + \": \" + cmd);\n+                return client.eval(cmd);\n+            } catch (IOException e) {\n+                logger.error(\"Error running script \" + script, e);\n+                return CompletableFuture.completedFuture(Collections.singletonList(true));\n+            }\n+        }\n+\n+        public void runDeferred() {\n+            deferredScripts.forEach(script -> {\n+                try {\n+                    executeScript(script).get();\n+                } catch (InterruptedException | ExecutionException e) {\n+                    logger.error(\"Error running script \" + script, e);\n+                }\n+            });\n+        }\n+\n+        public void setClient(TarantoolClient<TarantoolTuple, TarantoolResult<TarantoolTuple>> client) {\n+            this.client = client;\n+        }\n+    }\n+}"
  },
  {
    "sha": "bef90f3c61edd5983669c18380629654b704d362",
    "filename": "src/test/java/org/springframework/data/tarantool/core/TarantoolTemplateTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/core/TarantoolTemplateTest.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/core/TarantoolTemplateTest.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/java/org/springframework/data/tarantool/core/TarantoolTemplateTest.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -9,6 +9,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.dao.DataRetrievalFailureException;\n import org.springframework.data.tarantool.BaseIntegrationTest;\n+import org.springframework.data.tarantool.BaseIntegrationTestStub;\n import org.springframework.data.tarantool.entities.Address;\n import org.springframework.data.tarantool.entities.Book;\n import org.springframework.data.tarantool.entities.BookNonEntity;\n@@ -103,6 +104,9 @@ private static void setUp() {\n     void setUpTest() {\n         tarantoolOperations.save(book, Book.class);\n \n+        //Fix flacky test. Other cases save data so here\n+        tarantoolOperations.truncate(\"customers\");\n+\n         tarantoolOperations.save(vasya, Customer.class);\n         tarantoolOperations.save(petya, Customer.class);\n         tarantoolOperations.save(tanya, Customer.class);"
  },
  {
    "sha": "4907005e208149453ab456a849f68aef950ad57b",
    "filename": "src/test/java/org/springframework/data/tarantool/entities/BookTranslation.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/entities/BookTranslation.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/entities/BookTranslation.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/java/org/springframework/data/tarantool/entities/BookTranslation.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -0,0 +1,37 @@\n+package org.springframework.data.tarantool.entities;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import org.springframework.data.annotation.Id;\n+import org.springframework.data.tarantool.core.mapping.Field;\n+import org.springframework.data.tarantool.core.mapping.TarantoolIdClass;\n+import org.springframework.data.tarantool.core.mapping.Tuple;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A test entity class with composite id.\n+ * @author Vladimir Rogach\n+ */\n+\n+@Data\n+@Builder\n+@EqualsAndHashCode\n+@Tuple(\"book_translation\")\n+@TarantoolIdClass(BookTranslationId.class)\n+public class BookTranslation {\n+    @Id\n+    @Field(value = \"id\")\n+    private Integer bookId;\n+\n+    @Id\n+    private String language;\n+\n+    @Id\n+    private Integer edition;\n+\n+    private String translator;\n+\n+    private String comments;\n+}"
  },
  {
    "sha": "b1ea34b0a9276138832646c7a1685d235a27357f",
    "filename": "src/test/java/org/springframework/data/tarantool/entities/BookTranslationId.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/entities/BookTranslationId.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/entities/BookTranslationId.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/java/org/springframework/data/tarantool/entities/BookTranslationId.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -0,0 +1,24 @@\n+package org.springframework.data.tarantool.entities;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import org.springframework.data.tarantool.core.mapping.Field;\n+\n+/**\n+ * A composite id class for test.\n+ *\n+ * @author Vladimir Rogach\n+ */\n+@Data\n+@Builder\n+@EqualsAndHashCode\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class BookTranslationId {\n+    private Integer bookId;\n+    private String language;\n+    private Integer edition;\n+}"
  },
  {
    "sha": "115f63e51e30c6c38934e681760efa9943a9b5ce",
    "filename": "src/test/java/org/springframework/data/tarantool/repository/BookTranslationRepository.java",
    "status": "added",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/repository/BookTranslationRepository.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/repository/BookTranslationRepository.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/java/org/springframework/data/tarantool/repository/BookTranslationRepository.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -0,0 +1,12 @@\n+package org.springframework.data.tarantool.repository;\n+\n+import org.springframework.data.tarantool.entities.BookTranslation;\n+import org.springframework.data.tarantool.entities.BookTranslationId;\n+\n+/**\n+ * Test repo with composite PK.\n+ *\n+ * @author Vladimir Rogach\n+ */\n+public interface BookTranslationRepository extends TarantoolRepository<BookTranslation, BookTranslationId> {\n+}"
  },
  {
    "sha": "319973f7f138a08e84bcd5073193f880a9125d14",
    "filename": "src/test/java/org/springframework/data/tarantool/repository/support/CompositePkIntegrationTest.java",
    "status": "added",
    "additions": 151,
    "deletions": 0,
    "changes": 151,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/repository/support/CompositePkIntegrationTest.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/repository/support/CompositePkIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/java/org/springframework/data/tarantool/repository/support/CompositePkIntegrationTest.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -0,0 +1,151 @@\n+package org.springframework.data.tarantool.repository.support;\n+\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.tarantool.BaseIntegrationTest;\n+import org.springframework.data.tarantool.BaseIntegrationTestStub;\n+import org.springframework.data.tarantool.entities.BookTranslation;\n+import org.springframework.data.tarantool.entities.BookTranslationId;\n+import org.springframework.data.tarantool.repository.BookTranslationRepository;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * @author Alexey Kuzin\n+ */\n+@Tag(\"integration\")\n+class CompositePkIntegrationTest extends BaseIntegrationTest {\n+\n+    @Autowired\n+    BookTranslationRepository bookTranslationRepository;\n+\n+    @Test\n+    public void findOne_shouldReturnNullForNonExistingKey() {\n+        BookTranslationId nonExistentId = BookTranslationId.builder()\n+                .bookId(1)\n+                .language(\"Alien\")\n+                .edition(11)\n+                .build();\n+        Optional<BookTranslation> one = bookTranslationRepository.findById(nonExistentId);\n+\n+        assertThat(one).isNotPresent();\n+    }\n+\n+    @Test\n+    public void testSave() {\n+        BookTranslation translation = BookTranslation.builder()\n+                .bookId(2)\n+                .language(\"Russian\")\n+                .edition(22)\n+                .translator(\"Ivan Ivanov\")\n+                .comments(\"Some translation\")\n+                .build();\n+        BookTranslation newTranslation = bookTranslationRepository.save(translation);\n+        assertThat(newTranslation).isEqualTo(translation);\n+    }\n+\n+    @Test\n+    public void testExists() {\n+        BookTranslationId id = BookTranslationId.builder()\n+                .bookId(3)\n+                .language(\"Russian\")\n+                .edition(33)\n+                .build();\n+\n+        BookTranslation translation = BookTranslation.builder()\n+                .bookId(id.getBookId())\n+                .language(id.getLanguage())\n+                .edition(id.getEdition())\n+                .translator(\"Petr Petrov\")\n+                .comments(\"Another translation\")\n+                .build();\n+\n+        bookTranslationRepository.save(translation);\n+\n+        assertTrue(bookTranslationRepository.existsById(id));\n+    }\n+\n+    @Test\n+    public void testDelete() {\n+        BookTranslationId id = BookTranslationId.builder()\n+                .bookId(4)\n+                .language(\"Russian\")\n+                .edition(44)\n+                .build();\n+\n+        BookTranslation translation = BookTranslation.builder()\n+                .bookId(id.getBookId())\n+                .language(id.getLanguage())\n+                .edition(id.getEdition())\n+                .translator(\"Fedor Fedorov\")\n+                .comments(\"Translation 11\")\n+                .build();\n+\n+        BookTranslation saved = bookTranslationRepository.save(translation);\n+        bookTranslationRepository.delete(saved);\n+        assertThat(bookTranslationRepository.existsById(id)).isFalse();\n+    }\n+\n+    @Test\n+    public void testFindById() {\n+        BookTranslationId id = BookTranslationId.builder()\n+                .bookId(5)\n+                .language(\"Ukrainian\")\n+                .edition(55)\n+                .build();\n+\n+        BookTranslation translation = BookTranslation.builder()\n+                .bookId(id.getBookId())\n+                .language(id.getLanguage())\n+                .edition(id.getEdition())\n+                .translator(\"Mitro Dmitrienko\")\n+                .comments(\"Translation 55\")\n+                .build();\n+\n+        bookTranslationRepository.save(translation);\n+\n+        Optional<BookTranslation> translationResult = bookTranslationRepository.findById(id);\n+        assertThat(translationResult).hasValueSatisfying(actual -> {\n+            assertThat(actual.getTranslator()).isEqualTo(\"Mitro Dmitrienko\");\n+            assertThat(actual.getComments()).isEqualTo(\"Translation 55\");\n+        });\n+    }\n+\n+    private List<BookTranslationId> insertTranslations(List<Integer> bookIds) {\n+        ArrayList<BookTranslationId> result = new ArrayList<BookTranslationId>();\n+        bookIds.forEach(id -> {\n+            BookTranslationId translationId = BookTranslationId.builder()\n+                    .bookId(id)\n+                    .language(\"Russian\")\n+                    .edition(id * 10)\n+                    .build();\n+\n+            BookTranslation translation = BookTranslation.builder()\n+                    .bookId(translationId.getBookId())\n+                    .language(translationId.getLanguage())\n+                    .edition(translationId.getEdition())\n+                    .translator(\"Google translate\")\n+                    .comments(\"Comment \" + id)\n+                    .build();\n+\n+            bookTranslationRepository.save(translation);\n+            result.add(translationId);\n+        });\n+        return result;\n+    }\n+\n+    @Test\n+    public void testFindAll() {\n+        insertTranslations(Arrays.asList(6,7,8));\n+        List<BookTranslation> books = (List<BookTranslation>) bookTranslationRepository.findAll();\n+        assertThat(books.size()).isGreaterThanOrEqualTo(3);\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "4237f9d26ed223541595cfae86ccfdbea61905e7",
    "filename": "src/test/java/org/springframework/data/tarantool/repository/support/RepositoryIntegrationTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/repository/support/RepositoryIntegrationTest.java",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/java/org/springframework/data/tarantool/repository/support/RepositoryIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/java/org/springframework/data/tarantool/repository/support/RepositoryIntegrationTest.java?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -6,12 +6,15 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.tarantool.BaseIntegrationTest;\n+import org.springframework.data.tarantool.BaseIntegrationTestStub;\n import org.springframework.data.tarantool.entities.Book;\n import org.springframework.data.tarantool.repository.BookRepository;\n \n+import javax.annotation.PostConstruct;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertTrue;"
  },
  {
    "sha": "57298039ff2ead5d77e0aa005675e6f3fe55f84a",
    "filename": "src/test/resources/cartridge/app/roles/api_storage.lua",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/resources/cartridge/app/roles/api_storage.lua",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/resources/cartridge/app/roles/api_storage.lua",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/resources/cartridge/app/roles/api_storage.lua?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -1,5 +1,8 @@\n \n local function init_space()\n+\n+    -- FIXME: rename\n+    -- Book space\n     local test_space = box.schema.space.create(\n         'test_space',\n         {\n@@ -44,6 +47,7 @@ local function init_space()\n         if_not_exists = true,\n     })\n \n+    -- Customer space\n     local customers = box.schema.space.create(\n         'customers',\n         {\n@@ -72,6 +76,34 @@ local function init_space()\n         unique = false,\n         if_not_exists = true,\n     })\n+\n+    --BookTranslation space\n+    local book_translation = box.schema.space.create(\n+            'book_translation',\n+            {\n+                format = {\n+                    {name = 'id', type = 'unsigned'},\n+                    {name = 'bucket_id', type = 'unsigned'},\n+                    {name = 'language', type = 'string'},\n+                    {name = 'edition', type = 'integer'},\n+                    {name = 'translator', type = 'string'},\n+                    {name = 'comments', type = 'string', is_nullable = true},\n+                },\n+                if_not_exists = true,\n+            }\n+    )\n+\n+    book_translation:create_index('id', {\n+        parts = {'id','language','edition'},\n+        if_not_exists = true,\n+    })\n+\n+    book_translation:create_index('bucket_id', {\n+        parts = {'bucket_id'},\n+        unique = false,\n+        if_not_exists = true,\n+    })\n+\n end\n \n local function storage_get_space_format()"
  },
  {
    "sha": "a7f4d1322ee65324d66abb5973f9e7c4138e411c",
    "filename": "src/test/resources/test_teardown.lua",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/tarantool/cartridge-springdata/blob/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/resources/test_teardown.lua",
    "raw_url": "https://github.com/tarantool/cartridge-springdata/raw/e95d0edec38b32e765031e2d8e44bb3131ba5165/src/test/resources/test_teardown.lua",
    "contents_url": "https://api.github.com/repos/tarantool/cartridge-springdata/contents/src/test/resources/test_teardown.lua?ref=e95d0edec38b32e765031e2d8e44bb3131ba5165",
    "patch": "@@ -2,4 +2,13 @@\n \n local crud = require('crud')\n \n-crud.truncate('test_space')\n+local function truncate_space(space)\n+    local ok, err\n+    ok, err = crud.truncate('test_space')\n+    if(not ok) then\n+        error(\"Failed to truncate space '\" .. space ..\"', error: \".. tostring(err))\n+    end\n+end\n+\n+truncate_space('test_space')\n+truncate_space('book_translation')"
  }
]
