[
  {
    "sha": "992410ff8acdc954bf72efda592f2ad690c2cd07",
    "filename": "smart-cards-tests/src/test/java/gov/va/api/health/smartcards/tests/PatientIT.java",
    "status": "modified",
    "additions": 39,
    "deletions": 3,
    "changes": 42,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards-tests/src/test/java/gov/va/api/health/smartcards/tests/PatientIT.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards-tests/src/test/java/gov/va/api/health/smartcards/tests/PatientIT.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards-tests/src/test/java/gov/va/api/health/smartcards/tests/PatientIT.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -16,7 +16,9 @@\n import io.restassured.http.Method;\n import io.restassured.specification.RequestSpecification;\n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import lombok.SneakyThrows;\n import lombok.extern.slf4j.Slf4j;\n import org.junit.jupiter.api.BeforeAll;\n@@ -46,22 +48,33 @@ private static ExpectedResponse doPost(\n       Object payload,\n       String description,\n       Integer expectedStatus) {\n+    return doPost(svc, request, payload, description, expectedStatus, new HashMap<>());\n+  }\n+\n+  @SneakyThrows\n+  private static ExpectedResponse doPost(\n+      SystemDefinitions.Service svc,\n+      String request,\n+      Object payload,\n+      String description,\n+      Integer expectedStatus,\n+      Map<String, String> additionalHeaders) {\n     RequestSpecification spec =\n         RestAssured.given()\n             .baseUri(svc.url())\n             .port(svc.port())\n             .relaxedHTTPSValidation()\n+            .headers(additionalHeaders)\n             .header(\"Authorization\", \"Bearer \" + ACCESS_TOKEN)\n             .header(\"Content-Type\", \"application/json\")\n             .body(MAPPER.writeValueAsString(payload));\n-    return doPost(svc, spec, request, payload, description, expectedStatus);\n+    return doPost(svc, spec, request, description, expectedStatus);\n   }\n \n   private static ExpectedResponse doPost(\n       SystemDefinitions.Service svc,\n       RequestSpecification spec,\n       String request,\n-      Object payload,\n       String description,\n       Integer expectedStatus) {\n     log.info(\n@@ -103,6 +116,30 @@ void read() {\n         200);\n   }\n \n+  @Test\n+  void read_doNotCompress() {\n+    String id = systemDefinition().ids().patient();\n+    doPost(\n+        systemDefinition().internal(),\n+        String.format(\"r4/Patient/%s/$health-cards-issue\", id),\n+        parametersCovid19(),\n+        \"$health-cards-issue\",\n+        200,\n+        Map.of(\"x-vc-compress\", \"false\"));\n+  }\n+\n+  @Test\n+  void read_doNotSign() {\n+    String id = systemDefinition().ids().patient();\n+    doPost(\n+        systemDefinition().internal(),\n+        String.format(\"r4/Patient/%s/$health-cards-issue\", id),\n+        parametersCovid19(),\n+        \"$health-cards-issue\",\n+        200,\n+        Map.of(\"x-vc-jws\", \"false\"));\n+  }\n+\n   @Test\n   void read_external_dstu2() {\n     assumeEnvironmentNotIn(Environment.LOCAL);\n@@ -173,7 +210,6 @@ void read_invalid_noToken() {\n         systemDefinition().internal(),\n         spec,\n         String.format(\"r4/Patient/%s/$health-cards-issue\", id),\n-        payload,\n         \"$health-cards-issue (no token)\",\n         401);\n   }"
  },
  {
    "sha": "9d1f9690f88ab52444112383178c0679cbe46e24",
    "filename": "smart-cards/src/main/java/gov/va/api/health/smartcards/Compressors.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/Compressors.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/Compressors.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/main/java/gov/va/api/health/smartcards/Compressors.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -14,9 +14,9 @@\n \n   /** Compress a payload with Java's ZLIB implementation. */\n   @SneakyThrows\n-  public static byte[] deflate(byte[] input) {\n+  public static byte[] compress(byte[] input) {\n     checkNotNull(input);\n-    Deflater deflater = new Deflater();\n+    Deflater deflater = new Deflater(Deflater.DEFLATED, true);\n     deflater.setInput(input);\n     deflater.finish();\n \n@@ -36,9 +36,9 @@\n \n   /** Decompress a payload with Java's ZLIB implementation. */\n   @SneakyThrows\n-  public static byte[] inflate(byte[] input) {\n+  public static byte[] uncompress(byte[] input) {\n     checkNotNull(input);\n-    Inflater inflater = new Inflater();\n+    Inflater inflater = new Inflater(true);\n     inflater.setInput(input);\n     byte[] buffer = new byte[BUFFER_SIZE];\n     byte[] result;"
  },
  {
    "sha": "4d9cc7bc8a647a3fb2d5977a8f02c4bd2c041df5",
    "filename": "smart-cards/src/main/java/gov/va/api/health/smartcards/JwksProperties.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/JwksProperties.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/JwksProperties.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/main/java/gov/va/api/health/smartcards/JwksProperties.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -10,8 +10,8 @@\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n-@Component\n @Getter\n+@Component\n public class JwksProperties {\n   final String currentKeyId;\n \n@@ -21,9 +21,10 @@\n \n   final String jwksPublicJson;\n \n+  /** Default Constructor. */\n   @Builder\n   @SneakyThrows\n-  JwksProperties(\n+  public JwksProperties(\n       @Value(\"${jwk-set.private-json}\") String jwksPrivateJson,\n       @Value(\"${jwk-set.current-key-id}\") String currentKeyId) {\n     checkState(!\"unset\".equals(jwksPrivateJson), \"jwk-set.private-json is unset\");"
  },
  {
    "sha": "afc8fbb6b35b6370daad450e102731b112893571",
    "filename": "smart-cards/src/main/java/gov/va/api/health/smartcards/PayloadSigner.java",
    "status": "modified",
    "additions": 12,
    "deletions": 7,
    "changes": 19,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/PayloadSigner.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/PayloadSigner.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/main/java/gov/va/api/health/smartcards/PayloadSigner.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -11,33 +11,38 @@\n import gov.va.api.health.smartcards.vc.VerifiableCredential;\n import java.nio.charset.StandardCharsets;\n import java.time.Instant;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.SneakyThrows;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n+@AllArgsConstructor(onConstructor_ = @Autowired)\n @Builder\n+@Component\n public class PayloadSigner {\n   private static final ObjectMapper MAPPER = JacksonMapperConfig.createMapper();\n \n   private final JwksProperties jwksProperties;\n \n   private final LinkProperties linkProperties;\n \n-  private byte[] deflate(String payload) {\n-    return Compressors.deflate(payload.getBytes(StandardCharsets.UTF_8));\n+  private byte[] compress(String payload) {\n+    return Compressors.compress(payload.getBytes(StandardCharsets.UTF_8));\n   }\n \n-  private JWSHeader jwsHeader(JWK jwk, boolean deflate) {\n+  private JWSHeader jwsHeader(JWK jwk, boolean compress) {\n     JWSHeader.Builder headerBuilder =\n         new JWSHeader.Builder(JWSAlgorithm.ES256).keyID(jwk.getKeyID());\n-    if (deflate) {\n+    if (compress) {\n       headerBuilder.customParam(\"zip\", \"DEF\");\n     }\n     return headerBuilder.build();\n   }\n \n   /** Sign VC payload. Generates a JWS. */\n   @SneakyThrows\n-  public String sign(VerifiableCredential vc, boolean deflate) {\n+  public String sign(VerifiableCredential vc, boolean compress) {\n     PayloadClaimsWrapper claims =\n         PayloadClaimsWrapper.builder()\n             .issuer(linkProperties.r4Url())\n@@ -46,9 +51,9 @@ public String sign(VerifiableCredential vc, boolean deflate) {\n             .build();\n     String payloadStr = MAPPER.writeValueAsString(claims);\n     byte[] payloadAsBytes =\n-        deflate ? deflate(payloadStr) : payloadStr.getBytes(StandardCharsets.UTF_8);\n+        compress ? compress(payloadStr) : payloadStr.getBytes(StandardCharsets.UTF_8);\n     Payload payload = new Payload(payloadAsBytes);\n-    JWSHeader header = jwsHeader(jwksProperties.currentPrivateJwk(), deflate);\n+    JWSHeader header = jwsHeader(jwksProperties.currentPrivateJwk(), compress);\n     JWSObject jwsObject = new JWSObject(header, payload);\n     jwsObject.sign(new ECDSASigner(jwksProperties.currentPrivateJwk().toECKey()));\n     return jwsObject.serialize();"
  },
  {
    "sha": "064f234e87fac0174bb7833c8ae7c3a873bb7bff",
    "filename": "smart-cards/src/main/java/gov/va/api/health/smartcards/patient/PatientController.java",
    "status": "modified",
    "additions": 36,
    "deletions": 13,
    "changes": 49,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/patient/PatientController.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/patient/PatientController.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/main/java/gov/va/api/health/smartcards/patient/PatientController.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -12,6 +12,7 @@\n import gov.va.api.health.r4.api.bundle.AbstractEntry;\n import gov.va.api.health.r4.api.bundle.MixedBundle;\n import gov.va.api.health.r4.api.bundle.MixedEntry;\n+import gov.va.api.health.r4.api.elements.Reference;\n import gov.va.api.health.r4.api.resources.Immunization;\n import gov.va.api.health.r4.api.resources.Location;\n import gov.va.api.health.r4.api.resources.Parameters;\n@@ -21,10 +22,12 @@\n import gov.va.api.health.smartcards.DataQueryFhirClient;\n import gov.va.api.health.smartcards.Exceptions;\n import gov.va.api.health.smartcards.JacksonMapperConfig;\n+import gov.va.api.health.smartcards.PayloadSigner;\n import gov.va.api.health.smartcards.R4MixedBundler;\n import gov.va.api.health.smartcards.vc.CredentialType;\n import gov.va.api.health.smartcards.vc.VerifiableCredential;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -34,6 +37,7 @@\n import javax.validation.Valid;\n import lombok.AllArgsConstructor;\n import lombok.SneakyThrows;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.ResponseEntity;\n import org.springframework.validation.DataBinder;\n@@ -65,6 +69,8 @@\n \n   private final DataQueryFhirClient fhirClient;\n \n+  private final PayloadSigner payloadSigner;\n+\n   private final R4MixedBundler bundler;\n \n   private static <R extends Resource, E extends AbstractEntry<R>, B extends AbstractBundle<E>>\n@@ -85,7 +91,7 @@ void consumeBundle(B bundle, List<MixedEntry> target, Function<E, MixedEntry> tr\n     List<String> urls =\n         entries.stream()\n             .map(AbstractEntry::fullUrl)\n-            .filter(s -> isNotBlank(s))\n+            .filter(StringUtils::isNotBlank)\n             .distinct()\n             .collect(toCollection(ArrayList::new));\n     // Index unique URLs and replace with 'resource:X' scheme\n@@ -97,7 +103,7 @@ void consumeBundle(B bundle, List<MixedEntry> target, Function<E, MixedEntry> tr\n       if (entry.resource() instanceof Immunization) {\n         Immunization imm = (Immunization) entry.resource();\n         String patientRef =\n-            Optional.of(imm).map(im -> im.patient()).map(p -> p.reference()).orElse(null);\n+            Optional.of(imm).map(Immunization::patient).map(Reference::reference).orElse(null);\n         if (patientRef != null) {\n           if (!urls.contains(patientRef)) {\n             urls.add(patientRef);\n@@ -130,21 +136,25 @@ void consumeBundle(B bundle, List<MixedEntry> target, Function<E, MixedEntry> tr\n   }\n \n   @SneakyThrows\n-  private static Parameters parameters(VerifiableCredential vc, List<String> urls) {\n+  private static Parameters parameters(String vc, List<String> urls) {\n     return Parameters.builder()\n         .parameter(\n             Stream.concat(\n-                    List.of(\n+                    Stream.of(\n                         Parameters.Parameter.builder()\n                             .name(\"verifiableCredential\")\n-                            .valueString(MAPPER.writeValueAsString(vc))\n-                            .build())\n-                        .stream(),\n+                            .valueString(vc)\n+                            .build()),\n                     parameterResourceLinks(urls).stream())\n                 .collect(toList()))\n         .build();\n   }\n \n+  private static boolean parseBooleanOrTrue(String value) {\n+    // not using parseBoolean because we need to default to true\n+    return !\"false\".equalsIgnoreCase(StringUtils.trimToEmpty(value));\n+  }\n+\n   private static MixedEntry transform(Patient.Entry entry) {\n     return PatientTransformer.builder().entry(entry).build().transform();\n   }\n@@ -153,7 +163,7 @@ private static MixedEntry transform(Immunization.Entry entry) {\n     return ImmunizationTransformer.builder().entry(entry).build().transform();\n   }\n \n-  private static List<CredentialType> validateCredentialTypes(List<CredentialType> credentials) {\n+  private static void validateCredentialTypes(List<CredentialType> credentials) {\n     if (credentials.isEmpty()) {\n       throw new Exceptions.BadRequest(\"credentialType parameter is required\");\n     }\n@@ -166,7 +176,6 @@ private static MixedEntry transform(Immunization.Entry entry) {\n       throw new Exceptions.NotImplemented(\n           String.format(\"Not yet implemented support for %s\", requestedButUnimplemented));\n     }\n-    return credentials;\n   }\n \n   private static VerifiableCredential vc(MixedBundle bundle, List<CredentialType> credentialTypes) {\n@@ -178,15 +187,20 @@ private static VerifiableCredential vc(MixedBundle bundle, List<CredentialType>\n                     credentialTypes.stream().map(CredentialType::getUri))\n                 .collect(toList()))\n         .credentialSubject(\n-            VerifiableCredential.CredentialSubject.builder().fhirBundle(bundle).build())\n+            VerifiableCredential.CredentialSubject.builder()\n+                .fhirVersion(\"4.0.1\")\n+                .fhirBundle(bundle)\n+                .build())\n         .build();\n   }\n \n   @PostMapping(value = \"/{id}/$health-cards-issue\")\n   ResponseEntity<Parameters> healthCardsIssue(\n       @PathVariable(\"id\") String id,\n       @Valid @RequestBody Parameters parameters,\n-      @RequestHeader(name = \"Authorization\", required = false) String authorization) {\n+      @RequestHeader(name = \"Authorization\", required = false) String authorization,\n+      @RequestHeader(name = \"x-vc-jws\", required = false) String vcJws,\n+      @RequestHeader(name = \"x-vc-compress\", required = false) String vcCompress) {\n     checkState(isNotBlank(id), \"id is required\");\n     var credentialTypes = credentialTypes(parameters);\n     validateCredentialTypes(credentialTypes);\n@@ -198,7 +212,8 @@ private static VerifiableCredential vc(MixedBundle bundle, List<CredentialType>\n     consumeBundle(immunizations, resources, PatientController::transform);\n     List<String> urls = indexAndReplaceUrls(resources);\n     var vc = vc(bundler.bundle(resources), credentialTypes);\n-    var parametersResponse = parameters(vc, urls);\n+    var signedVc = signVc(vc, parseBooleanOrTrue(vcJws), parseBooleanOrTrue(vcCompress));\n+    var parametersResponse = parameters(signedVc, urls);\n     return ResponseEntity.ok(parametersResponse);\n   }\n \n@@ -223,9 +238,17 @@ private void lookupAndAttachLocations(Immunization.Bundle immunizations, String\n       }\n       imm.contained(\n           Stream.concat(\n-                  Optional.ofNullable(imm.contained()).map(c -> c.stream()).orElse(Stream.empty()),\n+                  Optional.ofNullable(imm.contained()).stream().flatMap(Collection::stream),\n                   Stream.of(location))\n               .collect(toList()));\n     }\n   }\n+\n+  @SneakyThrows\n+  private String signVc(VerifiableCredential vc, boolean shouldSign, boolean shouldCompress) {\n+    if (!shouldSign) {\n+      return MAPPER.writeValueAsString(vc);\n+    }\n+    return payloadSigner.sign(vc, shouldCompress);\n+  }\n }"
  },
  {
    "sha": "d96fee44d70828f37c02d0edfaee19fd5d00a597",
    "filename": "smart-cards/src/main/java/gov/va/api/health/smartcards/vc/VerifiableCredential.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/vc/VerifiableCredential.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/main/java/gov/va/api/health/smartcards/vc/VerifiableCredential.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/main/java/gov/va/api/health/smartcards/vc/VerifiableCredential.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -33,6 +33,7 @@\n   @AllArgsConstructor\n   @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)\n   public static class CredentialSubject {\n+    String fhirVersion;\n     MixedBundle fhirBundle;\n   }\n }"
  },
  {
    "sha": "a847a8d9332e3f95aa07b17829eb498f195f78b5",
    "filename": "smart-cards/src/test/java/gov/va/api/health/smartcards/CompressorsTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/CompressorsTest.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/CompressorsTest.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/test/java/gov/va/api/health/smartcards/CompressorsTest.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -12,14 +12,14 @@\n   void badDataFormat() {\n     String contents = \"pteracuda\";\n     byte[] notActuallyCompressed = contents.getBytes(StandardCharsets.UTF_8);\n-    assertThrows(DataFormatException.class, () -> Compressors.inflate(notActuallyCompressed));\n+    assertThrows(DataFormatException.class, () -> Compressors.uncompress(notActuallyCompressed));\n   }\n \n   @Test\n-  void deflateAndInflate() {\n+  void compressAndUncompress() {\n     String contents = \"a very long input to compress\";\n-    byte[] compressed = Compressors.deflate(contents.getBytes(StandardCharsets.UTF_8));\n-    byte[] uncompressed = Compressors.inflate(compressed);\n+    byte[] compressed = Compressors.compress(contents.getBytes(StandardCharsets.UTF_8));\n+    byte[] uncompressed = Compressors.uncompress(compressed);\n     assertThat(new String(uncompressed, StandardCharsets.UTF_8)).isEqualTo(contents);\n   }\n }"
  },
  {
    "sha": "c9e2c6e1b2c899a8404149c4b8ea715afed5bea1",
    "filename": "smart-cards/src/test/java/gov/va/api/health/smartcards/JwsHelpers.java",
    "status": "added",
    "additions": 54,
    "deletions": 0,
    "changes": 54,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/JwsHelpers.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/JwsHelpers.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/test/java/gov/va/api/health/smartcards/JwsHelpers.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -0,0 +1,54 @@\n+package gov.va.api.health.smartcards;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jose.JWSVerifier;\n+import com.nimbusds.jose.crypto.ECDSAVerifier;\n+import com.nimbusds.jose.jwk.Curve;\n+import com.nimbusds.jose.jwk.ECKey;\n+import com.nimbusds.jose.jwk.JWK;\n+import com.nimbusds.jose.jwk.JWKSet;\n+import com.nimbusds.jose.jwk.gen.ECKeyGenerator;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+import lombok.SneakyThrows;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+public class JwsHelpers {\n+  public static String decompress(byte[] input) {\n+    return new String(Compressors.uncompress(input), StandardCharsets.UTF_8);\n+  }\n+\n+  @SneakyThrows\n+  public static ECKey genEcJwk(String kid) {\n+    return new ECKeyGenerator(Curve.P_256).keyID(kid).generate();\n+  }\n+\n+  @SneakyThrows\n+  public static JwksProperties jwksProperties(String kid) {\n+    return jwksProperties(new String[] {kid});\n+  }\n+\n+  @SneakyThrows\n+  public static JwksProperties jwksProperties(String... kids) {\n+    List<JWK> keys = Arrays.stream(kids).map(JwsHelpers::genEcJwk).collect(toList());\n+    JWKSet jwks = new JWKSet(keys);\n+    String jwkSet = jwks.toString(false);\n+    return new JwksProperties(jwkSet, kids[0]);\n+  }\n+\n+  @SneakyThrows\n+  public static JWSObject parse(String jws) {\n+    return JWSObject.parse(jws);\n+  }\n+\n+  @SneakyThrows\n+  public boolean verify(String jws, JWK publicJwk) {\n+    JWSVerifier verifier = new ECDSAVerifier(publicJwk.toECKey());\n+    JWSObject jwsObject = JWSObject.parse(jws);\n+    return jwsObject.verify(verifier);\n+  }\n+}"
  },
  {
    "sha": "19300d7c8a9e1d9e4fd204a331f60e3aa7d976c4",
    "filename": "smart-cards/src/test/java/gov/va/api/health/smartcards/MockResourceSamples.java",
    "status": "added",
    "additions": 226,
    "deletions": 0,
    "changes": 226,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/MockResourceSamples.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/MockResourceSamples.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/test/java/gov/va/api/health/smartcards/MockResourceSamples.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -0,0 +1,226 @@\n+package gov.va.api.health.smartcards;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import gov.va.api.health.r4.api.bundle.AbstractBundle;\n+import gov.va.api.health.r4.api.bundle.AbstractEntry;\n+import gov.va.api.health.r4.api.bundle.BundleLink;\n+import gov.va.api.health.r4.api.datatypes.Address;\n+import gov.va.api.health.r4.api.datatypes.Annotation;\n+import gov.va.api.health.r4.api.datatypes.CodeableConcept;\n+import gov.va.api.health.r4.api.datatypes.Coding;\n+import gov.va.api.health.r4.api.datatypes.ContactPoint;\n+import gov.va.api.health.r4.api.datatypes.ContactPoint.ContactPointSystem;\n+import gov.va.api.health.r4.api.datatypes.HumanName;\n+import gov.va.api.health.r4.api.datatypes.Identifier;\n+import gov.va.api.health.r4.api.elements.Reference;\n+import gov.va.api.health.r4.api.resources.Immunization;\n+import gov.va.api.health.r4.api.resources.Location;\n+import gov.va.api.health.r4.api.resources.Location.Mode;\n+import gov.va.api.health.r4.api.resources.Patient;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+@Data\n+@Builder\n+public class MockResourceSamples {\n+  LinkProperties linkProperties;\n+\n+  public Immunization.Bundle immunizationBundle(String icn) {\n+    var patient = Patient.builder().id(icn).name(List.of(HumanName.builder().build())).build();\n+    String vaccineSystem = \"http://hl7.org/fhir/sid/cvx\";\n+    List<Immunization> immunizations =\n+        List.of(\n+            Immunization.builder()\n+                .resourceType(\"Immunization\")\n+                .id(String.format(\"imm-1-%s\", patient.id()))\n+                .status(Immunization.Status.completed)\n+                .vaccineCode(\n+                    CodeableConcept.builder()\n+                        .coding(List.of(Coding.builder().system(vaccineSystem).code(\"207\").build()))\n+                        .text(\"COVID-19, mRNA, LNP-S, PF, 100 mcg/ 0.5 mL dose\")\n+                        .build())\n+                .patient(\n+                    Reference.builder()\n+                        .reference(linkProperties.dataQueryR4ReadUrl(patient))\n+                        .display(patient.name().stream().findFirst().get().text())\n+                        .build())\n+                .occurrenceDateTime(\"2020-12-18T12:24:55Z\")\n+                .primarySource(true)\n+                .location(\n+                    Reference.builder()\n+                        .reference(\n+                            String.format(\n+                                \"%s/loc-%s\",\n+                                linkProperties.dataQueryR4ResourceUrl(\"Location\"), patient.id()))\n+                        .display(\"Location for \" + patient.id())\n+                        .build())\n+                .note(\n+                    List.of(\n+                        Annotation.builder()\n+                            .text(\n+                                \"Dose #1 of 2 of COVID-19, mRNA, LNP-S, PF, 100 mcg/ 0.5 mL dose \"\n+                                    + \"vaccine administered.\")\n+                            .build()))\n+                .build(),\n+            Immunization.builder()\n+                .resourceType(\"Immunization\")\n+                .id(String.format(\"imm-2-%s\", patient.id()))\n+                .status(Immunization.Status.completed)\n+                .vaccineCode(\n+                    CodeableConcept.builder()\n+                        .coding(List.of(Coding.builder().system(vaccineSystem).code(\"207\").build()))\n+                        .text(\"COVID-19, mRNA, LNP-S, PF, 100 mcg/ 0.5 mL dose\")\n+                        .build())\n+                .patient(\n+                    Reference.builder()\n+                        .reference(linkProperties.dataQueryR4ReadUrl(patient))\n+                        .display(patient.name().stream().findFirst().get().text())\n+                        .build())\n+                .occurrenceDateTime(\"2021-01-14T09:30:21Z\")\n+                .primarySource(true)\n+                .location(\n+                    Reference.builder()\n+                        .reference(\n+                            String.format(\n+                                \"%s/loc-%s\",\n+                                linkProperties.dataQueryR4ResourceUrl(\"Location\"), patient.id()))\n+                        .display(\"Location for \" + patient.id())\n+                        .build())\n+                .note(\n+                    List.of(\n+                        Annotation.builder()\n+                            .text(\n+                                \"Dose #2 of 2 of COVID-19, mRNA, LNP-S, PF, 100 mcg/ 0.5 mL dose \"\n+                                    + \"vaccine administered.\")\n+                            .build()))\n+                .build());\n+    return Immunization.Bundle.builder()\n+        .type(AbstractBundle.BundleType.searchset)\n+        .link(\n+            List.of(\n+                BundleLink.builder()\n+                    .relation(BundleLink.LinkRelation.self)\n+                    .url(\n+                        String.format(\n+                            \"%s?patient=%s\",\n+                            linkProperties.dataQueryR4ResourceUrl(\"Immunization\"), patient.id()))\n+                    .build()))\n+        .total(immunizations.size())\n+        .entry(\n+            immunizations.stream()\n+                .map(\n+                    t ->\n+                        Immunization.Entry.builder()\n+                            .resource(t)\n+                            .fullUrl(linkProperties.dataQueryR4ReadUrl(t))\n+                            .search(\n+                                AbstractEntry.Search.builder()\n+                                    .mode(AbstractEntry.SearchMode.match)\n+                                    .build())\n+                            .build())\n+                .collect(toList()))\n+        .build();\n+  }\n+\n+  public Location location(String id) {\n+    return Location.builder()\n+        .id(id)\n+        .status(Location.Status.active)\n+        .name(\"Location with id \" + id)\n+        .description(\"Description for id \" + id)\n+        .mode(Mode.instance)\n+        .type(\n+            List.of(\n+                CodeableConcept.builder()\n+                    .coding(List.of(Coding.builder().display(\"SOME CODING\").build()))\n+                    .text(\"SOME TEXT\")\n+                    .build()))\n+        .telecom(\n+            List.of(\n+                ContactPoint.builder()\n+                    .system(ContactPointSystem.phone)\n+                    .value(\"123-456-7890 x0001\")\n+                    .build()))\n+        .address(\n+            Address.builder()\n+                .text(\"1901 VETERANS MEMORIAL DRIVE TEMPLE TEXAS 76504\")\n+                .line(List.of(\"1901 VETERANS MEMORIAL DRIVE\"))\n+                .city(\"TEMPLE\")\n+                .state(\"TEXAS\")\n+                .postalCode(\"76504\")\n+                .build())\n+        .physicalType(\n+            CodeableConcept.builder()\n+                .coding(List.of(Coding.builder().display(\"PHYS TYPE CODING\").build()))\n+                .text(\"PHYS TYPE TEXT\")\n+                .build())\n+        .managingOrganization(\n+            Reference.builder()\n+                .reference(linkProperties.dataQueryR4ResourceUrl(\"Organization\") + \"/org-\" + id)\n+                .display(\"MNG ORG VA MEDICAL\")\n+                .build())\n+        .build();\n+  }\n+\n+  public Patient.Bundle patientBundle(String id) {\n+    String firstName = \"Joe\" + id;\n+    String lastName = \"Doe\" + id;\n+    Patient patient =\n+        Patient.builder()\n+            .resourceType(\"Patient\")\n+            .id(id)\n+            .identifier(\n+                List.of(\n+                    Identifier.builder().id(id).use(Identifier.IdentifierUse.temp).build(),\n+                    Identifier.builder()\n+                        .use(Identifier.IdentifierUse.usual)\n+                        .type(\n+                            CodeableConcept.builder()\n+                                .coding(\n+                                    List.of(\n+                                        Coding.builder()\n+                                            .system(\"http://hl7.org/fhir/v2/0203\")\n+                                            .code(\"MR\")\n+                                            .build()))\n+                                .build())\n+                        .system(\"http://va.gov/mpi\")\n+                        .value(id)\n+                        .assigner(Reference.builder().display(\"Master Patient Index\").build())\n+                        .build()))\n+            .active(true)\n+            .name(\n+                List.of(\n+                    HumanName.builder()\n+                        .use(HumanName.NameUse.anonymous)\n+                        .text(String.format(\"%s %s\", firstName, lastName))\n+                        .family(lastName)\n+                        .given(List.of(firstName))\n+                        .build()))\n+            .gender(Patient.Gender.unknown)\n+            .birthDate(\"1955-01-01\")\n+            .deceasedBoolean(false)\n+            .build();\n+    return Patient.Bundle.builder()\n+        .type(AbstractBundle.BundleType.searchset)\n+        .link(\n+            List.of(\n+                BundleLink.builder()\n+                    .relation(BundleLink.LinkRelation.self)\n+                    .url(\n+                        String.format(\n+                            \"%s?_id=%s\", linkProperties.dataQueryR4ResourceUrl(\"Patient\"), id))\n+                    .build()))\n+        .total(1)\n+        .entry(\n+            List.of(\n+                Patient.Entry.builder()\n+                    .resource(patient)\n+                    .fullUrl(linkProperties.dataQueryR4ReadUrl(patient))\n+                    .search(\n+                        AbstractEntry.Search.builder().mode(AbstractEntry.SearchMode.match).build())\n+                    .build()))\n+        .build();\n+  }\n+}"
  },
  {
    "sha": "eec0a2393c09c9b62f486ac1bd4b99e4128a264a",
    "filename": "smart-cards/src/test/java/gov/va/api/health/smartcards/PayloadSignerTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 47,
    "changes": 56,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/PayloadSignerTest.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/PayloadSignerTest.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/test/java/gov/va/api/health/smartcards/PayloadSignerTest.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -4,13 +4,6 @@\n \n import com.nimbusds.jose.JWSHeader;\n import com.nimbusds.jose.JWSObject;\n-import com.nimbusds.jose.JWSVerifier;\n-import com.nimbusds.jose.crypto.ECDSAVerifier;\n-import com.nimbusds.jose.jwk.Curve;\n-import com.nimbusds.jose.jwk.ECKey;\n-import com.nimbusds.jose.jwk.JWK;\n-import com.nimbusds.jose.jwk.JWKSet;\n-import com.nimbusds.jose.jwk.gen.ECKeyGenerator;\n import gov.va.api.health.r4.api.bundle.AbstractBundle.BundleType;\n import gov.va.api.health.r4.api.bundle.MixedBundle;\n import gov.va.api.health.r4.api.bundle.MixedEntry;\n@@ -19,22 +12,12 @@\n import gov.va.api.health.smartcards.vc.PayloadClaimsWrapper;\n import gov.va.api.health.smartcards.vc.VerifiableCredential;\n import gov.va.api.health.smartcards.vc.VerifiableCredential.CredentialSubject;\n-import java.nio.charset.StandardCharsets;\n import java.util.List;\n import lombok.SneakyThrows;\n import org.junit.jupiter.api.Test;\n \n public class PayloadSignerTest {\n-  private static final String JWK_PRIVATE = genEcJwk(\"123\").toJSONString();\n-\n-  private static final JwksProperties JWKS_PROPERTIES = _jwksProperties();\n-\n-  @SneakyThrows\n-  private static JwksProperties _jwksProperties() {\n-    JWKSet jwks = new JWKSet(JWK.parse(JWK_PRIVATE));\n-    String jwkSet = jwks.toString(false);\n-    return new JwksProperties(jwkSet, \"123\");\n-  }\n+  private static final JwksProperties JWKS_PROPERTIES = JwsHelpers.jwksProperties(\"123\");\n \n   private static LinkProperties _linkProperties() {\n     return LinkProperties.builder()\n@@ -45,11 +28,6 @@ private static LinkProperties _linkProperties() {\n         .build();\n   }\n \n-  @SneakyThrows\n-  private static ECKey genEcJwk(String kid) {\n-    return new ECKeyGenerator(Curve.P_256).keyID(kid).generate();\n-  }\n-\n   private static VerifiableCredential vc() {\n     return VerifiableCredential.builder()\n         .context(List.of(\"https://www.w3.org/2018/credentials/v1\"))\n@@ -76,14 +54,9 @@ private static VerifiableCredential vc() {\n         .build();\n   }\n \n-  @SneakyThrows\n-  private String decompress(byte[] input) {\n-    return new String(Compressors.inflate(input), StandardCharsets.UTF_8);\n-  }\n-\n   @SneakyThrows\n   @Test\n-  void signAndDeflate() {\n+  void signAndCompress() {\n     PayloadSigner signer =\n         PayloadSigner.builder()\n             .jwksProperties(JWKS_PROPERTIES)\n@@ -93,17 +66,17 @@ void signAndDeflate() {\n     String jws = signer.sign(vc, true);\n \n     // Verify signature with public key\n-    assertThat(verify(jws)).isTrue();\n-    assertThat(verify(jws, genEcJwk(\"random\").toPublicJWK())).isFalse();\n+    assertThat(JwsHelpers.verify(jws, JWKS_PROPERTIES.currentPublicJwk())).isTrue();\n+    assertThat(JwsHelpers.verify(jws, JwsHelpers.genEcJwk(\"random\").toPublicJWK())).isFalse();\n     JWSObject jwsObject = JWSObject.parse(jws);\n \n     // Verify header\n     JWSHeader jwsHeader = jwsObject.getHeader();\n     assertThat(jwsHeader.getCustomParam(\"zip\")).isEqualTo(\"DEF\");\n-    assertThat(jwsHeader.getKeyID()).isEqualTo(JWK.parse(JWK_PRIVATE).getKeyID());\n+    assertThat(jwsHeader.getKeyID()).isEqualTo(JWKS_PROPERTIES.currentKeyId());\n \n     // Verify payload\n-    String inflated = decompress(jwsObject.getPayload().toBytes());\n+    String inflated = JwsHelpers.decompress(jwsObject.getPayload().toBytes());\n     PayloadClaimsWrapper claims =\n         JacksonMapperConfig.createMapper().readValue(inflated, PayloadClaimsWrapper.class);\n     assertThat(claims.verifiableCredential()).isEqualTo(vc);\n@@ -121,30 +94,19 @@ void signWithoutCompressions() {\n     String jws = signer.sign(vc, false);\n \n     // Verify signature with public key\n-    assertThat(verify(jws)).isTrue();\n-    assertThat(verify(jws, genEcJwk(\"random\").toPublicJWK())).isFalse();\n+    assertThat(JwsHelpers.verify(jws, JWKS_PROPERTIES.currentPublicJwk())).isTrue();\n+    assertThat(JwsHelpers.verify(jws, JwsHelpers.genEcJwk(\"random\").toPublicJWK())).isFalse();\n     JWSObject jwsObject = JWSObject.parse(jws);\n \n     // Verify header\n     JWSHeader jwsHeader = jwsObject.getHeader();\n     assertThat(jwsHeader.getCustomParam(\"zip\")).isNull();\n-    assertThat(jwsHeader.getKeyID()).isEqualTo(JWK.parse(JWK_PRIVATE).getKeyID());\n+    assertThat(jwsHeader.getKeyID()).isEqualTo(JWKS_PROPERTIES.currentKeyId());\n \n     // Verify payload\n     PayloadClaimsWrapper claims =\n         JacksonMapperConfig.createMapper()\n             .readValue(jwsObject.getPayload().toString(), PayloadClaimsWrapper.class);\n     assertThat(claims.verifiableCredential()).isEqualTo(vc);\n   }\n-\n-  private boolean verify(String jws) {\n-    return verify(jws, JWKS_PROPERTIES.currentPublicJwk());\n-  }\n-\n-  @SneakyThrows\n-  private boolean verify(String jws, JWK publicJwk) {\n-    JWSVerifier verifier = new ECDSAVerifier(publicJwk.toECKey());\n-    JWSObject jwsObject = JWSObject.parse(jws);\n-    return jwsObject.verify(verifier);\n-  }\n }"
  },
  {
    "sha": "f3a7eb183b08b9d1548079a38cd7f5f822b527a0",
    "filename": "smart-cards/src/test/java/gov/va/api/health/smartcards/WellKnownJwksControllerTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 23,
    "changes": 24,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/WellKnownJwksControllerTest.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/WellKnownJwksControllerTest.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/test/java/gov/va/api/health/smartcards/WellKnownJwksControllerTest.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -2,35 +2,13 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import com.nimbusds.jose.jwk.Curve;\n-import com.nimbusds.jose.jwk.ECKey;\n-import com.nimbusds.jose.jwk.JWKSet;\n-import com.nimbusds.jose.jwk.gen.ECKeyGenerator;\n-import java.util.List;\n-import lombok.SneakyThrows;\n import org.junit.jupiter.api.Test;\n \n public class WellKnownJwksControllerTest {\n \n-  private static final ECKey KEY_CURRENT = genEcJwk(\"123\");\n-\n-  private static final ECKey KEY_OTHER = genEcJwk(\"456\");\n-\n-  @SneakyThrows\n-  private static JwksProperties _jwksProperties() {\n-    JWKSet jwks = new JWKSet(List.of(KEY_CURRENT, KEY_OTHER));\n-    String jwkSet = jwks.toString(false);\n-    return new JwksProperties(jwkSet, \"123\");\n-  }\n-\n-  @SneakyThrows\n-  private static ECKey genEcJwk(String kid) {\n-    return new ECKeyGenerator(Curve.P_256).keyID(kid).generate();\n-  }\n-\n   @Test\n   public void test() {\n-    var jwksProperties = _jwksProperties();\n+    var jwksProperties = JwsHelpers.jwksProperties(\"123\");\n     var controller = new WellKnownJwksController(jwksProperties);\n     assertThat(controller.read()).isEqualTo(jwksProperties.jwksPublicJson());\n   }"
  },
  {
    "sha": "6ac6c7f79579ec8d58aa6a98c9c869166b863311",
    "filename": "smart-cards/src/test/java/gov/va/api/health/smartcards/patient/PatientControllerTest.java",
    "status": "modified",
    "additions": 84,
    "deletions": 229,
    "changes": 313,
    "blob_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/blob/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/patient/PatientControllerTest.java",
    "raw_url": "https://github.com/department-of-veterans-affairs/health-apis-smart-cards/raw/b9d5c17222389ad23fc77dec620da802f41d3cf1/smart-cards/src/test/java/gov/va/api/health/smartcards/patient/PatientControllerTest.java",
    "contents_url": "https://api.github.com/repos/department-of-veterans-affairs/health-apis-smart-cards/contents/smart-cards/src/test/java/gov/va/api/health/smartcards/patient/PatientControllerTest.java?ref=b9d5c17222389ad23fc77dec620da802f41d3cf1",
    "patch": "@@ -12,29 +12,21 @@\n import static org.mockito.Mockito.when;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n-import gov.va.api.health.r4.api.bundle.AbstractBundle;\n-import gov.va.api.health.r4.api.bundle.AbstractEntry;\n-import gov.va.api.health.r4.api.bundle.BundleLink;\n import gov.va.api.health.r4.api.bundle.MixedBundle;\n-import gov.va.api.health.r4.api.datatypes.Address;\n-import gov.va.api.health.r4.api.datatypes.Annotation;\n-import gov.va.api.health.r4.api.datatypes.CodeableConcept;\n-import gov.va.api.health.r4.api.datatypes.Coding;\n-import gov.va.api.health.r4.api.datatypes.ContactPoint;\n-import gov.va.api.health.r4.api.datatypes.ContactPoint.ContactPointSystem;\n-import gov.va.api.health.r4.api.datatypes.HumanName;\n-import gov.va.api.health.r4.api.datatypes.Identifier;\n-import gov.va.api.health.r4.api.elements.Reference;\n import gov.va.api.health.r4.api.resources.Immunization;\n import gov.va.api.health.r4.api.resources.Location;\n-import gov.va.api.health.r4.api.resources.Location.Mode;\n import gov.va.api.health.r4.api.resources.Parameters;\n import gov.va.api.health.r4.api.resources.Patient;\n import gov.va.api.health.smartcards.DataQueryFhirClient;\n import gov.va.api.health.smartcards.Exceptions;\n import gov.va.api.health.smartcards.JacksonMapperConfig;\n+import gov.va.api.health.smartcards.JwksProperties;\n+import gov.va.api.health.smartcards.JwsHelpers;\n import gov.va.api.health.smartcards.LinkProperties;\n+import gov.va.api.health.smartcards.MockResourceSamples;\n+import gov.va.api.health.smartcards.PayloadSigner;\n import gov.va.api.health.smartcards.R4MixedBundler;\n+import gov.va.api.health.smartcards.vc.PayloadClaimsWrapper;\n import gov.va.api.health.smartcards.vc.VerifiableCredential;\n import java.util.Arrays;\n import java.util.List;\n@@ -50,6 +42,11 @@\n public class PatientControllerTest {\n   public static final ObjectMapper MAPPER = JacksonMapperConfig.createMapper();\n \n+  private static final JwksProperties JWKS_PROPERTIES = JwsHelpers.jwksProperties(\"123\");\n+\n+  private static final MockResourceSamples SAMPLES =\n+      MockResourceSamples.builder().linkProperties(linkProperties()).build();\n+\n   @BeforeAll\n   static void _init() {\n     Patient.IDENTIFIER_MIN_SIZE.set(0);\n@@ -62,118 +59,44 @@ private static long countEntriesByType(MixedBundle bundle, String type) {\n         .count();\n   }\n \n+  private static Parameters doHealthCardsIssue(String vcJws, String vcCompress) {\n+    var patientBundleResponse =\n+        new ResponseEntity<>(SAMPLES.patientBundle(\"123\"), HttpStatus.ACCEPTED);\n+    var immunizationBundleResponse =\n+        new ResponseEntity<>(SAMPLES.immunizationBundle(\"123\"), HttpStatus.ACCEPTED);\n+    var locationResponse = new ResponseEntity<>(SAMPLES.location(\"loc-1\"), HttpStatus.ACCEPTED);\n+    var controller =\n+        patientController(patientBundleResponse, immunizationBundleResponse, locationResponse);\n+    var result =\n+        controller.healthCardsIssue(\"123\", parametersCovid19(), \"\", vcJws, vcCompress).getBody();\n+    assertNotNull(result);\n+    return result;\n+  }\n+\n   private static List<Parameters.Parameter> findResourceLinksFromParameters(Parameters parameters) {\n     return parameters.parameter().stream()\n         .filter(p -> \"resourceLink\".equals(p.name()))\n         .collect(toList());\n   }\n \n   @SneakyThrows\n-  private static VerifiableCredential findVcFromParameters(Parameters parameters) {\n+  private static String findVcFromParameters(Parameters parameters) {\n     var maybeParam =\n         parameters.parameter().stream()\n             .filter(p -> \"verifiableCredential\".equals(p.name()))\n             .findFirst();\n     var parameter = maybeParam.orElseThrow();\n-    return MAPPER.readValue(parameter.valueString(), VerifiableCredential.class);\n+    return parameter.valueString();\n   }\n \n-  private static Immunization.Bundle immunizationBundle(String icn) {\n-    LinkProperties linkProperties = linkProperties();\n-    var patient = Patient.builder().id(icn).name(List.of(HumanName.builder().build())).build();\n-    String vaccineSystem = \"http://hl7.org/fhir/sid/cvx\";\n-    List<Immunization> immunizations =\n-        List.of(\n-            Immunization.builder()\n-                .resourceType(\"Immunization\")\n-                .id(String.format(\"imm-1-%s\", patient.id()))\n-                .status(Immunization.Status.completed)\n-                .vaccineCode(\n-                    CodeableConcept.builder()\n-                        .coding(List.of(Coding.builder().system(vaccineSystem).code(\"207\").build()))\n-                        .text(\"COVID-19, mRNA, LNP-S, PF, 100 mcg/ 0.5 mL dose\")\n-                        .build())\n-                .patient(\n-                    Reference.builder()\n-                        .reference(linkProperties.dataQueryR4ReadUrl(patient))\n-                        .display(patient.name().stream().findFirst().get().text())\n-                        .build())\n-                .occurrenceDateTime(\"2020-12-18T12:24:55Z\")\n-                .primarySource(true)\n-                .location(\n-                    Reference.builder()\n-                        .reference(\n-                            String.format(\n-                                \"%s/loc-%s\",\n-                                linkProperties.dataQueryR4ResourceUrl(\"Location\"), patient.id()))\n-                        .display(\"Location for \" + patient.id())\n-                        .build())\n-                .note(\n-                    List.of(\n-                        Annotation.builder()\n-                            .text(\n-                                \"Dose #1 of 2 of COVID-19, mRNA, LNP-S, PF, 100 mcg/ 0.5 mL dose \"\n-                                    + \"vaccine administered.\")\n-                            .build()))\n-                .build(),\n-            Immunization.builder()\n-                .resourceType(\"Immunization\")\n-                .id(String.format(\"imm-2-%s\", patient.id()))\n-                .status(Immunization.Status.completed)\n-                .vaccineCode(\n-                    CodeableConcept.builder()\n-                        .coding(List.of(Coding.builder().system(vaccineSystem).code(\"207\").build()))\n-                        .text(\"COVID-19, mRNA, LNP-S, PF, 100 mcg/ 0.5 mL dose\")\n-                        .build())\n-                .patient(\n-                    Reference.builder()\n-                        .reference(linkProperties.dataQueryR4ReadUrl(patient))\n-                        .display(patient.name().stream().findFirst().get().text())\n-                        .build())\n-                .occurrenceDateTime(\"2021-01-14T09:30:21Z\")\n-                .primarySource(true)\n-                .location(\n-                    Reference.builder()\n-                        .reference(\n-                            String.format(\n-                                \"%s/loc-%s\",\n-                                linkProperties.dataQueryR4ResourceUrl(\"Location\"), patient.id()))\n-                        .display(\"Location for \" + patient.id())\n-                        .build())\n-                .note(\n-                    List.of(\n-                        Annotation.builder()\n-                            .text(\n-                                \"Dose #2 of 2 of COVID-19, mRNA, LNP-S, PF, 100 mcg/ 0.5 mL dose \"\n-                                    + \"vaccine administered.\")\n-                            .build()))\n-                .build());\n-    return Immunization.Bundle.builder()\n-        .type(AbstractBundle.BundleType.searchset)\n-        .link(\n-            List.of(\n-                BundleLink.builder()\n-                    .relation(BundleLink.LinkRelation.self)\n-                    .url(\n-                        String.format(\n-                            \"%s?patient=%s\",\n-                            linkProperties.dataQueryR4ResourceUrl(\"Immunization\"), patient.id()))\n-                    .build()))\n-        .total(immunizations.size())\n-        .entry(\n-            immunizations.stream()\n-                .map(\n-                    t ->\n-                        Immunization.Entry.builder()\n-                            .resource(t)\n-                            .fullUrl(linkProperties.dataQueryR4ReadUrl(t))\n-                            .search(\n-                                AbstractEntry.Search.builder()\n-                                    .mode(AbstractEntry.SearchMode.match)\n-                                    .build())\n-                            .build())\n-                .collect(toList()))\n-        .build();\n+  @SneakyThrows\n+  private static PayloadClaimsWrapper getPayloadFromJws(String jws, boolean compressed) {\n+    var jwsObject = JwsHelpers.parse(jws);\n+    var payloadJson =\n+        compressed\n+            ? JwsHelpers.decompress(jwsObject.getPayload().toBytes())\n+            : jwsObject.getPayload().toString();\n+    return MAPPER.readValue(payloadJson, PayloadClaimsWrapper.class);\n   }\n \n   private static LinkProperties linkProperties() {\n@@ -185,47 +108,6 @@ private static LinkProperties linkProperties() {\n         .build();\n   }\n \n-  private static Location location(String id) {\n-    LinkProperties linkProperties = linkProperties();\n-    return Location.builder()\n-        .id(id)\n-        .status(Location.Status.active)\n-        .name(\"Location with id \" + id)\n-        .description(\"Description for id \" + id)\n-        .mode(Mode.instance)\n-        .type(\n-            List.of(\n-                CodeableConcept.builder()\n-                    .coding(List.of(Coding.builder().display(\"SOME CODING\").build()))\n-                    .text(\"SOME TEXT\")\n-                    .build()))\n-        .telecom(\n-            List.of(\n-                ContactPoint.builder()\n-                    .system(ContactPointSystem.phone)\n-                    .value(\"123-456-7890 x0001\")\n-                    .build()))\n-        .address(\n-            Address.builder()\n-                .text(\"1901 VETERANS MEMORIAL DRIVE TEMPLE TEXAS 76504\")\n-                .line(List.of(\"1901 VETERANS MEMORIAL DRIVE\"))\n-                .city(\"TEMPLE\")\n-                .state(\"TEXAS\")\n-                .postalCode(\"76504\")\n-                .build())\n-        .physicalType(\n-            CodeableConcept.builder()\n-                .coding(List.of(Coding.builder().display(\"PHYS TYPE CODING\").build()))\n-                .text(\"PHYS TYPE TEXT\")\n-                .build())\n-        .managingOrganization(\n-            Reference.builder()\n-                .reference(linkProperties.dataQueryR4ResourceUrl(\"Organization\") + \"/org-\" + id)\n-                .display(\"MNG ORG VA MEDICAL\")\n-                .build())\n-        .build();\n-  }\n-\n   private static Parameters parametersCovid19() {\n     return parametersWithCredentialType(\"https://smarthealth.cards#covid19\");\n   }\n@@ -243,67 +125,6 @@ private static Parameters parametersWithCredentialType(String... credentialType)\n         .build();\n   }\n \n-  private static Patient.Bundle patientBundle(String id) {\n-    LinkProperties linkProperties = linkProperties();\n-    String firstName = \"Joe\" + id;\n-    String lastName = \"Doe\" + id;\n-    Patient patient =\n-        Patient.builder()\n-            .resourceType(\"Patient\")\n-            .id(id)\n-            .identifier(\n-                List.of(\n-                    Identifier.builder().id(id).use(Identifier.IdentifierUse.temp).build(),\n-                    Identifier.builder()\n-                        .use(Identifier.IdentifierUse.usual)\n-                        .type(\n-                            CodeableConcept.builder()\n-                                .coding(\n-                                    List.of(\n-                                        Coding.builder()\n-                                            .system(\"http://hl7.org/fhir/v2/0203\")\n-                                            .code(\"MR\")\n-                                            .build()))\n-                                .build())\n-                        .system(\"http://va.gov/mpi\")\n-                        .value(id)\n-                        .assigner(Reference.builder().display(\"Master Patient Index\").build())\n-                        .build()))\n-            .active(true)\n-            .name(\n-                List.of(\n-                    HumanName.builder()\n-                        .use(HumanName.NameUse.anonymous)\n-                        .text(String.format(\"%s %s\", firstName, lastName))\n-                        .family(lastName)\n-                        .given(List.of(firstName))\n-                        .build()))\n-            .gender(Patient.Gender.unknown)\n-            .birthDate(\"1955-01-01\")\n-            .deceasedBoolean(false)\n-            .build();\n-    return Patient.Bundle.builder()\n-        .type(AbstractBundle.BundleType.searchset)\n-        .link(\n-            List.of(\n-                BundleLink.builder()\n-                    .relation(BundleLink.LinkRelation.self)\n-                    .url(\n-                        String.format(\n-                            \"%s?_id=%s\", linkProperties.dataQueryR4ResourceUrl(\"Patient\"), id))\n-                    .build()))\n-        .total(1)\n-        .entry(\n-            List.of(\n-                Patient.Entry.builder()\n-                    .resource(patient)\n-                    .fullUrl(linkProperties.dataQueryR4ReadUrl(patient))\n-                    .search(\n-                        AbstractEntry.Search.builder().mode(AbstractEntry.SearchMode.match).build())\n-                    .build()))\n-        .build();\n-  }\n-\n   private static PatientController patientController(\n       ResponseEntity<Patient.Bundle> patientBundleResponse,\n       ResponseEntity<Immunization.Bundle> immunizationBundleResponse,\n@@ -326,7 +147,8 @@ private static PatientController patientController(\n     }\n     var fhirClient = new DataQueryFhirClient(mockRestTemplate, linkProperties());\n     var bundler = new R4MixedBundler();\n-    return new PatientController(fhirClient, bundler);\n+    var signer = new PayloadSigner(JWKS_PROPERTIES, linkProperties());\n+    return new PatientController(fhirClient, signer, bundler);\n   }\n \n   private static Parameters.Parameter resourceLink(String resource, String url) {\n@@ -340,16 +162,11 @@ private static PatientController patientController(\n   }\n \n   @Test\n+  @SneakyThrows\n   void healthCardsIssue() {\n-    var patientBundleResponse = new ResponseEntity<>(patientBundle(\"123\"), HttpStatus.ACCEPTED);\n-    var immunizationBundleResponse =\n-        new ResponseEntity<>(immunizationBundle(\"123\"), HttpStatus.ACCEPTED);\n-    var locationResponse = new ResponseEntity<>(location(\"loc-1\"), HttpStatus.ACCEPTED);\n-    var controller =\n-        patientController(patientBundleResponse, immunizationBundleResponse, locationResponse);\n-    var result = controller.healthCardsIssue(\"123\", parametersCovid19(), \"\").getBody();\n-    assertNotNull(result);\n-    var vc = findVcFromParameters(result);\n+    var result = doHealthCardsIssue(\"false\", \"false\");\n+    var vcJson = findVcFromParameters(result);\n+    var vc = MAPPER.readValue(vcJson, VerifiableCredential.class);\n     assertThat(vc.context()).isEqualTo(List.of(\"https://www.w3.org/2018/credentials/v1\"));\n     assertThat(vc.type()).contains(\"VerifiableCredential\", \"https://smarthealth.cards#covid19\");\n     var fhirBundle = vc.credentialSubject().fhirBundle();\n@@ -382,24 +199,57 @@ void healthCardsIssue() {\n   }\n \n   @Test\n-  void healthCardsIssue_EmptyParameters() {\n+  void healthCardsIssue_emptyParameters() {\n     var controller = patientController(null, null, null);\n     // Empty List\n     assertThrows(\n         Exceptions.BadRequest.class,\n-        () -> controller.healthCardsIssue(\"123\", parametersEmpty(), \"\"));\n+        () -> controller.healthCardsIssue(\"123\", parametersEmpty(), \"\", \"\", \"\"));\n     // null List\n     assertThrows(\n         Exceptions.BadRequest.class,\n-        () -> controller.healthCardsIssue(\"123\", parametersEmpty().parameter(null), \"\"));\n+        () -> controller.healthCardsIssue(\"123\", parametersEmpty().parameter(null), \"\", \"\", \"\"));\n   }\n \n   @Test\n   void healthCardsIssue_invalidCredentialType() {\n     var controller = patientController(null, null, null);\n     assertThrows(\n         Exceptions.InvalidCredentialType.class,\n-        () -> controller.healthCardsIssue(\"123\", parametersWithCredentialType(\"NOPE\"), \"\"));\n+        () -> controller.healthCardsIssue(\"123\", parametersWithCredentialType(\"NOPE\"), \"\", \"\", \"\"));\n+  }\n+\n+  /**\n+   * This test only verifies that the signed and compressed response is consistent with the unsigned\n+   * version. The VerifiableCredential structure is tested through the `healthCardsIssue` test.\n+   */\n+  @Test\n+  @SneakyThrows\n+  void healthCardsIssue_signedAndCompressed() {\n+    var result = doHealthCardsIssue(\"\", \"\");\n+    var jws = findVcFromParameters(result);\n+    assertThat(JwsHelpers.verify(jws, JWKS_PROPERTIES.currentPublicJwk())).isTrue();\n+    var payloadClaims = getPayloadFromJws(jws, true);\n+    var resultNotSigned = doHealthCardsIssue(\"false\", \"false\");\n+    var vc = MAPPER.readValue(findVcFromParameters(resultNotSigned), VerifiableCredential.class);\n+    assertThat(payloadClaims.verifiableCredential()).isEqualTo(vc);\n+  }\n+\n+  /**\n+   * This test only verifies that the signed and uncompressed response is consistent with the\n+   * unsigned version. The VerifiableCredential structure is tested through the `healthCardsIssue`\n+   * test.\n+   */\n+  @Test\n+  @SneakyThrows\n+  void healthCardsIssue_signedButNotCompressed() {\n+    var resultSigned = doHealthCardsIssue(\"\", \"false\");\n+    var jws = findVcFromParameters(resultSigned);\n+    assertThat(JwsHelpers.verify(jws, JWKS_PROPERTIES.currentPublicJwk())).isTrue();\n+    var payloadClaims = getPayloadFromJws(jws, false);\n+    var resultNotSigned = doHealthCardsIssue(\"false\", \"false\");\n+    var vc = MAPPER.readValue(findVcFromParameters(resultNotSigned), VerifiableCredential.class);\n+    assertThat(payloadClaims.verifiableCredential()).isEqualTo(vc);\n   }\n \n   @Test\n@@ -409,12 +259,17 @@ void healthCardsIssue_unimplementedCredentialType() {\n         Exceptions.NotImplemented.class,\n         () ->\n             controller.healthCardsIssue(\n-                \"123\", parametersWithCredentialType(\"https://smarthealth.cards#immunization\"), \"\"));\n+                \"123\",\n+                parametersWithCredentialType(\"https://smarthealth.cards#immunization\"),\n+                \"\",\n+                \"\",\n+                \"\"));\n   }\n \n   @Test\n   void initDirectFieldAccess() {\n-    new PatientController(mock(DataQueryFhirClient.class), mock(R4MixedBundler.class))\n+    new PatientController(\n+            mock(DataQueryFhirClient.class), mock(PayloadSigner.class), mock(R4MixedBundler.class))\n         .initDirectFieldAccess(mock(DataBinder.class));\n   }\n }"
  }
]
