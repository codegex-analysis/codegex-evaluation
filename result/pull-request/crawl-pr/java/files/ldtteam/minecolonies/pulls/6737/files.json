[
  {
    "sha": "213e9f6785ee13a91ac6fb73619a47918b3787ff",
    "filename": ".idea/gradle.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/.idea/gradle.xml",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/.idea/gradle.xml",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/.idea/gradle.xml?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -8,13 +8,12 @@\n         <option name=\"testRunner\" value=\"GRADLE\" />\n         <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n         <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n-        <option name=\"gradleHome\" value=\"/usr/share/java/gradle\" />\n+        <option name=\"gradleJvm\" value=\"#JAVA_HOME\" />\n         <option name=\"modules\">\n           <set>\n             <option value=\"$PROJECT_DIR$\" />\n           </set>\n         </option>\n-        <option name=\"useQualifiedModuleNames\" value=\"true\" />\n       </GradleProjectSettings>\n     </option>\n   </component>"
  },
  {
    "sha": "20b99ac7216e2a083145c32e1752fdd88a04077c",
    "filename": "src/api/java/com/minecolonies/api/advancements/AdvancementTriggers.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/AdvancementTriggers.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/AdvancementTriggers.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/advancements/AdvancementTriggers.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -3,7 +3,9 @@\n import com.minecolonies.api.advancements.all_towers.AllTowersTrigger;\n import com.minecolonies.api.advancements.army_population.ArmyPopulationTrigger;\n import com.minecolonies.api.advancements.building_add_recipe.BuildingAddRecipeTrigger;\n+import com.minecolonies.api.advancements.citizen_bury.CitizenBuryTrigger;\n import com.minecolonies.api.advancements.citizen_eat_food.CitizenEatFoodTrigger;\n+import com.minecolonies.api.advancements.citizen_resurrect.citizen_bury.CitizenResurrectTrigger;\n import com.minecolonies.api.advancements.click_gui_button.ClickGuiButtonTrigger;\n import com.minecolonies.api.advancements.colony_population.ColonyPopulationTrigger;\n import com.minecolonies.api.advancements.complete_build_request.CompleteBuildRequestTrigger;\n@@ -34,6 +36,8 @@\n     public static final MaxFieldsTrigger            MAX_FIELDS             = new MaxFieldsTrigger();\n     public static final DeepMineTrigger             DEEP_MINE              = new DeepMineTrigger();\n     public static final AllTowersTrigger            ALL_TOWERS             = new AllTowersTrigger();\n+    public static final CitizenBuryTrigger          CITIZEN_BURY           = new CitizenBuryTrigger();\n+    public static final CitizenResurrectTrigger CITIZEN_RESURRECT      = new CitizenResurrectTrigger();\n \n     /**\n      * Registers all the triggers so they can be referenced in the advancement JSON\n@@ -53,5 +57,7 @@ public static void preInit()\n         CriteriaTriggers.register(MAX_FIELDS);\n         CriteriaTriggers.register(DEEP_MINE);\n         CriteriaTriggers.register(ALL_TOWERS);\n+        CriteriaTriggers.register(CITIZEN_BURY);\n+        CriteriaTriggers.register(CITIZEN_RESURRECT);\n     }\n }"
  },
  {
    "sha": "ccd56a85cbecdc7a262c419aa7f205a0ce893092",
    "filename": "src/api/java/com/minecolonies/api/advancements/citizen_bury/CitizenBuryCriterionInstance.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/citizen_bury/CitizenBuryCriterionInstance.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/citizen_bury/CitizenBuryCriterionInstance.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/advancements/citizen_bury/CitizenBuryCriterionInstance.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,17 @@\n+package com.minecolonies.api.advancements.citizen_bury;\n+\n+import com.minecolonies.api.util.constant.Constants;\n+import net.minecraft.advancements.criterion.CriterionInstance;\n+import net.minecraft.advancements.criterion.EntityPredicate;\n+import net.minecraft.util.ResourceLocation;\n+\n+/**\n+ * A citizen is buried criterion instance.\n+ */\n+public class CitizenBuryCriterionInstance extends CriterionInstance\n+{\n+    public CitizenBuryCriterionInstance()\n+    {\n+        super(new ResourceLocation(Constants.MOD_ID, Constants.CRITERION_CITIZEN_BURY), EntityPredicate.AndPredicate.ANY_AND);\n+    }\n+}"
  },
  {
    "sha": "16a128927cffe661a8338bf60b25e3099dad987a",
    "filename": "src/api/java/com/minecolonies/api/advancements/citizen_bury/CitizenBuryTrigger.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/citizen_bury/CitizenBuryTrigger.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/citizen_bury/CitizenBuryTrigger.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/advancements/citizen_bury/CitizenBuryTrigger.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,43 @@\n+package com.minecolonies.api.advancements.citizen_bury;\n+\n+import com.google.gson.JsonObject;\n+import com.minecolonies.api.advancements.AbstractCriterionTrigger;\n+import com.minecolonies.api.advancements.CriterionListeners;\n+import com.minecolonies.api.util.constant.Constants;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.loot.ConditionArrayParser;\n+import net.minecraft.util.ResourceLocation;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * A Trigger that is triggered when a citizen is buried in a graveyard\n+ */\n+public class CitizenBuryTrigger extends AbstractCriterionTrigger<CriterionListeners<CitizenBuryCriterionInstance>, CitizenBuryCriterionInstance>\n+{\n+    private final static ResourceLocation ID = new ResourceLocation(Constants.MOD_ID, Constants.CRITERION_CITIZEN_BURY);\n+\n+    public CitizenBuryTrigger()\n+    {\n+        super(ID, CriterionListeners::new);\n+    }\n+\n+    /**\n+     * Triggers the listener checks if there are any listening in\n+     * @param player the player the check regards\n+     */\n+    public void trigger(final ServerPlayerEntity player)\n+    {\n+        final CriterionListeners<CitizenBuryCriterionInstance> listeners = this.getListeners(player.getAdvancements());\n+        if (listeners != null)\n+        {\n+            listeners.trigger();\n+        }\n+    }\n+\n+    @NotNull\n+    @Override\n+    public CitizenBuryCriterionInstance deserialize(@NotNull final JsonObject object, @NotNull final ConditionArrayParser conditions)\n+    {\n+        return new CitizenBuryCriterionInstance();\n+    }\n+}"
  },
  {
    "sha": "79eee7ff96700c9c8aac805e5db773b2feaedb9e",
    "filename": "src/api/java/com/minecolonies/api/advancements/citizen_resurrect/citizen_bury/CitizenResurrectCriterionInstance.java",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/citizen_resurrect/citizen_bury/CitizenResurrectCriterionInstance.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/citizen_resurrect/citizen_bury/CitizenResurrectCriterionInstance.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/advancements/citizen_resurrect/citizen_bury/CitizenResurrectCriterionInstance.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,17 @@\n+package com.minecolonies.api.advancements.citizen_resurrect.citizen_bury;\n+\n+import com.minecolonies.api.util.constant.Constants;\n+import net.minecraft.advancements.criterion.CriterionInstance;\n+import net.minecraft.advancements.criterion.EntityPredicate;\n+import net.minecraft.util.ResourceLocation;\n+\n+/**\n+ * A citizen is buried criterion instance.\n+ */\n+public class CitizenResurrectCriterionInstance extends CriterionInstance\n+{\n+    public CitizenResurrectCriterionInstance()\n+    {\n+        super(new ResourceLocation(Constants.MOD_ID, Constants.CRITERION_CITIZEN_RESURRECT), EntityPredicate.AndPredicate.ANY_AND);\n+    }\n+}"
  },
  {
    "sha": "a2e3e5b9bd401882bf7c591c8fcfeb98b7e1e277",
    "filename": "src/api/java/com/minecolonies/api/advancements/citizen_resurrect/citizen_bury/CitizenResurrectTrigger.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/citizen_resurrect/citizen_bury/CitizenResurrectTrigger.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/advancements/citizen_resurrect/citizen_bury/CitizenResurrectTrigger.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/advancements/citizen_resurrect/citizen_bury/CitizenResurrectTrigger.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,43 @@\n+package com.minecolonies.api.advancements.citizen_resurrect.citizen_bury;\n+\n+import com.google.gson.JsonObject;\n+import com.minecolonies.api.advancements.AbstractCriterionTrigger;\n+import com.minecolonies.api.advancements.CriterionListeners;\n+import com.minecolonies.api.util.constant.Constants;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.loot.ConditionArrayParser;\n+import net.minecraft.util.ResourceLocation;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * A Trigger that is triggered when the miner reaches a certain depth\n+ */\n+public class CitizenResurrectTrigger extends AbstractCriterionTrigger<CriterionListeners<CitizenResurrectCriterionInstance>, CitizenResurrectCriterionInstance>\n+{\n+    private final static ResourceLocation ID = new ResourceLocation(Constants.MOD_ID, Constants.CRITERION_CITIZEN_RESURRECT);\n+\n+    public CitizenResurrectTrigger()\n+    {\n+        super(ID, CriterionListeners::new);\n+    }\n+\n+    /**\n+     * Triggers the listener checks if there are any listening in\n+     * @param player the player the check regards\n+     */\n+    public void trigger(final ServerPlayerEntity player)\n+    {\n+        final CriterionListeners<CitizenResurrectCriterionInstance> listeners = this.getListeners(player.getAdvancements());\n+        if (listeners != null)\n+        {\n+            listeners.trigger();\n+        }\n+    }\n+\n+    @NotNull\n+    @Override\n+    public CitizenResurrectCriterionInstance deserialize(@NotNull final JsonObject object, @NotNull final ConditionArrayParser conditions)\n+    {\n+        return new CitizenResurrectCriterionInstance();\n+    }\n+}"
  },
  {
    "sha": "d9917383e1e238982f1dc7223638457e7ac90ec0",
    "filename": "src/api/java/com/minecolonies/api/blocks/AbstractBlockMinecoloniesGrave.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/blocks/AbstractBlockMinecoloniesGrave.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/blocks/AbstractBlockMinecoloniesGrave.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/blocks/AbstractBlockMinecoloniesGrave.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,22 @@\n+package com.minecolonies.api.blocks;\n+\n+import com.minecolonies.api.blocks.types.GraveType;\n+import net.minecraft.block.HorizontalBlock;\n+import net.minecraft.state.DirectionProperty;\n+import net.minecraft.state.EnumProperty;\n+\n+public abstract class AbstractBlockMinecoloniesGrave<B extends AbstractBlockMinecoloniesGrave<B>> extends AbstractBlockMinecolonies<B>\n+{\n+    public static final EnumProperty<GraveType> VARIANT = EnumProperty.create(\"variant\", GraveType.class);\n+\n+    /**\n+     * The position it faces.\n+     */\n+    public static final DirectionProperty      FACING       = HorizontalBlock.HORIZONTAL_FACING;\n+\n+    public AbstractBlockMinecoloniesGrave(final Properties properties)\n+    {\n+        super(properties.notSolid());\n+    }\n+\n+}"
  },
  {
    "sha": "4ae369d1db57f94e4cc0cbe1e587206b65d99dcd",
    "filename": "src/api/java/com/minecolonies/api/blocks/AbstractBlockMinecoloniesNamedGrave.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/blocks/AbstractBlockMinecoloniesNamedGrave.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/blocks/AbstractBlockMinecoloniesNamedGrave.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/blocks/AbstractBlockMinecoloniesNamedGrave.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,47 @@\n+package com.minecolonies.api.blocks;\n+\n+import com.minecolonies.api.util.constant.Suppression;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.HorizontalBlock;\n+import net.minecraft.item.BlockItem;\n+import net.minecraft.item.Item;\n+import net.minecraft.state.DirectionProperty;\n+import net.minecraftforge.registries.IForgeRegistry;\n+\n+public abstract class AbstractBlockMinecoloniesNamedGrave<B extends AbstractBlockMinecoloniesNamedGrave<B>> extends AbstractBlockMinecolonies<B>\n+{\n+    /**\n+     * The direction the block is facing.\n+     */\n+    public static final DirectionProperty FACING = HorizontalBlock.HORIZONTAL_FACING;\n+\n+    public AbstractBlockMinecoloniesNamedGrave(final Properties properties)\n+    {\n+        super(properties.notSolid());\n+    }\n+\n+    /**\n+     * Registery block at gameregistry.\n+     *\n+     * @param registry the registry to use.\n+     * @return the block itself.\n+     */\n+    @Override\n+    @SuppressWarnings(Suppression.UNCHECKED)\n+    public B registerBlock(final IForgeRegistry<Block> registry)\n+    {\n+        registry.register(this);\n+        return (B) this;\n+    }\n+\n+    /**\n+     * Registery block at gameregistry.\n+     *\n+     * @param registry the registry to use.\n+     */\n+    @Override\n+    public void registerBlockItem(final IForgeRegistry<Item> registry, final Item.Properties properties)\n+    {\n+        registry.register((new BlockItem(this, properties)).setRegistryName(this.getRegistryName()));\n+    }\n+}"
  },
  {
    "sha": "0df9e75e16537d4e1b55e0ae3228b135aea70482",
    "filename": "src/api/java/com/minecolonies/api/blocks/ModBlocks.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/blocks/ModBlocks.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/blocks/ModBlocks.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/blocks/ModBlocks.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -64,12 +64,15 @@\n     public static AbstractBlockHut<? extends AbstractBlockHut<?>> blockHutConcreteMixer;\n     public static AbstractBlockHut<? extends AbstractBlockHut<?>> blockHutBeekeeper;\n     public static AbstractBlockHut<? extends AbstractBlockHut<?>> blockHutMysticalSite;\n+    public static AbstractBlockHut<? extends AbstractBlockHut<?>> blockHutGraveyard;\n \n     /**\n      * Utility blocks.\n      */\n     public static AbstractBlockMinecoloniesConstructionTape<? extends AbstractBlockMinecoloniesConstructionTape<?>> blockConstructionTape;\n     public static AbstractBlockMinecoloniesRack<? extends AbstractBlockMinecoloniesRack<?>>             blockRack;\n+    public static AbstractBlockMinecoloniesGrave<? extends AbstractBlockMinecoloniesGrave<?>>           blockGrave;\n+    public static AbstractBlockMinecoloniesNamedGrave<? extends AbstractBlockMinecoloniesNamedGrave<?>> blockNamedGrave;\n     public static AbstractBlockMinecolonies<? extends AbstractBlockMinecolonies<?>>                     blockWayPoint;\n     public static AbstractBlockBarrel<? extends AbstractBlockBarrel<?>>                                 blockBarrel;\n     public static AbstractBlockMinecoloniesHorizontal<? extends AbstractBlockMinecoloniesHorizontal<?>> blockDecorationPlaceholder;\n@@ -136,6 +139,7 @@ private ModBlocks()\n           blockHutBeekeeper,\n           blockHutMysticalSite,\n           blockHutFlorist,\n-          blockPostBox};\n+          blockPostBox,\n+          blockHutGraveyard};\n     }\n }"
  },
  {
    "sha": "9487f620a6b41349e8e72c36683345a04ebe27a1",
    "filename": "src/api/java/com/minecolonies/api/blocks/types/GraveType.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/blocks/types/GraveType.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/blocks/types/GraveType.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/blocks/types/GraveType.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,70 @@\n+package com.minecolonies.api.blocks.types;\n+\n+import com.minecolonies.api.blocks.AbstractBlockMinecoloniesGrave;\n+import net.minecraft.util.IStringSerializable;\n+\n+/**\n+ * Defines the types of Grave that the {@link AbstractBlockMinecoloniesGrave} supports.\n+ */\n+public enum GraveType implements IStringSerializable\n+{\n+    DEFAULT(0, \"blockgravedefault\", \"default\"),\n+    DECAYED(1, \"blockgravedecayed\", \"decayed\");\n+\n+    private static final GraveType[] META_LOOKUP = new GraveType[values().length];\n+    static\n+    {\n+        for (final GraveType blockGrave : values())\n+        {\n+            META_LOOKUP[blockGrave.getMetadata()] = blockGrave;\n+        }\n+    }\n+    private final int    meta;\n+    private final String name;\n+    private final String unlocalizedName;\n+\n+    GraveType(final int meta, final String name, final String unlocalizedName)\n+    {\n+        this.meta = meta;\n+        this.name = name;\n+        this.unlocalizedName = unlocalizedName;\n+    }\n+\n+    public static GraveType byMetadata(final int meta)\n+    {\n+        int tempMeta = meta;\n+        if (tempMeta < 0 || tempMeta >= META_LOOKUP.length)\n+        {\n+            tempMeta = 0;\n+        }\n+\n+        return META_LOOKUP[tempMeta];\n+    }\n+\n+    public int getMetadata()\n+    {\n+        return this.meta;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return this.name;\n+    }\n+\n+    public String getName()\n+    {\n+        return this.name;\n+    }\n+\n+    public String getTranslationKey()\n+    {\n+        return this.unlocalizedName;\n+    }\n+\n+    @Override\n+    public String getString()\n+    {\n+        return getName();\n+    }\n+}"
  },
  {
    "sha": "af36ddb0492636845ff247c3ad8c8c5e3f953a47",
    "filename": "src/api/java/com/minecolonies/api/client/render/modeltype/BipedModelType.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/client/render/modeltype/BipedModelType.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/client/render/modeltype/BipedModelType.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/client/render/modeltype/BipedModelType.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -16,6 +16,7 @@\n     LUMBERJACK(\"lumberjack\", 1),\n     FARMER(\"farmer\", 1),\n     FISHERMAN(\"fisherman\", 1),\n+    UNDERTAKER(\"undertaker\", 1),\n     ARCHER_GUARD(\"archer\", 1),\n     KNIGHT_GUARD(\"knight\", 1),\n     BAKER(\"baker\", 1),"
  },
  {
    "sha": "18b8645c73db67711716d23e1060df6818ca3b2b",
    "filename": "src/api/java/com/minecolonies/api/colony/GraveData.java",
    "status": "added",
    "additions": 111,
    "deletions": 0,
    "changes": 111,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/GraveData.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/GraveData.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/colony/GraveData.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,111 @@\n+package com.minecolonies.api.colony;\n+\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.StringNBT;\n+import org.jetbrains.annotations.Nullable;\n+\n+public class GraveData implements IGraveData\n+{\n+    /**\n+     * NBTTag to store the last grave owner.\n+     */\n+    private static final String TAG_CITIZEN_NBT = \"citizennbt\";\n+\n+    /**\n+     * NBTTag to store the name of the last grave owner name.\n+     */\n+    private static final String TAG_CITIZEN_NAME = \"citizenname\";\n+\n+    /**\n+     * NBTTag to store the name of the last grave owner job name.\n+     */\n+    private static final String TAG_CITIZEN_JOB_NAME = \"citizenjobname\";\n+\n+    /**\n+     * The data NBT of the citizen .\n+     */\n+    @Nullable\n+    private CompoundNBT citizenDataNBT = null;\n+\n+    /**\n+     * The name of the citizen.\n+     */\n+    @Nullable\n+    private String citizenName = null;\n+\n+    /**\n+     * The name of the job of the citizen\n+     */\n+    @Nullable\n+    private String citizenJobName = null;\n+\n+    /**\n+     * get the data NBT of the citizen .\n+     */\n+    @Nullable\n+    public CompoundNBT getCitizenDataNBT()\n+    {\n+        return citizenDataNBT;\n+    }\n+\n+    /**\n+     * Set data NBT of the citizen .\n+     */\n+    public void setCitizenDataNBT(@Nullable final CompoundNBT citizenDataNBT)\n+    {\n+        this.citizenDataNBT = citizenDataNBT;\n+    }\n+\n+    /**\n+     * Get the name of the citizen.\n+     */\n+    @Nullable\n+    public String getCitizenName()\n+    {\n+        return citizenName;\n+    }\n+\n+    /**\n+     * Set the name of the citizen.\n+     */\n+    public void setCitizenName(@Nullable final String citizenName)\n+    {\n+        this.citizenName = citizenName;\n+    }\n+\n+    /**\n+     * Get the name of the job of the citizen\n+     */\n+    @Nullable\n+    public String getCitizenJobName()\n+    {\n+        return citizenJobName;\n+    }\n+\n+    /**\n+     * Set the name of the job of the citizen\n+     */\n+    public void setCitizenJobName(@Nullable final String citizenJobName)\n+    {\n+        this.citizenJobName = citizenJobName;\n+    }\n+\n+    @Override\n+    public void read(CompoundNBT compound)\n+    {\n+        citizenDataNBT  = compound.keySet().contains(TAG_CITIZEN_NBT) ? compound.getCompound(TAG_CITIZEN_NBT) : null;\n+        citizenName     = compound.keySet().contains(TAG_CITIZEN_NAME) ? compound.getString(TAG_CITIZEN_NAME) : null;\n+        citizenJobName  = compound.keySet().contains(TAG_CITIZEN_JOB_NAME) ? compound.getString(TAG_CITIZEN_JOB_NAME) : null;\n+    }\n+\n+    @Override\n+    public CompoundNBT write()\n+    {\n+        final CompoundNBT compound = new CompoundNBT();\n+        if (citizenDataNBT != null) { compound.put(TAG_CITIZEN_NBT, citizenDataNBT); }\n+        if (citizenName != null)    { compound.put(TAG_CITIZEN_NAME, StringNBT.valueOf(citizenName)); }\n+        if (citizenJobName != null) { compound.put(TAG_CITIZEN_JOB_NAME,StringNBT.valueOf(citizenJobName)); }\n+\n+        return compound;\n+    }\n+}"
  },
  {
    "sha": "acedc136c5461caf27a572e40df29c36e6e860ea",
    "filename": "src/api/java/com/minecolonies/api/colony/IGraveData.java",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/IGraveData.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/IGraveData.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/colony/IGraveData.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,55 @@\n+package com.minecolonies.api.colony;\n+\n+import net.minecraft.nbt.CompoundNBT;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Data to store in a citizen grave\n+ */\n+public interface IGraveData\n+{\n+    /**\n+     * get the data NBT of the citizen .\n+     */\n+    @Nullable\n+    CompoundNBT getCitizenDataNBT();\n+\n+    /**\n+     * Set data NBT of the citizen .\n+     */\n+    void setCitizenDataNBT(@Nullable CompoundNBT citizenDataNBT);\n+\n+    /**\n+     * Get the name of the citizen.\n+     */\n+    @Nullable\n+    String getCitizenName();\n+\n+    /**\n+     * Set the name of the citizen.\n+     */\n+    void setCitizenName(@Nullable String citizenName);\n+\n+    /**\n+     * Get the name of the job of the citizen\n+     */\n+    @Nullable\n+    String getCitizenJobName();\n+\n+    /**\n+     * Set the name of the job of the citizen\n+     */\n+    void setCitizenJobName(@Nullable String citizenJobName);\n+\n+    /**\n+     * Read this CitizenData from the compoundNBT\n+     * @param compoundNBT\n+     */\n+    void read(CompoundNBT compoundNBT);\n+\n+    /**\n+     * Write this CitizenData to a coumpoundNBT\n+     * @return\n+     */\n+    CompoundNBT write();\n+}"
  },
  {
    "sha": "e75fe1646836df6b9723dc1b4cac0ba4bdb80a64",
    "filename": "src/api/java/com/minecolonies/api/colony/buildings/ModBuildings.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/buildings/ModBuildings.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/buildings/ModBuildings.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/colony/buildings/ModBuildings.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -51,6 +51,7 @@\n     public static final String RABBIT_ID         = \"rabbithutch\";\n     public static final String BEEKEEPER_ID      = \"beekeeper\";\n     public static final String MYSTICAL_SITE_ID  = \"mysticalsite\";\n+    public static final String GRAVEYARD_ID      = \"graveyard\";\n \n     public static BuildingEntry archery;\n     public static BuildingEntry bakery;\n@@ -98,6 +99,7 @@\n     public static BuildingEntry rabbitHutch;\n     public static BuildingEntry beekeeper;\n     public static BuildingEntry mysticalSite;\n+    public static BuildingEntry graveyard;\n \n     private ModBuildings()\n     {"
  },
  {
    "sha": "25b8dc472d4ba868ba4e905132d3a57ad38c0bc8",
    "filename": "src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -13,6 +13,7 @@\n     public static final ResourceLocation MINER_ID          = new ResourceLocation(Constants.MOD_ID, \"miner\");\n     public static final ResourceLocation LUMBERJACK_ID     = new ResourceLocation(Constants.MOD_ID, \"lumberjack\");\n     public static final ResourceLocation FARMER_ID         = new ResourceLocation(Constants.MOD_ID, \"farmer\");\n+    public static final ResourceLocation UNDERTAKER_ID     = new ResourceLocation(Constants.MOD_ID, \"undertaker\");\n     public static final ResourceLocation FISHERMAN_ID      = new ResourceLocation(Constants.MOD_ID, \"fisherman\");\n     public static final ResourceLocation BAKER_ID          = new ResourceLocation(Constants.MOD_ID, \"baker\");\n     public static final ResourceLocation COOK_ID           = new ResourceLocation(Constants.MOD_ID, \"cook\");\n@@ -56,6 +57,7 @@\n     public static JobEntry lumberjack;\n     public static JobEntry farmer;\n     public static JobEntry fisherman;\n+    public static JobEntry undertaker;\n     public static JobEntry baker;\n     public static JobEntry cook;\n     public static JobEntry shepherd;"
  },
  {
    "sha": "ed7601504adbb2fac381ad697b27e3c3c9eb7deb",
    "filename": "src/api/java/com/minecolonies/api/colony/managers/interfaces/IBuildingManager.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/managers/interfaces/IBuildingManager.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/managers/interfaces/IBuildingManager.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/colony/managers/interfaces/IBuildingManager.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -8,6 +8,8 @@\n import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n import com.minecolonies.api.tileentities.AbstractScarecrowTileEntity;\n import com.minecolonies.api.tileentities.AbstractTileEntityColonyBuilding;\n+import com.minecolonies.api.tileentities.AbstractTileEntityGrave;\n+import com.mojang.serialization.RecordBuilder;\n import net.minecraft.block.Block;\n import net.minecraft.entity.player.PlayerEntity;\n import net.minecraft.entity.player.ServerPlayerEntity;\n@@ -204,6 +206,15 @@\n      */\n     BlockPos getBestRestaurant(final AbstractEntityCitizen citizen);\n \n+    /**\n+     * Calculate the closest graveyard that satisfy the given predicate for a certain citizen\n+     *\n+     * @param citizen the citizen.\n+     * @param predicate to validate the graveyard.\n+     * @return the Position of it.\n+     */\n+    BlockPos getClosestGraveyard(AbstractEntityCitizen citizen, Predicate<Object> predicate);\n+\n     /**\n      * Calculate a good hospital for a certain citizen.\n      *"
  },
  {
    "sha": "f907b75405378a7dc25ec74af586be32049f7a9d",
    "filename": "src/api/java/com/minecolonies/api/colony/managers/interfaces/ICitizenManager.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/managers/interfaces/ICitizenManager.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/colony/managers/interfaces/ICitizenManager.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/colony/managers/interfaces/ICitizenManager.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -1,6 +1,7 @@\n package com.minecolonies.api.colony.managers.interfaces;\n \n import com.minecolonies.api.colony.ICitizenData;\n+import net.minecraft.nbt.CompoundNBT;\n import net.minecraft.util.math.BlockPos;\n import net.minecraft.world.World;\n import org.jetbrains.annotations.NotNull;\n@@ -60,6 +61,17 @@ default ICitizenData spawnOrCreateCitizen(final ICitizenData data, @NotNull fina\n     @Override\n     ICitizenData createAndRegisterCivilianData();\n \n+    /**\n+     * Resurrect a citizen from its saved NBT.\n+     *\n+     * @param compoundNBT the saved citizen NBT\n+     * @param resetId if true, will calculate a new citizen ID\n+     * @param world\n+     * @param spawnPos position where to resurrect the citizen\n+     * @return the citizenData of the resurrected citizen\n+     */\n+    ICitizenData resurrectCivilianData(@NotNull final CompoundNBT compoundNBT, final boolean resetId, @NotNull final World world, final BlockPos spawnPos);\n+\n     /**\n      * Get all citizens.\n      *"
  },
  {
    "sha": "cd320c18d2ac8dcce2406471a588ffd3699016a8",
    "filename": "src/api/java/com/minecolonies/api/entity/ai/statemachine/states/AIWorkerState.java",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/entity/ai/statemachine/states/AIWorkerState.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/entity/ai/statemachine/states/AIWorkerState.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/entity/ai/statemachine/states/AIWorkerState.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -163,6 +163,30 @@\n      */\n     FARMER_HARVEST(false),\n \n+      /*\n+###Undertaker###\n+    */\n+\n+    /**\n+     * Empty The grave\n+     */\n+    EMPTY_GRAVE(false),\n+\n+    /**\n+     * Dig The grave\n+     */\n+    DIG_GRAVE(false),\n+\n+    /**\n+     * Bury the citizen\n+     */\n+    BURY_CITIZEN(false),\n+\n+    /**\n+     * Attempt Resurrect\n+     */\n+    TRY_RESURRECT(false),\n+\n       /*\n ###Guard###\n     */"
  },
  {
    "sha": "ee79aea1508d733311d6fd4f2c5c28fc6d6d731c",
    "filename": "src/api/java/com/minecolonies/api/inventory/InventoryCitizen.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/inventory/InventoryCitizen.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/inventory/InventoryCitizen.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/inventory/InventoryCitizen.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -178,6 +178,16 @@ public boolean isEmpty()\n         return freeSlots == mainInventory.size();\n     }\n \n+    /**\n+     * Checks if the inventory is completely full.\n+     *\n+     * @return true if the main inventory (without armor slots) is completely full.\n+     */\n+    public boolean isFull()\n+    {\n+        return freeSlots == 0;\n+    }\n+\n     /**\n      * Resize this inventory.\n      *"
  },
  {
    "sha": "d0f8707fd66b9a622140bcd61aab867d8cf81fcc",
    "filename": "src/api/java/com/minecolonies/api/inventory/ModContainers.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/inventory/ModContainers.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/inventory/ModContainers.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/inventory/ModContainers.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -20,6 +20,9 @@\n     @ObjectHolder(\"rack_inv\")\n     public static ContainerType<ContainerRack> rackInv;\n \n+    @ObjectHolder(\"grave_inv\")\n+    public static ContainerType<ContainerGrave> graveInv;\n+\n     @ObjectHolder(\"crafting_building\")\n     public static ContainerType<ContainerCrafting> craftingGrid;\n "
  },
  {
    "sha": "953e569e75bf64cfee27ee2c30d3264d0a3f3f45",
    "filename": "src/api/java/com/minecolonies/api/inventory/container/ContainerGrave.java",
    "status": "added",
    "additions": 188,
    "deletions": 0,
    "changes": 188,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/inventory/container/ContainerGrave.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/inventory/container/ContainerGrave.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/inventory/container/ContainerGrave.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,188 @@\n+package com.minecolonies.api.inventory.container;\n+\n+import com.minecolonies.api.inventory.ModContainers;\n+import com.minecolonies.api.tileentities.AbstractTileEntityGrave;\n+import com.minecolonies.api.tileentities.AbstractTileEntityRack;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.inventory.container.ClickType;\n+import net.minecraft.inventory.container.Container;\n+import net.minecraft.inventory.container.Slot;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraftforge.items.IItemHandler;\n+import net.minecraftforge.items.SlotItemHandler;\n+import net.minecraftforge.items.wrapper.CombinedInvWrapper;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.minecolonies.api.util.constant.InventoryConstants.*;\n+\n+/**\n+ * The container class for the grave.\n+ */\n+public class ContainerGrave extends Container\n+{\n+    /**\n+     * The inventory.\n+     */\n+    private final IItemHandler inventory;\n+\n+    /**\n+     * The tileEntity.\n+     */\n+    public final AbstractTileEntityGrave grave;\n+\n+    /**\n+     * Amount of rows.\n+     */\n+    private final int inventorySize;\n+\n+    /**\n+     * Deserialize packet buffer to container instance.\n+     *\n+     * @param windowId     the id of the window.\n+     * @param inv          the player inventory.\n+     * @param packetBuffer network buffer\n+     * @return new instance\n+     */\n+    public static ContainerGrave fromPacketBuffer(final int windowId, final PlayerInventory inv, final PacketBuffer packetBuffer)\n+    {\n+        return new ContainerGrave(windowId, inv, packetBuffer);\n+    }\n+\n+    /**\n+     * The container constructor.\n+     *\n+     * @param windowId the window id.\n+     * @param inv      the inventory.\n+     * @param extra    some extra data.\n+     */\n+    public ContainerGrave(final int windowId, final PlayerInventory inv, final PacketBuffer extra)\n+    {\n+        super(ModContainers.graveInv, windowId);\n+        final BlockPos grave = extra.readBlockPos();\n+\n+        final AbstractTileEntityGrave abstractTileEntityGrave = (AbstractTileEntityGrave) inv.player.world.getTileEntity(grave);\n+        this.inventory = abstractTileEntityGrave.getInventory();\n+\n+        this.grave = abstractTileEntityGrave;\n+        this.inventorySize = this.inventory.getSlots() / INVENTORY_COLUMNS;\n+        final int size = this.inventory.getSlots();\n+\n+        final int columns = inventorySize <= INVENTORY_BAR_SIZE ? INVENTORY_COLUMNS : ((size / INVENTORY_BAR_SIZE) + 1);\n+        final int extraOffset = inventorySize <= INVENTORY_BAR_SIZE ? 0 : 2;\n+        int index = 0;\n+\n+        for (int j = 0; j < Math.min(this.inventorySize, INVENTORY_BAR_SIZE); ++j)\n+        {\n+            for (int k = 0; k < columns; ++k)\n+            {\n+                if (index < size)\n+                {\n+                    this.addSlot(\n+                      new SlotItemHandler(inventory, index,\n+                        INVENTORY_BAR_SIZE + k * PLAYER_INVENTORY_OFFSET_EACH,\n+                        PLAYER_INVENTORY_OFFSET_EACH + j * PLAYER_INVENTORY_OFFSET_EACH));\n+                    index++;\n+                }\n+            }\n+        }\n+\n+        // Player inventory slots\n+        // Note: The slot numbers are within the player inventory and may be the same as the field inventory.\n+        int i;\n+        for (i = 0; i < INVENTORY_ROWS; i++)\n+        {\n+            for (int j = 0; j < INVENTORY_COLUMNS; j++)\n+            {\n+                addSlot(new Slot(\n+                  inv,\n+                  j + i * INVENTORY_COLUMNS + INVENTORY_COLUMNS,\n+                  PLAYER_INVENTORY_INITIAL_X_OFFSET + j * PLAYER_INVENTORY_OFFSET_EACH,\n+                  PLAYER_INVENTORY_INITIAL_Y_OFFSET + extraOffset + PLAYER_INVENTORY_OFFSET_EACH * Math.min(this.inventorySize, INVENTORY_BAR_SIZE)\n+                    + i * PLAYER_INVENTORY_OFFSET_EACH\n+                ));\n+            }\n+        }\n+\n+        for (i = 0; i < INVENTORY_COLUMNS; i++)\n+        {\n+            addSlot(new Slot(\n+              inv, i,\n+              PLAYER_INVENTORY_INITIAL_X_OFFSET + i * PLAYER_INVENTORY_OFFSET_EACH,\n+              PLAYER_INVENTORY_HOTBAR_OFFSET + extraOffset + PLAYER_INVENTORY_OFFSET_EACH * Math.min(this.inventorySize,\n+                INVENTORY_BAR_SIZE)\n+            ));\n+        }\n+    }\n+\n+    @NotNull\n+    @Override\n+    public ItemStack slotClick(int slotId, int dragType, ClickType clickTypeIn, PlayerEntity player)\n+    {\n+        if (player.world.isRemote || slotId >= inventory.getSlots() || slotId < 0)\n+        {\n+            return super.slotClick(slotId, dragType, clickTypeIn, player);\n+        }\n+\n+        final ItemStack result = super.slotClick(slotId, dragType, clickTypeIn, player);\n+        return result;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public ItemStack transferStackInSlot(final PlayerEntity playerIn, final int index)\n+    {\n+        final Slot slot = this.inventorySlots.get(index);\n+\n+        if (slot == null || !slot.getHasStack())\n+        {\n+            return ItemStackUtils.EMPTY;\n+        }\n+\n+        final ItemStack stackCopy = slot.getStack().copy();\n+\n+        final int maxIndex = this.inventorySize * INVENTORY_COLUMNS;\n+\n+        if (index < maxIndex)\n+        {\n+            if (!this.mergeItemStack(stackCopy, maxIndex, this.inventorySlots.size(), true))\n+            {\n+                return ItemStackUtils.EMPTY;\n+            }\n+        }\n+        else if (!this.mergeItemStack(stackCopy, 0, maxIndex, false))\n+        {\n+            return ItemStackUtils.EMPTY;\n+        }\n+\n+        if (ItemStackUtils.getSize(stackCopy) == 0)\n+        {\n+            slot.putStack(ItemStackUtils.EMPTY);\n+        }\n+        else\n+        {\n+            slot.putStack(stackCopy);\n+            slot.onSlotChanged();\n+        }\n+\n+        return stackCopy;\n+    }\n+\n+    @Override\n+    protected boolean mergeItemStack(final ItemStack stack, final int startIndex, final int endIndex, final boolean reverseDirection)\n+    {\n+        final ItemStack before = stack.copy();\n+        final boolean merge =  super.mergeItemStack(stack, startIndex, endIndex, reverseDirection);\n+        return merge;\n+    }\n+\n+    @Override\n+    public boolean canInteractWith(final PlayerEntity playerIn)\n+    {\n+        return true;\n+    }\n+}"
  },
  {
    "sha": "00fffe63b7bd1ef70c065e57ecc7c6a5c34a43be",
    "filename": "src/api/java/com/minecolonies/api/research/util/ResearchConstants.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/research/util/ResearchConstants.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/research/util/ResearchConstants.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/research/util/ResearchConstants.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -105,6 +105,8 @@\n     public static final ResourceLocation HEALTH_BOOST                 = new ResourceLocation(Constants.MOD_ID, \"effects/healthaddition\");\n     public static final ResourceLocation MELEE_DAMAGE                 = new ResourceLocation(Constants.MOD_ID, \"effects/meleedamageaddition\");\n     public static final ResourceLocation WORK_LONGER                  = new ResourceLocation(Constants.MOD_ID, \"effects/workingdayhaddition\");\n+    public static final ResourceLocation RESURRECT_CHANCE             = new ResourceLocation(Constants.MOD_ID, \"effects/resurrectchanceaddition\");\n+    public static final ResourceLocation GRAVE_DECAY_BONUS            = new ResourceLocation(Constants.MOD_ID, \"effects/gravedecaybonus\");\n \n     //Multiplier Modifiers\n     public static final ResourceLocation ARCHER_ARMOR      = new ResourceLocation(Constants.MOD_ID, \"effects/archerarmormultiplier\");"
  },
  {
    "sha": "c46bbe942f385d7bb960c7287bde948b0e0ce705",
    "filename": "src/api/java/com/minecolonies/api/tileentities/AbstractTileEntityGrave.java",
    "status": "added",
    "additions": 149,
    "deletions": 0,
    "changes": 149,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/AbstractTileEntityGrave.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/AbstractTileEntityGrave.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/tileentities/AbstractTileEntityGrave.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,149 @@\n+package com.minecolonies.api.tileentities;\n+\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IGraveData;\n+import net.minecraft.inventory.container.INamedContainerProvider;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.tileentity.ITickableTileEntity;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraft.tileentity.TileEntityType;\n+import net.minecraftforge.items.IItemHandlerModifiable;\n+import net.minecraftforge.items.ItemStackHandler;\n+import org.jetbrains.annotations.Nullable;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.minecolonies.api.research.util.ResearchConstants.RESURRECT_CHANCE;\n+import static com.minecolonies.api.util.constant.Constants.*;\n+\n+public abstract class AbstractTileEntityGrave extends TileEntity implements INamedContainerProvider, ITickableTileEntity\n+{\n+    /**\n+     * The inventory of the tileEntity.\n+     */\n+    protected ItemStackHandler inventory;\n+\n+    /**\n+     * default duration of the countdown before the grave disapear, in ticks (20 ticks / seconds)\n+     */\n+    protected static final int DEFAULT_DECAY_TIMER = TICKS_FIVE_MIN;\n+\n+    /**\n+     * Is this grave decayed or not\n+     */\n+    protected boolean decayed;\n+\n+    /**\n+     * The decay timer counting down before the grave decay and then disapear\n+     */\n+    protected int decay_timer;\n+\n+    /**\n+     * The GraveData of the citizen that spawned this grave.\n+     */\n+    @Nullable\n+    protected IGraveData graveData;\n+\n+    public AbstractTileEntityGrave(final TileEntityType<?> tileEntityTypeIn)\n+    {\n+        super(tileEntityTypeIn);\n+        inventory = createInventory(DEFAULT_SIZE);\n+        decay_timer = DEFAULT_DECAY_TIMER;\n+        decayed = false;\n+    }\n+\n+    /**\n+     * Delay the decay timer by minutes\n+     * @param minutes number of minutes to delay the time by\n+     */\n+    public void delayDecayTimer(final double minutes)\n+    {\n+        decay_timer += minutes * TICKS_SECOND * 60;\n+    }\n+\n+    /**\n+     * Grave inventory type.\n+     */\n+    public class GraveInventory extends ItemStackHandler\n+    {\n+        public GraveInventory(final int defaultSize)\n+        {\n+            super(defaultSize);\n+        }\n+\n+        @Override\n+        protected void onContentsChanged(final int slot)\n+        {\n+            updateItemStorage();\n+            super.onContentsChanged(slot);\n+        }\n+\n+        @Override\n+        public void setStackInSlot(final int slot, final @Nonnull ItemStack stack)\n+        {\n+            validateSlotIndex(slot);\n+            final boolean changed = !ItemStack.areItemStacksEqual(stack, this.stacks.get(slot));\n+            this.stacks.set(slot, stack);\n+            if (changed)\n+            {\n+                onContentsChanged(slot);\n+            }\n+        }\n+\n+        @Nonnull\n+        @Override\n+        public ItemStack insertItem(final int slot, @Nonnull final ItemStack stack, final boolean simulate)\n+        {\n+            final ItemStack result = super.insertItem(slot, stack, simulate);\n+            return result;\n+        }\n+    }\n+\n+    /**\n+     * Create the inventory that belongs to the grave.\n+     * @param slots the number of slots.\n+     * @return the created inventory,\n+     */\n+    public abstract ItemStackHandler createInventory(final int slots);\n+\n+    /**\n+     * Scans through the whole storage and updates it.\n+     */\n+    public abstract void updateItemStorage();\n+\n+    /**\n+     * Update the blockState of the rack. Switch between connected, single, full and empty texture.\n+     */\n+    protected abstract void updateBlockState();\n+\n+    /**\n+     * Checks if the chest is empty. This method checks the content list, it is therefore extremely fast.\n+     *\n+     * @return true if so.\n+     */\n+    public abstract boolean isEmpty();\n+\n+    public IItemHandlerModifiable getInventory()\n+    {\n+        return inventory;\n+    }\n+\n+    /**\n+     * Get the graveData of the saved citizen\n+     */\n+    public IGraveData getGraveData()\n+    {\n+        return graveData;\n+    }\n+\n+    /**\n+     * Set the graveData of the saved citizen\n+     * @param graveData\n+     */\n+    public void setGraveData(IGraveData graveData)\n+    {\n+        this.graveData = graveData;\n+        markDirty();\n+    }\n+}"
  },
  {
    "sha": "63064931073c1ec00e3b11a01b8e66d2abb8e845",
    "filename": "src/api/java/com/minecolonies/api/tileentities/AbstractTileEntityNamedGrave.java",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/AbstractTileEntityNamedGrave.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/AbstractTileEntityNamedGrave.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/tileentities/AbstractTileEntityNamedGrave.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,124 @@\n+package com.minecolonies.api.tileentities;\n+\n+import com.minecolonies.api.inventory.container.ContainerGrave;\n+import com.minecolonies.api.util.WorldUtil;\n+import io.netty.buffer.Unpooled;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.HorizontalBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.inventory.container.Container;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.nbt.StringNBT;\n+import net.minecraft.network.NetworkManager;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.network.play.server.SUpdateTileEntityPacket;\n+import net.minecraft.state.DirectionProperty;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraft.tileentity.TileEntityType;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.StringTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.minecolonies.api.util.constant.Constants.*;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+public class AbstractTileEntityNamedGrave extends TileEntity\n+{\n+    /**\n+     * The position it faces.\n+     */\n+    public static final DirectionProperty FACING       = HorizontalBlock.HORIZONTAL_FACING;\n+\n+    /**\n+     * The text displayed on the name plate\n+     */\n+    private ArrayList<String> textLines = new ArrayList<>();\n+\n+    public AbstractTileEntityNamedGrave(TileEntityType<?> tileEntityTypeIn)\n+    {\n+        super(tileEntityTypeIn);\n+        textLines.add(\"Unknown Citizen\");\n+    }\n+\n+    public ArrayList<String> getTextLines()\n+    {\n+        return textLines;\n+    }\n+\n+    public void setTextLines(final ArrayList<String> content)\n+    {\n+        this.textLines = content;\n+        markDirty();\n+    }\n+\n+    @Override\n+    public void read(final BlockState state, final CompoundNBT compound)\n+    {\n+        super.read(state, compound);\n+\n+        textLines.clear();\n+        if (compound.keySet().contains(TAG_CONTENT))\n+        {\n+            final ListNBT lines = compound.getList(TAG_CONTENT, TAG_STRING);\n+            for (int i = 0; i < lines.size(); i++)\n+            {\n+                final String line = lines.getString(i);\n+                textLines.add(line);\n+            }\n+        }\n+    }\n+\n+    @NotNull\n+    @Override\n+    public CompoundNBT write(final CompoundNBT compound)\n+    {\n+        super.write(compound);\n+\n+        @NotNull final ListNBT lines = new ListNBT();\n+        for (@NotNull final String line : textLines)\n+        {\n+            lines.add(StringNBT.valueOf(line));\n+        }\n+        compound.put(TAG_CONTENT, lines);\n+\n+        return compound;\n+    }\n+\n+    @Override\n+    public SUpdateTileEntityPacket getUpdatePacket()\n+    {\n+        final CompoundNBT compound = new CompoundNBT();\n+        return new SUpdateTileEntityPacket(this.pos, 0, this.write(compound));\n+    }\n+\n+    @NotNull\n+    @Override\n+    public CompoundNBT getUpdateTag()\n+    {\n+        return this.write(new CompoundNBT());\n+    }\n+\n+    @Override\n+    public void onDataPacket(final NetworkManager net, final SUpdateTileEntityPacket packet)\n+    {\n+        this.read(getBlockState(), packet.getNbtCompound());\n+    }\n+\n+    @Override\n+    public void handleUpdateTag(final BlockState state, final CompoundNBT tag)\n+    {\n+        this.read(state, tag);\n+    }\n+\n+    @Override\n+    public void markDirty()\n+    {\n+        WorldUtil.markChunkDirty(world, pos);\n+    }\n+}"
  },
  {
    "sha": "074d0f279aa8ed0cdf52284e7e4a7b691ba9b88c",
    "filename": "src/api/java/com/minecolonies/api/tileentities/MinecoloniesTileEntities.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/MinecoloniesTileEntities.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/MinecoloniesTileEntities.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/tileentities/MinecoloniesTileEntities.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -23,6 +23,12 @@\n     @ObjectHolder(\"rack\")\n     public static TileEntityType<TileEntityRack> RACK;\n \n+    @ObjectHolder(\"grave\")\n+    public static TileEntityType<TileEntityGrave> GRAVE;\n+\n+    @ObjectHolder(\"namedgrave\")\n+    public static TileEntityType<? extends TileEntityNamedGrave> NAMED_GRAVE;\n+\n     @ObjectHolder(\"warehouse\")\n     public static TileEntityType<? extends AbstractTileEntityWareHouse> WAREHOUSE;\n "
  },
  {
    "sha": "5ec405ce71513036cf7e56cac0dab1931c737f80",
    "filename": "src/api/java/com/minecolonies/api/tileentities/TileEntityGrave.java",
    "status": "added",
    "additions": 274,
    "deletions": 0,
    "changes": 274,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/TileEntityGrave.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/TileEntityGrave.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/tileentities/TileEntityGrave.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,274 @@\n+package com.minecolonies.api.tileentities;\n+\n+import com.minecolonies.api.blocks.AbstractBlockMinecoloniesGrave;\n+import com.minecolonies.api.blocks.types.GraveType;\n+import com.minecolonies.api.colony.GraveData;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.inventory.container.ContainerGrave;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.WorldUtil;\n+import io.netty.buffer.Unpooled;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.inventory.container.Container;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.NetworkManager;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.network.play.server.SUpdateTileEntityPacket;\n+import net.minecraft.tileentity.TileEntityType;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.StringTextComponent;\n+import net.minecraftforge.items.ItemStackHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.annotation.Nullable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.minecolonies.api.util.constant.Constants.*;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+/**\n+ * Tile entity for the graves.\n+ */\n+public class TileEntityGrave extends AbstractTileEntityGrave\n+{\n+    /**\n+     * The content of the chest.\n+     */\n+    private final Map<ItemStorage, Integer> content = new HashMap<>();\n+\n+    /**\n+     * NBTTag to store grave data.\n+     */\n+    private static final String TAG_GRAVE_DATA = \"gravedata\";\n+\n+    public TileEntityGrave(final TileEntityType<? extends TileEntityGrave> type)\n+    {\n+        super(type);\n+    }\n+\n+    public TileEntityGrave()\n+    {\n+        super(MinecoloniesTileEntities.GRAVE);\n+    }\n+\n+    /**\n+     * Gets the content of the gave\n+     *\n+     * @return the map of content.\n+     */\n+    public Map<ItemStorage, Integer> getAllContent()\n+    {\n+        return content;\n+    }\n+\n+    @Override\n+    public void updateItemStorage()\n+    {\n+        if (world != null && !world.isRemote)\n+        {\n+            final boolean empty = content.isEmpty();\n+            updateContent();\n+\n+            if ((empty && !content.isEmpty()) || !empty && content.isEmpty())\n+            {\n+                updateBlockState();\n+            }\n+            markDirty();\n+        }\n+    }\n+\n+    /**\n+     * Just do the content update.\n+     */\n+    private void updateContent()\n+    {\n+        content.clear();\n+        for (int slot = 0; slot < inventory.getSlots(); slot++)\n+        {\n+            final ItemStack stack = inventory.getStackInSlot(slot);\n+\n+            if (ItemStackUtils.isEmpty(stack))\n+            {\n+                continue;\n+            }\n+\n+            final ItemStorage storage = new ItemStorage(stack.copy());\n+            int amount = ItemStackUtils.getSize(stack);\n+            if (content.containsKey(storage))\n+            {\n+                amount += content.remove(storage);\n+            }\n+            content.put(storage, amount);\n+        }\n+    }\n+\n+    @Override\n+    public void updateBlockState()\n+    {\n+        if (world != null && world.getBlockState(pos).getBlock() instanceof AbstractBlockMinecoloniesGrave)\n+        {\n+            final BlockState state = world.getBlockState(pos).with(AbstractBlockMinecoloniesGrave.VARIANT, decayed ? GraveType.DECAYED : GraveType.DEFAULT);\n+            if (!world.getBlockState(pos).equals(state))\n+            {\n+                world.setBlockState(pos, state);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ItemStackHandler createInventory(final int slots)\n+    {\n+        return new GraveInventory(slots);\n+    }\n+\n+    @Override\n+    public boolean isEmpty()\n+    {\n+        updateContent();\n+        return content.isEmpty();\n+    }\n+\n+    @Override\n+    public void read(final BlockState state, final CompoundNBT compound)\n+    {\n+        super.read(state, compound);\n+        inventory = createInventory(DEFAULT_SIZE);\n+\n+        final ListNBT inventoryTagList = compound.getList(TAG_INVENTORY, TAG_COMPOUND);\n+        for (int i = 0; i < inventoryTagList.size(); i++)\n+        {\n+            final CompoundNBT inventoryCompound = inventoryTagList.getCompound(i);\n+            if (!inventoryCompound.contains(TAG_EMPTY))\n+            {\n+                final ItemStack stack = ItemStack.read(inventoryCompound);\n+                inventory.setStackInSlot(i, stack);\n+            }\n+        }\n+\n+        decay_timer         = compound.contains(TAG_DECAY_TIMER) ? compound.getInt(TAG_DECAY_TIMER) : DEFAULT_DECAY_TIMER;\n+        decayed             = compound.contains(TAG_DECAYED) ? compound.getBoolean(TAG_DECAYED) :false;\n+\n+        if (compound.keySet().contains(TAG_GRAVE_DATA))\n+        {\n+            graveData = new GraveData();\n+            graveData.read(compound.getCompound(TAG_GRAVE_DATA));\n+        }\n+        else graveData = null;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public CompoundNBT write(final CompoundNBT compound)\n+    {\n+        super.write(compound);\n+\n+        @NotNull final ListNBT inventoryTagList = new ListNBT();\n+        for (int slot = 0; slot < inventory.getSlots(); slot++)\n+        {\n+            @NotNull final CompoundNBT inventoryCompound = new CompoundNBT();\n+            final ItemStack stack = inventory.getStackInSlot(slot);\n+            if (stack.isEmpty())\n+            {\n+                inventoryCompound.putBoolean(TAG_EMPTY, true);\n+            }\n+            else\n+            {\n+                stack.write(inventoryCompound);\n+            }\n+            inventoryTagList.add(inventoryCompound);\n+        }\n+        compound.put(TAG_INVENTORY, inventoryTagList);\n+        compound.putInt(TAG_DECAY_TIMER, decay_timer);\n+        compound.putBoolean(TAG_DECAYED, decayed);\n+\n+        if(graveData != null)\n+        {\n+            compound.put(TAG_GRAVE_DATA, graveData.write());\n+        }\n+\n+        return compound;\n+    }\n+\n+    @Override\n+    public SUpdateTileEntityPacket getUpdatePacket()\n+    {\n+        final CompoundNBT compound = new CompoundNBT();\n+        return new SUpdateTileEntityPacket(this.pos, 0, this.write(compound));\n+    }\n+\n+    @NotNull\n+    @Override\n+    public CompoundNBT getUpdateTag()\n+    {\n+        return this.write(new CompoundNBT());\n+    }\n+\n+    @Override\n+    public void onDataPacket(final NetworkManager net, final SUpdateTileEntityPacket packet)\n+    {\n+        this.read(getBlockState(), packet.getNbtCompound());\n+    }\n+\n+    @Override\n+    public void handleUpdateTag(final BlockState state, final CompoundNBT tag)\n+    {\n+        this.read(state, tag);\n+    }\n+\n+    @Override\n+    public void markDirty()\n+    {\n+        WorldUtil.markChunkDirty(world, pos);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Container createMenu(final int id, @NotNull final PlayerInventory inv, @NotNull final PlayerEntity player)\n+    {\n+        final PacketBuffer buffer = new PacketBuffer(Unpooled.buffer());\n+        buffer.writeBlockPos(this.getPos());\n+\n+        return new ContainerGrave(id, inv, buffer);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public ITextComponent getDisplayName()\n+    {\n+        return new StringTextComponent(\"Grave\");\n+    }\n+\n+    /**\n+     * Since the TileEntity implements ITickableTileEntity, we get an update method which is called once per tick (20 times / second)\n+     * When the timer elapses, decay the grave.\n+     **/\n+    @Override\n+    public void tick()\n+    {\n+        if (this.hasWorld() && !world.isRemote && decay_timer != -1)\n+        {\n+            --decay_timer;\n+            if (decay_timer <= 0)\n+            {\n+                if (!decayed)\n+                {\n+                    decayed = true;\n+                    decay_timer = DEFAULT_DECAY_TIMER;\n+                    updateBlockState();\n+                }\n+                else\n+                {\n+                    InventoryUtils.dropItemHandler(inventory, world, this.pos.getX(), this.pos.getY(), this.pos.getZ());\n+                    world.setBlockState(this.pos, Blocks.AIR.getDefaultState());\n+                }\n+            }\n+        }\n+    }\n+}"
  },
  {
    "sha": "8a1f9a80bd106058f20f6376a0f26414cc1086a0",
    "filename": "src/api/java/com/minecolonies/api/tileentities/TileEntityNamedGrave.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/TileEntityNamedGrave.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/tileentities/TileEntityNamedGrave.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/tileentities/TileEntityNamedGrave.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -0,0 +1,24 @@\n+package com.minecolonies.api.tileentities;\n+\n+import net.minecraft.tileentity.TileEntityType;\n+\n+public class TileEntityNamedGrave extends AbstractTileEntityNamedGrave\n+{\n+    /**\n+     * Default constructor used to create a new TileEntity via reflection. Do not use.\n+     */\n+    public TileEntityNamedGrave()\n+    {\n+        this(MinecoloniesTileEntities.NAMED_GRAVE);\n+    }\n+\n+    /**\n+     * Alternative overriden constructor.\n+     *\n+     * @param type the entity type.\n+     */\n+    public TileEntityNamedGrave(final TileEntityType<? extends TileEntityNamedGrave> type)\n+    {\n+        super(type);\n+    }\n+}"
  },
  {
    "sha": "b1c6b409ac25951c71ccefa0e0234dfeb5910faf",
    "filename": "src/api/java/com/minecolonies/api/util/BlockPosUtil.java",
    "status": "modified",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/util/BlockPosUtil.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/util/BlockPosUtil.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/util/BlockPosUtil.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -1,6 +1,9 @@\n package com.minecolonies.api.util;\n \n import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n import net.minecraft.block.AirBlock;\n import net.minecraft.block.Block;\n@@ -27,6 +30,7 @@\n import org.jetbrains.annotations.Nullable;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Random;\n import java.util.function.Predicate;\n \n@@ -229,6 +233,53 @@ public static boolean isPositionSafe(@NotNull final World sender, final BlockPos\n                  && sender.getWorldBorder().contains(blockPos);\n     }\n \n+\n+    /**\n+     * this find the building that the BlockPos bellong to\n+     *\n+     * @param world   the world\n+     * @param pos for the current block\n+     */\n+    @Nullable\n+    public static IBuilding findBuilding(final World world, final BlockPos pos)\n+    {\n+        final IColony colony = IColonyManager.getInstance().getColonyByPosFromWorld(world, pos);\n+        if(colony == null)\n+        {\n+            return null;\n+        }\n+\n+        for(IBuilding building : colony.getBuildingManager().getBuildings().values())\n+        {\n+            Tuple<BlockPos, BlockPos> corners = building.getCorners();\n+\n+            final int minX = Math.min(corners.getA().getX(), corners.getB().getX());\n+            final int maxX = Math.max(corners.getA().getX(), corners.getB().getX());\n+            if(pos.getX() < minX || pos.getX() > maxX)\n+            {\n+                continue;\n+            }\n+\n+            final int minY = Math.min(corners.getA().getY(), corners.getB().getY());\n+            final int maxY = Math.max(corners.getA().getY(), corners.getB().getY());\n+            if(pos.getY() < minY || pos.getY() > maxY)\n+            {\n+                continue;\n+            }\n+\n+            final int minZ = Math.min(corners.getA().getZ(), corners.getB().getZ());\n+            final int maxZ = Math.max(corners.getA().getZ(), corners.getB().getZ());\n+            if(pos.getZ() < minZ || pos.getZ() > maxZ)\n+            {\n+                continue;\n+            }\n+\n+            return building;\n+        }\n+\n+        return null;\n+    }\n+\n     /**\n      * this checks that you are not in the air or underground. If so it will look up and down for a good landing spot before TP.\n      *"
  },
  {
    "sha": "d81ed630ad99ceb7d07a8a394bef05ccdc73ca9b",
    "filename": "src/api/java/com/minecolonies/api/util/InventoryUtils.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/util/InventoryUtils.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/util/InventoryUtils.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/util/InventoryUtils.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -2336,6 +2336,31 @@ public static void dropItemHandler(final IItemHandler handler, final World world\n         }\n     }\n \n+    /**\n+     * Attempt to transfer as much item as possible from origin to target inventory\n+     *\n+     * @param origin the handler.\n+     * @param target   the world.\n+     * @return true if all item transfered, false if some item remain in origin\n+     */\n+    public static boolean transferAllItemHandler(final IItemHandler origin, final IItemHandler target)\n+    {\n+        for (int i = 0; i < origin.getSlots(); ++i)\n+        {\n+            final ItemStack itemStack = origin.getStackInSlot(i);\n+            if(!ItemStackUtils.isEmpty(itemStack))\n+            {\n+                if(addItemStackToItemHandler(target, itemStack))\n+                {\n+                    removeStackFromItemHandler(origin, itemStack, itemStack.getCount());\n+                }\n+                else return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n     /**\n      * Spawn an itemStack in the world.\n      *"
  },
  {
    "sha": "f20496bf3308537ff51079288609cb8f7a6e08ca",
    "filename": "src/api/java/com/minecolonies/api/util/WorldUtil.java",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/util/WorldUtil.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718/src/api/java/com/minecolonies/api/util/WorldUtil.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/util/WorldUtil.java?ref=50bbc7595cc15dbca3cc8d9bfd3d11eaa1b16718",
    "patch": "@@ -25,6 +25,7 @@\n import java.util.function.Predicate;\n \n import static com.minecolonies.api.util.constant.CitizenConstants.NIGHT;\n+import static com.minecolonies.api.util.constant.CitizenConstants.NOON;\n \n /**\n  * Class which has world related util functions like chunk load checks\n@@ -155,6 +156,17 @@ public static boolean isPastTime(final World world, final int pastTime)\n         return world.getDayTime() % 24000 <= pastTime;\n     }\n \n+    /**\n+     * Check if it's currently afternoon the world.\n+     *\n+     * @param world the world to check.\n+     * @return true if so.\n+     */\n+    public static boolean isPastNoon(final World world)\n+    {\n+        return isPastTime(world, NOON);\n+    }\n+\n     /**\n      * Check if a world is of the overworld type.\n      *"
  }
]
