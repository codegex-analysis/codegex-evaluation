[
  {
    "sha": "4418bb104a6b85d59bfd7eb7305707813257427f",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/58cda94e8ef347fe28efb83e223c2c0b4048eab3/build.gradle",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/58cda94e8ef347fe28efb83e223c2c0b4048eab3/build.gradle",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/build.gradle?ref=58cda94e8ef347fe28efb83e223c2c0b4048eab3",
    "patch": "@@ -34,9 +34,6 @@ repositories {\n     flatDir {\n         dirs 'libs'\n     }\n-    maven {\n-        url = \"https://www.cursemaven.com\"\n-    }\n }\n \n apply plugin: 'net.minecraftforge.gradle'\n@@ -102,6 +99,8 @@ dependencies {\n     compile \"com.ldtteam:datagenerators:0.1.38-ALPHA\"\n     \n     implementation fg.deobf(\"mezz.jei:jei-1.16.4:${config.jei_version}\")\n+    compileOnly fg.deobf(\"com.resourcefulbees:ResourcefulBees:${config.rb_version}\")\n+    apiCompileOnly fg.deobf(\"com.resourcefulbees:ResourcefulBees:${config.rb_version}\")\n \n     testImplementation  'junit:junit:4.12'\n     testImplementation  \"org.mockito:mockito-core:1.+\"\n@@ -145,6 +144,7 @@ minecraft {\n \n             // Recommended logging level for the console\n             property 'forge.logging.console.level', 'info'\n+            properties 'mixin.env.disableRefMap': 'true'\n \n             // OPTIFINE GUIDE\n             // find and download/compile latest OptiFineDevTweaker, classifier \"all\"\n@@ -168,6 +168,7 @@ minecraft {\n \n             // Recommended logging level for the console\n             property 'forge.logging.console.level', 'info'\n+            property 'mixin.env.disableRefMap', 'true'\n \n             mods {\n                 minecolonies {"
  },
  {
    "sha": "b945880120e6b3c5ead422ec45c96a2377de3ec3",
    "filename": "build.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/58cda94e8ef347fe28efb83e223c2c0b4048eab3/build.properties",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/58cda94e8ef347fe28efb83e223c2c0b4048eab3/build.properties",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/build.properties?ref=58cda94e8ef347fe28efb83e223c2c0b4048eab3",
    "patch": "@@ -3,8 +3,9 @@\n #\n # Minecraft / Forge.\n minecraft_version=1.16.5\n-forge_version=36.0.14\n+forge_version=36.0.39\n mappings=20201028-1.16.3\n # Dependencies\n jei_version=7.6.1.71\n structurize_version=0.13.148-ALPHA\n+rb_version=1.16.5-0.6.1b"
  },
  {
    "sha": "89bab289fc80575f99eb7040a58ea32cbed64835",
    "filename": "src/api/java/com/minecolonies/api/compatibility/Compatibility.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/api/java/com/minecolonies/api/compatibility/Compatibility.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/api/java/com/minecolonies/api/compatibility/Compatibility.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/compatibility/Compatibility.java?ref=58cda94e8ef347fe28efb83e223c2c0b4048eab3",
    "patch": "@@ -1,6 +1,7 @@\n package com.minecolonies.api.compatibility;\n \n import com.minecolonies.api.compatibility.dynamictrees.DynamicTreeCompat;\n+import com.minecolonies.api.compatibility.resourcefulbees.IBeehiveCompat;\n import com.minecolonies.api.compatibility.tinkers.SlimeTreeCheck;\n import com.minecolonies.api.compatibility.tinkers.TinkersWeaponHelper;\n import com.minecolonies.api.compatibility.tinkers.ToolBrokenCheck;\n@@ -16,6 +17,8 @@\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n+import java.util.List;\n+\n import static com.minecolonies.api.util.constant.Constants.HARVESTCRAFTMODID;\n \n /**\n@@ -29,6 +32,8 @@ private Compatibility()\n         throw new IllegalAccessError(\"Utility class\");\n     }\n \n+    public static IBeehiveCompat beeHiveCompat = new IBeehiveCompat() {};\n+\n     /**\n      * This method checks to see if STACK is able to mine anything. It goes through all compatibility checks.\n      *\n@@ -268,4 +273,17 @@ public static boolean isDynamicFamilyFitting(final BlockPos block1, final BlockP\n     {\n         return DynamicTreeCompat.hasFittingTreeFamily(block1, block2, world);\n     }\n+\n+    /**\n+     * Get comps from a hive at the given position\n+     *\n+     * @param pos    TE pos\n+     * @param world  world\n+     * @param amount comb amount\n+     * @return list of drops\n+     */\n+    public static List<ItemStack> getCombsFromHive(BlockPos pos, World world, int amount)\n+    {\n+        return beeHiveCompat.getCombsFromHive(pos, world, amount);\n+    }\n }"
  },
  {
    "sha": "675fa5c45e4469af77f9ad72b0eeeba91c801ae8",
    "filename": "src/api/java/com/minecolonies/api/compatibility/CompatibilityManager.java",
    "status": "modified",
    "additions": 37,
    "deletions": 23,
    "changes": 60,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/api/java/com/minecolonies/api/compatibility/CompatibilityManager.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/api/java/com/minecolonies/api/compatibility/CompatibilityManager.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/compatibility/CompatibilityManager.java?ref=58cda94e8ef347fe28efb83e223c2c0b4048eab3",
    "patch": "@@ -6,6 +6,7 @@\n import com.minecolonies.api.IMinecoloniesAPI;\n import com.minecolonies.api.MinecoloniesAPIProxy;\n import com.minecolonies.api.crafting.CompostRecipe;\n+import com.minecolonies.api.compatibility.resourcefulbees.*;\n import com.minecolonies.api.crafting.ItemStorage;\n import com.minecolonies.api.items.ModTags;\n import com.minecolonies.api.util.*;\n@@ -27,6 +28,7 @@\n import net.minecraft.util.math.BlockPos;\n import net.minecraftforge.common.Tags;\n import net.minecraftforge.common.util.Constants;\n+import net.minecraftforge.fml.ModList;\n import net.minecraftforge.registries.ForgeRegistries;\n import org.jetbrains.annotations.NotNull;\n \n@@ -190,6 +192,7 @@ public void discover(final boolean serverSide)\n         discoverFuel();\n         discoverEnchantments();\n         discoverFreeBlocksAndPos();\n+        discoverModCompat();\n \n         discoveredAlready = true;\n     }\n@@ -200,13 +203,13 @@ public void discover(final boolean serverSide)\n     private void discoverAllItems()\n     {\n         final List<ItemStack> stacks = StreamSupport.stream(Spliterators.spliteratorUnknownSize(ForgeRegistries.ITEMS.iterator(), Spliterator.ORDERED), true)\n-                                           .flatMap(item ->\n-                                             {\n-                                                 final NonNullList<ItemStack> list = NonNullList.create();\n-                                                 item.fillItemGroup(ItemGroup.SEARCH, list);\n-                                                 return list.stream();\n-                                             })\n-                                           .collect(Collectors.toList());\n+                .flatMap(item ->\n+                {\n+                    final NonNullList<ItemStack> list = NonNullList.create();\n+                    item.fillItemGroup(ItemGroup.SEARCH, list);\n+                    return list.stream();\n+                })\n+                .collect(Collectors.toList());\n \n         allItems = ImmutableList.copyOf(stacks);\n     }\n@@ -407,21 +410,21 @@ public boolean isMineableOre(@NotNull final ItemStack stack)\n     public void write(@NotNull final CompoundNBT compound)\n     {\n         @NotNull final ListNBT saplingsLeavesTagList =\n-          leavesToSaplingMap.entrySet()\n-            .stream()\n-            .filter(entry -> entry.getKey() != null)\n-            .map(entry -> writeLeafSaplingEntryToNBT(entry.getKey().getState(), entry.getValue()))\n-            .collect(NBTUtils.toListNBT());\n+                leavesToSaplingMap.entrySet()\n+                        .stream()\n+                        .filter(entry -> entry.getKey() != null)\n+                        .map(entry -> writeLeafSaplingEntryToNBT(entry.getKey().getState(), entry.getValue()))\n+                        .collect(NBTUtils.toListNBT());\n         compound.put(TAG_SAP_LEAF, saplingsLeavesTagList);\n     }\n \n     @Override\n     public void read(@NotNull final CompoundNBT compound)\n     {\n         NBTUtils.streamCompound(compound.getList(TAG_SAP_LEAF, Constants.NBT.TAG_COMPOUND))\n-          .map(CompatibilityManager::readLeafSaplingEntryFromNBT)\n-          .filter(key -> !leavesToSaplingMap.containsKey(new BlockStateStorage(key.getA(), leafCompareWithoutProperties, true)) && !leavesToSaplingMap.containsValue(key.getB()))\n-          .forEach(key -> leavesToSaplingMap.put(new BlockStateStorage(key.getA(), leafCompareWithoutProperties, true), key.getB()));\n+                .map(CompatibilityManager::readLeafSaplingEntryFromNBT)\n+                .filter(key -> !leavesToSaplingMap.containsKey(new BlockStateStorage(key.getA(), leafCompareWithoutProperties, true)) && !leavesToSaplingMap.containsValue(key.getB()))\n+                .forEach(key -> leavesToSaplingMap.put(new BlockStateStorage(key.getA(), leafCompareWithoutProperties, true), key.getB()));\n     }\n \n     @Override\n@@ -465,7 +468,7 @@ public ItemStack getRandomLuckyOre(final double chanceBonus)\n             ench = list.get(random.nextInt(list.size()));\n         }\n         return new Tuple<>(getEnchantedItemStack(new EnchantmentData(ForgeRegistries.ENCHANTMENTS.getValue(new ResourceLocation(ench.getA())), ench.getB())),\n-          ench.getB());\n+                ench.getB());\n     }\n \n     @Override\n@@ -502,9 +505,9 @@ private void discoverOres()\n         if (oreBlocks.isEmpty())\n         {\n             oreBlocks.addAll(ImmutableList.copyOf(allItems.stream().filter(this::isMineableOre)\n-                                                    .filter(stack -> !isEmpty(stack) && stack.getItem() instanceof BlockItem)\n-                                                    .map(stack -> ((BlockItem) stack.getItem()).getBlock())\n-                                                    .collect(Collectors.toList())));\n+                    .filter(stack -> !isEmpty(stack) && stack.getItem() instanceof BlockItem)\n+                    .map(stack -> ((BlockItem) stack.getItem()).getBlock())\n+                    .collect(Collectors.toList())));\n         }\n         Log.getLogger().info(\"Finished discovering Ores\");\n     }\n@@ -553,9 +556,9 @@ private void discoverPlantables()\n         if (plantables.isEmpty())\n         {\n             plantables.addAll(ImmutableList.copyOf(allItems.stream()\n-                                                     .filter(this::isPlantable)\n-                                                     .map(ItemStorage::new)\n-                                                     .collect(Collectors.toList())));\n+                    .filter(this::isPlantable)\n+                    .map(ItemStorage::new)\n+                    .collect(Collectors.toList())));\n         }\n         Log.getLogger().info(\"Finished discovering plantables\");\n     }\n@@ -838,4 +841,15 @@ private void discoverFreeBlocksAndPos()\n             }\n         }\n     }\n-}\n+\n+    /**\n+     * Inits compats\n+     */\n+    private void discoverModCompat()\n+    {\n+        if (ModList.get().isLoaded(\"resourcefulbees\"))\n+        {\n+            Compatibility.beeHiveCompat = new ResourcefulBeesCompat();\n+        }\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "bd5d0822fe6a1f00ab72d2ffa3127ddca8529a19",
    "filename": "src/api/java/com/minecolonies/api/compatibility/resourcefulbees/IBeehiveCompat.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/api/java/com/minecolonies/api/compatibility/resourcefulbees/IBeehiveCompat.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/api/java/com/minecolonies/api/compatibility/resourcefulbees/IBeehiveCompat.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/compatibility/resourcefulbees/IBeehiveCompat.java?ref=58cda94e8ef347fe28efb83e223c2c0b4048eab3",
    "patch": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.compatibility.resourcefulbees;\n+\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public interface IBeehiveCompat\n+{\n+    /**\n+     * Get comps from a hive at the given position\n+     *\n+     * @param pos    TE pos\n+     * @param world  world\n+     * @param amount comb amount\n+     * @return list of drops\n+     */\n+    default List<ItemStack> getCombsFromHive(BlockPos pos, World world, int amount)\n+    {\n+        List<ItemStack> list = new ArrayList<>();\n+        list.add(new ItemStack(Items.HONEYCOMB, amount));\n+        return list;\n+    }\n+}"
  },
  {
    "sha": "e38ff9841b9c68229f814ea4c35634be6b8c7a1a",
    "filename": "src/api/java/com/minecolonies/api/compatibility/resourcefulbees/ResourcefulBeesCompat.java",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/api/java/com/minecolonies/api/compatibility/resourcefulbees/ResourcefulBeesCompat.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/api/java/com/minecolonies/api/compatibility/resourcefulbees/ResourcefulBeesCompat.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/api/java/com/minecolonies/api/compatibility/resourcefulbees/ResourcefulBeesCompat.java?ref=58cda94e8ef347fe28efb83e223c2c0b4048eab3",
    "patch": "@@ -0,0 +1,36 @@\n+package com.minecolonies.api.compatibility.resourcefulbees;\n+\n+import com.resourcefulbees.resourcefulbees.tileentity.TieredBeehiveTileEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ResourcefulBeesCompat implements IBeehiveCompat\n+{\n+    @Override\n+    public List<ItemStack> getCombsFromHive(BlockPos pos, World world, int amount)\n+    {\n+        List<ItemStack> list = new ArrayList<>();\n+        if (world.getTileEntity(pos) instanceof TieredBeehiveTileEntity)\n+        {\n+            //If we have a resourceful bees hive, we care about the items inside\n+            TieredBeehiveTileEntity hive = (TieredBeehiveTileEntity) world.getTileEntity(pos);\n+\n+            while (hive.hasCombs())\n+            {\n+                //Take out all combs from hive and return them to the beekeeper\n+                list.add(hive.getResourceHoneycomb());\n+            }\n+\n+            return list;\n+        }\n+        else\n+        {\n+            return IBeehiveCompat.super.getCombsFromHive(pos, world, amount);\n+        }\n+    }\n+}"
  },
  {
    "sha": "a4adbe4b833096ade61ebdedf73a52ff97fbf9a0",
    "filename": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/ldtteam/minecolonies/blob/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java",
    "raw_url": "https://github.com/ldtteam/minecolonies/raw/58cda94e8ef347fe28efb83e223c2c0b4048eab3/src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java",
    "contents_url": "https://api.github.com/repos/ldtteam/minecolonies/contents/src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java?ref=58cda94e8ef347fe28efb83e223c2c0b4048eab3",
    "patch": "@@ -1,6 +1,7 @@\n package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n \n import com.minecolonies.api.colony.interactionhandling.ChatPriority;\n+import com.minecolonies.api.compatibility.Compatibility;\n import com.minecolonies.api.entity.ai.statemachine.AITarget;\n import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n import com.minecolonies.api.util.InventoryUtils;\n@@ -185,7 +186,7 @@ private IAIState decideWhatToDo()\n \n         for (BlockPos pos : hives)\n         {\n-            if(!(world.getBlockState(pos).getBlock() instanceof BeehiveBlock))\n+            if (!(world.getBlockState(pos).getBlock() instanceof BeehiveBlock))\n             {\n                 getOwnBuilding().removeHive(pos);\n             }\n@@ -343,7 +344,11 @@ private IAIState harvestHoney()\n             if (ItemStackUtils.isTool(itemStack, ToolType.SHEARS))\n             {\n                 worker.getCitizenItemHandler().damageItemInHand(Hand.MAIN_HAND, 1);\n-                InventoryUtils.transferItemStackIntoNextBestSlotInItemHandler(new ItemStack(Items.HONEYCOMB, getHoneycombsPerHarvest()), worker.getItemHandlerCitizen());\n+\n+                for (ItemStack stackItem : Compatibility.getCombsFromHive(hive, world, getHoneycombsPerHarvest()))\n+                {\n+                    InventoryUtils.transferItemStackIntoNextBestSlotInItemHandler(stackItem, worker.getItemHandlerCitizen());\n+                }\n                 world.setBlockState(hive, world.getBlockState(hive).with(BlockStateProperties.HONEY_LEVEL, 0));\n                 worker.getCitizenExperienceHandler().addExperience(EXP_PER_HARVEST);\n             }"
  }
]
