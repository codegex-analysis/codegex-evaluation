[
  {
    "sha": "c3004054d1a81fc9dec5fc316eafd1074a8ff155",
    "filename": "app/build.gradle",
    "status": "modified",
    "additions": 35,
    "deletions": 11,
    "changes": 46,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/build.gradle",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/build.gradle",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/build.gradle?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -16,12 +16,6 @@ repositories {\n             includeGroupByRegex \"com\\\\.github\\\\.chrisbanes.*\"\n         }\n     }\n-    maven {\n-        url \"https://raw.github.com/signalapp/maven/master/shortcutbadger/releases/\"\n-        content {\n-            includeGroupByRegex \"me\\\\.leolin.*\"\n-        }\n-    }\n     maven {\n         url \"https://raw.github.com/signalapp/maven/master/circular-progress-button/releases/\"\n         content {\n@@ -61,8 +55,8 @@ protobuf {\n     }\n }\n \n-def canonicalVersionCode = 798\n-def canonicalVersionName = \"5.4.12\"\n+def canonicalVersionCode = 804\n+def canonicalVersionName = \"5.5.5\"\n \n def postFixSize = 100\n def abiPostFix = ['universal'   : 0,\n@@ -161,6 +155,8 @@ android {\n         exclude 'META-INF/LICENSE'\n         exclude 'META-INF/NOTICE'\n         exclude 'META-INF/proguard/androidx-annotations.pro'\n+        exclude '/org/spongycastle/x509/CertPathReviewerMessages.properties'\n+        exclude '/org/spongycastle/x509/CertPathReviewerMessages_de.properties'\n     }\n \n     buildTypes {\n@@ -208,6 +204,12 @@ android {\n             debuggable false\n             matchingFallbacks = ['debug']\n         }\n+        mock {\n+            initWith debug\n+            isDefault false\n+            minifyEnabled false\n+            matchingFallbacks = ['debug']\n+        }\n     }\n \n     productFlavors {\n@@ -233,6 +235,15 @@ android {\n             buildConfigField \"String\", \"NOPLAY_UPDATE_URL\", \"$ext.websiteUpdateUrl\"\n         }\n \n+        study {\n+            dimension 'distribution'\n+\n+            applicationIdSuffix \".study\"\n+            ext.websiteUpdateUrl = \"null\"\n+            buildConfigField \"boolean\", \"PLAY_STORE_DISABLED\", \"false\"\n+            buildConfigField \"String\", \"NOPLAY_UPDATE_URL\", \"$ext.websiteUpdateUrl\"\n+        }\n+\n         prod {\n             dimension 'environment'\n \n@@ -252,7 +263,7 @@ android {\n             buildConfigField \"String\", \"SIGNAL_KEY_BACKUP_URL\", \"\\\"https://api-staging.backup.signal.org\\\"\"\n             buildConfigField \"String\", \"CDS_MRENCLAVE\", \"\\\"c98e00a4e3ff977a56afefe7362a27e4961e4f19e211febfbb19b897e6b80b15\\\"\"\n             buildConfigField \"KbsEnclave\", \"KBS_ENCLAVE\", \"new KbsEnclave(\\\"823a3b2c037ff0cbe305cc48928cfcc97c9ed4a8ca6d49af6f7d6981fb60a4e9\\\", \" +\n-                                                                         \"\\\"038c40bbbacdc873caa81ac793bb75afde6dfe436a99ab1f15e3f0cbb7434ced\\\", \" +\n+                                                                         \"\\\"51a56084c0b21c6b8f62b1bc792ec9bedac4c7c3964bb08ddcab868158c09982\\\", \" +\n                                                                          \"\\\"a3baab19ef6ce6f34ab9ebb25ba722725ae44a8872dc0ff08ad6d83a9489de87\\\")\"\n             buildConfigField \"KbsEnclave[]\", \"KBS_FALLBACKS\", \"new KbsEnclave[0]\"\n             buildConfigField \"String\", \"UNIDENTIFIED_SENDER_TRUST_ROOT\", \"\\\"BbqY1DzohE4NUZoVF+L18oUPrK3kILllLEJh2UnPSsEx\\\"\"\n@@ -272,6 +283,18 @@ android {\n         }\n     }\n \n+    android.variantFilter { variant ->\n+        def distribution = variant.getFlavors().get(0).name\n+        def environment  = variant.getFlavors().get(1).name\n+        def buildType    = variant.buildType.name\n+\n+        if (distribution == 'study' && buildType != 'perf' && buildType != 'mock') {\n+            variant.setIgnore(true)\n+        } else if (distribution != 'study' && buildType == 'mock') {\n+            variant.setIgnore(true)\n+        }\n+    }\n+\n     lintOptions {\n         abortOnError true\n         baseline file(\"lint-baseline.xml\")\n@@ -334,15 +357,16 @@ dependencies {\n     implementation project(':paging')\n     implementation project(':core-util')\n     implementation project(':video')\n+    implementation project(':device-transfer')\n \n     implementation 'org.signal:zkgroup-android:0.7.0'\n     implementation 'org.whispersystems:signal-client-android:0.1.7'\n     implementation 'com.google.protobuf:protobuf-javalite:3.10.0'\n     implementation 'org.signal:argon2:13.1@aar'\n \n-    implementation 'org.signal:ringrtc-android:2.9.2'\n+    implementation 'org.signal:ringrtc-android:2.9.4'\n \n-    implementation \"me.leolin:ShortcutBadger:1.1.16\"\n+    implementation \"me.leolin:ShortcutBadger:1.1.22\"\n     implementation 'se.emilsjolander:stickylistheaders:2.7.0'\n     implementation 'com.jpardogo.materialtabstrip:library:1.0.9'\n     implementation 'org.apache.httpcomponents:httpclient-android:4.3.5'"
  },
  {
    "sha": "9e2d9a872eaa901eb93754da300c8ce43529a554",
    "filename": "app/src/main/AndroidManifest.xml",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/AndroidManifest.xml",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/AndroidManifest.xml?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -377,6 +377,16 @@\n             android:windowSoftInputMode=\"stateAlwaysHidden\">\n         </activity>\n \n+        <activity android:name=\".devicetransfer.olddevice.OldDeviceTransferActivity\"\n+            android:theme=\"@style/TextSecure.LightRegistrationTheme\"\n+            android:launchMode=\"singleTask\"\n+            android:configChanges=\"touchscreen|keyboard|keyboardHidden|orientation|screenLayout|screenSize\"/>\n+\n+        <activity android:name=\".devicetransfer.olddevice.OldDeviceExitActivity\"\n+            android:noHistory=\"true\"\n+            android:excludeFromRecents=\"true\"\n+            android:configChanges=\"touchscreen|keyboard|keyboardHidden|orientation|screenLayout|screenSize\"/>\n+\n     <activity android:name=\".registration.RegistrationNavigationActivity\"\n               android:launchMode=\"singleTask\"\n               android:theme=\"@style/TextSecure.LightRegistrationTheme\""
  },
  {
    "sha": "39fb8ab916bbffc0809c6d4f6d4cd3338169ef48",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/AppInitialization.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/AppInitialization.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/AppInitialization.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/AppInitialization.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -54,6 +54,7 @@ public static void onPostBackupRestore(@NonNull Context context) {\n     ApplicationDependencies.getMegaphoneRepository().onFirstEverAppLaunch();\n     SignalStore.onFirstEverAppLaunch();\n     SignalStore.onboarding().clearAll();\n+    TextSecurePreferences.onPostBackupRestore(context);\n     ApplicationDependencies.getJobManager().add(StickerPackDownloadJob.forInstall(BlessedPacks.ZOZO.getPackId(), BlessedPacks.ZOZO.getPackKey(), false));\n     ApplicationDependencies.getJobManager().add(StickerPackDownloadJob.forInstall(BlessedPacks.BANDIT.getPackId(), BlessedPacks.BANDIT.getPackKey(), false));\n     ApplicationDependencies.getJobManager().add(StickerPackDownloadJob.forInstall(BlessedPacks.DAY_BY_DAY.getPackId(), BlessedPacks.DAY_BY_DAY.getPackKey(), false));"
  },
  {
    "sha": "b7b6a4811143786c1587247f86603706424dcd53",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/DeviceActivity.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/DeviceActivity.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/DeviceActivity.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/DeviceActivity.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -18,6 +18,7 @@\n import androidx.annotation.NonNull;\n import androidx.core.content.ContextCompat;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.crypto.IdentityKeyUtil;\n import org.thoughtcrime.securesms.crypto.ProfileKeyUtil;\n@@ -28,7 +29,6 @@\n import org.thoughtcrime.securesms.util.DynamicLanguage;\n import org.thoughtcrime.securesms.util.DynamicTheme;\n import org.thoughtcrime.securesms.util.TextSecurePreferences;\n-import org.thoughtcrime.securesms.util.Util;\n import org.thoughtcrime.securesms.util.task.ProgressDialogAsyncTask;\n import org.whispersystems.libsignal.IdentityKeyPair;\n import org.whispersystems.libsignal.InvalidKeyException;\n@@ -123,7 +123,7 @@ public void onClick(View v) {\n \n   @Override\n   public void onQrDataFound(final String data) {\n-    Util.runOnMain(() -> {\n+    ThreadUtil.runOnMain(() -> {\n       ((Vibrator)getSystemService(Context.VIBRATOR_SERVICE)).vibrate(50);\n       Uri uri = Uri.parse(data);\n       deviceLinkFragment.setLinkClickedListener(uri, DeviceActivity.this);"
  },
  {
    "sha": "012d15c0329f08a5694d670ec52ca9dca3f33ed9",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/LoggingFragment.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/LoggingFragment.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/LoggingFragment.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/LoggingFragment.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -15,6 +15,12 @@\n \n   private static final String TAG = Log.tag(LoggingFragment.class);\n \n+  public LoggingFragment() { }\n+\n+  public LoggingFragment(int contentLayoutId) {\n+    super(contentLayoutId);\n+  }\n+\n   @Override\n   public void onCreate(@Nullable Bundle savedInstanceState) {\n     logEvent(\"onCreate()\");"
  },
  {
    "sha": "c4c7005dc2a75c8f2a1dfda1e18458a9a7f31fc8",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/MainActivity.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/MainActivity.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/MainActivity.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/MainActivity.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -9,6 +9,8 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import org.thoughtcrime.securesms.devicetransfer.olddevice.OldDeviceTransferLockedDialog;\n+import org.thoughtcrime.securesms.keyvalue.SignalStore;\n import org.thoughtcrime.securesms.util.AppStartup;\n import org.thoughtcrime.securesms.util.CachedInflater;\n import org.thoughtcrime.securesms.util.CommunicationActions;\n@@ -70,6 +72,9 @@ protected void onPreCreate() {\n   protected void onResume() {\n     super.onResume();\n     dynamicTheme.onResume(this);\n+    if (SignalStore.misc().isOldDeviceTransferLocked()) {\n+      OldDeviceTransferLockedDialog.show(getSupportFragmentManager());\n+    }\n   }\n \n   @Override"
  },
  {
    "sha": "0d38525b9a521f40be9f26d14467e10e09b41e88",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/PassphraseRequiredActivity.java",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/PassphraseRequiredActivity.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/PassphraseRequiredActivity.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/PassphraseRequiredActivity.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -11,10 +11,13 @@\n import androidx.annotation.Nullable;\n import androidx.fragment.app.Fragment;\n \n+import org.greenrobot.eventbus.EventBus;\n import org.signal.core.util.logging.Log;\n import org.signal.core.util.tracing.Tracer;\n+import org.signal.devicetransfer.TransferStatus;\n import org.thoughtcrime.securesms.crypto.MasterSecretUtil;\n import org.thoughtcrime.securesms.dependencies.ApplicationDependencies;\n+import org.thoughtcrime.securesms.devicetransfer.olddevice.OldDeviceTransferActivity;\n import org.thoughtcrime.securesms.jobs.PushNotificationReceiveJob;\n import org.thoughtcrime.securesms.keyvalue.SignalStore;\n import org.thoughtcrime.securesms.lock.v2.CreateKbsPinActivity;\n@@ -45,6 +48,8 @@\n   private static final int STATE_ENTER_SIGNAL_PIN    = 5;\n   private static final int STATE_CREATE_PROFILE_NAME = 6;\n   private static final int STATE_CREATE_SIGNAL_PIN   = 7;\n+  private static final int STATE_TRANSFER_ONGOING    = 8;\n+  private static final int STATE_TRANSFER_LOCKED     = 9;\n \n   private SignalServiceNetworkAccess networkAccess;\n   private BroadcastReceiver          clearKeyReceiver;\n@@ -146,6 +151,8 @@ private Intent getIntentForState(int state) {\n       case STATE_ENTER_SIGNAL_PIN:    return getEnterSignalPinIntent();\n       case STATE_CREATE_SIGNAL_PIN:   return getCreateSignalPinIntent();\n       case STATE_CREATE_PROFILE_NAME: return getCreateProfileNameIntent();\n+      case STATE_TRANSFER_ONGOING:    return getOldDeviceTransferIntent();\n+      case STATE_TRANSFER_LOCKED:     return getOldDeviceTransferLockedIntent();\n       default:                        return null;\n     }\n   }\n@@ -165,6 +172,10 @@ private int getApplicationState(boolean locked) {\n       return STATE_CREATE_PROFILE_NAME;\n     } else if (userMustCreateSignalPin()) {\n       return STATE_CREATE_SIGNAL_PIN;\n+    } else if (EventBus.getDefault().getStickyEvent(TransferStatus.class) != null && getClass() != OldDeviceTransferActivity.class) {\n+      return STATE_TRANSFER_ONGOING;\n+    } else if (SignalStore.misc().isOldDeviceTransferLocked()) {\n+      return STATE_TRANSFER_LOCKED;\n     } else {\n       return STATE_NORMAL;\n     }\n@@ -219,6 +230,19 @@ private Intent getCreateProfileNameIntent() {\n     return getRoutedIntent(EditProfileActivity.class, getIntent());\n   }\n \n+  private Intent getOldDeviceTransferIntent() {\n+    Intent intent = new Intent(this, OldDeviceTransferActivity.class);\n+    intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n+    return intent;\n+  }\n+\n+  private @Nullable Intent getOldDeviceTransferLockedIntent() {\n+    if (getClass() == MainActivity.class) {\n+      return null;\n+    }\n+    return MainActivity.clearTop(this);\n+  }\n+\n   private Intent getRoutedIntent(Class<?> destination, @Nullable Intent nextIntent) {\n     final Intent intent = new Intent(this, destination);\n     if (nextIntent != null)   intent.putExtra(\"next_intent\", nextIntent);"
  },
  {
    "sha": "435e474f0145cf1fb113eab32f8214efcc7b3183",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/VerifyIdentityActivity.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/VerifyIdentityActivity.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/VerifyIdentityActivity.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/VerifyIdentityActivity.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -60,6 +60,7 @@\n import androidx.fragment.app.Fragment;\n import androidx.fragment.app.FragmentTransaction;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.concurrent.SignalExecutors;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.color.MaterialColor;\n@@ -185,7 +186,7 @@ public boolean onOptionsItemSelected(MenuItem item) {\n \n   @Override\n   public void onQrDataFound(final String data) {\n-    Util.runOnMain(() -> {\n+    ThreadUtil.runOnMain(() -> {\n       ((Vibrator)getSystemService(Context.VIBRATOR_SERVICE)).vibrate(50);\n \n       getSupportFragmentManager().popBackStack();"
  },
  {
    "sha": "caed6f337d4a43bbc3a2af1c010084a8d6e515b4",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/audio/AudioRecorder.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/audio/AudioRecorder.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/audio/AudioRecorder.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/audio/AudioRecorder.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -8,11 +8,11 @@\n \n import androidx.annotation.NonNull;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.concurrent.SignalExecutors;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.providers.BlobProvider;\n import org.thoughtcrime.securesms.util.MediaUtil;\n-import org.thoughtcrime.securesms.util.Util;\n import org.thoughtcrime.securesms.util.concurrent.ListenableFuture;\n import org.thoughtcrime.securesms.util.concurrent.SettableFuture;\n import org.whispersystems.libsignal.util.Pair;\n@@ -90,10 +90,10 @@ public void startRecording() {\n   }\n \n   private <T> void sendToFuture(final SettableFuture<T> future, final Exception exception) {\n-    Util.runOnMain(() -> future.setException(exception));\n+    ThreadUtil.runOnMain(() -> future.setException(exception));\n   }\n \n   private <T> void sendToFuture(final SettableFuture<T> future, final T result) {\n-    Util.runOnMain(() -> future.set(result));\n+    ThreadUtil.runOnMain(() -> future.set(result));\n   }\n }"
  },
  {
    "sha": "3e32b7e6e3c52823cacaa2e2c6fd14f9b2c25b1b",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/audio/AudioWaveForm.java",
    "status": "modified",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/audio/AudioWaveForm.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/audio/AudioWaveForm.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/audio/AudioWaveForm.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -16,6 +16,7 @@\n \n import com.google.protobuf.ByteString;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.concurrent.SignalExecutors;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.attachments.Attachment;\n@@ -26,7 +27,6 @@\n import org.thoughtcrime.securesms.media.DecryptableUriMediaInput;\n import org.thoughtcrime.securesms.media.MediaInput;\n import org.thoughtcrime.securesms.mms.AudioSlide;\n-import org.thoughtcrime.securesms.util.Util;\n import org.thoughtcrime.securesms.util.concurrent.SerialExecutor;\n \n import java.io.IOException;\n@@ -61,29 +61,29 @@ public void getWaveForm(@NonNull Consumer<AudioFileInfo> onSuccess, @NonNull Run\n \n     if (uri == null) {\n       Log.w(TAG, \"No uri\");\n-      Util.runOnMain(onFailure);\n+      ThreadUtil.runOnMain(onFailure);\n       return;\n     }\n \n     if (!(attachment instanceof DatabaseAttachment)) {\n       Log.i(TAG, \"Not yet in database\");\n-      Util.runOnMain(onFailure);\n+      ThreadUtil.runOnMain(onFailure);\n       return;\n     }\n \n     String        cacheKey = uri.toString();\n     AudioFileInfo cached   = WAVE_FORM_CACHE.get(cacheKey);\n     if (cached != null) {\n       Log.i(TAG, \"Loaded wave form from cache \" + cacheKey);\n-      Util.runOnMain(() -> onSuccess.accept(cached));\n+      ThreadUtil.runOnMain(() -> onSuccess.accept(cached));\n       return;\n     }\n \n     AUDIO_DECODER_EXECUTOR.execute(() -> {\n       AudioFileInfo cachedInExecutor = WAVE_FORM_CACHE.get(cacheKey);\n       if (cachedInExecutor != null) {\n         Log.i(TAG, \"Loaded wave form from cache inside executor\" + cacheKey);\n-        Util.runOnMain(() -> onSuccess.accept(cachedInExecutor));\n+        ThreadUtil.runOnMain(() -> onSuccess.accept(cachedInExecutor));\n         return;\n       }\n \n@@ -92,14 +92,14 @@ public void getWaveForm(@NonNull Consumer<AudioFileInfo> onSuccess, @NonNull Run\n         AudioFileInfo audioFileInfo = AudioFileInfo.fromDatabaseProtobuf(audioHash.getAudioWaveForm());\n         if (audioFileInfo.waveForm.length == 0) {\n           Log.w(TAG, \"Recovering from a wave form generation error  \" + cacheKey);\n-          Util.runOnMain(onFailure);\n+          ThreadUtil.runOnMain(onFailure);\n           return;\n         } else if (audioFileInfo.waveForm.length != BAR_COUNT) {\n           Log.w(TAG, \"Wave form from database does not match bar count, regenerating \" + cacheKey);\n         } else {\n           WAVE_FORM_CACHE.put(cacheKey, audioFileInfo);\n           Log.i(TAG, \"Loaded wave form from DB \" + cacheKey);\n-          Util.runOnMain(() -> onSuccess.accept(audioFileInfo));\n+          ThreadUtil.runOnMain(() -> onSuccess.accept(audioFileInfo));\n           return;\n         }\n       }\n@@ -120,10 +120,10 @@ public void getWaveForm(@NonNull Consumer<AudioFileInfo> onSuccess, @NonNull Run\n         attachmentDatabase.writeAudioHash(dbAttachment.getAttachmentId(), fileInfo.toDatabaseProtobuf());\n \n         WAVE_FORM_CACHE.put(cacheKey, fileInfo);\n-        Util.runOnMain(() -> onSuccess.accept(fileInfo));\n+        ThreadUtil.runOnMain(() -> onSuccess.accept(fileInfo));\n       } catch (Throwable e) {\n         Log.w(TAG, \"Failed to create audio wave form for \" + cacheKey, e);\n-        Util.runOnMain(onFailure);\n+        ThreadUtil.runOnMain(onFailure);\n       }\n     });\n   }"
  },
  {
    "sha": "379252a083ced86b529741cf5d87daa457f2ddb9",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/backup/FullBackupExporter.java",
    "status": "modified",
    "additions": 127,
    "deletions": 25,
    "changes": 152,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/backup/FullBackupExporter.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/backup/FullBackupExporter.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/backup/FullBackupExporter.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -10,7 +10,6 @@\n import androidx.annotation.RequiresApi;\n import androidx.documentfile.provider.DocumentFile;\n \n-import com.annimon.stream.function.Consumer;\n import com.annimon.stream.function.Predicate;\n import com.google.protobuf.ByteString;\n \n@@ -26,7 +25,6 @@\n import org.thoughtcrime.securesms.crypto.ModernDecryptingPartInputStream;\n import org.thoughtcrime.securesms.database.AttachmentDatabase;\n import org.thoughtcrime.securesms.database.GroupReceiptDatabase;\n-import org.thoughtcrime.securesms.database.JobDatabase;\n import org.thoughtcrime.securesms.database.KeyValueDatabase;\n import org.thoughtcrime.securesms.database.MmsDatabase;\n import org.thoughtcrime.securesms.database.MmsSmsColumns;\n@@ -36,9 +34,13 @@\n import org.thoughtcrime.securesms.database.SignedPreKeyDatabase;\n import org.thoughtcrime.securesms.database.SmsDatabase;\n import org.thoughtcrime.securesms.database.StickerDatabase;\n+import org.thoughtcrime.securesms.dependencies.ApplicationDependencies;\n+import org.thoughtcrime.securesms.keyvalue.KeyValueDataSet;\n+import org.thoughtcrime.securesms.keyvalue.SignalStore;\n import org.thoughtcrime.securesms.profiles.AvatarHelper;\n import org.thoughtcrime.securesms.util.SetUtil;\n import org.thoughtcrime.securesms.util.Stopwatch;\n+import org.thoughtcrime.securesms.util.TextSecurePreferences;\n import org.thoughtcrime.securesms.util.Util;\n import org.whispersystems.libsignal.kdf.HKDFv3;\n import org.whispersystems.libsignal.util.ByteUtil;\n@@ -66,7 +68,6 @@\n \n public class FullBackupExporter extends FullBackupBase {\n \n-  @SuppressWarnings(\"unused\")\n   private static final String TAG = FullBackupExporter.class.getSimpleName();\n \n   private static final Set<String> BLACKLISTED_TABLES = SetUtil.newHashSet(\n@@ -81,11 +82,12 @@ public static void export(@NonNull Context context,\n                             @NonNull AttachmentSecret attachmentSecret,\n                             @NonNull SQLiteDatabase input,\n                             @NonNull File output,\n-                            @NonNull String passphrase)\n+                            @NonNull String passphrase,\n+                            @NonNull BackupCancellationSignal cancellationSignal)\n       throws IOException\n   {\n     try (OutputStream outputStream = new FileOutputStream(output)) {\n-      internalExport(context, attachmentSecret, input, outputStream, passphrase);\n+      internalExport(context, attachmentSecret, input, outputStream, passphrase, true, cancellationSignal);\n     }\n   }\n \n@@ -94,56 +96,84 @@ public static void export(@NonNull Context context,\n                             @NonNull AttachmentSecret attachmentSecret,\n                             @NonNull SQLiteDatabase input,\n                             @NonNull DocumentFile output,\n-                            @NonNull String passphrase)\n+                            @NonNull String passphrase,\n+                            @NonNull BackupCancellationSignal cancellationSignal)\n       throws IOException\n   {\n     try (OutputStream outputStream = Objects.requireNonNull(context.getContentResolver().openOutputStream(output.getUri()))) {\n-      internalExport(context, attachmentSecret, input, outputStream, passphrase);\n+      internalExport(context, attachmentSecret, input, outputStream, passphrase, true, cancellationSignal);\n     }\n   }\n \n+  public static void transfer(@NonNull Context context,\n+                              @NonNull AttachmentSecret attachmentSecret,\n+                              @NonNull SQLiteDatabase input,\n+                              @NonNull OutputStream outputStream,\n+                              @NonNull String passphrase)\n+      throws IOException\n+  {\n+    internalExport(context, attachmentSecret, input, outputStream, passphrase, false, () -> false);\n+  }\n+\n   private static void internalExport(@NonNull Context context,\n                                      @NonNull AttachmentSecret attachmentSecret,\n                                      @NonNull SQLiteDatabase input,\n                                      @NonNull OutputStream fileOutputStream,\n-                                     @NonNull String passphrase)\n+                                     @NonNull String passphrase,\n+                                     boolean closeOutputStream,\n+                                     @NonNull BackupCancellationSignal cancellationSignal)\n       throws IOException\n   {\n     BackupFrameOutputStream outputStream = new BackupFrameOutputStream(fileOutputStream, passphrase);\n     int                     count        = 0;\n \n     try {\n       outputStream.writeDatabaseVersion(input.getVersion());\n+      count++;\n \n       List<String> tables = exportSchema(input, outputStream);\n+      count += tables.size() * 3;\n \n       Stopwatch stopwatch = new Stopwatch(\"Backup\");\n \n       for (String table : tables) {\n+        throwIfCanceled(cancellationSignal);\n         if (table.equals(MmsDatabase.TABLE_NAME)) {\n-          count = exportTable(table, input, outputStream, FullBackupExporter::isNonExpiringMmsMessage, null, count);\n+          count = exportTable(table, input, outputStream, FullBackupExporter::isNonExpiringMmsMessage, null, count, cancellationSignal);\n         } else if (table.equals(SmsDatabase.TABLE_NAME)) {\n-          count = exportTable(table, input, outputStream, FullBackupExporter::isNonExpiringSmsMessage, null, count);\n+          count = exportTable(table, input, outputStream, FullBackupExporter::isNonExpiringSmsMessage, null, count, cancellationSignal);\n         } else if (table.equals(GroupReceiptDatabase.TABLE_NAME)) {\n-          count = exportTable(table, input, outputStream, cursor -> isForNonExpiringMessage(input, cursor.getLong(cursor.getColumnIndexOrThrow(GroupReceiptDatabase.MMS_ID))), null, count);\n+          count = exportTable(table, input, outputStream, cursor -> isForNonExpiringMessage(input, cursor.getLong(cursor.getColumnIndexOrThrow(GroupReceiptDatabase.MMS_ID))), null, count, cancellationSignal);\n         } else if (table.equals(AttachmentDatabase.TABLE_NAME)) {\n-          count = exportTable(table, input, outputStream, cursor -> isForNonExpiringMessage(input, cursor.getLong(cursor.getColumnIndexOrThrow(AttachmentDatabase.MMS_ID))), cursor -> exportAttachment(attachmentSecret, cursor, outputStream), count);\n+          count = exportTable(table, input, outputStream, cursor -> isForNonExpiringMessage(input, cursor.getLong(cursor.getColumnIndexOrThrow(AttachmentDatabase.MMS_ID))), (cursor, innerCount) -> exportAttachment(attachmentSecret, cursor, outputStream, innerCount), count, cancellationSignal);\n         } else if (table.equals(StickerDatabase.TABLE_NAME)) {\n-          count = exportTable(table, input, outputStream, cursor -> true, cursor -> exportSticker(attachmentSecret, cursor, outputStream), count);\n+          count = exportTable(table, input, outputStream, cursor -> true, (cursor, innerCount) -> exportSticker(attachmentSecret, cursor, outputStream, innerCount), count, cancellationSignal);\n         } else if (!BLACKLISTED_TABLES.contains(table) && !table.startsWith(\"sqlite_\")) {\n-          count = exportTable(table, input, outputStream, null, null, count);\n+          count = exportTable(table, input, outputStream, null, null, count, cancellationSignal);\n         }\n         stopwatch.split(\"table::\" + table);\n       }\n \n       for (BackupProtos.SharedPreference preference : IdentityKeyUtil.getBackupRecord(context)) {\n+        throwIfCanceled(cancellationSignal);\n+        EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, ++count));\n+        outputStream.write(preference);\n+      }\n+      \n+      for (BackupProtos.SharedPreference preference : TextSecurePreferences.getPreferencesToSaveToBackup(context)) {\n+        throwIfCanceled(cancellationSignal);\n         EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, ++count));\n         outputStream.write(preference);\n       }\n \n       stopwatch.split(\"prefs\");\n \n+      count = exportKeyValues(outputStream, SignalStore.getKeysToIncludeInBackup(), count, cancellationSignal);\n+\n+      stopwatch.split(\"key_values\");\n+\n       for (AvatarHelper.Avatar avatar : AvatarHelper.getAvatars(context)) {\n+        throwIfCanceled(cancellationSignal);\n         if (avatar != null) {\n           EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, ++count));\n           outputStream.write(avatar.getFilename(), avatar.getInputStream(), avatar.getLength());\n@@ -155,11 +185,19 @@ private static void internalExport(@NonNull Context context,\n \n       outputStream.writeEnd();\n     } finally {\n-      outputStream.close();\n+      if (closeOutputStream) {\n+        outputStream.close();\n+      }\n       EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.FINISHED, ++count));\n     }\n   }\n \n+  private static void throwIfCanceled(@NonNull BackupCancellationSignal cancellationSignal) throws BackupCanceledException {\n+    if (cancellationSignal.isCanceled()) {\n+      throw new BackupCanceledException();\n+    }\n+  }\n+\n   private static List<String> exportSchema(@NonNull SQLiteDatabase input, @NonNull BackupFrameOutputStream outputStream)\n       throws IOException\n   {\n@@ -190,19 +228,20 @@ private static void internalExport(@NonNull Context context,\n     return tables;\n   }\n \n-  private static int exportTable(@NonNull   String table,\n-                                 @NonNull   SQLiteDatabase input,\n-                                 @NonNull   BackupFrameOutputStream outputStream,\n-                                 @Nullable  Predicate<Cursor> predicate,\n-                                 @Nullable  Consumer<Cursor> postProcess,\n-                                            int count)\n+  private static int exportTable(@NonNull String table,\n+                                 @NonNull SQLiteDatabase input,\n+                                 @NonNull BackupFrameOutputStream outputStream,\n+                                 @Nullable Predicate<Cursor> predicate,\n+                                 @Nullable PostProcessor postProcess,\n+                                 int count,\n+                                 @NonNull BackupCancellationSignal cancellationSignal)\n       throws IOException\n   {\n     String template = \"INSERT INTO \" + table + \" VALUES \";\n \n     try (Cursor cursor = input.rawQuery(\"SELECT * FROM \" + table, null)) {\n       while (cursor != null && cursor.moveToNext()) {\n-        EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, ++count));\n+        throwIfCanceled(cancellationSignal);\n \n         if (predicate == null || predicate.test(cursor)) {\n           StringBuilder                     statement        = new StringBuilder(template);\n@@ -234,17 +273,20 @@ private static int exportTable(@NonNull   String table,\n \n           statement.append(')');\n \n+          EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, ++count));\n           outputStream.write(statementBuilder.setStatement(statement.toString()).build());\n \n-          if (postProcess != null) postProcess.accept(cursor);\n+          if (postProcess != null) {\n+            count = postProcess.postProcess(cursor, count);\n+          }\n         }\n       }\n     }\n \n     return count;\n   }\n \n-  private static void exportAttachment(@NonNull AttachmentSecret attachmentSecret, @NonNull Cursor cursor, @NonNull BackupFrameOutputStream outputStream) {\n+  private static int exportAttachment(@NonNull AttachmentSecret attachmentSecret, @NonNull Cursor cursor, @NonNull BackupFrameOutputStream outputStream, int count) {\n     try {\n       long rowId    = cursor.getLong(cursor.getColumnIndexOrThrow(AttachmentDatabase.ROW_ID));\n       long uniqueId = cursor.getLong(cursor.getColumnIndexOrThrow(AttachmentDatabase.UNIQUE_ID));\n@@ -269,14 +311,17 @@ private static void exportAttachment(@NonNull AttachmentSecret attachmentSecret,\n         if (random != null && random.length == 32) inputStream = ModernDecryptingPartInputStream.createFor(attachmentSecret, random, new File(data), 0);\n         else                                       inputStream = ClassicDecryptingPartInputStream.createFor(attachmentSecret, new File(data));\n \n+        EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, ++count));\n         outputStream.write(new AttachmentId(rowId, uniqueId), inputStream, size);\n       }\n     } catch (IOException e) {\n       Log.w(TAG, e);\n     }\n+\n+    return count;\n   }\n \n-  private static void exportSticker(@NonNull AttachmentSecret attachmentSecret, @NonNull Cursor cursor, @NonNull BackupFrameOutputStream outputStream) {\n+  private static int exportSticker(@NonNull AttachmentSecret attachmentSecret, @NonNull Cursor cursor, @NonNull BackupFrameOutputStream outputStream, int count) {\n     try {\n       long rowId    = cursor.getLong(cursor.getColumnIndexOrThrow(StickerDatabase._ID));\n       long size     = cursor.getLong(cursor.getColumnIndexOrThrow(StickerDatabase.FILE_LENGTH));\n@@ -285,12 +330,15 @@ private static void exportSticker(@NonNull AttachmentSecret attachmentSecret, @N\n       byte[] random = cursor.getBlob(cursor.getColumnIndexOrThrow(StickerDatabase.FILE_RANDOM));\n \n       if (!TextUtils.isEmpty(data) && size > 0) {\n+        EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, ++count));\n         InputStream inputStream = ModernDecryptingPartInputStream.createFor(attachmentSecret, random, new File(data), 0);\n         outputStream.writeSticker(rowId, inputStream, size);\n       }\n     } catch (IOException e) {\n       Log.w(TAG, e);\n     }\n+\n+    return count;\n   }\n \n   private static long calculateVeryOldStreamLength(@NonNull AttachmentSecret attachmentSecret, @Nullable byte[] random, @NonNull String data) throws IOException {\n@@ -310,6 +358,46 @@ private static long calculateVeryOldStreamLength(@NonNull AttachmentSecret attac\n     return result;\n   }\n \n+  private static int exportKeyValues(@NonNull BackupFrameOutputStream outputStream,\n+                                     @NonNull List<String> keysToIncludeInBackup,\n+                                     int count,\n+                                     BackupCancellationSignal cancellationSignal) throws IOException\n+  {\n+    KeyValueDataSet dataSet = KeyValueDatabase.getInstance(ApplicationDependencies.getApplication())\n+                                              .getDataSet();\n+\n+    for (String key : keysToIncludeInBackup) {\n+      throwIfCanceled(cancellationSignal);\n+      if (!dataSet.containsKey(key)) {\n+        continue;\n+      }\n+      BackupProtos.KeyValue.Builder builder = BackupProtos.KeyValue.newBuilder()\n+                                                                   .setKey(key);\n+\n+      Class<?> type = dataSet.getType(key);\n+      if (type == byte[].class) {\n+        builder.setBlobValue(ByteString.copyFrom(dataSet.getBlob(key, null)));\n+      } else if (type == Boolean.class) {\n+        builder.setBooleanValue(dataSet.getBoolean(key, false));\n+      } else if (type == Float.class) {\n+        builder.setFloatValue(dataSet.getFloat(key, 0));\n+      } else if (type == Integer.class) {\n+        builder.setIntegerValue(dataSet.getInteger(key, 0));\n+      } else if (type == Long.class) {\n+        builder.setLongValue(dataSet.getLong(key, 0));\n+      } else if (type == String.class) {\n+        builder.setStringValue(dataSet.getString(key, null));\n+      } else {\n+        throw new AssertionError(\"Unknown type: \" + type);\n+      }\n+\n+      EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, ++count));\n+      outputStream.write(builder.build());\n+    }\n+\n+    return count;\n+  }\n+\n   private static boolean isNonExpiringMmsMessage(@NonNull Cursor cursor) {\n     return cursor.getInt(cursor.getColumnIndexOrThrow(MmsSmsColumns.EXPIRES_IN)) <= 0 &&\n            cursor.getInt(cursor.getColumnIndexOrThrow(MmsDatabase.VIEW_ONCE))    <= 0;\n@@ -381,6 +469,10 @@ public void write(BackupProtos.SharedPreference preference) throws IOException {\n       write(outputStream, BackupProtos.BackupFrame.newBuilder().setPreference(preference).build());\n     }\n \n+    public void write(BackupProtos.KeyValue keyValue) throws IOException {\n+      write(outputStream, BackupProtos.BackupFrame.newBuilder().setKeyValue(keyValue).build());\n+    }\n+\n     public void write(BackupProtos.SqlStatement statement) throws IOException {\n       write(outputStream, BackupProtos.BackupFrame.newBuilder().setStatement(statement).build());\n     }\n@@ -495,4 +587,14 @@ public void close() throws IOException {\n       outputStream.close();\n     }\n   }\n+\n+  public interface PostProcessor {\n+    int postProcess(@NonNull Cursor cursor, int count);\n+  }\n+\n+  public interface BackupCancellationSignal {\n+    boolean isCanceled();\n+  }\n+\n+  public static final class BackupCanceledException extends IOException { }\n }"
  },
  {
    "sha": "5b274495ef75f69c0ecb3dfcc3c61dee675dda61",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/backup/FullBackupImporter.java",
    "status": "modified",
    "additions": 55,
    "deletions": 4,
    "changes": 59,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/backup/FullBackupImporter.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/backup/FullBackupImporter.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/backup/FullBackupImporter.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -26,8 +26,11 @@\n import org.thoughtcrime.securesms.crypto.AttachmentSecret;\n import org.thoughtcrime.securesms.crypto.ModernEncryptingPartOutputStream;\n import org.thoughtcrime.securesms.database.AttachmentDatabase;\n+import org.thoughtcrime.securesms.database.KeyValueDatabase;\n import org.thoughtcrime.securesms.database.SearchDatabase;\n import org.thoughtcrime.securesms.database.StickerDatabase;\n+import org.thoughtcrime.securesms.dependencies.ApplicationDependencies;\n+import org.thoughtcrime.securesms.keyvalue.KeyValueDataSet;\n import org.thoughtcrime.securesms.profiles.AvatarHelper;\n import org.thoughtcrime.securesms.recipients.RecipientId;\n import org.thoughtcrime.securesms.util.BackupUtil;\n@@ -45,6 +48,8 @@\n import java.security.InvalidKeyException;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Objects;\n@@ -65,39 +70,55 @@\n   public static void importFile(@NonNull Context context, @NonNull AttachmentSecret attachmentSecret,\n                                 @NonNull SQLiteDatabase db, @NonNull Uri uri, @NonNull String passphrase)\n       throws IOException\n+  {\n+    try (InputStream is = getInputStream(context, uri)) {\n+      importFile(context, attachmentSecret, db, is, passphrase);\n+    }\n+  }\n+\n+  public static void importFile(@NonNull Context context, @NonNull AttachmentSecret attachmentSecret,\n+                                @NonNull SQLiteDatabase db, @NonNull InputStream is, @NonNull String passphrase)\n+      throws IOException\n   {\n     int count = 0;\n \n-    try (InputStream is = getInputStream(context, uri)) {\n+    SQLiteDatabase keyValueDatabase = KeyValueDatabase.getInstance(ApplicationDependencies.getApplication()).getSqlCipherDatabase();\n+    try {\n       BackupRecordInputStream inputStream = new BackupRecordInputStream(is, passphrase);\n \n       db.beginTransaction();\n+      keyValueDatabase.beginTransaction();\n \n       dropAllTables(db);\n \n       BackupFrame frame;\n \n       while (!(frame = inputStream.readFrame()).getEnd()) {\n-        if (count++ % 100 == 0) EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, count));\n+        if (count % 100 == 0) EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.PROGRESS, count));\n+        count++;\n \n         if      (frame.hasVersion())    processVersion(db, frame.getVersion());\n         else if (frame.hasStatement())  processStatement(db, frame.getStatement());\n         else if (frame.hasPreference()) processPreference(context, frame.getPreference());\n         else if (frame.hasAttachment()) processAttachment(context, attachmentSecret, db, frame.getAttachment(), inputStream);\n         else if (frame.hasSticker())    processSticker(context, attachmentSecret, db, frame.getSticker(), inputStream);\n         else if (frame.hasAvatar())     processAvatar(context, db, frame.getAvatar(), inputStream);\n+        else if (frame.hasKeyValue())   processKeyValue(frame.getKeyValue());\n+        else                            count--;\n       }\n \n       db.setTransactionSuccessful();\n+      keyValueDatabase.setTransactionSuccessful();\n     } finally {\n       db.endTransaction();\n+      keyValueDatabase.endTransaction();\n     }\n \n     EventBus.getDefault().post(new BackupEvent(BackupEvent.Type.FINISHED, count));\n   }\n \n   private static @NonNull InputStream getInputStream(@NonNull Context context, @NonNull Uri uri) throws IOException{\n-    if (BackupUtil.isUserSelectionRequired(context)) {\n+    if (BackupUtil.isUserSelectionRequired(context) || uri.getScheme().equals(\"content\")) {\n       return Objects.requireNonNull(context.getContentResolver().openInputStream(uri));\n     } else {\n       return new FileInputStream(new File(Objects.requireNonNull(uri.getPath())));\n@@ -201,10 +222,40 @@ private static void processAvatar(@NonNull Context context, @NonNull SQLiteDatab\n     }\n   }\n \n+  private static void processKeyValue(BackupProtos.KeyValue keyValue) {\n+    KeyValueDataSet dataSet = new KeyValueDataSet();\n+\n+    if (keyValue.hasBlobValue()) {\n+      dataSet.putBlob(keyValue.getKey(), keyValue.getBlobValue().toByteArray());\n+    } else if (keyValue.hasBooleanValue()) {\n+      dataSet.putBoolean(keyValue.getKey(), keyValue.getBooleanValue());\n+    } else if (keyValue.hasFloatValue()) {\n+      dataSet.putFloat(keyValue.getKey(), keyValue.getFloatValue());\n+    } else if (keyValue.hasIntegerValue()) {\n+      dataSet.putInteger(keyValue.getKey(), keyValue.getIntegerValue());\n+    } else if (keyValue.hasLongValue()) {\n+      dataSet.putLong(keyValue.getKey(), keyValue.getLongValue());\n+    } else if (keyValue.hasStringValue()) {\n+      dataSet.putString(keyValue.getKey(), keyValue.getStringValue());\n+    } else {\n+      Log.i(TAG, \"Unknown KeyValue backup value, skipping\");\n+      return;\n+    }\n+\n+    KeyValueDatabase.getInstance(ApplicationDependencies.getApplication()).writeDataSet(dataSet, Collections.emptyList());\n+  }\n+\n   @SuppressLint(\"ApplySharedPref\")\n   private static void processPreference(@NonNull Context context, SharedPreference preference) {\n     SharedPreferences preferences = context.getSharedPreferences(preference.getFile(), 0);\n-    preferences.edit().putString(preference.getKey(), preference.getValue()).commit();\n+\n+    if (preference.hasValue()) {\n+      preferences.edit().putString(preference.getKey(), preference.getValue()).commit();\n+    } else if (preference.hasBooleanValue()) {\n+      preferences.edit().putBoolean(preference.getKey(), preference.getBooleanValue()).commit();\n+    } else if (preference.hasIsStringSetValue() && preference.getIsStringSetValue()) {\n+      preferences.edit().putStringSet(preference.getKey(), new HashSet<>(preference.getStringSetValueList())).commit();\n+    }\n   }\n \n   private static void dropAllTables(@NonNull SQLiteDatabase db) {"
  },
  {
    "sha": "1439fefc7d82eb4b1b52ee2318a4c900ce270584",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/components/ExpirationTimerView.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/ExpirationTimerView.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/ExpirationTimerView.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/components/ExpirationTimerView.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -6,8 +6,8 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import org.signal.core.util.ThreadUtil;\n import org.thoughtcrime.securesms.R;\n-import org.thoughtcrime.securesms.util.Util;\n \n import java.lang.ref.WeakReference;\n import java.util.concurrent.TimeUnit;\n@@ -67,7 +67,7 @@ public void startAnimation() {\n       else          stopped = false;\n     }\n \n-    Util.runOnMainDelayed(new AnimationUpdateRunnable(this), calculateAnimationDelay(this.startedAt, this.expiresIn));\n+    ThreadUtil.runOnMainDelayed(new AnimationUpdateRunnable(this), calculateAnimationDelay(this.startedAt, this.expiresIn));\n   }\n \n   public void stopAnimation() {\n@@ -116,7 +116,7 @@ public void run() {\n         }\n       }\n \n-      Util.runOnMainDelayed(this, timerView.calculateAnimationDelay(timerView.startedAt, timerView.expiresIn));\n+      ThreadUtil.runOnMainDelayed(this, timerView.calculateAnimationDelay(timerView.startedAt, timerView.expiresIn));\n     }\n   }\n "
  },
  {
    "sha": "0c1d0d4687ce6e7e7440da2d68bf6cd7ed14d18d",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/components/InputPanel.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/InputPanel.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/InputPanel.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/components/InputPanel.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -22,10 +22,10 @@\n import androidx.annotation.MainThread;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.core.view.ViewCompat;\n import androidx.recyclerview.widget.LinearLayoutManager;\n import androidx.recyclerview.widget.RecyclerView;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.R;\n import org.thoughtcrime.securesms.animation.AnimationCompleteListener;\n@@ -42,7 +42,6 @@\n import org.thoughtcrime.securesms.mms.SlideDeck;\n import org.thoughtcrime.securesms.recipients.Recipient;\n import org.thoughtcrime.securesms.util.TextSecurePreferences;\n-import org.thoughtcrime.securesms.util.Util;\n import org.thoughtcrime.securesms.util.ViewUtil;\n import org.thoughtcrime.securesms.util.concurrent.AssertedSuccessListener;\n import org.thoughtcrime.securesms.util.concurrent.ListenableFuture;\n@@ -501,7 +500,7 @@ public void display() {\n       this.startTime = System.currentTimeMillis();\n       this.recordTimeView.setText(DateUtils.formatElapsedTime(0));\n       ViewUtil.fadeIn(this.recordTimeView, FADE_TIME);\n-      Util.runOnMainDelayed(this, TimeUnit.SECONDS.toMillis(1));\n+      ThreadUtil.runOnMainDelayed(this, TimeUnit.SECONDS.toMillis(1));\n       microphone.setVisibility(View.VISIBLE);\n       microphone.startAnimation(pulseAnimation());\n     }\n@@ -527,7 +526,7 @@ public void run() {\n           onLimitHit.run();\n         } else {\n           recordTimeView.setText(DateUtils.formatElapsedTime(elapsedSeconds));\n-          Util.runOnMainDelayed(this, TimeUnit.SECONDS.toMillis(1));\n+          ThreadUtil.runOnMainDelayed(this, TimeUnit.SECONDS.toMillis(1));\n         }\n       }\n     }"
  },
  {
    "sha": "aab2e5bb26b91ba467a98d2fd471b746560d521a",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/components/RatingManager.java",
    "status": "modified",
    "additions": 4,
    "deletions": 13,
    "changes": 17,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/RatingManager.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/RatingManager.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/components/RatingManager.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -10,7 +10,9 @@\n import androidx.appcompat.app.AlertDialog;\n \n import org.signal.core.util.logging.Log;\n+import org.thoughtcrime.securesms.BuildConfig;\n import org.thoughtcrime.securesms.R;\n+import org.thoughtcrime.securesms.util.PlayStoreUtil;\n import org.thoughtcrime.securesms.util.TextSecurePreferences;\n import org.thoughtcrime.securesms.util.VersionTracker;\n \n@@ -24,7 +26,7 @@\n   private static final String TAG = RatingManager.class.getSimpleName();\n \n   public static void showRatingDialogIfNecessary(Context context) {\n-    if (!TextSecurePreferences.isRatingEnabled(context)) return;\n+    if (!TextSecurePreferences.isRatingEnabled(context) || BuildConfig.PLAY_STORE_DISABLED) return;\n \n     long daysSinceInstall = VersionTracker.getDaysSinceFirstInstalled(context);\n     long laterTimestamp   = TextSecurePreferences.getRatingLaterTimestamp(context);\n@@ -44,7 +46,7 @@ private static void showRatingDialog(final Context context) {\n           @Override\n           public void onClick(DialogInterface dialog, int which) {\n             TextSecurePreferences.setRatingEnabled(context, false);\n-            startPlayStore(context);\n+            PlayStoreUtil.openPlayStoreOrOurApkDownloadPage(context);\n          }\n        })\n        .setNegativeButton(R.string.RatingManager_no_thanks, new DialogInterface.OnClickListener() {\n@@ -62,15 +64,4 @@ public void onClick(DialogInterface dialog, int which) {\n        })\n        .show();\n   }\n-\n-  private static void startPlayStore(Context context) {\n-    Uri uri = Uri.parse(\"market://details?id=\" + context.getPackageName());\n-    try {\n-      context.startActivity(new Intent(Intent.ACTION_VIEW, uri));\n-    } catch (ActivityNotFoundException e) {\n-      Log.w(TAG, e);\n-      Toast.makeText(context, R.string.RatingManager_whoops_the_play_store_app_does_not_appear_to_be_installed, Toast.LENGTH_LONG).show();\n-    }\n-  }\n-\n }"
  },
  {
    "sha": "4fa1b5e17ff7cdd3e8da268ff476709c56629e7a",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/components/TypingStatusRepository.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/TypingStatusRepository.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/TypingStatusRepository.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/components/TypingStatusRepository.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -10,6 +10,7 @@\n import com.annimon.stream.Collectors;\n import com.annimon.stream.Stream;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.recipients.Recipient;\n import org.thoughtcrime.securesms.util.Util;\n@@ -58,11 +59,11 @@ public synchronized void onTypingStarted(@NonNull Context context, long threadId\n \n     Runnable timer = timers.get(typist);\n     if (timer != null) {\n-      Util.cancelRunnableOnMain(timer);\n+      ThreadUtil.cancelRunnableOnMain(timer);\n     }\n \n     timer = () -> onTypingStopped(context, threadId, author, device, false);\n-    Util.runOnMainDelayed(timer, RECIPIENT_TYPING_TIMEOUT);\n+    ThreadUtil.runOnMainDelayed(timer, RECIPIENT_TYPING_TIMEOUT);\n     timers.put(typist, timer);\n   }\n \n@@ -85,7 +86,7 @@ public synchronized void onTypingStopped(@NonNull Context context, long threadId\n \n     Runnable timer = timers.get(typist);\n     if (timer != null) {\n-      Util.cancelRunnableOnMain(timer);\n+      ThreadUtil.cancelRunnableOnMain(timer);\n       timers.remove(typist);\n     }\n   }"
  },
  {
    "sha": "25abdca93eaf01223d36b38c5b8e189afdd2cf68",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/components/TypingStatusSender.java",
    "status": "modified",
    "additions": 7,
    "deletions": 10,
    "changes": 17,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/TypingStatusSender.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/TypingStatusSender.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/components/TypingStatusSender.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -1,11 +1,8 @@\n package org.thoughtcrime.securesms.components;\n \n import android.annotation.SuppressLint;\n-import android.app.Application;\n-import android.content.Context;\n-\n-import androidx.annotation.NonNull;\n \n+import org.signal.core.util.ThreadUtil;\n import org.thoughtcrime.securesms.dependencies.ApplicationDependencies;\n import org.thoughtcrime.securesms.jobs.TypingSendJob;\n import org.thoughtcrime.securesms.util.Util;\n@@ -36,16 +33,16 @@ public synchronized void onTypingStarted(long threadId) {\n       sendTyping(threadId, true);\n \n       Runnable start = new StartRunnable(threadId);\n-      Util.runOnMainDelayed(start, REFRESH_TYPING_TIMEOUT);\n+      ThreadUtil.runOnMainDelayed(start, REFRESH_TYPING_TIMEOUT);\n       pair.setStart(start);\n     }\n \n     if (pair.getStop() != null) {\n-      Util.cancelRunnableOnMain(pair.getStop());\n+      ThreadUtil.cancelRunnableOnMain(pair.getStop());\n     }\n \n     Runnable stop = () -> onTypingStopped(threadId, true);\n-    Util.runOnMainDelayed(stop, PAUSE_TYPING_TIMEOUT);\n+    ThreadUtil.runOnMainDelayed(stop, PAUSE_TYPING_TIMEOUT);\n     pair.setStop(stop);\n   }\n \n@@ -62,15 +59,15 @@ private synchronized void onTypingStopped(long threadId, boolean notify) {\n     selfTypingTimers.put(threadId, pair);\n \n     if (pair.getStart() != null) {\n-      Util.cancelRunnableOnMain(pair.getStart());\n+      ThreadUtil.cancelRunnableOnMain(pair.getStart());\n \n       if (notify) {\n         sendTyping(threadId, false);\n       }\n     }\n \n     if (pair.getStop() != null) {\n-      Util.cancelRunnableOnMain(pair.getStop());\n+      ThreadUtil.cancelRunnableOnMain(pair.getStop());\n     }\n \n     pair.setStart(null);\n@@ -92,7 +89,7 @@ private StartRunnable(long threadId) {\n     @Override\n     public void run() {\n       sendTyping(threadId, true);\n-      Util.runOnMainDelayed(this, REFRESH_TYPING_TIMEOUT);\n+      ThreadUtil.runOnMainDelayed(this, REFRESH_TYPING_TIMEOUT);\n     }\n   }\n "
  },
  {
    "sha": "2c1960373996a59c6158b366889aaf195d6e8da1",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/components/camera/CameraView.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/camera/CameraView.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/camera/CameraView.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/components/camera/CameraView.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -36,6 +36,7 @@ Portions Copyright (C) 2007 The Android Open Source Project\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.R;\n import org.thoughtcrime.securesms.util.BitmapUtil;\n@@ -320,7 +321,7 @@ private void startPreview(final @NonNull Parameters parameters) {\n         camera.startPreview();\n         Log.i(TAG, \"camera.startPreview() -> \" + (System.currentTimeMillis() - previewStartMillis) + \"ms\");\n         state = State.ACTIVE;\n-        Util.runOnMain(new Runnable() {\n+        ThreadUtil.runOnMain(new Runnable() {\n           @Override\n           public void run() {\n             requestLayout();\n@@ -495,9 +496,9 @@ public final void run() {\n         return;\n       }\n \n-      Util.runOnMainSync(this::onPreMain);\n+      ThreadUtil.runOnMainSync(this::onPreMain);\n       final Result result = onRunBackground();\n-      Util.runOnMainSync(() -> onPostMain(result));\n+      ThreadUtil.runOnMainSync(() -> onPostMain(result));\n     }\n \n     protected boolean onWait() { return true; }"
  },
  {
    "sha": "7befdcaa5acd82e7d639d516e554352d5523a975",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/components/emoji/EmojiProvider.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/emoji/EmojiProvider.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/emoji/EmojiProvider.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/components/emoji/EmojiProvider.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -18,14 +18,14 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.R;\n import org.thoughtcrime.securesms.components.emoji.parsing.EmojiDrawInfo;\n import org.thoughtcrime.securesms.components.emoji.parsing.EmojiPageBitmap;\n import org.thoughtcrime.securesms.components.emoji.parsing.EmojiParser;\n import org.thoughtcrime.securesms.components.emoji.parsing.EmojiTree;\n import org.thoughtcrime.securesms.util.FutureTaskListener;\n-import org.thoughtcrime.securesms.util.Util;\n import org.whispersystems.libsignal.util.Pair;\n \n import java.util.List;\n@@ -118,7 +118,7 @@ private EmojiProvider(Context context) {\n     final EmojiDrawable drawable = new EmojiDrawable(drawInfo, decodeScale);\n     drawInfo.getPage().get().addListener(new FutureTaskListener<Bitmap>() {\n       @Override public void onSuccess(final Bitmap result) {\n-        Util.runOnMain(() -> drawable.setBitmap(result));\n+        ThreadUtil.runOnMain(() -> drawable.setBitmap(result));\n       }\n \n       @Override public void onFailure(ExecutionException error) {\n@@ -170,7 +170,7 @@ public void draw(@NonNull Canvas canvas) {\n \n     @TargetApi(VERSION_CODES.HONEYCOMB_MR1)\n     public void setBitmap(Bitmap bitmap) {\n-      Util.assertMainThread();\n+      ThreadUtil.assertMainThread();\n       if (VERSION.SDK_INT < VERSION_CODES.HONEYCOMB_MR1 || bmp == null || !bmp.sameAs(bitmap)) {\n         bmp = bitmap;\n         invalidateSelf();"
  },
  {
    "sha": "5039914b6933c304d0f25de845574558bb7f60ea",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/components/emoji/parsing/EmojiPageBitmap.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/emoji/parsing/EmojiPageBitmap.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/emoji/parsing/EmojiPageBitmap.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/components/emoji/parsing/EmojiPageBitmap.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -8,6 +8,7 @@\n \n import androidx.annotation.NonNull;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.components.emoji.EmojiPageModel;\n import org.thoughtcrime.securesms.util.ListenableFutureTask;\n@@ -39,7 +40,7 @@ public EmojiPageBitmap(@NonNull Context context, @NonNull EmojiPageModel model,\n \n   @SuppressLint(\"StaticFieldLeak\")\n   public ListenableFutureTask<Bitmap> get() {\n-    Util.assertMainThread();\n+    ThreadUtil.assertMainThread();\n \n     if (bitmapReference != null && bitmapReference.get() != null) {\n       return new ListenableFutureTask<>(bitmapReference.get());"
  },
  {
    "sha": "993ff207dfb483877701d27e5b1dee17a41e929f",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/components/webrtc/CallParticipantView.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/webrtc/CallParticipantView.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/components/webrtc/CallParticipantView.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/components/webrtc/CallParticipantView.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -17,6 +17,7 @@\n \n import com.bumptech.glide.load.engine.DiskCacheStrategy;\n \n+import org.signal.core.util.ThreadUtil;\n import org.thoughtcrime.securesms.R;\n import org.thoughtcrime.securesms.components.AvatarImageView;\n import org.thoughtcrime.securesms.components.emoji.EmojiTextView;\n@@ -29,7 +30,6 @@\n import org.thoughtcrime.securesms.recipients.Recipient;\n import org.thoughtcrime.securesms.recipients.RecipientId;\n import org.thoughtcrime.securesms.util.AvatarUtil;\n-import org.thoughtcrime.securesms.util.Util;\n import org.thoughtcrime.securesms.util.ViewUtil;\n import org.webrtc.RendererCommon;\n \n@@ -154,7 +154,7 @@ void setCallParticipant(@NonNull CallParticipant participant) {\n \n   private boolean isMissingMediaKeys(@NonNull CallParticipant participant) {\n     if (missingMediaKeysUpdater != null) {\n-      Util.cancelRunnableOnMain(missingMediaKeysUpdater);\n+      ThreadUtil.cancelRunnableOnMain(missingMediaKeysUpdater);\n       missingMediaKeysUpdater = null;\n     }\n \n@@ -168,7 +168,7 @@ private boolean isMissingMediaKeys(@NonNull CallParticipant participant) {\n             setCallParticipant(participant);\n           }\n         };\n-        Util.runOnMainDelayed(missingMediaKeysUpdater, DELAY_SHOWING_MISSING_MEDIA_KEYS - time);\n+        ThreadUtil.runOnMainDelayed(missingMediaKeysUpdater, DELAY_SHOWING_MISSING_MEDIA_KEYS - time);\n       }\n     }\n     return false;"
  },
  {
    "sha": "81eca1d7b3a91290123b012108bdda76f6404b8c",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/contacts/ContactAccessor.java",
    "status": "modified",
    "additions": 52,
    "deletions": 56,
    "changes": 108,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/ContactAccessor.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/ContactAccessor.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/contacts/ContactAccessor.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -23,28 +23,37 @@\n import android.net.Uri;\n import android.os.Parcel;\n import android.os.Parcelable;\n+import android.provider.ContactsContract;\n import android.provider.ContactsContract.CommonDataKinds.Phone;\n import android.provider.ContactsContract.Contacts;\n import android.provider.ContactsContract.PhoneLookup;\n import android.telephony.PhoneNumberUtils;\n import android.text.TextUtils;\n \n+import androidx.annotation.NonNull;\n+\n import com.annimon.stream.Stream;\n \n import org.thoughtcrime.securesms.R;\n+import org.thoughtcrime.securesms.contactshare.Contact;\n import org.thoughtcrime.securesms.database.DatabaseFactory;\n import org.thoughtcrime.securesms.database.GroupDatabase;\n import org.thoughtcrime.securesms.database.RecipientDatabase;\n import org.thoughtcrime.securesms.phonenumbers.PhoneNumberFormatter;\n+import org.thoughtcrime.securesms.profiles.ProfileName;\n import org.thoughtcrime.securesms.recipients.Recipient;\n+import org.thoughtcrime.securesms.util.CursorUtil;\n+import org.thoughtcrime.securesms.util.SqlUtil;\n import org.thoughtcrime.securesms.util.TextSecurePreferences;\n import org.thoughtcrime.securesms.util.Util;\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import static org.thoughtcrime.securesms.database.GroupDatabase.GroupRecord;\n@@ -65,6 +74,9 @@\n \n   public static final String PUSH_COLUMN = \"push\";\n \n+  private static final String GIVEN_NAME  = ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME;\n+  private static final String FAMILY_NAME = ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME;\n+\n   private static final ContactAccessor instance = new ContactAccessor();\n \n   public static synchronized ContactAccessor getInstance() {\n@@ -85,55 +97,42 @@ public static synchronized ContactAccessor getInstance() {\n     return results;\n   }\n \n+  /**\n+   * Gets and returns a cursor of data for all contacts, containing both phone number data and\n+   * structured name data.\n+   *\n+   * Cursor rows are ordered as follows:\n+   *\n+   * <ol>\n+   *   <li>Contact Lookup Key</li>\n+   *   <li>Mimetype</li>\n+   *   <li>id</li>\n+   * </ol>\n+   *\n+   * The lookup key is a fixed value that allows you to verify two rows in the database actually\n+   * belong to the same contact, since the contact uri can be unstable (if a sync fails, say.)\n+   *\n+   * We order by id explicitly here for the same contact sync failure error, which could result in\n+   * multiple structured name rows for the same user. By ordering by id DESC, we ensure we get\n+   * whatever the latest input data was.\n+   *\n+   * What this results in is a cursor that looks like:\n+   *\n+   * Alice phone 1\n+   * Alice phone 2\n+   * Alice structured name 2\n+   * Alice structured name 1\n+   * Bob phone 1\n+   * ... etc.\n+   */\n   public Cursor getAllSystemContacts(Context context) {\n-    return context.getContentResolver().query(Phone.CONTENT_URI, new String[] {Phone.NUMBER, Phone.DISPLAY_NAME, Phone.LABEL, Phone.PHOTO_URI, Phone._ID, Phone.LOOKUP_KEY, Phone.TYPE}, null, null, null);\n-  }\n-\n-  public boolean isSystemContact(Context context, String number) {\n-    Uri      uri        = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, Uri.encode(number));\n-    String[] projection = new String[]{PhoneLookup.DISPLAY_NAME, PhoneLookup.LOOKUP_KEY,\n-                                       PhoneLookup._ID, PhoneLookup.NUMBER};\n-    Cursor   cursor     = context.getContentResolver().query(uri, projection, null, null, null);\n-\n-    try {\n-      if (cursor != null && cursor.moveToFirst()) {\n-        return true;\n-      }\n-    } finally {\n-      if (cursor != null) cursor.close();\n-    }\n+    Uri      uri        = ContactsContract.Data.CONTENT_URI;\n+    String[] projection = SqlUtil.buildArgs(ContactsContract.Data.MIMETYPE, Phone.NUMBER, Phone.DISPLAY_NAME, Phone.LABEL, Phone.PHOTO_URI, Phone._ID, Phone.LOOKUP_KEY, Phone.TYPE, GIVEN_NAME, FAMILY_NAME);\n+    String   where      = ContactsContract.Data.MIMETYPE + \" IN (?, ?)\";\n+    String[] args       = SqlUtil.buildArgs(Phone.CONTENT_ITEM_TYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE);\n+    String   orderBy    = Phone.LOOKUP_KEY + \" ASC, \" + ContactsContract.Data.MIMETYPE + \" DESC, \" + ContactsContract.CommonDataKinds.Phone._ID + \" DESC\";\n \n-    return false;\n-  }\n-\n-  public Collection<ContactData> getContactsWithPush(Context context) {\n-    final ContentResolver resolver = context.getContentResolver();\n-    final String[] inProjection    = new String[]{PhoneLookup._ID, PhoneLookup.DISPLAY_NAME};\n-\n-    final List<String>           registeredAddresses = Stream.of(DatabaseFactory.getRecipientDatabase(context).getRegistered())\n-                                                              .map(Recipient::resolved)\n-                                                              .filter(r -> r.getE164().isPresent())\n-                                                              .map(Recipient::requireE164)\n-                                                              .toList();\n-    final Collection<ContactData> lookupData          = new ArrayList<>(registeredAddresses.size());\n-\n-    for (String registeredAddress : registeredAddresses) {\n-      Uri    uri          = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, Uri.encode(registeredAddress));\n-      Cursor lookupCursor = resolver.query(uri, inProjection, null, null, null);\n-\n-      try {\n-        if (lookupCursor != null && lookupCursor.moveToFirst()) {\n-          final ContactData contactData = new ContactData(lookupCursor.getLong(0), lookupCursor.getString(1));\n-          contactData.numbers.add(new NumberData(\"TextSecure\", registeredAddress));\n-          lookupData.add(contactData);\n-        }\n-      } finally {\n-        if (lookupCursor != null)\n-          lookupCursor.close();\n-      }\n-    }\n-\n-    return lookupData;\n+    return context.getContentResolver().query(uri, projection, where, args, orderBy);\n   }\n \n   public String getNameFromContact(Context context, Uri uri) {\n@@ -160,13 +159,13 @@ public ContactData getContactData(Context context, Uri uri) {\n \n   private ContactData getContactData(Context context, String displayName, long id) {\n     ContactData contactData = new ContactData(id, displayName);\n-    Cursor numberCursor     = null;\n-\n-    try {\n-      numberCursor = context.getContentResolver().query(Phone.CONTENT_URI, null,\n-                                                        Phone.CONTACT_ID + \" = ?\",\n-                                                        new String[] {contactData.id + \"\"}, null);\n \n+    try (Cursor numberCursor = context.getContentResolver().query(Phone.CONTENT_URI,\n+                                                                  null,\n+                                                                  Phone.CONTACT_ID + \" = ?\",\n+                                                                  new String[] {contactData.id + \"\"},\n+                                                                  null))\n+    {\n       while (numberCursor != null && numberCursor.moveToNext()) {\n         int type         = numberCursor.getInt(numberCursor.getColumnIndexOrThrow(Phone.TYPE));\n         String label     = numberCursor.getString(numberCursor.getColumnIndexOrThrow(Phone.LABEL));\n@@ -175,9 +174,6 @@ private ContactData getContactData(Context context, String displayName, long id)\n \n         contactData.numbers.add(new NumberData(typeLabel, number));\n       }\n-    } finally {\n-      if (numberCursor != null)\n-        numberCursor.close();\n     }\n \n     return contactData;"
  },
  {
    "sha": "7c614b138863d88993b697b9c9c08900de583caf",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/contacts/ContactRepository.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/ContactRepository.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/ContactRepository.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/contacts/ContactRepository.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -57,7 +57,7 @@\n     add(new Pair<>(ID_COLUMN, cursor -> CursorUtil.requireLong(cursor, RecipientDatabase.ID)));\n \n     add(new Pair<>(NAME_COLUMN, cursor -> {\n-      String system  = CursorUtil.requireString(cursor, RecipientDatabase.SYSTEM_DISPLAY_NAME);\n+      String system  = CursorUtil.requireString(cursor, RecipientDatabase.SYSTEM_JOINED_NAME);\n       String profile = CursorUtil.requireString(cursor, RecipientDatabase.SEARCH_PROFILE_NAME);\n \n       return Util.getFirstNonEmpty(system, profile);"
  },
  {
    "sha": "8635f326c311ba6e9bc5adb3a8878971e2a8be27",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/contacts/sync/ContactHolder.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/ContactHolder.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/ContactHolder.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/ContactHolder.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -0,0 +1,63 @@\n+package org.thoughtcrime.securesms.contacts.sync;\n+\n+import android.net.Uri;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import org.signal.core.util.logging.Log;\n+import org.thoughtcrime.securesms.database.RecipientDatabase;\n+import org.thoughtcrime.securesms.profiles.ProfileName;\n+import org.whispersystems.libsignal.util.guava.Optional;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+final class ContactHolder {\n+\n+  private static final String TAG = Log.tag(ContactHolder.class);\n+\n+  private final String                  lookupKey;\n+  private final List<PhoneNumberRecord> phoneNumberRecords = new LinkedList<>();\n+\n+  private StructuredNameRecord structuredNameRecord;\n+\n+  ContactHolder(@NonNull String lookupKey) {\n+    this.lookupKey = lookupKey;\n+  }\n+\n+  @NonNull String getLookupKey() {\n+    return lookupKey;\n+  }\n+\n+  public void addPhoneNumberRecord(@NonNull PhoneNumberRecord phoneNumberRecord) {\n+    phoneNumberRecords.add(phoneNumberRecord);\n+  }\n+\n+  public void setStructuredNameRecord(@NonNull StructuredNameRecord structuredNameRecord) {\n+    this.structuredNameRecord = structuredNameRecord;\n+  }\n+\n+  void commit(@NonNull RecipientDatabase.BulkOperationsHandle handle) {\n+    for (PhoneNumberRecord phoneNumberRecord : phoneNumberRecords) {\n+      handle.setSystemContactInfo(phoneNumberRecord.getRecipientId(),\n+                                  getProfileName(phoneNumberRecord.getDisplayName()),\n+                                  phoneNumberRecord.getDisplayName(),\n+                                  phoneNumberRecord.getContactPhotoUri(),\n+                                  phoneNumberRecord.getContactLabel(),\n+                                  phoneNumberRecord.getPhoneType(),\n+                                  Optional.fromNullable(phoneNumberRecord.getContactUri()).transform(Uri::toString).orNull());\n+    }\n+  }\n+\n+  private @NonNull ProfileName getProfileName(@Nullable String displayName) {\n+    if (structuredNameRecord != null && structuredNameRecord.hasGivenName()) {\n+      return structuredNameRecord.asProfileName();\n+    } else if (displayName != null) {\n+      return ProfileName.asGiven(displayName);\n+    } else {\n+      Log.w(TAG, \"Failed to find a suitable display name!\");\n+      return ProfileName.EMPTY;\n+    }\n+  }\n+}"
  },
  {
    "sha": "e8f97ce6d52213a7fe5db6f6c91ad45c218abb33",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/contacts/sync/DirectoryHelper.java",
    "status": "modified",
    "additions": 72,
    "deletions": 18,
    "changes": 90,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/DirectoryHelper.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/DirectoryHelper.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/DirectoryHelper.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -7,7 +7,6 @@\n import android.content.Context;\n import android.content.OperationApplicationException;\n import android.database.Cursor;\n-import android.net.Uri;\n import android.os.RemoteException;\n import android.provider.ContactsContract;\n import android.text.TextUtils;\n@@ -43,6 +42,7 @@\n import org.thoughtcrime.securesms.registration.RegistrationUtil;\n import org.thoughtcrime.securesms.sms.IncomingJoinedMessage;\n import org.thoughtcrime.securesms.storage.StorageSyncHelper;\n+import org.thoughtcrime.securesms.util.CursorUtil;\n import org.thoughtcrime.securesms.util.ProfileUtil;\n import org.thoughtcrime.securesms.util.SetUtil;\n import org.thoughtcrime.securesms.util.Stopwatch;\n@@ -63,6 +63,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.ExecutionException;\n@@ -320,27 +321,64 @@ private static void updateContactsDatabase(@NonNull Context context,\n       contactsDatabase.removeDeletedRawContacts(account.getAccount());\n       contactsDatabase.setRegisteredUsers(account.getAccount(), activeAddresses, removeMissing);\n \n-      Cursor               cursor = ContactAccessor.getInstance().getAllSystemContacts(context);\n-      BulkOperationsHandle handle = recipientDatabase.beginBulkSystemContactUpdate();\n+      BulkOperationsHandle  handle = recipientDatabase.beginBulkSystemContactUpdate();\n \n-      try {\n+      try (Cursor cursor = ContactAccessor.getInstance().getAllSystemContacts(context)) {\n         while (cursor != null && cursor.moveToNext()) {\n-          String number = cursor.getString(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.NUMBER));\n-\n-          if (isValidContactNumber(number)) {\n-            String      formattedNumber = PhoneNumberFormatter.get(context).format(number);\n-            String      realNumber      = Util.getFirstNonEmpty(rewrites.get(formattedNumber), formattedNumber);\n-            RecipientId recipientId     = Recipient.externalContact(context, realNumber).getId();\n-            String      displayName     = cursor.getString(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\n-            String      contactPhotoUri = cursor.getString(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.PHOTO_URI));\n-            String      contactLabel    = cursor.getString(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.LABEL));\n-            int         phoneType       = cursor.getInt(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.TYPE));\n-            Uri         contactUri      = ContactsContract.Contacts.getLookupUri(cursor.getLong(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone._ID)),\n-                                                                                 cursor.getString(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY)));\n-\n-            handle.setSystemContactInfo(recipientId, displayName, contactPhotoUri, contactLabel, phoneType, contactUri.toString());\n+          String mimeType = getMimeType(cursor);\n+\n+          if (!isPhoneMimeType(mimeType)) {\n+            Log.w(TAG, \"Ignoring unwanted mime type: \" + mimeType);\n+            continue;\n+          }\n+\n+          String        lookupKey     = getLookupKey(cursor);\n+          ContactHolder contactHolder = new ContactHolder(lookupKey);\n+\n+          while (!cursor.isAfterLast() && getLookupKey(cursor).equals(lookupKey) && isPhoneMimeType(getMimeType(cursor))) {\n+            String number = CursorUtil.requireString(cursor, ContactsContract.CommonDataKinds.Phone.NUMBER);\n+\n+            if (isValidContactNumber(number)) {\n+              String formattedNumber = PhoneNumberFormatter.get(context).format(number);\n+              String realNumber      = Util.getFirstNonEmpty(rewrites.get(formattedNumber), formattedNumber);\n+\n+              PhoneNumberRecord.Builder builder = new PhoneNumberRecord.Builder();\n+\n+              builder.withRecipientId(Recipient.externalContact(context, realNumber).getId());\n+              builder.withDisplayName(CursorUtil.requireString(cursor, ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));\n+              builder.withContactPhotoUri(CursorUtil.requireString(cursor, ContactsContract.CommonDataKinds.Phone.PHOTO_URI));\n+              builder.withContactLabel(CursorUtil.requireString(cursor, ContactsContract.CommonDataKinds.Phone.LABEL));\n+              builder.withPhoneType(CursorUtil.requireInt(cursor, ContactsContract.CommonDataKinds.Phone.TYPE));\n+              builder.withContactUri(ContactsContract.Contacts.getLookupUri(CursorUtil.requireLong(cursor, ContactsContract.CommonDataKinds.Phone._ID),\n+                                                                            CursorUtil.requireString(cursor, ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY)));\n+\n+              contactHolder.addPhoneNumberRecord(builder.build());\n+            } else {\n+              Log.w(TAG, \"Skipping phone entry with invalid number\");\n+            }\n+\n+            cursor.moveToNext();\n           }\n+\n+          if (!cursor.isAfterLast() && getLookupKey(cursor).equals(lookupKey)) {\n+            if (isStructuredNameMimeType(getMimeType(cursor))) {\n+              StructuredNameRecord.Builder builder = new StructuredNameRecord.Builder();\n+\n+              builder.withGivenName(CursorUtil.requireString(cursor, ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME));\n+              builder.withFamilyName(CursorUtil.requireString(cursor, ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME));\n+\n+              contactHolder.setStructuredNameRecord(builder.build());\n+            } else {\n+              Log.i(TAG, \"Skipping invalid mimeType \" + mimeType);\n+            }\n+          } else {\n+            Log.i(TAG, \"No structured name for user, rolling back cursor.\");\n+            cursor.moveToPrevious();\n+          }\n+\n+          contactHolder.commit(handle);\n         }\n+\n       } finally {\n         handle.finish();\n       }\n@@ -358,10 +396,26 @@ private static void updateContactsDatabase(@NonNull Context context,\n     }\n   }\n \n+  private static boolean isPhoneMimeType(@NonNull String mimeType) {\n+    return ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimeType);\n+  }\n+\n+  private static boolean isStructuredNameMimeType(@NonNull String mimeType) {\n+    return ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE.equals(mimeType);\n+  }\n+\n   private static boolean isValidContactNumber(@Nullable String number) {\n     return !TextUtils.isEmpty(number) && !UuidUtil.isUuid(number);\n   }\n \n+  private static @NonNull String getLookupKey(@NonNull Cursor cursor) {\n+    return Objects.requireNonNull(CursorUtil.requireString(cursor, ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY));\n+  }\n+\n+  private static @NonNull String getMimeType(@NonNull Cursor cursor) {\n+    return CursorUtil.requireString(cursor, ContactsContract.Data.MIMETYPE);\n+  }\n+\n   private static @Nullable AccountHolder getOrCreateSystemAccount(Context context) {\n     AccountManager accountManager = AccountManager.get(context);\n     Account[]      accounts       = accountManager.getAccountsByType(BuildConfig.APPLICATION_ID);"
  },
  {
    "sha": "0393f894103b495fbb07844ef2669ada3090dbd5",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/contacts/sync/PhoneNumberRecord.java",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/PhoneNumberRecord.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/PhoneNumberRecord.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/PhoneNumberRecord.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -0,0 +1,99 @@\n+package org.thoughtcrime.securesms.contacts.sync;\n+\n+import android.net.Uri;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import org.thoughtcrime.securesms.recipients.RecipientId;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents all the data we pull from a Phone data cursor row from the contacts database.\n+ */\n+final class PhoneNumberRecord {\n+\n+  private final RecipientId recipientId;\n+  private final String      displayName;\n+  private final String      contactPhotoUri;\n+  private final String      contactLabel;\n+  private final int         phoneType;\n+  private final Uri         contactUri;\n+\n+  private PhoneNumberRecord(@NonNull PhoneNumberRecord.Builder builder) {\n+    recipientId     = Objects.requireNonNull(builder.recipientId);\n+    displayName     = builder.displayName;\n+    contactPhotoUri = builder.contactPhotoUri;\n+    contactLabel    = builder.contactLabel;\n+    phoneType       = builder.phoneType;\n+    contactUri      = builder.contactUri;\n+  }\n+\n+  @NonNull RecipientId getRecipientId() {\n+    return recipientId;\n+  }\n+\n+  @Nullable String getDisplayName() {\n+    return displayName;\n+  }\n+\n+  @Nullable String getContactPhotoUri() {\n+    return contactPhotoUri;\n+  }\n+\n+  @Nullable String getContactLabel() {\n+    return contactLabel;\n+  }\n+\n+  int getPhoneType() {\n+    return phoneType;\n+  }\n+\n+  @Nullable Uri getContactUri() {\n+    return contactUri;\n+  }\n+\n+  final static class Builder {\n+    private RecipientId recipientId;\n+    private String      displayName;\n+    private String      contactPhotoUri;\n+    private String      contactLabel;\n+    private int         phoneType;\n+    private Uri         contactUri;\n+\n+    @NonNull Builder withRecipientId(@NonNull RecipientId recipientId) {\n+      this.recipientId = recipientId;\n+      return this;\n+    }\n+\n+    @NonNull Builder withDisplayName(@Nullable String displayName) {\n+      this.displayName = displayName;\n+      return this;\n+    }\n+\n+    @NonNull Builder withContactUri(@Nullable Uri contactUri) {\n+      this.contactUri = contactUri;\n+      return this;\n+    }\n+\n+    @NonNull Builder withContactLabel(@NonNull String contactLabel) {\n+      this.contactLabel = contactLabel;\n+      return this;\n+    }\n+\n+    @NonNull Builder withContactPhotoUri(@NonNull String contactPhotoUri) {\n+      this.contactPhotoUri = contactPhotoUri;\n+      return this;\n+    }\n+\n+    @NonNull Builder withPhoneType(int phoneType) {\n+      this.phoneType = phoneType;\n+      return this;\n+    }\n+\n+    @NonNull PhoneNumberRecord build() {\n+      return new PhoneNumberRecord(this);\n+    }\n+  }\n+}"
  },
  {
    "sha": "bfcacd2a730548872fa0f37e11ae877a3226b562",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/contacts/sync/StructuredNameRecord.java",
    "status": "added",
    "additions": 46,
    "deletions": 0,
    "changes": 46,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/StructuredNameRecord.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/StructuredNameRecord.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/contacts/sync/StructuredNameRecord.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -0,0 +1,46 @@\n+package org.thoughtcrime.securesms.contacts.sync;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import org.thoughtcrime.securesms.profiles.ProfileName;\n+\n+/**\n+ * Represents the data pulled from a StructuredName row of a Contacts data cursor.\n+ */\n+final class StructuredNameRecord {\n+  private final String givenName;\n+  private final String familyName;\n+\n+  StructuredNameRecord(@NonNull StructuredNameRecord.Builder builder) {\n+    this.givenName  = builder.givenName;\n+    this.familyName = builder.familyName;\n+  }\n+\n+  public boolean hasGivenName() {\n+    return givenName != null;\n+  }\n+\n+  public @NonNull ProfileName asProfileName() {\n+    return ProfileName.fromParts(givenName, familyName);\n+  }\n+\n+  final static class Builder {\n+    private String givenName;\n+    private String familyName;\n+\n+    @NonNull Builder withGivenName(@Nullable String givenName) {\n+      this.givenName = givenName;\n+      return this;\n+    }\n+\n+    @NonNull Builder withFamilyName(@Nullable String familyName) {\n+      this.familyName = familyName;\n+      return this;\n+    }\n+\n+    @NonNull StructuredNameRecord build() {\n+      return new StructuredNameRecord(this);\n+    }\n+  }\n+}"
  },
  {
    "sha": "421848b75f3d1e0d4172a84849f5eaee2efc99ad",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationActivity.java",
    "status": "modified",
    "additions": 25,
    "deletions": 16,
    "changes": 41,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationActivity.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationActivity.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationActivity.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -88,6 +88,7 @@\n import org.greenrobot.eventbus.EventBus;\n import org.greenrobot.eventbus.Subscribe;\n import org.greenrobot.eventbus.ThreadMode;\n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.concurrent.SignalExecutors;\n import org.signal.core.util.logging.Log;\n import org.thoughtcrime.securesms.BlockUnblockDialog;\n@@ -200,7 +201,6 @@\n import org.thoughtcrime.securesms.messagerequests.MessageRequestViewModel;\n import org.thoughtcrime.securesms.messagerequests.MessageRequestsBottomView;\n import org.thoughtcrime.securesms.mms.AttachmentManager;\n-import org.thoughtcrime.securesms.mms.SlideFactory.MediaType;\n import org.thoughtcrime.securesms.mms.AudioSlide;\n import org.thoughtcrime.securesms.mms.DecryptableStreamUriLoader;\n import org.thoughtcrime.securesms.mms.GifSlide;\n@@ -217,6 +217,7 @@\n import org.thoughtcrime.securesms.mms.Slide;\n import org.thoughtcrime.securesms.mms.SlideDeck;\n import org.thoughtcrime.securesms.mms.SlideFactory;\n+import org.thoughtcrime.securesms.mms.SlideFactory.MediaType;\n import org.thoughtcrime.securesms.mms.StickerSlide;\n import org.thoughtcrime.securesms.mms.VideoSlide;\n import org.thoughtcrime.securesms.notifications.NotificationChannels;\n@@ -399,6 +400,8 @@\n   private boolean       isMmsEnabled                  = true;\n   private boolean       isSecurityInitialized         = false;\n \n+  private volatile boolean screenInitialized = false;\n+\n   private       IdentityRecordList identityRecords = new IdentityRecordList(Collections.emptyList());\n   private final DynamicTheme       dynamicTheme    = new DynamicNoActionBarTheme();\n   private final DynamicLanguage    dynamicLanguage = new DynamicLanguage();\n@@ -448,14 +451,19 @@ protected void onCreate(Bundle state, boolean ready) {\n     initializeSecurity(recipient.get().isRegistered(), isDefaultSms).addListener(new AssertedSuccessListener<Boolean>() {\n       @Override\n       public void onSuccess(Boolean result) {\n+        if (isFinishing()) {\n+          Log.w(TAG, \"Activity is finishing. Not proceeding with initialization.\");\n+          return;\n+        }\n+\n         initializeProfiles();\n         initializeGv1Migration();\n         initializeDraft(args).addListener(new AssertedSuccessListener<Boolean>() {\n           @Override\n           public void onSuccess(Boolean loadedDraft) {\n             if (loadedDraft != null && loadedDraft) {\n               Log.i(TAG, \"Finished loading draft\");\n-              Util.runOnMain(() -> {\n+              ThreadUtil.runOnMain(() -> {\n                 if (fragment != null && fragment.isResumed()) {\n                   fragment.moveToLastSeen();\n                 } else {\n@@ -468,6 +476,8 @@ public void onSuccess(Boolean loadedDraft) {\n               composeText.addTextChangedListener(typingTextWatcher);\n             }\n             composeText.setSelection(composeText.length(), composeText.length());\n+\n+            screenInitialized = true;\n           }\n         });\n       }\n@@ -485,6 +495,13 @@ protected void onNewIntent(Intent intent) {\n       return;\n     }\n \n+    if (!screenInitialized) {\n+      Log.w(TAG, \"Activity is in the middle of initialization. Restarting.\");\n+      finish();\n+      startActivity(intent);\n+      return;\n+    }\n+\n     reactWithAnyEmojiStartPage = -1;\n     if (!Util.isEmpty(composeText) || attachmentManager.isAttachmentPresent() || inputPanel.getQuote().isPresent()) {\n       saveDraft();\n@@ -2069,6 +2086,8 @@ private void initializeResources(@NonNull ConversationIntents.Args args) {\n     distributionType = args.getDistributionType();\n     glideRequests    = GlideApp.with(this);\n \n+    Log.i(TAG, \"[initializeResources] Recipient: \" + recipient.getId() + \", Thread: \" + threadId);\n+\n     recipient.observe(this, this::onRecipientChanged);\n   }\n \n@@ -2705,8 +2724,7 @@ private void sendMessage() {\n                                        linkPreviewViewModel.hasLinkPreview()   ||\n                                        needsSplit;\n \n-      Log.i(TAG, \"isManual Selection: \" + sendButton.isManualSelection());\n-      Log.i(TAG, \"forceSms: \" + forceSms);\n+      Log.i(TAG, \"[sendMessage] recipient: \" + recipient.getId() + \", threadId: \" + threadId + \",  forceSms: \" + forceSms + \", isManual: \" + sendButton.isManualSelection());\n \n       if ((recipient.isMmsGroup() || recipient.getEmail().isPresent()) && !isMmsEnabled) {\n         handleManualMmsRequired();\n@@ -2873,18 +2891,9 @@ private void sendTextMessage(final boolean forceSms, final long expiresIn, final\n                  silentlySetComposeText(\"\");\n                  final long id = fragment.stageOutgoingMessage(message);\n \n-                 new AsyncTask<OutgoingTextMessage, Void, Long>() {\n-                   @Override\n-                   protected Long doInBackground(OutgoingTextMessage... messages) {\n-                     return MessageSender.send(context, messages[0], thread, forceSms, () -> fragment.releaseOutgoingMessage(id));\n-                   }\n-\n-                   @Override\n-                   protected void onPostExecute(Long result) {\n-                     sendComplete(result);\n-                   }\n-                 }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, message);\n-\n+                 SimpleTask.run(() -> {\n+                   return MessageSender.send(context, message, thread, forceSms, () -> fragment.releaseOutgoingMessage(id));\n+                 }, this::sendComplete);\n                })\n                .execute();\n   }"
  },
  {
    "sha": "19b6a6c4491671594d8f0f02c943bb747303c919",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationAdapter.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationAdapter.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationAdapter.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationAdapter.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -36,14 +36,14 @@\n import androidx.recyclerview.widget.ListAdapter;\n import androidx.recyclerview.widget.RecyclerView;\n \n+import org.signal.core.util.ThreadUtil;\n import org.signal.core.util.logging.Log;\n import org.signal.paging.PagingController;\n import org.thoughtcrime.securesms.BindableConversationItem;\n import org.thoughtcrime.securesms.R;\n import org.thoughtcrime.securesms.database.model.MessageRecord;\n import org.thoughtcrime.securesms.mms.GlideRequests;\n import org.thoughtcrime.securesms.recipients.Recipient;\n-import org.thoughtcrime.securesms.recipients.RecipientUtil;\n import org.thoughtcrime.securesms.util.CachedInflater;\n import org.thoughtcrime.securesms.util.DateUtils;\n import org.thoughtcrime.securesms.util.StickyHeaderDecoration;\n@@ -545,7 +545,7 @@ static void initializePool(@NonNull RecyclerView.RecycledViewPool pool) {\n \n   @MainThread\n   private void cleanFastRecords() {\n-    Util.assertMainThread();\n+    ThreadUtil.assertMainThread();\n \n     synchronized (releasedFastRecords) {\n       Iterator<ConversationMessage> messageIterator = fastRecords.iterator();"
  },
  {
    "sha": "5ede673a49d6b7fda7ed60be32ac979647ce002d",
    "filename": "app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationFragment.java",
    "status": "modified",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/bazuwee/Signal-Android/blob/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationFragment.java",
    "raw_url": "https://github.com/bazuwee/Signal-Android/raw/44d014c4459e9ac34b74800002fa86b402d0501c/app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationFragment.java",
    "contents_url": "https://api.github.com/repos/bazuwee/Signal-Android/contents/app/src/main/java/org/thoughtcrime/securesms/conversation/ConversationFragment.java?ref=44d014c4459e9ac34b74800002fa86b402d0501c",
    "patch": "@@ -137,6 +137,7 @@\n import org.thoughtcrime.securesms.util.SignalProxyUtil;\n import org.thoughtcrime.securesms.util.SnapToTopDataObserver;\n import org.thoughtcrime.securesms.util.StickyHeaderDecoration;\n+import org.thoughtcrime.securesms.util.Stopwatch;\n import org.thoughtcrime.securesms.util.StorageUtil;\n import org.thoughtcrime.securesms.util.TextSecurePreferences;\n import org.thoughtcrime.securesms.util.ThemeUtil;\n@@ -200,6 +201,7 @@\n   private int                         pulsePosition = -1;\n   private VoiceNoteMediaController    voiceNoteMediaController;\n   private View                        toolbarShadow;\n+  private Stopwatch                   startupStopwatch;\n \n   public static void prepare(@NonNull Context context) {\n     FrameLayout parent = new FrameLayout(context);\n@@ -217,6 +219,7 @@ public static void prepare(@NonNull Context context) {\n   public void onCreate(Bundle icicle) {\n     super.onCreate(icicle);\n     this.locale = (Locale) getArguments().getSerializable(PassphraseRequiredActivity.LOCALE_EXTRA);\n+    startupStopwatch = new Stopwatch(\"conversation-open\");\n   }\n \n   @Override\n@@ -327,6 +330,8 @@ private void setListVerticalTranslation() {\n   public void onActivityCreated(Bundle bundle) {\n     super.onActivityCreated(bundle);\n \n+    Log.d(TAG, \"[onActivityCreated]\");\n+\n     initializeScrollButtonAnimations();\n     initializeResources();\n     initializeMessageRequestViewModel();\n@@ -377,6 +382,8 @@ public void onConfigurationChanged(@NonNull Configuration newConfig) {\n   }\n \n   public void onNewIntent() {\n+    Log.d(TAG, \"[onNewIntent]\");\n+\n     if (actionMode != null) {\n       actionMode.finish();\n     }\n@@ -560,6 +567,18 @@ private void initializeListAdapter() {\n       setLastSeen(conversationViewModel.getLastSeen());\n \n       emptyConversationBanner.setVisibility(View.GONE);\n+\n+      adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\n+        @Override\n+        public void onItemRangeInserted(int positionStart, int itemCount) {\n+          startupStopwatch.split(\"data-set\");\n+          adapter.unregisterAdapterDataObserver(this);\n+          list.post(() -> {\n+            startupStopwatch.split(\"first-render\");\n+            startupStopwatch.stop(TAG);\n+          });\n+        }\n+      });\n     } else if (threadId == -1) {\n       emptyConversationBanner.setVisibility(View.VISIBLE);\n       toolbarShadow.setVisibility(View.GONE);\n@@ -673,9 +692,12 @@ private ConversationMessage getSelectedConversationMessage() {\n   }\n \n   public void reload(Recipient recipient, long threadId) {\n+    Log.d(TAG, \"[reload] Recipient: \" + recipient.getId() + \", ThreadId: \" + threadId);\n     this.recipient = recipient.live();\n \n     if (this.threadId != threadId) {\n+      Log.i(TAG, \"ThreadId changed from \" + this.threadId + \" to \" + threadId + \". Recipient was \" + this.recipient.getId() + \" and is now \" + recipient.getId());\n+\n       this.threadId = threadId;\n       messageRequestViewModel.setConversationInfo(recipient.getId(), threadId);\n "
  }
]
