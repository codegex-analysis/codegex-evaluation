[
  {
    "sha": "7de93d218ba2403a0bc77edd62e7970a9e9e3bb7",
    "filename": "sonar-swift-plugin/src/main/shell/run-sonar-swift.sh",
    "status": "modified",
    "additions": 192,
    "deletions": 132,
    "changes": 324,
    "blob_url": "https://github.com/Idean/sonar-swift/blob/4009074b8781042ff452588d67b99849ae8bee30/sonar-swift-plugin/src/main/shell/run-sonar-swift.sh",
    "raw_url": "https://github.com/Idean/sonar-swift/raw/4009074b8781042ff452588d67b99849ae8bee30/sonar-swift-plugin/src/main/shell/run-sonar-swift.sh",
    "contents_url": "https://api.github.com/repos/Idean/sonar-swift/contents/sonar-swift-plugin/src/main/shell/run-sonar-swift.sh?ref=4009074b8781042ff452588d67b99849ae8bee30",
    "patch": "@@ -147,7 +147,7 @@ unittests=\"on\"\n swiftlint=\"on\"\n tailor=\"on\"\n lizard=\"on\"\n-oclint=\"on\"\n+oclint=\"\"\n fauxpas=\"on\"\n sonarscanner=\"\"\n sonarurl=\"\"\n@@ -174,6 +174,9 @@ while [ \"$1\" != \"\" ]; do\n     -notailor)\n       tailor=\"\"\n       ;;\n+    -useoclint)\n+      oclint=\"on\"\n+      ;;\n     -usesonarscanner)\n       sonarscanner=\"on\"\n       ;;\n@@ -187,7 +190,7 @@ while [ \"$1\" != \"\" ]; do\n       sonarpassword=\"$value\"\n       ;;\n     *)\n-      echo >&2 \"Usage: $0 [-v] [-n] [-nounittests] [-noswiftlint)] [-notailor] [-usesonarscanner] [-sonarurl=value] [-sonarlogin=value] [-sonarpassword=value]\"\n+      echo >&2 \"Usage: $0 [-v] [-n] [-nounittests] [-noswiftlint)] [-notailor] [-useoclint] [-usesonarscanner] [-sonarurl=value] [-sonarlogin=value] [-sonarpassword=value]\"\n       exit 1\n       ;;\n   esac\n@@ -221,17 +224,25 @@ fi\n # Source directories for .swift files\n srcDirs=''; readParameter srcDirs 'sonar.sources'\n # The name of your application scheme in Xcode\n-appScheme=''; readParameter appScheme 'sonar.swift.appScheme'\n+if [[ -n \"$SONAR_SWIFT_APPSCHEME\" ]]; then\n+  appScheme=$SONAR_SWIFT_APPSCHEME\n+else\n+  appScheme=''; readParameter appScheme 'sonar.swift.appScheme'\n+fi\n # The app configuration to use for the build\n-appConfiguration=''; readParameter appConfiguration 'sonar.swift.appConfiguration'\n+if [[ -n \"$SONAR_SWIFT_APPCONFIGURATION\" ]]; then\n+  appConfiguration=$SONAR_SWIFT_APPCONFIGURATION\n+else\n+  appConfiguration=''; readParameter appConfiguration 'sonar.swift.appConfiguration'\n+fi\n+\n # The name of your test scheme in Xcode\n testScheme=''; readParameter testScheme 'sonar.swift.testScheme'\n # The name of your other binary files (frameworks)\n binaryNames=''; readParameter binaryNames 'sonar.coverage.binaryNames'\n-# Get the path of plist file\n-plistFile=`xcodebuild -showBuildSettings -project \"${projectFile}\" | grep -i 'PRODUCT_SETTINGS_PATH' -m 1 | sed 's/[ ]*PRODUCT_SETTINGS_PATH = //'`\n-# Number version from plist if no sonar.projectVersion\n-numVersionFromPlist=`defaults read \"${plistFile}\" CFBundleShortVersionString`\n+\n+# The project version from properties file\n+numVersionSonarRunner=''; readParameter numVersionSonarRunner 'sonar.projectVersion'\n \n # Read destination simulator\n destinationSimulator=''; readParameter destinationSimulator 'sonar.swift.simulator'\n@@ -245,41 +256,108 @@ excludedPathsFromCoverage=''; readParameter excludedPathsFromCoverage 'sonar.swi\n # Skipping tests\n skipTests=''; readParameter skipTests 'sonar.swift.skipTests'\n \n-# Check for mandatory parameters\n-if [ -z \"$projectFile\" -o \"$projectFile\" = \" \" ] && [ -z \"$workspaceFile\" -o \"$workspaceFile\" = \" \" ]; then\n-\techo >&2 \"ERROR - sonar.swift.project or/and sonar.swift.workspace parameter is missing in sonar-project.properties. You must specify which projects (comma-separated list) are application code or which workspace and project to use.\"\n-\texit 1\n-elif [ ! -z \"$workspaceFile\" ] && [ -z \"$projectFile\" ]; then\n-\techo >&2 \"ERROR - sonar.swift.workspace parameter is present in sonar-project.properties but sonar.swift.project and is not. You must specify which projects (comma-separated list) are application code or which workspace and project to use.\"\n-\texit 1\n+## Verify Tooling installed\n+if [ \"$oclint\" = \"on\" ]; then\n+    hash oclint-json-compilation-database 2>/dev/null\n+    if [ $? -ne 0 ]; then\n+      oclint=\"\"\n+      echo \"Disabling OCLint (not installed!)\"\n+    fi\n+fi\n+\n+if [ \"$fauxpas\" = \"on\" ]; then\n+    hash fauxpas 2>/dev/null\n+    if [ $? -ne 0 ]; then\n+      fauxpas=\"\"\n+      echo \"Disabling Faux Pas (not installed!)\"\n+    fi\n fi\n+\n+hash $LIZARD_CMD 2>/dev/null\n+if [ $? -ne 0 ]; then\n+  lizard=\"\"\n+  echo 'Disabling Lizard (not installed!)'\n+fi\n+\n+if [ \"$swiftlint\" = \"on\" ]; then\n+  hash $SWIFTLINT_CMD 2>/dev/null\n+  if [ $? -ne 0 ]; then\n+    swiftlint=\"\"\n+    echo 'Disabling SwiftLint (not installed!)'\n+  fi\n+fi\n+\n+if [ \"$tailor\" = \"on\" ]; then\n+  hash $TAILOR_CMD 2>/dev/null\n+  if [ $? -ne 0 ]; then\n+    tailor=\"\"\n+    echo 'Disabling Tailor (not installed!)'\n+  fi\n+fi\n+\n+# Check if build is required\n+if [ \"$unittests\" = \"on\" -o \"$oclint\" = \"on\" -o \"$fauxpas\" = \"on\" ]; then\n+  buildRequired=\"yes\"\n+fi\n+\n+# Check for mandatory parameters\n if [ -z \"$srcDirs\" -o \"$srcDirs\" = \" \" ]; then\n \techo >&2 \"ERROR - sonar.sources parameter is missing in sonar-project.properties. You must specify which directories contain your .swift source files (comma-separated list).\"\n \texit 1\n fi\n-if [ -z \"$appScheme\" -o \"$appScheme\" = \" \" ]; then\n-\techo >&2 \"ERROR - sonar.swift.appScheme parameter is missing in sonar-project.properties. You must specify which scheme is used to build your application.\"\n-\texit 1\n+\n+# Check for project version\n+if [ -z \"$numVersionSonarRunner\" -o \"$numVersionSonarRunner\" = \" \" ]; then\n+  if [ -z \"$projectFile\" -o \"$projectFile\" = \" \" ]; then\n+\t  echo >&2 \"ERROR - sonar.projectVersion and sonar.swift.project are missing in sonar-project.properties. You must specify one of these to determine the project version\"\n+\t  exit 1\n+  fi\n+  # Get the path of plist file\n+  plistFile=`xcodebuild -showBuildSettings -project \"${projectFile}\" | grep -i 'PRODUCT_SETTINGS_PATH' -m 1 | sed 's/[ ]*PRODUCT_SETTINGS_PATH = //'`\n+  # Number version from plist if no sonar.projectVersion\n+  numVersionFromPlist=`defaults read \"${plistFile}\" CFBundleShortVersionString`\n+  if [ \"$numVersionFromPlist\" = \"\\$(MARKETING_VERSION)\" ]; then\n+    numVersionFromBuildSettings=`xcodebuild -showBuildSettings -project \"${projectFile}\" | grep -i \"\\ MARKETING_VERSION\\ =\" -m 1 | sed 's/[ ]*MARKETING_VERSION = //'`\n+    numVersionSonarRunner=\" --define sonar.projectVersion=$numVersionFromBuildSettings\"\n+  else\n+\t  numVersionSonarRunner=\" --define sonar.projectVersion=$numVersionFromPlist\"\n+\tfi\n+else\n+\t#if we have version number in properties file, we don't override numVersion for sonar-runner/sonar-scanner command\n+\tnumVersionSonarRunner='';\n+fi\n+\n+# Check for properties required to build\n+if [ \"$buildRequired\" = \"yes\" ]; then\n+  if [ -z \"$projectFile\" -o \"$projectFile\" = \" \" ] && [ -z \"$workspaceFile\" -o \"$workspaceFile\" = \" \" ]; then\n+    echo >&2 \"ERROR - sonar.swift.project or/and sonar.swift.workspace parameter is missing in sonar-project.properties. You must specify which projects (comma-separated list) are application code or which workspace and project to use.\"\n+    exit 1\n+  elif [ ! -z \"$workspaceFile\" ] && [ -z \"$projectFile\" ]; then\n+    echo >&2 \"ERROR - sonar.swift.workspace parameter is present in sonar-project.properties but sonar.swift.project and is not. You must specify which projects (comma-separated list) are application code or which workspace and project to use.\"\n+    exit 1\n+  fi\n+  if [ -z \"$appScheme\" -o \"$appScheme\" = \" \" ]; then\n+    echo >&2 \"ERROR - sonar.swift.appScheme parameter is missing in sonar-project.properties. You must specify which scheme is used to build your application.\"\n+    exit 1\n+  fi\n fi\n+\n+# Check for unit test properties\n if [ \"$unittests\" = \"on\" ]; then\n     if [ -z \"$destinationSimulator\" -o \"$destinationSimulator\" = \" \" ]; then\n \t      echo >&2 \"ERROR - sonar.swift.simulator parameter is missing in sonar-project.properties. You must specify which simulator to use.\"\n \t      exit 1\n     fi\n+else\n+  # clean any simulator to bypass build-for-testing\n+  destinationSimulator=\n fi\n \n-# if the appConfiguration is not specified then set to Debug\n-if [ -z \"$appConfiguration\" -o \"$appConfiguration\" = \" \" ]; then\n-\tappConfiguration=\"Debug\"\n-fi\n-\n-\n-\n if [ \"$vflag\" = \"on\" ]; then\n  \techo \"Xcode project file is: $projectFile\"\n \techo \"Xcode workspace file is: $workspaceFile\"\n  \techo \"Xcode application scheme is: $appScheme\"\n-    echo \"Number version from plist is: $numVersionFromPlist\"\n+  echo \"Number version for sonar-runner is: $numVersionSonarRunner\"\n   if [ -n \"$unittests\" ]; then\n  \t    echo \"Destination simulator is: $destinationSimulator\"\n  \t    echo \"Excluded paths from coverage are: $excludedPathsFromCoverage\"\n@@ -304,29 +382,43 @@ fi\n rm -rf sonar-reports\n mkdir sonar-reports\n \n-# Build and extract project information needed later\n-buildCmd=($XCODEBUILD_CMD clean build-for-testing)\n-echo -n 'Building & extracting Xcode project information'\n-if [[ \"$workspaceFile\" != \"\" ]] ; then\n-    buildCmd+=(-workspace \"$workspaceFile\")\n+if [ \"$buildRequired\" = \"yes\" ]; then\n+  # Build and extract project information needed later\n+  buildCmd=($XCODEBUILD_CMD clean)\n+  if [ \"$unittests\" = \"on\" ]; then\n+    buildCmd+=(build-for-testing)\n+  else\n+    buildCmd+=(build CODE_SIGNING_ALLOWED=NO)\n+  fi\n+\n+  echo -n 'Building & extracting Xcode project information'\n+  if [[ \"$workspaceFile\" != \"\" ]] ; then\n+      buildCmd+=(-workspace \"$workspaceFile\")\n+  else\n+      buildCmd+=(-project \"$projectFile\")\n+  fi\n+  buildCmd+=(-scheme \"$appScheme\")\n+  if [[ ! -z \"$appConfiguration\" ]]; then\n+      buildCmd+=(-configuration \"$appConfiguration\")\n+  fi\n+  if [[ ! -z \"$destinationSimulator\" ]]; then\n+      buildCmd+=(-destination \"$destinationSimulator\" -destination-timeout 360)\n+  fi\n+  buildCmd+=(COMPILER_INDEX_STORE_ENABLE=NO)\n+  runCommand  xcodebuild.log \"${buildCmd[@]}\"\n+  #oclint-xcodebuild # Transform the xcodebuild.log file into a compile_command.json file\n+  cat xcodebuild.log | $XCPRETTY_CMD -r json-compilation-database -o compile_commands.json\n+\n+  # Objective-C code detection\n+  hasObjC=\"no\"\n+  compileCmdFile=compile_commands.json\n+  minimumSize=3\n+  actualSize=$(stat -f%z \"$compileCmdFile\")\n+  if [ $actualSize -ge $minimumSize ]; then\n+      hasObjC=\"yes\"\n+  fi\n else\n-    buildCmd+=(-project \"$projectFile\")\n-fi\n-buildCmd+=(-scheme $appScheme)\n-if [[ ! -z \"$destinationSimulator\" ]]; then\n-    buildCmd+=(-destination \"$destinationSimulator\" -destination-timeout 360 COMPILER_INDEX_STORE_ENABLE=NO)\n-fi\n-runCommand  xcodebuild.log \"${buildCmd[@]}\"\n-#oclint-xcodebuild # Transform the xcodebuild.log file into a compile_command.json file\n-cat xcodebuild.log | $XCPRETTY_CMD -r json-compilation-database -o compile_commands.json\n-\n-# Objective-C code detection\n-hasObjC=\"no\"\n-compileCmdFile=compile_commands.json\n-minimumSize=3\n-actualSize=$(stat -f%z \"$compileCmdFile\")\n-if [ $actualSize -ge $minimumSize ]; then\n-    hasObjC=\"yes\"\n+  echo \"Skipping build\"\n fi\n \n # Tests : surefire and coverage\n@@ -343,13 +435,13 @@ if [ \"$unittests\" = \"on\" ]; then\n     elif [[ ! -z \"$projectFile\" ]]; then\n \t      buildCmd+=(-project \"$projectFile\")\n     fi\n-    buildCmd+=( -scheme \"$appScheme\" -configuration \"$appConfiguration\" -enableCodeCoverage YES)\n+    buildCmd+=( -scheme \"$appScheme\" -enableCodeCoverage YES)\n+    if [[ ! -z \"$appConfiguration\" ]]; then\n+      buildCmd+=(-configuration \"$appConfiguration\")\n+    fi\n     if [[ ! -z \"$destinationSimulator\" ]]; then\n         buildCmd+=(-destination \"$destinationSimulator\" -destination-timeout 60)\n     fi\n-    if [[ ! -z \"$skipTests\" ]]; then\n-    \tbuildCmd+=(-skip-testing:\"$skipTests\")\n-    fi\n \n     runCommand  sonar-reports/xcodebuild.log \"${buildCmd[@]}\"\n     cat sonar-reports/xcodebuild.log  | $XCPRETTY_CMD -t --report junit\n@@ -395,46 +487,37 @@ fi\n \n # SwiftLint\n if [ \"$swiftlint\" = \"on\" ]; then\n-\tif hash $SWIFTLINT_CMD 2>/dev/null; then\n-\t\techo -n 'Running SwiftLint...'\n+  echo -n 'Running SwiftLint...'\n \n-\t\t# Build the --include flags\n-\t\tcurrentDirectory=${PWD##*/}\n-\t\techo \"$srcDirs\" | sed -n 1'p' | tr ',' '\\n' > tmpFileRunSonarSh\n-\t\twhile read word; do\n+  # Build the --include flags\n+  currentDirectory=${PWD##*/}\n+  echo \"$srcDirs\" | sed -n 1'p' | tr ',' '\\n' > tmpFileRunSonarSh\n+  while read word; do\n \n-\t\t\t# Run SwiftLint command\n-\t\t    $SWIFTLINT_CMD lint --path \"$word\" > sonar-reports/\"$(echo $word | sed 's/\\//_/g')\"-swiftlint.txt\n-\n-\t\tdone < tmpFileRunSonarSh\n-\t\trm -rf tmpFileRunSonarSh\n-\telse\n-\t\techo \"Skipping SwiftLint (not installed!)\"\n-\tfi\n+    # Run SwiftLint command\n+      $SWIFTLINT_CMD lint --path \"$word\" > sonar-reports/\"$(echo $word | sed 's/\\//_/g')\"-swiftlint.txt\n \n+  done < tmpFileRunSonarSh\n+  rm -rf tmpFileRunSonarSh\n else\n-\techo 'Skipping SwiftLint (test purposes only!)'\n+\techo 'Skipping SwiftLint'\n fi\n \n # Tailor\n if [ \"$tailor\" = \"on\" ]; then\n-\tif hash $TAILOR_CMD 2>/dev/null; then\n-\t\techo -n 'Running Tailor...'\n+  echo -n 'Running Tailor...'\n \n-\t\t# Build the --include flags\n-\t\tcurrentDirectory=${PWD##*/}\n-\t\techo \"$srcDirs\" | sed -n 1'p' | tr ',' '\\n' > tmpFileRunSonarSh\n-\t\twhile read word; do\n+  # Build the --include flags\n+  currentDirectory=${PWD##*/}\n+  echo \"$srcDirs\" | sed -n 1'p' | tr ',' '\\n' > tmpFileRunSonarSh\n+  while read word; do\n \n-\t\t\t  # Run tailor command\n-\t\t    $TAILOR_CMD $tailorConfiguration \"$word\" > sonar-reports/\"$(echo $word | sed 's/\\//_/g')\"-tailor.txt\n-\n-\t\tdone < tmpFileRunSonarSh\n-\t\trm -rf tmpFileRunSonarSh\n-\telse\n-\t\techo \"Skipping Tailor (not installed!)\"\n-\tfi\n+      # Run tailor command\n+      $TAILOR_CMD $tailorConfiguration \"$word\" > sonar-reports/\"$(echo $word | sed 's/\\//_/g')\"-tailor.txt\n \n+  done < tmpFileRunSonarSh\n+  rm -rf tmpFileRunSonarSh\n+  echo \"\"\n else\n \techo 'Skipping Tailor!'\n fi\n@@ -468,80 +551,57 @@ if [ \"$oclint\" = \"on\" ] && [ \"$hasObjC\" = \"yes\" ]; then\n \n \n else\n-\techo 'Skipping OCLint (test purposes only!)'\n+\techo 'Skipping OCLint'\n fi\n \n #FauxPas\n if [ \"$fauxpas\" = \"on\" ] && [ \"$hasObjC\" = \"yes\" ]; then\n-    hash fauxpas 2>/dev/null\n-    if [ $? -eq 0 ]; then\n-\n-        echo -n 'Running FauxPas...'\n-\n-        if [ \"$projectCount\" = \"1\" ]\n-        then\n-\n-            fauxpas -o json check $projectFile --workspace $workspaceFile --scheme $appScheme > sonar-reports/fauxpas.json\n \n+    echo -n 'Running FauxPas...'\n \n-        else\n+    if [ \"$projectCount\" = \"1\" ]\n+    then\n+        fauxpas -o json check $projectFile --workspace $workspaceFile --scheme \"$appScheme\" > sonar-reports/fauxpas.json\n+    else\n+        echo $projectFile | sed -n 1'p' | tr ',' '\\n' > tmpFileRunSonarSh\n+        while read projectName; do\n \n-            echo $projectFile | sed -n 1'p' | tr ',' '\\n' > tmpFileRunSonarSh\n-            while read projectName; do\n+            $XCODEBUILD_CMD -list -project $projectName | sed -n '/Schemes/,$p' | while read scheme\n+            do\n \n-                $XCODEBUILD_CMD -list -project $projectName | sed -n '/Schemes/,$p' | while read scheme\n-                do\n+            if [ \"$scheme\" = \"\" ]\n+            then\n+            exit\n+            fi\n \n-                if [ \"$scheme\" = \"\" ]\n+            if [ \"$scheme\" == \"${scheme/Schemes/}\" ]\n+            then\n+                if [ \"$scheme\" != \"$testScheme\" ]\n                 then\n-                exit\n+                    projectBaseDir=$(dirname $projectName)\n+                    workspaceRelativePath=$(python -c \"import os.path; print os.path.relpath('$workspaceFile', '$projectBaseDir')\")\n+                    fauxpas -o json check $projectName --workspace $workspaceRelativePath --scheme \"$scheme\" > sonar-reports/$(basename $projectName .xcodeproj)-$scheme-fauxpas.json\n                 fi\n+            fi\n \n-                if [ \"$scheme\" == \"${scheme/Schemes/}\" ]\n-                then\n-                    if [ \"$scheme\" != \"$testScheme\" ]\n-                    then\n-                        projectBaseDir=$(dirname $projectName)\n-                        workspaceRelativePath=$(python -c \"import os.path; print os.path.relpath('$workspaceFile', '$projectBaseDir')\")\n-                        fauxpas -o json check $projectName --workspace $workspaceRelativePath --scheme $scheme > sonar-reports/$(basename $projectName .xcodeproj)-$scheme-fauxpas.json\n-                    fi\n-                fi\n-\n-                done\n-\n-            done < tmpFileRunSonarSh\n-            rm -rf tmpFileRunSonarSh\n+            done\n \n-\t    fi\n-\n-    else\n-        echo 'Skipping FauxPas (not installed)'\n-    fi\n+        done < tmpFileRunSonarSh\n+        rm -rf tmpFileRunSonarSh\n+  fi\n else\n     echo 'Skipping FauxPas'\n fi\n \n # Lizard Complexity\n if [ \"$lizard\" = \"on\" ]; then\n-\tif hash $LIZARD_CMD 2>/dev/null; then\n \t\techo -n 'Running Lizard...'\n-  \t\t$LIZARD_CMD --xml \"$srcDirs\" > sonar-reports/lizard-report.xml\n-  \telse\n-  \t\techo 'Skipping Lizard (not installed!)'\n-  \tfi\n+  \t$LIZARD_CMD --xml \"$srcDirs\" > sonar-reports/lizard-report.xml\n else\n- \techo 'Skipping Lizard (test purposes only!)'\n+ \techo 'Skipping Lizard'\n fi\n \n-# The project version from properties file\n-numVersionSonarRunner=''; readParameter numVersionSonarRunner 'sonar.projectVersion'\n-if [ -z \"$numVersionSonarRunner\" -o \"$numVersionSonarRunner\" = \" \" ]; then\n-\tnumVersionSonarRunner=\" --define sonar.projectVersion=$numVersionFromPlist\"\n-else\n-\t#if we have version number in properties file, we don't overide numVersion for sonar-runner/sonar-scanner command\n-\tnumVersionSonarRunner='';\n-fi\n-# Build sonar-runner / sonnar-scanner arguments\n+# Build sonar-runner / sonar-scanner arguments\n sonarArguments=();\n if [ \"$sonarurl\" != \"\" ]; then\n   sonarArguments+=(-Dsonar.host.url=$sonarurl)"
  }
]
