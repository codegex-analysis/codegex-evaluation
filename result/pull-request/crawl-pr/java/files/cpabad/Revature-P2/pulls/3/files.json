[
  {
    "sha": "898a1d24f6ce45a1af564e3f09887ba96924809b",
    "filename": ".gitignore",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/.gitignore",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/.gitignore",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/.gitignore?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,79 @@\n+# git ls-files --others --exclude-from=.git/info/exclude\r\n+# Lines that start with '#' are comments.\r\n+# For a project mostly in C, the following would be a good set of\r\n+# exclude patterns (uncomment them if you want to use them):\r\n+# *.[oa]\r\n+# *~\r\n+# .git/info/exclude\r\n+\r\n+**/pull_request_template.md\r\n+**/issue_template.md\r\n+**/target/\r\n+**/bin/\r\n+**/META-INF/**\r\n+\r\n+#Eclipse\r\n+**/.metadata\r\n+**/.project\r\n+**/.settings/\r\n+**/.classpath\r\n+**/.recommenders/**\r\n+**/Servers\r\n+**/.springBeans\r\n+\r\n+#IDEA\r\n+**/.idea/\r\n+**/*.iml\r\n+**/test-output/\r\n+#AngularJS\r\n+**/.tern-project\r\n+\r\n+#Mac\r\n+.DS_Store\r\n+/.recommenders/\r\n+\r\n+# compiled output\r\n+/dist\r\n+/tmp\r\n+/out-tsc\r\n+\r\n+# dependencies\r\n+/node_modules\r\n+\r\n+# IDEs and editors\r\n+*.factorypath\r\n+/.idea\r\n+.project\r\n+.classpath\r\n+.c9/\r\n+*.launch\r\n+.settings/\r\n+*.sublime-workspace\r\n+\r\n+# IDE - VSCode\r\n+.vscode/*\r\n+!.vscode/settings.json\r\n+!.vscode/tasks.json\r\n+!.vscode/launch.json\r\n+!.vscode/extensions.json\r\n+\r\n+# misc\r\n+/.sass-cache\r\n+/connect.lock\r\n+/coverage\r\n+/libpeerconnection.log\r\n+npm-debug.log\r\n+testem.log\r\n+/typings\r\n+yarn-error.log\r\n+\r\n+# e2e\r\n+/e2e/*.js\r\n+/e2e/*.map\r\n+\r\n+# System Files\r\n+.DS_Store\r\n+Thumbs.db\r\n+\r\n+#Sprint boot\r\n+*/application.properties\r"
  },
  {
    "sha": "c868dfe210184170806de1b5e46919e75746e751",
    "filename": "ILearn2/src/main/java/com/revature/ILearn2Application.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/ILearn2Application.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/ILearn2Application.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/ILearn2Application.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,13 @@\n+package com.revature;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class ILearn2Application {\n+\n+\tpublic static void main(String[] args) {\n+\t\tSpringApplication.run(ILearn2Application.class, args);\n+\t}\n+\n+}"
  },
  {
    "sha": "9aff8f5c50df03c6da706a02522b334de6642807",
    "filename": "ILearn2/src/main/java/com/revature/ServletInitializer.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/ServletInitializer.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/ServletInitializer.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/ServletInitializer.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,13 @@\n+package com.revature;\n+\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n+\n+public class ServletInitializer extends SpringBootServletInitializer {\n+\n+\t@Override\n+\tprotected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n+\t\treturn application.sources(ILearn2Application.class);\n+\t}\n+\n+}"
  },
  {
    "sha": "f225bb09011911610dce426c5a79f35d396a34df",
    "filename": "ILearn2/src/main/java/com/revature/controller/AppController.java",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/controller/AppController.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/controller/AppController.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/controller/AppController.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,26 @@\n+package com.revature.controller;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.web.bind.annotation.CrossOrigin;\r\n+import org.springframework.web.bind.annotation.GetMapping;\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+import org.springframework.web.bind.annotation.RestController;\r\n+\r\n+import com.revature.model.User;\r\n+import com.revature.service.UserService;\r\n+\r\n+@RestController(value = \"appController\")\r\n+@RequestMapping(path = \"/iLearn\")\r\n+@CrossOrigin()\r\n+public class AppController {\r\n+\t\r\n+\t@Autowired\r\n+\tprivate UserService userService;\r\n+\t\r\n+\t@GetMapping(path = \"/all\")\r\n+\tpublic List<User> getAllUsers(){\r\n+\t\treturn this.userService.getAllUsers();\r\n+\t}\r\n+}\r"
  },
  {
    "sha": "a481248e55129ca9f71730d1b801c90c44f7eb95",
    "filename": "ILearn2/src/main/java/com/revature/model/Comment.java",
    "status": "added",
    "additions": 230,
    "deletions": 0,
    "changes": 230,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/model/Comment.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/model/Comment.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/model/Comment.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,230 @@\n+package com.revature.model;\r\n+\r\n+import java.sql.Timestamp;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ * \r\n+ * @author kenny Huang\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table (name = \"user_comment\")\r\n+public class Comment {\r\n+\t\r\n+\t@Id\r\n+\t@GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+\t@Column\r\n+\tprivate int commentid;\r\n+\t\r\n+\t@JoinColumn(name = \"lessonId\")\r\n+\t@ManyToOne\r\n+\tprivate Lesson lesson;\r\n+\t\r\n+\t@JoinColumn(name = \"authorId\")\r\n+\t@ManyToOne\r\n+\tprivate User author;\r\n+\t\r\n+\t@Column (name = \"lesson_comment\")\r\n+\tprivate String comment;\r\n+\t\r\n+\t@Column\r\n+\tprivate Timestamp comment_date;\r\n+\t\r\n+\t@Column\r\n+\tprivate int like_counter;\r\n+\t\r\n+\t@Column\r\n+\tprivate int dislike_counter;\r\n+\r\n+\tpublic Comment() {\r\n+\t\tsuper();\r\n+\t}\r\n+\t\r\n+\t\r\n+\r\n+\tpublic Comment(int commentId, Lesson lesson, User author, String comment, Timestamp comment_date, int like_counter,\r\n+\t\t\tint dislike_counter) {\r\n+\t\tsuper();\r\n+\t\tthis.commentid = commentId;\r\n+\t\tthis.lesson = lesson;\r\n+\t\tthis.author = author;\r\n+\t\tthis.comment = comment;\r\n+\t\tthis.comment_date = comment_date;\r\n+\t\tthis.like_counter = like_counter;\r\n+\t\tthis.dislike_counter = dislike_counter;\r\n+\t}\r\n+\r\n+\r\n+\t//Override the constructor without commentId parameter since we use serial type in our table\r\n+\tpublic Comment(Lesson lesson, User author, String comment, Timestamp comment_date, int like_counter,\r\n+\t\t\tint dislike_counter) {\r\n+\t\tsuper();\r\n+\t\tthis.lesson = lesson;\r\n+\t\tthis.author = author;\r\n+\t\tthis.comment = comment;\r\n+\t\tthis.comment_date = comment_date;\r\n+\t\tthis.like_counter = like_counter;\r\n+\t\tthis.dislike_counter = dislike_counter;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic int getCommentid() {\r\n+\t\treturn commentid;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic void setCommentid(int commentid) {\r\n+\t\tthis.commentid = commentid;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic Lesson getLesson() {\r\n+\t\treturn lesson;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic void setLesson(Lesson lesson) {\r\n+\t\tthis.lesson = lesson;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic User getAuthor() {\r\n+\t\treturn author;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic void setAuthor(User author) {\r\n+\t\tthis.author = author;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic String getComment() {\r\n+\t\treturn comment;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic void setComment(String comment) {\r\n+\t\tthis.comment = comment;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic Timestamp getComment_date() {\r\n+\t\treturn comment_date;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic void setComment_date(Timestamp comment_date) {\r\n+\t\tthis.comment_date = comment_date;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic int getLike_counter() {\r\n+\t\treturn like_counter;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic void setLike_counter(int like_counter) {\r\n+\t\tthis.like_counter = like_counter;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic int getDislike_counter() {\r\n+\t\treturn dislike_counter;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\tpublic void setDislike_counter(int dislike_counter) {\r\n+\t\tthis.dislike_counter = dislike_counter;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r\n+\t\tint result = 1;\r\n+\t\tresult = prime * result + ((author == null) ? 0 : author.hashCode());\r\n+\t\tresult = prime * result + ((comment == null) ? 0 : comment.hashCode());\r\n+\t\tresult = prime * result + ((comment_date == null) ? 0 : comment_date.hashCode());\r\n+\t\tresult = prime * result + commentid;\r\n+\t\tresult = prime * result + dislike_counter;\r\n+\t\tresult = prime * result + ((lesson == null) ? 0 : lesson.hashCode());\r\n+\t\tresult = prime * result + like_counter;\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\t@Override\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (this == obj)\r\n+\t\t\treturn true;\r\n+\t\tif (obj == null)\r\n+\t\t\treturn false;\r\n+\t\tif (getClass() != obj.getClass())\r\n+\t\t\treturn false;\r\n+\t\tComment other = (Comment) obj;\r\n+\t\tif (author == null) {\r\n+\t\t\tif (other.author != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!author.equals(other.author))\r\n+\t\t\treturn false;\r\n+\t\tif (comment == null) {\r\n+\t\t\tif (other.comment != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!comment.equals(other.comment))\r\n+\t\t\treturn false;\r\n+\t\tif (comment_date == null) {\r\n+\t\t\tif (other.comment_date != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!comment_date.equals(other.comment_date))\r\n+\t\t\treturn false;\r\n+\t\tif (commentid != other.commentid)\r\n+\t\t\treturn false;\r\n+\t\tif (dislike_counter != other.dislike_counter)\r\n+\t\t\treturn false;\r\n+\t\tif (lesson == null) {\r\n+\t\t\tif (other.lesson != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!lesson.equals(other.lesson))\r\n+\t\t\treturn false;\r\n+\t\tif (like_counter != other.like_counter)\r\n+\t\t\treturn false;\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Comment [commentid=\" + commentid + \", lesson=\" + lesson + \", author=\" + author + \", comment=\" + comment\r\n+\t\t\t\t+ \", comment_date=\" + comment_date + \", like_counter=\" + like_counter + \", dislike_counter=\"\r\n+\t\t\t\t+ dislike_counter + \"]\";\r\n+\t}\r\n+\r\n+\r\n+\t\r\n+\t\r\n+\t\r\n+\t\r\n+\t\r\n+\t\r\n+\t\r\n+}\r"
  },
  {
    "sha": "5dd5fa86e0aa28acdfd32df7d3a67f0f7a7d9a34",
    "filename": "ILearn2/src/main/java/com/revature/model/Course.java",
    "status": "added",
    "additions": 276,
    "deletions": 0,
    "changes": 276,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/model/Course.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/model/Course.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/model/Course.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,276 @@\n+package com.revature.model;\r\n+\r\n+import java.sql.Date;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ * \r\n+ * @author kenny Huang\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name = \"course\")\r\n+public class Course {\r\n+\t\r\n+\t@Id\r\n+\t@GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+\t@Column\r\n+\tprivate int courseid;\r\n+\t\r\n+\t@Column\r\n+\tprivate String title;\r\n+\t\r\n+\t@JoinColumn(name = \"creator\")\r\n+\t@ManyToOne\r\n+\tprivate User creator;\r\n+\t\r\n+\t@Column\r\n+\tprivate String description;\r\n+\t\r\n+\t@Column\r\n+\tprivate boolean public_access;\r\n+\t\r\n+\t@Column\r\n+\tprivate String access_code;\r\n+\t\r\n+\t@Column\r\n+\tprivate Date date_created;\r\n+\t\r\n+\t@Column\r\n+\tprivate int number_enrolled;\r\n+\r\n+\tpublic Course() {\r\n+\t\tsuper();\r\n+\t\r\n+\t}\r\n+\t\r\n+\r\n+\r\n+\r\n+\tpublic Course(int courseId, String title, User creator, String description, boolean public_access,\r\n+\t\t\tString access_code, Date date_created, int number_enrolled) {\r\n+\t\tsuper();\r\n+\t\tthis.courseid = courseId;\r\n+\t\tthis.title = title;\r\n+\t\tthis.creator = creator;\r\n+\t\tthis.description = description;\r\n+\t\tthis.public_access = public_access;\r\n+\t\tthis.access_code = access_code;\r\n+\t\tthis.date_created = date_created;\r\n+\t\tthis.number_enrolled = number_enrolled;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\t//Override the constructor without courseId parameter since we use serial type in our table\r\n+\tpublic Course(String title, User creator, String description, boolean public_access,\r\n+\t\t\tString access_code, Date date_created, int number_enrolled) {\r\n+\t\tsuper();\r\n+\t\tthis.title = title;\r\n+\t\tthis.creator = creator;\r\n+\t\tthis.description = description;\r\n+\t\tthis.public_access = public_access;\r\n+\t\tthis.access_code = access_code;\r\n+\t\tthis.date_created = date_created;\r\n+\t\tthis.number_enrolled = number_enrolled;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic int getCourseid() {\r\n+\t\treturn courseid;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic void setCourseid(int courseid) {\r\n+\t\tthis.courseid = courseid;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic String getTitle() {\r\n+\t\treturn title;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic void setTitle(String title) {\r\n+\t\tthis.title = title;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic User getCreator() {\r\n+\t\treturn creator;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic void setCreator(User creator) {\r\n+\t\tthis.creator = creator;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic String getDescription() {\r\n+\t\treturn description;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic void setDescription(String description) {\r\n+\t\tthis.description = description;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic boolean isPublic_access() {\r\n+\t\treturn public_access;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic void setPublic_access(boolean public_access) {\r\n+\t\tthis.public_access = public_access;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic String getAccess_code() {\r\n+\t\treturn access_code;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic void setAccess_code(String access_code) {\r\n+\t\tthis.access_code = access_code;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic Date getDate_created() {\r\n+\t\treturn date_created;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic void setDate_created(Date date_created) {\r\n+\t\tthis.date_created = date_created;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic int getNumber_enrolled() {\r\n+\t\treturn number_enrolled;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic void setNumber_enrolled(int number_enrolled) {\r\n+\t\tthis.number_enrolled = number_enrolled;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r\n+\t\tint result = 1;\r\n+\t\tresult = prime * result + ((access_code == null) ? 0 : access_code.hashCode());\r\n+\t\tresult = prime * result + courseid;\r\n+\t\tresult = prime * result + ((creator == null) ? 0 : creator.hashCode());\r\n+\t\tresult = prime * result + ((date_created == null) ? 0 : date_created.hashCode());\r\n+\t\tresult = prime * result + ((description == null) ? 0 : description.hashCode());\r\n+\t\tresult = prime * result + number_enrolled;\r\n+\t\tresult = prime * result + (public_access ? 1231 : 1237);\r\n+\t\tresult = prime * result + ((title == null) ? 0 : title.hashCode());\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\t@Override\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (this == obj)\r\n+\t\t\treturn true;\r\n+\t\tif (obj == null)\r\n+\t\t\treturn false;\r\n+\t\tif (getClass() != obj.getClass())\r\n+\t\t\treturn false;\r\n+\t\tCourse other = (Course) obj;\r\n+\t\tif (access_code == null) {\r\n+\t\t\tif (other.access_code != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!access_code.equals(other.access_code))\r\n+\t\t\treturn false;\r\n+\t\tif (courseid != other.courseid)\r\n+\t\t\treturn false;\r\n+\t\tif (creator == null) {\r\n+\t\t\tif (other.creator != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!creator.equals(other.creator))\r\n+\t\t\treturn false;\r\n+\t\tif (date_created == null) {\r\n+\t\t\tif (other.date_created != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!date_created.equals(other.date_created))\r\n+\t\t\treturn false;\r\n+\t\tif (description == null) {\r\n+\t\t\tif (other.description != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!description.equals(other.description))\r\n+\t\t\treturn false;\r\n+\t\tif (number_enrolled != other.number_enrolled)\r\n+\t\t\treturn false;\r\n+\t\tif (public_access != other.public_access)\r\n+\t\t\treturn false;\r\n+\t\tif (title == null) {\r\n+\t\t\tif (other.title != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!title.equals(other.title))\r\n+\t\t\treturn false;\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Course [courseid=\" + courseid + \", title=\" + title + \", creator=\" + creator + \", description=\"\r\n+\t\t\t\t+ description + \", public_access=\" + public_access + \", access_code=\" + access_code + \", date_created=\"\r\n+\t\t\t\t+ date_created + \", number_enrolled=\" + number_enrolled + \"]\";\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\t\r\n+\r\n+\r\n+\t\r\n+\t\r\n+\r\n+}\r"
  },
  {
    "sha": "c9cd7bc81b1a1b8570505bc82799d8a1b1e389f6",
    "filename": "ILearn2/src/main/java/com/revature/model/Lesson.java",
    "status": "added",
    "additions": 140,
    "deletions": 0,
    "changes": 140,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/model/Lesson.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/model/Lesson.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/model/Lesson.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,140 @@\n+package com.revature.model;\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+/**\r\n+ * \r\n+ * @author kenny Huang\r\n+ *\r\n+ */\r\n+\r\n+@Entity\r\n+@Table(name=\"lesson\")\r\n+public class Lesson {\r\n+\t@Id\r\n+\t@GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+\t@Column\r\n+\tprivate int lessonid;\r\n+\t\r\n+\t@Column\r\n+\tprivate String title;\r\n+\t\r\n+\t@JoinColumn(name = \"courseId\")\r\n+\t@ManyToOne\r\n+\tprivate Course course;\r\n+\t\r\n+\t@Column\r\n+\tprivate String file_location;\r\n+\r\n+\tpublic Lesson() {\r\n+\t\tsuper();\r\n+\t}\r\n+\t\r\n+\r\n+\tpublic Lesson(int lessonId, String title, Course course, String file_location) {\r\n+\t\tsuper();\r\n+\t\tthis.lessonid = lessonId;\r\n+\t\tthis.title = title;\r\n+\t\tthis.course = course;\r\n+\t\tthis.file_location = file_location;\r\n+\t}\r\n+\r\n+\r\n+\t//Override the constructor without lessonId parameter since we use serial type in our table\r\n+\tpublic Lesson(String title, Course course, String file_location) {\r\n+\t\tsuper();\r\n+\t\tthis.title = title;\r\n+\t\tthis.course = course;\r\n+\t\tthis.file_location = file_location;\r\n+\t}\r\n+\r\n+\r\n+\tpublic int getLessonid() {\r\n+\t\treturn lessonid;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setLessonid(int lessonid) {\r\n+\t\tthis.lessonid = lessonid;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getTitle() {\r\n+\t\treturn title;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setTitle(String title) {\r\n+\t\tthis.title = title;\r\n+\t}\r\n+\r\n+\r\n+\tpublic Course getCourse() {\r\n+\t\treturn course;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setCourse(Course course) {\r\n+\t\tthis.course = course;\r\n+\t}\r\n+\r\n+\r\n+\tpublic String getFile_location() {\r\n+\t\treturn file_location;\r\n+\t}\r\n+\r\n+\r\n+\tpublic void setFile_location(String file_location) {\r\n+\t\tthis.file_location = file_location;\r\n+\t}\r\n+\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r\n+\t\tint result = 1;\r\n+\t\tresult = prime * result + ((course == null) ? 0 : course.hashCode());\r\n+\t\tresult = prime * result + ((file_location == null) ? 0 : file_location.hashCode());\r\n+\t\tresult = prime * result + lessonid;\r\n+\t\tresult = prime * result + ((title == null) ? 0 : title.hashCode());\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\r\n+\t@Override\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (this == obj)\r\n+\t\t\treturn true;\r\n+\t\tif (obj == null)\r\n+\t\t\treturn false;\r\n+\t\tif (getClass() != obj.getClass())\r\n+\t\t\treturn false;\r\n+\t\tLesson other = (Lesson) obj;\r\n+\t\tif (course == null) {\r\n+\t\t\tif (other.course != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!course.equals(other.course))\r\n+\t\t\treturn false;\r\n+\t\tif (file_location == null) {\r\n+\t\t\tif (other.file_location != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!file_location.equals(other.file_location))\r\n+\t\t\treturn false;\r\n+\t\tif (lessonid != other.lessonid)\r\n+\t\t\treturn false;\r\n+\t\tif (title == null) {\r\n+\t\t\tif (other.title != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!title.equals(other.title))\r\n+\t\t\treturn false;\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"Lesson [lessonid=\" + lessonid + \", title=\" + title + \", course=\" + course + \", file_location=\"\r\n+\t\t\t\t+ file_location + \"]\";\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "ab19aa8ad5c2e218d026ca30c839fd7d55954339",
    "filename": "ILearn2/src/main/java/com/revature/model/User.java",
    "status": "added",
    "additions": 181,
    "deletions": 0,
    "changes": 181,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/model/User.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/model/User.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/model/User.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,181 @@\n+package com.revature.model;\r\n+\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+\r\n+\r\n+\r\n+/**\r\n+ * \r\n+ * @author kenny Huang\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name = \"users\")\r\n+public class User{\r\n+\t\r\n+\t@Id\r\n+\t@GeneratedValue(strategy = GenerationType.IDENTITY)\r\n+\t@Column\r\n+\tprivate int userid;\r\n+\t@Column\r\n+\tprivate String email;\r\n+\t@Column\r\n+\tprivate String user_password;\r\n+\t@Column\r\n+\tprivate String first_name;\r\n+\t@Column\r\n+\tprivate String last_name;\r\n+\t\r\n+\t/*\r\n+\t * We want to create a many-to-many relationship between users and courses \r\n+\t * as a user can enroll many courses and a course can be enrolled by many users\r\n+\t * This annotation specifies that we want Hibernate to create a join table between these entities when we run the \"update\" mode on Hibernate the first time.\r\n+\t */\r\n+\t@ManyToMany(fetch = FetchType.EAGER)\r\n+\t@JoinTable(joinColumns = {@JoinColumn(name = \"userId\")},\r\n+\tinverseJoinColumns = {@JoinColumn(name = \"courseId\")})\r\n+\tprivate Set<Course> enrolled_courses;\r\n+\t\r\n+\tpublic User() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic User(int userId, String email, String user_password, String first_name, String last_name,\r\n+\t\t\tSet<Course> enrolled_courses) {\r\n+\t\tsuper();\r\n+\t\tthis.userid = userId;\r\n+\t\tthis.email = email;\r\n+\t\tthis.user_password = user_password;\r\n+\t\tthis.first_name = first_name;\r\n+\t\tthis.last_name = last_name;\r\n+\t\tthis.enrolled_courses = enrolled_courses;\r\n+\t}\r\n+\r\n+\t//Override the constructor without userId parameter since we use serial type in our table\r\n+\tpublic User(String email, String user_password, String first_name, String last_name,\r\n+\t\t\tSet<Course> enrolled_courses) {\r\n+\t\tsuper();\r\n+\t\tthis.email = email;\r\n+\t\tthis.user_password = user_password;\r\n+\t\tthis.first_name = first_name;\r\n+\t\tthis.last_name = last_name;\r\n+\t\tthis.enrolled_courses = enrolled_courses;\r\n+\t}\r\n+\r\n+\tpublic int getUserid() {\r\n+\t\treturn userid;\r\n+\t}\r\n+\r\n+\tpublic void setUserid(int userid) {\r\n+\t\tthis.userid = userid;\r\n+\t}\r\n+\r\n+\tpublic String getEmail() {\r\n+\t\treturn email;\r\n+\t}\r\n+\r\n+\tpublic void setEmail(String email) {\r\n+\t\tthis.email = email;\r\n+\t}\r\n+\r\n+\tpublic String getUser_password() {\r\n+\t\treturn user_password;\r\n+\t}\r\n+\r\n+\tpublic void setUser_password(String user_password) {\r\n+\t\tthis.user_password = user_password;\r\n+\t}\r\n+\r\n+\tpublic String getFirst_name() {\r\n+\t\treturn first_name;\r\n+\t}\r\n+\r\n+\tpublic void setFirst_name(String first_name) {\r\n+\t\tthis.first_name = first_name;\r\n+\t}\r\n+\r\n+\tpublic String getLast_name() {\r\n+\t\treturn last_name;\r\n+\t}\r\n+\r\n+\tpublic void setLast_name(String last_name) {\r\n+\t\tthis.last_name = last_name;\r\n+\t}\r\n+\r\n+\tpublic Set<Course> getEnrolled_courses() {\r\n+\t\treturn enrolled_courses;\r\n+\t}\r\n+\r\n+\tpublic void setEnrolled_courses(Set<Course> enrolled_courses) {\r\n+\t\tthis.enrolled_courses = enrolled_courses;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r\n+\t\tint result = 1;\r\n+\t\tresult = prime * result + ((email == null) ? 0 : email.hashCode());\r\n+\t\tresult = prime * result + ((enrolled_courses == null) ? 0 : enrolled_courses.hashCode());\r\n+\t\tresult = prime * result + ((first_name == null) ? 0 : first_name.hashCode());\r\n+\t\tresult = prime * result + ((last_name == null) ? 0 : last_name.hashCode());\r\n+\t\tresult = prime * result + ((user_password == null) ? 0 : user_password.hashCode());\r\n+\t\tresult = prime * result + userid;\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (this == obj)\r\n+\t\t\treturn true;\r\n+\t\tif (obj == null)\r\n+\t\t\treturn false;\r\n+\t\tif (getClass() != obj.getClass())\r\n+\t\t\treturn false;\r\n+\t\tUser other = (User) obj;\r\n+\t\tif (email == null) {\r\n+\t\t\tif (other.email != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!email.equals(other.email))\r\n+\t\t\treturn false;\r\n+\t\tif (enrolled_courses == null) {\r\n+\t\t\tif (other.enrolled_courses != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!enrolled_courses.equals(other.enrolled_courses))\r\n+\t\t\treturn false;\r\n+\t\tif (first_name == null) {\r\n+\t\t\tif (other.first_name != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!first_name.equals(other.first_name))\r\n+\t\t\treturn false;\r\n+\t\tif (last_name == null) {\r\n+\t\t\tif (other.last_name != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!last_name.equals(other.last_name))\r\n+\t\t\treturn false;\r\n+\t\tif (user_password == null) {\r\n+\t\t\tif (other.user_password != null)\r\n+\t\t\t\treturn false;\r\n+\t\t} else if (!user_password.equals(other.user_password))\r\n+\t\t\treturn false;\r\n+\t\tif (userid != other.userid)\r\n+\t\t\treturn false;\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic String toString() {\r\n+\t\treturn \"User [userid=\" + userid + \", email=\" + email + \", user_password=\" + user_password + \", first_name=\"\r\n+\t\t\t\t+ first_name + \", last_name=\" + last_name + \", enrolled_courses=\" + enrolled_courses + \"]\";\r\n+\t}\r\n+\r\n+\t\r\n+\r\n+\t\r\n+\t\r\n+\t\r\n+\t\r\n+\t\r\n+}\r"
  },
  {
    "sha": "be1422f74c589bbe0e21033c5ed384940b4210c9",
    "filename": "ILearn2/src/main/java/com/revature/repository/CourseRepository.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/repository/CourseRepository.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/repository/CourseRepository.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/repository/CourseRepository.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,30 @@\n+package com.revature.repository;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.springframework.data.jpa.repository.JpaRepository;\r\n+import org.springframework.stereotype.Repository;\r\n+\r\n+import com.revature.model.Course;\r\n+import com.revature.model.User;\r\n+\r\n+\r\n+/**\r\n+ * This interface extends JpaRepository, \r\n+ * then we can user the spring JPA method to implement our method for service layer.\r\n+ * @author kenny\r\n+ *\r\n+ */\r\n+\r\n+@Repository(value = \"courseRepository\")\r\n+public interface CourseRepository extends JpaRepository<Course, Integer> {\r\n+\t\r\n+\tCourse save(Course course);\r\n+\t\r\n+\tvoid delete(Course course);\r\n+\t\r\n+\tCourse findByCourseid(Integer id);\r\n+\t\r\n+\tList<Course> findAll();\r\n+\r\n+}\r"
  },
  {
    "sha": "a92e3d3de04be3ac9da7c46d38ef26c70873f21e",
    "filename": "ILearn2/src/main/java/com/revature/repository/LessonRepository.java",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/repository/LessonRepository.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/repository/LessonRepository.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/repository/LessonRepository.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,22 @@\n+package com.revature.repository;\n+\n+import java.util.List;\n+\n+import com.revature.model.Course;\n+import com.revature.model.Lesson;\n+\n+/**\n+ * \n+ * @author Jason Arias\n+ *\n+ */\n+\n+public interface LessonRepository {\n+\n+\tpublic void createLesson(Lesson lesson);\n+\tpublic void updateLesson(Lesson lesson);\n+\tpublic void deleteLesson(Lesson lesson);\n+\tpublic List<Lesson> getLessonByCourseId(int courseid);\n+\tpublic List<Lesson> getLessonByLessonId(int lessonid);\n+\tpublic List<Lesson> getLessonByTitle(String title);\n+}"
  },
  {
    "sha": "0b2970129f545d8fff85367ee0f6ee1cd9c5e6f4",
    "filename": "ILearn2/src/main/java/com/revature/repository/UserRepository.java",
    "status": "added",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/repository/UserRepository.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/repository/UserRepository.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/repository/UserRepository.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,28 @@\n+package com.revature.repository;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.springframework.data.jpa.repository.JpaRepository;\r\n+import org.springframework.stereotype.Repository;\r\n+\r\n+import com.revature.model.User;\r\n+\r\n+\r\n+/**\r\n+ * This interface extends JpaRepository, \r\n+ * then we can user the spring JPA method to implement our method for service layer.\r\n+ * \r\n+ * \r\n+ * @author Kenny Huang\r\n+ *\r\n+ */\r\n+\r\n+@Repository(value = \"userRepository\")\r\n+public interface UserRepository extends JpaRepository<User, Integer> {\r\n+\t\r\n+\tUser save(User user);\r\n+\tvoid delete(User user);\r\n+\tUser findByUserid(Integer id);\r\n+\tList<User> findAll();\r\n+\r\n+}\r"
  },
  {
    "sha": "0533f76eacf7a2f295f24d93627eb01ff6d90b3a",
    "filename": "ILearn2/src/main/java/com/revature/service/CourseService.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/service/CourseService.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/service/CourseService.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/service/CourseService.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,51 @@\n+package com.revature.service;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+import com.revature.model.Course;\r\n+import com.revature.repository.CourseRepository;\r\n+\r\n+\r\n+/**\r\n+ * This is the service layer class for the Course that we will use to provide logic operate on \r\n+ * the data sent to and from the repository and the client.\r\n+ * @author kenny Huang\r\n+ *\r\n+ */\r\n+\r\n+@Service(value = \"courseService\")\r\n+public class CourseService {\r\n+\t\r\n+\t@Autowired\r\n+\tprivate CourseRepository courseRepository;\r\n+\t\r\n+\tpublic void addCourse(Course course) {\r\n+\t\t\r\n+\t\tthis.courseRepository.save(course);\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tpublic void updateCourse(Course course) {\r\n+\t\t\r\n+\t\tthis.courseRepository.save(course);\r\n+\t}\r\n+\t\r\n+\tpublic void deleteCourse(Course course) {\r\n+\t\t\r\n+\t\tthis.courseRepository.delete(course);\r\n+\t}\r\n+\t\r\n+\tpublic Course getCourseById(Integer id) {\r\n+\t\t\r\n+\t\treturn this.courseRepository.findByCourseid(id);\r\n+\t}\r\n+\t\r\n+\tpublic List<Course> getAllCourses(){\r\n+\t\t\r\n+\t\treturn this.courseRepository.findAll();\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "fd3ccd1b383e1b74e6dbc6fe80a4405b85df867b",
    "filename": "ILearn2/src/main/java/com/revature/service/UserService.java",
    "status": "added",
    "additions": 53,
    "deletions": 0,
    "changes": 53,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/service/UserService.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/main/java/com/revature/service/UserService.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/main/java/com/revature/service/UserService.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,53 @@\n+package com.revature.service;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+import com.revature.model.User;\r\n+import com.revature.repository.UserRepository;\r\n+\r\n+\r\n+\r\n+/**\r\n+ * This is the service layer class for User that we will use to provide logic operate on \r\n+ * the data sent to and from the repository and the client.\r\n+ * @author kenny Huang\r\n+ *\r\n+ */\r\n+@Service(value = \"userService\")\r\n+public class UserService {\r\n+\t\r\n+\t@Autowired\r\n+\tprivate UserRepository userRepository;\r\n+\t\r\n+\tpublic void addUser(User user) {\r\n+\t\t\r\n+\t\tthis.userRepository.save(user);\r\n+\t}\r\n+\t\r\n+\tpublic void updateUser(User user) {\r\n+\t\t\r\n+\t\tthis.userRepository.save(user);\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tpublic void deleteUser(User user) {\r\n+\t\t\r\n+\t\tthis.userRepository.delete(user);\r\n+\t\t\r\n+\t}\r\n+\t\r\n+\tpublic User getUserById(Integer id) {\r\n+\t\t\r\n+\t\treturn this.userRepository.findByUserid(id);\r\n+\t}\r\n+\t\r\n+\tpublic List<User> getAllUsers(){\r\n+\t\t\r\n+\t\treturn this.userRepository.findAll();\r\n+\t\t\r\n+\t}\r\n+\r\n+}\r"
  },
  {
    "sha": "b02ed4b6ccb28adebe3c4a8b6bc1296947ec5b89",
    "filename": "ILearn2/src/test/java/com/revature/ILearn2ApplicationTests.java",
    "status": "added",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/cpabad/Revature-P2/blob/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/test/java/com/revature/ILearn2ApplicationTests.java",
    "raw_url": "https://github.com/cpabad/Revature-P2/raw/e1210cc01f337f0e3ba7475c2c753b2cf8a6d055/ILearn2/src/test/java/com/revature/ILearn2ApplicationTests.java",
    "contents_url": "https://api.github.com/repos/cpabad/Revature-P2/contents/ILearn2/src/test/java/com/revature/ILearn2ApplicationTests.java?ref=e1210cc01f337f0e3ba7475c2c753b2cf8a6d055",
    "patch": "@@ -0,0 +1,13 @@\n+package com.revature;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest\n+class ILearn2ApplicationTests {\n+\n+\t@Test\n+\tvoid contextLoads() {\n+\t}\n+\n+}"
  }
]
