[
  {
    "sha": "1d8a855cc76f0408d2d26fff92caa134a1563249",
    "filename": "liquibase-core/src/main/java/liquibase/database/core/MSSQLDatabase.java",
    "status": "modified",
    "additions": 32,
    "deletions": 9,
    "changes": 41,
    "blob_url": "https://github.com/Datical/liquibase/blob/f4f695926054bd31c1fb8a09a37508991db1d7b1/liquibase-core/src/main/java/liquibase/database/core/MSSQLDatabase.java",
    "raw_url": "https://github.com/Datical/liquibase/raw/f4f695926054bd31c1fb8a09a37508991db1d7b1/liquibase-core/src/main/java/liquibase/database/core/MSSQLDatabase.java",
    "contents_url": "https://api.github.com/repos/Datical/liquibase/contents/liquibase-core/src/main/java/liquibase/database/core/MSSQLDatabase.java?ref=f4f695926054bd31c1fb8a09a37508991db1d7b1",
    "patch": "@@ -1,32 +1,34 @@\n package liquibase.database.core;\n \n-import java.math.BigInteger;\n-\n import liquibase.CatalogAndSchema;\n import liquibase.configuration.LiquibaseConfiguration;\n import liquibase.database.AbstractJdbcDatabase;\n import liquibase.database.DatabaseConnection;\n import liquibase.database.OfflineConnection;\n import liquibase.database.jvm.JdbcConnection;\n-import liquibase.statement.SqlStatement;\n-import liquibase.statement.core.RawSqlStatement;\n-import liquibase.structure.DatabaseObject;\n-import liquibase.structure.core.*;\n import liquibase.exception.DatabaseException;\n import liquibase.exception.UnexpectedLiquibaseException;\n import liquibase.executor.ExecutorService;\n+import liquibase.logging.LogFactory;\n+import liquibase.statement.SqlStatement;\n import liquibase.statement.core.GetViewDefinitionStatement;\n+import liquibase.statement.core.RawSqlStatement;\n+import liquibase.structure.DatabaseObject;\n+import liquibase.structure.core.Index;\n+import liquibase.structure.core.Relation;\n+import liquibase.structure.core.Schema;\n+import liquibase.structure.core.Table;\n+import liquibase.structure.core.View;\n import liquibase.util.JdbcUtils;\n \n+import java.math.BigInteger;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n \n-import liquibase.logging.LogFactory;\n-\n /**\n  * Encapsulates MS-SQL database support.\n  */\n@@ -521,19 +523,40 @@ public boolean sendsStringParametersAsUnicode() {\n         return sendsStringParametersAsUnicode == null ? true : sendsStringParametersAsUnicode;\n     }\n \n+    /**\n+     * Method determines if database engine edition is Azure SQL Database\n+     * @return true if Azure SQL Database engine, otherwise false.\n+     */\n     public boolean isAzureDb() {\n         return \"Azure\".equalsIgnoreCase(getEngineEdition());\n     }\n \n+    /**\n+     * Method determines if database engine edition is Azure SQL Managed Instance\n+     * @return true if Azure SQL Managed Instance engine, otherwise false.\n+     */\n+    public boolean isAzureManagedInstance() {\n+        return \"Azure SQL Managed Instance\".equalsIgnoreCase(getEngineEdition());\n+    }\n+\n+    /**\n+     * Method returns database engine of MSSQL database\n+     * @return database engine\n+     */\n     public String getEngineEdition() {\n         try {\n             if (getConnection() instanceof JdbcConnection) {\n+                // SERVERPROPERTY - https://docs.microsoft.com/en-us/sql/t-sql/functions/serverproperty-transact-sql?view=sql-server-ver15\n                 String sql = \"SELECT CASE ServerProperty('EngineEdition')\\n\" +\n                         \"         WHEN 1 THEN 'Personal'\\n\" +\n                         \"         WHEN 2 THEN 'Standard'\\n\" +\n                         \"         WHEN 3 THEN 'Enterprise'\\n\" +\n                         \"         WHEN 4 THEN 'Express'\\n\" +\n-                        \"         WHEN 5 THEN 'Azure'\\n\" +\n+                        \"         WHEN 5 THEN 'Azure'\\n\" + //Azure SQL Database\n+                        \"         WHEN 6 THEN 'Microsoft Azure Synapse Analytics'\\n\" +\n+                        \"         WHEN 8 THEN 'Azure SQL Managed Instance'\\n\" +\n+                        \"         WHEN 9 THEN 'Azure SQL Edge'\\n\" +\n+                        \"         WHEN 11 THEN 'Azure Synapse serverless SQL poo'\\n\" +\n                         \"         ELSE 'Unknown'\\n\" +\n                         \"       END\";\n                 return ExecutorService.getInstance().getExecutor(this).queryForObject(new RawSqlStatement(sql), String.class);"
  }
]
