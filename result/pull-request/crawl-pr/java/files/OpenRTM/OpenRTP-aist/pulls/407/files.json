[
  {
    "sha": "5d07c5ee06b4ef9fac4bf063038119552fcd67d7",
    "filename": "jp.go.aist.rtm.systemeditor/plugin.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/OpenRTM/OpenRTP-aist/blob/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.systemeditor/plugin.xml",
    "raw_url": "https://github.com/OpenRTM/OpenRTP-aist/raw/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.systemeditor/plugin.xml",
    "contents_url": "https://api.github.com/repos/OpenRTM/OpenRTP-aist/contents/jp.go.aist.rtm.systemeditor/plugin.xml?ref=5b08afc2fbfd4aab9f7df8ee735da31cd5a27796",
    "patch": "@@ -1153,11 +1153,11 @@\n \t\t\t\trelationship=\"stack\"\r\n \t\t\t\trelative=\"jp.go.aist.rtm.systemeditor.ui.views.configurationview.ConfigurationView\">\r\n \t\t\t</view>\r\n-<!--\t\t\t<view\r\n+\t\t\t<view\r\n \t\t\t\tid=\"jp.go.aist.rtm.systemeditor.ui.views.logview.LogView\"\r\n \t\t\t\trelationship=\"stack\"\r\n \t\t\t\trelative=\"jp.go.aist.rtm.systemeditor.ui.views.configurationview.ConfigurationView\">\r\n-\t\t\t</view>-->\r\n+\t\t\t</view>\r\n \t\t\t<view\r\n \t\t\t\tid=\"jp.go.aist.rtm.systemeditor.ui.views.actionorderview.ActionOrderView\"\r\n \t\t\t\trelationship=\"stack\"\r\n@@ -1168,7 +1168,7 @@\n \t\t\t<viewShortcut id=\"jp.go.aist.rtm.systemeditor.ui.views.managercontrolview.ManagerControlView\"/>\r\n \t\t\t<viewShortcut id=\"jp.go.aist.rtm.systemeditor.ui.views.compositecomponentview.CompositeComponentView\"/>\r\n \t\t\t<viewShortcut id=\"jp.go.aist.rtm.systemeditor.ui.views.executioncontextview.ExecutionContextView\"/>\r\n-\t\t\t<!--<viewShortcut id=\"jp.go.aist.rtm.systemeditor.ui.views.logview.LogView\"/>-->\r\n+\t\t\t<viewShortcut id=\"jp.go.aist.rtm.systemeditor.ui.views.logview.LogView\"/>\r\n \t\t\t<viewShortcut id=\"jp.go.aist.rtm.systemeditor.ui.views.actionorderview.ActionOrderView\"/>\r\n \t\t</perspectiveExtension>\r\n \t</extension>\r"
  },
  {
    "sha": "e5f15d44b2acb38a57ce35396b5d10e909694164",
    "filename": "jp.go.aist.rtm.systemeditor/src/jp/go/aist/rtm/systemeditor/ui/views/actionorderview/ActionOrderView.java",
    "status": "modified",
    "additions": 0,
    "deletions": 52,
    "changes": 52,
    "blob_url": "https://github.com/OpenRTM/OpenRTP-aist/blob/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.systemeditor/src/jp/go/aist/rtm/systemeditor/ui/views/actionorderview/ActionOrderView.java",
    "raw_url": "https://github.com/OpenRTM/OpenRTP-aist/raw/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.systemeditor/src/jp/go/aist/rtm/systemeditor/ui/views/actionorderview/ActionOrderView.java",
    "contents_url": "https://api.github.com/repos/OpenRTM/OpenRTP-aist/contents/jp.go.aist.rtm.systemeditor/src/jp/go/aist/rtm/systemeditor/ui/views/actionorderview/ActionOrderView.java?ref=5b08afc2fbfd4aab9f7df8ee735da31cd5a27796",
    "patch": "@@ -56,7 +56,6 @@\n \tprivate List<TableViewer> actionOrderlistTableViewer;\r\n \r\n \tprivate SystemDiagram targetDiagram;\r\n-//\tprivate RTCStore rtcStore;\r\n \tprivate ActionOrder actionOrder = new ActionOrder();\r\n \tprivate int selectedTable = -1;\r\n \r\n@@ -339,57 +338,6 @@ public void dispose() {\n \tpublic void setFocus() {\r\n \t}\r\n \r\n-//\t/** RTC一覧を表すクラス */\r\n-//\tstatic class RTCStore {\r\n-//\t\tstatic Map<SystemDiagram, RTCStore> store = new HashMap<SystemDiagram, RTCStore>();\r\n-//\r\n-//\t\tpublic static RTCStore get(SystemDiagram diagram) {\r\n-//\t\t\tRTCStore result = store.get(diagram);\r\n-//\t\t\tif (result == null) {\r\n-//\t\t\t\tresult = new RTCStore();\r\n-//\t\t\t\tstore.put(diagram, result);\r\n-//\t\t\t}\r\n-//\t\t\tresult.reset(diagram);\r\n-//\t\t\treturn result;\r\n-//\t\t}\r\n-//\r\n-//\t\tList<RTC> rtcs = new ArrayList<RTC>();\r\n-//\r\n-//\t\tvoid reset(SystemDiagram diagram) {\r\n-//\t\t\tList<String> pathes = new ArrayList<String>();\r\n-//\t\t\tfor (RTC rtc : rtcs) {\r\n-//\t\t\t\tif (rtc.display) {\r\n-//\t\t\t\t\tpathes.add(rtc.comp.getPathId());\r\n-//\t\t\t\t}\r\n-//\t\t\t}\r\n-//\t\t\trtcs.clear();\r\n-//\t\t\tfor (Component comp : diagram.getRegisteredComponents()) {\r\n-//\t\t\t\tif (!(comp instanceof CorbaComponent)) {\r\n-//\t\t\t\t\tcontinue;\r\n-//\t\t\t\t}\r\n-//\t\t\t\tCorbaComponent corbaComp = (CorbaComponent) comp;\r\n-//\t\t\t\tif (corbaComp.getLogObserver() == null) {\r\n-//\t\t\t\t\tcontinue;\r\n-//\t\t\t\t}\r\n-//\t\t\t\tRTC rtc = new RTC(corbaComp);\r\n-//\t\t\t\tif (pathes.contains(comp.getPathId())) {\r\n-//\t\t\t\t\trtc.display = true;\r\n-//\t\t\t\t}\r\n-//\t\t\t\trtcs.add(rtc);\r\n-//\t\t\t}\r\n-//\t\t}\r\n-//\r\n-//\t\tstatic class RTC {\r\n-//\t\t\tboolean display;\r\n-//\t\t\tCorbaComponent comp;\r\n-//\r\n-//\t\t\tRTC(CorbaComponent comp) {\r\n-//\t\t\t\tthis.comp = comp;\r\n-//\t\t\t\tthis.display = false;\r\n-//\t\t\t}\r\n-//\t\t}\r\n-//\t}\r\n-\r\n \tprivate class ActionOrder {\r\n \t\tprivate List<Component> startupOrder = new ArrayList<Component>();\r\n \t\tprivate List<Component> shutdownOrder = new ArrayList<Component>();\r"
  },
  {
    "sha": "f8183c956f61a4bb371628341993f360530c9e68",
    "filename": "jp.go.aist.rtm.systemeditor/src/jp/go/aist/rtm/systemeditor/ui/views/logview/LogSorter.java",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/OpenRTM/OpenRTP-aist/blob/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.systemeditor/src/jp/go/aist/rtm/systemeditor/ui/views/logview/LogSorter.java",
    "raw_url": "https://github.com/OpenRTM/OpenRTP-aist/raw/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.systemeditor/src/jp/go/aist/rtm/systemeditor/ui/views/logview/LogSorter.java",
    "contents_url": "https://api.github.com/repos/OpenRTM/OpenRTP-aist/contents/jp.go.aist.rtm.systemeditor/src/jp/go/aist/rtm/systemeditor/ui/views/logview/LogSorter.java?ref=5b08afc2fbfd4aab9f7df8ee735da31cd5a27796",
    "patch": "@@ -8,8 +8,6 @@\n import org.eclipse.swt.widgets.Table;\r\n import org.eclipse.swt.widgets.TableColumn;\r\n \r\n-import OpenRTM.LogLevel;\r\n-\r\n public class LogSorter extends ViewerComparator {\r\n \tpublic static final int ORDER_ASC = 1;\r\n \tpublic static final int NONE = 0;\r\n@@ -86,25 +84,25 @@ protected int compareNormal(Object e1, Object e2) {\n \tprivate Integer convertLogLevel(String source) {\r\n \t\tswitch(source) {\r\n \t\tcase \"SILENT\":\r\n-\t\t\treturn LogLevel._SILENT;\r\n+\t\t\treturn 0;\r\n \t\tcase \"ERROR\":\r\n-\t\t\treturn LogLevel._ERROR;\r\n+\t\t\treturn 1;\r\n \t\tcase \"WARN\":\r\n-\t\t\treturn LogLevel._WARN;\r\n+\t\t\treturn 2;\r\n \t\tcase \"INFO\":\r\n-\t\t\treturn LogLevel._INFO;\r\n+\t\t\treturn 3;\r\n \t\tcase \"NORMAL\":\r\n-\t\t\treturn LogLevel._NORMAL;\r\n+\t\t\treturn 4;\r\n \t\tcase \"DEBUG\":\r\n-\t\t\treturn LogLevel._DEBUG;\r\n+\t\t\treturn 5;\r\n \t\tcase \"TRACE\":\r\n-\t\t\treturn LogLevel._TRACE;\r\n+\t\t\treturn 6;\r\n \t\tcase \"VERBOSE\":\r\n-\t\t\treturn LogLevel._VERBOSE;\r\n+\t\t\treturn 7;\r\n \t\tcase \"PARANOID\":\r\n-\t\t\treturn LogLevel._PARANOID;\r\n+\t\t\treturn 8;\r\n \t\tdefault:\r\n-\t\t\treturn LogLevel._SILENT;\r\n+\t\t\treturn 0;\r\n \t\t}\r\n \t}\r\n \t\r"
  },
  {
    "sha": "c42b736e38fba346e8c7081613e60c83eb12ce16",
    "filename": "jp.go.aist.rtm.toolscommon/buildForClient.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/OpenRTM/OpenRTP-aist/blob/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.toolscommon/buildForClient.xml",
    "raw_url": "https://github.com/OpenRTM/OpenRTP-aist/raw/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.toolscommon/buildForClient.xml",
    "contents_url": "https://api.github.com/repos/OpenRTM/OpenRTP-aist/contents/jp.go.aist.rtm.toolscommon/buildForClient.xml?ref=5b08afc2fbfd4aab9f7df8ee735da31cd5a27796",
    "patch": "@@ -5,6 +5,7 @@\n \t<property name=\"source\" value=\"src\"/>\r\n \t<property name=\"source.sdo\" value=\"src/_SDOPackage\"/>\r\n \t<property name=\"source.rtc\" value=\"src/RTC\"/>\r\n+\t<property name=\"source.openrtm\" value=\"src/OpenRTM\"/>\r\n \r\n \t<property name=\"dist.dir\" value=\"jar\" />\r\n \t<property name=\"build.dir\" value=\"bin\"/>\r\n@@ -19,7 +20,6 @@\n \t<property name=\"idl.RTC\" value=\"${idl.path}/RTC10.idl\" />\r\n \t<property name=\"idl.Manager\" value=\"${idl.path}/Manager.idl\" />\r\n \t<property name=\"idl.ComponentObserver\" value=\"${idl.path}/ComponentObserver.idl\" />\r\n-\t<property name=\"idl.Logger\" value=\"${idl.path}/Logger.idl\" />\r\n \r\n \t<target name=\"buildAll\">\r\n \t\t<antcall target=\"clean\" />\r\n@@ -29,6 +29,7 @@\n \t<target name=\"idlCompile\" description=\"IDLファイルをコンパイルします\">\r\n \t\t<delete dir=\"${source.sdo}\" />\r\n \t\t<delete dir=\"${source.rtc}\" />\r\n+\t\t<delete dir=\"${source.openrtm}\" />\r\n \t\t<exec executable=\"${java.home}\\..\\bin\\idlj\">\r\n \t\t\t<arg line=\"-fall -td ${source} -i ${idl.path} -emitAll ${idl.SDOPackage}\"/>\r\n \t\t</exec>\r\n@@ -41,9 +42,6 @@\n \t\t<exec executable=\"${java.home}\\..\\bin\\idlj\" >\r\n \t\t\t<arg line=\"-fall -td ${source} -i ${idl.path} -emitAll ${idl.ComponentObserver}\" />\r\n \t\t</exec>\r\n-\t\t<exec executable=\"${java.home}\\..\\bin\\idlj\">\r\n-\t\t\t<arg line=\"-fall -td ${source} -i ${idl.path} -emitAll ${idl.Logger}\"/>\r\n-\t\t</exec>\r\n \r\n \t\t<exec executable=\"n2a.bat\">\r\n \t\t\t<arg line=\"${source}\\_SDOPackage\\*.java\"/>\r"
  },
  {
    "sha": "06a7c5e12232c1a3ab35cf5254f06f32bc5b6350",
    "filename": "jp.go.aist.rtm.toolscommon/idl/Logger.idl",
    "status": "removed",
    "additions": 0,
    "deletions": 388,
    "changes": 388,
    "blob_url": "https://github.com/OpenRTM/OpenRTP-aist/blob/b3b44c8581ba5346a47501540f77076cd08d0761/jp.go.aist.rtm.toolscommon/idl/Logger.idl",
    "raw_url": "https://github.com/OpenRTM/OpenRTP-aist/raw/b3b44c8581ba5346a47501540f77076cd08d0761/jp.go.aist.rtm.toolscommon/idl/Logger.idl",
    "contents_url": "https://api.github.com/repos/OpenRTM/OpenRTP-aist/contents/jp.go.aist.rtm.toolscommon/idl/Logger.idl?ref=b3b44c8581ba5346a47501540f77076cd08d0761",
    "patch": "@@ -1,388 +0,0 @@\n-// -*- IDL -*-\n-/*!\n- * @file Logger.idl\n- * @brief Component logger SDO service\n- * @date $Date$\n- * @author Noriaki Ando <n-ando@aist.go.jp>\n- *\n- * Copyright (C) 2011\n- *     Noriaki Ando\n- *     Intelligent Systems Research Institute,\n- *     National Institute of\n- *         Advanced Industrial Science and Technology (AIST), Japan\n- *     All rights reserved.\n- *\n- * $Id$\n- *\n- */\n-\n-#include <BasicDataType.idl>\n-#include <SDOPackage11.idl>\n-/*!\n- * @if jp\n- * @brief コンポーネントログ収集サービスインターフェース\n- *\n- * コンポーネントのログ情報を外部から取得するためのインターフェース。コ\n- * ンポーネントに対して、本SDOサービスオブジェクトをアタッチすることで、\n- * コンポーネントが出力するログを外部から取得することができる。\n- * \n- * @since 1.1\n- *\n- * @else\n- * @brief Component logging service interface\n- *\n- * This interface defines logging service of an RT-Component from\n- * outside. Attaching this service interface to an RT-Component, you\n- * can get logging information from the RT-Component.\n- *\n- * @since 1.1\n- * @endif\n- *\n- */\n-module OpenRTM\n-{\n-  /*!\n-   * @if jp\n-   *\n-   * @brief ログレベル\n-   * \n-   * ログレベル。ログレベルは9段階あり、それぞれ以下の意味を持つ。\n-   * \n-   *  - SILENT  : ロギング機能をオフにするための疑似レベル\n-   *  - ERROR   : エラーが発生したことを意味するログレベル\n-   *  - WARN    : エラーではないが注意すべき警告を意味するログレベル\n-   *  - INFO    : 付加的な情報を提供するためのログレベル\n-   *  - NORMAL  : 通常の情報を提供するためのログレベル\n-   *  - DEBUG   : デバッグ情報を提供する際のログレベル\n-   *  - TRACE   : トレースレベルの情報を提供する際のログレベル\n-   *  - VERBOSE : トレース情報以上に詳細な情報を提供する際のログレベル\n-   *  - PARANOID: リアルタイム周期処理実行時等の情報を提供するログレベル\n-   * \n-   * @else\n-   *\n-   * @brief Log level\n-   * \n-   * This enumeration defines log levels. The log level consists of\n-   * nine levels, and each level means the following meaning.\n-   * \n-   *  - SILENT  : Pseudo log level to stop logging function.\n-   *  - ERROR   : This log level means that an error event is occurring.\n-   *  - WARN    : This log level means that a warning event is occurring.\n-   *  - INFO    : This log level used to notify information.\n-   *  - NORMAL  : This log level means that an event is normal thing.\n-   *  - DEBUG   : This log level used to notify debugging information.\n-   *  - TRACE   : This log level used to notify trace information.\n-   *  - VERBOSE : This log level used to notify more detailed information.\n-   *  - PARANOID: This is used only to notify information in real-time loop.\n-   *\n-   * @endif\n-   */\n-  enum LogLevel\n-  {\n-    SILENT,\n-    ERROR,\n-    WARN,\n-    INFO,\n-    NORMAL,\n-    DEBUG,\n-    TRACE,\n-    VERBOSE,\n-    PARANOID\n-  };\n-\n-  /*!\n-   * @if jp\n-   * @brief ログレコード構造体\n-   *\n-   * ログメッセージを含むログ情報を保持する構造体\n-   *\n-   * @else\n-   * @brief Log record structure\n-   *\n-   * This struct defines logging information including log message.\n-   *\n-   * @endif\n-   *\n-   */\n-  struct LogRecord\n-  {\n-    /*!\n-     * @if jp\n-     * @brief 時刻\n-     * タイムスタンプ\n-     * @else\n-     * @brief Time\n-     * Time stump.\n-     * @endif\n-     */\n-    RTC::Time   time;\n-\n-    /*!\n-     * @if jp\n-     * @brief ロガー名\n-     * ログを書きこんだロガーオブジェクト名\n-     * @else\n-     * @brief logger name\n-     * The logger name which writes this record.\n-     * @endif\n-     */\n-    string loggername;\n-\n-    /*!\n-     * @if jp\n-     * @brief ログレベル\n-     * このレコードのログレベル\n-     * @else\n-     * @brief Log level\n-     * The log level of this record\n-     * @endif\n-     */\n-    LogLevel  level;\n-\n-    /*!\n-     * @if jp\n-     * @brief メッセージ\n-     * ログメッセージ\n-     * @else\n-     * @brief Message\n-     * Log message.\n-     * @endif\n-     */\n-    string message;\n-  };\n-\n-\n-  /*!\n-   * @if jp\n-   *\n-   * @interface Logger インターフェース\n-   *\n-   * 個別のRTCのログ情報を取得するためのサービスインターフェース。SDO\n-   * Service として対象となるRTC/SDOに対してアタッチされ、RTC/SDOのログ\n-   * 情報を外部から取得する。実際の処理シーケンスは以下の通りである。\n-   *\n-   * -# SDO::get_configuration() により Configuration オブジェクトを取得\n-   * -# Configuration::add_service_profile() によりTool側の\n-   *     Logger を ServiceProfile により RTC に与える。\n-   *     ServiceProfile のメンバーは以下のように設定すること\n-   *   - id: UUID など一意なIDを設定する。削除時にも必要になるので、Tool\n-   *     側ではIDを保持しておかなければならない。\n-   *   - interface_type: 当該サービスのIFRのIDを文字列として指定。RTC側で\n-   *     はこの文字列により当該サービスオブジェクトを受け入れるか決定す\n-   *     るため指定は必須となる。\n-   *   - properties: RTC側のサービスの受け入れ側に通知するプロパティを設\n-   *     定する。このサービスでは、下記のログレベル関連のプロパティを\n-   *     指定する。\n-   *    - service: SDOService オブジェクトの参照を指定する。\n-   * -# RTC側でロガーへの書き込みが有った場合には publish() オペレーション\n-   *     が LogRecord 構造体としてログメッセージやタイムスタンプをサー\n-   *     ビス側に通知する。サービスを保持する側では、LogRecord内の情報\n-   *     をファイルに書き込む、表示する等の方法で利用することができる。\n-   * -# RTC側が終了するときには、close() オペレーションが呼び出されるの\n-   *    で、サービス提供側は適切な終了処理を行う必要がある。close()が呼\n-   *    ばれた場合は、remove_service_profile() により明示的にサービスを\n-   *    削除する必要はない。またRTC側ではclose() を呼んだ後は、当該サー\n-   *    ビスに関する情報やリソースを適切に開放しなければならない。\n-   * -# ツール等のサービス提供側が終了する場合などは、\n-   *    remove_service_profile() オペレーションを呼び出し、当該RTC上の\n-   *    リソースを適切に開放する必要がある。RTC側は、\n-   *    remove_service_profile() が呼び出された際には、当該ロギングに関\n-   *    するリソースを適切に開放する必要がある。\n-   *\n-   * 上記のプロセスを下記シーケンス図に示す。\n-   *\n-   * <pre>\n-   * \n-   *   [RTC]    [Configuration]           [Logger]      [Tool]\n-   *     |            |                       |            |\n-   *     |            | get_configuration()   |            |\n-   *     |<------------------------------------------------|\n-   *     |            |                       |            |\n-   *     |            | add_service_profile(prof)          |\n-   *     |            |<-----------------------------------|\n-   *     |            |                       |            |\n-   *     |            | publish(logrecord)    |            |\n-   *     |----------------------------------->|            |\n-   *     |            | publish(logrecord)    |            |\n-   *     |----------------------------------->|            |\n-   *     |            |       :               |            |\n-   *     |            |       :               |            |\n-   *     |            | 1) RTCが先に終了するとき           |\n-   *     |            |       :               |            |\n-   *     |            | [close()]             |            |\n-   *     |----------------------------------->|            |\n-   *     |            |       :               |            |\n-   *     |            | 2) ツールがロギングを終了するとき  |\n-   *     |            |       :               |            |\n-   *     |            | remove_service_profile(id)         |\n-   *     |            |<-----------------------------------|\n-   *     |            |                       |            |\n-   *     |            |                       x            x\n-   *\n-   * </pre>\n-   *\n-   * なお、ServiceProfile::properties に指定するプロパティとしては、\n-   *\n-   * - logger.log_level: (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE,\n-   *                     PARANOID)\n-   * - logger.filter: logger name or \"ALL\"\n-   *\n-   * がある、\n-   *\n-   * - logger.log_level: ERROR, WARN, INFO, NORMAL, DEBUG, TRACE,\n-   *   VERBOSE またはPARANOID のうち一つを指定する。無指定の場合は\n-   *   NORMAL と同等となる。指定されたレベルと同等あるいはそれより重要\n-   *   な情報がロギングされる。すなわち、それぞれのログレベルを指定した\n-   *   際に出力されるログは以下の関係になる。\n-   *   - ERROR   : (ERROR)\n-   *   - WARN    : (ERROR, WARN)\n-   *   - INFO    : (ERROR, WARN, INFO)\n-   *   - NORMAL  : (ERROR, WARN, INFO, NORMAL)\n-   *   - DEBUG   : (ERROR, WARN, INFO, NORMAL, DEBUG)\n-   *   - TRACE   : (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE)\n-   *   - VERBOSE : (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE)\n-   *   - PARANOID: (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE, PARA)\n-   * - logger.filter: RTC内部は、RTC本体、データポート、サービスポート\n-   *   等それぞれのオブジェクトにロガーオブジェクトが存在する。このプロ\n-   *   パティはロギングする対象のロガーオブジェクトをカンマ区切りで指定\n-   *   する。または、ALLを指定することでRTC配下のすべてのロギングオブジェ\n-   *   クトからのメッセージを受信する。無指定の場合はALLと同等になる。\n-   *\n-   * @else\n-   * @class\n-   *\n-   * @interface Logger interface\n-   *\n-   * This interface defines logging service for each RT-Component.\n-   * This service would be attached to a target RTC/SDO, and provides\n-   * functionality to collect log information from remote\n-   * applications.  Actual process sequences are the following.\n-   *\n-   * -# Get configuration object by SDO::get_configuration() \n-   * -# Attach Logger object with ServiceProfile by\n-   *    Configuration::add_service_profile(). ServiceProfile should be\n-   *    set as follows.\n-   *   - id: An unique ID like UUID. This ID is used when this service\n-   *         is removed. Tools or applications should keep the ID for\n-   *         this.\n-   *   - interface_type: Specify this service's IFR ID in string. This\n-   *         string is used to search available service in the RTC,\n-   *         and if it matches with available SDO services, this\n-   *         service is accepted.\n-   *   - properties: This member specifies properties to notify\n-   *         information to the target RTC.  The following properties\n-   *         for log level and others would be specified in this\n-   *         properties.\n-   *\n-   *   - service: A SDOService object reference is specified.\n-   * -# When logging occurs in the RTC side, the \"publish()\" operation\n-   *    notifies a log message, time stump and so on to the service\n-   *    provider as a LogRecord structure. The service provider can\n-   *    use notified information for example writing to files and\n-   *    showing them on the display.\n-   * -# When RTC is terminated, the \"close()\" operation is called, and\n-   *    the service provider has to terminate the logging service\n-   *    properly.  In this case, tools and applications that have\n-   *    service provider do not need to call remove_service_profile()\n-   *    and remove the service explicitly. After calling close()\n-   *    operation, the RTC has to release the service profile and\n-   *    resources.\n-   * -# When tools and applications terminate services, they have to\n-   *    call remove_service_profile() operation, and have to release\n-   *    resources in the target RTC. When remove_service_profile() is\n-   *    called, the RTC have to release service profile and resources\n-   *    for this service.\n-   *\n-   * The following diagram shows above mentioned sequence.\n-   *\n-   * <pre>\n-   * \n-   *   [RTC]    [Configuration]           [Logger]      [Tool]\n-   *     |            |                       |            |\n-   *     |            | get_configuration()   |            |\n-   *     |<------------------------------------------------|\n-   *     |            |                       |            |\n-   *     |            | add_service_profile(prof)          |\n-   *     |            |<-----------------------------------|\n-   *     |            |                       |            |\n-   *     |            | publish(logrecord)    |            |\n-   *     |----------------------------------->|            |\n-   *     |            | publish(logrecord)    |            |\n-   *     |----------------------------------->|            |\n-   *     |            |       :               |            |\n-   *     |            |       :               |            |\n-   *     |            | 1) When RTC is terminated          |\n-   *     |            |       :               |            |\n-   *     |            | [close()]             |            |\n-   *     |----------------------------------->|            |\n-   *     |            |       :               |            |\n-   *     |            | 2) When tool terminates logging    |\n-   *     |            |       :               |            |\n-   *     |            | remove_service_profile(id)         |\n-   *     |            |<-----------------------------------|\n-   *     |            |                       |            |\n-   *     |            |                       x            x\n-   *\n-   * </pre>\n-   *\n-   * So far, the following properties for ServiceProfile::properties\n-   * are available.\n-   *\n-   * - logger.log_level: (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE,\n-   *                     PARANOID)\n-   * - logger.filter: logger name or \"ALL\"\n-   *\n-   *\n-   * - logger.log_level: One of ERROR, WARN, INFO, NORMAL, DEBUG,\n-   *     TRACE, VERBOSE or PARANOID can be specified.  If no\n-   *     properties are specified, it will be NORMAL.  Log messages\n-   *     equals and/or more important specified log level would be\n-   *     published.  The following list shows the relation between\n-   *     specified level and published level.\n-   *   - ERROR   : (ERROR)\n-   *   - WARN    : (ERROR, WARN)\n-   *   - INFO    : (ERROR, WARN, INFO)\n-   *   - NORMAL  : (ERROR, WARN, INFO, NORMAL)\n-   *   - DEBUG   : (ERROR, WARN, INFO, NORMAL, DEBUG)\n-   *   - TRACE   : (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE)\n-   *   - VERBOSE : (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE)\n-   *   - PARANOID: (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE, PARA)\n-   * - logger.filter: Some logger objects exist in some object of an\n-   *     RTC such as RTC body, data port, service port and so on.\n-   *     Some logger objects exist in some object of an RTC such as\n-   *     RTC body, data port, service port and so on.  This properties\n-   *     specify target logger names separated with commas.  If ALL is\n-   *     specified, all the logger's messages under the target RTC's\n-   *     logger would be published.  If no property is specified, all\n-   *     the messages will be published.\n-   *\n-   * @endif\n-   *\n-   */\n-  interface Logger\n-    : SDOPackage::SDOService\n-  {\n-    /*!\n-     * @if jp\n-     * @brief ログメッセージ配信\n-     * ログメッセージを配信する\n-     * @else\n-     * @brief Publish log message\n-     * This operation publishes log message.\n-     * @endif\n-     */\n-    oneway void publish(in LogRecord record);\n-\n-    /*!\n-     * @if jp\n-     * @brief サービスの終了\n-     * ロギングサービスの終了を通知する\n-     * @else\n-     * @brief Terminate service\n-     * This operation notifies logging service.\n-     * @endif\n-     */\n-    void close();\n-  };\n-};\n-"
  },
  {
    "sha": "36d8bddaab7b7b4d85faf737bfa382ba6db6bf0f",
    "filename": "jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/ComponentFactory.java",
    "status": "modified",
    "additions": 0,
    "deletions": 9,
    "changes": 9,
    "blob_url": "https://github.com/OpenRTM/OpenRTP-aist/blob/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/ComponentFactory.java",
    "raw_url": "https://github.com/OpenRTM/OpenRTP-aist/raw/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/ComponentFactory.java",
    "contents_url": "https://api.github.com/repos/OpenRTM/OpenRTP-aist/contents/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/ComponentFactory.java?ref=5b08afc2fbfd4aab9f7df8ee735da31cd5a27796",
    "patch": "@@ -134,15 +134,6 @@\n \t */\r\n \tCorbaStatusObserver createCorbaStatusObserver();\r\n \r\n-\t/**\r\n-\t * Returns a new object of class '<em>Corba Log Observer</em>'.\r\n-\t * <!-- begin-user-doc -->\r\n-\t * <!-- end-user-doc -->\r\n-\t * @return a new object of class '<em>Corba Log Observer</em>'.\r\n-\t * @generated\r\n-\t */\r\n-\tCorbaLogObserver createCorbaLogObserver();\r\n-\r\n \t/**\r\n \t * Returns a new object of class '<em>Specification</em>'.\r\n \t * <!-- begin-user-doc -->\r"
  },
  {
    "sha": "817f8843a36c01b5879c15a517cd051cef9db9f6",
    "filename": "jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/impl/ComponentFactoryImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 14,
    "changes": 15,
    "blob_url": "https://github.com/OpenRTM/OpenRTP-aist/blob/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/impl/ComponentFactoryImpl.java",
    "raw_url": "https://github.com/OpenRTM/OpenRTP-aist/raw/5b08afc2fbfd4aab9f7df8ee735da31cd5a27796/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/impl/ComponentFactoryImpl.java",
    "contents_url": "https://api.github.com/repos/OpenRTM/OpenRTP-aist/contents/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/impl/ComponentFactoryImpl.java?ref=5b08afc2fbfd4aab9f7df8ee735da31cd5a27796",
    "patch": "@@ -32,7 +32,6 @@\n import _SDOPackage.Organization;\r\n import _SDOPackage.ServiceProfile;\r\n import jp.go.aist.rtm.toolscommon.corba.CorbaUtil;\r\n-import jp.go.aist.rtm.toolscommon.model.component.*;\r\n import jp.go.aist.rtm.toolscommon.model.component.ComponentFactory;\r\n import jp.go.aist.rtm.toolscommon.model.component.ComponentPackage;\r\n import jp.go.aist.rtm.toolscommon.model.component.ComponentSpecification;\r\n@@ -44,7 +43,6 @@\n import jp.go.aist.rtm.toolscommon.model.component.CorbaConnectorProfile;\r\n import jp.go.aist.rtm.toolscommon.model.component.CorbaContextHandler;\r\n import jp.go.aist.rtm.toolscommon.model.component.CorbaExecutionContext;\r\n-import jp.go.aist.rtm.toolscommon.model.component.CorbaLogObserver;\r\n import jp.go.aist.rtm.toolscommon.model.component.CorbaObserver;\r\n import jp.go.aist.rtm.toolscommon.model.component.CorbaPortSynchronizer;\r\n import jp.go.aist.rtm.toolscommon.model.component.CorbaStatusObserver;\r\n@@ -129,7 +127,6 @@ public EObject create(EClass eClass) {\n \t\t\tcase ComponentPackage.CORBA_CONTEXT_HANDLER: return createCorbaContextHandler();\r\n \t\t\tcase ComponentPackage.CORBA_OBSERVER: return createCorbaObserver();\r\n \t\t\tcase ComponentPackage.CORBA_STATUS_OBSERVER: return createCorbaStatusObserver();\r\n-\t\t\tcase ComponentPackage.CORBA_LOG_OBSERVER: return createCorbaLogObserver();\r\n \t\t\tdefault:\r\n \t\t\t\tthrow new IllegalArgumentException(\"The class '\" + eClass.getName() + \"' is not a valid classifier\");\r\n \t\t}\r\n@@ -370,17 +367,7 @@ public CorbaStatusObserver createCorbaStatusObserver() {\n \t\treturn corbaStatusObserver;\r\n \t}\r\n \r\n-\t/**\r\n-\t * <!-- begin-user-doc -->\r\n-\t * <!-- end-user-doc -->\r\n-\t * @generated\r\n-\t */\r\n-\tpublic CorbaLogObserver createCorbaLogObserver() {\r\n-\t\tCorbaLogObserverImpl corbaLogObserver = new CorbaLogObserverImpl();\r\n-\t\treturn corbaLogObserver;\r\n-\t}\r\n-\r\n-\t/**\r\n+\t\t/**\r\n \t * <!-- begin-user-doc -->\r\n \t * <!-- end-user-doc -->\r\n \t * @generated\r"
  },
  {
    "sha": "ee5c89f99e2b1073263ce84233a82de39c7bb380",
    "filename": "jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/impl/CorbaLogObserverImpl.java",
    "status": "removed",
    "additions": 0,
    "deletions": 166,
    "changes": 166,
    "blob_url": "https://github.com/OpenRTM/OpenRTP-aist/blob/b3b44c8581ba5346a47501540f77076cd08d0761/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/impl/CorbaLogObserverImpl.java",
    "raw_url": "https://github.com/OpenRTM/OpenRTP-aist/raw/b3b44c8581ba5346a47501540f77076cd08d0761/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/impl/CorbaLogObserverImpl.java",
    "contents_url": "https://api.github.com/repos/OpenRTM/OpenRTP-aist/contents/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/impl/CorbaLogObserverImpl.java?ref=b3b44c8581ba5346a47501540f77076cd08d0761",
    "patch": "@@ -1,166 +0,0 @@\n-/**\r\n- * <copyright>\r\n- * </copyright>\r\n- *\r\n- * $Id$\r\n- */\r\n-package jp.go.aist.rtm.toolscommon.model.component.impl;\r\n-\r\n-import jp.go.aist.rtm.toolscommon.model.component.ComponentPackage;\r\n-import jp.go.aist.rtm.toolscommon.model.component.CorbaComponent;\r\n-import jp.go.aist.rtm.toolscommon.model.component.CorbaLogObserver;\r\n-import jp.go.aist.rtm.toolscommon.model.component.util.CorbaObserverStore;\r\n-import jp.go.aist.rtm.toolscommon.model.component.util.RTCLogStore;\r\n-\r\n-import org.eclipse.emf.ecore.EClass;\r\n-import org.omg.PortableServer.Servant;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-import static jp.go.aist.rtm.toolscommon.util.RTMixin.*;\r\n-\r\n-/**\r\n- * <!-- begin-user-doc -->\r\n- * An implementation of the model object '<em><b>Corba Log Observer</b></em>'.\r\n- * <!-- end-user-doc -->\r\n- *\r\n- * @generated\r\n- */\r\n-public class CorbaLogObserverImpl extends CorbaObserverImpl implements CorbaLogObserver {\r\n-\r\n-\tprivate static final Logger LOGGER = LoggerFactory\r\n-\t\t\t.getLogger(CorbaLogObserverImpl.class);\r\n-\r\n-\tpublic static final String[] LEVEL_NAMES = new String[] { \"SILENT\", //\r\n-\t\t\t\"ERROR\", //\r\n-\t\t\t\"WARN\", //\r\n-\t\t\t\"INFO\", //\r\n-\t\t\t\"NORMAL\", //\r\n-\t\t\t\"DEBUG\", //\r\n-\t\t\t\"TRACE\", //\r\n-\t\t\t\"VERBOSE\", //\r\n-\t\t\t\"PARANOID\", //\r\n-\t};\r\n-\r\n-\tprotected LoggerPOAImpl servant;\r\n-\r\n-\tRTC.RTObject rtc;\r\n-\tString rtcName;\r\n-\r\n-\t/**\r\n-\t * <!-- begin-user-doc -->\r\n-\t * <!-- end-user-doc -->\r\n-\t * @generated NOT\r\n-\t */\r\n-\tprotected CorbaLogObserverImpl() {\r\n-\t\tsuper();\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * <!-- begin-user-doc -->\r\n-\t * <!-- end-user-doc -->\r\n-\t * @generated\r\n-\t */\r\n-\t@Override\r\n-\tprotected EClass eStaticClass() {\r\n-\t\treturn ComponentPackage.Literals.CORBA_LOG_OBSERVER;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic Servant getServant() {\r\n-\t\tif (servant == null) {\r\n-\t\t\tservant = new LoggerPOAImpl(this);\r\n-\t\t}\r\n-\t\treturn servant;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic boolean attachComponent(CorbaComponent component) {\r\n-\t\tRTC.RTObject ro = component.getCorbaObjectInterface();\r\n-\t\tif (rtc == null) {\r\n-\t\t\trtc = ro;\r\n-\t\t\trtcName = component.getInstanceNameL();\r\n-\t\t}\r\n-\t\tif (!eql(rtc, ro)) {\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\t\tCorbaLogObserver obs = CorbaObserverStore.eINSTANCE.findLogObserver(ro);\r\n-\t\tif (obs != null) {\r\n-\t\t\treturn true;\r\n-\t\t} else {\r\n-\t\t\tserviceProfile = new _SDOPackage.ServiceProfile();\r\n-\t\t\tserviceProfile.interface_type = OpenRTM.LoggerHelper.id();\r\n-\t\t\tsetProperty(\"logger.filter\", \"ALL\");\r\n-\t\t\t//\r\n-\t\t\tactivate();\r\n-\t\t\ttry {\r\n-\t\t\t\tboolean result = addServiceProfile(rtc);\r\n-\t\t\t\tif (!result) {\r\n-\t\t\t\t\tdeactivate();\r\n-\t\t\t\t\treturn false;\r\n-\t\t\t\t}\r\n-\t\t\t} catch (Exception e) {\r\n-\t\t\t\tdeactivate();\r\n-\t\t\t\treturn false;\r\n-\t\t\t}\r\n-\t\t\tCorbaObserverStore.eINSTANCE.registLogObserver(ro, this);\r\n-\t\t}\r\n-\t\treturn true;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic boolean detachComponent() {\r\n-\t\tif (rtc == null) {\r\n-\t\t\treturn true;\r\n-\t\t}\r\n-\t\tif (!CorbaObserverStore.eINSTANCE.isEmptyComponentReference(rtc)) {\r\n-\t\t\treturn true;\r\n-\t\t}\r\n-\t\treturn finish();\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic boolean finish() {\r\n-\t\tif (rtc == null) {\r\n-\t\t\treturn true;\r\n-\t\t}\r\n-\t\t//\r\n-\t\tboolean result = false;\r\n-\t\ttry {\r\n-\t\t\tresult = removeServiceProfile(rtc);\r\n-\t\t} catch (Exception e) {\r\n-\t\t}\r\n-\t\tdeactivate();\r\n-\t\t//\r\n-\t\tRTCLogStore.eINSTANCE.remove(serviceProfile.id);\r\n-\t\tCorbaObserverStore.eINSTANCE.removeLogObserver(rtc);\r\n-\t\t//\r\n-\t\treturn result;\r\n-\t}\r\n-\r\n-\tpublic void save(OpenRTM.LogRecord record) {\r\n-\t\tLOGGER.info(\"publish({}, {}, {})\", LEVEL_NAMES[record.level.value()],\r\n-\t\t\t\trecord.loggername, record.message);\r\n-\t\tRTCLogStore.eINSTANCE.save(serviceProfile.id, rtcName, record);\r\n-\t}\r\n-\r\n-\tstatic class LoggerPOAImpl extends OpenRTM.LoggerPOA {\r\n-\t\tCorbaLogObserverImpl parent;\r\n-\r\n-\t\tpublic LoggerPOAImpl(CorbaLogObserverImpl parent) {\r\n-\t\t\tthis.parent = parent;\r\n-\t\t}\r\n-\r\n-\t\t@Override\r\n-\t\tpublic void publish(OpenRTM.LogRecord record) {\r\n-\t\t\tparent.save(record);\r\n-\t\t}\r\n-\r\n-\t\t@Override\r\n-\t\tpublic void close() {\r\n-\t\t\t// TODO Auto-generated method stub\r\n-\r\n-\t\t}\r\n-\t}\r\n-\r\n-} //CorbaLogObserverImpl\r"
  },
  {
    "sha": "070d715baf48800ce48005da9ff7768f971e0912",
    "filename": "jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/util/RTCLogStore.java",
    "status": "removed",
    "additions": 0,
    "deletions": 132,
    "changes": 132,
    "blob_url": "https://github.com/OpenRTM/OpenRTP-aist/blob/b3b44c8581ba5346a47501540f77076cd08d0761/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/util/RTCLogStore.java",
    "raw_url": "https://github.com/OpenRTM/OpenRTP-aist/raw/b3b44c8581ba5346a47501540f77076cd08d0761/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/util/RTCLogStore.java",
    "contents_url": "https://api.github.com/repos/OpenRTM/OpenRTP-aist/contents/jp.go.aist.rtm.toolscommon/src/jp/go/aist/rtm/toolscommon/model/component/util/RTCLogStore.java?ref=b3b44c8581ba5346a47501540f77076cd08d0761",
    "patch": "@@ -1,132 +0,0 @@\n-package jp.go.aist.rtm.toolscommon.model.component.util;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import static jp.go.aist.rtm.toolscommon.util.RTMixin.*;\r\n-\r\n-public class RTCLogStore {\r\n-\r\n-\tpublic static RTCLogStore eINSTANCE = new RTCLogStore();\r\n-\r\n-\tList<Record> store;\r\n-\r\n-\tRTCLogStore() {\r\n-\t\tthis.store = new ArrayList<Record>();\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * ログ通知オブザーバのIDリストを指定して、対象の RTCログを検索します。\r\n-\t */\r\n-\tpublic synchronized List<Record> find(List<String> id_list, int limit) {\r\n-\t\tList<Record> result = new ArrayList<Record>();\r\n-\t\tint count = 0;\r\n-\t\tfor (Record r : store) {\r\n-\t\t\tif (!id_list.contains(r.observer_id)) {\r\n-\t\t\t\tcontinue;\r\n-\t\t\t}\r\n-\t\t\tresult.add(r);\r\n-\t\t\tcount++;\r\n-\t\t\tif (limit > 0 && count > limit) {\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn result;\r\n-\t}\r\n-\r\n-\tpublic List<Record> find(List<String> id_list) {\r\n-\t\treturn find(id_list, 0);\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * ログ通知オブザーバのIDに関連付けて、RTCログを保存します。\r\n-\t */\r\n-\tpublic synchronized void save(String id, String name,\r\n-\t\t\tOpenRTM.LogRecord record) {\r\n-\t\tRecord r = new Record(id, name, record);\r\n-\t\tstore.add(0, r);\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * ログ通知オブザーバのIDを指定して、対象の RTCログを削除します。\r\n-\t */\r\n-\tpublic synchronized void remove(String id) {\r\n-\t\tList<Record> unmodified = new ArrayList<Record>(store);\r\n-\t\tfor (Record r : unmodified) {\r\n-\t\t\tif (eql(id, r.observer_id)) {\r\n-\t\t\t\tstore.remove(r);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * ログレベルオブジェクトから文字列に変換します。\r\n-\t */\r\n-\tpublic static String toLevelName(OpenRTM.LogLevel lv) {\r\n-\t\tif (OpenRTM.LogLevel.ERROR.equals(lv)) {\r\n-\t\t\treturn \"ERROR\";\r\n-\t\t} else if (OpenRTM.LogLevel.WARN.equals(lv)) {\r\n-\t\t\treturn \"WARN\";\r\n-\t\t} else if (OpenRTM.LogLevel.INFO.equals(lv)) {\r\n-\t\t\treturn \"INFO\";\r\n-\t\t} else if (OpenRTM.LogLevel.NORMAL.equals(lv)) {\r\n-\t\t\treturn \"NORMAL\";\r\n-\t\t} else if (OpenRTM.LogLevel.DEBUG.equals(lv)) {\r\n-\t\t\treturn \"DEBUG\";\r\n-\t\t} else if (OpenRTM.LogLevel.TRACE.equals(lv)) {\r\n-\t\t\treturn \"TRACE\";\r\n-\t\t} else if (OpenRTM.LogLevel.VERBOSE.equals(lv)) {\r\n-\t\t\treturn \"VERBOSE\";\r\n-\t\t} else if (OpenRTM.LogLevel.PARANOID.equals(lv)) {\r\n-\t\t\treturn \"PARANOID\";\r\n-\t\t}\r\n-\t\treturn \"UNKNOWN\";\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * RTCログを表すクラス\r\n-\t */\r\n-\tpublic static class Record {\r\n-\t\tString observer_id;\r\n-\t\tString rtc_name;\r\n-\t\tString level_name;\r\n-\t\tOpenRTM.LogRecord r;\r\n-\r\n-\t\tRecord(String id, String name, OpenRTM.LogRecord record) {\r\n-\t\t\tthis.observer_id = id;\r\n-\t\t\tthis.rtc_name = name;\r\n-\t\t\tthis.level_name = toLevelName(record.level);\r\n-\t\t\tthis.r = record;\r\n-\t\t}\r\n-\r\n-\t\tpublic String getObserverId() {\r\n-\t\t\treturn observer_id;\r\n-\t\t}\r\n-\r\n-\t\tpublic String getRtcName() {\r\n-\t\t\treturn rtc_name;\r\n-\r\n-\t\t}\r\n-\r\n-\t\tpublic String getLevelName() {\r\n-\t\t\treturn level_name;\r\n-\t\t}\r\n-\r\n-\t\tpublic RTC.Time getTime() {\r\n-\t\t\treturn r.time;\r\n-\t\t}\r\n-\r\n-\t\tpublic OpenRTM.LogLevel getLevel() {\r\n-\t\t\treturn r.level;\r\n-\t\t}\r\n-\r\n-\t\tpublic String getLoggerName() {\r\n-\t\t\treturn r.loggername;\r\n-\t\t}\r\n-\r\n-\t\tpublic String getMessage() {\r\n-\t\t\treturn r.message;\r\n-\t\t}\r\n-\t}\r\n-\r\n-}\r"
  }
]
