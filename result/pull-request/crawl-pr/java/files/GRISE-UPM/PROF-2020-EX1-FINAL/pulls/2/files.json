[
  {
    "sha": "d624245c943e3f731c3124ac1b7ad909018470ef",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 92,
    "deletions": 7,
    "changes": 99,
    "blob_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/blob/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/pom.xml",
    "raw_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/raw/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/pom.xml",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-2020-EX1-FINAL/contents/pom.xml?ref=eaaaec7fa2f885c6000321730aa7ed6c94a6a619",
    "patch": "@@ -1,7 +1,92 @@\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <groupId>es.upm.grise</groupId>\n-  <artifactId>2020-EX1-FINAL</artifactId>\n-  <version>0.0.1-SNAPSHOT</version>\n-  <description>Ejemplo de examen final</description>\n-</project>\n\\ No newline at end of file\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<groupId>es.upm.grise</groupId>\n+\t<artifactId>2020-EX1-FINAL</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<description>Ejemplo de examen final</description>\n+\t<packaging>war</packaging>\n+\n+\t<properties>\n+\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+\t\t<maven.compiler.source>14</maven.compiler.source>\n+\t\t<maven.compiler.target>14</maven.compiler.target>\n+\t</properties>\n+\n+\n+\t<dependencies>\n+\t\t<!-- https://mvnrepository.com/artifact/junit/junit -->\n+\t\t<dependency>\n+\t\t\t<groupId>junit</groupId>\n+\t\t\t<artifactId>junit</artifactId>\n+\t\t\t<version>4.11</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\n+\t\t<!-- https://mvnrepository.com/artifact/org.mockito/mockito-all -->\n+\t\t<dependency>\n+\t\t\t<groupId>org.mockito</groupId>\n+\t\t\t<artifactId>mockito-all</artifactId>\n+\t\t\t<version>1.10.19</version>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>\n+\n+\n+\n+\n+\t</dependencies>\n+\n+\t<build>\n+\t\t<finalName>2020-EX1-FINAL</finalName>\n+\t\t<pluginManagement><!-- lock down plugins versions to avoid using Maven \n+\t\t\t\tdefaults (may be moved to parent pom) -->\n+\t\t\t<plugins>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<artifactId>maven-clean-plugin</artifactId>\n+\t\t\t\t\t<version>3.1.0</version>\n+\t\t\t\t</plugin>\n+\t\t\t\t<!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<artifactId>maven-resources-plugin</artifactId>\n+\t\t\t\t\t<version>3.0.2</version>\n+\t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n+\t\t\t\t\t<version>3.8.0</version>\n+\t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\n+\t\t\t\t\t<version>2.22.1</version>\n+\t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<artifactId>maven-war-plugin</artifactId>\n+\t\t\t\t\t<version>3.2.2</version>\n+\t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<artifactId>maven-install-plugin</artifactId>\n+\t\t\t\t\t<version>2.5.2</version>\n+\t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<artifactId>maven-deploy-plugin</artifactId>\n+\t\t\t\t\t<version>2.8.2</version>\n+\t\t\t\t</plugin>\n+\t\t\t\t<plugin>\n+\t\t\t\t\t<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-failsafe-plugin -->\n+\t\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n+\t\t\t\t\t<artifactId>maven-failsafe-plugin</artifactId>\n+\t\t\t\t\t<version>3.0.0-M4</version>\n+\t\t\t\t\t<executions>\n+\t\t\t\t\t\t<execution>\n+\t\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t\t<goal>integration-test</goal>\n+\t\t\t\t\t\t\t\t<goal>verify</goal>\n+\t\t\t\t\t\t\t</goals>\n+\t\t\t\t\t\t</execution>\n+\t\t\t\t\t</executions>\n+\t\t\t\t</plugin>\n+\t\t\t</plugins>\n+\t\t</pluginManagement>\n+\t</build>\n+</project>"
  },
  {
    "sha": "56845076dc3a39a7a7f12b4b0dc7b8c65213781a",
    "filename": "src/main/java/es/upm/grise/ex1final2020/Key.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/blob/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/src/main/java/es/upm/grise/ex1final2020/Key.java",
    "raw_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/raw/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/src/main/java/es/upm/grise/ex1final2020/Key.java",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-2020-EX1-FINAL/contents/src/main/java/es/upm/grise/ex1final2020/Key.java?ref=eaaaec7fa2f885c6000321730aa7ed6c94a6a619",
    "patch": "@@ -3,12 +3,18 @@\n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n \n+// Tenemos que incluir la clase Time por inyección de dependencia.\n+//\n+// La solución no me gusta demasiado porque los elementos estáticos son siempre problemáticos. Pero funciona.\n+\n public class Key {\n \n+\tstatic Time time;\n+\n \tpublic static String getKey() {\n \t\tDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd-HH-mm-ss-SSS\");\n-\t\tLocalDateTime time = Time.getCurrentTime();\n-\t\treturn formatter.format(time);\n+\t\tLocalDateTime curremtTime = time.getCurrentTime();\n+\t\treturn formatter.format(curremtTime);\n \t}\t\n \t\n }"
  },
  {
    "sha": "5af85f64f7b937cbca7ae54dcbfb20fe15a94dd4",
    "filename": "src/main/java/es/upm/grise/ex1final2020/Time.java",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/blob/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/src/main/java/es/upm/grise/ex1final2020/Time.java",
    "raw_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/raw/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/src/main/java/es/upm/grise/ex1final2020/Time.java",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-2020-EX1-FINAL/contents/src/main/java/es/upm/grise/ex1final2020/Time.java?ref=eaaaec7fa2f885c6000321730aa7ed6c94a6a619",
    "patch": "@@ -2,11 +2,15 @@\n \n import java.time.LocalDateTime;\n \n+// Se podria hacer de muchas formas que Time participase en pruebas de interacción.\n+// Fijate que es lo mismo que se persigue con diseño testable\n+// Mi solución es Eliminar la invocación estática de getCurrentTime(). Con mockito después no hace falta nada más\n+\n public class Time {\n-\t\n-\t\tpublic static LocalDateTime getCurrentTime () {\n-\t\t\tLocalDateTime time = LocalDateTime.now();\n-\t\t\treturn time;\t\n-\t\t}\n+\n+\tpublic LocalDateTime getCurrentTime () {\n+\t\tLocalDateTime time = LocalDateTime.now();\n+\t\treturn time;\t\n+\t}\n \n }"
  },
  {
    "sha": "c4df8cde1b37266aaf8a050f0cf4ecded112a108",
    "filename": "src/test/java/es/upm/grise/ex1final2020/Test_Key.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/blob/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/src/test/java/es/upm/grise/ex1final2020/Test_Key.java",
    "raw_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/raw/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/src/test/java/es/upm/grise/ex1final2020/Test_Key.java",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-2020-EX1-FINAL/contents/src/test/java/es/upm/grise/ex1final2020/Test_Key.java?ref=eaaaec7fa2f885c6000321730aa7ed6c94a6a619",
    "patch": "@@ -0,0 +1,32 @@\n+package es.upm.grise.ex1final2020;\n+\n+import static org.junit.Assert.*;\n+\n+import java.time.LocalDateTime;\n+import java.time.Month;\n+import java.time.format.DateTimeFormatter;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+// Necesitamos incluir a Mockito en el pom.xml\n+\n+public class Test_Key {\n+\n+\t@Test\n+\tpublic void test() { \n+\t\t\n+\t\tTime time = Mockito.mock(Time.class);\n+\t\t// Tenemos que construir una fecha, no tomar la actual. Así está todo bajo control.\n+\t\tLocalDateTime myTime = LocalDateTime.of(2015, Month.JULY, 29, 19, 30, 40);\n+\t\tMockito.when(time.getCurrentTime()).thenReturn(myTime);\n+\t\t\n+\t\t// Injectamos la clase Time. Queda feo al ser estático.\n+\t\tKey.time = time;\n+\t\t// Recuperamos el ID\n+\t\tString id = Key.getKey();\n+\t\t\n+\t\t// No nos hace falta el formatter porque sabemos la fecha que debe devolver\n+\t\tassertEquals(\"2015-07-29-19-30-40-000\", id);\n+\t}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "9cccf8598f0bfa6a1fca7b845d1f3e55342a211e",
    "filename": "src/test/java/es/upm/grise/ex1final2020/Test_Time.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/blob/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/src/test/java/es/upm/grise/ex1final2020/Test_Time.java",
    "raw_url": "https://github.com/GRISE-UPM/PROF-2020-EX1-FINAL/raw/eaaaec7fa2f885c6000321730aa7ed6c94a6a619/src/test/java/es/upm/grise/ex1final2020/Test_Time.java",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-2020-EX1-FINAL/contents/src/test/java/es/upm/grise/ex1final2020/Test_Time.java?ref=eaaaec7fa2f885c6000321730aa7ed6c94a6a619",
    "patch": "@@ -0,0 +1,25 @@\n+package es.upm.grise.ex1final2020;\n+\n+import static org.junit.Assert.*;\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+\n+import org.junit.Test;\n+\n+// El test es correcto. Sólo tenías que usar una versión más alta de jUnit (he puesto la 4.11).\n+\n+public class Test_Time {\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tTime time = new Time();\n+\t\t\n+\t\tLocalDateTime time1 = LocalDateTime.now();\n+\t\tLocalDateTime time2 =time.getCurrentTime();\n+\t\tlong ms = ChronoUnit.MILLIS.between(time1,time2);\n+\n+\t\tassertTrue(ms<5);\n+\n+\t}\n+\n+}"
  }
]
