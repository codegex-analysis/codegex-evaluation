[
  {
    "sha": "37f7e7e28e1267a1a2b6e67b0d6c6dbbe32a7e15",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 9,
    "deletions": 21,
    "changes": 30,
    "blob_url": "https://github.com/GRISE-UPM/PROF-Mocking2/blob/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/pom.xml",
    "raw_url": "https://github.com/GRISE-UPM/PROF-Mocking2/raw/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/pom.xml",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-Mocking2/contents/pom.xml?ref=cdf95fdfbdf4fa66ba037979ee72217e9f21642f",
    "patch": "@@ -12,37 +12,25 @@\n \n \t<properties>\n \t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-\t\t<junit-platform.version>1.6.2</junit-platform.version>\n-\t\t<junit-jupiter.version>5.6.2</junit-jupiter.version>\n \t\t<maven.version>3.8.0</maven.version>\n-\t\t<java.version>11</java.version>\n+\t\t<java.version>11</java.version> \n \t</properties>\n \n \t<dependencies>\n-\n-\t\t<!--  Test runner for jUnit 4 tests, and test suites -->\n-\t\t<dependency>\n-\t\t\t<groupId>org.junit.platform</groupId>\n-\t\t\t<artifactId>junit-platform-runner</artifactId>\n-\t\t\t<version>${junit-platform.version}</version>\n-\t\t\t<scope>test</scope>\n-\t\t</dependency>\n-\n-\t\t<!--  Test runner for jUnit 5 -->\n \t\t<dependency>\n-\t\t\t<groupId>org.junit.jupiter</groupId>\n-\t\t\t<artifactId>junit-jupiter-engine</artifactId>\n-\t\t\t<version>${junit-jupiter.version}</version>\n+\t\t\t<groupId>junit</groupId>\n+\t\t\t<artifactId>junit</artifactId>\n+\t\t\t<version>4.12</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n-\n-\t\t<!--  The API where annotations, e.g., @Test, are defined -->\n+\t\t\n \t\t<dependency>\n-\t\t\t<groupId>org.junit.jupiter</groupId>\n-\t\t\t<artifactId>junit-jupiter-api</artifactId>\n-\t\t\t<version>${junit-jupiter.version}</version>\n+\t\t\t<groupId>org.mockito</groupId>\n+\t\t\t<artifactId>mockito-core</artifactId>\n+\t\t\t<version>3.2.4</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\t\t\n \n \t</dependencies>\n "
  },
  {
    "sha": "d67c630661f9d26fb56b4a1368785ff3d0a54f79",
    "filename": "src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/Customer.java",
    "status": "modified",
    "additions": 15,
    "deletions": 3,
    "changes": 18,
    "blob_url": "https://github.com/GRISE-UPM/PROF-Mocking2/blob/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/Customer.java",
    "raw_url": "https://github.com/GRISE-UPM/PROF-Mocking2/raw/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/Customer.java",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-Mocking2/contents/src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/Customer.java?ref=cdf95fdfbdf4fa66ba037979ee72217e9f21642f",
    "patch": "@@ -4,9 +4,9 @@\n public class Customer {\n \t\n \tprivate long id;\n-\tprivate String firstName;\n-\tprivate String lastName1;\n-\tprivate String lastName2;\n+\tprivate String firstName=\"\";\n+\tprivate String lastName1=\"\";\n+\tprivate String lastName2=\"\";\n \t\n \tpublic long getId() {\n \t\treturn id;\n@@ -23,5 +23,17 @@ public String getLastName1() {\n \tpublic String getLastName2() {\n \t\treturn lastName2;\n \t}\n+\t\n+\tpublic void setFirstName(String name) {\n+\t\tthis.firstName = name;\n+\t}\n+\n+\tpublic void setLastName1(String lastName) {\n+\t\tthis.lastName1 =lastName;\n+\t}\n+\t\n+\tpublic void setLastName2(String lastName) {\n+\t\tthis.lastName2 =lastName;\n+\t}\t\n \n }\n\\ No newline at end of file"
  },
  {
    "sha": "e608e90584a681e950335ca09bd492160a95c1e4",
    "filename": "src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/CustomerReader.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/GRISE-UPM/PROF-Mocking2/blob/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/CustomerReader.java",
    "raw_url": "https://github.com/GRISE-UPM/PROF-Mocking2/raw/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/CustomerReader.java",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-Mocking2/contents/src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/CustomerReader.java?ref=cdf95fdfbdf4fa66ba037979ee72217e9f21642f",
    "patch": "@@ -1,24 +1,24 @@\n package es.upm.grise.profundizacion.mocking_ejercicio_2;\n \n-public class CustomerReader {\n+public class CustomerReader { //esta es la clase que tiene la business logic y sobre la cual quiero hacer el test\n \t\n \tprivate EntityManager entityManager;\n \t\n-\tpublic CustomerReader(EntityManager entityManager) {\n+\tpublic CustomerReader(EntityManager entityManager) { //entity manager es la interface sobre la que voy a hacer el mock\n \t\tthis.entityManager = entityManager;\n \t}\n \n \tpublic String findFullName(Long customerID) throws Exception{\n \t\t\n-\t\tCustomer customer = entityManager.find(Customer.class, customerID);\n+\t\tCustomer customer = entityManager.find(customerID);\n \t\t\n \t\tif(customer == null)\n \t\t\tthrow new Exception(\"Customer not found\");\n \t\t\n-\t\tif(customer.getFirstName().isEmpty() || customer.getFirstName() == null) \n+\t\tif( customer.getFirstName() == null || customer.getFirstName().isEmpty()) \n \t\t\tthrow new Exception(\"Customer first name empty\");\n \t\t\n-\t\tif(customer.getLastName1().isEmpty() || customer.getLastName1() == null) \n+\t\tif(customer.getLastName1() == null || customer.getLastName1().isEmpty()) \n \t\t\tthrow new Exception(\"Customer last name 1 empty\");\n \t\t\n \t\treturn customer.getFirstName() + \" \" + customer.getLastName1() + \" \" + customer.getLastName2();"
  },
  {
    "sha": "81e5a38c1bf138f913036d2f17e034c33cc1a25e",
    "filename": "src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/EntityManager.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/GRISE-UPM/PROF-Mocking2/blob/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/EntityManager.java",
    "raw_url": "https://github.com/GRISE-UPM/PROF-Mocking2/raw/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/EntityManager.java",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-Mocking2/contents/src/main/java/es/upm/grise/profundizacion/mocking_ejercicio_2/EntityManager.java?ref=cdf95fdfbdf4fa66ba037979ee72217e9f21642f",
    "patch": "@@ -2,6 +2,6 @@\n \n public interface EntityManager {\n \n-\tCustomer find(Class<Customer> customerClass, Long customerID);\n+\tCustomer find(Long customerID);\n \n }"
  },
  {
    "sha": "ab8424e06e33d17e3ea35c4fbbe37af9b8354914",
    "filename": "src/test/java/es/upm/grise/profundizacion/mocking_ejercicio_2/SmokeTest.java",
    "status": "modified",
    "additions": 77,
    "deletions": 5,
    "changes": 82,
    "blob_url": "https://github.com/GRISE-UPM/PROF-Mocking2/blob/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/src/test/java/es/upm/grise/profundizacion/mocking_ejercicio_2/SmokeTest.java",
    "raw_url": "https://github.com/GRISE-UPM/PROF-Mocking2/raw/cdf95fdfbdf4fa66ba037979ee72217e9f21642f/src/test/java/es/upm/grise/profundizacion/mocking_ejercicio_2/SmokeTest.java",
    "contents_url": "https://api.github.com/repos/GRISE-UPM/PROF-Mocking2/contents/src/test/java/es/upm/grise/profundizacion/mocking_ejercicio_2/SmokeTest.java?ref=cdf95fdfbdf4fa66ba037979ee72217e9f21642f",
    "patch": "@@ -1,14 +1,86 @@\n package es.upm.grise.profundizacion.mocking_ejercicio_2;\n \n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.*;\n \n-import org.junit.jupiter.api.Test;\n+import org.junit.Before;\n+import org.junit.Test;\n \n-class SmokeTest {\n+/*@SuppressWarnings(\"deprecation\")\n+@RunWith(MockitoJUnitRunner.class)*/\n+public class SmokeTest {\n+\t\n+\t  CustomerReader customerReader; // class to be tested EntityManager\n+\t  EntityManager entityManager; // dependency \n+\t\n+\t  @Before \n+\t  public void setup() { \n+\t\t  entityManager = mock(EntityManager.class);\n+\t\t  customerReader = new CustomerReader(entityManager); \n+\t  }\n+\t \n+\t/*\n+\t * @Mock EntityManager entityManager; // dependency\n+\t * \n+\t * @InjectMocks CustomerReader customerReader; // class to be tested\n+\t * EntityManager\n+\t */\n+\t@Test\n+\tpublic void elClienteTieneDosApellidos() throws Exception {\n+\t\tCustomer customerDosApe = new Customer();\n+\t\tcustomerDosApe.setFirstName(\"Susan\");\n+\t\tcustomerDosApe.setLastName1(\"Ivanova\");\n+\t\tcustomerDosApe.setLastName2(\"Ape2\");\n+\n+\t\tSystem.out.print(customerDosApe.getFirstName());\n+\t\t\n+\t\twhen(entityManager.find(1L)).thenReturn(customerDosApe);\n+\n+\t\tString fullName = customerReader.findFullName(1L);\n+\t\tassertEquals(\"Susan Ivanova Ape2\", fullName);\n+\t}\n+\t\n+\t@Test\n+\tpublic void elClienteTieneSoloPrimerApellido() throws Exception {\n+\t\tCustomer customerUnApe = new Customer();\n+\t\tcustomerUnApe.setFirstName(\"Susan\");\n+\t\tcustomerUnApe.setLastName1(\"Ivanova\");\n+\t\t\n+\t\twhen(entityManager.find(1L)).thenReturn(customerUnApe);\n+\n+\t\tString fullName = customerReader.findFullName(1L);\n+\t\tassertEquals(\"Susan Ivanova \", fullName);\n+\t}\n+\t\n+\t@Test\n+\t(expected = Exception.class)\n+\tpublic void elClienteNoTienePrimerApellido() throws Exception {\n+\t\t//Customer customerSinPrimerApe = new Customer();\n+\t\t//customerSinPrimerApe.setFirstName(\"Susan\");\n+\t\t\n+\t\t//doThrow(new Exception(\"Customer first name empty\")).when(entityManager.find(1L)).find(1L);\n+\t\twhen(entityManager.find(1L)).thenThrow(new Exception(\"Customer last name 1 empty\"));\n+\n+\t\tcustomerReader.findFullName(1L);\n+\t}\n \n \t@Test\n-\tvoid test() {\n-\t\tfail(\"Not yet implemented\");\n+\t(expected = Exception.class)\n+\tpublic void elClienteNoTieneNombre() throws Exception {\n+\n+\t\twhen(entityManager.find(1L)).thenThrow(new Exception(\"Customer first name empty\"));\n+\n+\t\tcustomerReader.findFullName(1L);\n \t}\n \n+\t@Test\n+\t(expected = Exception.class)\n+\tpublic void elClienteNoExiste() throws Exception {\n+\n+\t\twhen(entityManager.find(1L)).thenThrow(new Exception(\"Customer not found\"));\n+\n+\t\tcustomerReader.findFullName(1L);\n+\t}\n+\t\n+\t\n }"
  }
]
