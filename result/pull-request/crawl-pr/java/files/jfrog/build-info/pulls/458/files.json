[
  {
    "sha": "5d2f3a338966e5c2ddaa65b6bdb37cc6d8ce2f93",
    "filename": "build-info-extractor/src/main/java/org/jfrog/build/extractor/scan/Severity.java",
    "status": "modified",
    "additions": 14,
    "deletions": 45,
    "changes": 59,
    "blob_url": "https://github.com/jfrog/build-info/blob/a5822ae19698834173b2247af05ad2e5a5639764/build-info-extractor/src/main/java/org/jfrog/build/extractor/scan/Severity.java",
    "raw_url": "https://github.com/jfrog/build-info/raw/a5822ae19698834173b2247af05ad2e5a5639764/build-info-extractor/src/main/java/org/jfrog/build/extractor/scan/Severity.java",
    "contents_url": "https://api.github.com/repos/jfrog/build-info/contents/build-info-extractor/src/main/java/org/jfrog/build/extractor/scan/Severity.java?ref=a5822ae19698834173b2247af05ad2e5a5639764",
    "patch": "@@ -4,66 +4,35 @@\n  * @author yahavi\n  */\n public enum Severity {\n-    /**\n-     * New severities.\n-     *\n-     * @since Xray 2.5\n-     */\n-    Normal(\"Scanned - No Issues\", 0),\n-    Pending(\"Pending Scan\", 1),\n-    Unknown(\"Unknown\", 2),\n-    Information(\"Information\", 3),\n-    Low(\"Low\", 4),\n-    Medium(\"Medium\", 5),\n-    High(\"High\", 6),\n-\n-    /**\n-     * Old severities.\n-     *\n-     * @deprecated since Xray 2.5\n-     */\n-    Minor(\"Low\", 4),\n-    Major(\"Medium\", 5),\n-    Critical(\"High\", 6);\n-\n-    public static final Severity[] NEW_SEVERITIES = {Normal, Pending, Unknown, Information, Low, Medium, High};\n-    private String severityName;\n-    private int ordinal;\n-\n-    Severity(String severityName, int ordinal) {\n+    Normal(\"Scanned - No Issues\"),\n+    Pending(\"Pending Scan\"),\n+    Unknown(\"Unknown\"),\n+    Information(\"Information\"),\n+    Low(\"Low\"),\n+    Medium(\"Medium\"),\n+    High(\"High\"),\n+    Critical(\"Critical\");\n+\n+    private final String severityName;\n+\n+    Severity(String severityName) {\n         this.severityName = severityName;\n-        this.ordinal = ordinal;\n     }\n \n     public String getSeverityName() {\n         return this.severityName;\n     }\n \n-    public int getOrdinal() {\n-        return this.ordinal;\n-    }\n-\n     public boolean isHigherThan(Severity other) {\n-        return this.ordinal > other.getOrdinal();\n+        return this.ordinal() > other.ordinal();\n     }\n \n     public static Severity fromString(String inputSeverity) {\n-        for (Severity severity : NEW_SEVERITIES) {\n+        for (Severity severity : Severity.values()) {\n             if (severity.getSeverityName().equals(inputSeverity)) {\n                 return severity;\n             }\n         }\n-        // Backward compatibility\n-        switch (inputSeverity) {\n-            case \"Critical\":\n-                return High;\n-            case \"Major\":\n-                return Medium;\n-            case \"Minor\":\n-                return Low;\n-            case \"Normal\":\n-                return Normal;\n-        }\n         throw new IllegalArgumentException(\"Severity \" + inputSeverity + \" doesn't exist\");\n     }\n "
  },
  {
    "sha": "4d59bd42c0b4abd7702fbaa7aec02d9fa9c81649",
    "filename": "build-info-extractor/src/test/java/org/jfrog/build/extractor/scan/SeverityTest.java",
    "status": "modified",
    "additions": 51,
    "deletions": 11,
    "changes": 62,
    "blob_url": "https://github.com/jfrog/build-info/blob/a5822ae19698834173b2247af05ad2e5a5639764/build-info-extractor/src/test/java/org/jfrog/build/extractor/scan/SeverityTest.java",
    "raw_url": "https://github.com/jfrog/build-info/raw/a5822ae19698834173b2247af05ad2e5a5639764/build-info-extractor/src/test/java/org/jfrog/build/extractor/scan/SeverityTest.java",
    "contents_url": "https://api.github.com/repos/jfrog/build-info/contents/build-info-extractor/src/test/java/org/jfrog/build/extractor/scan/SeverityTest.java?ref=a5822ae19698834173b2247af05ad2e5a5639764",
    "patch": "@@ -1,24 +1,64 @@\n package org.jfrog.build.extractor.scan;\n \n-import org.testng.Assert;\n import org.testng.annotations.Test;\n \n+import static org.testng.Assert.*;\n+\n /**\n  * @author yahavi\n  */\n public class SeverityTest {\n \n+    @Test\n+    public void testIsHigherThan() {\n+        for (Severity severityOne : Severity.values()) {\n+            int expectedSeverityOne = getExpectedSeverityLevel(severityOne);\n+            for (Severity severityTwo : Severity.values()) {\n+                int expectedSeverityTwo = getExpectedSeverityLevel(severityTwo);\n+\n+                if (expectedSeverityOne < expectedSeverityTwo) {\n+                    assertTrue(severityTwo.isHigherThan(severityOne));\n+                    continue;\n+                }\n+                if (expectedSeverityTwo < expectedSeverityOne) {\n+                    assertTrue(severityOne.isHigherThan(severityTwo));\n+                    continue;\n+                }\n+                assertFalse(severityTwo.isHigherThan(severityOne));\n+            }\n+        }\n+    }\n+\n     @Test\n     public void testFromString() {\n-        Assert.assertEquals(Severity.fromString(\"High\"), Severity.High);\n-        Assert.assertEquals(Severity.fromString(\"Medium\"), Severity.Medium);\n-        Assert.assertEquals(Severity.fromString(\"Low\"), Severity.Low);\n-        Assert.assertEquals(Severity.fromString(\"Information\"), Severity.Information);\n-        Assert.assertEquals(Severity.fromString(\"Unknown\"), Severity.Unknown);\n-        Assert.assertEquals(Severity.fromString(\"Pending Scan\"), Severity.Pending);\n-        Assert.assertEquals(Severity.fromString(\"Scanned - No Issues\"), Severity.Normal);\n-        Assert.assertEquals(Severity.fromString(\"Critical\"), Severity.High);\n-        Assert.assertEquals(Severity.fromString(\"Major\"), Severity.Medium);\n-        Assert.assertEquals(Severity.fromString(\"Minor\"), Severity.Low);\n+        assertEquals(Severity.fromString(\"Critical\"), Severity.Critical);\n+        assertEquals(Severity.fromString(\"High\"), Severity.High);\n+        assertEquals(Severity.fromString(\"Medium\"), Severity.Medium);\n+        assertEquals(Severity.fromString(\"Low\"), Severity.Low);\n+        assertEquals(Severity.fromString(\"Information\"), Severity.Information);\n+        assertEquals(Severity.fromString(\"Unknown\"), Severity.Unknown);\n+        assertEquals(Severity.fromString(\"Pending Scan\"), Severity.Pending);\n+        assertEquals(Severity.fromString(\"Scanned - No Issues\"), Severity.Normal);\n+    }\n+\n+    private int getExpectedSeverityLevel(Severity severity) {\n+        switch (severity) {\n+            case Normal:\n+                return 0;\n+            case Pending:\n+                return 1;\n+            case Unknown:\n+                return 2;\n+            case Information:\n+                return 3;\n+            case Low:\n+                return 4;\n+            case Medium:\n+                return 5;\n+            case High:\n+                return 6;\n+            default:\n+                return 7;\n+        }\n     }\n }\n\\ No newline at end of file"
  }
]
