[
  {
    "sha": "eb74a61e76eb51375ec240dd0542b004b052dc48",
    "filename": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/MetricsInspector.groovy",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/MetricsInspector.groovy",
    "raw_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/raw/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/MetricsInspector.groovy",
    "contents_url": "https://api.github.com/repos/open-telemetry/opentelemetry-java-instrumentation/contents/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/MetricsInspector.groovy?ref=d1e8869874a7e257d7f5c8936f2afeb7dc4a2373",
    "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n+\n+class MetricsInspector {\n+  final Collection<ExportMetricsServiceRequest> requests\n+\n+  MetricsInspector(Collection<ExportMetricsServiceRequest> requests) {\n+    this.requests = requests\n+  }\n+\n+  boolean hasMetricsNamed(String metricName) {\n+    requests.stream()\n+      .flatMap({ it.resourceMetricsList.stream() })\n+      .flatMap({ it.instrumentationLibraryMetricsList.stream() })\n+      .flatMap({ it.metricsList.stream() })\n+      .anyMatch({ it.name == metricName })\n+  }\n+}"
  },
  {
    "sha": "2027cb6f574b83610ec79fbca1bf81b949d2638c",
    "filename": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy",
    "status": "modified",
    "additions": 12,
    "deletions": 45,
    "changes": 57,
    "blob_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy",
    "raw_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/raw/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy",
    "contents_url": "https://api.github.com/repos/open-telemetry/opentelemetry-java-instrumentation/contents/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy?ref=d1e8869874a7e257d7f5c8936f2afeb7dc4a2373",
    "patch": "@@ -7,17 +7,14 @@ package io.opentelemetry.smoketest\n \n import static java.util.stream.Collectors.toSet\n \n-import com.fasterxml.jackson.databind.ObjectMapper\n-import com.google.protobuf.util.JsonFormat\n import io.opentelemetry.instrumentation.test.utils.OkHttpUtils\n+import io.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n import io.opentelemetry.proto.common.v1.AnyValue\n import io.opentelemetry.proto.trace.v1.Span\n-import java.util.concurrent.TimeUnit\n import java.util.regex.Pattern\n import java.util.stream.Stream\n import okhttp3.OkHttpClient\n-import okhttp3.Request\n import org.slf4j.LoggerFactory\n import org.testcontainers.containers.GenericContainer\n import org.testcontainers.containers.Network\n@@ -33,13 +30,14 @@ import spock.lang.Specification\n abstract class SmokeTest extends Specification {\n   private static final Pattern TRACE_ID_PATTERN = Pattern.compile(\".*trace_id=(?<traceId>[a-zA-Z0-9]+).*\")\n \n-  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n-\n   protected static final OkHttpClient CLIENT = OkHttpUtils.client()\n \n   @Shared\n   private Backend backend = Backend.getInstance()\n \n+  @Shared\n+  private TelemetryRetriever telemetryRetriever\n+\n   @Shared\n   protected String agentPath = System.getProperty(\"io.opentelemetry.smoketest.agent.shadowJar.path\")\n \n@@ -63,6 +61,7 @@ abstract class SmokeTest extends Specification {\n \n   def setupSpec() {\n     backend.setup()\n+    telemetryRetriever = new TelemetryRetriever(backend.getMappedPort(8080))\n   }\n \n   def startTarget(int jdk, String serverVersion = null) {\n@@ -79,7 +78,8 @@ abstract class SmokeTest extends Specification {\n       .withCopyFileToContainer(MountableFile.forHostPath(agentPath), \"/opentelemetry-javaagent-all.jar\")\n       .withEnv(\"JAVA_TOOL_OPTIONS\", \"-javaagent:/opentelemetry-javaagent-all.jar -Dio.opentelemetry.javaagent.slf4j.simpleLogger.log.muzzleMatcher=true\")\n       .withEnv(\"OTEL_BSP_MAX_EXPORT_BATCH_SIZE\", \"1\")\n-      .withEnv(\"OTEL_BSP_SCHEDULE_DELAY\", \"10\")\n+      .withEnv(\"OTEL_BSP_SCHEDULE_DELAY\", \"10ms\")\n+      .withEnv(\"OTEL_IMR_EXPORT_INTERVAL\", \"1000\")\n       .withEnv(\"OTEL_EXPORTER_OTLP_ENDPOINT\", \"http://collector:55680\")\n       .withImagePullPolicy(PullPolicy.alwaysPull())\n       .withEnv(extraEnv)\n@@ -99,11 +99,7 @@ abstract class SmokeTest extends Specification {\n   }\n \n   def cleanup() {\n-    CLIENT.newCall(new Request.Builder()\n-      .url(\"http://localhost:${backend.getMappedPort(8080)}/clear-requests\")\n-      .build())\n-      .execute()\n-      .close()\n+    telemetryRetriever.clearTelemetry()\n   }\n \n   def stopTarget() {\n@@ -135,40 +131,11 @@ abstract class SmokeTest extends Specification {\n   }\n \n   protected Collection<ExportTraceServiceRequest> waitForTraces() {\n-    def content = waitForContent()\n-\n-    return OBJECT_MAPPER.readTree(content).collect {\n-      def builder = ExportTraceServiceRequest.newBuilder()\n-      // TODO(anuraaga): Register parser into object mapper to avoid de -> re -> deserialize.\n-      JsonFormat.parser().merge(OBJECT_MAPPER.writeValueAsString(it), builder)\n-      return builder.build()\n-    }\n+    return telemetryRetriever.waitForTraces()\n   }\n \n-  private String waitForContent() {\n-    long previousSize = 0\n-    long deadline = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(30)\n-    String content = \"[]\"\n-    while (System.currentTimeMillis() < deadline) {\n-      def body = content = CLIENT.newCall(new Request.Builder()\n-        .url(\"http://localhost:${backend.getMappedPort(8080)}/get-requests\")\n-        .build())\n-        .execute()\n-        .body()\n-      try {\n-        content = body.string()\n-      } finally {\n-        body.close()\n-      }\n-      if (content.length() > 2 && content.length() == previousSize) {\n-        break\n-      }\n-      previousSize = content.length()\n-      println \"Curent content size $previousSize\"\n-      TimeUnit.MILLISECONDS.sleep(500)\n-    }\n-\n-    return content\n+  protected Collection<ExportMetricsServiceRequest> waitForMetrics() {\n+    return telemetryRetriever.waitForMetrics()\n   }\n \n   protected static Set<String> getLoggedTraceIds(ToStringConsumer output) {\n@@ -241,7 +208,7 @@ abstract class SmokeTest extends Specification {\n       started = true\n       Runtime.addShutdownHook { stop() }\n \n-      backend = new GenericContainer<>(\"ghcr.io/open-telemetry/java-test-containers:smoke-fake-backend-20201128.1734635\")\n+      backend = new GenericContainer<>(\"ghcr.io/open-telemetry/java-test-containers:smoke-fake-backend-20210319.060589\")\n         .withExposedPorts(8080)\n         .waitingFor(Wait.forHttp(\"/health\").forPort(8080))\n         .withNetwork(network)"
  },
  {
    "sha": "7c5eabd2d9b60cd03f04aaf81ef9d6a715af5a5e",
    "filename": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SpringBootSmokeTest.groovy",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SpringBootSmokeTest.groovy",
    "raw_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/raw/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SpringBootSmokeTest.groovy",
    "contents_url": "https://api.github.com/repos/open-telemetry/opentelemetry-java-instrumentation/contents/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SpringBootSmokeTest.groovy?ref=d1e8869874a7e257d7f5c8936f2afeb7dc4a2373",
    "patch": "@@ -32,15 +32,18 @@ class SpringBootSmokeTest extends SmokeTest {\n     def response = CLIENT.newCall(request).execute()\n     Collection<ExportTraceServiceRequest> traces = waitForTraces()\n \n-    then:\n+    then: \"spans are exported\"\n     response.body().string() == \"Hi!\"\n     countSpansByName(traces, '/greeting') == 1\n     countSpansByName(traces, 'WebController.greeting') == 1\n     countSpansByName(traces, 'WebController.withSpan') == 1\n \n+    then: \"correct agent version is captured in the resource\"\n     [currentAgentVersion] as Set == findResourceAttribute(traces, \"telemetry.auto.version\")\n       .map { it.stringValue }\n       .collect(toSet())\n+\n+    then: \"OS is captured in the resource\"\n     findResourceAttribute(traces, \"os.type\")\n       .map { it.stringValue }\n       .findAny()\n@@ -56,6 +59,12 @@ class SpringBootSmokeTest extends SmokeTest {\n       .collect(toSet())\n     loggedTraceIds == spanTraceIds\n \n+    then: \"JVM metrics are exported\"\n+    def metrics = new MetricsInspector(waitForMetrics())\n+    metrics.hasMetricsNamed(\"runtime.jvm.gc.collection\")\n+    metrics.hasMetricsNamed(\"runtime.jvm.memory.area\")\n+    metrics.hasMetricsNamed(\"runtime.jvm.memory.pool\")\n+\n     cleanup:\n     stopTarget()\n "
  },
  {
    "sha": "a032dc0a7363fe7a6409316c584de97d3c904132",
    "filename": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/TelemetryRetriever.groovy",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/TelemetryRetriever.groovy",
    "raw_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/raw/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/TelemetryRetriever.groovy",
    "contents_url": "https://api.github.com/repos/open-telemetry/opentelemetry-java-instrumentation/contents/smoke-tests/src/test/groovy/io/opentelemetry/smoketest/TelemetryRetriever.groovy?ref=d1e8869874a7e257d7f5c8936f2afeb7dc4a2373",
    "patch": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.google.protobuf.GeneratedMessageV3\n+import com.google.protobuf.util.JsonFormat\n+import io.opentelemetry.instrumentation.test.utils.OkHttpUtils\n+import io.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n+import java.util.concurrent.TimeUnit\n+import java.util.function.Supplier\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+\n+class TelemetryRetriever {\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n+  protected static final OkHttpClient CLIENT = OkHttpUtils.client()\n+\n+  final int backendPort\n+\n+  TelemetryRetriever(int backendPort) {\n+    this.backendPort = backendPort\n+  }\n+\n+  void clearTelemetry() {\n+    CLIENT.newCall(new Request.Builder()\n+      .url(\"http://localhost:${backendPort}/clear\")\n+      .build())\n+      .execute()\n+      .close()\n+  }\n+\n+  Collection<ExportTraceServiceRequest> waitForTraces() {\n+    return waitForTelemetry(\"get-traces\", { ExportTraceServiceRequest.newBuilder() })\n+  }\n+\n+  Collection<ExportMetricsServiceRequest> waitForMetrics() {\n+    return waitForTelemetry(\"get-metrics\", { ExportMetricsServiceRequest.newBuilder() })\n+  }\n+\n+  private <T extends GeneratedMessageV3, B extends GeneratedMessageV3.Builder> Collection<T> waitForTelemetry(String path, Supplier<B> builderConstructor) {\n+    def content = waitForContent(path)\n+\n+    return OBJECT_MAPPER.readTree(content).collect {\n+      def builder = builderConstructor.get()\n+      // TODO(anuraaga): Register parser into object mapper to avoid de -> re -> deserialize.\n+      JsonFormat.parser().merge(OBJECT_MAPPER.writeValueAsString(it), builder)\n+      return (T) builder.build()\n+    }\n+  }\n+\n+  private String waitForContent(String path) {\n+    long previousSize = 0\n+    long deadline = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(30)\n+    String content = \"[]\"\n+    while (System.currentTimeMillis() < deadline) {\n+      def body = content = CLIENT.newCall(new Request.Builder()\n+        .url(\"http://localhost:${backendPort}/${path}\")\n+        .build())\n+        .execute()\n+        .body()\n+      try {\n+        content = body.string()\n+      } finally {\n+        body.close()\n+      }\n+      if (content.length() > 2 && content.length() == previousSize) {\n+        break\n+      }\n+      previousSize = content.length()\n+      println \"Curent content size $previousSize\"\n+      TimeUnit.MILLISECONDS.sleep(500)\n+    }\n+\n+    return content\n+  }\n+}"
  },
  {
    "sha": "c96f5a0c9933ef5db503a138961fe6e3071f24d4",
    "filename": "smoke-tests/src/test/resources/otel.yaml",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/resources/otel.yaml",
    "raw_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/raw/d1e8869874a7e257d7f5c8936f2afeb7dc4a2373/smoke-tests/src/test/resources/otel.yaml",
    "contents_url": "https://api.github.com/repos/open-telemetry/opentelemetry-java-instrumentation/contents/smoke-tests/src/test/resources/otel.yaml?ref=d1e8869874a7e257d7f5c8936f2afeb7dc4a2373",
    "patch": "@@ -27,8 +27,12 @@ exporters:\n service:\n   pipelines:\n     traces:\n-      receivers: [otlp, zipkin, jaeger]\n-      processors: [batch]\n-      exporters: [logging, otlp]\n+      receivers: [ otlp, zipkin, jaeger ]\n+      processors: [ batch ]\n+      exporters: [ logging, otlp ]\n+    metrics:\n+      receivers: [ otlp ]\n+      processors: [ batch ]\n+      exporters: [ logging, otlp ]\n \n-  extensions: [health_check, pprof, zpages]\n+  extensions: [ health_check, pprof, zpages ]"
  }
]
