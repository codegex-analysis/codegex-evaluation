[
  {
    "sha": "2d6ae186c76e2aaba3792ab0d9fe8160426998e4",
    "filename": "task04/src/com/example/task04/Line.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/ad7fc2b6e2180dabd58877aeb4efae5a4d0960a2/task04/src/com/example/task04/Line.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/ad7fc2b6e2180dabd58877aeb4efae5a4d0960a2/task04/src/com/example/task04/Line.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task04/src/com/example/task04/Line.java?ref=ad7fc2b6e2180dabd58877aeb4efae5a4d0960a2",
    "patch": "@@ -0,0 +1,37 @@\n+package com.example.task04;\n+\n+public class Line {\n+    private final Point firstPoint;\n+    private final Point secondPoint;\n+\n+    public Line(Point p1, Point p2) {\n+        firstPoint = p1;\n+        secondPoint = p2;\n+    }\n+\n+    public Point getP1() {\n+        return firstPoint;\n+    }\n+\n+    public Point getP2() {\n+        return secondPoint;\n+    }\n+\n+    public boolean isCollinearLine(Point p) {\n+        double dx1 = secondPoint.x - firstPoint.x;\n+        double dy1 = secondPoint.y - firstPoint.y;\n+\n+        double dx = p.x - firstPoint.x;\n+        double dy = p.y - firstPoint.y;\n+\n+        double s = dx1 * dy - dx * dy1; //Эта величина равна удвоенной площади треугольника, составленного тремя точками, и равна нулю если три точки лежат на одной прямой.\n+        return s == 0;\n+    }\n+\n+    public String toString() {\n+        return \"Line{\" +\n+                \"firstPoint=\" + firstPoint.toString() +\n+                \", secondPoint=\" + secondPoint.toString() +\n+                \"}\";\n+    }\n+}"
  },
  {
    "sha": "3c4a97947a184e0b918ac873adc94db6a20e29b3",
    "filename": "task04/src/com/example/task04/Point.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/ad7fc2b6e2180dabd58877aeb4efae5a4d0960a2/task04/src/com/example/task04/Point.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/ad7fc2b6e2180dabd58877aeb4efae5a4d0960a2/task04/src/com/example/task04/Point.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task04/src/com/example/task04/Point.java?ref=ad7fc2b6e2180dabd58877aeb4efae5a4d0960a2",
    "patch": "@@ -0,0 +1,30 @@\n+package com.example.task04;\n+/**\n+ * Класс точки на плоскости\n+ */\n+public class Point {\n+    final double x;\n+    final double y;\n+\n+    public Point(int x, int y){\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    public Point(){\n+        this.x = 0;\n+        this.y = 0;\n+    }\n+\n+    public double distance(Point point){\n+        return Math.sqrt( (point.x - x)*(point.x - x) + (point.y - y)*(point.y - y) );\n+    }\n+\n+    void print() {\n+        System.out.println(this.toString());\n+    }\n+\n+    public String toString(){\n+        return \"x: \" + x + \" y: \" + y;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "7e00c4453b427a7ef7dccef4f18b63a207eb871d",
    "filename": "task04/src/com/example/task04/Task04Main.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/ad7fc2b6e2180dabd58877aeb4efae5a4d0960a2/task04/src/com/example/task04/Task04Main.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/ad7fc2b6e2180dabd58877aeb4efae5a4d0960a2/task04/src/com/example/task04/Task04Main.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task04/src/com/example/task04/Task04Main.java?ref=ad7fc2b6e2180dabd58877aeb4efae5a4d0960a2",
    "patch": "@@ -2,6 +2,8 @@\n \n public class Task04Main {\n     public static void main(String[] args) {\n-\n+        Line line = new Line(new Point(3,3), new Point(7,7));\n+        System.out.println(line.isCollinearLine(new Point(5,5))); //correct\n+        System.out.println(line.toString());\n     }\n }"
  }
]
