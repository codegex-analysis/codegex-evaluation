[
  {
    "sha": "59d00144c0ac579fb24080e67fc6b01862b77c15",
    "filename": "task05/src/com/example/task05/Point.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/c84dc27fbd0af25ca358f7397446d28f0e651a64/task05/src/com/example/task05/Point.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/c84dc27fbd0af25ca358f7397446d28f0e651a64/task05/src/com/example/task05/Point.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task05/src/com/example/task05/Point.java?ref=c84dc27fbd0af25ca358f7397446d28f0e651a64",
    "patch": "@@ -5,14 +5,17 @@\n  */\n public class Point {\n \n+    private final double x;\n+    private final double y;\n     /**\n      * Конструктор, инициализирующий координаты точки\n      *\n      * @param x координата по оси абсцисс\n      * @param y координата по оси ординат\n      */\n     public Point(double x, double y) {\n-        throw new AssertionError();\n+        this.x = x;\n+        this.y = y;\n     }\n \n     /**\n@@ -21,8 +24,7 @@ public Point(double x, double y) {\n      * @return координату точки по оси X\n      */\n     public double getX() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+       return x;\n     }\n \n     /**\n@@ -31,8 +33,7 @@ public double getX() {\n      * @return координату точки по оси Y\n      */\n     public double getY() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return y;\n     }\n \n     /**\n@@ -42,8 +43,7 @@ public double getY() {\n      * @return расстояние от текущей точки до переданной\n      */\n     public double getLength(Point point) {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return Math.sqrt( (point.x - x)*(point.x - x) + (point.y - y)*(point.y - y) );\n     }\n \n }"
  },
  {
    "sha": "e25b99badb3082aa551f9cae61ebde8ad72dfc41",
    "filename": "task05/src/com/example/task05/PolygonalLine.java",
    "status": "modified",
    "additions": 24,
    "deletions": 26,
    "changes": 50,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/c84dc27fbd0af25ca358f7397446d28f0e651a64/task05/src/com/example/task05/PolygonalLine.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/c84dc27fbd0af25ca358f7397446d28f0e651a64/task05/src/com/example/task05/PolygonalLine.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task05/src/com/example/task05/PolygonalLine.java?ref=c84dc27fbd0af25ca358f7397446d28f0e651a64",
    "patch": "@@ -1,46 +1,44 @@\n package com.example.task05;\n+import java.util.ArrayList;\n \n /**\n  * Ломаная линия\n  */\n public class PolygonalLine {\n+    private final ArrayList<Point> points;\n \n-    /**\n-     * Устанавливает точки ломаной линии\n-     *\n-     * @param points массив точек, которыми нужно проинициализировать ломаную линию\n-     */\n     public void setPoints(Point[] points) {\n-        // TODO: реализовать\n+        for (Point point :\n+                points) {\n+            addPoint(point);\n+        }\n+    }\n+\n+    public PolygonalLine() {\n+        points = new ArrayList<>();\n     }\n \n-    /**\n-     * Добавляет точку к ломаной линии\n-     *\n-     * @param point точка, которую нужно добавить к ломаной\n-     */\n     public void addPoint(Point point) {\n-        // TODO: реализовать\n+        points.add(new Point(point.getX(), point.getY()));\n     }\n \n-    /**\n-     * Добавляет точку к ломаной линии\n-     *\n-     * @param x координата по оси абсцисс\n-     * @param y координата по оси ординат\n-     */\n     public void addPoint(double x, double y) {\n-        // TODO: реализовать\n+        addPoint(new Point(x, y));\n     }\n \n-    /**\n-     * Возвращает длину ломаной линии\n-     *\n-     * @return длину ломаной линии\n-     */\n     public double getLength() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        double length = 0;\n+        Point prevPoint = null;\n+        for (Point point :\n+                points) {\n+            if (prevPoint == null) {\n+                prevPoint = point;\n+                continue;\n+            }\n+            length += point.getLength(prevPoint);\n+            prevPoint = point;\n+        }\n+        return length;\n     }\n \n }"
  }
]
