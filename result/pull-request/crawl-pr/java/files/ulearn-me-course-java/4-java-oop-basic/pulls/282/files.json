[
  {
    "sha": "450a117a6545e1753ffeb106cff2b7e084b1ca99",
    "filename": "task05/src/com/example/task05/Point.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/fd8621885883cf16c82d1a87fd464750962cae70/task05/src/com/example/task05/Point.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/fd8621885883cf16c82d1a87fd464750962cae70/task05/src/com/example/task05/Point.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task05/src/com/example/task05/Point.java?ref=fd8621885883cf16c82d1a87fd464750962cae70",
    "patch": "@@ -5,14 +5,17 @@\n  */\n public class Point {\n \n+    private final double x;\n+    private final double y;\n     /**\n      * Конструктор, инициализирующий координаты точки\n      *\n      * @param x координата по оси абсцисс\n      * @param y координата по оси ординат\n      */\n     public Point(double x, double y) {\n-        throw new AssertionError();\n+        this.x = x;\n+        this.y = y;\n     }\n \n     /**\n@@ -21,8 +24,7 @@ public Point(double x, double y) {\n      * @return координату точки по оси X\n      */\n     public double getX() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return x;\n     }\n \n     /**\n@@ -31,8 +33,7 @@ public double getX() {\n      * @return координату точки по оси Y\n      */\n     public double getY() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return y;\n     }\n \n     /**\n@@ -42,8 +43,7 @@ public double getY() {\n      * @return расстояние от текущей точки до переданной\n      */\n     public double getLength(Point point) {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return Math.sqrt( (point.x - x)*(point.x - x) + (point.y - y)*(point.y - y) );\n     }\n \n }"
  },
  {
    "sha": "0cc2c7fe08b8befb2df638996f024a4db09205e5",
    "filename": "task05/src/com/example/task05/PolygonalLine.java",
    "status": "modified",
    "additions": 24,
    "deletions": 5,
    "changes": 29,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/fd8621885883cf16c82d1a87fd464750962cae70/task05/src/com/example/task05/PolygonalLine.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/fd8621885883cf16c82d1a87fd464750962cae70/task05/src/com/example/task05/PolygonalLine.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task05/src/com/example/task05/PolygonalLine.java?ref=fd8621885883cf16c82d1a87fd464750962cae70",
    "patch": "@@ -1,17 +1,26 @@\n package com.example.task05;\n+import java.util.ArrayList;\n \n /**\n  * Ломаная линия\n  */\n public class PolygonalLine {\n+    private final ArrayList<Point> points;\n \n     /**\n      * Устанавливает точки ломаной линии\n      *\n      * @param points массив точек, которыми нужно проинициализировать ломаную линию\n      */\n     public void setPoints(Point[] points) {\n-        // TODO: реализовать\n+        for (Point point :\n+                points) {\n+            addPoint(point);\n+        }\n+    }\n+\n+    public PolygonalLine() {\n+        points = new ArrayList<>();\n     }\n \n     /**\n@@ -20,7 +29,7 @@ public void setPoints(Point[] points) {\n      * @param point точка, которую нужно добавить к ломаной\n      */\n     public void addPoint(Point point) {\n-        // TODO: реализовать\n+        points.add(new Point(point.getX(), point.getY()));\n     }\n \n     /**\n@@ -30,7 +39,7 @@ public void addPoint(Point point) {\n      * @param y координата по оси ординат\n      */\n     public void addPoint(double x, double y) {\n-        // TODO: реализовать\n+        addPoint(new Point(x, y));\n     }\n \n     /**\n@@ -39,8 +48,18 @@ public void addPoint(double x, double y) {\n      * @return длину ломаной линии\n      */\n     public double getLength() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        double length = 0;\n+        Point prevPoint = null;\n+        for (Point point :\n+                points) {\n+            if (prevPoint == null) {\n+                prevPoint = point;\n+                continue;\n+            }\n+            length += point.getLength(prevPoint);\n+            prevPoint = point;\n+        }\n+        return length;\n     }\n \n }"
  },
  {
    "sha": "0016fb6ea6d1816c3cff83ea8b1f8c44f136ff30",
    "filename": "task05/src/com/example/task05/Task05Main.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/fd8621885883cf16c82d1a87fd464750962cae70/task05/src/com/example/task05/Task05Main.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/fd8621885883cf16c82d1a87fd464750962cae70/task05/src/com/example/task05/Task05Main.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task05/src/com/example/task05/Task05Main.java?ref=fd8621885883cf16c82d1a87fd464750962cae70",
    "patch": "@@ -2,6 +2,5 @@\n \n public class Task05Main {\n     public static void main(String[] args) {\n-\n     }\n }"
  }
]
