[
  {
    "sha": "780e0d772f224c4eef924fc7da5773519140d46a",
    "filename": "task04/src/com/example/task04/Line.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/59d5c7702ccaa6f377c49115306c656562290763/task04/src/com/example/task04/Line.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/59d5c7702ccaa6f377c49115306c656562290763/task04/src/com/example/task04/Line.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task04/src/com/example/task04/Line.java?ref=59d5c7702ccaa6f377c49115306c656562290763",
    "patch": "@@ -0,0 +1,37 @@\n+package com.example.task04;\n+\n+public class Line {\n+\n+    private Point P1;\n+    private Point P2;\n+\n+    public Line(Point P1, Point P2) {\n+        setP1(P1);\n+        setP2(P2);\n+    }\n+\n+    public Point getP1() {\n+        return P1;\n+    }\n+\n+    public Point getP2() {\n+        return P2;\n+    }\n+\n+    public void setP1(Point p1) {\n+        P1 = p1;\n+    }\n+\n+    public void setP2(Point p2) {\n+        P2 = p2;\n+    }\n+\n+    public boolean isCollinearLine(Point P) {\n+        return ((P.x - getP1().x) / (getP2().x - getP1().x))\n+                == (P.y - getP1().y) / ((getP2().y - getP1().y)) ? true : false;\n+    }\n+\n+    public String toString() {\n+        return \"(\" + getP1().x + \",\" + getP1().y + \")\" + \";\" + \"(\" + getP2().x + \",\" + getP2().y + \")\";\n+    }\n+}"
  },
  {
    "sha": "f0e16c525c3532125cd4a9607263db2921d4e12e",
    "filename": "task04/src/com/example/task04/Point.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/59d5c7702ccaa6f377c49115306c656562290763/task04/src/com/example/task04/Point.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/59d5c7702ccaa6f377c49115306c656562290763/task04/src/com/example/task04/Point.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task04/src/com/example/task04/Point.java?ref=59d5c7702ccaa6f377c49115306c656562290763",
    "patch": "@@ -0,0 +1,24 @@\n+package com.example.task04;\n+\n+public class Point {\n+    final int x;\n+    final int y;\n+\n+    public Point(int x, int y) {\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    public double distance(Point point) {\n+        return Math.sqrt(Math.pow(point.x - this.x, 2) + Math.pow(point.y - this.y, 2));\n+    }\n+\n+    public String toString() {\n+        return \"(\" + Integer.toString(x) + \",\" + Integer.toString(y) + \")\";\n+    }\n+\n+    void print() {\n+        String pointToString = String.format(\"(%d, %d)\", x, y);\n+        System.out.println(pointToString);\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "820434f3f85686dc1c27d580cfc58eae1eec21a0",
    "filename": "task04/src/com/example/task04/Task04Main.java",
    "status": "modified",
    "additions": 8,
    "deletions": 1,
    "changes": 9,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/59d5c7702ccaa6f377c49115306c656562290763/task04/src/com/example/task04/Task04Main.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/59d5c7702ccaa6f377c49115306c656562290763/task04/src/com/example/task04/Task04Main.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task04/src/com/example/task04/Task04Main.java?ref=59d5c7702ccaa6f377c49115306c656562290763",
    "patch": "@@ -2,6 +2,13 @@\n \n public class Task04Main {\n     public static void main(String[] args) {\n-\n+        Line line = new Line(new Point(2, 2), new Point(12, 11));\n+        System.out.println(line.toString());\n+        Point point = new Point(24,2);\n+        if (line.isCollinearLine(point)) {\n+            System.out.println(point.toString()+ \" The point lies on the line\");\n+        } else {\n+            System.out.println(point.toString()+ \" The point does not lie on the line\");\n+        }\n     }\n }"
  }
]
