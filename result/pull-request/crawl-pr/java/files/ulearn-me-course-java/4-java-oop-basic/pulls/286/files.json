[
  {
    "sha": "1d46a6923df77921d0ed2c20f782f3064c660fbb",
    "filename": "task04/src/com/example/task04/Line.java",
    "status": "added",
    "additions": 41,
    "deletions": 0,
    "changes": 41,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/95a31b2f5929c1804f3bbd4821602d5fcc91b71e/task04/src/com/example/task04/Line.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/95a31b2f5929c1804f3bbd4821602d5fcc91b71e/task04/src/com/example/task04/Line.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task04/src/com/example/task04/Line.java?ref=95a31b2f5929c1804f3bbd4821602d5fcc91b71e",
    "patch": "@@ -0,0 +1,41 @@\n+package com.example.task04;\n+\n+public class Line {\n+    private Point point1;\n+    private Point point2;\n+\n+    public String toString(){\n+        return point1.toString() + \"---\" + point2.toString();\n+    }\n+\n+\n+    /*\n+    Площадь = 1/2{ (x1*y2 + x2*y3 + x3*y1) — ( x2*y1 + x3*y2 + x1*y3) }\n+    Если полученный результат равен 0 — точки коллинеарны (лежат на одной прямой)\n+    Если полученный результат неравен 0 — точки неколлинеарны\n+     */\n+    public boolean isCollinearLine(Point p){\n+        int leftBracket = (point1.getX() * point2.getY()) +\n+                (point2.getX() * p.getY())+\n+                (p.getX() * point1.getY());\n+\n+        int rightBracket = (point2.getX() * point1.getY())+\n+                (p.getX() * point2.getY())+\n+                (point1.getX() * p.getY());\n+        int area = (leftBracket - rightBracket) / 2;\n+        return area == 0;\n+    }\n+\n+    public Point getP1() {\n+        return point1;\n+    }\n+\n+    public Point getP2() {\n+        return point2;\n+    }\n+\n+    public Line(Point point1, Point point2){\n+        this.point1 = point1;\n+        this.point2 = point2;\n+    }\n+}"
  },
  {
    "sha": "00f1eca05ec9efe0bfee228f1b89854e35f3f739",
    "filename": "task04/src/com/example/task04/Point.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/95a31b2f5929c1804f3bbd4821602d5fcc91b71e/task04/src/com/example/task04/Point.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/95a31b2f5929c1804f3bbd4821602d5fcc91b71e/task04/src/com/example/task04/Point.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task04/src/com/example/task04/Point.java?ref=95a31b2f5929c1804f3bbd4821602d5fcc91b71e",
    "patch": "@@ -0,0 +1,23 @@\n+package com.example.task04;\n+\n+public class Point {\n+    private final int x;\n+    private final int y;\n+\n+    public Point(int x, int y){\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    public String toString(){\n+        return String.format(\"(%d : %d)\", x, y);\n+    }\n+\n+    public int getX() {\n+        return x;\n+    }\n+\n+    public int getY() {\n+        return y;\n+    }\n+}"
  },
  {
    "sha": "434e894aad0c48db176b2902d19a16c9301f4d2a",
    "filename": "task04/src/com/example/task04/Task04Main.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/95a31b2f5929c1804f3bbd4821602d5fcc91b71e/task04/src/com/example/task04/Task04Main.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/95a31b2f5929c1804f3bbd4821602d5fcc91b71e/task04/src/com/example/task04/Task04Main.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task04/src/com/example/task04/Task04Main.java?ref=95a31b2f5929c1804f3bbd4821602d5fcc91b71e",
    "patch": "@@ -2,6 +2,15 @@\n \n public class Task04Main {\n     public static void main(String[] args) {\n+        Line l1 = new Line(new Point(10, 10), new Point(20, 20));\n+\n+        System.out.println(l1);\n+        System.out.println(l1.getP1());\n+        System.out.println(l1.getP2());\n+\n+        System.out.println(l1.isCollinearLine(new Point(15, 15)));\n+        System.out.println(l1.isCollinearLine(new Point(30, 40)));\n+\n \n     }\n }"
  }
]
