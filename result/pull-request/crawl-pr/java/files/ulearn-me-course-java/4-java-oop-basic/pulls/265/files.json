[
  {
    "sha": "817671dd020b32e29ec3052ed2cef988a3a11d3f",
    "filename": "task05/src/com/example/task05/Point.java",
    "status": "modified",
    "additions": 16,
    "deletions": 32,
    "changes": 48,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/bcecf87ba33389aa7a5ffd4277c5a1015a061727/task05/src/com/example/task05/Point.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/bcecf87ba33389aa7a5ffd4277c5a1015a061727/task05/src/com/example/task05/Point.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task05/src/com/example/task05/Point.java?ref=bcecf87ba33389aa7a5ffd4277c5a1015a061727",
    "patch": "@@ -1,49 +1,33 @@\n package com.example.task05;\n \n-/**\n- * Точка в двумерном пространстве\n- */\n public class Point {\n \n-    /**\n-     * Конструктор, инициализирующий координаты точки\n-     *\n-     * @param x координата по оси абсцисс\n-     * @param y координата по оси ординат\n-     */\n+    private double x;\n+    private double y;\n+\n     public Point(double x, double y) {\n-        throw new AssertionError();\n+        setX(x);\n+        setY(y);\n     }\n \n-    /**\n-     * Возвращает координату точки по оси абсцисс\n-     *\n-     * @return координату точки по оси X\n-     */\n     public double getX() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return x;\n     }\n \n-    /**\n-     * Возвращает координату точки по оси ординат\n-     *\n-     * @return координату точки по оси Y\n-     */\n     public double getY() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return y;\n+    }\n+\n+    public void setX(double x) {\n+        this.x = x;\n+    }\n+\n+    public void setY(double y) {\n+        this.y = y;\n     }\n \n-    /**\n-     * Подсчитывает расстояние от текущей точки до точки, переданной в качестве параметра\n-     *\n-     * @param point вторая точка отрезка\n-     * @return расстояние от текущей точки до переданной\n-     */\n     public double getLength(Point point) {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return Math.sqrt(Math.pow(point.x - this.x, 2) + Math.pow(point.y - this.y, 2));\n     }\n \n }"
  },
  {
    "sha": "0dad8183239d6b85e7b30a8d3ef7f0ff7408ad39",
    "filename": "task05/src/com/example/task05/PolygonalLine.java",
    "status": "modified",
    "additions": 19,
    "deletions": 31,
    "changes": 50,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/bcecf87ba33389aa7a5ffd4277c5a1015a061727/task05/src/com/example/task05/PolygonalLine.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/bcecf87ba33389aa7a5ffd4277c5a1015a061727/task05/src/com/example/task05/PolygonalLine.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task05/src/com/example/task05/PolygonalLine.java?ref=bcecf87ba33389aa7a5ffd4277c5a1015a061727",
    "patch": "@@ -1,46 +1,34 @@\n package com.example.task05;\n \n-/**\n- * Ломаная линия\n- */\n+import java.util.ArrayList;\n+\n+\n+\n public class PolygonalLine {\n \n-    /**\n-     * Устанавливает точки ломаной линии\n-     *\n-     * @param points массив точек, которыми нужно проинициализировать ломаную линию\n-     */\n+    private ArrayList<Point> points = new ArrayList<Point>();\n+\n     public void setPoints(Point[] points) {\n-        // TODO: реализовать\n+        for (Point point : points) {\n+            this.points.add(new Point(point.getX(), point.getY()));\n+        }\n     }\n \n-    /**\n-     * Добавляет точку к ломаной линии\n-     *\n-     * @param point точка, которую нужно добавить к ломаной\n-     */\n     public void addPoint(Point point) {\n-        // TODO: реализовать\n+        points.add(new Point(point.getX(), point.getY()));\n     }\n \n-    /**\n-     * Добавляет точку к ломаной линии\n-     *\n-     * @param x координата по оси абсцисс\n-     * @param y координата по оси ординат\n-     */\n     public void addPoint(double x, double y) {\n-        // TODO: реализовать\n+        points.add(new Point(x, y));\n     }\n \n-    /**\n-     * Возвращает длину ломаной линии\n-     *\n-     * @return длину ломаной линии\n-     */\n     public double getLength() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        double length = 0;\n+        for (int i = 0; i < points.size() - 1; i++) {\n+            Point firstPoint = points.get(i);\n+            Point secondPoint = points.get(i + 1);\n+            length += secondPoint.getLength(firstPoint);\n+        }\n+        return length;\n     }\n-\n-}\n+}\n\\ No newline at end of file"
  }
]
