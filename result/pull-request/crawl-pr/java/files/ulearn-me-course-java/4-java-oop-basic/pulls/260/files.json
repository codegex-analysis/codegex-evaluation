[
  {
    "sha": "a6f6e9d04f4fe560d65ca7e7d4b5cfd35537136a",
    "filename": "task05/src/com/example/task05/Point.java",
    "status": "modified",
    "additions": 17,
    "deletions": 7,
    "changes": 24,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/4b11cc716d549c645c0a1a47c81e394f1213502c/task05/src/com/example/task05/Point.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/4b11cc716d549c645c0a1a47c81e394f1213502c/task05/src/com/example/task05/Point.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task05/src/com/example/task05/Point.java?ref=4b11cc716d549c645c0a1a47c81e394f1213502c",
    "patch": "@@ -5,14 +5,23 @@\n  */\n public class Point {\n \n+    final double x;\n+    final double y;\n+\n     /**\n      * Конструктор, инициализирующий координаты точки\n      *\n      * @param x координата по оси абсцисс\n      * @param y координата по оси ординат\n      */\n     public Point(double x, double y) {\n-        throw new AssertionError();\n+        this.x = x;\n+        this.y = y;\n+    }\n+\n+    public Point(Point p){\n+        this.x = p.x;\n+        this.y = p.y;\n     }\n \n     /**\n@@ -21,8 +30,7 @@ public Point(double x, double y) {\n      * @return координату точки по оси X\n      */\n     public double getX() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return x;\n     }\n \n     /**\n@@ -31,8 +39,7 @@ public double getX() {\n      * @return координату точки по оси Y\n      */\n     public double getY() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return y;\n     }\n \n     /**\n@@ -42,8 +49,11 @@ public double getY() {\n      * @return расстояние от текущей точки до переданной\n      */\n     public double getLength(Point point) {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        return Math.sqrt(Math.pow((point.x - x), 2) + Math.pow((point.y - y), 2));\n+    }\n+\n+    public String toString() {\n+        return \"(\" + x + \",\" + y + \")\";\n     }\n \n }"
  },
  {
    "sha": "81d3659e638daab542b718b09127f5dabef4ec72",
    "filename": "task05/src/com/example/task05/PolygonalLine.java",
    "status": "modified",
    "additions": 14,
    "deletions": 5,
    "changes": 19,
    "blob_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/blob/4b11cc716d549c645c0a1a47c81e394f1213502c/task05/src/com/example/task05/PolygonalLine.java",
    "raw_url": "https://github.com/ulearn-me-course-java/4-java-oop-basic/raw/4b11cc716d549c645c0a1a47c81e394f1213502c/task05/src/com/example/task05/PolygonalLine.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/4-java-oop-basic/contents/task05/src/com/example/task05/PolygonalLine.java?ref=4b11cc716d549c645c0a1a47c81e394f1213502c",
    "patch": "@@ -1,17 +1,23 @@\n package com.example.task05;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n /**\n  * Ломаная линия\n  */\n public class PolygonalLine {\n \n+    private ArrayList<Point> points = new ArrayList<Point>();\n     /**\n      * Устанавливает точки ломаной линии\n      *\n      * @param points массив точек, которыми нужно проинициализировать ломаную линию\n      */\n     public void setPoints(Point[] points) {\n-        // TODO: реализовать\n+        for(int i = 0; i < points.length; i++){\n+            this.points.add(new Point(points[i]));\n+        }\n     }\n \n     /**\n@@ -20,7 +26,7 @@ public void setPoints(Point[] points) {\n      * @param point точка, которую нужно добавить к ломаной\n      */\n     public void addPoint(Point point) {\n-        // TODO: реализовать\n+        points.add(new Point(point));\n     }\n \n     /**\n@@ -30,7 +36,7 @@ public void addPoint(Point point) {\n      * @param y координата по оси ординат\n      */\n     public void addPoint(double x, double y) {\n-        // TODO: реализовать\n+        addPoint(new Point(x,y));\n     }\n \n     /**\n@@ -39,8 +45,11 @@ public void addPoint(double x, double y) {\n      * @return длину ломаной линии\n      */\n     public double getLength() {\n-        // TODO: реализовать\n-        throw new AssertionError();\n+        double sum = 0;\n+        for(int i =0; i< points.size()-1; i++){\n+            sum +=  points.get(i).getLength(points.get(i+1));\n+        }\n+        return sum;\n     }\n \n }"
  }
]
