[
  {
    "sha": "650363c45e36f3cca1d18018c1b77fdabbc65abd",
    "filename": "task03/src/com/example/task03/Hours.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/Hours.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/Hours.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Hours.java?ref=eef499a170090328b70c55e816e83082fed21eb5",
    "patch": "@@ -0,0 +1,30 @@\n+package com.example.task03;\n+\n+public class Hours implements TimeUnit{\n+\n+    private final long amount;\n+\n+    public Hours(long amount) {\n+        this.amount = amount;\n+    }\n+\n+    @Override\n+    public long toMillis() {\n+        return amount * 60 * 60 * 1000;\n+    }\n+\n+    @Override\n+    public long toSeconds() {\n+        return amount * 60 * 60;\n+    }\n+\n+    @Override\n+    public long toMinutes() {\n+        return amount * 60;\n+    }\n+\n+    @Override\n+    public long toHours(){\n+        return amount;\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b8a37b815b430ac3c547399bcb47b174ec07d7a3",
    "filename": "task03/src/com/example/task03/Milliseconds.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/Milliseconds.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/Milliseconds.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Milliseconds.java?ref=eef499a170090328b70c55e816e83082fed21eb5",
    "patch": "@@ -18,11 +18,16 @@ public long toMillis() {\n \n     @Override\n     public long toSeconds() {\n-        return amount / 1000;\n+        return Math.round(amount / 1000f);\n     }\n \n     @Override\n     public long toMinutes() {\n-        return amount / 1000 * 60;\n+        return Math.round(amount / 1000f / 60);\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return Math.round(amount / (1000f * 3600));\n     }\n }"
  },
  {
    "sha": "a4749ea8300fb681644ef047517e91fcc7829997",
    "filename": "task03/src/com/example/task03/Minutes.java",
    "status": "modified",
    "additions": 11,
    "deletions": 8,
    "changes": 19,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/Minutes.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/Minutes.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Minutes.java?ref=eef499a170090328b70c55e816e83082fed21eb5",
    "patch": "@@ -2,26 +2,29 @@\n \n public class Minutes implements TimeUnit {\n \n+    private final long amount;\n+\n     public Minutes(long amount) {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        this.amount = amount;\n     }\n \n     @Override\n     public long toMillis() {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        return amount * 60 * 1000;\n     }\n \n     @Override\n     public long toSeconds() {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        return amount * 60;\n     }\n \n     @Override\n     public long toMinutes() {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        return amount;\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return Math.round(amount / 60f);\n     }\n }"
  },
  {
    "sha": "9b8580bb11a045b2c1ffa981a05325efa6c5882d",
    "filename": "task03/src/com/example/task03/Seconds.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/Seconds.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/Seconds.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Seconds.java?ref=eef499a170090328b70c55e816e83082fed21eb5",
    "patch": "@@ -23,6 +23,11 @@ public long toSeconds() {\n \n     @Override\n     public long toMinutes() {\n-        return Math.round(amount / 60);\n+        return Math.round(amount / 60f);\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return Math.round(amount / 3600f);\n     }\n }"
  },
  {
    "sha": "778f3f4d1fdfca475fd90002ceae753247806fb7",
    "filename": "task03/src/com/example/task03/TimeUnit.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/TimeUnit.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/TimeUnit.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/TimeUnit.java?ref=eef499a170090328b70c55e816e83082fed21eb5",
    "patch": "@@ -28,4 +28,12 @@\n      */\n     long toMinutes();\n \n+    /**\n+     * Возвращает продолжительность текущего интервала, пересчитанного в часы.\n+     * При необходимости округлять по обычным правилам округления (число, меньшее 0.5 переходит в 0, большее или равное - в 1)\n+     *\n+     * @return количество часов в текущем интервале\n+     */\n+    long toHours();\n+\n }"
  },
  {
    "sha": "363e2d451c05b01b02b8adea2c5e8c9c467be172",
    "filename": "task03/src/com/example/task03/TimeUnitUtils.java",
    "status": "modified",
    "additions": 105,
    "deletions": 4,
    "changes": 109,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/TimeUnitUtils.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/eef499a170090328b70c55e816e83082fed21eb5/task03/src/com/example/task03/TimeUnitUtils.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/TimeUnitUtils.java?ref=eef499a170090328b70c55e816e83082fed21eb5",
    "patch": "@@ -5,6 +5,36 @@\n  */\n public class TimeUnitUtils {\n \n+    /**\n+     * Конвертирует интервал в миллисекундах в интервал в секундах\n+     *\n+     * @param millis интервал в миллисекундах\n+     * @return интервал в секундах\n+     */\n+    public static Seconds toSeconds(Milliseconds millis) {\n+        return new Seconds(millis.toSeconds());\n+    }\n+\n+    /**\n+     * Конвертирует интервал в миллисекундах в интервал в минутах\n+     *\n+     * @param millis интервал в миллисекундах\n+     * @return интервал в минутах\n+     */\n+    public static Minutes toMinutes(Milliseconds millis) {\n+        return new Minutes(millis.toSeconds());\n+    }\n+\n+    /**\n+     * Конвертирует интервал в миллисекундах в интервал в часах\n+     *\n+     * @param millis интервал в миллисекундах\n+     * @return интервал в часах\n+     */\n+    public static Hours toHours(Milliseconds millis) {\n+        return new Hours(millis.toSeconds());\n+    }\n+\n     /**\n      * Конвертирует интервал в секундах в интервал в миллисекундах\n      *\n@@ -16,12 +46,83 @@ public static Milliseconds toMillis(Seconds seconds) {\n     }\n \n     /**\n-     * Конвертирует интервал в миллисекундах в интервал в секундах\n+     * Конвертирует интервал в секундах в интервал в минутах\n      *\n-     * @param millis интервал в миллисекундах\n+     * @param seconds интервал в минутах\n      * @return интервал в секундах\n      */\n-    public static Seconds toSeconds(Milliseconds millis) {\n-        return new Seconds(millis.toSeconds());\n+    public static Minutes toMinutes(Seconds seconds) {\n+        return new Minutes(seconds.toMinutes());\n+    }\n+\n+    /**\n+     * Конвертирует интервал в секундах в интервал в часах\n+     *\n+     * @param seconds интервал в минутах\n+     * @return интервал в часах\n+     */\n+    public static Hours toHours(Seconds seconds) {\n+        return new Hours(seconds.toMinutes());\n+    }\n+\n+    /**\n+     * Конвертирует интервал в минутах в интервал в миллисекундах\n+     *\n+     * @param minutes интервал в минутах\n+     * @return интервал в миллисекундах\n+     */\n+    public static Milliseconds toMillis(Minutes minutes) {\n+        return new Milliseconds(minutes.toMillis());\n     }\n+\n+    /**\n+     * Конвертирует интервал в минутах в интервал секундах\n+     *\n+     * @param minutes интервал в минутах\n+     * @return интервал в секундах\n+     */\n+    public static Seconds toSeconds(Minutes minutes) {\n+        return new Seconds(minutes.toMillis());\n+    }\n+\n+    /**\n+     * Конвертирует интервал в минутах в интервал часах\n+     *\n+     * @param minutes интервал в минутах\n+     * @return интервал в часах\n+     */\n+    public static Hours toHours(Minutes minutes) {\n+        return new Hours(minutes.toHours());\n+    }\n+\n+    /**\n+     * Конвертирует интервал в часах в интервал в миллисекундах\n+     *\n+     * @param hours интервал в часах\n+     * @return интервал в миллисекундах\n+     */\n+    public static Milliseconds toMillis(Hours hours) {\n+        return new Milliseconds(hours.toMillis());\n+    }\n+\n+    /**\n+     * Конвертирует интервал в часах в интервал в секундах\n+     *\n+     * @param hours интервал в минутах\n+     * @return интервал в секундах\n+     */\n+    public static Seconds toSeconds(Hours hours) {\n+        return new Seconds(hours.toSeconds());\n+    }\n+\n+    /**\n+     * Конвертирует интервал в часах в интервал в минутах\n+     *\n+     * @param hours интервал в часах\n+     * @return интервал в минутах\n+     */\n+    public static Minutes toMinutes(Hours hours) {\n+        return new Minutes(hours.toMinutes());\n+    }\n+\n }"
  }
]
