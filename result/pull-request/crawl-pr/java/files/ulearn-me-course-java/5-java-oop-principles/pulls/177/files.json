[
  {
    "sha": "338572c1139c08d05aa0c1fa045a1dc0d372dee0",
    "filename": "task03/src/com/example/task03/Hours.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/Hours.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/Hours.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Hours.java?ref=644f09d96edc44c757c1f61a4cf31bd2e8abf6ee",
    "patch": "@@ -0,0 +1,30 @@\n+package com.example.task03;\n+\n+public class Hours implements TimeUnit{\n+\n+    private final long amount;\n+\n+    public Hours(long amount) {\n+        this.amount = amount;\n+    }\n+\n+    @Override\n+    public long toMillis() {\n+        return amount * 1000 * 60 * 60;\n+    }\n+\n+    @Override\n+    public long toSeconds() {\n+        return amount * 60 * 60;\n+    }\n+\n+    @Override\n+    public long toMinutes() {\n+        return amount * 60;\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return amount;\n+    }\n+}"
  },
  {
    "sha": "bd12500269a39f2b28cd2b581aebcd3b18a35f54",
    "filename": "task03/src/com/example/task03/Milliseconds.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/Milliseconds.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/Milliseconds.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Milliseconds.java?ref=644f09d96edc44c757c1f61a4cf31bd2e8abf6ee",
    "patch": "@@ -18,11 +18,16 @@ public long toMillis() {\n \n     @Override\n     public long toSeconds() {\n-        return amount / 1000;\n+        return Math.round((double)amount / 1000);\n     }\n \n     @Override\n     public long toMinutes() {\n-        return amount / 1000 * 60;\n+        return Math.round((double)amount / (1000 * 60));\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return Math.round((double)amount / (1000 * 60 * 60));\n     }\n }"
  },
  {
    "sha": "788a4c18020085408ddf7355916fcb2804e6037d",
    "filename": "task03/src/com/example/task03/Minutes.java",
    "status": "modified",
    "additions": 11,
    "deletions": 8,
    "changes": 19,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/Minutes.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/Minutes.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Minutes.java?ref=644f09d96edc44c757c1f61a4cf31bd2e8abf6ee",
    "patch": "@@ -2,26 +2,29 @@\n \n public class Minutes implements TimeUnit {\n \n+    private final long amount;\n+\n     public Minutes(long amount) {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        this.amount = amount;\n     }\n \n     @Override\n     public long toMillis() {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        return amount * 1000 * 60;\n     }\n \n     @Override\n     public long toSeconds() {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        return Math.round((double)amount * 60);\n     }\n \n     @Override\n     public long toMinutes() {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        return  amount;\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return Math.round((double)amount / 60);\n     }\n }"
  },
  {
    "sha": "7ad8bf2b5cbd78522d7eecf483252ffd7c6d03ac",
    "filename": "task03/src/com/example/task03/Seconds.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/Seconds.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/Seconds.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Seconds.java?ref=644f09d96edc44c757c1f61a4cf31bd2e8abf6ee",
    "patch": "@@ -23,6 +23,11 @@ public long toSeconds() {\n \n     @Override\n     public long toMinutes() {\n-        return Math.round(amount / 60);\n+        return Math.round((double)amount / 60);\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return Math.round((double)amount / (60 * 60));\n     }\n }"
  },
  {
    "sha": "1e017f49d7deb8e9ddb157ab1d1803104aa3ef36",
    "filename": "task03/src/com/example/task03/TimeUnit.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/TimeUnit.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/TimeUnit.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/TimeUnit.java?ref=644f09d96edc44c757c1f61a4cf31bd2e8abf6ee",
    "patch": "@@ -4,7 +4,6 @@\n  * Интерфейс для интервалов времени в определенных единицах\n  */\n public interface TimeUnit {\n-\n     /**\n      * Возвращает продолжительность текущего интервала, пересчитанного в миллисекундах.\n      *\n@@ -28,4 +27,6 @@\n      */\n     long toMinutes();\n \n+    long toHours();\n+\n }"
  },
  {
    "sha": "b730a9d3310902849e741290ebfa03fb2f9df4ac",
    "filename": "task03/src/com/example/task03/TimeUnitUtils.java",
    "status": "modified",
    "additions": 12,
    "deletions": 6,
    "changes": 18,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/TimeUnitUtils.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/644f09d96edc44c757c1f61a4cf31bd2e8abf6ee/task03/src/com/example/task03/TimeUnitUtils.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/TimeUnitUtils.java?ref=644f09d96edc44c757c1f61a4cf31bd2e8abf6ee",
    "patch": "@@ -8,20 +8,26 @@\n     /**\n      * Конвертирует интервал в секундах в интервал в миллисекундах\n      *\n-     * @param seconds интервал в секундах\n+     * @param units интервал в секундах\n      * @return интервал в миллисекундах\n      */\n-    public static Milliseconds toMillis(Seconds seconds) {\n-        return new Milliseconds(seconds.toMillis());\n+    public static Milliseconds toMillis(TimeUnit units) {\n+        return new Milliseconds(units.toMillis());\n     }\n \n     /**\n      * Конвертирует интервал в миллисекундах в интервал в секундах\n      *\n-     * @param millis интервал в миллисекундах\n+     * @param units интервал в миллисекундах\n      * @return интервал в секундах\n      */\n-    public static Seconds toSeconds(Milliseconds millis) {\n-        return new Seconds(millis.toSeconds());\n+    public static Seconds toSeconds(TimeUnit units) {\n+        return new Seconds(units.toSeconds());\n     }\n+\n+    public static Minutes toMinutes(TimeUnit units){\n+        return  new Minutes(units.toMinutes());\n+    }\n+\n+    public static Hours toHours(TimeUnit units){ return new Hours(units.toHours()); }\n }"
  }
]
