[
  {
    "sha": "5b94f31e77d816f7704525f3cabc2f61da3fb34f",
    "filename": "task01/src/com/example/task01/Logger.java",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/d4f226a60817af4bc557c3617c9924248d8c4da8/task01/src/com/example/task01/Logger.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/d4f226a60817af4bc557c3617c9924248d8c4da8/task01/src/com/example/task01/Logger.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task01/src/com/example/task01/Logger.java?ref=d4f226a60817af4bc557c3617c9924248d8c4da8",
    "patch": "@@ -0,0 +1,82 @@\n+package com.example.task01;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+\n+enum Level {\n+    DEBUG,\n+    INFO,\n+    WARNING,\n+    ERROR\n+}\n+\n+public class Logger {\n+\n+    private final static HashMap<String, Logger> hashMap = new HashMap<>();\n+    private Level level = Level.DEBUG;\n+    private final String name;\n+\n+    public Logger(String name) {\n+        this.name = name;\n+        hashMap.put(name, this);\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public static Logger getLogger(String name) {\n+        return hashMap.containsKey(name) ? hashMap.get(name) : new Logger(name);\n+    }\n+\n+    public void setLevel(String newLevel) {\n+        level = Level.valueOf(newLevel);\n+    }\n+\n+    public String getLevel() {\n+        return String.valueOf(level);\n+    }\n+\n+    private void log(Level level, String message) {\n+        if (!(level.ordinal() >= this.level.ordinal())) return;\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy.MM.dd hh:mm:ss\");\n+        System.out.printf(\"[%s] %s %s - %s\", level, dateFormat.format(new Date()), name, message);\n+    }\n+\n+    private void log(Level level, String message, Object... args) {\n+        log(level, String.format(message, args));\n+    }\n+\n+    public void debug(String message) {\n+        log(Level.DEBUG, message);\n+    }\n+\n+    public void debug(String message, Object... args) {\n+        log(Level.DEBUG, message, args);\n+    }\n+\n+    public void info(String message) {\n+        log(Level.INFO, message);\n+    }\n+\n+    public void info(String message, Object... args) {\n+        log(Level.INFO, message, args);\n+    }\n+\n+    public void warning(String message) {\n+        log(Level.WARNING, message);\n+    }\n+\n+    public void warning(String message, Object... args) {\n+        log(Level.WARNING, message, args);\n+    }\n+\n+    public void error(String message) {\n+        log(Level.ERROR, message);\n+    }\n+\n+    public void error(String message, Object... args) {\n+        log(Level.ERROR, message, args);\n+    }\n+\n+}\n\\ No newline at end of file"
  }
]
