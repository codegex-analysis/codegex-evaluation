[
  {
    "sha": "b7ce8c33f2f9db9d699c56c27d259d736036ac37",
    "filename": "task01/README.md",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/b913b57090e3f4ac5a48fd411772b1cc464bfaaf/task01/README.md",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/b913b57090e3f4ac5a48fd411772b1cc464bfaaf/task01/README.md",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task01/README.md?ref=b913b57090e3f4ac5a48fd411772b1cc464bfaaf",
    "patch": "@@ -5,13 +5,15 @@\n Требования к классу `Logger`:\n * Каждому экземпляру класса можно задать имя.\n Имя можно получить, вызвав публичный метод `String getName()`.\n-* В классе должен быть публичный статический метод `getLogger(String name)`, возвращающий экземпляр логгера с указанным именем. Повторый вызов с тем же аргументом должен возвращать тот же самый экземпляр, что и при первом вызове. Если продемонстрировать это кодом, то следующий код должен возвращать true:\n+* В классе должен быть публичный статический метод `getLogger(String name)`, возвращающий экземпляр логгера с указанным именем. \n+  Повторый вызов с тем же аргументом должен возвращать тот же самый экземпляр, что и при первом вызове. \n+  Если продемонстрировать это кодом, то следующий код должен возвращать true:\n ```\n Logger logger1 = Logger.getLogger(\"test\")\n Logger logger2 = Logger.getLogger(\"test\")\n return logger1 == logger2\n ```\n-* `Logger` должен поддерживать следуюище уровни важности (по возрастанию важности):\n+* `Logger` должен поддерживать следующие уровни важности (по возрастанию важности):\n   * *DEBUG* - отладка\n   * *INFO* - информационные сообщения\n   * *WARNING* - предупреждение\n@@ -31,9 +33,14 @@ return logger1 == logger2\n ```\n [WARNING] 2018.07.17 09:56:32 myLogger - something weird happened\n ```\n-* Для каждого уровня нужно добавить 2 метода. Название методов должно совпадать с уровнем (в нижнем регистре, например, error). Один метод должен принимать в качестве аргумента строку, которая должна быть выведена на экран в качестве *MESSAGE*. Второй метод должен принимать первым параметром шаблон сообщения (в любом формате, например `java.lang.String.format()` или `java.text.MessageFormat.format()` и любым количеством дополнительных аргументов, которые будут использоваться для форматирования переданной строки.\n+* Для каждого уровня нужно добавить 2 метода. Название методов должно совпадать с уровнем (в нижнем регистре, например, error). \n+  Один метод должен принимать в качестве аргумента строку, которая должна быть выведена на экран в качестве *MESSAGE*. \n+  Второй метод должен принимать первым параметром шаблон сообщения (в любом формате, \n+  например `java.lang.String.format()` или `java.text.MessageFormat.format()` и любым количеством дополнительных аргументов,\n+  которые будут использоваться для форматирования переданной строки.\n \n-* Добавить два метода с названием `log`, первый из которых принимает на вход два параметра - уровень логгирования и сообщение. Второй - уровень логгирования, шаблон сообщения и любое количество аргументов, которые будут подставлены в шаблон\n+* Добавить два метода с названием `log`, первый из которых принимает на вход два параметра - уровень логгирования и сообщение. \n+  Второй - уровень логгирования, шаблон сообщения и любое количество аргументов, которые будут подставлены в шаблон\n \n * `Logger` должен поддерживать динамическое задание текущего уровня важности. Сообщение, чей уровень важности ниже установленного не должны печататься в консоль.\n "
  },
  {
    "sha": "23734ab5af607f7167c075204d0ab46b72ca1089",
    "filename": "task01/src/com/example/task01/Logger.java",
    "status": "added",
    "additions": 91,
    "deletions": 0,
    "changes": 91,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/b913b57090e3f4ac5a48fd411772b1cc464bfaaf/task01/src/com/example/task01/Logger.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/b913b57090e3f4ac5a48fd411772b1cc464bfaaf/task01/src/com/example/task01/Logger.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task01/src/com/example/task01/Logger.java?ref=b913b57090e3f4ac5a48fd411772b1cc464bfaaf",
    "patch": "@@ -0,0 +1,91 @@\n+package com.example.task01;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.logging.Level;\n+\n+enum levels{\n+    DEBUG,\n+    INFO,\n+    WARNING,\n+    ERROR\n+}\n+\n+public class Logger {\n+\n+    private static ArrayList<Logger> logs = new ArrayList<>();\n+    private String _name;\n+    private levels level;\n+\n+    public Logger(String name){\n+        this._name = name;\n+        logs.add(this);\n+    }\n+\n+    public String getName(){\n+        return this._name;\n+    }\n+\n+    public levels getLevel(){\n+        return this.level;\n+    }\n+\n+    public void setLevel(levels lvl){\n+        this.level = lvl;\n+    }\n+\n+    public static Logger getLogger(String name){\n+        return (Logger) logs.stream().filter(x-> x._name.equals(name)).toArray()[0];\n+    }\n+\n+    public void log(levels lvl, String message){\n+        System.out.println(String.format(\"[%s] %s %s - %s\", level, getCurrentTime(), _name, message));\n+    }\n+\n+    public void log(levels lvl, String template, Object... args){\n+        System.out.printf((template) + \"%n\", args);\n+    }\n+\n+    public String getCurrentTime(){\n+        String dateTime = new SimpleDateFormat(\"yyyy.MM.dd hh:mm:ss\").format(new Date());\n+        return dateTime;\n+    }\n+\n+    private void debug(String message){\n+        log(levels.DEBUG, message);\n+    }\n+\n+    private void debug(String template, Object... args){\n+        log(levels.DEBUG, template, args);\n+    }\n+\n+    private void info(String message){\n+        log(levels.INFO, message);\n+    }\n+\n+    private void info(String template, Object... args){\n+        log(levels.INFO, template, args);\n+    }\n+\n+    private void warning(String message){\n+        log(levels.WARNING, message);\n+    }\n+\n+    private void warning(String template, Object... args){\n+        log(levels.WARNING, template, args);\n+    }\n+\n+    private void error(String message){\n+        log(levels.ERROR, message);\n+    }\n+\n+\n+    private void error(String template, Object... args){\n+        log(levels.ERROR, template, args);\n+    }\n+\n+\n+\n+\n+}"
  },
  {
    "sha": "cd4ec7d3bc7d2da1d1c7744f5b4ec1b5f9773301",
    "filename": "task01/src/com/example/task01/Task01Main.java",
    "status": "modified",
    "additions": 9,
    "deletions": 1,
    "changes": 10,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/b913b57090e3f4ac5a48fd411772b1cc464bfaaf/task01/src/com/example/task01/Task01Main.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/b913b57090e3f4ac5a48fd411772b1cc464bfaaf/task01/src/com/example/task01/Task01Main.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task01/src/com/example/task01/Task01Main.java?ref=b913b57090e3f4ac5a48fd411772b1cc464bfaaf",
    "patch": "@@ -1,7 +1,15 @@\n package com.example.task01;\n \n+import java.util.Date;\n+\n public class Task01Main {\n-    public static void main(String[] args) {\n \n+\n+\n+    public static void main(String[] args) {\n+        Logger logger1 = new Logger(\"1\");\n+        Logger logger2 = Logger.getLogger(\"1\");\n+        logger1.setLevel(levels.INFO);\n+        logger1.log(levels.INFO, \"Test\");\n     }\n }"
  }
]
