[
  {
    "sha": "54c15ad2cc6599baacc6a9142233ff8a5e34ae42",
    "filename": "task03/src/com/example/task03/Hours.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/Hours.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/Hours.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Hours.java?ref=ffd0215b5062648a96f28e6e8873b32dcb1929b2",
    "patch": "@@ -0,0 +1,30 @@\n+package com.example.task03;\n+\n+public class Hours implements TimeUnit {\n+\n+    private final long amount;\n+\n+    public Hours(long amount) {\n+        this.amount = amount;\n+    }\n+\n+    @Override\n+    public long toMillis() {\n+        return amount * 1000 * 60 * 60;\n+    }\n+\n+    @Override\n+    public long toSeconds() {\n+        return amount * 60 * 60;\n+    }\n+\n+    @Override\n+    public long toMinutes() {\n+        return amount * 60;\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return amount;\n+    }\n+}"
  },
  {
    "sha": "cf9f2f8b51a68f0472fdc238344be30c8edf48bd",
    "filename": "task03/src/com/example/task03/Milliseconds.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/Milliseconds.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/Milliseconds.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Milliseconds.java?ref=ffd0215b5062648a96f28e6e8873b32dcb1929b2",
    "patch": "@@ -18,11 +18,16 @@ public long toMillis() {\n \n     @Override\n     public long toSeconds() {\n-        return amount / 1000;\n+        return Math.round((double) amount / 1000);\n     }\n \n     @Override\n     public long toMinutes() {\n-        return amount / 1000 * 60;\n+        return Math.round((double) amount / 1000 / 60);\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return Math.round((double) amount / 1000 / 60 / 60);\n     }\n }"
  },
  {
    "sha": "505856fb93158baf629a43278622bb5a9a5d70c4",
    "filename": "task03/src/com/example/task03/Minutes.java",
    "status": "modified",
    "additions": 11,
    "deletions": 8,
    "changes": 19,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/Minutes.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/Minutes.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Minutes.java?ref=ffd0215b5062648a96f28e6e8873b32dcb1929b2",
    "patch": "@@ -2,26 +2,29 @@\n \n public class Minutes implements TimeUnit {\n \n+    private final long amount;\n+\n     public Minutes(long amount) {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        this.amount = amount;\n     }\n \n     @Override\n     public long toMillis() {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        return amount * 1000 * 60;\n     }\n \n     @Override\n     public long toSeconds() {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        return amount * 60;\n     }\n \n     @Override\n     public long toMinutes() {\n-        // TODO: реализовать\n-        throw new UnsupportedOperationException();\n+        return amount;\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return Math.round((double) amount / 60);\n     }\n }"
  },
  {
    "sha": "43b884a11779a0550d294016b961f3658c15c55c",
    "filename": "task03/src/com/example/task03/Seconds.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/Seconds.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/Seconds.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/Seconds.java?ref=ffd0215b5062648a96f28e6e8873b32dcb1929b2",
    "patch": "@@ -23,6 +23,11 @@ public long toSeconds() {\n \n     @Override\n     public long toMinutes() {\n-        return Math.round(amount / 60);\n+        return Math.round((double) amount / 60);\n+    }\n+\n+    @Override\n+    public long toHours() {\n+        return Math.round((double) amount / 60 / 60);\n     }\n }"
  },
  {
    "sha": "5a1850ba7b8aa98d477e3deca84c79bfd812ce9c",
    "filename": "task03/src/com/example/task03/TimeUnit.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/TimeUnit.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/TimeUnit.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/TimeUnit.java?ref=ffd0215b5062648a96f28e6e8873b32dcb1929b2",
    "patch": "@@ -28,4 +28,12 @@\n      */\n     long toMinutes();\n \n+    /**\n+     * Возвращает продолжительность текущего интервала, пересчитанного в минутах.\n+     * При необходимости округлять по обычным правилам округления (число, меньшее 0.5 переходит в 0, большее или равное - в 1)\n+     *\n+     * @return количество часов в текущем интервале\n+     */\n+    long toHours();\n+\n }"
  },
  {
    "sha": "438be174909d3d9a00cf4ce5ce7d5873c0df0a9b",
    "filename": "task03/src/com/example/task03/TimeUnitUtils.java",
    "status": "modified",
    "additions": 18,
    "deletions": 8,
    "changes": 26,
    "blob_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/blob/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/TimeUnitUtils.java",
    "raw_url": "https://github.com/ulearn-me-course-java/5-java-oop-principles/raw/ffd0215b5062648a96f28e6e8873b32dcb1929b2/task03/src/com/example/task03/TimeUnitUtils.java",
    "contents_url": "https://api.github.com/repos/ulearn-me-course-java/5-java-oop-principles/contents/task03/src/com/example/task03/TimeUnitUtils.java?ref=ffd0215b5062648a96f28e6e8873b32dcb1929b2",
    "patch": "@@ -6,22 +6,32 @@\n public class TimeUnitUtils {\n \n     /**\n-     * Конвертирует интервал в секундах в интервал в миллисекундах\n+     * Конвертирует интервал в интервал в миллисекундах\n      *\n-     * @param seconds интервал в секундах\n+     * @param time интервал\n      * @return интервал в миллисекундах\n      */\n-    public static Milliseconds toMillis(Seconds seconds) {\n-        return new Milliseconds(seconds.toMillis());\n+    public static Milliseconds toMillis(TimeUnit time) {\n+        return new Milliseconds(time.toMillis());\n     }\n \n     /**\n-     * Конвертирует интервал в миллисекундах в интервал в секундах\n+     * Конвертирует интервал в интервал в секундах\n      *\n-     * @param millis интервал в миллисекундах\n+     * @param time интервал\n      * @return интервал в секундах\n      */\n-    public static Seconds toSeconds(Milliseconds millis) {\n-        return new Seconds(millis.toSeconds());\n+    public static Seconds toSeconds(TimeUnit time) {\n+        return new Seconds(time.toSeconds());\n+    }\n+\n+    /**\n+     * Конвертирует интервал  в интервал в секундах\n+     *\n+     * @param time интервал\n+     * @return интервал в секундах\n+     */\n+    public static Hours toHours(TimeUnit time) {\n+        return new Hours(time.toHours());\n     }\n }"
  }
]
