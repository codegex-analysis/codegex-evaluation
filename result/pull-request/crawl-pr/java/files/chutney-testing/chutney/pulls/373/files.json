[
  {
    "sha": "66360a4a162267303f4cd66db1a35619cb906cd8",
    "filename": "cli/src/main/java/com/chutneytesting/cli/infrastruture/ExecutionRequestMapper.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/cli/src/main/java/com/chutneytesting/cli/infrastruture/ExecutionRequestMapper.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/cli/src/main/java/com/chutneytesting/cli/infrastruture/ExecutionRequestMapper.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/cli/src/main/java/com/chutneytesting/cli/infrastruture/ExecutionRequestMapper.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -44,14 +44,15 @@ private static StepDefinitionCore buildStepDefinitionCore(ScenarioContent dto, E\n                 .map(s -> buildStepDefinitionCore(s, originalEnvironmentObject))\n                 .collect(Collectors.toList()),\n             dto.scenario().outputs(),\n+            dto.scenario().validations(),\n             originalEnvironmentObject.name());\n     }\n \n     private static Optional<Target> getTarget(String targetName, Environment originalEnvironmentObject) {\n-        if(targetName == null || targetName.isEmpty()){\n+        if (targetName == null || targetName.isEmpty()) {\n             return Optional.empty();\n         }\n-        return originalEnvironmentObject.targets().stream().filter( t -> t.name().equals(targetName)).findFirst();\n+        return originalEnvironmentObject.targets().stream().filter(t -> t.name().equals(targetName)).findFirst();\n     }\n \n     private static StepDefinitionCore buildStepDefinitionCore(ScenarioContent.UnmarshalledStepDefinition dto, Environment originalEnvironmentObject) {\n@@ -78,6 +79,7 @@ private static StepDefinitionCore buildStepDefinitionCore(ScenarioContent.Unmars\n                 .map(s -> buildStepDefinitionCore(s, originalEnvironmentObject))\n                 .collect(Collectors.toList()),\n             dto.outputs(),\n+            dto.validations(),\n             originalEnvironmentObject.name());\n     }\n \n@@ -101,6 +103,7 @@ private static StepDefinitionRequestDto getStepDefinitionRequestFromStepDef(Step\n             definition.inputs,\n             steps,\n             definition.outputs,\n+            definition.validations,\n             definition.environment);\n     }\n "
  },
  {
    "sha": "da5e802797f1774dfa34be788cddbfc7c9520ee6",
    "filename": "cli/src/main/java/com/chutneytesting/cli/infrastruture/ScenarioContent.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/cli/src/main/java/com/chutneytesting/cli/infrastruture/ScenarioContent.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/cli/src/main/java/com/chutneytesting/cli/infrastruture/ScenarioContent.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/cli/src/main/java/com/chutneytesting/cli/infrastruture/ScenarioContent.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -33,6 +33,8 @@\n \n         Map<String, Object> outputs();\n \n+        Map<String, Object> validations();\n+\n     }\n \n     @Value.Immutable"
  },
  {
    "sha": "13a7b32184894cd8b446da0f6ab6f830c61cdb45",
    "filename": "cli/src/main/java/com/chutneytesting/cli/infrastruture/StepDefinitionCore.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/cli/src/main/java/com/chutneytesting/cli/infrastruture/StepDefinitionCore.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/cli/src/main/java/com/chutneytesting/cli/infrastruture/StepDefinitionCore.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/cli/src/main/java/com/chutneytesting/cli/infrastruture/StepDefinitionCore.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -43,6 +43,8 @@\n \n     public final Map<String, Object> outputs;\n \n+    public final Map<String, Object> validations;\n+\n     public final StepStrategyDefinitionCore strategy;\n \n     public StepDefinitionCore(GwtType gwtType,\n@@ -53,6 +55,7 @@ public StepDefinitionCore(GwtType gwtType,\n                               Map<String, Object> inputs,\n                               List<StepDefinitionCore> steps,\n                               Map<String, Object> outputs,\n+                              Map<String, Object> validations,\n                               String environment) {\n         this.gwtType = gwtType;\n         this.name = name;\n@@ -62,6 +65,7 @@ public StepDefinitionCore(GwtType gwtType,\n         this.inputs = inputs != null ? Collections.unmodifiableMap(inputs) : Collections.emptyMap();\n         this.steps = steps != null ? Collections.unmodifiableList(steps) : Collections.emptyList();\n         this.outputs = outputs != null ? Collections.unmodifiableMap(outputs) : Collections.emptyMap();\n+        this.validations = validations != null ? Collections.unmodifiableMap(validations) : Collections.emptyMap();\n         this.environment = environment;\n     }\n "
  },
  {
    "sha": "db42df3c524045580c52a25300eb74bcb8ad1ac7",
    "filename": "engine/src/main/java/com/chutneytesting/engine/api/execution/ExecutionRequestDto.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/api/execution/ExecutionRequestDto.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/api/execution/ExecutionRequestDto.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/main/java/com/chutneytesting/engine/api/execution/ExecutionRequestDto.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -40,6 +40,7 @@ public StepStrategyDefinitionRequestDto(@JsonProperty(\"type\") String type,\n         public final Map<String, Object> inputs;\n         public final List<StepDefinitionRequestDto> steps;\n         public final Map<String, Object> outputs;\n+        public final Map<String, Object> validations;\n         public final String environment;\n \n         public StepDefinitionRequestDto(\n@@ -50,6 +51,7 @@ public StepDefinitionRequestDto(\n             @JsonProperty(\"inputs\") Map<String, Object> inputs,\n             @JsonProperty(\"steps\") List<StepDefinitionRequestDto> steps,\n             @JsonProperty(\"outputs\") Map<String, Object> outputs,\n+            @JsonProperty(\"validations\") Map<String, Object> validations,\n             @JsonProperty(\"environment\")String environment) {\n \n             this.name = name;\n@@ -58,6 +60,7 @@ public StepDefinitionRequestDto(\n             this.inputs = inputs;\n             this.steps = steps;\n             this.outputs = outputs;\n+            this.validations = validations;\n             this.environment = environment;\n \n             this.definition = new StepDefinitionDto(\n@@ -68,6 +71,7 @@ public StepDefinitionRequestDto(\n                 inputs,\n                 steps != null ? steps.stream().map(r -> r.definition).collect(Collectors.toList()) : Collections.emptyList(),\n                 outputs,\n+                validations,\n                 environment\n             );\n         }"
  },
  {
    "sha": "17e6909897f27dd4f788301928f8ae9bbf0b131b",
    "filename": "engine/src/main/java/com/chutneytesting/engine/api/execution/StepDefinitionDto.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/api/execution/StepDefinitionDto.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/api/execution/StepDefinitionDto.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/main/java/com/chutneytesting/engine/api/execution/StepDefinitionDto.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -37,6 +37,8 @@\n \n     public final Map<String, Object> outputs;\n \n+    public final Map<String, Object> validations;\n+\n     public final String environment;\n \n     public final StepStrategyDefinitionDto strategy;\n@@ -48,6 +50,7 @@ public StepDefinitionDto(String name,\n                              Map<String, Object> inputs,\n                              List<StepDefinitionDto> steps,\n                              Map<String, Object> outputs,\n+                             Map<String, Object> validations,\n                              String environment) {\n         this.name = name;\n         this.target = target;\n@@ -56,6 +59,7 @@ public StepDefinitionDto(String name,\n         this.inputs = inputs != null ? Collections.unmodifiableMap(inputs) : Collections.emptyMap();\n         this.steps = steps != null ? Collections.unmodifiableList(steps) : Collections.emptyList();\n         this.outputs = outputs != null ? Collections.unmodifiableMap(outputs) : Collections.emptyMap();\n+        this.validations = validations != null ? Collections.unmodifiableMap(validations) : Collections.emptyMap();\n         this.environment = environment;\n     }\n "
  },
  {
    "sha": "ffbdd37cc83aaf908a1f2d0a8f7beab8d996dc72",
    "filename": "engine/src/main/java/com/chutneytesting/engine/api/execution/StepDefinitionMapper.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/api/execution/StepDefinitionMapper.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/api/execution/StepDefinitionMapper.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/main/java/com/chutneytesting/engine/api/execution/StepDefinitionMapper.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -37,6 +37,7 @@ static StepDefinition toStepDefinition(StepDefinitionDto dto) {\n             dto.inputs,\n             steps,\n             dto.outputs,\n+            dto.validations,\n             dto.environment\n         );\n     }"
  },
  {
    "sha": "6f17b1bff1b284a90133d45f3227e94eacb08a4a",
    "filename": "engine/src/main/java/com/chutneytesting/engine/domain/execution/StepDefinition.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/domain/execution/StepDefinition.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/domain/execution/StepDefinition.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/main/java/com/chutneytesting/engine/domain/execution/StepDefinition.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -34,6 +34,8 @@\n \n     public final Map<String, Object> outputs;\n \n+    public final Map<String, Object> validations;\n+\n     public final String environment;\n \n     /**\n@@ -54,6 +56,7 @@ public StepDefinition(String name,\n                           Map<String, Object> inputs,\n                           List<StepDefinition> steps,\n                           Map<String, Object> outputs,\n+                          Map<String, Object> validations,\n                           String environment) {\n         this.name = requireNonNull(name, \"The argument <name> must not be null\");\n         this.type = requireNonNull(type, \"The argument <type> must not be null\");\n@@ -64,6 +67,7 @@ public StepDefinition(String name,\n         this.inputs = inputs != null ? Collections.unmodifiableMap(inputs) : Collections.emptyMap();\n         this.steps = steps != null ? Collections.unmodifiableList(steps) : Collections.emptyList();\n         this.outputs = outputs != null ? Collections.unmodifiableMap(outputs) : Collections.emptyMap();\n+        this.validations = validations != null ? Collections.unmodifiableMap(validations) : Collections.emptyMap();\n         this.environment = environment;\n     }\n \n@@ -83,6 +87,7 @@ public String toString() {\n             \", inputs=\" + inputs +\n             \", steps=\" + steps +\n             \", outputs=\" + outputs +\n+            \", validations=\" + validations +\n             \", target=\" + target +\n             \", strategy=\" + strategy +\n             '}';"
  },
  {
    "sha": "4bae95da23edde04b2d1cdfd18c3a509af9753a5",
    "filename": "engine/src/main/java/com/chutneytesting/engine/domain/execution/engine/FinallyActionMapper.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/domain/execution/engine/FinallyActionMapper.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/domain/execution/engine/FinallyActionMapper.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/main/java/com/chutneytesting/engine/domain/execution/engine/FinallyActionMapper.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -16,6 +16,7 @@ StepDefinition toStepDefinition(FinallyAction finallyAction) {\n             finallyAction.inputs(),\n             null,\n             null,\n+            null,\n             null\n         );\n     }"
  },
  {
    "sha": "7f549038476df5a65e20691283c51c2cb8eefd63",
    "filename": "engine/src/main/java/com/chutneytesting/engine/domain/execution/engine/step/Step.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/domain/execution/engine/step/Step.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/domain/execution/engine/step/Step.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/main/java/com/chutneytesting/engine/domain/execution/engine/step/Step.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -89,6 +89,7 @@ public Status execute(ScenarioExecution scenarioExecution, ScenarioContext scena\n                 .exec(() -> new StepContextImpl(evaluatedInputs, scenarioContext))\n                 .ifSuccess(stepContextExecuted -> {\n                     executor.execute(scenarioExecution, stepContextExecuted, target, this);\n+                    executeStepValidations(stepContextExecuted);\n                     copyStepResultsToScenarioContext(stepContextExecuted, scenarioContext);\n                     this.stepContext = (StepContextImpl) stepContextExecuted.copy();\n                 })\n@@ -240,6 +241,23 @@ private void copyStepResultsToScenarioContext(StepContextImpl stepContext, Scena\n                 + \" - Exception: \" + e.getClass() + \" with message: \\\"\" + e.getMessage() + \"\\\"\"));\n     }\n \n+    private void executeStepValidations(StepContextImpl stepContext) {\n+        Map<String, Object> contextAndStepResults = stepContext.allEvaluatedVariables();\n+        Try.exec(() -> {\n+            Map<String, Object> evaluatedValidation = dataEvaluator.evaluateNamedDataWithContextVariables(definition.validations, contextAndStepResults);\n+            evaluatedValidation.forEach((k, v) -> {\n+                if (!(boolean) v) {\n+                    failure(\"Validation [\" + k + \"] : KO (\" + definition.validations.get(k).toString() + \")\");\n+                } else {\n+                    success(\"Validation [\" + k + \"] : OK\");\n+                }\n+            });\n+            return null;\n+        })\n+            .ifFailed(e -> failure(\"Step validation failed.\"\n+                + \" - Exception: \" + e.getClass() + \" with message: \\\"\" + e.getMessage() + \"\\\"\"));\n+    }\n+\n     public static class StepContextImpl implements StepContext {\n \n         private final ScenarioContext scenarioContext;"
  },
  {
    "sha": "c9357f457be9bf3f451909b75e6e4233c74ecf5b",
    "filename": "engine/src/main/java/com/chutneytesting/engine/infrastructure/delegation/ExecutionRequestMapper.java",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/infrastructure/delegation/ExecutionRequestMapper.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/main/java/com/chutneytesting/engine/infrastructure/delegation/ExecutionRequestMapper.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/main/java/com/chutneytesting/engine/infrastructure/delegation/ExecutionRequestMapper.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -38,17 +38,18 @@ private static StepDefinitionRequestDto getStepDefinitionRequestFromStepDef(Step\n             definition.inputs,\n             steps,\n             definition.outputs,\n+            definition.validations,\n             definition.environment);\n     }\n \n     private static TargetExecutionDto extractTarget(StepDefinition definition) {\n         return definition.getTarget().map(t -> (TargetImpl) t).map(t -> new TargetExecutionDto(\n-                t.name(),\n-                t.url,\n-                t.properties,\n-                from(t.security),\n-                t.agents\n-            ))\n+            t.name(),\n+            t.url,\n+            t.properties,\n+            from(t.security),\n+            t.agents\n+        ))\n             .orElse(null);\n     }\n "
  },
  {
    "sha": "dd0dd3c623d7a9c9d007708f962def4d296a2a77",
    "filename": "engine/src/test/java/com/chutneytesting/ExecutionConfigurationTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 7,
    "changes": 18,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/ExecutionConfigurationTest.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/ExecutionConfigurationTest.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/test/java/com/chutneytesting/ExecutionConfigurationTest.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -129,6 +129,7 @@ public void should_catch_exception_in_fault_barrier_engine() {\n             Collections.emptyMap(),\n             Collections.emptyList(),\n             Collections.emptyMap(),\n+            Collections.emptyMap(),\n             \"\"\n         );\n         ExecutionRequestDto requestDto = new ExecutionRequestDto(stepDefinition);\n@@ -143,15 +144,16 @@ public void should_catch_exception_in_fault_barrier_engine() {\n \n     private StepDefinitionRequestDto createSucessStep() {\n         return new StepDefinitionRequestDto(\n-                  \"scenario name\",\n-                  null,\n+            \"scenario name\",\n+            null,\n             null,\n-                  \"success\",\n-                  Collections.emptyMap(),\n-                  Collections.emptyList(),\n-                  Collections.emptyMap(),\n+            \"success\",\n+            Collections.emptyMap(),\n+            Collections.emptyList(),\n+            Collections.emptyMap(),\n+            Collections.emptyMap(),\n             \"\"\n-              );\n+        );\n     }\n \n     private StepDefinitionRequestDto createScenarioForPause() {\n@@ -167,6 +169,7 @@ private StepDefinitionRequestDto createScenarioForPause() {\n             Collections.emptyMap(),\n             steps,\n             Collections.emptyMap(),\n+            Collections.emptyMap(),\n             \"\"\n         );\n     }\n@@ -180,6 +183,7 @@ private StepDefinitionRequestDto createSleepsStep(String name) {\n             Maps.newHashMap(\"duration\", \"500 ms\"),\n             null,\n             Collections.emptyMap(),\n+            Collections.emptyMap(),\n             \"\"\n         );\n     }"
  },
  {
    "sha": "8ff9f2ab3286fa7283e0286bd378a80b8b5f4a16",
    "filename": "engine/src/test/java/com/chutneytesting/engine/domain/execution/engine/DefaultExecutionEngineTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/execution/engine/DefaultExecutionEngineTest.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/execution/engine/DefaultExecutionEngineTest.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/test/java/com/chutneytesting/engine/domain/execution/engine/DefaultExecutionEngineTest.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -47,7 +47,7 @@ public void runtime_exception_should_be_catch_by_fault_barrier() {\n         DefaultExecutionEngine engine = new DefaultExecutionEngine(dataEvaluator, stepExecutionStrategies, delegationService, reporter);\n         StrategyProperties strategyProperties = new StrategyProperties();\n         StepStrategyDefinition strategyDefinition = new StepStrategyDefinition(\"retry\", strategyProperties);\n-        StepDefinition stepDefinition = new StepDefinition(\"name\", null, \"type\", strategyDefinition, null, null, null, fakeEnvironment);\n+        StepDefinition stepDefinition = new StepDefinition(\"name\", null, \"type\", strategyDefinition, null, null, null, null, fakeEnvironment);\n \n         //When\n         Long executionId = engine.execute(stepDefinition, ScenarioExecution.createScenarioExecution());\n@@ -71,7 +71,7 @@ public void should_execute_finally_actions_on_execution_end() {\n \n         StrategyProperties strategyProperties = new StrategyProperties();\n         StepStrategyDefinition strategyDefinition = new StepStrategyDefinition(\"retry\", strategyProperties);\n-        StepDefinition stepDefinition = new StepDefinition(\"name\", null, \"type\", strategyDefinition, null, null, null, fakeEnvironment);\n+        StepDefinition stepDefinition = new StepDefinition(\"name\", null, \"type\", strategyDefinition, null, null, null, null, fakeEnvironment);\n \n         ScenarioExecution mockScenarioExecution = mock(ScenarioExecution.class);\n \n@@ -95,7 +95,7 @@ public void should_execute_finally_actions_on_scenario_stop() {\n \n         StrategyProperties strategyProperties = new StrategyProperties();\n         StepStrategyDefinition strategyDefinition = new StepStrategyDefinition(\"retry\", strategyProperties);\n-        StepDefinition stepDefinition = new StepDefinition(\"name\", null, \"type\", strategyDefinition, null, null, null, fakeEnvironment);\n+        StepDefinition stepDefinition = new StepDefinition(\"name\", null, \"type\", strategyDefinition, null, null, null, null, fakeEnvironment);\n \n         ScenarioExecution scenarioExecution = ScenarioExecution.createScenarioExecution();\n         scenarioExecution.registerFinallyAction(FinallyAction.Builder.forAction(\"final\").build());\n@@ -124,7 +124,7 @@ public void should_execute_finally_actions_on_runtime_exception() {\n         DefaultExecutionEngine engineUnderTest = new DefaultExecutionEngine(dataEvaluator, stepExecutionStrategies, delegationService, reporter);\n         StrategyProperties strategyProperties = new StrategyProperties();\n         StepStrategyDefinition strategyDefinition = new StepStrategyDefinition(\"retry\", strategyProperties);\n-        StepDefinition stepDefinition = new StepDefinition(\"name\", null, \"type\", strategyDefinition, null, null, null, fakeEnvironment);\n+        StepDefinition stepDefinition = new StepDefinition(\"name\", null, \"type\", strategyDefinition, null, null, null, null, fakeEnvironment);\n \n         ScenarioExecution mockScenarioExecution = mock(ScenarioExecution.class);\n "
  },
  {
    "sha": "d4ad4eebe5c9973647a2ffc9c47cfb98583191ae",
    "filename": "engine/src/test/java/com/chutneytesting/engine/domain/execution/engine/step/StepTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/execution/engine/step/StepTest.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/execution/engine/step/StepTest.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/test/java/com/chutneytesting/engine/domain/execution/engine/step/StepTest.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -82,7 +82,7 @@ public void should_have_output_of_step_store_in_step_result() {\n         outputs.put(\"aValue\", \"42\");\n         outputs.put(\"anotherValue\", \"43\");\n \n-        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, outputs,environment);\n+        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, outputs, null, environment);\n         Step step = new Step(dataEvaluator, fakeStepDefinition, Optional.empty(), stepExecutor, Lists.emptyList());\n         ScenarioContextImpl scenarioContext = new ScenarioContextImpl();\n \n@@ -117,7 +117,7 @@ public void values_already_set_in_scenario_context_can_be_updated_and_override_b\n         outputs.put(\"aValue\", \"${#aValueToEvaluate}\");\n         outputs.put(\"anotherValue\", \"${#anotherValueToEvaluate}\");\n \n-        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, outputs, environment);\n+        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, outputs, null, environment);\n         Step step = new Step(dataEvaluator, fakeStepDefinition, Optional.empty(), stepExecutor, Lists.emptyList());\n         ScenarioContextImpl scenarioContext = new ScenarioContextImpl();\n \n@@ -158,7 +158,7 @@ public void context_is_update_with_values_from_a_remote_execution() {\n         outputs.put(\"anAliasForReuse\", \"${#aResultKeySetByATask}\");\n         outputs.put(\"anotherAliasForReuse\", \"${#anotherResultKeySetByATask}\");\n \n-        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, outputs, environment);\n+        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, outputs, null, environment);\n         Step step = new Step(dataEvaluator, fakeStepDefinition, Optional.empty(), fakeRemoteStepExecutor, Lists.emptyList());\n         ScenarioContextImpl scenarioContext = new ScenarioContextImpl();\n \n@@ -184,7 +184,7 @@ public void target_and_environment_are_set_in_scenario_context_in_order_to_be_us\n         inputs.put(\"targetName\", \"${#target.name}\");\n         inputs.put(\"currentEnvironment\", \"${#environment}\");\n \n-        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", this.fakeTarget, \"taskType\", null, inputs, null, null, environment);\n+        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", this.fakeTarget, \"taskType\", null, inputs, null, null, null, environment);\n         Step step = new Step(dataEvaluator, fakeStepDefinition, Optional.of(fakeTarget), mock(StepExecutor.class), Lists.emptyList());\n \n         // When\n@@ -237,7 +237,7 @@ public void should_manage_execution_time_watch() {\n \n     @Test\n     public void should_not_compute_substeps_status_if_current_status_is_failure() {\n-        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, null, environment);\n+        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, null, null, environment);\n         Step step = new Step(dataEvaluator, fakeStepDefinition, Optional.empty(), mock(StepExecutor.class), Lists.list(mock(Step.class), mock(Step.class)));\n         step.failure(\"...\");\n         assertThat(step.status()).isEqualTo(Status.FAILURE);\n@@ -270,7 +270,7 @@ private Status executeWithRemote(Status remoteStatus) {\n     }\n \n     private Step buildEmptyStep(StepExecutor stepExecutor) {\n-        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, null, environment);\n+        StepDefinition fakeStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, null, null, null, environment);\n         return new Step(dataEvaluator, fakeStepDefinition, Optional.empty(), stepExecutor, Lists.emptyList());\n     }\n "
  },
  {
    "sha": "52672be093eaa6af3a76ee1d024336a381e16f1d",
    "filename": "engine/src/test/java/com/chutneytesting/engine/domain/execution/strategies/DataSetIterationsStrategyTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/execution/strategies/DataSetIterationsStrategyTest.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/execution/strategies/DataSetIterationsStrategyTest.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/test/java/com/chutneytesting/engine/domain/execution/strategies/DataSetIterationsStrategyTest.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -147,7 +147,7 @@ private Step buildStep(String name, String type, StepExecutionStrategy strategy,\n     }\n \n     private StepDefinition buildStepDef(String name, String type, StepExecutionStrategy strategy, StrategyProperties strategyProperties) {\n-        return new StepDefinition(name, null, type, new StepStrategyDefinition(strategy.getType(), strategyProperties), null, null, null, \"\");\n+        return new StepDefinition(name, null, type, new StepStrategyDefinition(strategy.getType(), strategyProperties), null, null, null, null, \"\");\n     }\n \n     private static void visit(Step step, Consumer<Step> action) {"
  },
  {
    "sha": "8e9a699ce3bf4a3b4d500aa97739c970020456f3",
    "filename": "engine/src/test/java/com/chutneytesting/engine/domain/execution/strategies/DefaultStepExecutionStrategyTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/execution/strategies/DefaultStepExecutionStrategyTest.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/execution/strategies/DefaultStepExecutionStrategyTest.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/test/java/com/chutneytesting/engine/domain/execution/strategies/DefaultStepExecutionStrategyTest.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -124,7 +124,7 @@ private Step buildStep(String name, String type, Step... subSteps) {\n     }\n \n     private StepDefinition buildStepDef(String name, String type) {\n-        return new StepDefinition(name, null, type, null, null, null, null,\"\");\n+        return new StepDefinition(name, null, type, null, null, null, null, null, \"\");\n     }\n \n     private static void visit(Step step, Consumer<Step> action) {"
  },
  {
    "sha": "63b2d9bd4e6f6d003f1cb0277f916e5ddf4ff533",
    "filename": "engine/src/test/java/com/chutneytesting/engine/domain/report/ReporterTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/report/ReporterTest.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/domain/report/ReporterTest.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/test/java/com/chutneytesting/engine/domain/report/ReporterTest.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -140,16 +140,16 @@ public void should_return_empty_observable_for_unknown_execution_id() {\n \n     private Step buildFakeScenario() {\n         List<StepDefinition> subSubSteps = new ArrayList<>();\n-        StepDefinition subSubStepDef1 = new StepDefinition(\"fakeStep1\", fakeTarget, \"taskType\", null, null, null, null, environment);\n-        StepDefinition subSubStepDef2 = new StepDefinition(\"fakeStep2\", fakeTarget, \"taskType\", null, null, null, null, environment);\n+        StepDefinition subSubStepDef1 = new StepDefinition(\"fakeStep1\", fakeTarget, \"taskType\", null, null, null, null, null, environment);\n+        StepDefinition subSubStepDef2 = new StepDefinition(\"fakeStep2\", fakeTarget, \"taskType\", null, null, null, null, null, environment);\n         subSubSteps.add(subSubStepDef1);\n         subSubSteps.add(subSubStepDef2);\n-        StepDefinition subStepDef1 = new StepDefinition(\"fakeParentStep\", fakeTarget, \"taskType\", null, null, subSubSteps, null, environment);\n-        StepDefinition subStepDef2 = new StepDefinition(\"fakeParentEmptyStep\", fakeTarget, \"taskType\", null, null, null, null, environment);\n+        StepDefinition subStepDef1 = new StepDefinition(\"fakeParentStep\", fakeTarget, \"taskType\", null, null, subSubSteps, null, null, environment);\n+        StepDefinition subStepDef2 = new StepDefinition(\"fakeParentEmptyStep\", fakeTarget, \"taskType\", null, null, null, null, null, environment);\n         List<StepDefinition> steps = new ArrayList<>();\n         steps.add(subStepDef1);\n         steps.add(subStepDef2);\n-        StepDefinition rootStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, steps, null, environment);\n+        StepDefinition rootStepDefinition = new StepDefinition(\"fakeScenario\", fakeTarget, \"taskType\", null, null, steps, null, null, environment);\n \n         return buildStep(rootStepDefinition);\n     }"
  },
  {
    "sha": "b46d92e32bea1d76525ad22c73a79b30595aa16c",
    "filename": "engine/src/test/java/com/chutneytesting/engine/infrastructure/delegation/HttpClientTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/infrastructure/delegation/HttpClientTest.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/engine/src/test/java/com/chutneytesting/engine/infrastructure/delegation/HttpClientTest.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/engine/src/test/java/com/chutneytesting/engine/infrastructure/delegation/HttpClientTest.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -124,6 +124,7 @@ private StepDefinition createFakeStepDefinition() {\n             new HashMap<>(),\n             Collections.emptyList(),\n             new HashMap<>(),\n+            new HashMap<>(),\n             \"ENV\");\n     }\n "
  },
  {
    "sha": "a0aac9f37be45fa882ae2ea7a5626b776e4ea28e",
    "filename": "glacio-adapter/src/main/java/com/chutneytesting/glacio/api/GlacioAdapter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/glacio-adapter/src/main/java/com/chutneytesting/glacio/api/GlacioAdapter.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/glacio-adapter/src/main/java/com/chutneytesting/glacio/api/GlacioAdapter.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/glacio-adapter/src/main/java/com/chutneytesting/glacio/api/GlacioAdapter.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -62,7 +62,7 @@ private StepDefinitionDto toStepDefinitionDto(String featureName, Locale lang, P\n     }\n \n     private StepDefinitionDto buildRootStep(List<StepDefinitionDto> subSteps, ParsingContext context, String text) {\n-        return new StepDefinitionDto(text, null, \"\", null, emptyMap(), subSteps, emptyMap(), context.values.get(ENVIRONMENT));\n+        return new StepDefinitionDto(text, null, \"\", null, emptyMap(), subSteps, emptyMap(), emptyMap(), context.values.get(ENVIRONMENT));\n     }\n \n     private Feature toGlacioModel(String text) {"
  },
  {
    "sha": "b2893d9fdf36500b724390c10b48e40e34abcbf3",
    "filename": "glacio-adapter/src/main/java/com/chutneytesting/glacio/api/StepDefinitionMapper.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/glacio-adapter/src/main/java/com/chutneytesting/glacio/api/StepDefinitionMapper.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/glacio-adapter/src/main/java/com/chutneytesting/glacio/api/StepDefinitionMapper.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/glacio-adapter/src/main/java/com/chutneytesting/glacio/api/StepDefinitionMapper.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -42,6 +42,7 @@ static StepDefinitionDto toStepDefinitionDto(StepDefinition stepDefinition) {\n             stepDefinition.inputs,\n             steps,\n             stepDefinition.outputs,\n+            stepDefinition.validations,\n             stepDefinition.environment\n         );\n     }\n@@ -70,7 +71,7 @@ private static SecurityInfoExecutionDto toDto(SecurityInfo securityInfo) {\n \n     private static CredentialExecutionDto toDto(Optional<Credential> credential) {\n         return Optional.ofNullable(credential)\n-                .map(c -> c.map(value -> new CredentialExecutionDto(value.username(), value.password()))\n+            .map(c -> c.map(value -> new CredentialExecutionDto(value.username(), value.password()))\n                 .orElse(null))\n             .orElse(null);\n     }"
  },
  {
    "sha": "4bad009f8ecbc8c1697be0392d2cd77a9268e171",
    "filename": "server/src/main/java/com/chutneytesting/design/api/scenario/OldFormatAdapter.java",
    "status": "modified",
    "additions": 40,
    "deletions": 21,
    "changes": 61,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/api/scenario/OldFormatAdapter.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/api/scenario/OldFormatAdapter.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/main/java/com/chutneytesting/design/api/scenario/OldFormatAdapter.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -73,15 +73,19 @@ public GwtScenario toGwt(String title, String description) {\n         static class StepV0 {\n             static StepV0 NONE = new StepV0();\n \n-            @JsonProperty(access = WRITE_ONLY) String name = \"\";\n-            @JsonProperty(access = WRITE_ONLY) List<StepV0> steps = Collections.emptyList();\n-            @JsonProperty(access = WRITE_ONLY) StepStrategyV0 strategy = StepStrategyV0.NONE;\n+            @JsonProperty(access = WRITE_ONLY)\n+            String name = \"\";\n+            @JsonProperty(access = WRITE_ONLY)\n+            List<StepV0> steps = emptyList();\n+            @JsonProperty(access = WRITE_ONLY)\n+            StepStrategyV0 strategy = StepStrategyV0.NONE;\n \n             // Task\n             public String type;\n             public String target;\n             public Map<String, Object> inputs;\n             public Map<String, Object> outputs;\n+            public Map<String, Object> validations;\n \n             GwtStep toGwt() {\n                 GwtStep.GwtStepBuilder builder = GwtStep.builder()\n@@ -91,14 +95,14 @@ GwtStep toGwt() {\n                     );\n \n                 if (type != null && !type.isEmpty()) {\n-                    builder.withImplementation(new GwtStepImplementation(type, target, inputs, outputs, \"\"));\n+                    builder.withImplementation(new GwtStepImplementation(type, target, inputs, outputs, validations, \"\"));\n                 }\n \n                 if (!strategy.equals(StepStrategyV0.NONE)) {\n                     builder.withStrategy(new Strategy(strategy.type, strategy.parameters));\n                 }\n \n-                return  builder.build();\n+                return builder.build();\n             }\n         }\n \n@@ -116,7 +120,7 @@ GwtStep toGwt() {\n         StepV1 rootStep = StepV1.NONE;\n \n         public GwtScenario toGwt(String title, String description) {\n-            StepV1 lastWhen = Streams.findLast(rootStep.steps.stream(), s -> s.gwtType != null  && s.gwtType.equals(WHEN)).orElse(StepV1.NONE);\n+            StepV1 lastWhen = Streams.findLast(rootStep.steps.stream(), s -> s.gwtType != null && s.gwtType.equals(WHEN)).orElse(StepV1.NONE);\n \n             return GwtScenario.builder()\n                 .withTitle(title)\n@@ -142,16 +146,21 @@ public GwtScenario toGwt(String title, String description) {\n \n             static StepV1 NONE = new StepV1();\n \n-            @JsonProperty(access = WRITE_ONLY, required = true) GwtType gwtType;\n-            @JsonProperty(access = WRITE_ONLY) String name = \"\";\n-            @JsonProperty(access = WRITE_ONLY) List<ScenarioV1.StepV1> steps = Collections.emptyList();\n-            @JsonProperty(access = WRITE_ONLY) StepStrategyV1 strategy = StepStrategyV1.NONE;\n+            @JsonProperty(access = WRITE_ONLY, required = true)\n+            GwtType gwtType;\n+            @JsonProperty(access = WRITE_ONLY)\n+            String name = \"\";\n+            @JsonProperty(access = WRITE_ONLY)\n+            List<ScenarioV1.StepV1> steps = emptyList();\n+            @JsonProperty(access = WRITE_ONLY)\n+            StepStrategyV1 strategy = StepStrategyV1.NONE;\n \n             // Task\n             public String type;\n             public String target;\n             public Map<String, Object> inputs;\n             public Map<String, Object> outputs;\n+            public Map<String, Object> validations;\n \n             GwtStep toGwt() {\n                 GwtStep.GwtStepBuilder builder = GwtStep.builder()\n@@ -161,7 +170,7 @@ GwtStep toGwt() {\n                     );\n \n                 if (type != null && !type.isEmpty()) {\n-                    builder.withImplementation(new GwtStepImplementation(type, target, inputs, outputs, \"\"));\n+                    builder.withImplementation(new GwtStepImplementation(type, target, inputs, outputs, validations, \"\"));\n                 }\n \n                 if (!strategy.equals(StepStrategyV1.NONE)) {\n@@ -181,17 +190,26 @@ GwtStep toGwt() {\n     }\n \n     static class ScenarioV2_0 implements Convertible {\n-        @JsonProperty(access = WRITE_ONLY) String title = \"\";\n-        @JsonProperty(access = WRITE_ONLY) String description = \"\";\n-        @JsonProperty(access = WRITE_ONLY) List<GwtStep2_0> givens = emptyList();\n-        @JsonProperty(access = WRITE_ONLY) GwtStep2_0 when;\n-        @JsonProperty(access = WRITE_ONLY) List<GwtStep2_0> thens = emptyList();\n+        @JsonProperty(access = WRITE_ONLY)\n+        String title = \"\";\n+        @JsonProperty(access = WRITE_ONLY)\n+        String description = \"\";\n+        @JsonProperty(access = WRITE_ONLY)\n+        List<GwtStep2_0> givens = emptyList();\n+        @JsonProperty(access = WRITE_ONLY)\n+        GwtStep2_0 when;\n+        @JsonProperty(access = WRITE_ONLY)\n+        List<GwtStep2_0> thens = emptyList();\n \n         static class GwtStep2_0 {\n-            @JsonProperty(access = WRITE_ONLY) String description = \"\";\n-            @JsonProperty(access = WRITE_ONLY) List<GwtStep2_0> subSteps = emptyList();\n-            @JsonProperty(access = WRITE_ONLY) Optional<GwtStepImplementationV2_0> implementation = empty();\n-            @JsonProperty(access = WRITE_ONLY) Optional<Strategy> strategy = empty();\n+            @JsonProperty(access = WRITE_ONLY)\n+            String description = \"\";\n+            @JsonProperty(access = WRITE_ONLY)\n+            List<GwtStep2_0> subSteps = emptyList();\n+            @JsonProperty(access = WRITE_ONLY)\n+            Optional<GwtStepImplementationV2_0> implementation = empty();\n+            @JsonProperty(access = WRITE_ONLY)\n+            Optional<Strategy> strategy = empty();\n \n             GwtStep toGwt() {\n                 GwtStep.GwtStepBuilder builder = GwtStep.builder()\n@@ -204,7 +222,8 @@ GwtStep toGwt() {\n         }\n \n         static class GwtStepImplementationV2_0 {\n-            @JsonProperty(access = WRITE_ONLY) String task = \"\";\n+            @JsonProperty(access = WRITE_ONLY)\n+            String task = \"\";\n \n             GwtStepImplementation toGwt() {\n                 try {"
  },
  {
    "sha": "439e6310821ee6800a32cd1e53fb84f065a1bd10",
    "filename": "server/src/main/java/com/chutneytesting/design/api/scenario/v2_0/dto/GwtStepImplementationDto.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/api/scenario/v2_0/dto/GwtStepImplementationDto.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/api/scenario/v2_0/dto/GwtStepImplementationDto.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/main/java/com/chutneytesting/design/api/scenario/v2_0/dto/GwtStepImplementationDto.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -37,4 +37,6 @@ default String xRef() {\n \n     Map<String, Object> outputs();\n \n+    Map<String, Object> validations();\n+\n }"
  },
  {
    "sha": "6963901dc580103d7fc3e7e3a14c53983210c1c4",
    "filename": "server/src/main/java/com/chutneytesting/design/api/scenario/v2_0/mapper/GwtScenarioMapper.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/api/scenario/v2_0/mapper/GwtScenarioMapper.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/api/scenario/v2_0/mapper/GwtScenarioMapper.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/main/java/com/chutneytesting/design/api/scenario/v2_0/mapper/GwtScenarioMapper.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -61,12 +61,14 @@\n     }\n \n     private static class GwtStepBuilderMixin {\n-        @JsonProperty(\"x-$ref\") String xRef;\n+        @JsonProperty(\"x-$ref\")\n+        String xRef;\n     }\n \n     private static class GwtStepImplementationMixin {\n \n-        @JsonProperty(\"x-$ref\") String xRef;\n+        @JsonProperty(\"x-$ref\")\n+        String xRef;\n \n         @JsonCreator\n         public GwtStepImplementationMixin(@JsonProperty(\"type\") String type,\n@@ -112,7 +114,7 @@ private static GwtStep fromDto(GwtStepDto dto) {\n     // DTO -> Implementation\n     private static GwtStepImplementation fromDto(GwtStepImplementationDto dto) {\n         if (dto.task().isEmpty()) {\n-            return new GwtStepImplementation(dto.type(), dto.target(), dto.inputs(), dto.outputs(), dto.xRef());\n+            return new GwtStepImplementation(dto.type(), dto.target(), dto.inputs(), dto.outputs(), dto.validations(), dto.xRef());\n         } else {\n             try {\n                 return mapper.readValue(readHjson(dto.task()).toString(), GwtStepImplementation.class);"
  },
  {
    "sha": "04c96aeec474bd257c171eaba1cf6762e54af83f",
    "filename": "server/src/main/java/com/chutneytesting/design/domain/scenario/gwt/GwtStepImplementation.java",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/domain/scenario/gwt/GwtStepImplementation.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/domain/scenario/gwt/GwtStepImplementation.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/main/java/com/chutneytesting/design/domain/scenario/gwt/GwtStepImplementation.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -17,13 +17,15 @@\n     public final String target;\n     public final Map<String, Object> inputs;\n     public final Map<String, Object> outputs;\n+    public final Map<String, Object> validations;\n     public final String xRef;\n \n-    public GwtStepImplementation(String type, String target, Map<String, Object> inputs, Map<String, Object> outputs, String xRef) {\n+    public GwtStepImplementation(String type, String target, Map<String, Object> inputs, Map<String, Object> outputs, Map<String, Object> validations, String xRef) {\n         this.type = ofNullable(type).orElse(\"\");\n         this.target = ofNullable(target).orElse(\"\");\n         this.inputs = ofNullable(inputs).map(Collections::unmodifiableMap).orElse(emptyMap());\n         this.outputs = ofNullable(outputs).map(Collections::unmodifiableMap).orElse(emptyMap());\n+        this.validations = ofNullable(validations).map(Collections::unmodifiableMap).orElse(emptyMap());\n         this.xRef = ofNullable(xRef).orElse(\"\");\n     }\n \n@@ -35,6 +37,7 @@ public String toString() {\n             \", x-$ref='\" + xRef + '\\'' +\n             \", inputs=\" + inputs +\n             \", outputs=\" + outputs +\n+            \", validations=\" + validations +\n             '}';\n     }\n \n@@ -46,12 +49,13 @@ public boolean equals(Object o) {\n         return type.equals(that.type) &&\n             target.equals(that.target) &&\n             inputs.equals(that.inputs) &&\n-            outputs.equals(that.outputs);\n+            outputs.equals(that.outputs) &&\n+            validations.equals(that.validations);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(type, target, inputs, outputs);\n+        return Objects.hash(type, target, inputs, outputs, validations);\n     }\n \n }"
  },
  {
    "sha": "53a1c2fa3636c1667cf649a1f0967b57fd73ddd6",
    "filename": "server/src/main/java/com/chutneytesting/design/infra/storage/scenario/compose/RawImplementationMapper.java",
    "status": "modified",
    "additions": 14,
    "deletions": 1,
    "changes": 15,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/infra/storage/scenario/compose/RawImplementationMapper.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/design/infra/storage/scenario/compose/RawImplementationMapper.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/main/java/com/chutneytesting/design/infra/storage/scenario/compose/RawImplementationMapper.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -36,7 +36,8 @@ public StepImplementation deserialize(String rawImplementation) {\n             type(implementation),\n             target(implementation),\n             inputs(implementation),\n-            outputs(implementation)\n+            outputs(implementation),\n+            validations(implementation)\n         );\n     }\n \n@@ -96,6 +97,18 @@ private String target(JsonNode implementation) {\n         return inputs;\n     }\n \n+    private Map<String, Object> validations(JsonNode implementation) {\n+        Map<String, Object> validations = new LinkedHashMap<>();\n+        if (implementation.hasNonNull(\"validations\")) {\n+            final JsonNode validationsNode = implementation.get(\"validations\");\n+            validationsNode.forEach(in -> {\n+                String name = in.get(\"key\").asText();\n+                validations.put(name, in.get(\"value\").asText());\n+            });\n+        }\n+        return validations;\n+    }\n+\n     private Object transformSimpleInputValue(JsonNode in) {\n         String value = in.get(\"value\").asText();\n         return !value.isEmpty() ? value : null;"
  },
  {
    "sha": "066f846f3cf06afd369569741b7df80e5cb91095",
    "filename": "server/src/main/java/com/chutneytesting/execution/domain/compiler/ComposedTestCaseIterationsPreProcessor.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/execution/domain/compiler/ComposedTestCaseIterationsPreProcessor.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/execution/domain/compiler/ComposedTestCaseIterationsPreProcessor.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/main/java/com/chutneytesting/execution/domain/compiler/ComposedTestCaseIterationsPreProcessor.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -313,7 +313,8 @@ private StepImplementation indexIterationIO(StepImplementation si, AtomicInteger\n             si.type,\n             si.target,\n             indexInputs(si.inputs, index, iterationOutputs),\n-            indexOutputs(si.outputs, index, iterationOutputs)\n+            indexOutputs(si.outputs, index, iterationOutputs),\n+            si.validations\n         );\n     }\n \n@@ -330,7 +331,7 @@ private void updateIndexedOutputsUsingDatasetValues(Map<String, Integer> iterati\n         List<ExecutableComposedStep> steps = new ArrayList<>(composedStep.steps);\n         Collections.reverse(steps);\n         steps.forEach(executableComposedStep ->\n-            updateIndexedOutputsUsingDatasetValues(iterationOutputs,executableComposedStep)\n+            updateIndexedOutputsUsingDatasetValues(iterationOutputs, executableComposedStep)\n         );\n \n         composedStep.dataset.entrySet().stream()"
  },
  {
    "sha": "e8392920baa5721ab78c561fb199fc1d39811d19",
    "filename": "server/src/main/java/com/chutneytesting/execution/domain/scenario/composed/StepImplementation.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/execution/domain/scenario/composed/StepImplementation.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/execution/domain/scenario/composed/StepImplementation.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/main/java/com/chutneytesting/execution/domain/scenario/composed/StepImplementation.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -13,16 +13,18 @@\n     public final String target;\n     public final Map<String, Object> inputs;\n     public final Map<String, Object> outputs;\n+    public final Map<String, Object> validations;\n \n     public StepImplementation() {\n-        this(null, null, null, null);\n+        this(null, null, null, null, null);\n     }\n \n-    public StepImplementation(String type, String target, Map<String, Object> inputs, Map<String, Object> outputs) {\n+    public StepImplementation(String type, String target, Map<String, Object> inputs, Map<String, Object> outputs, Map<String, Object> validations) {\n         this.type = ofNullable(type).orElse(\"\");\n         this.target = ofNullable(target).orElse(\"\");\n         this.inputs = ofNullable(inputs).map(Collections::unmodifiableMap).orElse(emptyMap());\n         this.outputs = ofNullable(outputs).map(Collections::unmodifiableMap).orElse(emptyMap());\n+        this.validations = ofNullable(validations).map(Collections::unmodifiableMap).orElse(emptyMap());\n     }\n \n     @Override\n@@ -33,12 +35,13 @@ public boolean equals(Object o) {\n         return type.equals(that.type) &&\n             target.equals(that.target) &&\n             inputs.equals(that.inputs) &&\n-            outputs.equals(that.outputs);\n+            outputs.equals(that.outputs) &&\n+            validations.equals(that.validations);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(type, target, inputs, outputs);\n+        return Objects.hash(type, target, inputs, outputs, validations);\n     }\n \n     @Override\n@@ -48,6 +51,7 @@ public String toString() {\n             \", target='\" + target + '\\'' +\n             \", inputs=\" + inputs +\n             \", outputs=\" + outputs +\n+            \", validations=\" + validations +\n             '}';\n     }\n }"
  },
  {
    "sha": "b5ad7f58fdc6312b86e2ff4b087f25ecda69363f",
    "filename": "server/src/main/java/com/chutneytesting/execution/infra/execution/ExecutionRequestMapper.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/execution/infra/execution/ExecutionRequestMapper.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/execution/infra/execution/ExecutionRequestMapper.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/main/java/com/chutneytesting/execution/infra/execution/ExecutionRequestMapper.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -95,6 +95,7 @@ private StepDefinitionRequestDto getStepDefinitionRequestFromStepDef(Unmarshalle\n             definition.inputs,\n             steps,\n             definition.outputs,\n+            definition.validations,\n             env);\n     }\n \n@@ -108,6 +109,7 @@ private StepDefinitionRequestDto convertGwt(ExecutionRequest executionRequest) {\n             emptyMap(),\n             convert(gwtTestCase.scenario.steps(), executionRequest.environment),\n             emptyMap(),\n+            emptyMap(),\n             executionRequest.environment\n         );\n     }\n@@ -127,6 +129,7 @@ private StepDefinitionRequestDto convert(GwtStep step, String env) {\n             step.implementation.map(i -> i.inputs).orElse(emptyMap()),\n             convert(step.subSteps, env),\n             step.implementation.map(i -> i.outputs).orElse(emptyMap()),\n+            step.implementation.map(i -> i.validations).orElse(emptyMap()),\n             env\n         );\n     }\n@@ -170,7 +173,7 @@ private static SecurityInfoExecutionDto toSecurityInfoDto(TargetDto targetDto) {\n     }\n \n     private static CredentialExecutionDto toCredentialDto(TargetDto targetDto) {\n-        if(targetDto.hasCredential()) {\n+        if (targetDto.hasCredential()) {\n             return new CredentialExecutionDto(targetDto.username, targetDto.password);\n         } else {\n             return null;\n@@ -188,6 +191,7 @@ private StepDefinitionRequestDto convertComposed(ExecutionRequest executionReque\n                 null,\n                 convertComposedSteps(composedTestCase.composedScenario.composedSteps, executionRequest.environment),\n                 null,\n+                null,\n                 executionRequest.environment\n             );\n         } catch (Exception e) {\n@@ -208,6 +212,7 @@ private StepDefinitionRequestDto convert(ExecutableComposedStep composedStep, St\n             composedStep.stepImplementation.map(si -> si.inputs).orElse(emptyMap()),\n             composedStep.steps.stream().map(f -> convert(f, env)).collect(toList()),\n             composedStep.stepImplementation.map(si -> si.outputs).orElse(emptyMap()),\n+            composedStep.stepImplementation.map(si -> si.validations).orElse(emptyMap()),\n             env\n         );\n     }"
  },
  {
    "sha": "435fc1488b972b8c62ff3aa54d9e16a2262b3409",
    "filename": "server/src/main/java/com/chutneytesting/execution/infra/execution/UnmarshalledStepDefinition.java",
    "status": "modified",
    "additions": 13,
    "deletions": 3,
    "changes": 16,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/execution/infra/execution/UnmarshalledStepDefinition.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/main/java/com/chutneytesting/execution/infra/execution/UnmarshalledStepDefinition.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/main/java/com/chutneytesting/execution/infra/execution/UnmarshalledStepDefinition.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -25,8 +25,9 @@\n     public final Map<String, Object> inputs;\n     public final List<UnmarshalledStepDefinition> steps;\n     public final Map<String, Object> outputs;\n+    public final Map<String, Object> validations;\n \n-    private UnmarshalledStepDefinition(GwtType gwtType, String name, String target, String type, UnmarshalledStepStrategyDefinition strategy, Map<String, Object> inputs, List<UnmarshalledStepDefinition> steps, Map<String, Object> outputs) {\n+    private UnmarshalledStepDefinition(GwtType gwtType, String name, String target, String type, UnmarshalledStepStrategyDefinition strategy, Map<String, Object> inputs, List<UnmarshalledStepDefinition> steps, Map<String, Object> outputs, Map<String, Object> validations) {\n         this.gwtType = gwtType;\n         this.name = name;\n         this.target = target;\n@@ -35,6 +36,7 @@ private UnmarshalledStepDefinition(GwtType gwtType, String name, String target,\n         this.inputs = inputs;\n         this.steps = steps;\n         this.outputs = outputs;\n+        this.validations = validations;\n     }\n \n     public static UnmarshalledStepDefinitionBuilder builder() {\n@@ -52,8 +54,10 @@ public static UnmarshalledStepDefinitionBuilder builder() {\n         private Map<String, Object> inputs;\n         private List<UnmarshalledStepDefinition> steps;\n         private Map<String, Object> outputs;\n+        private Map<String, Object> validations;\n \n-        private UnmarshalledStepDefinitionBuilder() {}\n+        private UnmarshalledStepDefinitionBuilder() {\n+        }\n \n         public UnmarshalledStepDefinition build() {\n             return new UnmarshalledStepDefinition(\n@@ -64,7 +68,8 @@ public UnmarshalledStepDefinition build() {\n                 ofNullable(strategy).orElse(UnmarshalledStepStrategyDefinition.NONE),\n                 ofNullable(inputs).orElse(emptyMap()),\n                 ofNullable(steps).orElse(emptyList()),\n-                ofNullable(outputs).orElse(emptyMap())\n+                ofNullable(outputs).orElse(emptyMap()),\n+                ofNullable(validations).orElse(emptyMap())\n             );\n         }\n \n@@ -107,5 +112,10 @@ public UnmarshalledStepDefinitionBuilder withOutputs(Map<String, Object> outputs\n             this.outputs = outputs;\n             return this;\n         }\n+\n+        public UnmarshalledStepDefinitionBuilder withValidations(Map<String, Object> validations) {\n+            this.validations = validations;\n+            return this;\n+        }\n     }\n }"
  },
  {
    "sha": "149bba5bb30f05cedbec35fcef6011e6df14e241",
    "filename": "server/src/test/java/com/chutneytesting/design/api/scenario/v2_0/GwtTestCaseControllerTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/test/java/com/chutneytesting/design/api/scenario/v2_0/GwtTestCaseControllerTest.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/test/java/com/chutneytesting/design/api/scenario/v2_0/GwtTestCaseControllerTest.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/test/java/com/chutneytesting/design/api/scenario/v2_0/GwtTestCaseControllerTest.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -144,23 +144,23 @@ public void save_example_with_tech_step_should_return_uri_of_the_scenario() thro\n                 .withWhen(\n                     GwtStep.builder().withDescription(\"when 3 executable steps\").withSubSteps(\n                         GwtStep.builder().withDescription(\"executable step in json\")\n-                            .withImplementation(new GwtStepImplementation(\"debug\", \"\", null, null, null)).build(),\n+                            .withImplementation(new GwtStepImplementation(\"debug\", \"\", null, null, null, null)).build(),\n                         GwtStep.builder().withDescription(\"executable step with trailing spaces & without root braces\")\n-                            .withImplementation(new GwtStepImplementation(\"debug\", \"\", null, null, null)).build(),\n+                            .withImplementation(new GwtStepImplementation(\"debug\", \"\", null, null, null, null)).build(),\n                         GwtStep.builder().withDescription(\"executable step in hjson with comment & no quotes\")\n-                            .withImplementation(new GwtStepImplementation(\"debug\", \"\", null, null, null)).build()).build()\n+                            .withImplementation(new GwtStepImplementation(\"debug\", \"\", null, null, null, null)).build()).build()\n                 )\n                 .withThens(Arrays.asList(\n                     GwtStep.builder().withDescription(\"then one executable step\").withSubSteps(\n                         GwtStep.builder().withDescription(\"executable step with trailing spaces, root braces & \\\\r\")\n-                            .withImplementation(new GwtStepImplementation(\"debug\", \"\", null, null, null)).build()).build(),\n+                            .withImplementation(new GwtStepImplementation(\"debug\", \"\", null, null, null, null)).build()).build(),\n \n                     GwtStep.builder().withDescription(\"then another executable step\").withSubSteps(\n                         GwtStep.builder().withDescription(\"executable step with docString ''' \")\n                             .withImplementation(new GwtStepImplementation(\n                                 \"sql\",\n                                 \"COCO\",\n-                                Collections.singletonMap(\"statements\", Arrays.asList(\"DELETE FROM COCO WHERE ID = 'MOMO'\", \"DELETE FROM CUCU WHERE ID = 'MIMI'\", \"INSERT INTO CECE ('ID') VALUES ('MEME')\")), null, null)).build()).build()\n+                                Collections.singletonMap(\"statements\", Arrays.asList(\"DELETE FROM COCO WHERE ID = 'MOMO'\", \"DELETE FROM CUCU WHERE ID = 'MIMI'\", \"INSERT INTO CECE ('ID') VALUES ('MEME')\")), null, null, null)).build()).build()\n                     )\n                 ).build())\n             .build();"
  },
  {
    "sha": "fd9e17efcd34070e2a81ef25791d74f3fb8ff0c1",
    "filename": "server/src/test/java/com/chutneytesting/execution/domain/compiler/ComposedTestCaseIterationsPreProcessorTest.java",
    "status": "modified",
    "additions": 65,
    "deletions": 65,
    "changes": 130,
    "blob_url": "https://github.com/chutney-testing/chutney/blob/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/test/java/com/chutneytesting/execution/domain/compiler/ComposedTestCaseIterationsPreProcessorTest.java",
    "raw_url": "https://github.com/chutney-testing/chutney/raw/4df625e538fd7642b252a703d0b2cdec1725b952/server/src/test/java/com/chutneytesting/execution/domain/compiler/ComposedTestCaseIterationsPreProcessorTest.java",
    "contents_url": "https://api.github.com/repos/chutney-testing/chutney/contents/server/src/test/java/com/chutneytesting/execution/domain/compiler/ComposedTestCaseIterationsPreProcessorTest.java?ref=4df625e538fd7642b252a703d0b2cdec1725b952",
    "patch": "@@ -44,7 +44,7 @@\n     private final ExecutableComposedStep stepGenerating2Iterations = ExecutableComposedStep.builder()\n         .withName(\"Should generate 2 iterations for letter A and B\")\n         .withImplementation(Optional.of(\n-            new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output\", \"**letter**\"))))\n+            new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output\", \"**letter**\"), emptyMap())))\n         .withDataset(singletonMap(\"letter\", \"\"))\n         .build();\n \n@@ -450,7 +450,7 @@ public void should_index_iterations_outputs_when_using_external_multivalues_data\n                     ExecutableComposedStep.builder()\n                         .withName(\"Should generate 2 iterations using external multivalues dataset\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output\", \"**letter**\"))))\n+                            new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output\", \"**letter**\"), emptyMap())))\n                         .withDataset(singletonMap(\"letter\", \"\"))\n                         .build()\n                     )\n@@ -471,14 +471,14 @@ public void should_index_iterations_outputs_when_using_external_multivalues_data\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using external multivalues dataset - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_1\", \"**letter**\"))\n+                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_1\", \"**letter**\"), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"letter\", \"A\"))\n                     .build(),\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using external multivalues dataset - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_2\", \"**letter**\"))\n+                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_2\", \"**letter**\"), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"letter\", \"B\"))\n                     .build()\n@@ -507,12 +507,12 @@ public void should_still_work_when_there_are_null_values() {\n                     ExecutableComposedStep.builder() // the step under test\n                         .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, Maps.of(\"keyWithNullValue\", null, \"taskInput\", \"#output\"), emptyMap())))\n+                            new StepImplementation(\"task\", null, Maps.of(\"keyWithNullValue\", null, \"taskInput\", \"#output\"), emptyMap(), emptyMap())))\n                         .build(),\n                     ExecutableComposedStep.builder()\n                         .withName(\"Should generate 2 iterations using previous outputs in their output\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"keyWithNullValue\", null, \"key_to_index\", \"#output\"))))\n+                            new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"keyWithNullValue\", null, \"key_to_index\", \"#output\"), emptyMap())))\n                         .build()\n                     )\n                 )\n@@ -533,12 +533,12 @@ public void should_still_work_when_there_are_null_values() {\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, Maps.of(\"keyWithNullValue\", null, \"taskInput\", \"#output_1\"), emptyMap())\n+                        new StepImplementation(\"task\", null, Maps.of(\"keyWithNullValue\", null, \"taskInput\", \"#output_1\"), emptyMap(), emptyMap())\n                     ))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, Maps.of(\"keyWithNullValue\", null, \"taskInput\", \"#output_2\"), emptyMap())\n+                        new StepImplementation(\"task\", null, Maps.of(\"keyWithNullValue\", null, \"taskInput\", \"#output_2\"), emptyMap(), emptyMap())\n                     ))\n                     .build()\n             ))\n@@ -553,12 +553,12 @@ public void should_still_work_when_there_are_null_values() {\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using previous outputs in their output - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"keyWithNullValue_1\", null, \"key_to_index_1\", \"#output_1\"))\n+                        new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"keyWithNullValue_1\", null, \"key_to_index_1\", \"#output_1\"), emptyMap())\n                     ))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using previous outputs in their output - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"keyWithNullValue_2\", null, \"key_to_index_2\", \"#output_2\"))\n+                        new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"keyWithNullValue_2\", null, \"key_to_index_2\", \"#output_2\"), emptyMap())\n                     ))\n                     .build()\n             ))\n@@ -586,7 +586,7 @@ public void should_iterate_step_when_using_previous_indexed_outputs_in_simple_in\n                     ExecutableComposedStep.builder() // the step under test\n                         .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + ${#output + Y}\"), emptyMap())))\n+                            new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + ${#output + Y}\"), emptyMap(), emptyMap())))\n                         .build()\n                     )\n                 )\n@@ -606,12 +606,12 @@ public void should_iterate_step_when_using_previous_indexed_outputs_in_simple_in\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + ${#output_1 + Y}\"), emptyMap())\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + ${#output_1 + Y}\"), emptyMap(), emptyMap())\n                     ))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + ${#output_2 + Y}\"), emptyMap())\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + ${#output_2 + Y}\"), emptyMap(), emptyMap())\n                     ))\n                     .build()\n             ))\n@@ -640,7 +640,7 @@ public void should_iterate_step_when_using_previous_indexed_outputs_combined_to_\n                     ExecutableComposedStep.builder() // the step under test\n                         .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + **var** + Y}\"), emptyMap())))\n+                            new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + **var** + Y}\"), emptyMap(), emptyMap())))\n                         .withDataset(singletonMap(\"var\", \"${#output.equals('**letter**')\"))\n                         .build()\n                     )\n@@ -661,13 +661,13 @@ public void should_iterate_step_when_using_previous_indexed_outputs_combined_to_\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + **var** + Y}\"), emptyMap())\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + **var** + Y}\"), emptyMap(), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"var\", \"${#output_1.equals('A')\"))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + **var** + Y}\"), emptyMap())\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"X + **var** + Y}\"), emptyMap(), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"var\", \"${#output_2.equals('B')\"))\n                     .build()\n@@ -690,7 +690,7 @@ public void should_iterate_step_when_using_two_previous_indexed_outputs_on_datas\n         ExecutableComposedStep stepGenerating2IterationsWithOutputs = ExecutableComposedStep.builder()\n             .withName(\"Should generate 2 iterations for letter A and B\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"**letter**\", \"otherOutput\", \"**letter**\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"**letter**\", \"otherOutput\", \"**letter**\"), emptyMap())))\n             .withDataset(singletonMap(\"letter\", \"\"))\n             .build();\n \n@@ -702,7 +702,7 @@ public void should_iterate_step_when_using_two_previous_indexed_outputs_on_datas\n                     ExecutableComposedStep.builder() // the step under test\n                         .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, emptyMap(), emptyMap())))\n+                            new StepImplementation(\"task\", null, emptyMap(), emptyMap(), emptyMap())))\n                         .withDataset(Maps.of(\"var\", \"${#output}\", \"var2\", \"${#otherOutput}\"))\n                         .build()\n                     )\n@@ -723,13 +723,13 @@ public void should_iterate_step_when_using_two_previous_indexed_outputs_on_datas\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, emptyMap(), emptyMap())\n+                        new StepImplementation(\"task\", null, emptyMap(), emptyMap(), emptyMap())\n                     ))\n                     .withDataset(Maps.of(\"var\", \"${#output_1}\", \"var2\", \"${#otherOutput_1}\"))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, emptyMap(), emptyMap())\n+                        new StepImplementation(\"task\", null, emptyMap(), emptyMap(), emptyMap())\n                     ))\n                     .withDataset(Maps.of(\"var\", \"${#output_2}\", \"var2\", \"${#otherOutput_2}\"))\n                     .build()\n@@ -752,7 +752,7 @@ public void should_not_match_partial_naming() {\n         ExecutableComposedStep stepGenerating2IterationsWithOutputs = ExecutableComposedStep.builder()\n             .withName(\"Should generate 2 iterations for letter A and B\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"SAME\", \"**letter**\", \"SAMEagain\", \"**letter**\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"SAME\", \"**letter**\", \"SAMEagain\", \"**letter**\"), emptyMap())))\n             .withDataset(singletonMap(\"letter\", \"\"))\n             .build();\n \n@@ -809,13 +809,13 @@ public void should_surcharge_indexed_variable() {\n         ExecutableComposedStep stepGenerating2IterationsWithOutputs = ExecutableComposedStep.builder()\n             .withName(\"Should generate 2 iterations for letter A and B\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"**letter**\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"**letter**\"), emptyMap())))\n             .withDataset(singletonMap(\"letter\", \"\"))\n             .build();\n         ExecutableComposedStep stepSurchargeContextVariable = ExecutableComposedStep.builder()\n             .withName(\"Should surcharge context variable 'output'\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"final value\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"final value\"), emptyMap())))\n             .build();\n \n         ExecutableComposedTestCase testCase = new ExecutableComposedTestCase(\n@@ -883,13 +883,13 @@ public void should_surcharge_indexed_variable_in_substep() {\n         ExecutableComposedStep stepGenerating2IterationsWithOutputs = ExecutableComposedStep.builder()\n             .withName(\"Should generate 2 iterations for letter A and B\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"**letter**\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"**letter**\"), emptyMap())))\n             .withDataset(singletonMap(\"letter\", \"\"))\n             .build();\n         ExecutableComposedStep substepSurchargeContextVariable = ExecutableComposedStep.builder()\n             .withName(\"Should surcharge context variable 'output'\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"final value\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"final value\"), emptyMap())))\n             .build();\n \n         ExecutableComposedStep stepSurchargeContextVariable = ExecutableComposedStep.builder()\n@@ -963,7 +963,7 @@ public void should_iterate_step_when_using_two_previous_indexed_outputs() {\n         ExecutableComposedStep stepGenerating2IterationsWithOutputs = ExecutableComposedStep.builder()\n             .withName(\"Should generate 2 iterations for letter A and B\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"**letter**\", \"otherOutput\", \"**letter**\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"output\", \"**letter**\", \"otherOutput\", \"**letter**\"), emptyMap())))\n             .withDataset(singletonMap(\"letter\", \"\"))\n             .build();\n \n@@ -975,7 +975,7 @@ public void should_iterate_step_when_using_two_previous_indexed_outputs() {\n                     ExecutableComposedStep.builder() // the step under test\n                         .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output} + Y}\", \"taskOtherInput\", \"${#otherOutput}\"), emptyMap())))\n+                            new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output} + Y}\", \"taskOtherInput\", \"${#otherOutput}\"), emptyMap(), emptyMap())))\n                         .build()\n                     )\n                 )\n@@ -995,12 +995,12 @@ public void should_iterate_step_when_using_two_previous_indexed_outputs() {\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output_1} + Y}\", \"taskOtherInput\", \"${#otherOutput_1}\"), emptyMap())\n+                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output_1} + Y}\", \"taskOtherInput\", \"${#otherOutput_1}\"), emptyMap(), emptyMap())\n                     ))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output_2} + Y}\", \"taskOtherInput\", \"${#otherOutput_2}\"), emptyMap())\n+                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output_2} + Y}\", \"taskOtherInput\", \"${#otherOutput_2}\"), emptyMap(), emptyMap())\n                     ))\n                     .build()\n             ))\n@@ -1022,7 +1022,7 @@ public void should_iterate_step_when_using_outputKey_id_defined_as_dataset() {\n         ExecutableComposedStep stepGenerating2IterationsWithOutputs = ExecutableComposedStep.builder()\n             .withName(\"Should generate 2 iterations for letter A and B\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"**outputVar**\", \"**letter**\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"**outputVar**\", \"**letter**\"), emptyMap())))\n             .withDataset(Maps.of(\"outputVar\", \"output\", \"letter\", \"\"))\n             .build();\n \n@@ -1034,7 +1034,7 @@ public void should_iterate_step_when_using_outputKey_id_defined_as_dataset() {\n                     ExecutableComposedStep.builder() // the step under test\n                         .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output} + Y}\"), emptyMap())))\n+                            new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output} + Y}\"), emptyMap(), emptyMap())))\n                         .build()\n                     )\n                 )\n@@ -1054,12 +1054,12 @@ public void should_iterate_step_when_using_outputKey_id_defined_as_dataset() {\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output_1} + Y}\"), emptyMap())\n+                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output_1} + Y}\"), emptyMap(), emptyMap())\n                     ))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output_2} + Y}\"), emptyMap())\n+                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"X + ${#output_2} + Y}\"), emptyMap(), emptyMap())\n                     ))\n                     .build()\n             ))\n@@ -1081,13 +1081,13 @@ public void should_iterate_step_when_using_output_defined_in_substep_with_output\n         ExecutableComposedStep firstSubstepGenerating2IterationsWithOutputs = ExecutableComposedStep.builder()\n             .withName(\"Should generate 2 iterations for letter A and B\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"**outputKey**\", \"**outputValue**\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"**outputKey**\", \"**outputValue**\"), emptyMap())))\n             .withDataset(Maps.of(\"outputKey\", \"**letter**\", \"outputValue\", \"**letter**\"))\n             .build();\n         ExecutableComposedStep secondSubstepGenerating2IterationsWithOutputs = ExecutableComposedStep.builder()\n             .withName(\"Should generate 2 iterations for letter A and B\")\n             .withImplementation(Optional.of(\n-                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"**outputKey**\", \"**outputValue**\"))))\n+                new StepImplementation(\"task\", null, emptyMap(), Maps.of(\"**outputKey**\", \"**outputValue**\"), emptyMap())))\n             .withDataset(Maps.of(\"outputKey\", \"**outputVar**\", \"outputValue\", \"**letter**\"))\n             .build();\n \n@@ -1104,7 +1104,7 @@ public void should_iterate_step_when_using_output_defined_in_substep_with_output\n                     ExecutableComposedStep.builder() // the step under test\n                         .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"**var**\"), emptyMap())))\n+                            new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"**var**\"), emptyMap(), emptyMap())))\n                         .withDataset(Maps.of(\"var\", \"${#output}\"))\n                         .build()\n                     )\n@@ -1125,13 +1125,13 @@ public void should_iterate_step_when_using_output_defined_in_substep_with_output\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"**var**\"), emptyMap())\n+                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"**var**\"), emptyMap(), emptyMap())\n                     ))\n                     .withDataset(Maps.of(\"var\", \"${#output_1}\"))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"**var**\"), emptyMap())\n+                        new StepImplementation(\"task\", null, Maps.of(\"taskInput\", \"**var**\"), emptyMap(), emptyMap())\n                     ))\n                     .withDataset(Maps.of(\"var\", \"${#output_2}\"))\n                     .build()\n@@ -1158,7 +1158,7 @@ public void should_iterate_step_when_using_previous_indexed_outputs_in_map_input\n                     ExecutableComposedStep.builder() // step under test\n                         .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, singletonMap(\"taskMapInput\", singletonMap(\"${#output} + X\", \"${#output} + Y\")), emptyMap())))\n+                            new StepImplementation(\"task\", null, singletonMap(\"taskMapInput\", singletonMap(\"${#output} + X\", \"${#output} + Y\")), emptyMap(), emptyMap())))\n                         .build()\n                     )\n                 )\n@@ -1179,12 +1179,12 @@ public void should_iterate_step_when_using_previous_indexed_outputs_in_map_input\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskMapInput\", singletonMap(\"${#output_1} + X\", \"${#output_1} + Y\")), emptyMap())\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskMapInput\", singletonMap(\"${#output_1} + X\", \"${#output_1} + Y\")), emptyMap(), emptyMap())\n                     ))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using output_1 and output_2 previous outputs - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskMapInput\", singletonMap(\"${#output_2} + X\", \"${#output_2} + Y\")), emptyMap())\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskMapInput\", singletonMap(\"${#output_2} + X\", \"${#output_2} + Y\")), emptyMap(), emptyMap())\n                     ))\n                     .build()\n             ))\n@@ -1212,7 +1212,7 @@ public void should_iterate_step_when_using_previous_indexed_outputs_in_task_outp\n                     ExecutableComposedStep.builder()\n                         .withName(\"Should generate 2 iterations using previous outputs in their output\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"key_to_index\", \"${#output} + X\"))))\n+                            new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"key_to_index\", \"${#output} + X\"), emptyMap())))\n                         .build()\n                     )\n                 )\n@@ -1233,12 +1233,12 @@ public void should_iterate_step_when_using_previous_indexed_outputs_in_task_outp\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using previous outputs in their output - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"key_to_index_1\", \"${#output_1} + X\"))\n+                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"key_to_index_1\", \"${#output_1} + X\"), emptyMap())\n                     ))\n                     .build(), ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using previous outputs in their output - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"key_to_index_2\", \"${#output_2} + X\"))\n+                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"key_to_index_2\", \"${#output_2} + X\"), emptyMap())\n                     ))\n                     .build()\n             ))\n@@ -1266,7 +1266,7 @@ public void should_iterate_step_when_using_previous_indexed_outputs_in_dataset()\n                     ExecutableComposedStep.builder()\n                         .withName(\"Should generate 2 iterations using previous outputs in their dataset\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"**myParam**\"), emptyMap())\n+                            new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"**myParam**\"), emptyMap(), emptyMap())\n                         ))\n                         .withDataset(singletonMap(\"myParam\", \"X + ${#output} + Y\"))\n                         .build()\n@@ -1289,14 +1289,14 @@ public void should_iterate_step_when_using_previous_indexed_outputs_in_dataset()\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using previous outputs in their dataset - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"**myParam**\"), emptyMap())\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"**myParam**\"), emptyMap(), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"myParam\", \"X + ${#output_1} + Y\"))\n                     .build(),\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations using previous outputs in their dataset - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"**myParam**\"), emptyMap())\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"**myParam**\"), emptyMap(), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"myParam\", \"X + ${#output_2} + Y\"))\n                     .build()\n@@ -1325,7 +1325,7 @@ public void should_iterate_step_having_both_previous_indexed_outputs_and_indexin\n                     ExecutableComposedStep.builder()\n                         .withName(\"Should generate 2 iterations having previous indexed output and indexing 2 other outputs\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#output} + X\"), singletonMap(\"otherOutput\", \"**letter**\"))\n+                            new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#output} + X\"), singletonMap(\"otherOutput\", \"**letter**\"), emptyMap())\n                         ))\n                         .withDataset(singletonMap(\"letter\", \"\"))\n                         .build()\n@@ -1348,14 +1348,14 @@ public void should_iterate_step_having_both_previous_indexed_outputs_and_indexin\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations having previous indexed output and indexing 2 other outputs - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#output_1} + X\"), singletonMap(\"otherOutput_1\", \"**letter**\"))\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#output_1} + X\"), singletonMap(\"otherOutput_1\", \"**letter**\"), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"letter\", \"A\"))\n                     .build(),\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations having previous indexed output and indexing 2 other outputs - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#output_2} + X\"), singletonMap(\"otherOutput_2\", \"**letter**\"))\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#output_2} + X\"), singletonMap(\"otherOutput_2\", \"**letter**\"), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"letter\", \"B\"))\n                     .build()\n@@ -1384,7 +1384,7 @@ public void should_generate_iterations_indexing_only_new_outputs() {\n                     ExecutableComposedStep.builder()\n                         .withName(\"Should generate 2 iterations indexing otherOutputs only\")\n                         .withImplementation(Optional.of(\n-                            new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#notFromIteration}\"), singletonMap(\"otherOutput\", \"**letter**\"))\n+                            new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#notFromIteration}\"), singletonMap(\"otherOutput\", \"**letter**\"), emptyMap())\n                         ))\n                         .withDataset(singletonMap(\"letter\", \"\"))\n                         .build()\n@@ -1407,14 +1407,14 @@ public void should_generate_iterations_indexing_only_new_outputs() {\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations indexing otherOutputs only - dataset iteration 1\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#notFromIteration}\"), singletonMap(\"otherOutput_1\", \"**letter**\"))\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#notFromIteration}\"), singletonMap(\"otherOutput_1\", \"**letter**\"), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"letter\", \"A\"))\n                     .build(),\n                 ExecutableComposedStep.builder()\n                     .withName(\"Should generate 2 iterations indexing otherOutputs only - dataset iteration 2\")\n                     .withImplementation(Optional.of(\n-                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#notFromIteration}\"), singletonMap(\"otherOutput_2\", \"**letter**\"))\n+                        new StepImplementation(\"task\", null, singletonMap(\"taskInput\", \"${#notFromIteration}\"), singletonMap(\"otherOutput_2\", \"**letter**\"), emptyMap())\n                     ))\n                     .withDataset(singletonMap(\"letter\", \"B\"))\n                     .build()\n@@ -1445,14 +1445,14 @@ public void should_index_iterations_outputs_when_inside_a_parent_step() {\n                             ExecutableComposedStep.builder()\n                                 .withName(\"First sub step\")\n                                 .withImplementation(Optional.of(\n-                                    new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output\", \"**letter**\"))\n+                                    new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output\", \"**letter**\"), emptyMap())\n                                 ))\n                                 .withDataset(singletonMap(\"letter\", \"\"))\n                                 .build(),\n                             ExecutableComposedStep.builder()\n                                 .withName(\"Second sub step\")\n                                 .withImplementation(Optional.of(\n-                                    new StepImplementation(\"task\", null, singletonMap(\"${#output}\", \"**letter**\"), emptyMap())\n+                                    new StepImplementation(\"task\", null, singletonMap(\"${#output}\", \"**letter**\"), emptyMap(), emptyMap())\n                                 ))\n                                 .build()\n                         ))\n@@ -1483,14 +1483,14 @@ public void should_index_iterations_outputs_when_inside_a_parent_step() {\n                                 ExecutableComposedStep.builder()\n                                     .withName(\"First sub step\")\n                                     .withImplementation(Optional.of(\n-                                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_1\", \"**letter**\"))\n+                                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_1\", \"**letter**\"), emptyMap())\n                                     ))\n                                     .withDataset(singletonMap(\"letter\", \"\"))\n                                     .build(),\n                                 ExecutableComposedStep.builder()\n                                     .withName(\"Second sub step\")\n                                     .withImplementation(Optional.of(\n-                                        new StepImplementation(\"task\", null, singletonMap(\"${#output_1}\", \"**letter**\"), emptyMap())\n+                                        new StepImplementation(\"task\", null, singletonMap(\"${#output_1}\", \"**letter**\"), emptyMap(), emptyMap())\n                                     ))\n                                     .build()\n                             ))\n@@ -1502,14 +1502,14 @@ public void should_index_iterations_outputs_when_inside_a_parent_step() {\n                                 ExecutableComposedStep.builder()\n                                     .withName(\"First sub step\")\n                                     .withImplementation(Optional.of(\n-                                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_2\", \"**letter**\"))\n+                                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_2\", \"**letter**\"), emptyMap())\n                                     ))\n                                     .withDataset(singletonMap(\"letter\", \"\"))\n                                     .build(),\n                                 ExecutableComposedStep.builder()\n                                     .withName(\"Second sub step\")\n                                     .withImplementation(Optional.of(\n-                                        new StepImplementation(\"task\", null, singletonMap(\"${#output_2}\", \"**letter**\"), emptyMap())\n+                                        new StepImplementation(\"task\", null, singletonMap(\"${#output_2}\", \"**letter**\"), emptyMap(), emptyMap())\n                                     ))\n                                     .build()\n                             ))\n@@ -1545,14 +1545,14 @@ public void should_index_iterations_inputs_when_generated_in_same_parent_step()\n                             ExecutableComposedStep.builder()\n                                 .withName(\"First sub step\")\n                                 .withImplementation(Optional.of(\n-                                    new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output\", \"**letter**\"))\n+                                    new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output\", \"**letter**\"), emptyMap())\n                                 ))\n                                 .withDataset(singletonMap(\"letter\", \"\"))\n                                 .build(),\n                             ExecutableComposedStep.builder()\n                                 .withName(\"Second sub step\")\n                                 .withImplementation(Optional.of(\n-                                    new StepImplementation(\"task\", null, singletonMap(\"input\", \"**data**\"), emptyMap())\n+                                    new StepImplementation(\"task\", null, singletonMap(\"input\", \"**data**\"), emptyMap(), emptyMap())\n                                 ))\n                                 .withDataset(singletonMap(\"data\", \"${#output}\"))\n                                 .build()\n@@ -1584,14 +1584,14 @@ public void should_index_iterations_inputs_when_generated_in_same_parent_step()\n                                 ExecutableComposedStep.builder()\n                                     .withName(\"First sub step\")\n                                     .withImplementation(Optional.of(\n-                                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_1\", \"**letter**\"))\n+                                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_1\", \"**letter**\"), emptyMap())\n                                     ))\n                                     .withDataset(singletonMap(\"letter\", \"\"))\n                                     .build(),\n                                 ExecutableComposedStep.builder()\n                                     .withName(\"Second sub step\")\n                                     .withImplementation(Optional.of(\n-                                        new StepImplementation(\"task\", null, singletonMap(\"input\", \"**data**\"), emptyMap())\n+                                        new StepImplementation(\"task\", null, singletonMap(\"input\", \"**data**\"), emptyMap(), emptyMap())\n                                     ))\n                                     .withDataset(singletonMap(\"data\", \"${#output_1}\"))\n                                     .build()\n@@ -1604,14 +1604,14 @@ public void should_index_iterations_inputs_when_generated_in_same_parent_step()\n                                 ExecutableComposedStep.builder()\n                                     .withName(\"First sub step\")\n                                     .withImplementation(Optional.of(\n-                                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_2\", \"**letter**\"))\n+                                        new StepImplementation(\"task\", null, emptyMap(), singletonMap(\"output_2\", \"**letter**\"), emptyMap())\n                                     ))\n                                     .withDataset(singletonMap(\"letter\", \"\"))\n                                     .build(),\n                                 ExecutableComposedStep.builder()\n                                     .withName(\"Second sub step\")\n                                     .withImplementation(Optional.of(\n-                                        new StepImplementation(\"task\", null, singletonMap(\"input\", \"**data**\"), emptyMap())\n+                                        new StepImplementation(\"task\", null, singletonMap(\"input\", \"**data**\"), emptyMap(), emptyMap())\n                                     ))\n                                     .withDataset(singletonMap(\"data\", \"${#output_2}\"))\n                                     .build()"
  }
]
