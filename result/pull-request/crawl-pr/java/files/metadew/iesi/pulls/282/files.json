[
  {
    "sha": "210f070cb5d0fb31477e714c2652c4ee61834384",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/metadata/configuration/user/UserConfiguration.java",
    "status": "modified",
    "additions": 55,
    "deletions": 38,
    "changes": 93,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-core/src/main/java/io/metadew/iesi/metadata/configuration/user/UserConfiguration.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-core/src/main/java/io/metadew/iesi/metadata/configuration/user/UserConfiguration.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/metadata/configuration/user/UserConfiguration.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -16,42 +16,45 @@\n @Log4j2\n public class UserConfiguration extends Configuration<User, UserKey> {\n \n-    private static String fetchIdByNameQuery = \"select users.ID as user_id\" +\n+    private static final String FETCH_ID_BY_NAME_QUERY = \"select users.ID as user_id\" +\n             \" FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() + \" users\" +\n             \" WHERE USERNAME={0};\";\n-    private static String fetchSingleQuery = \"select users.ID as user_id, users.USERNAME as user_username, users.PASSWORD as user_password, \" +\n+    private static final String FETCH_BY_NAME_QUERY = \"select users.ID as user_id, users.USERNAME as user_username, users.PASSWORD as user_password, \" +\n             \"users.ENABLED as user_enabled, users.EXPIRED as user_expired, users.CREDENTIALS_EXPIRED as user_credentials_expired, users.LOCKED as user_locked, user_roles.ROLE_ID as role_id\" +\n             \" FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() + \" users\" +\n             \" LEFT OUTER JOIN \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() + \" user_roles \" +\n             \" ON users.ID = user_roles.USER_ID \" +\n-            \" WHERE ID={0};\";\n-    private static String fetchByNameQuery = \"select users.ID as user_id, users.USERNAME as user_username, users.PASSWORD as user_password, \" +\n+            \" WHERE USERNAME={0};\";\n+    private static final String FETCH_SINGLE_QUERY = \"select users.ID as user_id, users.USERNAME as user_username, users.PASSWORD as user_password, \" +\n             \"users.ENABLED as user_enabled, users.EXPIRED as user_expired, users.CREDENTIALS_EXPIRED as user_credentials_expired, users.LOCKED as user_locked, user_roles.ROLE_ID as role_id\" +\n             \" FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() + \" users\" +\n             \" LEFT OUTER JOIN \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() + \" user_roles \" +\n             \" ON users.ID = user_roles.USER_ID \" +\n-            \" WHERE USERNAME={0};\";\n-    private static String fetchAllQuery = \"select users.ID as user_id, users.USERNAME as user_username, users.PASSWORD as user_password, \" +\n+            \" WHERE ID={0};\";\n+    private static final String FETCH_UUID_BY_NAME_QUERY = \"select users.ID as user_id \" + \"\" +\n+            \"FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() + \" users \" +\n+            \"WHERE USERNAME={0};\";\n+    private static final String FETCH_ALL_QUERY = \"select users.ID as user_id, users.USERNAME as user_username, users.PASSWORD as user_password, \" +\n             \"users.ENABLED as user_enabled, users.EXPIRED as user_expired, users.CREDENTIALS_EXPIRED as user_credentials_expired, users.LOCKED as user_locked, user_roles.ROLE_ID as role_id\" +\n             \" FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() + \" users\" +\n             \" LEFT OUTER JOIN \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() + \" user_roles \" +\n             \" ON users.ID = user_roles.USER_ID;\";\n-    private static String deleteSingleQuery = \"DELETE FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() +\n+    private static final String DELETE_SINGLE_QUERY = \"DELETE FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() +\n             \" WHERE ID={0};\";\n-    private static String deleteUserRolesByUserIdQuery = \"DELETE FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() +\n+    private static final String DELETE_USER_ROLES_BY_USER_ID_QUERY = \"DELETE FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() +\n             \" WHERE USER_ID={0};\";\n-    private static String deleteUserRolesByUserIdAndRoleIdQuery = \"DELETE FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() +\n+    private static final String DELETE_USER_ROLES_BY_USER_ID_AND_ROLE_ID_QUERY = \"DELETE FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() +\n             \" WHERE USER_ID={0} AND ROLE_ID={1};\";\n-    private static String deleteByNameQuery = \"DELETE FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() +\n+    private static final String DELETE_BY_NAME_QUERY = \"DELETE FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() +\n             \" WHERE USERNAME={0};\";\n-    private static String insertQuery = \"INSERT INTO \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() +\n+    private static final String INSERT_QUERY = \"INSERT INTO \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() +\n             \" (ID, USERNAME, PASSWORD, ENABLED, EXPIRED, CREDENTIALS_EXPIRED, LOCKED) VALUES ({0}, {1}, {2}, {3}, {4}, {5}, {6});\";\n-    private static String insertUserRoleQuery = \"INSERT INTO \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() +\n+    private static final String INSERT_USER_ROLE_QUERY = \"INSERT INTO \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() +\n             \" (USER_ID, ROLE_ID) VALUES ({0}, {1});\";\n-    private static String updateQuery = \"UPDATE \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() +\n-            \" SET USERNAME = {0}, PASSWORD ={1}, ENABLED = {2}, EXPIRED = {3}, CREDENTIALS_EXPIRED = {4}, LOCKED = {5}\" +\n-            \" WHERE ID = {6};\";\n-    private static String fetchRolesByUserIdQuery = \"select roles.id as role_id, roles.team_id as role_team_id, roles.role_name as role_role_name, \" +\n+    private static final String UPDATE_QUERY = \"UPDATE \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"Users\").getName() +\n+            \" SET PASSWORD ={0}, ENABLED = {1}, EXPIRED = {2}, CREDENTIALS_EXPIRED = {3}, LOCKED = {4}\" +\n+            \" WHERE ID = {5};\";\n+    private static final String FETCH_ROLES_BY_USER_ID_QUERY = \"select roles.id as role_id, roles.team_id as role_team_id, roles.role_name as role_role_name, \" +\n             \"privileges.id as privilege_id, privileges.role_id as privilege_role_id, privileges.privilege as privilege_privilege, \" +\n             \"user_roles.user_id as user_role_user_id \" +\n             \" FROM \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() + \" user_roles \" +\n@@ -62,7 +65,7 @@\n //            \" LEFT OUTER JOIN \" + MetadataTablesConfiguration.getInstance().getMetadataTableNameByLabel(\"UserRoles\").getName() + \" user_roles \" +\n //            \" ON roles.ID = user_roles.ROLE_ID \" +\n             \" WHERE user_roles.USER_ID={0};\";\n-    private static String fetchTeamsByUserIdQuery = \"select teams.ID as team_id, teams.TEAM_NAME as team_name, \" +\n+    private static final String FETCH_TEAMS_BY_USER_ID_QUERY = \"select teams.ID as team_id, teams.TEAM_NAME as team_name, \" +\n             \"roles.id as role_id, roles.team_id as role_team_id, roles.role_name as role_role_name, \" +\n             \"privileges.id as privilege_id, privileges.role_id as privilege_role_id, privileges.privilege as privilege_privilege, \" +\n             \"user_roles.user_id as user_role_user_id, \" +\n@@ -78,13 +81,13 @@\n             \" ON teams.ID = security_group_teams.TEAM_ID \" +\n             \" WHERE user_roles.ID={0};\";\n \n-    private static UserConfiguration INSTANCE;\n+    private static UserConfiguration instance;\n \n-    public synchronized static UserConfiguration getInstance() {\n-        if (INSTANCE == null) {\n-            INSTANCE = new UserConfiguration();\n+    public static synchronized UserConfiguration getInstance() {\n+        if (instance == null) {\n+            instance = new UserConfiguration();\n         }\n-        return INSTANCE;\n+        return instance;\n     }\n \n     private UserConfiguration() {\n@@ -95,7 +98,7 @@ private UserConfiguration() {\n     public Optional<User> get(UserKey metadataKey) {\n         try {\n             CachedRowSet cachedRowSet = getMetadataRepository().executeQuery(\n-                    MessageFormat.format(fetchSingleQuery, SQLTools.getStringForSQL(metadataKey.getUuid())),\n+                    MessageFormat.format(FETCH_SINGLE_QUERY, SQLTools.getStringForSQL(metadataKey.getUuid())),\n                     \"reader\");\n             return new UserListResultSetExtractor().extractData(cachedRowSet).stream()\n                     .findFirst();\n@@ -107,7 +110,7 @@ private UserConfiguration() {\n     public Optional<User> getByName(String name) {\n         try {\n             CachedRowSet cachedRowSet = getMetadataRepository().executeQuery(\n-                    MessageFormat.format(fetchByNameQuery, SQLTools.getStringForSQL(name)),\n+                    MessageFormat.format(FETCH_BY_NAME_QUERY, SQLTools.getStringForSQL(name)),\n                     \"reader\");\n             return new UserListResultSetExtractor().extractData(cachedRowSet).stream()\n                     .findFirst();\n@@ -116,14 +119,29 @@ private UserConfiguration() {\n         }\n     }\n \n+    public Optional<UUID> getUuidByName(String name) {\n+        try {\n+            CachedRowSet cachedRowSet = getMetadataRepository().executeQuery(\n+                    MessageFormat.format(FETCH_UUID_BY_NAME_QUERY, SQLTools.getStringForSQL(name)),\n+                    \"reader\");\n+            if (cachedRowSet.next()) {\n+                return Optional.of(UUID.fromString(cachedRowSet.getString(\"user_id\")));\n+            } else {\n+                return Optional.empty();\n+            }\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n     public boolean exists(String username) {\n         return getByName(username).isPresent();\n     }\n \n     @Override\n     public List<User> getAll() {\n         try {\n-            CachedRowSet cachedRowSet = getMetadataRepository().executeQuery(fetchAllQuery, \"reader\");\n+            CachedRowSet cachedRowSet = getMetadataRepository().executeQuery(FETCH_ALL_QUERY, \"reader\");\n             return new UserListResultSetExtractor().extractData(cachedRowSet);\n         } catch (SQLException e) {\n             throw new RuntimeException(e);\n@@ -133,15 +151,15 @@ public boolean exists(String username) {\n     @Override\n     public void delete(UserKey metadataKey) {\n         log.trace(MessageFormat.format(\"Deleting {0}.\", metadataKey.toString()));\n-        String deleteStatement = MessageFormat.format(deleteSingleQuery, SQLTools.getStringForSQL(metadataKey.getUuid()));\n+        String deleteStatement = MessageFormat.format(DELETE_SINGLE_QUERY, SQLTools.getStringForSQL(metadataKey.getUuid()));\n         getMetadataRepository().executeUpdate(deleteStatement);\n-        String deleteRolesStatement = MessageFormat.format(deleteUserRolesByUserIdQuery, SQLTools.getStringForSQL(metadataKey.getUuid()));\n+        String deleteRolesStatement = MessageFormat.format(DELETE_USER_ROLES_BY_USER_ID_QUERY, SQLTools.getStringForSQL(metadataKey.getUuid()));\n         getMetadataRepository().executeUpdate(deleteRolesStatement);\n     }\n \n     public void delete(String username) {\n         log.trace(MessageFormat.format(\"Deleting {0}.\", username));\n-        CachedRowSet cachedRowSet = getMetadataRepository().executeQuery(MessageFormat.format(fetchIdByNameQuery, SQLTools.getStringForSQL(username)), \"reader\");\n+        CachedRowSet cachedRowSet = getMetadataRepository().executeQuery(MessageFormat.format(FETCH_ID_BY_NAME_QUERY, SQLTools.getStringForSQL(username)), \"reader\");\n         try {\n             if (cachedRowSet.next()) {\n                 UserKey userKey = new UserKey(UUID.fromString(cachedRowSet.getString(\"user_id\")));\n@@ -156,7 +174,7 @@ public void delete(String username) {\n     public void insert(User metadata) {\n         log.trace(MessageFormat.format(\"Inserting {0}.\", metadata.toString()));\n         String insertStatement =\n-                MessageFormat.format(insertQuery,\n+                MessageFormat.format(INSERT_QUERY,\n                         SQLTools.getStringForSQL(metadata.getMetadataKey().getUuid()),\n                         SQLTools.getStringForSQL(metadata.getUsername()),\n                         SQLTools.getStringForSQL(metadata.getPassword()),\n@@ -167,7 +185,7 @@ public void insert(User metadata) {\n         getMetadataRepository().executeUpdate(insertStatement);\n         for (RoleKey roleKey : metadata.getRoleKeys()) {\n             getMetadataRepository().executeUpdate(\n-                    MessageFormat.format(insertUserRoleQuery,\n+                    MessageFormat.format(INSERT_USER_ROLE_QUERY,\n                             SQLTools.getStringForSQL(metadata.getMetadataKey().getUuid()),\n                             SQLTools.getStringForSQL(roleKey.getUuid()))\n             );\n@@ -176,20 +194,19 @@ public void insert(User metadata) {\n \n     @Override\n     public void update(User metadata) {\n-        getMetadataRepository().executeUpdate(MessageFormat.format(updateQuery,\n-                SQLTools.getStringForSQL(metadata.getUsername()),\n+        getMetadataRepository().executeUpdate(MessageFormat.format(UPDATE_QUERY,\n                 SQLTools.getStringForSQL(metadata.getPassword()),\n                 SQLTools.getStringForSQL(metadata.isEnabled()),\n                 SQLTools.getStringForSQL(metadata.isExpired()),\n                 SQLTools.getStringForSQL(metadata.isCredentialsExpired()),\n                 SQLTools.getStringForSQL(metadata.isLocked()),\n                 SQLTools.getStringForSQL(metadata.getMetadataKey().getUuid().toString())));\n \n-        String deleteRolesStatement = MessageFormat.format(deleteUserRolesByUserIdQuery, SQLTools.getStringForSQL(metadata.getMetadataKey().getUuid()));\n+        String deleteRolesStatement = MessageFormat.format(DELETE_USER_ROLES_BY_USER_ID_QUERY, SQLTools.getStringForSQL(metadata.getMetadataKey().getUuid()));\n         getMetadataRepository().executeUpdate(deleteRolesStatement);\n         for (RoleKey roleKey : metadata.getRoleKeys()) {\n             getMetadataRepository().executeUpdate(\n-                    MessageFormat.format(insertUserRoleQuery,\n+                    MessageFormat.format(INSERT_USER_ROLE_QUERY,\n                             SQLTools.getStringForSQL(metadata.getMetadataKey().getUuid()),\n                             SQLTools.getStringForSQL(roleKey.getUuid())));\n \n@@ -199,7 +216,7 @@ public void update(User metadata) {\n     public Set<Role> getRoles(UserKey userKey) {\n         try {\n             CachedRowSet cachedRowSet = getMetadataRepository().executeQuery(\n-                    MessageFormat.format(fetchRolesByUserIdQuery, SQLTools.getStringForSQL(userKey.getUuid())),\n+                    MessageFormat.format(FETCH_ROLES_BY_USER_ID_QUERY, SQLTools.getStringForSQL(userKey.getUuid())),\n                     \"reader\");\n             return new HashSet<>(new RoleListResultSetExtractor().extractData(cachedRowSet));\n         } catch (SQLException e) {\n@@ -210,7 +227,7 @@ public void update(User metadata) {\n     public Set<Team> getTeams(UserKey userKey) {\n         try {\n             CachedRowSet cachedRowSet = getMetadataRepository().executeQuery(\n-                    MessageFormat.format(fetchTeamsByUserIdQuery, SQLTools.getStringForSQL(userKey.getUuid())),\n+                    MessageFormat.format(FETCH_TEAMS_BY_USER_ID_QUERY, SQLTools.getStringForSQL(userKey.getUuid())),\n                     \"reader\");\n             return new HashSet<>(new TeamListResultSetExtractor().extractData(cachedRowSet));\n         } catch (SQLException e) {\n@@ -226,15 +243,15 @@ public void update(User metadata) {\n \n     public void addRole(UserKey userKey, RoleKey roleKey) {\n         getMetadataRepository().executeUpdate(MessageFormat.format(\n-                insertUserRoleQuery,\n+                INSERT_USER_ROLE_QUERY,\n                 SQLTools.getStringForSQL(userKey.getUuid()),\n                 SQLTools.getStringForSQL(roleKey.getUuid())\n         ));\n     }\n \n     public void removeRole(UserKey userKey, RoleKey roleKey) {\n         getMetadataRepository().executeUpdate(MessageFormat.format(\n-                deleteUserRolesByUserIdAndRoleIdQuery,\n+                DELETE_USER_ROLES_BY_USER_ID_AND_ROLE_ID_QUERY,\n                 SQLTools.getStringForSQL(userKey.getUuid()),\n                 SQLTools.getStringForSQL(roleKey.getUuid())\n         ));"
  },
  {
    "sha": "cf0ecd310b95c6429e617f61d1923f84792c3e5c",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/metadata/service/user/UserService.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-core/src/main/java/io/metadew/iesi/metadata/service/user/UserService.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-core/src/main/java/io/metadew/iesi/metadata/service/user/UserService.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/metadata/service/user/UserService.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -7,6 +7,7 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.UUID;\n \n @Log4j2\n public class UserService {\n@@ -43,6 +44,10 @@ public void addUser(User user) {\n         return UserConfiguration.getInstance().get(userKey);\n     }\n \n+    public Optional<UUID> getUuidByName(String username) {\n+        return UserConfiguration.getInstance().getUuidByName(username);\n+    }\n+\n     public Optional<User> get(String username) {\n         return UserConfiguration.getInstance().getByName(username);\n     }"
  },
  {
    "sha": "7155e11b767551d766648796ab3ad5495a37d2bd",
    "filename": "core/java/iesi-core/src/test/java/io/metadew/iesi/metadata/configuration/user/UserConfigurationTest.java",
    "status": "modified",
    "additions": 14,
    "deletions": 157,
    "changes": 171,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-core/src/test/java/io/metadew/iesi/metadata/configuration/user/UserConfigurationTest.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-core/src/test/java/io/metadew/iesi/metadata/configuration/user/UserConfigurationTest.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/test/java/io/metadew/iesi/metadata/configuration/user/UserConfigurationTest.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -252,14 +252,14 @@ void userUpdateTest() {\n         assertThat(user)\n                 .isPresent()\n                 .hasValue(user1);\n-        assertThat(user.get().getUsername())\n-                .isEqualTo(\"user1\");\n+        assertThat(user.get().isEnabled())\n+                .isTrue();\n \n-        user1.setUsername(\"userA\");\n+        user1.setEnabled(false);\n         UserConfiguration.getInstance().update(user1);\n \n-        assertThat(UserConfiguration.getInstance().get(new UserKey(uuid1)).get().getUsername())\n-                .isEqualTo(\"userA\");\n+        assertThat(UserConfiguration.getInstance().get(new UserKey(uuid1)).get().isEnabled())\n+                .isFalse();\n     }\n \n     @Test\n@@ -270,165 +270,22 @@ void userUpdateMultipleTest() {\n         assertThat(fetchedUser1)\n                 .isPresent()\n                 .hasValue(user1);\n-        assertThat(fetchedUser1.get().getUsername())\n-                .isEqualTo(\"user1\");\n+        assertThat(fetchedUser1.get().isEnabled())\n+                .isTrue();\n         Optional<User> fetchedUser2 = UserConfiguration.getInstance().get(new UserKey(uuid2));\n         assertThat(fetchedUser2)\n                 .isPresent()\n                 .hasValue(user2);\n-        assertThat(fetchedUser2.get().getUsername())\n-                .isEqualTo(\"user2\");\n+        assertThat(fetchedUser2.get().isEnabled())\n+                .isTrue();\n \n-        user1.setUsername(\"userA\");\n+        user1.setEnabled(false);\n         UserConfiguration.getInstance().update(user1);\n \n-        assertThat(UserConfiguration.getInstance().get(new UserKey(uuid1)).get().getUsername())\n-                .isEqualTo(\"userA\");\n-        assertThat(UserConfiguration.getInstance().get(new UserKey(uuid2)).get().getUsername())\n-                .isEqualTo(\"user2\");\n+        assertThat(UserConfiguration.getInstance().get(new UserKey(uuid1)).get().isEnabled())\n+                .isFalse();\n+        assertThat(UserConfiguration.getInstance().get(new UserKey(uuid2)).get().isEnabled())\n+                .isTrue();\n     }\n \n-//    @Test\n-//    void getGroups() {\n-//        UserConfiguration.getInstance().insert(user1);\n-//        UserConfiguration.getInstance().insert(user2);\n-//        RoleConfiguration.getInstance().insert(role1);\n-//        RoleConfiguration.getInstance().insert(role2);\n-//        TeamConfiguration.getInstance().addUser(role1.getMetadataKey(), user1.getMetadataKey());\n-//        TeamConfiguration.getInstance().addUser(role2.getMetadataKey(), user1.getMetadataKey());\n-//        TeamConfiguration.getInstance().addUser(role1.getMetadataKey(), user2.getMetadataKey());\n-//\n-//        assertThat(UserConfiguration.getInstance().getGroups(user1.getMetadataKey()))\n-//                .containsOnly(role1, role2);\n-//        assertThat(UserConfiguration.getInstance().getGroups(user2.getMetadataKey()))\n-//                .containsOnly(role1);\n-//    }\n-//\n-//    @Test\n-//    void addAuthority() {\n-//        UserConfiguration.getInstance().insert(user1);\n-//        UserConfiguration.getInstance().insert(user2);\n-//        AuthorityConfiguration.getInstance().insert(privilege1);\n-//        AuthorityConfiguration.getInstance().insert(privilege2);\n-//        UserConfiguration.getInstance().addAuthority(user1.getMetadataKey(), privilege1.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user1.getMetadataKey(), privilege2.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user2.getMetadataKey(), privilege2.getMetadataKey());\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user1.getMetadataKey()))\n-//                .containsOnly(privilege1, privilege2);\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user2.getMetadataKey()))\n-//                .containsOnly(privilege2);\n-//    }\n-//\n-//    @Test\n-//    void addAuthorityByName() {\n-//        UserConfiguration.getInstance().insert(user1);\n-//        UserConfiguration.getInstance().insert(user2);\n-//        AuthorityConfiguration.getInstance().insert(privilege1);\n-//        AuthorityConfiguration.getInstance().insert(privilege2);\n-//        UserConfiguration.getInstance().addAuthority(user1.getUsername(), privilege1.getPrivilege());\n-//        UserConfiguration.getInstance().addAuthority(user1.getUsername(), privilege2.getPrivilege());\n-//        UserConfiguration.getInstance().addAuthority(user2.getUsername(), privilege2.getPrivilege());\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user1.getMetadataKey()))\n-//                .containsOnly(privilege1, privilege2);\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user2.getMetadataKey()))\n-//                .containsOnly(privilege2);\n-//    }\n-//\n-//    @Test\n-//    void removeAuthority() {\n-//        UserConfiguration.getInstance().insert(user1);\n-//        UserConfiguration.getInstance().insert(user2);\n-//        AuthorityConfiguration.getInstance().insert(privilege1);\n-//        AuthorityConfiguration.getInstance().insert(privilege2);\n-//        UserConfiguration.getInstance().addAuthority(user1.getMetadataKey(), privilege1.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user1.getMetadataKey(), privilege2.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user2.getMetadataKey(), privilege2.getMetadataKey());\n-//\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user1.getMetadataKey()))\n-//                .containsOnly(privilege1, privilege2);\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user2.getMetadataKey()))\n-//                .containsOnly(privilege2);\n-//\n-//        UserConfiguration.getInstance().removeAuthority(user1.getMetadataKey(), privilege1.getMetadataKey());\n-//\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user1.getMetadataKey()))\n-//                .containsOnly(privilege2);\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user2.getMetadataKey()))\n-//                .containsOnly(privilege2);\n-//    }\n-//\n-//    @Test\n-//    void removeAuthorityByName() {\n-//        UserConfiguration.getInstance().insert(user1);\n-//        UserConfiguration.getInstance().insert(user2);\n-//        AuthorityConfiguration.getInstance().insert(privilege1);\n-//        AuthorityConfiguration.getInstance().insert(privilege2);\n-//        UserConfiguration.getInstance().addAuthority(user1.getUsername(), privilege1.getPrivilege());\n-//        UserConfiguration.getInstance().addAuthority(user1.getUsername(), privilege2.getPrivilege());\n-//        UserConfiguration.getInstance().addAuthority(user2.getUsername(), privilege2.getPrivilege());\n-//\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user1.getUsername()))\n-//                .containsOnly(privilege1, privilege2);\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user2.getUsername()))\n-//                .containsOnly(privilege2);\n-//\n-//        UserConfiguration.getInstance().removeAuthority(user1.getUsername(), privilege1.getPrivilege());\n-//\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user1.getMetadataKey()))\n-//                .containsOnly(privilege2);\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user2.getMetadataKey()))\n-//                .containsOnly(privilege2);\n-//    }\n-//\n-//    @Test\n-//    void getAuthorities() {\n-//        UserConfiguration.getInstance().insert(user1);\n-//        UserConfiguration.getInstance().insert(user2);\n-//        AuthorityConfiguration.getInstance().insert(privilege1);\n-//        AuthorityConfiguration.getInstance().insert(privilege2);\n-//        AuthorityConfiguration.getInstance().insert(privilege3);\n-//        AuthorityConfiguration.getInstance().insert(privilege4);\n-//        TeamConfiguration.getInstance().insert(role1);\n-//        TeamConfiguration.getInstance().insert(role2);\n-//        TeamConfiguration.getInstance().addAuthority(role1.getMetadataKey(), privilege3.getMetadataKey());\n-//        TeamConfiguration.getInstance().addAuthority(role1.getMetadataKey(), privilege4.getMetadataKey());\n-//        TeamConfiguration.getInstance().addAuthority(role2.getMetadataKey(), privilege3.getMetadataKey());\n-//        TeamConfiguration.getInstance().addUser(role1.getMetadataKey(), user1.getMetadataKey());\n-//        TeamConfiguration.getInstance().addUser(role2.getMetadataKey(), user2.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user1.getMetadataKey(), privilege1.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user1.getMetadataKey(), privilege2.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user2.getMetadataKey(), privilege2.getMetadataKey());\n-//\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user1.getMetadataKey()))\n-//                .containsOnly(privilege1, privilege2, privilege3, privilege4);\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user2.getMetadataKey()))\n-//                .containsOnly(privilege2, privilege3);\n-//    }\n-//\n-//    @Test\n-//    void getAuthoritiesByName() {\n-//        UserConfiguration.getInstance().insert(user1);\n-//        UserConfiguration.getInstance().insert(user2);\n-//        AuthorityConfiguration.getInstance().insert(privilege1);\n-//        AuthorityConfiguration.getInstance().insert(privilege2);\n-//        AuthorityConfiguration.getInstance().insert(privilege3);\n-//        AuthorityConfiguration.getInstance().insert(privilege4);\n-//        TeamConfiguration.getInstance().insert(role1);\n-//        TeamConfiguration.getInstance().insert(role2);\n-//        TeamConfiguration.getInstance().addAuthority(role1.getMetadataKey(), privilege3.getMetadataKey());\n-//        TeamConfiguration.getInstance().addAuthority(role1.getMetadataKey(), privilege4.getMetadataKey());\n-//        TeamConfiguration.getInstance().addAuthority(role2.getMetadataKey(), privilege3.getMetadataKey());\n-//        TeamConfiguration.getInstance().addUser(role1.getMetadataKey(), user1.getMetadataKey());\n-//        TeamConfiguration.getInstance().addUser(role2.getMetadataKey(), user2.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user1.getMetadataKey(), privilege1.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user1.getMetadataKey(), privilege2.getMetadataKey());\n-//        UserConfiguration.getInstance().addAuthority(user2.getMetadataKey(), privilege2.getMetadataKey());\n-//\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user1.getUsername()))\n-//                .containsOnly(privilege1, privilege2, privilege3, privilege4);\n-//        assertThat(UserConfiguration.getInstance().getAuthorities(user2.getUsername()))\n-//                .containsOnly(privilege2, privilege3);\n-//    }\n-\n-\n }"
  },
  {
    "sha": "013b65d3d02646edf6671e3381111dfe0fb26819",
    "filename": "core/java/iesi-rest-without-microservices/pom.xml",
    "status": "modified",
    "additions": 27,
    "deletions": 38,
    "changes": 65,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/pom.xml",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/pom.xml",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/pom.xml?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -30,15 +30,7 @@\n             <properties>\n                 <packaging.type>war</packaging.type>\n                 <start-class>io.metadew.iesi.server.rest.ApplicationWar</start-class>\n-                <!--                <tomcat.version>9.0.27</tomcat.version>-->\n             </properties>\n-            <!--            <dependencies>-->\n-            <!--            <dependency>-->\n-            <!--                <groupId>org.springframework.boot</groupId>-->\n-            <!--                <artifactId>spring-boot-starter-tomcat</artifactId>-->\n-            <!--                <scope>provided</scope>-->\n-            <!--            </dependency>-->\n-            <!--        </dependencies>-->\n         </profile>\n         <profile>\n             <id>report</id>\n@@ -103,11 +95,6 @@\n             <artifactId>iesi-core</artifactId>\n             <version>0.6.0</version>\n         </dependency>\n-        <dependency>\n-            <groupId>org.springdoc</groupId>\n-            <artifactId>springdoc-openapi-webmvc-core</artifactId>\n-            <version>1.3.0</version>\n-        </dependency>\n         <dependency>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-starter-web</artifactId>\n@@ -138,6 +125,33 @@\n             <groupId>org.springframework</groupId>\n             <artifactId>spring-jdbc</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-cache</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-hateoas</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-security</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-configuration-processor</artifactId>\n+            <optional>true</optional>\n+        </dependency>\n         <dependency>\n             <groupId>com.h2database</groupId>\n             <artifactId>h2</artifactId>\n@@ -167,33 +181,10 @@\n             <artifactId>jackson-dataformat-yaml</artifactId>\n             <version>2.9.9</version>\n         </dependency>\n-        <dependency>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-starter-hateoas</artifactId>\n-        </dependency>\n         <dependency>\n             <groupId>org.projectlombok</groupId>\n             <artifactId>lombok</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-starter-security</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.springframework.security</groupId>\n-            <artifactId>spring-security-test</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-starter-test</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-configuration-processor</artifactId>\n-            <optional>true</optional>\n-        </dependency>\n         <dependency>\n             <groupId>org.modelmapper</groupId>\n             <artifactId>modelmapper</artifactId>\n@@ -205,13 +196,11 @@\n             <version>2.2</version>\n             <scope>test</scope>\n         </dependency>\n-        <!-- https://mvnrepository.com/artifact/com.auth0/java-jwt -->\n         <dependency>\n             <groupId>com.auth0</groupId>\n             <artifactId>java-jwt</artifactId>\n             <version>3.10.3</version>\n         </dependency>\n-\n         <dependency>\n             <groupId>org.assertj</groupId>\n             <artifactId>assertj-core</artifactId>"
  },
  {
    "sha": "22783feb2b5923b381c95572534a87cf0f0c8c1e",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/actiontypes/ActionTypeController.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/actiontypes/ActionTypeController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/actiontypes/ActionTypeController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/actiontypes/ActionTypeController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -1,15 +1,16 @@\n package io.metadew.iesi.server.rest.actiontypes;\n \n import io.metadew.iesi.common.configuration.metadata.actiontypes.MetadataActionTypesConfiguration;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n import java.util.stream.Collectors;\n \n @RestController\n-@Tag(name = \"actionTypes\", description = \"Everything about action types\")\n @RequestMapping(\"/action-types\")\n public class ActionTypeController {\n "
  },
  {
    "sha": "1c850554cf2cd81529c3c7a37d81a7fbb36fc47d",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/component/ComponentsController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/component/ComponentsController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/component/ComponentsController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/component/ComponentsController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -9,7 +9,6 @@\n import io.metadew.iesi.server.rest.component.dto.ComponentDtoResourceAssembler;\n import io.metadew.iesi.server.rest.error.DataBadRequestException;\n import io.metadew.iesi.server.rest.resource.HalMultipleEmbeddedResource;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n@@ -25,7 +24,6 @@\n import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n \n @RestController\n-@Tag(name = \"components\", description = \"Everything about components\")\n @RequestMapping(\"/components\")\n public class ComponentsController {\n "
  },
  {
    "sha": "da68c20c1582f4380fd276994a0fa135d49317b9",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/ClockConfiguration.java",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/ClockConfiguration.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/ClockConfiguration.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/ClockConfiguration.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -0,0 +1,16 @@\n+package io.metadew.iesi.server.rest.configuration;\n+\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.time.Clock;\n+\n+@Configuration\n+public class ClockConfiguration {\n+\n+    @Bean\n+    public Clock clock() {\n+        return Clock.systemDefaultZone();\n+    }\n+\n+}"
  },
  {
    "sha": "ef5441220301a1f582ccb5283ce559c5bd9f6676",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/IesiConfiguration.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/IesiConfiguration.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/IesiConfiguration.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/IesiConfiguration.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -104,13 +104,13 @@ public UserConfiguration userConfiguration() {\n         return UserConfiguration.getInstance();\n     }\n \n-    @Bean\n+    @Bean(\"rawUserService\")\n     @DependsOn(\"frameworkInstance\")\n     public UserService userService() {\n         return UserService.getInstance();\n     }\n \n-    @Bean\n+    @Bean(\"rawTeamService\")\n     @DependsOn(\"frameworkInstance\")\n     public TeamService teamService() {\n         return TeamService.getInstance();\n@@ -122,7 +122,7 @@ public RoleService roleService() {\n         return RoleService.getInstance();\n     }\n \n-    @Bean\n+    @Bean(\"rawSecurityGroupService\")\n     @DependsOn(\"frameworkInstance\")\n     public SecurityGroupService securityGroupService() {\n         return SecurityGroupService.getInstance();"
  },
  {
    "sha": "1ade3e72f37502d65842ead6caef72ad99b2e617",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/OpenApiConfiguration.java",
    "status": "removed",
    "additions": 0,
    "deletions": 35,
    "changes": 35,
    "blob_url": "https://github.com/metadew/iesi/blob/7ba8a38382ed198f433a6ea777dcf20987ec2c3b/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/OpenApiConfiguration.java",
    "raw_url": "https://github.com/metadew/iesi/raw/7ba8a38382ed198f433a6ea777dcf20987ec2c3b/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/OpenApiConfiguration.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/OpenApiConfiguration.java?ref=7ba8a38382ed198f433a6ea777dcf20987ec2c3b",
    "patch": "@@ -1,35 +0,0 @@\n-package io.metadew.iesi.server.rest.configuration;\n-\n-import io.swagger.v3.oas.models.Components;\n-import io.swagger.v3.oas.models.OpenAPI;\n-import io.swagger.v3.oas.models.info.Info;\n-import io.swagger.v3.oas.models.info.License;\n-import io.swagger.v3.oas.models.security.SecurityScheme;\n-import io.swagger.v3.oas.models.tags.Tag;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-\n-@Configuration\n-public class OpenApiConfiguration {\n-\n-    @Bean\n-    public OpenAPI customOpenAPI() {\n-        return new OpenAPI().components(new Components().addSecuritySchemes(\"basicScheme\", new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"basic\"))).info(new Info().title(\"Custom API\").version(\"100\")).addTagsItem(new Tag().name(\"mytag\"));\n-    }\n-\n-    @Bean\n-    public OpenAPI customOpenAPI(@Value(\"${springdoc.version}\") String appVersion) {\n-        return new OpenAPI()\n-                .components(new Components()\n-                        .addSecuritySchemes(\"basicScheme\", new SecurityScheme()\n-                                .type(SecurityScheme.Type.HTTP)\n-                                .scheme(\"basic\")))\n-                .info(new Info()\n-                        .title(\"IESI API\")\n-                        .version(appVersion)\n-                        .license(new License()\n-                                .name(\"MIT\")\n-                                .url(\"https://github.com/metadew/iesi-doc/blob/master/LICENSE\")));\n-    }\n-}"
  },
  {
    "sha": "df330823b9bd6de3f89f91054153ff014494da51",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/caching/SimpleCacheCustomizer.java",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/caching/SimpleCacheCustomizer.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/caching/SimpleCacheCustomizer.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/caching/SimpleCacheCustomizer.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -0,0 +1,19 @@\n+package io.metadew.iesi.server.rest.configuration.caching;\n+\n+import org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer;\n+import org.springframework.cache.annotation.EnableCaching;\n+import org.springframework.cache.concurrent.ConcurrentMapCacheManager;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Collections;\n+\n+@Component\n+@EnableCaching\n+public class SimpleCacheCustomizer \n+  implements CacheManagerCustomizer<ConcurrentMapCacheManager> {\n+\n+    @Override\n+    public void customize(ConcurrentMapCacheManager cacheManager) {\n+        cacheManager.setCacheNames(Collections.singletonList(\"users\"));\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "25b15f653ec4717b99a01011a83bfa9038d39dfe",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/IesiUserDetails.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/IesiUserDetails.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/IesiUserDetails.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/IesiUserDetails.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -1,12 +1,14 @@\n package io.metadew.iesi.server.rest.configuration.security;\n \n import io.metadew.iesi.metadata.definition.user.User;\n+import lombok.Data;\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.userdetails.UserDetails;\n \n import java.util.Collection;\n import java.util.UUID;\n \n+@Data\n public class IesiUserDetails implements UserDetails {\n \n     private final User user;"
  },
  {
    "sha": "2017cafa465f7ebe28538c0105c442b2aa193794",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/IesiUserDetailsManager.java",
    "status": "modified",
    "additions": 28,
    "deletions": 35,
    "changes": 63,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/IesiUserDetailsManager.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/IesiUserDetailsManager.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/IesiUserDetailsManager.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -1,14 +1,10 @@\n package io.metadew.iesi.server.rest.configuration.security;\n \n-import io.metadew.iesi.metadata.configuration.user.TeamConfiguration;\n-import io.metadew.iesi.metadata.definition.security.SecurityGroup;\n-import io.metadew.iesi.metadata.definition.user.Privilege;\n-import io.metadew.iesi.metadata.definition.user.Role;\n import io.metadew.iesi.metadata.definition.user.User;\n-import io.metadew.iesi.metadata.service.user.UserService;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import io.metadew.iesi.server.rest.user.IUserService;\n+import io.metadew.iesi.server.rest.user.UserDto;\n+import lombok.extern.log4j.Log4j2;\n import org.springframework.context.annotation.DependsOn;\n-import org.springframework.context.annotation.Profile;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n@@ -18,47 +14,45 @@\n import org.springframework.security.provisioning.UserDetailsManager;\n import org.springframework.stereotype.Component;\n \n-import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n \n @Component\n-// @Profile(\"security\")\n @DependsOn(\"metadataRepositoryConfiguration\")\n+@Log4j2\n public class IesiUserDetailsManager implements UserDetailsManager {\n \n-    private TeamConfiguration teamConfiguration;\n+    private final IUserService userService;\n \n-    //TODO: move to Spring, extend JDBCUserDetailsManager. Override getXSql() methods to adhere to custom data model\n-    private UserService userService;\n-\n-    @Autowired\n-    public void setUserService(UserService userService) {\n+    public IesiUserDetailsManager(IUserService userService) {\n         this.userService = userService;\n     }\n \n-    @Autowired\n-    public void setTeamConfiguration(TeamConfiguration teamConfiguration) {\n-        this.teamConfiguration = teamConfiguration;\n-    }\n-\n     @Override\n     public IesiUserDetails loadUserByUsername(String name) {\n-        Set<IESIGrantedAuthority> iesiGrantedAuthorities = new HashSet<>();\n-        User user = userService\n-                .get(name)\n+        User rawUser = userService\n+                .getRawUser(name)\n                 .orElseThrow(() -> new UsernameNotFoundException(\"User \" + name + \" not found\"));\n \n-        for (Role role : userService.getRoles(user.getMetadataKey())) {\n-            Set<SecurityGroup> securityGroups = teamConfiguration.getSecurityGroups(role.getTeamKey());\n-            for (SecurityGroup securityGroup : securityGroups) {\n-                for (Privilege privilege : role.getPrivileges()) {\n-                    iesiGrantedAuthorities.add(new IESIGrantedAuthority(securityGroup, privilege));\n-                }\n-            }\n+        return new IesiUserDetails(rawUser, getGrantedAuthorities(name));\n+    }\n \n-        }\n-        return new IesiUserDetails(user, iesiGrantedAuthorities);\n+    public Set<IESIGrantedAuthority> getGrantedAuthorities(String username) {\n+        UserDto user = userService\n+                .get(username)\n+                .orElseThrow(() -> new UsernameNotFoundException(\"User \" + username + \" not found\"));\n+        return user.getRoles()\n+                .stream()\n+                .map(userRoleDto -> userRoleDto.getTeam().getSecurityGroups().stream()\n+                        .map(teamSecurityGroupDto -> userRoleDto.getPrivileges().stream()\n+                                .map(privilegeDto -> new IESIGrantedAuthority(teamSecurityGroupDto.getName(), privilegeDto.getPrivilege()))\n+                                .collect(Collectors.toSet())\n+                        )\n+                        .flatMap(Set::stream)\n+                        .collect(Collectors.toSet()))\n+                .flatMap(Set::stream)\n+                .collect(Collectors.toSet());\n     }\n \n     @Override\n@@ -84,8 +78,7 @@ public void changePassword(String oldPassword, String newPassword) {\n         if (currentUser == null) {\n             // This would indicate bad coding somewhere\n             throw new AccessDeniedException(\n-                    \"Can't change password as no Authentication object found in context \"\n-                            + \"for current user.\");\n+                    \"Can't change password as no Authentication object found in context for current user.\");\n         }\n \n         if (oldPassword.equals(newPassword)) {\n@@ -94,7 +87,7 @@ public void changePassword(String oldPassword, String newPassword) {\n         }\n \n         String username = currentUser.getName();\n-        User user = userService.get(username)\n+        User user = userService.getRawUser(username)\n                 .orElseThrow(() -> new RuntimeException(\"Could not find user with name \" + username));\n         if (!user.getPassword().equals(oldPassword)) {\n             throw new AccessDeniedException(\"old password does not match existing password\");"
  },
  {
    "sha": "e156bfb14af6f968d8018286b2cb13349ef3c795",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/ApiError.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/ApiError.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/ApiError.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/ApiError.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -18,9 +18,10 @@\n     private LocalDateTime timestamp;\n     private String message;\n \n-    public ApiError(HttpStatus status, Throwable ex) {\n+    public ApiError(HttpStatus status, Throwable ex, LocalDateTime timestamp) {\n         super();\n-        this.timestamp = LocalDateTime.now();\n+        // TODO: inject clock bean\n+        this.timestamp = timestamp;\n         this.status = status.value();\n         this.message = ex.getMessage();\n     }"
  },
  {
    "sha": "7145a4dc7ecc2353b99b05a359148ca26a0eb8ed",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/JWTAuthenticationFilter.java",
    "status": "modified",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/JWTAuthenticationFilter.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/JWTAuthenticationFilter.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/JWTAuthenticationFilter.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -3,7 +3,6 @@\n import com.auth0.jwt.exceptions.JWTVerificationException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.context.SecurityContextHolder;\n@@ -15,19 +14,23 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n \n @Component\n // @Profile(\"security\")\n public class JWTAuthenticationFilter extends OncePerRequestFilter {\n \n     private final JWTAuthenticationConverter jwtAuthenticationConverter;\n+    private final Clock clock;\n \n     @Value(\"${iesi.security.enabled:false}\")\n     private boolean enableSecurity;\n \n     @Autowired\n-    public JWTAuthenticationFilter(JWTAuthenticationConverter jwtAuthenticationConverter) {\n+    public JWTAuthenticationFilter(JWTAuthenticationConverter jwtAuthenticationConverter, Clock clock) {\n         this.jwtAuthenticationConverter = jwtAuthenticationConverter;\n+        this.clock = clock;\n     }\n \n     @Override\n@@ -52,7 +55,7 @@ public void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletR\n     public void setErrorResponse(HttpStatus status, HttpServletResponse response, Throwable ex) throws IOException {\n         response.setStatus(status.value());\n         response.setContentType(\"application/json\");\n-        ApiError apiError = new ApiError(status, ex);\n+        ApiError apiError = new ApiError(status, ex, LocalDateTime.now(clock));\n         String json = apiError.convertToJson();\n         response.getWriter().write(json);\n     }"
  },
  {
    "sha": "fbac9969cd00b1d61feaba457d1f11de8ca6acdf",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/JwtService.java",
    "status": "modified",
    "additions": 16,
    "deletions": 12,
    "changes": 28,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/JwtService.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/JwtService.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/configuration/security/jwt/JwtService.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -4,33 +4,39 @@\n import com.auth0.jwt.algorithms.Algorithm;\n import com.auth0.jwt.interfaces.DecodedJWT;\n import com.auth0.jwt.interfaces.JWTVerifier;\n-import io.metadew.iesi.server.rest.configuration.security.IESIGrantedAuthority;\n+import io.metadew.iesi.server.rest.configuration.security.IesiUserDetailsManager;\n import io.metadew.iesi.server.rest.user.AuthenticationResponse;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Profile;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.GrantedAuthority;\n import org.springframework.stereotype.Service;\n \n import java.sql.Timestamp;\n+import java.time.Clock;\n import java.time.LocalDateTime;\n import java.time.temporal.ChronoUnit;\n-import java.util.stream.Collectors;\n \n @Service\n // @Profile(\"security\")\n public class JwtService {\n \n     private static final String ISSUER = \"iesi\";\n-    private static final String AUTHORITIES_CLAIM = \"authorities\";\n+\n+    private final Clock clock;\n+\n+    private final IesiUserDetailsManager iesiUserDetailsManager;\n \n     @Value(\"${iesi.security.jwt.secret}\")\n     private String secret;\n \n     @Value(\"${iesi.security.jwt.expiry-date}\")\n     private Long accessTokenExpiryDate;\n \n+    public JwtService(Clock clock, IesiUserDetailsManager iesiUserDetailsManager) {\n+        this.clock = clock;\n+        this.iesiUserDetailsManager = iesiUserDetailsManager;\n+    }\n+\n     private DecodedJWT verify(String token) {\n         Algorithm algorithm = Algorithm.HMAC256(secret);\n         JWTVerifier verifier = JWT.require(algorithm)\n@@ -41,23 +47,21 @@ private DecodedJWT verify(String token) {\n \n     public UsernamePasswordAuthenticationToken generateUsernamePasswordAuthenticationToken(String token) {\n         DecodedJWT jwt = verify(token);\n-        return new UsernamePasswordAuthenticationToken(jwt.getSubject(), null, jwt.getClaim(AUTHORITIES_CLAIM).asList(String.class).stream()\n-                .map(IESIGrantedAuthority::new)\n-                .collect(Collectors.toList()));\n+        return new UsernamePasswordAuthenticationToken(\n+                jwt.getSubject(),\n+                null,\n+                iesiUserDetailsManager.getGrantedAuthorities(jwt.getSubject()));\n     }\n \n     public AuthenticationResponse generateAuthenticationResponse(Authentication authentication) {\n         Algorithm algorithm = Algorithm.HMAC256(secret);\n-        LocalDateTime now = LocalDateTime.now();\n+        LocalDateTime now = LocalDateTime.now(clock);\n         LocalDateTime expiresAt = now.plus(accessTokenExpiryDate, ChronoUnit.SECONDS);\n         String token = JWT.create()\n                 .withIssuer(ISSUER)\n                 .withSubject(authentication.getName())\n                 .withIssuedAt(Timestamp.valueOf(now))\n                 .withExpiresAt(Timestamp.valueOf(expiresAt))\n-                .withArrayClaim(AUTHORITIES_CLAIM, authentication.getAuthorities().stream()\n-                        .map(GrantedAuthority::getAuthority)\n-                        .toArray(String[]::new))\n                 .sign(algorithm);\n         return new AuthenticationResponse(token, ChronoUnit.SECONDS.between(now, expiresAt));\n     }"
  },
  {
    "sha": "7ed87645a973a345531f6b87ae3776bb39ccfdef",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/connection/ConnectionsController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/connection/ConnectionsController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/connection/ConnectionsController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/connection/ConnectionsController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -8,7 +8,6 @@\n import io.metadew.iesi.server.rest.connection.dto.ConnectionDtoResourceAssembler;\n import io.metadew.iesi.server.rest.error.DataBadRequestException;\n import io.metadew.iesi.server.rest.resource.HalMultipleEmbeddedResource;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n@@ -23,7 +22,6 @@\n import static io.metadew.iesi.server.rest.helper.Filter.distinctByKey;\n \n @RestController\n-@Tag(name = \"connections\", description = \"Everything about connections\")\n @RequestMapping(\"/connections\")\n public class ConnectionsController {\n "
  },
  {
    "sha": "c50b28635254646b70f635ceba6525aee78eb574",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/connectiontypes/ConnectionTypeController.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/connectiontypes/ConnectionTypeController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/connectiontypes/ConnectionTypeController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/connectiontypes/ConnectionTypeController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -1,15 +1,16 @@\n package io.metadew.iesi.server.rest.connectiontypes;\n \n import io.metadew.iesi.common.configuration.metadata.connectiontypes.MetadataConnectionTypesConfiguration;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n import java.util.stream.Collectors;\n \n @RestController\n-@Tag(name = \"connectionTypes\", description = \"Everything about connection types\")\n @RequestMapping(\"/connection-types\")\n public class ConnectionTypeController {\n "
  },
  {
    "sha": "333ef371042583014f386ee49b73d6f33ee51ccc",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/dataset/DatasetController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/dataset/DatasetController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/dataset/DatasetController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/dataset/DatasetController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -15,7 +15,6 @@\n import io.metadew.iesi.server.rest.dataset.implementation.DatasetImplementationDto;\n import io.metadew.iesi.server.rest.dataset.implementation.DatasetImplementationPostDto;\n import io.metadew.iesi.server.rest.dataset.implementation.inmemory.InMemoryDatasetImplementationPostDto;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import lombok.extern.log4j.Log4j2;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Page;\n@@ -35,7 +34,6 @@\n @Log4j2\n @RestController\n @CrossOrigin\n-@Tag(name = \"datasets\", description = \"Everything about datasets\")\n @RequestMapping(\"/datasets\")\n public class DatasetController {\n "
  },
  {
    "sha": "aef89e5b8a22b6e71b85323865d5b7a3ca28632c",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/dataset/implementation/DatasetImplementationController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/dataset/implementation/DatasetImplementationController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/dataset/implementation/DatasetImplementationController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/dataset/implementation/DatasetImplementationController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -5,7 +5,6 @@\n import io.metadew.iesi.datatypes.dataset.implementation.IDatasetImplementationService;\n import io.metadew.iesi.metadata.configuration.exception.MetadataDoesNotExistException;\n import io.metadew.iesi.server.rest.dataset.DatasetDto;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import lombok.extern.log4j.Log4j2;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageImpl;\n@@ -25,7 +24,6 @@\n @Log4j2\n @RestController\n @CrossOrigin\n-@Tag(name = \"datasetImplementations\", description = \"Everything about dataset implementations\")\n @RequestMapping(\"/datasetImplementations\")\n public class DatasetImplementationController {\n "
  },
  {
    "sha": "853d4c66349548d18472e528c03e185d8a54f899",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/environment/EnvironmentsController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/environment/EnvironmentsController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/environment/EnvironmentsController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/environment/EnvironmentsController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -11,7 +11,6 @@\n import io.metadew.iesi.server.rest.environment.dto.EnvironmentDtoResourceAssembler;\n import io.metadew.iesi.server.rest.error.DataBadRequestException;\n import io.metadew.iesi.server.rest.resource.HalMultipleEmbeddedResource;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n@@ -20,15 +19,13 @@\n \n import javax.validation.Valid;\n import java.util.List;\n-import java.util.Optional;\n import java.util.stream.Collectors;\n \n import static io.metadew.iesi.server.rest.helper.Filter.distinctByKey;\n import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;\n import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n \n @RestController\n-@Tag(name = \"environments\", description = \"Everything about environments\")\n @RequestMapping(\"/environments\")\n public class EnvironmentsController {\n "
  },
  {
    "sha": "b9b2b301affde45c9e3195e42ded6f9922cfe433",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/executionrequest/ExecutionRequestController.java",
    "status": "modified",
    "additions": 31,
    "deletions": 4,
    "changes": 35,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/executionrequest/ExecutionRequestController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/executionrequest/ExecutionRequestController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/executionrequest/ExecutionRequestController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -4,6 +4,8 @@\n import io.metadew.iesi.metadata.configuration.exception.MetadataDoesNotExistException;\n import io.metadew.iesi.metadata.configuration.script.ScriptConfiguration;\n import io.metadew.iesi.metadata.definition.execution.ExecutionRequest;\n+import io.metadew.iesi.metadata.definition.execution.ExecutionRequestStatus;\n+import io.metadew.iesi.metadata.definition.execution.NonAuthenticatedExecutionRequest;\n import io.metadew.iesi.metadata.definition.execution.key.ExecutionRequestKey;\n import io.metadew.iesi.metadata.definition.security.SecurityGroup;\n import io.metadew.iesi.metadata.service.user.IESIPrivilege;\n@@ -12,7 +14,6 @@\n import io.metadew.iesi.server.rest.executionrequest.dto.ExecutionRequestDtoModelAssembler;\n import io.metadew.iesi.server.rest.executionrequest.dto.ExecutionRequestPostDto;\n import io.metadew.iesi.server.rest.executionrequest.script.dto.ScriptExecutionRequestDto;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -26,13 +27,15 @@\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.web.bind.annotation.*;\n \n+import java.time.Clock;\n+import java.time.LocalDateTime;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.UUID;\n import java.util.stream.Collectors;\n \n \n @RestController\n-@Tag(name = \"execution requests\", description = \"Everything about execution requests\")\n @RequestMapping(\"/execution-requests\")\n public class ExecutionRequestController {\n \n@@ -41,16 +44,21 @@\n     private final PagedResourcesAssembler<ExecutionRequestDto> executionRequestDtoResourceAssemblerPage;\n     private final IesiSecurityChecker iesiSecurityChecker;\n     private final ScriptConfiguration scriptConfiguration;\n+    private final Clock clock;\n \n     @Autowired\n     ExecutionRequestController(ExecutionRequestService executionRequestService,\n                                ExecutionRequestDtoModelAssembler executionRequestDtoModelAssembler,\n-                               PagedResourcesAssembler<ExecutionRequestDto> executionRequestDtoResourceAssemblerPage, IesiSecurityChecker iesiSecurityChecker, ScriptConfiguration scriptConfiguration) {\n+                               PagedResourcesAssembler<ExecutionRequestDto> executionRequestDtoResourceAssemblerPage,\n+                               IesiSecurityChecker iesiSecurityChecker,\n+                               ScriptConfiguration scriptConfiguration,\n+                               Clock clock) {\n         this.executionRequestService = executionRequestService;\n         this.executionRequestDtoModelAssembler = executionRequestDtoModelAssembler;\n         this.executionRequestDtoResourceAssemblerPage = executionRequestDtoResourceAssemblerPage;\n         this.iesiSecurityChecker = iesiSecurityChecker;\n         this.scriptConfiguration = scriptConfiguration;\n+        this.clock = clock;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -109,7 +117,26 @@ public ExecutionRequestDto post(@RequestBody ExecutionRequestPostDto executionRe\n                         .collect(Collectors.toList()))) {\n             throw new AccessDeniedException(\"User is not allowed to delete this execution request\");\n         }\n-        ExecutionRequest executionRequest = executionRequestService.createExecutionRequest(executionRequestPostDto.convertToEntity());\n+\n+        String newExecutionRequestId = UUID.randomUUID().toString();\n+        ExecutionRequest executionRequest = NonAuthenticatedExecutionRequest.builder()\n+                .executionRequestKey(new ExecutionRequestKey(newExecutionRequestId))\n+                .name(executionRequestPostDto.getName())\n+                .context(executionRequestPostDto.getContext())\n+                .description(executionRequestPostDto.getDescription())\n+                .scope(executionRequestPostDto.getScope())\n+                .executionRequestLabels(executionRequestPostDto.getExecutionRequestLabels().stream()\n+                        .map(executionRequestLabelDto -> executionRequestLabelDto.convertToEntity(new ExecutionRequestKey(newExecutionRequestId)))\n+                        .collect(Collectors.toSet()))\n+                .email(executionRequestPostDto.getEmail())\n+                .scriptExecutionRequests(executionRequestPostDto.getScriptExecutionRequests().stream()\n+                        .map(scriptExecutionRequestPostDto -> scriptExecutionRequestPostDto.convertToEntity(newExecutionRequestId))\n+                        .collect(Collectors.toList()))\n+                .executionRequestStatus(ExecutionRequestStatus.NEW)\n+                .requestTimestamp(LocalDateTime.now(clock))\n+                .build();\n+\n+        executionRequest = executionRequestService.createExecutionRequest(executionRequest);\n         return executionRequestDtoModelAssembler.toModel(executionRequest);\n     }\n "
  },
  {
    "sha": "12ecf6e10633cf2d598c35e8110cb58133d572d2",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/executionrequest/dto/ExecutionRequestPostDto.java",
    "status": "modified",
    "additions": 2,
    "deletions": 28,
    "changes": 30,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/executionrequest/dto/ExecutionRequestPostDto.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/executionrequest/dto/ExecutionRequestPostDto.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/executionrequest/dto/ExecutionRequestPostDto.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -1,18 +1,13 @@\n package io.metadew.iesi.server.rest.executionrequest.dto;\n \n-import io.metadew.iesi.metadata.definition.execution.*;\n-import io.metadew.iesi.metadata.definition.execution.key.ExecutionRequestKey;\n-import io.metadew.iesi.metadata.definition.execution.script.ScriptExecutionRequest;\n-import io.metadew.iesi.metadata.definition.execution.script.ScriptExecutionRequestBuilderException;\n-import io.metadew.iesi.server.rest.executionrequest.script.dto.ScriptExecutionRequestDto;\n import io.metadew.iesi.server.rest.executionrequest.script.dto.ScriptExecutionRequestPostDto;\n import lombok.*;\n import org.springframework.hateoas.RepresentationModel;\n import org.springframework.hateoas.server.core.Relation;\n \n import java.time.LocalDateTime;\n-import java.util.*;\n-import java.util.stream.Collectors;\n+import java.util.HashSet;\n+import java.util.Set;\n \n \n @Data\n@@ -32,25 +27,4 @@\n     private Set<ScriptExecutionRequestPostDto> scriptExecutionRequests = new HashSet<>();\n     private Set<ExecutionRequestLabelDto> executionRequestLabels = new HashSet<>();\n \n-\n-    public ExecutionRequest convertToEntity() {\n-        String newExecutionRequestId = UUID.randomUUID().toString();\n-        return NonAuthenticatedExecutionRequest.builder()\n-                .executionRequestKey(new ExecutionRequestKey(newExecutionRequestId))\n-                .name(name)\n-                .context(context)\n-                .description(description)\n-                .scope(scope)\n-                .executionRequestLabels(executionRequestLabels.stream()\n-                        .map(executionRequestLabelDto -> executionRequestLabelDto.convertToEntity(new ExecutionRequestKey(newExecutionRequestId)))\n-                        .collect(Collectors.toSet()))\n-                .email(email)\n-                .scriptExecutionRequests(scriptExecutionRequests.stream()\n-                        .map(scriptExecutionRequestPostDto -> scriptExecutionRequestPostDto.convertToEntity(newExecutionRequestId))\n-                        .collect(Collectors.toList()))\n-                .executionRequestStatus(ExecutionRequestStatus.NEW)\n-                .requestTimestamp(LocalDateTime.now())\n-                .build();\n-    }\n-\n }"
  },
  {
    "sha": "c777eba36214a5cc1a20c0d5aa9dbf518e9bc9d9",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/impersonation/ImpersonationController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/impersonation/ImpersonationController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/impersonation/ImpersonationController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/impersonation/ImpersonationController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -8,7 +8,6 @@\n import io.metadew.iesi.server.rest.impersonation.dto.ImpersonationDto;\n import io.metadew.iesi.server.rest.impersonation.dto.ImpersonatonDtoResourceAssembler;\n import io.metadew.iesi.server.rest.resource.HalMultipleEmbeddedResource;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n@@ -24,7 +23,6 @@\n import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n \n @RestController\n-@Tag(name = \"impersonations\", description = \"Everything about impersonations\")\n @RequestMapping(\"/impersonations\")\n public class ImpersonationController {\n "
  },
  {
    "sha": "59bd4c87135e77ba737bed97d4514d4d3e513077",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/script/ScriptsController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/script/ScriptsController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/script/ScriptsController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/script/ScriptsController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -10,7 +10,6 @@\n import io.metadew.iesi.server.rest.error.DataBadRequestException;\n import io.metadew.iesi.server.rest.resource.HalMultipleEmbeddedResource;\n import io.metadew.iesi.server.rest.script.dto.*;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.ByteArrayResource;\n import org.springframework.core.io.Resource;\n@@ -36,7 +35,6 @@\n import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n \n @RestController\n-@Tag(name = \"scripts\", description = \"Everything about scripts\")\n @RequestMapping(\"/scripts\")\n public class ScriptsController {\n "
  },
  {
    "sha": "55748434d565c8f26474557ed861702557bc044e",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/scriptExecutionDto/ScriptExecutionDtoController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/scriptExecutionDto/ScriptExecutionDtoController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/scriptExecutionDto/ScriptExecutionDtoController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/scriptExecutionDto/ScriptExecutionDtoController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -3,7 +3,6 @@\n import io.metadew.iesi.metadata.configuration.exception.MetadataDoesNotExistException;\n import io.metadew.iesi.metadata.definition.execution.script.key.ScriptExecutionKey;\n import io.metadew.iesi.server.rest.resource.HalMultipleEmbeddedResource;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PostAuthorize;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -13,7 +12,6 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n-@Tag(name = \"script-executions\", description = \"Everything about script_executions\")\n @RestController\n @RequestMapping(\"/script-executions\")\n public class ScriptExecutionDtoController {"
  },
  {
    "sha": "9dc92237db792c7edd7cf371a5d01653648921f8",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/scriptResultDto/ScriptResultController.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/scriptResultDto/ScriptResultController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/scriptResultDto/ScriptResultController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/scriptResultDto/ScriptResultController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -5,7 +5,6 @@\n import io.metadew.iesi.server.rest.resource.HalMultipleEmbeddedResource;\n import io.metadew.iesi.server.rest.scriptResultDto.dto.ScriptResultDto;\n import io.metadew.iesi.server.rest.scriptResultDto.dto.ScriptResultDtoModelAssembler;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -16,7 +15,6 @@\n import java.util.stream.Collectors;\n \n @RestController\n-@Tag(name = \"scriptResults\", description = \"Everything about scriptResults\")\n @RequestMapping(\"/script-results\")\n public class ScriptResultController {\n     private final IScriptResultService scriptResultService;"
  },
  {
    "sha": "110a7c69121e045947058549ac92db58cf016eb0",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/ISecurityGroupDtoService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 15,
    "changes": 15,
    "blob_url": "https://github.com/metadew/iesi/blob/7ba8a38382ed198f433a6ea777dcf20987ec2c3b/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/ISecurityGroupDtoService.java",
    "raw_url": "https://github.com/metadew/iesi/raw/7ba8a38382ed198f433a6ea777dcf20987ec2c3b/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/ISecurityGroupDtoService.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/ISecurityGroupDtoService.java?ref=7ba8a38382ed198f433a6ea777dcf20987ec2c3b",
    "patch": "@@ -1,15 +0,0 @@\n-package io.metadew.iesi.server.rest.security_group;\n-\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.UUID;\n-\n-public interface ISecurityGroupDtoService {\n-\n-    Optional<SecurityGroupDto> get(String username);\n-\n-    Optional<SecurityGroupDto> get(UUID id);\n-\n-    Set<SecurityGroupDto> getAll();\n-\n-}"
  },
  {
    "sha": "635cb0f9fc174a7380d3d0ff080cb2cd1beeaff5",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/ISecurityGroupService.java",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/ISecurityGroupService.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/ISecurityGroupService.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/ISecurityGroupService.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -0,0 +1,38 @@\n+package io.metadew.iesi.server.rest.security_group;\n+\n+import io.metadew.iesi.metadata.definition.security.SecurityGroup;\n+import io.metadew.iesi.metadata.definition.security.SecurityGroupKey;\n+import io.metadew.iesi.metadata.definition.user.TeamKey;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+public interface ISecurityGroupService {\n+\n+    Optional<SecurityGroupDto> get(String username);\n+\n+    Optional<SecurityGroupDto> get(UUID id);\n+\n+    Set<SecurityGroupDto> getAll();\n+\n+    List<SecurityGroup> getAllRawSecurityGroups();\n+\n+    boolean exists(SecurityGroupKey securityGroupKey);\n+\n+    void addSecurityGroup(SecurityGroup securityGroup);\n+\n+    Optional<SecurityGroup> getRawSecurityGroup(SecurityGroupKey securityGroupKey);\n+\n+    Optional<SecurityGroup> getRawSecurityGroup(String securityGroupname);\n+\n+    void update(SecurityGroup securityGroup);\n+\n+    void delete(SecurityGroupKey securityGroupKey);\n+\n+    void addTeam(SecurityGroupKey securityGroupKey, TeamKey teamKey);\n+\n+    void deleteTeam(SecurityGroupKey securityGroupKey, TeamKey teamKey);\n+\n+}"
  },
  {
    "sha": "c902384bfd8a1f94972fd2a7f2f463ce200cd670",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/SecurityGroupController.java",
    "status": "modified",
    "additions": 7,
    "deletions": 13,
    "changes": 20,
    "blob_url": "https://github.com/metadew/iesi/blob/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/SecurityGroupController.java",
    "raw_url": "https://github.com/metadew/iesi/raw/ffac25e96de5cab18c0c43eb5fc89759934e7543/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/SecurityGroupController.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/SecurityGroupController.java?ref=ffac25e96de5cab18c0c43eb5fc89759934e7543",
    "patch": "@@ -3,10 +3,7 @@\n import io.metadew.iesi.metadata.definition.security.SecurityGroup;\n import io.metadew.iesi.metadata.definition.security.SecurityGroupKey;\n import io.metadew.iesi.metadata.definition.user.TeamKey;\n-import io.metadew.iesi.metadata.service.security.SecurityGroupService;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n import lombok.extern.log4j.Log4j2;\n-import org.springframework.context.annotation.Profile;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.*;\n@@ -18,20 +15,17 @@\n import java.util.stream.Collectors;\n \n @RestController\n-@Tag(name = \"security\", description = \"Everything about securities\")\n @RequestMapping(\"/security-groups\")\n @CrossOrigin\n @Log4j2\n public class SecurityGroupController {\n \n     public static final String PUBLIC_GROUP_NAME = \"PUBLIC\";\n \n-    private final SecurityGroupService securityGroupService;\n-    private final ISecurityGroupDtoService securityGroupDtoService;\n+    private final ISecurityGroupService securityGroupService;\n \n-    public SecurityGroupController(SecurityGroupService securityGroupService, ISecurityGroupDtoService securityGroupDtoService) {\n+    public SecurityGroupController(ISecurityGroupService securityGroupService) {\n         this.securityGroupService = securityGroupService;\n-        this.securityGroupDtoService = securityGroupDtoService;\n     }\n \n     @PostConstruct\n@@ -58,15 +52,15 @@ void checkPublicSecurityGroup() {\n                 .securedObjects(new HashSet<>())\n                 .build();\n         securityGroupService.addSecurityGroup(securityGroup);\n-        return ResponseEntity.of(securityGroupDtoService.get(securityGroup.getMetadataKey().getUuid()));\n+        return ResponseEntity.of(securityGroupService.get(securityGroup.getMetadataKey().getUuid()));\n     }\n \n     @PostMapping(\"/{uuid}/teams\")\n     @PreAuthorize(\"hasPrivilege('GROUPS_WRITE')\")\n     public ResponseEntity<SecurityGroupDto> addTeam(@PathVariable UUID uuid, @RequestBody SecurityGroupTeamPutDto securityGroupTeamPutDto) {\n         if (securityGroupService.exists(new SecurityGroupKey(uuid))) {\n             securityGroupService.addTeam(new SecurityGroupKey(uuid), new TeamKey(securityGroupTeamPutDto.getId()));\n-            return ResponseEntity.of(securityGroupDtoService.get(uuid));\n+            return ResponseEntity.of(securityGroupService.get(uuid));\n         } else {\n             return ResponseEntity.notFound().build();\n         }\n@@ -87,7 +81,7 @@ void checkPublicSecurityGroup() {\n     @PreAuthorize(\"hasPrivilege('GROUPS_READ')\")\n     public ResponseEntity<SecurityGroupDto> fetch(@PathVariable UUID uuid) {\n         return ResponseEntity\n-                .of(securityGroupDtoService.get(uuid));\n+                .of(securityGroupService.get(uuid));\n     }\n \n     @PutMapping(\"/{uuid}\")\n@@ -103,13 +97,13 @@ void checkPublicSecurityGroup() {\n                 .build();\n         securityGroupService.update(securityGroup);\n         return ResponseEntity\n-                .of(securityGroupDtoService.get(uuid));\n+                .of(securityGroupService.get(uuid));\n     }\n \n     @GetMapping(\"\")\n     @PreAuthorize(\"hasPrivilege('GROUPS_READ')\")\n     public Set<SecurityGroupDto> fetchAll() {\n-        return securityGroupDtoService.getAll();\n+        return securityGroupService.getAll();\n     }\n \n     @DeleteMapping(\"/{uuid}\")"
  },
  {
    "sha": "7f18581a45e7a92476a08a0c5e8f592696f197f0",
    "filename": "core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/SecurityGroupDtoService.java",
    "status": "removed",
    "additions": 0,
    "deletions": 32,
    "changes": 32,
    "blob_url": "https://github.com/metadew/iesi/blob/7ba8a38382ed198f433a6ea777dcf20987ec2c3b/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/SecurityGroupDtoService.java",
    "raw_url": "https://github.com/metadew/iesi/raw/7ba8a38382ed198f433a6ea777dcf20987ec2c3b/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/SecurityGroupDtoService.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-rest-without-microservices/src/main/java/io/metadew/iesi/server/rest/security_group/SecurityGroupDtoService.java?ref=7ba8a38382ed198f433a6ea777dcf20987ec2c3b",
    "patch": "@@ -1,32 +0,0 @@\n-package io.metadew.iesi.server.rest.security_group;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.UUID;\n-\n-@Service\n-public class SecurityGroupDtoService implements ISecurityGroupDtoService {\n-\n-    private final ISecurityGroupDtoRepository securityGroupDtoRepository;\n-\n-    @Autowired\n-    public SecurityGroupDtoService(ISecurityGroupDtoRepository securityGroupDtoRepository) {\n-        this.securityGroupDtoRepository = securityGroupDtoRepository;\n-    }\n-\n-    public Optional<SecurityGroupDto> get(String username) {\n-        return securityGroupDtoRepository.get(username);\n-    }\n-\n-    public Optional<SecurityGroupDto> get(UUID id) {\n-        return securityGroupDtoRepository.get(id);\n-    }\n-\n-    public Set<SecurityGroupDto> getAll() {\n-        return securityGroupDtoRepository.getAll();\n-    }\n-\n-}"
  }
]
