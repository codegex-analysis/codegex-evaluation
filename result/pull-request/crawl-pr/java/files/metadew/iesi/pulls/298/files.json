[
  {
    "sha": "3690db3a689cd522fb20e07ad5a4aaccd5965450",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ComponentParser.java",
    "status": "modified",
    "additions": 22,
    "deletions": 9,
    "changes": 31,
    "blob_url": "https://github.com/metadew/iesi/blob/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ComponentParser.java",
    "raw_url": "https://github.com/metadew/iesi/raw/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ComponentParser.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ComponentParser.java?ref=496a5e465cd1074a65498dcccd8bd40686cbd210",
    "patch": "@@ -26,6 +26,7 @@\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n+\n @Log4j2\n @Data\n public class ComponentParser {\n@@ -50,7 +51,6 @@ public static synchronized ComponentParser getInstance() {\n \n     public List<Component> parse(OpenAPI openAPI) {\n         List<Component> components = new ArrayList<>();\n-\n         Paths paths = openAPI.getPaths();\n         Map<String, SecurityScheme> securitySchemeMap = openAPI.getComponents().getSecuritySchemes();\n         String connectionName = openAPI.getInfo().getTitle();\n@@ -60,6 +60,7 @@ public static synchronized ComponentParser getInstance() {\n             PathItem pathItem = path.getValue();\n             Map<PathItem.HttpMethod, Operation> operations = pathItem.readOperationsMap();\n \n+\n             for (Entry<PathItem.HttpMethod, Operation> operationEntry : operations.entrySet()) {\n                 components.addAll(createComponentsForOperation(\n                         connectionName, componentVersion, path.getKey(), operationEntry.getKey(), operationEntry.getValue(),\n@@ -100,6 +101,7 @@ public static synchronized ComponentParser getInstance() {\n         return components;\n     }\n \n+\n     private Component createBaseComponent(String componentName, Long componentVersion, String description) {\n         ComponentKey componentKey = new ComponentKey(\n                 IdentifierTools.getComponentIdentifier(componentName),\n@@ -141,12 +143,14 @@ private Component createBaseComponent(String componentName, Long componentVersio\n \n         if (securityRequirements != null) {\n             securities.addAll(securityRequirements.stream()\n+\n                     .map(securityRequirement -> (String) securityRequirement.keySet().toArray()[0])\n                     .collect(Collectors.toList()));\n         }\n         return securities;\n     }\n \n+\n     public List<String> getRequestContents(RequestBody requestBody) {\n         if (requestBody != null && requestBody.getContent() != null) {\n             return new ArrayList<>(requestBody.getContent().keySet());\n@@ -156,6 +160,7 @@ private Component createBaseComponent(String componentName, Long componentVersio\n \n     public List<String> getResponseContents(ApiResponses apiResponses) {\n \n+\n         if (apiResponses != null) {\n             for (Entry<String, ApiResponse> entry : apiResponses.entrySet()) {\n                 String statusCode = entry.getKey();\n@@ -175,6 +180,7 @@ private Component createBaseComponent(String componentName, Long componentVersio\n             return result;\n         }\n         if (lists.get(depth).isEmpty()) {\n+\n             generateNames(lists, result, depth + 1, createName(null, current, depth));\n         }\n         for (int i = 0; i < lists.get(depth).size(); i++) {\n@@ -185,6 +191,7 @@ private Component createBaseComponent(String componentName, Long componentVersio\n         return result;\n     }\n \n+\n     public Map<String, String> createName(String value, Map<String, String> current, int depth) {\n         switch (depth) {\n             case 0:\n@@ -214,7 +221,7 @@ public void addComponentParameters(String connectionName, String pathName, PathI\n \n     public List<ComponentParameter> getInfo(ComponentKey componentKey, String pathName, PathItem.HttpMethod operationName, String connectionName) {\n         List<ComponentParameter> componentParameters = new ArrayList<>();\n-        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"endpoint\"),  pathName.replaceAll(\"[{}]\", \"#\")));\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"endpoint\"), pathName.replaceAll(\"[{}]\", \"#\")));\n         componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"type\"), operationName.name()));\n         componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"connection\"), connectionName));\n         return componentParameters;\n@@ -272,15 +279,19 @@ public void addComponentParameters(String connectionName, String pathName, PathI\n             }\n         }\n \n-        for (Parameter parameter : operation.getParameters()) {\n-            String parameterName = parameter.getName();\n-            if (parameter.getIn().equals(\"header\") && !partNames.containsValue(parameterName)) {\n-                parameters.add(new ComponentParameter(\n-                        new ComponentParameterKey(componentKey, String.format(HEADER, ++position)),\n-                        String.format(\"%s, #%s#\", parameterName, parameterName)));\n+        if (operation.getParameters() != null) {\n+            for (Parameter parameter : operation.getParameters()) {\n+                String parameterName = parameter.getName();\n+                if (parameter.getIn().equals(\"header\") && !partNames.containsValue(parameterName)) {\n+                    parameters.add(new ComponentParameter(\n+                            new ComponentParameterKey(componentKey, String.format(HEADER, ++position)),\n+                            String.format(\"%s, #%s#\", parameterName, parameterName)));\n+                }\n             }\n         }\n \n+\n+\n         return parameters;\n     }\n \n@@ -300,7 +311,7 @@ public String getSecurityHeaderValue(SecurityScheme securityScheme, String secur\n             //https://connect2id.com/learn/openid-connect\n             componentParameterValue = String.format(\"Host, #%s#\", securityName);\n         } else {\n-            throw new UnsuportedSecurityScheme(String.format(\"Provided a wrong/unsupported security schema type %s\", securityType));\n+            throw new UnsupportedSecurityScheme(String.format(\"Provided a wrong/unsupported security schema type %s\", securityType));\n         }\n         return componentParameterValue;\n     }\n@@ -310,6 +321,7 @@ public boolean isGreenStatus(String statusCode) {\n         return pattern.matcher(statusCode).matches();\n     }\n \n+\n     public String buildName(String operationId, Map<String, String> partNames) {\n         List<String> formattedPartNames = partNames.keySet().stream().map(key -> {\n             if (partNames.get(key) == null) {\n@@ -325,6 +337,7 @@ public String buildName(String operationId, Map<String, String> partNames) {\n         return operationId.concat(\".\" + String.join(\".\", formattedPartNames));\n     }\n \n+\n     public String serializeContentName(String contentName) {\n         switch (contentName) {\n             case \"application/json\":"
  },
  {
    "sha": "12396f6a88acf0b85b7ef6195c9d9f0c507b623e",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ConnectionParser.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/metadew/iesi/blob/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ConnectionParser.java",
    "raw_url": "https://github.com/metadew/iesi/raw/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ConnectionParser.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ConnectionParser.java?ref=496a5e465cd1074a65498dcccd8bd40686cbd210",
    "patch": "@@ -22,7 +22,7 @@\n     private ConnectionParser() {\n     }\n \n-    public static synchronized  ConnectionParser getInstance() {\n+    public static synchronized ConnectionParser getInstance() {\n         if (instance == null) {\n             instance = new ConnectionParser();\n         }\n@@ -76,6 +76,7 @@ public String getProtocol(URL url) {\n         return protocol.equals(\"http\") ? \"N\" : \"Y\";\n     }\n \n+\n     public Optional<String> getBaseUrl(URL url) {\n         String baseUrl = url.getFile();\n         if (baseUrl.equals(\"\")) return Optional.empty();"
  },
  {
    "sha": "4b7dd6e3acd3b86c294f2f656b0966033bc39ab2",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPIGenerator.java",
    "status": "modified",
    "additions": 54,
    "deletions": 19,
    "changes": 73,
    "blob_url": "https://github.com/metadew/iesi/blob/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPIGenerator.java",
    "raw_url": "https://github.com/metadew/iesi/raw/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPIGenerator.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPIGenerator.java?ref=496a5e465cd1074a65498dcccd8bd40686cbd210",
    "patch": "@@ -5,49 +5,84 @@\n import com.fasterxml.jackson.databind.ObjectWriter;\n import io.metadew.iesi.metadata.configuration.component.ComponentConfiguration;\n import io.metadew.iesi.metadata.configuration.connection.ConnectionConfiguration;\n+import io.metadew.iesi.metadata.configuration.exception.MetadataAlreadyExistsException;\n import io.metadew.iesi.metadata.definition.component.Component;\n import io.metadew.iesi.metadata.definition.connection.Connection;\n+import lombok.extern.log4j.Log4j2;\n \n import java.io.File;\n import java.io.IOException;\n import java.util.List;\n \n+@Log4j2\n public class OpenAPIGenerator {\n     private static OpenAPIGenerator instance;\n \n-    private OpenAPIGenerator() {}\n+    private OpenAPIGenerator() {\n+    }\n \n \n     public static synchronized OpenAPIGenerator getInstance() {\n-        if (instance  == null) {\n+        if (instance == null) {\n             instance = new OpenAPIGenerator();\n         }\n         return instance;\n     }\n \n-    public void generate(List<Connection> connections, List<Component> components) {\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-        ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+    public void generate(List<Connection> connections, List<Component> components, String target, boolean load) {\n         try {\n             for (Component component : components) {\n-                writer.writeValue(\n-                        new File(\"..\" + File.separator + \"metadata\" + File.separator + \"in\" + File.separator + \"new\" +\n-                                File.separator +  \"component_\" + component.getName() + \"_v\" +\n-                                component.getMetadataKey().getVersionNumber() + \".json\")\n-                        , component);\n-                ComponentConfiguration.getInstance().insert(component);\n+                saveComponentInDirectory(target, component);\n+                if (load) {\n+                    saveComponent(component);\n+                }\n             }\n             for (Connection connection : connections) {\n-                writer.writeValue(\n-                        new File(\"..\" + File.separator + \"metadata\" + File.separator + \"in\" + File.separator + \"new\" +\n-                                File.separator +  \"Connections.json\"),\n-                        connection);\n-                ConnectionConfiguration.getInstance().insert(connection);\n+                saveConnectionInDirectory(target, connection);\n+                if (load) {\n+                    saveConnection(connection);\n+                }\n             }\n-\n         } catch (IOException e) {\n-            e.printStackTrace();\n+            log.warn(e);\n+        }\n+    }\n+\n+    private void saveComponentInDirectory(String target, Component component) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+        writer.writeValue(\n+                new File(\n+                        target + File.separator + \"component_\" + component.getName() + \"_v\" +\n+                                component.getMetadataKey().getVersionNumber() + \".json\"), component);\n+\n+    }\n+\n+    private void saveConnectionInDirectory(String target, Connection connection) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+        String connectionName = connection.getMetadataKey().getName();\n+        String environmentName = connection.getMetadataKey().getEnvironmentKey().getName();\n+        writer.writeValue(new File(\n+                target + File.separator + connectionName + \"_\" + environmentName + \".json\"\n+        ), connection);\n+\n+    }\n+\n+    private void saveComponent(Component component) {\n+        try {\n+            ComponentConfiguration.getInstance().insert(component);\n+        } catch (MetadataAlreadyExistsException e) {\n+            ComponentConfiguration.getInstance().update(component);\n+        }\n+    }\n+\n+    private void saveConnection(Connection connection) {\n+        try {\n+            ConnectionConfiguration.getInstance().insert(connection);\n+        } catch (MetadataAlreadyExistsException e) {\n+            ConnectionConfiguration.getInstance().update(connection);\n+\n         }\n     }\n "
  },
  {
    "sha": "563b36b8a874f446ced858089aeb805de91bf3d7",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPILauncher.java",
    "status": "modified",
    "additions": 6,
    "deletions": 7,
    "changes": 13,
    "blob_url": "https://github.com/metadew/iesi/blob/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPILauncher.java",
    "raw_url": "https://github.com/metadew/iesi/raw/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPILauncher.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPILauncher.java?ref=496a5e465cd1074a65498dcccd8bd40686cbd210",
    "patch": "@@ -18,19 +18,19 @@\n public class OpenAPILauncher {\n \n     private static final String SOURCE = \"source\";\n+    private static final String TARGET = \"target\";\n+    private static final String LOAD = \"load\";\n \n \n     public static void main(String[] args) throws ParseException {\n         ThreadContext.clearAll();\n         Options options = new Options()\n-                .addOption(Option.builder(SOURCE).hasArg().desc(\"File that contains openapi documentation\").build());\n+                .addOption(Option.builder(SOURCE).hasArg().required(true).desc(\"File that contains openapi documentation\").build())\n+                .addOption(Option.builder(TARGET).hasArg().required(true).desc(\"Directory to save the configurations\").build())\n+                .addOption(Option.builder(LOAD).required(false).desc(\"If true, load the configurations in the database\").build());\n         CommandLineParser parser = new DefaultParser();\n         CommandLine line = parser.parse(options, args);\n \n-        if (!line.hasOption(SOURCE)) {\n-            log.error(\"Please indicate the openapi file\");\n-            System.exit(0);\n-        }\n \n         Configuration.getInstance();\n         FrameworkCrypto.getInstance();\n@@ -40,8 +40,7 @@ public static void main(String[] args) throws ParseException {\n         List<Component> components = ComponentParser.getInstance().parse(openAPI);\n \n \n-        OpenAPIGenerator.getInstance().generate(connections, components);\n-\n+        OpenAPIGenerator.getInstance().generate(connections, components, line.getOptionValue(TARGET), line.hasOption(LOAD));\n     }\n \n "
  },
  {
    "sha": "63cb590a7a3ec54e872105ca046b67fb98a8ff5e",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/UnsuportedSecurityScheme.java",
    "status": "removed",
    "additions": 0,
    "deletions": 7,
    "changes": 7,
    "blob_url": "https://github.com/metadew/iesi/blob/a5e148dd14375cf5f42ff7a60be71218204867d4/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/UnsuportedSecurityScheme.java",
    "raw_url": "https://github.com/metadew/iesi/raw/a5e148dd14375cf5f42ff7a60be71218204867d4/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/UnsuportedSecurityScheme.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/UnsuportedSecurityScheme.java?ref=a5e148dd14375cf5f42ff7a60be71218204867d4",
    "patch": "@@ -1,7 +0,0 @@\n-package io.metadew.iesi.openapi;\n-\n-public class UnsuportedSecurityScheme extends RuntimeException {\n-    public UnsuportedSecurityScheme(String message) {\n-        super(message);\n-    }\n-}"
  },
  {
    "sha": "2b429729cb19a050edf7cec23498f921f23fcccf",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/UnsupportedSecurityScheme.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/metadew/iesi/blob/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/UnsupportedSecurityScheme.java",
    "raw_url": "https://github.com/metadew/iesi/raw/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/UnsupportedSecurityScheme.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/UnsupportedSecurityScheme.java?ref=496a5e465cd1074a65498dcccd8bd40686cbd210",
    "patch": "@@ -0,0 +1,7 @@\n+package io.metadew.iesi.openapi;\n+\n+public class UnsupportedSecurityScheme extends RuntimeException {\n+    public UnsupportedSecurityScheme(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "52b33f60572ced02c0bbaf562b5094c1ec41bfcc",
    "filename": "core/java/iesi-core/src/main/resources/application.yml",
    "status": "modified",
    "additions": 6,
    "deletions": 7,
    "changes": 13,
    "blob_url": "https://github.com/metadew/iesi/blob/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/resources/application.yml",
    "raw_url": "https://github.com/metadew/iesi/raw/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/main/resources/application.yml",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/resources/application.yml?ref=496a5e465cd1074a65498dcccd8bd40686cbd210",
    "patch": "@@ -1,13 +1,12 @@\n iesi:\n-  home: \".\"\n-\n-guard:\n+  guard:\n     authenticate: N\n-#  script:\n-#    execution:\n-#       runtime: ''\n+  #  script:\n+  #    execution:\n+  #       runtime: ''\n   server:\n-#    mode: off\n+    #    mode: off\n     mode: standalone\n     threads:\n       timeout: 30\n+  home: \".\""
  },
  {
    "sha": "39edef5f3c259f9bd28a79eccf1d32c37edc8e18",
    "filename": "core/java/iesi-core/src/test/java/io/metadew/iesi/openapi/ComponentParserTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 8,
    "changes": 18,
    "blob_url": "https://github.com/metadew/iesi/blob/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/test/java/io/metadew/iesi/openapi/ComponentParserTest.java",
    "raw_url": "https://github.com/metadew/iesi/raw/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/test/java/io/metadew/iesi/openapi/ComponentParserTest.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/test/java/io/metadew/iesi/openapi/ComponentParserTest.java?ref=496a5e465cd1074a65498dcccd8bd40686cbd210",
    "patch": "@@ -17,7 +17,8 @@\n import io.swagger.v3.oas.models.responses.ApiResponses;\n import io.swagger.v3.oas.models.security.SecurityRequirement;\n import io.swagger.v3.oas.models.security.SecurityScheme;\n-import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import java.util.*;\n import java.util.stream.Collectors;\n@@ -88,6 +89,7 @@ void getSecuritiesDefinedInParametersAndSecurities() {\n                         .addList(\"user_auth\"));\n \n         //TEST\n+\n         assertThat(ComponentParser.getInstance().getSecurities(operation, openAPI.getComponents().getSecuritySchemes()))\n                 .isEqualTo(new ArrayList<>(Arrays.asList(\"api_key\", \"petstore_auth\", \"user_auth\")));\n     }\n@@ -283,7 +285,7 @@ void getInfo() {\n         String pathName = \"/pet\";\n         ComponentKey componentKey = new ComponentKey(\n                 componentID,\n-              versionNumber);\n+                versionNumber);\n         List<ComponentParameter> componentParameters = new ArrayList<>();\n         PathItem.HttpMethod get = PathItem.HttpMethod.GET;\n \n@@ -346,10 +348,12 @@ void getHeaders() {\n         List<ComponentParameter> parameters = new ArrayList<>();\n         Parameter allowHeader = new Parameter().in(\"header\").name(\"Allow\");\n         Operation operation = new Operation().parameters(Collections.singletonList(allowHeader));\n+\n         ComponentKey componentKey = new ComponentKey(\n                 componentID,\n                 versionNumber);\n \n+\n         partNames.put(\"security\", \"petstore_auth\");\n         partNames.put(\"request\", \"application/x-www-form-urlencoded\");\n         partNames.put(\"response\", \"application/json\");\n@@ -381,9 +385,8 @@ void getHeaders() {\n         );\n \n         //TESTS\n-        assertThat(ComponentParser.getInstance().getHeaders(\n-                componentKey,partNames,operation,openAPI.getComponents().getSecuritySchemes()\n-        )).isEqualTo(parameters);\n+        assertThat(ComponentParser.getInstance().getHeaders(componentKey, partNames, operation, openAPI.getComponents().getSecuritySchemes()))\n+                .isEqualTo(parameters);\n \n     }\n \n@@ -411,9 +414,8 @@ void getHeadersWithNullValues() {\n \n \n         //TESTS\n-        assertThat(ComponentParser.getInstance().getHeaders(\n-                componentKey,partNames,operation,openAPI.getComponents().getSecuritySchemes()\n-        ))\n+        assertThat(ComponentParser.getInstance()\n+                .getHeaders(componentKey, partNames, operation, openAPI.getComponents().getSecuritySchemes()))\n                 .isEqualTo(parameters);\n \n     }"
  },
  {
    "sha": "52b33f60572ced02c0bbaf562b5094c1ec41bfcc",
    "filename": "core/java/iesi-core/src/test/resources/application.yml",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/metadew/iesi/blob/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/test/resources/application.yml",
    "raw_url": "https://github.com/metadew/iesi/raw/496a5e465cd1074a65498dcccd8bd40686cbd210/core/java/iesi-core/src/test/resources/application.yml",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/test/resources/application.yml?ref=496a5e465cd1074a65498dcccd8bd40686cbd210",
    "patch": "@@ -1,11 +1,11 @@\n iesi:\n   guard:\n     authenticate: N\n-#  script:\n-#    execution:\n-#       runtime: ''\n+  #  script:\n+  #    execution:\n+  #       runtime: ''\n   server:\n-#    mode: off\n+    #    mode: off\n     mode: standalone\n     threads:\n       timeout: 30"
  }
]
