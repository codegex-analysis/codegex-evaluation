[
  {
    "sha": "fadac705cb2f53c161f8f72ff56c2617e14b20c6",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ComponentParser.java",
    "status": "modified",
    "additions": 24,
    "deletions": 291,
    "changes": 315,
    "blob_url": "https://github.com/metadew/iesi/blob/4a17793b33ff2eb1a8101998723b12d375004524/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ComponentParser.java",
    "raw_url": "https://github.com/metadew/iesi/raw/4a17793b33ff2eb1a8101998723b12d375004524/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ComponentParser.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/ComponentParser.java?ref=4a17793b33ff2eb1a8101998723b12d375004524",
    "patch": "@@ -11,37 +11,23 @@\n import io.swagger.v3.oas.models.Operation;\n import io.swagger.v3.oas.models.PathItem;\n import io.swagger.v3.oas.models.Paths;\n-import io.swagger.v3.oas.models.media.Content;\n-import io.swagger.v3.oas.models.parameters.Parameter;\n-import io.swagger.v3.oas.models.parameters.RequestBody;\n-import io.swagger.v3.oas.models.responses.ApiResponse;\n-import io.swagger.v3.oas.models.responses.ApiResponses;\n-import io.swagger.v3.oas.models.security.SecurityRequirement;\n-import io.swagger.v3.oas.models.security.SecurityScheme;\n import lombok.Data;\n import lombok.extern.log4j.Log4j2;\n \n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Map.Entry;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n \n \n @Log4j2\n @Data\n public class ComponentParser {\n     private static ComponentParser instance;\n-    private static final String REQUEST = \"request\";\n-    private static final String SECURITY = \"security\";\n-    private static final String RESPONSE = \"response\";\n-    private static final String COMPONENT_TYPE = \"http.request\";\n-    private static final String HEADER = \"header.%s\";\n-\n \n     private ComponentParser() {\n     }\n \n-\n     public static synchronized ComponentParser getInstance() {\n         if (instance == null) {\n             instance = new ComponentParser();\n@@ -52,7 +38,6 @@ public static synchronized ComponentParser getInstance() {\n     public List<Component> parse(OpenAPI openAPI) {\n         List<Component> components = new ArrayList<>();\n         Paths paths = openAPI.getPaths();\n-        Map<String, SecurityScheme> securitySchemeMap = openAPI.getComponents().getSecuritySchemes();\n         String connectionName = openAPI.getInfo().getTitle();\n         Long componentVersion = Long.parseLong(openAPI.getInfo().getVersion());\n \n@@ -62,294 +47,42 @@ public static synchronized ComponentParser getInstance() {\n \n \n             for (Entry<PathItem.HttpMethod, Operation> operationEntry : operations.entrySet()) {\n-                components.addAll(createComponentsForOperation(\n-                        connectionName, componentVersion, path.getKey(), operationEntry.getKey(), operationEntry.getValue(),\n-                        securitySchemeMap\n+\n+                components.add(createComponent(\n+                        componentVersion,\n+                        connectionName,\n+                        operationEntry.getValue(),\n+                        path.getKey(),\n+                        operationEntry.getKey().toString()\n                 ));\n             }\n-\n         }\n \n         return components;\n     }\n \n-    public List<Component> createComponentsForOperation(String connectionName, Long componentVersion, String pathName,\n-                                                        PathItem.HttpMethod httpMethod, Operation operation,\n-                                                        Map<String, SecurityScheme> securitySchemeMap) {\n-        List<Component> components = new ArrayList<>();\n-        List<Map<String, String>> names = extractNames(operation, securitySchemeMap);\n-        String componentDescription = operation.getDescription();\n-\n-\n-        if (!names.isEmpty()) {\n-            for (Map<String, String> partNames : names) {\n-                Component baseComponent = createBaseComponent(buildName(operation.getOperationId(), partNames),\n-                        componentVersion, componentDescription);\n-                addComponentParameters(\n-                        connectionName, pathName, httpMethod, operation, partNames, baseComponent,\n-                        securitySchemeMap);\n-                components.add(baseComponent);\n-            }\n-        } else {\n-            Component baseComponent = createBaseComponent(operation.getOperationId(),\n-                    componentVersion, componentDescription);\n-            addComponentParameters(\n-                    connectionName, pathName, httpMethod, operation, new HashMap<>(), baseComponent,\n-                    securitySchemeMap);\n-            components.add(baseComponent);\n-        }\n-        return components;\n-    }\n-\n-\n-    private Component createBaseComponent(String componentName, Long componentVersion, String description) {\n+    public Component createComponent(Long componentVersion, String connectionName, Operation operation, String pathName, String method) {\n+        List<ComponentParameter> componentParameters = new ArrayList<>();\n         ComponentKey componentKey = new ComponentKey(\n-                IdentifierTools.getComponentIdentifier(componentName),\n+                IdentifierTools.getComponentIdentifier(operation.getOperationId()),\n                 componentVersion);\n-        return new Component(componentKey,\n-                COMPONENT_TYPE,\n-                componentName,\n-                description,\n-                new ComponentVersion(new ComponentVersionKey(componentKey), description),\n-                new ArrayList<>(),\n-                new ArrayList<>());\n-    }\n-\n-    private List<Map<String, String>> extractNames(Operation operation, Map<String, SecurityScheme> securitySchemeMap) {\n-        List<String> securities = getSecurities(operation, securitySchemeMap);\n-        List<String> requestContents = getRequestContents(operation.getRequestBody());\n-        List<String> responseContents = getResponseContents(operation.getResponses());\n-        List<List<String>> nameCombinations = new ArrayList<>(Arrays.asList(securities, requestContents, responseContents));\n-        List<Map<String, String>> names = new ArrayList<>();\n-\n-        if (!(securities.isEmpty() && requestContents.isEmpty() && responseContents.isEmpty())) {\n-            names = generateNames(nameCombinations, new ArrayList<>(), 0, new LinkedHashMap<>());\n-        }\n-        return names;\n-    }\n-\n-\n-    public List<String> getSecurities(Operation operation, Map<String, SecurityScheme> securitySchemeMap) {\n-        List<String> securities = new ArrayList<>();\n-        List<Parameter> parameters = operation.getParameters();\n-        List<SecurityRequirement> securityRequirements = operation.getSecurity();\n \n-        if (parameters != null) {\n-            securities = parameters.stream()\n-                    .map(Parameter::getName)\n-                    .filter(securitySchemeMap::containsKey)\n-                    .collect(Collectors.toList());\n-        }\n-\n-        if (securityRequirements != null) {\n-            securities.addAll(securityRequirements.stream()\n-\n-                    .map(securityRequirement -> (String) securityRequirement.keySet().toArray()[0])\n-                    .collect(Collectors.toList()));\n-        }\n-        return securities;\n-    }\n-\n-\n-    public List<String> getRequestContents(RequestBody requestBody) {\n-        if (requestBody != null && requestBody.getContent() != null) {\n-            return new ArrayList<>(requestBody.getContent().keySet());\n-        }\n-        return new ArrayList<>();\n-    }\n-\n-    public List<String> getResponseContents(ApiResponses apiResponses) {\n-\n-\n-        if (apiResponses != null) {\n-            for (Entry<String, ApiResponse> entry : apiResponses.entrySet()) {\n-                String statusCode = entry.getKey();\n-                Content content = entry.getValue().getContent();\n-\n-                if (content != null && (isGreenStatus(statusCode) || statusCode.equals(\"default\"))) {\n-                    return new ArrayList<>(content.keySet());\n-                }\n-            }\n-        }\n-        return new ArrayList<>();\n-    }\n-\n-    public List<Map<String, String>> generateNames(List<List<String>> lists, List<Map<String, String>> result, int depth, Map<String, String> current) {\n-        if (depth == lists.size()) {\n-            result.add(new HashMap<>(current));\n-            return result;\n-        }\n-        if (lists.get(depth).isEmpty()) {\n-\n-            generateNames(lists, result, depth + 1, createName(null, current, depth));\n-        }\n-        for (int i = 0; i < lists.get(depth).size(); i++) {\n-            String value = lists.get(depth).get(i);\n-            generateNames(lists, result, depth + 1, createName(value, current, depth));\n-        }\n-\n-        return result;\n-    }\n-\n-\n-    public Map<String, String> createName(String value, Map<String, String> current, int depth) {\n-        switch (depth) {\n-            case 0:\n-                current.put(SECURITY, value);\n-                break;\n-            case 1:\n-                current.put(REQUEST, value);\n-                break;\n-            case 2:\n-                current.put(RESPONSE, value);\n-                break;\n-            default:\n-                break;\n-        }\n-        return current;\n-    }\n-\n-\n-    public void addComponentParameters(String connectionName, String pathName, PathItem.HttpMethod httpMethod,\n-                                       Operation operation, Map<String, String> partNames, Component component,\n-                                       Map<String, SecurityScheme> securitySchemeMap) {\n-        component.getParameters().addAll(getInfo(component.getMetadataKey(), pathName, httpMethod, connectionName));\n-        component.getParameters().addAll(getQueryParams(component.getMetadataKey(), operation.getParameters()));\n-        component.getParameters().addAll(getHeaders(component.getMetadataKey(), partNames, operation,\n-                securitySchemeMap));\n-    }\n-\n-    public List<ComponentParameter> getInfo(ComponentKey componentKey, String pathName, PathItem.HttpMethod operationName, String connectionName) {\n-        List<ComponentParameter> componentParameters = new ArrayList<>();\n         componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"endpoint\"), pathName.replaceAll(\"[{}]\", \"#\")));\n-        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"type\"), operationName.name()));\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"type\"), method));\n         componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"connection\"), connectionName));\n-        return componentParameters;\n-    }\n-\n-    public List<ComponentParameter> getQueryParams(ComponentKey componentKey, List<Parameter> parameters) {\n-        int counter = 1;\n-        List<ComponentParameter> queryParams = new ArrayList<>();\n-\n-        if (parameters != null) {\n-            for (Parameter parameter : parameters) {\n-                if (parameter.getIn().equals(\"query\")) {\n-                    String parameterName = parameter.getName();\n-                    queryParams.add(new ComponentParameter(new ComponentParameterKey(componentKey, String.format(\"queryParam.%s\", counter)), String.format(\"%s, #%s#\", parameterName, parameterName)));\n-                    counter += 1;\n-                }\n-            }\n-        }\n-        return queryParams;\n-    }\n-\n-\n-    public List<ComponentParameter> getHeaders(ComponentKey componentKey, Map<String, String> partNames,\n-                                               Operation operation, Map<String, SecurityScheme> securitySchemeMap) {\n-        int position = 0;\n-        List<ComponentParameter> parameters = new ArrayList<>();\n-\n-        for (Entry<String, String> entry : partNames.entrySet()) {\n-            String value = entry.getValue();\n-            String key = entry.getKey();\n-            String componentParameterValue = null;\n-            if (value != null) {\n-                switch (key) {\n-                    case SECURITY:\n-                        SecurityScheme securityScheme = securitySchemeMap.get(value);\n-                        if (securityScheme == null) {\n-                            log.warn(String.format(\"The securityScheme %s provided doesn't exists in the documentation and will be ignored\", value));\n-                        } else {\n-                            componentParameterValue = getSecurityHeaderValue(securityScheme, value);\n-                        }\n-                        break;\n-                    case REQUEST:\n-                        componentParameterValue = String.format(\"Content-Type, %s\", value);\n-                        break;\n-                    case RESPONSE:\n-                        componentParameterValue = String.format(\"Accept, %s\", value);\n-                        break;\n-                    default:\n-                        throw new UnexpectedError(\"Unexpected error\");\n-                }\n-                parameters.add(\n-                        new ComponentParameter(new ComponentParameterKey(componentKey, String.format(HEADER, ++position)),\n-                                componentParameterValue)\n-                );\n-            }\n-        }\n \n-        if (operation.getParameters() != null) {\n-            for (Parameter parameter : operation.getParameters()) {\n-                String parameterName = parameter.getName();\n-                if (parameter.getIn().equals(\"header\") && !partNames.containsValue(parameterName)) {\n-                    parameters.add(new ComponentParameter(\n-                            new ComponentParameterKey(componentKey, String.format(HEADER, ++position)),\n-                            String.format(\"%s, #%s#\", parameterName, parameterName)));\n-                }\n-            }\n+        if (operation.getDescription() == null) {\n+            operation.setDescription(\"\");\n         }\n \n+        return new Component(\n+                componentKey,\n+                \"http.request\",\n+                operation.getOperationId(),\n+                operation.getDescription(),\n+                new ComponentVersion(new ComponentVersionKey(componentKey), operation.getDescription()),\n+                componentParameters,\n+                new ArrayList<>());\n \n-\n-        return parameters;\n-    }\n-\n-    public String getSecurityHeaderValue(SecurityScheme securityScheme, String securityName) {\n-        String scheme = securityScheme.getScheme();\n-        SecurityScheme.Type securityType = securityScheme.getType();\n-        String componentParameterValue;\n-\n-        if (securityType.equals(SecurityScheme.Type.OAUTH2) ||\n-                (securityType.equals(SecurityScheme.Type.HTTP) && scheme.equals(\"bearer\"))) {\n-            componentParameterValue = String.format(\"Authorization, Bearer #%s#\", securityName);\n-        } else if (securityScheme.getType().equals(SecurityScheme.Type.HTTP) && scheme.equals(\"basic\")) {\n-            componentParameterValue = String.format(\"Authorization, Basic #%s#\", securityName);\n-        } else if (securityScheme.getType().equals(SecurityScheme.Type.APIKEY)) {\n-            componentParameterValue = String.format(\"X-API-KEY, #%s#\", securityName);\n-        } else if (securityScheme.getType().equals(SecurityScheme.Type.OPENIDCONNECT)) {\n-            //https://connect2id.com/learn/openid-connect\n-            componentParameterValue = String.format(\"Host, #%s#\", securityName);\n-        } else {\n-            throw new UnsupportedSecurityScheme(String.format(\"Provided a wrong/unsupported security schema type %s\", securityType));\n-        }\n-        return componentParameterValue;\n-    }\n-\n-    public boolean isGreenStatus(String statusCode) {\n-        Pattern pattern = Pattern.compile(\"2[0-9][0-9]\");\n-        return pattern.matcher(statusCode).matches();\n-    }\n-\n-\n-    public String buildName(String operationId, Map<String, String> partNames) {\n-        List<String> formattedPartNames = partNames.keySet().stream().map(key -> {\n-            if (partNames.get(key) == null) {\n-                return \"_\";\n-            }\n-            if (key.equals(REQUEST) || key.equals(RESPONSE)) {\n-                return serializeContentName(partNames.get(key));\n-            }\n-            return partNames.get(key);\n-        }).collect(Collectors.toList());\n-\n-\n-        return operationId.concat(\".\" + String.join(\".\", formattedPartNames));\n-    }\n-\n-\n-    public String serializeContentName(String contentName) {\n-        switch (contentName) {\n-            case \"application/json\":\n-                return \"JSON\";\n-            case \"application/xml\":\n-                return \"XML\";\n-            case \"application/x-www-form-urlencoded\":\n-                return \"FORM\";\n-            case \"application/octet-stream\":\n-                return \"OCTETSTRM\";\n-            default:\n-                return \"??\";\n-        }\n     }\n }"
  },
  {
    "sha": "6375b6810d4a1b86d56a0a28dc48574ff6dfe3fe",
    "filename": "core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPILauncher.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/metadew/iesi/blob/4a17793b33ff2eb1a8101998723b12d375004524/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPILauncher.java",
    "raw_url": "https://github.com/metadew/iesi/raw/4a17793b33ff2eb1a8101998723b12d375004524/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPILauncher.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/main/java/io/metadew/iesi/openapi/OpenAPILauncher.java?ref=4a17793b33ff2eb1a8101998723b12d375004524",
    "patch": "@@ -34,8 +34,10 @@ public static void main(String[] args) throws ParseException {\n \n         Configuration.getInstance();\n         FrameworkCrypto.getInstance();\n+\n         OpenAPI openAPI = init(line.getOptionValue(SOURCE));\n \n+\n         List<Connection> connections = ConnectionParser.getInstance().parse(openAPI);\n         List<Component> components = ComponentParser.getInstance().parse(openAPI);\n "
  },
  {
    "sha": "e1c7d3b7f5e3b0d001ec69e3b8eebce801eb0013",
    "filename": "core/java/iesi-core/src/test/java/io/metadew/iesi/openapi/ComponentParserTest.java",
    "status": "modified",
    "additions": 71,
    "deletions": 406,
    "changes": 477,
    "blob_url": "https://github.com/metadew/iesi/blob/4a17793b33ff2eb1a8101998723b12d375004524/core/java/iesi-core/src/test/java/io/metadew/iesi/openapi/ComponentParserTest.java",
    "raw_url": "https://github.com/metadew/iesi/raw/4a17793b33ff2eb1a8101998723b12d375004524/core/java/iesi-core/src/test/java/io/metadew/iesi/openapi/ComponentParserTest.java",
    "contents_url": "https://api.github.com/repos/metadew/iesi/contents/core/java/iesi-core/src/test/java/io/metadew/iesi/openapi/ComponentParserTest.java?ref=4a17793b33ff2eb1a8101998723b12d375004524",
    "patch": "@@ -1,37 +1,32 @@\n package io.metadew.iesi.openapi;\n \n+import io.metadew.iesi.metadata.definition.component.Component;\n import io.metadew.iesi.metadata.definition.component.ComponentParameter;\n+import io.metadew.iesi.metadata.definition.component.ComponentVersion;\n import io.metadew.iesi.metadata.definition.component.key.ComponentKey;\n import io.metadew.iesi.metadata.definition.component.key.ComponentParameterKey;\n+import io.metadew.iesi.metadata.definition.component.key.ComponentVersionKey;\n import io.metadew.iesi.metadata.tools.IdentifierTools;\n import io.swagger.v3.oas.models.Components;\n import io.swagger.v3.oas.models.OpenAPI;\n import io.swagger.v3.oas.models.Operation;\n-import io.swagger.v3.oas.models.PathItem;\n import io.swagger.v3.oas.models.info.Info;\n-import io.swagger.v3.oas.models.media.Content;\n-import io.swagger.v3.oas.models.media.MediaType;\n-import io.swagger.v3.oas.models.parameters.Parameter;\n-import io.swagger.v3.oas.models.parameters.RequestBody;\n-import io.swagger.v3.oas.models.responses.ApiResponse;\n-import io.swagger.v3.oas.models.responses.ApiResponses;\n-import io.swagger.v3.oas.models.security.SecurityRequirement;\n import io.swagger.v3.oas.models.security.SecurityScheme;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n-import java.util.*;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.mock;\n \n-class ComponentParserTest {\n \n+class ComponentParserTest {\n \n     private OpenAPI openAPI;\n-    private long versionNumber;\n+    private long componentVersion;\n \n     @BeforeEach\n     void setup() {\n@@ -43,427 +38,97 @@ void setup() {\n                 .version(\"1\")\n                 .title(\"Swagger Petstore - OpenAPI 3.0\");\n         Map<String, SecurityScheme> securitySchemeMap = new HashMap<>();\n+      \n         securitySchemeMap.put(\"petstore_auth\", oAuthScheme);\n         securitySchemeMap.put(\"api_key\", apiKeyScheme);\n \n-\n         this.openAPI = new OpenAPI()\n                 .info(info)\n                 .components(new Components()\n                         .securitySchemes(securitySchemeMap));\n-        this.versionNumber = Long.parseLong(openAPI.getInfo().getVersion());\n-\n-    }\n-\n-    @Test\n-    void getNoSecurities() {\n-        Operation operation = new Operation()\n-                .parameters(null)\n-                .security(null);\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().getSecurities(operation, openAPI.getComponents().getSecuritySchemes()))\n-                .isEqualTo(new ArrayList<>());\n-    }\n-\n-    @Test\n-    void getSecuritiesNotDefinedInParameters() {\n-        Operation operation = new Operation()\n-                .parameters(null)\n-                .addSecurityItem(new SecurityRequirement()\n-                        .addList(\"petstore_auth\"))\n-                .addSecurityItem(new SecurityRequirement()\n-                        .addList(\"user_auth\"));\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().getSecurities(operation, openAPI.getComponents().getSecuritySchemes()))\n-                .isEqualTo(new ArrayList<>(Arrays.asList(\"petstore_auth\", \"user_auth\")));\n-    }\n-\n-    @Test\n-    void getSecuritiesDefinedInParametersAndSecurities() {\n-        Operation operation = new Operation()\n-                .addParametersItem(new Parameter().name(\"api_key\").in(\"header\"))\n-                .addSecurityItem(new SecurityRequirement()\n-                        .addList(\"petstore_auth\"))\n-                .addSecurityItem(new SecurityRequirement()\n-                        .addList(\"user_auth\"));\n-\n-        //TEST\n-\n-        assertThat(ComponentParser.getInstance().getSecurities(operation, openAPI.getComponents().getSecuritySchemes()))\n-                .isEqualTo(new ArrayList<>(Arrays.asList(\"api_key\", \"petstore_auth\", \"user_auth\")));\n-    }\n-\n-    @Test\n-    void getRequestContent() {\n-        RequestBody requestBody = new RequestBody()\n-                .content(new Content()\n-                        .addMediaType(\"application/json\", new MediaType())\n-                        .addMediaType(\"application/xml\", new MediaType()));\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().getRequestContents(requestBody))\n-                .isEqualTo(Stream.of(\"application/json\", \"application/xml\").collect(Collectors.toList()));\n-    }\n-\n-    @Test\n-    void getEmptyRequestContent() {\n-        RequestBody requestBody = new RequestBody().content(new Content());\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().getRequestContents(requestBody)).isEqualTo(new ArrayList<>());\n-    }\n-\n-\n-    @Test\n-    void getResponsesWith200Included() {\n-        ApiResponses apiResponses = new ApiResponses();\n-        ApiResponse response200 = new ApiResponse()\n-                .content(new Content()\n-                        .addMediaType(\"application/json\", new MediaType()));\n-\n-        apiResponses.put(\"200\", response200);\n-        apiResponses.put(\"400\", new ApiResponse());\n-        apiResponses.put(\"404\", new ApiResponse());\n-\n-\n-        //TEST\n-        assertThat(ComponentParser.getInstance().getResponseContents(apiResponses))\n-                .isEqualTo(new ArrayList<>(Collections.singletonList(\"application/json\")));\n-\n-    }\n-\n-    @Test\n-    void getResponsesWithNo200Included() {\n-        ApiResponses apiResponses = new ApiResponses();\n-\n-        apiResponses.put(\"400\", new ApiResponse());\n-        apiResponses.put(\"404\", new ApiResponse());\n-\n-\n-        //TEST\n-        assertThat(ComponentParser.getInstance().getResponseContents(apiResponses))\n-                .isEqualTo(new ArrayList<>());\n-    }\n-\n-    @Test\n-    void getResponsesWithNo200AndContentIncluded() {\n-        ApiResponses apiResponses = new ApiResponses();\n-        ApiResponse response404 = new ApiResponse()\n-                .content(new Content()\n-                        .addMediaType(\"application/json\", new MediaType()));\n-\n-        apiResponses.put(\"400\", new ApiResponse());\n-        apiResponses.put(\"404\", response404);\n-\n-        //TEST\n-        assertThat(ComponentParser.getInstance().getResponseContents(apiResponses))\n-                .isEqualTo(new ArrayList<>());\n-    }\n-\n-    @Test\n-    void getDefaultResponseWithContent() {\n-        ApiResponses apiResponses = new ApiResponses();\n-        ApiResponse defaultResponse = new ApiResponse()\n-                .content(new Content()\n-                        .addMediaType(\"application/json\", new MediaType())\n-                        .addMediaType(\"application/xml\", new MediaType())\n-                );\n-\n-        apiResponses.put(\"default\", defaultResponse);\n-\n-        //TEST\n-        assertThat(ComponentParser.getInstance().getResponseContents(apiResponses))\n-                .isEqualTo(new ArrayList<>(defaultResponse.getContent().keySet()));\n+        this.componentVersion = Long.parseLong(openAPI.getInfo().getVersion());\n     }\n-\n+  \n     @Test\n-    void getDefaultResponseWithoutContent() {\n-        ApiResponses apiResponses = new ApiResponses();\n-        apiResponses.put(\"default\", new ApiResponse());\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().getResponseContents(apiResponses))\n-                .isEqualTo(new ArrayList<>());\n-    }\n-\n-    @Test\n-    void generateNamesWithAll() {\n-        List<String> securities = Collections.singletonList(\"petstore_auth\");\n-        List<String> requestContents = Arrays.asList(\"application/x-www-form-urlencoded\", \"application/json\");\n-        List<String> responseContents = Collections.singletonList(\"application/xml\");\n-        List<List<String>> nameCombinations = new ArrayList<>(Arrays.asList(securities, requestContents, responseContents));\n-        HashMap<String, String> hashMap = new HashMap<>();\n-        List<HashMap<String, String>> names = new ArrayList<>();\n-\n-        hashMap.put(\"security\", \"petstore_auth\");\n-        hashMap.put(\"request\", \"application/x-www-form-urlencoded\");\n-        hashMap.put(\"response\", \"application/xml\");\n-        names.add(hashMap);\n-        hashMap = new HashMap<>();\n-        hashMap.put(\"security\", \"petstore_auth\");\n-        hashMap.put(\"request\", \"application/json\");\n-        hashMap.put(\"response\", \"application/xml\");\n-        names.add(hashMap);\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().generateNames(nameCombinations, new ArrayList<>(), 0, new LinkedHashMap<>()))\n-                .isEqualTo(names);\n-    }\n-\n-    @Test\n-    void generateNamesWitoutSecurity() {\n-        List<String> securities = new ArrayList<>();\n-        List<String> requestContents = Arrays.asList(\"application/x-www-form-urlencoded\", \"application/json\");\n-        List<String> responseContents = Collections.singletonList(\"application/xml\");\n-        List<List<String>> nameCombinations = new ArrayList<>(Arrays.asList(securities, requestContents, responseContents));\n-        HashMap<String, String> hashMap = new HashMap<>();\n-        List<HashMap<String, String>> names = new ArrayList<>();\n-\n-        hashMap.put(\"security\", null);\n-        hashMap.put(\"request\", \"application/x-www-form-urlencoded\");\n-        hashMap.put(\"response\", \"application/xml\");\n-        names.add(hashMap);\n-        hashMap = new HashMap<>();\n-        hashMap.put(\"security\", null);\n-        hashMap.put(\"request\", \"application/json\");\n-        hashMap.put(\"response\", \"application/xml\");\n-        names.add(hashMap);\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().generateNames(nameCombinations, new ArrayList<>(), 0, new LinkedHashMap<>()))\n-                .isEqualTo(names);\n-    }\n-\n-    @Test\n-    void generateNamesWitoutRequest() {\n-        List<String> securities = Collections.singletonList(\"petstore_auth\");\n-        List<String> requestContents = new ArrayList<>();\n-        List<String> responseContents = Collections.singletonList(\"application/xml\");\n-        List<List<String>> nameCombinations = new ArrayList<>(Arrays.asList(securities, requestContents, responseContents));\n-        HashMap<String, String> hashMap = new HashMap<>();\n-        List<HashMap<String, String>> names = new ArrayList<>();\n-\n-        hashMap.put(\"security\", \"petstore_auth\");\n-        hashMap.put(\"request\", null);\n-        hashMap.put(\"response\", \"application/xml\");\n-        names.add(hashMap);\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().generateNames(nameCombinations, new ArrayList<>(), 0, new LinkedHashMap<>()))\n-                .isEqualTo(names);\n-    }\n-\n-    @Test\n-    void generateNamesWhitoutResponse() {\n-        List<String> securities = Collections.singletonList(\"petstore_auth\");\n-        List<String> requestContents = Arrays.asList(\"application/x-www-form-urlencoded\", \"application/json\");\n-        List<String> responseContents = new ArrayList<>();\n-        List<List<String>> nameCombinations = new ArrayList<>(Arrays.asList(securities, requestContents, responseContents));\n-        HashMap<String, String> hashMap = new HashMap<>();\n-        List<HashMap<String, String>> names = new ArrayList<>();\n-\n-        hashMap.put(\"security\", \"petstore_auth\");\n-        hashMap.put(\"request\", \"application/x-www-form-urlencoded\");\n-        hashMap.put(\"response\", null);\n-        names.add(hashMap);\n-        hashMap = new HashMap<>();\n-        hashMap.put(\"security\", \"petstore_auth\");\n-        hashMap.put(\"request\", \"application/json\");\n-        hashMap.put(\"response\", null);\n-        names.add(hashMap);\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().generateNames(nameCombinations, new ArrayList<>(), 0, new LinkedHashMap<>()))\n-                .isEqualTo(names);\n-    }\n-\n-    @Test\n-    void getInfo() {\n-        String componentName = \"AUTH.JSON.JSON\";\n-        String componentID = IdentifierTools.getComponentIdentifier(componentName);\n-        String pathName = \"/pet\";\n-        ComponentKey componentKey = new ComponentKey(\n-                componentID,\n-                versionNumber);\n+    void createComponent() {\n+        Component component;\n         List<ComponentParameter> componentParameters = new ArrayList<>();\n-        PathItem.HttpMethod get = PathItem.HttpMethod.GET;\n-\n-        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentID, versionNumber, \"endpoint\"), pathName));\n-        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentID, versionNumber, \"type\"), get.name()));\n-        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentID, versionNumber, \"connection\"), openAPI.getInfo().getTitle()));\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().getInfo(componentKey, pathName, get, openAPI.getInfo().getTitle()))\n-                .isEqualTo(componentParameters);\n-    }\n-\n-    @Test\n-    void getInfoWithPathParam() {\n-        String componentName = \"AUTH.JSON.JSON\";\n-        String componentID = IdentifierTools.getComponentIdentifier(componentName);\n-        String pathName = \"/pet/{id}\";\n-        ComponentKey componentKey = new ComponentKey(\n-                componentID,\n-                versionNumber);\n-        List<ComponentParameter> componentParameters = new ArrayList<>();\n-        PathItem.HttpMethod get = PathItem.HttpMethod.GET;\n-\n-        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentID, versionNumber, \"endpoint\"), \"/pet/#id#\"));\n-        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentID, versionNumber, \"type\"), get.name()));\n-        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentID, versionNumber, \"connection\"), openAPI.getInfo().getTitle()));\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().getInfo(componentKey, pathName, get, openAPI.getInfo().getTitle()))\n-                .isEqualTo(componentParameters);\n-    }\n-\n-\n-    @Test\n-    void getQueryParams() {\n-        String componentName = \"AUTH.JSON.JSON\";\n-        String componentID = IdentifierTools.getComponentIdentifier(componentName);\n-        List<ComponentParameter> queryParams = new ArrayList<>();\n-        Parameter parameter = new Parameter().in(\"query\").name(\"findByStatus\");\n-        Parameter parameter1 = new Parameter().in(\"header\");\n+        String connectionName = \"Swagger Petstore - OpenAPI 3.0\";\n+        Operation operation = new Operation()\n+                .description(\"a description\")\n+                .operationId(\"operationId\");\n         ComponentKey componentKey = new ComponentKey(\n-                componentID,\n-                versionNumber);\n-\n+                IdentifierTools.getComponentIdentifier(operation.getOperationId()),\n+                componentVersion);\n \n-        queryParams.add(new ComponentParameter(\n-                new ComponentParameterKey(componentID, versionNumber, \"queryParam.1\"),\n-                \"findByStatus, #findByStatus#\"));\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"endpoint\"), \"/pet\"));\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"type\"), \"POST\"));\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"connection\"), connectionName));\n \n+        component = new Component(componentKey,\n+                \"http.request\",\n+                \"operationId\",\n+                \"a description\",\n+                new ComponentVersion(new ComponentVersionKey(componentKey), \"a description\"),\n+                componentParameters,\n+                new ArrayList<>());\n \n-        assertThat(ComponentParser.getInstance().getQueryParams(componentKey, Arrays.asList(parameter, parameter1)))\n-                .isEqualTo(queryParams);\n+        assertThat(ComponentParser.getInstance().createComponent(componentVersion, connectionName, operation, \"/pet\", \"POST\")).isEqualTo(component);\n     }\n \n     @Test\n-    void getHeaders() {\n-        String componentName = \"AUTH.JSON.JSON\";\n-        String componentID = IdentifierTools.getComponentIdentifier(componentName);\n-        HashMap<String, String> partNames = new LinkedHashMap<>();\n-        List<ComponentParameter> parameters = new ArrayList<>();\n-        Parameter allowHeader = new Parameter().in(\"header\").name(\"Allow\");\n-        Operation operation = new Operation().parameters(Collections.singletonList(allowHeader));\n+    void createComponentWithNullDescription() {\n+        Component component;\n+        List<ComponentParameter> componentParameters = new ArrayList<>();\n+        String connectionName = \"Swagger Petstore - OpenAPI 3.0\";\n+        Operation operation = new Operation()\n+                .description(null)\n+                .operationId(\"operationId\");\n \n         ComponentKey componentKey = new ComponentKey(\n-                componentID,\n-                versionNumber);\n+                IdentifierTools.getComponentIdentifier(operation.getOperationId()),\n+                componentVersion);\n \n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"endpoint\"), \"/pet\"));\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"type\"), \"POST\"));\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"connection\"), connectionName));\n \n-        partNames.put(\"security\", \"petstore_auth\");\n-        partNames.put(\"request\", \"application/x-www-form-urlencoded\");\n-        partNames.put(\"response\", \"application/json\");\n-\n-        parameters.add(\n-                new ComponentParameter(\n-                        new ComponentParameterKey(componentID, versionNumber, \"header.1\"),\n-                        \"Authorization, Bearer #petstore_auth#\"\n-                )\n-        );\n-        parameters.add(\n-                new ComponentParameter(\n-                        new ComponentParameterKey(componentID, versionNumber, \"header.2\"),\n-                        \"Content-Type, application/x-www-form-urlencoded\"\n-                )\n-        );\n-        parameters.add(\n-                new ComponentParameter(\n-                        new ComponentParameterKey(componentID, versionNumber, \"header.3\"),\n-                        \"Accept, application/json\"\n-                )\n-        );\n-\n-        parameters.add(\n-                new ComponentParameter(\n-                        new ComponentParameterKey(componentID, versionNumber, \"header.4\"),\n-                        \"Allow, #Allow#\"\n-                )\n-        );\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().getHeaders(componentKey, partNames, operation, openAPI.getComponents().getSecuritySchemes()))\n-                .isEqualTo(parameters);\n+        component = new Component(componentKey,\n+                \"http.request\",\n+                \"operationId\",\n+                \"\",\n+                new ComponentVersion(new ComponentVersionKey(componentKey), \"\"),\n+                componentParameters,\n+                new ArrayList<>());\n \n+        assertThat(ComponentParser.getInstance().createComponent(componentVersion, connectionName, operation, \"/pet\", \"POST\")).isEqualTo(component);\n     }\n \n     @Test\n-    void getHeadersWithNullValues() {\n-        String componentName = \"AUTH.JSON.JSON\";\n-        String componentID = IdentifierTools.getComponentIdentifier(componentName);\n-        HashMap<String, String> partNames = new LinkedHashMap<>();\n-        List<ComponentParameter> parameters = new ArrayList<>();\n-        Operation operation = mock(Operation.class);\n+    void createComponentWithPathParameter() {\n+        Component component;\n+        List<ComponentParameter> componentParameters = new ArrayList<>();\n+        String connectionName = \"Swagger Petstore - OpenAPI 3.0\";\n+        Operation operation = new Operation()\n+                .description(\"a description\")\n+                .operationId(\"operationId\");\n         ComponentKey componentKey = new ComponentKey(\n-                componentID,\n-                versionNumber);\n-\n-        partNames.put(\"security\", null);\n-        partNames.put(\"request\", \"application/x-www-form-urlencoded\");\n-        partNames.put(\"response\", null);\n-\n-        parameters.add(\n-                new ComponentParameter(\n-                        new ComponentParameterKey(componentID, versionNumber, \"header.1\"),\n-                        \"Content-Type, application/x-www-form-urlencoded\"\n-                )\n-        );\n-\n+                IdentifierTools.getComponentIdentifier(operation.getOperationId()),\n+                componentVersion);\n \n-        //TESTS\n-        assertThat(ComponentParser.getInstance()\n-                .getHeaders(componentKey, partNames, operation, openAPI.getComponents().getSecuritySchemes()))\n-                .isEqualTo(parameters);\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"endpoint\"), \"/pet/#id#\"));\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"type\"), \"POST\"));\n+        componentParameters.add(new ComponentParameter(new ComponentParameterKey(componentKey, \"connection\"), connectionName));\n \n-    }\n-\n-    @Test\n-    void buildName() {\n-        String operationId = \"updatePet\";\n-        HashMap<String, String> partNames = new LinkedHashMap<>();\n+        component = new Component(componentKey,\n+                \"http.request\",\n+                \"operationId\",\n+                \"a description\",\n+                new ComponentVersion(new ComponentVersionKey(componentKey), \"a description\"),\n+                componentParameters,\n+                new ArrayList<>());\n \n-        partNames.put(\"security\", \"petstore_auth\");\n-        partNames.put(\"request\", \"application/x-www-form-urlencoded\");\n-        partNames.put(\"response\", \"application/json\");\n+        assertThat(ComponentParser.getInstance().createComponent(componentVersion, connectionName, operation, \"/pet/{id}\", \"POST\")).isEqualTo(component);\n \n-        //TESTS\n-        assertThat(ComponentParser.getInstance().buildName(operationId, partNames))\n-                .isEqualTo(\"updatePet.petstore_auth.FORM.JSON\");\n     }\n-\n-    @Test\n-    void buildNameWithNullValues() {\n-        String operationId = \"updatePet\";\n-        HashMap<String, String> partNames = new LinkedHashMap<>();\n-\n-        partNames.put(\"security\", null);\n-        partNames.put(\"request\", null);\n-        partNames.put(\"response\", \"application/json\");\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().buildName(operationId, partNames))\n-                .isEqualTo(\"updatePet._._.JSON\");\n-    }\n-\n-    @Test\n-    void serializeContentNames() {\n-        String contentName = \"application/json\";\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().serializeContentName(contentName))\n-                .isEqualTo(\"JSON\");\n-    }\n-\n-    @Test\n-    void serializeUnknownContentNames() {\n-        String contentName = \"unknown/unknown\";\n-\n-        //TESTS\n-        assertThat(ComponentParser.getInstance().serializeContentName(contentName))\n-                .isEqualTo(\"??\");\n-    }\n-\n }"
  }
]
