[
  {
    "sha": "ec723d84892d8f6b396d067126bafd714cc27770",
    "filename": ".github/workflows/build-dev-branches.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/.github/workflows/build-dev-branches.yml",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/.github/workflows/build-dev-branches.yml",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/.github/workflows/build-dev-branches.yml?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -30,6 +30,7 @@ jobs:\n           fail_ci_if_error: true\n \n   windows-build:\n+    if: false # because there is no opentelemetry-jaeger-executable available\n     runs-on: windows-latest\n     steps:\n       - uses: actions/checkout@v2"
  },
  {
    "sha": "69e75f7adb2e97c47610d34a92162c54a26a8341",
    "filename": ".github/workflows/daily-build.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/.github/workflows/daily-build.yml",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/.github/workflows/daily-build.yml",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/.github/workflows/daily-build.yml?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -32,7 +32,8 @@ jobs:\n \n   windows-build:\n     runs-on: windows-latest\n-    if: github.repository_owner == 'ballerina-platform'\n+    if: false # because there is no opentelemetry-jaeger-executable available # uncomment following line when enabling\n+    # if: github.repository_owner == 'ballerina-platform'\n     steps:\n       - uses: actions/checkout@v2\n       - name: Set up JDK 11"
  },
  {
    "sha": "ed01f0637cc04d21e5ec97490c721541c67b1f3c",
    "filename": ".github/workflows/pull-request.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/.github/workflows/pull-request.yml",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/.github/workflows/pull-request.yml",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/.github/workflows/pull-request.yml?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -28,6 +28,7 @@ jobs:\n           fail_ci_if_error: true\n \n   windows-build:\n+    if: false # because there is no opentelemetry-jaeger-executable available\n     runs-on: windows-latest\n     steps:\n       - uses: actions/checkout@v2"
  },
  {
    "sha": "4c6c8ce461e2bf2f2eac08aaec1ad0180ad43334",
    "filename": "gradle.properties",
    "status": "modified",
    "additions": 9,
    "deletions": 5,
    "changes": 14,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/gradle.properties",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/gradle.properties",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/gradle.properties?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -21,11 +21,15 @@ org.gradle.jvmargs='-Dfile.encoding=UTF-8'\n org.gradle.workers.max=3\n \n # Native Dependency Versions\n-jaegerVersion=0.31.0\n-openTracingVersion=0.31.0\n-libThriftVersion=0.12.0\n-okHttpVersion=3.14.0\n-okIoVersion=2.2.2\n+jaegerVersion=1.5.0\n+openTelemetryVersion=1.0.0\n+openTelemetryAlphaVersion=1.0.0-alpha\n+guavaVersion=30.1-jre\n+failureAccessVersion=1.0.1\n+grpcVersion=1.35.0\n+protobufVersion=3.14.0\n+nettyVersion=4.1.52.Final\n+perfmarkVersion=0.23.0\n \n # Test Module Dependecy Versions\n stdlibHttpVersion=1.1.0-alpha5-SNAPSHOT"
  },
  {
    "sha": "e1bdd272edb15f696ef5677ea65c09259389cfd4",
    "filename": "jaeger-extension-ballerina/Ballerina.toml",
    "status": "modified",
    "additions": 120,
    "deletions": 24,
    "changes": 144,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-ballerina/Ballerina.toml",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-ballerina/Ballerina.toml",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-ballerina/Ballerina.toml?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -32,37 +32,133 @@ artifactId = \"jaeger-core\"\n version = \"@jaeger.version@\"\n \n [[platform.java11.dependency]]\n-path = \"./lib/jaeger-thrift-@jaeger.version@.jar\"\n-groupId = \"io.jaegertracing\"\n-artifactId = \"jaeger-thrift\"\n-version = \"@jaeger.version@\"\n+path = \"./lib/opentelemetry-api-@opentelemetry.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-api\"\n+version = \"@opentelemetry.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/opentelemetry-api-metrics-@openTelemetryAlpha.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-api-metrics\"\n+version = \"@openTelemetryAlpha.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/opentelemetry-context-@opentelemetry.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-context\"\n+version = \"@opentelemetry.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/opentelemetry-sdk-trace-@opentelemetry.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-sdk-trace\"\n+version = \"@opentelemetry.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/opentelemetry-sdk-common-@opentelemetry.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-sdk-common\"\n+version = \"@opentelemetry.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/opentelemetry-semconv-@openTelemetryAlpha.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-semconv\"\n+version = \"@openTelemetryAlpha.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/opentelemetry-proto-@openTelemetryAlpha.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-proto\"\n+version = \"@openTelemetryAlpha.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/opentelemetry-exporter-otlp-trace-@opentelemetry.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-exporter-otlp-trace\"\n+version = \"@opentelemetry.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/opentelemetry-exporter-otlp-common-@opentelemetry.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-exporter-otlp-common\"\n+version = \"@opentelemetry.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/opentelemetry-extension-trace-propagators-@opentelemetry.version@.jar\"\n+groupId = \"io.opentelemetry\"\n+artifactId = \"opentelemetry-extension-trace-propagators\"\n+version = \"@opentelemetry.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/guava-@guava.version@.jar\"\n+groupId = \"com.google.guava\"\n+artifactId = \"guava\"\n+version = \"@guava.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/failureaccess-@failureAccess.version@.jar\"\n+groupId = \"com.google.guava\"\n+artifactId = \"failureaccess\"\n+version = \"@failureAccess.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/grpc-api-@grpc.version@.jar\"\n+groupId = \"io.grpc\"\n+artifactId = \"grpc-api\"\n+version = \"@grpc.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/grpc-context-@grpc.version@.jar\"\n+groupId = \"io.grpc\"\n+artifactId = \"grpc-context\"\n+version = \"@grpc.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/grpc-core-@grpc.version@.jar\"\n+groupId = \"io.grpc\"\n+artifactId = \"grpc-core\"\n+version = \"@grpc.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/grpc-stub-@grpc.version@.jar\"\n+groupId = \"io.grpc\"\n+artifactId = \"grpc-stub\"\n+version = \"@grpc.version@\"\n+\n+[[platform.java11.dependency]]\n+path = \"./lib/grpc-protobuf-@grpc.version@.jar\"\n+groupId = \"io.grpc\"\n+artifactId = \"grpc-protobuf\"\n+version = \"@grpc.version@\"\n \n [[platform.java11.dependency]]\n-path = \"./lib/opentracing-util-@opentracing.version@.jar\"\n-groupId = \"io.opentracing\"\n-artifactId = \"opentracing-util\"\n-version = \"@opentracing.version@\"\n+path = \"./lib/grpc-protobuf-lite-@grpc.version@.jar\"\n+groupId = \"io.grpc\"\n+artifactId = \"grpc-protobuf-lite\"\n+version = \"@grpc.version@\"\n \n [[platform.java11.dependency]]\n-path = \"./lib/opentracing-noop-@opentracing.version@.jar\"\n-groupId = \"io.opentracing\"\n-artifactId = \"opentracing-noop\"\n-version = \"@opentracing.version@\"\n+path = \"./lib/grpc-netty-shaded-@grpc.version@.jar\"\n+groupId = \"io.grpc\"\n+artifactId = \"grpc-netty-shaded\"\n+version = \"@grpc.version@\"\n \n [[platform.java11.dependency]]\n-path = \"./lib/libthrift-@libthrift.version@.jar\"\n-groupId = \"org.apache.thrift\"\n-artifactId = \"libthrift\"\n-version = \"@libthrift.version@\"\n+path = \"./lib/protobuf-java-@protobuf.version@.jar\"\n+groupId = \"com.google.protobuf\"\n+artifactId = \"protobuf-java\"\n+version = \"@protobuf.version@\"\n \n [[platform.java11.dependency]]\n-path = \"./lib/okhttp-@okhttp.version@.jar\"\n-groupId = \"com.squareup.okhttp3\"\n-artifactId = \"okhttp\"\n-version = \"@okhttp.version@\"\n+path = \"./lib/netty-handler-@netty.version@.jar\"\n+groupId = \"io.netty\"\n+artifactId = \"netty-handler\"\n+version = \"@netty.version@\"\n \n [[platform.java11.dependency]]\n-path = \"./lib/okio-@okio.version@.jar\"\n-groupId = \"com.squareup.okio\"\n-artifactId = \"okio\"\n-version = \"@okio.version@\"\n+path = \"./lib/perfmark-api-@perfmark.version@.jar\"\n+groupId = \"io.perfmark\"\n+artifactId = \"perfmark-api\"\n+version = \"@perfmark.version@\""
  },
  {
    "sha": "843873adaf3f49eb0df38c2080d3562f8fa1e96e",
    "filename": "jaeger-extension-ballerina/build.gradle",
    "status": "modified",
    "additions": 38,
    "deletions": 13,
    "changes": 51,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-ballerina/build.gradle",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-ballerina/build.gradle",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-ballerina/build.gradle?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -36,11 +36,28 @@ dependencies {\n \n     externalJars \"io.jaegertracing:jaeger-core:${jaegerVersion}\"\n     externalJars \"io.jaegertracing:jaeger-thrift:${jaegerVersion}\"\n-    externalJars \"io.opentracing:opentracing-util:${openTracingVersion}\"\n-    externalJars \"io.opentracing:opentracing-noop:${openTracingVersion}\"\n-    externalJars \"org.apache.thrift:libthrift:${libThriftVersion}\"\n-    externalJars \"com.squareup.okhttp3:okhttp:${okHttpVersion}\"\n-    externalJars \"com.squareup.okio:okio:${okIoVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-api:${openTelemetryVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-api-metrics:${openTelemetryAlphaVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-context:${openTelemetryVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-sdk-trace:${openTelemetryVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-sdk-common:${openTelemetryVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-semconv:${openTelemetryAlphaVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-proto:${openTelemetryAlphaVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-exporter-otlp-trace:${openTelemetryVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-exporter-otlp-common:${openTelemetryVersion}\"\n+    externalJars \"io.opentelemetry:opentelemetry-extension-trace-propagators:${openTelemetryVersion}\"\n+    externalJars \"com.google.guava:guava:${guavaVersion}\"\n+    externalJars \"com.google.guava:failureaccess:${failureAccessVersion}\"\n+    externalJars \"io.grpc:grpc-api:${grpcVersion}\"\n+    externalJars \"io.grpc:grpc-context:${grpcVersion}\"\n+    externalJars \"io.grpc:grpc-core:${grpcVersion}\"\n+    externalJars \"io.grpc:grpc-stub:${grpcVersion}\"\n+    externalJars \"io.grpc:grpc-protobuf:${grpcVersion}\"\n+    externalJars \"io.grpc:grpc-protobuf-lite:${grpcVersion}\"\n+    externalJars \"io.grpc:grpc-netty-shaded:${grpcVersion}\"\n+    externalJars \"com.google.protobuf:protobuf-java:${protobufVersion}\"\n+    externalJars \"io.netty:netty-handler:${nettyVersion}\"\n+    externalJars \"io.perfmark:perfmark-api:${perfmarkVersion}\"\n }\n \n clean {\n@@ -116,18 +133,26 @@ task updateTomlVerions {\n     doLast {\n         def stdlibDependentIoVersion = project.stdlibIoVersion.replace(\"${snapshotVersion}\", \"\")\n         def jaegerVersion = project.jaegerVersion\n-        def openTracingVersion = project.openTracingVersion\n-        def libThriftVersion = project.libThriftVersion\n-        def okHttpVersion = project.okHttpVersion\n-        def okIoVersion = project.okIoVersion\n+        def openTelemetryVersion = project.openTelemetryVersion\n+        def openTelemetryAlphaVersion = project.openTelemetryAlphaVersion\n+        def guavaVersion = project.guavaVersion\n+        def failureAccessVersion = project.failureAccessVersion\n+        def grpcVersion = project.grpcVersion\n+        def nettyVersion = project.nettyVersion\n+        def protobufVersion = project.protobufVersion\n+        def perfmarkVersion = project.perfmarkVersion\n \n         def newConfig = ballerinaConfigFile.text.replace(\"@project.version@\", project.version)\n         newConfig = newConfig.replace(\"@toml.version@\", tomlVersion)\n         newConfig = newConfig.replace(\"@jaeger.version@\", jaegerVersion)\n-        newConfig = newConfig.replace(\"@opentracing.version@\", openTracingVersion)\n-        newConfig = newConfig.replace(\"@libthrift.version@\", libThriftVersion)\n-        newConfig = newConfig.replace(\"@okhttp.version@\", okHttpVersion)\n-        newConfig = newConfig.replace(\"@okio.version@\", okIoVersion)\n+        newConfig = newConfig.replace(\"@opentelemetry.version@\", openTelemetryVersion)\n+        newConfig = newConfig.replace(\"@openTelemetryAlpha.version@\", openTelemetryAlphaVersion)\n+        newConfig = newConfig.replace(\"@guava.version@\", guavaVersion)\n+        newConfig = newConfig.replace(\"@failureAccess.version@\", failureAccessVersion)\n+        newConfig = newConfig.replace(\"@grpc.version@\", grpcVersion)\n+        newConfig = newConfig.replace(\"@netty.version@\", nettyVersion)\n+        newConfig = newConfig.replace(\"@protobuf.version@\", protobufVersion)\n+        newConfig = newConfig.replace(\"@perfmark.version@\", perfmarkVersion)\n         ballerinaConfigFile.text = newConfig\n \n         def newDependencyConfig = ballerinaDependencyFile.text.replace(\"@stdlib.io.version@\", stdlibDependentIoVersion)"
  },
  {
    "sha": "eb845a009d1b6465db64ae9bd72f673466df343f",
    "filename": "jaeger-extension-ballerina/tracer_provider.bal",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-ballerina/tracer_provider.bal",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-ballerina/tracer_provider.bal",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-ballerina/tracer_provider.bal?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -22,7 +22,7 @@ const PROVIDER_NAME = \"jaeger\";\n const DEFAULT_SAMPLER_TYPE = \"const\";\n \n final configurable string agentHostname = \"localhost\";\n-final configurable int agentPort = 6831;\n+final configurable int agentPort = 55680;\n final configurable string samplerType = \"const\";\n final configurable decimal samplerParam = 1;\n final configurable int reporterFlushInterval = 1000;"
  },
  {
    "sha": "400563a859ff7cb7d9d11944275ad12e9db879b0",
    "filename": "jaeger-extension-native/build.gradle",
    "status": "modified",
    "additions": 39,
    "deletions": 4,
    "changes": 43,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/build.gradle",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/build.gradle",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-native/build.gradle?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -24,10 +24,45 @@ dependencies {\n     implementation \"org.ballerinalang:ballerina-runtime:${ballerinaLangVersion}\"\n     implementation \"io.jaegertracing:jaeger-core:${jaegerVersion}\"\n     implementation \"io.jaegertracing:jaeger-thrift:${jaegerVersion}\"\n-    implementation \"io.opentracing:opentracing-noop:${openTracingVersion}\"\n-    implementation \"org.apache.thrift:libthrift:${libThriftVersion}\"\n-    implementation \"com.squareup.okhttp3:okhttp:${okHttpVersion}\"\n-    implementation \"com.squareup.okio:okio:${okIoVersion}\"\n+    implementation \"io.opentelemetry:opentelemetry-api:${openTelemetryVersion}\"\n+    implementation \"io.opentelemetry:opentelemetry-api-metrics:${openTelemetryAlphaVersion}\"\n+    implementation \"io.opentelemetry:opentelemetry-context:${openTelemetryVersion}\"\n+    implementation \"io.opentelemetry:opentelemetry-sdk-trace:${openTelemetryVersion}\"\n+    implementation \"io.opentelemetry:opentelemetry-sdk-common:${openTelemetryVersion}\"\n+    implementation \"io.opentelemetry:opentelemetry-semconv:${openTelemetryAlphaVersion}\"\n+    implementation \"io.opentelemetry:opentelemetry-exporter-otlp-trace:${openTelemetryVersion}\"\n+    implementation \"io.opentelemetry:opentelemetry-extension-trace-propagators:${openTelemetryVersion}\"\n+    implementation(\"com.google.guava:guava:${guavaVersion}\") {\n+        exclude group: 'com.google.code.findbugs', module: 'jsr305'\n+    }\n+    implementation(\"com.google.guava:failureaccess:${failureAccessVersion}\")\n+    implementation(\"io.grpc:grpc-api:${grpcVersion}\") {\n+        exclude group: 'io.grpc', module: 'grpc-context'\n+        exclude group: 'com.google.code.findbugs', module: 'jsr305'\n+    }\n+    implementation(\"io.grpc:grpc-core:${grpcVersion}\") {\n+        exclude group: 'io.grpc', module: 'grpc-context'\n+        exclude group: 'com.google.code.findbugs', module: 'jsr305'\n+    }\n+    implementation(\"io.grpc:grpc-stub:${grpcVersion}\") {\n+        exclude group: 'io.grpc', module: 'grpc-context'\n+        exclude group: 'com.google.code.findbugs', module: 'jsr305'\n+    }\n+    implementation(\"io.grpc:grpc-protobuf:${grpcVersion}\") {\n+        exclude group: 'io.grpc', module: 'grpc-context'\n+        exclude group: 'com.google.code.findbugs', module: 'jsr305'\n+    }\n+    implementation(\"io.grpc:grpc-protobuf-lite:${grpcVersion}\") {\n+        exclude group: 'io.grpc', module: 'grpc-context'\n+        exclude group: 'com.google.code.findbugs', module: 'jsr305'\n+    }\n+    implementation(\"io.grpc:grpc-netty-shaded:${grpcVersion}\") {\n+        exclude group: 'io.grpc', module: 'grpc-context'\n+        exclude group: 'com.google.code.findbugs', module: 'jsr305'\n+    }\n+    implementation \"com.google.protobuf:protobuf-java:${protobufVersion}\"\n+    implementation(\"io.netty:netty-handler:${nettyVersion}\")\n+    implementation \"io.perfmark:perfmark-api:${perfmarkVersion}\"\n }\n \n compileJava {"
  },
  {
    "sha": "373ecfb45b9efc60da471850fa6514db5a973ced",
    "filename": "jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/JaegerTracerProvider.java",
    "status": "modified",
    "additions": 63,
    "deletions": 27,
    "changes": 90,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/JaegerTracerProvider.java",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/JaegerTracerProvider.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/JaegerTracerProvider.java?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -17,14 +17,27 @@\n  */\n package io.ballerina.observe.trace.jaeger;\n \n+import io.ballerina.observe.trace.jaeger.sampler.RateLimitingSampler;\n import io.ballerina.runtime.api.values.BDecimal;\n import io.ballerina.runtime.api.values.BString;\n import io.ballerina.runtime.observability.tracer.spi.TracerProvider;\n-import io.jaegertracing.Configuration;\n-import io.opentracing.Tracer;\n-import io.opentracing.noop.NoopTracerFactory;\n+import io.grpc.ManagedChannel;\n+import io.grpc.netty.shaded.io.grpc.netty.NettyChannelProvider;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter;\n+import io.opentelemetry.extension.trace.propagation.JaegerPropagator;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n \n import java.io.PrintStream;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.opentelemetry.semconv.resource.attributes.ResourceAttributes.SERVICE_NAME;\n \n /**\n  * This is the Jaeger tracing extension class for {@link TracerProvider}.\n@@ -33,8 +46,7 @@\n     private static final String TRACER_NAME = \"jaeger\";\n     private static final PrintStream console = System.out;\n \n-    private static Configuration.SamplerConfiguration samplerConfiguration;\n-    private static Configuration.ReporterConfiguration reporterConfiguration;\n+    static SdkTracerProviderBuilder tracerProviderBuilder;\n \n     @Override\n     public String getName() {\n@@ -46,34 +58,58 @@ public void init() {    // Do Nothing\n     }\n \n     public static void initializeConfigurations(BString agentHostname, int agentPort, BString samplerType,\n-                                                  BDecimal samplerParam, int reporterFlushInterval,\n-                                                  int reporterBufferSize) {\n-        // Create Sampler Configuration\n-        samplerConfiguration = new Configuration.SamplerConfiguration()\n-                .withType(samplerType.getValue())\n-                .withParam(samplerParam.value());\n-\n-        // Create Sender Configuration\n-        Configuration.SenderConfiguration senderConfiguration = new Configuration.SenderConfiguration()\n-                .withAgentHost(agentHostname.getValue())\n-                .withAgentPort(agentPort);\n+                                                BDecimal samplerParam, int reporterFlushInterval,\n+                                                int reporterBufferSize) {\n+\n         String reporterEndpoint = agentHostname + \":\" + agentPort;\n \n-        // Create Reporter Configuration\n-        reporterConfiguration = new Configuration.ReporterConfiguration()\n-                .withSender(senderConfiguration)\n-                .withFlushInterval(reporterFlushInterval)\n-                .withMaxQueueSize(reporterBufferSize);\n+        ManagedChannel jaegerChannel = new NettyChannelProvider()\n+                .builderForTarget(reporterEndpoint)\n+                .usePlaintext()\n+                .build();\n+\n+        OtlpGrpcSpanExporter exporter = OtlpGrpcSpanExporter.builder()\n+                .setChannel(jaegerChannel)\n+                .build();\n+\n+        tracerProviderBuilder = SdkTracerProvider.builder()\n+                .addSpanProcessor(BatchSpanProcessor\n+                        .builder(exporter)\n+                        .setMaxExportBatchSize(reporterBufferSize)\n+                        .setExporterTimeout(reporterFlushInterval, TimeUnit.MILLISECONDS)\n+                        .build());\n+\n+        switch (samplerType.getValue()) {\n+            default:\n+            case \"const\":\n+                if (samplerParam.value().intValue() == 0) {\n+                    tracerProviderBuilder.setSampler(Sampler.alwaysOff());\n+                } else {\n+                    tracerProviderBuilder.setSampler(Sampler.alwaysOn());\n+                }\n+                break;\n+            case \"probabilistic\":\n+                tracerProviderBuilder.setSampler(Sampler.traceIdRatioBased(samplerParam.value().doubleValue()));\n+                break;\n+            case \"ratelimiting\":\n+                tracerProviderBuilder.setSampler(new RateLimitingSampler(samplerParam.value().intValue()));\n+                break;\n+        }\n+\n         console.println(\"ballerina: started publishing traces to Jaeger on \" + reporterEndpoint);\n     }\n \n     @Override\n     public Tracer getTracer(String serviceName) {\n-        return new Configuration(serviceName)\n-                .withSampler(samplerConfiguration)\n-                .withReporter(reporterConfiguration)\n-                .getTracerBuilder()\n-                .withScopeManager(NoopTracerFactory.create().scopeManager())\n-                .build();\n+\n+        return tracerProviderBuilder.setResource(\n+                Resource.create(Attributes.of(SERVICE_NAME, serviceName)))\n+                .build().get(\"jaeger\");\n+    }\n+\n+    @Override\n+    public ContextPropagators getPropagators() {\n+\n+        return ContextPropagators.create(JaegerPropagator.getInstance());\n     }\n }"
  },
  {
    "sha": "0f5ea15791c425819b9c9e4e48883b130f50a3f2",
    "filename": "jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/sampler/RateLimiter.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/sampler/RateLimiter.java",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/sampler/RateLimiter.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/sampler/RateLimiter.java?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package io.ballerina.observe.trace.jaeger.sampler;\n+\n+import io.opentelemetry.sdk.common.Clock;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * This class is copied from https://github.com/open-telemetry/opentelemetry-java/blob/v1.0.0/sdk-extensions/\n+ * jaeger-remote-sampler/src/main/java/io/opentelemetry/sdk/extension/trace/jaeger/sampler/RateLimiter.java.\n+ */\n+class RateLimiter {\n+    private final Clock clock;\n+    private final double creditsPerNanosecond;\n+    private final long maxBalance; // max balance in nano ticks\n+    private final AtomicLong debit; // last op nano time less remaining balance\n+\n+    RateLimiter(double creditsPerSecond, double maxBalance, Clock clock) {\n+        this.clock = clock;\n+        this.creditsPerNanosecond = creditsPerSecond / 1.0e9;\n+        this.maxBalance = (long) (maxBalance / creditsPerNanosecond);\n+        this.debit = new AtomicLong(clock.nanoTime() - this.maxBalance);\n+    }\n+\n+    public boolean checkCredit(double itemCost) {\n+        long cost = (long) (itemCost / creditsPerNanosecond);\n+        long credit;\n+        long currentDebit;\n+        long balance;\n+        do {\n+            currentDebit = debit.get();\n+            credit = clock.nanoTime();\n+            balance = credit - currentDebit;\n+            if (balance > maxBalance) {\n+                balance = maxBalance;\n+            }\n+            balance -= cost;\n+            if (balance < 0) {\n+                return false;\n+            }\n+        } while (!debit.compareAndSet(currentDebit, credit - balance));\n+        return true;\n+    }\n+}"
  },
  {
    "sha": "50e1ca4978b89cce3d40d6300dc8c7b2495a2c8f",
    "filename": "jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/sampler/RateLimitingSampler.java",
    "status": "added",
    "additions": 70,
    "deletions": 0,
    "changes": 70,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/sampler/RateLimitingSampler.java",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/sampler/RateLimitingSampler.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-native/src/main/java/io/ballerina/observe/trace/jaeger/sampler/RateLimitingSampler.java?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package io.ballerina.observe.trace.jaeger.sampler;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.SpanKind;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.internal.SystemClock;\n+import io.opentelemetry.sdk.trace.data.LinkData;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n+import io.opentelemetry.sdk.trace.samplers.SamplingDecision;\n+import io.opentelemetry.sdk.trace.samplers.SamplingResult;\n+\n+import java.util.List;\n+\n+/**\n+ * This class is copied from https://github.com/open-telemetry/opentelemetry-java/blob/v1.0.0/sdk-extensions/\n+ * jaeger-remote-sampler/src/main/java/io/opentelemetry/sdk/extension/trace/jaeger/sampler/RateLimitingSampler.java.\n+ * This sampler uses a leaky bucket rate limiter to ensure that traces are sampled with a certain constant rate.\n+ */\n+public class RateLimitingSampler implements Sampler {\n+    static final String TYPE = \"ratelimiting\";\n+\n+    private final double maxTracesPerSecond;\n+    private final RateLimiter rateLimiter;\n+    private final SamplingResult onSamplingResult;\n+    private final SamplingResult offSamplingResult;\n+\n+    /**\n+     * Creates rate limiting sampler.\n+     *\n+     * @param maxTracesPerSecond the maximum number of sampled traces per second.\n+     */\n+    public RateLimitingSampler(int maxTracesPerSecond) {\n+        this.maxTracesPerSecond = maxTracesPerSecond;\n+        double maxBalance = maxTracesPerSecond < 1.0 ? 1.0 : maxTracesPerSecond;\n+        this.rateLimiter = new RateLimiter(maxTracesPerSecond, maxBalance, SystemClock.getInstance());\n+        Attributes attributes = Attributes.empty();\n+        this.onSamplingResult = SamplingResult.create(SamplingDecision.RECORD_AND_SAMPLE, attributes);\n+        this.offSamplingResult = SamplingResult.create(SamplingDecision.DROP, attributes);\n+    }\n+\n+    @Override\n+    public SamplingResult shouldSample(\n+            Context parentContext,\n+            String traceId,\n+            String name,\n+            SpanKind spanKind,\n+            Attributes attributes,\n+            List<LinkData> parentLinks) {\n+        return this.rateLimiter.checkCredit(1.0) ? onSamplingResult : offSamplingResult;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return String.format(\"RateLimitingSampler{%.2f}\", maxTracesPerSecond);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return getDescription();\n+    }\n+\n+    // Visible for testing\n+    double getMaxTracesPerSecond() {\n+        return maxTracesPerSecond;\n+    }\n+}"
  },
  {
    "sha": "c50e2af563e1f046dbfaa1f28ba4a00ceea6a326",
    "filename": "jaeger-extension-native/src/main/java/module-info.java",
    "status": "modified",
    "additions": 10,
    "deletions": 2,
    "changes": 12,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/src/main/java/module-info.java",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-native/src/main/java/module-info.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-native/src/main/java/module-info.java?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -1,8 +1,16 @@\n module io.ballerina.observe.trace.extension.jaeger {\n     requires io.ballerina.runtime;\n-    requires opentracing.api;\n-    requires opentracing.noop;\n     requires jaeger.core;\n+    requires io.opentelemetry.api;\n+    requires io.opentelemetry.api.metrics;\n+    requires io.opentelemetry.context;\n+    requires io.opentelemetry.sdk.trace;\n+    requires io.opentelemetry.sdk.common;\n+    requires io.opentelemetry.extension.trace.propagation;\n+    requires io.opentelemetry.semconv;\n+    requires io.opentelemetry.exporter.otlp.trace;\n+    requires grpc.api;\n+    requires grpc.netty.shaded;\n \n     provides io.ballerina.runtime.observability.tracer.spi.TracerProvider\n             with io.ballerina.observe.trace.jaeger.JaegerTracerProvider;"
  },
  {
    "sha": "fcdfb1e884dafba96224a07694ace718c750c166",
    "filename": "jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/JaegerTracesTestCase.java",
    "status": "modified",
    "additions": 15,
    "deletions": 33,
    "changes": 48,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/JaegerTracesTestCase.java",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/JaegerTracesTestCase.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/JaegerTracesTestCase.java?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -41,13 +41,11 @@\n import java.nio.file.Paths;\n import java.util.Arrays;\n import java.util.Calendar;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n \n import static io.ballerina.runtime.observability.ObservabilityConstants.DEFAULT_SERVICE_NAME;\n \n@@ -78,30 +76,19 @@ public void cleanUpServer() throws Exception {\n \n     @DataProvider(name = \"test-jaeger-metrics-data\")\n     public Object[][] getTestJaegerMetricsData() {\n-        JaegerTag defaultSamplerTypeTag = new JaegerTag(\"sampler.type\", \"string\", \"const\");\n-        JaegerTag defaultSamplerParamTag = new JaegerTag(\"sampler.param\", \"bool\", \"true\");\n         return new Object[][]{\n-                {\"localhost\", 6831, JaegerServerProtocol.UDP_COMPACT_THRIFT, \"ConfigDefault.toml\",\n-                        defaultSamplerTypeTag, defaultSamplerParamTag},\n-                {\"127.0.0.1\", 16831, JaegerServerProtocol.UDP_COMPACT_THRIFT, \"ConfigAgent.toml\",\n-                        defaultSamplerTypeTag, defaultSamplerParamTag},\n-                {\"localhost\", 6831, JaegerServerProtocol.UDP_COMPACT_THRIFT, \"ConfigInvalidSampler.toml\",\n-                        defaultSamplerTypeTag, defaultSamplerParamTag},\n-                {\"localhost\", 6831, JaegerServerProtocol.UDP_COMPACT_THRIFT, \"ConfigSamplerConst.toml\",\n-                        new JaegerTag(\"sampler.type\", \"string\", \"const\"),\n-                        new JaegerTag(\"sampler.param\", \"bool\", \"true\")},\n-                {\"localhost\", 6831, JaegerServerProtocol.UDP_COMPACT_THRIFT, \"ConfigSamplerProbabilistic.toml\",\n-                        new JaegerTag(\"sampler.type\", \"string\", \"probabilistic\"),\n-                        new JaegerTag(\"sampler.param\", \"float64\", \"1\")},\n-                {\"localhost\", 6831, JaegerServerProtocol.UDP_COMPACT_THRIFT, \"ConfigSamplerRatelimiting.toml\",\n-                        new JaegerTag(\"sampler.type\", \"string\", \"ratelimiting\"),\n-                        new JaegerTag(\"sampler.param\", \"float64\", \"1\")}\n+                {\"localhost\", 55680, JaegerServerProtocol.OTL_GRPC, \"ConfigDefault.toml\"},\n+                {\"127.0.0.1\", 16831, JaegerServerProtocol.OTL_GRPC, \"ConfigAgent.toml\"},\n+                {\"localhost\", 55680, JaegerServerProtocol.OTL_GRPC, \"ConfigInvalidSampler.toml\"},\n+                {\"localhost\", 55680, JaegerServerProtocol.OTL_GRPC, \"ConfigSamplerConst.toml\"},\n+                {\"localhost\", 55680, JaegerServerProtocol.OTL_GRPC, \"ConfigSamplerProbabilistic.toml\"},\n+                {\"localhost\", 55680, JaegerServerProtocol.OTL_GRPC, \"ConfigSamplerRatelimiting.toml\"}\n         };\n     }\n \n     @Test(dataProvider = \"test-jaeger-metrics-data\")\n     public void testJaegerMetrics(String host, int jaegerReportAddress, JaegerServerProtocol jaegerReportProtocol,\n-                                  String configFilename, JaegerTag samplerTypeTag, JaegerTag samplerParamTag)\n+                                  String configFilename)\n             throws Exception {\n         jaegerServer.startServer(host, jaegerReportAddress, jaegerReportProtocol);\n \n@@ -132,7 +119,7 @@ public void testJaegerMetrics(String host, int jaegerReportAddress, JaegerServer\n         String responseData = HttpClientRequest.doGet(TEST_RESOURCE_URL).getData();\n         Assert.assertEquals(responseData, \"Sum: 53\");\n         long endTimeMicroseconds = (Calendar.getInstance().getTimeInMillis() + 1) * 1000;\n-        Thread.sleep(3000);\n+        Thread.sleep(12000);\n \n         // Read services from Jaeger query endpoint\n         HttpResponse servicesQueryHttpResponse = HttpClientRequest.doGet(\"http://localhost:16686/api/services\");\n@@ -188,9 +175,8 @@ public void testJaegerMetrics(String host, int jaegerReportAddress, JaegerServer\n                 new JaegerTag(\"src.position\", \"string\", span1Position),\n                 new JaegerTag(\"src.resource.path\", \"string\", \"/sum\"),\n                 new JaegerTag(\"http.method\", \"string\", \"GET\"),\n-                new JaegerTag(\"internal.span.format\", \"string\", \"proto\"),\n-                samplerTypeTag,\n-                samplerParamTag\n+                new JaegerTag(\"otlp.instrumentation.library.name\", \"string\", \"jaeger\"),\n+                new JaegerTag(\"status.code\", \"int64\", \"0\")\n         )));\n \n         String span2Position = \"01_http_svc_test.bal:24:19\";\n@@ -214,7 +200,8 @@ public void testJaegerMetrics(String host, int jaegerReportAddress, JaegerServer\n                 new JaegerTag(\"entrypoint.function.module\", \"string\", \"$anon/.:0.0.0\"),\n                 new JaegerTag(\"src.position\", \"string\", span2Position),\n                 new JaegerTag(\"src.function.name\", \"string\", \"getSum\"),\n-                new JaegerTag(\"internal.span.format\", \"string\", \"proto\")\n+                new JaegerTag(\"otlp.instrumentation.library.name\", \"string\", \"jaeger\"),\n+                new JaegerTag(\"status.code\", \"int64\", \"0\")\n         )));\n \n         String span3Position = \"01_http_svc_test.bal:28:20\";\n@@ -240,19 +227,14 @@ public void testJaegerMetrics(String host, int jaegerReportAddress, JaegerServer\n                 new JaegerTag(\"src.position\", \"string\", span3Position),\n                 new JaegerTag(\"src.client.remote\", \"string\", \"true\"),\n                 new JaegerTag(\"src.function.name\", \"string\", \"respond\"),\n-                new JaegerTag(\"internal.span.format\", \"string\", \"proto\")\n+                new JaegerTag(\"otlp.instrumentation.library.name\", \"string\", \"jaeger\"),\n+                new JaegerTag(\"status.code\", \"int64\", \"0\")\n         )));\n \n         Assert.assertTrue(jaegerTrace.getProcesses().containsKey(JAEGER_PROCESS_ID),\n                 \"expected key \\\"\" + JAEGER_PROCESS_ID + \"\\\" not found\");\n         JaegerProcess jaegerProcess = jaegerTrace.getProcesses().get(JAEGER_PROCESS_ID);\n         Assert.assertEquals(jaegerProcess.getServiceName(), SAMPLE_SERVER_NAME);\n-        Assert.assertEquals(jaegerProcess.getTags().stream().map(JaegerTag::getKey).collect(Collectors.toSet()),\n-                new HashSet<>(Arrays.asList(\"hostname\", \"ip\", \"jaeger.version\")));\n-        Assert.assertEquals(jaegerProcess.getTags().stream().map(JaegerTag::getType).collect(Collectors.toSet()),\n-                new HashSet<>(Collections.singletonList(\"string\")));\n-        Assert.assertTrue(jaegerProcess.getTags().contains(new JaegerTag(\"jaeger.version\", \"string\", \"Java-0.31.0\")),\n-                \"expected process tag \\\"jaeger.version\\\" not found\");\n \n         Assert.assertFalse(errorLogLeecher.isTextFound(), \"Unexpected error log found\");\n         Assert.assertFalse(exceptionLogLeecher.isTextFound(), \"Unexpected exception log found\");\n@@ -319,7 +301,7 @@ public void testInvalidTracingProviderName() throws Exception {\n      * Find a span from a jaeger trace by position ID.\n      *\n      * @param jaegerTrace The jaeger trace in which the spans should be searched\n-     * @param positionID The position ID of the span\n+     * @param positionID  The position ID of the span\n      * @return The found span or null otherwise\n      */\n     private JaegerSpan findSpan(JaegerTrace jaegerTrace, String positionID) {"
  },
  {
    "sha": "1637c6b0d7f4c4492081c8c4e53cc6311ae947f2",
    "filename": "jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/ContainerizedJaegerServer.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/ContainerizedJaegerServer.java",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/ContainerizedJaegerServer.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/ContainerizedJaegerServer.java?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -18,6 +18,7 @@\n package io.ballerina.observe.trace.jaeger.backend;\n \n import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.model.ExposedPort;\n import com.github.dockerjava.api.model.HostConfig;\n import com.github.dockerjava.api.model.PortBinding;\n import com.github.dockerjava.core.DefaultDockerClientConfig;\n@@ -31,12 +32,13 @@\n \n /**\n  * Container based Jaeger Server.\n- *\n+ * <p>\n  * This is a Jaeger server implementation based on a linux Jaeger container.\n  */\n public class ContainerizedJaegerServer implements JaegerServer {\n     private static final Logger LOGGER = LoggerFactory.getLogger(ContainerizedJaegerServer.class);\n-    private static final String JAEGER_IMAGE = \"jaegertracing/all-in-one:1.21.0\";\n+    private static final String JAEGER_IMAGE = \"jaegertracing/opentelemetry-all-in-one:latest\";\n+    private static final int API_PORT = 16686;\n \n     private DockerClient dockerClient;\n     private String jaegerContainerId;\n@@ -64,17 +66,18 @@ public void startServer(String interfaceIP, int udpBindPort, JaegerServerProtoco\n         }\n         int targetPort;\n         switch (protocol) {\n-            case UDP_COMPACT_THRIFT:\n-                targetPort = 6831;\n+            case OTL_GRPC:\n+                targetPort = 55680;\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Unknown Jaeger Protocol type \" + protocol);\n         }\n         jaegerContainerId = dockerClient.createContainerCmd(JAEGER_IMAGE)\n                 .withName(\"ballerina-test-jaeger-\" + System.currentTimeMillis())\n+                .withExposedPorts(new ExposedPort(API_PORT), new ExposedPort(targetPort))\n                 .withHostConfig(HostConfig.newHostConfig()\n-                        .withPortBindings(PortBinding.parse(\"16686:16686/tcp\"),\n-                                PortBinding.parse(interfaceIP + \":\" + udpBindPort + \":\" + targetPort + \"/udp\")))\n+                        .withPortBindings(PortBinding.parse(interfaceIP + \":\" + API_PORT + \":\" + API_PORT + \"/tcp\"),\n+                                PortBinding.parse(interfaceIP + \":\" + udpBindPort + \":\" + targetPort + \"/tcp\")))\n                 .exec()\n                 .getId();\n         dockerClient.startContainerCmd(jaegerContainerId).exec();"
  },
  {
    "sha": "b069e75926adf0ec07344a05c0a2176be76f28dd",
    "filename": "jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/JaegerServerProtocol.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/JaegerServerProtocol.java",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/JaegerServerProtocol.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/JaegerServerProtocol.java?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -21,5 +21,5 @@\n  * Types of supported Jaeger protocols.\n  */\n public enum JaegerServerProtocol {\n-    UDP_COMPACT_THRIFT\n+    OTL_GRPC\n }"
  },
  {
    "sha": "ebc0abb34de95416c84f2301783a017810d40637",
    "filename": "jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/ProcessJaegerServer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/ProcessJaegerServer.java",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/ProcessJaegerServer.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-tests/src/test/java/io/ballerina/observe/trace/jaeger/backend/ProcessJaegerServer.java?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -56,7 +56,7 @@ public void startServer(String interfaceIP, int udpBindPort, JaegerServerProtoco\n         }\n         String processorFlag;\n         switch (protocol) {\n-            case UDP_COMPACT_THRIFT:\n+            case OTL_GRPC:\n                 processorFlag = \"--processor.jaeger-compact.server-host-port\";\n                 break;\n             default:"
  },
  {
    "sha": "520383b2a71bb0276e6aa5ca98efd0d85f8817f9",
    "filename": "jaeger-extension-tests/src/test/resources/bal/ConfigSamplerRatelimiting.toml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/blob/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/resources/bal/ConfigSamplerRatelimiting.toml",
    "raw_url": "https://github.com/ballerina-platform/module-ballerinax-jaeger/raw/1733298bd943cad077b75ad9edb8d399b098619f/jaeger-extension-tests/src/test/resources/bal/ConfigSamplerRatelimiting.toml",
    "contents_url": "https://api.github.com/repos/ballerina-platform/module-ballerinax-jaeger/contents/jaeger-extension-tests/src/test/resources/bal/ConfigSamplerRatelimiting.toml?ref=1733298bd943cad077b75ad9edb8d399b098619f",
    "patch": "@@ -4,4 +4,4 @@ tracingProvider=\"jaeger\"\n \n [ballerinax.jaeger]\n samplerType=\"ratelimiting\"\n-samplerParam=1.0\n+samplerParam=3.0"
  }
]
