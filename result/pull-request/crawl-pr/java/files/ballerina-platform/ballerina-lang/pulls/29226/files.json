[
  {
    "sha": "340f66c3590e695a6af4d5cf7fd12668d0084b54",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/AbstractCompletionProvider.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/AbstractCompletionProvider.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/AbstractCompletionProvider.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/AbstractCompletionProvider.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -386,7 +386,7 @@ private LSCompletionItem populateBallerinaFunctionCompletionItem(Symbol symbol,\n                 new SnippetCompletionItem(context, Snippet.KW_START.get()),\n                 new SnippetCompletionItem(context, Snippet.KW_WAIT.get()),\n                 new SnippetCompletionItem(context, Snippet.KW_FLUSH.get()),\n-                new SnippetCompletionItem(context, Snippet.KW_FROM.get())\n+                new SnippetCompletionItem(context, Snippet.CLAUSE_FROM.get())\n         );\n     }\n "
  },
  {
    "sha": "abced3485fa34a00fca3b7c7c1a161929b70c1f1",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/FromClauseNodeContext.java",
    "status": "modified",
    "additions": 13,
    "deletions": 5,
    "changes": 18,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/FromClauseNodeContext.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/FromClauseNodeContext.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/FromClauseNodeContext.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -18,6 +18,7 @@\n import io.ballerina.compiler.api.symbols.Symbol;\n import io.ballerina.compiler.syntax.tree.BindingPatternNode;\n import io.ballerina.compiler.syntax.tree.FromClauseNode;\n+import io.ballerina.compiler.syntax.tree.Node;\n import io.ballerina.compiler.syntax.tree.NonTerminalNode;\n import io.ballerina.compiler.syntax.tree.QualifiedNameReferenceNode;\n import io.ballerina.compiler.syntax.tree.SyntaxKind;\n@@ -29,19 +30,19 @@\n import org.ballerinalang.langserver.commons.BallerinaCompletionContext;\n import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n import org.ballerinalang.langserver.completions.SnippetCompletionItem;\n-import org.ballerinalang.langserver.completions.providers.AbstractCompletionProvider;\n import org.ballerinalang.langserver.completions.util.Snippet;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n /**\n  * Completion provider for {@link FromClauseNode} context.\n  *\n  * @since 2.0.0\n  */\n @JavaSPIService(\"org.ballerinalang.langserver.commons.completion.spi.BallerinaCompletionProvider\")\n-public class FromClauseNodeContext extends AbstractCompletionProvider<FromClauseNode> {\n+public class FromClauseNodeContext extends IntermediateClauseNodeContext<FromClauseNode> {\n \n     public FromClauseNodeContext() {\n         super(FromClauseNode.class);\n@@ -60,7 +61,7 @@ public FromClauseNodeContext() {\n              */\n             return new ArrayList<>();\n         }\n-        \n+\n         List<LSCompletionItem> completionItems = new ArrayList<>();\n \n         NonTerminalNode nodeAtCursor = context.getNodeAtCursor();\n@@ -87,6 +88,8 @@ public FromClauseNodeContext() {\n             (2) var tesVar = stream from var item <cursor>i\n              */\n             completionItems.add(new SnippetCompletionItem(context, Snippet.KW_IN.get()));\n+        } else if (cursorAtTheEndOfClause(context, node)) {\n+            completionItems.addAll(this.getKeywordCompletions(context, node));\n         } else if (nodeAtCursor.kind() == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n             /*\n             Covers the cases where the cursor is within the expression context\n@@ -98,7 +101,7 @@ public FromClauseNodeContext() {\n             completionItems.addAll(this.expressionCompletions(context));\n         }\n         this.sort(context, node, completionItems);\n-        \n+\n         return completionItems;\n     }\n \n@@ -121,7 +124,7 @@ private boolean onTypedBindingPatternContext(BallerinaCompletionContext context,\n     private boolean onBindingPatternContext(BallerinaCompletionContext context, FromClauseNode node) {\n         TypedBindingPatternNode typedBindingPattern = node.typedBindingPattern();\n \n-        if (typedBindingPattern == null || typedBindingPattern.isMissing()) {\n+        if (typedBindingPattern.isMissing()) {\n             return false;\n         }\n \n@@ -134,4 +137,9 @@ private boolean onBindingPatternContext(BallerinaCompletionContext context, From\n                 (cursor > typeDescriptor.textRange().endOffset() && cursor < inKeyword.textRange().startOffset()))\n                 && (bindingPattern.isMissing() || bindingPattern.textRange().endOffset() >= cursor);\n     }\n+\n+    @Override\n+    protected Optional<Node> getLastNodeOfClause(FromClauseNode node) {\n+        return Optional.of(node.expression());\n+    }\n }"
  },
  {
    "sha": "2448c360ad01849a267a95c4a1a4950fea7514c5",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/IntermediateClauseNodeContext.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/IntermediateClauseNodeContext.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/IntermediateClauseNodeContext.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/IntermediateClauseNodeContext.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2021, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.ballerinalang.langserver.completions.providers.context;\n+\n+import io.ballerina.compiler.syntax.tree.IntermediateClauseNode;\n+import io.ballerina.compiler.syntax.tree.Node;\n+import org.ballerinalang.langserver.commons.BallerinaCompletionContext;\n+import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n+import org.ballerinalang.langserver.completions.providers.AbstractCompletionProvider;\n+import org.ballerinalang.langserver.completions.providers.context.util.QueryExpressionUtil;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * An abstract completion provider for child nodes of {@link IntermediateClauseNode}.\n+ *\n+ * @param <T> child node of {@link IntermediateClauseNode} for which completions are being provided\n+ */\n+public abstract class IntermediateClauseNodeContext<T extends IntermediateClauseNode>\n+        extends AbstractCompletionProvider<T> {\n+\n+    public IntermediateClauseNodeContext(Class<T> attachmentPoint) {\n+        super(attachmentPoint);\n+    }\n+\n+    protected List<LSCompletionItem> getKeywordCompletions(BallerinaCompletionContext context, T node) {\n+        return QueryExpressionUtil.getCommonKeywordCompletions(context);\n+    }\n+\n+    protected boolean cursorAtTheEndOfClause(BallerinaCompletionContext context, T node) {\n+        Optional<Node> lastNode = getLastNodeOfClause(node);\n+        if (lastNode.isEmpty() || lastNode.get().isMissing()) {\n+            return false;\n+        }\n+\n+        int cursor = context.getCursorPositionInTree();\n+        return lastNode.get().textRange().endOffset() < cursor;\n+    }\n+\n+    /**\n+     * This method is supposed to return the last node (can be an expression or another node) of the child clause. This\n+     * method is used to determine if the cursor is at the end of a clause in\n+     * {@link #cursorAtTheEndOfClause(BallerinaCompletionContext, IntermediateClauseNode)}\n+     *\n+     * @param node Node related to the context\n+     * @return Optional node which is the last node in the clause\n+     */\n+    protected abstract Optional<Node> getLastNodeOfClause(T node);\n+}"
  },
  {
    "sha": "a93af3d2575e21e4b1169df035caf849ac35625b",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/JoinClauseNodeContext.java",
    "status": "modified",
    "additions": 69,
    "deletions": 7,
    "changes": 76,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/JoinClauseNodeContext.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/JoinClauseNodeContext.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/JoinClauseNodeContext.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -16,22 +16,23 @@\n package org.ballerinalang.langserver.completions.providers.context;\n \n import io.ballerina.compiler.api.symbols.Symbol;\n-import io.ballerina.compiler.syntax.tree.ExpressionNode;\n import io.ballerina.compiler.syntax.tree.JoinClauseNode;\n+import io.ballerina.compiler.syntax.tree.Node;\n import io.ballerina.compiler.syntax.tree.NonTerminalNode;\n import io.ballerina.compiler.syntax.tree.QualifiedNameReferenceNode;\n+import io.ballerina.compiler.syntax.tree.SimpleNameReferenceNode;\n import io.ballerina.compiler.syntax.tree.SyntaxKind;\n import io.ballerina.compiler.syntax.tree.TypedBindingPatternNode;\n import org.ballerinalang.annotation.JavaSPIService;\n import org.ballerinalang.langserver.common.utils.completion.QNameReferenceUtil;\n import org.ballerinalang.langserver.commons.BallerinaCompletionContext;\n import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n import org.ballerinalang.langserver.completions.SnippetCompletionItem;\n-import org.ballerinalang.langserver.completions.providers.AbstractCompletionProvider;\n import org.ballerinalang.langserver.completions.util.Snippet;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n /**\n  * Completion provider for {@link JoinClauseNode} context.\n@@ -42,7 +43,7 @@\n  * @since 2.0.0\n  */\n @JavaSPIService(\"org.ballerinalang.langserver.commons.completion.spi.BallerinaCompletionProvider\")\n-public class JoinClauseNodeContext extends AbstractCompletionProvider<JoinClauseNode> {\n+public class JoinClauseNodeContext extends IntermediateClauseNodeContext<JoinClauseNode> {\n \n     public JoinClauseNodeContext() {\n         super(JoinClauseNode.class);\n@@ -75,6 +76,10 @@ public JoinClauseNodeContext() {\n              * (3) join var test i<cursor> expression\n              */\n             completionItems.add(new SnippetCompletionItem(context, Snippet.KW_IN.get()));\n+        } else if (this.onSuggestOnKeyword(context, node)) {\n+            completionItems.add(new SnippetCompletionItem(context, Snippet.KW_ON.get()));\n+        } else if (cursorAtTheEndOfClause(context, node)) {\n+            completionItems.addAll(this.getKeywordCompletions(context, node));\n         } else if (nodeAtCursor.kind() == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n             /*\n              * Covers the remaining rule content,\n@@ -101,6 +106,11 @@ public boolean onPreValidation(BallerinaCompletionContext context, JoinClauseNod\n         return !node.joinKeyword().isMissing();\n     }\n \n+    @Override\n+    protected Optional<Node> getLastNodeOfClause(JoinClauseNode node) {\n+        return Optional.of(node.joinOnCondition());\n+    }\n+\n     private boolean onSuggestBindingPattern(BallerinaCompletionContext context, JoinClauseNode node) {\n         int cursor = context.getCursorPositionInTree();\n         TypedBindingPatternNode typedBindingPattern = node.typedBindingPattern();\n@@ -115,10 +125,62 @@ private boolean onSuggestBindingPattern(BallerinaCompletionContext context, Join\n     private boolean onSuggestInKeyword(BallerinaCompletionContext context, JoinClauseNode node) {\n         int cursor = context.getCursorPositionInTree();\n         TypedBindingPatternNode typedBindingPattern = node.typedBindingPattern();\n-        ExpressionNode expression = node.expression();\n \n-        return node.inKeyword().isMissing() && !typedBindingPattern.isMissing()\n-                && cursor > typedBindingPattern.textRange().endOffset()\n-                && (expression.isMissing() || cursor < expression.textRange().startOffset());\n+        if (!node.inKeyword().isMissing() || typedBindingPattern.isMissing()) {\n+            return false;\n+        } else if (cursor > typedBindingPattern.textRange().endOffset() &&\n+                cursor <= node.expression().textRange().startOffset()) {\n+            /*\n+             * Captures:\n+             * (1) join var varName <cursor>\n+             */\n+            return true;\n+        } else {\n+            Node nodeAtCursor = context.getNodeAtCursor();\n+\n+            /*\n+             * Captures:\n+             * (1) join var varName i<cursor>\n+             * (2) join var varName i<cursor> expression\n+             */\n+            if (nodeAtCursor.kind() == SyntaxKind.SIMPLE_NAME_REFERENCE) {\n+                SimpleNameReferenceNode nameReferenceNode = (SimpleNameReferenceNode) nodeAtCursor;\n+                return node.expression().textRange().startOffset() + 1 == cursor &&\n+                        nameReferenceNode.textRange().startOffset() + 1 == cursor;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private boolean onSuggestOnKeyword(BallerinaCompletionContext context, JoinClauseNode node) {\n+        int cursor = context.getCursorPositionInTree();\n+\n+        if (node.typedBindingPattern().isMissing() ||\n+                node.typedBindingPattern().isMissing() ||\n+                node.inKeyword().isMissing() ||\n+                node.expression().isMissing() ||\n+                !node.joinOnCondition().onKeyword().isMissing()) {\n+            return false;\n+        } else if (node.expression().textRange().endOffset() < cursor &&\n+                cursor <= node.joinOnCondition().textRange().startOffset()) {\n+            // join var varName in expr <cursor>\n+            return true;\n+        } else {\n+            Node nodeAtCursor = context.getNodeAtCursor();\n+\n+            /*\n+             * Captures:\n+             * (1) join var varName in expr o<cursor>\n+             * (2) join var varName in expr o<cursor> expr\n+             */\n+            if (nodeAtCursor.kind() == SyntaxKind.SIMPLE_NAME_REFERENCE) {\n+                SimpleNameReferenceNode nameReferenceNode = (SimpleNameReferenceNode) nodeAtCursor;\n+                return node.expression().textRange().endOffset() == cursor &&\n+                        nameReferenceNode.textRange().endOffset() == cursor;\n+            }\n+        }\n+\n+        return false;\n     }\n }"
  },
  {
    "sha": "cff026f3b1040dd044040ae0d42f8635902ea19e",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/LetClauseNodeContext.java",
    "status": "modified",
    "additions": 17,
    "deletions": 3,
    "changes": 20,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/LetClauseNodeContext.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/LetClauseNodeContext.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/LetClauseNodeContext.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -17,6 +17,8 @@\n \n import io.ballerina.compiler.api.symbols.Symbol;\n import io.ballerina.compiler.syntax.tree.LetClauseNode;\n+import io.ballerina.compiler.syntax.tree.LetVariableDeclarationNode;\n+import io.ballerina.compiler.syntax.tree.Node;\n import io.ballerina.compiler.syntax.tree.NonTerminalNode;\n import io.ballerina.compiler.syntax.tree.QualifiedNameReferenceNode;\n import io.ballerina.compiler.syntax.tree.SyntaxKind;\n@@ -25,19 +27,19 @@\n import org.ballerinalang.langserver.commons.BallerinaCompletionContext;\n import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n import org.ballerinalang.langserver.completions.SnippetCompletionItem;\n-import org.ballerinalang.langserver.completions.providers.AbstractCompletionProvider;\n import org.ballerinalang.langserver.completions.util.Snippet;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n /**\n  * Completion provider for {@link LetClauseNode} context.\n  *\n  * @since 2.0.0\n  */\n @JavaSPIService(\"org.ballerinalang.langserver.commons.completion.spi.BallerinaCompletionProvider\")\n-public class LetClauseNodeContext extends AbstractCompletionProvider<LetClauseNode> {\n+public class LetClauseNodeContext extends IntermediateClauseNodeContext<LetClauseNode> {\n \n     public LetClauseNodeContext() {\n         super(LetClauseNode.class);\n@@ -48,7 +50,9 @@ public LetClauseNodeContext() {\n         List<LSCompletionItem> completionItems = new ArrayList<>();\n         NonTerminalNode nodeAtCursor = context.getNodeAtCursor();\n \n-        if (nodeAtCursor.kind() == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n+        if (cursorAtTheEndOfClause(context, node)) {\n+            completionItems.addAll(this.getKeywordCompletions(context, node));\n+        } else if (nodeAtCursor.kind() == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n             /*\n             Covers the cases where the cursor is within the expression context\n              */\n@@ -66,6 +70,16 @@ public LetClauseNodeContext() {\n         return completionItems;\n     }\n \n+    @Override\n+    protected Optional<Node> getLastNodeOfClause(LetClauseNode node) {\n+        if (node.letVarDeclarations().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        LetVariableDeclarationNode letVar = node.letVarDeclarations().get(node.letVarDeclarations().size() - 1);\n+        return Optional.of(letVar.expression());\n+    }\n+\n     @Override\n     public boolean onPreValidation(BallerinaCompletionContext context, LetClauseNode node) {\n         return !node.letKeyword().isMissing();"
  },
  {
    "sha": "bbd49036b1128614d82a5b6d6f053cb48d60f334",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/LimitClauseNodeContext.java",
    "status": "modified",
    "additions": 13,
    "deletions": 4,
    "changes": 17,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/LimitClauseNodeContext.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/LimitClauseNodeContext.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/LimitClauseNodeContext.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -17,25 +17,26 @@\n \n import io.ballerina.compiler.api.symbols.Symbol;\n import io.ballerina.compiler.syntax.tree.LimitClauseNode;\n+import io.ballerina.compiler.syntax.tree.Node;\n import io.ballerina.compiler.syntax.tree.NonTerminalNode;\n import io.ballerina.compiler.syntax.tree.QualifiedNameReferenceNode;\n import io.ballerina.compiler.syntax.tree.SyntaxKind;\n import org.ballerinalang.annotation.JavaSPIService;\n import org.ballerinalang.langserver.common.utils.completion.QNameReferenceUtil;\n import org.ballerinalang.langserver.commons.BallerinaCompletionContext;\n import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n-import org.ballerinalang.langserver.completions.providers.AbstractCompletionProvider;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n /**\n  * Completion provider for {@link LimitClauseNode} context.\n  *\n  * @since 2.0.0\n  */\n @JavaSPIService(\"org.ballerinalang.langserver.commons.completion.spi.BallerinaCompletionProvider\")\n-public class LimitClauseNodeContext extends AbstractCompletionProvider<LimitClauseNode> {\n+public class LimitClauseNodeContext extends IntermediateClauseNodeContext<LimitClauseNode> {\n \n     public LimitClauseNodeContext() {\n         super(LimitClauseNode.class);\n@@ -46,7 +47,9 @@ public LimitClauseNodeContext() {\n         List<LSCompletionItem> completionItems = new ArrayList<>();\n         NonTerminalNode nodeAtCursor = context.getNodeAtCursor();\n \n-        if (nodeAtCursor.kind() == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n+        if (cursorAtTheEndOfClause(context, node)) {\n+            completionItems.addAll(this.getKeywordCompletions(context, node));\n+        } else if (nodeAtCursor.kind() == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n             /*\n             Covers the cases where the cursor is within the expression context\n              */\n@@ -56,13 +59,19 @@ public LimitClauseNodeContext() {\n         } else {\n             completionItems.addAll(this.expressionCompletions(context));\n         }\n-        this.sort(context, node, completionItems);\n         \n+        this.sort(context, node, completionItems);\n+\n         return completionItems;\n     }\n \n     @Override\n     public boolean onPreValidation(BallerinaCompletionContext context, LimitClauseNode node) {\n         return !node.limitKeyword().isMissing();\n     }\n+\n+    @Override\n+    protected Optional<Node> getLastNodeOfClause(LimitClauseNode node) {\n+        return Optional.of(node.expression());\n+    }\n }"
  },
  {
    "sha": "c017f6f2404ebca0a3fd0c86ef5d61f6342c36ff",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/OnClauseNodeContext.java",
    "status": "modified",
    "additions": 34,
    "deletions": 5,
    "changes": 39,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/OnClauseNodeContext.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/OnClauseNodeContext.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/OnClauseNodeContext.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -17,9 +17,11 @@\n \n import io.ballerina.compiler.api.symbols.Symbol;\n import io.ballerina.compiler.syntax.tree.ExpressionNode;\n+import io.ballerina.compiler.syntax.tree.Node;\n import io.ballerina.compiler.syntax.tree.NonTerminalNode;\n import io.ballerina.compiler.syntax.tree.OnClauseNode;\n import io.ballerina.compiler.syntax.tree.QualifiedNameReferenceNode;\n+import io.ballerina.compiler.syntax.tree.SimpleNameReferenceNode;\n import io.ballerina.compiler.syntax.tree.SyntaxKind;\n import io.ballerina.compiler.syntax.tree.Token;\n import org.ballerinalang.annotation.JavaSPIService;\n@@ -28,6 +30,7 @@\n import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n import org.ballerinalang.langserver.completions.SnippetCompletionItem;\n import org.ballerinalang.langserver.completions.providers.AbstractCompletionProvider;\n+import org.ballerinalang.langserver.completions.providers.context.util.QueryExpressionUtil;\n import org.ballerinalang.langserver.completions.util.Snippet;\n \n import java.util.ArrayList;\n@@ -72,9 +75,13 @@ public OnClauseNodeContext() {\n             completionItems.addAll(this.getCompletionItemList(exprEntries, context));\n         } else {\n             completionItems.addAll(this.expressionCompletions(context));\n+            // If cursor at the end of clause, suggest other clauses\n+            if (cursorAtEndOfClause(context, node)) {\n+                completionItems.addAll(QueryExpressionUtil.getCommonKeywordCompletions(context));\n+            }\n         }\n         this.sort(context, node, completionItems);\n-        \n+\n         return completionItems;\n     }\n \n@@ -89,9 +96,31 @@ private boolean onSuggestEqualsKeyword(BallerinaCompletionContext context, OnCla\n         ExpressionNode rhs = node.rhsExpression();\n         Token equalsKeyword = node.equalsKeyword();\n \n-        return !lhs.isMissing() && cursor > lhs.textRange().endOffset()\n-                && (rhs.isMissing() || cursor < rhs.textRange().startOffset())\n-                && (equalsKeyword.isMissing() || (!equalsKeyword.isMissing()\n-                && cursor < equalsKeyword.textRange().startOffset()));\n+        if (lhs.isMissing() || !equalsKeyword.isMissing()) {\n+            return false;\n+        } else if (cursor > lhs.textRange().endOffset() &&\n+                (!rhs.isMissing() && cursor < rhs.textRange().startOffset())) {\n+            return true;\n+        } else {\n+            Node nodeAtCursor = context.getNodeAtCursor();\n+\n+            /*\n+             * Captures:\n+             * (1) join var varName in expr e<cursor>\n+             * (2) join var varName in expr eq<cursor> expr\n+             */\n+            if (nodeAtCursor.kind() == SyntaxKind.SIMPLE_NAME_REFERENCE) {\n+                SimpleNameReferenceNode nameReferenceNode = (SimpleNameReferenceNode) nodeAtCursor;\n+                return lhs.textRange().endOffset() == cursor &&\n+                        nameReferenceNode.textRange().endOffset() == cursor;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private boolean cursorAtEndOfClause(BallerinaCompletionContext context, OnClauseNode node) {\n+        int cursor = context.getCursorPositionInTree();\n+        return !node.rhsExpression().isMissing() && node.rhsExpression().textRange().endOffset() < cursor;\n     }\n }"
  },
  {
    "sha": "32dd2165e07c6679d5deda729a38892b108387f6",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/OrderByClauseNodeContext.java",
    "status": "modified",
    "additions": 40,
    "deletions": 2,
    "changes": 42,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/OrderByClauseNodeContext.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/OrderByClauseNodeContext.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/OrderByClauseNodeContext.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -16,6 +16,7 @@\n package org.ballerinalang.langserver.completions.providers.context;\n \n import io.ballerina.compiler.api.symbols.Symbol;\n+import io.ballerina.compiler.syntax.tree.Node;\n import io.ballerina.compiler.syntax.tree.NonTerminalNode;\n import io.ballerina.compiler.syntax.tree.OrderByClauseNode;\n import io.ballerina.compiler.syntax.tree.OrderKeyNode;\n@@ -27,19 +28,19 @@\n import org.ballerinalang.langserver.commons.BallerinaCompletionContext;\n import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n import org.ballerinalang.langserver.completions.SnippetCompletionItem;\n-import org.ballerinalang.langserver.completions.providers.AbstractCompletionProvider;\n import org.ballerinalang.langserver.completions.util.Snippet;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n /**\n  * Completion provider for {@link OrderByClauseNode} context.\n  *\n  * @since 2.0.0\n  */\n @JavaSPIService(\"org.ballerinalang.langserver.commons.completion.spi.BallerinaCompletionProvider\")\n-public class OrderByClauseNodeContext extends AbstractCompletionProvider<OrderByClauseNode> {\n+public class OrderByClauseNodeContext extends IntermediateClauseNodeContext<OrderByClauseNode> {\n \n     public OrderByClauseNodeContext() {\n         super(OrderByClauseNode.class);\n@@ -51,8 +52,13 @@ public OrderByClauseNodeContext() {\n         NonTerminalNode nodeAtCursor = context.getNodeAtCursor();\n \n         if (onSuggestDirectionKeywords(context, node)) {\n+            // Direction is optional\n             completionItems.add(new SnippetCompletionItem(context, Snippet.KW_ASCENDING.get()));\n             completionItems.add(new SnippetCompletionItem(context, Snippet.KW_DESCENDING.get()));\n+            // Add query expression keywords (where, let, join, etc)\n+            completionItems.addAll(this.getKeywordCompletions(context, node));\n+        } else if (cursorAtTheEndOfClause(context, node)) {\n+            completionItems.addAll(this.getKeywordCompletions(context, node));\n         } else if (nodeAtCursor.kind() == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n             /*\n             Covers the cases where the cursor is within the expression context\n@@ -86,4 +92,36 @@ private boolean onSuggestDirectionKeywords(BallerinaCompletionContext context, O\n \n         return cursor > lastOrderKey.textRange().endOffset();\n     }\n+\n+    protected boolean cursorAtTheEndOfClause(BallerinaCompletionContext context, OrderByClauseNode node) {\n+        if (node.orderKey().isEmpty()) {\n+            return false;\n+        }\n+\n+        OrderKeyNode lastOrderKey = node.orderKey().get(node.orderKey().size() - 1);\n+        int cursor = context.getCursorPositionInTree();\n+\n+        if (lastOrderKey.orderDirection().isPresent()) {\n+            return lastOrderKey.orderDirection().get().textRange().endOffset() < cursor;\n+        } else if (lastOrderKey.expression() != null && !lastOrderKey.expression().isMissing()) {\n+            return lastOrderKey.expression().textRange().endOffset() < cursor;\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    protected Optional<Node> getLastNodeOfClause(OrderByClauseNode node) {\n+        if (node.orderKey().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        OrderKeyNode lastOrderKey = node.orderKey().get(node.orderKey().size() - 1);\n+\n+        if (lastOrderKey.orderDirection().isPresent()) {\n+            return lastOrderKey.orderDirection().flatMap(Optional::of);\n+        } else {\n+            return Optional.of(lastOrderKey.expression());\n+        }\n+    }\n }"
  },
  {
    "sha": "1002cdc7d779ab6039b9807602bf8b7f565f08f6",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/WhereClauseNodeContext.java",
    "status": "modified",
    "additions": 12,
    "deletions": 4,
    "changes": 16,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/WhereClauseNodeContext.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/WhereClauseNodeContext.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/WhereClauseNodeContext.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -16,6 +16,7 @@\n package org.ballerinalang.langserver.completions.providers.context;\n \n import io.ballerina.compiler.api.symbols.Symbol;\n+import io.ballerina.compiler.syntax.tree.Node;\n import io.ballerina.compiler.syntax.tree.NonTerminalNode;\n import io.ballerina.compiler.syntax.tree.QualifiedNameReferenceNode;\n import io.ballerina.compiler.syntax.tree.SyntaxKind;\n@@ -24,18 +25,18 @@\n import org.ballerinalang.langserver.common.utils.completion.QNameReferenceUtil;\n import org.ballerinalang.langserver.commons.BallerinaCompletionContext;\n import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n-import org.ballerinalang.langserver.completions.providers.AbstractCompletionProvider;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n /**\n  * Completion provider for {@link WhereClauseNode} context.\n  *\n  * @since 2.0.0\n  */\n @JavaSPIService(\"org.ballerinalang.langserver.commons.completion.spi.BallerinaCompletionProvider\")\n-public class WhereClauseNodeContext extends AbstractCompletionProvider<WhereClauseNode> {\n+public class WhereClauseNodeContext extends IntermediateClauseNodeContext<WhereClauseNode> {\n \n     public WhereClauseNodeContext() {\n         super(WhereClauseNode.class);\n@@ -46,7 +47,9 @@ public WhereClauseNodeContext() {\n         List<LSCompletionItem> completionItems = new ArrayList<>();\n         NonTerminalNode nodeAtCursor = context.getNodeAtCursor();\n \n-        if (nodeAtCursor.kind() == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n+        if (cursorAtTheEndOfClause(context, node)) {\n+            completionItems.addAll(this.getKeywordCompletions(context, node));\n+        } else if (nodeAtCursor.kind() == SyntaxKind.QUALIFIED_NAME_REFERENCE) {\n             /*\n             Covers the cases where the cursor is within the expression context\n              */\n@@ -57,12 +60,17 @@ public WhereClauseNodeContext() {\n             completionItems.addAll(this.expressionCompletions(context));\n         }\n         this.sort(context, node, completionItems);\n-        \n+\n         return completionItems;\n     }\n \n     @Override\n     public boolean onPreValidation(BallerinaCompletionContext context, WhereClauseNode node) {\n         return !node.whereKeyword().isMissing();\n     }\n+\n+    @Override\n+    protected Optional<Node> getLastNodeOfClause(WhereClauseNode node) {\n+        return Optional.of(node.expression());\n+    }\n }"
  },
  {
    "sha": "e555a12c4bd9bd60ddcf59a213ce322b7073745c",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/util/QueryExpressionUtil.java",
    "status": "added",
    "additions": 44,
    "deletions": 0,
    "changes": 44,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/util/QueryExpressionUtil.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/util/QueryExpressionUtil.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/util/QueryExpressionUtil.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -0,0 +1,44 @@\n+/*\n+ *  Copyright (c) 2021, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.ballerinalang.langserver.completions.providers.context.util;\n+\n+import org.ballerinalang.langserver.commons.BallerinaCompletionContext;\n+import org.ballerinalang.langserver.commons.completion.LSCompletionItem;\n+import org.ballerinalang.langserver.completions.SnippetCompletionItem;\n+import org.ballerinalang.langserver.completions.util.Snippet;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * A utility to provide completions related to query expressions.\n+ */\n+public class QueryExpressionUtil {\n+\n+    public static List<LSCompletionItem> getCommonKeywordCompletions(BallerinaCompletionContext context) {\n+        return Arrays.asList(\n+                new SnippetCompletionItem(context, Snippet.KW_WHERE.get()),\n+                new SnippetCompletionItem(context, Snippet.KW_LET.get()),\n+                new SnippetCompletionItem(context, Snippet.CLAUSE_LET.get()),\n+                new SnippetCompletionItem(context, Snippet.KW_JOIN.get()),\n+                new SnippetCompletionItem(context, Snippet.CLAUSE_JOIN.get()),\n+                new SnippetCompletionItem(context, Snippet.KW_ORDERBY.get()),\n+                new SnippetCompletionItem(context, Snippet.KW_LIMIT.get()),\n+                new SnippetCompletionItem(context, Snippet.STMT_DO.get()),\n+                new SnippetCompletionItem(context, Snippet.KW_SELECT.get())\n+        );\n+    }\n+}"
  },
  {
    "sha": "500c865c0c5989918d662d9b124ce5922974db89",
    "filename": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/util/FieldAccessCompletionResolver.java",
    "status": "modified",
    "additions": 15,
    "deletions": 6,
    "changes": 21,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/util/FieldAccessCompletionResolver.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/util/FieldAccessCompletionResolver.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/util/FieldAccessCompletionResolver.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -70,9 +70,14 @@ public FieldAccessCompletionResolver(PositionedOperationContext context, boolean\n \n     @Override\n     public Optional<TypeSymbol> transform(SimpleNameReferenceNode node) {\n-        Symbol symbol = this.getSymbolByName(context.visibleSymbols(context.getCursorPosition()), node.name().text());\n+        Optional<Symbol> symbol = this.getSymbolByName(context.visibleSymbols(context.getCursorPosition()),\n+                node.name().text());\n \n-        return SymbolUtil.getTypeDescriptor(symbol);\n+        if (symbol.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        \n+        return SymbolUtil.getTypeDescriptor(symbol.get());\n     }\n \n     @Override\n@@ -86,9 +91,13 @@ public FieldAccessCompletionResolver(PositionedOperationContext context, boolean\n             return Optional.empty();\n         }\n         String name = ((SimpleNameReferenceNode) fieldName).name().text();\n-        Symbol filteredSymbol = this.getSymbolByName(this.getVisibleEntries(typeSymbol.orElseThrow()), name);\n+        Optional<Symbol> filteredSymbol = this.getSymbolByName(this.getVisibleEntries(typeSymbol.orElseThrow()), name);\n+\n+        if (filteredSymbol.isEmpty()) {\n+            return Optional.empty();\n+        }\n \n-        return SymbolUtil.getTypeDescriptor(filteredSymbol);\n+        return SymbolUtil.getTypeDescriptor(filteredSymbol.get());\n     }\n \n     @Override\n@@ -160,10 +169,10 @@ public FieldAccessCompletionResolver(PositionedOperationContext context, boolean\n         return typeSymbol.map(this::getVisibleEntries).orElse(Collections.emptyList());\n     }\n \n-    private Symbol getSymbolByName(List<Symbol> visibleSymbols, String name) {\n+    private Optional<Symbol> getSymbolByName(List<Symbol> visibleSymbols, String name) {\n         return visibleSymbols.stream()\n                 .filter((symbol -> symbol.getName().orElse(\"\").equals(name)))\n-                .findFirst().orElseThrow();\n+                .findFirst();\n     }\n \n     private Symbol getSymbolByName(List<Symbol> visibleSymbols, String name, @Nonnull Predicate<Symbol> predicate) {"
  },
  {
    "sha": "a8045841fccc093af1b2632af43f8ca9dcaddd86",
    "filename": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/ExpressionContextTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 17,
    "changes": 19,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/ExpressionContextTest.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/ExpressionContextTest.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/ExpressionContextTest.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -51,23 +51,8 @@ public String getTestResourceDir() {\n \n     @Override\n     public List<String> skipList() {\n-        return Arrays.asList(\"table_constructor_expr_ctx_config2.json\",\n-                \"query_expr_ctx_config2.json\",\n-                \"query_expr_ctx_config6a.json\",\n-                \"query_expr_ctx_config7.json\",\n-                \"query_expr_ctx_config5.json\",\n-                \"query_expr_ctx_join_clause_config4.json\",\n-                \"query_expr_ctx_join_clause_config2a.json\",\n-                \"query_expr_ctx_join_clause_config5a.json\",\n-                \"query_expr_ctx_join_clause_config6.json\",\n-                \"query_expr_ctx_join_clause_config6a.json\",\n-                \"query_expr_ctx_join_clause_config7.json\",\n-                \"query_expr_ctx_join_clause_config7a.json\",\n-                \"query_expr_ctx_join_clause_config8.json\",\n-                \"query_expr_ctx_join_clause_config11.json\", // LS fix needed\n-                \"query_expr_ctx_orderby_clause_config4.json\", // LS fix needed\n-                \"query_expr_ctx_onconflict_clause_config1.json\",\n-                \"query_expr_ctx_onconflict_clause_config1a.json\", // LS fix needed\n+        return Arrays.asList(\n+                \"table_constructor_expr_ctx_config2.json\",\n                 \"object_constructor_expr_ctx_config12a.json\",\n                 \"object_constructor_expr_ctx_config6.json\", // LS fix needed\n                 \"object_constructor_expr_ctx_config11.json\", // LS fix needed"
  },
  {
    "sha": "aae9d171abf2b0e08e4c646a710a3d24a45c5c01",
    "filename": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/QueryExpressionContextTest.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/QueryExpressionContextTest.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/QueryExpressionContextTest.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/QueryExpressionContextTest.java?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2021, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.ballerinalang.langserver.completion;\n+\n+import org.ballerinalang.langserver.commons.workspace.WorkspaceDocumentException;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Query expression context related tests. Covers query expressions and query actions.\n+ */\n+public class QueryExpressionContextTest extends CompletionTestNew {\n+\n+    @Test(dataProvider = \"completion-data-provider\")\n+    @Override\n+    public void test(String config, String configPath) throws WorkspaceDocumentException, IOException {\n+        super.test(config, configPath);\n+    }\n+\n+    @DataProvider(name = \"completion-data-provider\")\n+    @Override\n+    public Object[][] dataProvider() {\n+        return this.getConfigsList();\n+    }\n+\n+    @Override\n+    public List<String> skipList() {\n+        return Arrays.asList(\n+                // table\n+                \"query_expr_ctx_config2.json\",\n+                \"query_expr_ctx_config5.json\",\n+                // TODO ST identifies the wrong token when there's a newline. Need to look at that.\n+                \"query_expr_ctx_join_clause_config6a.json\",\n+                // TODO: Suggestions in join's on clause should be limited to lists being joined\n+                \"query_expr_ctx_join_clause_config8.json\",\n+                // On Conflict\n+                \"query_expr_ctx_onconflict_clause_config1.json\",\n+                \"query_expr_ctx_onconflict_clause_config1a.json\",\n+                // Order By [asc/desc]\n+                \"query_expr_ctx_orderby_clause_config4.json\"\n+        );\n+    }\n+\n+    @Override\n+    public String getTestResourceDir() {\n+        return \"query_expression\";\n+    }\n+}"
  },
  {
    "sha": "8cc54b330e773c7ab9502a974e99b843aa2d9713",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/check_expression_ctx_config1.json",
    "status": "modified",
    "additions": 37,
    "deletions": 37,
    "changes": 74,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/check_expression_ctx_config1.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/check_expression_ctx_config1.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/check_expression_ctx_config1.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -30,11 +30,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"sortText\": \"P\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"sortText\": \"O\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -46,11 +46,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"ballerina/lang.test\",\n+      \"label\": \"ballerina/jballerina.java\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"test\",\n+      \"insertText\": \"java\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -64,16 +64,16 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.test;\\n\"\n+          \"newText\": \"import ballerina/jballerina.java;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.array\",\n+      \"label\": \"ballerina/lang.value\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"array\",\n+      \"insertText\": \"value\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -87,16 +87,16 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.array;\\n\"\n+          \"newText\": \"import ballerina/lang.value;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/jballerina.java\",\n+      \"label\": \"ballerina/lang.runtime\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"java\",\n+      \"insertText\": \"runtime\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -110,16 +110,16 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/jballerina.java;\\n\"\n+          \"newText\": \"import ballerina/lang.runtime;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.value\",\n+      \"label\": \"ballerina/lang.test\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"value\",\n+      \"insertText\": \"test\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -133,7 +133,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.value;\\n\"\n+          \"newText\": \"import ballerina/lang.test;\\n\"\n         }\n       ]\n     },\n@@ -161,11 +161,11 @@\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.runtime\",\n+      \"label\": \"ballerina/lang.array\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"runtime\",\n+      \"insertText\": \"array\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -179,7 +179,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.runtime;\\n\"\n+          \"newText\": \"import ballerina/lang.array;\\n\"\n         }\n       ]\n     },\n@@ -455,22 +455,6 @@\n       \"insertText\": \"base64 `${1}`\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n-    {\n-      \"label\": \"testVar\",\n-      \"kind\": \"Variable\",\n-      \"detail\": \"typedesc<int>\",\n-      \"sortText\": \"B\",\n-      \"insertText\": \"testVar\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"value2\",\n-      \"kind\": \"Variable\",\n-      \"detail\": \"int\",\n-      \"sortText\": \"B\",\n-      \"insertText\": \"value2\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n     {\n       \"label\": \"functionWithReturn()(Record1)\",\n       \"kind\": \"Function\",\n@@ -485,19 +469,35 @@\n       \"insertText\": \"functionWithReturn()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n+    {\n+      \"label\": \"testVar\",\n+      \"kind\": \"Variable\",\n+      \"detail\": \"typedesc<int>\",\n+      \"sortText\": \"B\",\n+      \"insertText\": \"testVar\",\n+      \"insertTextFormat\": \"Snippet\"\n+    },\n     {\n       \"label\": \"testFunction()\",\n       \"kind\": \"Function\",\n       \"detail\": \"Function\",\n       \"documentation\": {\n         \"right\": {\n           \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n  \\n  \\n**Returns** `()`   \\n  \\n\"\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n\"\n         }\n       },\n       \"sortText\": \"C\",\n       \"insertText\": \"testFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n+    },\n+    {\n+      \"label\": \"value2\",\n+      \"kind\": \"Variable\",\n+      \"detail\": \"int\",\n+      \"sortText\": \"B\",\n+      \"insertText\": \"value2\",\n+      \"insertTextFormat\": \"Snippet\"\n     }\n   ]\n }\n\\ No newline at end of file"
  },
  {
    "sha": "3de31ab638468bee1b4670fefdad5cf4dbe31608",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/check_expression_ctx_config2.json",
    "status": "modified",
    "additions": 37,
    "deletions": 37,
    "changes": 74,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/check_expression_ctx_config2.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/check_expression_ctx_config2.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/check_expression_ctx_config2.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -30,11 +30,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"sortText\": \"P\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"sortText\": \"O\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -46,11 +46,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"ballerina/lang.test\",\n+      \"label\": \"ballerina/jballerina.java\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"test\",\n+      \"insertText\": \"java\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -64,16 +64,16 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.test;\\n\"\n+          \"newText\": \"import ballerina/jballerina.java;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.array\",\n+      \"label\": \"ballerina/lang.value\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"array\",\n+      \"insertText\": \"value\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -87,16 +87,16 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.array;\\n\"\n+          \"newText\": \"import ballerina/lang.value;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/jballerina.java\",\n+      \"label\": \"ballerina/lang.runtime\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"java\",\n+      \"insertText\": \"runtime\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -110,16 +110,16 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/jballerina.java;\\n\"\n+          \"newText\": \"import ballerina/lang.runtime;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.value\",\n+      \"label\": \"ballerina/lang.test\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"value\",\n+      \"insertText\": \"test\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -133,7 +133,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.value;\\n\"\n+          \"newText\": \"import ballerina/lang.test;\\n\"\n         }\n       ]\n     },\n@@ -161,11 +161,11 @@\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.runtime\",\n+      \"label\": \"ballerina/lang.array\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n       \"sortText\": \"Q\",\n-      \"insertText\": \"runtime\",\n+      \"insertText\": \"array\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -179,7 +179,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.runtime;\\n\"\n+          \"newText\": \"import ballerina/lang.array;\\n\"\n         }\n       ]\n     },\n@@ -455,22 +455,6 @@\n       \"insertText\": \"base64 `${1}`\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n-    {\n-      \"label\": \"testVar\",\n-      \"kind\": \"Variable\",\n-      \"detail\": \"$CompilationError$\",\n-      \"sortText\": \"B\",\n-      \"insertText\": \"testVar\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"value2\",\n-      \"kind\": \"Variable\",\n-      \"detail\": \"int\",\n-      \"sortText\": \"B\",\n-      \"insertText\": \"value2\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n     {\n       \"label\": \"functionWithReturn()(Record1)\",\n       \"kind\": \"Function\",\n@@ -485,19 +469,35 @@\n       \"insertText\": \"functionWithReturn()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n+    {\n+      \"label\": \"testVar\",\n+      \"kind\": \"Variable\",\n+      \"detail\": \"$CompilationError$\",\n+      \"sortText\": \"B\",\n+      \"insertText\": \"testVar\",\n+      \"insertTextFormat\": \"Snippet\"\n+    },\n     {\n       \"label\": \"testFunction()\",\n       \"kind\": \"Function\",\n       \"detail\": \"Function\",\n       \"documentation\": {\n         \"right\": {\n           \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n  \\n  \\n**Returns** `()`   \\n  \\n\"\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n\"\n         }\n       },\n       \"sortText\": \"C\",\n       \"insertText\": \"testFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n+    },\n+    {\n+      \"label\": \"value2\",\n+      \"kind\": \"Variable\",\n+      \"detail\": \"int\",\n+      \"sortText\": \"B\",\n+      \"insertText\": \"value2\",\n+      \"insertTextFormat\": \"Snippet\"\n     }\n   ]\n }\n\\ No newline at end of file"
  },
  {
    "sha": "1b4b974d4e96033d249b3126636bce61601201c5",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config1.json",
    "status": "modified",
    "additions": 46,
    "deletions": 46,
    "changes": 92,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config1.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config1.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config1.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -27,10 +27,10 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -41,10 +41,10 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"ballerina/lang.test\",\n+      \"label\": \"ballerina/jballerina.java\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"test\",\n+      \"insertText\": \"java\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -58,15 +58,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.test;\\n\"\n+          \"newText\": \"import ballerina/jballerina.java;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.array\",\n+      \"label\": \"ballerina/lang.value\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"array\",\n+      \"insertText\": \"value\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -80,15 +80,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.array;\\n\"\n+          \"newText\": \"import ballerina/lang.value;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/jballerina.java\",\n+      \"label\": \"ballerina/lang.runtime\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"java\",\n+      \"insertText\": \"runtime\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -102,15 +102,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/jballerina.java;\\n\"\n+          \"newText\": \"import ballerina/lang.runtime;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.value\",\n+      \"label\": \"ballerina/lang.test\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"value\",\n+      \"insertText\": \"test\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -124,7 +124,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.value;\\n\"\n+          \"newText\": \"import ballerina/lang.test;\\n\"\n         }\n       ]\n     },\n@@ -151,10 +151,10 @@\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.runtime\",\n+      \"label\": \"ballerina/lang.array\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"runtime\",\n+      \"insertText\": \"array\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -168,7 +168,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.runtime;\\n\"\n+          \"newText\": \"import ballerina/lang.array;\\n\"\n         }\n       ]\n     },\n@@ -375,6 +375,13 @@\n       \"insertText\": \"checkpanic \",\n       \"insertTextFormat\": \"Snippet\"\n     },\n+    {\n+      \"label\": \"is\",\n+      \"kind\": \"Keyword\",\n+      \"detail\": \"Keyword\",\n+      \"insertText\": \"is\",\n+      \"insertTextFormat\": \"Snippet\"\n+    },\n     {\n       \"label\": \"error constructor\",\n       \"kind\": \"Snippet\",\n@@ -404,34 +411,17 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"testFunctionWithParams(int a, int b)(int)\",\n-      \"kind\": \"Function\",\n-      \"detail\": \"Function\",\n-      \"documentation\": {\n-        \"right\": {\n-          \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n**Params**  \\n- `int` a  \\n- `int` b  \\n  \\n**Returns** `int`   \\n  \\n\"\n-        }\n-      },\n-      \"insertText\": \"testFunctionWithParams(${1})\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"command\": {\n-        \"title\": \"editor.action.triggerParameterHints\",\n-        \"command\": \"editor.action.triggerParameterHints\"\n-      }\n-    },\n-    {\n-      \"label\": \"valueB\",\n+      \"label\": \"valueA\",\n       \"kind\": \"Variable\",\n       \"detail\": \"int\",\n-      \"insertText\": \"valueB\",\n+      \"insertText\": \"valueA\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"valueA\",\n+      \"label\": \"valueB\",\n       \"kind\": \"Variable\",\n       \"detail\": \"int\",\n-      \"insertText\": \"valueA\",\n+      \"insertText\": \"valueB\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -441,18 +431,28 @@\n       \"documentation\": {\n         \"right\": {\n           \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n  \\n  \\n**Returns** `()`   \\n  \\n\"\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n\"\n         }\n       },\n       \"insertText\": \"testFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"is\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"is\",\n-      \"insertTextFormat\": \"Snippet\"\n+      \"label\": \"testFunctionWithParams(int a, int b)(int)\",\n+      \"kind\": \"Function\",\n+      \"detail\": \"Function\",\n+      \"documentation\": {\n+        \"right\": {\n+          \"kind\": \"markdown\",\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n**Params**  \\n- `int` a  \\n- `int` b  \\n  \\n**Returns** `int`   \\n  \\n\"\n+        }\n+      },\n+      \"insertText\": \"testFunctionWithParams(${1})\",\n+      \"insertTextFormat\": \"Snippet\",\n+      \"command\": {\n+        \"title\": \"editor.action.triggerParameterHints\",\n+        \"command\": \"editor.action.triggerParameterHints\"\n+      }\n     }\n   ]\n }\n\\ No newline at end of file"
  },
  {
    "sha": "1ba171e4a275166eb3c831766050a16a690721cb",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config2.json",
    "status": "modified",
    "additions": 46,
    "deletions": 46,
    "changes": 92,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config2.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config2.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config2.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -27,10 +27,10 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -41,10 +41,10 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"ballerina/lang.test\",\n+      \"label\": \"ballerina/jballerina.java\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"test\",\n+      \"insertText\": \"java\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -58,15 +58,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.test;\\n\"\n+          \"newText\": \"import ballerina/jballerina.java;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.array\",\n+      \"label\": \"ballerina/lang.value\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"array\",\n+      \"insertText\": \"value\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -80,15 +80,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.array;\\n\"\n+          \"newText\": \"import ballerina/lang.value;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/jballerina.java\",\n+      \"label\": \"ballerina/lang.runtime\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"java\",\n+      \"insertText\": \"runtime\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -102,15 +102,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/jballerina.java;\\n\"\n+          \"newText\": \"import ballerina/lang.runtime;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.value\",\n+      \"label\": \"ballerina/lang.test\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"value\",\n+      \"insertText\": \"test\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -124,7 +124,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.value;\\n\"\n+          \"newText\": \"import ballerina/lang.test;\\n\"\n         }\n       ]\n     },\n@@ -151,10 +151,10 @@\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.runtime\",\n+      \"label\": \"ballerina/lang.array\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"runtime\",\n+      \"insertText\": \"array\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -168,7 +168,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.runtime;\\n\"\n+          \"newText\": \"import ballerina/lang.array;\\n\"\n         }\n       ]\n     },\n@@ -375,6 +375,13 @@\n       \"insertText\": \"checkpanic \",\n       \"insertTextFormat\": \"Snippet\"\n     },\n+    {\n+      \"label\": \"is\",\n+      \"kind\": \"Keyword\",\n+      \"detail\": \"Keyword\",\n+      \"insertText\": \"is\",\n+      \"insertTextFormat\": \"Snippet\"\n+    },\n     {\n       \"label\": \"error constructor\",\n       \"kind\": \"Snippet\",\n@@ -404,34 +411,17 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"testFunctionWithParams(int a, int b)(int)\",\n-      \"kind\": \"Function\",\n-      \"detail\": \"Function\",\n-      \"documentation\": {\n-        \"right\": {\n-          \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n**Params**  \\n- `int` a  \\n- `int` b  \\n  \\n**Returns** `int`   \\n  \\n\"\n-        }\n-      },\n-      \"insertText\": \"testFunctionWithParams(${1})\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"command\": {\n-        \"title\": \"editor.action.triggerParameterHints\",\n-        \"command\": \"editor.action.triggerParameterHints\"\n-      }\n-    },\n-    {\n-      \"label\": \"valueB\",\n+      \"label\": \"valueA\",\n       \"kind\": \"Variable\",\n       \"detail\": \"int\",\n-      \"insertText\": \"valueB\",\n+      \"insertText\": \"valueA\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"valueA\",\n+      \"label\": \"valueB\",\n       \"kind\": \"Variable\",\n       \"detail\": \"int\",\n-      \"insertText\": \"valueA\",\n+      \"insertText\": \"valueB\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -441,18 +431,28 @@\n       \"documentation\": {\n         \"right\": {\n           \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n  \\n  \\n**Returns** `()`   \\n  \\n\"\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n\"\n         }\n       },\n       \"insertText\": \"testFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"is\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"is\",\n-      \"insertTextFormat\": \"Snippet\"\n+      \"label\": \"testFunctionWithParams(int a, int b)(int)\",\n+      \"kind\": \"Function\",\n+      \"detail\": \"Function\",\n+      \"documentation\": {\n+        \"right\": {\n+          \"kind\": \"markdown\",\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n**Params**  \\n- `int` a  \\n- `int` b  \\n  \\n**Returns** `int`   \\n  \\n\"\n+        }\n+      },\n+      \"insertText\": \"testFunctionWithParams(${1})\",\n+      \"insertTextFormat\": \"Snippet\",\n+      \"command\": {\n+        \"title\": \"editor.action.triggerParameterHints\",\n+        \"command\": \"editor.action.triggerParameterHints\"\n+      }\n     }\n   ]\n }\n\\ No newline at end of file"
  },
  {
    "sha": "b2e0a6a21e61e3407da4619bb211ac64e215f5c1",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config3.json",
    "status": "modified",
    "additions": 46,
    "deletions": 46,
    "changes": 92,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config3.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config3.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config3.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -27,10 +27,10 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -41,10 +41,10 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"ballerina/lang.test\",\n+      \"label\": \"ballerina/jballerina.java\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"test\",\n+      \"insertText\": \"java\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -58,15 +58,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.test;\\n\"\n+          \"newText\": \"import ballerina/jballerina.java;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.array\",\n+      \"label\": \"ballerina/lang.value\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"array\",\n+      \"insertText\": \"value\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -80,15 +80,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.array;\\n\"\n+          \"newText\": \"import ballerina/lang.value;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/jballerina.java\",\n+      \"label\": \"ballerina/lang.runtime\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"java\",\n+      \"insertText\": \"runtime\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -102,15 +102,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/jballerina.java;\\n\"\n+          \"newText\": \"import ballerina/lang.runtime;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.value\",\n+      \"label\": \"ballerina/lang.test\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"value\",\n+      \"insertText\": \"test\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -124,7 +124,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.value;\\n\"\n+          \"newText\": \"import ballerina/lang.test;\\n\"\n         }\n       ]\n     },\n@@ -151,10 +151,10 @@\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.runtime\",\n+      \"label\": \"ballerina/lang.array\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"runtime\",\n+      \"insertText\": \"array\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -168,7 +168,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.runtime;\\n\"\n+          \"newText\": \"import ballerina/lang.array;\\n\"\n         }\n       ]\n     },\n@@ -375,6 +375,13 @@\n       \"insertText\": \"checkpanic \",\n       \"insertTextFormat\": \"Snippet\"\n     },\n+    {\n+      \"label\": \"is\",\n+      \"kind\": \"Keyword\",\n+      \"detail\": \"Keyword\",\n+      \"insertText\": \"is\",\n+      \"insertTextFormat\": \"Snippet\"\n+    },\n     {\n       \"label\": \"error constructor\",\n       \"kind\": \"Snippet\",\n@@ -404,34 +411,17 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"testFunctionWithParams(int a, int b)(int)\",\n-      \"kind\": \"Function\",\n-      \"detail\": \"Function\",\n-      \"documentation\": {\n-        \"right\": {\n-          \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n**Params**  \\n- `int` a  \\n- `int` b  \\n  \\n**Returns** `int`   \\n  \\n\"\n-        }\n-      },\n-      \"insertText\": \"testFunctionWithParams(${1})\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"command\": {\n-        \"title\": \"editor.action.triggerParameterHints\",\n-        \"command\": \"editor.action.triggerParameterHints\"\n-      }\n-    },\n-    {\n-      \"label\": \"valueB\",\n+      \"label\": \"valueA\",\n       \"kind\": \"Variable\",\n       \"detail\": \"int\",\n-      \"insertText\": \"valueB\",\n+      \"insertText\": \"valueA\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"valueA\",\n+      \"label\": \"valueB\",\n       \"kind\": \"Variable\",\n       \"detail\": \"int\",\n-      \"insertText\": \"valueA\",\n+      \"insertText\": \"valueB\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -441,18 +431,28 @@\n       \"documentation\": {\n         \"right\": {\n           \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n  \\n  \\n**Returns** `()`   \\n  \\n\"\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n\"\n         }\n       },\n       \"insertText\": \"testFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"is\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"is\",\n-      \"insertTextFormat\": \"Snippet\"\n+      \"label\": \"testFunctionWithParams(int a, int b)(int)\",\n+      \"kind\": \"Function\",\n+      \"detail\": \"Function\",\n+      \"documentation\": {\n+        \"right\": {\n+          \"kind\": \"markdown\",\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n**Params**  \\n- `int` a  \\n- `int` b  \\n  \\n**Returns** `int`   \\n  \\n\"\n+        }\n+      },\n+      \"insertText\": \"testFunctionWithParams(${1})\",\n+      \"insertTextFormat\": \"Snippet\",\n+      \"command\": {\n+        \"title\": \"editor.action.triggerParameterHints\",\n+        \"command\": \"editor.action.triggerParameterHints\"\n+      }\n     }\n   ]\n }\n\\ No newline at end of file"
  },
  {
    "sha": "e73fbb33b9e48b475690c74f55fcce20e6db0ae1",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config4.json",
    "status": "modified",
    "additions": 46,
    "deletions": 46,
    "changes": 92,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config4.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config4.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/function_call_expression_ctx_config4.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -27,10 +27,10 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -41,10 +41,10 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"ballerina/lang.test\",\n+      \"label\": \"ballerina/jballerina.java\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"test\",\n+      \"insertText\": \"java\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -58,15 +58,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.test;\\n\"\n+          \"newText\": \"import ballerina/jballerina.java;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.array\",\n+      \"label\": \"ballerina/lang.value\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"array\",\n+      \"insertText\": \"value\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -80,15 +80,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.array;\\n\"\n+          \"newText\": \"import ballerina/lang.value;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/jballerina.java\",\n+      \"label\": \"ballerina/lang.runtime\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"java\",\n+      \"insertText\": \"runtime\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -102,15 +102,15 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/jballerina.java;\\n\"\n+          \"newText\": \"import ballerina/lang.runtime;\\n\"\n         }\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.value\",\n+      \"label\": \"ballerina/lang.test\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"value\",\n+      \"insertText\": \"test\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -124,7 +124,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.value;\\n\"\n+          \"newText\": \"import ballerina/lang.test;\\n\"\n         }\n       ]\n     },\n@@ -151,10 +151,10 @@\n       ]\n     },\n     {\n-      \"label\": \"ballerina/lang.runtime\",\n+      \"label\": \"ballerina/lang.array\",\n       \"kind\": \"Module\",\n       \"detail\": \"Module\",\n-      \"insertText\": \"runtime\",\n+      \"insertText\": \"array\",\n       \"insertTextFormat\": \"Snippet\",\n       \"additionalTextEdits\": [\n         {\n@@ -168,7 +168,7 @@\n               \"character\": 0\n             }\n           },\n-          \"newText\": \"import ballerina/lang.runtime;\\n\"\n+          \"newText\": \"import ballerina/lang.array;\\n\"\n         }\n       ]\n     },\n@@ -375,6 +375,13 @@\n       \"insertText\": \"checkpanic \",\n       \"insertTextFormat\": \"Snippet\"\n     },\n+    {\n+      \"label\": \"is\",\n+      \"kind\": \"Keyword\",\n+      \"detail\": \"Keyword\",\n+      \"insertText\": \"is\",\n+      \"insertTextFormat\": \"Snippet\"\n+    },\n     {\n       \"label\": \"error constructor\",\n       \"kind\": \"Snippet\",\n@@ -404,34 +411,17 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"testFunctionWithParams(int a, int b)(int)\",\n-      \"kind\": \"Function\",\n-      \"detail\": \"Function\",\n-      \"documentation\": {\n-        \"right\": {\n-          \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n**Params**  \\n- `int` a  \\n- `int` b  \\n  \\n**Returns** `int`   \\n  \\n\"\n-        }\n-      },\n-      \"insertText\": \"testFunctionWithParams(${1})\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"command\": {\n-        \"title\": \"editor.action.triggerParameterHints\",\n-        \"command\": \"editor.action.triggerParameterHints\"\n-      }\n-    },\n-    {\n-      \"label\": \"valueB\",\n+      \"label\": \"valueA\",\n       \"kind\": \"Variable\",\n       \"detail\": \"int\",\n-      \"insertText\": \"valueB\",\n+      \"insertText\": \"valueA\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"valueA\",\n+      \"label\": \"valueB\",\n       \"kind\": \"Variable\",\n       \"detail\": \"int\",\n-      \"insertText\": \"valueA\",\n+      \"insertText\": \"valueB\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -441,18 +431,28 @@\n       \"documentation\": {\n         \"right\": {\n           \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n  \\n  \\n**Returns** `()`   \\n  \\n\"\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n\"\n         }\n       },\n       \"insertText\": \"testFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"is\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"is\",\n-      \"insertTextFormat\": \"Snippet\"\n+      \"label\": \"testFunctionWithParams(int a, int b)(int)\",\n+      \"kind\": \"Function\",\n+      \"detail\": \"Function\",\n+      \"documentation\": {\n+        \"right\": {\n+          \"kind\": \"markdown\",\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n**Params**  \\n- `int` a  \\n- `int` b  \\n  \\n**Returns** `int`   \\n  \\n\"\n+        }\n+      },\n+      \"insertText\": \"testFunctionWithParams(${1})\",\n+      \"insertTextFormat\": \"Snippet\",\n+      \"command\": {\n+        \"title\": \"editor.action.triggerParameterHints\",\n+        \"command\": \"editor.action.triggerParameterHints\"\n+      }\n     }\n   ]\n }\n\\ No newline at end of file"
  },
  {
    "sha": "e5e386f4ba2d45419f7c0a3eedca138cf2cc63c5",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config1.json",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config1.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config1.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config1.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -30,11 +30,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"sortText\": \"Q\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"sortText\": \"P\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -471,17 +471,17 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"testNewFunction()\",\n+      \"label\": \"createObject1()(TestObject1)\",\n       \"kind\": \"Function\",\n       \"detail\": \"Function\",\n       \"documentation\": {\n         \"right\": {\n           \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n\"\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n  \\n  \\n**Returns** `TestObject1`   \\n  \\n\"\n         }\n       },\n-      \"sortText\": \"D\",\n-      \"insertText\": \"testNewFunction()\",\n+      \"sortText\": \"A\",\n+      \"insertText\": \"createObject1()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -493,17 +493,17 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"createObject1()(TestObject1)\",\n+      \"label\": \"testNewFunction()\",\n       \"kind\": \"Function\",\n       \"detail\": \"Function\",\n       \"documentation\": {\n         \"right\": {\n           \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n  \\n  \\n**Returns** `TestObject1`   \\n  \\n\"\n+          \"value\": \"**Package:** _._  \\n  \\n  \\n\"\n         }\n       },\n-      \"sortText\": \"A\",\n-      \"insertText\": \"createObject1()\",\n+      \"sortText\": \"D\",\n+      \"insertText\": \"testNewFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {"
  },
  {
    "sha": "4bb22e9070703de4f094efa4ca709f1677584aff",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config2.json",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config2.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config2.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config2.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -30,11 +30,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"sortText\": \"Q\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"sortText\": \"P\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {"
  },
  {
    "sha": "4f67e5a50f6954f8c242f533e903909c7eba2702",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config3.json",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config3.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config3.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config3.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -30,11 +30,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"sortText\": \"Q\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"sortText\": \"P\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {"
  },
  {
    "sha": "2076af5ff00db6117cdf50a2272b68729ad24bc6",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config4.json",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config4.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config4.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config4.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -30,11 +30,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"sortText\": \"Q\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"sortText\": \"P\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -470,6 +470,14 @@\n       \"insertText\": \"base64 `${1}`\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n+    {\n+      \"label\": \"obj1\",\n+      \"kind\": \"Variable\",\n+      \"detail\": \"TestObject1\",\n+      \"sortText\": \"A\",\n+      \"insertText\": \"obj1\",\n+      \"insertTextFormat\": \"Snippet\"\n+    },\n     {\n       \"label\": \"testNewFunction()\",\n       \"kind\": \"Function\",\n@@ -484,14 +492,6 @@\n       \"insertText\": \"testNewFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n-    {\n-      \"label\": \"obj1\",\n-      \"kind\": \"Variable\",\n-      \"detail\": \"TestObject1\",\n-      \"sortText\": \"A\",\n-      \"insertText\": \"obj1\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n     {\n       \"label\": \"new(int field1, int field2)\",\n       \"kind\": \"Function\","
  },
  {
    "sha": "9d2b196afe8bb88d93d75d23ba40516ad1b9402e",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config5.json",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config5.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config5.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config5.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -30,11 +30,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"sortText\": \"Q\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"sortText\": \"P\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -455,6 +455,14 @@\n       \"insertText\": \"base64 `${1}`\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n+    {\n+      \"label\": \"obj1\",\n+      \"kind\": \"Variable\",\n+      \"detail\": \"module1:TestClass1\",\n+      \"sortText\": \"C\",\n+      \"insertText\": \"obj1\",\n+      \"insertTextFormat\": \"Snippet\"\n+    },\n     {\n       \"label\": \"testNewFunction()\",\n       \"kind\": \"Function\",\n@@ -469,14 +477,6 @@\n       \"insertText\": \"testNewFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n-    {\n-      \"label\": \"obj1\",\n-      \"kind\": \"Variable\",\n-      \"detail\": \"module1:TestClass1\",\n-      \"sortText\": \"C\",\n-      \"insertText\": \"obj1\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n     {\n       \"label\": \"new(int field1, int field2)\",\n       \"kind\": \"Function\","
  },
  {
    "sha": "82ce70630f3e7d423d874c4a413c4eeee1fd6bde",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config6.json",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config6.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/08acdac2162e8ff37630842480d7931e4c52d345/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config6.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/new_expr_ctx_config6.json?ref=08acdac2162e8ff37630842480d7931e4c52d345",
    "patch": "@@ -30,11 +30,11 @@\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n-      \"label\": \"from\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"sortText\": \"Q\",\n-      \"insertText\": \"from \",\n+      \"label\": \"from clause\",\n+      \"kind\": \"Snippet\",\n+      \"detail\": \"Snippet\",\n+      \"sortText\": \"P\",\n+      \"insertText\": \"from ${1:var} ${2:item} in ${3}\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n     {\n@@ -455,6 +455,14 @@\n       \"insertText\": \"base64 `${1}`\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n+    {\n+      \"label\": \"obj1\",\n+      \"kind\": \"Variable\",\n+      \"detail\": \"module1:TestClass1\",\n+      \"sortText\": \"A\",\n+      \"insertText\": \"obj1\",\n+      \"insertTextFormat\": \"Snippet\"\n+    },\n     {\n       \"label\": \"testNewFunction()\",\n       \"kind\": \"Function\",\n@@ -469,14 +477,6 @@\n       \"insertText\": \"testNewFunction()\",\n       \"insertTextFormat\": \"Snippet\"\n     },\n-    {\n-      \"label\": \"obj1\",\n-      \"kind\": \"Variable\",\n-      \"detail\": \"module1:TestClass1\",\n-      \"sortText\": \"A\",\n-      \"insertText\": \"obj1\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n     {\n       \"label\": \"new(int field1, int field2)\",\n       \"kind\": \"Function\","
  },
  {
    "sha": "cafbfc8567480346514e7b197d36a2c9d5482639",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_config7.json",
    "status": "removed",
    "additions": 0,
    "deletions": 571,
    "changes": 571,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_config7.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_config7.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_config7.json?ref=df3f242c80ddf3aea157f7c41a4457c07a3ae5c8",
    "patch": "@@ -1,571 +0,0 @@\n-{\n-  \"position\": {\n-    \"line\": 6,\n-    \"character\": 34\n-  },\n-  \"source\": \"expression_context/source/query_expr_ctx_source7.bal\",\n-  \"items\": [\n-    {\n-      \"label\": \"module1\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"module1\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"ballerina/lang.object\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'object\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'object;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.boolean\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'boolean\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'boolean;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.xml\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'xml\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'xml;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.array\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'array\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'array;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.transaction\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'transaction\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'transaction;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.string\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'string\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'string;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.future\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'future\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'future;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.value\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'value\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'value;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.float\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'float\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'float;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.decimal\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'decimal\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'decimal;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.table\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'table\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'table;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.stream\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'stream\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'stream;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.error\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'error\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'error;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.typedesc\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'typedesc\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'typedesc;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.map\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'map\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'map;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.query\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'query\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'query;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.int\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'int\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'int;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"float\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Float\",\n-      \"insertText\": \"float\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"readonly\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Readonly\",\n-      \"insertText\": \"readonly\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"xml\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Xml\",\n-      \"insertText\": \"xml\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"byte\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Byte\",\n-      \"insertText\": \"byte\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"handle\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Handle\",\n-      \"insertText\": \"handle\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"ArgsData\",\n-      \"kind\": \"Struct\",\n-      \"detail\": \"Record\",\n-      \"documentation\": {\n-        \"left\": \"Defaultable argument names. This is for internal use.\\n\"\n-      },\n-      \"insertText\": \"ArgsData\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"never\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Never\",\n-      \"insertText\": \"never\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"null\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Nil\",\n-      \"insertText\": \"null\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"decimal\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Decimal\",\n-      \"insertText\": \"decimal\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"string\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"String\",\n-      \"insertText\": \"string\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"stream\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Stream\",\n-      \"insertText\": \"stream\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"json\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Json\",\n-      \"insertText\": \"json\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"StrandData\",\n-      \"kind\": \"Struct\",\n-      \"detail\": \"Record\",\n-      \"documentation\": {\n-        \"left\": \"Describes Strand execution details for the runtime.\\n\"\n-      },\n-      \"insertText\": \"StrandData\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"map\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Map\",\n-      \"insertText\": \"map\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"table\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Table\",\n-      \"insertText\": \"table\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"anydata\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Anydata\",\n-      \"insertText\": \"anydata\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"any\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Any\",\n-      \"insertText\": \"any\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"int\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Int\",\n-      \"insertText\": \"int\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"Thread\",\n-      \"kind\": \"TypeParameter\",\n-      \"detail\": \"Finite\",\n-      \"insertText\": \"Thread\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"boolean\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Boolean\",\n-      \"insertText\": \"boolean\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"future\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Future\",\n-      \"insertText\": \"future\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"service\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Service\",\n-      \"insertText\": \"service\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"typedesc\",\n-      \"kind\": \"Unit\",\n-      \"detail\": \"Typedesc\",\n-      \"insertText\": \"typedesc\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"error\",\n-      \"kind\": \"Event\",\n-      \"detail\": \"error\",\n-      \"insertText\": \"error\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"var\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"var \",\n-      \"insertTextFormat\": \"Snippet\"\n-    }\n-  ]\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "1ea7988d802bf181060a925006be325dbf21815b",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config11.json",
    "status": "removed",
    "additions": 0,
    "deletions": 480,
    "changes": 480,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config11.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config11.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config11.json?ref=df3f242c80ddf3aea157f7c41a4457c07a3ae5c8",
    "patch": "@@ -1,480 +0,0 @@\n-{\n-  \"position\": {\n-    \"line\": 17,\n-    \"character\": 32\n-  },\n-  \"source\": \"expression_context/source/query_expr_ctx_join_clause_source11.bal\",\n-  \"items\": [\n-    {\n-      \"label\": \"module1\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"module1\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"ballerina/lang.object\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'object\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'object;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.boolean\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'boolean\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'boolean;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.xml\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'xml\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'xml;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.array\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'array\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'array;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.transaction\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'transaction\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'transaction;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.string\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'string\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'string;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.future\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'future\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'future;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.value\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'value\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'value;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.float\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'float\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'float;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.decimal\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'decimal\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'decimal;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.table\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'table\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'table;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.stream\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'stream\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'stream;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.error\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'error\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'error;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.typedesc\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'typedesc\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'typedesc;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.map\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'map\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'map;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.query\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'query\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'query;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"ballerina/lang.int\",\n-      \"kind\": \"Module\",\n-      \"detail\": \"Module\",\n-      \"insertText\": \"'int\",\n-      \"insertTextFormat\": \"Snippet\",\n-      \"additionalTextEdits\": [\n-        {\n-          \"range\": {\n-            \"start\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            },\n-            \"end\": {\n-              \"line\": 1,\n-              \"character\": 0\n-            }\n-          },\n-          \"newText\": \"import ballerina/lang.'int;\\n\"\n-        }\n-      ]\n-    },\n-    {\n-      \"label\": \"table\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"table\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"service\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"service\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"string\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"string\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"xml\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"xml\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"new\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"new \",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"function\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"function \",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"let\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"let\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"typeof\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"typeof \",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"trap\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"trap\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"error\",\n-      \"kind\": \"Keyword\",\n-      \"detail\": \"Keyword\",\n-      \"insertText\": \"error\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"error constructor\",\n-      \"kind\": \"Snippet\",\n-      \"detail\": \"Snippet\",\n-      \"insertText\": \"error(\\\"${1}\\\")\",\n-      \"insertTextFormat\": \"Snippet\"\n-    },\n-    {\n-      \"label\": \"testIterableOperation()\",\n-      \"kind\": \"Function\",\n-      \"detail\": \"Function\",\n-      \"documentation\": {\n-        \"right\": {\n-          \"kind\": \"markdown\",\n-          \"value\": \"**Package:** _._  \\n  \\n  \\n\"\n-        }\n-      },\n-      \"insertText\": \"testIterableOperation();\",\n-      \"insertTextFormat\": \"Snippet\"\n-    }\n-  ]\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "3f5ff423a93321bf44ab2ddab491760d9328daa0",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config4.json",
    "status": "removed",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config4.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config4.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config4.json?ref=df3f242c80ddf3aea157f7c41a4457c07a3ae5c8",
    "patch": "@@ -1,8 +0,0 @@\n-{\n-  \"position\": {\n-    \"line\": 16,\n-    \"character\": 35\n-  },\n-  \"source\": \"expression_context/source/query_expr_ctx_join_clause_source4.bal\",\n-  \"items\": []\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "95d7c90876e005885dc352d836554c9433442db6",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config5a.json",
    "status": "removed",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config5a.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config5a.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config5a.json?ref=df3f242c80ddf3aea157f7c41a4457c07a3ae5c8",
    "patch": "@@ -1,8 +0,0 @@\n-{\n-  \"position\": {\n-    \"line\": 16,\n-    \"character\": 45\n-  },\n-  \"source\": \"expression_context/source/query_expr_ctx_join_clause_source5a.bal\",\n-  \"items\": []\n-}\n\\ No newline at end of file"
  },
  {
    "sha": "a04a4104c85ca89554d246f227930e9c2627daae",
    "filename": "language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config6.json",
    "status": "removed",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config6.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/df3f242c80ddf3aea157f7c41a4457c07a3ae5c8/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config6.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/language-server/modules/langserver-core/src/test/resources/completion/new/expression_context/config/query_expr_ctx_join_clause_config6.json?ref=df3f242c80ddf3aea157f7c41a4457c07a3ae5c8",
    "patch": "@@ -1,8 +0,0 @@\n-{\n-  \"position\": {\n-    \"line\": 16,\n-    \"character\": 50\n-  },\n-  \"source\": \"expression_context/source/query_expr_ctx_join_clause_source6.bal\",\n-  \"items\": []\n-}\n\\ No newline at end of file"
  }
]
