[
  {
    "sha": "7c0aafea1a01a056d4bb8b1d5ac2986fbb62e496",
    "filename": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java",
    "status": "modified",
    "additions": 13,
    "deletions": 5,
    "changes": 18,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java?ref=d19ec3d2b7111bf5b693760c22e145e227215f36",
    "patch": "@@ -10515,14 +10515,21 @@ private STNode parseImplicitAnonFunc(STNode params, boolean isRhsExpr) {\n     /**\n      * Create a new anon-func-param node from a braced expression.\n      *\n-     * @param params Braced expression\n+     * @param bracedExpression Braced expression\n      * @return Anon-func param node\n      */\n-    private STNode getAnonFuncParam(STBracedExpressionNode params) {\n+    private STNode getAnonFuncParam(STBracedExpressionNode bracedExpression) {\n         List<STNode> paramList = new ArrayList<>();\n-        paramList.add(params.expression);\n-        return STNodeFactory.createImplicitAnonymousFunctionParameters(params.openParen,\n-                STNodeFactory.createNodeList(paramList), params.closeParen);\n+        STNode innerExpression = bracedExpression.expression;\n+        STNode openParen = bracedExpression.openParen;\n+        if (innerExpression.kind == SyntaxKind.SIMPLE_NAME_REFERENCE) {\n+            paramList.add(innerExpression);\n+        } else {\n+            openParen = SyntaxErrors.cloneWithTrailingInvalidNodeMinutiae(openParen, innerExpression,\n+                    DiagnosticErrorCode.ERROR_INVALID_PARAM_LIST_IN_INFER_ANONYMOUS_FUNCTION_EXPR);\n+        }\n+        return STNodeFactory.createImplicitAnonymousFunctionParameters(openParen,\n+                STNodeFactory.createNodeList(paramList), bracedExpression.closeParen);\n     }\n \n     /**\n@@ -16994,6 +17001,7 @@ private STNode parseMappingFieldValue(STNode key, STNode colon) {\n         }\n \n         if (isBindingPattern(expr.kind)) {\n+            key = STNodeFactory.createSimpleNameReferenceNode(key);\n             return STNodeFactory.createFieldBindingPatternFullNode(key, colon, expr);\n         }\n "
  },
  {
    "sha": "149e4124b9768149aa557052945dff4c9908f301",
    "filename": "compiler/ballerina-parser/src/test/resources/misc/ambiguity/ambiguity_assert_29.json",
    "status": "modified",
    "additions": 66,
    "deletions": 59,
    "changes": 125,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/test/resources/misc/ambiguity/ambiguity_assert_29.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/test/resources/misc/ambiguity/ambiguity_assert_29.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-parser/src/test/resources/misc/ambiguity/ambiguity_assert_29.json?ref=d19ec3d2b7111bf5b693760c22e145e227215f36",
    "patch": "@@ -91,74 +91,81 @@\n                                   \"children\": [\n                                     {\n                                       \"kind\": \"OPEN_PAREN_TOKEN\",\n+                                      \"hasDiagnostics\": true,\n+                                      \"diagnostics\": [\n+                                        \"ERROR_INVALID_PARAM_LIST_IN_INFER_ANONYMOUS_FUNCTION_EXPR\"\n+                                      ],\n                                       \"leadingMinutiae\": [\n                                         {\n                                           \"kind\": \"WHITESPACE_MINUTIAE\",\n                                           \"value\": \"    \"\n                                         }\n+                                      ],\n+                                      \"trailingMinutiae\": [\n+                                        {\n+                                          \"kind\": \"INVALID_NODE_MINUTIAE\",\n+                                          \"invalidNode\": {\n+                                            \"kind\": \"INVALID_TOKEN_MINUTIAE_NODE\",\n+                                            \"children\": [\n+                                              {\n+                                                \"kind\": \"IDENTIFIER_TOKEN\",\n+                                                \"value\": \"a\"\n+                                              }\n+                                            ]\n+                                          }\n+                                        },\n+                                        {\n+                                          \"kind\": \"WHITESPACE_MINUTIAE\",\n+                                          \"value\": \" \"\n+                                        },\n+                                        {\n+                                          \"kind\": \"INVALID_NODE_MINUTIAE\",\n+                                          \"invalidNode\": {\n+                                            \"kind\": \"INVALID_TOKEN_MINUTIAE_NODE\",\n+                                            \"children\": [\n+                                              {\n+                                                \"kind\": \"PUBLIC_KEYWORD\"\n+                                              }\n+                                            ]\n+                                          }\n+                                        },\n+                                        {\n+                                          \"kind\": \"INVALID_NODE_MINUTIAE\",\n+                                          \"invalidNode\": {\n+                                            \"kind\": \"INVALID_TOKEN_MINUTIAE_NODE\",\n+                                            \"hasDiagnostics\": true,\n+                                            \"children\": [\n+                                              {\n+                                                \"kind\": \"PIPE_TOKEN\",\n+                                                \"hasDiagnostics\": true,\n+                                                \"diagnostics\": [\n+                                                  \"ERROR_INVALID_TOKEN\"\n+                                                ]\n+                                              }\n+                                            ]\n+                                          }\n+                                        },\n+                                        {\n+                                          \"kind\": \"WHITESPACE_MINUTIAE\",\n+                                          \"value\": \" \"\n+                                        },\n+                                        {\n+                                          \"kind\": \"INVALID_NODE_MINUTIAE\",\n+                                          \"invalidNode\": {\n+                                            \"kind\": \"INVALID_TOKEN_MINUTIAE_NODE\",\n+                                            \"children\": [\n+                                              {\n+                                                \"kind\": \"IDENTIFIER_TOKEN\",\n+                                                \"value\": \"b\"\n+                                              }\n+                                            ]\n+                                          }\n+                                        }\n                                       ]\n                                     },\n                                     {\n                                       \"kind\": \"LIST\",\n-                                      \"hasDiagnostics\": true,\n-                                      \"children\": [\n-                                        {\n-                                          \"kind\": \"BINARY_EXPRESSION\",\n-                                          \"hasDiagnostics\": true,\n-                                          \"children\": [\n-                                            {\n-                                              \"kind\": \"SIMPLE_NAME_REFERENCE\",\n-                                              \"children\": [\n-                                                {\n-                                                  \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                  \"value\": \"a\",\n-                                                  \"trailingMinutiae\": [\n-                                                    {\n-                                                      \"kind\": \"WHITESPACE_MINUTIAE\",\n-                                                      \"value\": \" \"\n-                                                    }\n-                                                  ]\n-                                                }\n-                                              ]\n-                                            },\n-                                            {\n-                                              \"kind\": \"PIPE_TOKEN\",\n-                                              \"hasDiagnostics\": true,\n-                                              \"diagnostics\": [\n-                                                \"ERROR_INVALID_TOKEN\"\n-                                              ],\n-                                              \"leadingMinutiae\": [\n-                                                {\n-                                                  \"kind\": \"INVALID_NODE_MINUTIAE\",\n-                                                  \"invalidNode\": {\n-                                                    \"kind\": \"INVALID_TOKEN_MINUTIAE_NODE\",\n-                                                    \"children\": [\n-                                                      {\n-                                                        \"kind\": \"PUBLIC_KEYWORD\"\n-                                                      }\n-                                                    ]\n-                                                  }\n-                                                }\n-                                              ],\n-                                              \"trailingMinutiae\": [\n-                                                {\n-                                                  \"kind\": \"WHITESPACE_MINUTIAE\",\n-                                                  \"value\": \" \"\n-                                                }\n-                                              ]\n-                                            },\n-                                            {\n-                                              \"kind\": \"SIMPLE_NAME_REFERENCE\",\n-                                              \"children\": [\n-                                                {\n-                                                  \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                  \"value\": \"b\"\n-                                                }\n-                                              ]\n-                                            }\n-                                          ]\n-                                        }\n-                                      ]\n+                                      \"children\": []\n                                     },\n                                     {\n                                       \"kind\": \"CLOSE_PAREN_TOKEN\","
  },
  {
    "sha": "109a14cb414b9a0bfea4fd4a92e99bedeee5e899",
    "filename": "compiler/ballerina-parser/src/test/resources/misc/resiliency/resiliency_assert_03.json",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/test/resources/misc/resiliency/resiliency_assert_03.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/test/resources/misc/resiliency/resiliency_assert_03.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-parser/src/test/resources/misc/resiliency/resiliency_assert_03.json?ref=d19ec3d2b7111bf5b693760c22e145e227215f36",
    "patch": "@@ -269,4 +269,4 @@\n       \"kind\": \"EOF_TOKEN\"\n     }\n   ]\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "6308e3fc9f64a9c4118aa60c6438dfd645db72e4",
    "filename": "compiler/ballerina-parser/src/test/resources/misc/typed-binding-patterns/typed_binding_patterns_assert_16.json",
    "status": "modified",
    "additions": 14,
    "deletions": 4,
    "changes": 18,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/test/resources/misc/typed-binding-patterns/typed_binding_patterns_assert_16.json",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/test/resources/misc/typed-binding-patterns/typed_binding_patterns_assert_16.json",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-parser/src/test/resources/misc/typed-binding-patterns/typed_binding_patterns_assert_16.json?ref=d19ec3d2b7111bf5b693760c22e145e227215f36",
    "patch": "@@ -357,8 +357,13 @@\n                                   \"kind\": \"FIELD_BINDING_PATTERN\",\n                                   \"children\": [\n                                     {\n-                                      \"kind\": \"IDENTIFIER_TOKEN\",\n-                                      \"value\": \"b\"\n+                                      \"kind\": \"SIMPLE_NAME_REFERENCE\",\n+                                      \"children\": [\n+                                        {\n+                                          \"kind\": \"IDENTIFIER_TOKEN\",\n+                                          \"value\": \"b\"\n+                                        }\n+                                      ]\n                                     },\n                                     {\n                                       \"kind\": \"COLON_TOKEN\",\n@@ -968,8 +973,13 @@\n                                               \"kind\": \"FIELD_BINDING_PATTERN\",\n                                               \"children\": [\n                                                 {\n-                                                  \"kind\": \"IDENTIFIER_TOKEN\",\n-                                                  \"value\": \"b\"\n+                                                  \"kind\": \"SIMPLE_NAME_REFERENCE\",\n+                                                  \"children\": [\n+                                                    {\n+                                                      \"kind\": \"IDENTIFIER_TOKEN\",\n+                                                      \"value\": \"b\"\n+                                                    }\n+                                                  ]\n                                                 },\n                                                 {\n                                                   \"kind\": \"COLON_TOKEN\","
  },
  {
    "sha": "8a77ecaaa5e13edc0cdce3623ef83003c662571f",
    "filename": "compiler/ballerina-parser/src/test/resources/misc/typed-binding-patterns/typed_binding_patterns_source_16.bal",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/test/resources/misc/typed-binding-patterns/typed_binding_patterns_source_16.bal",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/d19ec3d2b7111bf5b693760c22e145e227215f36/compiler/ballerina-parser/src/test/resources/misc/typed-binding-patterns/typed_binding_patterns_source_16.bal",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-parser/src/test/resources/misc/typed-binding-patterns/typed_binding_patterns_source_16.bal?ref=d19ec3d2b7111bf5b693760c22e145e227215f36",
    "patch": "@@ -1,7 +1,7 @@\n var [{a, b: {p, q: r, ...s}, ...d}, l] = x;\n-var [{a, b: [p, _, ...s ], ...d}, l] = x;\n+var [{a, b: [p, _, ...s], ...d}, l] = x;\n \n function foo() {\n     var [{a, b: {p, q: r, ...s}, ...d}, l] = x;\n-    var [{a, b: [p, _, ...s ], ...d}, l] = x;\n+    var [{a, b: [p, _, ...s], ...d}, l] = x;\n }"
  },
  {
    "sha": "22925be360b63d101668ef7d1dedd895b4b4cab3",
    "filename": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/d19ec3d2b7111bf5b693760c22e145e227215f36/misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/d19ec3d2b7111bf5b693760c22e145e227215f36/misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java?ref=d19ec3d2b7111bf5b693760c22e145e227215f36",
    "patch": "@@ -75,7 +75,7 @@ public void test(String fileName, String path) throws IOException {\n                 \"worker_decl_source_03.bal\", \"worker_decl_source_05.bal\", \"invalid_identifier_source_01.bal\",\n                 \"ambiguity_source_23.bal\", \"ambiguity_source_09.bal\", \"ambiguity_source_18.bal\",\n                 \"ambiguity_source_30.bal\", \"ambiguity_source_24.bal\", \"ambiguity_source_26.bal\",\n-                \"ambiguity_source_16.bal\", \"ambiguity_source_03.bal\",\n+                \"ambiguity_source_16.bal\", \"ambiguity_source_03.bal\", \"ambiguity_source_29.bal\",\n                 \"ambiguity_source_28.bal\", \"ambiguity_source_04.bal\", \"ambiguity_source_10.bal\",\n                 \"ambiguity_source_13.bal\", \"typed_binding_patterns_source_18.bal\",\n                 \"typed_binding_patterns_source_08.bal\", \"typed_binding_patterns_source_09.bal\","
  },
  {
    "sha": "c52bb59938fa9dbb745426d78a5df3a3a9568e78",
    "filename": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/ParserTestRunner.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/d19ec3d2b7111bf5b693760c22e145e227215f36/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/ParserTestRunner.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/d19ec3d2b7111bf5b693760c22e145e227215f36/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/ParserTestRunner.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/ParserTestRunner.java?ref=d19ec3d2b7111bf5b693760c22e145e227215f36",
    "patch": "@@ -64,8 +64,6 @@ public void test(String fileName, String path) {\n         hashSet.add(\"enum_decl_source_09.bal\");\n         hashSet.add(\"minutiae_test_05_with_no_newlines.bal\");\n         hashSet.add(\"import_decl_source_13.bal\");\n-        hashSet.add(\"ambiguity_source_29.bal\");\n-        hashSet.add(\"typed_binding_patterns_source_16.bal\");\n         hashSet.add(\"do_stmt_source_07.bal\");\n         return hashSet;\n     }"
  },
  {
    "sha": "47176eb154ea86c6b1530b58d0a7b967699b0b17",
    "filename": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module_tuple_var_decl.bal",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/d19ec3d2b7111bf5b693760c22e145e227215f36/tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module_tuple_var_decl.bal",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/d19ec3d2b7111bf5b693760c22e145e227215f36/tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module_tuple_var_decl.bal",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module_tuple_var_decl.bal?ref=d19ec3d2b7111bf5b693760c22e145e227215f36",
    "patch": "@@ -71,12 +71,17 @@ var [[intVar], {a: intVar2}, error(message), ...restBp] = getComplexTuple();\n \n function getComplexTuple() returns [[int], map<int>, error, int...] => [[5], {a: 6}, error(\"error msg\"), 12, 13];\n \n+var [{b: [intVar3, _]}] = getComplexTuple2();\n+\n+function getComplexTuple2() returns [map<[int, string]>] => [{b: [20, \"Ballerina\"]}];\n+\n function testDeclaredWithVar2() {\n     assertEquality(5, intVar);\n     assertEquality(6, intVar2);\n     assertEquality(\"error msg\", message);\n     assertEquality(12, restBp[0]);\n     assertEquality(13, restBp[1]);\n+    assertEquality(20, intVar3);\n }\n \n var [[intVal], {a: intVal2}, ...otherValues] = getComplexTuple();\n@@ -88,12 +93,14 @@ function testDeclaredWithVar3() {\n     assertEquality(true, err is error);\n     error err0 = <error> err;\n     assertEquality(\"error msg\", err0.message());\n+\n     int|error val1 = otherValues[1];\n     if (val1 is int) {\n         assertEquality(12, val1);\n     } else {\n         panic getError(\"12\", val1.toString());\n     }\n+\n     int|error val2 = otherValues[2];\n     if (val2 is int) {\n         assertEquality(13, val2);"
  }
]
