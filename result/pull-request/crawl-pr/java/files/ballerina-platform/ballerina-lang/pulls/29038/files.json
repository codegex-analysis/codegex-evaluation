[
  {
    "sha": "2163ea9f01f621037f2ea70ccb4767d572b64817",
    "filename": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaParameterizedTypeSymbol.java",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaParameterizedTypeSymbol.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaParameterizedTypeSymbol.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaParameterizedTypeSymbol.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.ballerina.compiler.api.impl.symbols;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.api.impl.LangLibrary;\n+import io.ballerina.compiler.api.symbols.FunctionSymbol;\n+import io.ballerina.compiler.api.symbols.ParameterizedTypeSymbol;\n+import io.ballerina.compiler.api.symbols.TypeDescKind;\n+import io.ballerina.compiler.api.symbols.TypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BParameterizedType;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+import java.util.List;\n+\n+/**\n+ * Represents a parameterized type.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BallerinaParameterizedTypeSymbol extends AbstractTypeSymbol implements ParameterizedTypeSymbol {\n+\n+    private TypeSymbol paramValueType;\n+    private String signature;\n+\n+    public BallerinaParameterizedTypeSymbol(CompilerContext context, ModuleID moduleID,\n+                                            BParameterizedType parameterizedType) {\n+        super(context, TypeDescKind.PARAMETERIZED, parameterizedType);\n+    }\n+\n+    @Override\n+    public TypeSymbol paramValueType() {\n+        if (this.paramValueType != null) {\n+            return this.paramValueType;\n+        }\n+\n+        TypesFactory typesFactory = TypesFactory.getInstance(this.context);\n+        this.paramValueType = typesFactory.getTypeDescriptor(((BParameterizedType) this.getBType()).paramValueType);\n+        return this.paramValueType;\n+    }\n+\n+    @Override\n+    public List<FunctionSymbol> langLibMethods() {\n+        if (this.langLibFunctions == null) {\n+            LangLibrary langLibrary = LangLibrary.getInstance(this.context);\n+            List<FunctionSymbol> functions = langLibrary.getMethods(this.paramValueType().typeKind());\n+            this.langLibFunctions = filterLangLibMethods(functions, this.getBType());\n+        }\n+\n+        return this.langLibFunctions;\n+    }\n+\n+    @Override\n+    public String signature() {\n+        if (this.signature != null) {\n+            return this.signature;\n+        }\n+\n+        this.signature = ((BParameterizedType) this.getBType()).paramSymbol.name.value;\n+        return this.signature;\n+    }\n+}"
  },
  {
    "sha": "5a64989dbaa949913955c2f7b399bd804bd44d7d",
    "filename": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/TypesFactory.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/TypesFactory.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/TypesFactory.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/TypesFactory.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -45,6 +45,7 @@\n import org.wso2.ballerinalang.compiler.semantics.model.types.BNeverType;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BParameterizedType;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BReadonlyType;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BStreamType;\n@@ -238,6 +239,8 @@ private TypeSymbol createTypeDescriptor(BType bType, ModuleID moduleID) {\n                 return new BallerinaNeverTypeSymbol(this.context, moduleID, (BNeverType) bType);\n             case INTERSECTION:\n                 return new BallerinaIntersectionTypeSymbol(this.context, moduleID, (BIntersectionType) bType);\n+            case PARAMETERIZED:\n+                return new BallerinaParameterizedTypeSymbol(this.context, moduleID, (BParameterizedType) bType);\n             default:\n                 if (bType.tag == SEMANTIC_ERROR) {\n                     return new BallerinaCompilationErrorTypeSymbol(this.context, moduleID, bType);"
  },
  {
    "sha": "55fbccaaa9e4a5200594826d713fd223e955e8b4",
    "filename": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/ParameterizedTypeSymbol.java",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/ParameterizedTypeSymbol.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/ParameterizedTypeSymbol.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/ParameterizedTypeSymbol.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.symbols;\n+\n+/**\n+ * Represents the parameterized type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface ParameterizedTypeSymbol extends TypeSymbol {\n+\n+    /**\n+     * Gets the value type of the parameter.\n+     *\n+     * @return The parameter value type of this parameterized type.\n+     */\n+    TypeSymbol paramValueType();\n+}"
  },
  {
    "sha": "579a3e25a32d443354ed60a482c675f9200cb02a",
    "filename": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/TypeDescKind.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/TypeDescKind.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/TypeDescKind.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/TypeDescKind.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -62,6 +62,7 @@\n     SINGLETON(\"singleton\"),\n     READONLY(\"readonly\"),\n     NEVER(\"never\"),\n+    PARAMETERIZED(\"parameterized\"),\n     COMPILATION_ERROR(\"CompilationError\");\n \n     private final String name;"
  },
  {
    "sha": "f138671668bcaf05fbcb4246d43fa0ff24eae3a9",
    "filename": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -77,6 +77,7 @@\n import org.ballerinalang.model.tree.expressions.GroupExpressionNode;\n import org.ballerinalang.model.tree.expressions.IgnoreNode;\n import org.ballerinalang.model.tree.expressions.IndexBasedAccessNode;\n+import org.ballerinalang.model.tree.expressions.InferredTypedescDefaultNode;\n import org.ballerinalang.model.tree.expressions.IntRangeExpression;\n import org.ballerinalang.model.tree.expressions.InvocationNode;\n import org.ballerinalang.model.tree.expressions.IsLikeExpressionNode;\n@@ -246,6 +247,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIgnoreExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsLikeExpr;\n@@ -1131,4 +1133,8 @@ public static FunctionNode createResourceFunctionNode() {\n     public static IgnoreNode createIgnoreExprNode() {\n         return new BLangIgnoreExpr();\n     }\n+\n+    public static InferredTypedescDefaultNode createInferTypedescExpressionNode() {\n+        return new BLangInferredTypedescDefaultNode();\n+    }\n }"
  },
  {
    "sha": "3c16ed99161b3d2b4611271571b6e4e914659b36",
    "filename": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -131,6 +131,7 @@\n     OBJECT_CTOR_EXPRESSION,\n     ERROR_CONSTRUCTOR_EXPRESSION,\n     DYNAMIC_PARAM_EXPR,\n+    INFER_TYPEDESC_EXPR,\n \n     /* Statements */\n     ABORT,"
  },
  {
    "sha": "104d35591f0d7378472d1dcda13d9490686003e1",
    "filename": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/InferredTypedescDefaultNode.java",
    "status": "added",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/InferredTypedescDefaultNode.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/InferredTypedescDefaultNode.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/InferredTypedescDefaultNode.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * @since 2.0.0\n+ */\n+public interface InferredTypedescDefaultNode extends ExpressionNode {\n+}"
  },
  {
    "sha": "57792e34725138e072243119dd1892a92be85b62",
    "filename": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/types/TypeKind.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/types/TypeKind.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/types/TypeKind.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/ballerinalang/model/types/TypeKind.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -90,6 +90,7 @@\n     HANDLE(\"handle\"),\n     READONLY(\"readonly\"),\n     TYPEPARAM(\"typeparam\"),\n+    PARAMETERIZED(\"parameterized\")\n     ;\n \n     private String name;"
  },
  {
    "sha": "b7606f29839215e04212dc1fe18dc79ac4acff0b",
    "filename": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java",
    "status": "modified",
    "additions": 70,
    "deletions": 65,
    "changes": 135,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -594,110 +594,115 @@\n     INVALID_NON_EXTERNAL_DEPENDENTLY_TYPED_FUNCTION(\"BCE3928\", \"invalid.non.external.dependently.typed.function\"),\n     INVALID_PARAM_TYPE_FOR_RETURN_TYPE(\"BCE3929\", \"invalid.param.type.for.return.type\"),\n     INVALID_TYPEDESC_PARAM(\"BCE3930\", \"invalid.typedesc.param\"),\n-\n-    INVALID_RAW_TEMPLATE_TYPE(\"BCE3931\", \"invalid.raw.template.type\"),\n-    MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"BCE3932\", \"multiple.compatible.raw.template.types\"),\n-    INVALID_NUM_STRINGS(\"BCE3933\", \"invalid.num.of.strings\"),\n-    INVALID_NUM_INSERTIONS(\"BCE3934\", \"invalid.num.of.insertions\"),\n-    INVALID_RAW_TEMPLATE_ASSIGNMENT(\"BCE3935\", \"invalid.raw.template.assignment\"),\n-    INVALID_NUM_FIELDS(\"BCE3936\", \"invalid.number.of.fields\"),\n-    METHODS_NOT_ALLOWED(\"BCE3937\", \"methods.not.allowed\"),\n-\n-    INVALID_MUTABLE_ACCESS_IN_ISOLATED_FUNCTION(\"BCE3938\", \"invalid.mutable.access.in.isolated.function\"),\n-    INVALID_MUTABLE_ACCESS_AS_RECORD_DEFAULT(\"BCE3939\", \"invalid.mutable.access.as.record.default\"),\n-    INVALID_MUTABLE_ACCESS_AS_OBJECT_DEFAULT(\"BCE3940\", \"invalid.mutable.access.as.object.default\"),\n-\n-    INVALID_NON_ISOLATED_FUNCTION_AS_ARGUMENT(\"BCE3941\", \"invalid.non.isolated.function.as.argument\"),\n+    INCOMPATIBLE_TYPE_FOR_INFERRED_TYPEDESC_VALUE(\"BCE3931\", \"incompatible.type.for.inferred.typedesc.value\"),\n+    MULTIPLE_INFER_TYPEDESC_PARAMS(\"BCE3932\", \"multiple.infer.typedesc.params\"),\n+    INVALID_DEPENDENTLY_TYPED_RETURN_TYPE_WITH_INFERRED_TYPEDESC_PARAM(\n+            \"BCE3933\", \"invalid.dependently.typed.return.type.with.inferred.typedesc.param\"),\n+    CANNOT_INFER_TYPE_FOR_PARAM(\"BCE3934\", \"cannot.infer.type.for.param\"),\n+\n+    INVALID_RAW_TEMPLATE_TYPE(\"BCE3935\", \"invalid.raw.template.type\"),\n+    MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"BCE3936\", \"multiple.compatible.raw.template.types\"),\n+    INVALID_NUM_STRINGS(\"BCE3937\", \"invalid.num.of.strings\"),\n+    INVALID_NUM_INSERTIONS(\"BCE3938\", \"invalid.num.of.insertions\"),\n+    INVALID_RAW_TEMPLATE_ASSIGNMENT(\"BCE3939\", \"invalid.raw.template.assignment\"),\n+    INVALID_NUM_FIELDS(\"BCE3940\", \"invalid.number.of.fields\"),\n+    METHODS_NOT_ALLOWED(\"BCE3941\", \"methods.not.allowed\"),\n+\n+    INVALID_MUTABLE_ACCESS_IN_ISOLATED_FUNCTION(\"BCE3942\", \"invalid.mutable.access.in.isolated.function\"),\n+    INVALID_MUTABLE_ACCESS_AS_RECORD_DEFAULT(\"BCE3943\", \"invalid.mutable.access.as.record.default\"),\n+    INVALID_MUTABLE_ACCESS_AS_OBJECT_DEFAULT(\"BCE3944\", \"invalid.mutable.access.as.object.default\"),\n+\n+    INVALID_NON_ISOLATED_FUNCTION_AS_ARGUMENT(\"BCE3945\", \"invalid.non.isolated.function.as.argument\"),\n \n     INVALID_NON_ISOLATED_INVOCATION_IN_ISOLATED_FUNCTION(\n-            \"BCE3942\", \"invalid.non.isolated.invocation.in.isolated.function\"),\n-    INVALID_NON_ISOLATED_INVOCATION_AS_RECORD_DEFAULT(\"BCE3943\", \"invalid.non.isolated.invocation.as.record.default\"),\n-    INVALID_NON_ISOLATED_INVOCATION_AS_OBJECT_DEFAULT(\"BCE3944\", \"invalid.non.isolated.invocation.as.object.default\"),\n+            \"BCE3946\", \"invalid.non.isolated.invocation.in.isolated.function\"),\n+    INVALID_NON_ISOLATED_INVOCATION_AS_RECORD_DEFAULT(\"BCE3947\", \"invalid.non.isolated.invocation.as.record.default\"),\n+    INVALID_NON_ISOLATED_INVOCATION_AS_OBJECT_DEFAULT(\"BCE3948\", \"invalid.non.isolated.invocation.as.object.default\"),\n \n     INVALID_NON_ISOLATED_INIT_EXPRESSION_IN_ISOLATED_FUNCTION(\n-            \"BCE3945\", \"invalid.non.isolated.init.expression.in.isolated.function\"),\n+            \"BCE3949\", \"invalid.non.isolated.init.expression.in.isolated.function\"),\n     INVALID_NON_ISOLATED_INIT_EXPRESSION_AS_RECORD_DEFAULT(\n-            \"BCE3946\", \"invalid.non.isolated.init.expression.as.record.default\"),\n+            \"BCE3950\", \"invalid.non.isolated.init.expression.as.record.default\"),\n     INVALID_NON_ISOLATED_INIT_EXPRESSION_AS_OBJECT_DEFAULT(\n-            \"BCE3947\", \"invalid.non.isolated.init.expression.as.object.default\"),\n+            \"BCE3951\", \"invalid.non.isolated.init.expression.as.object.default\"),\n \n-    INVALID_ASYNC_INVOCATION_IN_ISOLATED_FUNCTION(\"BCE3948\", \"invalid.async.invocation.in.isolated.function\"),\n-    INVALID_WORKER_DECLARATION_IN_ISOLATED_FUNCTION(\"BCE3949\", \"invalid.worker.declaration.in.isolated.function\"),\n-    INVALID_FORK_STATEMENT_IN_ISOLATED_FUNCTION(\"BCE3950\", \"invalid.fork.statement.in.isolated.function\"),\n+    INVALID_ASYNC_INVOCATION_IN_ISOLATED_FUNCTION(\"BCE3952\", \"invalid.async.invocation.in.isolated.function\"),\n+    INVALID_WORKER_DECLARATION_IN_ISOLATED_FUNCTION(\"BCE3953\", \"invalid.worker.declaration.in.isolated.function\"),\n+    INVALID_FORK_STATEMENT_IN_ISOLATED_FUNCTION(\"BCE3954\", \"invalid.fork.statement.in.isolated.function\"),\n \n     INVALID_NON_PRIVATE_MUTABLE_FIELD_IN_ISOLATED_OBJECT(\n-            \"BCE3951\", \"invalid.non.private.mutable.field.in.isolated.object\"),\n+            \"BCE3955\", \"invalid.non.private.mutable.field.in.isolated.object\"),\n     INVALID_MUTABLE_FIELD_ACCESS_IN_ISOLATED_OBJECT_OUTSIDE_LOCK(\n-            \"BCE3952\", \"invalid.mutable.field.access.in.isolated.object.outside.lock\"),\n+            \"BCE3956\", \"invalid.mutable.field.access.in.isolated.object.outside.lock\"),\n     INVALID_REFERENCE_TO_SELF_IN_ISOLATED_OBJECT_OUTSIDE_LOCK(\n-            \"BCE3953\", \"invalid.reference.to.self.in.isolated.object.outside.lock\"),\n-    INVALID_NON_ISOLATED_EXPRESSION_AS_INITIAL_VALUE(\"BCE3954\", \"invalid.non.isolated.expression.as.initial.value\"),\n+            \"BCE3957\", \"invalid.reference.to.self.in.isolated.object.outside.lock\"),\n+    INVALID_NON_ISOLATED_EXPRESSION_AS_INITIAL_VALUE(\"BCE3958\", \"invalid.non.isolated.expression.as.initial.value\"),\n     INVALID_TRANSFER_OUT_OF_LOCK_WITH_RESTRICTED_VAR_USAGE(\n-            \"BCE3955\", \"invalid.transfer.out.of.lock.with.restricted.var.usage\"),\n+            \"BCE3959\", \"invalid.transfer.out.of.lock.with.restricted.var.usage\"),\n     INVALID_TRANSFER_INTO_LOCK_WITH_RESTRICTED_VAR_USAGE(\n-            \"BCE3956\", \"invalid.transfer.into.lock.with.restricted.var.usage\"),\n+            \"BCE3960\", \"invalid.transfer.into.lock.with.restricted.var.usage\"),\n     INVALID_NON_ISOLATED_INVOCATION_IN_LOCK_WITH_RESTRICTED_VAR_USAGE(\n-            \"BCE3957\", \"invalid.non.isolated.invocation.in.lock.with.restricted.var.usage\"),\n-    INVALID_ISOLATED_VARIABLE_ACCESS_OUTSIDE_LOCK(\"BCE3958\", \"invalid.isolated.variable.access.outside.lock\"),\n+            \"BCE3961\", \"invalid.non.isolated.invocation.in.lock.with.restricted.var.usage\"),\n+    INVALID_ISOLATED_VARIABLE_ACCESS_OUTSIDE_LOCK(\"BCE3962\", \"invalid.isolated.variable.access.outside.lock\"),\n     INVALID_ASSIGNMENT_IN_LOCK_WITH_RESTRICTED_VAR_USAGE(\n-            \"BCE3959\", \"invalid.assignment.in.lock.with.restricted.var.usage\"),\n-    INVALID_USAGE_OF_MULTIPLE_RESTRICTED_VARS_IN_LOCK(\"BCE3960\", \"invalid.usage.of.multiple.restricted.vars.in.lock\"),\n+            \"BCE3963\", \"invalid.assignment.in.lock.with.restricted.var.usage\"),\n+    INVALID_USAGE_OF_MULTIPLE_RESTRICTED_VARS_IN_LOCK(\"BCE3964\", \"invalid.usage.of.multiple.restricted.vars.in.lock\"),\n \n     INVALID_ISOLATED_QUALIFIER_ON_MODULE_NO_INIT_VAR_DECL(\n-            \"BCE3961\", \"invalid.isolated.qualifier.on.module.no.init.var.decl\"),\n+            \"BCE3965\", \"invalid.isolated.qualifier.on.module.no.init.var.decl\"),\n     ONLY_A_SIMPLE_VARIABLE_CAN_BE_MARKED_AS_ISOLATED(\n-            \"BCE3962\", \"only.a.simple.variable.can.be.marked.as.isolated\"),\n+            \"BCE3966\", \"only.a.simple.variable.can.be.marked.as.isolated\"),\n     BINDING_PATTERN_NOT_YET_SUPPORTED_IN_MODULE_VAR_DECL(\n-            \"BCE3963\", \"binding.pattern.not.yet.supported.in.module.var.decl\"),\n+            \"BCE3967\", \"binding.pattern.not.yet.supported.in.module.var.decl\"),\n \n     // Configurable var related error codes\n \n     CONFIGURABLE_VARIABLE_CANNOT_BE_DECLARED_WITH_VAR(\n-            \"BCE3964\", \"configurable.variable.cannot.be.declared.with.var\"),\n+            \"BCE3968\", \"configurable.variable.cannot.be.declared.with.var\"),\n     CONFIGURABLE_VARIABLE_MUST_BE_ANYDATA_AND_READONLY(\n-            \"BCE3965\", \"configurable.variable.must.be.anydata.and.readonly\"),\n+            \"BCE3969\", \"configurable.variable.must.be.anydata.and.readonly\"),\n     ONLY_SIMPLE_VARIABLES_ARE_ALLOWED_TO_BE_CONFIGURABLE(\n-            \"BCE3966\", \"only.simple.variables.are.allowed.to.be.configurable\"),\n+            \"BCE3970\", \"only.simple.variables.are.allowed.to.be.configurable\"),\n     CONFIGURABLE_VARIABLE_CURRENTLY_NOT_SUPPORTED(\n-            \"BCE3967\", \"configurable.variable.currently.not.supported\"),\n+            \"BCE3971\", \"configurable.variable.currently.not.supported\"),\n \n-    REMOTE_FUNCTION_IN_NON_NETWORK_OBJECT(\"BCE3968\", \"remote.function.in.non.network.object\"),\n-    UNSUPPORTED_PATH_PARAM_TYPE(\"BCE3969\", \"unsupported.path.param.type\"),\n-    UNSUPPORTED_REST_PATH_PARAM_TYPE(\"BCE3970\", \"unsupported.rest.path.param.type\"),\n-    OBJECT_TYPE_DEF_DOES_NOT_ALLOW_RESOURCE_FUNC_DECL(\"BCE3971\",\n+    REMOTE_FUNCTION_IN_NON_NETWORK_OBJECT(\"BCE3972\", \"remote.function.in.non.network.object\"),\n+    UNSUPPORTED_PATH_PARAM_TYPE(\"BCE3973\", \"unsupported.path.param.type\"),\n+    UNSUPPORTED_REST_PATH_PARAM_TYPE(\"BCE3974\", \"unsupported.rest.path.param.type\"),\n+    OBJECT_TYPE_DEF_DOES_NOT_ALLOW_RESOURCE_FUNC_DECL(\"BCE3975\",\n             \"unsupported.resource.function.declaration.in.object.type\"),\n-    SERVICE_ABSOLUTE_PATH_OR_LITERAL_IS_REQUIRED_BY_LISTENER(\"BCE3972\",\n+    SERVICE_ABSOLUTE_PATH_OR_LITERAL_IS_REQUIRED_BY_LISTENER(\"BCE3976\",\n             \"service.absolute.path.or.literal.required.by.listener\"),\n-    SERVICE_PATH_LITERAL_IS_NOT_SUPPORTED_BY_LISTENER(\"BCE3973\", \"service.path.literal.is.not.supported.by.listener\"),\n-    SERVICE_ABSOLUTE_PATH_IS_NOT_SUPPORTED_BY_LISTENER(\"BCE3974\", \"service.absolute.path.is.not.supported.by.listener\"),\n-    SERVICE_LITERAL_REQUIRED_BY_LISTENER(\"BCE3975\", \"service.path.literal.required.by.listener\"),\n-    SERVICE_ABSOLUTE_PATH_REQUIRED_BY_LISTENER(\"BCE3976\", \"service.absolute.path.required.by.listener\"),\n-    SERVICE_TYPE_IS_NOT_SUPPORTED_BY_LISTENER(\"BCE3977\", \"service.type.is.not.supported.by.listener\"),\n+    SERVICE_PATH_LITERAL_IS_NOT_SUPPORTED_BY_LISTENER(\"BCE3977\", \"service.path.literal.is.not.supported.by.listener\"),\n+    SERVICE_ABSOLUTE_PATH_IS_NOT_SUPPORTED_BY_LISTENER(\"BCE3978\", \"service.absolute.path.is.not.supported.by.listener\"),\n+    SERVICE_LITERAL_REQUIRED_BY_LISTENER(\"BCE3979\", \"service.path.literal.required.by.listener\"),\n+    SERVICE_ABSOLUTE_PATH_REQUIRED_BY_LISTENER(\"BCE3980\", \"service.absolute.path.required.by.listener\"),\n+    SERVICE_TYPE_IS_NOT_SUPPORTED_BY_LISTENER(\"BCE3981\", \"service.type.is.not.supported.by.listener\"),\n \n     INVALID_READ_ONLY_CLASS_INCLUSION_IN_OBJECT_TYPE_DESCRIPTOR(\n-            \"BCE3978\", \"invalid.read.only.class.inclusion.in.object.type.descriptor\"),\n-    INVALID_INCLUSION_WITH_MISMATCHED_QUALIFIERS(\"BCE3979\", \"invalid.inclusion.with.mismatched.qualifiers\"),\n-    INVALID_REFERENCE_WITH_MISMATCHED_QUALIFIERS(\"BCE3980\", \"invalid.reference.with.mismatched.qualifiers\"),\n+            \"BCE3982\", \"invalid.read.only.class.inclusion.in.object.type.descriptor\"),\n+    INVALID_INCLUSION_WITH_MISMATCHED_QUALIFIERS(\"BCE3983\", \"invalid.inclusion.with.mismatched.qualifiers\"),\n+    INVALID_REFERENCE_WITH_MISMATCHED_QUALIFIERS(\"BCE3984\", \"invalid.reference.with.mismatched.qualifiers\"),\n     INVALID_READ_ONLY_TYPEDESC_INCLUSION_IN_OBJECT_TYPEDESC(\n-            \"BCE3981\", \"invalid.read.only.typedesc.inclusion.in.object.typedesc\"),\n+            \"BCE3985\", \"invalid.read.only.typedesc.inclusion.in.object.typedesc\"),\n     INVALID_READ_ONLY_TYPEDESC_INCLUSION_IN_NON_READ_ONLY_CLASS(\n-            \"BCE3982\", \"invalid.read.only.typedesc.inclusion.in.non.read.only.class\"),\n+            \"BCE3986\", \"invalid.read.only.typedesc.inclusion.in.non.read.only.class\"),\n     INVALID_READ_ONLY_CLASS_INCLUSION_IN_NON_READ_ONLY_CLASS(\n-            \"BCE3983\", \"invalid.read.only.class.inclusion.in.non.read.only.class\"),\n+            \"BCE3987\", \"invalid.read.only.class.inclusion.in.non.read.only.class\"),\n     INVALID_FIELD_IN_OBJECT_CONSTUCTOR_EXPR_WITH_READONLY_REFERENCE(\n-            \"BCE3984\", \"invalid.field.in.object.constructor.expr.with.readonly.reference\"),\n+            \"BCE3988\", \"invalid.field.in.object.constructor.expr.with.readonly.reference\"),\n \n-    MULTIPLE_RECEIVE_ACTION_NOT_YET_SUPPORTED(\"BCE3985\", \"multiple.receive.action.not.yet.supported\"),\n+    MULTIPLE_RECEIVE_ACTION_NOT_YET_SUPPORTED(\"BCE3989\", \"multiple.receive.action.not.yet.supported\"),\n \n-    INVALID_READONLY_FIELD_TYPE(\"BCE3986\", \"invalid.readonly.field.type\"),\n+    INVALID_READONLY_FIELD_TYPE(\"BCE3990\", \"invalid.readonly.field.type\"),\n \n-    CONTINUE_NOT_ALLOWED(\"BCE3987\", \"continue.not.allowed\"),\n-    BREAK_NOT_ALLOWED(\"BCE3988\", \"break.not.allowed\"),\n-    TYPE_DOES_NOT_SUPPORT_XML_NAVIGATION_ACCESS(\"BCE3989\", \"type.does.not.support.xml.navigation.access\"),\n-    XML_FUNCTION_DOES_NOT_SUPPORT_ARGUMENT_TYPE(\"BCE3990\", \"xml.function.does.not.support.argument.type\"),\n+    CONTINUE_NOT_ALLOWED(\"BCE3991\", \"continue.not.allowed\"),\n+    BREAK_NOT_ALLOWED(\"BCE3992\", \"break.not.allowed\"),\n+    TYPE_DOES_NOT_SUPPORT_XML_NAVIGATION_ACCESS(\"BCE3993\", \"type.does.not.support.xml.navigation.access\"),\n+    XML_FUNCTION_DOES_NOT_SUPPORT_ARGUMENT_TYPE(\"BCE3994\", \"xml.function.does.not.support.argument.type\"),\n \n-    INTERSECTION_NOT_ALLOWED_WITH_TYPE(\"BCE3991\", \"intersection.not.allowed.with.type\"),\n-    ASYNC_SEND_NOT_YET_SUPPORTED_AS_EXPRESSION(\"BCE3992\", \"async.send.action.not.yet.supported.as.expression\")\n+    INTERSECTION_NOT_ALLOWED_WITH_TYPE(\"BCE3995\", \"intersection.not.allowed.with.type\"),\n+    ASYNC_SEND_NOT_YET_SUPPORTED_AS_EXPRESSION(\"BCE3996\", \"async.send.action.not.yet.supported.as.expression\")\n     ;\n \n     private String diagnosticId;"
  },
  {
    "sha": "b7b85e8cff66fd9b7444975eaae6d26feed38edc",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -177,8 +177,8 @@\n import org.wso2.ballerinalang.compiler.util.FieldKind;\n import org.wso2.ballerinalang.compiler.util.Name;\n import org.wso2.ballerinalang.compiler.util.Names;\n-import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.Unifier;\n import org.wso2.ballerinalang.programfile.CompiledBinaryFile.BIRPackageFile;\n import org.wso2.ballerinalang.util.Flags;\n \n@@ -234,7 +234,7 @@\n     private static final String MOCK_ANNOTATION_DELIMITER = \"#\";\n     private static final String MOCK_FN_DELIMITER = \"~\";\n \n-    private ResolvedTypeBuilder typeBuilder = new ResolvedTypeBuilder();\n+    private Unifier unifier;\n \n     private BirScope currentScope;\n \n@@ -253,6 +253,7 @@ private BIRGen(CompilerContext context) {\n         this.names = Names.getInstance(context);\n         this.symTable = SymbolTable.getInstance(context);\n         this.birOptimizer = BIROptimizer.getInstance(context);\n+        this.unifier = new Unifier();\n     }\n \n     public BLangPackage genBIR(BLangPackage astPkg) {\n@@ -663,7 +664,7 @@ public void visit(BLangFunction astFunc) {\n \n         // TODO: Return variable with NIL type should be written to BIR\n         // Special %0 location for storing return values\n-        BType retType = typeBuilder.build(astFunc.symbol.type.getReturnType());\n+        BType retType = unifier.build(astFunc.symbol.type.getReturnType());\n         birFunc.returnVariable = new BIRVariableDcl(astFunc.pos, retType, this.env.nextLocalVarId(names),\n                                                     VarScope.FUNCTION, VarKind.RETURN, null);\n         birFunc.localVars.add(0, birFunc.returnVariable);"
  },
  {
    "sha": "7a427e8bba352eb6bca2987b8d7d6b33eadab7c2",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -41,8 +41,8 @@\n import org.wso2.ballerinalang.compiler.bir.model.BirScope;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.util.Name;\n-import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.Unifier;\n import org.wso2.ballerinalang.util.Flags;\n \n import java.util.List;\n@@ -98,7 +98,7 @@\n  * The common functions used in CodeGen.\n  */\n public class JvmCodeGenUtil {\n-    public static final ResolvedTypeBuilder TYPE_BUILDER = new ResolvedTypeBuilder();\n+    public static final Unifier UNIFIER = new Unifier();\n     public static final String INITIAL_METHOD_DESC = String.format(\"(L%s;\", STRAND_CLASS);\n     private static final Pattern JVM_RESERVED_CHAR_SET = Pattern.compile(\"[\\\\.:/<>]\");\n     public static final String SCOPE_PREFIX = \"_SCOPE_\";\n@@ -378,7 +378,7 @@ public static String getArgTypeSignature(BType bType) {\n     }\n \n     public static String generateReturnType(BType bType) {\n-        bType = JvmCodeGenUtil.TYPE_BUILDER.build(bType);\n+        bType = JvmCodeGenUtil.UNIFIER.build(bType);\n         if (bType == null || bType.tag == TypeTags.NIL || bType.tag == TypeTags.NEVER) {\n             return String.format(\")L%s;\", OBJECT);\n         } else if (TypeTags.isIntegerTypeTag(bType.tag)) {"
  },
  {
    "sha": "a2f2146ce9fef70d8d26ae146a7334418811f914",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -60,8 +60,8 @@\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.util.Name;\n import org.wso2.ballerinalang.compiler.util.Names;\n-import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.Unifier;\n import org.wso2.ballerinalang.util.Flags;\n \n import java.util.ArrayList;\n@@ -120,7 +120,7 @@\n  */\n public class JvmPackageGen {\n \n-    private static ResolvedTypeBuilder typeBuilder;\n+    private static Unifier unifier;\n \n     public final SymbolTable symbolTable;\n     public final PackageCache packageCache;\n@@ -146,7 +146,7 @@\n         initMethodGen = new InitMethodGen(symbolTable);\n         configMethodGen = new ConfigMethodGen();\n         frameClassGen = new FrameClassGen();\n-        typeBuilder = new ResolvedTypeBuilder();\n+        unifier = new Unifier();\n \n         JvmInstructionGen.anyType = symbolTable.anyType;\n     }\n@@ -330,7 +330,7 @@ public static BIRFunctionWrapper getFunctionWrapper(BIRFunction currentFunc, Pac\n \n         BType retType = functionTypeDesc.retType;\n         if (isExternFunc(currentFunc) && Symbols.isFlagOn(retType.flags, Flags.PARAMETERIZED)) {\n-            retType = typeBuilder.build(retType);\n+            retType = unifier.build(retType);\n         }\n \n         String jvmMethodDescription;"
  },
  {
    "sha": "218fc2f51ceb35de19482a3a10b93637bf1304fd",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -47,8 +47,8 @@\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n import org.wso2.ballerinalang.compiler.util.Name;\n-import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.Unifier;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -167,7 +167,7 @@\n     private JvmInstructionGen jvmInstructionGen;\n     private PackageCache packageCache;\n     private SymbolTable symbolTable;\n-    private ResolvedTypeBuilder typeBuilder;\n+    private Unifier unifier;\n     private JvmTypeGen jvmTypeGen;\n     private JvmCastGen jvmCastGen;\n     private AsyncDataCollector asyncDataCollector;\n@@ -189,7 +189,7 @@ public JvmTerminatorGen(MethodVisitor mv, BIRVarToJVMIndexMap indexMap, LabelGen\n         this.symbolTable = jvmPackageGen.symbolTable;\n         this.currentPackageName = JvmCodeGenUtil.getPackageName(packageID);\n         this.moduleInitClass = JvmCodeGenUtil.getModuleLevelClassName(packageID, MODULE_INIT_CLASS_NAME);\n-        this.typeBuilder = new ResolvedTypeBuilder();\n+        this.unifier = new Unifier();\n         this.asyncDataCollector = asyncDataCollector;\n     }\n \n@@ -760,7 +760,7 @@ private void genStaticCall(BIRTerminator.Call callIns, PackageID packageID, int\n             jvmClass = JvmCodeGenUtil.getModuleLevelClassName(packageID,\n                                                               JvmCodeGenUtil.cleanupPathSeparators(balFileName));\n             //TODO: add receiver:  BType attachedType = type.r != null ? receiver.type : null;\n-            BType retType = typeBuilder.build(type.retType);\n+            BType retType = unifier.build(type.retType);\n             methodDesc = JvmCodeGenUtil.getMethodDesc(params, retType);\n         }\n         this.mv.visitMethodInsn(INVOKESTATIC, jvmClass, encodedMethodName, methodDesc, false);\n@@ -1300,7 +1300,7 @@ private void storeToVar(BIRNode.BIRVariableDcl varDcl) {\n \n     public void genReturnTerm(int returnVarRefIndex, BIRNode.BIRFunction func) {\n \n-        BType bType = typeBuilder.build(func.type.retType);\n+        BType bType = unifier.build(func.type.retType);\n \n         if (TypeTags.isIntegerTypeTag(bType.tag)) {\n             this.mv.visitVarInsn(LLOAD, returnVarRefIndex);"
  },
  {
    "sha": "9102f92cdfcc509a3efb6e380542b06dc115d295",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/ExternalMethodGen.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/ExternalMethodGen.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/ExternalMethodGen.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/ExternalMethodGen.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -221,7 +221,7 @@ public static String getExternMethodDesc(List<BType> paramTypes, BType retType,\n     }\n \n     static String generateExternReturnType(BType bType) {\n-        bType = JvmCodeGenUtil.TYPE_BUILDER.build(bType);\n+        bType = JvmCodeGenUtil.UNIFIER.build(bType);\n         if (bType == null || bType.tag == TypeTags.NIL || bType.tag == TypeTags.NEVER) {\n             return \")V\";\n         }"
  },
  {
    "sha": "9f8a7c14a6c0fc05751b5cb56fc05eab5d82ec1c",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/InteropMethodGen.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/InteropMethodGen.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/InteropMethodGen.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/InteropMethodGen.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -140,7 +140,7 @@ static void genJFieldForInteropField(JFieldBIRFunction birFunc,\n         BType retType = birFunc.type.retType;\n \n         if (Symbols.isFlagOn(retType.flags, Flags.PARAMETERIZED)) {\n-            retType = JvmCodeGenUtil.TYPE_BUILDER.build(birFunc.type.retType);\n+            retType = JvmCodeGenUtil.UNIFIER.build(birFunc.type.retType);\n         }\n \n         String desc = JvmCodeGenUtil.getMethodDesc(birFunc.type.paramTypes, retType);\n@@ -320,7 +320,7 @@ public static void desugarInteropFuncs(JMethodBIRFunction birFunc, InitMethodGen\n         // resetting the variable generation index\n         BType retType = birFunc.type.retType;\n         if (Symbols.isFlagOn(retType.flags, Flags.PARAMETERIZED)) {\n-            retType = JvmCodeGenUtil.TYPE_BUILDER.build(birFunc.type.retType);\n+            retType = JvmCodeGenUtil.UNIFIER.build(birFunc.type.retType);\n         }\n         JMethod jMethod = birFunc.jMethod;\n         Class<?>[] jMethodParamTypes = jMethod.getParamTypes();"
  },
  {
    "sha": "7940eab6d59470d29e41af19da2d0530ee577c11",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodRequest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodRequest.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodRequest.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodRequest.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -20,8 +20,8 @@\n import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n-import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.Unifier;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -46,7 +46,7 @@\n     boolean restParamExist = false;\n     BType receiverType = null;\n \n-    private static ResolvedTypeBuilder typeBuilder = new ResolvedTypeBuilder();\n+    private static Unifier unifier = new Unifier();\n \n     private JMethodRequest() {\n \n@@ -74,7 +74,7 @@ static JMethodRequest build(InteropValidationRequest.MethodValidationRequest met\n         jMethodReq.bFuncParamCount = paramTypes.size();\n         jMethodReq.bParamTypes = paramTypes.toArray(new BType[0]);\n \n-        BType returnType = typeBuilder.build(bFuncType.retType);\n+        BType returnType = unifier.build(bFuncType.retType);\n         jMethodReq.bReturnType = returnType;\n         if (returnType.tag == TypeTags.UNION) {\n             for (BType bType : ((BUnionType) returnType).getMemberTypes()) {"
  },
  {
    "sha": "6da98ba243559864fecb54384286400ab8523483",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/MethodGen.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/MethodGen.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/MethodGen.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/MethodGen.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -263,7 +263,7 @@ public void genJMethodForBFunc(BIRFunction func, ClassWriter cw, BIRPackage modu\n     private BType getReturnType(BIRFunction func) {\n         BType retType = func.type.retType;\n         if (JvmCodeGenUtil.isExternFunc(func) && Symbols.isFlagOn(retType.flags, Flags.PARAMETERIZED)) {\n-            retType = JvmCodeGenUtil.TYPE_BUILDER.build(func.type.retType);\n+            retType = JvmCodeGenUtil.UNIFIER.build(func.type.retType);\n         }\n         return retType;\n     }"
  },
  {
    "sha": "23b7e7cb1922dba457438426e2bb0c6cb6735798",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -390,7 +390,7 @@ static BLangUnaryExpr createUnaryExpr(Location pos,\n         return unaryExpr;\n     }\n \n-    static BLangTypedescExpr createTypeofExpr(Location pos, BType type, BType resolvedType) {\n+    static BLangTypedescExpr createTypedescExpr(Location pos, BType type, BType resolvedType) {\n         final BLangTypedescExpr typeofExpr = (BLangTypedescExpr) TreeBuilder.createTypeAccessNode();\n         typeofExpr.pos = pos;\n         typeofExpr.type = type;"
  },
  {
    "sha": "1db863644e52968e63f519c6842259a733cb19a4",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ConstantPropagation.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ConstantPropagation.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ConstantPropagation.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ConstantPropagation.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -73,6 +73,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsLikeExpr;\n@@ -1072,6 +1073,11 @@ public void visit(BLangLetExpression letExpr) {\n         result = letExpr;\n     }\n \n+    @Override\n+    public void visit(BLangInferredTypedescDefaultNode inferTypedescExpr) {\n+        result = inferTypedescExpr;\n+    }\n+\n     @Override\n     public void visit(BLangSimpleVarRef varRefExpr) {\n \n@@ -1091,7 +1097,7 @@ public void visit(BLangSimpleVarRef varRefExpr) {\n             // from a simple literal\n             if (constSymbol.literalType.tag <= TypeTags.BOOLEAN || constSymbol.literalType.tag == TypeTags.NIL) {\n                 BLangConstRef constRef = ASTBuilderUtil.createBLangConstRef(varRefExpr.pos, constSymbol.literalType,\n-                        constSymbol.value.value);\n+                                                                            constSymbol.value.value);\n                 constRef.variableName = varRefExpr.variableName;\n                 constRef.symbol = constSymbol;\n                 constRef.pkgAlias = varRefExpr.pkgAlias;"
  },
  {
    "sha": "37c706f3e9b9bf0174f1492531313aebf95d4b3b",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java",
    "status": "modified",
    "additions": 11,
    "deletions": 4,
    "changes": 15,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -149,6 +149,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess.BLangTableAccessExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess.BLangTupleAccessExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess.BLangXMLAccessExpr;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation.BFunctionPointerInvocation;\n@@ -287,9 +288,9 @@\n import org.wso2.ballerinalang.compiler.util.FieldKind;\n import org.wso2.ballerinalang.compiler.util.Name;\n import org.wso2.ballerinalang.compiler.util.Names;\n-import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n import org.wso2.ballerinalang.compiler.util.TypeDefBuilderHelper;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.Unifier;\n import org.wso2.ballerinalang.util.Flags;\n import org.wso2.ballerinalang.util.Lists;\n \n@@ -372,7 +373,7 @@\n     private NodeCloner nodeCloner;\n     private SemanticAnalyzer semanticAnalyzer;\n     private BLangAnonymousModelHelper anonModelHelper;\n-    private ResolvedTypeBuilder typeBuilder;\n+    private Unifier unifier;\n     private MockDesugar mockDesugar;\n \n     private BLangStatementLink currentLink;\n@@ -441,7 +442,7 @@ private Desugar(CompilerContext context) {\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n         this.anonModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.mockDesugar = MockDesugar.getInstance(context);\n-        this.typeBuilder = new ResolvedTypeBuilder();\n+        this.unifier = new Unifier();\n     }\n \n     public BLangPackage perform(BLangPackage pkgNode) {\n@@ -1291,6 +1292,12 @@ public void visit(BLangFunction funcNode) {\n         result = funcNode;\n     }\n \n+    @Override\n+    public void visit(BLangInferredTypedescDefaultNode inferTypedescExpr) {\n+        BType constraintType = ((BTypedescType) inferTypedescExpr.type).constraint;\n+        result = ASTBuilderUtil.createTypedescExpr(inferTypedescExpr.pos, inferTypedescExpr.type, constraintType);\n+    }\n+\n     @Override\n     public void visit(BLangResource resourceNode) {\n     }\n@@ -6098,7 +6105,7 @@ private void rewriteInvocation(BLangInvocation invocation, boolean async) {\n \n         BInvokableSymbol invSym = (BInvokableSymbol) invocation.symbol;\n         if (Symbols.isFlagOn(invSym.retType.flags, Flags.PARAMETERIZED)) {\n-            BType retType = typeBuilder.build(invSym.retType);\n+            BType retType = unifier.build(invSym.retType);\n             invocation.type = invocation.async ? new BFutureType(TypeTags.FUTURE, retType, null) : retType;\n         }\n "
  },
  {
    "sha": "c9573cb3199787bb38d232f001c528b7e6ee52a4",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -85,6 +85,7 @@\n import io.ballerina.compiler.syntax.tree.ImportPrefixNode;\n import io.ballerina.compiler.syntax.tree.IncludedRecordParameterNode;\n import io.ballerina.compiler.syntax.tree.IndexedExpressionNode;\n+import io.ballerina.compiler.syntax.tree.InferredTypedescDefaultNode;\n import io.ballerina.compiler.syntax.tree.InlineCodeReferenceNode;\n import io.ballerina.compiler.syntax.tree.InterpolationNode;\n import io.ballerina.compiler.syntax.tree.IntersectionTypeDescriptorNode;\n@@ -323,6 +324,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation.BLangActionInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n@@ -3733,6 +3735,14 @@ public BLangNode transform(IntersectionTypeDescriptorNode intersectionTypeDescri\n         return intersectionType;\n     }\n \n+    @Override\n+    public BLangNode transform(InferredTypedescDefaultNode inferDefaultValueNode) {\n+        BLangInferredTypedescDefaultNode inferTypedescExpr =\n+                (BLangInferredTypedescDefaultNode) TreeBuilder.createInferTypedescExpressionNode();\n+        inferTypedescExpr.pos = getPosition(inferDefaultValueNode);\n+        return inferTypedescExpr;\n+    }\n+\n     @Override\n     protected BLangNode transformSyntaxNode(Node node) {\n         // TODO: Remove this RuntimeException once all nodes covered"
  },
  {
    "sha": "9772dc48369904772f04307227de7b92d1606a4d",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -89,6 +89,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIgnoreExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIsAssignableExpr;\n@@ -1280,6 +1281,12 @@ public void visit(BLangTypedescExpr source) {\n         clone.resolvedType = source.resolvedType;\n     }\n \n+    @Override\n+    public void visit(BLangInferredTypedescDefaultNode source) {\n+        BLangInferredTypedescDefaultNode clone = new BLangInferredTypedescDefaultNode();\n+        source.cloneRef = clone;\n+    }\n+\n     @Override\n     public void visit(BLangTypeConversionExpr source) {\n "
  },
  {
    "sha": "e9e1327e5c522137d5c7e34f0766b0ed60def72a",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -118,6 +118,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n@@ -3750,6 +3751,11 @@ private boolean intersectionExists(BLangExpression expression, BType testType) {\n         return false;\n     }\n \n+    @Override\n+    public void visit(BLangInferredTypedescDefaultNode inferTypedescExpr) {\n+        /* Ignore */\n+    }\n+\n     // private methods\n \n     private <E extends BLangExpression> void analyzeExpr(E node) {"
  },
  {
    "sha": "f87ef6e3e8b987dce21de57d18b974fe50800fe4",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -95,6 +95,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation.BLangActionInvocation;\n@@ -1630,6 +1631,10 @@ public void visit(BLangTypeTestExpr typeTestExpr) {\n     public void visit(BLangAnnotAccessExpr annotAccessExpr) {\n     }\n \n+    @Override\n+    public void visit(BLangInferredTypedescDefaultNode inferTypedescExpr) {\n+    }\n+\n     @Override\n     public void visit(BLangErrorType errorType) {\n     }"
  },
  {
    "sha": "64e28f6429b0a31460c3586cc015227a649da2bf",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsolationAnalyzer.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsolationAnalyzer.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsolationAnalyzer.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsolationAnalyzer.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -109,6 +109,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIgnoreExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n@@ -1596,6 +1597,10 @@ public void visit(BLangObjectConstructorExpression objectConstructorExpression)\n         visit(objectConstructorExpression.typeInit);\n     }\n \n+    @Override\n+    public void visit(BLangInferredTypedescDefaultNode inferTypedescExpr) {\n+    }\n+\n     @Override\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n         SymbolEnv typeEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);"
  },
  {
    "sha": "f9a2510e850e8ffb039c5d9d2c4dadfa0e430fe3",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java",
    "status": "modified",
    "additions": 25,
    "deletions": 5,
    "changes": 30,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -185,6 +185,7 @@\n import org.wso2.ballerinalang.compiler.util.Name;\n import org.wso2.ballerinalang.compiler.util.Names;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.Unifier;\n import org.wso2.ballerinalang.util.AttachPoints;\n import org.wso2.ballerinalang.util.Flags;\n import org.wso2.ballerinalang.util.Lists;\n@@ -237,6 +238,7 @@\n     private BType expType;\n     private DiagnosticCode diagCode;\n     private BType resType;\n+    private Unifier unifier;\n \n     private Map<BVarSymbol, BType.NarrowedTypes> narrowedTypeInfo;\n     // Stack holding the fall-back environments. fall-back env is the env to go back\n@@ -268,6 +270,7 @@ public SemanticAnalyzer(CompilerContext context) {\n         this.constantAnalyzer = ConstantAnalyzer.getInstance(context);\n         this.constantValueResolver = ConstantValueResolver.getInstance(context);\n         this.anonModelHelper = BLangAnonymousModelHelper.getInstance(context);\n+        this.unifier = new Unifier();\n     }\n \n     public BLangPackage analyze(BLangPackage pkgNode) {\n@@ -379,7 +382,9 @@ public void visit(BLangFunction funcNode) {\n             validateAnnotationAttachmentCount(funcNode.annAttachments);\n         }\n \n-        if (funcNode.returnTypeNode != null) {\n+        BLangType returnTypeNode = funcNode.returnTypeNode;\n+        boolean hasReturnType = returnTypeNode != null;\n+        if (hasReturnType) {\n             funcNode.returnTypeAnnAttachments.forEach(annotationAttachment -> {\n                 annotationAttachment.attachPoints.add(AttachPoint.Point.RETURN);\n                 this.analyzeDef(annotationAttachment, funcEnv);\n@@ -389,30 +394,45 @@ public void visit(BLangFunction funcNode) {\n \n         boolean inIsolatedFunction = funcNode.flagSet.contains(Flag.ISOLATED);\n \n+        int inferTypedescParamCount = 0;\n+\n         for (BLangSimpleVariable param : funcNode.requiredParams) {\n             symbolEnter.defineExistingVarSymbolInEnv(param.symbol, funcNode.clonedEnv);\n             this.analyzeDef(param, funcNode.clonedEnv);\n \n-            if (param.expr != null) {\n-                funcNode.symbol.paramDefaultValTypes.put(param.symbol.name.value, param.expr.type);\n+            BLangExpression expr = param.expr;\n+            if (expr != null) {\n+                funcNode.symbol.paramDefaultValTypes.put(param.symbol.name.value, expr.type);\n                 ((BInvokableTypeSymbol) funcNode.type.tsymbol).paramDefaultValTypes.put(param.symbol.name.value,\n-                                                                                        param.expr.type);\n+                                                                                        expr.type);\n+\n+                if (param.expr.getKind() == NodeKind.INFER_TYPEDESC_EXPR) {\n+                    inferTypedescParamCount++;\n+                }\n             }\n \n             validateIsolatedParamUsage(inIsolatedFunction, param, false);\n         }\n \n+        if (inferTypedescParamCount > 1) {\n+            dlog.error(funcNode.pos, DiagnosticErrorCode.MULTIPLE_INFER_TYPEDESC_PARAMS);\n+        }\n+\n         BLangSimpleVariable restParam = funcNode.restParam;\n         if (restParam != null) {\n             symbolEnter.defineExistingVarSymbolInEnv(restParam.symbol, funcNode.clonedEnv);\n             this.analyzeDef(restParam, funcNode.clonedEnv);\n             validateIsolatedParamUsage(inIsolatedFunction, restParam, true);\n         }\n \n+        if (hasReturnType && Symbols.isFlagOn(returnTypeNode.type.flags, Flags.PARAMETERIZED)) {\n+            unifier.validate(returnTypeNode.type, funcNode, symTable, env, types, dlog);\n+        }\n+\n         validateObjectAttachedFunction(funcNode);\n \n         if (funcNode.hasBody()) {\n-            analyzeNode(funcNode.body, funcEnv, funcNode.returnTypeNode.type, null);\n+            analyzeNode(funcNode.body, funcEnv, returnTypeNode.type, null);\n         }\n \n         if (funcNode.anonForkName != null) {"
  },
  {
    "sha": "3c8c3b0f1e036fd90b54aaaea43f2e7d105fe3ee",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -3601,6 +3601,10 @@ private void defineInvokableSymbolParams(BLangInvokableNode invokableNode, BInvo\n             if (varNode.expr != null) {\n                 symbol.flags |= Flags.OPTIONAL;\n                 symbol.isDefaultable = true;\n+\n+                if (varNode.expr.getKind() == NodeKind.INFER_TYPEDESC_EXPR) {\n+                    symbol.flags |= Flags.INFER;\n+                }\n             }\n             if (varNode.flagSet.contains(Flag.INCLUDED)) {\n                 if (varNode.type.getKind() == TypeKind.RECORD) {"
  },
  {
    "sha": "41974e592ae43e7402b0d529fe93c6888821858d",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java",
    "status": "modified",
    "additions": 1,
    "deletions": 4,
    "changes": 5,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -102,7 +102,6 @@\n import org.wso2.ballerinalang.compiler.util.ImmutableTypeCloner;\n import org.wso2.ballerinalang.compiler.util.Name;\n import org.wso2.ballerinalang.compiler.util.Names;\n-import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n import org.wso2.ballerinalang.compiler.util.TypeDefBuilderHelper;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n import org.wso2.ballerinalang.util.Flags;\n@@ -147,7 +146,6 @@\n     private SymbolEnter symbolEnter;\n     private BLangAnonymousModelHelper anonymousModelHelper;\n     private BLangMissingNodesHelper missingNodesHelper;\n-    private ResolvedTypeBuilder typeBuilder;\n \n     public static SymbolResolver getInstance(CompilerContext context) {\n         SymbolResolver symbolResolver = context.get(SYMBOL_RESOLVER_KEY);\n@@ -168,7 +166,6 @@ public SymbolResolver(CompilerContext context) {\n         this.symbolEnter = SymbolEnter.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.missingNodesHelper = BLangMissingNodesHelper.getInstance(context);\n-        this.typeBuilder = new ResolvedTypeBuilder();\n     }\n \n     public boolean checkForUniqueSymbol(Location pos, SymbolEnv env, BSymbol symbol) {\n@@ -1456,7 +1453,7 @@ private ParameterizedTypeInfo getTypedescParamValueType(List<BLangSimpleVariable\n             BLangSimpleVariable param = params.get(i);\n \n             if (param.name.value.equals(varSym.name.value)) {\n-                if (param.expr == null) {\n+                if (param.expr == null || param.expr.getKind() == NodeKind.INFER_TYPEDESC_EXPR) {\n                     return new ParameterizedTypeInfo(((BTypedescType) varSym.type).constraint, i);\n                 }\n "
  },
  {
    "sha": "e464471e84069ef9b09f9a1a6d4d3c2236cf8662",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -86,6 +86,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n@@ -1800,6 +1801,11 @@ public void visit(BLangConstant constant) {\n         /* ignore */\n     }\n \n+    @Override\n+    public void visit(BLangInferredTypedescDefaultNode inferTypedescExpr) {\n+        /* ignore */\n+    }\n+\n     // Private\n \n     private <T extends BLangNode, U extends SymbolEnv> void analyzeNode(T t, U u) {"
  },
  {
    "sha": "91628a29b567c78815e61feb575c9c533c1e7d2c",
    "filename": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java",
    "status": "modified",
    "additions": 14,
    "deletions": 4,
    "changes": 18,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/44957480c51a2db96f8b8c94e48e681ef3955323/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java?ref=44957480c51a2db96f8b8c94e48e681ef3955323",
    "patch": "@@ -121,6 +121,7 @@\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangFieldBasedAccess;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangGroupExpr;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIndexBasedAccess;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangInferredTypedescDefaultNode;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangIntRangeExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangLambdaFunction;\n@@ -186,9 +187,9 @@\n import org.wso2.ballerinalang.compiler.util.Name;\n import org.wso2.ballerinalang.compiler.util.Names;\n import org.wso2.ballerinalang.compiler.util.NumericLiteralSupport;\n-import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n import org.wso2.ballerinalang.compiler.util.TypeDefBuilderHelper;\n import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.Unifier;\n import org.wso2.ballerinalang.util.Flags;\n import org.wso2.ballerinalang.util.Lists;\n \n@@ -253,7 +254,7 @@\n     private TypeParamAnalyzer typeParamAnalyzer;\n     private BLangAnonymousModelHelper anonymousModelHelper;\n     private SemanticAnalyzer semanticAnalyzer;\n-    private ResolvedTypeBuilder typeBuilder;\n+    private Unifier unifier;\n     private boolean nonErrorLoggingCheck = false;\n     private int letCount = 0;\n     private Stack<SymbolEnv> queryEnvs, prevEnvs;\n@@ -335,10 +336,10 @@ public TypeChecker(CompilerContext context) {\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n         this.missingNodesHelper = BLangMissingNodesHelper.getInstance(context);\n-        this.typeBuilder = new ResolvedTypeBuilder();\n         this.selectClauses = new Stack<>();\n         this.queryEnvs = new Stack<>();\n         this.prevEnvs = new Stack<>();\n+        this.unifier = new Unifier();\n     }\n \n     public BType checkExpr(BLangExpression expr, SymbolEnv env) {\n@@ -4380,6 +4381,15 @@ public void visit(BLangRestArgsExpression bLangRestArgExpression) {\n         resultType = checkExpr(bLangRestArgExpression.expr, env, expType);\n     }\n \n+    @Override\n+    public void visit(BLangInferredTypedescDefaultNode inferTypedescExpr) {\n+        if (expType.tag != TypeTags.TYPEDESC) {\n+            dlog.error(inferTypedescExpr.pos, DiagnosticErrorCode.INCOMPATIBLE_TYPES, expType, symTable.typeDesc);\n+            resultType = symTable.semanticError;\n+        }\n+        resultType = expType;\n+    }\n+\n     @Override\n     public void visit(BLangNamedArgsExpression bLangNamedArgsExpression) {\n         resultType = checkExpr(bLangNamedArgsExpression.expr, env, expType);\n@@ -5712,7 +5722,7 @@ private BType checkInvocationArgs(BLangInvocation iExpr, List<BType> paramTypes,\n         if (restType != symTable.semanticError &&\n                 Symbols.isFlagOn(invokableSymbol.flags, Flags.NATIVE) &&\n                 Symbols.isFlagOn(retType.flags, Flags.PARAMETERIZED)) {\n-            retType = typeBuilder.build(retType, iExpr);\n+            retType = unifier.build(retType, expType, iExpr, types, symTable, dlog);\n         }\n \n         // check argument types in arr:sort function"
  }
]
