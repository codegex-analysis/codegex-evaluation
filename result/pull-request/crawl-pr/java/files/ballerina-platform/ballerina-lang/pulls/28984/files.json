[
  {
    "sha": "c37eca3e0fdb4860e891d9e6e6e2397e9356ca42",
    "filename": "bvm/ballerina-core/build.gradle",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-core/build.gradle",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-core/build.gradle",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/bvm/ballerina-core/build.gradle?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -55,7 +55,6 @@ dependencies {\n     implementation 'javax.transaction:javax.transaction-api'\n //    implementation 'io.ballerina.messaging:broker-common'\n //    implementation 'io.ballerina.messaging:broker-core'\n-    implementation 'io.opentracing:opentracing-api'\n     implementation ('org.awaitility:awaitility') {\n         exclude group: 'org.hamcrest', module: 'hamcrest-library'\n         exclude group: 'org.hamcrest', module: 'hamcrest-core'"
  },
  {
    "sha": "b21c902474b65169dda52571d8ab750f539398d0",
    "filename": "bvm/ballerina-rt/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-rt/build.gradle",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-rt/build.gradle",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/bvm/ballerina-rt/build.gradle?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -96,8 +96,7 @@ dependencies {\n     dist 'org.apache.ws.commons.axiom:axiom-api:1.2.20'\n     dist 'org.apache.ws.commons.axiom:axiom-dom:1.2.22'\n     dist 'commons-logging:commons-logging:1.1.1'\n-    dist 'io.opentracing:opentracing-api:0.31.0'\n-    dist 'io.opentracing:opentracing-noop:0.31.0'\n+    dist 'io.opentelemetry:opentelemetry-api:1.0.0'\n     dist 'org.awaitility:awaitility:3.1.6'\n     dist 'org.hdrhistogram:HdrHistogram:2.1.10'\n     dist 'com.h2database:h2:1.4.199'"
  },
  {
    "sha": "3110cf48792d40d5dea9eea71d5e85dc1aff7da3",
    "filename": "bvm/ballerina-runtime/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/build.gradle",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/build.gradle",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/bvm/ballerina-runtime/build.gradle?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -33,8 +33,7 @@ dependencies {\n         exclude group: 'jaxen', module: 'jaxen'\n     }\n     implementation 'org.apache.commons:commons-lang3'\n-    implementation 'io.opentracing:opentracing-api'\n-    implementation 'io.opentracing:opentracing-noop'\n+    implementation 'io.opentelemetry:opentelemetry-api'\n     implementation ('org.awaitility:awaitility') {\n         exclude group: 'org.hamcrest', module: 'hamcrest-core'\n     }"
  },
  {
    "sha": "564db79ca265720d6c5a790602b5ad777e65ce26",
    "filename": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java",
    "status": "modified",
    "additions": 9,
    "deletions": 12,
    "changes": 21,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -15,7 +15,6 @@\n  *  specific language governing permissions and limitations\n  *  under the License.\n  */\n-\n package io.ballerina.runtime.observability;\n \n import io.ballerina.runtime.api.Environment;\n@@ -28,9 +27,9 @@\n import io.ballerina.runtime.internal.configurable.VariableKey;\n import io.ballerina.runtime.internal.values.ErrorValue;\n import io.ballerina.runtime.observability.tracer.BSpan;\n+import io.opentelemetry.api.common.Attributes;\n \n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n@@ -212,8 +211,8 @@ public static void startResourceObservation(Environment env, BString module, BSt\n     /**\n      * Add record checkpoint data to active Trace Span.\n      *\n-     * @param env The Ballerina Environment\n-     * @param pkg The package the instrumented code belongs to\n+     * @param env      The Ballerina Environment\n+     * @param pkg      The package the instrumented code belongs to\n      * @param position The source code position the instrumented code defined in\n      */\n     public static void recordCheckpoint(Environment env, BString pkg, BString position) {\n@@ -230,14 +229,12 @@ public static void recordCheckpoint(Environment env, BString pkg, BString positi\n             return;\n         }\n \n-        // Adding Position and Module ID to the Jaeger Span\n-        Map<String, String> eventAttributes = new HashMap<>(2);\n-        eventAttributes.put(TAG_KEY_SRC_MODULE, pkg.getValue());\n-        eventAttributes.put(TAG_KEY_SRC_POSITION, position.getValue());\n-\n-        HashMap<String, Object> event = new HashMap<>(1);\n-        event.put(CHECKPOINT_EVENT_NAME, eventAttributes);\n-        span.addEvent(event);\n+        // Adding Position and Module ID to the Span\n+        Attributes eventAttributes = Attributes.builder()\n+                .put(TAG_KEY_SRC_MODULE, pkg.getValue())\n+                .put(TAG_KEY_SRC_POSITION, position.getValue())\n+                .build();\n+        span.addEvent(CHECKPOINT_EVENT_NAME, eventAttributes);\n     }\n \n     /**"
  },
  {
    "sha": "3be73c69ac706abc681ef0f32fe6ee60b2179751",
    "filename": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/BSpan.java",
    "status": "modified",
    "additions": 50,
    "deletions": 25,
    "changes": 75,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/BSpan.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/BSpan.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/BSpan.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -17,12 +17,15 @@\n  */\n package io.ballerina.runtime.observability.tracer;\n \n-import io.opentracing.Span;\n-import io.opentracing.SpanContext;\n-import io.opentracing.Tracer;\n-import io.opentracing.propagation.Format;\n-import io.opentracing.propagation.TextMapExtractAdapter;\n-import io.opentracing.propagation.TextMapInjectAdapter;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanBuilder;\n+import io.opentelemetry.api.trace.SpanKind;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapGetter;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.context.propagation.TextMapSetter;\n \n import java.util.Collections;\n import java.util.HashMap;\n@@ -42,13 +45,16 @@ private BSpan(Tracer tracer, Span span) {\n         this.span = span;\n     }\n \n-    private static BSpan start(Tracer tracer, SpanContext parentSpanContext, String operationName, boolean isClient) {\n-        Span span = tracer.buildSpan(operationName)\n-                .asChildOf(parentSpanContext)\n-                .withTag(TraceConstants.TAG_KEY_SPAN_KIND, isClient\n-                        ? TraceConstants.TAG_SPAN_KIND_CLIENT\n-                        : TraceConstants.TAG_SPAN_KIND_SERVER)\n-                .start();\n+    private static BSpan start(Tracer tracer, Context parentContext, String operationName, boolean isClient) {\n+        SpanBuilder builder = tracer.spanBuilder(operationName);\n+        if (parentContext != null) {\n+            builder.setParent(parentContext);\n+        }\n+        builder.setAttribute(TraceConstants.TAG_KEY_SPAN_KIND, isClient\n+                ? TraceConstants.TAG_SPAN_KIND_CLIENT\n+                : TraceConstants.TAG_SPAN_KIND_SERVER);\n+        builder.setSpanKind(isClient ? SpanKind.CLIENT : SpanKind.SERVER);\n+        Span span = builder.startSpan();\n         return new BSpan(tracer, span);\n     }\n \n@@ -76,52 +82,71 @@ public static BSpan start(String serviceName, String operationName, boolean isCl\n      */\n     public static BSpan start(BSpan parentSpan, String serviceName, String operationName, boolean isClient) {\n         Tracer tracer = TracersStore.getInstance().getTracer(serviceName);\n-        return start(tracer, parentSpan.span.context(), operationName, isClient);\n+        Context parentContext = Context.current().with(parentSpan.span);\n+        return start(tracer, parentContext, operationName, isClient);\n     }\n \n     /**\n      * Start a new span with a parent using parent trace context.\n      * The started span is part of a trace which had spanned across multiple services and the parent is in the service\n      * which called the current service.\n      *\n-     * @param parentTraceContext The parent trace context\n+     * @param parentTraceContext Contains http headers of request received\n      * @param serviceName        The name of the service the span belongs to\n      * @param operationName      The name of the operation the span corresponds to\n      * @param isClient           True if this is a client span\n      * @return The new span\n      */\n     public static BSpan start(Map<String, String> parentTraceContext, String serviceName, String operationName,\n                               boolean isClient) {\n+        TextMapGetter<Map<String, String>> getter = new TextMapGetter<>() {\n+            @Override\n+            public String get(Map<String, String> carrier, String key) {\n+                return carrier.get(key);\n+            }\n+\n+            @Override\n+            public Iterable<String> keys(Map<String, String> carrier) {\n+                return carrier.keySet();\n+            }\n+        };\n+\n         Tracer tracer = TracersStore.getInstance().getTracer(serviceName);\n-        SpanContext parentSpanContext = tracer.extract(Format.Builtin.HTTP_HEADERS,\n-                new TextMapExtractAdapter(parentTraceContext));\n-        return start(tracer, parentSpanContext, operationName, isClient);\n+        Context parentContext = TracersStore.getInstance().getPropagators()\n+                .getTextMapPropagator().extract(Context.current(), parentTraceContext, getter);\n+        return start(tracer, parentContext, operationName, isClient);\n     }\n \n     public void finishSpan() {\n-        span.finish();\n+        span.end();\n     }\n \n-    public void addEvent(Map<String, Object> fields) {\n-        span.log(fields);\n+    public void addEvent(String eventName, Attributes attributes) {\n+        span.addEvent(eventName, attributes);\n     }\n \n     public void addTags(Map<String, String> tags) {\n         for (Map.Entry<String, String> entry : tags.entrySet()) {\n-            span.setTag(entry.getKey(), entry.getValue());\n+            span.setAttribute(entry.getKey(), entry.getValue());\n         }\n     }\n \n     public void addTag(String tagKey, String tagValue) {\n-        span.setTag(tagKey, tagValue);\n+        span.setAttribute(tagKey, tagValue);\n     }\n \n     public Map<String, String> extractContextAsHttpHeaders() {\n         Map<String, String> carrierMap;\n         if (span != null) {\n+            TextMapSetter<Map<String, String>> setter = (carrier, key, value) -> {\n+                if (carrier != null) {\n+                    carrier.put(key, value);\n+                }\n+            };\n+\n             carrierMap = new HashMap<>();\n-            TextMapInjectAdapter requestInjector = new TextMapInjectAdapter(carrierMap);\n-            tracer.inject(span.context(), Format.Builtin.HTTP_HEADERS, requestInjector);\n+            TextMapPropagator propagator = TracersStore.getInstance().getPropagators().getTextMapPropagator();\n+            propagator.inject(Context.current().with(span), carrierMap, setter);\n         } else {\n             carrierMap = Collections.emptyMap();\n         }"
  },
  {
    "sha": "f868708e84a45c4b0f18461dd050e0840d58edd2",
    "filename": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/TracersStore.java",
    "status": "modified",
    "additions": 20,
    "deletions": 10,
    "changes": 30,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/TracersStore.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/TracersStore.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/TracersStore.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -15,12 +15,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package io.ballerina.runtime.observability.tracer;\n \n import io.ballerina.runtime.observability.tracer.spi.TracerProvider;\n-import io.opentracing.Tracer;\n-import io.opentracing.noop.NoopTracerFactory;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n \n import java.io.PrintStream;\n import java.util.HashMap;\n@@ -35,6 +34,7 @@\n     private Map<String, Tracer> store;\n     private static final PrintStream consoleError = System.err;\n     private static final TracersStore instance = new TracersStore();\n+    private ContextPropagators propagators;\n \n     public static TracersStore getInstance() {\n         return instance;\n@@ -45,6 +45,9 @@ private TracersStore() {\n \n     public void setTracerGenerator(TracerProvider tracerProvider) {\n         this.tracerProvider = tracerProvider;\n+        if (tracerProvider != null) {\n+            propagators = tracerProvider.getPropagators();\n+        }\n         store = new HashMap<>();\n     }\n \n@@ -55,25 +58,32 @@ public void setTracerGenerator(TracerProvider tracerProvider) {\n      * @return trace implementations i.e: zipkin, jaeger\n      */\n     public Tracer getTracer(String serviceName) {\n-        Tracer openTracer;\n+        Tracer tracer;\n         if (store.containsKey(serviceName)) {\n-            openTracer = store.get(serviceName);\n+            tracer = store.get(serviceName);\n         } else {\n             if (tracerProvider != null) {\n                 try {\n-                    openTracer = tracerProvider.getTracer(serviceName);\n+                    tracer = tracerProvider.getTracer(serviceName);\n                 } catch (Throwable e) {\n-                    openTracer = NoopTracerFactory.create();\n+                    tracer = io.opentelemetry.api.trace.TracerProvider.noop().get(\"\");\n                     consoleError.println(\"error: tracing disabled as getting tracer for \" + serviceName + \" service. \"\n                             + e.getMessage());\n                 }\n-                store.put(serviceName, openTracer);\n+                store.put(serviceName, tracer);\n             } else {\n-                openTracer = NoopTracerFactory.create();\n+                tracer = io.opentelemetry.api.trace.TracerProvider.noop().get(\"\");\n                 consoleError.println(\"error: tracing disabled as tracer provider had not been initialized\");\n             }\n         }\n-        return openTracer;\n+        return tracer;\n+    }\n+\n+    public ContextPropagators getPropagators() {\n+        if (propagators != null) {\n+            return propagators;\n+        }\n+        return ContextPropagators.noop();\n     }\n \n     /**"
  },
  {
    "sha": "262b0b5d20e92c24749ef0573208d8a416774ffd",
    "filename": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/spi/TracerProvider.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/spi/TracerProvider.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/spi/TracerProvider.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/tracer/spi/TracerProvider.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -17,7 +17,8 @@\n  */\n package io.ballerina.runtime.observability.tracer.spi;\n \n-import io.opentracing.Tracer;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n \n /**\n  * This returns a tracer for a service\n@@ -44,4 +45,6 @@\n      * @return the Tracer\n      */\n     Tracer getTracer(String serviceName);\n+\n+    ContextPropagators getPropagators();\n }"
  },
  {
    "sha": "b8551b8cba4ad90c723994fd4290d31405ca86b3",
    "filename": "bvm/ballerina-runtime/src/main/java/module-info.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/module-info.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/bvm/ballerina-runtime/src/main/java/module-info.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/bvm/ballerina-runtime/src/main/java/module-info.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -5,8 +5,8 @@\n     requires axiom.api;\n     requires java.logging;\n     requires java.management;\n-    requires opentracing.api;\n-    requires opentracing.noop;\n+    requires io.opentelemetry.api;\n+    requires io.opentelemetry.context;\n     requires java.transaction.xa;\n     requires slf4j.api;\n     requires axiom.impl;"
  },
  {
    "sha": "69a5107b290f0f238a4a0d04bd7181d5fe3d1aa8",
    "filename": "gradle/javaProject.gradle",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/gradle/javaProject.gradle",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/gradle/javaProject.gradle",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/gradle/javaProject.gradle?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -120,9 +120,9 @@ dependencies {\n         implementation 'io.netty:netty-handler:4.1.39.Final'\n         implementation 'io.netty:netty-tcnative-boringssl-static:2.0.25.Final'\n         implementation 'io.netty:netty-transport:4.1.39.Final'\n-        implementation 'io.opentracing:opentracing-api:0.31.0'\n-        implementation 'io.opentracing:opentracing-noop:0.31.0'\n-        implementation 'io.opentracing:opentracing-mock:0.31.0'\n+        implementation 'io.opentelemetry:opentelemetry-api:1.0.0'\n+        implementation 'io.opentelemetry:opentelemetry-sdk-trace:1.0.0'\n+        implementation 'io.opentelemetry:opentelemetry-sdk-testing:1.0.0'\n         implementation 'io.swagger.core.v3:swagger-models:1.5.18'\n         implementation 'io.swagger.parser.v3:swagger-parser:2.0.14'\n         implementation 'io.swagger.parser.v3:swagger-parser-v2-converter:2.0.14'"
  },
  {
    "sha": "9b4b3c2dde0b40cf48632f03e17bdfb18486673e",
    "filename": "observelib/observe-internal/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe-internal/build.gradle",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe-internal/build.gradle",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/observelib/observe-internal/build.gradle?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -25,8 +25,7 @@ dependencies {\n     implementation project(':ballerina-config')\n     implementation project(':ballerina-runtime')\n     implementation project(':ballerina-observability')\n-    implementation 'io.opentracing:opentracing-api'\n-    implementation 'io.opentracing:opentracing-noop'\n+    implementation 'io.opentelemetry:opentelemetry-api'\n \n     distributionBala project(path: ':ballerina-observability', configuration: 'distributionBala')\n }"
  },
  {
    "sha": "491db59600d13b8001992403c99344749851b04d",
    "filename": "observelib/observe-internal/src/main/java/module-info.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe-internal/src/main/java/module-info.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe-internal/src/main/java/module-info.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/observelib/observe-internal/src/main/java/module-info.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -1,9 +1,9 @@\n module io.ballerina.observability {\n     requires io.ballerina.lang;\n     requires io.ballerina.runtime;\n-    requires opentracing.api;\n-    requires opentracing.noop;\n     requires io.ballerina.config;\n+    requires io.opentelemetry.api;\n+    requires io.opentelemetry.context;\n \n     uses io.ballerina.runtime.observability.metrics.spi.MetricProvider;\n     uses io.ballerina.runtime.observability.tracer.spi.TracerProvider;"
  },
  {
    "sha": "1544f6fe3f6f223f96539ac20fe2beb33749f444",
    "filename": "observelib/observe-internal/src/main/java/org/ballerinalang/observe/noop/NoOpTracerProvider.java",
    "status": "modified",
    "additions": 8,
    "deletions": 3,
    "changes": 11,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe-internal/src/main/java/org/ballerinalang/observe/noop/NoOpTracerProvider.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe-internal/src/main/java/org/ballerinalang/observe/noop/NoOpTracerProvider.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/observelib/observe-internal/src/main/java/org/ballerinalang/observe/noop/NoOpTracerProvider.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -18,8 +18,8 @@\n package org.ballerinalang.observe.noop;\n \n import io.ballerina.runtime.observability.tracer.spi.TracerProvider;\n-import io.opentracing.Tracer;\n-import io.opentracing.noop.NoopTracerFactory;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n \n /**\n  * Implementation of No-Op {@link TracerProvider}.\n@@ -34,11 +34,16 @@ public String getName() {\n \n     @Override\n     public void init() {\n-        instance = NoopTracerFactory.create();\n+        instance = io.opentelemetry.api.trace.TracerProvider.noop().get(\"\");\n     }\n \n     @Override\n     public Tracer getTracer(String serviceName) {\n         return instance;\n     }\n+\n+    @Override\n+    public ContextPropagators getPropagators() {\n+        return ContextPropagators.noop();\n+    }\n }"
  },
  {
    "sha": "a29808f567d9cda75c9325f7de99ca911bd65266",
    "filename": "observelib/observe/build.gradle",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe/build.gradle",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe/build.gradle",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/observelib/observe/build.gradle?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -24,7 +24,7 @@ dependencies {\n     implementation project(':ballerina-config')\n     implementation project(':ballerina-runtime')\n     implementation project(':metrics-extensions:ballerina-metrics-extension')\n-    implementation 'io.opentracing:opentracing-api'\n+    implementation 'io.opentelemetry:opentelemetry-api'\n \n     testRuntime 'org.slf4j:slf4j-jdk14'\n "
  },
  {
    "sha": "3490f9858608a9077c62c0bd5b1e02ba7beb5275",
    "filename": "observelib/observe/src/main/java/module-info.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe/src/main/java/module-info.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe/src/main/java/module-info.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/observelib/observe/src/main/java/module-info.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -1,7 +1,7 @@\n module io.ballerina.observability {\n     requires io.ballerina.lang;\n     requires io.ballerina.runtime;\n-    requires opentracing.api;\n     requires io.ballerina.config;\n+    requires io.opentelemetry.api;\n     requires slf4j.api;\n }"
  },
  {
    "sha": "a2ce045dd0189d3e809ca206f27eab2c812a0dad",
    "filename": "observelib/observe/src/main/java/org/ballerinalang/observe/nativeimpl/OpenTracerBallerinaWrapper.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe/src/main/java/org/ballerinalang/observe/nativeimpl/OpenTracerBallerinaWrapper.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/observelib/observe/src/main/java/org/ballerinalang/observe/nativeimpl/OpenTracerBallerinaWrapper.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/observelib/observe/src/main/java/org/ballerinalang/observe/nativeimpl/OpenTracerBallerinaWrapper.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -27,7 +27,7 @@\n import io.ballerina.runtime.observability.tracer.BSpan;\n import io.ballerina.runtime.observability.tracer.TracersStore;\n import io.ballerina.runtime.observability.tracer.TracingUtils;\n-import io.opentracing.Tracer;\n+import io.opentelemetry.api.trace.Tracer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n "
  },
  {
    "sha": "e0fb3f6e15510f8d8f6d80d2f520498da37d73ee",
    "filename": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ConcurrencyTestCase.java",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ConcurrencyTestCase.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ConcurrencyTestCase.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ConcurrencyTestCase.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -70,16 +70,17 @@ public void testAsyncCall(String resourceName, String resourceFunctionPosition,\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, asyncCallPosition, callerRespondPosition)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),\n@@ -166,8 +167,8 @@ public void testAsyncCall(String resourceName, String resourceFunctionPosition,\n \n     @Test(dataProvider = \"workers-data-provider\")\n     public void testWorkers(String resourceName, String resourceFunctionPosition,\n-                                       String workerAName, String workerAPosition, String workerBName,\n-                                       String workerBPosition, String callerRespondPosition) throws Exception {\n+                            String workerAName, String workerAPosition, String workerBName,\n+                            String workerBPosition, String callerRespondPosition) throws Exception {\n         HttpResponse httpResponse = HttpClientRequest.doPost(BASE_URL + \"/\" + SERVICE_NAME + \"/\" + resourceName,\n                 \"\", Collections.emptyMap());\n         Assert.assertEquals(httpResponse.getResponseCode(), 200);\n@@ -180,16 +181,17 @@ public void testWorkers(String resourceName, String resourceFunctionPosition,\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, workerAPosition, workerBPosition,\n                         callerRespondPosition)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),"
  },
  {
    "sha": "3c5445d6a3690ed36af976bb1158969ff4ad4d6b",
    "filename": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/CustomTracingTestCase.java",
    "status": "modified",
    "additions": 13,
    "deletions": 11,
    "changes": 24,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/CustomTracingTestCase.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/CustomTracingTestCase.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/CustomTracingTestCase.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -62,16 +62,17 @@ public void testAddCustomSpanToSystemTrace() throws Exception {\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, span3Position, span5Position)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),\n@@ -183,16 +184,17 @@ public void testCustomTrace() throws Exception {\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, span2Position, span3Position)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 2);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 2);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),\n@@ -253,10 +255,10 @@ public void testCustomTrace() throws Exception {\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getOperationName(), \"customSpanThree\"))\n                 .findFirst();\n         Assert.assertTrue(customSpan1.isPresent());\n-        long customTraceId = customSpan1.get().getTraceId();\n+        String customTraceId = customSpan1.get().getTraceId();\n         customSpan1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"client\"),\n                     new AbstractMap.SimpleEntry<>(\"resource\", resourceName),"
  },
  {
    "sha": "79f4d3ad0a2ee39d21cd097cd53dc34f3059aaef",
    "filename": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/HttpTracingTestCase.java",
    "status": "modified",
    "additions": 14,
    "deletions": 9,
    "changes": 23,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/HttpTracingTestCase.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/HttpTracingTestCase.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/HttpTracingTestCase.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -32,6 +32,8 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n+import static org.ballerinalang.test.observability.tracing.TracingBaseTestCase.ZERO_SPAN_ID;\n+\n /**\n  * Test cases for out of the box tracing.\n  */\n@@ -59,16 +61,17 @@ public void testChainedResourceFunctions() throws Exception {\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(span1Position, span2Position, span3Position, span4Position, span5Position,\n                         span6Position)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), span1Position))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"resourceOne\");\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),\n@@ -220,24 +223,26 @@ public void testHTTPContextPropagation() throws Exception {\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(span1Position, span2Position, span3Position, span6Position)));\n-        Assert.assertEquals(testServiceSpans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(testServiceSpans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         List<BMockSpan> echoBackendSpans = this.getEchoBackendFinishedSpans();\n         Assert.assertEquals(echoBackendSpans.size(), 2);\n         Assert.assertEquals(echoBackendSpans.stream()\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(span4Position, span5Position)));\n-        Assert.assertEquals(echoBackendSpans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 0);\n+        Assert.assertEquals(echoBackendSpans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 0);\n \n         Optional<BMockSpan> span1 = testServiceSpans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), span1Position))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(testServiceSpans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(testServiceSpans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"resourceOne\");\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),"
  },
  {
    "sha": "57f2520a6ee31d17998548559d3994a5be7a8677",
    "filename": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java",
    "status": "modified",
    "additions": 10,
    "deletions": 8,
    "changes": 18,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -78,16 +78,17 @@ public void testMainMethod() throws Exception {\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(span1Position, span2Position, span3Position, span4Position,\n                         span5Position, span6Position)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), span1Position))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"main\");\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"entrypoint.function.module\", entryPointFunctionModule),\n@@ -232,16 +233,17 @@ public void testProgrammaticallyStartedService() throws Exception {\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, callerResponsePosition)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),"
  },
  {
    "sha": "3162663bee829698b2be2c1c5a7e8f2f52fff766",
    "filename": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ObservableAnnotationTestCase.java",
    "status": "modified",
    "additions": 10,
    "deletions": 8,
    "changes": 18,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ObservableAnnotationTestCase.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ObservableAnnotationTestCase.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ObservableAnnotationTestCase.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -60,16 +60,17 @@ public void testObservableFunction() throws Exception {\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, span2Position, span3Position)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),\n@@ -145,16 +146,17 @@ public void testObservableAttachedFunction() throws Exception {\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, span2Position, span3Position)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),"
  },
  {
    "sha": "98390bc7f52af3d0cec18081851fd53c52eb6787",
    "filename": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/RemoteCallTestCase.java",
    "status": "modified",
    "additions": 20,
    "deletions": 16,
    "changes": 36,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/RemoteCallTestCase.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/RemoteCallTestCase.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/RemoteCallTestCase.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -63,16 +63,17 @@ public void testNestedRemoteCalls() throws Exception {\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, span2Position, span3Position, span4Position)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),\n@@ -181,16 +182,17 @@ public void testRemoteFunctionErrorReturn(String resourceName, String resourceFu\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, remoteCallPosition)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Map<String, Object> tags = span.getTags();\n //            TODO: Remove the bellow line once #ballerina-lang/issues/28686 is fixed\n@@ -260,16 +262,17 @@ public void testIgnoredErrorReturnInRemoteCall() throws Exception {\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, span2Position, span3Position)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),\n@@ -358,16 +361,17 @@ public void testTrappedPanic() throws Exception {\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, span2Position, span3Position)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),"
  },
  {
    "sha": "e04c4a971a50ca5d36cf5d0c48476ddb86d21afc",
    "filename": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ResourceFunctionTestCase.java",
    "status": "modified",
    "additions": 15,
    "deletions": 12,
    "changes": 27,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ResourceFunctionTestCase.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ResourceFunctionTestCase.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/ResourceFunctionTestCase.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -66,16 +66,17 @@ public void testSimpleResourceCall(String resourceName, String requestPayload, S\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, callerResponsePosition)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),\n@@ -152,16 +153,17 @@ public void testResourceSingleSpanErrorResponse(String resourceName, String reso\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Collections.singletonList(resourceFunctionPosition)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Map<String, Object> tags = span.getTags();\n //            TODO: Remove the bellow line once #ballerina-lang/issues/28686 is fixed\n@@ -212,16 +214,17 @@ public void testResourceWithRemoteCall(String resourceName, String resourceFunct\n                         .map(span -> span.getTags().get(\"src.position\"))\n                         .collect(Collectors.toSet()),\n                 new HashSet<>(Arrays.asList(resourceFunctionPosition, remoteCallPosition, callerRespondPosition)));\n-        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId() == 0).count(), 1);\n+        Assert.assertEquals(spans.stream().filter(bMockSpan -> bMockSpan.getParentId().equals(ZERO_SPAN_ID))\n+                .count(), 1);\n \n         Optional<BMockSpan> span1 = spans.stream()\n                 .filter(bMockSpan -> Objects.equals(bMockSpan.getTags().get(\"src.position\"), resourceFunctionPosition))\n                 .findFirst();\n         Assert.assertTrue(span1.isPresent());\n-        long traceId = span1.get().getTraceId();\n+        String traceId = span1.get().getTraceId();\n         span1.ifPresent(span -> {\n-            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId() == traceId\n-                    && mockSpan.getSpanId() == span.getParentId()));\n+            Assert.assertTrue(spans.stream().noneMatch(mockSpan -> mockSpan.getTraceId().equals(traceId)\n+                    && mockSpan.getSpanId().equals(span.getParentId())));\n             Assert.assertEquals(span.getOperationName(), \"post /\" + resourceName);\n             Assert.assertEquals(span.getTags(), toMap(\n                     new AbstractMap.SimpleEntry<>(\"span.kind\", \"server\"),"
  },
  {
    "sha": "a1c02faaacb12b8f69ece67c9d80d90c19183516",
    "filename": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/TracingBaseTestCase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/TracingBaseTestCase.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/TracingBaseTestCase.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/TracingBaseTestCase.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -55,6 +55,7 @@\n             + \"/MockClient\";\n     protected static final String OBSERVABLE_ADDER_OBJECT_NAME = TEST_SRC_ORG_NAME + \"/\" + TEST_SRC_UTILS_MODULE_NAME\n             + \"/ObservableAdder\";\n+    protected static final String ZERO_SPAN_ID = \"0000000000000000\";\n \n     @BeforeGroups(value = \"tracing-test\", alwaysRun = true)\n     public void setup() throws Exception {"
  },
  {
    "sha": "a7ed61bdb992977d50c149afa185415c45fafe72",
    "filename": "tests/observability-test-utils/build.gradle",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/build.gradle",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/build.gradle",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/observability-test-utils/build.gradle?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -37,7 +37,9 @@ dependencies {\n     shadow project(':ballerina-lang:annotations')\n \n     implementation 'io.netty:netty-codec-http'\n-    implementation 'io.opentracing:opentracing-mock'\n+    implementation 'io.opentelemetry:opentelemetry-api'\n+    implementation 'io.opentelemetry:opentelemetry-sdk-trace'\n+    implementation 'io.opentelemetry:opentelemetry-sdk-testing'\n     implementation project(':ballerina-runtime')\n     implementation project(':ballerina-lang:jballerina.java')\n "
  },
  {
    "sha": "21861162811982685afed56ec63f9ed89aac6bd4",
    "filename": "tests/observability-test-utils/src/main/java/module-info.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/src/main/java/module-info.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/src/main/java/module-info.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/observability-test-utils/src/main/java/module-info.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -1,12 +1,14 @@\n module io.ballerina.observability.test.utils {\n     requires gson;\n-    requires opentracing.mock;\n     requires io.ballerina.runtime;\n     requires io.netty.transport;\n     requires io.netty.buffer;\n     requires io.netty.codec.http;\n     requires io.ballerina.lang;\n-    requires opentracing.api;\n+    requires io.opentelemetry.api;\n+    requires io.opentelemetry.sdk.trace;\n+    requires io.opentelemetry.sdk.testing;\n+    requires io.opentelemetry.context;\n \n     provides io.ballerina.runtime.observability.tracer.spi.TracerProvider\n             with org.ballerina.testobserve.tracing.extension.BMockTracerProvider;"
  },
  {
    "sha": "cfea9c69d3ad9146fe8811c4c5b2632473b998c6",
    "filename": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java",
    "status": "modified",
    "additions": 58,
    "deletions": 18,
    "changes": 76,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -16,12 +16,13 @@\n  * under the License.\n  *\n  */\n-\n package org.ballerina.testobserve.tracing.extension;\n \n-import io.opentracing.mock.MockSpan;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.sdk.trace.data.EventData;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n@@ -36,14 +37,14 @@\n public class BMockSpan {\n \n     private String operationName;\n-    private long traceId;\n-    private long spanId;\n-    private long parentId;\n+    private String traceId;\n+    private String spanId;\n+    private String parentId;\n     private Map<String, Object> tags;\n-    private List<MockSpan.LogEntry> events;\n+    private List<BMockEvent> events;\n \n-    public BMockSpan(String operationName, long traceId, long spanId, long parentId, Map<String, Object> tags,\n-                     List<MockSpan.LogEntry> events) {\n+    public BMockSpan(String operationName, String traceId, String spanId, String parentId, Map<String, Object> tags,\n+                     List<BMockEvent> events) {\n         this.operationName = operationName;\n         this.traceId = traceId;\n         this.spanId = spanId;\n@@ -52,6 +53,24 @@ public BMockSpan(String operationName, long traceId, long spanId, long parentId,\n         this.events = events;\n     }\n \n+    public BMockSpan(String operationName, String traceId, String spanId, String parentId, Attributes attributes,\n+                     List<EventData> eventDataList) {\n+        this.operationName = operationName;\n+        this.traceId = traceId;\n+        this.spanId = spanId;\n+        this.parentId = parentId;\n+        this.tags = new HashMap<>();\n+        attributes.forEach((attributeKey, o) -> tags.put(attributeKey.getKey(), o));\n+        this.events = new ArrayList<>();\n+        for (EventData eventData : eventDataList) {\n+            HashMap<String, HashMap<String, Object>> fields = new HashMap<>();\n+            HashMap<String, Object> field = new HashMap<>();\n+            eventData.getAttributes().forEach((attributeKey, o) -> field.put(attributeKey.getKey(), o));\n+            fields.put(eventData.getName(), field);\n+            this.events.add(new BMockEvent(eventData.getEpochNanos(), fields));\n+        }\n+    }\n+\n     public String getOperationName() {\n         return operationName;\n     }\n@@ -60,27 +79,27 @@ public void setOperationName(String operationName) {\n         this.operationName = operationName;\n     }\n \n-    public long getTraceId() {\n+    public String getTraceId() {\n         return traceId;\n     }\n \n-    public void setTraceId(long traceId) {\n+    public void setTraceId(String traceId) {\n         this.traceId = traceId;\n     }\n \n-    public long getSpanId() {\n+    public String getSpanId() {\n         return spanId;\n     }\n \n-    public void setSpanId(long spanId) {\n+    public void setSpanId(String spanId) {\n         this.spanId = spanId;\n     }\n \n-    public long getParentId() {\n+    public String getParentId() {\n         return parentId;\n     }\n \n-    public void setParentId(long parentId) {\n+    public void setParentId(String parentId) {\n         this.parentId = parentId;\n     }\n \n@@ -92,19 +111,19 @@ public void setTags(Map<String, Object> tags) {\n         this.tags = tags;\n     }\n \n-    public List<MockSpan.LogEntry> getEvents() {\n+    public List<BMockEvent> getEvents() {\n         return events;\n     }\n \n     public List<BMockSpanEvent> getCheckpoints() {\n         List<BMockSpanEvent> checkpoints;\n         if (getEvents() != null) {\n             checkpoints = new ArrayList<>(getEvents().size());\n-            for (MockSpan.LogEntry eventLog : getEvents()) {\n+            for (BMockEvent mockEvent : getEvents()) {\n                 BMockSpan.BMockSpanEvent checkpoint = new BMockSpan.BMockSpanEvent(\n-                        (((Map) eventLog.fields().get(CHECKPOINT_EVENT_NAME)).\n+                        (((Map) mockEvent.fields().get(CHECKPOINT_EVENT_NAME)).\n                                 get(TAG_KEY_SRC_MODULE)).toString(),\n-                        (((Map) eventLog.fields().get(CHECKPOINT_EVENT_NAME)).\n+                        (((Map) mockEvent.fields().get(CHECKPOINT_EVENT_NAME)).\n                                 get(TAG_KEY_SRC_POSITION)).toString()\n                 );\n                 checkpoints.add(checkpoint);\n@@ -145,4 +164,25 @@ public int hashCode() {\n             return Objects.hash(moduleID, positionID);\n         }\n     }\n+\n+    /**\n+     * This holds mock events.\n+     */\n+    public static final class BMockEvent {\n+        private final long timestampMicros;\n+        private final Map<String, ?> fields;\n+\n+        public BMockEvent(long timestampMicros, Map<String, ?> fields) {\n+            this.timestampMicros = timestampMicros;\n+            this.fields = fields;\n+        }\n+\n+        public long timestampMicros() {\n+            return timestampMicros;\n+        }\n+\n+        public Map<String, ?> fields() {\n+            return fields;\n+        }\n+    }\n }"
  },
  {
    "sha": "7d45b7a268ecff840d16103258b02c5a4fabb678",
    "filename": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockTracerProvider.java",
    "status": "modified",
    "additions": 19,
    "deletions": 8,
    "changes": 27,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockTracerProvider.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockTracerProvider.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockTracerProvider.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -18,8 +18,11 @@\n package org.ballerina.testobserve.tracing.extension;\n \n import io.ballerina.runtime.observability.tracer.spi.TracerProvider;\n-import io.opentracing.Tracer;\n-import io.opentracing.mock.MockTracer;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.sdk.testing.exporter.InMemorySpanExporter;\n+import io.opentelemetry.sdk.trace.SdkTracerProvider;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n \n import java.io.PrintStream;\n import java.util.Collections;\n@@ -31,7 +34,7 @@\n  */\n public class BMockTracerProvider implements TracerProvider {\n     private static final PrintStream out = System.out;\n-    private static final Map<String, MockTracer> tracerMap = new ConcurrentHashMap<>();\n+    private static final Map<String, InMemorySpanExporter> exporterMap = new ConcurrentHashMap<>();\n \n     @Override\n     public String getName() {\n@@ -42,15 +45,23 @@ public String getName() {\n     public void init() {    // Do Nothing\n     }\n \n-    public static Map<String, MockTracer> getTracerMap() {\n-        return Collections.unmodifiableMap(tracerMap);\n+    public static Map<String, InMemorySpanExporter> getExporterMap() {\n+        return Collections.unmodifiableMap(exporterMap);\n     }\n \n     @Override\n     public Tracer getTracer(String serviceName) {\n-        MockTracer mockTracer = new MockTracer();\n-        tracerMap.put(serviceName, mockTracer);\n+        InMemorySpanExporter inMemorySpanExporter = InMemorySpanExporter.create();\n+        exporterMap.put(serviceName, inMemorySpanExporter);\n         out.println(\"Initialized Mock Tracer for \" + serviceName);\n-        return mockTracer;\n+        SdkTracerProvider tracerProvider = SdkTracerProvider.builder()\n+                .addSpanProcessor(SimpleSpanProcessor.create(inMemorySpanExporter))\n+                .build();\n+        return tracerProvider.get(serviceName);\n+    }\n+\n+    @Override\n+    public ContextPropagators getPropagators() {\n+        return ContextPropagators.noop();\n     }\n }"
  },
  {
    "sha": "353dc89c049527260f47fd40cb0a358b6aa244a5",
    "filename": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java",
    "status": "modified",
    "additions": 13,
    "deletions": 10,
    "changes": 23,
    "blob_url": "https://github.com/ballerina-platform/ballerina-lang/blob/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java",
    "raw_url": "https://github.com/ballerina-platform/ballerina-lang/raw/c15d6bc0b6dc0bba822465888cb2c07c206a8016/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java",
    "contents_url": "https://api.github.com/repos/ballerina-platform/ballerina-lang/contents/tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java?ref=c15d6bc0b6dc0bba822465888cb2c07c206a8016",
    "patch": "@@ -21,7 +21,8 @@\n \n import com.google.gson.Gson;\n import io.ballerina.runtime.api.utils.JsonUtils;\n-import io.opentracing.mock.MockTracer;\n+import io.opentelemetry.sdk.testing.exporter.InMemorySpanExporter;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n \n import java.util.Collections;\n import java.util.List;\n@@ -32,18 +33,20 @@\n  */\n public class MockTracerUtils {\n     public static Object getFinishedSpans(String serviceName) {\n-        MockTracer mockTracer = BMockTracerProvider.getTracerMap().get(serviceName);\n+        InMemorySpanExporter spanExporter = BMockTracerProvider.getExporterMap().get(serviceName);\n+\n         List<BMockSpan> mockSpans;\n-        if (mockTracer == null) {\n+        if (spanExporter == null) {\n             mockSpans = Collections.emptyList();\n         } else {\n-            mockSpans = mockTracer.finishedSpans().stream()\n-                    .map(mockSpan -> new BMockSpan(mockSpan.operationName(),\n-                            mockSpan.context().traceId(),\n-                            mockSpan.context().spanId(),\n-                            mockSpan.parentId(),\n-                            mockSpan.tags(),\n-                            mockSpan.logEntries()))\n+            List<SpanData> finishedSpanList = spanExporter.getFinishedSpanItems();\n+            mockSpans = finishedSpanList.stream()\n+                    .map(spanData -> new BMockSpan(spanData.getName(),\n+                            spanData.getTraceId(),\n+                            spanData.getSpanId(),\n+                            spanData.getParentSpanId(),\n+                            spanData.getAttributes(),\n+                            spanData.getEvents()))\n                     .collect(Collectors.toList());\n         }\n         return JsonUtils.parse(new Gson().toJson(mockSpans));"
  }
]
