[
  {
    "sha": "0967c83416a51107a4686e3f311d2a9bf88a671d",
    "filename": "src/main/java/examples/AsyncEnumValidator.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/examples/AsyncEnumValidator.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/examples/AsyncEnumValidator.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/examples/AsyncEnumValidator.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -12,8 +12,8 @@\n \n class AsyncEnumValidator extends BaseAsyncValidator {\n \n-  private Vertx vertx;\n-  private String address;\n+  private final Vertx vertx;\n+  private final String address;\n \n   public AsyncEnumValidator(Vertx vertx, String address) {\n     this.vertx = vertx;"
  },
  {
    "sha": "b3776b6fe00ee733c44ac6f4f2b8a917eddd36af",
    "filename": "src/main/java/examples/AsyncEnumValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/examples/AsyncEnumValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/examples/AsyncEnumValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/examples/AsyncEnumValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -13,7 +13,7 @@\n \n   public final static String KEYWORD_NAME = \"asyncEnum\";\n \n-  private Vertx vertx;\n+  private final Vertx vertx;\n \n   public AsyncEnumValidatorFactory(Vertx vertx) {\n     this.vertx = vertx;"
  },
  {
    "sha": "08ad7085e643d62d900e0630a7d1cf3327e33947",
    "filename": "src/main/java/examples/PropertiesMultipleOfValidator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/examples/PropertiesMultipleOfValidator.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/examples/PropertiesMultipleOfValidator.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/examples/PropertiesMultipleOfValidator.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -8,7 +8,7 @@\n \n public class PropertiesMultipleOfValidator extends BaseSyncValidator {\n \n-  private int multipleOf;\n+  private final int multipleOf;\n \n   public PropertiesMultipleOfValidator(int multipleOf) {\n     this.multipleOf = multipleOf;"
  },
  {
    "sha": "4143d38c039e0b862df87ab77b7b5af8e1e6af91",
    "filename": "src/main/java/io/vertx/json/schema/NoSyncValidationException.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/NoSyncValidationException.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/NoSyncValidationException.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/NoSyncValidationException.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -18,7 +18,7 @@\n  */\n public class NoSyncValidationException extends VertxException {\n \n-  private MutableStateValidator validator;\n+  private final MutableStateValidator validator;\n \n   public NoSyncValidationException(String message, MutableStateValidator validator) {\n     super(message);"
  },
  {
    "sha": "e4c37a65656e1ba95fb3a10602ab10a548c48ef0",
    "filename": "src/main/java/io/vertx/json/schema/SchemaException.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/SchemaException.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/SchemaException.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/SchemaException.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -19,7 +19,7 @@\n  */\n public class SchemaException extends VertxException {\n \n-  private Object schema;\n+  private final Object schema;\n \n   public SchemaException(Object schema, String message, Throwable cause) {\n     super(message, cause);\n@@ -43,7 +43,7 @@ public Object schema() {\n   @Override\n   public String toString() {\n     return \"SchemaException{\" +\n-      \"message=\\'\" + getMessage() + \"\\'\" +\n+      \"message='\" + getMessage() + \"'\" +\n       \", schema=\" + schema +\n       '}';\n   }"
  },
  {
    "sha": "a13f5bbfbcd97a65b0895cde1f6a1d735b19caf8",
    "filename": "src/main/java/io/vertx/json/schema/common/AllOfValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/AllOfValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/AllOfValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/AllOfValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -30,7 +30,7 @@ String getKeyword() {\n     return \"allOf\";\n   }\n \n-  class AllOfValidator extends BaseCombinatorsValidator {\n+  static class AllOfValidator extends BaseCombinatorsValidator {\n \n     public AllOfValidator(MutableStateValidator parent) {\n       super(parent);"
  },
  {
    "sha": "63d67f8802b189935f6068f8e8a1e73d5fac9028",
    "filename": "src/main/java/io/vertx/json/schema/common/AnyOfValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/AnyOfValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/AnyOfValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/AnyOfValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -36,7 +36,7 @@ String getKeyword() {\n     return \"anyOf\";\n   }\n \n-  class AnyOfValidator extends BaseCombinatorsValidator {\n+  static class AnyOfValidator extends BaseCombinatorsValidator {\n \n     public AnyOfValidator(MutableStateValidator parent) {\n       super(parent);"
  },
  {
    "sha": "3d581025a8c528aeade1fc9c2afdea535ee12206",
    "filename": "src/main/java/io/vertx/json/schema/common/BaseCombinatorsValidator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/BaseCombinatorsValidator.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/BaseCombinatorsValidator.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/BaseCombinatorsValidator.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -34,7 +34,7 @@ public boolean calculateIsSync() {\n   }\n \n   void setSchemas(List<SchemaInternal> schemas) {\n-    this.schemas = schemas.toArray(new SchemaInternal[schemas.size()]);\n+    this.schemas = schemas.toArray(new SchemaInternal[0]);\n     Arrays.sort(this.schemas, ValidatorPriority.COMPARATOR);\n     this.initializeIsSync();\n   }"
  },
  {
    "sha": "1049942d287c34528f71a890d3eb56f295aad587",
    "filename": "src/main/java/io/vertx/json/schema/common/BaseFormatValidatorFactory.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/BaseFormatValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/BaseFormatValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/BaseFormatValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -88,9 +88,9 @@\n     }\n   };\n \n-  class FormatValidator extends BaseSyncValidator {\n+  static class FormatValidator extends BaseSyncValidator {\n \n-    Predicate<String> validator;\n+    final Predicate<String> validator;\n \n     public FormatValidator(Predicate<String> validator) {\n       this.validator = validator;\n@@ -106,8 +106,8 @@ public void validateSync(ValidatorContext context, Object in) throws ValidationE\n     }\n   }\n \n-  protected Map<String, Predicate<String>> formats;\n-  protected List<String> ignoringFormats;\n+  protected final Map<String, Predicate<String>> formats;\n+  protected final List<String> ignoringFormats;\n \n   public BaseFormatValidatorFactory() {\n     this.formats = initFormatsMap();"
  },
  {
    "sha": "b8c6a0443eab58af3ca2e6e30a0dde463c9d1d4e",
    "filename": "src/main/java/io/vertx/json/schema/common/ConstValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/ConstValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/ConstValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/ConstValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -28,7 +28,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"const\");\n   }\n \n-  public class ConstValidator extends BaseSyncValidator {\n+  public static class ConstValidator extends BaseSyncValidator {\n \n     private final Object allowedValue;\n "
  },
  {
    "sha": "b5edcec824beb405aaf2ca4c7b9be87ea5252c45",
    "filename": "src/main/java/io/vertx/json/schema/common/DefinitionsValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 3,
    "changes": 4,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/DefinitionsValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/DefinitionsValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/DefinitionsValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -29,9 +29,7 @@ public Validator createValidator(JsonObject schema, JsonPointer scope, SchemaPar\n     try {\n       JsonObject definitions = schema.getJsonObject(this.definitionsKey);\n       JsonPointer basePointer = scope.append(this.definitionsKey);\n-      definitions.forEach(e -> {\n-        parser.parse((e.getValue() instanceof Map) ? new JsonObject((Map<String, Object>) e.getValue()) : e.getValue(), basePointer.copy().append(e.getKey()), null);\n-      });\n+      definitions.forEach(e -> parser.parse((e.getValue() instanceof Map) ? new JsonObject((Map<String, Object>) e.getValue()) : e.getValue(), basePointer.copy().append(e.getKey()), null));\n       return null;\n     } catch (ClassCastException e) {\n       throw new SchemaException(schema, \"Wrong type for \" + this.definitionsKey + \" keyword\", e);"
  },
  {
    "sha": "eeb330e2f2b62c8c3eb90cdcc804439347477fe2",
    "filename": "src/main/java/io/vertx/json/schema/common/EnumValidatorFactory.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/EnumValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/EnumValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/EnumValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -49,7 +49,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"enum\");\n   }\n \n-  public class EnumValidator extends BaseSyncValidator {\n+  public static class EnumValidator extends BaseSyncValidator {\n     private final Object[] allowedValues;\n \n     public EnumValidator(Set allowedValues) {\n@@ -63,8 +63,8 @@ public ValidatorPriority getPriority() {\n \n     @Override\n     public void validateSync(ValidatorContext context, Object in) throws ValidationException {\n-      for (int i = 0; i < allowedValues.length; i++) {\n-        if (ComparisonUtils.equalsNumberSafe(allowedValues[i], in))\n+      for (Object allowedValue : allowedValues) {\n+        if (ComparisonUtils.equalsNumberSafe(allowedValue, in))\n           return;\n       }\n       throw ValidationException.createException(\"Input doesn't match one of allowed values of enum: \" + Arrays.toString(allowedValues), \"enum\", in);"
  },
  {
    "sha": "e20c10e90846c5b8c7d2e909ccca0e2f8e4aaa8c",
    "filename": "src/main/java/io/vertx/json/schema/common/FalseSchema.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/FalseSchema.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/FalseSchema.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/FalseSchema.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -25,7 +25,7 @@ public static FalseSchema getInstance() {\n     return FalseSchemaHolder.INSTANCE;\n   }\n \n-  MutableStateValidator parent;\n+  final MutableStateValidator parent;\n \n   public FalseSchema(MutableStateValidator parent) {\n     this.parent = parent;"
  },
  {
    "sha": "f48ce3404523e8b2d7e04cba57db2a2d069fc026",
    "filename": "src/main/java/io/vertx/json/schema/common/FutureUtils.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/FutureUtils.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/FutureUtils.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/FutureUtils.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -26,8 +26,8 @@\n     final AtomicBoolean atLeastOneOk = new AtomicBoolean(false);\n     final AtomicReference<T> result = new AtomicReference<>();\n     final int len = results.size();\n-    for (int i = 0; i < len; i++) {\n-      results.get(i).onComplete(ar -> {\n+    for (Future<T> tFuture : results) {\n+      tFuture.onComplete(ar -> {\n         int p = processed.incrementAndGet();\n         if (ar.succeeded()) {\n           if (atLeastOneOk.get())"
  },
  {
    "sha": "1cfc4126b4de691dde6ed803935c7390c48319bf",
    "filename": "src/main/java/io/vertx/json/schema/common/ItemsValidatorFactory.java",
    "status": "modified",
    "additions": 21,
    "deletions": 12,
    "changes": 33,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/ItemsValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/ItemsValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/ItemsValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -31,7 +31,7 @@ protected String getKeyword() {\n     return \"items\";\n   }\n \n-  class ItemsValidator extends BaseSingleSchemaValidator implements DefaultApplier {\n+  static class ItemsValidator extends BaseSingleSchemaValidator implements DefaultApplier {\n \n     public ItemsValidator(MutableStateValidator parent) {\n       super(parent);\n@@ -41,10 +41,13 @@ public ItemsValidator(MutableStateValidator parent) {\n     public void validateSync(ValidatorContext context, Object in) throws ValidationException, NoSyncValidationException {\n       this.checkSync();\n       if (in instanceof JsonArray) {\n-        JsonArray arr = (JsonArray) in;\n+        in = ((JsonArray) in).getList();\n+      }\n+      if (in instanceof List) {\n+        List<?> arr = (List<?>) in;\n         for (int i = 0; i < arr.size(); i++) {\n           context.markEvaluatedItem(i);\n-          schema.validateSync(context.lowerLevelContext(), arr.getValue(i));\n+          schema.validateSync(context.lowerLevelContext(), arr.get(i));\n         }\n       }\n     }\n@@ -53,11 +56,14 @@ public void validateSync(ValidatorContext context, Object in) throws ValidationE\n     public Future<Void> validateAsync(ValidatorContext context, Object in) {\n       if (isSync()) return validateSyncAsAsync(context, in);\n       if (in instanceof JsonArray) {\n-        JsonArray arr = (JsonArray) in;\n+        in = ((JsonArray) in).getList();\n+      }\n+      if (in instanceof List) {\n+        List<?> arr = (List<?>) in;\n         List<Future> futs = new ArrayList<>();\n         for (int i = 0; i < arr.size(); i++) {\n           context.markEvaluatedItem(i);\n-          Future<Void> f = schema.validateAsync(context.lowerLevelContext(), arr.getValue(i));\n+          Future<Void> f = schema.validateAsync(context.lowerLevelContext(), arr.get(i));\n           if (f.isComplete()) {\n             if (f.failed()) return Future.failedFuture(f.cause());\n           } else {\n@@ -72,20 +78,23 @@ public void validateSync(ValidatorContext context, Object in) throws ValidationE\n     }\n \n     @Override\n-    public Future<Void> applyDefaultValue(Object value) {\n-      if (!(value instanceof JsonArray)) {\n+    public Future<Void> applyDefaultValue(Object in) {\n+      if (in instanceof JsonArray) {\n+        in = ((JsonArray) in).getList();\n+      }\n+\n+      if (!(in instanceof List)) {\n         return Future.succeededFuture();\n       }\n \n       List<Future> futures = new ArrayList<>();\n-      JsonArray arr = (JsonArray) value;\n-      for (int i = 0; i < arr.size(); i++) {\n-        Object valToDefault = arr.getValue(i);\n+      List<?> arr = (List<?>) in;\n+      for (Object o : arr) {\n         if (schema.isSync()) {\n-          schema.getOrApplyDefaultSync(valToDefault);\n+          schema.getOrApplyDefaultSync(o);\n         } else {\n           futures.add(\n-            schema.getOrApplyDefaultAsync(valToDefault)\n+            schema.getOrApplyDefaultAsync(o)\n           );\n         }\n       }"
  },
  {
    "sha": "56cfc9cf189079203f99a6cc71ac1b767577af2f",
    "filename": "src/main/java/io/vertx/json/schema/common/JsonSchemaType.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/JsonSchemaType.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/JsonSchemaType.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/JsonSchemaType.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -13,14 +13,16 @@\n import io.vertx.core.json.JsonArray;\n import io.vertx.core.json.JsonObject;\n \n+import java.util.List;\n+import java.util.Map;\n import java.util.Objects;\n import java.util.function.Predicate;\n \n public enum JsonSchemaType {\n   NULL(Objects::isNull),\n   BOOLEAN(o -> o instanceof Boolean),\n-  OBJECT(o -> o instanceof JsonObject),\n-  ARRAY(o -> o instanceof JsonArray),\n+  OBJECT(o -> o instanceof Map || o instanceof JsonObject),\n+  ARRAY(o -> o instanceof List || o instanceof JsonArray),\n   NUMBER(o -> o instanceof Number),\n   NUMBER_DECIMAL(o -> o instanceof Double || o instanceof Float),\n   INTEGER(o -> o instanceof Long || o instanceof Integer),"
  },
  {
    "sha": "e0fea674ea42d0400e467cbd9f5dae39b06c030d",
    "filename": "src/main/java/io/vertx/json/schema/common/MaxItemsValidatorFactory.java",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MaxItemsValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MaxItemsValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/MaxItemsValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -16,6 +16,8 @@\n import io.vertx.json.schema.SchemaException;\n import io.vertx.json.schema.ValidationException;\n \n+import java.util.List;\n+\n public class MaxItemsValidatorFactory implements ValidatorFactory {\n \n   @Override\n@@ -37,7 +39,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"maxItems\");\n   }\n \n-  public class MaxItemsValidator extends BaseSyncValidator {\n+  public static class MaxItemsValidator extends BaseSyncValidator {\n     private final int maximum;\n \n     public MaxItemsValidator(int maximum) {\n@@ -46,9 +48,13 @@ public MaxItemsValidator(int maximum) {\n \n     @Override\n     public void validateSync(ValidatorContext context, Object in) throws ValidationException {\n+      final Object orig = in;\n       if (in instanceof JsonArray) {\n-        if (((JsonArray) in).size() > maximum) {\n-          throw ValidationException.createException(\"provided array should have size <= \" + maximum, \"maxItems\", in);\n+        in = ((JsonArray) in).getList();\n+      }\n+      if (in instanceof List) {\n+        if (((List<?>) in).size() > maximum) {\n+          throw ValidationException.createException(\"provided array should have size <= \" + maximum, \"maxItems\", orig);\n         }\n       }\n     }"
  },
  {
    "sha": "cec0321d575f9cc57171ece2f1020f929b4d249e",
    "filename": "src/main/java/io/vertx/json/schema/common/MaxLengthValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MaxLengthValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MaxLengthValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/MaxLengthValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -36,7 +36,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"maxLength\");\n   }\n \n-  public class MaxLengthValidator extends BaseSyncValidator {\n+  public static class MaxLengthValidator extends BaseSyncValidator {\n     private final int maximum;\n \n     public MaxLengthValidator(int maximum) {"
  },
  {
    "sha": "548c792a07a6c53022c2ad1088dae01461c8aef9",
    "filename": "src/main/java/io/vertx/json/schema/common/MaxPropertiesValidatorFactory.java",
    "status": "modified",
    "additions": 10,
    "deletions": 3,
    "changes": 13,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MaxPropertiesValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MaxPropertiesValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/MaxPropertiesValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -15,6 +15,8 @@\n import io.vertx.json.schema.SchemaException;\n import io.vertx.json.schema.ValidationException;\n \n+import java.util.Map;\n+\n public class MaxPropertiesValidatorFactory implements ValidatorFactory {\n \n   @Override\n@@ -36,7 +38,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"maxProperties\");\n   }\n \n-  public class MaxPropertiesValidator extends BaseSyncValidator {\n+  public static class MaxPropertiesValidator extends BaseSyncValidator {\n     private final int maximum;\n \n     public MaxPropertiesValidator(int maximum) {\n@@ -45,9 +47,14 @@ public MaxPropertiesValidator(int maximum) {\n \n     @Override\n     public void validateSync(ValidatorContext context, Object in) throws ValidationException {\n+      final Object orig = in;\n+      // attempt to handle JsonObject as Map\n       if (in instanceof JsonObject) {\n-        if (((JsonObject) in).size() > maximum) {\n-          throw ValidationException.createException(\"provided object should have size <= \" + maximum, \"maxProperties\", in);\n+        in = ((JsonObject) in).getMap();\n+      }\n+      if (in instanceof Map) {\n+        if (((Map) in).size() > maximum) {\n+          throw ValidationException.createException(\"provided object should have size <= \" + maximum, \"maxProperties\", orig);\n         }\n       }\n     }"
  },
  {
    "sha": "29d0675ddfe6da751e802f45ae0642b51298d8c0",
    "filename": "src/main/java/io/vertx/json/schema/common/MinItemsValidatorFactory.java",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MinItemsValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MinItemsValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/MinItemsValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -16,6 +16,8 @@\n import io.vertx.json.schema.SchemaException;\n import io.vertx.json.schema.ValidationException;\n \n+import java.util.List;\n+\n public class MinItemsValidatorFactory implements ValidatorFactory {\n \n   @Override\n@@ -37,7 +39,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"minItems\");\n   }\n \n-  public class MinItemsValidator extends BaseSyncValidator {\n+  public static class MinItemsValidator extends BaseSyncValidator {\n     private final int minimum;\n \n     public MinItemsValidator(int minimum) {\n@@ -46,9 +48,13 @@ public MinItemsValidator(int minimum) {\n \n     @Override\n     public void validateSync(ValidatorContext context, Object in) throws ValidationException {\n+      final Object orig = in;\n       if (in instanceof JsonArray) {\n-        if (((JsonArray) in).size() < minimum) {\n-          throw ValidationException.createException(\"provided array should have size >= \" + minimum, \"minItems\", in);\n+        in = ((JsonArray) in).getList();\n+      }\n+      if (in instanceof List) {\n+        if (((List<?>) in).size() < minimum) {\n+          throw ValidationException.createException(\"provided array should have size >= \" + minimum, \"minItems\", orig);\n         }\n       }\n     }"
  },
  {
    "sha": "3864a3a51558ec0ab70be90a4ff97a9e319a0cba",
    "filename": "src/main/java/io/vertx/json/schema/common/MinLengthValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MinLengthValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MinLengthValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/MinLengthValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -36,7 +36,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"minLength\");\n   }\n \n-  public class MinLengthValidator extends BaseSyncValidator {\n+  public static class MinLengthValidator extends BaseSyncValidator {\n     private final int minimum;\n \n     public MinLengthValidator(int minimum) {"
  },
  {
    "sha": "2d8a17317beffa2b0d3a604ce6871c43559eb0c7",
    "filename": "src/main/java/io/vertx/json/schema/common/MinPropertiesValidatorFactory.java",
    "status": "modified",
    "additions": 10,
    "deletions": 3,
    "changes": 13,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MinPropertiesValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MinPropertiesValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/MinPropertiesValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -15,6 +15,8 @@\n import io.vertx.json.schema.SchemaException;\n import io.vertx.json.schema.ValidationException;\n \n+import java.util.Map;\n+\n public class MinPropertiesValidatorFactory implements ValidatorFactory {\n \n   @Override\n@@ -36,7 +38,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"minProperties\");\n   }\n \n-  public class MinPropertiesValidator extends BaseSyncValidator {\n+  public static class MinPropertiesValidator extends BaseSyncValidator {\n     private final int minimum;\n \n     public MinPropertiesValidator(int minimum) {\n@@ -45,9 +47,14 @@ public MinPropertiesValidator(int minimum) {\n \n     @Override\n     public void validateSync(ValidatorContext context, Object in) throws ValidationException {\n+      final Object orig = in;\n+      // attempt to handle JsonObject as Map\n       if (in instanceof JsonObject) {\n-        if (((JsonObject) in).size() < minimum) {\n-          throw ValidationException.createException(\"provided object should have size >= \" + minimum, \"minProperties\", in);\n+        in = ((JsonObject) in).getMap();\n+      }\n+      if (in instanceof Map) {\n+        if (((Map) in).size() < minimum) {\n+          throw ValidationException.createException(\"provided object should have size >= \" + minimum, \"minProperties\", orig);\n         }\n       }\n     }"
  },
  {
    "sha": "abd01465e486dec5d81ba33179243508a3adf94c",
    "filename": "src/main/java/io/vertx/json/schema/common/MultipleOfValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MultipleOfValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/MultipleOfValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/MultipleOfValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -34,7 +34,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"multipleOf\");\n   }\n \n-  class MultipleOfValidator extends BaseSyncValidator {\n+  static class MultipleOfValidator extends BaseSyncValidator {\n     private final double multipleOf;\n \n     public MultipleOfValidator(double multipleOf) {"
  },
  {
    "sha": "51fefe72f281df4cf7ecc7fd8ad5ef136e2b6041",
    "filename": "src/main/java/io/vertx/json/schema/common/NotValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/NotValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/NotValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/NotValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -26,7 +26,7 @@ protected String getKeyword() {\n     return \"not\";\n   }\n \n-  class NotValidator extends BaseSingleSchemaValidator {\n+  static class NotValidator extends BaseSingleSchemaValidator {\n \n     public NotValidator(MutableStateValidator parent) {\n       super(parent);"
  },
  {
    "sha": "71a82c300f81a08336e9b4fb0c7120fd3b0d13f5",
    "filename": "src/main/java/io/vertx/json/schema/common/OneOfValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/OneOfValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/OneOfValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/OneOfValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -31,7 +31,7 @@ String getKeyword() {\n     return \"oneOf\";\n   }\n \n-  class OneOfValidator extends BaseCombinatorsValidator {\n+  static class OneOfValidator extends BaseCombinatorsValidator {\n \n     public OneOfValidator(MutableStateValidator parent) {\n       super(parent);"
  },
  {
    "sha": "6f95b367bd3f65ea8685ca362f932970ebdd3ebb",
    "filename": "src/main/java/io/vertx/json/schema/common/PatternValidatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/PatternValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/PatternValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/PatternValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -40,7 +40,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"pattern\");\n   }\n \n-  public class PatternValidator extends BaseSyncValidator {\n+  public static class PatternValidator extends BaseSyncValidator {\n     private final Pattern pattern;\n \n     public PatternValidator(Pattern pattern) {"
  },
  {
    "sha": "fa69d8e24bf37d6719bbf3b490e75328355f9de2",
    "filename": "src/main/java/io/vertx/json/schema/common/PropertiesValidatorFactory.java",
    "status": "modified",
    "additions": 35,
    "deletions": 22,
    "changes": 57,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/PropertiesValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/PropertiesValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/PropertiesValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -151,22 +151,26 @@ public boolean calculateIsSync() {\n     @Override\n     public Future<Void> validateAsync(ValidatorContext context, Object in) {\n       if (isSync()) return validateSyncAsAsync(context, in);\n+      final Object orig = in;\n       if (in instanceof JsonObject) {\n-        JsonObject obj = (JsonObject) in;\n+        in = ((JsonObject) in).getMap();\n+      }\n+      if (in instanceof Map) {\n+        Map<String, ?> obj = (Map) in;\n         List<Future> futs = new ArrayList<>();\n-        for (String key : obj.fieldNames()) {\n+        for (String key : obj.keySet()) {\n           boolean found = false;\n           if (properties != null && properties.containsKey(key)) {\n             SchemaInternal s = properties.get(key);\n             context.markEvaluatedProperty(key);\n             if (s.isSync()) {\n               try {\n-                s.validateSync(context.lowerLevelContext(), obj.getValue(key));\n+                s.validateSync(context.lowerLevelContext(), obj.get(key));\n               } catch (ValidationException e) {\n                 return Future.failedFuture(e);\n               }\n             } else {\n-              futs.add(s.validateAsync(context.lowerLevelContext(), obj.getValue(key)));\n+              futs.add(s.validateAsync(context.lowerLevelContext(), obj.get(key)));\n             }\n             found = true;\n           }\n@@ -177,12 +181,12 @@ public boolean calculateIsSync() {\n                 context.markEvaluatedProperty(key);\n                 if (s.isSync()) {\n                   try {\n-                    s.validateSync(context.lowerLevelContext(), obj.getValue(key));\n+                    s.validateSync(context.lowerLevelContext(), obj.get(key));\n                   } catch (ValidationException e) {\n                     return Future.failedFuture(e);\n                   }\n                 } else {\n-                  futs.add(s.validateAsync(context.lowerLevelContext(), obj.getValue(key)));\n+                  futs.add(s.validateAsync(context.lowerLevelContext(), obj.get(key)));\n                 }\n                 found = true;\n               }\n@@ -194,19 +198,19 @@ public boolean calculateIsSync() {\n                 context.markEvaluatedProperty(key);\n                 if (additionalPropertiesSchema.isSync()) {\n                   try {\n-                    additionalPropertiesSchema.validateSync(context.lowerLevelContext(), obj.getValue(key));\n+                    additionalPropertiesSchema.validateSync(context.lowerLevelContext(), obj.get(key));\n                   } catch (ValidationException e) {\n-                    return fillAdditionalPropertyException(e, in);\n+                    return fillAdditionalPropertyException(e, orig);\n                   }\n                 } else {\n                   futs.add(additionalPropertiesSchema\n-                    .validateAsync(context.lowerLevelContext(), obj.getValue(key))\n-                    .recover(t -> fillAdditionalPropertyException(t, in))\n+                    .validateAsync(context.lowerLevelContext(), obj.get(key))\n+                    .recover(t -> fillAdditionalPropertyException(t, orig))\n                   );\n                 }\n               }\n             } else {\n-              return Future.failedFuture(createException(\"provided object should not contain additional properties\", \"additionalProperties\", in));\n+              return Future.failedFuture(createException(\"provided object should not contain additional properties\", \"additionalProperties\", orig));\n             }\n           }\n         }\n@@ -218,22 +222,26 @@ public boolean calculateIsSync() {\n     @Override\n     public void validateSync(ValidatorContext context, Object in) throws ValidationException {\n       this.checkSync();\n+      final Object orig = in;\n       if (in instanceof JsonObject) {\n-        JsonObject obj = (JsonObject) in;\n-        for (String key : obj.fieldNames()) {\n+        in = ((JsonObject) in).getMap();\n+      }\n+      if (in instanceof Map) {\n+        Map<String, ?> obj = (Map) in;\n+        for (String key : obj.keySet()) {\n           boolean found = false;\n           if (properties != null && properties.containsKey(key)) {\n             SchemaInternal s = properties.get(key);\n             context.markEvaluatedProperty(key);\n-            s.validateSync(context.lowerLevelContext(), obj.getValue(key));\n+            s.validateSync(context.lowerLevelContext(), obj.get(key));\n             found = true;\n           }\n           if (patternProperties != null) {\n             for (Map.Entry<Pattern, SchemaInternal> patternProperty : patternProperties.entrySet()) {\n               if (patternProperty.getKey().matcher(key).find()) {\n                 SchemaInternal s = patternProperty.getValue();\n                 context.markEvaluatedProperty(key);\n-                s.validateSync(context.lowerLevelContext(), obj.getValue(key));\n+                s.validateSync(context.lowerLevelContext(), obj.get(key));\n                 found = true;\n               }\n             }\n@@ -242,24 +250,29 @@ public void validateSync(ValidatorContext context, Object in) throws ValidationE\n             if (allowAdditionalProperties) {\n               if (additionalPropertiesSchema != null) {\n                 context.markEvaluatedProperty(key);\n-                additionalPropertiesSchema.validateSync(context.lowerLevelContext(), obj.getValue(key));\n+                additionalPropertiesSchema.validateSync(context.lowerLevelContext(), obj.get(key));\n               }\n             } else {\n-              throw createException(\"provided object should not contain additional properties\", \"additionalProperties\", in);\n+              throw createException(\"provided object should not contain additional properties\", \"additionalProperties\", orig);\n             }\n           }\n         }\n       }\n     }\n \n     @Override\n-    public Future<Void> applyDefaultValue(Object value) {\n-      if (!(value instanceof JsonObject && properties != null)) {\n+    public Future<Void> applyDefaultValue(Object in) {\n+      final Object orig = in;\n+      if (in instanceof JsonObject) {\n+        in = ((JsonObject) in).getMap();\n+      }\n+\n+      if (!(in instanceof Map && properties != null)) {\n         return Future.succeededFuture();\n       }\n+      Map<String, Object> obj = (Map) in;\n \n       List<Future> futs = new ArrayList<>();\n-      JsonObject obj = (JsonObject) value;\n       for (Map.Entry<String, SchemaInternal> e : properties.entrySet()) {\n         final String key = e.getKey();\n         final SchemaInternal schema = e.getValue();\n@@ -281,10 +294,10 @@ public void validateSync(ValidatorContext context, Object in) throws ValidationE\n           }\n         } else {\n           if (schema.isSync()) {\n-            schema.getOrApplyDefaultSync(obj.getValue(key));\n+            schema.getOrApplyDefaultSync(obj.get(key));\n           } else {\n             futs.add(\n-              schema.getOrApplyDefaultAsync(obj.getValue(key))\n+              schema.getOrApplyDefaultAsync(obj.get(key))\n             );\n           }\n         }"
  },
  {
    "sha": "a341fc213a22b4ec38048df07ef3c5027202fbfe",
    "filename": "src/main/java/io/vertx/json/schema/common/RequiredValidatorFactory.java",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/RequiredValidatorFactory.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/RequiredValidatorFactory.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/RequiredValidatorFactory.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -17,6 +17,7 @@\n import io.vertx.json.schema.ValidationException;\n \n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n \n import static io.vertx.json.schema.ValidationException.createException;\n@@ -40,7 +41,7 @@ public boolean canConsumeSchema(JsonObject schema) {\n     return schema.containsKey(\"required\");\n   }\n \n-  public class RequiredValidator extends BaseSyncValidator {\n+  public static class RequiredValidator extends BaseSyncValidator {\n     private final Set<String> requiredKeys;\n \n     public RequiredValidator(Set<String> requiredKeys) {\n@@ -49,11 +50,16 @@ public RequiredValidator(Set<String> requiredKeys) {\n \n     @Override\n     public void validateSync(ValidatorContext context, Object in) throws ValidationException {\n+      final Object orig = in;\n+      // attempt to handle JsonObject as Map\n       if (in instanceof JsonObject) {\n-        JsonObject obj = (JsonObject) in;\n+        in = ((JsonObject) in).getMap();\n+      }\n+      if (in instanceof Map) {\n+        Map<String, ?> obj = (Map) in;\n         for (String k : requiredKeys) {\n           if (!obj.containsKey(k))\n-            throw createException(\"provided object should contain property \" + k, \"required\", in);\n+            throw createException(\"provided object should contain property \" + k, \"required\", orig);\n         }\n       }\n     }"
  },
  {
    "sha": "ab366f7eed0f0e13be5cec67ee02c134cd943c80",
    "filename": "src/main/java/io/vertx/json/schema/common/RouterNodeJsonPointerIterator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/RouterNodeJsonPointerIterator.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/RouterNodeJsonPointerIterator.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/RouterNodeJsonPointerIterator.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -40,7 +40,7 @@ public boolean objectContainsKey(Object value, String key) {\n   @Override\n   public Object getObjectParameter(Object value, String key, boolean createOnMissing) {\n     if (isObject(value)) {\n-      if (!objectContainsKey(value, key) && createOnMissing) {\n+      if (!objectContainsKey(value, key)) {\n         if (createOnMissing) {\n           RouterNode node = new RouterNode();\n           ((RouterNode) value).getChilds().put(key, node);"
  },
  {
    "sha": "1f7f31ab8f158860464f1084218d1361491a408f",
    "filename": "src/main/java/io/vertx/json/schema/common/SchemaParserInternal.java",
    "status": "modified",
    "additions": 0,
    "deletions": 2,
    "changes": 2,
    "blob_url": "https://github.com/eclipse-vertx/vertx-json-schema/blob/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/SchemaParserInternal.java",
    "raw_url": "https://github.com/eclipse-vertx/vertx-json-schema/raw/dd01308fb72c5b5a3281e5b039aaec07566792fd/src/main/java/io/vertx/json/schema/common/SchemaParserInternal.java",
    "contents_url": "https://api.github.com/repos/eclipse-vertx/vertx-json-schema/contents/src/main/java/io/vertx/json/schema/common/SchemaParserInternal.java?ref=dd01308fb72c5b5a3281e5b039aaec07566792fd",
    "patch": "@@ -63,8 +63,6 @@ default SchemaInternal parseFromString(String unparsedJson, JsonPointer schemaPo\n     return parseFromString(unparsedJson, schemaPointer, null);\n   }\n \n-  ;\n-\n   default SchemaInternal parseFromString(String unparsedJson, URI scope, MutableStateValidator parent) {\n     return this.parseFromString(unparsedJson, JsonPointer.fromURI(scope), parent);\n   }"
  }
]
