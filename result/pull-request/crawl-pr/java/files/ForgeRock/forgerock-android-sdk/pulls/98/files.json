[
  {
    "sha": "2f325cdc5e2a8fa246d4e49ad1b0bc353921640e",
    "filename": "CHANGELOG.md",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/CHANGELOG.md",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/CHANGELOG.md",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/CHANGELOG.md?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -1,3 +1,9 @@\n+## [Unreleased]\n+\n+#### Added\n+- Social Login support for Google and Facebook\n+- Biometric Authentication with WebAuthn\n+\n # Version 2.2.0\n \n ## [2.2.0]"
  },
  {
    "sha": "7515afc5e306c5e57ec1c633a2389324b095652e",
    "filename": "forgerock-auth-ui/build.gradle",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/build.gradle",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/build.gradle",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth-ui/build.gradle?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -143,6 +143,8 @@ dependencies {\n     implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n     implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n     compileOnly 'com.google.android.gms:play-services-fido:18.1.0'\n+    compileOnly 'com.google.android.gms:play-services-auth:19.0.0'\n+    compileOnly 'com.facebook.android:facebook-login:7.1.0'\n \n     implementation 'com.google.android.material:material:1.3.0'\n     implementation 'androidx.legacy:legacy-support-v4:1.0.0'"
  },
  {
    "sha": "9b2708948a389274904fd4c53055785f6846378c",
    "filename": "forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/CallbackFragmentFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/CallbackFragmentFactory.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/CallbackFragmentFactory.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/CallbackFragmentFactory.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -61,6 +61,8 @@ private CallbackFragmentFactory() {\n         register(DeviceProfileCallback.class, DeviceProfileCallbackFragment.class);\n         register(WebAuthnRegistrationCallback.class, WebAuthnRegistrationCallbackFragment.class);\n         register(WebAuthnAuthenticationCallback.class, WebAuthnAuthenticationCallbackFragment.class);\n+        register(SelectIdPCallback.class, SelectIdPCallbackFragment.class);\n+        register(IdPCallback.class, IdPCallbackFragment.class);\n     }\n \n     public static CallbackFragmentFactory getInstance() {"
  },
  {
    "sha": "6fd5f261679c603dff86ea54d747dd5fb66fa198",
    "filename": "forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/SimpleLoginActivity.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/SimpleLoginActivity.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/SimpleLoginActivity.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/SimpleLoginActivity.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2019 - 2020 ForgeRock. All rights reserved.\n+ * Copyright (c) 2019 - 2021 ForgeRock. All rights reserved.\n  *\n  * This software may be modified and distributed under the terms\n  * of the MIT license. See the LICENSE file for details.\n@@ -20,7 +20,7 @@\n public class SimpleLoginActivity extends AppCompatActivity implements FRListener<Void> {\n \n     private static final String TAG = SimpleLoginActivity.class.getSimpleName();\n-    public static final String EXCEPTION = \"EXCEPTION\";\n+    public static final String ERROR_EXTRA = \"ERROR_EXTRA\";\n \n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n@@ -38,8 +38,8 @@ public void onSuccess(Void result) {\n     public void onException(Exception e) {\n         Logger.error(TAG, e, e.getMessage());\n         Intent intent = new Intent();\n-        intent.putExtra(EXCEPTION, e);\n-        setResult(Activity.RESULT_CANCELED, intent);\n+        intent.putExtra(ERROR_EXTRA, e.getMessage());\n+        setResult(Activity.RESULT_OK, intent);\n         finish();\n     }\n }"
  },
  {
    "sha": "23201a345b585610e4a40eb5ebbae8ef210e1a2a",
    "filename": "forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/callback/IdPCallbackFragment.java",
    "status": "added",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/callback/IdPCallbackFragment.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/callback/IdPCallbackFragment.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/callback/IdPCallbackFragment.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.ui.callback;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+\n+import androidx.fragment.app.Fragment;\n+\n+import org.forgerock.android.auth.FRListener;\n+import org.forgerock.android.auth.callback.IdPCallback;\n+import org.forgerock.android.auth.ui.R;\n+\n+import static android.view.View.GONE;\n+\n+/**\n+ * A simple {@link Fragment} subclass.\n+ */\n+public class IdPCallbackFragment extends CallbackFragment<IdPCallback> {\n+\n+    private TextView message;\n+    private ProgressBar progressBar;\n+\n+    public IdPCallbackFragment() {\n+        // Required empty public constructor\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState) {\n+        // Inflate the layout for this fragment\n+        View view = inflater.inflate(R.layout.fragment_idp_callback, container, false);\n+        message = view.findViewById(R.id.message);\n+        message.setText(\"redirecting...\");\n+        progressBar = view.findViewById(R.id.loading);\n+        progressBar.setVisibility(View.VISIBLE);\n+        proceed();\n+\n+        return view;\n+    }\n+\n+    private void proceed() {\n+        callback.signIn(this, new FRListener<Void>() {\n+            @Override\n+            public void onSuccess(Void result) {\n+                message.setVisibility(GONE);\n+                progressBar.setVisibility(GONE);\n+                next();\n+            }\n+\n+            @Override\n+            public void onException(Exception e) {\n+                message.setVisibility(GONE);\n+                progressBar.setVisibility(GONE);\n+                cancel(e);\n+            }\n+        });\n+    }\n+\n+}"
  },
  {
    "sha": "df2d8bf4b297620cefa323fe360605581ccd0f03",
    "filename": "forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/callback/SelectIdPCallbackFragment.java",
    "status": "added",
    "additions": 134,
    "deletions": 0,
    "changes": 134,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/callback/SelectIdPCallbackFragment.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/callback/SelectIdPCallbackFragment.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth-ui/src/main/java/org/forgerock/android/auth/ui/callback/SelectIdPCallbackFragment.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.ui.callback;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+import android.widget.ImageView;\n+import android.widget.LinearLayout;\n+import android.widget.Space;\n+\n+import org.forgerock.android.auth.callback.ChoiceCallback;\n+import org.forgerock.android.auth.callback.NameCallback;\n+import org.forgerock.android.auth.callback.SelectIdPCallback;\n+import org.forgerock.android.auth.callback.ValidatedUsernameCallback;\n+import org.forgerock.android.auth.ui.R;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * UI representation for {@link ChoiceCallback}\n+ */\n+public class SelectIdPCallbackFragment extends CallbackFragment<SelectIdPCallback> {\n+\n+    public static final String LOCAL_AUTHENTICATION = \"localAuthentication\";\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n+                             Bundle savedInstanceState) {\n+        // Inflate the layout for this fragment\n+        final View view = inflater.inflate(R.layout.fragment_select_idp_callback, container, false);\n+\n+        LinearLayout selectAuthenticationLayout = view.findViewById(R.id.selectAuthenticationLayout);\n+        LinearLayout selectIdpLayout = view.findViewById(R.id.selectIdpLayout);\n+\n+\n+        for (SelectIdPCallback.IdPValue idp : callback.getProviders()) {\n+            View v = getView(idp);\n+            if (v != null) {\n+                v.setOnClickListener(v1 -> {\n+                    callback.setValue(idp.getProvider());\n+                    onDataCollected();\n+                    next();\n+                });\n+                selectIdpLayout.addView(v);\n+                Space space = new Space(getContext());\n+                space.setMinimumWidth(20);\n+                selectIdpLayout.addView(space);\n+            }\n+        }\n+        if (showLocalAuthentication()) {\n+            suspend();\n+            View v = getLocalAuthenticationView();\n+            v.setOnClickListener(v1 -> {\n+                callback.setValue(LOCAL_AUTHENTICATION);\n+                onDataCollected();\n+                next();\n+            });\n+            selectAuthenticationLayout.addView(v);\n+        }\n+        return view;\n+    }\n+\n+    protected View getLocalAuthenticationView() {\n+        Button localAuthentication = new Button(getContext());\n+        localAuthentication.setText(R.string.localAuthentication);\n+        return localAuthentication;\n+    }\n+\n+    protected boolean showLocalAuthentication() {\n+        for (SelectIdPCallback.IdPValue idp : callback.getProviders()) {\n+            if (idp.getProvider().equals(LOCAL_AUTHENTICATION)) {\n+                if (node.getCallbacks().size() == 1) {\n+                    return true;\n+                } else {\n+                    return node.getCallback(NameCallback.class) == null &&\n+                            node.getCallback(ValidatedUsernameCallback.class) == null;\n+                }\n+            }\n+        }\n+        return false;\n+\n+    }\n+\n+    protected View getView(SelectIdPCallback.IdPValue idp) {\n+        if (idp.getProvider().equals(LOCAL_AUTHENTICATION)) {\n+            //Special handling of showing local authentication\n+            callback.setValue(LOCAL_AUTHENTICATION);\n+            return null;\n+        }\n+        if (idp.getProvider().toLowerCase().contains(\"facebook\")) {\n+            ImageView facebook = new ImageView(getContext());\n+            facebook.setMaxWidth(100);\n+            facebook.setMinimumWidth(100);\n+            facebook.setMaxHeight(100);\n+            facebook.setMinimumHeight(100);\n+            facebook.setImageResource(R.drawable.com_facebook_favicon_blue);\n+            return facebook;\n+        }\n+\n+        if (idp.getProvider().toLowerCase().contains(\"google\")) {\n+            ImageView google = new ImageView(getContext());\n+            google.setMaxWidth(100);\n+            google.setMinimumWidth(100);\n+            google.setMaxHeight(100);\n+            google.setMinimumHeight(100);\n+            google.setImageResource(R.drawable.googleg_standard_color_18);\n+            return google;\n+        }\n+\n+        if (idp.getUiConfig() != null) {\n+            try {\n+                JSONObject uiConfig = new JSONObject(idp.getUiConfig());\n+                Button button = new Button(getContext());\n+                button.setText(uiConfig.getString(\"buttonDisplayName\"));\n+                return button;\n+            } catch (JSONException e) {\n+                //ignore\n+            }\n+        }\n+        Button button = new Button(getContext());\n+        button.setText(idp.getProvider());\n+        return button;\n+\n+    }\n+\n+}"
  },
  {
    "sha": "7d1e85f1ad145ce28ee2dcbe6b6c68d6f9518ee2",
    "filename": "forgerock-auth-ui/src/main/res/layout/fragment_idp_callback.xml",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/res/layout/fragment_idp_callback.xml",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/res/layout/fragment_idp_callback.xml",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth-ui/src/main/res/layout/fragment_idp_callback.xml?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright (c) 2021 ForgeRock. All rights reserved.\n+  ~\n+  ~ This software may be modified and distributed under the terms\n+  ~ of the MIT license. See the LICENSE file for details.\n+  -->\n+\n+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\".callback.IdPCallbackFragment\" android:id=\"@+id/frameLayout\">\n+\n+    <TextView\n+        android:id=\"@+id/message\"\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"wrap_content\"\n+        app:layout_constraintBottom_toBottomOf=\"parent\"\n+        app:layout_constraintEnd_toEndOf=\"parent\"\n+        app:layout_constraintStart_toStartOf=\"parent\"\n+        app:layout_constraintTop_toTopOf=\"parent\"/>\n+\n+    <ProgressBar\n+        android:id=\"@+id/loading\"\n+        style=\"?android:attr/progressBarStyle\"\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"wrap_content\"\n+        android:layout_marginBottom=\"8dp\"\n+        app:layout_constraintBottom_toTopOf=\"@+id/message\"\n+        app:layout_constraintEnd_toEndOf=\"parent\"\n+        app:layout_constraintStart_toStartOf=\"parent\" />\n+\n+</androidx.constraintlayout.widget.ConstraintLayout>\n\\ No newline at end of file"
  },
  {
    "sha": "afb4a2d7c5c87edac3b9ba7b34e66d766d957506",
    "filename": "forgerock-auth-ui/src/main/res/layout/fragment_select_idp_callback.xml",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/res/layout/fragment_select_idp_callback.xml",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/res/layout/fragment_select_idp_callback.xml",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth-ui/src/main/res/layout/fragment_select_idp_callback.xml?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright (c) 2021 ForgeRock. All rights reserved.\n+  ~\n+  ~ This software may be modified and distributed under the terms\n+  ~ of the MIT license. See the LICENSE file for details.\n+  -->\n+\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    android:id=\"@+id/selectAuthenticationLayout\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\"\n+    android:gravity=\"center|top\"\n+    android:orientation=\"vertical\">\n+\n+    <LinearLayout\n+        android:id=\"@+id/selectIdpLayout\"\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"match_parent\"\n+        android:orientation=\"horizontal\" />\n+</LinearLayout>\n\\ No newline at end of file"
  },
  {
    "sha": "4faf1d04e8cb2074e04a737e9c5de5056bb9c332",
    "filename": "forgerock-auth-ui/src/main/res/values/strings.xml",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/res/values/strings.xml",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth-ui/src/main/res/values/strings.xml",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth-ui/src/main/res/values/strings.xml?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -1,5 +1,5 @@\n <!--\n-  ~ Copyright (c) 2019 - 2020 ForgeRock. All rights reserved.\n+  ~ Copyright (c) 2019 - 2021 ForgeRock. All rights reserved.\n   ~\n   ~ This software may be modified and distributed under the terms\n   ~ of the MIT license. See the LICENSE file for details.\n@@ -61,4 +61,7 @@\n     <string name=\"request_location_rationale\">Location is required for Authentication</string>\n     <string name=\"signInDescription\">Please provide Username and Password.</string>\n \n+    <!-- Social Login -->\n+    <string name=\"localAuthentication\">Sign-In with Email</string>\n+\n </resources>"
  },
  {
    "sha": "2a2513f050feac06b842c91f2e0dd676837e66df",
    "filename": "forgerock-auth/build.gradle",
    "status": "modified",
    "additions": 14,
    "deletions": 4,
    "changes": 18,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/build.gradle",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/build.gradle",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/build.gradle?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -211,33 +211,43 @@ dependencies {\n     compileOnly 'net.openid:appauth:0.7.1'\n     compileOnly 'com.google.android.gms:play-services-fido:18.1.0'\n \n-    testImplementation 'androidx.test:core:1.3.0'\n-    testImplementation 'androidx.test:runner:1.3.0'\n+    //Social Login\n+    compileOnly 'com.google.android.gms:play-services-auth:19.0.0'\n+    compileOnly 'com.facebook.android:facebook-login:7.1.0'\n \n     androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n     androidTestImplementation 'com.squareup.okhttp:mockwebserver:2.7.5'\n     androidTestImplementation 'commons-io:commons-io:2.6'\n     androidTestImplementation 'com.android.support.test:rules:1.0.2'\n-    androidTestImplementation 'com.google.android.gms:play-services-location:17.1.0'\n+    androidTestImplementation 'com.google.android.gms:play-services-location:18.0.0'\n     //Do not update to the latest library, Only 2.x compatible with Android M and below.\n     androidTestImplementation 'org.assertj:assertj-core:2.9.1'\n     androidTestImplementation 'com.google.android.gms:play-services-fido:18.1.0'\n \n+    testImplementation 'androidx.test:core:1.3.0'\n+    testImplementation 'androidx.test:runner:1.3.0'\n+\n     testImplementation 'junit:junit:4.13'\n     testImplementation 'org.robolectric:robolectric:4.3.1'\n     testImplementation 'com.squareup.okhttp:mockwebserver:2.7.5'\n     testImplementation 'commons-io:commons-io:2.6'\n     testImplementation 'org.assertj:assertj-core:3.18.1'\n-    testImplementation \"androidx.fragment:fragment-testing:1.3.0\"\n     testImplementation \"androidx.test.espresso:espresso-intents:3.3.0\"\n     testImplementation 'net.openid:appauth:0.7.1'\n     testImplementation 'com.google.android.gms:play-services-fido:18.1.0'\n+    testImplementation 'com.google.android.gms:play-services-auth:19.0.0'\n+    testImplementation 'com.facebook.android:facebook-login:7.1.0'\n \n     testImplementation 'org.mockito:mockito-core:3.6.0'\n     testImplementation 'org.powermock:powermock-module-junit4:2.0.2'\n     testImplementation 'org.powermock:powermock-api-mockito2:2.0.2'\n \n+    implementation('androidx.lifecycle:lifecycle-common') {\n+        version {\n+            strictly '2.2.0'\n+        }\n+    }\n \n     compileOnly \"org.projectlombok:lombok:1.18.8\"\n     delombok \"org.projectlombok:lombok:1.18.8\""
  },
  {
    "sha": "61ed88c9a760149e47de61bdab1a5e5b8c3a60a7",
    "filename": "forgerock-auth/src/main/java/org/forgerock/android/auth/callback/CallbackFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/callback/CallbackFactory.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/callback/CallbackFactory.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/main/java/org/forgerock/android/auth/callback/CallbackFactory.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -47,6 +47,8 @@ private CallbackFactory() {\n         register(MetadataCallback.class);\n         register(WebAuthnRegistrationCallback.class);\n         register(WebAuthnAuthenticationCallback.class);\n+        register(SelectIdPCallback.class);\n+        register(IdPCallback.class);\n     }\n \n     /**"
  },
  {
    "sha": "21d608379d718fd11194af1c4ef10bcc7f8f6234",
    "filename": "forgerock-auth/src/main/java/org/forgerock/android/auth/callback/IdPCallback.java",
    "status": "added",
    "additions": 186,
    "deletions": 0,
    "changes": 186,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/callback/IdPCallback.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/callback/IdPCallback.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/main/java/org/forgerock/android/auth/callback/IdPCallback.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.callback;\n+\n+import androidx.annotation.Keep;\n+import androidx.fragment.app.Fragment;\n+\n+import org.forgerock.android.auth.FRListener;\n+import org.forgerock.android.auth.Listener;\n+import org.forgerock.android.auth.idp.FacebookSignInHandler;\n+import org.forgerock.android.auth.idp.GoogleSignInHandler;\n+import org.forgerock.android.auth.idp.IdPClient;\n+import org.forgerock.android.auth.idp.IdPHandler;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * Callback to handle Identity Provider SignIn\n+ */\n+@NoArgsConstructor\n+@Getter\n+public class IdPCallback extends AbstractCallback implements IdPClient {\n+\n+    private String provider;\n+    private String clientId;\n+    private String redirectUri;\n+    private List<String> scopes;\n+    private String nonce;\n+    private List<String> acrValues;\n+    private String request;\n+    private String requestUri;\n+\n+    @Keep\n+    public IdPCallback(JSONObject jsonObject, int index) {\n+        super(jsonObject, index);\n+    }\n+\n+    @Override\n+    protected void setAttribute(String name, Object value) {\n+        switch (name) {\n+            case \"provider\":\n+                this.provider = (String) value;\n+                break;\n+            case \"clientId\":\n+                this.clientId = (String) value;\n+                break;\n+            case \"redirectUri\":\n+                this.redirectUri = (String) value;\n+                break;\n+            case \"scopes\":\n+                JSONArray array = (JSONArray) value;\n+                scopes = new ArrayList<>();\n+                for (int i = 0; i < array.length(); i++) {\n+                    try {\n+                        scopes.add(array.getString(i));\n+                    } catch (JSONException e) {\n+                        //ignore\n+                    }\n+                }\n+                break;\n+            case \"nonce\":\n+                this.nonce = (String) value;\n+                break;\n+            case \"acrValues\":\n+                JSONArray values = (JSONArray) value;\n+                acrValues = new ArrayList<>();\n+                for (int i = 0; i < values.length(); i++) {\n+                    try {\n+                        acrValues.add(values.getString(i));\n+                    } catch (JSONException e) {\n+                        //ignore\n+                    }\n+                }\n+                break;\n+            case \"request\":\n+                this.request = (String) value;\n+                break;\n+            case \"requestUri\":\n+                this.requestUri = (String) value;\n+                break;\n+\n+            default:\n+                //ignore\n+        }\n+    }\n+\n+    /**\n+     * Set the the authentication token value.\n+     *\n+     * @param value The authentication token value.\n+     */\n+    public void setToken(String value) {\n+        super.setValue(value, 0);\n+    }\n+\n+    /**\n+     * Set the Token Type (access_token, id_token, authorization_code)\n+     *\n+     * @param value The Token Type\n+     */\n+    public void setTokenType(String value) {\n+        super.setValue(value, 1);\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return \"IdPCallback\";\n+    }\n+\n+    /**\n+     * Perform the Identity Provider sign in with the current active Fragment\n+     *\n+     * @param fragment The Active Fragment\n+     * @param listener Listener to listen for the result.\n+     */\n+    public void signIn(Fragment fragment, FRListener<Void> listener) {\n+        IdPHandler idPHandler = getIdPHandler();\n+        if (idPHandler == null) {\n+            Listener.onException(listener, new UnsupportedOperationException(\"Unsupported provider: \" + provider));\n+            return;\n+        }\n+        idPHandler.signIn(fragment, this, getResultListener(idPHandler, listener));\n+    }\n+\n+    /**\n+     * Perform the Identity Provider sign in with the current active\n+     * {@link androidx.fragment.app.FragmentActivity}\n+     *\n+     * @param listener Listener to listen for the result.\n+     */\n+    public void signIn(FRListener<Void> listener) {\n+        IdPHandler idPHandler = getIdPHandler();\n+        if (idPHandler == null) {\n+            Listener.onException(listener, new UnsupportedOperationException(\"Unsupported provider: \" + provider));\n+            return;\n+        }\n+        idPHandler.signIn(this, getResultListener(idPHandler, listener));\n+    }\n+\n+\n+    private FRListener<String> getResultListener(IdPHandler idPHandler, FRListener<Void> listener) {\n+        return new FRListener<String>() {\n+            @Override\n+            public void onSuccess(String result) {\n+                setToken(result);\n+                setTokenType(idPHandler.getTokenType());\n+                Listener.onSuccess(listener, null);\n+            }\n+\n+            @Override\n+            public void onException(Exception e) {\n+                Listener.onException(listener, e);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Get the {@link IdPHandler} that handle the Identity Provider SignIn\n+     *\n+     * @return The handler to handle the sign-in.\n+     */\n+    protected IdPHandler getIdPHandler() {\n+        IdPHandler idPHandler = null;\n+        if (provider.toLowerCase().contains(\"google\")) {\n+            idPHandler = new GoogleSignInHandler();\n+        } else if (provider.toLowerCase().contains(\"facebook\")) {\n+            idPHandler = new FacebookSignInHandler();\n+        }\n+        return idPHandler;\n+    }\n+\n+\n+}\n+"
  },
  {
    "sha": "d5c75e6f49819af5ea4a94d8fef14a45d4dad941",
    "filename": "forgerock-auth/src/main/java/org/forgerock/android/auth/callback/SelectIdPCallback.java",
    "status": "added",
    "additions": 86,
    "deletions": 0,
    "changes": 86,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/callback/SelectIdPCallback.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/callback/SelectIdPCallback.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/main/java/org/forgerock/android/auth/callback/SelectIdPCallback.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.callback;\n+\n+import androidx.annotation.Keep;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * Callback to collect an Identity Provider\n+ */\n+@NoArgsConstructor\n+public class SelectIdPCallback extends AbstractCallback {\n+\n+    @Getter\n+    private List<IdPValue> providers;\n+\n+    @Keep\n+    public SelectIdPCallback(JSONObject jsonObject, int index) {\n+        super(jsonObject, index);\n+    }\n+\n+    @Override\n+    protected void setAttribute(String name, Object value) {\n+        switch (name) {\n+            case \"providers\":\n+                JSONArray array = (JSONArray) value;\n+                providers = new ArrayList<>();\n+                for (int i = 0; i < array.length(); i++) {\n+                    try {\n+                        providers.add(new IdPValue(array.getJSONObject(i)));\n+                    } catch (Exception e) {\n+                        //ignore\n+                    }\n+                }\n+                break;\n+            default:\n+                //ignore\n+        }\n+    }\n+\n+    @Override\n+    public String getType() {\n+        return \"SelectIdPCallback\";\n+    }\n+\n+    public void setValue(String value) {\n+        super.setValue(value);\n+    }\n+\n+    @Getter\n+    public static class IdPValue implements Serializable {\n+\n+        //Keep it String for serializable\n+        private final String provider;\n+        private String uiConfig;\n+\n+        public IdPValue(JSONObject jsonObject) {\n+            try {\n+                this.provider = jsonObject.getString(\"provider\");\n+                JSONObject config = jsonObject.optJSONObject(\"uiConfig\");\n+                if (config != null) {\n+                    this.uiConfig = config.toString();\n+                }\n+            } catch (JSONException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+\n+}"
  },
  {
    "sha": "0a40b15d5281cbcb2013453eedb953f927935c34",
    "filename": "forgerock-auth/src/main/java/org/forgerock/android/auth/idp/FacebookSignInHandler.java",
    "status": "added",
    "additions": 114,
    "deletions": 0,
    "changes": 114,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/FacebookSignInHandler.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/FacebookSignInHandler.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/FacebookSignInHandler.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.idp;\n+\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.os.OperationCanceledException;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+\n+import com.facebook.CallbackManager;\n+import com.facebook.FacebookCallback;\n+import com.facebook.FacebookException;\n+import com.facebook.login.LoginManager;\n+import com.facebook.login.LoginResult;\n+\n+import org.forgerock.android.auth.FRListener;\n+import org.forgerock.android.auth.InitProvider;\n+import org.forgerock.android.auth.Listener;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * {@link IdPHandler} to handle Facebook login\n+ */\n+public class FacebookSignInHandler extends Fragment implements IdPHandler {\n+\n+    public static final String TAG = FacebookSignInHandler.class.getName();\n+    public FRListener<String> listener;\n+    private CallbackManager callbackManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        LoginManager.getInstance().logOut();\n+\n+        callbackManager = CallbackManager.Factory.create();\n+\n+        // Callback registration\n+        LoginManager.getInstance().registerCallback(callbackManager, new FacebookCallback<LoginResult>() {\n+            @Override\n+            public void onSuccess(LoginResult loginResult) {\n+                Listener.onSuccess(listener, loginResult.getAccessToken().getToken());\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                Listener.onException(listener, new OperationCanceledException());\n+            }\n+\n+            @Override\n+            public void onError(FacebookException exception) {\n+                Listener.onException(listener, exception);\n+            }\n+        });\n+        LoginManager.getInstance().logInWithReadPermissions(this, getPermissions());\n+    }\n+\n+    @Override\n+    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n+        super.onActivityResult(requestCode, resultCode, data);\n+        callbackManager.onActivityResult(requestCode, resultCode, data);\n+    }\n+\n+    @Override\n+    public String getTokenType() {\n+        return \"access_token\";\n+    }\n+\n+\n+    @Override\n+    public void signIn(IdPClient idPClient, FRListener<String> listener) {\n+        FragmentManager fragmentManager = InitProvider.getCurrentActivityAsFragmentActivity().getSupportFragmentManager();\n+        signIn(fragmentManager, idPClient, listener);\n+    }\n+\n+    @Override\n+    public void signIn(Fragment fragment, IdPClient idPClient, FRListener<String> listener) {\n+        signIn(fragment.getFragmentManager(), idPClient, listener);\n+    }\n+\n+    private void signIn(FragmentManager fragmentManager, IdPClient idPClient, FRListener<String> listener) {\n+        FacebookSignInHandler existing = (FacebookSignInHandler) fragmentManager.findFragmentByTag(TAG);\n+        if (existing != null) {\n+            existing.listener = null;\n+            fragmentManager.beginTransaction().remove(existing).commitNow();\n+        }\n+\n+        Bundle args = new Bundle();\n+        setArguments(args);\n+        this.listener = listener;\n+        fragmentManager.beginTransaction().add(this, TAG)\n+                .commit();\n+    }\n+\n+    /**\n+     * The request permissions\n+     *\n+     * @return The Request permissions\n+     */\n+    protected List<String> getPermissions() {\n+        return Arrays.asList(\"email\", \"public_profile\");\n+    }\n+\n+\n+}"
  },
  {
    "sha": "1d58d4383ad1dd8a9b41571b490164873dcfe32a",
    "filename": "forgerock-auth/src/main/java/org/forgerock/android/auth/idp/GoogleSignInHandler.java",
    "status": "added",
    "additions": 113,
    "deletions": 0,
    "changes": 113,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/GoogleSignInHandler.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/GoogleSignInHandler.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/GoogleSignInHandler.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.idp;\n+\n+import android.content.Intent;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+\n+import com.google.android.gms.auth.api.signin.GoogleSignIn;\n+import com.google.android.gms.auth.api.signin.GoogleSignInAccount;\n+import com.google.android.gms.auth.api.signin.GoogleSignInClient;\n+import com.google.android.gms.auth.api.signin.GoogleSignInOptions;\n+import com.google.android.gms.common.api.ApiException;\n+import com.google.android.gms.tasks.Task;\n+\n+import org.forgerock.android.auth.FRListener;\n+import org.forgerock.android.auth.InitProvider;\n+import org.forgerock.android.auth.Listener;\n+\n+/**\n+ * {@link IdPHandler} to handle Google login\n+ */\n+public class GoogleSignInHandler extends Fragment implements IdPHandler {\n+\n+    public static final int RC_SIGN_IN = 1000;\n+    public static final String CLIENT_ID = \"CLIENT_ID\";\n+    public static final String ENABLE_SERVER_SIDE_ACCESS = \"ENABLE_SERVER_SIDE_ACCESS\";\n+    public static final String TAG = GoogleSignInHandler.class.getName();\n+    private String clientId;\n+    private FRListener<String> listener;\n+    private boolean enableServerSideAccess;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        if (getArguments() != null) {\n+            clientId = getArguments().getString(CLIENT_ID);\n+            enableServerSideAccess = getArguments().getBoolean(ENABLE_SERVER_SIDE_ACCESS);\n+        }\n+        GoogleSignInOptions.Builder builder = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\n+                .requestEmail();\n+\n+        if (enableServerSideAccess) {\n+            builder.requestServerAuthCode(clientId);\n+        } else {\n+            builder.requestIdToken(clientId);\n+        }\n+\n+        GoogleSignInOptions gso = builder.build();\n+        GoogleSignInClient mGoogleSignInClient = GoogleSignIn.getClient(getContext(), gso);\n+        mGoogleSignInClient.signOut().addOnCompleteListener(task -> {\n+            Intent signInIntent = mGoogleSignInClient.getSignInIntent();\n+            startActivityForResult(signInIntent, RC_SIGN_IN);\n+        });\n+    }\n+\n+    @Override\n+    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n+        if (requestCode == RC_SIGN_IN) {\n+            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);\n+            try {\n+                GoogleSignInAccount account = task.getResult(ApiException.class);\n+                Listener.onSuccess(listener, account.getIdToken());\n+            } catch (ApiException e) {\n+                Listener.onException(listener, e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String getTokenType() {\n+        if (enableServerSideAccess) {\n+            return \"authorization_code\";\n+        }\n+        return \"id_token\";\n+    }\n+\n+    @Override\n+    public void signIn(IdPClient idPClient, FRListener<String> listener) {\n+        FragmentManager fragmentManager = InitProvider.getCurrentActivityAsFragmentActivity().getSupportFragmentManager();\n+        signIn(fragmentManager, idPClient, listener);\n+    }\n+\n+    @Override\n+    public void signIn(Fragment fragment, IdPClient idPClient, FRListener<String> listener) {\n+        signIn(fragment.getFragmentManager(), idPClient, listener);\n+    }\n+\n+    private void signIn(FragmentManager fragmentManager, IdPClient idPClient, FRListener<String> listener) {\n+        GoogleSignInHandler existing = (GoogleSignInHandler) fragmentManager.findFragmentByTag(TAG);\n+        if (existing != null) {\n+            existing.listener = null;\n+            fragmentManager.beginTransaction().remove(existing).commitNow();\n+        }\n+\n+        Bundle args = new Bundle();\n+        args.putString(CLIENT_ID, idPClient.getClientId());\n+        args.putBoolean(ENABLE_SERVER_SIDE_ACCESS, false);\n+        setArguments(args);\n+        this.listener = listener;\n+        fragmentManager.beginTransaction().add(this, TAG)\n+                .commit();\n+    }\n+\n+}"
  },
  {
    "sha": "e42b25d1f250d72c92692cefc2b31d3305144df4",
    "filename": "forgerock-auth/src/main/java/org/forgerock/android/auth/idp/IdPClient.java",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/IdPClient.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/IdPClient.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/IdPClient.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.idp;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface for Identity Provider Configuration\n+ */\n+public interface IdPClient {\n+\n+    String getProvider();\n+\n+    String getClientId();\n+\n+    String getRedirectUri();\n+\n+    List<String> getScopes();\n+\n+    String getNonce();\n+\n+    List<String> getAcrValues();\n+\n+    String getRequest();\n+\n+    String getRequestUri();\n+}"
  },
  {
    "sha": "732a70c587e200b087cb5bb2bc2e4287bdc7bc71",
    "filename": "forgerock-auth/src/main/java/org/forgerock/android/auth/idp/IdPHandler.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/IdPHandler.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/IdPHandler.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/main/java/org/forgerock/android/auth/idp/IdPHandler.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.idp;\n+\n+import androidx.fragment.app.Fragment;\n+\n+import org.forgerock.android.auth.FRListener;\n+\n+/**\n+ * Identity Provider Handler to handle sign in with provided {@link IdPClient}\n+ */\n+public interface IdPHandler {\n+\n+    /**\n+     * Retrieve the result token type (access_token, id_token, authorization_code)\n+     *\n+     * @return The Token Type\n+     */\n+    String getTokenType();\n+\n+    /**\n+     * Perform the Identity Provider sign in with the current active\n+     * {@link androidx.fragment.app.FragmentActivity}\n+     *\n+     * @param idPClient The Idp configuration.\n+     * @param listener  Listener to listen for the result.\n+     */\n+    void signIn(IdPClient idPClient, FRListener<String> listener);\n+\n+    /**\n+     * Perform the Identity Provider sign in with the current active Fragment\n+     *\n+     * @param fragment  The Active Fragment\n+     * @param idPClient The Idp configuration.\n+     * @param listener  Listener to listen for the result.\n+     */\n+    void signIn(Fragment fragment, IdPClient idPClient, FRListener<String> listener);\n+}"
  },
  {
    "sha": "1eb4fe688d30395b4f021b4d497b26ea308512ad",
    "filename": "forgerock-auth/src/test/java/org/forgerock/android/auth/AuthTestSuite.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/AuthTestSuite.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/AuthTestSuite.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/test/java/org/forgerock/android/auth/AuthTestSuite.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -32,6 +32,9 @@\n         StringAttributeInputCallbackTest.class,\n         BooleanAttributeInputCallbackTest.class,\n         NumberAttributeInputCallbackTest.class,\n+        SelectIdPCallbackTest.class,\n+        IdPCallbackTest.class,\n+\n \n         AuthServiceMockTest.class,\n         AuthServiceTest.class,\n@@ -60,7 +63,10 @@\n         WebAuthnAuthenticationTest.class,\n         AccountDataRepositoryTest.class,\n         SharedPreferencesDataRepositoryTest.class,\n-        WebAuthnDataRepositoryTest.class\n+        WebAuthnDataRepositoryTest.class,\n+\n+        //SocialLogin\n+        SocialLoginTest.class,\n \n })\n public class AuthTestSuite {"
  },
  {
    "sha": "465504278a9d7bb66c4b24798145b0e83ef97fa0",
    "filename": "forgerock-auth/src/test/java/org/forgerock/android/auth/SocialLoginTest.java",
    "status": "added",
    "additions": 310,
    "deletions": 0,
    "changes": 310,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/SocialLoginTest.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/SocialLoginTest.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/test/java/org/forgerock/android/auth/SocialLoginTest.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth;\n+\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentActivity;\n+\n+import com.google.android.gms.auth.api.signin.GoogleSignInAccount;\n+import com.google.android.gms.common.api.ApiException;\n+import com.squareup.okhttp.mockwebserver.RecordedRequest;\n+\n+import org.forgerock.android.auth.callback.IdPCallback;\n+import org.forgerock.android.auth.callback.SelectIdPCallback;\n+import org.forgerock.android.auth.idp.GoogleSignInHandler;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.net.HttpURLConnection;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class SocialLoginTest extends BaseTest {\n+\n+    private static final String DEFAULT_TOKEN_MANAGER_TEST = \"DefaultTokenManagerTest\";\n+    private static final String DEFAULT_SSO_TOKEN_MANAGER_TEST = \"DefaultSSOManagerTest\";\n+\n+    private GoogleSignInHandler getGoogleSignInHandler(FragmentActivity activity) {\n+        Fragment fragment = activity.getSupportFragmentManager()\n+                .findFragmentByTag(GoogleSignInHandler.TAG);\n+        if (fragment == null) {\n+            return null;\n+        }\n+        return (GoogleSignInHandler) fragment;\n+    }\n+\n+    @Test\n+    public void testSelectIdPLocalAuthentication() throws ExecutionException, InterruptedException, JSONException {\n+        enqueue(\"/authTreeMockTest_Authenticate_SelectIdPCallback.json\", HttpURLConnection.HTTP_OK);\n+        enqueue(\"/authTreeMockTest_Authenticate_success.json\", HttpURLConnection.HTTP_OK);\n+\n+        Config.getInstance().setSharedPreferences(context.getSharedPreferences(DEFAULT_TOKEN_MANAGER_TEST, Context.MODE_PRIVATE));\n+        Config.getInstance().setSsoSharedPreferences(context.getSharedPreferences(DEFAULT_SSO_TOKEN_MANAGER_TEST, Context.MODE_PRIVATE));\n+        Config.getInstance().setUrl(getUrl());\n+        Config.getInstance().setEncryptor(new MockEncryptor());\n+\n+        NodeListenerFuture<FRSession> nodeListenerFuture = new NodeListenerFuture<FRSession>() {\n+\n+            @Override\n+            public void onCallbackReceived(Node state) {\n+                if (state.getCallback(SelectIdPCallback.class) != null) {\n+                    state.getCallback(SelectIdPCallback.class).setValue(\"localAuthentication\");\n+                    state.next(context, this);\n+                }\n+            }\n+        };\n+\n+        FRSession.authenticate(context, \"\", nodeListenerFuture);\n+\n+        assertNotNull(nodeListenerFuture.get());\n+        assertNotNull(FRUser.getCurrentUser());\n+\n+        RecordedRequest recordedRequest = server.takeRequest(); //First request\n+        //SelectIdPCallback\n+        recordedRequest = server.takeRequest();\n+        String body = recordedRequest.getBody().readUtf8();\n+        JSONObject result = new JSONObject(body);\n+        assertThat(result.getJSONArray(\"callbacks\").length()).isEqualTo(1);\n+        JSONObject selectIdPCallback = result.getJSONArray(\"callbacks\").getJSONObject(0);\n+        assertThat(selectIdPCallback.getString(\"type\")).isEqualTo(\"SelectIdPCallback\");\n+        assertThat(selectIdPCallback.getJSONArray(\"input\").length()).isEqualTo(1);\n+        String value = selectIdPCallback.getJSONArray(\"input\").getJSONObject(0).getString(\"value\");\n+        assertThat(value).isEqualTo(\"localAuthentication\");\n+\n+    }\n+\n+    @Test\n+    public void testHappyPathWithGoogle() throws InterruptedException, ExecutionException, JSONException {\n+\n+        enqueue(\"/authTreeMockTest_Authenticate_SelectIdPCallback.json\", HttpURLConnection.HTTP_OK);\n+        enqueue(\"/authTreeMockTest_Authenticate_IdPCallback.json\", HttpURLConnection.HTTP_OK);\n+        enqueue(\"/authTreeMockTest_Authenticate_success.json\", HttpURLConnection.HTTP_OK);\n+\n+        Config.getInstance().setSharedPreferences(context.getSharedPreferences(DEFAULT_TOKEN_MANAGER_TEST, Context.MODE_PRIVATE));\n+        Config.getInstance().setSsoSharedPreferences(context.getSharedPreferences(DEFAULT_SSO_TOKEN_MANAGER_TEST, Context.MODE_PRIVATE));\n+        Config.getInstance().setUrl(getUrl());\n+        Config.getInstance().setEncryptor(new MockEncryptor());\n+\n+        //Create a dummy Fragment\n+        FragmentActivity fragmentActivity = Robolectric.buildActivity(FragmentActivity.class).setup().get();\n+        InitProvider.setCurrentActivity(fragmentActivity);\n+\n+        CountDownLatch executeTree = new CountDownLatch(2);\n+\n+        final IdPCallback[] idPCallback = {null};\n+        final Node[] finalState = {null};\n+        NodeListenerFuture<FRSession> nodeListenerFuture = new NodeListenerFuture<FRSession>() {\n+\n+            @Override\n+            public void onCallbackReceived(Node state) {\n+                if (state.getCallback(SelectIdPCallback.class) != null) {\n+                    state.getCallback(SelectIdPCallback.class).setValue(\"google\");\n+                    state.next(context, this);\n+                    executeTree.countDown();\n+                    return;\n+                }\n+\n+                if (state.getCallback(IdPCallback.class) != null) {\n+                    //idPCallback.signIn needs to be run in Main thread in order to\n+                    //launch the Fragment\n+                    executeTree.countDown();\n+                    idPCallback[0] = state.getCallback(IdPCallback.class);\n+                    finalState[0] = state;\n+                }\n+            }\n+        };\n+\n+        FRSession.authenticate(context, \"\", nodeListenerFuture);\n+\n+        //Wait for the idPCallback to finish\n+        executeTree.await();\n+\n+        idPCallback[0].signIn(new FRListener<Void>() {\n+            @Override\n+            public void onSuccess(Void result) {\n+                finalState[0].next(context, nodeListenerFuture);\n+            }\n+\n+            @Override\n+            public void onException(Exception e) {\n+                fail(e.getMessage());\n+            }\n+        });\n+\n+        GoogleSignInAccount googleSignInAccount = null;\n+        try {\n+            googleSignInAccount = GoogleSignInAccount.zaa(\"{\\n\" +\n+                    \"  \\\"tokenId\\\" : \\\"dummy_id_token\\\",\\n\" +\n+                    \"  \\\"expirationTime\\\" : 1615838032659,\\n\" +\n+                    \"  \\\"grantedScopes\\\" : [\\\"email\\\"],\\n\" +\n+                    \"  \\\"obfuscatedIdentifier\\\": \\\"1234567\\\"\\n\" +\n+                    \"}\");\n+        } catch (JSONException e) {\n+            fail(e.getMessage());\n+        }\n+\n+        Intent intent = new Intent();\n+        intent.putExtra(\"googleSignInAccount\", googleSignInAccount);\n+        getGoogleSignInHandler(fragmentActivity).onActivityResult(GoogleSignInHandler.RC_SIGN_IN, Activity.RESULT_OK, intent);\n+\n+        assertNotNull(nodeListenerFuture.get());\n+        assertNotNull(FRUser.getCurrentUser());\n+\n+        RecordedRequest recordedRequest = server.takeRequest(); //First request\n+        //SelectIdPCallback\n+        recordedRequest = server.takeRequest();\n+        String body = recordedRequest.getBody().readUtf8();\n+        JSONObject result = new JSONObject(body);\n+        assertThat(result.getJSONArray(\"callbacks\").length()).isEqualTo(1);\n+        JSONObject selectIdPCallback = result.getJSONArray(\"callbacks\").getJSONObject(0);\n+        assertThat(selectIdPCallback.getString(\"type\")).isEqualTo(\"SelectIdPCallback\");\n+        assertThat(selectIdPCallback.getJSONArray(\"input\").length()).isEqualTo(1);\n+        String value = selectIdPCallback.getJSONArray(\"input\").getJSONObject(0).getString(\"value\");\n+        assertThat(value).isEqualTo(\"google\");\n+\n+        //IdPCallback\n+        recordedRequest = server.takeRequest(); //Select IdPCallback\n+        body = recordedRequest.getBody().readUtf8();\n+        result = new JSONObject(body);\n+        assertThat(result.getJSONArray(\"callbacks\").length()).isEqualTo(1);\n+        JSONObject idPCallbackReq = result.getJSONArray(\"callbacks\").getJSONObject(0);\n+        assertThat(idPCallbackReq.getString(\"type\")).isEqualTo(\"IdPCallback\");\n+        assertThat(idPCallbackReq.getJSONArray(\"input\").length()).isEqualTo(2);\n+        String token = idPCallbackReq.getJSONArray(\"input\").getJSONObject(0).getString(\"value\");\n+        assertThat(token).isEqualTo(\"dummy_id_token\");\n+        String tokenType = idPCallbackReq.getJSONArray(\"input\").getJSONObject(1).getString(\"value\");\n+        assertThat(tokenType).isEqualTo(\"id_token\");\n+\n+    }\n+\n+    @Test\n+    public void testErrorWithGoogle() throws InterruptedException, ExecutionException, JSONException {\n+\n+        enqueue(\"/authTreeMockTest_Authenticate_SelectIdPCallback.json\", HttpURLConnection.HTTP_OK);\n+        enqueue(\"/authTreeMockTest_Authenticate_IdPCallback.json\", HttpURLConnection.HTTP_OK);\n+\n+        Config.getInstance().setSharedPreferences(context.getSharedPreferences(DEFAULT_TOKEN_MANAGER_TEST, Context.MODE_PRIVATE));\n+        Config.getInstance().setSsoSharedPreferences(context.getSharedPreferences(DEFAULT_SSO_TOKEN_MANAGER_TEST, Context.MODE_PRIVATE));\n+        Config.getInstance().setUrl(getUrl());\n+        Config.getInstance().setEncryptor(new MockEncryptor());\n+\n+        //Create a dummy Fragment\n+        FragmentActivity fragmentActivity = Robolectric.buildActivity(FragmentActivity.class).setup().get();\n+        InitProvider.setCurrentActivity(fragmentActivity);\n+\n+        CountDownLatch executeTree = new CountDownLatch(2);\n+\n+        final IdPCallback[] idPCallback = {null};\n+        NodeListenerFuture<FRSession> nodeListenerFuture = new NodeListenerFuture<FRSession>() {\n+\n+            @Override\n+            public void onCallbackReceived(Node state) {\n+                if (state.getCallback(SelectIdPCallback.class) != null) {\n+                    state.getCallback(SelectIdPCallback.class).setValue(\"google\");\n+                    state.next(context, this);\n+                    executeTree.countDown();\n+                    return;\n+                }\n+\n+                if (state.getCallback(IdPCallback.class) != null) {\n+                    //idPCallback.signIn needs to be run in Main thread in order to\n+                    //launch the Fragment\n+                    executeTree.countDown();\n+                    idPCallback[0] = state.getCallback(IdPCallback.class);\n+                }\n+            }\n+        };\n+\n+        FRSession.authenticate(context, \"\", nodeListenerFuture);\n+\n+        //Wait for the idPCallback to finish\n+        executeTree.await();\n+\n+        CountDownLatch countDownLatch = new CountDownLatch(1);\n+        idPCallback[0].signIn(new FRListener<Void>() {\n+            @Override\n+            public void onSuccess(Void result) {\n+                countDownLatch.countDown();\n+                fail();\n+            }\n+\n+            @Override\n+            public void onException(Exception e) {\n+                assertThat(e).isInstanceOf(ApiException.class);\n+                countDownLatch.countDown();\n+            }\n+        });\n+\n+        getGoogleSignInHandler(fragmentActivity).onActivityResult(GoogleSignInHandler.RC_SIGN_IN, Activity.RESULT_OK, null);\n+        countDownLatch.await();\n+    }\n+\n+    @Test\n+    public void testUnsupportedHandler() throws InterruptedException {\n+        enqueue(\"/authTreeMockTest_Authenticate_SelectIdPCallback.json\", HttpURLConnection.HTTP_OK);\n+        enqueue(\"/authTreeMockTest_Authenticate_IdPCallback_unsupport_provider.json\", HttpURLConnection.HTTP_OK);\n+\n+        Config.getInstance().setUrl(getUrl());\n+\n+        //Create a dummy Fragment\n+        FragmentActivity fragmentActivity = Robolectric.buildActivity(FragmentActivity.class).setup().get();\n+        InitProvider.setCurrentActivity(fragmentActivity);\n+\n+        NodeListenerFuture<FRSession> nodeListenerFuture = new NodeListenerFuture<FRSession>() {\n+\n+            @Override\n+            public void onCallbackReceived(Node state) {\n+                if (state.getCallback(SelectIdPCallback.class) != null) {\n+                    state.getCallback(SelectIdPCallback.class).setValue(\"dummy\");\n+                    state.next(context, this);\n+                    return;\n+                }\n+\n+                if (state.getCallback(IdPCallback.class) != null) {\n+\n+                    NodeListenerFuture<FRSession> nodeListener = this;\n+                    IdPCallback idPCallback = state.getCallback(IdPCallback.class);\n+                    idPCallback.signIn(new FRListener<Void>() {\n+                        @Override\n+                        public void onSuccess(Void result) {\n+                            fail();\n+                        }\n+\n+                        @Override\n+                        public void onException(Exception e) {\n+                            nodeListener.onException(e);\n+                        }\n+                    });\n+                }\n+            }\n+        };\n+\n+        FRSession.authenticate(context, \"\", nodeListenerFuture);\n+\n+        try {\n+            nodeListenerFuture.get();\n+            fail();\n+        } catch (ExecutionException e) {\n+            assertThat(e.getCause()).isInstanceOf(UnsupportedOperationException.class);\n+        }\n+    }\n+}"
  },
  {
    "sha": "d7e734a94733632b652ffd09265f2cb4777b97cb",
    "filename": "forgerock-auth/src/test/java/org/forgerock/android/auth/WebAuthnFlowTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/WebAuthnFlowTest.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/WebAuthnFlowTest.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/test/java/org/forgerock/android/auth/WebAuthnFlowTest.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -7,9 +7,7 @@\n \n package org.forgerock.android.auth;\n \n-import androidx.fragment.app.Fragment;\n import androidx.fragment.app.FragmentActivity;\n-import androidx.fragment.app.testing.FragmentScenario;\n \n import com.squareup.okhttp.mockwebserver.RecordedRequest;\n \n@@ -27,7 +25,6 @@\n import java.util.concurrent.ExecutionException;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.fail;\n import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;\n \n @RunWith(RobolectricTestRunner.class)"
  },
  {
    "sha": "f73456a1f0b20d2f3a6fec31421b80c3e9ac68b4",
    "filename": "forgerock-auth/src/test/java/org/forgerock/android/auth/callback/IdPCallbackTest.java",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/callback/IdPCallbackTest.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/callback/IdPCallbackTest.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/test/java/org/forgerock/android/auth/callback/IdPCallbackTest.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.callback;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class IdPCallbackTest {\n+\n+    @Test\n+    public void basicTest() throws JSONException {\n+        JSONObject raw = new JSONObject(\"{\\n\" +\n+                \"            \\\"type\\\": \\\"IdPCallback\\\",\\n\" +\n+                \"            \\\"output\\\": [\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"provider\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"google\\\"\\n\" +\n+                \"                },\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"clientId\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"1234567.apps.googleusercontent.com\\\"\\n\" +\n+                \"                },\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"redirectUri\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"https://forgerock.org/oauth2redirect\\\"\\n\" +\n+                \"                },\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"scopes\\\",\\n\" +\n+                \"                    \\\"value\\\": [\\n\" +\n+                \"                        \\\"openid\\\",\\n\" +\n+                \"                        \\\"profile\\\",\\n\" +\n+                \"                        \\\"email\\\"\\n\" +\n+                \"                    ]\\n\" +\n+                \"                },\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"nonce\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"\\\"\\n\" +\n+                \"                },\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"acrValues\\\",\\n\" +\n+                \"                    \\\"value\\\": [\\n\" +\n+                \"                        \\\"test\\\",\\n\" +\n+                \"                        \\\"test2\\\"\\n\" +\n+                \"                    ]\\n\" +\n+                \"                },\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"request\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"eyJ0eXAiOiJKV1QiLCJraWQiOiJ3VTNpZklJYUxPVUFSZVJCL0ZHNmVNMVAxUU09IiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdjIvYXV0aD9wcm9tcHQ9bG9naW4iLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYWNyX3ZhbHVlcyI6InRlc3QgdGVzdDIiLCJpc3MiOiI0MjIzODY0Mzg2MzItOWRpcjRtcDM5MWdmc2F0OG00Z2lxMGFrcGVpOTB0N2IuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJyZXNwb25zZV90eXBlIjoiY29kZSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vZm9yZ2Vyb2NrLm9yZy9vYXV0aDJyZWRpcmVjdCIsInN0YXRlIjoiNTg2M2hvbmk2eDVqaDllZnc1cmdjMmZicG1iYWo1cCIsIm5vbmNlIjoiZndyb2twZmFxcmo1Ym84eHA5M3lqOGlsOHBmeGxneSIsImNsaWVudF9pZCI6IjQyMjM4NjQzODYzMi05ZGlyNG1wMzkxZ2ZzYXQ4bTRnaXEwYWtwZWk5MHQ3Yi5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSJ9.nmyVU7dPnXOo01f_u7k0lorKCD8dKiAGiTORpY-pbNsIA55PEHk4_d1jgI_6pdYsejQtiiIiUCAh4xiSPAVj9-bhGU2Tu1gi_xxmZFylLUtLIVQHMd6dPlqSz1-ujj3bd84O5_iv7VWX_lzooyYznr7FAi9Z5PwTkhGhklwxSgAT8Gj3AAjmOp8E1UUx1CveDYyHbTKqtg11p2Eh5_m2zx3q5B7Jfvt9tVAU9JLefF7N-zmMoSr6wdNZnitEUyNiDGedve1iViVeURLTHjKa_T0fM2d_A85vAHCeiJfx3RjcOWa9OGk5dEAucypix6wkNEl2wt-F-2sQ1C-kN4sntA\\\"\\n\" +\n+                \"                },\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"requestUri\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"\\\"\\n\" +\n+                \"                }\\n\" +\n+                \"            ],\\n\" +\n+                \"            \\\"input\\\": [\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"IDToken1token\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"\\\"\\n\" +\n+                \"                },\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"IDToken1token_type\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"\\\"\\n\" +\n+                \"                }\\n\" +\n+                \"            ]\\n\" +\n+                \"        }\");\n+        IdPCallback callback = new IdPCallback(raw, 0);\n+        assertThat(callback.getClientId()).isEqualTo(\"1234567.apps.googleusercontent.com\");\n+        assertThat(callback.getProvider()).isEqualTo(\"google\");\n+        assertThat(callback.getRedirectUri()).isEqualTo(\"https://forgerock.org/oauth2redirect\");\n+        assertThat(callback.getScopes()).contains(\"openid\",\"profile\", \"email\");\n+        assertThat(callback.getNonce()).isEqualTo(\"\");\n+        assertThat(callback.getAcrValues()).contains(\"test\", \"test2\");\n+        assertThat(callback.getRequest()).isEqualTo(\"eyJ0eXAiOiJKV1QiLCJraWQiOiJ3VTNpZklJYUxPVUFSZVJCL0ZHNmVNMVAxUU09IiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdjIvYXV0aD9wcm9tcHQ9bG9naW4iLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYWNyX3ZhbHVlcyI6InRlc3QgdGVzdDIiLCJpc3MiOiI0MjIzODY0Mzg2MzItOWRpcjRtcDM5MWdmc2F0OG00Z2lxMGFrcGVpOTB0N2IuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJyZXNwb25zZV90eXBlIjoiY29kZSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vZm9yZ2Vyb2NrLm9yZy9vYXV0aDJyZWRpcmVjdCIsInN0YXRlIjoiNTg2M2hvbmk2eDVqaDllZnc1cmdjMmZicG1iYWo1cCIsIm5vbmNlIjoiZndyb2twZmFxcmo1Ym84eHA5M3lqOGlsOHBmeGxneSIsImNsaWVudF9pZCI6IjQyMjM4NjQzODYzMi05ZGlyNG1wMzkxZ2ZzYXQ4bTRnaXEwYWtwZWk5MHQ3Yi5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSJ9.nmyVU7dPnXOo01f_u7k0lorKCD8dKiAGiTORpY-pbNsIA55PEHk4_d1jgI_6pdYsejQtiiIiUCAh4xiSPAVj9-bhGU2Tu1gi_xxmZFylLUtLIVQHMd6dPlqSz1-ujj3bd84O5_iv7VWX_lzooyYznr7FAi9Z5PwTkhGhklwxSgAT8Gj3AAjmOp8E1UUx1CveDYyHbTKqtg11p2Eh5_m2zx3q5B7Jfvt9tVAU9JLefF7N-zmMoSr6wdNZnitEUyNiDGedve1iViVeURLTHjKa_T0fM2d_A85vAHCeiJfx3RjcOWa9OGk5dEAucypix6wkNEl2wt-F-2sQ1C-kN4sntA\");\n+        assertThat(callback.getRequestUri()).isEqualTo(\"\");\n+\n+        callback.setTokenType(\"id_token\");\n+        callback.setToken(\"1234567\");\n+        assertEquals(((JSONObject)callback.getContentAsJson().getJSONArray(\"input\").get(0)).getString(\"value\"),\n+                \"1234567\");\n+        assertEquals(((JSONObject)callback.getContentAsJson().getJSONArray(\"input\").get(1)).getString(\"value\"),\n+                \"id_token\");\n+\n+\n+        assertEquals(0, callback.get_id());\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "01eb8c051a1b3dfdc2821fe230f39a62cdd9a756",
    "filename": "forgerock-auth/src/test/java/org/forgerock/android/auth/callback/SelectIdPCallbackTest.java",
    "status": "added",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/callback/SelectIdPCallbackTest.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/java/org/forgerock/android/auth/callback/SelectIdPCallbackTest.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/test/java/org/forgerock/android/auth/callback/SelectIdPCallbackTest.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2021 ForgeRock. All rights reserved.\n+ *\n+ * This software may be modified and distributed under the terms\n+ * of the MIT license. See the LICENSE file for details.\n+ */\n+\n+package org.forgerock.android.auth.callback;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class SelectIdPCallbackTest {\n+\n+    @Test\n+    public void basicTest() throws JSONException {\n+        JSONObject raw = new JSONObject(\"{\\n\" +\n+                \"            \\\"type\\\": \\\"SelectIdPCallback\\\",\\n\" +\n+                \"            \\\"output\\\": [\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"providers\\\",\\n\" +\n+                \"                    \\\"value\\\": [\\n\" +\n+                \"                        {\\n\" +\n+                \"                            \\\"provider\\\": \\\"google\\\",\\n\" +\n+                \"                            \\\"uiConfig\\\": {\\n\" +\n+                \"                                \\\"buttonImage\\\": \\\"images/g-logo.png\\\",\\n\" +\n+                \"                                \\\"buttonCustomStyle\\\": \\\"background-color: #fff; color: #757575; border-color: #ddd;\\\",\\n\" +\n+                \"                                \\\"abc\\\": \\\"test\\\",\\n\" +\n+                \"                                \\\"buttonClass\\\": \\\"\\\",\\n\" +\n+                \"                                \\\"buttonDisplayName\\\": \\\"Google\\\",\\n\" +\n+                \"                                \\\"buttonCustomStyleHover\\\": \\\"color: #6d6d6d; background-color: #eee; border-color: #ccc;\\\",\\n\" +\n+                \"                                \\\"iconClass\\\": \\\"fa-google\\\",\\n\" +\n+                \"                                \\\"userinfo\\\": \\\"https://www.googleapis.com/oauth2/v3/userinfo\\\",\\n\" +\n+                \"                                \\\"iconFontColor\\\": \\\"white\\\",\\n\" +\n+                \"                                \\\"iconBackground\\\": \\\"#4184f3\\\"\\n\" +\n+                \"                            }\\n\" +\n+                \"                        },\\n\" +\n+                \"                        {\\n\" +\n+                \"                            \\\"provider\\\": \\\"facebook\\\",\\n\" +\n+                \"                            \\\"uiConfig\\\": {\\n\" +\n+                \"                                \\\"buttonImage\\\": \\\"\\\",\\n\" +\n+                \"                                \\\"buttonCustomStyle\\\": \\\"background-color: #3b5998;border-color: #3b5998; color: white;\\\",\\n\" +\n+                \"                                \\\"buttonClass\\\": \\\"fa-facebook-official\\\",\\n\" +\n+                \"                                \\\"buttonDisplayName\\\": \\\"Facebook\\\",\\n\" +\n+                \"                                \\\"buttonCustomStyleHover\\\": \\\"background-color: #334b7d;border-color: #334b7d; color: white;\\\",\\n\" +\n+                \"                                \\\"iconFontColor\\\": \\\"white\\\",\\n\" +\n+                \"                                \\\"iconClass\\\": \\\"fa-facebook\\\",\\n\" +\n+                \"                                \\\"iconBackground\\\": \\\"#3b5998\\\"\\n\" +\n+                \"                            }\\n\" +\n+                \"                        },\\n\" +\n+                \"                        {\\n\" +\n+                \"                            \\\"provider\\\": \\\"localAuthentication\\\"\\n\" +\n+                \"                        }\\n\" +\n+                \"                    ]\\n\" +\n+                \"                },\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"value\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"\\\"\\n\" +\n+                \"                }\\n\" +\n+                \"            ],\\n\" +\n+                \"            \\\"input\\\": [\\n\" +\n+                \"                {\\n\" +\n+                \"                    \\\"name\\\": \\\"IDToken1\\\",\\n\" +\n+                \"                    \\\"value\\\": \\\"\\\"\\n\" +\n+                \"                }\\n\" +\n+                \"            ]\\n\" +\n+                \"        }\");\n+        SelectIdPCallback callback = new SelectIdPCallback(raw, 0);\n+        assertThat(callback.getProviders()).hasSize(3);\n+        assertThat(callback.getProviders().get(0).getProvider()).isEqualTo(\"google\");\n+        assertThat(new JSONObject(callback.getProviders().get(0).getUiConfig()).getString(\"buttonDisplayName\"))\n+                .isEqualTo(\"Google\");\n+        assertThat(callback.getProviders().get(1).getProvider()).isEqualTo(\"facebook\");\n+        assertThat(new JSONObject(callback.getProviders().get(1).getUiConfig()).getString(\"buttonDisplayName\"))\n+                .isEqualTo(\"Facebook\");\n+        assertThat(callback.getProviders().get(2).getProvider()).isEqualTo(\"localAuthentication\");\n+\n+        callback.setValue(\"google\");\n+        assertEquals(((JSONObject)callback.getContentAsJson().getJSONArray(\"input\").get(0)).getString(\"value\"),\n+                \"google\");\n+\n+        assertEquals(0, callback.get_id());\n+\n+    }\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "577a39089c09561fd4b15a219d14d07588901eb5",
    "filename": "forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_IdPCallback.json",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_IdPCallback.json",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_IdPCallback.json",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_IdPCallback.json?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"authId\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoSW5kZXhWYWx1ZSI6IlNvY2lhbExvZ2luIiwib3RrIjoiYXU0MjAycWlzamdoNzM5Mm10cjl2NWR2cXQiLCJhdXRoSW5kZXhUeXBlIjoic2VydmljZSIsInJlYWxtIjoiLyIsInNlc3Npb25JZCI6IipBQUpUU1FBQ01ERUFCSFI1Y0dVQUNFcFhWRjlCVlZSSUFBSlRNUUFBKmV5SjBlWEFpT2lKS1YxUWlMQ0pqZEhraU9pSktWMVFpTENKaGJHY2lPaUpJVXpJMU5pSjkuWlhsS01HVllRV2xQYVVwTFZqRlJhVXhEU214aWJVMXBUMmxLUWsxVVNUUlJNRXBFVEZWb1ZFMXFWVEpKYVhkcFdWZDRia2xxYjJsYVIyeDVTVzR3TGk1SVZtaFdkamg1WWtKblVYUTFObFl3Um5WWGREZDNMbmRGZWpKdU1rTnBVMlJOUms5MFRXdGpWak5VWm1WRlNEWnBjRXBVVERjMFFtcDBSalZWVjI1cGVEWlZhWFpYYWt0amNXVk9ObE15YTFaaVozcFpVMUpJU3pGek9FdHZURVJwUm5CdmVUZDJVbll6UmxaNE5tMVVkM0Y2Y1VWTVFrOUtOMVZ3UTFSTWRISlplWEpSWTNKeU9HVlJYMDl4ZDJsNmFIVklka1Z0UWtacFdXaDVURXB3VUhJMWRXUldjRGRwV2taM1NrWk1OVzlIU1U1SlZVRTFhRWxZWWxaYVozWnlkM1pJTVVWb2IxRm5VaTFRYkhGbFRFVTFhRVJXTUV0d1MwZFhkMUZPYjFSd1FtSjZhRGRRVFhoYVZXMU5kMll3ZEZGc1NESmFaMHN0YVZOMlIwWnVWbE5HYlhFNVJqTkRhR3hOY25aMU4ybzBUREJWUWxWelJuRnpYemMwYzI4NGFrWnJjVVZTTkZoc05FNXFhbWhGWm1NM1oxVmhkMGhSTFdGVFIxUXhSWEZpVUVObGFIRXhUMHBrVFRKNlNFWk5hM1ptYjFsRGIwdzBlRVYxT1UxYWJYbDJRelJKTkU1U1ZFTktPRjgyWmpGZlducG5ORUUzVlhkaFduWjZMV2xKU3pKdU9VOWZlbGhpYUhKdk9VaHJWbk5OVnpsNlJXWXhSR1l5UlVKS09WUmhNWE5hWW5kTmFGVnpVSG81YldGVVVGWTBkVUZyUW01Sk9YRmlZVGRJVEdsU2VrOXFZV1Z3VVZnek1UTmxiMnRIWVVsU1dUaEJSMGczUmtSWE5EWkhSMGRrZG5WMVZYQkhNa2RpYW01U2VXMDNSRFZ6WTA1V2VGOHlPRTFEWnpGSVYyVmpTMHhZVWtobFpuTlVZalJmU1ZOaVFYbFhXVEJGUWpsWFdsRnFla2RaZUV0cldVSmlWazB4YjJwSk5XeEplVU5oZVdwelVuUTRkREU1ZFRBeldUQjNXV0pRVkU1c2EyMWFWVmQyWVZGTlVIcDRTelF4TmpOVVVGcDRTVzFHUTNaVU9XUmhiRWhJZVRCVFIxVTNjWFF4WTAxeFdERnBUazVFVGpoMVZGTkhOSFJTYlRBdFRETlJRME54UWpsdlUwVlFRVU41WkMxb1RFMHdWRFZJYTNCd1ZrdFlUbGxCZUZoRGNsTllUMkpCVGtOVFoyZFNVRzlRY0dwVlNFUjJWRFZhVDFWMmEyb3plRzUzVm5SSFRUbHhOV3hFWm00dGJXOW5iVVk1UmtsWFdtUnJSSGgxYmtOTWExZGhOM2R3YldFMVJIaEtlblY1UlRoVFgyVjBiMjlxU20xcE9YbERSVWgzVUVwWlJuZG9Za2xzY0RWM1UwWm9TRWRhYzJsb2VUbFFlVEExUm04M2FVdFZlazB5T1hOWWNHMVdiRlV5Y2toa1EybGpZVXMwYzFwMWRsUmZVbE5DU0V4VmMzWkJWVTFuZUdKbGFFbGlWMk42Y21oak0ybE5NRW80U2tRemMydFdhbXh5ZWtOdGNHMTFhMkpEVHpFNU5XaFRia1V4WjNCMVUxbHFRM2hsVURoS1JXOXNZa1pJZDBGT1dqSldOMVJxZFdjek5UWmlkMHR4VGpSeE5HSnhiMkozYTBGcU9HUnFlREJDTUZSR1RFczFObVl5ZUdSWVRHUnlXVnBCYkVwTWRVRXpTM2hIVURGdGRHVk5WME16VERodlpqaHZaRkJ0TFVWUGNFMXBaV1l3WWpONk4yczBhSE5uUWtrNWFUQkZiamsyTFhKbE9USTJVM0l4ZERKUVdTMVFWek55UWpGc2NXeDVXR3hXUlVFemFFNTVXbGszZFVGSlJqRkNhbEpSZW5SRGFUaFRaR1JEYkdwNFJWRXdNbDg1U25SMFVXWk9hRE5yTmtkbU4xQmFhV015UWxSMlRrVnhjRXBpZEVKWFNsbE1XWE0yUm5sRFdGVnhOVzloTTFaUGVHWTNkbW80UjJkMmNrWTRMVnB6T1VoemMzQjFkMlk0UVhZNWNEZzVWVTVmYmtrdFMwSkNSMTloVmtSeGQwVlZZMjVIUkdsSWN6TkhZWEJYTkV4a00yNXNlVTB3VjI4NVZTMDNXbXd3UzNnM2FHeGlYMEZsYzNKeWJIbHdNVU5GVUhaS1ZGaHlZakJqU0VKdmIwWjFhSHBCYlZGTVdIVTBXazQwU25ZdFIySk9TQzExTkUxUU5Ia3pOa0ZYV0VzMlEwMHdRbkpPWnpaWU1HUlNTV2cwZG05b1dWWlJlVEl3VVdkSFZHeHlRM0IwV2tST2FFdHFOMDUwT0cxNFRrVkVlREYxTkVkTmNHWkRjM2hzVDNOdFVUaGFUMEZXUW0wek9YcGhOMVZOVUd4dk4xbzJOVzFXUnpjNE1sTnNVazlmYVVkSWQxcEZVMUZGVFcxMVl6WkZhVXBZTlhVemNHbzJUMmRNYUVGTGJYTkZUVmwwY1U1MWNsZzNRMHd6TFhoeVUxaHBOemhWWTNkTVZWWTFjSHBGY1ZKa1YzUkNlVkV5WVVoWUxVdEZSakJ5TVdsTlVESm5ORVJzUnpsaGRVOHhPVlpaZWxwU1ZVZDZMVlIwTlZwS2ExbEtUVkZRWkVoTVRGVTBUV3gyVG5CUGMzQkhOSHBwWmtScmEzSlpUa1JIZWtFdFNFOTBUV2hSWVdKWmVFNHhUR05hTWtGNFEzcEVOSHBLZURKS1lsZFhSMGg2Ym1NeWJUbGtiSEpLU1RrMlJ6TjNhM0psTVZkM01VZ3RaRVZyUXpadVJXcHFVbHBRYW1wSFdHTjFUVzFWYWtwM2JESkZlbFY0T1dod1pYSklhVUY0YkhOT1EzbFRZWGR2YlhZMVZ6RkhTakIzYlhCWWFFUlNiekZ0WmxWMWVsaFlTR05CVUV4UU5IRmlVVFJmY2pVNFlWSk5TWFp6TWpaek0wd3lTWHBYWjJaVGQwNWxRa3BHZFd0UU1rVkRkV0ZhU1UxR2FHNVFXRXhoU2pNNVozRjVjelJEU1RSSFNVMWlUVlJsUkVwcVMwbHFkMlJEVjJwSlJVRk5VbmxVWVZOaFNpMTJjSE5LU1d3emFuZFNZblppY25obk1HTndkRWxQWldab1JtbDJVSGxUTTBwVE1VWktTM1p4U2tnNWNIZGFPVU5hZHpsU0xUSlpkM2xDYVZVelRUUXpjMUJJYzFaeFlrcG9aa0o1Vm10S05sRkdTVFJDYVd4eGVtZDFNRU5qWDNBeGRUZDZNMGhHZGxoNFNsVmtSV3BtTFVWVWJUSkJOMEpOWlVkVlZETnpNbEpKYTNkaGRqQndVWGRoWWxVeFpVdGpPV3RMTVRac1lUbFFNV05sU2xSallrWjBaV2xhTFdsdFIxTlZaVGh3Y2t4WWJVUjNjVkpRWVhBMlh6aHNOSFJSVFRJeVl6SlBVM05tVFdSQk1IQmlRa2RMT1ZGemEwSTBXa3B2YURGQ2JqTkdhVVZFZHpodmJ6RkZlaTFFUnpSbWREUmxVR0pJV2tsemVIVlZhakpzTlY5SFp6UnlPVlJ5YldVME5scDBlR2R3VEVoTE5saHhhRTU1VUhkMVNYUktUMHBSUW1vM01YaFhRM0E1TlcxSE9UVmxZemR2VFdnemVXVnplVXhsWW01aExqVTJhamhYVG04MWMxbDJVSGRzWVhWd2FUbEZNMmMuaVdBNjI2WHBVV3hoTjVlNHZYZHI0MThjbjczcDFTeml1T090OGhvdHF3SSIsImV4cCI6MTYxNTgyODY4OCwiaWF0IjoxNjE1ODI4Mzg4fQ.CSAdKHq2P3dmjeCX05wSZvXupDe33RjgEUY2h2EyT8U\",\n+  \"callbacks\": [\n+    {\n+      \"type\": \"IdPCallback\",\n+      \"output\": [\n+        {\n+          \"name\": \"provider\",\n+          \"value\": \"google\"\n+        },\n+        {\n+          \"name\": \"clientId\",\n+          \"value\": \"422386438632-9dir4mp391gfsat8m4giq0akpei90t7b.apps.googleusercontent.com\"\n+        },\n+        {\n+          \"name\": \"redirectUri\",\n+          \"value\": \"https://forgerock.org/oauth2redirect\"\n+        },\n+        {\n+          \"name\": \"scopes\",\n+          \"value\": [\n+            \"openid\",\n+            \"profile\",\n+            \"email\"\n+          ]\n+        },\n+        {\n+          \"name\": \"nonce\",\n+          \"value\": \"\"\n+        },\n+        {\n+          \"name\": \"acrValues\",\n+          \"value\": [\n+            \"test\",\n+            \"test2\"\n+          ]\n+        },\n+        {\n+          \"name\": \"request\",\n+          \"value\": \"eyJ0eXAiOiJKV1QiLCJraWQiOiJ3VTNpZklJYUxPVUFSZVJCL0ZHNmVNMVAxUU09IiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdjIvYXV0aD9wcm9tcHQ9bG9naW4iLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYWNyX3ZhbHVlcyI6InRlc3QgdGVzdDIiLCJpc3MiOiI0MjIzODY0Mzg2MzItOWRpcjRtcDM5MWdmc2F0OG00Z2lxMGFrcGVpOTB0N2IuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJyZXNwb25zZV90eXBlIjoiY29kZSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vZm9yZ2Vyb2NrLm9yZy9vYXV0aDJyZWRpcmVjdCIsInN0YXRlIjoiMW94OHVrOTJtZW1jMHA3b2w3djM4ZmtsMDRsanEzNSIsIm5vbmNlIjoiZGx6bGlqYjZubmM4cnlwNHlyNXZuaXIwbmJvYm51cyIsImNsaWVudF9pZCI6IjQyMjM4NjQzODYzMi05ZGlyNG1wMzkxZ2ZzYXQ4bTRnaXEwYWtwZWk5MHQ3Yi5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSJ9.QOdgq6JSi_rSnl06ZL17KVGyHWD9ux4eBFt3XbO2Xw31Mitz5wKpBj8XtZOAxlXHIMBd3jZoiIrd99ya97LPpLijkLFfIQ-orWsen6vF4wdO_c9z2HEbD6E0ZALnEP4h5nPLEt52mlJIw0GKAXEo9pmR5hpu5hfoFbgf6Qd6kezoCiORMYwpevfYlRJg2rlrP5JPnb0OB3sEhZK-tVXlqM3pOb43xh3fmT6P4dPfzhThu-yrlWSO_SN7pEUZ0VExhnVyVZrEGTR3iZPFsipP61enGx2FHFVvk7GNH6vRU10bukzxypB6LztRGELdVL--Wo6WCi2lfR6904lSWk5onw\"\n+        },\n+        {\n+          \"name\": \"requestUri\",\n+          \"value\": \"\"\n+        }\n+      ],\n+      \"input\": [\n+        {\n+          \"name\": \"IDToken1token\",\n+          \"value\": \"\"\n+        },\n+        {\n+          \"name\": \"IDToken1token_type\",\n+          \"value\": \"\"\n+        }\n+      ]\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "485789903a76070eeeec56044b0a6918625c575a",
    "filename": "forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_IdPCallback_unsupport_provider.json",
    "status": "added",
    "additions": 59,
    "deletions": 0,
    "changes": 59,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_IdPCallback_unsupport_provider.json",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_IdPCallback_unsupport_provider.json",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_IdPCallback_unsupport_provider.json?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"authId\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoSW5kZXhWYWx1ZSI6IlNvY2lhbExvZ2luIiwib3RrIjoiYXU0MjAycWlzamdoNzM5Mm10cjl2NWR2cXQiLCJhdXRoSW5kZXhUeXBlIjoic2VydmljZSIsInJlYWxtIjoiLyIsInNlc3Npb25JZCI6IipBQUpUU1FBQ01ERUFCSFI1Y0dVQUNFcFhWRjlCVlZSSUFBSlRNUUFBKmV5SjBlWEFpT2lKS1YxUWlMQ0pqZEhraU9pSktWMVFpTENKaGJHY2lPaUpJVXpJMU5pSjkuWlhsS01HVllRV2xQYVVwTFZqRlJhVXhEU214aWJVMXBUMmxLUWsxVVNUUlJNRXBFVEZWb1ZFMXFWVEpKYVhkcFdWZDRia2xxYjJsYVIyeDVTVzR3TGk1SVZtaFdkamg1WWtKblVYUTFObFl3Um5WWGREZDNMbmRGZWpKdU1rTnBVMlJOUms5MFRXdGpWak5VWm1WRlNEWnBjRXBVVERjMFFtcDBSalZWVjI1cGVEWlZhWFpYYWt0amNXVk9ObE15YTFaaVozcFpVMUpJU3pGek9FdHZURVJwUm5CdmVUZDJVbll6UmxaNE5tMVVkM0Y2Y1VWTVFrOUtOMVZ3UTFSTWRISlplWEpSWTNKeU9HVlJYMDl4ZDJsNmFIVklka1Z0UWtacFdXaDVURXB3VUhJMWRXUldjRGRwV2taM1NrWk1OVzlIU1U1SlZVRTFhRWxZWWxaYVozWnlkM1pJTVVWb2IxRm5VaTFRYkhGbFRFVTFhRVJXTUV0d1MwZFhkMUZPYjFSd1FtSjZhRGRRVFhoYVZXMU5kMll3ZEZGc1NESmFaMHN0YVZOMlIwWnVWbE5HYlhFNVJqTkRhR3hOY25aMU4ybzBUREJWUWxWelJuRnpYemMwYzI4NGFrWnJjVVZTTkZoc05FNXFhbWhGWm1NM1oxVmhkMGhSTFdGVFIxUXhSWEZpVUVObGFIRXhUMHBrVFRKNlNFWk5hM1ptYjFsRGIwdzBlRVYxT1UxYWJYbDJRelJKTkU1U1ZFTktPRjgyWmpGZlducG5ORUUzVlhkaFduWjZMV2xKU3pKdU9VOWZlbGhpYUhKdk9VaHJWbk5OVnpsNlJXWXhSR1l5UlVKS09WUmhNWE5hWW5kTmFGVnpVSG81YldGVVVGWTBkVUZyUW01Sk9YRmlZVGRJVEdsU2VrOXFZV1Z3VVZnek1UTmxiMnRIWVVsU1dUaEJSMGczUmtSWE5EWkhSMGRrZG5WMVZYQkhNa2RpYW01U2VXMDNSRFZ6WTA1V2VGOHlPRTFEWnpGSVYyVmpTMHhZVWtobFpuTlVZalJmU1ZOaVFYbFhXVEJGUWpsWFdsRnFla2RaZUV0cldVSmlWazB4YjJwSk5XeEplVU5oZVdwelVuUTRkREU1ZFRBeldUQjNXV0pRVkU1c2EyMWFWVmQyWVZGTlVIcDRTelF4TmpOVVVGcDRTVzFHUTNaVU9XUmhiRWhJZVRCVFIxVTNjWFF4WTAxeFdERnBUazVFVGpoMVZGTkhOSFJTYlRBdFRETlJRME54UWpsdlUwVlFRVU41WkMxb1RFMHdWRFZJYTNCd1ZrdFlUbGxCZUZoRGNsTllUMkpCVGtOVFoyZFNVRzlRY0dwVlNFUjJWRFZhVDFWMmEyb3plRzUzVm5SSFRUbHhOV3hFWm00dGJXOW5iVVk1UmtsWFdtUnJSSGgxYmtOTWExZGhOM2R3YldFMVJIaEtlblY1UlRoVFgyVjBiMjlxU20xcE9YbERSVWgzVUVwWlJuZG9Za2xzY0RWM1UwWm9TRWRhYzJsb2VUbFFlVEExUm04M2FVdFZlazB5T1hOWWNHMVdiRlV5Y2toa1EybGpZVXMwYzFwMWRsUmZVbE5DU0V4VmMzWkJWVTFuZUdKbGFFbGlWMk42Y21oak0ybE5NRW80U2tRemMydFdhbXh5ZWtOdGNHMTFhMkpEVHpFNU5XaFRia1V4WjNCMVUxbHFRM2hsVURoS1JXOXNZa1pJZDBGT1dqSldOMVJxZFdjek5UWmlkMHR4VGpSeE5HSnhiMkozYTBGcU9HUnFlREJDTUZSR1RFczFObVl5ZUdSWVRHUnlXVnBCYkVwTWRVRXpTM2hIVURGdGRHVk5WME16VERodlpqaHZaRkJ0TFVWUGNFMXBaV1l3WWpONk4yczBhSE5uUWtrNWFUQkZiamsyTFhKbE9USTJVM0l4ZERKUVdTMVFWek55UWpGc2NXeDVXR3hXUlVFemFFNTVXbGszZFVGSlJqRkNhbEpSZW5SRGFUaFRaR1JEYkdwNFJWRXdNbDg1U25SMFVXWk9hRE5yTmtkbU4xQmFhV015UWxSMlRrVnhjRXBpZEVKWFNsbE1XWE0yUm5sRFdGVnhOVzloTTFaUGVHWTNkbW80UjJkMmNrWTRMVnB6T1VoemMzQjFkMlk0UVhZNWNEZzVWVTVmYmtrdFMwSkNSMTloVmtSeGQwVlZZMjVIUkdsSWN6TkhZWEJYTkV4a00yNXNlVTB3VjI4NVZTMDNXbXd3UzNnM2FHeGlYMEZsYzNKeWJIbHdNVU5GVUhaS1ZGaHlZakJqU0VKdmIwWjFhSHBCYlZGTVdIVTBXazQwU25ZdFIySk9TQzExTkUxUU5Ia3pOa0ZYV0VzMlEwMHdRbkpPWnpaWU1HUlNTV2cwZG05b1dWWlJlVEl3VVdkSFZHeHlRM0IwV2tST2FFdHFOMDUwT0cxNFRrVkVlREYxTkVkTmNHWkRjM2hzVDNOdFVUaGFUMEZXUW0wek9YcGhOMVZOVUd4dk4xbzJOVzFXUnpjNE1sTnNVazlmYVVkSWQxcEZVMUZGVFcxMVl6WkZhVXBZTlhVemNHbzJUMmRNYUVGTGJYTkZUVmwwY1U1MWNsZzNRMHd6TFhoeVUxaHBOemhWWTNkTVZWWTFjSHBGY1ZKa1YzUkNlVkV5WVVoWUxVdEZSakJ5TVdsTlVESm5ORVJzUnpsaGRVOHhPVlpaZWxwU1ZVZDZMVlIwTlZwS2ExbEtUVkZRWkVoTVRGVTBUV3gyVG5CUGMzQkhOSHBwWmtScmEzSlpUa1JIZWtFdFNFOTBUV2hSWVdKWmVFNHhUR05hTWtGNFEzcEVOSHBLZURKS1lsZFhSMGg2Ym1NeWJUbGtiSEpLU1RrMlJ6TjNhM0psTVZkM01VZ3RaRVZyUXpadVJXcHFVbHBRYW1wSFdHTjFUVzFWYWtwM2JESkZlbFY0T1dod1pYSklhVUY0YkhOT1EzbFRZWGR2YlhZMVZ6RkhTakIzYlhCWWFFUlNiekZ0WmxWMWVsaFlTR05CVUV4UU5IRmlVVFJmY2pVNFlWSk5TWFp6TWpaek0wd3lTWHBYWjJaVGQwNWxRa3BHZFd0UU1rVkRkV0ZhU1UxR2FHNVFXRXhoU2pNNVozRjVjelJEU1RSSFNVMWlUVlJsUkVwcVMwbHFkMlJEVjJwSlJVRk5VbmxVWVZOaFNpMTJjSE5LU1d3emFuZFNZblppY25obk1HTndkRWxQWldab1JtbDJVSGxUTTBwVE1VWktTM1p4U2tnNWNIZGFPVU5hZHpsU0xUSlpkM2xDYVZVelRUUXpjMUJJYzFaeFlrcG9aa0o1Vm10S05sRkdTVFJDYVd4eGVtZDFNRU5qWDNBeGRUZDZNMGhHZGxoNFNsVmtSV3BtTFVWVWJUSkJOMEpOWlVkVlZETnpNbEpKYTNkaGRqQndVWGRoWWxVeFpVdGpPV3RMTVRac1lUbFFNV05sU2xSallrWjBaV2xhTFdsdFIxTlZaVGh3Y2t4WWJVUjNjVkpRWVhBMlh6aHNOSFJSVFRJeVl6SlBVM05tVFdSQk1IQmlRa2RMT1ZGemEwSTBXa3B2YURGQ2JqTkdhVVZFZHpodmJ6RkZlaTFFUnpSbWREUmxVR0pJV2tsemVIVlZhakpzTlY5SFp6UnlPVlJ5YldVME5scDBlR2R3VEVoTE5saHhhRTU1VUhkMVNYUktUMHBSUW1vM01YaFhRM0E1TlcxSE9UVmxZemR2VFdnemVXVnplVXhsWW01aExqVTJhamhYVG04MWMxbDJVSGRzWVhWd2FUbEZNMmMuaVdBNjI2WHBVV3hoTjVlNHZYZHI0MThjbjczcDFTeml1T090OGhvdHF3SSIsImV4cCI6MTYxNTgyODY4OCwiaWF0IjoxNjE1ODI4Mzg4fQ.CSAdKHq2P3dmjeCX05wSZvXupDe33RjgEUY2h2EyT8U\",\n+  \"callbacks\": [\n+    {\n+      \"type\": \"IdPCallback\",\n+      \"output\": [\n+        {\n+          \"name\": \"provider\",\n+          \"value\": \"dummy\"\n+        },\n+        {\n+          \"name\": \"clientId\",\n+          \"value\": \"422386438632-9dir4mp391gfsat8m4giq0akpei90t7b.apps.googleusercontent.com\"\n+        },\n+        {\n+          \"name\": \"redirectUri\",\n+          \"value\": \"https://forgerock.org/oauth2redirect\"\n+        },\n+        {\n+          \"name\": \"scopes\",\n+          \"value\": [\n+            \"openid\",\n+            \"profile\",\n+            \"email\"\n+          ]\n+        },\n+        {\n+          \"name\": \"nonce\",\n+          \"value\": \"\"\n+        },\n+        {\n+          \"name\": \"acrValues\",\n+          \"value\": [\n+            \"test\",\n+            \"test2\"\n+          ]\n+        },\n+        {\n+          \"name\": \"request\",\n+          \"value\": \"eyJ0eXAiOiJKV1QiLCJraWQiOiJ3VTNpZklJYUxPVUFSZVJCL0ZHNmVNMVAxUU09IiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdjIvYXV0aD9wcm9tcHQ9bG9naW4iLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYWNyX3ZhbHVlcyI6InRlc3QgdGVzdDIiLCJpc3MiOiI0MjIzODY0Mzg2MzItOWRpcjRtcDM5MWdmc2F0OG00Z2lxMGFrcGVpOTB0N2IuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJyZXNwb25zZV90eXBlIjoiY29kZSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vZm9yZ2Vyb2NrLm9yZy9vYXV0aDJyZWRpcmVjdCIsInN0YXRlIjoiMW94OHVrOTJtZW1jMHA3b2w3djM4ZmtsMDRsanEzNSIsIm5vbmNlIjoiZGx6bGlqYjZubmM4cnlwNHlyNXZuaXIwbmJvYm51cyIsImNsaWVudF9pZCI6IjQyMjM4NjQzODYzMi05ZGlyNG1wMzkxZ2ZzYXQ4bTRnaXEwYWtwZWk5MHQ3Yi5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSJ9.QOdgq6JSi_rSnl06ZL17KVGyHWD9ux4eBFt3XbO2Xw31Mitz5wKpBj8XtZOAxlXHIMBd3jZoiIrd99ya97LPpLijkLFfIQ-orWsen6vF4wdO_c9z2HEbD6E0ZALnEP4h5nPLEt52mlJIw0GKAXEo9pmR5hpu5hfoFbgf6Qd6kezoCiORMYwpevfYlRJg2rlrP5JPnb0OB3sEhZK-tVXlqM3pOb43xh3fmT6P4dPfzhThu-yrlWSO_SN7pEUZ0VExhnVyVZrEGTR3iZPFsipP61enGx2FHFVvk7GNH6vRU10bukzxypB6LztRGELdVL--Wo6WCi2lfR6904lSWk5onw\"\n+        },\n+        {\n+          \"name\": \"requestUri\",\n+          \"value\": \"\"\n+        }\n+      ],\n+      \"input\": [\n+        {\n+          \"name\": \"IDToken1token\",\n+          \"value\": \"\"\n+        },\n+        {\n+          \"name\": \"IDToken1token_type\",\n+          \"value\": \"\"\n+        }\n+      ]\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "034f6a3cc264186cee205b362df29779fd7b6d17",
    "filename": "forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_SelectIdPCallback.json",
    "status": "added",
    "additions": 56,
    "deletions": 0,
    "changes": 56,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_SelectIdPCallback.json",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_SelectIdPCallback.json",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/forgerock-auth/src/test/resources/authTreeMockTest_Authenticate_SelectIdPCallback.json?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -0,0 +1,56 @@\n+{\n+  \"authId\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoSW5kZXhWYWx1ZSI6IlNvY2lhbExvZ2luIiwib3RrIjoiaHVmMG1rdG1taXFlYzQ1MWk2N2RyMXRvZ24iLCJhdXRoSW5kZXhUeXBlIjoic2VydmljZSIsInJlYWxtIjoiLyIsInNlc3Npb25JZCI6IipBQUpUU1FBQ01ERUFCSFI1Y0dVQUNFcFhWRjlCVlZSSUFBSlRNUUFBKmV5SjBlWEFpT2lKS1YxUWlMQ0pqZEhraU9pSktWMVFpTENKaGJHY2lPaUpJVXpJMU5pSjkuWlhsS01HVllRV2xQYVVwTFZqRlJhVXhEU214aWJVMXBUMmxLUWsxVVNUUlJNRXBFVEZWb1ZFMXFWVEpKYVhkcFdWZDRia2xxYjJsYVIyeDVTVzR3TGk1TWVIZG9NbFJvTjNWRVEycE1MVVY0UzFwRGVGQlJMbW8wVmxoUlFYcHJPRWM1UVY4M1pVWnVkalF4YTAxbFIwOVVWRWRwU1hsdldIVkNabkJ1YlMxaWVtRnhXRTlXZG1aeVUwVm5SMFJUVVZkWlYyUjNURVZUZDNkck5sRTVWRVZKUlU1WFNrRnNVSGxzYm5ndFZYcHZTekEwUTA1bE5rNDBRelZtUkUxd1pVSmhiM2xDWm1GUE1WaFZRMnRuVGt4UmJFZFZXREp6U0hWTVpVWk1MVmxhVVRKblJVVkhNWFUxVkZSTlQxa3RTSFptT0ROQ2VrZFFUMGhuWTFGVVVUTnJaM0pKUVRGRGJuVkNWVFYwVlMxWlJ6QkdTV2t5TTJ0cFNHNXZXbWxFTlRoSFRtdG5TMFZNWlhGS1IxWjVVa1JIVHpOQ1ZYQnpPVnBqYzJsWGExaHlUMmd3V0RoZk1WTTBPVGgyVDFWSE1VdzRhVzVtVldGblkzZzBZVTk0VjA1eGFqRk9RbTVPVG5kalV6SkhkMFZ3U205bVIwbFRPVFl5YUUwemFETTFRWGR3YVVaRFp6VmtWRFpmWWpNemFHSnlaWFo2U2xOMVpXUjJOazVDY3paRlRYVkNaV2R5YjJGWVFXWmlhelozY0c4NWRFWXlaVkY2VHpCVVVrdExVMVZ6UW5NMVMyRlVXWGxyWkc5SVQxTklibTlFWmpKVWRteHNXazlGZVdOeE5qWjBTek0yWjNGU1gwcDNUMkpzWVVaWmRqQlhWemQ0TW1sRVpEVlBUVTFQVEV0clNGbG5iemRwUVhsT0xXSnplVkZwTWtGUFJqSjNUMDFPTTNGck9FOWtiMVF5TmxjeE9FbE1kRlF6YUVSNU1XTm1SR1J6VkhRelpYSnhZemhFZUhaTFdXaDJYMmRNWW5GaExXaHVXRE10TUhkdVJUVktiMHRITmtwRVZXRjNVRWx5WW14VlpsZDJZV2RHV2tJeFpHWjBhalU0U0dWNmJHSkNWalZwTWtWR01UQXRhQzFvVm1SaE5IVllVMHRIVEhaTVVrUllTbGc1VEhCVGVtZFVOM0p4ZUZKWWFGb3dXVlpWZERSUlF6QlNOVlV3UkhGc2VXWmhTVTR3TFY5SmJ6QXVUMGN5WVhKUVVGaGZhV3huU0ZORGFYVjRZMWhTWncuWFUyb0RnVURSMmpfUlNYaGJwcDl1bzNQUWtYTzRjTzhPcFlxeTl5OFlYRSIsImV4cCI6MTYxNTgyODY4OCwiaWF0IjoxNjE1ODI4Mzg4fQ.5By98lBKMJt8gXbb1-lEgrbKS2Hr6akciEBzoHzaFt0\",\n+  \"callbacks\": [\n+    {\n+      \"type\": \"SelectIdPCallback\",\n+      \"output\": [\n+        {\n+          \"name\": \"providers\",\n+          \"value\": [\n+            {\n+              \"provider\": \"google\",\n+              \"uiConfig\": {\n+                \"buttonImage\": \"images/g-logo.png\",\n+                \"buttonCustomStyle\": \"background-color: #fff; color: #757575; border-color: #ddd;\",\n+                \"abc\": \"test\",\n+                \"buttonClass\": \"\",\n+                \"buttonDisplayName\": \"Google\",\n+                \"buttonCustomStyleHover\": \"color: #6d6d6d; background-color: #eee; border-color: #ccc;\",\n+                \"iconClass\": \"fa-google\",\n+                \"userinfo\": \"https://www.googleapis.com/oauth2/v3/userinfo\",\n+                \"iconFontColor\": \"white\",\n+                \"iconBackground\": \"#4184f3\"\n+              }\n+            },\n+            {\n+              \"provider\": \"facebook\",\n+              \"uiConfig\": {\n+                \"buttonImage\": \"\",\n+                \"buttonCustomStyle\": \"background-color: #3b5998;border-color: #3b5998; color: white;\",\n+                \"buttonClass\": \"fa-facebook-official\",\n+                \"buttonDisplayName\": \"Facebook\",\n+                \"buttonCustomStyleHover\": \"background-color: #334b7d;border-color: #334b7d; color: white;\",\n+                \"iconFontColor\": \"white\",\n+                \"iconClass\": \"fa-facebook\",\n+                \"iconBackground\": \"#3b5998\"\n+              }\n+            },\n+            {\n+              \"provider\": \"localAuthentication\"\n+            }\n+          ]\n+        },\n+        {\n+          \"name\": \"value\",\n+          \"value\": \"\"\n+        }\n+      ],\n+      \"input\": [\n+        {\n+          \"name\": \"IDToken1\",\n+          \"value\": \"\"\n+        }\n+      ]\n+    }\n+  ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "2e0fd382958971dec1efa0d31e476826750b059d",
    "filename": "samples/auth/build.gradle",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/samples/auth/build.gradle",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/samples/auth/build.gradle",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/samples/auth/build.gradle?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -20,6 +20,7 @@ android {\n         versionCode 1\n         versionName \"1.0\"\n         testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n+\n     }\n     buildTypes {\n         release {\n@@ -62,14 +63,19 @@ dependencies {\n     implementation fileTree(dir: 'libs', include: ['*.jar'])\n     implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n     implementation 'androidx.appcompat:appcompat:1.2.0'\n-    implementation 'com.google.android.material:material:1.2.1'\n-    implementation 'com.google.android.gms:play-services-location:17.1.0'\n+    implementation 'com.google.android.material:material:1.3.0'\n+    implementation 'com.google.android.gms:play-services-location:18.0.0'\n     implementation 'androidx.annotation:annotation:1.1.0'\n     implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n     implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n     implementation 'net.openid:appauth:0.7.1'\n     implementation 'com.google.android.gms:play-services-fido:18.1.0'\n \n+\n+    //SocialLogin\n+    implementation 'com.google.android.gms:play-services-auth:19.0.0'\n+    implementation 'com.facebook.android:facebook-login:7.1.0'\n+\n     // JWT\n     implementation 'com.nimbusds:nimbus-jose-jwt:9.0.1'\n "
  },
  {
    "sha": "4e7db2ad2730aab738c41657a116a19a1317228a",
    "filename": "samples/auth/src/main/AndroidManifest.xml",
    "status": "modified",
    "additions": 20,
    "deletions": 2,
    "changes": 22,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/samples/auth/src/main/AndroidManifest.xml",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/samples/auth/src/main/AndroidManifest.xml",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/samples/auth/src/main/AndroidManifest.xml?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?><!--\n-  ~ Copyright (c) 2019 - 2020 ForgeRock. All rights reserved.\n+  ~ Copyright (c) 2019 - 2021 ForgeRock. All rights reserved.\n   ~\n   ~ This software may be modified and distributed under the terms\n   ~ of the MIT license. See the LICENSE file for details.\n@@ -56,7 +56,6 @@\n                 <action android:name=\"android.intent.action.MAIN\" />\n                 <category android:name=\"android.intent.category.LAUNCHER\" />\n             </intent-filter>\n-\n             <!-- Deep link to handle resumeURI -->\n             <intent-filter>\n                 <action android:name=\"android.intent.action.VIEW\" />\n@@ -85,6 +84,25 @@\n             </intent-filter>\n         </activity>\n \n+        <!-- Facebook -->\n+        <meta-data android:name=\"com.facebook.sdk.ApplicationId\"\n+            android:value=\"@string/facebook_app_id\"/>\n+\n+        <activity android:name=\"com.facebook.FacebookActivity\"\n+            android:configChanges=\n+                \"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"\n+            android:label=\"@string/app_name\" />\n+        <activity\n+            android:name=\"com.facebook.CustomTabActivity\"\n+            android:exported=\"true\">\n+            <intent-filter>\n+                <action android:name=\"android.intent.action.VIEW\" />\n+                <category android:name=\"android.intent.category.DEFAULT\" />\n+                <category android:name=\"android.intent.category.BROWSABLE\" />\n+                <data android:scheme=\"@string/fb_login_protocol_scheme\" />\n+            </intent-filter>\n+        </activity>\n+\n     </application>\n \n </manifest>\n\\ No newline at end of file"
  },
  {
    "sha": "cba9c80f14513225043135aa4747971b25989a73",
    "filename": "samples/auth/src/main/java/org/forgerock/auth/MainActivity.java",
    "status": "modified",
    "additions": 9,
    "deletions": 10,
    "changes": 19,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/samples/auth/src/main/java/org/forgerock/auth/MainActivity.java",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/samples/auth/src/main/java/org/forgerock/auth/MainActivity.java",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/samples/auth/src/main/java/org/forgerock/auth/MainActivity.java?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -63,6 +63,7 @@\n import static android.view.View.INVISIBLE;\n import static android.view.View.VISIBLE;\n import static com.google.android.material.snackbar.Snackbar.LENGTH_LONG;\n+import static org.forgerock.android.auth.ui.SimpleLoginActivity.ERROR_EXTRA;\n \n public class MainActivity extends AppCompatActivity {\n \n@@ -117,16 +118,14 @@ protected void onActivityResult(int requestCode, int resultCode, @Nullable Inten\n         if (requestCode == AUTH_REQUEST_CODE) {\n             // Make sure the request was successful\n             if (resultCode == RESULT_OK) {\n-                success.setVisibility(VISIBLE);\n-                userinfo();\n-            } else {\n-                Exception exception = null;\n-                if (data != null) {\n-                    exception = (Exception) data.getSerializableExtra(SimpleLoginActivity.EXCEPTION);\n+                if (data!= null && data.getStringExtra(ERROR_EXTRA) != null) {\n+                    Snackbar.make(findViewById(org.forgerock.auth.R.id.success), \"Login Failed:\" +\n+                            data.getStringExtra(ERROR_EXTRA) , LENGTH_LONG).show();\n+                } else {\n+                    success.setVisibility(VISIBLE);\n+                    userinfo();\n                 }\n-                Snackbar.make(findViewById(org.forgerock.auth.R.id.success), \"Login Failed:\" +\n-                        exception != null ? exception.getMessage() : \"\", LENGTH_LONG).show();\n-            }\n+           }\n         }\n     }\n \n@@ -354,7 +353,7 @@ public void launchBrowser() {\n                     Map<String, String> additionalParameters = new HashMap<>();\n                     additionalParameters.put(\"service\", \"Simple\");\n                     additionalParameters.put(\"KEY2\", \"VALUE2\");\n-                    r.setAdditionalParameters(additionalParameters);\n+                    //r.setAdditionalParameters(additionalParameters);\n                     //r.setLoginHint(\"login\");\n                     //r.setPrompt(\"login\");\n                 })"
  },
  {
    "sha": "248e7f9d695024fa627a94ec33dc037445341b19",
    "filename": "samples/auth/src/main/res/values/strings.xml",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/ForgeRock/forgerock-android-sdk/blob/53c77507d611f7624de5ed579014ffed80a0f4ee/samples/auth/src/main/res/values/strings.xml",
    "raw_url": "https://github.com/ForgeRock/forgerock-android-sdk/raw/53c77507d611f7624de5ed579014ffed80a0f4ee/samples/auth/src/main/res/values/strings.xml",
    "contents_url": "https://api.github.com/repos/ForgeRock/forgerock-android-sdk/contents/samples/auth/src/main/res/values/strings.xml?ref=53c77507d611f7624de5ed579014ffed80a0f4ee",
    "patch": "@@ -1,5 +1,5 @@\n <!--\n-  ~ Copyright (c) 2019 - 2020 ForgeRock. All rights reserved.\n+  ~ Copyright (c) 2019 - 2021 ForgeRock. All rights reserved.\n   ~\n   ~ This software may be modified and distributed under the terms\n   ~ of the MIT license. See the LICENSE file for details.\n@@ -41,13 +41,18 @@\n     <integer name=\"forgerock_webauthn_max_credential\" translatable=\"false\">10</integer>\n \n     <!-- Service -->\n-    <string name=\"forgerock_auth_service\" translatable=\"false\">webauthn</string>\n+    <string name=\"forgerock_auth_service\" translatable=\"false\">Test</string>\n     <string name=\"forgerock_registration_service\" translatable=\"false\">Registration Tree2</string>\n \n+    <!-- WebAuthn Biometric -->\n     <string name=\"asset_statements\" translatable=\"false\">           [{\n              \"include\": \"https://your-host/.well-known/assetlinks.json\"\n            }]</string>\n \n+    <!-- Facebook -->\n+    <string name=\"facebook_app_id\">your facebook app id</string>\n+    <string name=\"fb_login_protocol_scheme\">your facebook scheme</string>\n+\n     <!-- End of SDK Configuration -->\n \n </resources>"
  }
]
