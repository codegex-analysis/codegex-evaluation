[
  {
    "sha": "29c9de8ea2f57b28a09cefb2e178293fbe0ea0bd",
    "filename": "build.gradle",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7ec0c90fff80ccb2a924747bf137cce2a6beca45/build.gradle",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7ec0c90fff80ccb2a924747bf137cce2a6beca45/build.gradle",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/build.gradle?ref=7ec0c90fff80ccb2a924747bf137cce2a6beca45",
    "patch": "@@ -30,6 +30,10 @@ dependencies {\n     minecraft \"com.mojang:minecraft:${project.minecraft_version}\"\n     mappings \"net.fabricmc:yarn:${project.yarn_mappings}:v2\"\n     modCompile \"net.fabricmc:fabric-loader:${project.loader_version}\"\n+\n+    // for compatibility hooks\n+    modImplementation fabricApi.module(\"fabric-rendering-v1\", project.fabric_api_version)\n+    modImplementation fabricApi.module(\"fabric-lifecycle-events-v1\", project.fabric_api_version)\n }\n \n processResources {"
  },
  {
    "sha": "7c0c7c32f278325424ebf987bfa08bec49f535ab",
    "filename": "gradle.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7ec0c90fff80ccb2a924747bf137cce2a6beca45/gradle.properties",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7ec0c90fff80ccb2a924747bf137cce2a6beca45/gradle.properties",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/gradle.properties?ref=7ec0c90fff80ccb2a924747bf137cce2a6beca45",
    "patch": "@@ -12,6 +12,8 @@ mod_version=0.1.1\n maven_group=me.jellysquid.mods\n archives_base_name=sodium-fabric\n \n+fabric_api_version=0.31.0+1.16\n+\n # If true, third-party mods will be loaded during runtime in the developer run configurations\n use_third_party_mods = true\n databreaker_version = 0.2.6\n\\ No newline at end of file"
  },
  {
    "sha": "4e27ced0657b40402138eb684c85d372678d2a3a",
    "filename": "src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java?ref=7ec0c90fff80ccb2a924747bf137cce2a6beca45",
    "patch": "@@ -1,5 +1,6 @@\n package me.jellysquid.mods.sodium.client;\n \n+import me.jellysquid.mods.sodium.client.compat.CompatibilityHooks;\n import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;\n import me.jellysquid.mods.sodium.client.util.UnsafeUtil;\n import net.fabricmc.api.ClientModInitializer;\n@@ -14,7 +15,7 @@\n \n     @Override\n     public void onInitializeClient() {\n-\n+        CompatibilityHooks.initialize();\n     }\n \n     public static SodiumGameOptions options() {"
  },
  {
    "sha": "0784af20224cc541352c6ea203459ecd2c6ffe4d",
    "filename": "src/main/java/me/jellysquid/mods/sodium/client/compat/CompatibilityHooks.java",
    "status": "added",
    "additions": 223,
    "deletions": 0,
    "changes": 223,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/CompatibilityHooks.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/CompatibilityHooks.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/client/compat/CompatibilityHooks.java?ref=7ec0c90fff80ccb2a924747bf137cce2a6beca45",
    "patch": "@@ -0,0 +1,223 @@\n+package me.jellysquid.mods.sodium.client.compat;\n+\n+import me.jellysquid.mods.sodium.client.SodiumClientMod;\n+import me.jellysquid.mods.sodium.client.compat.impl.fabric.rendering.BlockOutlineContextImpl;\n+import me.jellysquid.mods.sodium.client.compat.impl.fabric.rendering.WorldRenderContextImpl;\n+import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientChunkEvents;\n+import net.fabricmc.fabric.api.client.rendering.v1.InvalidateRenderStateCallback;\n+import net.fabricmc.fabric.api.client.rendering.v1.WorldRenderEvents;\n+import net.fabricmc.loader.api.FabricLoader;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.render.*;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.Matrix4f;\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.chunk.WorldChunk;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Utility class that initializes and holds all compatibility-related hook interfaces.\n+ */\n+public final class CompatibilityHooks {\n+    private CompatibilityHooks() { }\n+\n+    public static void initialize() {\n+        // This method exists purely to run the static block on startup.\n+    }\n+\n+    private static final Logger LOGGER = SodiumClientMod.logger();\n+\n+    public static final FabricRenderingHooks FABRIC_RENDERING;\n+    public static final FabricLifecycleEventsHooks FABRIC_LIFECYCLE_EVENTS;\n+\n+    static {\n+        final FabricLoader loader = FabricLoader.getInstance();\n+        LOGGER.info(\"Sodium is now looking for mods to enable compatibility hooks for...\");\n+        FABRIC_RENDERING = createFabricRenderingHooks(loader);\n+        FABRIC_LIFECYCLE_EVENTS = createFabricLifecycleEventsHooks(loader);\n+        LOGGER.info(\"Compatibility hooks done! Enjoy your improved performance!\");\n+    }\n+\n+    private static FabricRenderingHooks createFabricRenderingHooks(FabricLoader loader) {\n+        if (loader.isModLoaded(\"fabric-rendering-v1\")) {\n+            LOGGER.info(\"Sodium has detected that Fabric Rendering v1 is installed. Activating compatibility hooks...\");\n+            return new FabricRenderingHooks() {\n+                private final WorldRenderContextImpl ctx = new WorldRenderContextImpl();\n+                private final BlockOutlineContextImpl blockOutlineCtx = new BlockOutlineContextImpl();\n+\n+                @Override\n+                public void prepareContext(WorldRenderer worldRenderer, MatrixStack matrixStack, float tickDelta, long limitTime, boolean blockOutlines, Camera camera, GameRenderer gameRenderer, LightmapTextureManager lightmapTextureManager, Matrix4f projectionMatrix, ClientWorld world, Profiler profiler, boolean advancedTranslucency, VertexConsumerProvider consumers) {\n+                    ctx.worldRenderer = worldRenderer;\n+                    ctx.matrixStack = matrixStack;\n+                    ctx.tickDelta = tickDelta;\n+                    ctx.limitTime = limitTime;\n+                    ctx.blockOutlines = blockOutlines;\n+                    ctx.camera = camera;\n+                    ctx.gameRenderer = gameRenderer;\n+                    ctx.lightmapTextureManager = lightmapTextureManager;\n+                    ctx.projectionMatrix = projectionMatrix;\n+                    ctx.world = world;\n+                    ctx.profiler = profiler;\n+                    ctx.advancedTranslucency = advancedTranslucency;\n+                    ctx.consumers = consumers;\n+                    ctx.frustum = null;\n+                }\n+\n+                @Override\n+                public void invokeStartEvent() {\n+                    WorldRenderEvents.START.invoker().onStart(ctx);\n+                }\n+\n+                @Override\n+                public void setContextFrustum(Frustum frustum) {\n+                    ctx.frustum = frustum;\n+                }\n+\n+                @Override\n+                public void invokeAfterSetupEvent() {\n+                    WorldRenderEvents.AFTER_SETUP.invoker().afterSetup(ctx);\n+                }\n+\n+                @Override\n+                public void invokeBeforeEntitiesEvent() {\n+                    WorldRenderEvents.BEFORE_ENTITIES.invoker().beforeEntities(ctx);\n+                }\n+\n+                @Override\n+                public void invokeAfterEntitiesEvent() {\n+                    WorldRenderEvents.AFTER_ENTITIES.invoker().afterEntities(ctx);\n+                }\n+\n+                @Override\n+                public void invokeBeforeBlockOutlineEvent() {\n+                    ctx.blockOutlines = WorldRenderEvents.BEFORE_BLOCK_OUTLINE.invoker().beforeBlockOutline(ctx, MinecraftClient.getInstance().crosshairTarget);\n+                }\n+\n+                @Override\n+                public boolean shouldRenderBlockOutline() {\n+                    return ctx.blockOutlines;\n+                }\n+\n+                @Override\n+                public void prepareBlockOutlineContext(VertexConsumer vertexConsumer, Entity entity, double cameraX, double cameraY, double cameraZ, BlockPos blockPos, BlockState blockState) {\n+                    blockOutlineCtx.vertexConsumer = vertexConsumer;\n+                    blockOutlineCtx.entity = entity;\n+                    blockOutlineCtx.cameraX = cameraX;\n+                    blockOutlineCtx.cameraY = cameraY;\n+                    blockOutlineCtx.cameraZ = cameraZ;\n+                    blockOutlineCtx.blockPos = blockPos;\n+                    blockOutlineCtx.blockState = blockState;\n+                }\n+\n+                @Override\n+                public void invokeBlockOutlineEvent() {\n+                    WorldRenderEvents.BLOCK_OUTLINE.invoker().onBlockOutline(ctx, blockOutlineCtx);\n+                }\n+\n+                @Override\n+                public void invokeBeforeDebugRenderEvent() {\n+                    WorldRenderEvents.BEFORE_DEBUG_RENDER.invoker().beforeDebugRender(ctx);\n+                }\n+\n+                @Override\n+                public void invokeAfterTranslucentEvent() {\n+                    WorldRenderEvents.AFTER_TRANSLUCENT.invoker().afterTranslucent(ctx);\n+                }\n+\n+                @Override\n+                public void invokeLastEvent() {\n+                    WorldRenderEvents.LAST.invoker().onLast(ctx);\n+                }\n+\n+                @Override\n+                public void invokeEndEvent() {\n+                    WorldRenderEvents.END.invoker().onEnd(ctx);\n+                }\n+\n+                @Override\n+                public void invokeInvalidateRenderStateEvent() {\n+                    InvalidateRenderStateCallback.EVENT.invoker().onInvalidate();\n+                }\n+            };\n+        } else {\n+            LOGGER.info(\"Sodium has detected that Fabric Rendering v1 is NOT installed.\");\n+            return new FabricRenderingHooks() {\n+                @Override\n+                public void prepareContext(WorldRenderer worldRenderer, MatrixStack matrixStack, float tickDelta, long limitTime, boolean blockOutlines, Camera camera, GameRenderer gameRenderer, LightmapTextureManager lightmapTextureManager, Matrix4f projectionMatrix, ClientWorld world, Profiler profiler, boolean advancedTranslucency, VertexConsumerProvider consumers) { }\n+\n+                @Override\n+                public void invokeStartEvent() { }\n+\n+                @Override\n+                public void setContextFrustum(Frustum frustum) { }\n+\n+                @Override\n+                public void invokeAfterSetupEvent() { }\n+\n+                @Override\n+                public void invokeBeforeEntitiesEvent() { }\n+\n+                @Override\n+                public void invokeAfterEntitiesEvent() { }\n+\n+                @Override\n+                public void invokeBeforeBlockOutlineEvent() { }\n+\n+                @Override\n+                public boolean shouldRenderBlockOutline() { return true; }\n+\n+                @Override\n+                public void prepareBlockOutlineContext(VertexConsumer vertexConsumer, Entity entity, double cameraX, double cameraY, double cameraZ, BlockPos blockPos, BlockState blockState) { }\n+\n+                @Override\n+                public void invokeBlockOutlineEvent() { }\n+\n+                @Override\n+                public void invokeBeforeDebugRenderEvent() { }\n+\n+                @Override\n+                public void invokeAfterTranslucentEvent() { }\n+\n+                @Override\n+                public void invokeLastEvent() { }\n+\n+                @Override\n+                public void invokeEndEvent() { }\n+\n+                @Override\n+                public void invokeInvalidateRenderStateEvent() { }\n+            };\n+        }\n+    }\n+\n+    private static FabricLifecycleEventsHooks createFabricLifecycleEventsHooks(FabricLoader loader) {\n+        if (loader.isModLoaded(\"fabric-lifecycle-events-v1\")) {\n+            LOGGER.info(\"Sodium has detected that Fabric Lifecycle Events v1 is installed. Activating compatibility hooks...\");\n+            return new FabricLifecycleEventsHooks() {\n+                @Override\n+                public void invokeOnClientChunkLoad(ClientWorld world, WorldChunk chunk) {\n+                    ClientChunkEvents.CHUNK_LOAD.invoker().onChunkLoad(world, chunk);\n+                }\n+\n+                @Override\n+                public void invokeOnClientChunkUnload(ClientWorld world, WorldChunk chunk) {\n+                    ClientChunkEvents.CHUNK_UNLOAD.invoker().onChunkUnload(world, chunk);\n+                }\n+            };\n+        } else {\n+            LOGGER.info(\"Sodium has detected that Fabric Lifecycle Events v1 is NOT installed.\");\n+            return new FabricLifecycleEventsHooks() {\n+                @Override\n+                public void invokeOnClientChunkLoad(ClientWorld world, WorldChunk chunk) { }\n+\n+                @Override\n+                public void invokeOnClientChunkUnload(ClientWorld world, WorldChunk chunk) { }\n+            };\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "262dd47c57c4cb8994ae794579b6ecb82a9cb1c4",
    "filename": "src/main/java/me/jellysquid/mods/sodium/client/compat/FabricLifecycleEventsHooks.java",
    "status": "added",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/FabricLifecycleEventsHooks.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/FabricLifecycleEventsHooks.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/client/compat/FabricLifecycleEventsHooks.java?ref=7ec0c90fff80ccb2a924747bf137cce2a6beca45",
    "patch": "@@ -0,0 +1,9 @@\n+package me.jellysquid.mods.sodium.client.compat;\n+\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.world.chunk.WorldChunk;\n+\n+public interface FabricLifecycleEventsHooks {\n+    void invokeOnClientChunkLoad(ClientWorld world, WorldChunk chunk);\n+    void invokeOnClientChunkUnload(ClientWorld world, WorldChunk chunk);\n+}"
  },
  {
    "sha": "e0aad235b10491e6e77062e21fc5c3f4fa1356ec",
    "filename": "src/main/java/me/jellysquid/mods/sodium/client/compat/FabricRenderingHooks.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/FabricRenderingHooks.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/FabricRenderingHooks.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/client/compat/FabricRenderingHooks.java?ref=7ec0c90fff80ccb2a924747bf137cce2a6beca45",
    "patch": "@@ -0,0 +1,34 @@\n+package me.jellysquid.mods.sodium.client.compat;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.client.render.*;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.Matrix4f;\n+import net.minecraft.util.profiler.Profiler;\n+\n+public interface FabricRenderingHooks {\n+    void prepareContext(WorldRenderer worldRenderer, MatrixStack matrixStack, float tickDelta, long limitTime,\n+                        boolean blockOutlines, Camera camera, GameRenderer gameRenderer,\n+                        LightmapTextureManager lightmapTextureManager, Matrix4f projectionMatrix,\n+                        ClientWorld world, Profiler profiler, boolean advancedTranslucency,\n+                        VertexConsumerProvider consumers);\n+    void invokeStartEvent();\n+    void setContextFrustum(Frustum frustum);\n+    void invokeAfterSetupEvent();\n+    void invokeBeforeEntitiesEvent();\n+    void invokeAfterEntitiesEvent();\n+    void invokeBeforeBlockOutlineEvent();\n+    boolean shouldRenderBlockOutline();\n+    void prepareBlockOutlineContext(VertexConsumer vertexConsumer, Entity entity,\n+                                    double cameraX, double cameraY, double cameraZ,\n+                                    BlockPos blockPos, BlockState blockState);\n+    void invokeBlockOutlineEvent();\n+    void invokeBeforeDebugRenderEvent();\n+    void invokeAfterTranslucentEvent();\n+    void invokeLastEvent();\n+    void invokeEndEvent();\n+    void invokeInvalidateRenderStateEvent();\n+}"
  },
  {
    "sha": "7d4f3ece7721288dcf3134f3551f86cadaf9b249",
    "filename": "src/main/java/me/jellysquid/mods/sodium/client/compat/impl/fabric/rendering/BlockOutlineContextImpl.java",
    "status": "added",
    "additions": 50,
    "deletions": 0,
    "changes": 50,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/impl/fabric/rendering/BlockOutlineContextImpl.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/impl/fabric/rendering/BlockOutlineContextImpl.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/client/compat/impl/fabric/rendering/BlockOutlineContextImpl.java?ref=7ec0c90fff80ccb2a924747bf137cce2a6beca45",
    "patch": "@@ -0,0 +1,50 @@\n+package me.jellysquid.mods.sodium.client.compat.impl.fabric.rendering;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.WorldRenderContext;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.client.render.VertexConsumer;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.util.math.BlockPos;\n+\n+public class BlockOutlineContextImpl implements WorldRenderContext.BlockOutlineContext {\n+    public VertexConsumer vertexConsumer;\n+    public Entity entity;\n+    public double cameraX, cameraY, cameraZ;\n+    public BlockPos blockPos;\n+    public BlockState blockState;\n+\n+    @Override\n+    public VertexConsumer vertexConsumer() {\n+        return vertexConsumer;\n+    }\n+\n+    @Override\n+    public Entity entity() {\n+        return entity;\n+    }\n+\n+    @Override\n+    public double cameraX() {\n+        return cameraX;\n+    }\n+\n+    @Override\n+    public double cameraY() {\n+        return cameraY;\n+    }\n+\n+    @Override\n+    public double cameraZ() {\n+        return cameraZ;\n+    }\n+\n+    @Override\n+    public BlockPos blockPos() {\n+        return blockPos;\n+    }\n+\n+    @Override\n+    public BlockState blockState() {\n+        return blockState;\n+    }\n+}"
  },
  {
    "sha": "d159790c37bb1b5f6edb2f085cd2b7cc8a9c23eb",
    "filename": "src/main/java/me/jellysquid/mods/sodium/client/compat/impl/fabric/rendering/WorldRenderContextImpl.java",
    "status": "added",
    "additions": 96,
    "deletions": 0,
    "changes": 96,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/impl/fabric/rendering/WorldRenderContextImpl.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/compat/impl/fabric/rendering/WorldRenderContextImpl.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/client/compat/impl/fabric/rendering/WorldRenderContextImpl.java?ref=7ec0c90fff80ccb2a924747bf137cce2a6beca45",
    "patch": "@@ -0,0 +1,96 @@\n+package me.jellysquid.mods.sodium.client.compat.impl.fabric.rendering;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.WorldRenderContext;\n+import net.minecraft.client.render.*;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.client.world.ClientWorld;\n+import net.minecraft.util.math.Matrix4f;\n+import net.minecraft.util.profiler.Profiler;\n+import org.jetbrains.annotations.Nullable;\n+\n+public class WorldRenderContextImpl implements WorldRenderContext {\n+    public WorldRenderer worldRenderer;\n+    public MatrixStack matrixStack;\n+    public float tickDelta;\n+    public long limitTime;\n+    public boolean blockOutlines;\n+    public Camera camera;\n+    public GameRenderer gameRenderer;\n+    public LightmapTextureManager lightmapTextureManager;\n+    public Matrix4f projectionMatrix;\n+    public ClientWorld world;\n+    public Profiler profiler;\n+    public boolean advancedTranslucency;\n+    public VertexConsumerProvider consumers;\n+    public Frustum frustum;\n+\n+    @Override\n+    public WorldRenderer worldRenderer() {\n+        return worldRenderer;\n+    }\n+\n+    @Override\n+    public MatrixStack matrixStack() {\n+        return matrixStack;\n+    }\n+\n+    @Override\n+    public float tickDelta() {\n+        return tickDelta;\n+    }\n+\n+    @Override\n+    public long limitTime() {\n+        return limitTime;\n+    }\n+\n+    @Override\n+    public boolean blockOutlines() {\n+        return blockOutlines;\n+    }\n+\n+    @Override\n+    public Camera camera() {\n+        return camera;\n+    }\n+\n+    @Override\n+    public GameRenderer gameRenderer() {\n+        return gameRenderer;\n+    }\n+\n+    @Override\n+    public LightmapTextureManager lightmapTextureManager() {\n+        return lightmapTextureManager;\n+    }\n+\n+    @Override\n+    public Matrix4f projectionMatrix() {\n+        return projectionMatrix;\n+    }\n+\n+    @Override\n+    public ClientWorld world() {\n+        return world;\n+    }\n+\n+    @Override\n+    public Profiler profiler() {\n+        return profiler;\n+    }\n+\n+    @Override\n+    public boolean advancedTranslucency() {\n+        return advancedTranslucency;\n+    }\n+\n+    @Override\n+    public @Nullable VertexConsumerProvider consumers() {\n+        return consumers;\n+    }\n+\n+    @Override\n+    public @Nullable Frustum frustum() {\n+        return frustum;\n+    }\n+}"
  },
  {
    "sha": "47aebce65de709a688333f4cc85d7f679b1f3c9b",
    "filename": "src/main/java/me/jellysquid/mods/sodium/client/world/SodiumChunkManager.java",
    "status": "modified",
    "additions": 9,
    "deletions": 2,
    "changes": 11,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/world/SodiumChunkManager.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7ec0c90fff80ccb2a924747bf137cce2a6beca45/src/main/java/me/jellysquid/mods/sodium/client/world/SodiumChunkManager.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/client/world/SodiumChunkManager.java?ref=7ec0c90fff80ccb2a924747bf137cce2a6beca45",
    "patch": "@@ -3,6 +3,7 @@\n import it.unimi.dsi.fastutil.Hash;\n import it.unimi.dsi.fastutil.longs.Long2ObjectMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n+import me.jellysquid.mods.sodium.client.compat.CompatibilityHooks;\n import me.jellysquid.mods.sodium.client.util.collections.FixedLongHashTable;\n import net.minecraft.client.world.ClientChunkManager;\n import net.minecraft.client.world.ClientWorld;\n@@ -59,7 +60,7 @@ public void unload(int x, int z) {\n         WorldChunk unloadedChunk = this.chunks.remove(createChunkKey(x, z));\n         if (unloadedChunk != null) {\n             this.world.unloadBlockEntities(unloadedChunk);\n-            this.onChunkUnloaded(x, z);\n+            this.onChunkUnloaded(x, z, unloadedChunk);\n         }\n     }\n \n@@ -199,13 +200,19 @@ private void onChunkLoaded(int x, int z, WorldChunk chunk) {\n         if (this.listener != null) {\n             this.listener.onChunkAdded(x, z);\n         }\n+\n+        // Invoke the lifecycle event (if it's installed)\n+        CompatibilityHooks.FABRIC_LIFECYCLE_EVENTS.invokeOnClientChunkLoad(world, chunk);\n     }\n \n-    private void onChunkUnloaded(int x, int z) {\n+    private void onChunkUnloaded(int x, int z, WorldChunk unloadedChunk) {\n         // Notify the chunk listener\n         if (this.listener != null) {\n             this.listener.onChunkRemoved(x, z);\n         }\n+\n+        // Invoke the lifecycle event (if it's installed)\n+        CompatibilityHooks.FABRIC_LIFECYCLE_EVENTS.invokeOnClientChunkUnload(this.world, unloadedChunk);\n     }\n \n     private static long createChunkKey(int x, int z) {"
  }
]
