[
  {
    "sha": "04aaeb89482af44d3a7142c8c6ffef6000fd9ec6",
    "filename": "src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java?ref=7332b4d080b08bbfc39196fb6b2d64d884cb870c",
    "patch": "@@ -3,11 +3,10 @@\n import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;\n import me.jellysquid.mods.sodium.client.util.UnsafeUtil;\n import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.loader.api.FabricLoader;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n-import java.io.File;\n-\n public class SodiumClientMod implements ClientModInitializer {\n     private static SodiumGameOptions CONFIG;\n     private static Logger LOGGER;\n@@ -34,7 +33,7 @@ public static Logger logger() {\n     }\n \n     private static SodiumGameOptions loadConfig() {\n-        SodiumGameOptions config = SodiumGameOptions.load(new File(\"config/sodium-options.json\"));\n+        SodiumGameOptions config = SodiumGameOptions.load(FabricLoader.getInstance().getConfigDir().resolve(\"sodium-options.json\").normalize());\n         onConfigChanged(config);\n \n         return config;"
  },
  {
    "sha": "b1a89a558ffc7dc936f2a9890e1483be21ae50c4",
    "filename": "src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java",
    "status": "modified",
    "additions": 62,
    "deletions": 21,
    "changes": 83,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java?ref=7332b4d080b08bbfc39196fb6b2d64d884cb870c",
    "patch": "@@ -8,21 +8,25 @@\n import me.jellysquid.mods.sodium.client.render.chunk.backends.gl20.GL20ChunkRenderBackend;\n import me.jellysquid.mods.sodium.client.render.chunk.backends.gl30.GL30ChunkRenderBackend;\n import me.jellysquid.mods.sodium.client.render.chunk.backends.gl43.GL43ChunkRenderBackend;\n+import me.jellysquid.mods.sodium.common.util.PathUtil;\n import net.minecraft.client.options.GraphicsMode;\n+import org.apache.logging.log4j.Logger;\n \n-import java.io.File;\n-import java.io.FileReader;\n-import java.io.FileWriter;\n-import java.io.IOException;\n+import java.io.*;\n import java.lang.reflect.Modifier;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.util.Arrays;\n import java.util.stream.Stream;\n \n public class SodiumGameOptions {\n+    private static final Logger LOGGER = SodiumClientMod.logger();\n+\n     public final QualitySettings quality = new QualitySettings();\n     public final AdvancedSettings advanced = new AdvancedSettings();\n \n-    private File file;\n+    private Path path;\n \n     public void notifyListeners() {\n         SodiumClientMod.onConfigChanged(this);\n@@ -139,24 +143,47 @@ public String getLocalizedName() {\n             .excludeFieldsWithModifiers(Modifier.PRIVATE)\n             .create();\n \n-    public static SodiumGameOptions load(File file) {\n+    public static SodiumGameOptions load(Path path) {\n         SodiumGameOptions config;\n \n-        if (file.exists()) {\n-            try (FileReader reader = new FileReader(file)) {\n+        if (Files.exists(path)) {\n+            try (InputStream is = Files.newInputStream(path);\n+                 InputStreamReader isr = new InputStreamReader(is);\n+                 BufferedReader reader = new BufferedReader(isr)) {\n                 config = gson.fromJson(reader, SodiumGameOptions.class);\n-            } catch (IOException e) {\n-                throw new RuntimeException(\"Could not parse config\", e);\n+            } catch (Exception e) {\n+                LOGGER.error(\"Failed to parse options file! Loading default values\", e);\n+                config = new SodiumGameOptions();\n+                config.path = path;\n+\n+                boolean backupSuccess = true;\n+                Path backupPath = PathUtil.resolveTimestampedSibling(path, \"BACKUP\");\n+                LOGGER.info(\"Backing up config to \\\"{}\\\"...\", backupPath.toString());\n+                try {\n+                    Files.move(path, backupPath, StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException be) {\n+                    LOGGER.error(\"Failed to back up config!\", be);\n+                    backupSuccess = false;\n+                }\n+\n+                // write default values to file\n+                config.writeChanges();\n+\n+                String eMsg = \"Failed to parse options file! It has been replaced with the default values\";\n+                if (backupSuccess)\n+                    eMsg += \", with the original backed up at \\\"\" + backupPath + \"\\\"\";\n+                throw new RuntimeException(eMsg, e);\n             }\n \n+            config.path = path;\n             config.sanitize();\n         } else {\n+            LOGGER.info(\"Could not find options file, loading default values\");\n             config = new SodiumGameOptions();\n+            config.path = path;\n+            config.writeChanges();\n         }\n \n-        config.file = file;\n-        config.writeChanges();\n-\n         return config;\n     }\n \n@@ -167,20 +194,34 @@ private void sanitize() {\n     }\n \n     public void writeChanges() {\n-        File dir = this.file.getParentFile();\n+        Path dir = this.path.getParent();\n \n-        if (!dir.exists()) {\n-            if (!dir.mkdirs()) {\n-                throw new RuntimeException(\"Could not create parent directories\");\n+        if (!Files.exists(dir)) {\n+            try {\n+                Files.createDirectories(dir);\n+            } catch (IOException e) {\n+                LOGGER.error(\"Could not create parent directories for \\\"\" + dir + \"\\\"!\", e);\n+                return;\n             }\n-        } else if (!dir.isDirectory()) {\n-            throw new RuntimeException(\"The parent file is not a directory\");\n+        } else if (!Files.isDirectory(dir)) {\n+            LOGGER.error(\"Parent directory \\\"{}\\\" is, in fact, not a directory!\", dir);\n+            return;\n         }\n \n-        try (FileWriter writer = new FileWriter(this.file)) {\n+        Path tempPath = PathUtil.resolveTimestampedSibling(this.path, \"TEMP\");\n+        try (OutputStream os = Files.newOutputStream(tempPath);\n+             OutputStreamWriter osw = new OutputStreamWriter(os);\n+             BufferedWriter writer = new BufferedWriter(osw)) {\n             gson.toJson(this, writer);\n         } catch (IOException e) {\n-            throw new RuntimeException(\"Could not save configuration file\", e);\n+            LOGGER.error(\"Could not save config file to \\\"\" + tempPath + \"\\\"!\", e);\n+            return;\n+        }\n+\n+        try {\n+            Files.move(tempPath, this.path, StandardCopyOption.REPLACE_EXISTING);\n+        } catch (IOException e) {\n+            LOGGER.error(\"Failed to move config file \\\"\" + tempPath + \"\\\" into place at \\\"\" + this.path + \"\\\"!\", e);\n         }\n     }\n }"
  },
  {
    "sha": "f5c5b6427ad85d01ceefd08c230807768669fed0",
    "filename": "src/main/java/me/jellysquid/mods/sodium/common/config/ForcedOption.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/common/config/ForcedOption.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/common/config/ForcedOption.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/common/config/ForcedOption.java?ref=7332b4d080b08bbfc39196fb6b2d64d884cb870c",
    "patch": "@@ -0,0 +1,25 @@\n+package me.jellysquid.mods.sodium.common.config;\n+\n+import me.jellysquid.mods.sodium.client.SodiumClientMod;\n+\n+/**\n+ * An {@link Option} that's always enabled, ignoring user configuration or any mod overrides.\n+ */\n+public class ForcedOption extends Option {\n+    public ForcedOption(String name) {\n+        super(name, true, false);\n+    }\n+\n+    @Override\n+    public void setEnabled(boolean enabled, boolean userDefined) {\n+        if (userDefined)\n+            SodiumClientMod.logger().warn(\"User tried to {} forced configuration option \\\"{}\\\", ignoring\",\n+                    enabled ? \"enable\" : \"disable\", getName());\n+    }\n+\n+    @Override\n+    public void addModOverride(boolean enabled, String modId) {\n+        SodiumClientMod.logger().warn(\"Mod {} tried to {} forced configuration option \\\"{}\\\", ignoring\",\n+                modId, enabled ? \"enable\" : \"disable\", getName());\n+    }\n+}"
  },
  {
    "sha": "d66c2f0dfad2769fa2bdac481289b0d2180cbbfd",
    "filename": "src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java",
    "status": "modified",
    "additions": 60,
    "deletions": 15,
    "changes": 75,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java?ref=7332b4d080b08bbfc39196fb6b2d64d884cb870c",
    "patch": "@@ -1,5 +1,6 @@\n package me.jellysquid.mods.sodium.common.config;\n \n+import me.jellysquid.mods.sodium.common.util.PathUtil;\n import net.fabricmc.loader.api.FabricLoader;\n import net.fabricmc.loader.api.ModContainer;\n import net.fabricmc.loader.api.metadata.CustomValue;\n@@ -8,6 +9,7 @@\n import org.apache.logging.log4j.Logger;\n \n import java.io.*;\n+import java.nio.file.*;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Properties;\n@@ -26,7 +28,7 @@\n     private SodiumConfig() {\n         // Defines the default rules which can be configured by the user or other mods.\n         // You must manually add a rule for any new mixins not covered by an existing package rule.\n-        this.addMixinRule(\"core\", true); // TODO: Don't actually allow the user to disable this\n+        this.addForcedMixinRule(\"core\");\n \n         this.addMixinRule(\"features.block\", true);\n         this.addMixinRule(\"features.buffer_builder\", true);\n@@ -67,6 +69,19 @@ private void addMixinRule(String mixin, boolean enabled) {\n         }\n     }\n \n+    /**\n+     * Defines a Mixin rule which is always enabled and <em>cannot</em> be configured by users and other mods.\n+     * @throws IllegalStateException If a rule with that name already exists\n+     * @param mixin The name of the mixin package which will be controlled by this rule\n+     */\n+    private void addForcedMixinRule(String mixin) {\n+        String name = getMixinRuleName(mixin);\n+\n+        if (this.options.putIfAbsent(name, new ForcedOption(name)) != null) {\n+            throw new IllegalStateException(\"Mixin rule already defined: \" + mixin);\n+        }\n+    }\n+\n     private void readProperties(Properties props) {\n         for (Map.Entry<Object, Object> entry : props.entrySet()) {\n             String key = (String) entry.getKey();\n@@ -175,23 +190,49 @@ public Option getEffectiveOptionForMixin(String mixinClassName) {\n      * Loads the configuration file from the specified location. If it does not exist, a new configuration file will be\n      * created. The file on disk will then be updated to include any new options.\n      */\n-    public static SodiumConfig load(File file) {\n-        if (!file.exists()) {\n+    public static SodiumConfig load(Path path) {\n+        if (!Files.exists(path)) {\n+            LOGGER.info(\"Could not find configuration file, loading default values\");\n+\n             try {\n-                writeDefaultConfig(file);\n+                writeDefaultConfig(path);\n             } catch (IOException e) {\n-                LOGGER.warn(\"Could not write default configuration file\", e);\n+                LOGGER.warn(\"Could not write default configuration file to \\\"\" + path + \"\\\"!\", e);\n             }\n \n             return new SodiumConfig();\n         }\n \n         Properties props = new Properties();\n \n-        try (FileInputStream fin = new FileInputStream(file)){\n+        try (InputStream fin = Files.newInputStream(path)){\n             props.load(fin);\n         } catch (IOException e) {\n-            throw new RuntimeException(\"Could not load config file\", e);\n+            LOGGER.error(\"Could not load config file from \\\"\" + path + \"\\\"! Loading default values\", e);\n+\n+            Path backupPath = PathUtil.resolveTimestampedSibling(path, \"BACKUP\");\n+            LOGGER.info(\"Backing up config to \\\"{}\\\"...\", backupPath.toString());\n+            try {\n+                Files.move(path, backupPath, StandardCopyOption.REPLACE_EXISTING);\n+            } catch (IOException be) {\n+                LOGGER.error(\"Failed to back up config to \\\"\" + backupPath + \"\\\"!\", be);\n+            }\n+\n+            boolean tempSuccess = true;\n+            Path tempPath = PathUtil.resolveTimestampedSibling(path, \"TEMP\");\n+            try {\n+                writeDefaultConfig(tempPath);\n+            } catch (IOException te) {\n+                LOGGER.error(\"Could not write default configuration file to \\\"\" + path + \"\\\"!\", te);\n+                tempSuccess = false;\n+            }\n+            if (tempSuccess) {\n+                try {\n+                    Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException te) {\n+                    LOGGER.error(\"Failed to move config file \\\"\" + tempPath + \"\\\" into place at \\\"\" + path + \"\\\"!\", te);\n+                }\n+            }\n         }\n \n         SodiumConfig config = new SodiumConfig();\n@@ -201,18 +242,22 @@ public static SodiumConfig load(File file) {\n         return config;\n     }\n \n-    private static void writeDefaultConfig(File file) throws IOException {\n-        File dir = file.getParentFile();\n+    private static void writeDefaultConfig(Path path) throws IOException {\n+        Path dir = path.getParent();\n \n-        if (!dir.exists()) {\n-            if (!dir.mkdirs()) {\n-                throw new IOException(\"Could not create parent directories\");\n+        if (!Files.exists(dir)) {\n+            try {\n+                Files.createDirectories(dir);\n+            } catch (IOException e) {\n+                throw new IOException(\"Could not create parent directories for \\\"\" + dir + \"\\\"!\", e);\n             }\n-        } else if (!dir.isDirectory()) {\n-            throw new IOException(\"The parent file is not a directory\");\n+        } else if (!Files.isDirectory(dir)) {\n+            throw new IOException(\"Parent directory \\\"\" + dir + \"\\\" is, in fact, not a directory!\");\n         }\n \n-        try (Writer writer = new FileWriter(file)) {\n+        try (OutputStream os = Files.newOutputStream(path);\n+             OutputStreamWriter osw = new OutputStreamWriter(os);\n+             BufferedWriter writer = new BufferedWriter(osw)) {\n             writer.write(\"# This is the configuration file for Sodium.\\n\");\n             writer.write(\"#\\n\");\n             writer.write(\"# You can find information on editing this file and all the available options here:\\n\");"
  },
  {
    "sha": "f5282bdcd7aa263ab236a0f927d92ce5634ae5d8",
    "filename": "src/main/java/me/jellysquid/mods/sodium/common/util/PathUtil.java",
    "status": "added",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/common/util/PathUtil.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/common/util/PathUtil.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/common/util/PathUtil.java?ref=7332b4d080b08bbfc39196fb6b2d64d884cb870c",
    "patch": "@@ -0,0 +1,43 @@\n+package me.jellysquid.mods.sodium.common.util;\n+\n+import java.nio.file.Path;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.util.Locale;\n+\n+import static java.time.temporal.ChronoField.*;\n+\n+public class PathUtil {\n+    /**\n+     * A variant of {@link DateTimeFormatter#ISO_LOCAL_DATE_TIME} that is:\n+     * - Safe for file names (IE doesn't contain colons).\n+     * - More compact (uses {@link DateTimeFormatter#BASIC_ISO_DATE}'s format for date component and a similar format for time component).\n+     */\n+    private static final DateTimeFormatter ISO_LOCAL_DATE_TIME_SAFE = new DateTimeFormatterBuilder()\n+            .parseCaseInsensitive().parseStrict()\n+            .appendValue(YEAR, 4)\n+            .appendValue(MONTH_OF_YEAR, 2)\n+            .appendValue(DAY_OF_MONTH, 2)\n+            .appendLiteral('T')\n+            .appendValue(HOUR_OF_DAY, 2)\n+            .appendValue(MINUTE_OF_HOUR, 2)\n+            .optionalStart()\n+            .appendValue(SECOND_OF_MINUTE, 2)\n+            .optionalStart()\n+            .appendLiteral('N')\n+            .appendFraction(NANO_OF_SECOND, 0, 9, false)\n+            .toFormatter(Locale.ROOT);\n+\n+    /**\n+     * Resolves a timestamped sibling of the base path - {@code \"{base}-{tag}-{timestamp}\"}.\n+     * @param base Base path\n+     * @param tag Tag to add to sibling's name\n+     * @return Sibling path\n+     */\n+    public static Path resolveTimestampedSibling(Path base, String tag) {\n+        return base.resolveSibling(base.getFileName().toString()\n+                + \"-\" + tag\n+                + \"-\" + LocalDateTime.now().format(ISO_LOCAL_DATE_TIME_SAFE));\n+    }\n+}"
  },
  {
    "sha": "240a62ef26bd6d613b30121ee779c56f365e4ce0",
    "filename": "src/main/java/me/jellysquid/mods/sodium/mixin/SodiumMixinPlugin.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/CaffeineMC/sodium-fabric/blob/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/mixin/SodiumMixinPlugin.java",
    "raw_url": "https://github.com/CaffeineMC/sodium-fabric/raw/7332b4d080b08bbfc39196fb6b2d64d884cb870c/src/main/java/me/jellysquid/mods/sodium/mixin/SodiumMixinPlugin.java",
    "contents_url": "https://api.github.com/repos/CaffeineMC/sodium-fabric/contents/src/main/java/me/jellysquid/mods/sodium/mixin/SodiumMixinPlugin.java?ref=7332b4d080b08bbfc39196fb6b2d64d884cb870c",
    "patch": "@@ -2,13 +2,13 @@\n \n import me.jellysquid.mods.sodium.common.config.Option;\n import me.jellysquid.mods.sodium.common.config.SodiumConfig;\n+import net.fabricmc.loader.api.FabricLoader;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.objectweb.asm.tree.ClassNode;\n import org.spongepowered.asm.mixin.extensibility.IMixinConfigPlugin;\n import org.spongepowered.asm.mixin.extensibility.IMixinInfo;\n \n-import java.io.File;\n import java.util.List;\n import java.util.Set;\n \n@@ -22,9 +22,9 @@\n     @Override\n     public void onLoad(String mixinPackage) {\n         try {\n-            this.config = SodiumConfig.load(new File(\"./config/sodium-mixins.properties\"));\n+            this.config = SodiumConfig.load(FabricLoader.getInstance().getConfigDir().resolve(\"sodium-mixins.properties\").normalize());\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Could not load configuration file for Sodium\", e);\n+            logger.error(\"Could not load configuration file for Sodium\", e);\n         }\n \n         this.logger.info(\"Loaded configuration file for Sodium: {} options available, {} override(s) found\","
  }
]
