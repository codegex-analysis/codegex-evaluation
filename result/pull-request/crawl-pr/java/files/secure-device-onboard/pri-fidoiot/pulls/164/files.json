[
  {
    "sha": "ee7128a5155cf34aee19d69f3ddff81e9873e105",
    "filename": "component-samples/http-device-sample/src/main/java/org/fido/iot/sample/Device.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/component-samples/http-device-sample/src/main/java/org/fido/iot/sample/Device.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/component-samples/http-device-sample/src/main/java/org/fido/iot/sample/Device.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/component-samples/http-device-sample/src/main/java/org/fido/iot/sample/Device.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -474,6 +474,7 @@ protected To2ClientStorage getStorage() {\n       to2Urls = RendezvousInfoDecoder.getHttpDirectives(rvi, Const.RV_DEV_ONLY);\n     } else {\n       to2Urls = RendezvousBlobDecoder.getHttpDirectives(signedBlob.get());\n+      to2Service.setTo1d(signedBlob.get());\n     }\n \n     MessageDispatcher to2Dispatcher = new MessageDispatcher() {"
  },
  {
    "sha": "d9227f90dcd242c2a4cdb963689a2303f0a62b75",
    "filename": "protocol/src/main/java/org/fido/iot/protocol/To2ClientService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/main/java/org/fido/iot/protocol/To2ClientService.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/main/java/org/fido/iot/protocol/To2ClientService.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/main/java/org/fido/iot/protocol/To2ClientService.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -30,6 +30,7 @@\n   protected byte[] nonce7;\n   protected byte[] kexA;\n   protected Composite ownState;\n+  private Composite to1d;\n   private boolean rvBypass;\n \n   protected Enumeration<Composite> dviEnumerator;\n@@ -48,6 +49,10 @@ protected Composite getHeaderHash() {\n     return hdrHash;\n   }\n \n+  public void setTo1d(Composite to1d) {\n+    this.to1d = to1d;\n+  }\n+\n   protected void verifyEntry(int entryNum, Composite entry) {\n \n     if (entryNum != this.entryNum) {\n@@ -186,7 +191,11 @@ protected void doProveHeader(Composite request, Composite reply) {\n \n     // Skipping to1d verification, if the RVBypass flag is set.\n     if (!rvBypass) {\n-      //TODO: verify to1d\n+      //CUPHOwnerPubKey must be able to verify the signature of the TO1d signedBlob message\n+      if (!getCryptoService().verify(verifyKey, to1d, null, null, null)) {\n+        //If T01d signature does not verify, Then T02 should fail with error message.\n+        throw new InvalidMessageException();\n+      }\n     }\n \n     //calculate and set hdrHash"
  },
  {
    "sha": "d73245ad263963ca201980edc623cce5c32b9ea5",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/BaseTemplate.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/BaseTemplate.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/BaseTemplate.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/BaseTemplate.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -7,6 +7,8 @@\n \n import java.net.URI;\n import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.security.PublicKey;\n import java.security.SecureRandom;\n import java.util.UUID;\n import org.fido.iot.certutils.PemLoader;\n@@ -25,6 +27,8 @@\n \n   protected static final String RV_BLOB = \"http://localhost:8042?ipaddress=127.0.0.1\";\n \n+  protected static final long responseWait = 3600;\n+\n   protected static String mfgKeyPem = \"-----BEGIN CERTIFICATE-----\\n\"\n       + \"MIIBIjCByaADAgECAgkApNMDrpgPU/EwCgYIKoZIzj0EAwIwDTELMAkGA1UEAwwC\\n\"\n       + \"Q0EwIBcNMTkwNDI0MTQ0NjQ3WhgPMjA1NDA0MTUxNDQ2NDdaMA0xCzAJBgNVBAMM\\n\"\n@@ -98,6 +102,7 @@\n \n   protected Composite voucher;\n   protected Composite deviceCreds;\n+  protected Composite to01Payload;\n \n   protected Composite createTestVoucher() {\n     Composite voucher = Composite.newArray();\n@@ -231,6 +236,33 @@ protected void failed(Exception e) {\n \n   }\n \n+  protected Composite generateSignedBlob(String key) {\n+\n+    CryptoService cs = new CryptoService();\n+    Composite to0d = Composite.newArray()\n+        .set(Const.TO0D_VOUCHER, voucher)\n+        .set(Const.TO0D_WAIT_SECONDS, responseWait)\n+        .set(Const.TO0D_NONCE3, cs.getRandomBytes(Const.NONCE16_SIZE));\n+\n+    Composite to1dBlob = unsignedRedirect;\n+    to01Payload = Composite.newArray()\n+        .set(Const.TO1D_RV, to1dBlob);\n+\n+    Composite ovHeader = voucher.getAsComposite(Const.OV_HEADER);\n+    PublicKey mfgPublic = cryptoService.decode(ovHeader.getAsComposite(Const.OVH_PUB_KEY));\n+    int hashType = cryptoService.getCompatibleHashType(mfgPublic);\n+    Composite hash = cryptoService.hash(hashType, to0d.toBytes());\n+\n+    to01Payload.set(Const.TO1D_TO0D_HASH, hash);\n+\n+    Composite signedBlob = null;\n+    signedBlob = cs.sign(\n+        PemLoader.loadPrivateKey(key), to01Payload.toBytes(),\n+        cs.getCoseAlgorithm((Key) PemLoader.loadPrivateKey(key)));\n+\n+    return signedBlob;\n+  }\n+\n   protected void runClient(DispatchResult dr) throws Exception {\n \n     MessageDispatcher dispatcher = clientDispatcher;"
  },
  {
    "sha": "b9d09a442a242893f20fd802ccfddfb4cda09d0d",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/To2AsymkexTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2AsymkexTest.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2AsymkexTest.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/To2AsymkexTest.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -5,6 +5,8 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.io.IOException;\n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.util.ArrayList;\n@@ -222,7 +224,7 @@ public void failed(Composite request, Composite reply) {\n       }\n     };\n \n-    clientService = new To2ClientService() {\n+    To2ClientService to2Service = new To2ClientService() {\n       @Override\n       protected To2ClientStorage getStorage() {\n         return clientStorage;\n@@ -234,6 +236,9 @@ public CryptoService getCryptoService() {\n       }\n     };\n \n+    to2Service.setTo1d(generateSignedBlob(rsaKeyPem));\n+    clientService = to2Service;\n+\n     To2ServerStorage serverStorage = new To2ServerStorage() {\n       @Override\n       public PrivateKey getOwnerSigningKey(PublicKey key) {"
  },
  {
    "sha": "97fbcbc01945f4a09eb2db4ff63322ce29ca3452",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/To2Cbc128Test.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Cbc128Test.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Cbc128Test.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/To2Cbc128Test.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -5,6 +5,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.util.ArrayList;\n@@ -165,7 +166,7 @@ public void failed(Composite request, Composite reply) {\n       }\n     };\n \n-    clientService = new To2ClientService() {\n+    To2ClientService to2Service = new To2ClientService() {\n       @Override\n       protected To2ClientStorage getStorage() {\n         return clientStorage;\n@@ -177,6 +178,9 @@ public CryptoService getCryptoService() {\n       }\n     };\n \n+    to2Service.setTo1d(generateSignedBlob(ownerKeyPem));\n+    clientService = to2Service;\n+\n     To2ServerStorage serverStorage = new To2ServerStorage() {\n       @Override\n       public PrivateKey getOwnerSigningKey(PublicKey key) {"
  },
  {
    "sha": "061122103fe826208198879ead2404fae381efa6",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/To2Cbc256Test.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Cbc256Test.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Cbc256Test.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/To2Cbc256Test.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -5,6 +5,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.util.ArrayList;\n@@ -165,7 +166,7 @@ public void failed(Composite request, Composite reply) {\n       }\n     };\n \n-    clientService = new To2ClientService() {\n+    To2ClientService to2Service = new To2ClientService() {\n       @Override\n       protected To2ClientStorage getStorage() {\n         return clientStorage;\n@@ -177,6 +178,9 @@ public CryptoService getCryptoService() {\n       }\n     };\n \n+    to2Service.setTo1d(generateSignedBlob(ownerKeyPem));\n+    clientService = to2Service;\n+\n     To2ServerStorage serverStorage = new To2ServerStorage() {\n       @Override\n       public PrivateKey getOwnerSigningKey(PublicKey key) {"
  },
  {
    "sha": "368708276a8ef081559aa62ce369b5204cd4114d",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/To2Ccm128Test.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Ccm128Test.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Ccm128Test.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/To2Ccm128Test.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -5,6 +5,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.util.ArrayList;\n@@ -165,7 +166,7 @@ public void failed(Composite request, Composite reply) {\n       }\n     };\n \n-    clientService = new To2ClientService() {\n+    To2ClientService to2Service = new To2ClientService() {\n       @Override\n       protected To2ClientStorage getStorage() {\n         return clientStorage;\n@@ -177,6 +178,9 @@ public CryptoService getCryptoService() {\n       }\n     };\n \n+    to2Service.setTo1d(generateSignedBlob(ownerKeyPem));\n+    clientService = to2Service;\n+\n     To2ServerStorage serverStorage = new To2ServerStorage() {\n       @Override\n       public PrivateKey getOwnerSigningKey(PublicKey key) {"
  },
  {
    "sha": "de708ddffc6ec7294130d65cd3deb7c152c5b528",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/To2Ccm256Test.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Ccm256Test.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Ccm256Test.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/To2Ccm256Test.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -5,6 +5,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.util.ArrayList;\n@@ -165,7 +166,7 @@ public void failed(Composite request, Composite reply) {\n       }\n     };\n \n-    clientService = new To2ClientService() {\n+    To2ClientService to2Service = new To2ClientService() {\n       @Override\n       protected To2ClientStorage getStorage() {\n         return clientStorage;\n@@ -177,6 +178,9 @@ public CryptoService getCryptoService() {\n       }\n     };\n \n+    to2Service.setTo1d(generateSignedBlob(ownerKeyPem));\n+    clientService = to2Service;\n+\n     To2ServerStorage serverStorage = new To2ServerStorage() {\n       @Override\n       public PrivateKey getOwnerSigningKey(PublicKey key) {"
  },
  {
    "sha": "25171ec6ed1bcd1332d16d2b009a82fbbfc2a10e",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/To2EcRsaTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2EcRsaTest.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2EcRsaTest.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/To2EcRsaTest.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -5,6 +5,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.security.Security;\n@@ -236,7 +237,7 @@ public boolean isDeviceCredReuseSupported() {\n       }\n     };\n \n-    clientService = new To2ClientService() {\n+    To2ClientService to2Service = new To2ClientService() {\n       @Override\n       public CryptoService getCryptoService() {\n         return cryptoService;\n@@ -248,6 +249,9 @@ protected To2ClientStorage getStorage() {\n       }\n     };\n \n+    to2Service.setTo1d(generateSignedBlob(RSA3K_PEM));\n+    clientService = to2Service;\n+\n     To2ServerStorage serverStorage = new To2ServerStorage() {\n       @Override\n       public void discardReplacementOwnerKey() {"
  },
  {
    "sha": "0c6db196937063e1c51500fd13925eb12fbf03fc",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/To2Gcm128Test.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Gcm128Test.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Gcm128Test.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/To2Gcm128Test.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -5,6 +5,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.util.ArrayList;\n@@ -165,7 +166,7 @@ public void failed(Composite request, Composite reply) {\n       }\n     };\n \n-    clientService = new To2ClientService() {\n+    To2ClientService to2Service = new To2ClientService() {\n       @Override\n       protected To2ClientStorage getStorage() {\n         return clientStorage;\n@@ -177,6 +178,9 @@ public CryptoService getCryptoService() {\n       }\n     };\n \n+    to2Service.setTo1d(generateSignedBlob(ownerKeyPem));\n+    clientService = to2Service;\n+\n     To2ServerStorage serverStorage = new To2ServerStorage() {\n       @Override\n       public PrivateKey getOwnerSigningKey(PublicKey key) {"
  },
  {
    "sha": "a57ab43329356978267a3c6d9fbb5499948817ef",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/To2Gcm256Test.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Gcm256Test.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Gcm256Test.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/To2Gcm256Test.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -5,6 +5,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.util.ArrayList;\n@@ -165,7 +166,7 @@ public void failed(Composite request, Composite reply) {\n       }\n     };\n \n-    clientService = new To2ClientService() {\n+    To2ClientService to2Service = new To2ClientService() {\n       @Override\n       protected To2ClientStorage getStorage() {\n         return clientStorage;\n@@ -177,6 +178,9 @@ public CryptoService getCryptoService() {\n       }\n     };\n \n+    to2Service.setTo1d(generateSignedBlob(ownerKeyPem));\n+    clientService = to2Service;\n+\n     To2ServerStorage serverStorage = new To2ServerStorage() {\n       @Override\n       public PrivateKey getOwnerSigningKey(PublicKey key) {"
  },
  {
    "sha": "88f8a9284bc74117f7e7dc85e096851001ae06e2",
    "filename": "protocol/src/test/java/org/fido/iot/protocol/To2Test.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Test.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/protocol/src/test/java/org/fido/iot/protocol/To2Test.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/protocol/src/test/java/org/fido/iot/protocol/To2Test.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -5,6 +5,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.util.ArrayList;\n@@ -166,7 +167,7 @@ public void failed(Composite request, Composite reply) {\n       }\n     };\n \n-    clientService = new To2ClientService() {\n+    To2ClientService to2Service = new To2ClientService() {\n       @Override\n       protected To2ClientStorage getStorage() {\n         return clientStorage;\n@@ -178,6 +179,9 @@ public CryptoService getCryptoService() {\n       }\n     };\n \n+    to2Service.setTo1d(generateSignedBlob(ownerKeyPem));\n+    clientService = to2Service;\n+\n     To2ServerStorage serverStorage = new To2ServerStorage() {\n       @Override\n       public PrivateKey getOwnerSigningKey(PublicKey key) {"
  },
  {
    "sha": "f5b164fee845a438faf2aba3a47d3932f0064921",
    "filename": "util/storage-samples/storage-owner-sample/src/test/java/org/fido/iot/storage/To2StorageTest.java",
    "status": "modified",
    "additions": 31,
    "deletions": 1,
    "changes": 32,
    "blob_url": "https://github.com/secure-device-onboard/pri-fidoiot/blob/6e1da6451878906f3f68ebc7125a3d8136f0d893/util/storage-samples/storage-owner-sample/src/test/java/org/fido/iot/storage/To2StorageTest.java",
    "raw_url": "https://github.com/secure-device-onboard/pri-fidoiot/raw/6e1da6451878906f3f68ebc7125a3d8136f0d893/util/storage-samples/storage-owner-sample/src/test/java/org/fido/iot/storage/To2StorageTest.java",
    "contents_url": "https://api.github.com/repos/secure-device-onboard/pri-fidoiot/contents/util/storage-samples/storage-owner-sample/src/test/java/org/fido/iot/storage/To2StorageTest.java?ref=6e1da6451878906f3f68ebc7125a3d8136f0d893",
    "patch": "@@ -11,6 +11,7 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.security.Key;\n import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.sql.SQLException;\n@@ -22,6 +23,7 @@\n import java.util.function.Supplier;\n import javax.sql.DataSource;\n import org.apache.commons.dbcp2.BasicDataSource;\n+import org.fido.iot.protocol.RendezvousBlobDecoder;\n import org.fido.iot.sample.DeviceServiceInfoModule;\n import org.fido.iot.sample.DeviceServiceInfoSequence;\n import org.fido.iot.serviceinfo.ServiceInfo;\n@@ -161,7 +163,9 @@\n       + \"  echo \\\"ServiceInfo file transmission failed.\\\" > result.txt\\r\\n\"\n       + \"fi\\r\\n\";\n \n-   private static final String fileContent = \"sample file\";\n+  private static final String fileContent = \"sample file\";\n+  private static final String to1dRV = \"http://localhost:8042?ipaddress=127.0.0.1\";\n+  protected static final long responseWait = 3600;\n \n   String activateMod = \"true\";\n   String packageName = \"linux64.sh\";\n@@ -378,6 +382,7 @@ public String getMaxOwnerServiceInfoMtuSz() {\n       public boolean isDeviceCredReuseSupported() {\n         return true;\n       }\n+\n     };\n \n     To2ClientService to2ClientService = new To2ClientService() {\n@@ -392,6 +397,31 @@ public CryptoService getCryptoService() {\n       }\n     };\n \n+    Composite to0d = Composite.newArray()\n+        .set(Const.TO0D_VOUCHER, VOUCHER)\n+        .set(Const.TO0D_WAIT_SECONDS, responseWait)\n+        .set(Const.TO0D_NONCE3, cs.getRandomBytes(Const.NONCE16_SIZE));\n+\n+    Composite unsignedRedirect = RendezvousBlobDecoder.decode(to1dRV);\n+    Composite to1dBlob = unsignedRedirect;\n+    Composite to01Payload = Composite.newArray()\n+        .set(Const.TO1D_RV, to1dBlob);\n+\n+    Composite voucher = Composite.fromObject(VOUCHER);\n+    Composite ovHeader = voucher.getAsComposite(Const.OV_HEADER);\n+    PublicKey publicKey = cs.decode(ovHeader.getAsComposite(Const.OVH_PUB_KEY));\n+    int hashType = cs.getCompatibleHashType(publicKey);\n+    Composite hash = cs.hash(hashType, to0d.toBytes());\n+\n+    to01Payload.set(Const.TO1D_TO0D_HASH, hash);\n+\n+    Composite signedBlob = null;\n+    signedBlob = cs.sign(\n+        PemLoader.loadPrivateKey(ownerKeyPem), to01Payload.toBytes(),\n+        cs.getCoseAlgorithm((Key) PemLoader.loadPrivateKey(ownerKeyPem)));\n+\n+    to2ClientService.setTo1d(signedBlob);\n+\n     MessageDispatcher clientDispatcher = new MessageDispatcher() {\n       @Override\n       protected MessagingService getMessagingService(Composite request) {"
  }
]
