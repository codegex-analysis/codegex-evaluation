[
  {
    "sha": "27497db5fde35a0d63f245c1301b736fdfa424d9",
    "filename": "src/main/java/com/kodilla/ecommercee/domain/Cart.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/hubert-ros/project-jdp-2102-03/blob/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/main/java/com/kodilla/ecommercee/domain/Cart.java",
    "raw_url": "https://github.com/hubert-ros/project-jdp-2102-03/raw/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/main/java/com/kodilla/ecommercee/domain/Cart.java",
    "contents_url": "https://api.github.com/repos/hubert-ros/project-jdp-2102-03/contents/src/main/java/com/kodilla/ecommercee/domain/Cart.java?ref=a4279b22279eb7bbf69ab00ebbdc985eb25aeb27",
    "patch": "@@ -5,10 +5,6 @@\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n-import javax.persistence.*;\n-import javax.validation.constraints.NotNull;\n-import lombok.*;\n-\n import javax.persistence.*;\n import java.math.BigDecimal;\n import java.util.ArrayList;\n@@ -41,6 +37,10 @@\n \n         @Column(name = \"VALUE\")\n         private BigDecimal value;\n+\n+        public Cart(BigDecimal value) {\n+                this.value = value;\n+        }\n }\n \n "
  },
  {
    "sha": "81abf95490779f0f14e6604a479bf9c9cc6d67ac",
    "filename": "src/main/java/com/kodilla/ecommercee/domain/Group.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/hubert-ros/project-jdp-2102-03/blob/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/main/java/com/kodilla/ecommercee/domain/Group.java",
    "raw_url": "https://github.com/hubert-ros/project-jdp-2102-03/raw/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/main/java/com/kodilla/ecommercee/domain/Group.java",
    "contents_url": "https://api.github.com/repos/hubert-ros/project-jdp-2102-03/contents/src/main/java/com/kodilla/ecommercee/domain/Group.java?ref=a4279b22279eb7bbf69ab00ebbdc985eb25aeb27",
    "patch": "@@ -35,4 +35,8 @@ public Group(@NotNull String name, Set<Product> products) {\n         this.name = name;\n         this.products = products;\n     }\n+\n+    public Group(String name) {\n+        this.name = name;\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "e10f3e484edb8f502b9f2e6896e30af12f60d919",
    "filename": "src/main/java/com/kodilla/ecommercee/domain/Product.java",
    "status": "modified",
    "additions": 5,
    "deletions": 9,
    "changes": 14,
    "blob_url": "https://github.com/hubert-ros/project-jdp-2102-03/blob/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/main/java/com/kodilla/ecommercee/domain/Product.java",
    "raw_url": "https://github.com/hubert-ros/project-jdp-2102-03/raw/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/main/java/com/kodilla/ecommercee/domain/Product.java",
    "contents_url": "https://api.github.com/repos/hubert-ros/project-jdp-2102-03/contents/src/main/java/com/kodilla/ecommercee/domain/Product.java?ref=a4279b22279eb7bbf69ab00ebbdc985eb25aeb27",
    "patch": "@@ -1,8 +1,5 @@\n package com.kodilla.ecommercee.domain;\n \n-\n-import lombok.*;\n-\n import javax.persistence.*;\n import javax.validation.constraints.NotNull;\n import java.math.BigDecimal;\n@@ -11,19 +8,13 @@\n import java.util.List;\n import java.util.Set;\n \n-\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n-import javax.persistence.*;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n @Entity\n @Table(name = \"PRODUCTS\")\n-\n @NoArgsConstructor\n @AllArgsConstructor\n @Getter\n@@ -51,4 +42,9 @@\n \n     private List<Cart> carts = new ArrayList<>();\n \n+    public Product(@NotNull String productName, @NotNull String productDescription, @NotNull BigDecimal price) {\n+        this.productName = productName;\n+        this.productDescription = productDescription;\n+        this.price = price;\n+    }\n }"
  },
  {
    "sha": "851f785a4388085629fc6a66bd6d07df940928aa",
    "filename": "src/main/java/com/kodilla/ecommercee/exception/ResourceNotExistException.java",
    "status": "added",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/hubert-ros/project-jdp-2102-03/blob/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/main/java/com/kodilla/ecommercee/exception/ResourceNotExistException.java",
    "raw_url": "https://github.com/hubert-ros/project-jdp-2102-03/raw/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/main/java/com/kodilla/ecommercee/exception/ResourceNotExistException.java",
    "contents_url": "https://api.github.com/repos/hubert-ros/project-jdp-2102-03/contents/src/main/java/com/kodilla/ecommercee/exception/ResourceNotExistException.java?ref=a4279b22279eb7bbf69ab00ebbdc985eb25aeb27",
    "patch": "@@ -0,0 +1,7 @@\n+package com.kodilla.ecommercee.exception;\n+\n+public class ResourceNotExistException extends Exception {\n+    public ResourceNotExistException(String message) {\n+        super(message);\n+    }\n+}"
  },
  {
    "sha": "d20ee3a5a201d4e85bf219f35bd78bb5587359b4",
    "filename": "src/test/java/com/kodilla/ecommercee/domain/CartTestSuite.java",
    "status": "added",
    "additions": 205,
    "deletions": 0,
    "changes": 205,
    "blob_url": "https://github.com/hubert-ros/project-jdp-2102-03/blob/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/test/java/com/kodilla/ecommercee/domain/CartTestSuite.java",
    "raw_url": "https://github.com/hubert-ros/project-jdp-2102-03/raw/a4279b22279eb7bbf69ab00ebbdc985eb25aeb27/src/test/java/com/kodilla/ecommercee/domain/CartTestSuite.java",
    "contents_url": "https://api.github.com/repos/hubert-ros/project-jdp-2102-03/contents/src/test/java/com/kodilla/ecommercee/domain/CartTestSuite.java?ref=a4279b22279eb7bbf69ab00ebbdc985eb25aeb27",
    "patch": "@@ -0,0 +1,205 @@\n+package com.kodilla.ecommercee.domain;\n+\n+import com.kodilla.ecommercee.exception.ResourceNotExistException;\n+import com.kodilla.ecommercee.repository.CartRepository;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import javax.transaction.Transactional;\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@Transactional\n+public class CartTestSuite {\n+\n+    @Autowired\n+    private CartRepository cartRepository;\n+\n+    @Test\n+    public void shouldCreateEmptyCart() {\n+        //Given\n+        Cart cart = new Cart(new BigDecimal(\"0\"));\n+        cartRepository.save(cart);\n+        long cartId = cart.getCartId();\n+\n+        //When\n+        Optional<Cart> savedCart = cartRepository.findById(cartId);\n+        Cart cart1 = savedCart.orElse(new Cart(new BigDecimal(\"0\")));\n+        List<Product> products = cart1.getProducts();\n+\n+        //Then\n+        BigDecimal value = new BigDecimal(\"0\");\n+\n+        assertNotEquals(0, cartId);\n+        assertEquals(0, products.size());\n+        assertEquals(value, cart.getValue());\n+    }\n+\n+    @Test\n+    public void shouldAddOneProduct() {\n+        //Given\n+        Group group = new Group(\"Toys\");\n+        Product product = new Product(\"Teddy Bear\", \"little plush toy\", new BigDecimal(\"10\"));\n+        group.getProducts().add(product);\n+        product.getGroupsOfProduct().add(group);\n+\n+        Cart cart = new Cart(new BigDecimal(\"0\"));\n+        cart.getProducts().add(product);\n+        cart.setValue(new BigDecimal(\"10\"));\n+\n+        cartRepository.save(cart);\n+        long cartId = cart.getCartId();\n+\n+        //When\n+        Optional<Cart> savedCart = cartRepository.findById(cartId);\n+        Cart cart1 = savedCart.orElse(new Cart(new BigDecimal(\"0\")));\n+        List<Product> products = cart1.getProducts();\n+\n+        //Then\n+        assertNotEquals(0, cartId);\n+        assertEquals(1, products.size());\n+        assertEquals(product, cart.getProducts().get(0));\n+    }\n+\n+    @Test\n+    public void shouldAddSeveralOfTheSameProductsToCart(){\n+        //Given\n+        Group group = new Group(\"Toys\");\n+        Product product = new Product(\"blocks\", \"wooden blocks\", new BigDecimal(\"4.50\"));\n+        group.getProducts().add(product);\n+        product.getGroupsOfProduct().add(group);\n+\n+        Cart cart = new Cart();\n+        cart.getProducts().add(product);\n+        cart.getProducts().add(product);\n+        cart.getProducts().add(product);\n+        cart.getProducts().add(product);\n+        cart.getProducts().add(product);\n+        cart.setValue(new BigDecimal(\"22.50\"));\n+\n+        cartRepository.save(cart);\n+        long cartId = cart.getCartId();\n+\n+        //When\n+        Optional<Cart> savedCart = cartRepository.findById(cartId);\n+        Cart cart1 = savedCart.orElse(new Cart(new BigDecimal(\"0\")));\n+        List<Product> products = cart1.getProducts();\n+\n+        //Then\n+        assertNotEquals(0, cartId);\n+        assertEquals(5, products.size());\n+        assertEquals(cart.getProducts().get(0), cart.getProducts().get(3));\n+        assertEquals(\"blocks\", cart.getProducts().get(0).getProductName());\n+    }\n+\n+    @Test\n+    public void  shouldDifferentiateBetweenProductsWithSameNameDifferentPrice() {\n+        //Given\n+        Group group = new Group(\"Toys\");\n+        Product product1 = new Product(\"blocks\", \"wooden blocks\", new BigDecimal(\"4.50\"));\n+        Product product2 = new Product(\"blocks\", \"wooden blocks\", new BigDecimal(\"20\"));\n+        group.getProducts().add(product1);\n+        group.getProducts().add(product2);\n+        product1.getGroupsOfProduct().add(group);\n+        product2.getGroupsOfProduct().add(group);\n+\n+        Cart cart = new Cart();\n+        cart.getProducts().add(product1);\n+        cart.getProducts().add(product2);\n+        cart.setValue(new BigDecimal(\"24.50\"));\n+        cartRepository.save(cart);\n+        long cartId = cart.getCartId();\n+\n+        //When\n+        Optional<Cart> savedCart = cartRepository.findById(cartId);\n+        Cart cart1 = savedCart.orElse(new Cart(new BigDecimal(\"0\")));\n+        List<Product> products = cart1.getProducts();\n+\n+        //Then\n+        assertNotEquals(0, cartId);\n+        assertEquals(2, products.size());\n+    }\n+\n+    @Test\n+    public void shouldRemoveAllProductsFromCart() {\n+        //Given\n+        Group group = new Group(\"Toys\");\n+        Product product1 = new Product(\"blocks\", \"wooden blocks\", new BigDecimal(\"4.50\"));\n+        Product product2 = new Product(\"blocks\", \"wooden blocks\", new BigDecimal(\"20\"));\n+        Product product3 = new Product(\"Teddy Bear\", \"little plush toy\", new BigDecimal(\"10\"));\n+\n+        group.getProducts().add(product1);\n+        group.getProducts().add(product2);\n+        group.getProducts().add(product3);\n+\n+        product1.getGroupsOfProduct().add(group);\n+        product2.getGroupsOfProduct().add(group);\n+        product3.getGroupsOfProduct().add(group);\n+\n+        Cart cart = new Cart();\n+        cart.getProducts().add(product1);\n+        cart.getProducts().add(product2);\n+        cart.getProducts().add(product3);\n+        cart.setValue(new BigDecimal(\"34.50\"));\n+        List<Product> products = cart.getProducts();\n+        cartRepository.save(cart);\n+        long cartId = cart.getCartId();\n+\n+        //When\n+        Optional<Cart> savedCart = cartRepository.findById(cartId);\n+        Cart cart1 = savedCart.orElseGet(() -> new Cart(new BigDecimal(\"0\")));\n+        List<Product> productsInDatabase = cart1.getProducts();\n+        productsInDatabase.removeAll(products);\n+        cart.setValue(new BigDecimal(\"0\"));\n+\n+        //Then\n+        BigDecimal value = new BigDecimal(\"0\");\n+\n+        assertNotEquals(0, cartId);\n+        assertTrue(products.isEmpty());\n+        assertEquals(value, cart.getValue());\n+    }\n+\n+    @Test\n+    public void shouldRemoveOneProductFromCart() throws ResourceNotExistException {\n+        //Given\n+        Group group = new Group(\"Toys\");\n+        Product product = new Product(\"blocks\", \"wooden blocks\", new BigDecimal(\"4.50\"));\n+        Product product1 = new Product(\"blocks\", \"wooden blocks\", new BigDecimal(\"10\"));\n+        Product product2 = new Product(\"blocks\", \"wooden blocks\", new BigDecimal(\"20\"));\n+        group.getProducts().add(product);\n+        group.getProducts().add(product1);\n+        group.getProducts().add(product2);\n+        product.getGroupsOfProduct().add(group);\n+        product1.getGroupsOfProduct().add(group);\n+        product2.getGroupsOfProduct().add(group);\n+\n+        Cart cart = new Cart();\n+        cart.getProducts().add(product);\n+        cart.getProducts().add(product1);\n+        cart.getProducts().add(product2);\n+        cart.setValue(new BigDecimal(\"34.50\"));\n+\n+        cartRepository.save(cart);\n+        long cartId = cart.getCartId();\n+\n+        //When\n+        Optional<Cart> savedCart = cartRepository.findById(cartId);\n+        Cart cart1 = savedCart.orElseThrow(() -> new ResourceNotExistException(\"The cart does not exist in the database.\"));\n+        List<Product> products = cart1.getProducts();\n+        products.remove(product1);\n+        int cartSize = products.size();\n+\n+        //Then\n+        assertNotEquals(0, cartId);\n+        assertEquals(2, cartSize);\n+    }\n+}"
  }
]
