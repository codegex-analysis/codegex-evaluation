[
  {
    "sha": "fd6dbbd42d34c9f3b8a4d6009e22eaacf9e6937e",
    "filename": "src/main/java/org/gitlab4j/api/RepositoryApi.java",
    "status": "modified",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/gitlab4j/gitlab4j-api/blob/eb9bdb92e87bf56fa7bb399a3665671db5d327e2/src/main/java/org/gitlab4j/api/RepositoryApi.java",
    "raw_url": "https://github.com/gitlab4j/gitlab4j-api/raw/eb9bdb92e87bf56fa7bb399a3665671db5d327e2/src/main/java/org/gitlab4j/api/RepositoryApi.java",
    "contents_url": "https://api.github.com/repos/gitlab4j/gitlab4j-api/contents/src/main/java/org/gitlab4j/api/RepositoryApi.java?ref=eb9bdb92e87bf56fa7bb399a3665671db5d327e2",
    "patch": "@@ -18,6 +18,7 @@\n \n import org.gitlab4j.api.GitLabApi.ApiVersion;\n import org.gitlab4j.api.models.Branch;\n+import org.gitlab4j.api.models.ChangelogPayload;\n import org.gitlab4j.api.models.Commit;\n import org.gitlab4j.api.models.CompareResults;\n import org.gitlab4j.api.models.Contributor;\n@@ -749,4 +750,32 @@ public void deleteMergedBranches(Object projectIdOrPath) throws GitLabApiExcepti\n         delete(Response.Status.NO_CONTENT, null, \"projects\",\n                 getProjectIdOrPath(projectIdOrPath), \"repository\", \"merged_branches\");\n     }\n+\n+    /**\n+     * Generate changelog data based on commits in a repository.\n+     *\n+     * <pre><code>GitLab Endpoint: POST /projects/:id/repository/changelog</code></pre>\n+     *\n+     * @param projectIdOrPath the project in the form of an Integer(ID), String(path), or Project instance\n+     * @param version         the version to generate the changelog for\n+     * @throws GitLabApiException if any exception occurs\n+     */\n+    public void generateChangelog(Object projectIdOrPath, String version) throws GitLabApiException {\n+        generateChangelog(projectIdOrPath, new ChangelogPayload(version));\n+    }\n+\n+    /**\n+     * Generate changelog data based on commits in a repository.\n+     *\n+     * <pre><code>GitLab Endpoint: POST /projects/:id/repository/changelog</code></pre>\n+     *\n+     * @param projectIdOrPath the project in the form of an Integer(ID), String(path), or Project instance\n+     * @param payload         the payload to generate the changelog for\n+     * @throws GitLabApiException if any exception occurs\n+     */\n+    public void generateChangelog(Object projectIdOrPath, ChangelogPayload payload) throws GitLabApiException {\n+        post(Response.Status.OK, payload.getFormData(), \"projects\",\n+                getProjectIdOrPath(projectIdOrPath), \"repository\", \"changelog\");\n+    }\n+\n }"
  },
  {
    "sha": "3fe63a531d02c7a05f42f556c55ac97632df553c",
    "filename": "src/main/java/org/gitlab4j/api/models/ChangelogPayload.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/gitlab4j/gitlab4j-api/blob/eb9bdb92e87bf56fa7bb399a3665671db5d327e2/src/main/java/org/gitlab4j/api/models/ChangelogPayload.java",
    "raw_url": "https://github.com/gitlab4j/gitlab4j-api/raw/eb9bdb92e87bf56fa7bb399a3665671db5d327e2/src/main/java/org/gitlab4j/api/models/ChangelogPayload.java",
    "contents_url": "https://api.github.com/repos/gitlab4j/gitlab4j-api/contents/src/main/java/org/gitlab4j/api/models/ChangelogPayload.java?ref=eb9bdb92e87bf56fa7bb399a3665671db5d327e2",
    "patch": "@@ -0,0 +1,106 @@\n+package org.gitlab4j.api.models;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.gitlab4j.api.GitLabApiForm;\n+import org.gitlab4j.api.utils.ISO8601;\n+import org.gitlab4j.api.utils.JacksonJson;\n+\n+import java.util.Date;\n+\n+public class ChangelogPayload {\n+\n+    private String version;\n+    private String from;\n+    private String to;\n+    private Date date;\n+    private String branch;\n+    private String trailer;\n+    private String file;\n+    private String message;\n+\n+    public ChangelogPayload(String version) {\n+        this.version = version;\n+    }\n+\n+    @JsonIgnore\n+    public GitLabApiForm getFormData() {\n+        return new GitLabApiForm()\n+                .withParam(\"version\", version, true)\n+                .withParam(\"from\", from)\n+                .withParam(\"to\", to)\n+                .withParam(\"date\", ISO8601.dateOnly(date))\n+                .withParam(\"branch\", branch)\n+                .withParam(\"trailer\", trailer)\n+                .withParam(\"file\", file)\n+                .withParam(\"message\", message);\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(String version) {\n+        this.version = version;\n+    }\n+\n+    public String getFrom() {\n+        return from;\n+    }\n+\n+    public void setFrom(String from) {\n+        this.from = from;\n+    }\n+\n+    public String getTo() {\n+        return to;\n+    }\n+\n+    public void setTo(String to) {\n+        this.to = to;\n+    }\n+\n+    public Date getDate() {\n+        return date;\n+    }\n+\n+    public void setDate(Date date) {\n+        this.date = date;\n+    }\n+\n+    public String getBranch() {\n+        return branch;\n+    }\n+\n+    public void setBranch(String branch) {\n+        this.branch = branch;\n+    }\n+\n+    public String getTrailer() {\n+        return trailer;\n+    }\n+\n+    public void setTrailer(String trailer) {\n+        this.trailer = trailer;\n+    }\n+\n+    public String getFile() {\n+        return file;\n+    }\n+\n+    public void setFile(String file) {\n+        this.file = file;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return (JacksonJson.toJsonString(this));\n+    }\n+}"
  }
]
