[
  {
    "sha": "f20edc5f58361f1babaadd2ade8e2c32b28a9b88",
    "filename": "src/main/java/org/apache/nifi/NarMojo.java",
    "status": "modified",
    "additions": 75,
    "deletions": 7,
    "changes": 82,
    "blob_url": "https://github.com/apache/nifi-maven/blob/e55fcd06519cee0e3405374ed7bf4452caf2c720/src/main/java/org/apache/nifi/NarMojo.java",
    "raw_url": "https://github.com/apache/nifi-maven/raw/e55fcd06519cee0e3405374ed7bf4452caf2c720/src/main/java/org/apache/nifi/NarMojo.java",
    "contents_url": "https://api.github.com/repos/apache/nifi-maven/contents/src/main/java/org/apache/nifi/NarMojo.java?ref=e55fcd06519cee0e3405374ed7bf4452caf2c720",
    "patch": "@@ -72,9 +72,11 @@\n import org.codehaus.plexus.archiver.manager.ArchiverManager;\n import org.codehaus.plexus.util.FileUtils;\n import org.codehaus.plexus.util.StringUtils;\n+import org.codehaus.plexus.util.xml.XmlStreamWriter;\n import org.eclipse.aether.RepositorySystemSession;\n \n import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamWriter;\n import java.io.File;\n import java.io.FileOutputStream;\n@@ -111,7 +113,7 @@\n  */\n @Mojo(name = \"nar\", defaultPhase = LifecyclePhase.PACKAGE, threadSafe = true, requiresDependencyResolution = ResolutionScope.RUNTIME)\n public class NarMojo extends AbstractMojo {\n-    private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+    private static final String CONTROLLER_SERVICE_CLASS_NAME = \"org.apache.nifi.controller.ControllerService\";\n     private static final String DOCUMENTATION_WRITER_CLASS_NAME = \"org.apache.nifi.documentation.xml.XmlDocumentationWriter\";\n \n     private static final String[] DEFAULT_EXCLUDES = new String[]{\"**/package.html\"};\n@@ -507,6 +509,7 @@ public void execute() throws MojoExecutionException {\n         }\n \n         makeNar();\n+        makeDocsJar();\n     }\n \n     private File getExtensionsDocumentationFile() {\n@@ -537,7 +540,6 @@ private void generateDocumentation() throws MojoExecutionException {\n             }\n         }\n \n-\n         final File docsFile = getExtensionsDocumentationFile();\n         createDirectory(docsFile.getParentFile());\n \n@@ -550,11 +552,21 @@ private void generateDocumentation() throws MojoExecutionException {\n             try {\n                 xmlWriter.writeStartElement(\"extensionManifest\");\n \n+                // Write NiFi API version\n                 final String nifiApiVersion = extensionClassLoader.getNiFiApiVersion();\n                 xmlWriter.writeStartElement(\"systemApiVersion\");\n                 xmlWriter.writeCharacters(nifiApiVersion);\n                 xmlWriter.writeEndElement();\n \n+                // Write Parent NAR information\n+                xmlWriter.writeStartElement(\"parentNar\");\n+                if (this.narDependencyGroup != null && this.narDependencyId != null && this.narDependencyVersion != null) {\n+                    writeXmlTag(xmlWriter, \"groupId\", narDependencyGroup);\n+                    writeXmlTag(xmlWriter, \"artifactId\", narDependencyId);\n+                    writeXmlTag(xmlWriter, \"version\", narDependencyVersion);\n+                }\n+                xmlWriter.writeEndElement();\n+\n                 xmlWriter.writeStartElement(\"extensions\");\n \n                 final Class<?> docWriterClass;\n@@ -597,6 +609,12 @@ private void generateDocumentation() throws MojoExecutionException {\n         }\n     }\n \n+    private void writeXmlTag(final XMLStreamWriter xmlWriter, final String tagName, final String value) throws XMLStreamException {\n+        xmlWriter.writeStartElement(tagName);\n+        xmlWriter.writeCharacters(value);\n+        xmlWriter.writeEndElement();\n+    }\n+\n     private void writeDocumentation(final Set<ExtensionDefinition> extensionDefinitions, final ExtensionClassLoader classLoader,\n                                     final Class<?> docWriterClass, final XMLStreamWriter xmlWriter, final File additionalDetailsDir)\n         throws InvocationTargetException, NoSuchMethodException, ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {\n@@ -700,9 +718,19 @@ private void writeDocumentation(final ExtensionDefinition extensionDefinition, f\n             }\n \n             final Class<?> serviceDefinitionClass = (Class<?>) serviceDefinition;\n+            if (CONTROLLER_SERVICE_CLASS_NAME.equals(serviceDefinitionClass.getName())) {\n+                continue;\n+            }\n+\n             final ExtensionClassLoader extensionClassLoader = (ExtensionClassLoader) serviceDefinitionClass.getClassLoader();\n             final Artifact narArtifact = extensionClassLoader.getNarArtifact();\n \n+            if (narArtifact == null) {\n+                getLog().warn(\"Could not find NAR Artifact for Controller Service Definition \" + serviceDefinitionClass.getName() +\n+                    \". Documentation may  not show appropriate linkage to Controller Service.\");\n+                continue;\n+            }\n+\n             final ServiceAPIDefinition serviceAPIDefinition = new StandardServiceAPIDefinition(\n                     serviceDefinitionClass.getName(),\n                     narArtifact.getGroupId(),\n@@ -809,15 +837,14 @@ private void createDirectory(final File file) throws MojoExecutionException {\n \n     private void copyDependencies() throws MojoExecutionException {\n         DependencyStatusSets dss = getDependencySets(this.failOnMissingClassifierArtifact);\n-        Set artifacts = dss.getResolvedDependencies();\n+        Set<Artifact> artifacts = dss.getResolvedDependencies();\n \n-        for (Object artifactObj : artifacts) {\n-            copyArtifact((Artifact) artifactObj);\n+        for (Artifact artifact : artifacts) {\n+            copyArtifact(artifact);\n         }\n \n         artifacts = dss.getSkippedDependencies();\n-        for (Object artifactOjb : artifacts) {\n-            Artifact artifact = (Artifact) artifactOjb;\n+        for (Artifact artifact : artifacts) {\n             getLog().debug(artifact.getFile().getName() + \" already exists in destination.\");\n         }\n     }\n@@ -953,6 +980,47 @@ private File getDependenciesDirectory() {\n         return new File(getClassesDirectory(), \"META-INF/bundled-dependencies\");\n     }\n \n+    private void makeDocsJar() throws MojoExecutionException {\n+        final File docsFile = createDocsArchive();\n+        projectHelper.attachArtifact(project, \"jar\", \"nar-docs\", docsFile);\n+    }\n+\n+    private File createDocsArchive() throws MojoExecutionException {\n+        final File outputDirectory = projectBuildDirectory;\n+        final File jarFile = new File(outputDirectory, finalName + \"-docs.jar\");\n+\n+        final MavenArchiver archiver = new MavenArchiver();\n+        archiver.setArchiver(jarArchiver);\n+        archiver.setOutputFile(jarFile);\n+        archive.setForced(forceCreation);\n+\n+        try {\n+            File extensionDocsFile = getExtensionsDocumentationFile();\n+            if (extensionDocsFile.exists()) {\n+                archiver.getArchiver().addFile(extensionDocsFile, \"META-INF/docs/\" + extensionDocsFile.getName());\n+            } else {\n+                getLog().warn(\"NAR will not contain any Extensions' documentation - no META-INF/\" + extensionDocsFile.getName() + \" file found!\");\n+            }\n+\n+            // Add Changelog\n+            final File baseDir = project.getBasedir();\n+            if (baseDir != null) {\n+                final File changeLog = new File(baseDir, \"src/main/resources/changelog.xml\");\n+                if (changeLog.exists()) {\n+                    archiver.getArchiver().addFile(extensionDocsFile, \"META-INF/docs/changelog.xml\");\n+                } else {\n+                    getLog().info(\"Did not find a file at \" + changeLog.getAbsolutePath() + \" so no changelog will be included in the docs artifact\");\n+                }\n+            }\n+\n+            archiver.createArchive(session, project, archive);\n+        } catch (final Exception e) {\n+            throw new MojoExecutionException(\"Failed to generate documentation for nar\", e);\n+        }\n+\n+        return jarFile;\n+    }\n+\n     private void makeNar() throws MojoExecutionException {\n         File narFile = createArchive();\n "
  }
]
