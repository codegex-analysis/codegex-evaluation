[
  {
    "sha": "11278d01fbb5d9ab41c8c35732bb5ee12f21c4da",
    "filename": "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -265,7 +265,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n         }\n         final long entryEnd = entryOffset + currentEntry.getLength();\n         if (len < 0 || offset >= entryEnd) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         final int toRead = (int) Math.min(len, entryEnd - offset);\n         final int ret = this.input.read(b, off, toRead);"
  },
  {
    "sha": "e8bcb5052791704c20c62dff91bf4f226d0c9425",
    "filename": "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -322,7 +322,7 @@ public int read(final byte[] b, final int off, final int len)\n                 throw new IOException(\"CRC Error. Occurred at byte: \"\n                                       + getBytesRead());\n             }\n-            return -1; // EOF for this entry\n+            return IOUtils.EOS; // EOF for this entry\n         }\n         final int tmplength = (int) Math.min(len, this.entry.getSize()\n                 - this.entryBytesRead);"
  },
  {
    "sha": "b04a972d6c06ba5699d518fd1ba001cec3bdd163",
    "filename": "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.archivers.zip.ZipEncoding;\n import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;\n+import org.apache.commons.compress.utils.IOUtils;\n \n import java.io.EOFException;\n import java.io.IOException;\n@@ -467,7 +468,7 @@ public int read(final byte[] buf, int off, int len) throws IOException {\n         int totalRead = 0;\n \n         if (hasHitEOF || isClosed || entryOffset >= entrySize) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n \n         if (active == null) {"
  },
  {
    "sha": "2937645202d50b4a7a7a8216d5088c22f81dfb94",
    "filename": "src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -17,6 +17,8 @@\n  */\n package org.apache.commons.compress.archivers.sevenz;\n \n+import org.apache.commons.compress.utils.IOUtils;\n+\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.ByteBuffer;\n@@ -49,7 +51,7 @@ public int read() throws IOException {\n             }\n             return buffer.get() & 0xff;\n         }\n-        return -1;\n+        return IOUtils.EOS;\n     }\n \n     /**\n@@ -69,7 +71,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n             return 0;\n         }\n         if (bytesRemaining <= 0) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         int bytesToRead = len;\n         if (bytesToRead > bytesRemaining) {"
  },
  {
    "sha": "9ce3d21761f1a4257ee0aa32747cca048077c682",
    "filename": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
    "status": "modified",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -719,7 +719,7 @@ public int read(final byte[] buf, final int offset, int numToRead) throws IOExce\n     \tint totalRead = 0;\n \n         if (isAtEOF() || isDirectory()) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n \n         if (currEntry == null) {\n@@ -728,12 +728,12 @@ public int read(final byte[] buf, final int offset, int numToRead) throws IOExce\n \n         if (!currEntry.isSparse()) {\n             if (entryOffset >= entrySize) {\n-                return -1;\n+                return IOUtils.EOS;\n             }\n         } else {\n             // for sparse entries, there are actually currEntry.getRealSize() bytes to read\n             if (entryOffset >= currEntry.getRealSize()) {\n-                return -1;\n+                return IOUtils.EOS;\n             }\n         }\n \n@@ -780,7 +780,7 @@ private int readSparse(final byte[] buf, final int offset, final int numToRead)\n         }\n \n         if (currentSparseInputStreamIndex >= sparseInputStreams.size()) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n \n         final InputStream currentInputStream = sparseInputStreams.get(currentSparseInputStreamIndex);\n@@ -793,7 +793,7 @@ private int readSparse(final byte[] buf, final int offset, final int numToRead)\n         }\n \n         // if EOF of current input stream is meet, open a new input stream and recursively call read\n-        if (readLen == -1) {\n+        if (readLen == IOUtils.EOS) {\n             currentSparseInputStreamIndex++;\n             return readSparse(buf, offset, numToRead);\n         }\n@@ -803,7 +803,7 @@ private int readSparse(final byte[] buf, final int offset, final int numToRead)\n         if (readLen < numToRead) {\n             currentSparseInputStreamIndex++;\n             final int readLenOfNext = readSparse(buf, offset + readLen, numToRead - readLen);\n-            if (readLenOfNext == -1) {\n+            if (readLenOfNext == IOUtils.EOS) {\n                 return readLen;\n             }\n "
  },
  {
    "sha": "1511f7675a3464f26899874fb4d8b068f4b3cb4f",
    "filename": "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -92,7 +92,7 @@ public int read(final BitStream stream) throws IOException {\n         while (true) {\n             final int bit = stream.nextBit();\n             if (bit == -1) {\n-                return -1;\n+                return IOUtils.EOS;\n             }\n \n             final int childIndex = 2 * currentIndex + 1 + bit;"
  },
  {
    "sha": "2672fcb65a6a920756bd09ea3ab2aca52854c366",
    "filename": "src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -19,6 +19,8 @@\n \n package org.apache.commons.compress.archivers.zip;\n \n+import org.apache.commons.compress.utils.IOUtils;\n+\n /**\n  * Circular byte buffer.\n  *\n@@ -68,7 +70,7 @@ public int get() {\n             readIndex = (readIndex + 1) % size;\n             return value & 0xFF;\n         }\n-        return -1;\n+        return IOUtils.EOS;\n     }\n \n     /**"
  },
  {
    "sha": "bbbfbc467775653ac6a8243f7b621991c0d324ca",
    "filename": "src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -23,6 +23,7 @@\n import java.nio.ByteOrder;\n \n import org.apache.commons.compress.compressors.lzw.LZWInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * Input stream that decompresses ZIP method 1 (unshrinking). A variation of the LZW algorithm, with some twists.\n@@ -96,7 +97,7 @@ protected int decompressNextSymbol() throws IOException {\n         //\n         final int code = readNextCode();\n         if (code < 0) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         if (code != getClearCode()) {\n             boolean addedUnfinishedEntry = false;"
  },
  {
    "sha": "2bc3fc1bddedb8e2ebf3166b3aac16a06ece1b3e",
    "filename": "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -32,6 +32,7 @@\n import org.apache.commons.compress.compressors.CompressorInputStream;\n import org.apache.commons.compress.utils.BitInputStream;\n import org.apache.commons.compress.utils.CloseShieldFilterInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n import org.apache.commons.compress.utils.InputStreamStatistics;\n \n /**\n@@ -208,7 +209,7 @@ private void makeMaps() {\n     private int read0() throws IOException {\n         switch (currentState) {\n         case EOF:\n-            return -1;\n+            return IOUtils.EOS;\n \n         case START_BLOCK_STATE:\n             return setupBlock();\n@@ -751,7 +752,7 @@ private int getAndMoveToFrontDecode0() throws IOException {\n \n     private int setupBlock() throws IOException {\n         if (currentState == EOF || this.data == null) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n \n         final int[] cftab = this.data.cftab;"
  },
  {
    "sha": "73a8c3d09aa4649bcbe2fb4df88dea9f88c44059",
    "filename": "src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -21,6 +21,7 @@\n import java.io.InputStream;\n \n import org.apache.commons.compress.compressors.CompressorInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n import org.apache.commons.compress.utils.InputStreamStatistics;\n \n import static org.apache.commons.compress.utils.IOUtils.closeQuietly;\n@@ -61,8 +62,8 @@ public int read() throws IOException {\n             switch (r) {\n                 case 1:\n                     return oneByte[0] & 0xFF;\n-                case -1:\n-                    return -1;\n+                case IOUtils.EOS:\n+                    return IOUtils.EOS;\n                 case 0:\n                     continue;\n                 default:"
  },
  {
    "sha": "07da649a4613f58c08cbd99f04bd23ed94d28242",
    "filename": "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -290,7 +290,7 @@ public int read(final byte[] b, int off, int len) throws IOException {\n             return 0;\n         }\n         if (endReached) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n \n         int size = 0;"
  },
  {
    "sha": "88cce8da773118234d0a1c04354abd297b66103d",
    "filename": "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -23,6 +23,7 @@\n \n import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;\n import org.apache.commons.compress.utils.ByteUtils;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * CompressorInputStream for the LZ4 block format.\n@@ -66,7 +67,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n         }\n         switch (state) {\n         case EOF:\n-            return -1;\n+            return IOUtils.EOS;\n         case NO_BLOCK: // NOSONAR - fallthrough intended\n             readSizes();\n             /*FALLTHROUGH*/\n@@ -79,7 +80,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n         case LOOKING_FOR_BACK_REFERENCE: // NOSONAR - fallthrough intended\n             if (!initializeBackReference()) {\n                 state = State.EOF;\n-                return -1;\n+                return IOUtils.EOS;\n             }\n             /*FALLTHROUGH*/\n         case IN_BACK_REFERENCE:"
  },
  {
    "sha": "a4fb5d5ff1f98d1e1e40617a1f5a033993c5f6bd",
    "filename": "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -138,7 +138,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n             return 0;\n         }\n         if (endReached) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         int r = readOnce(b, off, len);\n         if (r == -1) {\n@@ -315,7 +315,7 @@ private int readOneByte() throws IOException {\n             count(1);\n             return b & 0xFF;\n         }\n-        return -1;\n+        return IOUtils.EOS;\n     }\n \n     private int readOnce(final byte[] b, final int off, final int len) throws IOException {"
  },
  {
    "sha": "2f22d13e36e2d7ca82f9aa694a74cf47a173996f",
    "filename": "src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -359,6 +359,6 @@ protected final int readOneByte() throws IOException {\n             count(1);\n             return b & 0xFF;\n         }\n-        return -1;\n+        return IOUtils.EOS;\n     }\n }"
  },
  {
    "sha": "b91b69f83c0aa3fa5c1f6d157366da47c1e649e7",
    "filename": "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -163,7 +163,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n         if (read == -1) {\n             readNextBlock();\n             if (endReached) {\n-                return -1;\n+                return IOUtils.EOS;\n             }\n             read = readOnce(b, off, len);\n         }\n@@ -203,17 +203,17 @@ private int readOnce(final byte[] b, final int off, final int len) throws IOExce\n         if (inUncompressedChunk) {\n             final int amount = Math.min(uncompressedBytesRemaining, len);\n             if (amount == 0) {\n-                return -1;\n+                return IOUtils.EOS;\n             }\n             read = inputStream.read(b, off, amount);\n-            if (read != -1) {\n+            if (read != IOUtils.EOS) {\n                 uncompressedBytesRemaining -= read;\n                 count(read);\n             }\n         } else if (currentCompressedChunk != null) {\n             final long before = currentCompressedChunk.getBytesRead();\n             read = currentCompressedChunk.read(b, off, len);\n-            if (read == -1) {\n+            if (read == IOUtils.EOS) {\n                 currentCompressedChunk.close();\n                 currentCompressedChunk = null;\n             } else {\n@@ -324,7 +324,7 @@ private int readOneByte() throws IOException {\n             count(1);\n             return b & 0xFF;\n         }\n-        return -1;\n+        return IOUtils.EOS;\n     }\n \n     private void verifyLastChecksumAndReset() throws IOException {"
  },
  {
    "sha": "c430e6983e160d474e77733685f51790f8b75678",
    "filename": "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -23,6 +23,7 @@\n \n import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;\n import org.apache.commons.compress.utils.ByteUtils;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * CompressorInputStream for the raw Snappy format.\n@@ -95,7 +96,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n             return 0;\n         }\n         if (endReached) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         switch (state) {\n         case NO_BLOCK:"
  },
  {
    "sha": "f4e7580f2ced5b3a3ccbc233d000e5dcb3d225c8",
    "filename": "src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -23,6 +23,7 @@\n import java.nio.ByteOrder;\n \n import org.apache.commons.compress.compressors.lzw.LZWInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * Input stream that decompresses .Z files.\n@@ -133,7 +134,7 @@ protected int decompressNextSymbol() throws IOException {\n         //\n         final int code = readNextCode();\n         if (code < 0) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         if (blockMode && code == getClearCode()) {\n             clearEntries();"
  },
  {
    "sha": "8eb6bd9d991042430602b88ae1c3bf3d001ea079",
    "filename": "src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/utils/BitInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -83,7 +83,7 @@ public long readBits(final int count) throws IOException {\n             throw new IOException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE);\n         }\n         if (ensureCache(count)) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n \n         if (bitsCachedSize < count) {"
  },
  {
    "sha": "f25fdd52932e005b3dc38da42821ddfc597b7583",
    "filename": "src/main/java/org/apache/commons/compress/utils/BoundedArchiveInputStream.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/BoundedArchiveInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/BoundedArchiveInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/utils/BoundedArchiveInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -50,7 +50,7 @@ public BoundedArchiveInputStream(final long start, final long remaining) {\n     @Override\n     public synchronized int read() throws IOException {\n         if (loc >= end) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         if (singleByteBuffer == null) {\n             singleByteBuffer = ByteBuffer.allocate(1);\n@@ -73,7 +73,7 @@ public synchronized int read(final byte[] b, final int off, int len) throws IOEx\n \n         if (len > end - loc) {\n             if (loc >= end) {\n-                return -1;\n+                return IOUtils.EOS;\n             }\n             len = (int) (end - loc);\n         }"
  },
  {
    "sha": "62fc06155ae09a609ac63943b888c54261897e77",
    "filename": "src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -46,7 +46,7 @@ public int read() throws IOException {\n             --bytesRemaining;\n             return in.read();\n         }\n-        return -1;\n+        return IOUtils.EOS;\n     }\n \n     @Override\n@@ -55,7 +55,7 @@ public int read(final byte[] b, final int off, final int len) throws IOException\n             return 0;\n         }\n         if (bytesRemaining == 0) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         int bytesToRead = len;\n         if (bytesToRead > bytesRemaining) {"
  },
  {
    "sha": "55dcc970fba2d5d481239e4f0b8cbd3d774b4d50",
    "filename": "src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -50,7 +50,7 @@ public ChecksumVerifyingInputStream(final Checksum checksum, final InputStream i\n     @Override\n     public int read() throws IOException {\n         if (bytesRemaining <= 0) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         final int ret = in.read();\n         if (ret >= 0) {"
  },
  {
    "sha": "13b7d2eaf1eb0a8402c310b8bcb4741b356b9921",
    "filename": "src/main/java/org/apache/commons/compress/utils/IOUtils.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/IOUtils.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/IOUtils.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/utils/IOUtils.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -47,6 +47,13 @@\n      */\n     public static final LinkOption[] EMPTY_LINK_OPTIONS = {};\n \n+    /**\n+     * The index value when the end of the stream or file has been reached {@code -1}.\n+     *\n+     * @since 1.21\n+     */\n+    public static final int EOS = -1;\n+\n     // This buffer does not need to be synchronized because it is write only; the contents are ignored\n     // Does not affect Immutability\n     private static final byte[] SKIP_BUF = new byte[SKIP_BUF_SIZE];"
  },
  {
    "sha": "99167fc9b2c4a647cd893a95d5cc330348639b55",
    "filename": "src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -87,7 +87,7 @@ public synchronized int read(final ByteBuffer dst) throws IOException {\n             globalPosition += totalBytesRead;\n             return totalBytesRead;\n         }\n-        return -1;\n+        return IOUtils.EOS;\n     }\n \n     @Override"
  },
  {
    "sha": "3a92c99294e102d49c006549f758c585b61fe782",
    "filename": "src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-compress/blob/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java",
    "raw_url": "https://github.com/apache/commons-compress/raw/e8e67c469976a46b44b5680b689f8861da96bb6d/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java",
    "contents_url": "https://api.github.com/repos/apache/commons-compress/contents/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java?ref=e8e67c469976a46b44b5680b689f8861da96bb6d",
    "patch": "@@ -136,7 +136,7 @@ public int read(final ByteBuffer buf) throws IOException {\n         int wanted = buf.remaining();\n         final int possible = size - position;\n         if (possible <= 0) {\n-            return -1;\n+            return IOUtils.EOS;\n         }\n         if (wanted > possible) {\n             wanted = possible;"
  }
]
