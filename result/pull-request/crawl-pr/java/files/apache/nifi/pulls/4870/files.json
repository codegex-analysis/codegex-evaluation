[
  {
    "sha": "e1e33b252b76b6d31e12719d97c4e53e1fb0dbca",
    "filename": "nifi-assembly/NOTICE",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-assembly/NOTICE",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-assembly/NOTICE",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-assembly/NOTICE?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -1960,6 +1960,10 @@ The following binary components are provided under the Apache Software License v\n     The following NOTICE information applies:\n       Copyright (c) 2014-2019 Appsicle\n       Copyright (c) 2019-2020 QuestDB\n+      \n+  (ASLv2) WURFL Microservice client java (com.scientiamobile.wurflmicroservice:wurfl-microservice-2.1.2.jar - https://github.com/WURFL/wurfl-microservice-client-java)\n+    The following NOTICE information applies:\n+      Copyright (c) 2017-2021 ScientiaMobile Inc.\n \n ************************\n Common Development and Distribution License 1.1"
  },
  {
    "sha": "0670a85e888a447782c04f0a2bb87e4104e8f1da",
    "filename": "nifi-assembly/pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-assembly/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-assembly/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-assembly/pom.xml?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -737,6 +737,12 @@ language governing permissions and limitations under the License. -->\n             <version>1.14.0-SNAPSHOT</version>\n             <type>nar</type>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-wurfl-enrich-processor-nar</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+            <type>nar</type>\n+        </dependency>\n         <!-- dependencies for jaxb/activation/annotation for running NiFi on Java 11 -->\n         <!-- TODO: remove these once minimum Java version is 11 -->\n         <dependency>"
  },
  {
    "sha": "58ffcebbf7b49199bce79a2333c581299e9cc4d9",
    "filename": "nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-nar/pom.xml",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-nar/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-nar/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-nar/pom.xml?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements. See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License. You may obtain a copy of the License at\n+  http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-wurfl-bundle</artifactId>\n+        <version>1.14.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-wurfl-enrich-processor-nar</artifactId>\n+    <packaging>nar</packaging>\n+    <properties>\n+        <maven.javadoc.skip>true</maven.javadoc.skip>\n+        <source.skip>true</source.skip>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-wurfl-enrich-processor-processors</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+        </dependency>\n+    </dependencies>\n+\n+</project>"
  },
  {
    "sha": "f6a979a710c8f55b445ba9a5f90ec1a6037ccc56",
    "filename": "nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/pom.xml",
    "status": "added",
    "additions": 153,
    "deletions": 0,
    "changes": 153,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/pom.xml?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -0,0 +1,153 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements. See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License. You may obtain a copy of the License at\n+  http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-wurfl-bundle</artifactId>\n+        <version>1.14.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-wurfl-enrich-processor-processors</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.scientiamobile.wurflmicroservice</groupId>\n+            <artifactId>wurfl-microservice</artifactId>\n+            <version>2.1.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.code.gson</groupId>\n+            <artifactId>gson</artifactId>\n+            <version>2.8.5</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-utils</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-mock</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-simple</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-junit4</artifactId>\n+            <version>2.0.5</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-api-mockito2</artifactId>\n+            <version>2.0.5</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-core</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <!-- bytebuddy excluded, will be listed as an explicit dependency of the same version as the transitive\n+                dependency -->\n+                <exclusion>\n+                    <groupId>net.bytebuddy</groupId>\n+                    <artifactId>byte-buddy</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>net.bytebuddy</groupId>\n+                    <artifactId>byte-buddy-agent</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-core</artifactId>\n+            <version>2.0.5</version>\n+            <scope>test</scope>\n+            <exclusions>\n+                <!-- bytebuddy excluded due to the transitive dependency version (1.9.3) not being able to mock\n+                final/private classes -->\n+                <exclusion>\n+                    <groupId>net.bytebuddy</groupId>\n+                    <artifactId>byte-buddy</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>net.bytebuddy</groupId>\n+                    <artifactId>byte-buddy-agent</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <!-- included explicitly for use with mockito-core and powermock-core -->\n+            <groupId>net.bytebuddy</groupId>\n+            <artifactId>byte-buddy</artifactId>\n+            <version>1.10.8</version>\n+        </dependency>\n+        <dependency>\n+            <!-- included explicitly for use with mockito-core and powermock-core -->\n+            <groupId>net.bytebuddy</groupId>\n+            <artifactId>byte-buddy-agent</artifactId>\n+            <version>1.10.8</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-record-serialization-service-api</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-record-path</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-record-serialization-services</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-mock-record-utils</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-schema-registry-service-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+</project>"
  },
  {
    "sha": "1dc81504e5ad2f6c24aca5ac385e397ca16354b6",
    "filename": "nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/java/org/apache/nifi/processors/AtLeastOneNonEmptyPropertyValidator.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/java/org/apache/nifi/processors/AtLeastOneNonEmptyPropertyValidator.java",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/java/org/apache/nifi/processors/AtLeastOneNonEmptyPropertyValidator.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/java/org/apache/nifi/processors/AtLeastOneNonEmptyPropertyValidator.java?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.processors;\n+\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.nifi.components.PropertyDescriptor;\n+import org.apache.nifi.components.ValidationContext;\n+import org.apache.nifi.components.ValidationResult;\n+import org.apache.nifi.util.StringUtils;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class provides a validator which checks that at least one property in a provided list\n+ * of properties of the WURFL enrich processor is not blank.\n+ * If none of the properties in the list has a value, the validation fails.\n+ */\n+public class AtLeastOneNonEmptyPropertyValidator {\n+\n+    public ValidationResult validate(ValidationContext validationContext, PropertyDescriptor... propertiesToValidate) {\n+\n+        if (ArrayUtils.isEmpty(propertiesToValidate)){\n+            return new ValidationResult.Builder()\n+                    .subject(\"general\")\n+                    .valid(false)\n+                    .explanation(\"Cannot create AtLeastOneValidator without a list of properties to validate\").build();\n+        }\n+\n+        String[] propertiesDisplayNames = new String[propertiesToValidate.length];\n+        for(int i = 0; i < propertiesToValidate.length; i++){\n+            propertiesDisplayNames[i] = propertiesToValidate[i].getDisplayName();\n+        }\n+        String propertyListForMessage = String.join(\",\", propertiesDisplayNames);\n+\n+        Map<String,String> properties = validationContext.getAllProperties();\n+        for(PropertyDescriptor property: propertiesToValidate){\n+            String propertyValue = properties.get(property.getName());\n+            if (StringUtils.isNotBlank(propertyValue)){\n+                return new ValidationResult.Builder()\n+                        .subject(\"At least one of \" + propertyListForMessage)\n+                        .valid(true)\n+                        .explanation(property.getName() + \" has a non blank value \").build();\n+            }\n+        }\n+\n+        // None was valid\n+        return new ValidationResult.Builder()\n+                .subject(\"One of the properties: \" + propertyListForMessage)\n+                .valid(false)\n+                .explanation(\" at least one of them must have a non blank value \")\n+                .build();\n+    }\n+}"
  },
  {
    "sha": "a407eadde8d4b9613a966cf4b40057ce86ef97e3",
    "filename": "nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/java/org/apache/nifi/processors/WURFLDeviceEnrichProcessor.java",
    "status": "added",
    "additions": 353,
    "deletions": 0,
    "changes": 353,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/java/org/apache/nifi/processors/WURFLDeviceEnrichProcessor.java",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/java/org/apache/nifi/processors/WURFLDeviceEnrichProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/java/org/apache/nifi/processors/WURFLDeviceEnrichProcessor.java?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.processors;\n+\n+import org.apache.nifi.annotation.behavior.InputRequirement;\n+import org.apache.nifi.annotation.behavior.WritesAttribute;\n+import org.apache.nifi.annotation.behavior.WritesAttributes;\n+import org.apache.nifi.annotation.lifecycle.OnScheduled;\n+import org.apache.nifi.annotation.lifecycle.OnRemoved;\n+import org.apache.nifi.annotation.lifecycle.OnShutdown;\n+import org.apache.nifi.components.PropertyDescriptor;\n+import org.apache.nifi.components.ValidationContext;\n+import org.apache.nifi.components.ValidationResult;\n+import org.apache.nifi.components.Validator;\n+import org.apache.nifi.flowfile.FlowFile;\n+import org.apache.nifi.annotation.documentation.CapabilityDescription;\n+import org.apache.nifi.annotation.documentation.Tags;\n+import org.apache.nifi.logging.ComponentLog;\n+import org.apache.nifi.processor.AbstractProcessor;\n+import org.apache.nifi.processor.ProcessContext;\n+import org.apache.nifi.processor.ProcessSession;\n+import org.apache.nifi.processor.ProcessorInitializationContext;\n+import org.apache.nifi.processor.Relationship;\n+import org.apache.nifi.processor.exception.ProcessException;\n+import org.apache.nifi.processor.util.StandardValidators;\n+\n+import java.util.Map;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Set;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import com.scientiamobile.wurfl.wmclient.WmException;\n+import com.scientiamobile.wurfl.wmclient.WmClient;\n+import com.scientiamobile.wurfl.wmclient.Model;\n+import org.apache.nifi.util.StringUtils;\n+\n+@Tags({\"http\", \"https\", \"request\", \"listen\", \"WURFL\", \"web service\", \"attributes\"})\n+@InputRequirement(InputRequirement.Requirement.INPUT_REQUIRED)\n+@CapabilityDescription(\"Processor that enriches data from HTTP requests passed in the flow files with data coming from WURFL Microservice\")\n+@WritesAttributes({\n+        @WritesAttribute(attribute = \"wurfl.XXX\", description = \"Each of the WURFL capabilities exposed by WURFL Microservice will be added as \"\n+                + \"attribute, prefixed with \\\"wurfl.\\\" For example, if the WURFL capability named \\\"brand_name\\\", then the value \"\n+                + \"will be added to an attribute named \\\"wurfl.brand_name\\\"\"),\n+        @WritesAttribute(attribute = \"failure.cause\", description = \"Description of WURFL Microservice error in case of exception occurred in the detection process\")\n+})\n+public class WURFLDeviceEnrichProcessor extends AbstractProcessor {\n+\n+    private final static String WURFL_ATTR_PREFIX = \"wurfl.\";\n+    protected static final String FAILURE_ATTR_NAME = \"failure.cause\";\n+\n+    protected AtomicReference<WmClient> wmClientRef;\n+    private ComponentLog logger;\n+    private Map<String, String> currentConfiguration = new ConcurrentHashMap<>();\n+\n+\n+    // Let's add all the configuration properties needed by WURFL Microservice to be created and used by the NiFi processor.\n+    // These properties are filled in the Processor creation wizard in NiFi webapp UI\n+    public static final PropertyDescriptor WM_SCHEME = new PropertyDescriptor\n+            .Builder().name(\"WM_SCHEME\")\n+            .displayName(\"WM server scheme\")\n+            .description(\"Connection protocol scheme used to connect to WURFL Microservice server (http/https)\")\n+            .required(true)\n+            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)\n+            .defaultValue(\"http\")\n+            .build();\n+\n+    public static final PropertyDescriptor WM_HOST = new PropertyDescriptor\n+            .Builder().name(\"WM_HOST\")\n+            .displayName(\"WM server host\")\n+            .description(\"Host or IP address used to connect to WURFL Microservice server\")\n+            .required(true)\n+            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)\n+            .build();\n+\n+    public static final PropertyDescriptor WM_PORT = new PropertyDescriptor\n+            .Builder().name(\"WM_PORT\")\n+            .displayName(\"WM server port\")\n+            .description(\"Port number used to connect to WURFL Microservice server\")\n+            .required(true)\n+            .addValidator(StandardValidators.PORT_VALIDATOR)\n+            .build();\n+\n+    public static final PropertyDescriptor WM_BASE_PATH = new PropertyDescriptor\n+            .Builder().name(\"WM_BASE_PATH\")\n+            .displayName(\"WM base base path\")\n+            .description(\"URL segment that is needed by your URL address to connect to WURFL Microservice server. In most cases it's not needed\")\n+            .required(false)\n+            .addValidator(Validator.VALID)\n+            .defaultValue(\"\")\n+            .build();\n+\n+    public static final PropertyDescriptor WM_CACHE_SIZE = new PropertyDescriptor\n+            .Builder().name(\"WM_CACHE_SIZE\")\n+            .displayName(\"WM cache size\")\n+            .description(\"Cache size for WURFL Microsroservice client instance\")\n+            .required(false)\n+            .addValidator(StandardValidators.POSITIVE_INTEGER_VALIDATOR)\n+            .defaultValue(\"100000\")\n+            .build();\n+\n+    public static final PropertyDescriptor INPUT_ATTR_USER_AGENT = new PropertyDescriptor\n+            .Builder().name(\"INPUT_ATTR_USER_AGENT\")\n+            .displayName(\"User-Agent attribute name\")\n+            .description(\"Name of the attribute that contains the User-Agent header\")\n+            .required(false)\n+            .defaultValue(\"\")\n+            .addValidator(Validator.VALID)\n+            .build();\n+\n+    public static final PropertyDescriptor INPUT_ATTR_HTTP_HEADERS_PREFIX = new PropertyDescriptor\n+            .Builder().name(\"INPUT_ATTR_HTTP_HEADERS_PREFIX\")\n+            .displayName(\"HTTP header names prefix\")\n+            .description(\"The common prefix of all attributes that contain HTTP headers\")\n+            .required(false)\n+            .defaultValue(\"\")\n+            .addValidator(Validator.VALID)\n+            .build();\n+\n+    public static final Relationship SUCCESS = new Relationship.Builder()\n+            .name(\"SUCCESS\")\n+            .description(\"Success relationship, used when WURFL detection process applied to the flow file succeeds\")\n+            .build();\n+\n+    public static final Relationship FAILURE = new Relationship.Builder()\n+            .name(\"FAILURE\")\n+            .description(\"Failure relationship, used when WURFL detection process applied to the flow file fails for some reason\")\n+            .build();\n+\n+    private List<PropertyDescriptor> descriptors;\n+\n+    private Set<Relationship> relationships;\n+\n+    private final List<String> triggerClientResetProps = new ArrayList<>();\n+\n+    @Override\n+    protected Collection<ValidationResult> customValidate(final ValidationContext context) {\n+        final List<ValidationResult> results = new ArrayList<>(super.customValidate(context));\n+        results.add(new AtLeastOneNonEmptyPropertyValidator().validate(context,\n+                INPUT_ATTR_USER_AGENT, INPUT_ATTR_HTTP_HEADERS_PREFIX));\n+        return results;\n+    }\n+    @Override\n+    protected void init(final ProcessorInitializationContext context) {\n+\n+        logger = getLogger();\n+\n+        triggerClientResetProps.add(WM_SCHEME.getName());\n+        triggerClientResetProps.add(WM_HOST.getName());\n+        triggerClientResetProps.add(WM_PORT.getName());\n+        triggerClientResetProps.add(WM_BASE_PATH.getName());\n+\n+        final List<PropertyDescriptor> descriptors = new ArrayList<>();\n+        descriptors.add(WM_SCHEME);\n+        descriptors.add(WM_HOST);\n+        descriptors.add(WM_PORT);\n+        descriptors.add(WM_BASE_PATH);\n+        descriptors.add(WM_CACHE_SIZE);\n+        descriptors.add(INPUT_ATTR_USER_AGENT);\n+        descriptors.add(INPUT_ATTR_HTTP_HEADERS_PREFIX);\n+        this.descriptors = Collections.unmodifiableList(descriptors);\n+\n+        final Set<Relationship> relationships = new HashSet<>();\n+        relationships.add(SUCCESS);\n+        relationships.add(FAILURE);\n+        this.relationships = Collections.unmodifiableSet(relationships);\n+    }\n+\n+    @Override\n+    public Set<Relationship> getRelationships() {\n+        return this.relationships;\n+    }\n+\n+    @Override\n+    public final List<PropertyDescriptor> getSupportedPropertyDescriptors() {\n+        return descriptors;\n+    }\n+\n+    @OnScheduled\n+    public void onScheduled(final ProcessContext context) {\n+        currentConfiguration = fromContext(context);\n+\n+        if (wmClientRef == null || wmClientRef.get() == null) {\n+            logger.info(\"Recreating WM client in onSchedule method\");\n+            if (!createWmClient(currentConfiguration)) {\n+                return;\n+            }\n+            wmClientRef.get().setCacheSize(Integer.parseInt(currentConfiguration.get(WM_CACHE_SIZE.getName())));\n+        }\n+    }\n+\n+    @Override\n+    public void onPropertyModified(final PropertyDescriptor descriptor, final String oldValue, final String newValue) {\n+\n+        // it seems weird, but sometimes this gets called even when property has not been changed,\n+        // as in this issue https://issues.apache.org/jira/browse/NIFI-7123\n+        if (oldValue == null || newValue == null || oldValue.equals(newValue)) {\n+            return;\n+        }\n+\n+        // create a copy of the config map and replace the updated value\n+        Map<String, String> newConfig = new ConcurrentHashMap<>(currentConfiguration);\n+        newConfig.put(descriptor.getName(), newValue);\n+\n+        // In case the changed property is just cache size, we reset the cache\n+        if (descriptor.getName().equals(WM_CACHE_SIZE.getName())) {\n+            logger.warn(\"Resetting WM client cache in onPropertyModified method\");\n+            wmClientRef.get().setCacheSize(Integer.parseInt(newValue));\n+            // all other properties in this list trigger a new client creation\n+        } else if (triggerClientResetProps.contains(descriptor.getName())) {\n+            try {\n+                wmClientRef.get().destroyConnection();\n+                wmClientRef = null;\n+            } catch (WmException e) {\n+                logger.warn(\"Unable to destroy WM client\", e);\n+            }\n+            logger.warn(\"Recreating WM client in onPropertyModified method\");\n+            if (createWmClient(newConfig)) {\n+                currentConfiguration = newConfig;\n+            }\n+        }\n+    }\n+\n+    /*\n+     * Creates a new instance of a WM client. It returns false if some exception occurs (ie: connection exception),\n+     * false otherwise. Logs any error on Apache NiFi log at $NIFI_HOME/logs/nifi-app.log\n+     */\n+    private boolean createWmClient(Map<String, String> config) {\n+\n+        try {\n+            wmClientRef = new AtomicReference<>();\n+            WmClient wmClient = WmClient.create(\n+                    config.get(WM_SCHEME.getName()),\n+                    config.get(WM_HOST.getName()),\n+                    config.get(WM_PORT.getName()),\n+                    config.get(WM_BASE_PATH.getName()));\n+            wmClientRef.set(wmClient);\n+            return true;\n+        } catch (WmException e) {\n+            logger.error(\"WURFL Microservice client failed initialized for scheme {}  host:port {}:{}.\",\n+                    config.get(WM_SCHEME.getName()),\n+                    config.get(WM_HOST.getName()),\n+                    config.get(WM_PORT.getName()));\n+            e.printStackTrace();\n+            return false;\n+        }\n+    }\n+\n+    /*\n+     * This is called when the data flow is removed from NiFi UI or NiFi is shut down\n+     */\n+    @OnRemoved\n+    @OnShutdown\n+    public void destroyWmClient() {\n+        logger.info(\"Stopping WURFL Request Processor\");\n+        if (wmClientRef != null) {\n+            try {\n+                wmClientRef.get().destroyConnection();\n+                wmClientRef = null;\n+            } catch (WmException e) {\n+                logger.error(\" Error destroying WURFL Microservice client.\", e);\n+            }\n+        }\n+        logger.info(\"WURFL Microservice client stopped and deallocated\");\n+    }\n+\n+    public static Map<String, String> fromContext(ProcessContext context) {\n+        Map<String, String> config = new ConcurrentHashMap<>();\n+        config.put(WM_SCHEME.getName(), context.getProperty(WM_SCHEME).getValue());\n+        config.put(WM_HOST.getName(), context.getProperty(WM_HOST).getValue());\n+        config.put(WM_PORT.getName(), context.getProperty(WM_PORT).getValue());\n+        config.put(WM_BASE_PATH.getName(), context.getProperty(WM_BASE_PATH).getValue());\n+        config.put(WM_CACHE_SIZE.getName(), context.getProperty(WM_CACHE_SIZE).getValue());\n+        config.put(INPUT_ATTR_USER_AGENT.getName(), context.getProperty(INPUT_ATTR_USER_AGENT).getValue());\n+        config.put(INPUT_ATTR_HTTP_HEADERS_PREFIX.getName(), context.getProperty(INPUT_ATTR_HTTP_HEADERS_PREFIX).getValue());\n+        return config;\n+    }\n+\n+\n+    @Override\n+    public void onTrigger(final ProcessContext context, final ProcessSession session) throws ProcessException {\n+\n+        FlowFile flowFile = session.get();\n+        if (flowFile == null) {\n+            logger.warn(\"Flow file is null, exiting\");\n+            return;\n+        }\n+\n+        logger.info(\"Reading HTTP headers\");\n+        Map<String, String> headers = getHeadersFromFlowFile(flowFile, context);\n+\n+        logger.info(\"Starting WURFL data enrichment\");\n+\n+        try {\n+            Model.JSONDeviceData device = wmClientRef.get().lookupHeaders(headers);\n+            final Map<String, String> wurflAttributes = new ConcurrentHashMap<>();\n+            device.capabilities.forEach((key, value) -> wurflAttributes.put(WURFL_ATTR_PREFIX + key, value));\n+            session.putAllAttributes(flowFile, wurflAttributes);\n+            logger.info(\"WURFL data enrichment completed, sending SUCCESS flow\");\n+            session.transfer(flowFile, SUCCESS);\n+        } catch (WmException e) {\n+            session.putAttribute(flowFile, FAILURE_ATTR_NAME, e.getMessage());\n+            session.transfer(flowFile, FAILURE);\n+        }\n+\n+    }\n+\n+    private Map<String, String> getHeadersFromFlowFile(FlowFile flowFile, ProcessContext context) {\n+        Map<String, String> headers = new ConcurrentHashMap<>();\n+        String userAgentAttrName = context.getProperty(INPUT_ATTR_USER_AGENT).getValue();\n+        String headersPrefix = context.getProperty(INPUT_ATTR_HTTP_HEADERS_PREFIX).getValue();\n+\n+        if (StringUtils.isNotEmpty(headersPrefix)) {\n+            // in this case, attribute type is necessarily a prefix, so we assume attribute name field contains the prefix for a set of attribute\n+            // names that contain the HTTP request headers, so we load them all\n+            Map<String, String> allAttrs = flowFile.getAttributes();\n+            Set<String> allowedAttrs = allAttrs.keySet().stream()\n+                    .filter(key -> key.startsWith(headersPrefix))\n+                    .collect(Collectors.toSet());\n+            for (String hname : wmClientRef.get().getImportantHeaders()) {\n+                allowedAttrs.forEach(attr -> {\n+                    if (attr.toLowerCase().contains(hname.toLowerCase())) {\n+                        headers.put(hname, allAttrs.get(attr));\n+                    }\n+                });\n+\n+            }\n+        } else if(StringUtils.isNotEmpty(userAgentAttrName)) {\n+            headers.put(\"User-Agent\", flowFile.getAttribute(userAgentAttrName));\n+        }\n+        return headers;\n+    }\n+}"
  },
  {
    "sha": "ec691d93c7d56d8f6adaddd439b7a23308dbdde0",
    "filename": "nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/resources/META-INF/services/org.apache.nifi.processor.Processor",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/resources/META-INF/services/org.apache.nifi.processor.Processor",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/resources/META-INF/services/org.apache.nifi.processor.Processor",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/main/resources/META-INF/services/org.apache.nifi.processor.Processor?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -0,0 +1,15 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+org.apache.nifi.processors.WURFLDeviceEnrichProcessor\n\\ No newline at end of file"
  },
  {
    "sha": "6d8b8900af2fd7d112550dc74e8ff505c6f5cc30",
    "filename": "nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/test/java/org/apache/nifi/processors/TestAtLeastOneNonEmptyPropertyValidator.java",
    "status": "added",
    "additions": 79,
    "deletions": 0,
    "changes": 79,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/test/java/org/apache/nifi/processors/TestAtLeastOneNonEmptyPropertyValidator.java",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/test/java/org/apache/nifi/processors/TestAtLeastOneNonEmptyPropertyValidator.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/test/java/org/apache/nifi/processors/TestAtLeastOneNonEmptyPropertyValidator.java?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.processors;\n+\n+import org.apache.nifi.components.PropertyDescriptor;\n+import org.apache.nifi.components.ValidationContext;\n+import org.apache.nifi.components.ValidationResult;\n+import org.apache.nifi.components.Validator;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class TestAtLeastOneNonEmptyPropertyValidator {\n+\n+    public static final PropertyDescriptor PROP_01 = new PropertyDescriptor\n+            .Builder().name(\"PROP_01\")\n+            .displayName(\"Prop 01\")\n+            .description(\"Description of property 01\")\n+            .required(false)\n+            .addValidator(Validator.VALID)\n+            .build();\n+    public static final PropertyDescriptor PROP_02 = new PropertyDescriptor\n+            .Builder().name(\"PROP_02\")\n+            .displayName(\"Prop 02\")\n+            .description(\"Description of property 02\")\n+            .required(false)\n+            .addValidator(Validator.VALID)\n+            .build();\n+\n+    public static final PropertyDescriptor PROP_03 = new PropertyDescriptor\n+            .Builder().name(\"PROP_03\")\n+            .displayName(\"Prop 03\")\n+            .description(\"Description of property 03\")\n+            .required(false)\n+            .addValidator(Validator.VALID)\n+            .build();\n+\n+\n+    @Test\n+    public void validNotEmptyTest(){\n+        AtLeastOneNonEmptyPropertyValidator validator = new AtLeastOneNonEmptyPropertyValidator();\n+        Map<String,String> properties = new HashMap<>();\n+        properties.put(\"PROP_02\", \"value02\");\n+        ValidationContext ctx = mock(ValidationContext.class);\n+        when(ctx.getAllProperties()).thenReturn(properties);\n+        ValidationResult result = validator.validate(ctx, PROP_01, PROP_02, PROP_03);\n+        Assert.assertTrue(result.isValid());\n+    }\n+\n+    @Test\n+    public void invalidNotEmptyTest(){\n+        AtLeastOneNonEmptyPropertyValidator validator = new AtLeastOneNonEmptyPropertyValidator();\n+        Map<String,String> properties = new HashMap<>();\n+        ValidationContext ctx = mock(ValidationContext.class);\n+        when(ctx.getAllProperties()).thenReturn(properties);\n+\n+        ValidationResult result = validator.validate(ctx, PROP_01, PROP_02, PROP_03);\n+        Assert.assertFalse(result.isValid());\n+    }\n+}"
  },
  {
    "sha": "6e3c5399ba64bc485b81c2e6f40c51704a0fb41d",
    "filename": "nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/test/java/org/apache/nifi/processors/TestWURFLDeviceEnrichProcessor.java",
    "status": "added",
    "additions": 240,
    "deletions": 0,
    "changes": 240,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/test/java/org/apache/nifi/processors/TestWURFLDeviceEnrichProcessor.java",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/test/java/org/apache/nifi/processors/TestWURFLDeviceEnrichProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-wurfl-bundle/nifi-wurfl-enrich-processor-processors/src/test/java/org/apache/nifi/processors/TestWURFLDeviceEnrichProcessor.java?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -0,0 +1,240 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.processors;\n+\n+import com.scientiamobile.wurfl.wmclient.Model;\n+import com.scientiamobile.wurfl.wmclient.WmClient;\n+import com.scientiamobile.wurfl.wmclient.WmException;\n+import org.apache.nifi.annotation.lifecycle.OnScheduled;\n+import org.apache.nifi.processor.ProcessContext;\n+import org.apache.nifi.util.MockFlowFile;\n+import org.apache.nifi.util.TestRunner;\n+import org.apache.nifi.util.TestRunners;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({WURFLDeviceEnrichProcessor.class})\n+public class TestWURFLDeviceEnrichProcessor {\n+\n+    WmClient wmClient;\n+    WURFLDeviceEnrichProcessor wurflDeviceEnrich;\n+    private TestRunner testRunner;\n+\n+    @Before\n+    public void setUp() {\n+        wmClient = mock(WmClient.class);\n+        wurflDeviceEnrich = new TestableWURFLDeviceEnrich();\n+        wurflDeviceEnrich.wmClientRef = new AtomicReference<>();\n+        testRunner = TestRunners.newTestRunner(wurflDeviceEnrich);\n+    }\n+\n+    @Test\n+    public void testMissingPropertyValues() {\n+\n+        setValidTestPropertiesToRunner();\n+        testRunner.removeProperty(WURFLDeviceEnrichProcessor.WM_HOST);\n+        testRunner.assertNotValid();\n+        setValidTestPropertiesToRunner();\n+        testRunner.removeProperty(WURFLDeviceEnrichProcessor.WM_PORT);\n+        testRunner.assertNotValid();\n+        testRunner.removeProperty(WURFLDeviceEnrichProcessor.INPUT_ATTR_HTTP_HEADERS_PREFIX);\n+        testRunner.assertNotValid();\n+\n+    }\n+\n+    private void setValidTestPropertiesToRunner() {\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_SCHEME, \"http\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_HOST, \"localhost\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_PORT, \"9080\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.INPUT_ATTR_USER_AGENT, \"attribute name\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.INPUT_ATTR_HTTP_HEADERS_PREFIX, \"http.headers.User-Agent\");\n+    }\n+\n+    @Test\n+    public void wmExceptionFlowsToFailure() throws WmException {\n+\n+        setValidTestPropertiesToRunner();\n+\n+        String ua = \"Mozilla/5.0 (Linux; Android 10; Pixel 4 XL) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.62 Mobile Safari/537.36\";\n+        Map<String,String> headers = new HashMap<>();\n+        headers.put(\"User-Agent\", ua);\n+        WmException e = new WmException(\"Detection failed\");\n+        when(wmClient.lookupHeaders(headers)).thenThrow(e);\n+        when(wmClient.getImportantHeaders()).thenReturn(mockImportantHeaders());\n+        final Map<String, String> attributes = new HashMap<>();\n+\n+        attributes.put(\"http.headers.User-Agent\", ua);\n+\n+        testRunner.enqueue(new byte[0], attributes);\n+        testRunner.run();\n+\n+        List<MockFlowFile> failure = testRunner.getFlowFilesForRelationship(WURFLDeviceEnrichProcessor.FAILURE);\n+        assertEquals(1, failure.size());\n+        String failAttr = failure.get(0).getAttribute(WURFLDeviceEnrichProcessor.FAILURE_ATTR_NAME);\n+        assertNotNull(failAttr);\n+        assertEquals(failAttr, \"Detection failed\");\n+        List<MockFlowFile> success = testRunner.getFlowFilesForRelationship(WURFLDeviceEnrichProcessor.SUCCESS);\n+        assertEquals(0, success.size());\n+    }\n+\n+    @Test\n+    public void invalidHeaderPrefixReturnsGenericDevice() throws WmException {\n+\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_SCHEME, \"http\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_HOST, \"localhost\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_PORT, \"9080\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.INPUT_ATTR_USER_AGENT, \"attribute name prefix\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.INPUT_ATTR_HTTP_HEADERS_PREFIX, \"invalid.prefix.\");\n+\n+        when(wmClient.getImportantHeaders()).thenReturn(mockImportantHeaders());\n+        Model.JSONDeviceData d = createMockDevice(\"generic\", \"\", \"\", \"false\", \"false\");\n+\n+        Map<String,String> headers = new HashMap<>();\n+\n+        when(wmClient.lookupHeaders(headers)).thenReturn(d);\n+        final Map<String, String> attributes = new HashMap<>();\n+        // While this is a valid user agent. it will not selected for detection because processor has been configured to read prefixed headers\n+        attributes.put(\"User-Agent\", \"AdsBot-Sample (+http://www.sample.c_om/adsbot)\");\n+        attributes.put(\"Accept\", \"text/html\");\n+        attributes.put(\"X-custom\", \"custom_value\");\n+\n+        testRunner.enqueue(new byte[0], attributes);\n+        testRunner.run();\n+\n+        List<MockFlowFile> failure = testRunner.getFlowFilesForRelationship(WURFLDeviceEnrichProcessor.FAILURE);\n+        assertEquals(0, failure.size());\n+        List<MockFlowFile> success = testRunner.getFlowFilesForRelationship(WURFLDeviceEnrichProcessor.SUCCESS);\n+        assertEquals(1, success.size());\n+\n+        assertEquals(\"generic\", success.get(0).getAttribute(\"wurfl.wurfl_id\"));\n+        assertEquals(\"false\", success.get(0).getAttribute(\"wurfl.is_smartphone\"));\n+        assertEquals(\"false\", success.get(0).getAttribute(\"wurfl.is_robot\"));\n+    }\n+\n+    @Test\n+    public void detectionUsingAttributeNameSuccess() throws WmException {\n+\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_SCHEME, \"http\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_HOST, \"localhost\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_PORT, \"9080\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.INPUT_ATTR_USER_AGENT, \"attribute name\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.INPUT_ATTR_HTTP_HEADERS_PREFIX, \"User-Agent\");\n+\n+        String ua = \"Mozilla/5.0 (Linux; Android 10; Pixel 4 XL) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.62 Mobile Safari/537.36\";\n+        Map<String,String> headers = new HashMap<>();\n+        headers.put(\"User-Agent\", ua);\n+        Model.JSONDeviceData d = createMockDevice(\"google_pixel_4_xl_ver1\", \"Google\", \"Google Pixel 4 XL\",\n+                \"true\", \"false\");\n+        when(wmClient.getImportantHeaders()).thenReturn(mockImportantHeaders());\n+        when(wmClient.lookupHeaders(headers)).thenReturn(d);\n+        final Map<String, String> attributes = new HashMap<>();\n+\n+        attributes.put(\"User-Agent\", ua);\n+\n+        testRunner.enqueue(new byte[0], attributes);\n+        testRunner.run();\n+\n+        List<MockFlowFile> failure = testRunner.getFlowFilesForRelationship(WURFLDeviceEnrichProcessor.FAILURE);\n+        assertEquals(0, failure.size());\n+        List<MockFlowFile> success = testRunner.getFlowFilesForRelationship(WURFLDeviceEnrichProcessor.SUCCESS);\n+        assertNotNull(success);\n+        assertEquals(1, success.size());\n+        assertEquals(\"Google\", success.get(0).getAttribute(\"wurfl.brand_name\"));\n+        assertEquals(\"Google Pixel 4 XL\", success.get(0).getAttribute(\"wurfl.complete_device_name\"));\n+        assertEquals(\"google_pixel_4_xl_ver1\", success.get(0).getAttribute(\"wurfl.wurfl_id\"));\n+        assertEquals(\"true\", success.get(0).getAttribute(\"wurfl.is_smartphone\"));\n+        assertEquals(\"false\", success.get(0).getAttribute(\"wurfl.is_robot\"));\n+    }\n+\n+    @Test\n+    public void detectionUsingAttributeNamePrefixSuccess() throws WmException {\n+\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_SCHEME, \"http\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_HOST, \"localhost\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.WM_PORT, \"9080\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.INPUT_ATTR_USER_AGENT, \"attribute name prefix\");\n+        testRunner.setProperty(WURFLDeviceEnrichProcessor.INPUT_ATTR_HTTP_HEADERS_PREFIX, \"http.headers.\");\n+\n+        String ua = \"Mozilla/5.0 (Linux; Android 10; Pixel 4 XL) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.62 Mobile Safari/537.36\";\n+        Map<String,String> headers = new HashMap<>();\n+        headers.put(\"User-Agent\", ua);\n+        Model.JSONDeviceData d = createMockDevice(\"google_pixel_4_xl_ver1\", \"Google\", \"Google Pixel 4 XL\",\n+                \"true\", \"false\");\n+        when(wmClient.getImportantHeaders()).thenReturn(mockImportantHeaders());\n+        when(wmClient.lookupHeaders(headers)).thenReturn(d);\n+        final Map<String, String> attributes = new HashMap<>();\n+\n+        attributes.put(\"http.headers.User-Agent\", ua);\n+        attributes.put(\"http.headers.Connection\", \"keep-alive\");\n+        attributes.put(\"http.headers.Accept-Encoding\", \"gzip\");\n+\n+        testRunner.enqueue(new byte[0], attributes);\n+        testRunner.run();\n+\n+        List<MockFlowFile> failure = testRunner.getFlowFilesForRelationship(WURFLDeviceEnrichProcessor.FAILURE);\n+        assertEquals(0, failure.size());\n+        List<MockFlowFile> success = testRunner.getFlowFilesForRelationship(WURFLDeviceEnrichProcessor.SUCCESS);\n+        assertNotNull(success);\n+        assertEquals(1, success.size());\n+        assertEquals(\"Google\", success.get(0).getAttribute(\"wurfl.brand_name\"));\n+        assertEquals(\"Google Pixel 4 XL\", success.get(0).getAttribute(\"wurfl.complete_device_name\"));\n+        assertEquals(\"google_pixel_4_xl_ver1\", success.get(0).getAttribute(\"wurfl.wurfl_id\"));\n+        assertEquals(\"true\", success.get(0).getAttribute(\"wurfl.is_smartphone\"));\n+        assertEquals(\"false\", success.get(0).getAttribute(\"wurfl.is_robot\"));\n+    }\n+\n+    private String[] mockImportantHeaders() {\n+        String[] importantHeaders = new String[4];\n+        importantHeaders[0]  = \"User-Agent\";\n+        importantHeaders[1] = \"Device-Stock-UA\";\n+        importantHeaders[2] = \"X-OperaMini-Phone-UA\";\n+        importantHeaders[3] = \"X-UCBrowser-Device-UA\";\n+        return importantHeaders;\n+    }\n+\n+    private Model.JSONDeviceData createMockDevice(String wurflId, String brandName, String completeDeviceName, String isSmartphone, String isRobot) {\n+        Map<String, String> capabilities = new HashMap<>();\n+        capabilities.put(\"brand_name\", brandName);\n+        capabilities.put(\"complete_device_name\", completeDeviceName);\n+        capabilities.put(\"wurfl_id\", wurflId);\n+        capabilities.put(\"is_smartphone\", isSmartphone);\n+        capabilities.put(\"is_robot\", isRobot);\n+        Model.JSONDeviceData d = new Model().new JSONDeviceData(capabilities, \"\", 0);\n+        return d;\n+    }\n+\n+    class TestableWURFLDeviceEnrich extends WURFLDeviceEnrichProcessor {\n+        @OnScheduled\n+        public void onScheduled(ProcessContext context) {\n+            wmClientRef.set(wmClient);\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "1379917c0664b4d8001b951295afd7bf958c3f07",
    "filename": "nifi-nar-bundles/nifi-wurfl-bundle/pom.xml",
    "status": "added",
    "additions": 33,
    "deletions": 0,
    "changes": 33,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/nifi-wurfl-bundle/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-wurfl-bundle/pom.xml?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements. See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License. You may obtain a copy of the License at\n+  http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-nar-bundles</artifactId>\n+        <version>1.14.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>nifi-wurfl-bundle</artifactId>\n+    <packaging>pom</packaging>\n+\n+    <modules>\n+        <module>nifi-wurfl-enrich-processor-processors</module>\n+        <module>nifi-wurfl-enrich-processor-nar</module>\n+    </modules>\n+\n+</project>"
  },
  {
    "sha": "6ae02f4e8e4c60e659bc4ecab778a237711d97f5",
    "filename": "nifi-nar-bundles/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/nifi/blob/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8/nifi-nar-bundles/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/pom.xml?ref=cbdf1ddac4fa911392f1ad4a3b661e3643fe1fb8",
    "patch": "@@ -104,6 +104,7 @@\n         <module>nifi-hazelcast-bundle</module>\n \t    <module>nifi-accumulo-bundle</module>\n \t    <module>nifi-asn1-bundle</module>\n+\t    <module>nifi-wurfl-bundle</module>\n     </modules>\n \n     <build>"
  }
]
