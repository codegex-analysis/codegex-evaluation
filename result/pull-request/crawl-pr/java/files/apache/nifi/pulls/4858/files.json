[
  {
    "sha": "f53604d34401171f3260cc8ea6ce0af790d6087b",
    "filename": "nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/DDMetricRegistryBuilder.java",
    "status": "modified",
    "additions": 1,
    "deletions": 10,
    "changes": 11,
    "blob_url": "https://github.com/apache/nifi/blob/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/DDMetricRegistryBuilder.java",
    "raw_url": "https://github.com/apache/nifi/raw/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/DDMetricRegistryBuilder.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/DDMetricRegistryBuilder.java?ref=d06944ab4d81fae3aa082bb653e59832ddd36789",
    "patch": "@@ -24,8 +24,6 @@\n \n import java.io.IOException;\n import java.net.InetAddress;\n-import java.util.Arrays;\n-import java.util.List;\n \n /**\n  * Class configures MetricRegistry (passed outside or created from scratch) with Datadog support\n@@ -34,7 +32,6 @@\n \n \n     private MetricRegistry metricRegistry = null;\n-    private List<String> tags = Arrays.asList();\n     private DatadogReporter datadogReporter;\n     private String apiKey = \"\";\n     private Transport transport;\n@@ -44,11 +41,6 @@ public DDMetricRegistryBuilder setMetricRegistry(MetricRegistry metricRegistry)\n         return this;\n     }\n \n-    public DDMetricRegistryBuilder setTags(List<String> tags) {\n-        this.tags = tags;\n-        return this;\n-    }\n-\n     public DatadogReporter getDatadogReporter() {\n         return datadogReporter;\n     }\n@@ -86,8 +78,7 @@ private DatadogReporter createDatadogReporter(MetricRegistry metricRegistry) thr\n                 DatadogReporter.forRegistry(metricRegistry)\n                         .withHost(InetAddress.getLocalHost().getHostName())\n                         .withTransport(transport)\n-                        .withTags(tags)\n                         .build();\n         return reporter;\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "8ea2da09a5dbe8480d7d94c98e7caf09a23f0aa7",
    "filename": "nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/DataDogReportingTask.java",
    "status": "modified",
    "additions": 14,
    "deletions": 22,
    "changes": 36,
    "blob_url": "https://github.com/apache/nifi/blob/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/DataDogReportingTask.java",
    "raw_url": "https://github.com/apache/nifi/raw/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/DataDogReportingTask.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/DataDogReportingTask.java?ref=d06944ab4d81fae3aa082bb653e59832ddd36789",
    "patch": "@@ -18,7 +18,6 @@\n \n import com.codahale.metrics.Gauge;\n import com.codahale.metrics.MetricRegistry;\n-import com.google.common.base.Optional;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.AtomicDouble;\n@@ -114,8 +113,7 @@ public void setup(final ConfigurationContext context) {\n         metricsPrefix = METRICS_PREFIX.getDefaultValue();\n         environment = ENVIRONMENT.getDefaultValue();\n         virtualMachineMetrics = JmxJvmMetrics.getInstance();\n-        ddMetricRegistryBuilder.setMetricRegistry(metricRegistry)\n-                .setTags(metricsService.getAllTagsList());\n+        ddMetricRegistryBuilder.setMetricRegistry(metricRegistry);\n     }\n \n     @Override\n@@ -145,9 +143,9 @@ public void onTrigger(ReportingContext context) {\n         ddMetricRegistryBuilder.getDatadogReporter().report();\n     }\n \n-    protected void updateMetrics(Map<String, Double> metrics, Optional<String> processorName, Map<String, String> tags) {\n+    protected void updateMetrics(Map<String, Double> metrics, Map<String, String> tags) {\n         for (Map.Entry<String, Double> entry : metrics.entrySet()) {\n-            final String metricName = buildMetricName(processorName, entry.getKey());\n+            final String metricName = buildMetricName(entry.getKey());\n             logger.debug(metricName + \": \" + entry.getValue());\n             //if metric is not registered yet - register it\n             if (!metricsMap.containsKey(metricName)) {\n@@ -163,37 +161,31 @@ private void updateAllMetricGroups(ProcessGroupStatus processGroupStatus) {\n         final List<ProcessorStatus> processorStatuses = new ArrayList<>();\n         populateProcessorStatuses(processGroupStatus, processorStatuses);\n         for (final ProcessorStatus processorStatus : processorStatuses) {\n-            updateMetrics(metricsService.getProcessorMetrics(processorStatus),\n-                    Optional.of(processorStatus.getName()), defaultTags);\n+            final Map<String, String> processorTags = new HashMap<>(defaultTags);\n+            processorTags.putAll(metricsService.getProcessorTags(processorStatus));\n+            updateMetrics(metricsService.getProcessorMetrics(processorStatus), processorTags);\n         }\n \n         final List<ConnectionStatus> connectionStatuses = new ArrayList<>();\n         populateConnectionStatuses(processGroupStatus, connectionStatuses);\n         for (ConnectionStatus connectionStatus: connectionStatuses) {\n-            Map<String, String> connectionStatusTags = new HashMap<>(defaultTags);\n-            connectionStatusTags.putAll(metricsService.getConnectionStatusTags(connectionStatus));\n-            updateMetrics(metricsService.getConnectionStatusMetrics(connectionStatus), Optional.<String>absent(), connectionStatusTags);\n+            updateMetrics(metricsService.getConnectionStatusMetrics(connectionStatus), defaultTags);\n         }\n \n         final List<PortStatus> inputPortStatuses = new ArrayList<>();\n         populateInputPortStatuses(processGroupStatus, inputPortStatuses);\n         for (PortStatus portStatus: inputPortStatuses) {\n-            Map<String, String> portTags = new HashMap<>(defaultTags);\n-            portTags.putAll(metricsService.getPortStatusTags(portStatus));\n-            updateMetrics(metricsService.getPortStatusMetrics(portStatus), Optional.<String>absent(), portTags);\n+            updateMetrics(metricsService.getPortStatusMetrics(portStatus), defaultTags);\n         }\n \n         final List<PortStatus> outputPortStatuses = new ArrayList<>();\n         populateOutputPortStatuses(processGroupStatus, outputPortStatuses);\n         for (PortStatus portStatus: outputPortStatuses) {\n-            Map<String, String> portTags = new HashMap<>(defaultTags);\n-            portTags.putAll(metricsService.getPortStatusTags(portStatus));\n-            updateMetrics(metricsService.getPortStatusMetrics(portStatus), Optional.<String>absent(), portTags);\n+            updateMetrics(metricsService.getPortStatusMetrics(portStatus), defaultTags);\n         }\n \n-        updateMetrics(metricsService.getJVMMetrics(virtualMachineMetrics),\n-                Optional.<String>absent(), defaultTags);\n-        updateMetrics(metricsService.getDataFlowMetrics(processGroupStatus), Optional.<String>absent(), defaultTags);\n+        updateMetrics(metricsService.getJVMMetrics(virtualMachineMetrics), defaultTags);\n+        updateMetrics(metricsService.getDataFlowMetrics(processGroupStatus), defaultTags);\n     }\n \n     private class MetricGauge implements Gauge, DynamicTagsCallback {\n@@ -258,8 +250,8 @@ private void populateOutputPortStatuses(final ProcessGroupStatus groupStatus, fi\n         }\n     }\n \n-    private String buildMetricName(Optional<String> processorName, String metricName) {\n-        return metricsPrefix + \".\" + processorName.or(\"flow\") + \".\" + metricName;\n+    private String buildMetricName(String metricName) {\n+        return metricsPrefix + \".\" + metricName;\n     }\n \n     protected MetricsService getMetricsService() {\n@@ -277,4 +269,4 @@ protected MetricRegistry getMetricRegistry() {\n     protected ConcurrentHashMap<String, AtomicDouble> getMetricsMap() {\n         return new ConcurrentHashMap<>();\n     }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "58f5e3476ab3b00b123b2eb6718f2a19aa71047f",
    "filename": "nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/metrics/MetricNames.java",
    "status": "modified",
    "additions": 0,
    "deletions": 14,
    "changes": 14,
    "blob_url": "https://github.com/apache/nifi/blob/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/metrics/MetricNames.java",
    "raw_url": "https://github.com/apache/nifi/raw/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/metrics/MetricNames.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/metrics/MetricNames.java?ref=d06944ab4d81fae3aa082bb653e59832ddd36789",
    "patch": "@@ -57,18 +57,4 @@\n     //Connection status metrics\n     String QUEUED_COUNT = \"QueuedCount\";\n     String QUEUED_BYTES = \"QueuedBytes\";\n-\n-    //Port status tags\n-    String PORT_ID = \"port-id\";\n-    String PORT_GROUP_ID = \"port-group-id\";\n-    String PORT_NAME = \"port-name\";\n-\n-    //Connection status tags\n-    String CONNECTION_ID = \"connection-id\";\n-    String CONNECTION_GROUP_ID = \"connection-group-id\";\n-    String CONNECTION_NAME = \"connection-name\";\n-    String CONNECTION_SOURCE_ID = \"connection-source-id\";\n-    String CONNECTION_SOURCE_NAME = \"connection-source-name\";\n-    String CONNECTION_DESTINATION_ID = \"connection-destination-id\";\n-    String CONNECTTION_DESTINATION_NAME = \"connection-destination-name\";\n }"
  },
  {
    "sha": "6c743b6ff855df1be908e713e4daab106aa141fd",
    "filename": "nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/metrics/MetricsService.java",
    "status": "modified",
    "additions": 6,
    "deletions": 39,
    "changes": 45,
    "blob_url": "https://github.com/apache/nifi/blob/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/metrics/MetricsService.java",
    "raw_url": "https://github.com/apache/nifi/raw/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/metrics/MetricsService.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/main/java/org/apache/nifi/reporting/datadog/metrics/MetricsService.java?ref=d06944ab4d81fae3aa082bb653e59832ddd36789",
    "patch": "@@ -23,9 +23,7 @@\n import org.apache.nifi.metrics.jvm.JmxJvmMetrics;\n import org.apache.nifi.processor.DataUnit;\n \n-import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n \n@@ -46,6 +44,12 @@\n         return metrics;\n     }\n \n+    public Map<String, String> getProcessorTags(ProcessorStatus status) {\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"processor\", status.getName());\n+        return tags;\n+    }\n+\n     public Map<String, Double> getPortStatusMetrics(PortStatus status){\n         final Map<String, Double> metrics = new HashMap<>();\n         metrics.put(MetricNames.ACTIVE_THREADS, new Double(status.getActiveThreadCount()));\n@@ -60,26 +64,6 @@\n         return metrics;\n     }\n \n-    public Map<String,String> getPortStatusTags(PortStatus status) {\n-        final Map<String, String> portTags = new HashMap<>();\n-        portTags.put(MetricNames.PORT_ID, status.getId());\n-        portTags.put(MetricNames.PORT_GROUP_ID, status.getGroupId());\n-        portTags.put(MetricNames.PORT_NAME, status.getName());\n-        return portTags;\n-    }\n-\n-    public Map<String,String> getConnectionStatusTags(ConnectionStatus status) {\n-        final Map<String, String> connectionTags = new HashMap<>();\n-        connectionTags.put(MetricNames.CONNECTION_ID, status.getId());\n-        connectionTags.put(MetricNames.CONNECTION_NAME, status.getName());\n-        connectionTags.put(MetricNames.CONNECTION_GROUP_ID, status.getGroupId());\n-        connectionTags.put(MetricNames.CONNECTION_DESTINATION_ID, status.getDestinationId());\n-        connectionTags.put(MetricNames.CONNECTTION_DESTINATION_NAME, status.getDestinationName());\n-        connectionTags.put(MetricNames.CONNECTION_SOURCE_ID, status.getSourceId());\n-        connectionTags.put(MetricNames.CONNECTION_SOURCE_NAME, status.getSourceName());\n-        return connectionTags;\n-    }\n-\n     public Map<String, Double> getConnectionStatusMetrics(ConnectionStatus status) {\n         final Map<String, Double> metrics = new HashMap<>();\n         metrics.put(MetricNames.INPUT_COUNT, new Double(status.getInputCount()));\n@@ -109,23 +93,6 @@\n         return metrics;\n     }\n \n-    public List<String> getAllTagsList() {\n-        List<String> tagsList = new ArrayList<>();\n-        tagsList.add(\"env\");\n-        tagsList.add(\"dataflow_id\");\n-        tagsList.add(MetricNames.PORT_ID);\n-        tagsList.add(MetricNames.PORT_NAME);\n-        tagsList.add(MetricNames.PORT_GROUP_ID);\n-        tagsList.add(MetricNames.CONNECTION_ID);\n-        tagsList.add(MetricNames.CONNECTION_NAME);\n-        tagsList.add(MetricNames.CONNECTION_GROUP_ID);\n-        tagsList.add(MetricNames.CONNECTION_SOURCE_ID);\n-        tagsList.add(MetricNames.CONNECTION_SOURCE_NAME);\n-        tagsList.add(MetricNames.CONNECTION_DESTINATION_ID);\n-        tagsList.add(MetricNames.CONNECTTION_DESTINATION_NAME);\n-        return tagsList;\n-    }\n-\n     //virtual machine metrics\n     public Map<String, Double> getJVMMetrics(JmxJvmMetrics virtualMachineMetrics) {\n         final Map<String, Double> metrics = new HashMap<>();"
  },
  {
    "sha": "71f72276e0e31b676a36f99057a15c074bb64af2",
    "filename": "nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/test/java/org/apache/nifi/reporting/datadog/TestDataDogReportingTask.java",
    "status": "modified",
    "additions": 17,
    "deletions": 18,
    "changes": 35,
    "blob_url": "https://github.com/apache/nifi/blob/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/test/java/org/apache/nifi/reporting/datadog/TestDataDogReportingTask.java",
    "raw_url": "https://github.com/apache/nifi/raw/d06944ab4d81fae3aa082bb653e59832ddd36789/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/test/java/org/apache/nifi/reporting/datadog/TestDataDogReportingTask.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-datadog-bundle/nifi-datadog-reporting-task/src/test/java/org/apache/nifi/reporting/datadog/TestDataDogReportingTask.java?ref=d06944ab4d81fae3aa082bb653e59832ddd36789",
    "patch": "@@ -18,7 +18,6 @@\n \n import com.codahale.metrics.Gauge;\n import com.codahale.metrics.MetricRegistry;\n-import com.google.common.base.Optional;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.util.concurrent.AtomicDouble;\n import org.apache.nifi.controller.ConfigurationContext;\n@@ -119,13 +118,13 @@ public void testUpdateMetricsProcessor() throws InitializationException, IOExcep\n         DataDogReportingTask dataDogReportingTask = new TestableDataDogReportingTask();\n         dataDogReportingTask.initialize(initContext);\n         dataDogReportingTask.setup(configurationContext);\n-        dataDogReportingTask.updateMetrics(processorMetrics, Optional.of(\"sampleProcessor\"), tagsMap);\n+        dataDogReportingTask.updateMetrics(processorMetrics, tagsMap);\n \n-        verify(metricRegistry).register(eq(\"nifi.sampleProcessor.FlowFilesReceivedLast5Minutes\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.sampleProcessor.ActiveThreads\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.sampleProcessor.BytesWrittenLast5Minutes\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.sampleProcessor.BytesReadLast5Minutes\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.sampleProcessor.FlowFilesSentLast5Minutes\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.FlowFilesReceivedLast5Minutes\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.ActiveThreads\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.BytesWrittenLast5Minutes\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.BytesReadLast5Minutes\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.FlowFilesSentLast5Minutes\"), Mockito.<Gauge>any());\n     }\n \n     //test updating JMV metrics\n@@ -139,17 +138,17 @@ public void testUpdateMetricsJVM() throws InitializationException, IOException {\n         dataDogReportingTask.initialize(initContext);\n         dataDogReportingTask.setup(configurationContext);\n \n-        dataDogReportingTask.updateMetrics(processorMetrics, Optional.<String>absent(), tagsMap);\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.heap_usage\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.thread_count\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.thread_states.terminated\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.heap_used\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.thread_states.runnable\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.thread_states.timed_waiting\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.uptime\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.daemon_thread_count\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.file_descriptor_usage\"), Mockito.<Gauge>any());\n-        verify(metricRegistry).register(eq(\"nifi.flow.jvm.thread_states.blocked\"), Mockito.<Gauge>any());\n+        dataDogReportingTask.updateMetrics(processorMetrics, tagsMap);\n+        verify(metricRegistry).register(eq(\"nifi.jvm.heap_usage\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.jvm.thread_count\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.jvm.thread_states.terminated\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.jvm.heap_used\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.jvm.thread_states.runnable\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.jvm.thread_states.timed_waiting\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.jvm.uptime\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.jvm.daemon_thread_count\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.jvm.file_descriptor_usage\"), Mockito.<Gauge>any());\n+        verify(metricRegistry).register(eq(\"nifi.jvm.thread_states.blocked\"), Mockito.<Gauge>any());\n     }\n \n "
  }
]
