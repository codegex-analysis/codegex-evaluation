[
  {
    "sha": "e550b83bfb37460c436d1402108c78a1d63d92d6",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/PropertyDescriptor.java",
    "status": "modified",
    "additions": 161,
    "deletions": 2,
    "changes": 163,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/PropertyDescriptor.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/PropertyDescriptor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/PropertyDescriptor.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,15 +16,23 @@\n  */\n package org.apache.nifi.components;\n \n+import org.apache.nifi.components.resource.ResourceCardinality;\n+import org.apache.nifi.components.resource.ResourceDefinition;\n+import org.apache.nifi.components.resource.ResourceReference;\n+import org.apache.nifi.components.resource.StandardResourceReferenceFactory;\n+import org.apache.nifi.components.resource.ResourceType;\n+import org.apache.nifi.components.resource.StandardResourceDefinition;\n+import org.apache.nifi.controller.ControllerService;\n+import org.apache.nifi.expression.ExpressionLanguageScope;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n-import org.apache.nifi.controller.ControllerService;\n-import org.apache.nifi.expression.ExpressionLanguageScope;\n \n /**\n  * An immutable object for holding information about a type of component\n@@ -110,6 +118,10 @@\n      */\n     private final Set<PropertyDependency> dependencies;\n \n+    /**\n+     * The definition of the resource(s) that this property references\n+     */\n+    private final ResourceDefinition resourceDefinition;\n \n     protected PropertyDescriptor(final Builder builder) {\n         this.displayName = builder.displayName == null ? builder.name : builder.displayName;\n@@ -126,6 +138,7 @@ protected PropertyDescriptor(final Builder builder) {\n         this.controllerServiceDefinition = builder.controllerServiceDefinition;\n         this.validators = Collections.unmodifiableList(new ArrayList<>(builder.validators));\n         this.dependencies = builder.dependencies == null ? Collections.emptySet() : Collections.unmodifiableSet(new HashSet<>(builder.dependencies));\n+        this.resourceDefinition = builder.resourceDefinition;\n     }\n \n     @Override\n@@ -159,6 +172,17 @@ public ValidationResult validate(final String input, final ValidationContext con\n             }\n         }\n \n+        final ResourceDefinition resourceDefinition = getResourceDefinition();\n+        if (resourceDefinition != null) {\n+            final Validator validator = new ResourceDefinitionValidator(resourceDefinition, this.expressionLanguageScope);\n+            final ValidationResult result = validator.validate(this.name, input, context);\n+            if (!result.isValid()) {\n+                return result;\n+            }\n+\n+            lastResult = result;\n+        }\n+\n         for (final Validator validator : validators) {\n             lastResult = validator.validate(this.name, input, context);\n             if (!lastResult.isValid()) {\n@@ -204,6 +228,7 @@ public ValidationResult validate(final String input, final ValidationContext con\n         private boolean dynamic = false;\n         private boolean dynamicallyModifiesClasspath = false;\n         private Class<? extends ControllerService> controllerServiceDefinition;\n+        private ResourceDefinition resourceDefinition;\n         private List<Validator> validators = new ArrayList<>();\n \n         public Builder fromPropertyDescriptor(final PropertyDescriptor specDescriptor) {\n@@ -221,6 +246,7 @@ public Builder fromPropertyDescriptor(final PropertyDescriptor specDescriptor) {\n             this.controllerServiceDefinition = specDescriptor.getControllerServiceDefinition();\n             this.validators = new ArrayList<>(specDescriptor.validators);\n             this.dependencies = new HashSet<>(specDescriptor.dependencies);\n+            this.resourceDefinition = specDescriptor.resourceDefinition;\n             return this;\n         }\n \n@@ -334,6 +360,8 @@ public Builder dynamic(final boolean dynamic) {\n          *  to load required classes on an instance-by-instance basis\n          *  (by calling {@link Class#forName(String, boolean, ClassLoader)} for example).\n          *\n+         * Any property descriptor that dynamically modifies the classpath should also make use of the {@link #identifiesExternalResource(ResourceCardinality, ResourceType, ResourceType...)} method\n+         * to indicate that the property descriptor references external resources and optionally restrict which types of resources and how many resources the property allows.\n          *\n          * @param dynamicallyModifiesClasspath whether or not this property should be used by the framework to modify the classpath\n          * @return the builder\n@@ -453,6 +481,38 @@ private boolean isValueAllowed(final String value) {\n             return false;\n         }\n \n+        /**\n+         * Specifies that this property references one or more resources that are external to NiFi that the component is meant to consume.\n+         * Any property descriptor that identifies an external resource will be automatically validated against the following rules:\n+         * <ul>\n+         *     <li>If the ResourceCardinality is SINGLE, the given property value must be a file, a directory, or a URL that uses a protocol of http/https/file.</li>\n+         *     <li>The given resourceTypes dictate which types of input are allowed. For example, if <code>identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)</code>\n+         *     is used, the input must be a regular file. If <code>identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE, ResourceType.DIRECTORY)</code> is used, then the input\n+         *     must be exactly one file OR directory.\n+         *     </li>\n+         *     <li>If the ResourceCardinality is MULTIPLE, the given property value may consist of one or more resources, each separted by a comma and optional white space.</li>\n+         * </ul>\n+         *\n+         * Generally, any property descriptor that makes use of the {@link #dynamicallyModifiesClasspath(boolean)} method to dynamically update its classpath should also\n+         * make use of this method, specifying which types of resources are allowed and how many.\n+         *\n+         * @param cardinality specifies how many resources the property should allow\n+         * @param resourceType the type of resource that is allowed\n+         * @param additionalResourceTypes if more than one type of resource is allowed, any resource type in addition to the given resource type may be provided\n+         * @return the builder\n+         */\n+        public Builder identifiesExternalResource(final ResourceCardinality cardinality, final ResourceType resourceType, final ResourceType... additionalResourceTypes) {\n+            Objects.requireNonNull(cardinality);\n+            Objects.requireNonNull(resourceType);\n+\n+            final Set<ResourceType> resourceTypes = new HashSet<>();\n+            resourceTypes.add(resourceType);\n+            resourceTypes.addAll(Arrays.asList(additionalResourceTypes));\n+\n+            this.resourceDefinition = new StandardResourceDefinition(cardinality, resourceTypes);\n+            return this;\n+        }\n+\n         /**\n          * Establishes a relationship between this Property and the given property by declaring that this Property is only relevant if the given Property has a non-null value.\n          * Furthermore, if one or more explicit Allowable Values are provided, this Property will not be relevant unless the given Property's value is equal to one of the given Allowable Values.\n@@ -592,6 +652,10 @@ public boolean isDynamicClasspathModifier() {\n         return dependencies;\n     }\n \n+    public ResourceDefinition getResourceDefinition() {\n+        return resourceDefinition;\n+    }\n+\n     @Override\n     public boolean equals(final Object other) {\n         if (other == null) {\n@@ -665,4 +729,99 @@ public ValidationResult validate(final String subject, final String input, final\n             return builder.build();\n         }\n     }\n+\n+    private static class ResourceDefinitionValidator implements Validator {\n+        private final ResourceDefinition resourceDefinition;\n+        private final ExpressionLanguageScope expressionLanguageScope;\n+\n+        public ResourceDefinitionValidator(final ResourceDefinition resourceDefinition, final ExpressionLanguageScope expressionLanguageScope) {\n+            this.resourceDefinition = resourceDefinition;\n+            this.expressionLanguageScope = expressionLanguageScope;\n+        }\n+\n+        @Override\n+        public ValidationResult validate(final String subject, final String configuredInput, final ValidationContext context) {\n+            final ValidationResult.Builder resultBuilder = new ValidationResult.Builder()\n+                .input(configuredInput)\n+                .subject(subject);\n+\n+            if (configuredInput == null) {\n+                return resultBuilder.valid(false)\n+                    .explanation(\"No value specified\")\n+                    .build();\n+            }\n+\n+            // If Expression Language is supported and is used in the property value, we cannot perform validation against the configured\n+            // input unless the Expression Language is expressly limited to only variable registry. In that case, we can evaluate it and then\n+            // validate the value after evaluating the Expression Language.\n+            String input = configuredInput;\n+            if (context.isExpressionLanguageSupported(subject) && context.isExpressionLanguagePresent(configuredInput)) {\n+                if (expressionLanguageScope != null && expressionLanguageScope == ExpressionLanguageScope.VARIABLE_REGISTRY) {\n+                    input = context.newPropertyValue(configuredInput).evaluateAttributeExpressions().getValue();\n+                    resultBuilder.input(input);\n+                } else {\n+                    return resultBuilder.valid(true)\n+                        .explanation(\"Expression Language is present, so validation of property value cannot be performed\")\n+                        .build();\n+                }\n+            }\n+\n+            // If the property can be text, then there's nothing to validate. Anything that is entered may be valid.\n+            // This will be improved in the future, by allowing the user to specify the type of resource that is being referenced.\n+            // Until then, we will simply require that the component perform any necessary validation.\n+            final boolean allowsText = resourceDefinition.getResourceTypes().contains(ResourceType.TEXT);\n+            if (allowsText) {\n+                return resultBuilder.valid(true)\n+                    .explanation(\"Property allows for Resource Type of Text, so validation of property value cannot be performed\")\n+                    .build();\n+            }\n+\n+            final String[] splits = input.split(\",\");\n+            if (resourceDefinition.getCardinality() == ResourceCardinality.SINGLE && splits.length > 1) {\n+                return resultBuilder.valid(false)\n+                    .explanation(\"Property only supports a single Resource but \" + splits.length + \" resources were specified\")\n+                    .build();\n+            }\n+\n+            final Set<ResourceType> resourceTypes = resourceDefinition.getResourceTypes();\n+            final List<String> nonExistentResources = new ArrayList<>();\n+\n+            int count = 0;\n+            for (final String split : splits) {\n+                final ResourceReference resourceReference = new StandardResourceReferenceFactory().createResourceReference(split, resourceDefinition);\n+                if (resourceReference == null) {\n+                    continue;\n+                }\n+\n+                count++;\n+\n+                final boolean accessible = resourceReference.isAccessible();\n+                if (!accessible) {\n+                    nonExistentResources.add(resourceReference.getLocation());\n+                    continue;\n+                }\n+\n+                if (!resourceTypes.contains(resourceReference.getResourceType())) {\n+                    return resultBuilder.valid(false)\n+                        .explanation(\"Specified Resource is a \" + resourceReference.getResourceType().name() + \" but this property does not allow this type of resource\")\n+                        .build();\n+                }\n+            }\n+\n+            if (count == 0) {\n+                return resultBuilder.valid(false)\n+                    .explanation(\"No resources were specified\")\n+                    .build();\n+            }\n+\n+            if (!nonExistentResources.isEmpty()) {\n+                return resultBuilder.valid(false)\n+                    .explanation(\"The specified resource(s) do not exist or could not be accessed: \" + nonExistentResources)\n+                    .build();\n+            }\n+\n+            return resultBuilder.valid(true)\n+                .build();\n+        }\n+    }\n }"
  },
  {
    "sha": "4e291e997e7cb93f02d458be140c57f30268ddc8",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/PropertyValue.java",
    "status": "modified",
    "additions": 17,
    "deletions": 2,
    "changes": 19,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/PropertyValue.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/PropertyValue.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/PropertyValue.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,15 +16,18 @@\n  */\n package org.apache.nifi.components;\n \n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n+import org.apache.nifi.components.resource.ResourceReference;\n+import org.apache.nifi.components.resource.ResourceReferences;\n import org.apache.nifi.controller.ControllerService;\n import org.apache.nifi.expression.AttributeValueDecorator;\n import org.apache.nifi.flowfile.FlowFile;\n import org.apache.nifi.processor.DataUnit;\n import org.apache.nifi.processor.exception.ProcessException;\n import org.apache.nifi.registry.VariableRegistry;\n \n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n /**\n  * <p>\n  * A PropertyValue provides a mechanism whereby the currently configured value\n@@ -112,6 +115,18 @@\n      */\n     <T extends ControllerService> T asControllerService(Class<T> serviceType) throws IllegalArgumentException;\n \n+    /**\n+     * @return a ResourceReference for the configured property value, or <code>null</code> if no value was specified, or if the property references multiple resources.\n+     * @see #asResources()\n+     */\n+    ResourceReference asResource();\n+\n+    /**\n+     * @return a ResourceReferences for the configured property value. If no property value is set, a ResourceRferences will be returned that references no resources.\n+     * I.e., this method will never return <code>null</code>.\n+     */\n+    ResourceReferences asResources();\n+\n     /**\n      * @return <code>true</code> if the user has configured a value, or if the\n      * {@link PropertyDescriptor} for the associated property has a default"
  },
  {
    "sha": "65fc167ad61a72bd4c66acdfc73df1e52a8db531",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/FileResourceReference.java",
    "status": "added",
    "additions": 100,
    "deletions": 0,
    "changes": 100,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/FileResourceReference.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/FileResourceReference.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/FileResourceReference.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Objects;\n+\n+public class FileResourceReference implements ResourceReference {\n+    private final File file;\n+    private final ResourceType resourceType;\n+\n+    public FileResourceReference(final File file) {\n+        this.file = Objects.requireNonNull(file);\n+        this.resourceType = file.isDirectory() ? ResourceType.DIRECTORY : ResourceType.FILE;\n+    }\n+\n+    @Override\n+    public File asFile() {\n+        return file;\n+    }\n+\n+    @Override\n+    public URL asURL() {\n+        try {\n+            return file.toURI().toURL();\n+        } catch (final MalformedURLException e) {\n+            throw new AssertionError(\"File \" + file.getAbsolutePath() + \" cannot be represented as a URL\"); // we won't encounter this.\n+        }\n+    }\n+\n+    @Override\n+    public InputStream read() throws IOException {\n+        if (resourceType != ResourceType.FILE) {\n+            throw new FileNotFoundException(\"Could not read from file with name \" + file.getAbsolutePath() + \" because that references a directory\");\n+        }\n+\n+        return new FileInputStream(file);\n+    }\n+\n+    @Override\n+    public boolean isAccessible() {\n+        return file.exists() && file.canRead();\n+    }\n+\n+    @Override\n+    public String getLocation() {\n+        return file.getAbsolutePath();\n+    }\n+\n+    @Override\n+    public ResourceType getResourceType() {\n+        return resourceType;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        final FileResourceReference that = (FileResourceReference) o;\n+        return Objects.equals(file, that.file)\n+            && resourceType == that.resourceType;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(file, resourceType);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"FileResourceReference[file=\" + file + \", resourceType=\" + resourceType + \"]\";\n+    }\n+}"
  },
  {
    "sha": "1563df78909df35c87ffdaff3a39fc385a05b33e",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceCardinality.java",
    "status": "added",
    "additions": 34,
    "deletions": 0,
    "changes": 34,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceCardinality.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceCardinality.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceCardinality.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+/**\n+ * Indicates the cardinality of how many resources can be referenced by a given property.\n+ */\n+public enum ResourceCardinality {\n+\n+    /**\n+     * Exactly one resource must be specified\n+     */\n+    SINGLE,\n+\n+    /**\n+     * One or more resources may be supplied, as a comma-separated list\n+     */\n+    MULTIPLE;\n+}"
  },
  {
    "sha": "bf02c5978b03345dd4ee30eb0dec94580f925420",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceContext.java",
    "status": "added",
    "additions": 35,
    "deletions": 0,
    "changes": 35,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceContext.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceContext.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceContext.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import org.apache.nifi.components.PropertyDescriptor;\n+\n+/**\n+ * Provides the context in which a Reference Reference is to be evaluated\n+ */\n+public interface ResourceContext {\n+    /**\n+     * @return a ResourceReferenceFactory that can be used to parse a property value into a {@link ResourceReference} or {@link ResourceReferences}\n+     */\n+    ResourceReferenceFactory getResourceReferenceFactory();\n+\n+    /**\n+     * @return the PropertyDescriptor that describes the property whose value may be a resource\n+     */\n+    PropertyDescriptor getPropertyDescriptor();\n+}"
  },
  {
    "sha": "b91065ec61f545395867d5f974483beefd7a2557",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceDefinition.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceDefinition.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceDefinition.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceDefinition.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import java.util.Set;\n+\n+/**\n+ * Defines the number and types of resources that allowed to be referenced by a component property\n+ */\n+public interface ResourceDefinition {\n+\n+    /**\n+     * Specifies the number of resources that should be reference-able by a component property\n+     * @return the cardinality for the number of resources that should be referenced\n+     */\n+    ResourceCardinality getCardinality();\n+\n+    /**\n+     * @return the types of resources that are allowed to be referenced\n+     */\n+    Set<ResourceType> getResourceTypes();\n+}"
  },
  {
    "sha": "49b95d3b2195794539db6d251ee596e3b87ae8a3",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReference.java",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReference.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReference.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReference.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+/**\n+ * A reference to a Resource that is identified by a property value\n+ */\n+public interface ResourceReference {\n+\n+    /**\n+     * @return a file representation of the resource, or <code>null</code> if the Resource cannot be represented as a File\n+     */\n+    File asFile();\n+\n+    /**\n+     * @return a URL representation of the resource, or <code>null</code> if the Resource cannot be represented as a URL\n+     */\n+    URL asURL();\n+\n+    /**\n+     * @return an InputStream to read the contents of the resource\n+     *\n+     * @throws IOException if unable to obtain an InputStream from the resource\n+     */\n+    InputStream read() throws IOException;\n+\n+    /**\n+     * Indicates whether or not the resource is accessible. What it means for the resource to be accessible depends on the type of\n+     * resource. A File resource, for example, might be accessible only if the file exists and is readable, while a URL resource might\n+     * always be considered accessible, or might be accesssible only if the existence of the resource can be confirmed.\n+     *\n+     * @return <code>true</code> if the file can be accessed, <code>false</code> otherwise\n+     */\n+    boolean isAccessible();\n+\n+    /**\n+     * @return a String representation of the location, or <code>null</code> for a Resource that does not have an external location.\n+     * For a File or a Directory, this will be the full path name; for a URL it will be the String form of the URL\n+     */\n+    String getLocation();\n+\n+    /**\n+     * @return the type of resource that is being referenced\n+     */\n+    ResourceType getResourceType();\n+}"
  },
  {
    "sha": "67b056e115fa54299e1414566e20b67bf22dc68b",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReferenceFactory.java",
    "status": "added",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReferenceFactory.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReferenceFactory.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReferenceFactory.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+public interface ResourceReferenceFactory {\n+    ResourceReference createResourceReference(String value, ResourceDefinition resourceDefinition);\n+\n+    ResourceReferences createResourceReferences(String value, ResourceDefinition resourceDefinition);\n+}"
  },
  {
    "sha": "5addba026c1720f6b7452b02e88c6660b42a674d",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReferences.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReferences.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReferences.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceReferences.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import java.net.URL;\n+import java.util.List;\n+\n+/**\n+ * A representation of zero or more {@link ResourceReference}s\n+ */\n+public interface ResourceReferences {\n+\n+    /**\n+     * @return a List representation of all Resource References\n+     */\n+    List<ResourceReference> asList();\n+\n+    /**\n+     * @return a list of all Resource References' locations\n+     */\n+    List<String> asLocations();\n+\n+    /**\n+     * @return a list of all Resource References' URLs\n+     */\n+    List<URL> asURLs();\n+\n+    /**\n+     * @return the number of Resource References held\n+     */\n+    int getCount();\n+\n+    /**\n+     * Iterates through the Resource References and for any reference that may represent more than one\n+     * resource, flattens the resource into a List of single-entity references. For example, consider that this ResourceReferences\n+     * holds a single ResourceReference, of type DIRECTORY and the referenced directory contains 10 files. Calling {@link #asList()} would\n+     * return a single ResourceReference. But calling <code>flatten()</code> would return a new ResourceReferences type whose {@link #asList()}\n+     * method would return 10 ResourceReference objects, each with a ResourceType of FILE. The flatten operation is not recursive, meaning that if\n+     * a DIRECTORY is flattened, any sub-directories will be dropped. If the contents of the subdirectories are to be retained, use {@link #flattenRecursively()}\n+     * instead.\n+     *\n+     * @return a flattened ResourceReferences\n+     */\n+    ResourceReferences flatten();\n+\n+    /**\n+     * Recursively iterates through the Resource References and for any reference that may represent more than one\n+     * resource, flattens the resource into a List of single-entity references. For example, consider that this ResourceReferences\n+     * holds a single ResourceReference, of type DIRECTORY and the referenced directory contains 10 files. Calling {@link #asList()} would\n+     * return a single ResourceReference. But calling <code>flatten()</code> would return a new ResourceReferences type whose {@link #asList()}\n+     * method would return 10 ResourceReference objects, each with a ResourceType of FILE. The flatten operation is recursive, meaning that if\n+     * a DIRECTORY is encountered, its reference will be replaced with a new reference for each file, even if that file exists 100 levels deep\n+     * in the directory structure.\n+     *\n+     * @return a flattened ResourceReferences\n+     */\n+    ResourceReferences flattenRecursively();\n+}"
  },
  {
    "sha": "60eff90a8623a18444b9c52feede2ad59ada8e67",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceType.java",
    "status": "added",
    "additions": 51,
    "deletions": 0,
    "changes": 51,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceType.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceType.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/ResourceType.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+public enum ResourceType {\n+    /**\n+     * Referenced Resource is a File on a local (or mounted) file system\n+     */\n+    FILE(\"file\"),\n+\n+    /**\n+     * Referenced Resource is a directory on a local (or mounted) file system\n+     */\n+    DIRECTORY(\"directory\"),\n+\n+    /**\n+     * Referenced Resource is UTF-8 text, rather than an external entity\n+     */\n+    TEXT(\"text\"),\n+\n+    /**\n+     * Referenced Resource is a URL that uses the HTTP, HTTPS, or file protocol\n+     * (i.e., <code>http://...</code>, <code>https://...</code>, or <code>file:...</code>)\n+     */\n+    URL(\"URL\");\n+\n+    private final String prettyPrintName;\n+    ResourceType(final String prettyPrintName) {\n+        this.prettyPrintName = prettyPrintName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return prettyPrintName;\n+    }\n+}"
  },
  {
    "sha": "4e1fa6bbb773457f1e7ff3b33e313abfc491ddc3",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceContext.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceContext.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceContext.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceContext.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import org.apache.nifi.components.PropertyDescriptor;\n+\n+public class StandardResourceContext implements ResourceContext {\n+    private final ResourceReferenceFactory resourceReferenceFactory;\n+    private final PropertyDescriptor propertyDescriptor;\n+\n+    public StandardResourceContext(final ResourceReferenceFactory resourceReferenceFactory, final PropertyDescriptor propertyDescriptor) {\n+        this.resourceReferenceFactory = resourceReferenceFactory;\n+        this.propertyDescriptor = propertyDescriptor;\n+    }\n+\n+    @Override\n+    public ResourceReferenceFactory getResourceReferenceFactory() {\n+        return resourceReferenceFactory;\n+    }\n+\n+    @Override\n+    public PropertyDescriptor getPropertyDescriptor() {\n+        return propertyDescriptor;\n+    }\n+}"
  },
  {
    "sha": "125dcbfcd4f1b294fad6be058465542da76b1055",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceDefinition.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceDefinition.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceDefinition.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceDefinition.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import java.util.Set;\n+\n+public class StandardResourceDefinition implements ResourceDefinition {\n+    private final ResourceCardinality cardinality;\n+    private final Set<ResourceType> resourceTypes;\n+\n+    public StandardResourceDefinition(final ResourceCardinality cardinality, final Set<ResourceType> resourceTypes) {\n+        this.cardinality = cardinality;\n+        this.resourceTypes = resourceTypes;\n+    }\n+\n+    @Override\n+    public ResourceCardinality getCardinality() {\n+        return cardinality;\n+    }\n+\n+    @Override\n+    public Set<ResourceType> getResourceTypes() {\n+        return resourceTypes;\n+    }\n+}"
  },
  {
    "sha": "acc85e5ef437b4c1273aa92e98d525d43258a49d",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceReferenceFactory.java",
    "status": "added",
    "additions": 128,
    "deletions": 0,
    "changes": 128,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceReferenceFactory.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceReferenceFactory.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceReferenceFactory.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class StandardResourceReferenceFactory implements ResourceReferenceFactory {\n+\n+    public ResourceReferences createResourceReferences(final String value, final ResourceDefinition resourceDefinition) {\n+        if (value == null) {\n+            return new StandardResourceReferences(Collections.emptyList());\n+        }\n+\n+        final String trimmed = value.trim();\n+        if (trimmed.isEmpty()) {\n+            return null;\n+        }\n+\n+        if (resourceDefinition == null) {\n+            return null;\n+        }\n+\n+        final List<ResourceReference> references;\n+        final List<String> locations = parseResourceLocations(value);\n+        references = new ArrayList<>(locations.size());\n+        locations.forEach(location -> references.add(createResourceReference(location, resourceDefinition)));\n+\n+        return new StandardResourceReferences(references);\n+    }\n+\n+    public ResourceReference createResourceReference(final String value, final ResourceDefinition resourceDefinition) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        final String trimmed = value.trim();\n+        if (trimmed.isEmpty()) {\n+            return null;\n+        }\n+\n+        if (resourceDefinition == null) {\n+            return null;\n+        }\n+\n+        final Set<ResourceType> allowedResourceTypes = resourceDefinition.getResourceTypes();\n+        if (allowedResourceTypes.contains(ResourceType.URL)) {\n+            try {\n+                if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n+                    return new URLResourceReference(new URL(trimmed));\n+                }\n+\n+                if (trimmed.startsWith(\"file:\")) {\n+                    final URL url = new URL(trimmed);\n+                    final String filename = url.getFile();\n+                    final File file = new File(filename);\n+                    return new FileResourceReference(file);\n+                }\n+            } catch (MalformedURLException e) {\n+                throw new IllegalArgumentException(\"Invalid URL: \" + trimmed);\n+            }\n+        }\n+\n+        final boolean fileAllowed = allowedResourceTypes.contains(ResourceType.FILE) || allowedResourceTypes.contains(ResourceType.DIRECTORY);\n+        final boolean textAllowed = allowedResourceTypes.contains(ResourceType.TEXT);\n+\n+        if (fileAllowed && textAllowed) {\n+            // We have to make a determination whether this is a file or text. Eventually, it will be best if the user tells us explicitly.\n+            // For now, we will make a determination based on a couple of simple rules.\n+            final File file = new File(trimmed);\n+            if (file.isAbsolute() || file.exists()) {\n+                return new FileResourceReference(file);\n+            }\n+\n+            if (trimmed.startsWith(\"./\") || trimmed.startsWith(\".\\\\\")) {\n+                return new FileResourceReference(file);\n+            }\n+\n+            return new Utf8TextResource(value); // Use explicit value, not trimmed value, as the white space may be important for textual content.\n+        }\n+\n+        if (fileAllowed) {\n+            final File file = new File(trimmed);\n+            return new FileResourceReference(file);\n+        }\n+\n+        if (textAllowed) {\n+            return new Utf8TextResource(value);\n+        }\n+\n+        return null;\n+    }\n+\n+    private List<String> parseResourceLocations(final String rawValue) {\n+        final List<String> resourceLocations = new ArrayList<>();\n+        final String[] splits = rawValue.split(\",\");\n+        for (final String split : splits) {\n+            final String trimmed = split.trim();\n+            if (trimmed.isEmpty()) {\n+                continue;\n+            }\n+\n+            resourceLocations.add(trimmed);\n+        }\n+\n+        return resourceLocations;\n+    }\n+}"
  },
  {
    "sha": "0b240beed945853023c6bb65cb160f8ae655a374",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceReferences.java",
    "status": "added",
    "additions": 154,
    "deletions": 0,
    "changes": 154,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceReferences.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceReferences.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/StandardResourceReferences.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class StandardResourceReferences implements ResourceReferences {\n+    public List<ResourceReference> resourceReferences;\n+\n+    public StandardResourceReferences(final List<ResourceReference> resourceReferences) {\n+        this.resourceReferences = Objects.requireNonNull(resourceReferences);\n+    }\n+\n+    @Override\n+    public List<ResourceReference> asList() {\n+        return Collections.unmodifiableList(resourceReferences);\n+    }\n+\n+    @Override\n+    public List<String> asLocations() {\n+        final List<String> locations = new ArrayList<>(resourceReferences.size());\n+        resourceReferences.forEach(ref -> locations.add(ref.getLocation()));\n+        return locations;\n+    }\n+\n+    @Override\n+    public List<URL> asURLs() {\n+        final List<URL> locations = new ArrayList<>(resourceReferences.size());\n+        resourceReferences.forEach(ref -> locations.add(ref.asURL()));\n+        return locations;\n+    }\n+\n+    @Override\n+    public int getCount() {\n+        return resourceReferences.size();\n+    }\n+\n+    @Override\n+    public ResourceReferences flatten() {\n+        if (resourceReferences.isEmpty()) {\n+            return this;\n+        }\n+\n+        final List<ResourceReference> flattened = new ArrayList<>();\n+        resourceReferences.forEach(reference -> {\n+            if (reference.getResourceType() == ResourceType.DIRECTORY) {\n+                addChildren(reference.asFile(), flattened);\n+            } else {\n+                flattened.add(reference);\n+            }\n+        });\n+\n+        return new StandardResourceReferences(flattened);\n+    }\n+\n+    private void addChildren(final File file, final List<ResourceReference> flattened) {\n+        if (file == null) {\n+            return;\n+        }\n+\n+        if (file.isDirectory()) {\n+            final File[] children = file.listFiles();\n+            if (children != null) {\n+                for (final File child : children) {\n+                    if (child.isFile()) {\n+                        flattened.add(new FileResourceReference(child));\n+                    }\n+                }\n+            }\n+        } else {\n+            flattened.add(new FileResourceReference(file));\n+        }\n+    }\n+\n+\n+    @Override\n+    public ResourceReferences flattenRecursively() {\n+        if (resourceReferences.isEmpty()) {\n+            return this;\n+        }\n+\n+        final List<ResourceReference> flattened = new ArrayList<>();\n+        resourceReferences.forEach(reference -> {\n+            if (reference.getResourceType() == ResourceType.DIRECTORY) {\n+                recurse(reference.asFile(), flattened);\n+            } else {\n+                flattened.add(reference);\n+            }\n+        });\n+\n+        return new StandardResourceReferences(flattened);\n+    }\n+\n+    private void recurse(final File file, final List<ResourceReference> flattened) {\n+        if (file == null) {\n+            return;\n+        }\n+\n+        if (file.isDirectory()) {\n+            final File[] children = file.listFiles();\n+            if (children != null) {\n+                for (final File child : children) {\n+                    recurse(child, flattened);\n+                }\n+            }\n+        } else {\n+            flattened.add(new FileResourceReference(file));\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        final StandardResourceReferences that = (StandardResourceReferences) o;\n+        return Objects.equals(resourceReferences, that.resourceReferences);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(resourceReferences);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"StandardResourceReferences[resources=\" + resourceReferences + \"]\";\n+    }\n+}"
  },
  {
    "sha": "8b5f7f749ea463214dd62db7f4f2cf73da3f1ec1",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/URLResourceReference.java",
    "status": "added",
    "additions": 67,
    "deletions": 0,
    "changes": 67,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/URLResourceReference.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/URLResourceReference.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/URLResourceReference.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+\n+public class URLResourceReference implements ResourceReference {\n+    private final URL url;\n+\n+    public URLResourceReference(final URL url) {\n+        this.url = url;\n+    }\n+\n+    @Override\n+    public File asFile() {\n+        return null;\n+    }\n+\n+    @Override\n+    public URL asURL() {\n+        return url;\n+    }\n+\n+    @Override\n+    public InputStream read() throws IOException {\n+        return url.openStream();\n+    }\n+\n+    @Override\n+    public boolean isAccessible() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String getLocation() {\n+        return url.toExternalForm();\n+    }\n+\n+    @Override\n+    public ResourceType getResourceType() {\n+        return ResourceType.URL;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"URLResourceReference[url=\" + url + \"]\";\n+    }\n+\n+}"
  },
  {
    "sha": "78f94e9f93b09da8ff1104acfd5b4c52aeca15dd",
    "filename": "nifi-api/src/main/java/org/apache/nifi/components/resource/Utf8TextResource.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/Utf8TextResource.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/components/resource/Utf8TextResource.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/components/resource/Utf8TextResource.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+\n+public class Utf8TextResource implements ResourceReference {\n+    private final String text;\n+\n+    public Utf8TextResource(final String text) {\n+        this.text = text;\n+    }\n+\n+    @Override\n+    public File asFile() {\n+        return null;\n+    }\n+\n+    @Override\n+    public URL asURL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public InputStream read() throws IOException {\n+        return new ByteArrayInputStream(text.getBytes(StandardCharsets.UTF_8));\n+    }\n+\n+    @Override\n+    public boolean isAccessible() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String getLocation() {\n+        return null;\n+    }\n+\n+    @Override\n+    public ResourceType getResourceType() {\n+        return ResourceType.TEXT;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Utf8TextResource[text=\" + text.length() + \" characters]\";\n+    }\n+}"
  },
  {
    "sha": "e24b53a55cca73a2f2c4eff48a01ed8a647da52b",
    "filename": "nifi-api/src/main/java/org/apache/nifi/documentation/xml/XmlDocumentationWriter.java",
    "status": "modified",
    "additions": 30,
    "deletions": 13,
    "changes": 43,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/documentation/xml/XmlDocumentationWriter.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/main/java/org/apache/nifi/documentation/xml/XmlDocumentationWriter.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/main/java/org/apache/nifi/documentation/xml/XmlDocumentationWriter.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,19 +16,6 @@\n  */\n package org.apache.nifi.documentation.xml;\n \n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Function;\n-import javax.xml.stream.XMLOutputFactory;\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamWriter;\n import org.apache.nifi.annotation.behavior.DynamicProperty;\n import org.apache.nifi.annotation.behavior.DynamicRelationship;\n import org.apache.nifi.annotation.behavior.InputRequirement;\n@@ -45,11 +32,27 @@\n import org.apache.nifi.components.PropertyDependency;\n import org.apache.nifi.components.PropertyDescriptor;\n import org.apache.nifi.components.RequiredPermission;\n+import org.apache.nifi.components.resource.ResourceDefinition;\n+import org.apache.nifi.components.resource.ResourceType;\n import org.apache.nifi.documentation.AbstractDocumentationWriter;\n import org.apache.nifi.documentation.ExtensionType;\n import org.apache.nifi.documentation.ServiceAPI;\n import org.apache.nifi.processor.Relationship;\n \n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n /**\n  * XML-based implementation of DocumentationWriter\n  *\n@@ -177,11 +180,25 @@ private void writeProperty(final PropertyDescriptor property, Map<String,Service\n         writeTextElement(\"expressionLanguageScope\", property.getExpressionLanguageScope() == null ? null : property.getExpressionLanguageScope().name());\n         writeBooleanElement(\"dynamicallyModifiesClasspath\", property.isDynamicClasspathModifier());\n         writeBooleanElement(\"dynamic\", property.isDynamic());\n+        writeResourceDefinition(property.getResourceDefinition());\n         writeDependencies(property);\n \n         writeEndElement();\n     }\n \n+    private void writeResourceDefinition(final ResourceDefinition resourceDefinition) throws IOException {\n+        writeStartElement(\"resourceDefinition\");\n+        if (resourceDefinition != null) {\n+            writeTextElement(\"cardinality\", resourceDefinition.getCardinality().name());\n+            writeArray(\"resourceTypes\", resourceDefinition.getResourceTypes(), this::writeResourceType);\n+        }\n+        writeEndElement();\n+    }\n+\n+    private void writeResourceType(final ResourceType resourceType) throws IOException {\n+        writeTextElement(\"resourceType\", resourceType.name());\n+    }\n+\n     private void writeAllowableValue(final AllowableValue allowableValue) throws IOException {\n         writeStartElement(\"allowableValue\");\n         writeTextElement(\"displayName\", allowableValue.getDisplayName());"
  },
  {
    "sha": "edeab3047c8c8a9101cd070407491e52b5b89e99",
    "filename": "nifi-api/src/test/java/org/apache/nifi/components/TestPropertyDescriptor.java",
    "status": "modified",
    "additions": 84,
    "deletions": 2,
    "changes": 86,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/test/java/org/apache/nifi/components/TestPropertyDescriptor.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/test/java/org/apache/nifi/components/TestPropertyDescriptor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/test/java/org/apache/nifi/components/TestPropertyDescriptor.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,13 +16,24 @@\n  */\n package org.apache.nifi.components;\n \n-import static org.junit.Assert.assertNotNull;\n-\n import org.apache.nifi.components.PropertyDescriptor.Builder;\n+import org.apache.nifi.components.resource.ResourceCardinality;\n+import org.apache.nifi.components.resource.ResourceType;\n+import org.apache.nifi.expression.ExpressionLanguageScope;\n import org.junit.BeforeClass;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n \n /**\n  * Regression test for issue NIFI-49, to ensure that if a Processor's Property's\n@@ -56,4 +67,75 @@ public void testExceptionThrownByDescriptorWithInvalidDefaultValue() {\n     public void testNoExceptionThrownByPropertyDescriptorWithValidDefaultValue() {\n         assertNotNull(validDescriptorBuilder.build());\n     }\n+\n+    @Test\n+    public void testExternalResourceIgnoredIfELWithAttributesPresent() {\n+        final PropertyDescriptor descriptor = new PropertyDescriptor.Builder()\n+            .name(\"dir\")\n+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)\n+            .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)\n+            .required(false)\n+            .build();\n+\n+        final ValidationContext validationContext = Mockito.mock(ValidationContext.class);\n+        Mockito.when(validationContext.isExpressionLanguagePresent(anyString())).thenReturn(true);\n+        Mockito.when(validationContext.isExpressionLanguageSupported(anyString())).thenReturn(true);\n+        Mockito.when(validationContext.newPropertyValue(anyString())).thenAnswer(new Answer<Object>() {\n+            @Override\n+            public Object answer(final InvocationOnMock invocation) throws Throwable {\n+                final String inputArg = invocation.getArgument(0);\n+                return inputArg.replace(\"${TestPropertyDescriptor.Var1}\", \"__my_var__\").replaceAll(\"\\\\$\\\\{.*}\", \"\");\n+            }\n+        });\n+\n+        assertTrue(descriptor.validate(\"${TestPropertyDescriptor.Var1}\", validationContext).isValid());\n+    }\n+\n+    @Test\n+    public void testExternalResourceConsideredIfELVarRegistryPresent() {\n+        final PropertyDescriptor descriptor = new PropertyDescriptor.Builder()\n+            .name(\"dir\")\n+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE, ResourceType.DIRECTORY)\n+            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)\n+            .required(false)\n+            .build();\n+\n+        final AtomicReference<String> variable = new AtomicReference<>(\"__my_var__\");\n+        final ValidationContext validationContext = Mockito.mock(ValidationContext.class);\n+        Mockito.when(validationContext.isExpressionLanguagePresent(anyString())).thenReturn(true);\n+        Mockito.when(validationContext.isExpressionLanguageSupported(anyString())).thenReturn(true);\n+        Mockito.when(validationContext.newPropertyValue(anyString())).thenAnswer(new Answer<Object>() {\n+            @Override\n+            public Object answer(final InvocationOnMock invocation) {\n+                final String inputArg = invocation.getArgument(0);\n+                final String evaluatedValue = inputArg.replace(\"${TestPropertyDescriptor.Var1}\", variable.get().replaceAll(\"\\\\$\\\\{.*}\", \"\"));\n+\n+                final PropertyValue propertyValue = Mockito.mock(PropertyValue.class);\n+                Mockito.when(propertyValue.getValue()).thenReturn(evaluatedValue);\n+                Mockito.when(propertyValue.evaluateAttributeExpressions()).thenReturn(propertyValue);\n+                return propertyValue;\n+            }\n+        });\n+\n+        // Should not be valid because Expression Language scope is VARIABLE_REGISTRY, so the ${TestPropertyDescriptor.Var1} will be replaced with\n+        // __my_var__, and __my_var__ does not exist.\n+        assertFalse(descriptor.validate(\"${TestPropertyDescriptor.Var1}\", validationContext).isValid());\n+\n+        // Will now be valid because variable changed to 'target', which does exist.\n+        variable.set(\"target\");\n+        assertTrue(descriptor.validate(\"${TestPropertyDescriptor.Var1}\", validationContext).isValid());\n+\n+        // Consider if Expression Language is not supported.\n+        Mockito.when(validationContext.isExpressionLanguageSupported(anyString())).thenReturn(false);\n+        final PropertyDescriptor withElNotAllowed = new PropertyDescriptor.Builder()\n+            .fromPropertyDescriptor(descriptor)\n+            .expressionLanguageSupported(ExpressionLanguageScope.NONE)\n+            .build();\n+\n+        // Expression will not be evaluated, so the directory being looked at will literally be ${TestPropertyDescriptor.Var1}\n+        assertFalse(withElNotAllowed.validate(\"${TestPropertyDescriptor.Var1}\", validationContext).isValid());\n+\n+        // Test the literal value 'target'\n+        assertTrue(withElNotAllowed.validate(\"target\", validationContext).isValid());\n+    }\n }"
  },
  {
    "sha": "1ce4f00440268f51a8a53ad015439a9c07e0ac08",
    "filename": "nifi-api/src/test/java/org/apache/nifi/components/resource/TestStandardResourceReferences.java",
    "status": "added",
    "additions": 163,
    "deletions": 0,
    "changes": 163,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/test/java/org/apache/nifi/components/resource/TestStandardResourceReferences.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-api/src/test/java/org/apache/nifi/components/resource/TestStandardResourceReferences.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-api/src/test/java/org/apache/nifi/components/resource/TestStandardResourceReferences.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.components.resource;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestStandardResourceReferences {\n+\n+    @Test\n+    public void testAsURLs() {\n+        final ResourceReferences references = new StandardResourceReferences(Arrays.asList(\n+            new FileResourceReference(new File(\"target/1.txt\")),\n+            new FileResourceReference(new File(\"target/2.txt\"))\n+        ));\n+\n+        final List<URL> urls = references.asURLs();\n+        assertEquals(2, urls.size());\n+        for (final URL url : urls) {\n+            final String filename = url.getFile();\n+            assertTrue(filename.endsWith(\".txt\"));\n+\n+            final File parentFile = new File(filename).getParentFile();\n+            assertEquals(\"target\", parentFile.getName());\n+        }\n+    }\n+\n+    @Test\n+    public void testFlattenRecursively() throws IOException {\n+        // Create directory structure:\n+        // target/dirs/\n+        // target/dirs/0\n+        // target/dirs/0/0\n+        // target/dirs/0/0/0.txt\n+        // target/dirs/0/0/1.txt\n+        // ...\n+        // target/dirs/2/2/2.txt\n+        final int numDirs = 3;\n+        final int numSubDirs = 3;\n+        final int numFiles = 3;\n+\n+        final File baseDir = new File(\"target/dirs\");\n+        for (int i=0; i < numDirs; i++) {\n+            final File dir = new File(baseDir, String.valueOf(i));\n+            dir.mkdirs();\n+\n+            for (int j=0; j < numSubDirs; j++) {\n+                final File subdir = new File(dir, String.valueOf(j));\n+                subdir.mkdirs();\n+\n+                for (int k=0; k < numFiles; k++) {\n+                    final File file = new File(subdir, k + \".txt\");\n+\n+                    try (final OutputStream fos = new FileOutputStream(file)) {\n+                        fos.write((k + \".txt\").getBytes(StandardCharsets.UTF_8));\n+                    }\n+                }\n+            }\n+        }\n+\n+        final ResourceReferences references = new StandardResourceReferences(Collections.singletonList(new FileResourceReference(baseDir)));\n+        assertEquals(1, references.getCount());\n+        assertEquals(ResourceType.DIRECTORY, references.asList().get(0).getResourceType());\n+\n+        final ResourceReferences flattened = references.flattenRecursively();\n+        assertEquals(numDirs * numSubDirs * numFiles, flattened.getCount());\n+\n+        final List<ResourceReference> flattenedReferences = flattened.asList();\n+        assertEquals(numDirs * numSubDirs * numFiles, flattenedReferences.size());\n+\n+        // Ensure that each file that was flattened has a unique filename and the file exists.\n+        final Set<String> filenames = new HashSet<>();\n+        for (final ResourceReference reference : flattenedReferences) {\n+            assertEquals(ResourceType.FILE, reference.getResourceType());\n+\n+            final String filename = reference.getLocation();\n+            assertTrue(filename.endsWith(\".txt\"));\n+\n+            filenames.add(filename);\n+            assertTrue(new File(filename).exists());\n+        }\n+\n+        assertEquals(numDirs * numSubDirs * numFiles, filenames.size());\n+    }\n+\n+    @Test\n+    public void testFlatten() throws IOException {\n+        // Create directory structure:\n+        // target/dir\n+        // target/dir/0\n+        // target/dir/0/0.txt\n+        // target/dir/0/1.txt\n+        // ...\n+        // target/dir/0.txt\n+        // target/dir/1.txt\n+        // ...\n+        final int numFiles = 3;\n+\n+        final File baseDir = new File(\"target/dir\");\n+        baseDir.mkdirs();\n+\n+        for (int i=0; i < numFiles; i++) {\n+            final File file = new File(baseDir, i + \".txt\");\n+\n+            try (final OutputStream fos = new FileOutputStream(file)) {\n+                fos.write((i + \".txt\").getBytes(StandardCharsets.UTF_8));\n+            }\n+        }\n+\n+        final ResourceReferences references = new StandardResourceReferences(Collections.singletonList(new FileResourceReference(baseDir)));\n+        assertEquals(1, references.getCount());\n+        assertEquals(ResourceType.DIRECTORY, references.asList().get(0).getResourceType());\n+\n+        final ResourceReferences flattened = references.flatten();\n+        assertEquals(numFiles, flattened.getCount());\n+\n+        final List<ResourceReference> flattenedReferences = flattened.asList();\n+        assertEquals(numFiles, flattenedReferences.size());\n+\n+        // Ensure that each file that was flattened has a unique filename and the file exists.\n+        final Set<String> filenames = new HashSet<>();\n+        for (final ResourceReference reference : flattenedReferences) {\n+            assertEquals(ResourceType.FILE, reference.getResourceType());\n+\n+            final String filename = reference.getLocation();\n+            assertTrue(filename.endsWith(\".txt\"));\n+\n+            filenames.add(filename);\n+            assertTrue(new File(filename).exists());\n+        }\n+\n+        assertEquals(numFiles, filenames.size());\n+    }\n+}"
  },
  {
    "sha": "e7d524b58719e7ed26948aedd3caa80f62d25e78",
    "filename": "nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/NotificationServiceManager.java",
    "status": "modified",
    "additions": 27,
    "deletions": 21,
    "changes": 48,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/NotificationServiceManager.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/NotificationServiceManager.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/NotificationServiceManager.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,25 +16,6 @@\n  */\n package org.apache.nifi.bootstrap;\n \n-import java.io.BufferedInputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n import org.apache.nifi.attribute.expression.language.StandardPropertyValue;\n import org.apache.nifi.bootstrap.notification.NotificationContext;\n import org.apache.nifi.bootstrap.notification.NotificationInitializationContext;\n@@ -45,6 +26,9 @@\n import org.apache.nifi.components.PropertyValue;\n import org.apache.nifi.components.ValidationContext;\n import org.apache.nifi.components.ValidationResult;\n+import org.apache.nifi.components.resource.ResourceContext;\n+import org.apache.nifi.components.resource.StandardResourceContext;\n+import org.apache.nifi.components.resource.StandardResourceReferenceFactory;\n import org.apache.nifi.parameter.ParameterLookup;\n import org.apache.nifi.registry.VariableRegistry;\n import org.slf4j.Logger;\n@@ -56,6 +40,26 @@\n import org.xml.sax.InputSource;\n import org.xml.sax.SAXException;\n \n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n public class NotificationServiceManager {\n     private static final Logger logger = LoggerFactory.getLogger(NotificationServiceManager.class);\n     private final Map<String, ConfiguredNotificationService> servicesById = new HashMap<>();\n@@ -274,7 +278,8 @@ public PropertyValue getProperty(final PropertyDescriptor descriptor) {\n                     configuredValue = fullPropDescriptor.getDefaultValue();\n                 }\n \n-                return new StandardPropertyValue(configuredValue, null, ParameterLookup.EMPTY, variableRegistry);\n+                final ResourceContext resourceContext = new StandardResourceContext(new StandardResourceReferenceFactory(), descriptor);\n+                return new StandardPropertyValue(resourceContext, configuredValue, null, ParameterLookup.EMPTY, variableRegistry);\n             }\n \n             @Override\n@@ -394,7 +399,8 @@ public PropertyValue getProperty(final PropertyDescriptor descriptor) {\n                         value = descriptor.getDefaultValue();\n                     }\n \n-                    return new StandardPropertyValue(value, null, ParameterLookup.EMPTY, variableRegistry);\n+                    final ResourceContext resourceContext = new StandardResourceContext(new StandardResourceReferenceFactory(), descriptor);\n+                    return new StandardPropertyValue(resourceContext, value, null, ParameterLookup.EMPTY, variableRegistry);\n                 }\n \n                 @Override"
  },
  {
    "sha": "74b1f4a190e216dd409c7132b0a9765f583f91d3",
    "filename": "nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/NotificationValidationContext.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/NotificationValidationContext.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/NotificationValidationContext.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/NotificationValidationContext.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,6 +16,9 @@\n  */\n package org.apache.nifi.bootstrap.notification;\n \n+import org.apache.nifi.components.resource.ResourceContext;\n+import org.apache.nifi.components.resource.StandardResourceContext;\n+import org.apache.nifi.components.resource.StandardResourceReferenceFactory;\n import org.apache.nifi.parameter.ParameterLookup;\n import org.apache.nifi.attribute.expression.language.Query;\n import org.apache.nifi.attribute.expression.language.Query.Range;\n@@ -56,7 +59,8 @@ public NotificationValidationContext(final NotificationContext processContext, V\n \n     @Override\n     public PropertyValue newPropertyValue(final String rawValue) {\n-        return new StandardPropertyValue(rawValue, null, ParameterLookup.EMPTY, variableRegistry);\n+        final ResourceContext resourceContext = new StandardResourceContext(new StandardResourceReferenceFactory(), null);\n+        return new StandardPropertyValue(resourceContext, rawValue, null, ParameterLookup.EMPTY, variableRegistry);\n     }\n \n     @Override"
  },
  {
    "sha": "dcbffbb894cae4a785fae76621ede6cc6564abd1",
    "filename": "nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/http/HttpNotificationService.java",
    "status": "modified",
    "additions": 14,
    "deletions": 11,
    "changes": 25,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/http/HttpNotificationService.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/http/HttpNotificationService.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/http/HttpNotificationService.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,15 +16,6 @@\n  */\n package org.apache.nifi.bootstrap.notification.http;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-import javax.net.ssl.SSLContext;\n-import javax.net.ssl.SSLSocketFactory;\n-import javax.net.ssl.TrustManager;\n-import javax.net.ssl.X509TrustManager;\n import okhttp3.Call;\n import okhttp3.MediaType;\n import okhttp3.OkHttpClient;\n@@ -37,6 +28,8 @@\n import org.apache.nifi.bootstrap.notification.NotificationInitializationContext;\n import org.apache.nifi.bootstrap.notification.NotificationType;\n import org.apache.nifi.components.PropertyDescriptor;\n+import org.apache.nifi.components.resource.ResourceCardinality;\n+import org.apache.nifi.components.resource.ResourceType;\n import org.apache.nifi.expression.AttributeExpression;\n import org.apache.nifi.expression.ExpressionLanguageScope;\n import org.apache.nifi.processor.util.StandardValidators;\n@@ -45,6 +38,16 @@\n import org.apache.nifi.security.util.StandardTlsConfiguration;\n import org.apache.nifi.security.util.TlsConfiguration;\n \n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n public class HttpNotificationService extends AbstractNotificationService {\n \n     public static final String NOTIFICATION_TYPE_KEY = \"notification.type\";\n@@ -76,7 +79,7 @@\n     public static final PropertyDescriptor PROP_TRUSTSTORE = new PropertyDescriptor.Builder()\n             .name(\"Truststore Filename\")\n             .description(\"The fully-qualified filename of the Truststore\")\n-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)\n+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)\n             .sensitive(false)\n             .build();\n     public static final PropertyDescriptor PROP_TRUSTSTORE_TYPE = new PropertyDescriptor.Builder()\n@@ -98,7 +101,7 @@\n             .name(\"Keystore Filename\")\n             .description(\"The fully-qualified filename of the Keystore\")\n             .defaultValue(null)\n-            .addValidator(StandardValidators.FILE_EXISTS_VALIDATOR)\n+            .identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE)\n             .sensitive(false)\n             .build();\n     public static final PropertyDescriptor PROP_KEYSTORE_TYPE = new PropertyDescriptor.Builder()"
  },
  {
    "sha": "de273492877ff2dd3bc0836c2c6f9528fd0bbd0e",
    "filename": "nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardPropertyValue.java",
    "status": "modified",
    "additions": 44,
    "deletions": 7,
    "changes": 51,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardPropertyValue.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardPropertyValue.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardPropertyValue.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,7 +16,13 @@\n  */\n package org.apache.nifi.attribute.expression.language;\n \n+import org.apache.nifi.components.PropertyDescriptor;\n import org.apache.nifi.components.PropertyValue;\n+import org.apache.nifi.components.resource.ResourceContext;\n+import org.apache.nifi.components.resource.ResourceReference;\n+import org.apache.nifi.components.resource.ResourceReferences;\n+import org.apache.nifi.components.resource.StandardResourceContext;\n+import org.apache.nifi.components.resource.StandardResourceReferenceFactory;\n import org.apache.nifi.controller.ControllerService;\n import org.apache.nifi.controller.ControllerServiceLookup;\n import org.apache.nifi.expression.AttributeValueDecorator;\n@@ -37,39 +43,48 @@\n     private final PreparedQuery preparedQuery;\n     private final VariableRegistry variableRegistry;\n     private final ParameterLookup parameterLookup;\n+    private final ResourceContext resourceContext;\n \n     public StandardPropertyValue(final String rawValue, final ControllerServiceLookup serviceLookup, final ParameterLookup parameterLookup) {\n-        this(rawValue, serviceLookup, parameterLookup, Query.prepare(rawValue), VariableRegistry.EMPTY_REGISTRY);\n+        this(new StandardResourceContext(new StandardResourceReferenceFactory(), null),\n+            rawValue, serviceLookup, parameterLookup);\n     }\n \n-    public StandardPropertyValue(final String rawValue, final ControllerServiceLookup serviceLookup, final ParameterLookup parameterLookup, final VariableRegistry variableRegistry) {\n-        this(rawValue, serviceLookup, parameterLookup, Query.prepare(rawValue), variableRegistry);\n+    public StandardPropertyValue(final ResourceContext resourceContext, final String rawValue, final ControllerServiceLookup serviceLookup, final ParameterLookup parameterLookup) {\n+        this(resourceContext, rawValue, serviceLookup, parameterLookup, Query.prepare(rawValue), VariableRegistry.EMPTY_REGISTRY);\n+    }\n+\n+    public StandardPropertyValue(final ResourceContext resourceContext, final String rawValue, final ControllerServiceLookup serviceLookup, final ParameterLookup parameterLookup,\n+                                 final VariableRegistry variableRegistry) {\n+        this(resourceContext, rawValue, serviceLookup, parameterLookup, Query.prepare(rawValue), variableRegistry);\n     }\n \n     /**\n      * Constructs a new StandardPropertyValue with the given value & service\n      * lookup and indicates whether or not the rawValue contains any NiFi\n      * Expressions. If it is unknown whether or not the value contains any NiFi\n      * Expressions, the\n-     * {@link #StandardPropertyValue(String, ControllerServiceLookup, ParameterLookup, VariableRegistry)}\n+     * {@link #StandardPropertyValue(ResourceContext, String, ControllerServiceLookup, ParameterLookup, VariableRegistry)}\n      * constructor should be used or <code>true</code> should be passed.\n      * However, if it is known that the value contains no NiFi Expression, that\n      * information should be provided so that calls to\n      * {@link #evaluateAttributeExpressions()} are much more efficient\n      *\n+     * @param resourceContext the context in which resources are to be understood\n      * @param rawValue value\n      * @param serviceLookup lookup\n      * @param  parameterLookup the parameter lookup\n      * @param preparedQuery query\n      * @param variableRegistry variableRegistry\n      */\n-    public StandardPropertyValue(final String rawValue, final ControllerServiceLookup serviceLookup, final ParameterLookup parameterLookup, final PreparedQuery preparedQuery,\n-            final VariableRegistry variableRegistry) {\n+    public StandardPropertyValue(final ResourceContext resourceContext, final String rawValue, final ControllerServiceLookup serviceLookup, final ParameterLookup parameterLookup,\n+                                 final PreparedQuery preparedQuery, final VariableRegistry variableRegistry) {\n         this.rawValue = rawValue;\n         this.serviceLookup = serviceLookup;\n         this.preparedQuery = preparedQuery;\n         this.variableRegistry = variableRegistry;\n         this.parameterLookup = parameterLookup == null ? ParameterLookup.EMPTY : parameterLookup;\n+        this.resourceContext = resourceContext;\n     }\n \n     @Override\n@@ -164,7 +179,7 @@ public PropertyValue evaluateAttributeExpressions(FlowFile flowFile, Map<String,\n         final EvaluationContext evaluationContext = new StandardEvaluationContext(lookup, stateValues, parameterLookup);\n         final String evaluated = preparedQuery.evaluateExpressions(evaluationContext, decorator);\n \n-        return new StandardPropertyValue(evaluated, serviceLookup, parameterLookup, new EmptyPreparedQuery(evaluated), null);\n+        return new StandardPropertyValue(resourceContext, evaluated, serviceLookup, parameterLookup, new EmptyPreparedQuery(evaluated), null);\n     }\n \n     @Override\n@@ -200,6 +215,28 @@ public ControllerService asControllerService() {\n         throw new IllegalArgumentException(\"Controller Service with identifier \" + rawValue + \" is of type \" + service.getClass() + \" and cannot be cast to \" + serviceType);\n     }\n \n+    @Override\n+    public ResourceReference asResource() {\n+        final PropertyDescriptor propertyDescriptor = resourceContext.getPropertyDescriptor();\n+        if (propertyDescriptor == null) {\n+            // If no property descriptor has been specified, there are no known types of resources.\n+            return null;\n+        }\n+\n+        return resourceContext.getResourceReferenceFactory().createResourceReference(rawValue, propertyDescriptor.getResourceDefinition());\n+    }\n+\n+    @Override\n+    public ResourceReferences asResources() {\n+        final PropertyDescriptor propertyDescriptor = resourceContext.getPropertyDescriptor();\n+        if (propertyDescriptor == null) {\n+            // If no property descriptor has been specified, there are no known types of resources.\n+            return null;\n+        }\n+\n+        return resourceContext.getResourceReferenceFactory().createResourceReferences(rawValue, propertyDescriptor.getResourceDefinition());\n+    }\n+\n     @Override\n     public boolean isSet() {\n         return rawValue != null;"
  },
  {
    "sha": "b389fd8b84d322343d470860fbc089a77f98f5dc",
    "filename": "nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/StringUtils.java",
    "status": "modified",
    "additions": 11,
    "deletions": 5,
    "changes": 16,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/StringUtils.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/StringUtils.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-properties/src/main/java/org/apache/nifi/util/StringUtils.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -77,15 +77,21 @@ public static String substringAfter(final String str, final String separator) {\n         return str.substring(pos + separator.length());\n     }\n \n-    public static String join(final Collection collection, String delimiter) {\n-        if (collection == null || collection.size() == 0) {\n+    public static String join(final Collection<?> collection, String delimiter) {\n+        if (collection == null || collection.isEmpty()) {\n             return EMPTY;\n         }\n-        final StringBuilder sb = new StringBuilder(collection.size() * 16);\n-        for (Object element : collection) {\n-            sb.append((String) element);\n+\n+        if (collection.size() == 1) {\n+            return String.valueOf(collection.iterator().next());\n+        }\n+\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object element : collection) {\n+            sb.append(element);\n             sb.append(delimiter);\n         }\n+\n         return sb.toString().substring(0, sb.lastIndexOf(delimiter));\n     }\n "
  },
  {
    "sha": "0a9a603b8e8689e56574cbaa2a0bf7bea694956d",
    "filename": "nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-utils/src/main/java/org/apache/nifi/processor/util/StandardValidators.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -20,6 +20,8 @@\n import org.apache.nifi.components.ValidationContext;\n import org.apache.nifi.components.ValidationResult;\n import org.apache.nifi.components.Validator;\n+import org.apache.nifi.components.resource.ResourceCardinality;\n+import org.apache.nifi.components.resource.ResourceType;\n import org.apache.nifi.expression.AttributeExpression.ResultType;\n import org.apache.nifi.flowfile.FlowFile;\n import org.apache.nifi.processor.DataUnit;\n@@ -532,6 +534,12 @@ public ValidationResult validate(final String subject, final String input, final\n         };\n     }\n \n+    /**\n+     * @deprecated use {@link org.apache.nifi.components.PropertyDescriptor.Builder#identifiesExternalResource(ResourceCardinality, ResourceType, ResourceType...)\n+     * identifiesExternalResource(ResourceCardinality.SINGLE, ResourceType.FILE, ResourceType.DIRECTORY, ResourceType.URL}\n+     * instead.\n+     */\n+    @Deprecated\n     public static Validator createURLorFileValidator() {\n         return (subject, input, context) -> {\n             if (context.isExpressionLanguageSupported(subject) && context.isExpressionLanguagePresent(input)) {"
  },
  {
    "sha": "9eff4896193e85e83551fee72295855ca58a5e49",
    "filename": "nifi-mock/src/main/java/org/apache/nifi/util/EmptyControllerServiceLookup.java",
    "status": "added",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/EmptyControllerServiceLookup.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/EmptyControllerServiceLookup.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-mock/src/main/java/org/apache/nifi/util/EmptyControllerServiceLookup.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.nifi.util;\n+\n+public class EmptyControllerServiceLookup extends MockControllerServiceLookup {\n+}"
  },
  {
    "sha": "57c5c2e9a24ef2ffd0a2c2d44217a5fd85bf6f34",
    "filename": "nifi-mock/src/main/java/org/apache/nifi/util/MockConfigurationContext.java",
    "status": "modified",
    "additions": 16,
    "deletions": 7,
    "changes": 23,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/MockConfigurationContext.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/MockConfigurationContext.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-mock/src/main/java/org/apache/nifi/util/MockConfigurationContext.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,23 +16,25 @@\n  */\n package org.apache.nifi.util;\n \n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n import org.apache.nifi.components.PropertyDescriptor;\n import org.apache.nifi.components.PropertyValue;\n import org.apache.nifi.controller.ConfigurationContext;\n import org.apache.nifi.controller.ControllerService;\n import org.apache.nifi.controller.ControllerServiceLookup;\n import org.apache.nifi.registry.VariableRegistry;\n \n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n public class MockConfigurationContext implements ConfigurationContext {\n \n     private final Map<PropertyDescriptor, String> properties;\n     private final ControllerServiceLookup serviceLookup;\n     private final ControllerService service;\n     private final VariableRegistry variableRegistry;\n+    private volatile boolean validateExpressions;\n \n     public MockConfigurationContext(final Map<PropertyDescriptor, String> properties,\n             final ControllerServiceLookup serviceLookup) {\n@@ -51,17 +53,24 @@ public MockConfigurationContext(final ControllerService service,\n             final VariableRegistry variableRegistry) {\n         this.service = service;\n         this.properties = properties;\n-        this.serviceLookup = serviceLookup;\n+        this.serviceLookup = serviceLookup == null ? new EmptyControllerServiceLookup() : serviceLookup;\n         this.variableRegistry = variableRegistry;\n     }\n \n+    public void setValidateExpressions(final boolean validate) {\n+        this.validateExpressions = validate;\n+    }\n+\n     @Override\n     public PropertyValue getProperty(final PropertyDescriptor property) {\n+        final PropertyDescriptor canonicalDescriptor = getActualDescriptor(property);\n         String value = properties.get(property);\n         if (value == null) {\n-            value = getActualDescriptor(property).getDefaultValue();\n+            value = canonicalDescriptor.getDefaultValue();\n         }\n-        return new MockPropertyValue(value, serviceLookup, variableRegistry);\n+\n+        final boolean alreadyEvaluated = !validateExpressions;\n+        return new MockPropertyValue(value, serviceLookup, canonicalDescriptor, alreadyEvaluated, variableRegistry);\n     }\n \n     @Override"
  },
  {
    "sha": "e2199f44d7a11ec1c8132bdef1f21fe9610bf351",
    "filename": "nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java",
    "status": "modified",
    "additions": 28,
    "deletions": 13,
    "changes": 41,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,18 +16,6 @@\n  */\n package org.apache.nifi.util;\n \n-import static java.util.Objects.requireNonNull;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n import org.apache.nifi.annotation.behavior.InputRequirement;\n import org.apache.nifi.attribute.expression.language.Query;\n import org.apache.nifi.attribute.expression.language.Query.Range;\n@@ -48,6 +36,19 @@\n import org.apache.nifi.state.MockStateManager;\n import org.junit.Assert;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import static java.util.Objects.requireNonNull;\n+\n public class MockProcessContext extends MockControllerServiceLookup implements ProcessContext, ControllerServiceLookup, NodeTypeProvider {\n \n     private final ConfigurableComponent component;\n@@ -144,6 +145,19 @@ public PropertyValue getProperty(final PropertyDescriptor descriptor) {\n         return getProperty(descriptor.getName());\n     }\n \n+    public PropertyValue getPropertyWithoutValidatingExpressions(final PropertyDescriptor propertyDescriptor) {\n+        final PropertyDescriptor canonicalDescriptor = component.getPropertyDescriptor(propertyDescriptor.getName());\n+        if (canonicalDescriptor == null) {\n+            return null;\n+        }\n+\n+        final String setPropertyValue = properties.get(canonicalDescriptor);\n+        final String propValue = (setPropertyValue == null) ? canonicalDescriptor.getDefaultValue() : setPropertyValue;\n+\n+        final MockPropertyValue propertyValue = new MockPropertyValue(propValue, this, canonicalDescriptor, true, variableRegistry);\n+        return propertyValue;\n+    }\n+\n     @Override\n     public PropertyValue getProperty(final String propertyName) {\n         final PropertyDescriptor descriptor = component.getPropertyDescriptor(propertyName);\n@@ -154,7 +168,8 @@ public PropertyValue getProperty(final String propertyName) {\n         final String setPropertyValue = properties.get(descriptor);\n         final String propValue = (setPropertyValue == null) ? descriptor.getDefaultValue() : setPropertyValue;\n \n-        final MockPropertyValue propertyValue = new MockPropertyValue(propValue, this, variableRegistry, (enableExpressionValidation && allowExpressionValidation) ? descriptor : null);\n+        final boolean alreadyEvaluated = !this.allowExpressionValidation;\n+        final MockPropertyValue propertyValue = new MockPropertyValue(propValue, this, descriptor, alreadyEvaluated, variableRegistry);\n         return propertyValue;\n     }\n "
  },
  {
    "sha": "0fc9bbee233eaa2a179d7c08b13f47c0d7818311",
    "filename": "nifi-mock/src/main/java/org/apache/nifi/util/MockPropertyValue.java",
    "status": "modified",
    "additions": 49,
    "deletions": 14,
    "changes": 63,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/MockPropertyValue.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/MockPropertyValue.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-mock/src/main/java/org/apache/nifi/util/MockPropertyValue.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -16,16 +16,17 @@\n  */\n package org.apache.nifi.util;\n \n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n import org.apache.nifi.annotation.behavior.InputRequirement;\n import org.apache.nifi.attribute.expression.language.Query;\n import org.apache.nifi.attribute.expression.language.Query.Range;\n import org.apache.nifi.attribute.expression.language.StandardPropertyValue;\n import org.apache.nifi.components.PropertyDescriptor;\n import org.apache.nifi.components.PropertyValue;\n+import org.apache.nifi.components.resource.ResourceContext;\n+import org.apache.nifi.components.resource.ResourceReference;\n+import org.apache.nifi.components.resource.ResourceReferences;\n+import org.apache.nifi.components.resource.StandardResourceContext;\n+import org.apache.nifi.components.resource.StandardResourceReferenceFactory;\n import org.apache.nifi.controller.ControllerService;\n import org.apache.nifi.controller.ControllerServiceLookup;\n import org.apache.nifi.expression.AttributeValueDecorator;\n@@ -36,6 +37,11 @@\n import org.apache.nifi.processor.exception.ProcessException;\n import org.apache.nifi.registry.VariableRegistry;\n \n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n public class MockPropertyValue implements PropertyValue {\n     private final String rawValue;\n     private final Boolean expectExpressions;\n@@ -45,7 +51,7 @@\n     private final PropertyValue stdPropValue;\n     private final VariableRegistry variableRegistry;\n \n-    private boolean expressionsEvaluated = false;\n+    private boolean expressionsEvaluated;\n \n     public MockPropertyValue(final String rawValue) {\n         this(rawValue, null);\n@@ -63,9 +69,11 @@ public MockPropertyValue(final String rawValue, final ControllerServiceLookup se\n         this(rawValue, serviceLookup, propertyDescriptor, false, variableRegistry);\n     }\n \n-    private MockPropertyValue(final String rawValue, final ControllerServiceLookup serviceLookup, final PropertyDescriptor propertyDescriptor, final boolean alreadyEvaluated,\n+    protected MockPropertyValue(final String rawValue, final ControllerServiceLookup serviceLookup, final PropertyDescriptor propertyDescriptor, final boolean alreadyEvaluated,\n             final VariableRegistry variableRegistry) {\n-        this.stdPropValue = new StandardPropertyValue(rawValue, serviceLookup, ParameterLookup.EMPTY, variableRegistry);\n+\n+        final ResourceContext resourceContext = new StandardResourceContext(new StandardResourceReferenceFactory(), propertyDescriptor);\n+        this.stdPropValue = new StandardPropertyValue(resourceContext, rawValue, serviceLookup, ParameterLookup.EMPTY, variableRegistry);\n         this.rawValue = rawValue;\n         this.serviceLookup = (MockControllerServiceLookup) serviceLookup;\n         this.expectExpressions = propertyDescriptor == null ? null : propertyDescriptor.isExpressionLanguageSupported();\n@@ -76,7 +84,7 @@ private MockPropertyValue(final String rawValue, final ControllerServiceLookup s\n     }\n \n     private void ensureExpressionsEvaluated() {\n-        if (Boolean.TRUE.equals(expectExpressions) && !expressionsEvaluated) {\n+        if (Boolean.TRUE.equals(expectExpressions) && !expressionsEvaluated && isExpressionLanguagePresent()) {\n             throw new IllegalStateException(\"Attempting to retrieve value of \" + propertyDescriptor\n                     + \" without first evaluating Expressions, even though the PropertyDescriptor indicates \"\n                     + \"that the Expression Language is Supported. If you realize that this is the case and do not want \"\n@@ -91,7 +99,7 @@ private void validateExpressionScope(boolean attributesAvailable) {\n \n         // language scope is not null, we have attributes available but scope is not equal to FF attributes\n         // it means that we're not evaluating against flow file attributes even though attributes are available\n-        if(attributesAvailable && !ExpressionLanguageScope.FLOWFILE_ATTRIBUTES.equals(expressionLanguageScope)) {\n+        if (attributesAvailable && !ExpressionLanguageScope.FLOWFILE_ATTRIBUTES.equals(expressionLanguageScope)) {\n             throw new IllegalStateException(\"Attempting to evaluate expression language for \" + propertyDescriptor.getName()\n                     + \" using flow file attributes but the scope evaluation is set to \" + expressionLanguageScope + \". The\"\n                     + \" proper scope should be set in the property descriptor using\"\n@@ -103,20 +111,20 @@ private void validateExpressionScope(boolean attributesAvailable) {\n         // in that case, we don't care if attributes are not available even though scope is FLOWFILE_ATTRIBUTES\n         // it likely means that the property has been defined in a common/abstract class used by multiple processors with\n         // different input requirements.\n-        if(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES.equals(expressionLanguageScope)\n+        if (ExpressionLanguageScope.FLOWFILE_ATTRIBUTES.equals(expressionLanguageScope)\n                 && (this.serviceLookup.getInputRequirement() == null || this.serviceLookup.getInputRequirement().value().equals(InputRequirement.Requirement.INPUT_FORBIDDEN))) {\n             return;\n         }\n \n         // if we have a processor where input requirement is INPUT_ALLOWED, we need to check if there is an\n         // incoming connection or not. If not, we don't care if attributes are not available even though scope is FLOWFILE_ATTRIBUTES\n-        if(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES.equals(expressionLanguageScope)\n+        if (ExpressionLanguageScope.FLOWFILE_ATTRIBUTES.equals(expressionLanguageScope)\n                 && !((MockProcessContext) this.serviceLookup).hasIncomingConnection()) {\n             return;\n         }\n \n         // we're trying to evaluate against flow files attributes but we don't have any attributes available.\n-        if(!attributesAvailable && ExpressionLanguageScope.FLOWFILE_ATTRIBUTES.equals(expressionLanguageScope)) {\n+        if (!attributesAvailable && ExpressionLanguageScope.FLOWFILE_ATTRIBUTES.equals(expressionLanguageScope)) {\n             throw new IllegalStateException(\"Attempting to evaluate expression language for \" + propertyDescriptor.getName()\n                     + \" without using flow file attributes but the scope evaluation is set to \" + expressionLanguageScope + \". The\"\n                     + \" proper scope should be set in the property descriptor using\"\n@@ -173,9 +181,13 @@ public Double asDataSize(final DataUnit dataUnit) {\n     }\n \n     private void markEvaluated() {\n+        if (expressionsEvaluated) {\n+            return;\n+        }\n+\n         if (Boolean.FALSE.equals(expectExpressions)) {\n             throw new IllegalStateException(\"Attempting to Evaluate Expressions but \" + propertyDescriptor\n-                    + \" indicates that the Expression Language is not supported. If you realize that this is the case and do not want \"\n+                    + \" is not a supported property, or the property indicates that the Expression Language is not supported. If you realize that this is the case and do not want \"\n                     + \"this error to occur, it can be disabled by calling TestRunner.setValidateExpressionUsage(false)\");\n         }\n         expressionsEvaluated = true;\n@@ -237,12 +249,16 @@ public PropertyValue evaluateAttributeExpressions(final FlowFile flowFile, final\n     @Override\n     public PropertyValue evaluateAttributeExpressions(FlowFile flowFile, Map<String, String> additionalAttributes, AttributeValueDecorator decorator, Map<String, String> stateValues)\n             throws ProcessException {\n+        final boolean alreadyValidated = this.expressionsEvaluated;\n         markEvaluated();\n+\n         if (rawValue == null) {\n             return this;\n         }\n \n-        validateExpressionScope(flowFile != null || additionalAttributes != null);\n+        if (!alreadyValidated) {\n+            validateExpressionScope(flowFile != null || additionalAttributes != null);\n+        }\n \n         final PropertyValue newValue = stdPropValue.evaluateAttributeExpressions(flowFile, additionalAttributes, decorator, stateValues);\n         return new MockPropertyValue(newValue.getValue(), serviceLookup, propertyDescriptor, true, variableRegistry);\n@@ -272,6 +288,25 @@ public ControllerService asControllerService() {\n         throw new IllegalArgumentException(\"Controller Service with identifier \" + rawValue + \" is of type \" + service.getClass() + \" and cannot be cast to \" + serviceType);\n     }\n \n+    @Override\n+    public ResourceReference asResource() {\n+        if (propertyDescriptor == null) {\n+            return null;\n+        }\n+\n+        return new StandardResourceReferenceFactory().createResourceReference(rawValue, propertyDescriptor.getResourceDefinition());\n+    }\n+\n+    @Override\n+    public ResourceReferences asResources() {\n+        if (propertyDescriptor == null) {\n+            return null;\n+        }\n+\n+        return new StandardResourceReferenceFactory().createResourceReferences(rawValue, propertyDescriptor.getResourceDefinition());\n+    }\n+\n+\n     @Override\n     public boolean isSet() {\n         return rawValue != null;"
  },
  {
    "sha": "364df82bf2e1315af6f962874bdc4e21cdb2502f",
    "filename": "nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/apache/nifi/blob/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java",
    "raw_url": "https://github.com/apache/nifi/raw/870b3f991ce8dece68e6bb691f0c68fe434459d3/nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java?ref=870b3f991ce8dece68e6bb691f0c68fe434459d3",
    "patch": "@@ -54,6 +54,7 @@\n     private final StateManager stateManager;\n     private final VariableRegistry variableRegistry;\n     private final Map<PropertyDescriptor, PropertyConfiguration> properties;\n+    private volatile boolean validateExpressions = true;\n \n     public MockValidationContext(final MockProcessContext processContext) {\n         this(processContext, null, VariableRegistry.EMPTY_REGISTRY);\n@@ -87,6 +88,9 @@ public MockValidationContext(final MockProcessContext processContext, final Stat\n         return configurationMap;\n     }\n \n+    public void setValidateExpressions(final boolean validate) {\n+        this.validateExpressions = validate;\n+    }\n \n     @Override\n     public ControllerService getControllerService(final String identifier) {\n@@ -95,7 +99,7 @@ public ControllerService getControllerService(final String identifier) {\n \n     @Override\n     public PropertyValue newPropertyValue(final String rawValue) {\n-        return new MockPropertyValue(rawValue, this, variableRegistry);\n+        return new MockPropertyValue(rawValue, this, null, true, variableRegistry);\n     }\n \n     @Override\n@@ -106,12 +110,14 @@ public ExpressionLanguageCompiler newExpressionLanguageCompiler() {\n     @Override\n     public ValidationContext getControllerServiceValidationContext(final ControllerService controllerService) {\n         final MockProcessContext serviceProcessContext = new MockProcessContext(controllerService, context, stateManager, variableRegistry);\n-        return new MockValidationContext(serviceProcessContext, stateManager, variableRegistry);\n+        final MockValidationContext serviceValidationContext =  new MockValidationContext(serviceProcessContext, stateManager, variableRegistry);\n+        serviceValidationContext.setValidateExpressions(validateExpressions);\n+        return serviceValidationContext;\n     }\n \n     @Override\n     public PropertyValue getProperty(final PropertyDescriptor property) {\n-        return context.getProperty(property);\n+        return context.getPropertyWithoutValidatingExpressions(property);\n     }\n \n     @Override"
  }
]
