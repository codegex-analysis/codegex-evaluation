[
  {
    "sha": "f2c7cf4048ed9b32f1ed9a88bc95df0d0fd50944",
    "filename": "nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/RestLookupService.java",
    "status": "modified",
    "additions": 48,
    "deletions": 39,
    "changes": 87,
    "blob_url": "https://github.com/apache/nifi/blob/29478a9ee37fbc257a2c645d2fe63d936252fff7/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/RestLookupService.java",
    "raw_url": "https://github.com/apache/nifi/raw/29478a9ee37fbc257a2c645d2fe63d936252fff7/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/RestLookupService.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/main/java/org/apache/nifi/lookup/RestLookupService.java?ref=29478a9ee37fbc257a2c645d2fe63d936252fff7",
    "patch": "@@ -17,27 +17,10 @@\n \n package org.apache.nifi.lookup;\n \n-import static org.apache.commons.lang3.StringUtils.trimToEmpty;\n-\n import com.burgstaller.okhttp.AuthenticationCacheInterceptor;\n import com.burgstaller.okhttp.CachingAuthenticatorDecorator;\n import com.burgstaller.okhttp.digest.CachingAuthenticator;\n import com.burgstaller.okhttp.digest.DigestAuthenticator;\n-import java.io.BufferedInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.Proxy;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.TimeUnit;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n import okhttp3.Credentials;\n import okhttp3.MediaType;\n import okhttp3.OkHttpClient;\n@@ -77,11 +60,29 @@\n import org.apache.nifi.ssl.SSLContextService;\n import org.apache.nifi.util.StringUtils;\n \n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.Proxy;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.trimToEmpty;\n+\n @Tags({ \"rest\", \"lookup\", \"json\", \"xml\", \"http\" })\n @CapabilityDescription(\"Use a REST service to look up values.\")\n @DynamicProperties({\n     @DynamicProperty(name = \"*\", value = \"*\", description = \"All dynamic properties are added as HTTP headers with the name \" +\n-            \"as the header name and the value as the header value.\")\n+            \"as the header name and the value as the header value.\", expressionLanguageScope = ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)\n })\n public class RestLookupService extends AbstractControllerService implements RecordLookupService {\n     static final PropertyDescriptor URL = new PropertyDescriptor.Builder()\n@@ -180,7 +181,7 @@\n     static final List<PropertyDescriptor> DESCRIPTORS;\n     static final Set<String> KEYS;\n \n-    static final List VALID_VERBS = Arrays.asList(\"delete\", \"get\", \"post\", \"put\");\n+    static final List<String> VALID_VERBS = Arrays.asList(\"delete\", \"get\", \"post\", \"put\");\n \n     static {\n         DESCRIPTORS = Collections.unmodifiableList(Arrays.asList(\n@@ -206,7 +207,7 @@\n     private volatile RecordReaderFactory readerFactory;\n     private volatile RecordPath recordPath;\n     private volatile OkHttpClient client;\n-    private volatile Map<String, String> headers;\n+    private volatile Map<String, PropertyValue> headers;\n     private volatile PropertyValue urlTemplate;\n     private volatile String basicUser;\n     private volatile String basicPass;\n@@ -261,7 +262,7 @@ private void buildHeaders(ConfigurationContext context) {\n             if (descriptor.isDynamic()) {\n                 headers.put(\n                     descriptor.getDisplayName(),\n-                    context.getProperty(descriptor).evaluateAttributeExpressions().getValue()\n+                    context.getProperty(descriptor)\n                 );\n             }\n         }\n@@ -273,7 +274,7 @@ private void setProxy(OkHttpClient.Builder builder) {\n             final Proxy proxy = config.createProxy();\n             builder.proxy(proxy);\n \n-            if (config.hasCredential()){\n+            if (config.hasCredential()) {\n                 builder.proxyAuthenticator((route, response) -> {\n                     final String credential= Credentials.basic(config.getProxyUserName(), config.getProxyUserPassword());\n                     return response.request().newBuilder()\n@@ -292,10 +293,10 @@ private void setProxy(OkHttpClient.Builder builder) {\n \n     @Override\n     public Optional<Record> lookup(Map<String, Object> coordinates, Map<String, String> context) throws LookupFailureException {\n-        final String endpoint = determineEndpoint(coordinates);\n-        final String mimeType = (String)coordinates.get(MIME_TYPE_KEY);\n-        final String method   = ((String)coordinates.getOrDefault(METHOD_KEY, \"get\")).trim().toLowerCase();\n-        final String body     = (String)coordinates.get(BODY_KEY);\n+        final String endpoint = determineEndpoint(coordinates, context);\n+        final String mimeType = (String) coordinates.get(MIME_TYPE_KEY);\n+        final String method   = ((String) coordinates.getOrDefault(METHOD_KEY, \"get\")).trim().toLowerCase();\n+        final String body     = (String) coordinates.get(BODY_KEY);\n \n         validateVerb(method);\n \n@@ -313,7 +314,7 @@ private void setProxy(OkHttpClient.Builder builder) {\n             }\n         }\n \n-        Request request = buildRequest(mimeType, method, body, endpoint);\n+        Request request = buildRequest(mimeType, method, body, endpoint, context);\n         try {\n             Response response = executeRequest(request);\n \n@@ -346,13 +347,21 @@ protected void validateVerb(String method) throws LookupFailureException {\n         }\n     }\n \n-    protected String determineEndpoint(Map<String, Object> coordinates) {\n+    protected String determineEndpoint(Map<String, Object> coordinates, Map<String, String> context) {\n         Map<String, String> converted = coordinates.entrySet().stream()\n-            .filter(e -> e.getValue() != null)\n-            .collect(Collectors.toMap(\n-                e -> e.getKey(),\n-                e -> e.getValue().toString()\n-            ));\n+                .filter(e -> e.getValue() != null)\n+                .collect(Collectors.toMap(\n+                        Map.Entry::getKey,\n+                        e -> e.getValue().toString()\n+                ));\n+        Map<String, String> contextConverted = (context == null) ? Collections.emptyMap()\n+                : context.entrySet().stream()\n+                .filter(e -> e.getValue() != null)\n+                .collect(Collectors.toMap(\n+                        Map.Entry::getKey,\n+                        Map.Entry::getValue\n+                ));\n+        converted.putAll(contextConverted);\n         return urlTemplate.evaluateAttributeExpressions(converted).getValue();\n     }\n \n@@ -362,7 +371,7 @@ protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(final String\n             .displayName(propertyDescriptorName)\n             .addValidator(Validator.VALID)\n             .dynamic(true)\n-            .expressionLanguageSupported(ExpressionLanguageScope.VARIABLE_REGISTRY)\n+            .expressionLanguageSupported(ExpressionLanguageScope.FLOWFILE_ATTRIBUTES)\n             .build();\n     }\n \n@@ -407,15 +416,15 @@ private Record handleResponse(InputStream is, long inputLength, Map<String, Stri\n         }\n     }\n \n-    private Request buildRequest(final String mimeType, final String method, final String body, final String endpoint) {\n+    private Request buildRequest(final String mimeType, final String method, final String body, final String endpoint, final Map<String,String> context) {\n         RequestBody requestBody = null;\n         if (body != null) {\n             final MediaType mt = MediaType.parse(mimeType);\n-            requestBody = RequestBody.create(mt, body);\n+            requestBody = RequestBody.create(body, mt);\n         }\n         Request.Builder request = new Request.Builder()\n                 .url(endpoint);\n-        switch(method) {\n+        switch (method) {\n             case \"delete\":\n                 request = body != null ? request.delete(requestBody) : request.delete();\n                 break;\n@@ -431,8 +440,8 @@ private Request buildRequest(final String mimeType, final String method, final S\n         }\n \n         if (headers != null) {\n-            for (Map.Entry<String, String> header : headers.entrySet()) {\n-                request = request.addHeader(header.getKey(), header.getValue());\n+            for (Map.Entry<String, PropertyValue> header : headers.entrySet()) {\n+                request = request.addHeader(header.getKey(), header.getValue().evaluateAttributeExpressions(context).getValue());\n             }\n         }\n "
  },
  {
    "sha": "999381a9a78d00b786925b71909cd99cf1dafc1a",
    "filename": "nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/RestLookupServiceIT.groovy",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/apache/nifi/blob/29478a9ee37fbc257a2c645d2fe63d936252fff7/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/RestLookupServiceIT.groovy",
    "raw_url": "https://github.com/apache/nifi/raw/29478a9ee37fbc257a2c645d2fe63d936252fff7/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/RestLookupServiceIT.groovy",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/RestLookupServiceIT.groovy?ref=29478a9ee37fbc257a2c645d2fe63d936252fff7",
    "patch": "@@ -87,7 +87,7 @@ class RestLookupServiceIT {\n         try {\n             server.startServer()\n \n-            setEndpoint(server.port, \"/simple\")\n+            setEndpoint(server.port, '/${schema.name}')\n \n             def coordinates = [\n                 \"mime.type\": \"application/json\",\n@@ -207,8 +207,8 @@ class RestLookupServiceIT {\n \n     @Test\n     void testHeaders() {\n-        runner.setProperty(lookupService, \"X-USER\", \"jane.doe\")\n-        runner.setProperty(lookupService, \"X-PASS\", \"testing7890\")\n+        runner.setProperty(lookupService, \"X-USER\", '${x.user}')\n+        runner.setProperty(lookupService, \"X-PASS\", 'testing7890')\n \n         TestServer server = new TestServer()\n         ServletHandler handler = new ServletHandler()\n@@ -224,7 +224,7 @@ class RestLookupServiceIT {\n                 \"request.method\": \"get\"\n             ]\n \n-            def context = [ \"schema.name\": \"simple\" ]\n+            def context = [ 'schema.name': 'simple' , 'x.user': 'jane.doe']\n \n             Optional<Record> response = lookupService.lookup(coordinates, context)\n             Assert.assertTrue(response.isPresent())"
  },
  {
    "sha": "4f28719ac20e05cd12384857280404ba8e12f5bc",
    "filename": "nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/TestRestLookupService.groovy",
    "status": "modified",
    "additions": 20,
    "deletions": 7,
    "changes": 27,
    "blob_url": "https://github.com/apache/nifi/blob/29478a9ee37fbc257a2c645d2fe63d936252fff7/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/TestRestLookupService.groovy",
    "raw_url": "https://github.com/apache/nifi/raw/29478a9ee37fbc257a2c645d2fe63d936252fff7/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/TestRestLookupService.groovy",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/TestRestLookupService.groovy?ref=29478a9ee37fbc257a2c645d2fe63d936252fff7",
    "patch": "@@ -17,7 +17,11 @@\n \n package org.apache.nifi.lookup\n \n-import okhttp3.*\n+import okhttp3.MediaType\n+import okhttp3.Protocol\n+import okhttp3.Request\n+import okhttp3.Response\n+import okhttp3.ResponseBody\n import org.apache.nifi.lookup.rest.MockRestLookupService\n import org.apache.nifi.serialization.SimpleRecordSchema\n import org.apache.nifi.serialization.record.MapRecord\n@@ -32,6 +36,7 @@ import org.junit.Before\n import org.junit.Test\n \n import static groovy.json.JsonOutput.toJson\n+import static org.junit.Assert.assertNotNull\n \n class TestRestLookupService {\n     TestRunner runner\n@@ -50,6 +55,8 @@ class TestRestLookupService {\n         runner.setProperty(lookupService, RestLookupService.RECORD_READER, \"recordReader\")\n         runner.setProperty(\"Lookup Service\", \"lookupService\")\n         runner.setProperty(lookupService, RestLookupService.URL, \"http://localhost:8080\")\n+        // Add a dynamic property using Expression Language (expecting to be provided by FlowFile attribute)\n+        runner.setProperty(lookupService, 'test', '${test.ff.attribute}')\n         runner.enableControllerService(lookupService)\n         runner.enableControllerService(recordReader)\n         runner.assertValid()\n@@ -66,8 +73,14 @@ class TestRestLookupService {\n         recordReader.addRecord(\"Sally Doe\", 47, \"Curling\")\n \n         lookupService.response = buildResponse(toJson([ simpleTest: true]), JSON_TYPE)\n-        def result = lookupService.lookup(getCoordinates(JSON_TYPE, \"get\"))\n+        def result = lookupService.lookup(getCoordinates(JSON_TYPE, \"get\"), ['test.ff.attribute' : 'Hello'])\n         Assert.assertTrue(result.isPresent())\n+        def headers = lookupService.getHeaders()\n+        assertNotNull(headers)\n+        def headerValue = headers.get('test')\n+        assertNotNull(headerValue)\n+        Assert.assertEquals(1, headerValue.size())\n+        Assert.assertEquals('Hello', headerValue.get(0))\n         def record = result.get()\n         Assert.assertEquals(\"John Doe\", record.getAsString(\"name\"))\n         Assert.assertEquals(48, record.getAsInt(\"age\"))\n@@ -118,23 +131,23 @@ class TestRestLookupService {\n         result = lookupService.lookup(getCoordinates(JSON_TYPE, \"get\"))\n         Assert.assertTrue(result.isPresent())\n         record = result.get()\n-        Assert.assertNotNull(record.getAsString(\"sport\"))\n+        assertNotNull(record.getAsString(\"sport\"))\n         Assert.assertEquals(\"Soccer\", record.getAsString(\"sport\"))\n     }\n \n-    private Map<String, Object> getCoordinates(String mimeType, String method) {\n-        def retVal = [:]\n+    private static Map<String, Object> getCoordinates(String mimeType, String method) {\n+        def retVal = [:] as Map<String, Object>\n         retVal[RestLookupService.MIME_TYPE_KEY] = mimeType\n         retVal[RestLookupService.METHOD_KEY] = method\n \n         retVal\n     }\n \n-    private Response buildResponse(String resp, String mimeType) {\n+    private static Response buildResponse(String resp, String mimeType) {\n         return new Response.Builder()\n             .code(200)\n             .body(\n-                ResponseBody.create(MediaType.parse(mimeType), resp)\n+                ResponseBody.create(resp, MediaType.parse(mimeType))\n             )\n             .message(\"Test\")\n             .protocol(Protocol.HTTP_1_1)"
  },
  {
    "sha": "4983d426ff75527e5a601ac3ad41185384583dae",
    "filename": "nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/rest/MockRestLookupService.groovy",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/apache/nifi/blob/29478a9ee37fbc257a2c645d2fe63d936252fff7/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/rest/MockRestLookupService.groovy",
    "raw_url": "https://github.com/apache/nifi/raw/29478a9ee37fbc257a2c645d2fe63d936252fff7/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/rest/MockRestLookupService.groovy",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-standard-services/nifi-lookup-services-bundle/nifi-lookup-services/src/test/groovy/org/apache/nifi/lookup/rest/MockRestLookupService.groovy?ref=29478a9ee37fbc257a2c645d2fe63d936252fff7",
    "patch": "@@ -17,15 +17,22 @@\n \n package org.apache.nifi.lookup.rest\n \n+import okhttp3.Headers\n import okhttp3.Request\n import okhttp3.Response\n import org.apache.nifi.lookup.RestLookupService\n \n class MockRestLookupService extends RestLookupService {\n     Response response\n+    Headers headers\n \n     @Override\n     protected Response executeRequest(Request request) {\n+        this.headers = request.headers()\n         return response\n     }\n+\n+    Map<String, List<String>> getHeaders() {\n+        headers.toMultimap()\n+    }\n }"
  }
]
