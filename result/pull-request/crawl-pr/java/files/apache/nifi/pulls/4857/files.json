[
  {
    "sha": "68663855bdb9b7433cd09b7c987dc4b0afe368fe",
    "filename": "nifi-bootstrap/pom.xml",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-bootstrap/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-bootstrap/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-bootstrap/pom.xml?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -40,6 +40,12 @@ language governing permissions and limitations under the License. -->\n             <artifactId>nifi-security-utils</artifactId>\n             <version>1.14.0-SNAPSHOT</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-flow-encryptor</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+            <scope>runtime</scope>\n+        </dependency>\n         <dependency>\n             <groupId>javax.mail</groupId>\n             <artifactId>mail</artifactId>"
  },
  {
    "sha": "d4ed9ee2b8709410cdbba935197b0ee7bc8ddbc7",
    "filename": "nifi-commons/nifi-flow-encryptor/pom.xml",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-flow-encryptor/pom.xml?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-commons</artifactId>\n+        <version>1.14.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>nifi-flow-encryptor</artifactId>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-property-encryptor</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+            <exclusions>\n+                <!-- Excluded to avoid unnecessary runtime dependencies -->\n+                <exclusion>\n+                    <groupId>org.apache.nifi</groupId>\n+                    <artifactId>nifi-properties</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+</project>"
  },
  {
    "sha": "5ff68bdea2fc6e18b8e06b42158b458d7fc3b56c",
    "filename": "nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/FlowEncryptor.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/FlowEncryptor.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/FlowEncryptor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/FlowEncryptor.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.flow.encryptor;\n+\n+import org.apache.nifi.encrypt.PropertyEncryptor;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Flow Encryptor for reading a Flow Configuration and writing a new Flow Configuration using a new password\n+ */\n+public interface FlowEncryptor {\n+    /**\n+     * Process Flow Configuration Stream\n+     *\n+     * @param inputStream Flow Configuration Input Stream\n+     * @param outputStream Flow Configuration Output Stream encrypted using new password\n+     * @param inputEncryptor Property Encryptor for Input Configuration\n+     * @param outputEncryptor Property Encryptor for Output Configuration\n+     */\n+    void processFlow(InputStream inputStream, OutputStream outputStream, PropertyEncryptor inputEncryptor, PropertyEncryptor outputEncryptor);\n+}"
  },
  {
    "sha": "b29613b6af414b66d5a620cf2d463b0cb2f2d27d",
    "filename": "nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/StandardFlowEncryptor.java",
    "status": "added",
    "additions": 75,
    "deletions": 0,
    "changes": 75,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/StandardFlowEncryptor.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/StandardFlowEncryptor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/StandardFlowEncryptor.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.flow.encryptor;\n+\n+import org.apache.nifi.encrypt.PropertyEncryptor;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.io.UncheckedIOException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Standard Flow Encryptor handles reading Input Steam and writing Output Stream\n+ */\n+public class StandardFlowEncryptor implements FlowEncryptor {\n+    private static final Pattern ENCRYPTED_PATTERN = Pattern.compile(\"enc\\\\{([^\\\\}]+?)\\\\}\");\n+\n+    private static final int FIRST_GROUP = 1;\n+\n+    private static final String ENCRYPTED_FORMAT = \"enc{%s}\";\n+\n+    /**\n+     * Process Flow Configuration Stream replacing existing encrypted properties with new encrypted properties\n+     *\n+     * @param inputStream Flow Configuration Input Stream\n+     * @param outputStream Flow Configuration Output Stream encrypted using new password\n+     * @param inputEncryptor Property Encryptor for Input Configuration\n+     * @param outputEncryptor Property Encryptor for Output Configuration\n+     */\n+    @Override\n+    public void processFlow(final InputStream inputStream, final OutputStream outputStream, final PropertyEncryptor inputEncryptor, final PropertyEncryptor outputEncryptor) {\n+        try (final PrintWriter writer = new PrintWriter(new OutputStreamWriter(outputStream))) {\n+            try (final BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n+                reader.lines().forEach(line -> {\n+                    final Matcher matcher = ENCRYPTED_PATTERN.matcher(line);\n+                    if (matcher.find()) {\n+                        final String outputEncrypted = getOutputEncrypted(matcher.group(FIRST_GROUP), inputEncryptor, outputEncryptor);\n+                        final String outputLine = matcher.replaceFirst(outputEncrypted);\n+                        writer.println(outputLine);\n+                    } else {\n+                        writer.println(line);\n+                    }\n+                });\n+            }\n+        } catch (final IOException e) {\n+            throw new UncheckedIOException(\"Failed Processing Flow Configuration\", e);\n+        }\n+    }\n+\n+    private String getOutputEncrypted(final String inputEncrypted, final PropertyEncryptor inputEncryptor, final PropertyEncryptor outputEncryptor) {\n+        final String inputDecrypted = inputEncryptor.decrypt(inputEncrypted);\n+        final String outputEncrypted = outputEncryptor.encrypt(inputDecrypted);\n+        return String.format(ENCRYPTED_FORMAT, outputEncrypted);\n+    }\n+}"
  },
  {
    "sha": "75d7ef3d0000e126a9d29fac6c4188a0e82d20cb",
    "filename": "nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/command/SetSensitivePropertiesKey.java",
    "status": "added",
    "additions": 177,
    "deletions": 0,
    "changes": 177,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/command/SetSensitivePropertiesKey.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/command/SetSensitivePropertiesKey.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-flow-encryptor/src/main/java/org/apache/nifi/flow/encryptor/command/SetSensitivePropertiesKey.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.flow.encryptor.command;\n+\n+import org.apache.nifi.encrypt.PropertyEncryptor;\n+import org.apache.nifi.encrypt.PropertyEncryptorBuilder;\n+import org.apache.nifi.flow.encryptor.FlowEncryptor;\n+import org.apache.nifi.flow.encryptor.StandardFlowEncryptor;\n+import org.apache.nifi.security.util.EncryptionMethod;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+/**\n+ * Set Sensitive Properties Key for NiFi Properties and update encrypted Flow Configuration\n+ */\n+public class SetSensitivePropertiesKey {\n+    protected static final String PROPERTIES_FILE_PATH = \"nifi.properties.file.path\";\n+\n+    protected static final String PROPS_KEY = \"nifi.sensitive.props.key\";\n+\n+    protected static final String PROPS_ALGORITHM = \"nifi.sensitive.props.algorithm\";\n+\n+    protected static final String CONFIGURATION_FILE = \"nifi.flow.configuration.file\";\n+\n+    private static final int MINIMUM_REQUIRED_LENGTH = 16;\n+\n+    private static final String FLOW_XML_PREFIX = \"flow.xml.\";\n+\n+    private static final String GZ_EXTENSION = \".gz\";\n+\n+    private static final String DEFAULT_PROPERTIES_ALGORITHM = EncryptionMethod.MD5_256AES.getAlgorithm();\n+\n+    private static final String DEFAULT_PROPERTIES_KEY = \"nififtw!\";\n+\n+    private static final String SENSITIVE_PROPERTIES_KEY = String.format(\"%s=\", PROPS_KEY);\n+\n+    public static void main(final String[] arguments) {\n+        if (arguments.length == 1) {\n+            final String outputPropertiesKey = arguments[0];\n+            if (outputPropertiesKey.length() < MINIMUM_REQUIRED_LENGTH) {\n+                System.err.printf(\"Sensitive Properties Key length less than required [%d]%n\", MINIMUM_REQUIRED_LENGTH);\n+            } else {\n+                run(outputPropertiesKey);\n+            }\n+        } else {\n+            System.err.printf(\"Unexpected number of arguments [%d]%n\", arguments.length);\n+            System.err.printf(\"Usage: %s <sensitivePropertiesKey>%n\", SetSensitivePropertiesKey.class.getSimpleName());\n+        }\n+    }\n+\n+    private static void run(final String outputPropertiesKey) {\n+        final String propertiesFilePath = System.getProperty(PROPERTIES_FILE_PATH);\n+        final File propertiesFile = new File(propertiesFilePath);\n+        final Properties properties = loadProperties(propertiesFile);\n+\n+        final File flowConfigurationFile = getFlowConfigurationFile(properties);\n+        try {\n+            storeProperties(propertiesFile, outputPropertiesKey);\n+            System.out.printf(\"NiFi Properties Processed [%s]%n\", propertiesFilePath);\n+        } catch (final IOException e) {\n+            final String message = String.format(\"Failed to Process NiFi Properties [%s]\", propertiesFilePath);\n+            throw new UncheckedIOException(message, e);\n+        }\n+\n+        if (flowConfigurationFile.exists()) {\n+            final String algorithm = getAlgorithm(properties);\n+            final PropertyEncryptor outputEncryptor = getPropertyEncryptor(outputPropertiesKey, algorithm);\n+            processFlowConfiguration(properties, outputEncryptor);\n+        }\n+    }\n+\n+    private static void processFlowConfiguration(final Properties properties, final PropertyEncryptor outputEncryptor) {\n+        final File flowConfigurationFile = getFlowConfigurationFile(properties);\n+        try (final InputStream flowInputStream = new GZIPInputStream(new FileInputStream(flowConfigurationFile))) {\n+            final File flowOutputFile = getFlowOutputFile();\n+            final Path flowOutputPath = flowOutputFile.toPath();\n+            try (final OutputStream flowOutputStream = new GZIPOutputStream(new FileOutputStream(flowOutputFile))) {\n+                final String inputAlgorithm = getAlgorithm(properties);\n+                final String inputPropertiesKey = getKey(properties);\n+                final PropertyEncryptor inputEncryptor = getPropertyEncryptor(inputPropertiesKey, inputAlgorithm);\n+\n+                final FlowEncryptor flowEncryptor = new StandardFlowEncryptor();\n+                flowEncryptor.processFlow(flowInputStream, flowOutputStream, inputEncryptor, outputEncryptor);\n+            }\n+\n+            final Path flowConfigurationPath = flowConfigurationFile.toPath();\n+            Files.move(flowOutputPath, flowConfigurationPath, StandardCopyOption.REPLACE_EXISTING);\n+            System.out.printf(\"Flow Configuration Processed [%s]%n\", flowConfigurationPath);\n+        } catch (final IOException|RuntimeException e) {\n+            System.err.printf(\"Failed to process Flow Configuration [%s]%n\", flowConfigurationFile);\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private static String getAlgorithm(final Properties properties) {\n+        String algorithm = properties.getProperty(PROPS_ALGORITHM, DEFAULT_PROPERTIES_ALGORITHM);\n+        if (algorithm.length() == 0) {\n+            algorithm = DEFAULT_PROPERTIES_ALGORITHM;\n+        }\n+        return algorithm;\n+    }\n+\n+    private static String getKey(final Properties properties) {\n+        String key = properties.getProperty(PROPS_KEY, DEFAULT_PROPERTIES_KEY);\n+        if (key.length() == 0) {\n+            key = DEFAULT_PROPERTIES_KEY;\n+        }\n+        return key;\n+    }\n+\n+    private static File getFlowOutputFile() throws IOException {\n+        final File flowOutputFile = File.createTempFile(FLOW_XML_PREFIX, GZ_EXTENSION);\n+        flowOutputFile.deleteOnExit();\n+        return flowOutputFile;\n+    }\n+\n+    private static Properties loadProperties(final File propertiesFile) {\n+        final Properties properties = new Properties();\n+        try (final FileReader reader = new FileReader(propertiesFile)) {\n+            properties.load(reader);\n+        } catch (final IOException e) {\n+            final String message = String.format(\"Failed to read NiFi Properties [%s]\", propertiesFile);\n+            throw new UncheckedIOException(message, e);\n+        }\n+        return properties;\n+    }\n+\n+    private static void storeProperties(final File propertiesFile, final String propertiesKey) throws IOException {\n+        final Path propertiesFilePath = propertiesFile.toPath();\n+        final List<String> lines = Files.readAllLines(propertiesFilePath);\n+        final List<String> updatedLines = lines.stream().map(line -> {\n+            if (line.startsWith(SENSITIVE_PROPERTIES_KEY)) {\n+                return SENSITIVE_PROPERTIES_KEY + propertiesKey;\n+            } else {\n+                return line;\n+            }\n+        }).collect(Collectors.toList());\n+        Files.write(propertiesFilePath, updatedLines);\n+    }\n+\n+    private static PropertyEncryptor getPropertyEncryptor(final String propertiesKey, final String propertiesAlgorithm) {\n+        return new PropertyEncryptorBuilder(propertiesKey).setAlgorithm(propertiesAlgorithm).build();\n+    }\n+\n+    private static File getFlowConfigurationFile(final Properties properties) {\n+        return new File(properties.getProperty(CONFIGURATION_FILE));\n+    }\n+}"
  },
  {
    "sha": "d9cfd6a4111bb7e5013a861d35a5a2dc744d08d0",
    "filename": "nifi-commons/nifi-flow-encryptor/src/test/java/org/apache/nifi/flow/encryptor/StandardFlowEncryptorTest.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/test/java/org/apache/nifi/flow/encryptor/StandardFlowEncryptorTest.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/test/java/org/apache/nifi/flow/encryptor/StandardFlowEncryptorTest.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-flow-encryptor/src/test/java/org/apache/nifi/flow/encryptor/StandardFlowEncryptorTest.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.flow.encryptor;\n+\n+import org.apache.nifi.encrypt.PropertyEncryptor;\n+import org.apache.nifi.encrypt.PropertyEncryptorBuilder;\n+import org.apache.nifi.security.util.EncryptionMethod;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class StandardFlowEncryptorTest {\n+\n+    private static final String INPUT_KEY = UUID.randomUUID().toString();\n+\n+    private static final String OUTPUT_KEY = UUID.randomUUID().toString();\n+\n+    private static final String ENCRYPTED_FORMAT = \"enc{%s}\";\n+\n+    private static final Pattern OUTPUT_PATTERN = Pattern.compile(\"^enc\\\\{([^}]+?)}$\");\n+\n+    private PropertyEncryptor inputEncryptor;\n+\n+    private PropertyEncryptor outputEncryptor;\n+\n+    private StandardFlowEncryptor flowEncryptor;\n+\n+    @Before\n+    public void setEncryptors() {\n+        inputEncryptor = getPropertyEncryptor(INPUT_KEY, EncryptionMethod.MD5_256AES.getAlgorithm());\n+        outputEncryptor = getPropertyEncryptor(OUTPUT_KEY, EncryptionMethod.SHA256_256AES.getAlgorithm());\n+        flowEncryptor = new StandardFlowEncryptor();\n+    }\n+\n+    @Test\n+    public void testProcessEncrypted() {\n+        final String property = StandardFlowEncryptorTest.class.getSimpleName();\n+        final String encryptedProperty = String.format(ENCRYPTED_FORMAT, inputEncryptor.encrypt(property));\n+        final String encryptedRow = String.format(\"%s%n\", encryptedProperty);\n+\n+        final InputStream inputStream = new ByteArrayInputStream(encryptedRow.getBytes(StandardCharsets.UTF_8));\n+        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+        flowEncryptor.processFlow(inputStream, outputStream, inputEncryptor, outputEncryptor);\n+\n+        final String outputEncrypted = new String(outputStream.toByteArray());\n+        final Matcher matcher = OUTPUT_PATTERN.matcher(outputEncrypted);\n+        assertTrue(String.format(\"Encrypted Pattern not found [%s]\", outputEncrypted), matcher.find());\n+\n+        final String outputEncryptedProperty = matcher.group(1);\n+        final String outputDecrypted = outputEncryptor.decrypt(outputEncryptedProperty);\n+        assertEquals(property, outputDecrypted);\n+    }\n+\n+    @Test\n+    public void testProcessNoEncrypted() {\n+        final String property = String.format(\"%s%n\", StandardFlowEncryptorTest.class.getSimpleName());\n+\n+        final InputStream inputStream = new ByteArrayInputStream(property.getBytes(StandardCharsets.UTF_8));\n+        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+        flowEncryptor.processFlow(inputStream, outputStream, inputEncryptor, outputEncryptor);\n+\n+        final String outputProperty = new String(outputStream.toByteArray());\n+        assertEquals(property, outputProperty);\n+    }\n+\n+    private PropertyEncryptor getPropertyEncryptor(final String propertiesKey, final String propertiesAlgorithm) {\n+        return new PropertyEncryptorBuilder(propertiesKey).setAlgorithm(propertiesAlgorithm).build();\n+    }\n+}"
  },
  {
    "sha": "13f2837dd2a6224898b39697411b9c9766f2c2a6",
    "filename": "nifi-commons/nifi-flow-encryptor/src/test/java/org/apache/nifi/flow/encryptor/command/SetSensitivePropertiesKeyTest.java",
    "status": "added",
    "additions": 118,
    "deletions": 0,
    "changes": 118,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/test/java/org/apache/nifi/flow/encryptor/command/SetSensitivePropertiesKeyTest.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/test/java/org/apache/nifi/flow/encryptor/command/SetSensitivePropertiesKeyTest.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-flow-encryptor/src/test/java/org/apache/nifi/flow/encryptor/command/SetSensitivePropertiesKeyTest.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.flow.encryptor.command;\n+\n+import org.apache.nifi.stream.io.GZIPOutputStream;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SetSensitivePropertiesKeyTest {\n+    private static final String FLOW_CONTENTS = \"<property><value>PROPERTY</value></property>\";\n+\n+    @After\n+    public void clearProperties() {\n+        System.clearProperty(SetSensitivePropertiesKey.PROPERTIES_FILE_PATH);\n+    }\n+\n+    @Test\n+    public void testMainNoArguments() {\n+        SetSensitivePropertiesKey.main(new String[]{});\n+    }\n+\n+    @Test\n+    public void testMainBlankKeyAndAlgorithm() throws IOException, URISyntaxException {\n+        final Path flowConfiguration = getFlowConfiguration();\n+        final Path propertiesPath = getNiFiProperties(flowConfiguration, \"/blank.nifi.properties\");\n+\n+        System.setProperty(SetSensitivePropertiesKey.PROPERTIES_FILE_PATH, propertiesPath.toString());\n+\n+        final String sensitivePropertiesKey = UUID.randomUUID().toString();\n+        SetSensitivePropertiesKey.main(new String[]{sensitivePropertiesKey});\n+\n+        assertPropertiesKeyUpdated(propertiesPath, sensitivePropertiesKey);\n+        assertTrue(\"Flow Configuration not found\", flowConfiguration.toFile().exists());\n+    }\n+\n+    @Test\n+    public void testMainPopulatedKeyAndAlgorithm() throws IOException, URISyntaxException {\n+        final Path flowConfiguration = getFlowConfiguration();\n+        final Path propertiesPath = getNiFiProperties(flowConfiguration, \"/populated.nifi.properties\");\n+\n+        System.setProperty(SetSensitivePropertiesKey.PROPERTIES_FILE_PATH, propertiesPath.toString());\n+\n+        final String sensitivePropertiesKey = UUID.randomUUID().toString();\n+        SetSensitivePropertiesKey.main(new String[]{sensitivePropertiesKey});\n+\n+        assertPropertiesKeyUpdated(propertiesPath, sensitivePropertiesKey);\n+        assertTrue(\"Flow Configuration not found\", flowConfiguration.toFile().exists());\n+    }\n+\n+    private void assertPropertiesKeyUpdated(final Path propertiesPath, final String sensitivePropertiesKey) throws IOException {\n+        final Optional<String> keyProperty = Files.readAllLines(propertiesPath)\n+                .stream()\n+                .filter(line -> line.startsWith(SetSensitivePropertiesKey.PROPS_KEY))\n+                .findFirst();\n+        assertTrue(\"Sensitive Key Property not found\", keyProperty.isPresent());\n+\n+        final String expectedProperty = String.format(\"%s=%s\", SetSensitivePropertiesKey.PROPS_KEY, sensitivePropertiesKey);\n+        assertEquals(\"Sensitive Key Property not updated\", expectedProperty, keyProperty.get());\n+    }\n+\n+    private Path getNiFiProperties(final Path flowConfigurationPath, String propertiesResource) throws IOException, URISyntaxException {\n+        final Path sourcePropertiesPath = Paths.get(SetSensitivePropertiesKey.class.getResource(propertiesResource).toURI());\n+        final List<String> sourceProperties = Files.readAllLines(sourcePropertiesPath);\n+        final List<String> flowProperties = sourceProperties.stream().map(line -> {\n+            if (line.startsWith(SetSensitivePropertiesKey.CONFIGURATION_FILE)) {\n+                return line + flowConfigurationPath.toString();\n+            } else {\n+                return line;\n+            }\n+        }).collect(Collectors.toList());\n+\n+        final Path propertiesPath = Files.createTempFile(SetSensitivePropertiesKey.class.getSimpleName(), \".properties\");\n+        propertiesPath.toFile().deleteOnExit();\n+        Files.write(propertiesPath, flowProperties);\n+        return propertiesPath;\n+    }\n+\n+    private Path getFlowConfiguration() throws IOException {\n+        final Path flowConfigurationPath = Files.createTempFile(SetSensitivePropertiesKey.class.getSimpleName(), \".xml.gz\");\n+        final File flowConfigurationFile = flowConfigurationPath.toFile();\n+        flowConfigurationFile.deleteOnExit();\n+\n+        try (final GZIPOutputStream outputStream = new GZIPOutputStream(new FileOutputStream(flowConfigurationFile))) {\n+            outputStream.write(FLOW_CONTENTS.getBytes(StandardCharsets.UTF_8));\n+        }\n+        return flowConfigurationPath;\n+    }\n+}"
  },
  {
    "sha": "8c16c51f9546efb99004ddf00fa195fc8e345da2",
    "filename": "nifi-commons/nifi-flow-encryptor/src/test/resources/blank.nifi.properties",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/test/resources/blank.nifi.properties",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/test/resources/blank.nifi.properties",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-flow-encryptor/src/test/resources/blank.nifi.properties?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+nifi.sensitive.props.key=\n+nifi.sensitive.props.algorithm=\n+nifi.flow.configuration.file="
  },
  {
    "sha": "36e2707c7154a48d19fd0c2c721a1a4c63bb31b7",
    "filename": "nifi-commons/nifi-flow-encryptor/src/test/resources/populated.nifi.properties",
    "status": "added",
    "additions": 17,
    "deletions": 0,
    "changes": 17,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/test/resources/populated.nifi.properties",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-flow-encryptor/src/test/resources/populated.nifi.properties",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-flow-encryptor/src/test/resources/populated.nifi.properties?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+nifi.sensitive.props.key=D5E41AC1-EEF8-4A54-930D-593F749AE95C\n+nifi.sensitive.props.algorithm=NIFI_ARGON2_AES_GCM_256\n+nifi.flow.configuration.file="
  },
  {
    "sha": "92cea865fb6f81bd1778836800d1f7b38ae645a3",
    "filename": "nifi-commons/nifi-property-encryptor/pom.xml",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/pom.xml?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.nifi</groupId>\n+        <artifactId>nifi-commons</artifactId>\n+        <version>1.14.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>nifi-property-encryptor</artifactId>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-security-utils</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.bouncycastle</groupId>\n+            <artifactId>bcprov-jdk15on</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.11</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-codec</groupId>\n+            <artifactId>commons-codec</artifactId>\n+            <version>1.14</version>\n+        </dependency>\n+    </dependencies>\n+</project>"
  },
  {
    "sha": "69dbb16d66c79adc15774faad210b35c9995c90e",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/CipherPropertyEncryptor.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/CipherPropertyEncryptor.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/CipherPropertyEncryptor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/CipherPropertyEncryptor.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/encrypt/CipherPropertyEncryptor.java"
  },
  {
    "sha": "de6068a349e159b073a8a0e94d56878a43c2a53b",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/EncryptionException.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/EncryptionException.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/EncryptionException.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/EncryptionException.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/encrypt/EncryptionException.java"
  },
  {
    "sha": "7bcd002b3956f8bbe8b642c9dd534a20f8abe8a2",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptor.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptor.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptor.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptor.java"
  },
  {
    "sha": "82b6b956d22fb973276970d762f4b60ef69c9ac6",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptor.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptor.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptor.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptor.java"
  },
  {
    "sha": "27e4f0e1797a260a493c7028c4042fcdf463f5d5",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptionMethod.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptionMethod.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptionMethod.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptionMethod.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/encrypt/PropertyEncryptionMethod.java"
  },
  {
    "sha": "17f0e1b8c70509afd83bf8c27653bec593be3e6f",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptor.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptor.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptor.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptor.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/encrypt/PropertyEncryptor.java"
  },
  {
    "sha": "fcb4a89888b9e04f5630bbf0076f5788817818d5",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptorBuilder.java",
    "status": "renamed",
    "additions": 41,
    "deletions": 44,
    "changes": 85,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptorBuilder.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptorBuilder.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptorBuilder.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -16,70 +16,55 @@\n  */\n package org.apache.nifi.encrypt;\n \n-import org.apache.commons.lang3.StringUtils;\n import org.apache.nifi.security.util.EncryptionMethod;\n import org.apache.nifi.security.util.crypto.AESKeyedCipherProvider;\n import org.apache.nifi.security.util.crypto.KeyedCipherProvider;\n import org.apache.nifi.security.util.crypto.PBECipherProvider;\n-import org.apache.nifi.util.NiFiProperties;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n import javax.crypto.SecretKey;\n import java.util.Objects;\n \n /**\n- * Property Encryptor Factory for encapsulating instantiation of Property Encryptors based on various parameters\n+ * Property Encryptor Builder\n  */\n-public class PropertyEncryptorFactory {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyEncryptorFactory.class);\n-\n+public class PropertyEncryptorBuilder {\n     private static final PropertySecretKeyProvider SECRET_KEY_PROVIDER = new StandardPropertySecretKeyProvider();\n \n-    private static final String DEFAULT_PASSWORD = \"nififtw!\";\n-\n-    private static final String NOTIFICATION_BORDER = \"*\";\n+    private final String password;\n \n-    private static final int NOTIFICATION_WIDTH = 80;\n+    private String algorithm = PropertyEncryptionMethod.NIFI_ARGON2_AES_GCM_256.toString();\n \n-    private static final String NOTIFICATION_DELIMITER = StringUtils.repeat(NOTIFICATION_BORDER, NOTIFICATION_WIDTH);\n+    /**\n+     * Property Encryptor Builder with required password\n+     *\n+     * @param password Password required\n+     */\n+    public PropertyEncryptorBuilder(final String password) {\n+        Objects.requireNonNull(password, \"Password required\");\n+        this.password = password;\n+    }\n \n-    private static final String NOTIFICATION = StringUtils.joinWith(System.lineSeparator(),\n-            System.lineSeparator(),\n-            NOTIFICATION_DELIMITER,\n-            StringUtils.center(String.format(\"FOUND BLANK SENSITIVE PROPERTIES KEY [%s]\", NiFiProperties.SENSITIVE_PROPS_KEY), NOTIFICATION_WIDTH),\n-            StringUtils.center(\"USING DEFAULT KEY FOR ENCRYPTION\", NOTIFICATION_WIDTH),\n-            StringUtils.center(String.format(\"SET [%s] TO SECURE SENSITIVE PROPERTIES\", NiFiProperties.SENSITIVE_PROPS_KEY), NOTIFICATION_WIDTH),\n-            NOTIFICATION_DELIMITER\n-    );\n+    /**\n+     * Set Algorithm as either Property Encryption Method or Encryption Method\n+     *\n+     * @param algorithm Algorithm\n+     * @return Property Encryptor Builder\n+     */\n+    public PropertyEncryptorBuilder setAlgorithm(final String algorithm) {\n+        Objects.requireNonNull(algorithm, \"Algorithm required\");\n+        this.algorithm = algorithm;\n+        return this;\n+    }\n \n     /**\n-     * Get Property Encryptor using NiFi Properties\n+     * Build Property Encryptor using current configuration\n      *\n-     * @param properties NiFi Properties\n      * @return Property Encryptor\n      */\n-    @SuppressWarnings(\"deprecation\")\n-    public static PropertyEncryptor getPropertyEncryptor(final NiFiProperties properties) {\n-        Objects.requireNonNull(properties, \"NiFi Properties is required\");\n-        final String algorithm = properties.getProperty(NiFiProperties.SENSITIVE_PROPS_ALGORITHM);\n-        String password = properties.getProperty(NiFiProperties.SENSITIVE_PROPS_KEY);\n-\n-        if (StringUtils.isBlank(password)) {\n-            LOGGER.error(NOTIFICATION);\n-            password = DEFAULT_PASSWORD;\n-        }\n-\n+    public PropertyEncryptor build() {\n         final PropertyEncryptionMethod propertyEncryptionMethod = findPropertyEncryptionAlgorithm(algorithm);\n         if (propertyEncryptionMethod == null) {\n-            final EncryptionMethod encryptionMethod = findEncryptionMethod(algorithm);\n-            if (encryptionMethod.isPBECipher()) {\n-                final PBECipherProvider cipherProvider = new org.apache.nifi.security.util.crypto.NiFiLegacyCipherProvider();\n-                return new PasswordBasedCipherPropertyEncryptor(cipherProvider, encryptionMethod, password);\n-            } else {\n-                final String message = String.format(\"Algorithm [%s] not supported for Sensitive Properties\", encryptionMethod.getAlgorithm());\n-                throw new UnsupportedOperationException(message);\n-            }\n+            return getPasswordBasedCipherPropertyEncryptor();\n         } else {\n             final KeyedCipherProvider keyedCipherProvider = new AESKeyedCipherProvider();\n             final SecretKey secretKey = SECRET_KEY_PROVIDER.getSecretKey(propertyEncryptionMethod, password);\n@@ -88,7 +73,19 @@ public static PropertyEncryptor getPropertyEncryptor(final NiFiProperties proper\n         }\n     }\n \n-    private static PropertyEncryptionMethod findPropertyEncryptionAlgorithm(final String algorithm) {\n+    @SuppressWarnings(\"deprecation\")\n+    private PasswordBasedCipherPropertyEncryptor getPasswordBasedCipherPropertyEncryptor() {\n+        final EncryptionMethod encryptionMethod = findEncryptionMethod(algorithm);\n+        if (encryptionMethod.isPBECipher()) {\n+            final PBECipherProvider cipherProvider = new org.apache.nifi.security.util.crypto.NiFiLegacyCipherProvider();\n+            return new PasswordBasedCipherPropertyEncryptor(cipherProvider, encryptionMethod, password);\n+        } else {\n+            final String message = String.format(\"Algorithm [%s] not supported for Sensitive Properties\", encryptionMethod.getAlgorithm());\n+            throw new UnsupportedOperationException(message);\n+        }\n+    }\n+\n+    private PropertyEncryptionMethod findPropertyEncryptionAlgorithm(final String algorithm) {\n         PropertyEncryptionMethod foundPropertyEncryptionMethod = null;\n \n         for (final PropertyEncryptionMethod propertyEncryptionMethod : PropertyEncryptionMethod.values()) {\n@@ -101,7 +98,7 @@ private static PropertyEncryptionMethod findPropertyEncryptionAlgorithm(final St\n         return foundPropertyEncryptionMethod;\n     }\n \n-    private static EncryptionMethod findEncryptionMethod(final String algorithm) {\n+    private EncryptionMethod findEncryptionMethod(final String algorithm) {\n         final EncryptionMethod encryptionMethod = EncryptionMethod.forAlgorithm(algorithm);\n         if (encryptionMethod == null) {\n             final String message = String.format(\"Encryption Method not found for Algorithm [%s]\", algorithm);",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/encrypt/PropertyEncryptorFactory.java"
  },
  {
    "sha": "ac95ad355882e86e6276a785ba2b93f677693742",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptorFactory.java",
    "status": "added",
    "additions": 47,
    "deletions": 0,
    "changes": 47,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptorFactory.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertyEncryptorFactory.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.encrypt;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.nifi.util.NiFiProperties;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Property Encryptor Factory for encapsulating instantiation of Property Encryptors based on various parameters\n+ */\n+public class PropertyEncryptorFactory {\n+    private static final String KEY_REQUIRED = String.format(\"NiFi Sensitive Properties Key [%s] is required\", NiFiProperties.SENSITIVE_PROPS_KEY);\n+\n+    /**\n+     * Get Property Encryptor using NiFi Properties\n+     *\n+     * @param properties NiFi Properties\n+     * @return Property Encryptor\n+     */\n+    public static PropertyEncryptor getPropertyEncryptor(final NiFiProperties properties) {\n+        Objects.requireNonNull(properties, \"NiFi Properties is required\");\n+        final String algorithm = properties.getProperty(NiFiProperties.SENSITIVE_PROPS_ALGORITHM);\n+        String password = properties.getProperty(NiFiProperties.SENSITIVE_PROPS_KEY);\n+\n+        if (StringUtils.isBlank(password)) {\n+            throw new IllegalArgumentException(KEY_REQUIRED);\n+        }\n+\n+        return new PropertyEncryptorBuilder(password).setAlgorithm(algorithm).build();\n+    }\n+}"
  },
  {
    "sha": "9c40a6b469f0c34c1f59c9fbe6a20a6b166e0d3c",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertySecretKeyProvider.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertySecretKeyProvider.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertySecretKeyProvider.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/PropertySecretKeyProvider.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/encrypt/PropertySecretKeyProvider.java"
  },
  {
    "sha": "4a5bf0139f50f170f6fa712d56f8ec2a3b5819af",
    "filename": "nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProvider.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProvider.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProvider.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/main/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProvider.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/main/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProvider.java"
  },
  {
    "sha": "176fee802671649c3b13fb94041e2b65375e3591",
    "filename": "nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptorTest.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptorTest.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptorTest.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptorTest.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/encrypt/KeyedCipherPropertyEncryptorTest.java"
  },
  {
    "sha": "f9839c8ef6b6f88acae7c58cab5157b53499f54a",
    "filename": "nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptorTest.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptorTest.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptorTest.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptorTest.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/encrypt/PasswordBasedCipherPropertyEncryptorTest.java"
  },
  {
    "sha": "c20835d9c16cea7df484ef3ff0f80b67b294dd4b",
    "filename": "nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/PropertyEncryptorFactoryTest.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/PropertyEncryptorFactoryTest.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/PropertyEncryptorFactoryTest.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/PropertyEncryptorFactoryTest.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -49,8 +49,7 @@ public void testGetPropertyEncryptorPropertiesBlankPassword() {\n         properties.setProperty(NiFiProperties.SENSITIVE_PROPS_KEY, StringUtils.EMPTY);\n         final NiFiProperties niFiProperties = NiFiProperties.createBasicNiFiProperties(null, properties);\n \n-        final PropertyEncryptor encryptor = PropertyEncryptorFactory.getPropertyEncryptor(niFiProperties);\n-        assertNotNull(encryptor);\n+        assertThrows(IllegalArgumentException.class, () -> PropertyEncryptorFactory.getPropertyEncryptor(niFiProperties));\n     }\n \n     @Test",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/encrypt/PropertyEncryptorFactoryTest.java"
  },
  {
    "sha": "9e2a924f288f1cc6de04b14c7aedfc0224b012e6",
    "filename": "nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProviderTest.java",
    "status": "renamed",
    "additions": 0,
    "deletions": 0,
    "changes": 0,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProviderTest.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProviderTest.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/nifi-property-encryptor/src/test/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProviderTest.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "previous_filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/src/test/java/org/apache/nifi/encrypt/StandardPropertySecretKeyProviderTest.java"
  },
  {
    "sha": "16203b5ada78e7d7f514fe642a2a922e496419f1",
    "filename": "nifi-commons/pom.xml",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-commons/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-commons/pom.xml?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -27,11 +27,13 @@\n         <module>nifi-data-provenance-utils</module>\n         <module>nifi-expression-language</module>\n         <module>nifi-flowfile-packager</module>\n+        <module>nifi-flow-encryptor</module>\n         <module>nifi-hl7-query-language</module>\n         <module>nifi-json-utils</module>\n         <module>nifi-logging-utils</module>\n         <module>nifi-metrics</module>\n         <module>nifi-parameter</module>\n+        <module>nifi-property-encryptor</module>\n         <module>nifi-properties</module>\n         <module>nifi-record</module>\n         <module>nifi-record-path</module>"
  },
  {
    "sha": "d685dc1d05821c3f188da26af23f1409a4d028d2",
    "filename": "nifi-docs/src/main/asciidoc/administration-guide.adoc",
    "status": "modified",
    "additions": 12,
    "deletions": 0,
    "changes": 12,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-docs/src/main/asciidoc/administration-guide.adoc",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-docs/src/main/asciidoc/administration-guide.adoc",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-docs/src/main/asciidoc/administration-guide.adoc?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -3846,6 +3846,18 @@ where:\n \n For more information see the <<toolkit-guide.adoc#encrypt_config_tool,Encrypt-Config Tool>> section in the NiFi Toolkit Guide.\n \n+==== Updating the Sensitive Properties Key\n+\n+Starting with version 1.14.0, NiFi requires a value for 'nifi.sensitive.props.key' in _nifi.properties_.\n+\n+The following command can be used to read an existing _flow.xml.gz_ configuration and set a new sensitive properties key in _nifi.properties_:\n+\n+```\n+$ ./bin/nifi.sh set-sensitive-properties-key <sensitivePropertiesKey>\n+```\n+\n+The minimum required length for a new sensitive properties key is 16 characters.\n+\n === Start New NiFi\n \n In your new NiFi installation:"
  },
  {
    "sha": "e3aee63fe4352b944dbe7b9f7a2211abce81ea51",
    "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/pom.xml",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/pom.xml?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -66,6 +66,11 @@\n             <artifactId>nifi-nar-utils</artifactId>\n             <version>1.14.0-SNAPSHOT</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.nifi</groupId>\n+            <artifactId>nifi-property-encryptor</artifactId>\n+            <version>1.14.0-SNAPSHOT</version>\n+        </dependency>\n \n         <dependency>\n             <groupId>org.apache.nifi.registry</groupId>"
  },
  {
    "sha": "200f368f1eb7f3e8e27e4ee06ca0112269dc2f40",
    "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/controller/serialization/FlowFromDOMFactoryTest.groovy",
    "status": "modified",
    "additions": 0,
    "deletions": 18,
    "changes": 18,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/controller/serialization/FlowFromDOMFactoryTest.groovy",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/controller/serialization/FlowFromDOMFactoryTest.groovy",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/controller/serialization/FlowFromDOMFactoryTest.groovy?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -16,41 +16,23 @@\n  */\n package org.apache.nifi.controller.serialization\n \n-import org.apache.commons.codec.binary.Hex\n import org.apache.nifi.encrypt.EncryptionException\n import org.apache.nifi.encrypt.PropertyEncryptor\n-import org.apache.nifi.encrypt.PropertyEncryptorFactory\n-import org.apache.nifi.security.kms.CryptoUtils\n-import org.apache.nifi.security.util.EncryptionMethod\n-import org.bouncycastle.jce.provider.BouncyCastleProvider\n import org.junit.BeforeClass\n import org.junit.Test\n import org.junit.runner.RunWith\n import org.junit.runners.JUnit4\n import org.slf4j.Logger\n import org.slf4j.LoggerFactory\n \n-import javax.crypto.Cipher\n-import javax.crypto.SecretKey\n-import javax.crypto.SecretKeyFactory\n-import javax.crypto.spec.PBEKeySpec\n-import javax.crypto.spec.PBEParameterSpec\n-import java.security.Security\n-\n import static groovy.test.GroovyAssert.shouldFail\n \n @RunWith(JUnit4.class)\n class FlowFromDOMFactoryTest {\n     private static final Logger logger = LoggerFactory.getLogger(FlowFromDOMFactoryTest.class)\n \n-    private static final String DEFAULT_PASSWORD = \"nififtw!\"\n-    private static final byte[] DEFAULT_SALT = new byte[8]\n-    private static final int DEFAULT_ITERATION_COUNT = 0\n-    private static final EncryptionMethod DEFAULT_ENCRYPTION_METHOD = EncryptionMethod.MD5_128AES\n-\n     @BeforeClass\n     static void setUpOnce() throws Exception {\n-        Security.addProvider(new BouncyCastleProvider())\n         logger.metaClass.methodMissing = { String name, args ->\n             logger.info(\"[${name?.toUpperCase()}] ${(args as List).join(\" \")}\")\n         }"
  },
  {
    "sha": "b6ce875e997ddec08475cd1ff0a683a2207c3f05",
    "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/main/java/org/apache/nifi/properties/NiFiPropertiesLoader.java",
    "status": "modified",
    "additions": 68,
    "deletions": 18,
    "changes": 86,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/main/java/org/apache/nifi/properties/NiFiPropertiesLoader.java",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/main/java/org/apache/nifi/properties/NiFiPropertiesLoader.java",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/main/java/org/apache/nifi/properties/NiFiPropertiesLoader.java?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -21,9 +21,17 @@\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n import java.security.Security;\n+import java.util.Base64;\n+import java.util.List;\n import java.util.Properties;\n+import java.util.stream.Collectors;\n import javax.crypto.Cipher;\n import org.apache.nifi.security.kms.CryptoUtils;\n import org.apache.nifi.util.NiFiProperties;\n@@ -34,7 +42,13 @@\n public class NiFiPropertiesLoader {\n \n     private static final Logger logger = LoggerFactory.getLogger(NiFiPropertiesLoader.class);\n+    private static final Base64.Encoder KEY_ENCODER = Base64.getEncoder().withoutPadding();\n+    private static final int SENSITIVE_PROPERTIES_KEY_LENGTH = 24;\n+    private static final String EMPTY_SENSITIVE_PROPERTIES_KEY = String.format(\"%s=\", NiFiProperties.SENSITIVE_PROPS_KEY);\n+    private static final String MIGRATION_INSTRUCTIONS = \"See Admin Guide section [Updating the Sensitive Properties Key]\";\n+    private static final String PROPERTIES_KEY_MESSAGE = String.format(\"Sensitive Properties Key [%s] not found: %s\", NiFiProperties.SENSITIVE_PROPS_KEY, MIGRATION_INSTRUCTIONS);\n \n+    private final String defaultPropertiesFilePath = CryptoUtils.getDefaultFilePath();\n     private NiFiProperties instance;\n     private String keyHex;\n \n@@ -130,7 +144,7 @@ public static String extractKeyFromBootstrapFile(String bootstrapPath) throws IO\n     }\n \n     private NiFiProperties loadDefault() {\n-        return load(CryptoUtils.getDefaultFilePath());\n+        return load(defaultPropertiesFilePath);\n     }\n \n     static String getDefaultProviderKey() {\n@@ -168,28 +182,15 @@ ProtectedNiFiProperties readProtectedPropertiesFromDisk(File file) {\n \n         Properties rawProperties = new Properties();\n \n-        InputStream inStream = null;\n-        try {\n-            inStream = new BufferedInputStream(new FileInputStream(file));\n-            rawProperties.load(inStream);\n+        try (final InputStream inputStream = new BufferedInputStream(new FileInputStream(file))) {\n+            rawProperties.load(inputStream);\n             logger.info(\"Loaded {} properties from {}\", rawProperties.size(), file.getAbsolutePath());\n \n-            ProtectedNiFiProperties protectedNiFiProperties = new ProtectedNiFiProperties(rawProperties);\n-            return protectedNiFiProperties;\n+            return new ProtectedNiFiProperties(rawProperties);\n         } catch (final Exception ex) {\n             logger.error(\"Cannot load properties file due to \" + ex.getLocalizedMessage());\n             throw new RuntimeException(\"Cannot load properties file due to \"\n                     + ex.getLocalizedMessage(), ex);\n-        } finally {\n-            if (null != inStream) {\n-                try {\n-                    inStream.close();\n-                } catch (final Exception ex) {\n-                    /**\n-                     * do nothing *\n-                     */\n-                }\n-            }\n         }\n     }\n \n@@ -241,9 +242,58 @@ public NiFiProperties load(String path) {\n      */\n     public NiFiProperties get() {\n         if (instance == null) {\n-            instance = loadDefault();\n+            instance = getDefaultProperties();\n         }\n \n         return instance;\n     }\n+\n+    private NiFiProperties getDefaultProperties() {\n+        NiFiProperties defaultProperties = loadDefault();\n+        if (isKeyGenerationRequired(defaultProperties)) {\n+            if (defaultProperties.isClustered()) {\n+                logger.error(\"Clustered Configuration Found: Shared Sensitive Properties Key [{}] required for cluster nodes\", NiFiProperties.SENSITIVE_PROPS_KEY);\n+                throw new SensitivePropertyProtectionException(PROPERTIES_KEY_MESSAGE);\n+            }\n+\n+            final File flowConfiguration = defaultProperties.getFlowConfigurationFile();\n+            if (flowConfiguration.exists()) {\n+                logger.error(\"Flow Configuration [{}] Found: Migration Required for blank Sensitive Properties Key [{}]\", flowConfiguration, NiFiProperties.SENSITIVE_PROPS_KEY);\n+                throw new SensitivePropertyProtectionException(PROPERTIES_KEY_MESSAGE);\n+            }\n+            setSensitivePropertiesKey();\n+            defaultProperties = loadDefault();\n+        }\n+        return defaultProperties;\n+    }\n+\n+    private void setSensitivePropertiesKey() {\n+        logger.warn(\"Generating Random Sensitive Properties Key [{}]\", NiFiProperties.SENSITIVE_PROPS_KEY);\n+        final SecureRandom secureRandom = new SecureRandom();\n+        final byte[] sensitivePropertiesKeyBinary = new byte[SENSITIVE_PROPERTIES_KEY_LENGTH];\n+        secureRandom.nextBytes(sensitivePropertiesKeyBinary);\n+        final String sensitivePropertiesKey = KEY_ENCODER.encodeToString(sensitivePropertiesKeyBinary);\n+        try {\n+            final File niFiPropertiesFile = new File(defaultPropertiesFilePath);\n+            final Path niFiPropertiesPath = Paths.get(niFiPropertiesFile.toURI());\n+            final List<String> lines = Files.readAllLines(niFiPropertiesPath);\n+            final List<String> updatedLines = lines.stream().map(line -> {\n+                if (line.equals(EMPTY_SENSITIVE_PROPERTIES_KEY)) {\n+                    return line + sensitivePropertiesKey;\n+                } else {\n+                    return line;\n+                }\n+            }).collect(Collectors.toList());\n+            Files.write(niFiPropertiesPath, updatedLines);\n+\n+            logger.info(\"NiFi Properties [{}] updated with Sensitive Properties Key\", niFiPropertiesPath);\n+        } catch (final IOException e) {\n+            throw new UncheckedIOException(\"Failed to set Sensitive Properties Key\", e);\n+        }\n+    }\n+\n+    private static boolean isKeyGenerationRequired(final NiFiProperties properties) {\n+        final String configuredSensitivePropertiesKey = properties.getProperty(NiFiProperties.SENSITIVE_PROPS_KEY);\n+        return (configuredSensitivePropertiesKey == null || configuredSensitivePropertiesKey.length() == 0);\n+    }\n }"
  },
  {
    "sha": "7bc22b6de331529840a1e3eebb02313cd49c0fcd",
    "filename": "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/test/groovy/org/apache/nifi/properties/AESSensitivePropertyProviderTest.groovy",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/nifi/blob/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/test/groovy/org/apache/nifi/properties/AESSensitivePropertyProviderTest.groovy",
    "raw_url": "https://github.com/apache/nifi/raw/9d04b03d61a505683a5d037b16d23eef5fa463c8/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/test/groovy/org/apache/nifi/properties/AESSensitivePropertyProviderTest.groovy",
    "contents_url": "https://api.github.com/repos/apache/nifi/contents/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/src/test/groovy/org/apache/nifi/properties/AESSensitivePropertyProviderTest.groovy?ref=9d04b03d61a505683a5d037b16d23eef5fa463c8",
    "patch": "@@ -447,7 +447,7 @@ class AESSensitivePropertyProviderTest extends GroovyTestCase {\n     @Test\n     void testShouldEncryptArbitraryValues() {\n         // Arrange\n-        def values = [\"thisIsABadPassword\", \"thisIsABadSensitiveKeyPassword\", \"thisIsABadKeystorePassword\", \"thisIsABadKeyPassword\", \"thisIsABadTruststorePassword\", \"This is an encrypted banner message\", \"nififtw!\"]\n+        def values = [\"thisIsABadPassword\", \"thisIsABadSensitiveKeyPassword\", \"thisIsABadKeystorePassword\", \"thisIsABadKeyPassword\", \"thisIsABadTruststorePassword\", \"This is an encrypted banner message\"]\n \n         String key = \"2C576A9585DB862F5ECBEE5B4FFFCCA1\" //getKeyOfSize(128)\n         // key = \"0\" * 64"
  }
]
