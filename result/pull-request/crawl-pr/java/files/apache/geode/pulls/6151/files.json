[
  {
    "sha": "c3bf584dc334b2fe9d1e8aa91a94ffe8f078d4ed",
    "filename": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/BackwardCompatibilityHigherVersionClientDUnitTest.java",
    "status": "modified",
    "additions": 9,
    "deletions": 3,
    "changes": 12,
    "blob_url": "https://github.com/apache/geode/blob/abc0e4cc18e77f337c3c52644801c8910eb468f9/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/BackwardCompatibilityHigherVersionClientDUnitTest.java",
    "raw_url": "https://github.com/apache/geode/raw/abc0e4cc18e77f337c3c52644801c8910eb468f9/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/BackwardCompatibilityHigherVersionClientDUnitTest.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/BackwardCompatibilityHigherVersionClientDUnitTest.java?ref=abc0e4cc18e77f337c3c52644801c8910eb468f9",
    "patch": "@@ -18,6 +18,7 @@\n import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPort;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n@@ -34,6 +35,7 @@\n import org.apache.geode.cache.RegionAttributes;\n import org.apache.geode.cache.Scope;\n import org.apache.geode.cache.client.PoolManager;\n+import org.apache.geode.cache.client.ServerRefusedConnectionException;\n import org.apache.geode.cache.client.internal.ClientSideHandshakeImpl;\n import org.apache.geode.cache.client.internal.ConnectionFactoryImpl;\n import org.apache.geode.cache.client.internal.PoolImpl;\n@@ -156,13 +158,17 @@ public static void closeCache() {\n    */\n   @Test\n   public void testHigherVersionedClient() {\n-    Integer port1 = ((Integer) server1\n+    Integer port1 = (server1\n         .invoke(() -> BackwardCompatibilityHigherVersionClientDUnitTest.createServerCache()));\n \n     client1.invoke(\n         () -> BackwardCompatibilityHigherVersionClientDUnitTest.setHandshakeVersionForTesting());\n-    client1.invoke(() -> BackwardCompatibilityHigherVersionClientDUnitTest\n-        .createClientCache(NetworkUtils.getServerHostName(server1.getHost()), port1));\n+\n+    assertThatThrownBy(() -> client1.invoke(() -> BackwardCompatibilityHigherVersionClientDUnitTest\n+        .createClientCache(NetworkUtils.getServerHostName(server1.getHost()), port1)))\n+            .getCause().isInstanceOf(ServerRefusedConnectionException.class)\n+            .hasMessageContaining(\"refused connection: Peer or client version with ordinal\");\n+\n     client1.invoke(\n         () -> BackwardCompatibilityHigherVersionClientDUnitTest.verifyConnectionToServerFailed());\n   }"
  },
  {
    "sha": "e2f8569ff99ad0bcf81c2b016901c60cd46ab0b3",
    "filename": "geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/QueueManagerJUnitTest.java",
    "status": "modified",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/apache/geode/blob/abc0e4cc18e77f337c3c52644801c8910eb468f9/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/QueueManagerJUnitTest.java",
    "raw_url": "https://github.com/apache/geode/raw/abc0e4cc18e77f337c3c52644801c8910eb468f9/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/QueueManagerJUnitTest.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/QueueManagerJUnitTest.java?ref=abc0e4cc18e77f337c3c52644801c8910eb468f9",
    "patch": "@@ -22,7 +22,11 @@\n import static org.apache.geode.test.dunit.IgnoredException.addIgnoredException;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n \n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -47,9 +51,11 @@\n \n import org.apache.geode.CancelCriterion;\n import org.apache.geode.cache.NoSubscriptionServersAvailableException;\n+import org.apache.geode.cache.client.ServerRefusedConnectionException;\n import org.apache.geode.cache.client.SocketFactory;\n import org.apache.geode.cache.client.SubscriptionNotEnabledException;\n import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.distributed.DistributedMember;\n import org.apache.geode.distributed.DistributedSystem;\n import org.apache.geode.distributed.internal.ServerLocation;\n import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n@@ -247,6 +253,28 @@ public void testWaitForPrimary() {\n     assertPortEquals(2, manager.getAllConnections().getPrimary());\n   }\n \n+  @Test\n+  public void testThrowsServerRefusedConnectionException() {\n+    String serverRefusedConnectionExceptionMessage =\n+        \"Peer or client version with ordinal x not supported. Highest known version is x.x.x.\";\n+    // Spy the factory so that the createClientToServerConnection method can be mocked\n+    DummyFactory factorySpy = spy(factory);\n+    manager = new QueueManagerImpl(pool, endpoints, source, factorySpy, 2, 20, logger,\n+        ClientProxyMembershipID.getNewProxyMembership(ds));\n+    // Cause a ServerRefusedConnectionException to be thrown from createClientToServerConnection\n+    ServerRefusedConnectionException e =\n+        new ServerRefusedConnectionException(mock(DistributedMember.class),\n+            serverRefusedConnectionExceptionMessage);\n+    ServerLocation sl = new ServerLocation(\"localhost\", 1);\n+    when(factorySpy.createClientToServerConnection(sl, true)).thenThrow(e);\n+    // Add a server connection\n+    factory.addConnection(0, 0, 1);\n+    // Attempt to start the manager\n+    assertThatThrownBy(() -> manager.start(background))\n+        .isInstanceOf(ServerRefusedConnectionException.class)\n+        .hasMessageContaining(serverRefusedConnectionExceptionMessage);\n+  }\n+\n   private static void assertPortEquals(int expected, Connection actual) {\n     assertThat(actual.getServer().getPort()).isEqualTo(expected);\n   }"
  },
  {
    "sha": "22e762c7daa60ce0ef15a5c3c14f6d07073f618a",
    "filename": "geode-core/src/main/java/org/apache/geode/cache/client/internal/QueueManagerImpl.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/geode/blob/abc0e4cc18e77f337c3c52644801c8910eb468f9/geode-core/src/main/java/org/apache/geode/cache/client/internal/QueueManagerImpl.java",
    "raw_url": "https://github.com/apache/geode/raw/abc0e4cc18e77f337c3c52644801c8910eb468f9/geode-core/src/main/java/org/apache/geode/cache/client/internal/QueueManagerImpl.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/main/java/org/apache/geode/cache/client/internal/QueueManagerImpl.java?ref=abc0e4cc18e77f337c3c52644801c8910eb468f9",
    "patch": "@@ -42,6 +42,7 @@\n import org.apache.geode.cache.InterestResultPolicy;\n import org.apache.geode.cache.NoSubscriptionServersAvailableException;\n import org.apache.geode.cache.client.ServerConnectivityException;\n+import org.apache.geode.cache.client.ServerRefusedConnectionException;\n import org.apache.geode.cache.client.internal.PoolImpl.PoolTask;\n import org.apache.geode.cache.client.internal.RegisterInterestTracker.RegionInterestEntry;\n import org.apache.geode.cache.client.internal.ServerDenyList.DenyListListener;\n@@ -451,7 +452,8 @@ private void initializeConnections() {\n       Connection connection = null;\n       try {\n         connection = factory.createClientToServerConnection(server, true);\n-      } catch (GemFireSecurityException | GemFireConfigException e) {\n+      } catch (GemFireSecurityException | GemFireConfigException\n+          | ServerRefusedConnectionException e) {\n         throw e;\n       } catch (Exception e) {\n         if (isDebugEnabled) {"
  }
]
