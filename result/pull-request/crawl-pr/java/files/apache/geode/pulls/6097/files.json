[
  {
    "sha": "e02a86ab9971ccca427a6f5ce507d36366fed925",
    "filename": "geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/INOperatorJUnitTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/INOperatorJUnitTest.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/INOperatorJUnitTest.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/INOperatorJUnitTest.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -225,11 +225,11 @@ public void testUNDEFINED() throws Exception {\n \n     q = CacheUtils.getQueryService().newQuery(\" UNDEFINED IN SET(UNDEFINED)\");\n     result = q.execute();\n-    assertThat(result).isEqualTo(QueryService.UNDEFINED);\n+    assertThat(result).isEqualTo(TRUE);\n \n     q = CacheUtils.getQueryService().newQuery(\" UNDEFINED IN SET(UNDEFINED,UNDEFINED)\");\n     result = q.execute();\n-    assertThat(result).isEqualTo(QueryService.UNDEFINED);\n+    assertThat(result).isEqualTo(TRUE);\n   }\n \n   @Test"
  },
  {
    "sha": "2c66b358d9509e84e1ba78134b3b455f5b83bb92",
    "filename": "geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexOperatorJUnitTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexOperatorJUnitTest.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexOperatorJUnitTest.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/integrationTest/java/org/apache/geode/cache/query/functional/IndexOperatorJUnitTest.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -145,7 +145,7 @@ public void testWithNULL() throws Exception {\n     map.put(\"0\", new Integer(11));\n     map.put(\"1\", new Integer(12));\n     Object result = runQuery(map, null);\n-    if (result != null)\n+    if (result != QueryService.UNDEFINED)\n       fail();\n   }\n \n@@ -171,7 +171,7 @@ public void testWithUNDEFINED() throws Exception {\n     map.put(\"0\", new Integer(11));\n     map.put(\"1\", new Integer(12));\n     Object result = runQuery(map, QueryService.UNDEFINED);\n-    if (result != null)\n+    if (result != QueryService.UNDEFINED)\n       fail();\n   }\n "
  },
  {
    "sha": "5af6ff8d4a5bc0d4f97dffef82d20fa86afafb28",
    "filename": "geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java",
    "status": "modified",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -16,13 +16,15 @@\n \n import static org.apache.geode.cache.Region.SEPARATOR;\n import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n@@ -45,6 +47,7 @@\n import org.apache.geode.cache.query.internal.ExecutionContext;\n import org.apache.geode.internal.cache.persistence.query.CloseableIterator;\n import org.apache.geode.test.junit.categories.OQLIndexTest;\n+import org.apache.geode.util.internal.UncheckedUtils;\n \n @Category({OQLIndexTest.class})\n public class CompactRangeIndexJUnitTest {\n@@ -442,6 +445,48 @@ public void doTestHook(final SPOTS spot, final DefaultQuery _ignored,\n     }\n   }\n \n+  /**\n+   * Tests adding entries to compact range index where there are undefined and null values\n+   * for the key\n+   */\n+  @Test\n+  public void testNullAndUndefinedValuesForMapKeyInCompactRangeIndex() throws Exception {\n+    index = utils.createIndex(\"indexName\", \"positions['SUN']\", SEPARATOR + \"exampleRegion\");\n+    Region<Object, Object> region = utils.getCache().getRegion(\"exampleRegion\");\n+\n+    // create objects\n+    Portfolio p1 = new Portfolio(1);\n+    p1.positions = new HashMap<>();\n+    p1.positions.put(\"SUN\", \"yes\");\n+    region.put(\"KEY-\" + 1, p1);\n+\n+    // null value for positions['SUN']\n+    Portfolio p2 = new Portfolio(2);\n+    p2.positions = new HashMap<>();\n+    p2.positions.put(\"ERIC\", 2);\n+    region.put(\"KEY-\" + 2, p2);\n+\n+    // Undefined value for positions['SUN']\n+    Portfolio p3 = new Portfolio(3);\n+    p3.positions = null;\n+    region.put(\"KEY-\" + 3, p3);\n+\n+    // null value for positions['SUN']\n+    Portfolio p4 = new Portfolio(4);\n+    p4.positions = new HashMap<>();\n+    p4.positions.put(\"SUN\", null);\n+    region.put(\"KEY-\" + 4, p4);\n+\n+    // execute query and check result size\n+    QueryService qs = utils.getCache().getQueryService();\n+    SelectResults<Object> results = UncheckedUtils.uncheckedCast(qs\n+        .newQuery(\n+            \"Select * from \" + SEPARATOR + \"exampleRegion r where r.positions['SUN'] = null\")\n+        .execute());\n+    assertThat(results.size()).isEqualTo(1);\n+    assertThat(results.contains(p4)).isTrue();\n+  }\n+\n   private void putValues(int num) {\n     Region region = utils.getRegion(\"exampleRegion\");\n     for (int i = 1; i <= num; i++) {"
  },
  {
    "sha": "a3e5254f55dbaa9a9c424ea1c75d0db23fc564ee",
    "filename": "geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexStatisticsJUnitTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexStatisticsJUnitTest.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexStatisticsJUnitTest.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/IndexStatisticsJUnitTest.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -370,7 +370,7 @@ public void testStatsForCompactMapRangeIndex() throws Exception {\n \n     assertEquals(0, keyIndexStats.getReadLockCount());\n \n-    assertEquals(100, keyIndexStats.getTotalUses());\n+    assertEquals(0, keyIndexStats.getTotalUses());\n \n     for (int i = 0; i < 50; i++) {\n       region.invalidate(Integer.toString(i));"
  },
  {
    "sha": "525a737e7b520e9f991ce1e52fe6cc65d90a5451",
    "filename": "geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java",
    "status": "modified",
    "additions": 153,
    "deletions": 0,
    "changes": 153,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/MapRangeIndexMaintenanceJUnitTest.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -15,9 +15,11 @@\n package org.apache.geode.cache.query.internal.index;\n \n import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n \n@@ -40,6 +42,7 @@\n import org.apache.geode.cache.query.internal.IndexTrackingQueryObserver;\n import org.apache.geode.cache.query.internal.QueryObserverHolder;\n import org.apache.geode.test.junit.categories.OQLIndexTest;\n+import org.apache.geode.util.internal.UncheckedUtils;\n \n @Category({OQLIndexTest.class})\n public class MapRangeIndexMaintenanceJUnitTest {\n@@ -341,6 +344,156 @@ public void testNullMapValuesInIndexOnLocalRegionForCompactMap() throws Exceptio\n     assertEquals(1, result.size());\n   }\n \n+  @Test\n+  public void testQueriesForValueInMapFieldWithoutIndex() throws Exception {\n+    region =\n+        CacheUtils.getCache().createRegionFactory(RegionShortcut.REPLICATE).create(\"portfolio\");\n+    qs = CacheUtils.getQueryService();\n+    testQueriesForValueInMapField(region, qs);\n+  }\n+\n+  @Test\n+  public void testQueriesForValueInMapFieldWithMapIndexWithOneKey() throws Exception {\n+    region =\n+        CacheUtils.getCache().createRegionFactory(RegionShortcut.REPLICATE).create(\"portfolio\");\n+    qs = CacheUtils.getQueryService();\n+\n+    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions['SUN']\", SEPARATOR + \"portfolio \");\n+    assertThat(keyIndex1).isInstanceOf(CompactRangeIndex.class);\n+    testQueriesForValueInMapField(region, qs);\n+\n+    long keys = ((CompactRangeIndex) keyIndex1).internalIndexStats.getNumberOfKeys();\n+    long mapIndexKeys =\n+        ((CompactRangeIndex) keyIndex1).internalIndexStats.getNumberOfMapIndexKeys();\n+    long values =\n+        ((CompactRangeIndex) keyIndex1).internalIndexStats.getNumberOfValues();\n+    assertThat(keys).isEqualTo(4);\n+    assertThat(mapIndexKeys).isEqualTo(0);\n+    assertThat(values).isEqualTo(7);\n+  }\n+\n+  @Test\n+  public void testQueriesForValueInMapFieldWithMapIndexWithSeveralKeys() throws Exception {\n+    region =\n+        CacheUtils.getCache().createRegionFactory(RegionShortcut.REPLICATE).create(\"portfolio\");\n+    qs = CacheUtils.getQueryService();\n+\n+    keyIndex1 =\n+        qs.createIndex(INDEX_NAME, \"positions['SUN', 'ERICSSON']\", SEPARATOR + \"portfolio \");\n+    assertThat(keyIndex1).isInstanceOf(CompactMapRangeIndex.class);\n+    testQueriesForValueInMapField(region, qs);\n+\n+    long keys = ((CompactMapRangeIndex) keyIndex1).internalIndexStats.getNumberOfKeys();\n+    long mapIndexKeys =\n+        ((CompactMapRangeIndex) keyIndex1).internalIndexStats.getNumberOfMapIndexKeys();\n+    long values =\n+        ((CompactMapRangeIndex) keyIndex1).internalIndexStats.getNumberOfValues();\n+    assertThat(keys).isEqualTo(3);\n+    assertThat(mapIndexKeys).isEqualTo(1);\n+    assertThat(values).isEqualTo(3);\n+  }\n+\n+  @Test\n+  public void testQueriesForValueInMapFieldWithMapIndexWithStar() throws Exception {\n+    region =\n+        CacheUtils.getCache().createRegionFactory(RegionShortcut.REPLICATE).create(\"portfolio\");\n+    qs = CacheUtils.getQueryService();\n+\n+    keyIndex1 = qs.createIndex(INDEX_NAME, \"positions[*]\", SEPARATOR + \"portfolio \");\n+    assertThat(keyIndex1).isInstanceOf(CompactMapRangeIndex.class);\n+    testQueriesForValueInMapField(region, qs);\n+\n+    long keys = ((CompactMapRangeIndex) keyIndex1).internalIndexStats.getNumberOfKeys();\n+    long mapIndexKeys =\n+        ((CompactMapRangeIndex) keyIndex1).internalIndexStats.getNumberOfMapIndexKeys();\n+    long values =\n+        ((CompactMapRangeIndex) keyIndex1).internalIndexStats.getNumberOfValues();\n+    assertThat(keys).isEqualTo(5);\n+    assertThat(mapIndexKeys).isEqualTo(4);\n+    assertThat(values).isEqualTo(5);\n+  }\n+\n+  public void testQueriesForValueInMapField(Region<Object, Object> region, QueryService qs)\n+      throws Exception {\n+    // Empty map\n+    Portfolio p = new Portfolio(1, 1);\n+    p.positions = new HashMap<>();\n+    region.put(1, p);\n+\n+    // Map is null\n+    Portfolio p2 = new Portfolio(2, 2);\n+    p2.positions = null;\n+    region.put(2, p2);\n+\n+    // Map with null value for \"SUN\" key\n+    Portfolio p3 = new Portfolio(3, 3);\n+    p3.positions = new HashMap<>();\n+    p3.positions.put(\"IBM\", \"something\");\n+    p3.positions.put(\"SUN\", null);\n+    region.put(3, p3);\n+\n+    // Map with not null value for \"SUN\" key\n+    Portfolio p4 = new Portfolio(4, 4);\n+    p4.positions = new HashMap<>();\n+    p4.positions.put(\"SUN\", \"nothing\");\n+    region.put(4, p4);\n+\n+    // Map with null key\n+    Portfolio p5 = new Portfolio(5, 5);\n+    p5.positions = new HashMap<>();\n+    p5.positions.put(\"SUN\", \"more\");\n+    // The next one causes trouble with gfsh as json cannot show maps with null keys\n+    p5.positions.put(null, \"empty\");\n+    region.put(5, p5);\n+\n+    // One more with map without the \"SUN\" key\n+    Portfolio p6 = new Portfolio(6, 6);\n+    p6.positions = new HashMap<>();\n+    p6.positions.put(\"ERIC\", \"hey\");\n+    region.put(6, p6);\n+\n+    // One more with null map\n+    Portfolio p7 = new Portfolio(7, 7);\n+    p7.positions = null;\n+    region.put(7, p7);\n+\n+    String query;\n+    query = \"select * from \" + SEPARATOR + \"portfolio p where p.positions['SUN'] = null\";\n+    SelectResults<Object> result = UncheckedUtils.uncheckedCast(qs\n+        .newQuery(query)\n+        .execute());\n+    assertThat(result.size()).isEqualTo(1);\n+    assertThat(result.contains(p3)).isTrue();\n+\n+    query = \"select * from \" + SEPARATOR + \"portfolio p where p.positions['SUN'] != null\";\n+    result = UncheckedUtils.uncheckedCast(qs\n+        .newQuery(query)\n+        .execute());\n+    assertThat(result.size()).isEqualTo(6);\n+    assertThat(result.containsAll(Arrays.asList(p, p2, p4, p5, p6, p7))).isTrue();\n+\n+    query = \"select * from \" + SEPARATOR + \"portfolio p where p.positions['SUN'] = 'nothing'\";\n+    result = UncheckedUtils.uncheckedCast(qs\n+        .newQuery(query)\n+        .execute());\n+    assertThat(result.size()).isEqualTo(1);\n+    assertThat(result.contains(p4)).isTrue();\n+\n+    query = \"select * from \" + SEPARATOR + \"portfolio p where p.positions['SUN'] != 'nothing'\";\n+    result = UncheckedUtils.uncheckedCast(qs\n+        .newQuery(query)\n+        .execute());\n+    assertThat(result.size()).isEqualTo(6);\n+    assertThat(result.containsAll(Arrays.asList(p, p2, p3, p5, p6, p7))).isTrue();\n+\n+    query = \"select * from \" + SEPARATOR + \"portfolio p\";\n+    result = UncheckedUtils.uncheckedCast(qs\n+        .newQuery(query)\n+        .execute());\n+    assertThat(result.size()).isEqualTo(7);\n+    assertThat(result.containsAll(Arrays.asList(p, p2, p3, p4, p5, p6, p7))).isTrue();\n+  }\n+\n   @Test\n   public void testNullMapValuesInIndexOnLocalRegionForMap() throws Exception {\n     IndexManager.TEST_RANGEINDEX_ONLY = true;"
  },
  {
    "sha": "4d8904e92cd7be6ca640ce264a27f3f89214854e",
    "filename": "geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRIndexStatisticsJUnitTest.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -274,7 +274,7 @@ public void testStatsForCompactMapRangeIndex() throws Exception {\n     }\n \n     // Both RangeIndex should be used\n-    assertEquals(100 /* Execution time */, keyIndexStats.getTotalUses());\n+    assertEquals(0, keyIndexStats.getTotalUses());\n \n     for (int i = 0; i < 50; i++) {\n       region.invalidate(Integer.toString(i));\n@@ -585,8 +585,7 @@ public void testStatsForCompactMapRangeIndexBeforeRegionCreation() throws Except\n       query.execute();\n     }\n \n-    // Both RangeIndex should be used\n-    assertEquals((100 /* Execution time */), keyIndexStats.getTotalUses());\n+    assertEquals((0 /* Execution time */), keyIndexStats.getTotalUses());\n \n     for (int i = 0; i < 50; i++) {\n       region.invalidate(Integer.toString(i));"
  },
  {
    "sha": "862d3e7ff8f38be89f511d172fb92eac3de9b1d4",
    "filename": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java",
    "status": "modified",
    "additions": 17,
    "deletions": 1,
    "changes": 18,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -22,16 +22,20 @@\n import org.apache.geode.cache.Region;\n import org.apache.geode.cache.query.AmbiguousNameException;\n import org.apache.geode.cache.query.FunctionDomainException;\n+import org.apache.geode.cache.query.Index;\n import org.apache.geode.cache.query.IndexType;\n import org.apache.geode.cache.query.NameResolutionException;\n import org.apache.geode.cache.query.QueryInvocationTargetException;\n import org.apache.geode.cache.query.QueryService;\n import org.apache.geode.cache.query.SelectResults;\n import org.apache.geode.cache.query.Struct;\n import org.apache.geode.cache.query.TypeMismatchException;\n+import org.apache.geode.cache.query.internal.index.AbstractIndex;\n+import org.apache.geode.cache.query.internal.index.CompactMapRangeIndex;\n import org.apache.geode.cache.query.internal.index.IndexData;\n import org.apache.geode.cache.query.internal.index.IndexProtocol;\n import org.apache.geode.cache.query.internal.index.IndexUtils;\n+import org.apache.geode.cache.query.internal.index.PartitionedIndex;\n import org.apache.geode.cache.query.internal.parse.OQLLexerTokenTypes;\n import org.apache.geode.cache.query.internal.types.StructTypeImpl;\n import org.apache.geode.cache.query.internal.types.TypeUtils;\n@@ -642,7 +646,7 @@ public static String getSimpleClassName(Class cls) {\n     } else {\n       CompiledValue path = pAndK._path;\n       CompiledValue indexKey = pAndK._key;\n-      IndexData indexData = null;\n+      IndexData indexData;\n       // CompiledLike should not use HashIndex and PrimarKey Index.\n       if (this instanceof CompiledLike) {\n         indexData =\n@@ -651,6 +655,18 @@ public static String getSimpleClassName(Class cls) {\n         indexData = QueryUtils.getAvailableIndexIfAny(path, context, this._operator);\n       }\n \n+      // Do not use indexes when map index and != condition\n+      if (indexData != null && indexData.getIndex() instanceof CompactMapRangeIndex\n+          && this._operator == TOK_NE) {\n+        Index prIndex = ((AbstractIndex) indexData.getIndex()).getPRIndex();\n+        if (prIndex != null) {\n+          ((PartitionedIndex) prIndex).releaseIndexReadLockForRemove();\n+        } else {\n+          ((AbstractIndex) indexData.getIndex()).releaseIndexReadLockForRemove();\n+        }\n+        return null;\n+      }\n+\n       IndexProtocol index = null;\n       if (indexData != null) {\n         index = indexData.getIndex();"
  },
  {
    "sha": "d80864d11c7652633c6f1724c303f1e487004c32",
    "filename": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledConstruction.java",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledConstruction.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledConstruction.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledConstruction.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -23,7 +23,6 @@\n import org.apache.geode.cache.query.FunctionDomainException;\n import org.apache.geode.cache.query.NameResolutionException;\n import org.apache.geode.cache.query.QueryInvocationTargetException;\n-import org.apache.geode.cache.query.QueryService;\n import org.apache.geode.cache.query.TypeMismatchException;\n import org.apache.geode.internal.Assert;\n \n@@ -64,9 +63,6 @@ public Object evaluate(ExecutionContext context) throws FunctionDomainException,\n     for (Iterator itr = this.args.iterator(); itr.hasNext();) {\n       CompiledValue cv = (CompiledValue) itr.next();\n       Object eval = cv.evaluate(context);\n-      if (eval == QueryService.UNDEFINED) {\n-        return QueryService.UNDEFINED;\n-      }\n       newSet.add(eval);\n     }\n     return newSet;"
  },
  {
    "sha": "58c661609d6d73bce94eb3463c90d8a7d321ab2e",
    "filename": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledIndexOperation.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledIndexOperation.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledIndexOperation.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledIndexOperation.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -104,7 +104,10 @@ public Object evaluate(ExecutionContext context) throws TypeMismatchException,\n     }\n \n     if (rcvr instanceof Map) {\n-      return ((Map) rcvr).get(index);\n+      if (((Map<?, ?>) rcvr).containsKey(index)) {\n+        return ((Map) rcvr).get(index);\n+      }\n+      return QueryService.UNDEFINED;\n     }\n     if ((rcvr instanceof List) || rcvr.getClass().isArray() || (rcvr instanceof String)) {\n       if (!(index instanceof Integer)) {"
  },
  {
    "sha": "45cb6ae89049e12aeedd570d0d282537d85b033c",
    "filename": "geode-core/src/main/java/org/apache/geode/cache/query/internal/ResultsCollectionPdxDeserializerWrapper.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/ResultsCollectionPdxDeserializerWrapper.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/ResultsCollectionPdxDeserializerWrapper.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/main/java/org/apache/geode/cache/query/internal/ResultsCollectionPdxDeserializerWrapper.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -218,4 +218,12 @@ public void setElementType(ObjectType elementType) {\n     results.setElementType(elementType);\n   }\n \n+  public String toString() {\n+    String out = \"size: \" + size() + \"\\n\";\n+    Iterator iter = iterator();\n+    while (iter.hasNext()) {\n+      out += iter.next() + \"\\n\";\n+    }\n+    return out;\n+  }\n }"
  },
  {
    "sha": "e3ff53baf78be751fe06cab2551db80c3c0af31f",
    "filename": "geode-core/src/main/java/org/apache/geode/cache/query/internal/index/CompactMapRangeIndex.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/CompactMapRangeIndex.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/CompactMapRangeIndex.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/main/java/org/apache/geode/cache/query/internal/index/CompactMapRangeIndex.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -112,9 +112,9 @@ void saveMapping(Object key, Object value, RegionEntry entry) throws IMQExceptio\n       removeOldMappings(((Map) key).keySet(), entry);\n     } else {\n       for (Object mapKey : mapKeys) {\n-        Object indexKey = ((Map) key).get(mapKey);\n-        if (indexKey != null) {\n+        if (((Map) key).containsKey(mapKey)) {\n           // Do not convert to IndexManager.NULL. We are only interested in specific keys\n+          Object indexKey = ((Map) key).get(mapKey);\n           this.saveIndexAddition(mapKey, indexKey, value, entry);\n         }\n       }"
  },
  {
    "sha": "4e9bf745b8147c38f76eab4dfd73ea09ab4ca167",
    "filename": "geode-core/src/main/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparator.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparator.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/main/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparator.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/main/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparator.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -42,10 +42,11 @@ public int compare(Object obj1, Object obj2) {\n     if (obj1.getClass() != obj2.getClass() && (obj1 instanceof Number && obj2 instanceof Number)) {\n       return super.compare(obj1, obj2);\n     } else if (obj2 instanceof Undefined && !(obj1 instanceof Undefined)) {\n-      // Everthing should be greater than Undefined\n+      // Everything should be greater than Undefined\n       return 1;\n-    } else if (obj2 instanceof NullToken && !(obj1 instanceof NullToken)) {\n-      // Everthing should be greater than Null\n+    } else if (obj2 instanceof NullToken && !(obj1 instanceof Undefined)\n+        && !(obj1 instanceof NullToken)) {\n+      // Everything should be greater than Null except for Undefined\n       return 1;\n     }\n "
  },
  {
    "sha": "62838e5377604bd10e65060db16544c5631465ff",
    "filename": "geode-core/src/test/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparatorTest.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/test/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparatorTest.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-core/src/test/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparatorTest.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-core/src/test/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparatorTest.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.query.internal.types;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Comparator;\n+\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.internal.index.IndexManager;\n+\n+public class ExtendedNumericComparatorTest {\n+  Comparator comparator = TypeUtils.getExtendedNumericComparator();\n+\n+  @Test\n+  public void nullIsGreaterThanUndefined() {\n+    assertThat(comparator.compare(IndexManager.NULL, QueryService.UNDEFINED)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void undefinedIsSmallerThanNull() {\n+    assertThat(comparator.compare(QueryService.UNDEFINED, IndexManager.NULL)).isEqualTo(-1);\n+  }\n+\n+  @Test\n+  public void undefinedIsEqualToUndefined() {\n+    assertThat(comparator.compare(QueryService.UNDEFINED, QueryService.UNDEFINED)).isEqualTo(0);\n+  }\n+\n+  @Test\n+  public void nullIsEqualToNull() {\n+    assertThat(comparator.compare(IndexManager.NULL, IndexManager.NULL)).isEqualTo(0);\n+  }\n+\n+  @Test\n+  public void undefinedIsSmallerThanNumber() {\n+    assertThat(comparator.compare(QueryService.UNDEFINED, 3)).isEqualTo(-1);\n+  }\n+\n+  @Test\n+  public void numberIsGreaterThanUndefined() {\n+    assertThat(comparator.compare(3, QueryService.UNDEFINED)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void nullIsSmallerThanNumber() {\n+    assertThat(comparator.compare(IndexManager.NULL, 3)).isEqualTo(-1);\n+  }\n+\n+  @Test\n+  public void numberIsGreaterThanNull() {\n+    assertThat(comparator.compare(3, IndexManager.NULL)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void numberXisEqualToNumberX() {\n+    assertThat(comparator.compare(6, 6)).isEqualTo(0);\n+  }\n+\n+  @Test\n+  public void numberXPlusOneIsGreaterThanNumberX() {\n+    assertThat(comparator.compare(4, 3)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void numberXIsSmallerThanNumberXPlusOne() {\n+    assertThat(comparator.compare(2, 3)).isEqualTo(-1);\n+  }\n+}"
  },
  {
    "sha": "d35f9e45dac883357f2412682aabf3b1c73e76ef",
    "filename": "geode-junit/src/main/java/org/apache/geode/cache/query/data/Portfolio.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/apache/geode/blob/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-junit/src/main/java/org/apache/geode/cache/query/data/Portfolio.java",
    "raw_url": "https://github.com/apache/geode/raw/412e7886a25192cd375cfa4b88f4a53a4d2f4d5d/geode-junit/src/main/java/org/apache/geode/cache/query/data/Portfolio.java",
    "contents_url": "https://api.github.com/repos/apache/geode/contents/geode-junit/src/main/java/org/apache/geode/cache/query/data/Portfolio.java?ref=412e7886a25192cd375cfa4b88f4a53a4d2f4d5d",
    "patch": "@@ -184,12 +184,14 @@ public int hashCode() {\n   public String toString() {\n     String out =\n         \"Portfolio [ID=\" + ID + \" status=\" + status + \" type=\" + type + \" pkid=\" + pkid + \"\\n \";\n-    Iterator iter = positions.entrySet().iterator();\n-    while (iter.hasNext()) {\n-      Map.Entry entry = (Map.Entry) iter.next();\n-      out += entry.getKey() + \":\" + entry.getValue() + \", \";\n+    if (positions != null) {\n+      Iterator iter = positions.entrySet().iterator();\n+      while (iter.hasNext()) {\n+        Map.Entry entry = (Map.Entry) iter.next();\n+        out += entry.getKey() + \":\" + entry.getValue() + \", \";\n+      }\n+      out += \"\\n P1:\" + position1 + \", P2:\" + position2;\n     }\n-    out += \"\\n P1:\" + position1 + \", P2:\" + position2;\n     return out + \"\\n]\";\n   }\n "
  }
]
