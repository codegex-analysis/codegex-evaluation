[
  {
    "sha": "c17e530c5f07895a6ae746ad6badda74548e262d",
    "filename": "webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/BasicWebConsoleSecurityProvider.java",
    "status": "added",
    "additions": 173,
    "deletions": 0,
    "changes": 173,
    "blob_url": "https://github.com/apache/felix-dev/blob/408a79ee20bbff2daab1d422b6dc9a408f0b0ffb/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/BasicWebConsoleSecurityProvider.java",
    "raw_url": "https://github.com/apache/felix-dev/raw/408a79ee20bbff2daab1d422b6dc9a408f0b0ffb/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/BasicWebConsoleSecurityProvider.java",
    "contents_url": "https://api.github.com/repos/apache/felix-dev/contents/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/BasicWebConsoleSecurityProvider.java?ref=408a79ee20bbff2daab1d422b6dc9a408f0b0ffb",
    "patch": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.felix.webconsole.internal.servlet;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.felix.webconsole.WebConsoleSecurityProvider2;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.service.http.HttpContext;\n+\n+/**\n+ * Basic implementation of WebConsoleSecurityProvider to replace logic that\n+ * was previously in OsgiManagerHttpContext\n+ */\n+public class BasicWebConsoleSecurityProvider implements WebConsoleSecurityProvider2 {\n+\n+    static final String HEADER_WWW_AUTHENTICATE = \"WWW-Authenticate\";\n+\n+    static final String HEADER_AUTHORIZATION = \"Authorization\";\n+\n+    static final String AUTHENTICATION_SCHEME_BASIC = \"Basic\";\n+\n+    private final String username;\n+\n+    private final Password password;\n+\n+    private final String realm;\n+\n+    private BundleContext bundleContext;\n+\n+    public BasicWebConsoleSecurityProvider(BundleContext bundleContext, String username, String password,\n+            String realm) {\n+        super();\n+        this.bundleContext = bundleContext;\n+        this.username = username;\n+        this.password = new Password(password);\n+        this.realm = realm;\n+    }\n+\n+    public Object authenticate(String username, String password) {\n+        if ( this.username.equals( username ) && this.password.matches( password.getBytes() ) )\n+        {\n+            if (bundleContext.getProperty(OsgiManager.FRAMEWORK_PROP_SECURITY_PROVIDERS) == null) {\n+                // Only allow username and password authentication if no mandatory security providers are registered\n+                return true;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * All users authenticated with the repository are granted access for all roles in the Web Console.\n+     */\n+    @Override\n+    public boolean authorize(Object user, String role) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean authenticate(HttpServletRequest request, HttpServletResponse response) {\n+        // Return immediately if the header is missing\n+        String authHeader = request.getHeader( HEADER_AUTHORIZATION );\n+        if ( authHeader != null && authHeader.length() > 0 )\n+        {\n+\n+            // Get the authType (Basic, Digest) and authInfo (user/password)\n+            // from\n+            // the header\n+            authHeader = authHeader.trim();\n+            int blank = authHeader.indexOf( ' ' );\n+            if ( blank > 0 )\n+            {\n+                String authType = authHeader.substring( 0, blank );\n+                String authInfo = authHeader.substring( blank ).trim();\n+\n+                // Check whether authorization type matches\n+                if ( authType.equalsIgnoreCase( AUTHENTICATION_SCHEME_BASIC ) )\n+                {\n+                    try\n+                    {\n+                        byte[][] userPass = base64Decode( authInfo );\n+                        final String username = toString( userPass[0] );\n+\n+                        // authenticate\n+                        if ( authenticate( username, toString(userPass[1]) ) != null )\n+                        {\n+                            // as per the spec, set attributes\n+                            request.setAttribute( HttpContext.AUTHENTICATION_TYPE, HttpServletRequest.BASIC_AUTH );\n+                            request.setAttribute( HttpContext.REMOTE_USER, username );\n+\n+                            // set web console user attribute\n+                            request.setAttribute( WebConsoleSecurityProvider2.USER_ATTRIBUTE, username );\n+\n+                            // succeed\n+                            return true;\n+                        }\n+                    }\n+                    catch ( Exception e )\n+                    {\n+                        // Ignore\n+                    }\n+                }\n+            }\n+        }\n+\n+        // request authentication\n+        try\n+        {\n+            response.setHeader( HEADER_WWW_AUTHENTICATE, AUTHENTICATION_SCHEME_BASIC + \" realm=\\\"\" + this.realm + \"\\\"\" );\n+            response.setStatus( HttpServletResponse.SC_UNAUTHORIZED );\n+            response.setContentLength( 0 );\n+            response.flushBuffer();\n+        }\n+        catch ( IOException ioe )\n+        {\n+            // failed sending the response ... cannot do anything about it\n+        }\n+\n+        // inform HttpService that authentication failed\n+        return false;\n+    }\n+\n+    static byte[][] base64Decode( String srcString )\n+    {\n+        byte[] transformed = Base64.decodeBase64( srcString );\n+        for ( int i = 0; i < transformed.length; i++ )\n+        {\n+            if ( transformed[i] == ':' )\n+            {\n+                byte[] user = new byte[i];\n+                byte[] pass = new byte[transformed.length - i - 1];\n+                System.arraycopy( transformed, 0, user, 0, user.length );\n+                System.arraycopy( transformed, i + 1, pass, 0, pass.length );\n+                return new byte[][]\n+                    { user, pass };\n+            }\n+        }\n+\n+        return new byte[][]\n+            { transformed, new byte[0] };\n+    }\n+\n+    static String toString( final byte[] src )\n+    {\n+        try\n+        {\n+            return new String( src, \"ISO-8859-1\" );\n+        }\n+        catch ( UnsupportedEncodingException uee )\n+        {\n+            return new String( src );\n+        }\n+    }\n+\n+}"
  },
  {
    "sha": "767da5b1ec0eaf289bd0842f182c44e34e4d0a4b",
    "filename": "webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java",
    "status": "modified",
    "additions": 26,
    "deletions": 2,
    "changes": 28,
    "blob_url": "https://github.com/apache/felix-dev/blob/408a79ee20bbff2daab1d422b6dc9a408f0b0ffb/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java",
    "raw_url": "https://github.com/apache/felix-dev/raw/408a79ee20bbff2daab1d422b6dc9a408f0b0ffb/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java",
    "contents_url": "https://api.github.com/repos/apache/felix-dev/contents/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManager.java?ref=408a79ee20bbff2daab1d422b6dc9a408f0b0ffb",
    "patch": "@@ -230,6 +230,9 @@\n \n     private String webManagerRoot;\n \n+    // not-null when the BasicWebConsoleSecurityProvider service is registered\n+    private ServiceRegistration<WebConsoleSecurityProvider> basicSecurityServiceRegistration;\n+\n     // true if the OsgiManager is registered as a Servlet with the HttpService\n     private boolean httpServletRegistered;\n \n@@ -958,11 +961,22 @@ synchronized void registerHttpService() {\n         // register the servlet and resources\n         try\n         {\n-            HttpContext httpContext = new OsgiManagerHttpContext(bundleContext, httpService,\n-                securityProviderTracker, userId, password, realm);\n+            HttpContext httpContext = new OsgiManagerHttpContext(httpService,\n+                securityProviderTracker, realm);\n \n             Dictionary<String, String> servletConfig = toStringConfig(config);\n \n+            if (basicSecurityServiceRegistration == null) {\n+                //register this component\n+                BasicWebConsoleSecurityProvider service = new BasicWebConsoleSecurityProvider(bundleContext,\n+                        userId, password, realm);\n+                Dictionary<String, Object> serviceProperties = new Hashtable<>(); // NOSONAR\n+                // this is a last resort service, so use a low service ranking to prefer all other services over this one\n+                serviceProperties.put(Constants.SERVICE_RANKING, Integer.MIN_VALUE);\n+                basicSecurityServiceRegistration = bundleContext.registerService(WebConsoleSecurityProvider.class,\n+                        service, serviceProperties);\n+            }\n+\n             if (!httpServletRegistered) {\n                 // register this servlet and take note of this\n                 httpService.registerServlet(this.webManagerRoot, this, servletConfig,\n@@ -1002,6 +1016,16 @@ synchronized void unregisterHttpService() {\n         if (httpService == null)\n             return;\n \n+        if (basicSecurityServiceRegistration != null) {\n+            try {\n+                basicSecurityServiceRegistration.unregister();\n+            } catch (Throwable t) {\n+                log(LogService.LOG_WARNING,\n+                        \"unbindHttpService: Failed unregistering basic WebConsoleSecurityProvider\", t);\n+            }\n+            basicSecurityServiceRegistration = null;\n+        }\n+\n         if (httpResourcesRegistered)\n         {\n             try"
  },
  {
    "sha": "f8a4e4917e0c34a4a266e9d365df642019cfc05a",
    "filename": "webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManagerHttpContext.java",
    "status": "modified",
    "additions": 11,
    "deletions": 65,
    "changes": 76,
    "blob_url": "https://github.com/apache/felix-dev/blob/408a79ee20bbff2daab1d422b6dc9a408f0b0ffb/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManagerHttpContext.java",
    "raw_url": "https://github.com/apache/felix-dev/raw/408a79ee20bbff2daab1d422b6dc9a408f0b0ffb/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManagerHttpContext.java",
    "contents_url": "https://api.github.com/repos/apache/felix-dev/contents/webconsole/src/main/java/org/apache/felix/webconsole/internal/servlet/OsgiManagerHttpContext.java?ref=408a79ee20bbff2daab1d422b6dc9a408f0b0ffb",
    "patch": "@@ -17,16 +17,19 @@\n package org.apache.felix.webconsole.internal.servlet;\n \n \n+import static org.apache.felix.webconsole.internal.servlet.BasicWebConsoleSecurityProvider.AUTHENTICATION_SCHEME_BASIC;\n+import static org.apache.felix.webconsole.internal.servlet.BasicWebConsoleSecurityProvider.HEADER_AUTHORIZATION;\n+import static org.apache.felix.webconsole.internal.servlet.BasicWebConsoleSecurityProvider.HEADER_WWW_AUTHENTICATE;\n+\n import java.io.IOException;\n-import java.io.UnsupportedEncodingException;\n import java.net.URL;\n+\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n import org.apache.felix.webconsole.User;\n import org.apache.felix.webconsole.WebConsoleSecurityProvider;\n import org.apache.felix.webconsole.WebConsoleSecurityProvider2;\n-import org.osgi.framework.BundleContext;\n import org.osgi.service.http.HttpContext;\n import org.osgi.service.http.HttpService;\n import org.osgi.util.tracker.ServiceTracker;\n@@ -35,33 +38,17 @@\n final class OsgiManagerHttpContext implements HttpContext\n {\n \n-    private static final String HEADER_WWW_AUTHENTICATE = \"WWW-Authenticate\";\n-\n-    private static final String HEADER_AUTHORIZATION = \"Authorization\";\n-\n-    private static final String AUTHENTICATION_SCHEME_BASIC = \"Basic\";\n-\n-    private final BundleContext bundleContext;\n-\n     private final HttpContext base;\n \n     private final ServiceTracker<WebConsoleSecurityProvider, WebConsoleSecurityProvider> tracker;\n \n-    private final String username;\n-\n-    private final Password password;\n-\n     private final String realm;\n \n-\n-    OsgiManagerHttpContext(final BundleContext bundleContext,\n-        final HttpService httpService, final ServiceTracker<WebConsoleSecurityProvider, WebConsoleSecurityProvider> tracker, final String username,\n-        final String password, final String realm )\n+    OsgiManagerHttpContext(final HttpService httpService,\n+            final ServiceTracker<WebConsoleSecurityProvider, WebConsoleSecurityProvider> tracker,\n+            final String realm)\n     {\n-        this.bundleContext = bundleContext;\n         this.tracker = tracker;\n-        this.username = username;\n-        this.password = new Password(password);\n         this.realm = realm;\n         this.base = httpService.createDefaultHttpContext();\n     }\n@@ -162,8 +149,8 @@ private boolean handleSecurity( final WebConsoleSecurityProvider provider,\n                 {\n                     try\n                     {\n-                        byte[][] userPass = base64Decode( authInfo );\n-                        final String username = toString( userPass[0] );\n+                        byte[][] userPass = BasicWebConsoleSecurityProvider.base64Decode( authInfo );\n+                        final String username = BasicWebConsoleSecurityProvider.toString( userPass[0] );\n \n                         // authenticate\n                         if ( authenticate( provider, username, userPass[1] ) )\n@@ -204,52 +191,11 @@ private boolean handleSecurity( final WebConsoleSecurityProvider provider,\n         return false;\n     }\n \n-    private static byte[][] base64Decode( String srcString )\n-    {\n-        byte[] transformed = Base64.decodeBase64( srcString );\n-        for ( int i = 0; i < transformed.length; i++ )\n-        {\n-            if ( transformed[i] == ':' )\n-            {\n-                byte[] user = new byte[i];\n-                byte[] pass = new byte[transformed.length - i - 1];\n-                System.arraycopy( transformed, 0, user, 0, user.length );\n-                System.arraycopy( transformed, i + 1, pass, 0, pass.length );\n-                return new byte[][]\n-                    { user, pass };\n-            }\n-        }\n-\n-        return new byte[][]\n-            { transformed, new byte[0] };\n-    }\n-\n-\n-    private static String toString( final byte[] src )\n-    {\n-        try\n-        {\n-            return new String( src, \"ISO-8859-1\" );\n-        }\n-        catch ( UnsupportedEncodingException uee )\n-        {\n-            return new String( src );\n-        }\n-    }\n-\n-\n     private boolean authenticate( WebConsoleSecurityProvider provider, String username, byte[] password )\n     {\n         if ( provider != null )\n         {\n-            return provider.authenticate( username, toString( password ) ) != null;\n-        }\n-        if ( this.username.equals( username ) && this.password.matches( password ) )\n-        {\n-            if (bundleContext.getProperty(OsgiManager.FRAMEWORK_PROP_SECURITY_PROVIDERS) == null) {\n-                // Only allow username and password authentication if no mandatory security providers are registered\n-                return true;\n-            }\n+            return provider.authenticate( username, BasicWebConsoleSecurityProvider.toString( password ) ) != null;\n         }\n         return false;\n     }"
  },
  {
    "sha": "70fae7e4cfd96e2d337409f3fc17c0af0cd9f074",
    "filename": "webconsole/src/test/java/org/apache/felix/webconsole/internal/servlet/OsgiManagerHttpContextTest.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/apache/felix-dev/blob/408a79ee20bbff2daab1d422b6dc9a408f0b0ffb/webconsole/src/test/java/org/apache/felix/webconsole/internal/servlet/OsgiManagerHttpContextTest.java",
    "raw_url": "https://github.com/apache/felix-dev/raw/408a79ee20bbff2daab1d422b6dc9a408f0b0ffb/webconsole/src/test/java/org/apache/felix/webconsole/internal/servlet/OsgiManagerHttpContextTest.java",
    "contents_url": "https://api.github.com/repos/apache/felix-dev/contents/webconsole/src/test/java/org/apache/felix/webconsole/internal/servlet/OsgiManagerHttpContextTest.java?ref=408a79ee20bbff2daab1d422b6dc9a408f0b0ffb",
    "patch": "@@ -33,14 +33,15 @@\n     public void testAuthenticate() throws Exception {\n         BundleContext bc = Mockito.mock(BundleContext.class);\n         HttpService svc = Mockito.mock(HttpService.class);\n-        OsgiManagerHttpContext ctx = new OsgiManagerHttpContext(bc, svc, null, \"foo\", \"bar\", \"blah\");\n+        OsgiManagerHttpContext ctx = new OsgiManagerHttpContext(svc, null, \"blah\");\n \n         Method authenticateMethod = OsgiManagerHttpContext.class.getDeclaredMethod(\n                 \"authenticate\", new Class [] {WebConsoleSecurityProvider.class, String.class, byte[].class});\n         authenticateMethod.setAccessible(true);\n \n-        assertEquals(true, authenticateMethod.invoke(ctx, null, \"foo\", \"bar\".getBytes()));\n-        assertEquals(false, authenticateMethod.invoke(ctx, null, \"foo\", \"blah\".getBytes()));\n+        BasicWebConsoleSecurityProvider lastResortSp = new BasicWebConsoleSecurityProvider(bc, \"foo\", \"bar\", \"blah\");\n+        assertEquals(true, authenticateMethod.invoke(ctx, lastResortSp, \"foo\", \"bar\".getBytes()));\n+        assertEquals(false, authenticateMethod.invoke(ctx, lastResortSp, \"foo\", \"blah\".getBytes()));\n \n         WebConsoleSecurityProvider sp = new TestSecurityProvider();\n         assertEquals(true, authenticateMethod.invoke(ctx, sp, \"xxx\", \"yyy\".getBytes()));\n@@ -54,7 +55,7 @@ public void testAuthenticatePwdDisabledWithRequiredSecurityProvider() throws Exc\n         Mockito.when(bc.getProperty(OsgiManager.FRAMEWORK_PROP_SECURITY_PROVIDERS)).thenReturn(\"a\");\n \n         HttpService svc = Mockito.mock(HttpService.class);\n-        OsgiManagerHttpContext ctx = new OsgiManagerHttpContext(bc, svc, null, \"foo\", \"bar\", \"blah\");\n+        OsgiManagerHttpContext ctx = new OsgiManagerHttpContext(svc, null, \"blah\");\n \n         Method authenticateMethod = OsgiManagerHttpContext.class.getDeclaredMethod(\n                 \"authenticate\", new Class [] {WebConsoleSecurityProvider.class, String.class, byte[].class});"
  }
]
