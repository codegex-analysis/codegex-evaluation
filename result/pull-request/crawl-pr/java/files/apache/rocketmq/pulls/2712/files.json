[
  {
    "sha": "a78a4a63ab0eb6495561eaf734f06cffd8a627c7",
    "filename": "tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java",
    "status": "modified",
    "additions": 49,
    "deletions": 3,
    "changes": 52,
    "blob_url": "https://github.com/apache/rocketmq/blob/d444dd2029b0ae7d5e1631c343f1e868b9626cfd/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java",
    "raw_url": "https://github.com/apache/rocketmq/raw/d444dd2029b0ae7d5e1631c343f1e868b9626cfd/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java",
    "contents_url": "https://api.github.com/repos/apache/rocketmq/contents/tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java?ref=d444dd2029b0ae7d5e1631c343f1e868b9626cfd",
    "patch": "@@ -19,14 +19,23 @@\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.Options;\n+import org.apache.rocketmq.common.protocol.route.BrokerData;\n+import org.apache.rocketmq.common.protocol.route.QueueData;\n import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n import org.apache.rocketmq.remoting.RPCHook;\n import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n import org.apache.rocketmq.tools.command.SubCommand;\n import org.apache.rocketmq.tools.command.SubCommandException;\n \n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n public class TopicRouteSubCommand implements SubCommand {\n \n+    private static final String FORMAT = \"%-45s %-32s %-50s %-10s %-11s %-5s%n\";\n+\n     @Override\n     public String commandName() {\n         return \"topicRoute\";\n@@ -43,6 +52,9 @@ public Options buildCommandlineOptions(Options options) {\n         opt.setRequired(true);\n         options.addOption(opt);\n \n+        opt = new Option(\"l\", \"list\", false, \"Use list format to print data\");\n+        opt.setRequired(false);\n+        options.addOption(opt);\n         return options;\n     }\n \n@@ -58,12 +70,46 @@ public void execute(final CommandLine commandLine, final Options options,\n \n             String topic = commandLine.getOptionValue('t').trim();\n             TopicRouteData topicRouteData = defaultMQAdminExt.examineTopicRouteInfo(topic);\n-            String json = topicRouteData.toJson(true);\n-            System.out.printf(\"%s%n\", json);\n+            printData(topicRouteData, commandLine.hasOption('l'));\n         } catch (Exception e) {\n             throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n         } finally {\n             defaultMQAdminExt.shutdown();\n         }\n     }\n-}\n+\n+    private void printData(TopicRouteData topicRouteData, boolean useListFormat) {\n+        if (!useListFormat) {\n+            System.out.printf(\"%s%n\", topicRouteData.toJson(true));\n+            return;\n+        }\n+\n+        int totalReadQueue = 0, totalWriteQueue = 0;\n+        List<QueueData> queueDataList = topicRouteData.getQueueDatas();\n+        Map<String /*brokerName*/, QueueData> map = new HashMap<>();\n+        for (QueueData queueData : queueDataList) {\n+            map.put(queueData.getBrokerName(), queueData);\n+        }\n+        queueDataList.sort(Comparator.comparing(QueueData::getBrokerName));\n+\n+        List<BrokerData> brokerDataList = topicRouteData.getBrokerDatas();\n+        brokerDataList.sort(Comparator.comparing(BrokerData::getBrokerName));\n+\n+        System.out.printf(FORMAT, \"#ClusterName\", \"#BrokerName\", \"#BrokerAddrs\", \"#ReadQueue\", \"#WriteQueue\", \"#Perm\");\n+\n+        for (BrokerData brokerData : brokerDataList) {\n+            String brokerName = brokerData.getBrokerName();\n+            QueueData queueData = map.get(brokerName);\n+            totalReadQueue += queueData.getReadQueueNums();\n+            totalWriteQueue += queueData.getWriteQueueNums();\n+            System.out.printf(FORMAT, brokerData.getCluster(), brokerName, brokerData.getBrokerAddrs(),\n+                    queueData.getReadQueueNums(), queueData.getWriteQueueNums(), queueData.getPerm());\n+        }\n+\n+        for (int i = 0; i < 158; i++) {\n+            System.out.print(\"-\");\n+        }\n+        System.out.printf(\"%n\");\n+        System.out.printf(FORMAT, \"Total:\", map.keySet().size(), \"\", totalReadQueue, totalWriteQueue, \"\");\n+    }\n+}\n\\ No newline at end of file"
  }
]
