[
  {
    "sha": "d1b5f911530b235bb16e461c2c1f0fb6678e9e8f",
    "filename": "src/main/java/org/apache/sling/jcr/repoinit/impl/NodePropertiesVisitor.java",
    "status": "modified",
    "additions": 114,
    "deletions": 21,
    "changes": 135,
    "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/blob/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/main/java/org/apache/sling/jcr/repoinit/impl/NodePropertiesVisitor.java",
    "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/raw/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/main/java/org/apache/sling/jcr/repoinit/impl/NodePropertiesVisitor.java",
    "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-repoinit/contents/src/main/java/org/apache/sling/jcr/repoinit/impl/NodePropertiesVisitor.java?ref=7d2becf22d0b5f78aa60b67d2175d15e6bd7324d",
    "patch": "@@ -16,31 +16,37 @@\n  */\n package org.apache.sling.jcr.repoinit.impl;\n \n-import java.util.List;\n+import java.util.ArrayList;\n import java.util.Calendar;\n+import java.util.List;\n \n-import javax.jcr.Session;\n import javax.jcr.Node;\n import javax.jcr.PathNotFoundException;\n-import javax.jcr.Value;\n import javax.jcr.PropertyType;\n import javax.jcr.RepositoryException;\n+import javax.jcr.Session;\n+import javax.jcr.Value;\n \n+import org.apache.jackrabbit.api.security.user.Authorizable;\n+import org.apache.jackrabbit.util.Text;\n import org.apache.jackrabbit.value.BooleanValue;\n import org.apache.jackrabbit.value.DateValue;\n import org.apache.jackrabbit.value.DoubleValue;\n import org.apache.jackrabbit.value.LongValue;\n import org.apache.jackrabbit.value.StringValue;\n-\n import org.apache.sling.repoinit.parser.operations.PropertyLine;\n import org.apache.sling.repoinit.parser.operations.SetProperties;\n+import org.jetbrains.annotations.NotNull;\n \n /**\n  * OperationVisitor which processes only operations related to setting node\n  * properties. Having several such specialized visitors makes it easy to control\n  * the execution order.\n  */\n class NodePropertiesVisitor extends DoNothingVisitor {\n+    private static final String PATH_AUTHORIZABLE = \":authorizable:\";\n+    private static final char ID_DELIMINATOR = ',';\n+    private static final char SUBTREE_DELIMINATOR = '#';\n \n     /**\n      * Create a visitor using the supplied JCR Session.\n@@ -70,29 +76,116 @@ private static boolean needToSetProperty(Node n, PropertyLine line) throws Repos\n         return(!n.hasProperty(name) || n.getProperty(name) == null);\n     }\n \n+    /**\n+     * True if the property needs to be set - if false, it is not touched. This\n+     * handles the \"default\" repoinit instruction, which means \"do not change the\n+     * property if already set\"\n+     *\n+     * @throws RepositoryException\n+     * @throws PathNotFoundException\n+     */\n+    private static boolean needToSetProperty(Authorizable a, String pRelPath, boolean isDefault) throws RepositoryException {\n+        if (!isDefault) {\n+            // It's a \"set\" line -> overwrite existing value if any\n+            return true;\n+        }\n+\n+        // Otherwise set the property only if not set yet\n+        return(!a.hasProperty(pRelPath) || a.getProperty(pRelPath) == null);\n+    }\n+\n+    /**\n+     * Build relative property path from a subtree path and a property name\n+     * @param subTreePath the subtree path (may be null or empty)\n+     * @param name the property name\n+     * @return the relative path of the property\n+     */\n+    private static String toRelPath(String subTreePath, final String name) {\n+        final String pRelPath;\n+        if (subTreePath == null || subTreePath.isEmpty()) {\n+            pRelPath = name;\n+        } else {\n+            if (subTreePath.startsWith(\"/\")) {\n+                subTreePath = subTreePath.substring(1);\n+            }\n+            pRelPath = String.format(\"%s/%s\", subTreePath, name);\n+        }\n+        return pRelPath;\n+    }\n+\n+    /**\n+     * Lookup the authorizables for the given ids\n+     * @param session the jcr session\n+     * @param ids delimited list of authorizable ids\n+     * @return iterator over the found authorizables\n+     */\n+    @NotNull\n+    private static Iterable<Authorizable> getAuthorizables(@NotNull Session session, @NotNull String ids) throws RepositoryException {\n+        List<Authorizable> authorizables = new ArrayList<>();\n+        for (String id : Text.explode(ids, ID_DELIMINATOR)) {\n+            Authorizable a = UserUtil.getAuthorizable(session, id);\n+            if (a == null) {\n+                throw new PathNotFoundException(\"Cannot resolve path of authorizable with id '\" + id + \"'.\");\n+            }\n+            authorizables.add(a);\n+        }\n+        return authorizables;\n+    }\n+\n     @Override\n     public void visitSetProperties(SetProperties sp) {\n         for (String nodePath : sp.getPaths()) {\n             try {\n-                log.info(\"Setting properties on nodePath '{}'\", nodePath);\n-                Node n = session.getNode(nodePath);\n-                for (PropertyLine pl : sp.getPropertyLines()) {\n-                    final String pName = pl.getPropertyName();\n-                    final PropertyLine.PropertyType pType = pl.getPropertyType();\n-                    final List<Object> values = pl.getPropertyValues();\n-                    final int type = PropertyType.valueFromName(pType.name());\n-                    if (needToSetProperty(n, pl)) {\n-                        if (values.size() > 1) {\n-                            Value[] pValues = convertToValues(values);\n-                            n.setProperty(pName, pValues, type);\n+                if (nodePath.startsWith(PATH_AUTHORIZABLE)) {\n+                    // special case for setting properties on authorizable\n+                    int lastHashIndex = nodePath.lastIndexOf(SUBTREE_DELIMINATOR);\n+                    if (lastHashIndex == -1) {\n+                        throw new IllegalStateException(\"Invalid format of authorizable path: # deliminator expected.\");\n+                    }\n+                    String ids = nodePath.substring(PATH_AUTHORIZABLE.length(), lastHashIndex);\n+                    String subTreePath = nodePath.substring(lastHashIndex + 1);\n+                    for (Authorizable a : getAuthorizables(session, ids)) {\n+                        log.info(\"Setting properties on authorizable '{}'\", a.getID());\n+                        for (PropertyLine pl : sp.getPropertyLines()) {\n+                            final String pName = pl.getPropertyName();\n+                            final String pRelPath = toRelPath(subTreePath, pName);\n+                            final List<Object> values = pl.getPropertyValues();\n+                            if (needToSetProperty(a, pRelPath, pl.isDefault())) {\n+                                if (values.size() > 1) {\n+                                    Value[] pValues = convertToValues(values);\n+                                    a.setProperty(pRelPath, pValues);\n+                                } else {\n+                                    Value pValue = convertToValue(values.get(0));\n+                                    a.setProperty(pRelPath, pValue);\n+                                }\n+                            } else {\n+                                log.info(\n+                                    \"Property '{}' already set on authorizable '{}', existing value will not be overwritten in 'default' mode\",\n+                                    pRelPath, a.getID());\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    log.info(\"Setting properties on nodePath '{}'\", nodePath);\n+                    Node n = session.getNode(nodePath);\n+                    for (PropertyLine pl : sp.getPropertyLines()) {\n+                        final String pName = pl.getPropertyName();\n+                        final PropertyLine.PropertyType pType = pl.getPropertyType();\n+                        final List<Object> values = pl.getPropertyValues();\n+                        final int type = PropertyType.valueFromName(pType.name());\n+                        if (needToSetProperty(n, pl)) {\n+                            if (values.size() > 1) {\n+                                Value[] pValues = convertToValues(values);\n+                                n.setProperty(pName, pValues, type);\n+                            } else {\n+                                Value pValue = convertToValue(values.get(0));\n+                                n.setProperty(pName, pValue, type);\n+                            }\n                         } else {\n-                            Value pValue = convertToValue(values.get(0));\n-                            n.setProperty(pName, pValue, type);\n+                            log.info(\n+                                \"Property '{}' already set on path '{}', existing value will not be overwritten in 'default' mode\",\n+                                pName, nodePath);\n                         }\n-                    } else {\n-                        log.info(\n-                            \"Property '{}' already set on path '{}', existing value will not be overwritten in 'default' mode\",\n-                            pName, nodePath);\n                     }\n                 }\n             } catch (RepositoryException e) {"
  },
  {
    "sha": "2914b5b4c8fe7893b3fe8644a5aad0ff642aab76",
    "filename": "src/test/java/org/apache/sling/jcr/repoinit/SetPropertiesTest.java",
    "status": "modified",
    "additions": 169,
    "deletions": 0,
    "changes": 169,
    "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/blob/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/java/org/apache/sling/jcr/repoinit/SetPropertiesTest.java",
    "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/raw/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/java/org/apache/sling/jcr/repoinit/SetPropertiesTest.java",
    "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-repoinit/contents/src/test/java/org/apache/sling/jcr/repoinit/SetPropertiesTest.java?ref=7d2becf22d0b5f78aa60b67d2175d15e6bd7324d",
    "patch": "@@ -128,4 +128,173 @@ public void setDefaultProperties() throws Exception {\n         U.assertSVPropertyExists(path3, \"one\", vf.createValue(\"oneB\"));\n         U.assertSVPropertyExists(path3, \"two\", vf.createValue(\"twoA\"));\n     }\n+\n+    @Test\n+    public void setUserProperties() throws Exception {\n+        String userid = \"user\" + UUID.randomUUID();\n+\n+        U.assertUser(\"before creating user\", userid, false);\n+        U.parseAndExecute(\"create user \" + userid);\n+        U.assertUser(\"after creating user\", userid, true);\n+\n+        assertAuthorizableProperties(userid);\n+        assertAuthorizablePropertiesAgain(userid);\n+    }\n+\n+    @Test\n+    public void setSubTreeUserProperties() throws Exception {\n+        String userid = \"user\" + UUID.randomUUID();\n+\n+        U.assertUser(\"before creating user\", userid, false);\n+        U.parseAndExecute(\"create user \" + userid);\n+        U.assertUser(\"after creating user\", userid, true);\n+\n+        assertAuthorizableSubTreeProperties(userid);\n+        assertAuthorizableSubTreePropertiesAgain(userid);\n+    }\n+\n+    @Test\n+    public void setGroupProperties() throws Exception {\n+        String groupid = \"group\" + UUID.randomUUID();\n+\n+        U.assertGroup(\"before creating group\", groupid, false);\n+        U.parseAndExecute(\"create group \" + groupid);\n+        U.assertGroup(\"after creating group\", groupid, true);\n+\n+        assertAuthorizableProperties(groupid);\n+        assertAuthorizablePropertiesAgain(groupid);\n+    }\n+\n+    @Test\n+    public void setSubTreeGroupProperties() throws Exception {\n+        String groupid = \"group\" + UUID.randomUUID();\n+\n+        U.assertGroup(\"before creating group\", groupid, false);\n+        U.parseAndExecute(\"create group \" + groupid);\n+        U.assertGroup(\"after creating group\", groupid, true);\n+\n+        assertAuthorizableSubTreeProperties(groupid);\n+        assertAuthorizableSubTreePropertiesAgain(groupid);\n+    }\n+\n+    /**\n+     * Set properties on an authorizable and then verify that the values were set\n+     */\n+    protected void assertAuthorizableProperties(String id) throws RepositoryException, RepoInitParsingException {\n+        final String setPropsA =\n+                \"set properties on authorizable(\" +id + \")\\n\"\n+                        + \"set one to oneA\\n\"\n+                        + \"default two to twoA\\n\"\n+                        + \"set nested/one to oneA\\n\"\n+                        + \"default nested/two to twoA\\n\"\n+                        + \"set three to threeA, \\\"threeB\\\", threeC\\n\"\n+                        + \"default four to fourA, \\\"fourB\\\"\\n\"\n+                        + \"set nested/three to threeA, \\\"threeB\\\", threeC\\n\"\n+                        + \"default nested/four to fourA, \\\"fourB\\\"\\n\"\n+                + \"end\";\n+\n+        U.parseAndExecute(setPropsA);\n+\n+        U.assertAuthorizableSVPropertyExists(id, \"one\", vf.createValue(\"oneA\"));\n+        U.assertAuthorizableSVPropertyExists(id, \"nested/one\", vf.createValue(\"oneA\"));\n+        U.assertAuthorizableSVPropertyExists(id, \"two\", vf.createValue(\"twoA\"));\n+        U.assertAuthorizableSVPropertyExists(id, \"nested/two\", vf.createValue(\"twoA\"));\n+        U.assertAuthorizableMVPropertyExists(id, \"three\", new Value[] {\n+                vf.createValue(\"threeA\"),\n+                vf.createValue(\"threeB\"),\n+                vf.createValue(\"threeC\")\n+                });\n+        U.assertAuthorizableMVPropertyExists(id, \"nested/three\", new Value[] {\n+                vf.createValue(\"threeA\"),\n+                vf.createValue(\"threeB\"),\n+                vf.createValue(\"threeC\")\n+                });\n+        U.assertAuthorizableMVPropertyExists(id, \"four\", new Value[] {\n+                vf.createValue(\"fourA\"),\n+                vf.createValue(\"fourB\")\n+                });\n+        U.assertAuthorizableMVPropertyExists(id, \"nested/four\", new Value[] {\n+                vf.createValue(\"fourA\"),\n+                vf.createValue(\"fourB\")\n+                });\n+    }\n+\n+    /**\n+     * Change values for existing properties on an authorizable and then verify that the values were set\n+     * or not as appropriate\n+     */\n+    protected void assertAuthorizablePropertiesAgain(String id) throws RepositoryException, RepoInitParsingException {\n+        final String setPropsA =\n+                \"set properties on authorizable(\" + id + \")\\n\"\n+                        + \"set one to changed_oneA\\n\"\n+                        + \"default two to changed_twoA\\n\"\n+                        + \"set nested/one to changed_oneA\\n\"\n+                        + \"default nested/two to changed_twoA\\n\"\n+                        + \"set three to changed_threeA, \\\"changed_threeB\\\", changed_threeC\\n\"\n+                        + \"default four to changed_fourA, \\\"changed_fourB\\\"\\n\"\n+                        + \"set nested/three to changed_threeA, \\\"changed_threeB\\\", changed_threeC\\n\"\n+                        + \"default nested/four to changed_fourA, \\\"changed_fourB\\\"\\n\"\n+                + \"end\";\n+\n+        U.parseAndExecute(setPropsA);\n+\n+        U.assertAuthorizableSVPropertyExists(id, \"one\", vf.createValue(\"changed_oneA\"));\n+        U.assertAuthorizableSVPropertyExists(id, \"nested/one\", vf.createValue(\"changed_oneA\"));\n+        U.assertAuthorizableSVPropertyExists(id, \"two\", vf.createValue(\"twoA\"));\n+        U.assertAuthorizableSVPropertyExists(id, \"nested/two\", vf.createValue(\"twoA\"));\n+        U.assertAuthorizableMVPropertyExists(id, \"three\", new Value[] {\n+                vf.createValue(\"changed_threeA\"),\n+                vf.createValue(\"changed_threeB\"),\n+                vf.createValue(\"changed_threeC\")\n+                });\n+        U.assertAuthorizableMVPropertyExists(id, \"nested/three\", new Value[] {\n+                vf.createValue(\"changed_threeA\"),\n+                vf.createValue(\"changed_threeB\"),\n+                vf.createValue(\"changed_threeC\")\n+                });\n+        U.assertAuthorizableMVPropertyExists(id, \"four\", new Value[] {\n+                vf.createValue(\"fourA\"),\n+                vf.createValue(\"fourB\")\n+                });\n+        U.assertAuthorizableMVPropertyExists(id, \"nested/four\", new Value[] {\n+                vf.createValue(\"fourA\"),\n+                vf.createValue(\"fourB\")\n+                });\n+    }\n+\n+    /**\n+     * Set properties on a subtree of an authorizable and then verify that the values were set\n+     */\n+    protected void assertAuthorizableSubTreeProperties(String id)\n+            throws RepositoryException, RepoInitParsingException {\n+        final String setPropsA =\n+                \"set properties on authorizable(\" + id + \")/nested\\n\"\n+                        + \"set one to oneA\\n\"\n+                        + \"default two to twoA\\n\"\n+                + \"end\";\n+\n+        U.parseAndExecute(setPropsA);\n+\n+        U.assertAuthorizableSVPropertyExists(id, \"nested/one\", vf.createValue(\"oneA\"));\n+        U.assertAuthorizableSVPropertyExists(id, \"nested/two\", vf.createValue(\"twoA\"));\n+    }\n+\n+    /**\n+     * Change values for existing properties on a subtree of an authorizable and then verify \n+     * that the values were set or not as appropriate\n+     */\n+    protected void assertAuthorizableSubTreePropertiesAgain(String id)\n+            throws RepositoryException, RepoInitParsingException {\n+        final String setPropsA =\n+                \"set properties on authorizable(\" + id + \")/nested\\n\"\n+                        + \"set one to changed_oneA\\n\"\n+                        + \"default two to changed_twoA\\n\"\n+                + \"end\";\n+\n+        U.parseAndExecute(setPropsA);\n+\n+        U.assertAuthorizableSVPropertyExists(id, \"nested/one\", vf.createValue(\"changed_oneA\"));\n+        U.assertAuthorizableSVPropertyExists(id, \"nested/two\", vf.createValue(\"twoA\"));\n+    }\n+\n }"
  },
  {
    "sha": "306c87717247f4af209a8edd9855a4d61a5a0910",
    "filename": "src/test/java/org/apache/sling/jcr/repoinit/impl/TestUtil.java",
    "status": "modified",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/blob/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/java/org/apache/sling/jcr/repoinit/impl/TestUtil.java",
    "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/raw/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/java/org/apache/sling/jcr/repoinit/impl/TestUtil.java",
    "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-repoinit/contents/src/test/java/org/apache/sling/jcr/repoinit/impl/TestUtil.java?ref=7d2becf22d0b5f78aa60b67d2175d15e6bd7324d",
    "patch": "@@ -197,6 +197,32 @@ public void assertGroupMembership(String userId, String groupId, boolean expectT\n         assertEquals(message +  \" to be member of \" + groupId, expectToBeMember, isMember);\n     }\n \n+    public void assertAuthorizableSVPropertyExists(String id, String propertyName, Value expectedValue) throws RepositoryException {\n+        final Authorizable a = UserUtil.getAuthorizable(adminSession, id);\n+        assertNotNull(\"failed to get authorizable for \" + id, a);\n+        if (!a.hasProperty(propertyName)) {\n+            fail(\"No \" + propertyName + \" property for \" + a.getID());\n+        } else {\n+            Value[] property = a.getProperty(propertyName);\n+            assertNotNull(\"Expected non-null value for property: \" + propertyName, property);\n+            assertEquals(\"Expected one value for property: \" + propertyName, 1, property.length);\n+            Value actualValue = property[0];\n+            assertEquals(\"Value mismatch for property: \" + propertyName, expectedValue, actualValue);\n+        }\n+    }\n+\n+    public void assertAuthorizableMVPropertyExists(String id, String propertyName, Value[] expectedValues) throws RepositoryException {\n+        final Authorizable a = UserUtil.getAuthorizable(adminSession, id);\n+        assertNotNull(\"failed to get authorizable for \" + id, a);\n+        if (!a.hasProperty(propertyName)) {\n+            fail(\"No \" + propertyName + \" property for \" + a.getID());\n+        } else {\n+            Value[] actualValues = a.getProperty(propertyName);\n+            assertNotNull(\"Expected non-null value for property: \" + propertyName, actualValues);\n+            assertArrayEquals(\"Values mismatch for property: \" + propertyName, expectedValues, actualValues);\n+        }\n+    }\n+\n     public void assertSVPropertyExists(String path, String propertyName, Value expectedValue) throws RepositoryException {\n         final Node n = adminSession.getNode(path);\n         if(!n.hasProperty(propertyName)) {"
  },
  {
    "sha": "3bebc3c5f2157661b56c09253a08fe02eff597fb",
    "filename": "src/test/java/org/apache/sling/jcr/repoinit/it/RepoInitTextIT.java",
    "status": "modified",
    "additions": 127,
    "deletions": 2,
    "changes": 129,
    "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/blob/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/java/org/apache/sling/jcr/repoinit/it/RepoInitTextIT.java",
    "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/raw/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/java/org/apache/sling/jcr/repoinit/it/RepoInitTextIT.java",
    "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-repoinit/contents/src/test/java/org/apache/sling/jcr/repoinit/it/RepoInitTextIT.java?ref=7d2becf22d0b5f78aa60b67d2175d15e6bd7324d",
    "patch": "@@ -24,11 +24,14 @@\n import java.io.InputStreamReader;\n import java.util.UUID;\n \n+import javax.inject.Inject;\n import javax.jcr.PropertyType;\n-import javax.jcr.ValueFactory;\n import javax.jcr.Value;\n-import javax.inject.Inject;\n+import javax.jcr.ValueFactory;\n \n+import org.apache.jackrabbit.api.JackrabbitSession;\n+import org.apache.jackrabbit.api.security.user.Authorizable;\n+import org.apache.jackrabbit.api.security.user.UserManager;\n import org.apache.sling.jcr.repoinit.JcrRepoInitOpsProcessor;\n import org.apache.sling.repoinit.parser.RepoInitParser;\n import org.junit.Before;\n@@ -211,4 +214,126 @@ public Void call() throws Exception {\n             }\n         };\n     }\n+\n+    @Test\n+    public void setAuthorizableProperties() throws Exception {\n+        new Retry() {\n+            @Override\n+            public Void call() throws Exception {\n+                if(!(session instanceof JackrabbitSession)) {\n+                    throw new IllegalArgumentException(\"Session is not a JackrabbitSession\");\n+                }\n+                UserManager um = ((JackrabbitSession)session).getUserManager();\n+\n+                Authorizable [] authorizables = new Authorizable[] {\n+                        um.getAuthorizable(ALICE),\n+                        um.getAuthorizable(GROUP_A)\n+                };\n+\n+                for (Authorizable authorizable : authorizables) {\n+                    assertNotNull(\"Expected authorizable to not be null\", authorizable);\n+                    ValueFactory vf = session.getValueFactory();\n+                    Value[] expectedValues1 = new Value[2];\n+                    expectedValues1[0] = vf.createValue(\"/d/e/f/*\");\n+                    expectedValues1[1] = vf.createValue(\"m/n/*\");\n+                    assertTrue(\"Expecting array type property \" + PROP_A + \" to be present \", U.hasProperty(authorizable, PROP_A, expectedValues1));\n+\n+                    Value expectedValue2 = vf.createValue(\"42\", PropertyType.valueFromName(\"Long\"));\n+                    assertTrue(\"Expecting Long type default property \" + PROP_B + \" to be present \", U.hasProperty(authorizable, PROP_B, expectedValue2));\n+\n+                    Value expectedValue3  = vf.createValue(\"true\", PropertyType.valueFromName(\"Boolean\"));\n+                    assertTrue(\"Expecting bool type property \" + PROP_C + \" to be present \", U.hasProperty(authorizable, PROP_C, expectedValue3));\n+\n+                    Value expectedValue4 = vf.createValue(\"2020-03-19T11:39:33.437+05:30\", PropertyType.valueFromName(\"Date\"));\n+                    assertTrue(\"Expecting date type property \" + PROP_D + \" to be present \" , U.hasProperty(authorizable, PROP_D, expectedValue4));\n+\n+                    Value expectedValue5 = vf.createValue(\"test\");\n+                    assertTrue(\"Expecting string type property \" + PROP_E + \" to be present \" , U.hasProperty(authorizable, PROP_E, expectedValue5));\n+\n+                    Value expectedValue6 = vf.createValue(\"hello, you!\");\n+                    assertTrue(\"Expecting quoted string type property \" + PROP_F + \" to be present \" , U.hasProperty(authorizable, PROP_F, expectedValue6));\n+\n+                    Value[] expectedValues7 = new Value[2];\n+                    expectedValues7[0] = vf.createValue(\"test1\");\n+                    expectedValues7[1] = vf.createValue(\"test2\");\n+                    assertTrue(\"Expecting string array type property \" + PROP_G + \" to be present \" , U.hasProperty(authorizable, PROP_G, expectedValues7));\n+\n+                    Value expectedValue8 = vf.createValue(\"Here's a \\\"double quoted string\\\" with suffix\");\n+                    assertTrue(\"Expecting quoted string type property \" + PROP_H + \" to be present \" , U.hasProperty(authorizable, PROP_H, expectedValue8));\n+\n+                    Value[] expectedValues9 = new Value[3];\n+                    expectedValues9[0] = vf.createValue(\"quoted\");\n+                    expectedValues9[1] = vf.createValue(\"non-quoted\");\n+                    expectedValues9[2] = vf.createValue(\"the last \\\" one\");\n+                    assertTrue(\"Expecting string array type property \" + PROP_I + \" to be present \" , U.hasProperty(authorizable, PROP_I, expectedValues9));\n+\n+                    Value nestedExpectedValue = vf.createValue(\"42\", PropertyType.valueFromName(\"Long\"));\n+                    assertTrue(\"Expecting Long type default property nested/\" + PROP_B + \" to be present \", U.hasProperty(authorizable, \"nested/\" +PROP_B, nestedExpectedValue));\n+                }\n+\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void setAuthorizableSubTreeProperties() throws Exception {\n+        new Retry() {\n+            @Override\n+            public Void call() throws Exception {\n+                if(!(session instanceof JackrabbitSession)) {\n+                    throw new IllegalArgumentException(\"Session is not a JackrabbitSession\");\n+                }\n+                UserManager um = ((JackrabbitSession)session).getUserManager();\n+\n+                Authorizable [] authorizables = new Authorizable[] {\n+                        um.getAuthorizable(BOB),\n+                        um.getAuthorizable(GROUP_B)\n+                };\n+\n+                for (Authorizable authorizable : authorizables) {\n+                    assertNotNull(\"Expected authorizable to not be null\", authorizable);\n+                    ValueFactory vf = session.getValueFactory();\n+                    Value[] expectedValues1 = new Value[2];\n+                    expectedValues1[0] = vf.createValue(\"/d/e/f/*\");\n+                    expectedValues1[1] = vf.createValue(\"m/n/*\");\n+                    assertTrue(\"Expecting array type property nested/\" + PROP_A + \" to be present \", U.hasProperty(authorizable, \"nested/\" + PROP_A, expectedValues1));\n+\n+                    Value expectedValue2 = vf.createValue(\"42\", PropertyType.valueFromName(\"Long\"));\n+                    assertTrue(\"Expecting Long type default property nested/\" + PROP_B + \" to be present \", U.hasProperty(authorizable, \"nested/\" + PROP_B, expectedValue2));\n+\n+                    Value expectedValue3  = vf.createValue(\"true\", PropertyType.valueFromName(\"Boolean\"));\n+                    assertTrue(\"Expecting bool type property nested/\" + PROP_C + \" to be present \", U.hasProperty(authorizable, \"nested/\" + PROP_C, expectedValue3));\n+\n+                    Value expectedValue4 = vf.createValue(\"2020-03-19T11:39:33.437+05:30\", PropertyType.valueFromName(\"Date\"));\n+                    assertTrue(\"Expecting date type property nested/\" + PROP_D + \" to be present \" , U.hasProperty(authorizable, \"nested/\" + PROP_D, expectedValue4));\n+\n+                    Value expectedValue5 = vf.createValue(\"test\");\n+                    assertTrue(\"Expecting string type property nested/\" + PROP_E + \" to be present \" , U.hasProperty(authorizable, \"nested/\" + PROP_E, expectedValue5));\n+\n+                    Value expectedValue6 = vf.createValue(\"hello, you!\");\n+                    assertTrue(\"Expecting quoted string type property nested/\" + PROP_F + \" to be present \" , U.hasProperty(authorizable, \"nested/\" + PROP_F, expectedValue6));\n+\n+                    Value[] expectedValues7 = new Value[2];\n+                    expectedValues7[0] = vf.createValue(\"test1\");\n+                    expectedValues7[1] = vf.createValue(\"test2\");\n+                    assertTrue(\"Expecting string array type property nested/\" + PROP_G + \" to be present \" , U.hasProperty(authorizable, \"nested/\" + PROP_G, expectedValues7));\n+\n+                    Value expectedValue8 = vf.createValue(\"Here's a \\\"double quoted string\\\" with suffix\");\n+                    assertTrue(\"Expecting quoted string type property nested/\" + PROP_H + \" to be present \" , U.hasProperty(authorizable, \"nested/\" + PROP_H, expectedValue8));\n+\n+                    Value[] expectedValues9 = new Value[3];\n+                    expectedValues9[0] = vf.createValue(\"quoted\");\n+                    expectedValues9[1] = vf.createValue(\"non-quoted\");\n+                    expectedValues9[2] = vf.createValue(\"the last \\\" one\");\n+                    assertTrue(\"Expecting string array type property nested/\" + PROP_I + \" to be present \" , U.hasProperty(authorizable, \"nested/\" + PROP_I, expectedValues9));\n+\n+                    Value nestedExpectedValue = vf.createValue(\"42\", PropertyType.valueFromName(\"Long\"));\n+                    assertTrue(\"Expecting Long type default property nested/nested/\" + PROP_B + \" to be present \", U.hasProperty(authorizable, \"nested/nested/\" +PROP_B, nestedExpectedValue));\n+                }\n+\n+                return null;\n+            }\n+        };\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "381d2a9202f7af8ec79f8f5e4ad057190d231bf0",
    "filename": "src/test/java/org/apache/sling/jcr/repoinit/it/U.java",
    "status": "modified",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/blob/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/java/org/apache/sling/jcr/repoinit/it/U.java",
    "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/raw/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/java/org/apache/sling/jcr/repoinit/it/U.java",
    "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-repoinit/contents/src/test/java/org/apache/sling/jcr/repoinit/it/U.java?ref=7d2becf22d0b5f78aa60b67d2175d15e6bd7324d",
    "patch": "@@ -135,4 +135,29 @@ public static boolean hasProperty(Session session, String nodePath, String prope\n         }\n         return false;\n     }\n+\n+    public static boolean hasProperty(Authorizable a, String propertyName, Value propertyValue) throws  RepositoryException {\n+        if (a != null) {\n+            boolean isPropertyPresent = a.hasProperty(propertyName);\n+            if (isPropertyPresent) {\n+                Value[] values = a.getProperty(propertyName);\n+                if (values != null && values.length == 1) {\n+                    Value v = values[0];\n+                    return v.equals(propertyValue);\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static boolean hasProperty(Authorizable a, String propertyName, Value[] propertyValues) throws  RepositoryException {\n+        if (a != null) {\n+            boolean isPropertyPresent = a.hasProperty(propertyName);\n+            if (isPropertyPresent) {\n+                Value[] v = a.getProperty(propertyName);\n+                return Arrays.equals(v, propertyValues);\n+            }\n+        }\n+        return false;\n+    }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "2dbbe241902059e30e7639670645954bab235b42",
    "filename": "src/test/resources/repoinit.txt",
    "status": "modified",
    "additions": 31,
    "deletions": 1,
    "changes": 32,
    "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/blob/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/resources/repoinit.txt",
    "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-repoinit/raw/7d2becf22d0b5f78aa60b67d2175d15e6bd7324d/src/test/resources/repoinit.txt",
    "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-repoinit/contents/src/test/resources/repoinit.txt?ref=7d2becf22d0b5f78aa60b67d2175d15e6bd7324d",
    "patch": "@@ -81,4 +81,34 @@ set properties on /proptest/X/Y\n   default someInteger{Long} to 65\n   set quotedA to \"Here's a \\\"double quoted string\\\" with suffix\"\n   set quotedMix to \"quoted\", non-quoted, \"the last \\\" one\"\n-end\n\\ No newline at end of file\n+end\n+\n+# SLING-10192 set properties on user or group profile\n+set properties on authorizable(alice),authorizable(grpA)\n+  set pathArray to /d/e/f/*, m/n/*\n+  default someInteger{Long} to 42\n+  set someFlag{Boolean} to true\n+  default someDate{Date} to \"2020-03-19T11:39:33.437+05:30\"\n+  set customSingleValueStringProp to test\n+  set customSingleValueQuotedStringProp to \"hello, you!\"\n+  set stringArray to test1, test2\n+  default someInteger{Long} to 65\n+  set quotedA to \"Here's a \\\"double quoted string\\\" with suffix\"\n+  set quotedMix to \"quoted\", non-quoted, \"the last \\\" one\"\n+  set nested/someInteger{Long} to 42\n+end\n+\n+# SLING-10192 set properties on a subtree of the user or group profile\n+set properties on authorizable(bob)/nested,authorizable(grpB)/nested\n+  set pathArray to /d/e/f/*, m/n/*\n+  default someInteger{Long} to 42\n+  set someFlag{Boolean} to true\n+  default someDate{Date} to \"2020-03-19T11:39:33.437+05:30\"\n+  set customSingleValueStringProp to test\n+  set customSingleValueQuotedStringProp to \"hello, you!\"\n+  set stringArray to test1, test2\n+  default someInteger{Long} to 65\n+  set quotedA to \"Here's a \\\"double quoted string\\\" with suffix\"\n+  set quotedMix to \"quoted\", non-quoted, \"the last \\\" one\"\n+  set nested/someInteger{Long} to 42\n+end"
  }
]
