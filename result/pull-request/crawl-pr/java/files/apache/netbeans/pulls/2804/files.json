[
  {
    "sha": "ea5967fa208c2e3aa57ec5809ad7b576eb823c30",
    "filename": "java/java.hints/src/org/netbeans/modules/java/hints/jdk/ConvertToPatternInstanceOf.java",
    "status": "modified",
    "additions": 10,
    "deletions": 4,
    "changes": 14,
    "blob_url": "https://github.com/apache/netbeans/blob/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.hints/src/org/netbeans/modules/java/hints/jdk/ConvertToPatternInstanceOf.java",
    "raw_url": "https://github.com/apache/netbeans/raw/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.hints/src/org/netbeans/modules/java/hints/jdk/ConvertToPatternInstanceOf.java",
    "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.hints/src/org/netbeans/modules/java/hints/jdk/ConvertToPatternInstanceOf.java?ref=5631bf2c0a2c0930cf76e86dbb8566d937b11227",
    "patch": "@@ -43,6 +43,7 @@\n import org.netbeans.api.java.source.TreePathHandle;\n import org.netbeans.api.java.source.WorkingCopy;\n import org.netbeans.modules.java.hints.errors.Utilities;\n+import org.netbeans.modules.java.source.TreeShims;\n import org.netbeans.spi.editor.hints.ErrorDescription;\n import org.netbeans.spi.editor.hints.Fix;\n import org.netbeans.spi.java.hints.ErrorDescriptionFactory;\n@@ -89,7 +90,9 @@ public Void visitTypeCast(TypeCastTree node, Void p) {\n                 TypeMirror typeITM = ctx.getInfo().getTrees().getTypeMirror(typeI);\n                 List<String> varNameCandidates = org.netbeans.modules.editor.java.Utilities.varNamesSuggestions(typeITM, ElementKind.LOCAL_VARIABLE, EnumSet.noneOf(Modifier.class), null, null, ctx.getInfo().getTypes(), ctx.getInfo().getElements(), Collections.emptyList(), CodeStyle.getDefault(ctx.getInfo().getFileObject()));\n                 String varName = Utilities.makeNameUnique(ctx.getInfo(), ctx.getInfo().getTrees().getScope(ctx.getPath()), varNameCandidates.get(0));\n-                Fix fix = new FixImpl(ctx.getInfo(), ctx.getPath(), varName, false, convertPath).toEditorFix();\n+                IfTree it = (IfTree) ctx.getPath().getLeaf();\n+                BlockTree bt = (BlockTree) it.getThenStatement();\n+                Fix fix = new FixImpl(ctx.getInfo(), ctx.getPath(), varName, false, convertPath, TreeShims.isJDKVersionSupportEnablePreview() ? null : (VariableTree) bt.getStatements().get(0)).toEditorFix();\n \n                 return ErrorDescriptionFactory.forName(ctx, ctx.getPath(), Bundle.ERR_ConvertToPatternInstanceOf(), fix);\n             }\n@@ -107,7 +110,7 @@ public Void visitTypeCast(TypeCastTree node, Void p) {\n         IfTree it = (IfTree) ctx.getPath().getLeaf();\n         BlockTree bt = (BlockTree) it.getThenStatement();\n         VariableTree var = (VariableTree) bt.getStatements().get(0);\n-        Fix fix = new FixImpl(ctx.getInfo(), ctx.getPath(), var.getName().toString(), true, Collections.emptySet()).toEditorFix();\n+        Fix fix = new FixImpl(ctx.getInfo(), ctx.getPath(), var.getName().toString(), true, Collections.emptySet(), TreeShims.isJDKVersionSupportEnablePreview() ? null : var).toEditorFix();\n         \n         return ErrorDescriptionFactory.forName(ctx, ctx.getPath(), Bundle.ERR_ConvertToPatternInstanceOf(), fix);\n     }\n@@ -117,12 +120,14 @@ public Void visitTypeCast(TypeCastTree node, Void p) {\n         private final String varName;\n         private final boolean removeFirst;\n         private final Set<TreePathHandle> replaceOccurrences;\n+        private final VariableTree vt;\n \n-        public FixImpl(CompilationInfo info, TreePath main, String varName, boolean removeFirst, Set<TreePath> replaceOccurrences) {\n+        public FixImpl(CompilationInfo info, TreePath main, String varName, boolean removeFirst, Set<TreePath> replaceOccurrences, VariableTree vt) {\n             super(info, main);\n             this.varName = varName;\n             this.removeFirst = removeFirst;\n             this.replaceOccurrences = replaceOccurrences.stream().map(tp -> TreePathHandle.create(tp, info)).collect(Collectors.toSet());\n+            this.vt = vt;\n         }\n \n \n@@ -140,7 +145,8 @@ protected void performRewrite(JavaFix.TransformationContext ctx) {\n             StatementTree bt = it.getThenStatement();\n //            wc.rewrite(iot.getType(), wc.getTreeMaker().BindingPattern(var.getName(), iot.getType()));\n //            wc.rewrite(bt, wc.getTreeMaker().removeBlockStatement(bt, 0));\n-            InstanceOfTree cond = wc.getTreeMaker().InstanceOf(iot.getExpression(), wc.getTreeMaker().BindingPattern(varName, iot.getType()));\n+            InstanceOfTree cond = wc.getTreeMaker().InstanceOf(iot.getExpression(), TreeShims.isJDKVersionSupportEnablePreview() ? \n+                     wc.getTreeMaker().BindingPattern(varName, iot.getType()) : wc.getTreeMaker().BindingPattern(vt));\n             StatementTree thenBlock = removeFirst ? wc.getTreeMaker().removeBlockStatement((BlockTree) bt, 0) : bt;\n             wc.rewrite(it, wc.getTreeMaker().If(wc.getTreeMaker().Parenthesized(cond), thenBlock, it.getElseStatement()));\n             replaceOccurrences.stream().map(tph -> tph.resolve(wc)).forEach(tp -> {"
  },
  {
    "sha": "0474b193a998f66ddd161c9b8b55397539cc11c2",
    "filename": "java/java.source.base/src/org/netbeans/api/java/source/TreeMaker.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/apache/netbeans/blob/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.source.base/src/org/netbeans/api/java/source/TreeMaker.java",
    "raw_url": "https://github.com/apache/netbeans/raw/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.source.base/src/org/netbeans/api/java/source/TreeMaker.java",
    "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.source.base/src/org/netbeans/api/java/source/TreeMaker.java?ref=5631bf2c0a2c0930cf76e86dbb8566d937b11227",
    "patch": "@@ -1224,6 +1224,10 @@ public Tree BindingPattern(CharSequence name,\n                                Tree type) {\n         return delegate.BindingPattern(name, type);\n     }\n+    \n+    public Tree BindingPattern(VariableTree vt) {\n+        return delegate.BindingPattern(vt);\n+    }\n \n     /**\n      * Creates a new VariableTree from a VariableElement."
  },
  {
    "sha": "4131643f81c5a6b3b58b52e98a707b706dee47a5",
    "filename": "java/java.source.base/src/org/netbeans/modules/java/source/TreeShims.java",
    "status": "modified",
    "additions": 18,
    "deletions": 9,
    "changes": 27,
    "blob_url": "https://github.com/apache/netbeans/blob/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.source.base/src/org/netbeans/modules/java/source/TreeShims.java",
    "raw_url": "https://github.com/apache/netbeans/raw/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.source.base/src/org/netbeans/modules/java/source/TreeShims.java",
    "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.source.base/src/org/netbeans/modules/java/source/TreeShims.java?ref=5631bf2c0a2c0930cf76e86dbb8566d937b11227",
    "patch": "@@ -26,6 +26,7 @@\n import com.sun.source.tree.InstanceOfTree;\n import com.sun.source.tree.SwitchTree;\n import com.sun.source.tree.Tree;\n+import com.sun.source.tree.VariableTree;\n import com.sun.tools.javac.tree.DocTreeMaker;\n import com.sun.tools.javac.tree.JCTree;\n import com.sun.tools.javac.tree.JCTree.JCClassDecl;\n@@ -38,9 +39,8 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import javax.lang.model.SourceVersion;\n import javax.lang.model.element.Name;\n-import org.openide.util.Exceptions;\n-\n import javax.lang.model.element.Element;\n import javax.lang.model.element.ElementKind;\n import javax.lang.model.element.TypeElement;\n@@ -52,7 +52,8 @@\n     public static final String YIELD = \"YIELD\"; //NOI18N\n     public static final String BINDING_VARIABLE = \"BINDING_VARIABLE\"; //NOI18N\n     public static final String RECORD = \"RECORD\"; //NOI18N\n-\n+    public static final int PATTERN_MATCHING_INSTANCEOF_PREVIEW_JDK_VERSION = 15; //NOI18N\n+    \n     public static List<? extends ExpressionTree> getExpressions(CaseTree node) {\n         try {\n             Method getExpressions = CaseTree.class.getDeclaredMethod(\"getExpressions\");\n@@ -156,9 +157,11 @@ public static ExpressionTree getValue(BreakTree node) {\n \n     public static Name getBinding(Tree node) {\n         try {\n-            Class bpt = Class.forName(\"com.sun.source.tree.BindingPatternTree\");\n-            Method getBinding = bpt.getDeclaredMethod(\"getBinding\");\n-            return (Name) getBinding.invoke(node);\n+            Class bpt = Class.forName(\"com.sun.source.tree.BindingPatternTree\"); //NOI18N\n+            return isJDKVersionSupportEnablePreview() \n+                    ? (Name)bpt.getDeclaredMethod(\"getBinding\").invoke(node)  //NOI18N\n+                    : ((VariableTree)bpt.getDeclaredMethod(\"getVariable\").invoke(node)).getName(); //NOI18N\n+\n         } catch (NoSuchMethodException | ClassNotFoundException ex) {\n             return null;\n         } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n@@ -238,9 +241,11 @@ public static Tree getBindingPatternType(Tree node) {\n             return null;\n         }\n         try {\n-            Class bindingPatternTreeClass = Class.forName(\"com.sun.source.tree.BindingPatternTree\"); //NOI18N\n-            Method getType = bindingPatternTreeClass.getDeclaredMethod(\"getType\");  //NOI18N\n-            return (Tree) getType.invoke(node);\n+            Class bpt = Class.forName(\"com.sun.source.tree.BindingPatternTree\"); //NOI18N\n+            return isJDKVersionSupportEnablePreview()\n+                    ? (Tree) bpt.getDeclaredMethod(\"getType\").invoke(node) //NOI18N\n+                    : ((VariableTree) bpt.getDeclaredMethod(\"getVariable\").invoke(node)).getType(); //NOI18N\n+\n         } catch (NoSuchMethodException ex) {\n             return null;\n         } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | ClassNotFoundException ex) {\n@@ -306,4 +311,8 @@ public static Tree getTarget(Tree node) {\n             throw TreeShims.<RuntimeException>throwAny(ex);\n         }\n     }\n+    \n+    public static boolean isJDKVersionSupportEnablePreview() {\n+        return Integer.valueOf(SourceVersion.latest().name().split(\"_\")[1]).compareTo(PATTERN_MATCHING_INSTANCEOF_PREVIEW_JDK_VERSION) <= 0;\n+    }\n }"
  },
  {
    "sha": "32758b5d33d19f80dc9ebaec0131e99ec3865033",
    "filename": "java/java.source.base/src/org/netbeans/modules/java/source/builder/TreeFactory.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/apache/netbeans/blob/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.source.base/src/org/netbeans/modules/java/source/builder/TreeFactory.java",
    "raw_url": "https://github.com/apache/netbeans/raw/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.source.base/src/org/netbeans/modules/java/source/builder/TreeFactory.java",
    "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.source.base/src/org/netbeans/modules/java/source/builder/TreeFactory.java?ref=5631bf2c0a2c0930cf76e86dbb8566d937b11227",
    "patch": "@@ -921,6 +921,14 @@ public Tree BindingPattern(CharSequence name,\n             throw throwAny(t);\n         }\n     }\n+    \n+    public Tree BindingPattern(VariableTree vt) {\n+        try {\n+            return (Tree) make.getClass().getMethod(\"BindingPattern\",JCVariableDecl.class).invoke(make.at(NOPOS), vt);\n+        } catch (Throwable t) {\n+            throw throwAny(t);\n+        }\n+    }\n \n     public VariableTree Variable(VariableElement variable, ExpressionTree initializer) {\n         return make.at(NOPOS).VarDef((Symbol.VarSymbol)variable, (JCExpression)initializer);"
  },
  {
    "sha": "1470510f934133c4cfc3a52b9c281bb3480f45aa",
    "filename": "java/java.source.base/src/org/netbeans/modules/java/source/pretty/VeryPretty.java",
    "status": "modified",
    "additions": 3,
    "deletions": 6,
    "changes": 9,
    "blob_url": "https://github.com/apache/netbeans/blob/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.source.base/src/org/netbeans/modules/java/source/pretty/VeryPretty.java",
    "raw_url": "https://github.com/apache/netbeans/raw/5631bf2c0a2c0930cf76e86dbb8566d937b11227/java/java.source.base/src/org/netbeans/modules/java/source/pretty/VeryPretty.java",
    "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.source.base/src/org/netbeans/modules/java/source/pretty/VeryPretty.java?ref=5631bf2c0a2c0930cf76e86dbb8566d937b11227",
    "patch": "@@ -2077,14 +2077,11 @@ public void visitErroneous(JCErroneous tree) {\n     public void visitTree(JCTree tree) {\n         if (\"BINDING_PATTERN\".equals(tree.getKind().name())) {\n             try {\n-                Class bindingPatternClass = Class.forName(\"com.sun.source.tree.BindingPatternTree\");\n-                Method getBinding = bindingPatternClass.getMethod(\"getBinding\");\n-                Method getType = bindingPatternClass.getMethod(\"getType\");\n-                print((JCTree) getType.invoke(tree));\n+                print((JCTree) TreeShims.getBindingPatternType(tree));\n                 print(' ');\n-                print((Name) getBinding.invoke(tree));\n+                print((Name) TreeShims.getBinding(tree));\n                 return ;\n-            } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | ClassNotFoundException ex) {\n+            } catch (RuntimeException ex) {\n                 Exceptions.printStackTrace(ex);\n             }\n         }"
  }
]
