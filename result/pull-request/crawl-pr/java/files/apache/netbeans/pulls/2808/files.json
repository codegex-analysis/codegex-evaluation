[
  {
    "sha": "b945f7e142266c9200265ae0429f735a93e8b4a4",
    "filename": "java/java.source.base/src/org/netbeans/api/java/source/GeneratorUtilities.java",
    "status": "modified",
    "additions": 15,
    "deletions": 1,
    "changes": 16,
    "blob_url": "https://github.com/apache/netbeans/blob/e8d85afc5db8793016bde8980be5eeaac9e8845d/java/java.source.base/src/org/netbeans/api/java/source/GeneratorUtilities.java",
    "raw_url": "https://github.com/apache/netbeans/raw/e8d85afc5db8793016bde8980be5eeaac9e8845d/java/java.source.base/src/org/netbeans/api/java/source/GeneratorUtilities.java",
    "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.source.base/src/org/netbeans/api/java/source/GeneratorUtilities.java?ref=e8d85afc5db8793016bde8980be5eeaac9e8845d",
    "patch": "@@ -121,6 +121,7 @@\n import org.netbeans.api.lexer.TokenSequence;\n import org.netbeans.api.queries.FileEncodingQuery;\n import org.netbeans.api.scripting.Scripting;\n+import org.netbeans.modules.java.source.GeneratorUtilitiesAccessor;\n import org.netbeans.modules.java.source.TreeShims;\n import org.netbeans.modules.java.source.builder.CommentHandlerService;\n import org.netbeans.modules.java.source.builder.CommentSetImpl;\n@@ -1068,6 +1069,10 @@ private boolean isStarImport(ImportTree imp) {\n      * @since 0.86\n      */\n     public CompilationUnitTree addImports(CompilationUnitTree cut, Set<? extends Element> toImport) {\n+        return addImports(cut, cut.getImports(), toImport);\n+    }\n+\n+    private CompilationUnitTree addImports(CompilationUnitTree cut, List<? extends ImportTree> cutImports, Set<? extends Element> toImport) {\n         assert cut != null && toImport != null && toImport.size() > 0;\n \n         ArrayList<Element> elementsToImport = new ArrayList<Element>(toImport.size());\n@@ -1175,7 +1180,7 @@ public CompilationUnitTree addImports(CompilationUnitTree cut, Set<? extends Ele\n                 }\n             }\n         }\n-        List<ImportTree> imports = new ArrayList<ImportTree>(cut.getImports());\n+        List<ImportTree> imports = new ArrayList<ImportTree>(cutImports);\n         for (ImportTree imp : imports) {\n             Element e = getImportedElement(cut, imp);\n             if (!elementsToImport.contains(e)) {\n@@ -2247,4 +2252,13 @@ public Boolean scan(Tree node, Boolean p) {\n         }.scan(tree, false);\n         return b != null ? b : false;\n     }\n+\n+    static {\n+        GeneratorUtilitiesAccessor.setInstance(new GeneratorUtilitiesAccessor() {\n+            @Override\n+            public CompilationUnitTree addImports(GeneratorUtilities gu, CompilationUnitTree cut, List<? extends ImportTree> cutImports, Set<? extends Element> toImport) {\n+                return gu.addImports(cut, cutImports, toImport);\n+            }\n+        });\n+    }\n }"
  },
  {
    "sha": "3e96b8d5fda9bf42399bdbda3ee3f88b5d4ae054",
    "filename": "java/java.source.base/src/org/netbeans/modules/java/source/GeneratorUtilitiesAccessor.java",
    "status": "added",
    "additions": 65,
    "deletions": 0,
    "changes": 65,
    "blob_url": "https://github.com/apache/netbeans/blob/e8d85afc5db8793016bde8980be5eeaac9e8845d/java/java.source.base/src/org/netbeans/modules/java/source/GeneratorUtilitiesAccessor.java",
    "raw_url": "https://github.com/apache/netbeans/raw/e8d85afc5db8793016bde8980be5eeaac9e8845d/java/java.source.base/src/org/netbeans/modules/java/source/GeneratorUtilitiesAccessor.java",
    "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.source.base/src/org/netbeans/modules/java/source/GeneratorUtilitiesAccessor.java?ref=e8d85afc5db8793016bde8980be5eeaac9e8845d",
    "patch": "@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.java.source;\n+\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.ImportTree;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Element;\n+import org.netbeans.api.java.source.GeneratorUtilities;\n+\n+public abstract class GeneratorUtilitiesAccessor {\n+\n+    private static volatile GeneratorUtilitiesAccessor INSTANCE;\n+\n+    public static GeneratorUtilitiesAccessor getInstance() {\n+        GeneratorUtilitiesAccessor result = INSTANCE;\n+\n+        if (result == null) {\n+            synchronized (GeneratorUtilitiesAccessor.class) {\n+                if (INSTANCE == null) {\n+                    Class c = GeneratorUtilities.class;\n+                    try {\n+                        Class.forName(c.getName(), true, c.getClassLoader());\n+                    } catch (Exception ex) {\n+                        ex.printStackTrace();\n+                    }\n+\n+                    assert INSTANCE != null;\n+                }\n+\n+                return INSTANCE;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public static void setInstance(GeneratorUtilitiesAccessor instance) {\n+        assert instance != null;\n+        INSTANCE = instance;\n+    }\n+\n+    protected GeneratorUtilitiesAccessor() {\n+    }\n+\n+    public abstract CompilationUnitTree addImports(GeneratorUtilities gu, CompilationUnitTree cut, List<? extends ImportTree> cutImports, Set<? extends Element> toImport);\n+\n+}"
  },
  {
    "sha": "3d6c6fcd8ef266fbfda4398e9ade81ef143ae9de",
    "filename": "java/java.source.base/src/org/netbeans/modules/java/source/transform/ImmutableTreeTranslator.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/apache/netbeans/blob/e8d85afc5db8793016bde8980be5eeaac9e8845d/java/java.source.base/src/org/netbeans/modules/java/source/transform/ImmutableTreeTranslator.java",
    "raw_url": "https://github.com/apache/netbeans/raw/e8d85afc5db8793016bde8980be5eeaac9e8845d/java/java.source.base/src/org/netbeans/modules/java/source/transform/ImmutableTreeTranslator.java",
    "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.source.base/src/org/netbeans/modules/java/source/transform/ImmutableTreeTranslator.java?ref=e8d85afc5db8793016bde8980be5eeaac9e8845d",
    "patch": "@@ -24,6 +24,7 @@\n import com.sun.source.tree.Tree.Kind;\n import com.sun.tools.javac.code.Flags;\n import com.sun.tools.javac.model.JavacElements;\n+import com.sun.tools.javac.tree.JCTree.JCCompilationUnit;\n import com.sun.tools.javac.tree.JCTree.JCLambda;\n import com.sun.tools.javac.tree.JCTree.JCModifiers;\n import com.sun.tools.javac.util.Context;\n@@ -39,6 +40,7 @@\n import org.netbeans.api.java.source.GeneratorUtilities;\n import org.netbeans.api.java.source.TreeMaker;\n import org.netbeans.api.java.source.WorkingCopy;\n+import org.netbeans.modules.java.source.GeneratorUtilitiesAccessor;\n import org.netbeans.modules.java.source.TreeShims;\n import org.netbeans.modules.java.source.builder.ASTService;\n import org.netbeans.modules.java.source.builder.CommentHandlerService;\n@@ -546,7 +548,9 @@ protected final CompilationUnitTree rewriteChildren(CompilationUnitTree tree) {\n         \n         Set<? extends Element> newImports = importAnalysis.getImports();\n         if (copy != null && newImports != null && !newImports.isEmpty()) {\n-            imps = GeneratorUtilities.get(copy).addImports(tree, newImports).getImports();\n+            imps = GeneratorUtilitiesAccessor.getInstance()\n+                                             .addImports(GeneratorUtilities.get(copy), tree, imps, newImports)\n+                                             .getImports();\n         }\n         \n \tif (!annotations.equals(tree.getPackageAnnotations()) || pid!=tree.getPackageName() || !imps.equals(tree.getImports()) ||"
  },
  {
    "sha": "5104e1d638bd4ce8ed7db461fcea56f370ef5c12",
    "filename": "java/java.source.base/test/unit/src/org/netbeans/api/java/source/gen/ImportAnalysis2Test.java",
    "status": "modified",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/apache/netbeans/blob/e8d85afc5db8793016bde8980be5eeaac9e8845d/java/java.source.base/test/unit/src/org/netbeans/api/java/source/gen/ImportAnalysis2Test.java",
    "raw_url": "https://github.com/apache/netbeans/raw/e8d85afc5db8793016bde8980be5eeaac9e8845d/java/java.source.base/test/unit/src/org/netbeans/api/java/source/gen/ImportAnalysis2Test.java",
    "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.source.base/test/unit/src/org/netbeans/api/java/source/gen/ImportAnalysis2Test.java?ref=e8d85afc5db8793016bde8980be5eeaac9e8845d",
    "patch": "@@ -911,6 +911,42 @@ public void run(WorkingCopy workingCopy) throws IOException {\n         assertEquals(golden, res);\n     }\n  \n+    public void testQualIdentAndImportChange() throws Exception {\n+        testFile = new File(getWorkDir(), \"hierbas/del/litoral/Test.java\");\n+        assertTrue(testFile.getParentFile().mkdirs());\n+        TestUtilities.copyStringToFile(testFile,\n+            \"package hierbas.del.litoral;\\n\" +\n+            \"import java.lang.String;\\n\" +\n+            \"public class Test {\\n\" +\n+            \"}\\n\"\n+            );\n+        String golden =\n+            \"package hierbas.del.litoral;\\n\" +\n+            \"import java.lang.CharSequence;\\n\" +\n+            \"import java.util.List;\\n\" +\n+            \"public class Test {\\n\\n\" +\n+            \"    List test;\\n\" +\n+            \"}\\n\";\n+\n+        JavaSource src = getJavaSource(testFile);\n+        Task<WorkingCopy> task = new Task<WorkingCopy>() {\n+\n+            public void run(WorkingCopy workingCopy) throws IOException {\n+                workingCopy.toPhase(Phase.RESOLVED);\n+                TreeMaker make = workingCopy.getTreeMaker();\n+                ImportTree imp = workingCopy.getCompilationUnit().getImports().get(0);\n+                workingCopy.rewrite(imp.getQualifiedIdentifier(), make.MemberSelect(make.MemberSelect(make.Identifier(\"java\"), \"lang\"), \"CharSequence\"));\n+                ClassTree clazz = (ClassTree) workingCopy.getCompilationUnit().getTypeDecls().get(0);\n+                workingCopy.rewrite(clazz, make.addClassMember(clazz, make.Variable(make.Modifiers(EnumSet.noneOf(Modifier.class)), \"test\", make.QualIdent(\"java.util.List\"), null)));\n+            }\n+\n+        };\n+        src.runModificationTask(task).commit();\n+        String res = TestUtilities.copyFileToString(testFile);\n+        //System.err.println(res);\n+        assertEquals(golden, res);\n+    }\n+\n     String getGoldenPckg() {\n         return \"\";\n     }"
  }
]
