[
  {
    "sha": "a04f7a499db59d44a593e394637da661e032d094",
    "filename": "core/src/main/antlr4/org/apache/druid/math/expr/antlr/Expr.g4",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/core/src/main/antlr4/org/apache/druid/math/expr/antlr/Expr.g4",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/core/src/main/antlr4/org/apache/druid/math/expr/antlr/Expr.g4",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/core/src/main/antlr4/org/apache/druid/math/expr/antlr/Expr.g4?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -15,6 +15,8 @@\n \n grammar Expr;\n \n+start : expr EOF ;\n+\n expr : NULL                                                         # null\n      | ('-'|'!') expr                                               # unaryOpExpr\n      |<assoc=right> expr '^' expr                                   # powOpExpr"
  },
  {
    "sha": "9b768ec8b7ed98d4e7211217db78cb0c84999f2f",
    "filename": "docs/configuration/index.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/docs/configuration/index.md",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/docs/configuration/index.md",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/docs/configuration/index.md?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -1680,6 +1680,7 @@ The Druid SQL server is configured through the following properties on the Broke\n |`druid.sql.planner.sqlTimeZone`|Sets the default time zone for the server, which will affect how time functions and timestamp literals behave. Should be a time zone name like \"America/Los_Angeles\" or offset like \"-08:00\".|UTC|\n |`druid.sql.planner.metadataSegmentCacheEnable`|Whether to keep a cache of published segments in broker. If true, broker polls coordinator in background to get segments from metadata store and maintains a local cache. If false, coordinator's REST API will be invoked when broker needs published segments info.|false|\n |`druid.sql.planner.metadataSegmentPollPeriod`|How often to poll coordinator for published segments list if `druid.sql.planner.metadataSegmentCacheEnable` is set to true. Poll period is in milliseconds. |60000|\n+|`druid.sql.planner.useParsedExprCache`|Whether to use a cache for parsed expressions. This cache is created per query and stored on heap memory. Enabling cache can be useful when planning time takes long.|false|\n \n > Previous versions of Druid had properties named `druid.sql.planner.maxQueryCount` and `druid.sql.planner.maxSemiJoinRowsInMemory`.\n > These properties are no longer available. Since Druid 0.18.0, you can use `druid.server.http.maxSubqueryRows` to control the maximum"
  },
  {
    "sha": "9d982b0292be61c6d41572786dae024f490b536d",
    "filename": "docs/querying/sql.md",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/docs/querying/sql.md",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/docs/querying/sql.md",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/docs/querying/sql.md?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -1008,6 +1008,7 @@ Connection context can be specified as JDBC connection properties or as a \"conte\n |`sqlTimeZone`|Sets the time zone for this connection, which will affect how time functions and timestamp literals behave. Should be a time zone name like \"America/Los_Angeles\" or offset like \"-08:00\".|druid.sql.planner.sqlTimeZone on the Broker (default: UTC)|\n |`useApproximateCountDistinct`|Whether to use an approximate cardinality algorithm for `COUNT(DISTINCT foo)`.|druid.sql.planner.useApproximateCountDistinct on the Broker (default: true)|\n |`useApproximateTopN`|Whether to use approximate [TopN queries](topnquery.md) when a SQL query could be expressed as such. If false, exact [GroupBy queries](groupbyquery.md) will be used instead.|druid.sql.planner.useApproximateTopN on the Broker (default: true)|\n+|`useParsedExprCache`|Whether to use a cache for parsed expressions. This cache is created per query and stored on heap memory. Enabling cache can be useful when planning time takes long.|`druid.sql.planner.useParsedExprCache` on the Broker (default: false)|\n \n ## Metadata tables\n "
  },
  {
    "sha": "31ecd7e2caf964a29c9918cf713343b3abcfd3d0",
    "filename": "processing/src/main/java/org/apache/druid/query/JoinDataSource.java",
    "status": "modified",
    "additions": 26,
    "deletions": 1,
    "changes": 27,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/JoinDataSource.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/JoinDataSource.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/JoinDataSource.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -23,10 +23,14 @@\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import org.apache.druid.java.util.common.IAE;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.math.expr.Parser;\n import org.apache.druid.query.filter.DimFilter;\n import org.apache.druid.segment.join.JoinConditionAnalysis;\n import org.apache.druid.segment.join.JoinPrefixUtils;\n@@ -99,6 +103,27 @@ public static JoinDataSource create(\n       @Nullable @JsonProperty(\"leftFilter\") DimFilter leftFilter,\n       @JacksonInject ExprMacroTable macroTable\n   )\n+  {\n+    return create(\n+        left,\n+        right,\n+        rightPrefix,\n+        condition,\n+        joinType,\n+        leftFilter,\n+        Suppliers.memoize(() -> Parser.parse(condition, macroTable))\n+    );\n+  }\n+\n+  public static JoinDataSource create(\n+      DataSource left,\n+      DataSource right,\n+      String rightPrefix,\n+      String condition,\n+      JoinType joinType,\n+      DimFilter leftFilter,\n+      Supplier<Expr> conditionExprSupplier\n+  )\n   {\n     return new JoinDataSource(\n         left,\n@@ -107,7 +132,7 @@ public static JoinDataSource create(\n         JoinConditionAnalysis.forExpression(\n             Preconditions.checkNotNull(condition, \"condition\"),\n             StringUtils.nullToEmptyNonDruidDataString(rightPrefix),\n-            macroTable\n+            conditionExprSupplier\n         ),\n         joinType,\n         leftFilter"
  },
  {
    "sha": "f986d9a5cc5139ea80624158fca8db59689c2d1c",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/DoubleMaxAggregatorFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/DoubleMaxAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/DoubleMaxAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/DoubleMaxAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -22,7 +22,9 @@\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Supplier;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n@@ -48,6 +50,17 @@ public DoubleMaxAggregatorFactory(\n     super(macroTable, name, fieldName, expression);\n   }\n \n+  public DoubleMaxAggregatorFactory(\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier,\n+      ExprMacroTable macroTable\n+  )\n+  {\n+    super(macroTable, name, fieldName, expression, expressionSupplier);\n+  }\n+\n   public DoubleMaxAggregatorFactory(String name, String fieldName)\n   {\n     this(name, fieldName, null, ExprMacroTable.nil());"
  },
  {
    "sha": "412ae8924286d5a200fc12e59e1da62781faf494",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/DoubleMinAggregatorFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/DoubleMinAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/DoubleMinAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/DoubleMinAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -22,7 +22,9 @@\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Supplier;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n@@ -48,6 +50,17 @@ public DoubleMinAggregatorFactory(\n     super(macroTable, name, fieldName, expression);\n   }\n \n+  public DoubleMinAggregatorFactory(\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier,\n+      ExprMacroTable macroTable\n+  )\n+  {\n+    super(macroTable, name, fieldName, expression, expressionSupplier);\n+  }\n+\n   public DoubleMinAggregatorFactory(String name, String fieldName)\n   {\n     this(name, fieldName, null, ExprMacroTable.nil());"
  },
  {
    "sha": "2c26470abd6b4cc190fbe7049d40040f70192219",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/DoubleSumAggregatorFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/DoubleSumAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/DoubleSumAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/DoubleSumAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -22,7 +22,9 @@\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Supplier;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n@@ -48,6 +50,17 @@ public DoubleSumAggregatorFactory(\n     super(macroTable, name, fieldName, expression);\n   }\n \n+  public DoubleSumAggregatorFactory(\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier,\n+      ExprMacroTable macroTable\n+  )\n+  {\n+    super(macroTable, name, fieldName, expression, expressionSupplier);\n+  }\n+\n   public DoubleSumAggregatorFactory(String name, String fieldName)\n   {\n     this(name, fieldName, null, ExprMacroTable.nil());"
  },
  {
    "sha": "34fbb427e867fde7babd89a601f98b6e1d154498",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/FloatMaxAggregatorFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/FloatMaxAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/FloatMaxAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/FloatMaxAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -22,7 +22,9 @@\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Supplier;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n import org.apache.druid.segment.BaseFloatColumnValueSelector;\n import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n@@ -48,6 +50,17 @@ public FloatMaxAggregatorFactory(\n     super(macroTable, name, fieldName, expression);\n   }\n \n+  public FloatMaxAggregatorFactory(\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier,\n+      ExprMacroTable macroTable\n+  )\n+  {\n+    super(macroTable, name, fieldName, expression, expressionSupplier);\n+  }\n+\n   public FloatMaxAggregatorFactory(String name, String fieldName)\n   {\n     this(name, fieldName, null, ExprMacroTable.nil());"
  },
  {
    "sha": "915a0d07bff7db5ba51b32cf383085ba2c38f196",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/FloatMinAggregatorFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/FloatMinAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/FloatMinAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/FloatMinAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -22,7 +22,9 @@\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Supplier;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n import org.apache.druid.segment.BaseFloatColumnValueSelector;\n import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n@@ -48,6 +50,17 @@ public FloatMinAggregatorFactory(\n     super(macroTable, name, fieldName, expression);\n   }\n \n+  public FloatMinAggregatorFactory(\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier,\n+      ExprMacroTable macroTable\n+  )\n+  {\n+    super(macroTable, name, fieldName, expression, expressionSupplier);\n+  }\n+\n   public FloatMinAggregatorFactory(String name, String fieldName)\n   {\n     this(name, fieldName, null, ExprMacroTable.nil());"
  },
  {
    "sha": "5b48004a1324f0cfa25a4c046f2a610213fc6fb6",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/FloatSumAggregatorFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/FloatSumAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/FloatSumAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/FloatSumAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -22,7 +22,9 @@\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Supplier;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n import org.apache.druid.segment.BaseFloatColumnValueSelector;\n import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n@@ -48,6 +50,17 @@ public FloatSumAggregatorFactory(\n     super(macroTable, name, fieldName, expression);\n   }\n \n+  public FloatSumAggregatorFactory(\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier,\n+      ExprMacroTable macroTable\n+  )\n+  {\n+    super(macroTable, name, fieldName, expression, expressionSupplier);\n+  }\n+\n   public FloatSumAggregatorFactory(String name, String fieldName)\n   {\n     this(name, fieldName, null, ExprMacroTable.nil());"
  },
  {
    "sha": "704a4eecbb251c1e2bbd019634006c84b782a346",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/LongMaxAggregatorFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/LongMaxAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/LongMaxAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/LongMaxAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -22,7 +22,9 @@\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Supplier;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n@@ -48,6 +50,17 @@ public LongMaxAggregatorFactory(\n     super(macroTable, name, fieldName, expression);\n   }\n \n+  public LongMaxAggregatorFactory(\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier,\n+      ExprMacroTable macroTable\n+  )\n+  {\n+    super(macroTable, name, fieldName, expression, expressionSupplier);\n+  }\n+\n   public LongMaxAggregatorFactory(String name, String fieldName)\n   {\n     this(name, fieldName, null, ExprMacroTable.nil());"
  },
  {
    "sha": "ed36e1a84e9ad1b0800eb5ea16372cede313edc1",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/LongMinAggregatorFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/LongMinAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/LongMinAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/LongMinAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -22,7 +22,9 @@\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Supplier;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n@@ -48,6 +50,17 @@ public LongMinAggregatorFactory(\n     super(macroTable, name, fieldName, expression);\n   }\n \n+  public LongMinAggregatorFactory(\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier,\n+      ExprMacroTable macroTable\n+  )\n+  {\n+    super(macroTable, name, fieldName, expression, expressionSupplier);\n+  }\n+\n   public LongMinAggregatorFactory(String name, String fieldName)\n   {\n     this(name, fieldName, null, ExprMacroTable.nil());"
  },
  {
    "sha": "85a8518d140a5e0ec56bc669983538f065822f15",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/LongSumAggregatorFactory.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/LongSumAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/LongSumAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/LongSumAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -22,7 +22,9 @@\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Supplier;\n import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n@@ -48,6 +50,17 @@ public LongSumAggregatorFactory(\n     super(macroTable, name, fieldName, expression);\n   }\n \n+  public LongSumAggregatorFactory(\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier,\n+      ExprMacroTable macroTable\n+  )\n+  {\n+    super(macroTable, name, fieldName, expression, expressionSupplier);\n+  }\n+\n   public LongSumAggregatorFactory(String name, String fieldName)\n   {\n     this(name, fieldName, null, ExprMacroTable.nil());"
  },
  {
    "sha": "28a5c91a8de05c8454eb35e169b3096153c5b1c0",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SimpleDoubleAggregatorFactory.java",
    "status": "modified",
    "additions": 18,
    "deletions": 1,
    "changes": 19,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/SimpleDoubleAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/SimpleDoubleAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SimpleDoubleAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -66,13 +66,30 @@ public SimpleDoubleAggregatorFactory(\n       @Nullable final String fieldName,\n       @Nullable String expression\n   )\n+  {\n+    this(\n+        macroTable,\n+        name,\n+        fieldName,\n+        expression,\n+        Suppliers.memoize(() -> expression == null ? null : Parser.parse(expression, macroTable))\n+    );\n+  }\n+\n+  public SimpleDoubleAggregatorFactory(\n+      ExprMacroTable macroTable,\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier\n+  )\n   {\n     this.macroTable = macroTable;\n     this.name = name;\n     this.fieldName = fieldName;\n     this.expression = expression;\n     this.storeDoubleAsFloat = ColumnHolder.storeDoubleAsFloat();\n-    this.fieldExpression = Suppliers.memoize(() -> expression == null ? null : Parser.parse(expression, macroTable));\n+    this.fieldExpression = expressionSupplier;\n     Preconditions.checkNotNull(name, \"Must have a valid, non-null aggregator name\");\n     Preconditions.checkArgument(\n         fieldName == null ^ expression == null,"
  },
  {
    "sha": "5bc0cb12fc9b2066dc9e3d953070599be666f8e4",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SimpleFloatAggregatorFactory.java",
    "status": "modified",
    "additions": 18,
    "deletions": 1,
    "changes": 19,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/SimpleFloatAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/SimpleFloatAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SimpleFloatAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -58,12 +58,29 @@ public SimpleFloatAggregatorFactory(\n       @Nullable final String fieldName,\n       @Nullable String expression\n   )\n+  {\n+    this(\n+        macroTable,\n+        name,\n+        fieldName,\n+        expression,\n+        Suppliers.memoize(() -> expression == null ? null : Parser.parse(expression, macroTable))\n+    );\n+  }\n+\n+  public SimpleFloatAggregatorFactory(\n+      ExprMacroTable macroTable,\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier\n+  )\n   {\n     this.macroTable = macroTable;\n     this.name = name;\n     this.fieldName = fieldName;\n     this.expression = expression;\n-    this.fieldExpression = Suppliers.memoize(() -> expression == null ? null : Parser.parse(expression, macroTable));\n+    this.fieldExpression = expressionSupplier;\n     Preconditions.checkNotNull(name, \"Must have a valid, non-null aggregator name\");\n     Preconditions.checkArgument(\n         fieldName == null ^ expression == null,"
  },
  {
    "sha": "16b92f6c4bc0f7876210bd3182a8ec42489cfe9d",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SimpleLongAggregatorFactory.java",
    "status": "modified",
    "additions": 18,
    "deletions": 1,
    "changes": 19,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/SimpleLongAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/SimpleLongAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SimpleLongAggregatorFactory.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -64,12 +64,29 @@ public SimpleLongAggregatorFactory(\n       @Nullable final String fieldName,\n       @Nullable String expression\n   )\n+  {\n+    this(\n+        macroTable,\n+        name,\n+        fieldName,\n+        expression,\n+        Suppliers.memoize(() -> expression == null ? null : Parser.parse(expression, macroTable))\n+    );\n+  }\n+\n+  public SimpleLongAggregatorFactory(\n+      ExprMacroTable macroTable,\n+      String name,\n+      String fieldName,\n+      @Nullable String expression,\n+      Supplier<Expr> expressionSupplier\n+  )\n   {\n     this.macroTable = macroTable;\n     this.name = name;\n     this.fieldName = fieldName;\n     this.expression = expression;\n-    this.fieldExpression = Suppliers.memoize(() -> expression == null ? null : Parser.parse(expression, macroTable));\n+    this.fieldExpression = expressionSupplier;\n     Preconditions.checkNotNull(name, \"Must have a valid, non-null aggregator name\");\n     Preconditions.checkArgument(\n         fieldName == null ^ expression == null,"
  },
  {
    "sha": "3684c2b9fc7db84d0d90968d95f80f3224b6d785",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -96,7 +96,7 @@ public ExpressionPostAggregator(\n     );\n   }\n \n-  private ExpressionPostAggregator(\n+  public ExpressionPostAggregator(\n       final String name,\n       final String expression,\n       @Nullable final String ordering,"
  },
  {
    "sha": "5ea3e3aceeb3278547d153efd28c3f5d2b092b6d",
    "filename": "processing/src/main/java/org/apache/druid/query/filter/ExpressionDimFilter.java",
    "status": "modified",
    "additions": 10,
    "deletions": 1,
    "changes": 11,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/filter/ExpressionDimFilter.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/query/filter/ExpressionDimFilter.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/filter/ExpressionDimFilter.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -50,10 +50,19 @@ public ExpressionDimFilter(\n       @JsonProperty(\"filterTuning\") @Nullable final FilterTuning filterTuning,\n       @JacksonInject ExprMacroTable macroTable\n   )\n+  {\n+    this(expression, filterTuning, Suppliers.memoize(() -> Parser.parse(expression, macroTable)));\n+  }\n+\n+  public ExpressionDimFilter(\n+      final String expression,\n+      @Nullable final FilterTuning filterTuning,\n+      final Supplier<Expr> exprSupplier\n+  )\n   {\n     this.expression = expression;\n     this.filterTuning = filterTuning;\n-    this.parsed = Suppliers.memoize(() -> Parser.parse(expression, macroTable));\n+    this.parsed = exprSupplier;\n   }\n \n   @VisibleForTesting"
  },
  {
    "sha": "361504509911f018432ebe444bf8230b33f1f524",
    "filename": "processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java",
    "status": "modified",
    "additions": 21,
    "deletions": 6,
    "changes": 27,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -20,6 +20,8 @@\n package org.apache.druid.segment.join;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import org.apache.druid.java.util.common.Pair;\n import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprMacroTable;\n@@ -82,21 +84,34 @@ private JoinConditionAnalysis(\n     rightKeyColumns = getEquiConditions().stream().map(Equality::getRightColumn).collect(Collectors.toSet());\n   }\n \n+  public static JoinConditionAnalysis forExpression(\n+      final String condition,\n+      final String rightPrefix,\n+      final ExprMacroTable macroTable\n+  )\n+  {\n+    return forExpression(\n+        condition,\n+        rightPrefix,\n+        Suppliers.memoize(() -> Parser.parse(condition, macroTable))\n+    );\n+  }\n+\n   /**\n    * Analyze a join condition.\n    *\n-   * @param condition   the condition expression\n-   * @param rightPrefix prefix for the right-hand side of the join; will be used to determine which identifiers in\n-   *                    the condition come from the right-hand side and which come from the left-hand side\n-   * @param macroTable  macro table for parsing the condition expression\n+   * @param condition    the condition expression\n+   * @param rightPrefix  prefix for the right-hand side of the join; will be used to determine which identifiers in\n+   *                     the condition come from the right-hand side and which come from the left-hand side\n+   * @param exprSupplier {@link Expr} supplier for the parsed condition\n    */\n   public static JoinConditionAnalysis forExpression(\n       final String condition,\n       final String rightPrefix,\n-      final ExprMacroTable macroTable\n+      final Supplier<Expr> exprSupplier\n   )\n   {\n-    final Expr conditionExpr = Parser.parse(condition, macroTable);\n+    final Expr conditionExpr = exprSupplier.get();\n     final List<Equality> equiConditions = new ArrayList<>();\n     final List<Expr> nonEquiConditions = new ArrayList<>();\n "
  },
  {
    "sha": "923a6cef503780746dfd7d97f59ce0d0c85ebe2f",
    "filename": "processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVirtualColumn.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVirtualColumn.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVirtualColumn.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVirtualColumn.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -68,11 +68,21 @@ public ExpressionVirtualColumn(\n       @JsonProperty(\"outputType\") @Nullable ValueType outputType,\n       @JacksonInject ExprMacroTable macroTable\n   )\n+  {\n+    this(name, expression, outputType, Suppliers.memoize(() -> Parser.parse(expression, macroTable)));\n+  }\n+\n+  public ExpressionVirtualColumn(\n+      String name,\n+      String expression,\n+      @Nullable ValueType outputType,\n+      Supplier<Expr> exprSupplier\n+  )\n   {\n     this.name = Preconditions.checkNotNull(name, \"name\");\n     this.expression = Preconditions.checkNotNull(expression, \"expression\");\n     this.outputType = outputType;\n-    this.parsedExpression = Suppliers.memoize(() -> Parser.parse(expression, macroTable));\n+    this.parsedExpression = exprSupplier;\n   }\n \n   /**"
  },
  {
    "sha": "9812479c779c07c54eca599e61c7b67edaac54ba",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/AvgSqlAggregator.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/AvgSqlAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/AvgSqlAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/AvgSqlAggregator.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -103,6 +103,7 @@ public Aggregation toDruidAggregation(\n     final String sumName = Calcites.makePrefixedName(name, \"sum\");\n     final String countName = Calcites.makePrefixedName(name, \"count\");\n     final AggregatorFactory sum = SumSqlAggregator.createSumAggregatorFactory(\n+        plannerContext,\n         sumType,\n         sumName,\n         fieldName,"
  },
  {
    "sha": "f022192190dab6988f89ec462d0c8ddfd20efb6e",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/MaxSqlAggregator.java",
    "status": "modified",
    "additions": 32,
    "deletions": 4,
    "changes": 36,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/MaxSqlAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/MaxSqlAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/MaxSqlAggregator.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -31,6 +31,7 @@\n import org.apache.druid.segment.column.ValueType;\n import org.apache.druid.sql.calcite.aggregation.Aggregation;\n import org.apache.druid.sql.calcite.planner.Calcites;\n+import org.apache.druid.sql.calcite.planner.PlannerContext;\n \n public class MaxSqlAggregator extends SimpleSqlAggregator\n {\n@@ -42,6 +43,7 @@ public SqlAggFunction calciteFunction()\n \n   @Override\n   Aggregation getAggregation(\n+      final PlannerContext plannerContext,\n       final String name,\n       final AggregateCall aggregateCall,\n       final ExprMacroTable macroTable,\n@@ -50,10 +52,18 @@ Aggregation getAggregation(\n   )\n   {\n     final ValueType valueType = Calcites.getValueTypeForRelDataType(aggregateCall.getType());\n-    return Aggregation.create(createMaxAggregatorFactory(valueType, name, fieldName, expression, macroTable));\n+    return Aggregation.create(createMaxAggregatorFactory(\n+        plannerContext,\n+        valueType,\n+        name,\n+        fieldName,\n+        expression,\n+        macroTable\n+    ));\n   }\n \n   private static AggregatorFactory createMaxAggregatorFactory(\n+      final PlannerContext plannerContext,\n       final ValueType aggregationType,\n       final String name,\n       final String fieldName,\n@@ -63,11 +73,29 @@ private static AggregatorFactory createMaxAggregatorFactory(\n   {\n     switch (aggregationType) {\n       case LONG:\n-        return new LongMaxAggregatorFactory(name, fieldName, expression, macroTable);\n+        return new LongMaxAggregatorFactory(\n+            name,\n+            fieldName,\n+            expression,\n+            plannerContext.getCachingExprParser().lazyParse(expression),\n+            macroTable\n+        );\n       case FLOAT:\n-        return new FloatMaxAggregatorFactory(name, fieldName, expression, macroTable);\n+        return new FloatMaxAggregatorFactory(\n+            name,\n+            fieldName,\n+            expression,\n+            plannerContext.getCachingExprParser().lazyParse(expression),\n+            macroTable\n+        );\n       case DOUBLE:\n-        return new DoubleMaxAggregatorFactory(name, fieldName, expression, macroTable);\n+        return new DoubleMaxAggregatorFactory(\n+            name,\n+            fieldName,\n+            expression,\n+            plannerContext.getCachingExprParser().lazyParse(expression),\n+            macroTable\n+        );\n       default:\n         throw new ISE(\"Cannot create aggregator factory for type[%s]\", aggregationType);\n     }"
  },
  {
    "sha": "10492c32fbfa8eab7653cf6f2b8e380eae044d88",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/MinSqlAggregator.java",
    "status": "modified",
    "additions": 32,
    "deletions": 4,
    "changes": 36,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/MinSqlAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/MinSqlAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/MinSqlAggregator.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -31,6 +31,7 @@\n import org.apache.druid.segment.column.ValueType;\n import org.apache.druid.sql.calcite.aggregation.Aggregation;\n import org.apache.druid.sql.calcite.planner.Calcites;\n+import org.apache.druid.sql.calcite.planner.PlannerContext;\n \n public class MinSqlAggregator extends SimpleSqlAggregator\n {\n@@ -42,6 +43,7 @@ public SqlAggFunction calciteFunction()\n \n   @Override\n   Aggregation getAggregation(\n+      final PlannerContext plannerContext,\n       final String name,\n       final AggregateCall aggregateCall,\n       final ExprMacroTable macroTable,\n@@ -50,10 +52,18 @@ Aggregation getAggregation(\n   )\n   {\n     final ValueType valueType = Calcites.getValueTypeForRelDataType(aggregateCall.getType());\n-    return Aggregation.create(createMinAggregatorFactory(valueType, name, fieldName, expression, macroTable));\n+    return Aggregation.create(createMinAggregatorFactory(\n+        plannerContext,\n+        valueType,\n+        name,\n+        fieldName,\n+        expression,\n+        macroTable\n+    ));\n   }\n \n   private static AggregatorFactory createMinAggregatorFactory(\n+      final PlannerContext plannerContext,\n       final ValueType aggregationType,\n       final String name,\n       final String fieldName,\n@@ -63,11 +73,29 @@ private static AggregatorFactory createMinAggregatorFactory(\n   {\n     switch (aggregationType) {\n       case LONG:\n-        return new LongMinAggregatorFactory(name, fieldName, expression, macroTable);\n+        return new LongMinAggregatorFactory(\n+            name,\n+            fieldName,\n+            expression,\n+            plannerContext.getCachingExprParser().lazyParse(expression),\n+            macroTable\n+        );\n       case FLOAT:\n-        return new FloatMinAggregatorFactory(name, fieldName, expression, macroTable);\n+        return new FloatMinAggregatorFactory(\n+            name,\n+            fieldName,\n+            expression,\n+            plannerContext.getCachingExprParser().lazyParse(expression),\n+            macroTable\n+        );\n       case DOUBLE:\n-        return new DoubleMinAggregatorFactory(name, fieldName, expression, macroTable);\n+        return new DoubleMinAggregatorFactory(\n+            name,\n+            fieldName,\n+            expression,\n+            plannerContext.getCachingExprParser().lazyParse(expression),\n+            macroTable\n+        );\n       default:\n         throw new ISE(\"Cannot create aggregator factory for type[%s]\", aggregationType);\n     }"
  },
  {
    "sha": "ba005e3b9f4aca04529627a8eff2fcd3100683e1",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/SimpleSqlAggregator.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/SimpleSqlAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/SimpleSqlAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/SimpleSqlAggregator.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -88,10 +88,11 @@ public Aggregation toDruidAggregation(\n       expression = arg.getExpression();\n     }\n \n-    return getAggregation(name, aggregateCall, macroTable, fieldName, expression);\n+    return getAggregation(plannerContext, name, aggregateCall, macroTable, fieldName, expression);\n   }\n \n   abstract Aggregation getAggregation(\n+      PlannerContext plannerContext,\n       String name,\n       AggregateCall aggregateCall,\n       ExprMacroTable macroTable,"
  },
  {
    "sha": "c4afc39742796cfd53a8c7af2cac2897fda3033b",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/SumSqlAggregator.java",
    "status": "modified",
    "additions": 32,
    "deletions": 4,
    "changes": 36,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/SumSqlAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/SumSqlAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/SumSqlAggregator.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -31,6 +31,7 @@\n import org.apache.druid.segment.column.ValueType;\n import org.apache.druid.sql.calcite.aggregation.Aggregation;\n import org.apache.druid.sql.calcite.planner.Calcites;\n+import org.apache.druid.sql.calcite.planner.PlannerContext;\n \n public class SumSqlAggregator extends SimpleSqlAggregator\n {\n@@ -42,6 +43,7 @@ public SqlAggFunction calciteFunction()\n \n   @Override\n   Aggregation getAggregation(\n+      final PlannerContext plannerContext,\n       final String name,\n       final AggregateCall aggregateCall,\n       final ExprMacroTable macroTable,\n@@ -50,10 +52,18 @@ Aggregation getAggregation(\n   )\n   {\n     final ValueType valueType = Calcites.getValueTypeForRelDataType(aggregateCall.getType());\n-    return Aggregation.create(createSumAggregatorFactory(valueType, name, fieldName, expression, macroTable));\n+    return Aggregation.create(createSumAggregatorFactory(\n+        plannerContext,\n+        valueType,\n+        name,\n+        fieldName,\n+        expression,\n+        macroTable\n+    ));\n   }\n \n   static AggregatorFactory createSumAggregatorFactory(\n+      final PlannerContext plannerContext,\n       final ValueType aggregationType,\n       final String name,\n       final String fieldName,\n@@ -63,11 +73,29 @@ static AggregatorFactory createSumAggregatorFactory(\n   {\n     switch (aggregationType) {\n       case LONG:\n-        return new LongSumAggregatorFactory(name, fieldName, expression, macroTable);\n+        return new LongSumAggregatorFactory(\n+            name,\n+            fieldName,\n+            expression,\n+            plannerContext.getCachingExprParser().lazyParse(expression),\n+            macroTable\n+        );\n       case FLOAT:\n-        return new FloatSumAggregatorFactory(name, fieldName, expression, macroTable);\n+        return new FloatSumAggregatorFactory(\n+            name,\n+            fieldName,\n+            expression,\n+            plannerContext.getCachingExprParser().lazyParse(expression),\n+            macroTable\n+        );\n       case DOUBLE:\n-        return new DoubleSumAggregatorFactory(name, fieldName, expression, macroTable);\n+        return new DoubleSumAggregatorFactory(\n+            name,\n+            fieldName,\n+            expression,\n+            plannerContext.getCachingExprParser().lazyParse(expression),\n+            macroTable\n+        );\n       default:\n         throw new ISE(\"Cannot create aggregator factory for type[%s]\", aggregationType);\n     }"
  },
  {
    "sha": "4e408ba406db6732ec910dc74101fc0862c4f35f",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/expression/DruidExpression.java",
    "status": "modified",
    "additions": 9,
    "deletions": 11,
    "changes": 20,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/DruidExpression.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/DruidExpression.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/expression/DruidExpression.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -23,11 +23,9 @@\n import com.google.common.io.BaseEncoding;\n import com.google.common.primitives.Chars;\n import org.apache.druid.java.util.common.StringUtils;\n-import org.apache.druid.math.expr.Expr;\n-import org.apache.druid.math.expr.ExprMacroTable;\n-import org.apache.druid.math.expr.Parser;\n import org.apache.druid.segment.column.ValueType;\n import org.apache.druid.segment.virtual.ExpressionVirtualColumn;\n+import org.apache.druid.sql.calcite.planner.PlannerContext;\n \n import java.util.Arrays;\n import java.util.List;\n@@ -153,23 +151,23 @@ public boolean isSimpleExtraction()\n     return simpleExtraction != null;\n   }\n \n-  public Expr parse(final ExprMacroTable macroTable)\n-  {\n-    return Parser.parse(expression, macroTable);\n-  }\n-\n   public SimpleExtraction getSimpleExtraction()\n   {\n     return Preconditions.checkNotNull(simpleExtraction);\n   }\n \n   public ExpressionVirtualColumn toVirtualColumn(\n+      final PlannerContext plannerContext,\n       final String name,\n-      final ValueType outputType,\n-      final ExprMacroTable macroTable\n+      final ValueType outputType\n   )\n   {\n-    return new ExpressionVirtualColumn(name, expression, outputType, macroTable);\n+    return new ExpressionVirtualColumn(\n+        name,\n+        expression,\n+        outputType,\n+        plannerContext.getCachingExprParser().lazyParse(expression)\n+    );\n   }\n \n   public DruidExpression map("
  },
  {
    "sha": "b30615117996bf335684302eaa0c98a70c6d3818",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/expression/Expressions.java",
    "status": "modified",
    "additions": 15,
    "deletions": 11,
    "changes": 26,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/Expressions.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/Expressions.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/expression/Expressions.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -36,8 +36,6 @@\n import org.apache.druid.java.util.common.ISE;\n import org.apache.druid.java.util.common.granularity.Granularity;\n import org.apache.druid.math.expr.Expr;\n-import org.apache.druid.math.expr.ExprMacroTable;\n-import org.apache.druid.math.expr.Parser;\n import org.apache.druid.query.aggregation.PostAggregator;\n import org.apache.druid.query.expression.TimestampFloorExprMacro;\n import org.apache.druid.query.extraction.ExtractionFn;\n@@ -541,7 +539,7 @@ private static DimFilter toSimpleLeafFilter(\n       }\n \n       // Special handling for filters on FLOOR(__time TO granularity).\n-      final Granularity queryGranularity = toQueryGranularity(lhsExpression, plannerContext.getExprMacroTable());\n+      final Granularity queryGranularity = toQueryGranularity(plannerContext, lhsExpression);\n       if (queryGranularity != null) {\n         // lhs is FLOOR(__time TO granularity); rhs must be a timestamp\n         final long rhsMillis = Calcites.calciteDateTimeLiteralToJoda(rhs, plannerContext.getTimeZone()).getMillis();\n@@ -659,9 +657,15 @@ private static DimFilter toExpressionLeafFilter(\n   )\n   {\n     final DruidExpression druidExpression = toDruidExpression(plannerContext, rowSignature, rexNode);\n-    return druidExpression != null\n-           ? new ExpressionDimFilter(druidExpression.getExpression(), plannerContext.getExprMacroTable())\n-           : null;\n+    if (druidExpression != null) {\n+      return new ExpressionDimFilter(\n+          druidExpression.getExpression(),\n+          null,\n+          plannerContext.getCachingExprParser().lazyParse(druidExpression.getExpression())\n+      );\n+    } else {\n+      return null;\n+    }\n   }\n \n   /**\n@@ -671,9 +675,9 @@ private static DimFilter toExpressionLeafFilter(\n    * @return granularity or null if not possible\n    */\n   @Nullable\n-  public static Granularity toQueryGranularity(final DruidExpression expression, final ExprMacroTable macroTable)\n+  public static Granularity toQueryGranularity(final PlannerContext plannerContext, final DruidExpression expression)\n   {\n-    final TimestampFloorExprMacro.TimestampFloorExpr expr = asTimestampFloorExpr(expression, macroTable);\n+    final TimestampFloorExprMacro.TimestampFloorExpr expr = asTimestampFloorExpr(plannerContext, expression);\n \n     if (expr == null) {\n       return null;\n@@ -691,11 +695,11 @@ public static Granularity toQueryGranularity(final DruidExpression expression, f\n \n   @Nullable\n   public static TimestampFloorExprMacro.TimestampFloorExpr asTimestampFloorExpr(\n-      final DruidExpression expression,\n-      final ExprMacroTable macroTable\n+      final PlannerContext plannerContext,\n+      final DruidExpression expression\n   )\n   {\n-    final Expr expr = Parser.parse(expression.getExpression(), macroTable);\n+    final Expr expr = plannerContext.getCachingExprParser().parse(expression.getExpression());\n \n     if (expr instanceof TimestampFloorExprMacro.TimestampFloorExpr) {\n       return (TimestampFloorExprMacro.TimestampFloorExpr) expr;"
  },
  {
    "sha": "63906f57634451b39551b05e8921f0304d77a77c",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayContainsOperatorConversion.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayContainsOperatorConversion.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayContainsOperatorConversion.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayContainsOperatorConversion.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -27,7 +27,6 @@\n import org.apache.calcite.sql.type.SqlTypeFamily;\n import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprEval;\n-import org.apache.druid.math.expr.Parser;\n import org.apache.druid.query.filter.AndDimFilter;\n import org.apache.druid.query.filter.DimFilter;\n import org.apache.druid.segment.column.RowSignature;\n@@ -93,7 +92,7 @@ public DimFilter toDruidFilter(\n     final DruidExpression rightExpr = druidExpressions.get(1);\n \n     if (leftExpr.isSimpleExtraction()) {\n-      Expr expr = Parser.parse(rightExpr.getExpression(), plannerContext.getExprMacroTable());\n+      Expr expr = plannerContext.getCachingExprParser().parse(rightExpr.getExpression());\n       // To convert this expression filter into an And of Selector filters, we need to extract all array elements.\n       // For now, we can optimize only when rightExpr is a literal because there is no way to extract the array elements\n       // by traversing the Expr. Note that all implementations of Expr are defined as package-private classes in a"
  },
  {
    "sha": "655728b9f7c2c073edf0f49fa662ecb11550934c",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayOverlapOperatorConversion.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayOverlapOperatorConversion.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayOverlapOperatorConversion.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayOverlapOperatorConversion.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -28,7 +28,6 @@\n import org.apache.calcite.sql.type.SqlTypeFamily;\n import org.apache.druid.math.expr.Expr;\n import org.apache.druid.math.expr.ExprEval;\n-import org.apache.druid.math.expr.Parser;\n import org.apache.druid.query.filter.DimFilter;\n import org.apache.druid.query.filter.InDimFilter;\n import org.apache.druid.segment.column.RowSignature;\n@@ -105,7 +104,7 @@ public DimFilter toDruidFilter(\n       return toExpressionFilter(plannerContext, getDruidFunctionName(), druidExpressions);\n     }\n \n-    Expr expr = Parser.parse(complexExpr.getExpression(), plannerContext.getExprMacroTable());\n+    Expr expr = plannerContext.getCachingExprParser().parse(complexExpr.getExpression());\n     if (expr.isLiteral()) {\n       // Evaluate the expression to take out the array elements.\n       // We can safely pass null if the expression is literal."
  },
  {
    "sha": "3f98ed4ee715f91e3e67683fe26ae1981d8dd495",
    "filename": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/BaseExpressionDimFilterOperatorConversion.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/druid/blob/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/BaseExpressionDimFilterOperatorConversion.java",
    "raw_url": "https://github.com/apache/druid/raw/ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/BaseExpressionDimFilterOperatorConversion.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/BaseExpressionDimFilterOperatorConversion.java?ref=ffe26d06a9e7bb2a5680ad57007934cf6cc71bcb",
    "patch": "@@ -50,7 +50,8 @@ protected static DimFilter toExpressionFilter(\n \n     return new ExpressionDimFilter(\n         filterExpr,\n-        plannerContext.getExprMacroTable()\n+        null,\n+        plannerContext.getCachingExprParser().lazyParse(filterExpr)\n     );\n   }\n "
  }
]
