[
  {
    "sha": "e3f8da567aa7f374a62ee38568ab008de744b739",
    "filename": "indexing-service/src/main/java/org/apache/druid/indexing/input/DruidSegmentInputEntity.java",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://github.com/apache/druid/blob/01b88c624c9a95681c20654b4f3276131bb118cc/indexing-service/src/main/java/org/apache/druid/indexing/input/DruidSegmentInputEntity.java",
    "raw_url": "https://github.com/apache/druid/raw/01b88c624c9a95681c20654b4f3276131bb118cc/indexing-service/src/main/java/org/apache/druid/indexing/input/DruidSegmentInputEntity.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/indexing-service/src/main/java/org/apache/druid/indexing/input/DruidSegmentInputEntity.java?ref=01b88c624c9a95681c20654b4f3276131bb118cc",
    "patch": "@@ -22,6 +22,7 @@\n import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n import org.apache.druid.data.input.InputEntity;\n+import org.apache.druid.java.util.common.FileUtils;\n import org.apache.druid.java.util.emitter.EmittingLogger;\n import org.apache.druid.segment.loading.SegmentLoader;\n import org.apache.druid.segment.loading.SegmentLoadingException;\n@@ -30,6 +31,7 @@\n \n import javax.annotation.Nullable;\n import java.io.File;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.net.URI;\n \n@@ -87,8 +89,11 @@ public File file()\n       @Override\n       public void close()\n       {\n-        if (!segmentFile.delete()) {\n-          log.warn(\"Could not clean temporary segment file: \" + segmentFile);\n+        try {\n+          FileUtils.deleteDirectory(segmentFile);\n+        }\n+        catch (IOException e) {\n+          log.noStackTrace().warn(e, \"Could not clean temporary segment file: \" + segmentFile);\n         }\n       }\n     };"
  },
  {
    "sha": "716724ac9d53989796f81246335518db8ae1fca6",
    "filename": "indexing-service/src/main/java/org/apache/druid/indexing/input/DruidSegmentReader.java",
    "status": "modified",
    "additions": 45,
    "deletions": 28,
    "changes": 73,
    "blob_url": "https://github.com/apache/druid/blob/01b88c624c9a95681c20654b4f3276131bb118cc/indexing-service/src/main/java/org/apache/druid/indexing/input/DruidSegmentReader.java",
    "raw_url": "https://github.com/apache/druid/raw/01b88c624c9a95681c20654b4f3276131bb118cc/indexing-service/src/main/java/org/apache/druid/indexing/input/DruidSegmentReader.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/indexing-service/src/main/java/org/apache/druid/indexing/input/DruidSegmentReader.java?ref=01b88c624c9a95681c20654b4f3276131bb118cc",
    "patch": "@@ -42,6 +42,7 @@\n import org.apache.druid.segment.Cursor;\n import org.apache.druid.segment.DimensionSelector;\n import org.apache.druid.segment.IndexIO;\n+import org.apache.druid.segment.QueryableIndex;\n import org.apache.druid.segment.QueryableIndexStorageAdapter;\n import org.apache.druid.segment.VirtualColumns;\n import org.apache.druid.segment.column.ColumnHolder;\n@@ -51,6 +52,7 @@\n import org.apache.druid.utils.CollectionUtils;\n import org.joda.time.DateTime;\n \n+import java.io.Closeable;\n import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n@@ -92,31 +94,44 @@\n   @Override\n   protected CloseableIterator<Map<String, Object>> intermediateRowIterator() throws IOException\n   {\n-    final CleanableFile segmentFile = source.fetch(temporaryDirectory, null);\n-    final WindowedStorageAdapter storageAdapter = new WindowedStorageAdapter(\n-        new QueryableIndexStorageAdapter(\n-            indexIO.loadIndex(segmentFile.file())\n-        ),\n-        source.getIntervalFilter()\n-    );\n+    final Closer closer = Closer.create();\n \n-    final Sequence<Cursor> cursors = storageAdapter.getAdapter().makeCursors(\n-        Filters.toFilter(dimFilter),\n-        storageAdapter.getInterval(),\n-        VirtualColumns.EMPTY,\n-        Granularities.ALL,\n-        false,\n-        null\n-    );\n+    try {\n+      final CleanableFile segmentFile = closer.register(source.fetch(temporaryDirectory, null));\n+      final QueryableIndex queryableIndex = closer.register(indexIO.loadIndex(segmentFile.file()));\n+      final WindowedStorageAdapter storageAdapter = new WindowedStorageAdapter(\n+          new QueryableIndexStorageAdapter(queryableIndex),\n+          source.getIntervalFilter()\n+      );\n \n-    final Sequence<Map<String, Object>> sequence = Sequences.concat(\n-        Sequences.map(\n-            cursors,\n-            this::cursorToSequence\n-        )\n-    );\n+      final Sequence<Cursor> cursors = storageAdapter.getAdapter().makeCursors(\n+          Filters.toFilter(dimFilter),\n+          storageAdapter.getInterval(),\n+          VirtualColumns.EMPTY,\n+          Granularities.ALL,\n+          false,\n+          null\n+      );\n+\n+      final Sequence<Map<String, Object>> sequence = Sequences.concat(\n+          Sequences.map(\n+              cursors,\n+              this::cursorToSequence\n+          )\n+      );\n+\n+      return makeCloseableIteratorFromSequenceAndSegmentFile(sequence, closer);\n+    }\n+    catch (Exception e) {\n+      try {\n+        closer.close();\n+      }\n+      catch (IOException e2) {\n+        e.addSuppressed(e2);\n+      }\n \n-    return makeCloseableIteratorFromSequenceAndSegmentFile(sequence, segmentFile);\n+      throw e;\n+    }\n   }\n \n   @Override\n@@ -137,6 +152,7 @@\n    * Map<String, Object> intermediate rows, selecting the dimensions and metrics of this segment reader.\n    *\n    * @param cursor A cursor\n+   *\n    * @return A sequence of intermediate rows\n    */\n   private Sequence<Map<String, Object>> cursorToSequence(\n@@ -149,16 +165,17 @@\n   }\n \n   /**\n-   * @param sequence    A sequence of intermediate rows generated from a sequence of\n-   *                    cursors in {@link #intermediateRowIterator()}\n-   * @param segmentFile The underlying segment file containing the row data\n+   * @param sequence  A sequence of intermediate rows generated from a sequence of\n+   *                  cursors in {@link #intermediateRowIterator()}\n+   * @param closeable Object to close when the iteration is complete\n+   *\n    * @return A CloseableIterator from a sequence of intermediate rows, closing the underlying segment file\n-   *         when the iterator is closed.\n+   * when the iterator is closed.\n    */\n   @VisibleForTesting\n   static CloseableIterator<Map<String, Object>> makeCloseableIteratorFromSequenceAndSegmentFile(\n       final Sequence<Map<String, Object>> sequence,\n-      final CleanableFile segmentFile\n+      final Closeable closeable\n   )\n   {\n     return new CloseableIterator<Map<String, Object>>()\n@@ -183,8 +200,8 @@ public boolean hasNext()\n       public void close() throws IOException\n       {\n         Closer closer = Closer.create();\n+        closer.register(closeable);\n         closer.register(rowYielder);\n-        closer.register(segmentFile);\n         closer.close();\n       }\n     };"
  }
]
