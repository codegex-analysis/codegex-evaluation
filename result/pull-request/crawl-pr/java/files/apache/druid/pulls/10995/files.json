[
  {
    "sha": "e6d504e4984c7a9713cd8b1f0bcfe13eeb0304ae",
    "filename": "docs/ingestion/native-batch.md",
    "status": "modified",
    "additions": 43,
    "deletions": 0,
    "changes": 43,
    "blob_url": "https://github.com/apache/druid/blob/05c60be824e2d4a3fd3eaf298de44be544ece4cf/docs/ingestion/native-batch.md",
    "raw_url": "https://github.com/apache/druid/raw/05c60be824e2d4a3fd3eaf298de44be544ece4cf/docs/ingestion/native-batch.md",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/docs/ingestion/native-batch.md?ref=05c60be824e2d4a3fd3eaf298de44be544ece4cf",
    "patch": "@@ -862,6 +862,47 @@ Sample specs:\n ...\n ```\n \n+```json\n+...\n+    \"ioConfig\": {\n+      \"type\": \"index_parallel\",\n+      \"inputSource\": {\n+        \"type\": \"s3\",\n+        \"uris\": [\"s3://foo/bar/file.json\", \"s3://bar/foo/file2.json\"],\n+        \"properties\": {\n+          \"accessKeyId\": \"KLJ78979SDFdS2\",\n+          \"secretAccessKey\": \"KLS89s98sKJHKJKJH8721lljkd\"\n+        }\n+      },\n+      \"inputFormat\": {\n+        \"type\": \"json\"\n+      },\n+      ...\n+    },\n+...\n+```\n+\n+```json\n+...\n+    \"ioConfig\": {\n+      \"type\": \"index_parallel\",\n+      \"inputSource\": {\n+        \"type\": \"s3\",\n+        \"uris\": [\"s3://foo/bar/file.json\", \"s3://bar/foo/file2.json\"],\n+        \"properties\": {\n+          \"accessKeyId\": \"KLJ78979SDFdS2\",\n+          \"secretAccessKey\": \"KLS89s98sKJHKJKJH8721lljkd\",\n+          \"assumeRoleArn\": \"arn:aws:iam::2981002874992:role/role-s3\"\n+        }\n+      },\n+      \"inputFormat\": {\n+        \"type\": \"json\"\n+      },\n+      ...\n+    },\n+...\n+```\n+\n |property|description|default|required?|\n |--------|-----------|-------|---------|\n |type|This should be `s3`.|None|yes|\n@@ -885,6 +926,8 @@ Properties Object:\n |--------|-----------|-------|---------|\n |accessKeyId|The [Password Provider](../operations/password-provider.md) or plain text string of this S3 InputSource's access key|None|yes if secretAccessKey is given|\n |secretAccessKey|The [Password Provider](../operations/password-provider.md) or plain text string of this S3 InputSource's secret key|None|yes if accessKeyId is given|\n+|assumeRoleArn|AWS ARN of the role to assume [see](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html). **assumeRoleArn** can be used either with the ingestion spec AWS credentials or with the default S3 credentials|None|no|\n+|assumeRoleExternalId|A unique identifier that might be required when you assume a role in another account [see](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)|None|no|\n \n **Note :** *If accessKeyId and secretAccessKey are not given, the default [S3 credentials provider chain](../development/extensions-core/s3.md#s3-authentication-methods) is used.*\n "
  },
  {
    "sha": "d32ae7a641d374815b970bffefb7e64030395cca",
    "filename": "extensions-core/s3-extensions/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/druid/blob/05c60be824e2d4a3fd3eaf298de44be544ece4cf/extensions-core/s3-extensions/pom.xml",
    "raw_url": "https://github.com/apache/druid/raw/05c60be824e2d4a3fd3eaf298de44be544ece4cf/extensions-core/s3-extensions/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/extensions-core/s3-extensions/pom.xml?ref=05c60be824e2d4a3fd3eaf298de44be544ece4cf",
    "patch": "@@ -116,7 +116,7 @@\n       <groupId>com.amazonaws</groupId>\n       <artifactId>aws-java-sdk-sts</artifactId>\n       <scope>provided</scope>\n-    </dependency>    \n+    </dependency>\n     <!-- Tests -->\n     <dependency>\n       <groupId>org.apache.druid</groupId>"
  },
  {
    "sha": "24fd99cf5202d11a5d31ae0d7c3741c2a3f7b7da",
    "filename": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java",
    "status": "modified",
    "additions": 75,
    "deletions": 9,
    "changes": 84,
    "blob_url": "https://github.com/apache/druid/blob/05c60be824e2d4a3fd3eaf298de44be544ece4cf/extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java",
    "raw_url": "https://github.com/apache/druid/raw/05c60be824e2d4a3fd3eaf298de44be544ece4cf/extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java?ref=05c60be824e2d4a3fd3eaf298de44be544ece4cf",
    "patch": "@@ -19,12 +19,17 @@\n \n package org.apache.druid.data.input.s3;\n \n+import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.AWSStaticCredentialsProvider;\n import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n import com.amazonaws.services.s3.model.S3ObjectSummary;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenService;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder;\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n@@ -35,6 +40,7 @@\n import org.apache.druid.data.input.impl.CloudObjectInputSource;\n import org.apache.druid.data.input.impl.CloudObjectLocation;\n import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.java.util.common.StringUtils;\n import org.apache.druid.storage.s3.S3InputDataConfig;\n import org.apache.druid.storage.s3.S3StorageDruidModule;\n import org.apache.druid.storage.s3.S3Utils;\n@@ -47,6 +53,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Objects;\n+import java.util.UUID;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -59,6 +66,7 @@\n   @JsonProperty(\"properties\")\n   private final S3InputSourceConfig s3InputSourceConfig;\n   private final S3InputDataConfig inputDataConfig;\n+  private final AWSCredentialsProvider awsCredentialsProvider;\n \n   /**\n    * Constructor for S3InputSource\n@@ -84,7 +92,8 @@ public S3InputSource(\n       @JsonProperty(\"uris\") @Nullable List<URI> uris,\n       @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n       @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects,\n-      @JsonProperty(\"properties\") @Nullable S3InputSourceConfig s3InputSourceConfig\n+      @JsonProperty(\"properties\") @Nullable S3InputSourceConfig s3InputSourceConfig,\n+      @JacksonInject AWSCredentialsProvider awsCredentialsProvider\n   )\n   {\n     super(S3StorageDruidModule.SCHEME, uris, prefixes, objects);\n@@ -95,20 +104,76 @@ public S3InputSource(\n         () -> {\n           if (s3ClientBuilder != null && s3InputSourceConfig != null) {\n             if (s3InputSourceConfig.isCredentialsConfigured()) {\n-              AWSStaticCredentialsProvider credentials = new AWSStaticCredentialsProvider(\n-                  new BasicAWSCredentials(\n-                      s3InputSourceConfig.getAccessKeyId().getPassword(),\n-                      s3InputSourceConfig.getSecretAccessKey().getPassword()\n-                  )\n-              );\n-              s3ClientBuilder.getAmazonS3ClientBuilder().withCredentials(credentials);\n+              if (s3InputSourceConfig.getAssumeRoleArn() == null) {\n+                s3ClientBuilder\n+                    .getAmazonS3ClientBuilder()\n+                    .withCredentials(createStaticCredentialsProvider(s3InputSourceConfig));\n+              } else {\n+                applyAssumeRole(\n+                    s3ClientBuilder,\n+                    s3InputSourceConfig,\n+                    createStaticCredentialsProvider(s3InputSourceConfig)\n+                );\n+              }\n+            } else {\n+              applyAssumeRole(s3ClientBuilder, s3InputSourceConfig, awsCredentialsProvider);\n             }\n             return s3ClientBuilder.build();\n           } else {\n             return s3Client;\n           }\n         }\n     );\n+    this.awsCredentialsProvider = awsCredentialsProvider;\n+  }\n+\n+  @VisibleForTesting\n+  public S3InputSource(\n+      ServerSideEncryptingAmazonS3 s3Client,\n+      ServerSideEncryptingAmazonS3.Builder s3ClientBuilder,\n+      S3InputDataConfig inputDataConfig,\n+      List<URI> uris,\n+      List<URI> prefixes,\n+      List<CloudObjectLocation> objects,\n+      S3InputSourceConfig s3InputSourceConfig\n+  )\n+  {\n+    this(s3Client, s3ClientBuilder, inputDataConfig, uris, prefixes, objects, s3InputSourceConfig, null);\n+  }\n+\n+  private void applyAssumeRole(\n+      ServerSideEncryptingAmazonS3.Builder s3ClientBuilder,\n+      S3InputSourceConfig s3InputSourceConfig,\n+      AWSCredentialsProvider awsCredentialsProvider\n+  )\n+  {\n+    String assumeRoleArn = s3InputSourceConfig.getAssumeRoleArn();\n+    if (assumeRoleArn != null) {\n+      String roleSessionName = StringUtils.format(\"druid-s3-input-source-%s\", UUID.randomUUID().toString());\n+      AWSSecurityTokenService securityTokenService = AWSSecurityTokenServiceClientBuilder.standard()\n+                                                                          .withCredentials(awsCredentialsProvider)\n+                                                                          .build();\n+      STSAssumeRoleSessionCredentialsProvider.Builder roleCredentialsProviderBuilder;\n+      roleCredentialsProviderBuilder = new STSAssumeRoleSessionCredentialsProvider\n+          .Builder(assumeRoleArn, roleSessionName).withStsClient(securityTokenService);\n+\n+      if (s3InputSourceConfig.getAssumeRoleExternalId() != null) {\n+        roleCredentialsProviderBuilder.withExternalId(s3InputSourceConfig.getAssumeRoleExternalId());\n+      }\n+\n+      s3ClientBuilder.getAmazonS3ClientBuilder().withCredentials(roleCredentialsProviderBuilder.build());\n+    }\n+  }\n+\n+  @Nonnull\n+  private AWSStaticCredentialsProvider createStaticCredentialsProvider(S3InputSourceConfig s3InputSourceConfig)\n+  {\n+    return new AWSStaticCredentialsProvider(\n+        new BasicAWSCredentials(\n+            s3InputSourceConfig.getAccessKeyId().getPassword(),\n+            s3InputSourceConfig.getSecretAccessKey().getPassword()\n+        )\n+    );\n   }\n \n   @Nullable\n@@ -149,7 +214,8 @@ protected InputEntity createEntity(CloudObjectLocation location)\n         null,\n         null,\n         split.get(),\n-        getS3InputSourceConfig()\n+        getS3InputSourceConfig(),\n+        awsCredentialsProvider\n     );\n   }\n "
  },
  {
    "sha": "1c0b2748d12e01d676cc8578e22fc4a47be10081",
    "filename": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSourceConfig.java",
    "status": "modified",
    "additions": 32,
    "deletions": 8,
    "changes": 40,
    "blob_url": "https://github.com/apache/druid/blob/05c60be824e2d4a3fd3eaf298de44be544ece4cf/extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSourceConfig.java",
    "raw_url": "https://github.com/apache/druid/raw/05c60be824e2d4a3fd3eaf298de44be544ece4cf/extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSourceConfig.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSourceConfig.java?ref=05c60be824e2d4a3fd3eaf298de44be544ece4cf",
    "patch": "@@ -34,24 +34,44 @@\n  */\n public class S3InputSourceConfig\n {\n+  @Nullable\n+  @JsonProperty\n+  private String assumeRoleArn;\n+  @Nullable\n+  @JsonProperty\n+  private String assumeRoleExternalId;\n+  @JsonProperty\n+  private PasswordProvider accessKeyId;\n+  @JsonProperty\n+  private PasswordProvider secretAccessKey;\n+\n   @JsonCreator\n   public S3InputSourceConfig(\n       @JsonProperty(\"accessKeyId\") @Nullable PasswordProvider accessKeyId,\n-      @JsonProperty(\"secretAccessKey\") @Nullable PasswordProvider secretAccessKey\n+      @JsonProperty(\"secretAccessKey\") @Nullable PasswordProvider secretAccessKey,\n+      @JsonProperty(\"assumeRoleArn\") @Nullable String assumeRoleArn,\n+      @JsonProperty(\"assumeRoleExternalId\") @Nullable String assumeRoleExternalId\n   )\n   {\n+    this.assumeRoleArn = assumeRoleArn;\n+    this.assumeRoleExternalId = assumeRoleExternalId;\n     if (accessKeyId != null || secretAccessKey != null) {\n       this.accessKeyId = Preconditions.checkNotNull(accessKeyId, \"accessKeyId cannot be null if secretAccessKey is given\");\n       this.secretAccessKey = Preconditions.checkNotNull(secretAccessKey, \"secretAccessKey cannot be null if accessKeyId is given\");\n     }\n   }\n \n-  @JsonProperty\n-  private PasswordProvider accessKeyId;\n-\n-  @JsonProperty\n-  private PasswordProvider secretAccessKey;\n+  @Nullable\n+  public String getAssumeRoleArn()\n+  {\n+    return assumeRoleArn;\n+  }\n \n+  @Nullable\n+  public String getAssumeRoleExternalId()\n+  {\n+    return assumeRoleExternalId;\n+  }\n \n   public PasswordProvider getAccessKeyId()\n   {\n@@ -76,6 +96,8 @@ public String toString()\n     return \"S3InputSourceConfig{\" +\n            \"accessKeyId=\" + accessKeyId +\n            \", secretAccessKey=\" + secretAccessKey +\n+           \", assumeRoleArn=\" + assumeRoleArn +\n+           \", assumeRoleExternalId=\" + assumeRoleExternalId +\n            '}';\n   }\n \n@@ -90,12 +112,14 @@ public boolean equals(Object o)\n     }\n     S3InputSourceConfig that = (S3InputSourceConfig) o;\n     return Objects.equals(accessKeyId, that.accessKeyId) &&\n-           Objects.equals(secretAccessKey, that.secretAccessKey);\n+           Objects.equals(secretAccessKey, that.secretAccessKey) &&\n+           Objects.equals(assumeRoleArn, that.assumeRoleArn) &&\n+           Objects.equals(assumeRoleExternalId, that.assumeRoleExternalId);\n   }\n \n   @Override\n   public int hashCode()\n   {\n-    return Objects.hash(accessKeyId, secretAccessKey);\n+    return Objects.hash(accessKeyId, secretAccessKey, assumeRoleArn, assumeRoleExternalId);\n   }\n }"
  },
  {
    "sha": "b2f40b0c634306f5424d301fbdc9c2e072652b7b",
    "filename": "extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/druid/blob/05c60be824e2d4a3fd3eaf298de44be544ece4cf/extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java",
    "raw_url": "https://github.com/apache/druid/raw/05c60be824e2d4a3fd3eaf298de44be544ece4cf/extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java?ref=05c60be824e2d4a3fd3eaf298de44be544ece4cf",
    "patch": "@@ -119,7 +119,7 @@\n   );\n \n   private static final S3InputSourceConfig CLOUD_CONFIG_PROPERTIES = new S3InputSourceConfig(\n-      new DefaultPasswordProvider(\"myKey\"), new DefaultPasswordProvider(\"mySecret\"));\n+      new DefaultPasswordProvider(\"myKey\"), new DefaultPasswordProvider(\"mySecret\"), null, null);\n \n   private static final List<CloudObjectLocation> EXPECTED_LOCATION =\n       ImmutableList.of(new CloudObjectLocation(\"foo\", \"bar/file.csv\"));"
  }
]
