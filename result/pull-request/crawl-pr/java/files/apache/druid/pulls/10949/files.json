[
  {
    "sha": "b2953d97ebeae5814be70a8683f14baa2e4c0a70",
    "filename": "integration-tests/src/test/resources/indexer/wikipedia_merge_index_queries.json",
    "status": "modified",
    "additions": 38,
    "deletions": 2,
    "changes": 40,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/integration-tests/src/test/resources/indexer/wikipedia_merge_index_queries.json",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/integration-tests/src/test/resources/indexer/wikipedia_merge_index_queries.json",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/integration-tests/src/test/resources/indexer/wikipedia_merge_index_queries.json?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -1,6 +1,6 @@\n [\n     {\n-        \"description\": \"groupby, stringFirst/stringLast rollup aggs, all\",\n+        \"description\": \"groupby, stringFirst/stringLast/doubleFirst/doubleLast/longFirst/longLast/floatFirst/floatLast rollup aggs, all\",\n         \"query\":{\n             \"queryType\" : \"groupBy\",\n             \"dataSource\": \"%%DATASOURCE%%\",\n@@ -26,6 +26,36 @@\n                     \"type\":\"stringLast\",\n                     \"name\":\"latest_user\",\n                     \"fieldName\":\"last_user\"\n+                },\n+                {\n+                    \"type\": \"doubleFirst\",\n+                    \"name\": \"double_first_delta\",\n+                    \"fieldName\": \"double_first_delta\"\n+                },\n+                {\n+                    \"type\": \"doubleLast\",\n+                    \"name\": \"double_last_delta\",\n+                    \"fieldName\": \"double_last_delta\"\n+                },\n+                {\n+                    \"type\": \"longFirst\",\n+                    \"name\": \"long_first_delta\",\n+                    \"fieldName\": \"long_first_delta\"\n+                },\n+                {\n+                    \"type\": \"longFirst\",\n+                    \"name\": \"long_last_delta\",\n+                    \"fieldName\": \"long_last_delta\"\n+                },\n+                {\n+                    \"type\": \"floatFirst\",\n+                    \"name\": \"float_first_delta\",\n+                    \"fieldName\": \"float_first_delta\"\n+                },\n+                {\n+                    \"type\": \"floatLast\",\n+                    \"name\": \"float_last_delta\",\n+                    \"fieldName\": \"float_last_delta\"\n                 }\n             ]\n         },\n@@ -35,7 +65,13 @@\n             \"event\" : {\n                 \"continent\":\"Asia\",\n                 \"earliest_user\":\"masterYi\",\n-                \"latest_user\":\"stringer\"\n+                \"latest_user\":\"stringer\",\n+                \"double_first_delta\": 111.0,\n+                \"double_last_delta\": -9.0,\n+                \"long_first_delta\": 111,\n+                \"long_last_delta\": -9,\n+                \"float_first_delta\": 111.0,\n+                \"float_last_delta\": -9.0\n             }\n         } ]\n     }"
  },
  {
    "sha": "66379d0d0fa4b04cf15fcc3b7a862f47a1137fda",
    "filename": "integration-tests/src/test/resources/indexer/wikipedia_merge_index_task.json",
    "status": "modified",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/integration-tests/src/test/resources/indexer/wikipedia_merge_index_task.json",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/integration-tests/src/test/resources/indexer/wikipedia_merge_index_task.json",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/integration-tests/src/test/resources/indexer/wikipedia_merge_index_task.json?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -23,6 +23,36 @@\n                     \"name\": \"delta\",\n                     \"fieldName\": \"delta\"\n                 },\n+                {\n+                    \"type\": \"doubleFirst\",\n+                    \"name\": \"double_first_delta\",\n+                    \"fieldName\": \"delta\"\n+                },\n+                {\n+                    \"type\": \"doubleLast\",\n+                    \"name\": \"double_last_delta\",\n+                    \"fieldName\": \"delta\"\n+                },\n+                {\n+                    \"type\": \"longFirst\",\n+                    \"name\": \"long_first_delta\",\n+                    \"fieldName\": \"delta\"\n+                },\n+                {\n+                    \"type\": \"longLast\",\n+                    \"name\": \"long_last_delta\",\n+                    \"fieldName\": \"delta\"\n+                },\n+                {\n+                    \"type\": \"floatFirst\",\n+                    \"name\": \"float_first_delta\",\n+                    \"fieldName\": \"delta\"\n+                },\n+                {\n+                    \"type\": \"floatLast\",\n+                    \"name\": \"float_last_delta\",\n+                    \"fieldName\": \"delta\"\n+                },\n                 {\n                     \"type\": \"stringFirst\",\n                     \"name\": \"first_user\","
  },
  {
    "sha": "348aff886455ce0eecf0919d7680d12f9446350b",
    "filename": "integration-tests/src/test/resources/indexer/wikipedia_merge_reindex_druid_input_source_task.json",
    "status": "modified",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/integration-tests/src/test/resources/indexer/wikipedia_merge_reindex_druid_input_source_task.json",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/integration-tests/src/test/resources/indexer/wikipedia_merge_reindex_druid_input_source_task.json",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/integration-tests/src/test/resources/indexer/wikipedia_merge_reindex_druid_input_source_task.json?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -56,6 +56,36 @@\n                     \"type\": \"stringLast\",\n                     \"name\": \"last_user\",\n                     \"fieldName\": \"last_user\"\n+                },\n+                {\n+                    \"type\": \"doubleFirst\",\n+                    \"name\": \"double_first_delta\",\n+                    \"fieldName\": \"double_first_delta\"\n+                },\n+                {\n+                    \"type\": \"doubleLast\",\n+                    \"name\": \"double_last_delta\",\n+                    \"fieldName\": \"double_last_delta\"\n+                },\n+                {\n+                    \"type\": \"longFirst\",\n+                    \"name\": \"long_first_delta\",\n+                    \"fieldName\": \"long_first_delta\"\n+                },\n+                {\n+                    \"type\": \"longLast\",\n+                    \"name\": \"long_last_delta\",\n+                    \"fieldName\": \"long_last_delta\"\n+                },\n+                {\n+                    \"type\": \"floatFirst\",\n+                    \"name\": \"float_first_delta\",\n+                    \"fieldName\": \"float_first_delta\"\n+                },\n+                {\n+                    \"type\": \"floatLast\",\n+                    \"name\": \"float_last_delta\",\n+                    \"fieldName\": \"float_last_delta\"\n                 }\n             ]\n         }"
  },
  {
    "sha": "b0f9959a476b32c32e68c633c436044e2b086aff",
    "filename": "integration-tests/src/test/resources/indexer/wikipedia_merge_reindex_task.json",
    "status": "modified",
    "additions": 31,
    "deletions": 1,
    "changes": 32,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/integration-tests/src/test/resources/indexer/wikipedia_merge_reindex_task.json",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/integration-tests/src/test/resources/indexer/wikipedia_merge_reindex_task.json",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/integration-tests/src/test/resources/indexer/wikipedia_merge_reindex_task.json?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,6 +19,36 @@\n                     \"name\": \"delta\",\n                     \"fieldName\": \"delta\"\n                 },\n+                {\n+                    \"type\": \"doubleFirst\",\n+                    \"name\": \"double_first_delta\",\n+                    \"fieldName\": \"double_first_delta\"\n+                },\n+                {\n+                    \"type\": \"doubleLast\",\n+                    \"name\": \"double_last_delta\",\n+                    \"fieldName\": \"double_last_delta\"\n+                },\n+                {\n+                    \"type\": \"longFirst\",\n+                    \"name\": \"long_first_delta\",\n+                    \"fieldName\": \"long_first_delta\"\n+                },\n+                {\n+                    \"type\": \"longLast\",\n+                    \"name\": \"long_last_delta\",\n+                    \"fieldName\": \"long_last_delta\"\n+                },\n+                {\n+                    \"type\": \"floatFirst\",\n+                    \"name\": \"float_first_delta\",\n+                    \"fieldName\": \"float_first_delta\"\n+                },\n+                {\n+                    \"type\": \"floatLast\",\n+                    \"name\": \"float_last_delta\",\n+                    \"fieldName\": \"float_last_delta\"\n+                },\n                 {\n                     \"type\": \"stringFirst\",\n                     \"name\": \"first_user\",\n@@ -62,4 +92,4 @@\n             \"type\": \"index\"\n         }\n     }\n-}\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "0d3e2dea8efc893cf45a3e0fb6be5a0aaea34a51",
    "filename": "processing/src/main/java/org/apache/druid/jackson/AggregatorsModule.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/jackson/AggregatorsModule.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/jackson/AggregatorsModule.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/jackson/AggregatorsModule.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -38,6 +38,9 @@\n import org.apache.druid.query.aggregation.LongMinAggregatorFactory;\n import org.apache.druid.query.aggregation.LongSumAggregatorFactory;\n import org.apache.druid.query.aggregation.PostAggregator;\n+import org.apache.druid.query.aggregation.SerializablePairLongDoubleSerde;\n+import org.apache.druid.query.aggregation.SerializablePairLongFloatSerde;\n+import org.apache.druid.query.aggregation.SerializablePairLongLongSerde;\n import org.apache.druid.query.aggregation.SerializablePairLongStringSerde;\n import org.apache.druid.query.aggregation.any.DoubleAnyAggregatorFactory;\n import org.apache.druid.query.aggregation.any.FloatAnyAggregatorFactory;\n@@ -80,7 +83,10 @@ public AggregatorsModule()\n \n     ComplexMetrics.registerSerde(\"hyperUnique\", new HyperUniquesSerde());\n     ComplexMetrics.registerSerde(\"preComputedHyperUnique\", new PreComputedHyperUniquesSerde());\n-    ComplexMetrics.registerSerde(\"serializablePairLongString\", new SerializablePairLongStringSerde());\n+    ComplexMetrics.registerSerde(new SerializablePairLongStringSerde());\n+    ComplexMetrics.registerSerde(new SerializablePairLongDoubleSerde());\n+    ComplexMetrics.registerSerde(new SerializablePairLongFloatSerde());\n+    ComplexMetrics.registerSerde(new SerializablePairLongLongSerde());\n \n     setMixInAnnotation(AggregatorFactory.class, AggregatorFactoryMixin.class);\n     setMixInAnnotation(PostAggregator.class, PostAggregatorMixin.class);"
  },
  {
    "sha": "6793265fb5f272ddeddb10f653f6e503b1707ebd",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/AbstractSerializablePairSerde.java",
    "status": "added",
    "additions": 116,
    "deletions": 0,
    "changes": 116,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/AbstractSerializablePairSerde.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/AbstractSerializablePairSerde.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/AbstractSerializablePairSerde.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation;\n+\n+import com.google.common.primitives.Longs;\n+import org.apache.druid.collections.SerializablePair;\n+import org.apache.druid.data.input.InputRow;\n+import org.apache.druid.segment.GenericColumnSerializer;\n+import org.apache.druid.segment.column.ColumnBuilder;\n+import org.apache.druid.segment.data.GenericIndexed;\n+import org.apache.druid.segment.data.ObjectStrategy;\n+import org.apache.druid.segment.serde.ComplexColumnPartSupplier;\n+import org.apache.druid.segment.serde.ComplexMetricExtractor;\n+import org.apache.druid.segment.serde.ComplexMetricSerde;\n+import org.apache.druid.segment.serde.LargeColumnSupportedComplexColumnSerializer;\n+import org.apache.druid.segment.writeout.SegmentWriteOutMedium;\n+\n+import javax.annotation.Nullable;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * The class serializes a Pair<Long, ?> object for double/float/longFirst and double/float/longLast aggregators\n+ */\n+public abstract class AbstractSerializablePairSerde<T extends SerializablePair<Long, ?>> extends ComplexMetricSerde\n+{\n+  private final Class<T> pairClassObject;\n+\n+  public AbstractSerializablePairSerde(Class<T> pairClassObject)\n+  {\n+    this.pairClassObject = pairClassObject;\n+  }\n+\n+  @Override\n+  public ComplexMetricExtractor getExtractor()\n+  {\n+    return new ComplexMetricExtractor()\n+    {\n+      @Override\n+      public Class<T> extractedClass()\n+      {\n+        return pairClassObject;\n+      }\n+\n+      @Override\n+      public Object extractValue(InputRow inputRow, String metricName)\n+      {\n+        return inputRow.getRaw(metricName);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public void deserializeColumn(ByteBuffer buffer, ColumnBuilder columnBuilder)\n+  {\n+    final GenericIndexed column = GenericIndexed.read(buffer, getObjectStrategy(), columnBuilder.getFileMapper());\n+    columnBuilder.setComplexColumnSupplier(new ComplexColumnPartSupplier(getTypeName(), column));\n+  }\n+\n+  @Override\n+  public ObjectStrategy<T> getObjectStrategy()\n+  {\n+    return new ObjectStrategy<T>()\n+    {\n+      @Override\n+      public int compare(@Nullable T o1, @Nullable T o2)\n+      {\n+        return Longs.compare(o1.lhs, o2.lhs);\n+      }\n+\n+      @Override\n+      public Class<T> getClazz()\n+      {\n+        return pairClassObject;\n+      }\n+\n+      @Override\n+      public T fromByteBuffer(ByteBuffer buffer, int numBytes)\n+      {\n+        return toPairObject(buffer);\n+      }\n+\n+      @Override\n+      public byte[] toBytes(T val)\n+      {\n+        return pairToBytes(val);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public GenericColumnSerializer<T> getSerializer(SegmentWriteOutMedium segmentWriteOutMedium, String column)\n+  {\n+    return LargeColumnSupportedComplexColumnSerializer.create(segmentWriteOutMedium, column, this.getObjectStrategy());\n+  }\n+\n+  protected abstract T toPairObject(ByteBuffer buffer);\n+\n+  protected abstract byte[] pairToBytes(T val);\n+}"
  },
  {
    "sha": "199a214ac77a4df051e338caa893717ca2cf85eb",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongDouble.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongDouble.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongDouble.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongDouble.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.druid.collections.SerializablePair;\n+\n+import javax.annotation.Nullable;\n+\n+public class SerializablePairLongDouble extends SerializablePair<Long, Double>\n+{\n+  @JsonCreator\n+  public SerializablePairLongDouble(@JsonProperty(\"lhs\") Long lhs, @JsonProperty(\"rhs\") @Nullable Double rhs)\n+  {\n+    super(lhs, rhs);\n+  }\n+}\n+\n+"
  },
  {
    "sha": "2e2b2f07939c7ce24c4fb2c29f66f40de7c9b63c",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongDoubleSerde.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongDoubleSerde.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongDoubleSerde.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongDoubleSerde.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation;\n+\n+import org.apache.druid.common.config.NullHandling;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * The class serializes a Long-Double pair (SerializablePair<Long, Double>).\n+ * The serialization structure is: Long:Double\n+ * <p>\n+ * The class is used on first/last Double aggregators to store the time and the first/last Double.\n+ * Long:Double -> Timestamp:Double\n+ */\n+public class SerializablePairLongDoubleSerde extends AbstractSerializablePairSerde<SerializablePairLongDouble>\n+{\n+  public static final String TYPE_NAME = \"serializablePairLongDouble\";\n+\n+  public SerializablePairLongDoubleSerde()\n+  {\n+    super(SerializablePairLongDouble.class);\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return TYPE_NAME;\n+  }\n+\n+  @Override\n+  protected SerializablePairLongDouble toPairObject(ByteBuffer buffer)\n+  {\n+    final ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n+    long lhs = readOnlyBuffer.getLong();\n+    boolean isNotNull = readOnlyBuffer.get() == NullHandling.IS_NOT_NULL_BYTE;\n+    if (isNotNull) {\n+      return new SerializablePairLongDouble(lhs, readOnlyBuffer.getDouble());\n+    } else {\n+      return new SerializablePairLongDouble(lhs, null);\n+    }\n+  }\n+\n+  @Override\n+  protected byte[] pairToBytes(SerializablePairLongDouble val)\n+  {\n+    ByteBuffer bbuf = ByteBuffer.allocate(Long.BYTES + Byte.BYTES + Double.BYTES);\n+    bbuf.putLong(val.lhs);\n+    if (val.rhs == null) {\n+      bbuf.put(NullHandling.IS_NULL_BYTE);\n+    } else {\n+      bbuf.put(NullHandling.IS_NOT_NULL_BYTE);\n+      bbuf.putDouble(val.rhs);\n+    }\n+    return bbuf.array();\n+  }\n+}"
  },
  {
    "sha": "6ecc0f9533e95cbb7c00a7125ccdd99751e99604",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongFloat.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongFloat.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongFloat.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongFloat.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.druid.collections.SerializablePair;\n+\n+import javax.annotation.Nullable;\n+\n+public class SerializablePairLongFloat extends SerializablePair<Long, Float>\n+{\n+  @JsonCreator\n+  public SerializablePairLongFloat(@JsonProperty(\"lhs\") Long lhs, @JsonProperty(\"rhs\") @Nullable Float rhs)\n+  {\n+    super(lhs, rhs);\n+  }\n+}\n+\n+"
  },
  {
    "sha": "3f26c2f8083966bad46c9023342b1104cb2f5f12",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongFloatSerde.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongFloatSerde.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongFloatSerde.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongFloatSerde.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation;\n+\n+import org.apache.druid.common.config.NullHandling;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * The class serializes a Long-Float pair (SerializablePair<Long, Float>).\n+ * The serialization structure is: Long:Float\n+ * <p>\n+ * The class is used on first/last Float aggregators to store the time and the first/last Float.\n+ * Long:Float -> Timestamp:Float\n+ */\n+public class SerializablePairLongFloatSerde extends AbstractSerializablePairSerde<SerializablePairLongFloat>\n+{\n+  public static final String TYPE_NAME = \"serializablePairLongFloat\";\n+\n+  public SerializablePairLongFloatSerde()\n+  {\n+    super(SerializablePairLongFloat.class);\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return TYPE_NAME;\n+  }\n+\n+  @Override\n+  protected SerializablePairLongFloat toPairObject(ByteBuffer buffer)\n+  {\n+    final ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n+    long lhs = readOnlyBuffer.getLong();\n+    boolean isNotNull = readOnlyBuffer.get() == NullHandling.IS_NOT_NULL_BYTE;\n+    if (isNotNull) {\n+      return new SerializablePairLongFloat(lhs, readOnlyBuffer.getFloat());\n+    } else {\n+      return new SerializablePairLongFloat(lhs, null);\n+    }\n+  }\n+\n+  @Override\n+  protected byte[] pairToBytes(SerializablePairLongFloat val)\n+  {\n+    ByteBuffer bbuf = ByteBuffer.allocate(Long.BYTES + Byte.BYTES + Float.BYTES);\n+    bbuf.putLong(val.lhs);\n+    if (val.rhs == null) {\n+      bbuf.put(NullHandling.IS_NULL_BYTE);\n+    } else {\n+      bbuf.put(NullHandling.IS_NOT_NULL_BYTE);\n+      bbuf.putFloat(val.rhs);\n+    }\n+    return bbuf.array();\n+  }\n+}"
  },
  {
    "sha": "82f9f191b1f61093c8c449a85ef344669a5aa88e",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongLong.java",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongLong.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongLong.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongLong.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.druid.collections.SerializablePair;\n+\n+import javax.annotation.Nullable;\n+\n+public class SerializablePairLongLong extends SerializablePair<Long, Long>\n+{\n+  @JsonCreator\n+  public SerializablePairLongLong(@JsonProperty(\"lhs\") Long lhs, @JsonProperty(\"rhs\") @Nullable Long rhs)\n+  {\n+    super(lhs, rhs);\n+  }\n+}\n+\n+"
  },
  {
    "sha": "a8ba982da2e917e5324644eece0c22ae5b214c4d",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongLongSerde.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongLongSerde.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongLongSerde.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongLongSerde.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation;\n+\n+import org.apache.druid.common.config.NullHandling;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * The class serializes a Long-Long pair (SerializablePair<Long, Long>).\n+ * The serialization structure is: Long:Long\n+ * <p>\n+ * The class is used on first/last Long aggregators to store the time and the first/last Long.\n+ * Long:Long -> Timestamp:Long\n+ */\n+public class SerializablePairLongLongSerde extends AbstractSerializablePairSerde<SerializablePairLongLong>\n+{\n+  public static final String TYPE_NAME = \"serializablePairLongLong\";\n+\n+  public SerializablePairLongLongSerde()\n+  {\n+    super(SerializablePairLongLong.class);\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return TYPE_NAME;\n+  }\n+\n+  @Override\n+  protected SerializablePairLongLong toPairObject(ByteBuffer buffer)\n+  {\n+    final ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n+    long lhs = readOnlyBuffer.getLong();\n+    boolean isNotNull = readOnlyBuffer.get() == NullHandling.IS_NOT_NULL_BYTE;\n+    if (isNotNull) {\n+      return new SerializablePairLongLong(lhs, readOnlyBuffer.getLong());\n+    } else {\n+      return new SerializablePairLongLong(lhs, null);\n+    }\n+  }\n+\n+  @Override\n+  protected byte[] pairToBytes(SerializablePairLongLong val)\n+  {\n+    ByteBuffer bbuf = ByteBuffer.allocate(Long.BYTES + Byte.BYTES + Long.BYTES);\n+    bbuf.putLong(val.lhs);\n+    if (val.rhs == null) {\n+      bbuf.put(NullHandling.IS_NULL_BYTE);\n+    } else {\n+      bbuf.put(NullHandling.IS_NOT_NULL_BYTE);\n+      bbuf.putLong(val.rhs);\n+    }\n+    return bbuf.array();\n+  }\n+}"
  },
  {
    "sha": "41a08ff43d03c0c67d65545fcb081986ae1abf14",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongStringSerde.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongStringSerde.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongStringSerde.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/SerializablePairLongStringSerde.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -45,7 +45,7 @@\n public class SerializablePairLongStringSerde extends ComplexMetricSerde\n {\n \n-  private static final String TYPE_NAME = \"serializablePairLongString\";\n+  public static final String TYPE_NAME = \"serializablePairLongString\";\n \n   @Override\n   public String getTypeName()"
  },
  {
    "sha": "0942c375e837eeb1325de9649eb937d49505714b",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregator.java",
    "status": "modified",
    "additions": 15,
    "deletions": 7,
    "changes": 22,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,30 +19,38 @@\n \n package org.apache.druid.query.aggregation.first;\n \n-import org.apache.druid.collections.SerializablePair;\n-import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n+import org.apache.druid.query.aggregation.SerializablePairLongDouble;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n-public class DoubleFirstAggregator extends NumericFirstAggregator<BaseDoubleColumnValueSelector>\n+public class DoubleFirstAggregator extends NumericFirstAggregator\n {\n   double firstValue;\n \n-  public DoubleFirstAggregator(BaseLongColumnValueSelector timeSelector, BaseDoubleColumnValueSelector valueSelector)\n+  public DoubleFirstAggregator(BaseLongColumnValueSelector timeSelector,\n+                               ColumnValueSelector valueSelector,\n+                               boolean needsFoldCheck)\n   {\n-    super(timeSelector, valueSelector);\n+    super(timeSelector, valueSelector, needsFoldCheck);\n     firstValue = 0;\n   }\n \n   @Override\n-  void setCurrentValue()\n+  void setCurrentValue(ColumnValueSelector valueSelector)\n   {\n     firstValue = valueSelector.getDouble();\n   }\n \n+  @Override\n+  void setCurrentValue(Number number)\n+  {\n+    firstValue = number.doubleValue();\n+  }\n+\n   @Override\n   public Object get()\n   {\n-    return new SerializablePair<>(firstTime, rhsNull ? null : firstValue);\n+    return new SerializablePairLongDouble(firstTime, rhsNull ? null : firstValue);\n   }\n \n   @Override"
  },
  {
    "sha": "f7f00599d1681417b49a91562c9520ea173cab48",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregatorFactory.java",
    "status": "modified",
    "additions": 43,
    "deletions": 83,
    "changes": 126,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregatorFactory.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -21,17 +21,17 @@\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n import com.google.common.base.Preconditions;\n import org.apache.druid.collections.SerializablePair;\n import org.apache.druid.java.util.common.StringUtils;\n-import org.apache.druid.java.util.common.UOE;\n import org.apache.druid.query.aggregation.AggregateCombiner;\n import org.apache.druid.query.aggregation.Aggregator;\n import org.apache.druid.query.aggregation.AggregatorFactory;\n import org.apache.druid.query.aggregation.AggregatorUtil;\n import org.apache.druid.query.aggregation.BufferAggregator;\n-import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n-import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n+import org.apache.druid.query.aggregation.SerializablePairLongDouble;\n+import org.apache.druid.query.aggregation.SerializablePairLongDoubleSerde;\n import org.apache.druid.segment.ColumnSelectorFactory;\n import org.apache.druid.segment.ColumnValueSelector;\n import org.apache.druid.segment.NilColumnValueSelector;\n@@ -47,11 +47,13 @@\n import java.util.Map;\n import java.util.Objects;\n \n+@JsonTypeName(\"doubleFirst\")\n public class DoubleFirstAggregatorFactory extends AggregatorFactory\n {\n   private static final Aggregator NIL_AGGREGATOR = new DoubleFirstAggregator(\n       NilColumnValueSelector.instance(),\n-      NilColumnValueSelector.instance()\n+      NilColumnValueSelector.instance(),\n+      false\n   )\n   {\n     @Override\n@@ -63,7 +65,8 @@ public void aggregate()\n \n   private static final BufferAggregator NIL_BUFFER_AGGREGATOR = new DoubleFirstBufferAggregator(\n       NilColumnValueSelector.instance(),\n-      NilColumnValueSelector.instance()\n+      NilColumnValueSelector.instance(),\n+      false\n   )\n   {\n     @Override\n@@ -97,29 +100,39 @@ public DoubleFirstAggregatorFactory(\n   @Override\n   public Aggregator factorize(ColumnSelectorFactory metricFactory)\n   {\n-    final BaseDoubleColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n+    final ColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n     if (valueSelector instanceof NilColumnValueSelector) {\n       return NIL_AGGREGATOR;\n-    } else {\n-      return new DoubleFirstAggregator(\n-          metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n-          valueSelector\n-      );\n     }\n+\n+    return new DoubleFirstAggregator(\n+        metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n+        valueSelector,\n+        StringFirstLastUtils.selectorNeedsFoldCheck(\n+            valueSelector,\n+            metricFactory.getColumnCapabilities(fieldName),\n+            SerializablePairLongDouble.class\n+        )\n+    );\n   }\n \n   @Override\n   public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n   {\n-    final BaseDoubleColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n-    if (valueSelector instanceof NilColumnValueSelector) {\n+    final ColumnValueSelector selector = metricFactory.makeColumnValueSelector(fieldName);\n+    if (selector instanceof NilColumnValueSelector) {\n       return NIL_BUFFER_AGGREGATOR;\n-    } else {\n-      return new DoubleFirstBufferAggregator(\n-          metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n-          valueSelector\n-      );\n     }\n+\n+    return new DoubleFirstBufferAggregator(\n+        metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n+        selector,\n+        StringFirstLastUtils.selectorNeedsFoldCheck(\n+            selector,\n+            metricFactory.getColumnCapabilities(fieldName),\n+            SerializablePairLongDouble.class\n+        )\n+    );\n   }\n \n   @Override\n@@ -150,74 +163,13 @@ public Object combine(@Nullable Object lhs, @Nullable Object rhs)\n   @Override\n   public AggregateCombiner makeAggregateCombiner()\n   {\n-    throw new UOE(\"DoubleFirstAggregatorFactory is not supported during ingestion for rollup\");\n+    return new GenericFirstAggregateCombiner(SerializablePairLongDouble.class);\n   }\n \n   @Override\n   public AggregatorFactory getCombiningFactory()\n   {\n-    return new DoubleFirstAggregatorFactory(name, name)\n-    {\n-      @Override\n-      public Aggregator factorize(ColumnSelectorFactory metricFactory)\n-      {\n-        final ColumnValueSelector<SerializablePair<Long, Double>> selector =\n-            metricFactory.makeColumnValueSelector(name);\n-        return new DoubleFirstAggregator(null, null)\n-        {\n-          @Override\n-          public void aggregate()\n-          {\n-            SerializablePair<Long, Double> pair = selector.getObject();\n-            if (pair.lhs < firstTime) {\n-              firstTime = pair.lhs;\n-              if (pair.rhs != null) {\n-                firstValue = pair.rhs;\n-                rhsNull = false;\n-              } else {\n-                rhsNull = true;\n-              }\n-            }\n-          }\n-        };\n-      }\n-\n-      @Override\n-      public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n-      {\n-        final ColumnValueSelector<SerializablePair<Long, Double>> selector =\n-            metricFactory.makeColumnValueSelector(name);\n-        return new DoubleFirstBufferAggregator(null, null)\n-        {\n-          @Override\n-          public void putValue(ByteBuffer buf, int position)\n-          {\n-            SerializablePair<Long, Double> pair = selector.getObject();\n-            buf.putDouble(position, pair.rhs);\n-          }\n-\n-          @Override\n-          public void aggregate(ByteBuffer buf, int position)\n-          {\n-            SerializablePair<Long, Double> pair = (SerializablePair<Long, Double>) selector.getObject();\n-            long firstTime = buf.getLong(position);\n-            if (pair.lhs < firstTime) {\n-              if (pair.rhs != null) {\n-                updateTimeWithValue(buf, position, pair.lhs);\n-              } else {\n-                updateTimeWithNull(buf, position, pair.lhs);\n-              }\n-            }\n-          }\n-\n-          @Override\n-          public void inspectRuntimeShape(RuntimeShapeInspector inspector)\n-          {\n-            inspector.visit(\"selector\", selector);\n-          }\n-        };\n-      }\n-    };\n+    return new DoubleFirstAggregatorFactory(name, name);\n   }\n \n   @Override\n@@ -273,11 +225,19 @@ public String getFieldName()\n                      .array();\n   }\n \n+  @Override\n+  public String getComplexTypeName()\n+  {\n+    return SerializablePairLongDoubleSerde.TYPE_NAME;\n+  }\n+\n+  /**\n+   * actual type is {@link SerializablePair<Long, Double>}\n+   */\n   @Override\n   public ValueType getType()\n   {\n-    // if we don't pretend to be a primitive, group by v1 gets sad and doesn't work because no complex type serde\n-    return storeDoubleAsFloat ? ValueType.FLOAT : ValueType.DOUBLE;\n+    return ValueType.COMPLEX;\n   }\n \n   @Override"
  },
  {
    "sha": "9b56104b7192bbb610fb8556dc3485711789bb30",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstBufferAggregator.java",
    "status": "modified",
    "additions": 17,
    "deletions": 7,
    "changes": 24,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstBufferAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstBufferAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstBufferAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,20 +19,21 @@\n \n package org.apache.druid.query.aggregation.first;\n \n-import org.apache.druid.collections.SerializablePair;\n-import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n+import org.apache.druid.query.aggregation.SerializablePairLongDouble;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n import java.nio.ByteBuffer;\n \n-public class DoubleFirstBufferAggregator extends NumericFirstBufferAggregator<BaseDoubleColumnValueSelector>\n+public class DoubleFirstBufferAggregator extends NumericFirstBufferAggregator\n {\n   public DoubleFirstBufferAggregator(\n       BaseLongColumnValueSelector timeSelector,\n-      BaseDoubleColumnValueSelector valueSelector\n+      ColumnValueSelector valueSelector,\n+      boolean needsFoldCheck\n   )\n   {\n-    super(timeSelector, valueSelector);\n+    super(timeSelector, valueSelector, needsFoldCheck);\n   }\n \n   @Override\n@@ -42,16 +43,25 @@ void initValue(ByteBuffer buf, int position)\n   }\n \n   @Override\n-  void putValue(ByteBuffer buf, int position)\n+  void putValue(ByteBuffer buf, int position, ColumnValueSelector valueSelector)\n   {\n     buf.putDouble(position, valueSelector.getDouble());\n   }\n \n+  @Override\n+  void putValue(ByteBuffer buf, int position, Number value)\n+  {\n+    buf.putDouble(position, value.doubleValue());\n+  }\n+\n   @Override\n   public Object get(ByteBuffer buf, int position)\n   {\n     final boolean rhsNull = isValueNull(buf, position);\n-    return new SerializablePair<>(buf.getLong(position), rhsNull ? null : buf.getDouble(position + VALUE_OFFSET));\n+    return new SerializablePairLongDouble(\n+        buf.getLong(position),\n+        rhsNull ? null : buf.getDouble(position + VALUE_OFFSET)\n+    );\n   }\n \n   @Override"
  },
  {
    "sha": "bbf568f124700332160e778e27423372ba7b4bd4",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstAggregator.java",
    "status": "modified",
    "additions": 14,
    "deletions": 7,
    "changes": 21,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,33 +19,40 @@\n \n package org.apache.druid.query.aggregation.first;\n \n-import org.apache.druid.collections.SerializablePair;\n-import org.apache.druid.segment.BaseFloatColumnValueSelector;\n+import org.apache.druid.query.aggregation.SerializablePairLongFloat;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n-public class FloatFirstAggregator extends NumericFirstAggregator<BaseFloatColumnValueSelector>\n+public class FloatFirstAggregator extends NumericFirstAggregator\n {\n   float firstValue;\n \n   public FloatFirstAggregator(\n       BaseLongColumnValueSelector timeSelector,\n-      BaseFloatColumnValueSelector valueSelector\n+      ColumnValueSelector valueSelector,\n+      boolean needsFoldCheck\n   )\n   {\n-    super(timeSelector, valueSelector);\n+    super(timeSelector, valueSelector, needsFoldCheck);\n     firstValue = 0;\n   }\n \n   @Override\n-  void setCurrentValue()\n+  void setCurrentValue(ColumnValueSelector valueSelector)\n   {\n     firstValue = valueSelector.getFloat();\n   }\n \n+  @Override\n+  void setCurrentValue(Number number)\n+  {\n+    firstValue = number.floatValue();\n+  }\n+\n   @Override\n   public Object get()\n   {\n-    return new SerializablePair<>(firstTime, rhsNull ? null : firstValue);\n+    return new SerializablePairLongFloat(firstTime, rhsNull ? null : firstValue);\n   }\n \n   @Override"
  },
  {
    "sha": "d7fe64225d5f75ea01e9db56428230e83788ec77",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstAggregatorFactory.java",
    "status": "modified",
    "additions": 44,
    "deletions": 83,
    "changes": 127,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstAggregatorFactory.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -21,17 +21,17 @@\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n import com.google.common.base.Preconditions;\n import org.apache.druid.collections.SerializablePair;\n import org.apache.druid.java.util.common.StringUtils;\n-import org.apache.druid.java.util.common.UOE;\n import org.apache.druid.query.aggregation.AggregateCombiner;\n import org.apache.druid.query.aggregation.Aggregator;\n import org.apache.druid.query.aggregation.AggregatorFactory;\n import org.apache.druid.query.aggregation.AggregatorUtil;\n import org.apache.druid.query.aggregation.BufferAggregator;\n-import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n-import org.apache.druid.segment.BaseFloatColumnValueSelector;\n+import org.apache.druid.query.aggregation.SerializablePairLongFloat;\n+import org.apache.druid.query.aggregation.SerializablePairLongFloatSerde;\n import org.apache.druid.segment.ColumnSelectorFactory;\n import org.apache.druid.segment.ColumnValueSelector;\n import org.apache.druid.segment.NilColumnValueSelector;\n@@ -47,11 +47,13 @@\n import java.util.Map;\n import java.util.Objects;\n \n+@JsonTypeName(\"floatFirst\")\n public class FloatFirstAggregatorFactory extends AggregatorFactory\n {\n   private static final Aggregator NIL_AGGREGATOR = new FloatFirstAggregator(\n       NilColumnValueSelector.instance(),\n-      NilColumnValueSelector.instance()\n+      NilColumnValueSelector.instance(),\n+      false\n   )\n   {\n     @Override\n@@ -63,7 +65,8 @@ public void aggregate()\n \n   private static final BufferAggregator NIL_BUFFER_AGGREGATOR = new FloatFirstBufferAggregator(\n       NilColumnValueSelector.instance(),\n-      NilColumnValueSelector.instance()\n+      NilColumnValueSelector.instance(),\n+      false\n   )\n   {\n     @Override\n@@ -95,29 +98,39 @@ public FloatFirstAggregatorFactory(\n   @Override\n   public Aggregator factorize(ColumnSelectorFactory metricFactory)\n   {\n-    final BaseFloatColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n-    if (valueSelector instanceof NilColumnValueSelector) {\n+    final ColumnValueSelector selector = metricFactory.makeColumnValueSelector(fieldName);\n+    if (selector instanceof NilColumnValueSelector) {\n       return NIL_AGGREGATOR;\n-    } else {\n-      return new FloatFirstAggregator(\n-          metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n-          valueSelector\n-      );\n     }\n+\n+    return new FloatFirstAggregator(\n+        metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n+        selector,\n+        StringFirstLastUtils.selectorNeedsFoldCheck(\n+            selector,\n+            metricFactory.getColumnCapabilities(fieldName),\n+            SerializablePairLongFloat.class\n+        )\n+    );\n   }\n \n   @Override\n   public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n   {\n-    final BaseFloatColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n-    if (valueSelector instanceof NilColumnValueSelector) {\n+    final ColumnValueSelector selector = metricFactory.makeColumnValueSelector(fieldName);\n+    if (selector instanceof NilColumnValueSelector) {\n       return NIL_BUFFER_AGGREGATOR;\n-    } else {\n-      return new FloatFirstBufferAggregator(\n-          metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n-          valueSelector\n-      );\n     }\n+\n+    return new FloatFirstBufferAggregator(\n+        metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n+        selector,\n+        StringFirstLastUtils.selectorNeedsFoldCheck(\n+            selector,\n+            metricFactory.getColumnCapabilities(fieldName),\n+            SerializablePairLongFloat.class\n+        )\n+    );\n   }\n \n   @Override\n@@ -148,73 +161,13 @@ public Object combine(@Nullable Object lhs, @Nullable Object rhs)\n   @Override\n   public AggregateCombiner makeAggregateCombiner()\n   {\n-    throw new UOE(\"FloatFirstAggregatorFactory is not supported during ingestion for rollup\");\n+    return new GenericFirstAggregateCombiner(SerializablePairLongFloat.class);\n   }\n \n   @Override\n   public AggregatorFactory getCombiningFactory()\n   {\n-\n-    return new FloatFirstAggregatorFactory(name, name)\n-    {\n-      @Override\n-      public Aggregator factorize(ColumnSelectorFactory metricFactory)\n-      {\n-        final ColumnValueSelector<SerializablePair<Long, Float>> selector = metricFactory.makeColumnValueSelector(name);\n-        return new FloatFirstAggregator(null, null)\n-        {\n-          @Override\n-          public void aggregate()\n-          {\n-            SerializablePair<Long, Float> pair = selector.getObject();\n-            if (pair.lhs < firstTime) {\n-              firstTime = pair.lhs;\n-              if (pair.rhs != null) {\n-                firstValue = pair.rhs;\n-                rhsNull = false;\n-              } else {\n-                rhsNull = true;\n-              }\n-            }\n-          }\n-        };\n-      }\n-\n-      @Override\n-      public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n-      {\n-        final ColumnValueSelector<SerializablePair<Long, Float>> selector = metricFactory.makeColumnValueSelector(name);\n-        return new FloatFirstBufferAggregator(null, null)\n-        {\n-          @Override\n-          public void putValue(ByteBuffer buf, int position)\n-          {\n-            SerializablePair<Long, Float> pair = selector.getObject();\n-            buf.putFloat(position, pair.rhs);\n-          }\n-\n-          @Override\n-          public void aggregate(ByteBuffer buf, int position)\n-          {\n-            SerializablePair<Long, Float> pair = selector.getObject();\n-            long firstTime = buf.getLong(position);\n-            if (pair.lhs < firstTime) {\n-              if (pair.rhs != null) {\n-                updateTimeWithValue(buf, position, pair.lhs);\n-              } else {\n-                updateTimeWithNull(buf, position, pair.lhs);\n-              }\n-            }\n-          }\n-\n-          @Override\n-          public void inspectRuntimeShape(RuntimeShapeInspector inspector)\n-          {\n-            inspector.visit(\"selector\", selector);\n-          }\n-        };\n-      }\n-    };\n+    return new FloatFirstAggregatorFactory(name, name);\n   }\n \n   @Override\n@@ -270,11 +223,19 @@ public String getFieldName()\n                      .array();\n   }\n \n+  @Override\n+  public String getComplexTypeName()\n+  {\n+    return SerializablePairLongFloatSerde.TYPE_NAME;\n+  }\n+\n+  /**\n+   * actual type is {@link SerializablePair<Long, Float>}\n+   */\n   @Override\n   public ValueType getType()\n   {\n-    // if we don't pretend to be a primitive, group by v1 gets sad and doesn't work because no complex type serde\n-    return ValueType.FLOAT;\n+    return ValueType.COMPLEX;\n   }\n \n   @Override"
  },
  {
    "sha": "e4cdfbf11a8857eea6ef19af5d6ddecb9cb38a1f",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstBufferAggregator.java",
    "status": "modified",
    "additions": 14,
    "deletions": 7,
    "changes": 21,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstBufferAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstBufferAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/FloatFirstBufferAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,20 +19,21 @@\n \n package org.apache.druid.query.aggregation.first;\n \n-import org.apache.druid.collections.SerializablePair;\n-import org.apache.druid.segment.BaseFloatColumnValueSelector;\n+import org.apache.druid.query.aggregation.SerializablePairLongFloat;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n import java.nio.ByteBuffer;\n \n-public class FloatFirstBufferAggregator extends NumericFirstBufferAggregator<BaseFloatColumnValueSelector>\n+public class FloatFirstBufferAggregator extends NumericFirstBufferAggregator\n {\n   public FloatFirstBufferAggregator(\n       BaseLongColumnValueSelector timeSelector,\n-      BaseFloatColumnValueSelector valueSelector\n+      ColumnValueSelector valueSelector,\n+      boolean needsFoldCheck\n   )\n   {\n-    super(timeSelector, valueSelector);\n+    super(timeSelector, valueSelector, needsFoldCheck);\n   }\n \n   @Override\n@@ -42,16 +43,22 @@ void initValue(ByteBuffer buf, int position)\n   }\n \n   @Override\n-  void putValue(ByteBuffer buf, int position)\n+  void putValue(ByteBuffer buf, int position, ColumnValueSelector valueSelector)\n   {\n     buf.putFloat(position, valueSelector.getFloat());\n   }\n \n+  @Override\n+  void putValue(ByteBuffer buf, int position, Number value)\n+  {\n+    buf.putFloat(position, value.floatValue());\n+  }\n+\n   @Override\n   public Object get(ByteBuffer buf, int position)\n   {\n     final boolean rhsNull = isValueNull(buf, position);\n-    return new SerializablePair<>(buf.getLong(position), rhsNull ? null : buf.getFloat(position + VALUE_OFFSET));\n+    return new SerializablePairLongFloat(buf.getLong(position), rhsNull ? null : buf.getFloat(position + VALUE_OFFSET));\n   }\n \n   @Override"
  },
  {
    "sha": "caba5ac003bbeea4c5e271be51e9558ba1c74743",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/GenericFirstAggregateCombiner.java",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/GenericFirstAggregateCombiner.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/GenericFirstAggregateCombiner.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/GenericFirstAggregateCombiner.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.first;\n+\n+import com.google.common.primitives.Longs;\n+import org.apache.druid.collections.SerializablePair;\n+import org.apache.druid.query.aggregation.ObjectAggregateCombiner;\n+import org.apache.druid.segment.ColumnValueSelector;\n+\n+import javax.annotation.Nullable;\n+\n+public class GenericFirstAggregateCombiner<T extends SerializablePair<Long, ?>>\n+    extends ObjectAggregateCombiner<T>\n+{\n+  private final Class<T> pairClass;\n+  private T firstValue;\n+\n+  public GenericFirstAggregateCombiner(Class<T> pairClass)\n+  {\n+    this.pairClass = pairClass;\n+  }\n+\n+  @Override\n+  public void reset(ColumnValueSelector selector)\n+  {\n+    firstValue = (T) selector.getObject();\n+  }\n+\n+  @Override\n+  public void fold(ColumnValueSelector selector)\n+  {\n+    T newValue = (T) selector.getObject();\n+\n+    if (Longs.compare(firstValue.lhs, newValue.lhs) > 0) {\n+      firstValue = newValue;\n+    }\n+  }\n+\n+  @Nullable\n+  @Override\n+  public T getObject()\n+  {\n+    return firstValue;\n+  }\n+\n+  @Override\n+  public Class<T> classOfObject()\n+  {\n+    return this.pairClass;\n+  }\n+}"
  },
  {
    "sha": "b76b67bbae0e41e05b8cfab7f1716bb8be6257a0",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstAggregator.java",
    "status": "modified",
    "additions": 15,
    "deletions": 6,
    "changes": 21,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,29 +19,38 @@\n \n package org.apache.druid.query.aggregation.first;\n \n-import org.apache.druid.collections.SerializablePair;\n+import org.apache.druid.query.aggregation.SerializablePairLongLong;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n-public class LongFirstAggregator extends NumericFirstAggregator<BaseLongColumnValueSelector>\n+public class LongFirstAggregator extends NumericFirstAggregator\n {\n   long firstValue;\n \n-  public LongFirstAggregator(BaseLongColumnValueSelector timeSelector, BaseLongColumnValueSelector valueSelector)\n+  public LongFirstAggregator(BaseLongColumnValueSelector timeSelector,\n+                             ColumnValueSelector valueSelector,\n+                             boolean needsFoldCheck)\n   {\n-    super(timeSelector, valueSelector);\n+    super(timeSelector, valueSelector, needsFoldCheck);\n     firstValue = 0;\n   }\n \n   @Override\n-  void setCurrentValue()\n+  void setCurrentValue(ColumnValueSelector valueSelector)\n   {\n     firstValue = valueSelector.getLong();\n   }\n \n+  @Override\n+  void setCurrentValue(Number number)\n+  {\n+    firstValue = number.longValue();\n+  }\n+\n   @Override\n   public Object get()\n   {\n-    return new SerializablePair<>(firstTime, rhsNull ? null : firstValue);\n+    return new SerializablePairLongLong(firstTime, rhsNull ? null : firstValue);\n   }\n \n   @Override"
  },
  {
    "sha": "30a083e30ec7f1b79bcd541320dc0eeb98309d8e",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstAggregatorFactory.java",
    "status": "modified",
    "additions": 44,
    "deletions": 81,
    "changes": 125,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstAggregatorFactory.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -21,17 +21,17 @@\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n import com.google.common.base.Preconditions;\n import org.apache.druid.collections.SerializablePair;\n import org.apache.druid.java.util.common.StringUtils;\n-import org.apache.druid.java.util.common.UOE;\n import org.apache.druid.query.aggregation.AggregateCombiner;\n import org.apache.druid.query.aggregation.Aggregator;\n import org.apache.druid.query.aggregation.AggregatorFactory;\n import org.apache.druid.query.aggregation.AggregatorUtil;\n import org.apache.druid.query.aggregation.BufferAggregator;\n-import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n-import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.query.aggregation.SerializablePairLongLong;\n+import org.apache.druid.query.aggregation.SerializablePairLongLongSerde;\n import org.apache.druid.segment.ColumnSelectorFactory;\n import org.apache.druid.segment.ColumnValueSelector;\n import org.apache.druid.segment.NilColumnValueSelector;\n@@ -46,11 +46,13 @@\n import java.util.List;\n import java.util.Map;\n \n+@JsonTypeName(\"longFirst\")\n public class LongFirstAggregatorFactory extends AggregatorFactory\n {\n   private static final Aggregator NIL_AGGREGATOR = new LongFirstAggregator(\n       NilColumnValueSelector.instance(),\n-      NilColumnValueSelector.instance()\n+      NilColumnValueSelector.instance(),\n+      false\n   )\n   {\n     @Override\n@@ -62,7 +64,8 @@ public void aggregate()\n \n   private static final BufferAggregator NIL_BUFFER_AGGREGATOR = new LongFirstBufferAggregator(\n       NilColumnValueSelector.instance(),\n-      NilColumnValueSelector.instance()\n+      NilColumnValueSelector.instance(),\n+      false\n   )\n   {\n     @Override\n@@ -94,29 +97,39 @@ public LongFirstAggregatorFactory(\n   @Override\n   public Aggregator factorize(ColumnSelectorFactory metricFactory)\n   {\n-    final BaseLongColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n+    final ColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n     if (valueSelector instanceof NilColumnValueSelector) {\n       return NIL_AGGREGATOR;\n-    } else {\n-      return new LongFirstAggregator(\n-          metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n-          valueSelector\n-      );\n     }\n+\n+    return new LongFirstAggregator(\n+        metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n+        valueSelector,\n+        StringFirstLastUtils.selectorNeedsFoldCheck(\n+            valueSelector,\n+            metricFactory.getColumnCapabilities(fieldName),\n+            SerializablePairLongLong.class\n+        )\n+    );\n   }\n \n   @Override\n   public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n   {\n-    final BaseLongColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n-    if (valueSelector instanceof NilColumnValueSelector) {\n+    final ColumnValueSelector selector = metricFactory.makeColumnValueSelector(fieldName);\n+    if (selector instanceof NilColumnValueSelector) {\n       return NIL_BUFFER_AGGREGATOR;\n-    } else {\n-      return new LongFirstBufferAggregator(\n-          metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n-          valueSelector\n-      );\n     }\n+\n+    return new LongFirstBufferAggregator(\n+        metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n+        selector,\n+        StringFirstLastUtils.selectorNeedsFoldCheck(\n+            selector,\n+            metricFactory.getColumnCapabilities(fieldName),\n+            SerializablePairLongLong.class\n+        )\n+    );\n   }\n \n   @Override\n@@ -147,72 +160,13 @@ public Object combine(@Nullable Object lhs, @Nullable Object rhs)\n   @Override\n   public AggregateCombiner makeAggregateCombiner()\n   {\n-    throw new UOE(\"LongFirstAggregatorFactory is not supported during ingestion for rollup\");\n+    return new GenericFirstAggregateCombiner(SerializablePairLongLong.class);\n   }\n \n   @Override\n   public AggregatorFactory getCombiningFactory()\n   {\n-    return new LongFirstAggregatorFactory(name, name)\n-    {\n-      @Override\n-      public Aggregator factorize(ColumnSelectorFactory metricFactory)\n-      {\n-        final ColumnValueSelector<SerializablePair<Long, Long>> selector = metricFactory.makeColumnValueSelector(name);\n-        return new LongFirstAggregator(null, null)\n-        {\n-          @Override\n-          public void aggregate()\n-          {\n-            SerializablePair<Long, Long> pair = selector.getObject();\n-            if (pair.lhs < firstTime) {\n-              firstTime = pair.lhs;\n-              if (pair.rhs != null) {\n-                firstValue = pair.rhs;\n-                rhsNull = false;\n-              } else {\n-                rhsNull = true;\n-              }\n-            }\n-          }\n-        };\n-      }\n-\n-      @Override\n-      public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n-      {\n-        final ColumnValueSelector<SerializablePair<Long, Long>> selector = metricFactory.makeColumnValueSelector(name);\n-        return new LongFirstBufferAggregator(null, null)\n-        {\n-          @Override\n-          public void putValue(ByteBuffer buf, int position)\n-          {\n-            SerializablePair<Long, Long> pair = selector.getObject();\n-            buf.putLong(position, pair.rhs);\n-          }\n-\n-          @Override\n-          public void aggregate(ByteBuffer buf, int position)\n-          {\n-            SerializablePair<Long, Long> pair = selector.getObject();\n-            long firstTime = buf.getLong(position);\n-            if (pair.lhs < firstTime) {\n-              if (pair.rhs != null) {\n-                updateTimeWithValue(buf, position, pair.lhs);\n-              } else {\n-                updateTimeWithNull(buf, position, pair.lhs);\n-              }\n-            }\n-          }\n-\n-          @Override\n-          public void inspectRuntimeShape(RuntimeShapeInspector inspector)\n-          {\n-            inspector.visit(\"selector\", selector);\n-          }\n-        };\n-      }\n-    };\n+    return new LongFirstAggregatorFactory(name, name);\n   }\n \n   @Override\n@@ -268,11 +222,19 @@ public String getFieldName()\n                      .array();\n   }\n \n+  @Override\n+  public String getComplexTypeName()\n+  {\n+    return SerializablePairLongLongSerde.TYPE_NAME;\n+  }\n+\n+  /**\n+   * actual type is {@link SerializablePair<Long, Long>}\n+   */\n   @Override\n   public ValueType getType()\n   {\n-    // if we don't pretend to be a primitive, group by v1 gets sad and doesn't work because no complex type serde\n-    return ValueType.LONG;\n+    return ValueType.COMPLEX;\n   }\n \n   @Override\n@@ -319,4 +281,5 @@ public String toString()\n            \", fieldName='\" + fieldName + '\\'' +\n            '}';\n   }\n+\n }"
  },
  {
    "sha": "ba41f1da70a6935aab67fde02093d37e3dbbaa06",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstBufferAggregator.java",
    "status": "modified",
    "additions": 17,
    "deletions": 6,
    "changes": 23,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstBufferAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstBufferAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/LongFirstBufferAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,16 +19,21 @@\n \n package org.apache.druid.query.aggregation.first;\n \n-import org.apache.druid.collections.SerializablePair;\n+import org.apache.druid.query.aggregation.SerializablePairLongLong;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n import java.nio.ByteBuffer;\n \n-public class LongFirstBufferAggregator extends NumericFirstBufferAggregator<BaseLongColumnValueSelector>\n+public class LongFirstBufferAggregator extends NumericFirstBufferAggregator\n {\n-  public LongFirstBufferAggregator(BaseLongColumnValueSelector timeSelector, BaseLongColumnValueSelector valueSelector)\n+  public LongFirstBufferAggregator(\n+      BaseLongColumnValueSelector timeSelector,\n+      ColumnValueSelector valueSelector,\n+      boolean needsFoldCheck\n+  )\n   {\n-    super(timeSelector, valueSelector);\n+    super(timeSelector, valueSelector, needsFoldCheck);\n   }\n \n   @Override\n@@ -38,16 +43,22 @@ void initValue(ByteBuffer buf, int position)\n   }\n \n   @Override\n-  void putValue(ByteBuffer buf, int position)\n+  void putValue(ByteBuffer buf, int position, ColumnValueSelector valueSelector)\n   {\n     buf.putLong(position, valueSelector.getLong());\n   }\n \n+  @Override\n+  void putValue(ByteBuffer buf, int position, Number value)\n+  {\n+    buf.putLong(position, value.longValue());\n+  }\n+\n   @Override\n   public Object get(ByteBuffer buf, int position)\n   {\n     final boolean rhsNull = isValueNull(buf, position);\n-    return new SerializablePair<>(buf.getLong(position), rhsNull ? null : buf.getLong(position + VALUE_OFFSET));\n+    return new SerializablePairLongLong(buf.getLong(position), rhsNull ? null : buf.getLong(position + VALUE_OFFSET));\n   }\n \n   @Override"
  },
  {
    "sha": "444bcc39bb466c66b76eba7884091c12b5a0cb97",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstAggregator.java",
    "status": "modified",
    "additions": 41,
    "deletions": 7,
    "changes": 48,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,28 +19,34 @@\n \n package org.apache.druid.query.aggregation.first;\n \n+import org.apache.druid.collections.SerializablePair;\n import org.apache.druid.common.config.NullHandling;\n import org.apache.druid.query.aggregation.Aggregator;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n-import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n /**\n  * Base type for on heap 'first' aggregator for primitive numeric column selectors\n  */\n-public abstract class NumericFirstAggregator<TSelector extends BaseNullableColumnValueSelector> implements Aggregator\n+public abstract class NumericFirstAggregator implements Aggregator\n {\n   private final boolean useDefault = NullHandling.replaceWithDefault();\n   private final BaseLongColumnValueSelector timeSelector;\n-\n-  final TSelector valueSelector;\n+  private final ColumnValueSelector valueSelector;\n+  private final boolean needsFoldCheck;\n \n   long firstTime;\n   boolean rhsNull;\n \n-  public NumericFirstAggregator(BaseLongColumnValueSelector timeSelector, TSelector valueSelector)\n+  public NumericFirstAggregator(\n+      BaseLongColumnValueSelector timeSelector,\n+      ColumnValueSelector valueSelector,\n+      boolean needsFoldCheck\n+  )\n   {\n     this.timeSelector = timeSelector;\n     this.valueSelector = valueSelector;\n+    this.needsFoldCheck = needsFoldCheck;\n \n     firstTime = Long.MAX_VALUE;\n     rhsNull = !useDefault;\n@@ -49,16 +55,44 @@ public NumericFirstAggregator(BaseLongColumnValueSelector timeSelector, TSelecto\n   /**\n    * Store the current primitive typed 'first' value\n    */\n-  abstract void setCurrentValue();\n+  abstract void setCurrentValue(ColumnValueSelector valueSelector);\n+\n+  abstract void setCurrentValue(Number number);\n \n   @Override\n   public void aggregate()\n   {\n+    if (needsFoldCheck) {\n+\n+      // Need to read this first (before time), just in case it's a SerializablePairLongString (we don't know; it's\n+      // detected at query time).\n+      final Object object = valueSelector.getObject();\n+\n+      if (object instanceof SerializablePair) {\n+\n+        // cast to Pair<Long, Number> to support reindex from type such as doubleFirst into longFirst\n+        final SerializablePair<Long, Number> pair = (SerializablePair<Long, Number>) object;\n+        if (pair.lhs < firstTime) {\n+          firstTime = pair.lhs;\n+\n+          // rhs might be NULL under SQL-compatibility mode\n+          if (pair.rhs == null) {\n+            rhsNull = true;\n+          } else {\n+            rhsNull = false;\n+            setCurrentValue(pair.rhs);\n+          }\n+        }\n+\n+        return;\n+      }\n+    }\n+\n     long time = timeSelector.getLong();\n     if (time < firstTime) {\n       firstTime = time;\n       if (useDefault || !valueSelector.isNull()) {\n-        setCurrentValue();\n+        setCurrentValue(valueSelector);\n         rhsNull = false;\n       } else {\n         rhsNull = true;"
  },
  {
    "sha": "ae878e5de90bba0b1be64340ccb07b92707710e7",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstBufferAggregator.java",
    "status": "modified",
    "additions": 48,
    "deletions": 11,
    "changes": 59,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstBufferAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstBufferAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstBufferAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,32 +19,38 @@\n \n package org.apache.druid.query.aggregation.first;\n \n+import org.apache.druid.collections.SerializablePair;\n import org.apache.druid.common.config.NullHandling;\n import org.apache.druid.query.aggregation.BufferAggregator;\n import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n-import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n import java.nio.ByteBuffer;\n \n /**\n  * Base type for buffer based 'first' aggregator for primitive numeric column selectors\n  */\n-public abstract class NumericFirstBufferAggregator<TSelector extends BaseNullableColumnValueSelector>\n+public abstract class NumericFirstBufferAggregator\n     implements BufferAggregator\n {\n   static final int NULL_OFFSET = Long.BYTES;\n   static final int VALUE_OFFSET = NULL_OFFSET + Byte.BYTES;\n \n   private final boolean useDefault = NullHandling.replaceWithDefault();\n   private final BaseLongColumnValueSelector timeSelector;\n-\n-  final TSelector valueSelector;\n-\n-  public NumericFirstBufferAggregator(BaseLongColumnValueSelector timeSelector, TSelector valueSelector)\n+  private final ColumnValueSelector valueSelector;\n+  private final boolean needsFoldCheck;\n+\n+  public NumericFirstBufferAggregator(\n+      BaseLongColumnValueSelector timeSelector,\n+      ColumnValueSelector valueSelector,\n+      boolean needsFoldCheck\n+  )\n   {\n     this.timeSelector = timeSelector;\n     this.valueSelector = valueSelector;\n+    this.needsFoldCheck = needsFoldCheck;\n   }\n \n   /**\n@@ -55,13 +61,22 @@ public NumericFirstBufferAggregator(BaseLongColumnValueSelector timeSelector, TS\n   /**\n    * Place the primitive value in the buffer at the position of {@link #VALUE_OFFSET}\n    */\n-  abstract void putValue(ByteBuffer buf, int position);\n+  abstract void putValue(ByteBuffer buf, int position, ColumnValueSelector valueSector);\n+\n+  abstract void putValue(ByteBuffer buf, int position, Number value);\n \n-  void updateTimeWithValue(ByteBuffer buf, int position, long time)\n+  void updateTimeWithValue(ByteBuffer buf, int position, long time, ColumnValueSelector valueSelector)\n   {\n     buf.putLong(position, time);\n     buf.put(position + NULL_OFFSET, NullHandling.IS_NOT_NULL_BYTE);\n-    putValue(buf, position + VALUE_OFFSET);\n+    putValue(buf, position + VALUE_OFFSET, valueSelector);\n+  }\n+\n+  void updateTimeWithValue(ByteBuffer buf, int position, long time, Number value)\n+  {\n+    buf.putLong(position, time);\n+    buf.put(position + NULL_OFFSET, NullHandling.IS_NOT_NULL_BYTE);\n+    putValue(buf, position + VALUE_OFFSET, value);\n   }\n \n   void updateTimeWithNull(ByteBuffer buf, int position, long time)\n@@ -86,11 +101,33 @@ public void init(ByteBuffer buf, int position)\n   @Override\n   public void aggregate(ByteBuffer buf, int position)\n   {\n+    final long firstTime = buf.getLong(position);\n+    if (needsFoldCheck) {\n+\n+      // Need to read this first (before time), just in case it's a SerializablePairLongString (we don't know; it's\n+      // detected at query time).\n+      final Object object = valueSelector.getObject();\n+\n+      if (object instanceof SerializablePair) {\n+\n+        // cast to Pair<Long, Number> to support reindex such as doubleFirst into longFirst\n+        final SerializablePair<Long, Number> pair = (SerializablePair<Long, Number>) object;\n+        if (pair.lhs < firstTime) {\n+          if (pair.rhs == null) {\n+            // rhs might be NULL under SQL-compatibility mode\n+            updateTimeWithNull(buf, position, pair.lhs);\n+          } else {\n+            updateTimeWithValue(buf, position, pair.lhs, pair.rhs);\n+          }\n+        }\n+        return;\n+      }\n+    }\n+\n     long time = timeSelector.getLong();\n-    long firstTime = buf.getLong(position);\n     if (time < firstTime) {\n       if (useDefault || !valueSelector.isNull()) {\n-        updateTimeWithValue(buf, position, time);\n+        updateTimeWithValue(buf, position, time, valueSelector);\n       } else {\n         updateTimeWithNull(buf, position, time);\n       }"
  },
  {
    "sha": "ded2970478ae4b9481c9dc99f7894fedbd7d8598",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstAggregatorFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstAggregatorFactory.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -158,7 +158,7 @@ public Aggregator factorize(ColumnSelectorFactory metricFactory)\n           metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n           valueSelector,\n           maxStringBytes,\n-          StringFirstLastUtils.selectorNeedsFoldCheck(valueSelector, metricFactory.getColumnCapabilities(fieldName))\n+          StringFirstLastUtils.selectorNeedsFoldCheck(valueSelector, metricFactory.getColumnCapabilities(fieldName), SerializablePairLongString.class)\n       );\n     }\n   }\n@@ -174,7 +174,7 @@ public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n           metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n           valueSelector,\n           maxStringBytes,\n-          StringFirstLastUtils.selectorNeedsFoldCheck(valueSelector, metricFactory.getColumnCapabilities(fieldName))\n+          StringFirstLastUtils.selectorNeedsFoldCheck(valueSelector, metricFactory.getColumnCapabilities(fieldName), SerializablePairLongString.class)\n       );\n     }\n   }"
  },
  {
    "sha": "ad8ba7fe993f2c2cb04bf9770b67fb66590f1892",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstLastUtils.java",
    "status": "modified",
    "additions": 9,
    "deletions": 4,
    "changes": 13,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstLastUtils.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstLastUtils.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstLastUtils.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -36,11 +36,16 @@\n   private static final int NULL_VALUE = -1;\n \n   /**\n-   * Returns whether a given value selector *might* contain SerializablePairLongString objects.\n+   * Returns whether a given value selector *might* contain objects with given type\n+   *\n+   * @param pairClass should be one of the following {@link SerializablePairLongString } {@link org.apache.druid.query.aggregation.SerializablePairLongLong}\n+   *                  {@link org.apache.druid.query.aggregation.SerializablePairLongDouble}\n+   *                  {@link org.apache.druid.query.aggregation.SerializablePairLongFloat}\n    */\n   public static boolean selectorNeedsFoldCheck(\n       final BaseObjectColumnValueSelector<?> valueSelector,\n-      @Nullable final ColumnCapabilities valueSelectorCapabilities\n+      @Nullable final ColumnCapabilities valueSelectorCapabilities,\n+      Class pairClass\n   )\n   {\n     if (valueSelectorCapabilities != null && valueSelectorCapabilities.getType() != ValueType.COMPLEX) {\n@@ -55,8 +60,8 @@ public static boolean selectorNeedsFoldCheck(\n \n     // Check if the selector class could possibly be a SerializablePairLongString (either a superclass or subclass).\n     final Class<?> clazz = valueSelector.classOfObject();\n-    return clazz.isAssignableFrom(SerializablePairLongString.class)\n-           || SerializablePairLongString.class.isAssignableFrom(clazz);\n+    return clazz.isAssignableFrom(pairClass)\n+           || pairClass.isAssignableFrom(clazz);\n   }\n \n   @Nullable"
  },
  {
    "sha": "504e113a8597badd9a05af486e9e8e2815af5004",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregator.java",
    "status": "modified",
    "additions": 15,
    "deletions": 7,
    "changes": 22,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,30 +19,38 @@\n \n package org.apache.druid.query.aggregation.last;\n \n-import org.apache.druid.collections.SerializablePair;\n-import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n+import org.apache.druid.query.aggregation.SerializablePairLongDouble;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n-public class DoubleLastAggregator extends NumericLastAggregator<BaseDoubleColumnValueSelector>\n+public class DoubleLastAggregator extends NumericLastAggregator\n {\n   double lastValue;\n \n-  public DoubleLastAggregator(BaseLongColumnValueSelector timeSelector, BaseDoubleColumnValueSelector valueSelector)\n+  public DoubleLastAggregator(BaseLongColumnValueSelector timeSelector,\n+                              ColumnValueSelector valueSelector,\n+                              boolean needsFoldCheck)\n   {\n-    super(timeSelector, valueSelector);\n+    super(timeSelector, valueSelector, needsFoldCheck);\n     lastValue = 0;\n   }\n \n   @Override\n-  void setCurrentValue()\n+  void setCurrentValue(ColumnValueSelector valueSelector)\n   {\n     lastValue = valueSelector.getDouble();\n   }\n \n+  @Override\n+  void setCurrentValue(Number number)\n+  {\n+    lastValue = number.doubleValue();\n+  }\n+\n   @Override\n   public Object get()\n   {\n-    return new SerializablePair<>(lastTime, rhsNull ? null : lastValue);\n+    return new SerializablePairLongDouble(lastTime, rhsNull ? null : lastValue);\n   }\n \n   @Override"
  },
  {
    "sha": "759966be5c29352c72cacd460aadfb2993281dd8",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregatorFactory.java",
    "status": "modified",
    "additions": 45,
    "deletions": 84,
    "changes": 129,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregatorFactory.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregatorFactory.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -21,19 +21,20 @@\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n import com.google.common.base.Preconditions;\n import org.apache.druid.collections.SerializablePair;\n import org.apache.druid.java.util.common.StringUtils;\n-import org.apache.druid.java.util.common.UOE;\n import org.apache.druid.query.aggregation.AggregateCombiner;\n import org.apache.druid.query.aggregation.Aggregator;\n import org.apache.druid.query.aggregation.AggregatorFactory;\n import org.apache.druid.query.aggregation.AggregatorUtil;\n import org.apache.druid.query.aggregation.BufferAggregator;\n+import org.apache.druid.query.aggregation.SerializablePairLongDouble;\n+import org.apache.druid.query.aggregation.SerializablePairLongDoubleSerde;\n import org.apache.druid.query.aggregation.first.DoubleFirstAggregatorFactory;\n import org.apache.druid.query.aggregation.first.LongFirstAggregatorFactory;\n-import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n-import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n+import org.apache.druid.query.aggregation.first.StringFirstLastUtils;\n import org.apache.druid.segment.ColumnSelectorFactory;\n import org.apache.druid.segment.ColumnValueSelector;\n import org.apache.druid.segment.NilColumnValueSelector;\n@@ -49,11 +50,13 @@\n import java.util.Map;\n import java.util.Objects;\n \n+@JsonTypeName(\"doubleLast\")\n public class DoubleLastAggregatorFactory extends AggregatorFactory\n {\n   private static final Aggregator NIL_AGGREGATOR = new DoubleLastAggregator(\n       NilColumnValueSelector.instance(),\n-      NilColumnValueSelector.instance()\n+      NilColumnValueSelector.instance(),\n+      false\n   )\n   {\n     @Override\n@@ -65,7 +68,8 @@ public void aggregate()\n \n   private static final BufferAggregator NIL_BUFFER_AGGREGATOR = new DoubleLastBufferAggregator(\n       NilColumnValueSelector.instance(),\n-      NilColumnValueSelector.instance()\n+      NilColumnValueSelector.instance(),\n+      false\n   )\n   {\n     @Override\n@@ -95,29 +99,39 @@ public DoubleLastAggregatorFactory(\n   @Override\n   public Aggregator factorize(ColumnSelectorFactory metricFactory)\n   {\n-    final BaseDoubleColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n-    if (valueSelector instanceof NilColumnValueSelector) {\n+    final ColumnValueSelector selector = metricFactory.makeColumnValueSelector(fieldName);\n+    if (selector instanceof NilColumnValueSelector) {\n       return NIL_AGGREGATOR;\n-    } else {\n-      return new DoubleLastAggregator(\n-          metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n-          valueSelector\n-      );\n     }\n+\n+    return new DoubleLastAggregator(\n+        metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n+        selector,\n+        StringFirstLastUtils.selectorNeedsFoldCheck(\n+            selector,\n+            metricFactory.getColumnCapabilities(fieldName),\n+            SerializablePairLongDouble.class\n+        )\n+    );\n   }\n \n   @Override\n   public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n   {\n-    final BaseDoubleColumnValueSelector valueSelector = metricFactory.makeColumnValueSelector(fieldName);\n-    if (valueSelector instanceof NilColumnValueSelector) {\n+    final ColumnValueSelector selector = metricFactory.makeColumnValueSelector(fieldName);\n+    if (selector instanceof NilColumnValueSelector) {\n       return NIL_BUFFER_AGGREGATOR;\n-    } else {\n-      return new DoubleLastBufferAggregator(\n-          metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n-          valueSelector\n-      );\n     }\n+\n+    return new DoubleLastBufferAggregator(\n+        metricFactory.makeColumnValueSelector(ColumnHolder.TIME_COLUMN_NAME),\n+        selector,\n+        StringFirstLastUtils.selectorNeedsFoldCheck(\n+            selector,\n+            metricFactory.getColumnCapabilities(fieldName),\n+            SerializablePairLongDouble.class\n+        )\n+    );\n   }\n \n   @Override\n@@ -148,74 +162,13 @@ public Object combine(@Nullable Object lhs, @Nullable Object rhs)\n   @Override\n   public AggregateCombiner makeAggregateCombiner()\n   {\n-    throw new UOE(\"DoubleLastAggregatorFactory is not supported during ingestion for rollup\");\n+    return new GenericLastAggregateCombiner(SerializablePairLongDouble.class);\n   }\n \n   @Override\n   public AggregatorFactory getCombiningFactory()\n   {\n-    return new DoubleLastAggregatorFactory(name, name)\n-    {\n-      @Override\n-      public Aggregator factorize(ColumnSelectorFactory metricFactory)\n-      {\n-        final ColumnValueSelector<SerializablePair<Long, Double>> selector =\n-            metricFactory.makeColumnValueSelector(name);\n-        return new DoubleLastAggregator(null, null)\n-        {\n-          @Override\n-          public void aggregate()\n-          {\n-            SerializablePair<Long, Double> pair = selector.getObject();\n-            if (pair.lhs >= lastTime) {\n-              lastTime = pair.lhs;\n-              if (pair.rhs != null) {\n-                lastValue = pair.rhs;\n-                rhsNull = false;\n-              } else {\n-                rhsNull = true;\n-              }\n-            }\n-          }\n-        };\n-      }\n-\n-      @Override\n-      public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n-      {\n-        final ColumnValueSelector<SerializablePair<Long, Double>> selector =\n-            metricFactory.makeColumnValueSelector(name);\n-        return new DoubleLastBufferAggregator(null, null)\n-        {\n-          @Override\n-          public void putValue(ByteBuffer buf, int position)\n-          {\n-            SerializablePair<Long, Double> pair = selector.getObject();\n-            buf.putDouble(position, pair.rhs);\n-          }\n-\n-          @Override\n-          public void aggregate(ByteBuffer buf, int position)\n-          {\n-            SerializablePair<Long, Double> pair = selector.getObject();\n-            long lastTime = buf.getLong(position);\n-            if (pair.lhs >= lastTime) {\n-              if (pair.rhs != null) {\n-                updateTimeWithValue(buf, position, pair.lhs);\n-              } else {\n-                updateTimeWithNull(buf, position, pair.lhs);\n-              }\n-            }\n-          }\n-\n-          @Override\n-          public void inspectRuntimeShape(RuntimeShapeInspector inspector)\n-          {\n-            inspector.visit(\"selector\", selector);\n-          }\n-        };\n-      }\n-    };\n+    return new DoubleLastAggregatorFactory(name, name);\n   }\n \n   @Override\n@@ -271,11 +224,19 @@ public String getFieldName()\n                      .array();\n   }\n \n+  @Override\n+  public String getComplexTypeName()\n+  {\n+    return SerializablePairLongDoubleSerde.TYPE_NAME;\n+  }\n+\n+  /**\n+   * actual type is {@link SerializablePair<Long, Double>}\n+   */\n   @Override\n   public ValueType getType()\n   {\n-    // if we don't pretend to be a primitive, group by v1 gets sad and doesn't work because no complex type serde\n-    return storeDoubleAsFloat ? ValueType.FLOAT : ValueType.DOUBLE;\n+    return ValueType.COMPLEX;\n   }\n \n   @Override"
  },
  {
    "sha": "74c46d69aaad9d7c40c1358858bc050aedb49817",
    "filename": "processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastBufferAggregator.java",
    "status": "modified",
    "additions": 17,
    "deletions": 7,
    "changes": 24,
    "blob_url": "https://github.com/apache/druid/blob/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastBufferAggregator.java",
    "raw_url": "https://github.com/apache/druid/raw/f96aa6c9a936056a953bb0928b5fd5e719b7f44e/processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastBufferAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/druid/contents/processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastBufferAggregator.java?ref=f96aa6c9a936056a953bb0928b5fd5e719b7f44e",
    "patch": "@@ -19,20 +19,21 @@\n \n package org.apache.druid.query.aggregation.last;\n \n-import org.apache.druid.collections.SerializablePair;\n-import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n+import org.apache.druid.query.aggregation.SerializablePairLongDouble;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.ColumnValueSelector;\n \n import java.nio.ByteBuffer;\n \n-public class DoubleLastBufferAggregator extends NumericLastBufferAggregator<BaseDoubleColumnValueSelector>\n+public class DoubleLastBufferAggregator extends NumericLastBufferAggregator\n {\n   public DoubleLastBufferAggregator(\n       BaseLongColumnValueSelector timeSelector,\n-      BaseDoubleColumnValueSelector valueSelector\n+      ColumnValueSelector valueSelector,\n+      boolean needsFoldCheck\n   )\n   {\n-    super(timeSelector, valueSelector);\n+    super(timeSelector, valueSelector, needsFoldCheck);\n   }\n \n   @Override\n@@ -42,16 +43,25 @@ void initValue(ByteBuffer buf, int position)\n   }\n \n   @Override\n-  void putValue(ByteBuffer buf, int position)\n+  void putValue(ByteBuffer buf, int position, ColumnValueSelector valueSelector)\n   {\n     buf.putDouble(position, valueSelector.getDouble());\n   }\n \n+  @Override\n+  void putValue(ByteBuffer buf, int position, Number value)\n+  {\n+    buf.putDouble(position, value.doubleValue());\n+  }\n+\n   @Override\n   public Object get(ByteBuffer buf, int position)\n   {\n     final boolean rhsNull = isValueNull(buf, position);\n-    return new SerializablePair<>(buf.getLong(position), rhsNull ? null : buf.getDouble(position + VALUE_OFFSET));\n+    return new SerializablePairLongDouble(\n+        buf.getLong(position),\n+        rhsNull ? null : buf.getDouble(position + VALUE_OFFSET)\n+    );\n   }\n \n   @Override"
  }
]
