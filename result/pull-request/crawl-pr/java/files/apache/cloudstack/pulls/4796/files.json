[
  {
    "sha": "e15f786d781a0a664afc51e6a76004448556229f",
    "filename": "engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql",
    "status": "modified",
    "additions": 92,
    "deletions": 0,
    "changes": 92,
    "blob_url": "https://github.com/apache/cloudstack/blob/edecd7dabf7582083a76afe66ef17b7972222004/engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql",
    "raw_url": "https://github.com/apache/cloudstack/raw/edecd7dabf7582083a76afe66ef17b7972222004/engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql",
    "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/schema/src/main/resources/META-INF/db/schema-41500to41510.sql?ref=edecd7dabf7582083a76afe66ef17b7972222004",
    "patch": "@@ -23,3 +23,95 @@\n UPDATE `cloud`.`guest_os` SET display_name='Fedora Linux (32 bit)' WHERE id=320;\n UPDATE `cloud`.`guest_os` SET display_name='Mandriva Linux (32 bit)' WHERE id=323;\n UPDATE `cloud`.`guest_os` SET display_name='OpenSUSE Linux (32 bit)' WHERE id=327;\n+\n+-- Re-create host view to prevent multiple entries for hosts with multiple tags\n+DROP VIEW IF EXISTS `cloud`.`host_view`;\n+CREATE VIEW `cloud`.`host_view` AS\n+    SELECT\n+        host.id,\n+        host.uuid,\n+        host.name,\n+        host.status,\n+        host.disconnected,\n+        host.type,\n+        host.private_ip_address,\n+        host.version,\n+        host.hypervisor_type,\n+        host.hypervisor_version,\n+        host.capabilities,\n+        host.last_ping,\n+        host.created,\n+        host.removed,\n+        host.resource_state,\n+        host.mgmt_server_id,\n+        host.cpu_sockets,\n+        host.cpus,\n+        host.speed,\n+        host.ram,\n+        cluster.id cluster_id,\n+        cluster.uuid cluster_uuid,\n+        cluster.name cluster_name,\n+        cluster.cluster_type,\n+        data_center.id data_center_id,\n+        data_center.uuid data_center_uuid,\n+        data_center.name data_center_name,\n+        data_center.networktype data_center_type,\n+        host_pod_ref.id pod_id,\n+        host_pod_ref.uuid pod_uuid,\n+        host_pod_ref.name pod_name,\n+        GROUP_CONCAT(DISTINCT(host_tags.tag)) AS tag,\n+        guest_os_category.id guest_os_category_id,\n+        guest_os_category.uuid guest_os_category_uuid,\n+        guest_os_category.name guest_os_category_name,\n+        mem_caps.used_capacity memory_used_capacity,\n+        mem_caps.reserved_capacity memory_reserved_capacity,\n+        cpu_caps.used_capacity cpu_used_capacity,\n+        cpu_caps.reserved_capacity cpu_reserved_capacity,\n+        async_job.id job_id,\n+        async_job.uuid job_uuid,\n+        async_job.job_status job_status,\n+        async_job.account_id job_account_id,\n+        oobm.enabled AS `oobm_enabled`,\n+        oobm.power_state AS `oobm_power_state`,\n+        ha_config.enabled AS `ha_enabled`,\n+        ha_config.ha_state AS `ha_state`,\n+        ha_config.provider AS `ha_provider`,\n+        `last_annotation_view`.`annotation` AS `annotation`,\n+        `last_annotation_view`.`created` AS `last_annotated`,\n+        `user`.`username` AS `username`\n+    FROM\n+        `cloud`.`host`\n+            LEFT JOIN\n+        `cloud`.`cluster` ON host.cluster_id = cluster.id\n+            LEFT JOIN\n+        `cloud`.`data_center` ON host.data_center_id = data_center.id\n+            LEFT JOIN\n+        `cloud`.`host_pod_ref` ON host.pod_id = host_pod_ref.id\n+            LEFT JOIN\n+        `cloud`.`host_details` ON host.id = host_details.host_id\n+            AND host_details.name = 'guest.os.category.id'\n+            LEFT JOIN\n+        `cloud`.`guest_os_category` ON guest_os_category.id = CONVERT ( host_details.value, UNSIGNED )\n+            LEFT JOIN\n+        `cloud`.`host_tags` ON host_tags.host_id = host.id\n+            LEFT JOIN\n+        `cloud`.`op_host_capacity` mem_caps ON host.id = mem_caps.host_id\n+            AND mem_caps.capacity_type = 0\n+            LEFT JOIN\n+        `cloud`.`op_host_capacity` cpu_caps ON host.id = cpu_caps.host_id\n+            AND cpu_caps.capacity_type = 1\n+            LEFT JOIN\n+        `cloud`.`async_job` ON async_job.instance_id = host.id\n+            AND async_job.instance_type = 'Host'\n+            AND async_job.job_status = 0\n+            LEFT JOIN\n+        `cloud`.`oobm` ON oobm.host_id = host.id\n+            left join\n+        `cloud`.`ha_config` ON ha_config.resource_id=host.id\n+            and ha_config.resource_type='Host'\n+            LEFT JOIN\n+        `cloud`.`last_annotation_view` ON `last_annotation_view`.`entity_uuid` = `host`.`uuid`\n+            LEFT JOIN\n+        `cloud`.`user` ON `user`.`uuid` = `last_annotation_view`.`user_uuid`\n+    GROUP BY\n+        `host`.`id`;"
  },
  {
    "sha": "0270c7d06e775afbc780911598f1c1be75d3a739",
    "filename": "server/src/main/java/com/cloud/api/ApiDBUtils.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/apache/cloudstack/blob/edecd7dabf7582083a76afe66ef17b7972222004/server/src/main/java/com/cloud/api/ApiDBUtils.java",
    "raw_url": "https://github.com/apache/cloudstack/raw/edecd7dabf7582083a76afe66ef17b7972222004/server/src/main/java/com/cloud/api/ApiDBUtils.java",
    "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/api/ApiDBUtils.java?ref=edecd7dabf7582083a76afe66ef17b7972222004",
    "patch": "@@ -1870,18 +1870,10 @@ public static HostResponse newHostResponse(HostJoinVO vr, EnumSet<HostDetails> d\n         return s_hostJoinDao.newHostResponse(vr, details);\n     }\n \n-    public static HostResponse fillHostDetails(HostResponse vrData, HostJoinVO vr) {\n-        return s_hostJoinDao.setHostResponse(vrData, vr);\n-    }\n-\n     public static HostForMigrationResponse newHostForMigrationResponse(HostJoinVO vr, EnumSet<HostDetails> details) {\n         return s_hostJoinDao.newHostForMigrationResponse(vr, details);\n     }\n \n-    public static HostForMigrationResponse fillHostForMigrationDetails(HostForMigrationResponse vrData, HostJoinVO vr) {\n-        return s_hostJoinDao.setHostForMigrationResponse(vrData, vr);\n-    }\n-\n     public static List<HostJoinVO> newHostView(Host vr) {\n         return s_hostJoinDao.newHostView(vr);\n     }"
  },
  {
    "sha": "0ba235c10f6e888b5dc0e83a38af0324cb9dd034",
    "filename": "server/src/main/java/com/cloud/api/query/ViewResponseHelper.java",
    "status": "modified",
    "additions": 2,
    "deletions": 16,
    "changes": 18,
    "blob_url": "https://github.com/apache/cloudstack/blob/edecd7dabf7582083a76afe66ef17b7972222004/server/src/main/java/com/cloud/api/query/ViewResponseHelper.java",
    "raw_url": "https://github.com/apache/cloudstack/raw/edecd7dabf7582083a76afe66ef17b7972222004/server/src/main/java/com/cloud/api/query/ViewResponseHelper.java",
    "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/api/query/ViewResponseHelper.java?ref=edecd7dabf7582083a76afe66ef17b7972222004",
    "patch": "@@ -242,14 +242,7 @@\n         Hashtable<Long, HostResponse> vrDataList = new Hashtable<Long, HostResponse>();\n         // Initialise the vrdatalist with the input data\n         for (HostJoinVO vr : hosts) {\n-            HostResponse vrData = vrDataList.get(vr.getId());\n-            if (vrData == null) {\n-                // first time encountering this vm\n-                vrData = ApiDBUtils.newHostResponse(vr, details);\n-            } else {\n-                // update tags\n-                vrData = ApiDBUtils.fillHostDetails(vrData, vr);\n-            }\n+            HostResponse vrData = ApiDBUtils.newHostResponse(vr, details);\n             vrDataList.put(vr.getId(), vrData);\n         }\n         return new ArrayList<HostResponse>(vrDataList.values());\n@@ -259,14 +252,7 @@\n         Hashtable<Long, HostForMigrationResponse> vrDataList = new Hashtable<Long, HostForMigrationResponse>();\n         // Initialise the vrdatalist with the input data\n         for (HostJoinVO vr : hosts) {\n-            HostForMigrationResponse vrData = vrDataList.get(vr.getId());\n-            if (vrData == null) {\n-                // first time encountering this vm\n-                vrData = ApiDBUtils.newHostForMigrationResponse(vr, details);\n-            } else {\n-                // update tags\n-                vrData = ApiDBUtils.fillHostForMigrationDetails(vrData, vr);\n-            }\n+            HostForMigrationResponse vrData = ApiDBUtils.newHostForMigrationResponse(vr, details);\n             vrDataList.put(vr.getId(), vrData);\n         }\n         return new ArrayList<HostForMigrationResponse>(vrDataList.values());"
  },
  {
    "sha": "e7ad5e53862abe40ba69939c353b039327fe9dc3",
    "filename": "server/src/main/java/com/cloud/api/query/dao/HostJoinDao.java",
    "status": "modified",
    "additions": 0,
    "deletions": 4,
    "changes": 4,
    "blob_url": "https://github.com/apache/cloudstack/blob/edecd7dabf7582083a76afe66ef17b7972222004/server/src/main/java/com/cloud/api/query/dao/HostJoinDao.java",
    "raw_url": "https://github.com/apache/cloudstack/raw/edecd7dabf7582083a76afe66ef17b7972222004/server/src/main/java/com/cloud/api/query/dao/HostJoinDao.java",
    "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/api/query/dao/HostJoinDao.java?ref=edecd7dabf7582083a76afe66ef17b7972222004",
    "patch": "@@ -31,12 +31,8 @@\n \n     HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details);\n \n-    HostResponse setHostResponse(HostResponse response, HostJoinVO host);\n-\n     HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details);\n \n-    HostForMigrationResponse setHostForMigrationResponse(HostForMigrationResponse response, HostJoinVO host);\n-\n     List<HostJoinVO> newHostView(Host group);\n \n     List<HostJoinVO> searchByIds(Long... ids);"
  },
  {
    "sha": "1e8917bbc72809a8ca5ebc4f52512795dda34d86",
    "filename": "server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java",
    "status": "modified",
    "additions": 22,
    "deletions": 56,
    "changes": 78,
    "blob_url": "https://github.com/apache/cloudstack/blob/edecd7dabf7582083a76afe66ef17b7972222004/server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java",
    "raw_url": "https://github.com/apache/cloudstack/raw/edecd7dabf7582083a76afe66ef17b7972222004/server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java",
    "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java?ref=edecd7dabf7582083a76afe66ef17b7972222004",
    "patch": "@@ -18,6 +18,7 @@\n \n import java.text.DecimalFormat;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Date;\n import java.util.EnumSet;\n import java.util.Iterator;\n@@ -26,16 +27,18 @@\n \n import javax.inject.Inject;\n \n-import org.apache.log4j.Logger;\n-import org.springframework.stereotype.Component;\n-\n import org.apache.cloudstack.api.ApiConstants.HostDetails;\n import org.apache.cloudstack.api.response.GpuResponse;\n import org.apache.cloudstack.api.response.HostForMigrationResponse;\n import org.apache.cloudstack.api.response.HostResponse;\n import org.apache.cloudstack.api.response.VgpuResponse;\n import org.apache.cloudstack.framework.config.dao.ConfigurationDao;\n+import org.apache.cloudstack.ha.HAResource;\n+import org.apache.cloudstack.ha.dao.HAConfigDao;\n import org.apache.cloudstack.outofbandmanagement.dao.OutOfBandManagementDao;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.springframework.stereotype.Component;\n \n import com.cloud.api.ApiDBUtils;\n import com.cloud.api.query.vo.HostJoinVO;\n@@ -52,9 +55,6 @@\n import com.cloud.utils.db.SearchBuilder;\n import com.cloud.utils.db.SearchCriteria;\n \n-import org.apache.cloudstack.ha.HAResource;\n-import org.apache.cloudstack.ha.dao.HAConfigDao;\n-\n @Component\n public class HostJoinDaoImpl extends GenericDaoBase<HostJoinVO, Long> implements HostJoinDao {\n     public static final Logger s_logger = Logger.getLogger(HostJoinDaoImpl.class);\n@@ -94,6 +94,18 @@ protected HostJoinDaoImpl() {\n         this._count = \"select count(distinct id) from host_view WHERE \";\n     }\n \n+    private boolean containsHostHATag(final String tags) {\n+        boolean result = false;\n+        String haTag = ApiDBUtils.getHaTag();\n+        if (StringUtils.isNotEmpty(haTag) && StringUtils.isNotEmpty(tags)) {\n+            List<String> tagsList = Arrays.asList(tags.split(\",\"));\n+            if (tagsList.contains(haTag)) {\n+                result = true;\n+            }\n+        }\n+        return result;\n+    }\n+\n     @Override\n     public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n         HostResponse hostResponse = new HostResponse();\n@@ -178,18 +190,8 @@ public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> detail\n                 hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n \n                 String hostTags = host.getTag();\n-                hostResponse.setHostTags(host.getTag());\n-\n-                String haTag = ApiDBUtils.getHaTag();\n-                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n-                    if (haTag.equalsIgnoreCase(hostTags)) {\n-                        hostResponse.setHaHost(true);\n-                    } else {\n-                        hostResponse.setHaHost(false);\n-                    }\n-                } else {\n-                    hostResponse.setHaHost(false);\n-                }\n+                hostResponse.setHostTags(hostTags);\n+                hostResponse.setHaHost(containsHostHATag(hostTags));\n \n                 hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n \n@@ -271,19 +273,6 @@ public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> detail\n         return hostResponse;\n     }\n \n-    @Override\n-    public HostResponse setHostResponse(HostResponse response, HostJoinVO host) {\n-        String tag = host.getTag();\n-        if (tag != null) {\n-            if (response.getHostTags() != null && response.getHostTags().length() > 0) {\n-                response.setHostTags(response.getHostTags() + \",\" + tag);\n-            } else {\n-                response.setHostTags(tag);\n-            }\n-        }\n-        return response;\n-    }\n-\n     @Override\n     public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n         HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n@@ -334,18 +323,8 @@ public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, Enu\n                 hostResponse.setMemoryAllocatedBytes(mem);\n \n                 String hostTags = host.getTag();\n-                hostResponse.setHostTags(host.getTag());\n-\n-                String haTag = ApiDBUtils.getHaTag();\n-                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n-                    if (haTag.equalsIgnoreCase(hostTags)) {\n-                        hostResponse.setHaHost(true);\n-                    } else {\n-                        hostResponse.setHaHost(false);\n-                    }\n-                } else {\n-                    hostResponse.setHaHost(false);\n-                }\n+                hostResponse.setHostTags(hostTags);\n+                hostResponse.setHaHost(containsHostHATag(hostTags));\n \n                 hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n \n@@ -410,19 +389,6 @@ public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, Enu\n         return hostResponse;\n     }\n \n-    @Override\n-    public HostForMigrationResponse setHostForMigrationResponse(HostForMigrationResponse response, HostJoinVO host) {\n-        String tag = host.getTag();\n-        if (tag != null) {\n-            if (response.getHostTags() != null && response.getHostTags().length() > 0) {\n-                response.setHostTags(response.getHostTags() + \",\" + tag);\n-            } else {\n-                response.setHostTags(tag);\n-            }\n-        }\n-        return response;\n-    }\n-\n     @Override\n     public List<HostJoinVO> newHostView(Host host) {\n         SearchCriteria<HostJoinVO> sc = hostIdSearch.create();"
  }
]
