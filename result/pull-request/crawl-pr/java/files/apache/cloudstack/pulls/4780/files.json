[
  {
    "sha": "bc951e669f32a2436fa49b66fe5e02bd3f8d09a9",
    "filename": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/KvmNonManagedStorageDataMotionStrategy.java",
    "status": "modified",
    "additions": 8,
    "deletions": 3,
    "changes": 11,
    "blob_url": "https://github.com/apache/cloudstack/blob/5bf1d737d1224b05b6986641f08c643932d0b5fa/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/KvmNonManagedStorageDataMotionStrategy.java",
    "raw_url": "https://github.com/apache/cloudstack/raw/5bf1d737d1224b05b6986641f08c643932d0b5fa/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/KvmNonManagedStorageDataMotionStrategy.java",
    "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/KvmNonManagedStorageDataMotionStrategy.java?ref=5bf1d737d1224b05b6986641f08c643932d0b5fa",
    "patch": "@@ -88,7 +88,8 @@ protected StrategyPriority internalCanHandle(Map<VolumeInfo, DataStore> volumeMa\n \n                 for (VolumeInfo volumeInfo : volumeInfoSet) {\n                     StoragePoolVO storagePoolVO = _storagePoolDao.findById(volumeInfo.getPoolId());\n-                    if (storagePoolVO.getPoolType() != StoragePoolType.Filesystem && storagePoolVO.getPoolType() != StoragePoolType.NetworkFilesystem) {\n+\n+                    if (!supportStoragePoolType(storagePoolVO.getPoolType())) {\n                         return StrategyPriority.CANT_HANDLE;\n                     }\n                 }\n@@ -187,7 +188,7 @@ protected void setVolumePath(VolumeVO volume) {\n      */\n     @Override\n     protected boolean shouldMigrateVolume(StoragePoolVO sourceStoragePool, Host destHost, StoragePoolVO destStoragePool) {\n-        return sourceStoragePool.getPoolType() == StoragePoolType.Filesystem || sourceStoragePool.getPoolType() == StoragePoolType.NetworkFilesystem;\n+        return supportStoragePoolType(sourceStoragePool.getPoolType());\n     }\n \n     /**\n@@ -201,7 +202,7 @@ protected void copyTemplateToTargetFilesystemStorageIfNeeded(VolumeInfo srcVolum\n         }\n \n         VMTemplateStoragePoolVO sourceVolumeTemplateStoragePoolVO = vmTemplatePoolDao.findByPoolTemplate(destStoragePool.getId(), srcVolumeInfo.getTemplateId(), null);\n-        if (sourceVolumeTemplateStoragePoolVO == null && destStoragePool.getPoolType() == StoragePoolType.Filesystem) {\n+        if (sourceVolumeTemplateStoragePoolVO == null && (isStoragePoolTypeInList(destStoragePool.getPoolType(), StoragePoolType.Filesystem, StoragePoolType.SharedMountPoint))) {\n             DataStore sourceTemplateDataStore = dataStoreManagerImpl.getRandomImageStore(srcVolumeInfo.getDataCenterId());\n             if (sourceTemplateDataStore != null) {\n                 TemplateInfo sourceTemplateInfo = templateDataFactory.getTemplate(srcVolumeInfo.getTemplateId(), sourceTemplateDataStore);\n@@ -270,4 +271,8 @@ protected void logInCaseOfTemplateCopyFailure(Answer copyCommandAnswer, Template\n             LOGGER.error(generateFailToCopyTemplateMessage(sourceTemplate, destDataStore) + failureDetails);\n         }\n     }\n+\n+    protected Boolean supportStoragePoolType(StoragePoolType storagePoolType) {\n+        return super.supportStoragePoolType(storagePoolType, StoragePoolType.Filesystem);\n+    }\n }"
  },
  {
    "sha": "3c68793e348395fa5f6c50c93f5abb2c5837b419",
    "filename": "engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java",
    "status": "modified",
    "additions": 28,
    "deletions": 3,
    "changes": 31,
    "blob_url": "https://github.com/apache/cloudstack/blob/5bf1d737d1224b05b6986641f08c643932d0b5fa/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java",
    "raw_url": "https://github.com/apache/cloudstack/raw/5bf1d737d1224b05b6986641f08c643932d0b5fa/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java",
    "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/datamotion/src/main/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategy.java?ref=5bf1d737d1224b05b6986641f08c643932d0b5fa",
    "patch": "@@ -134,7 +134,10 @@\n import com.cloud.vm.VirtualMachineManager;\n import com.cloud.vm.dao.VMInstanceDao;\n import com.google.common.base.Preconditions;\n+import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.stream.Collectors;\n+import org.apache.commons.collections.CollectionUtils;\n \n public class StorageSystemDataMotionStrategy implements DataMotionStrategy {\n     private static final Logger LOGGER = Logger.getLogger(StorageSystemDataMotionStrategy.class);\n@@ -1861,9 +1864,8 @@ public void copyAsync(Map<VolumeInfo, DataStore> volumeDataStoreMap, VirtualMach\n \n                 MigrateCommand.MigrateDiskInfo migrateDiskInfo;\n \n-                boolean isNonManagedNfsToNfs = sourceStoragePool.getPoolType() == StoragePoolType.NetworkFilesystem\n-                        && destStoragePool.getPoolType() == StoragePoolType.NetworkFilesystem && !managedStorageDestination;\n-                if (isNonManagedNfsToNfs) {\n+                boolean isNonManagedNfsToNfsOrSharedMountPointToNfs = supportStoragePoolType(sourceStoragePool.getPoolType()) && destStoragePool.getPoolType() == StoragePoolType.NetworkFilesystem && !managedStorageDestination;\n+                if (isNonManagedNfsToNfsOrSharedMountPointToNfs) {\n                     migrateDiskInfo = new MigrateCommand.MigrateDiskInfo(srcVolumeInfo.getPath(),\n                             MigrateCommand.MigrateDiskInfo.DiskType.FILE,\n                             MigrateCommand.MigrateDiskInfo.DriverType.QCOW2,\n@@ -2897,4 +2899,27 @@ private CopyCmdAnswer performCopyOfVdi(VolumeInfo volumeInfo, SnapshotInfo snaps\n \n         return copyCmdAnswer;\n     }\n+\n+    protected Boolean supportStoragePoolType(StoragePoolType storagePoolTypeToValidate, StoragePoolType... extraAcceptedValues) {\n+        List<StoragePoolType> values = new ArrayList<>();\n+\n+        values.add(StoragePoolType.NetworkFilesystem);\n+        values.add(StoragePoolType.SharedMountPoint);\n+\n+        if (extraAcceptedValues != null) {\n+            CollectionUtils.addAll(values, extraAcceptedValues);\n+        }\n+\n+        return isStoragePoolTypeInList(storagePoolTypeToValidate, values.toArray(new StoragePoolType[values.size()]));\n+    }\n+\n+    protected Boolean isStoragePoolTypeInList(StoragePoolType storagePoolTypeToValidate, StoragePoolType... acceptedValues){\n+        Set<StoragePoolType> supportedTypes = new HashSet<>();\n+\n+        if (acceptedValues != null) {\n+            supportedTypes.addAll(Arrays.asList(acceptedValues));\n+        }\n+\n+        return supportedTypes.contains(storagePoolTypeToValidate);\n+    };\n }"
  },
  {
    "sha": "601f6bbd104c3e8979b584ed8c60dbf9144399ed",
    "filename": "engine/storage/datamotion/src/test/java/org/apache/cloudstack/storage/motion/KvmNonManagedStorageSystemDataMotionTest.java",
    "status": "modified",
    "additions": 34,
    "deletions": 2,
    "changes": 36,
    "blob_url": "https://github.com/apache/cloudstack/blob/5bf1d737d1224b05b6986641f08c643932d0b5fa/engine/storage/datamotion/src/test/java/org/apache/cloudstack/storage/motion/KvmNonManagedStorageSystemDataMotionTest.java",
    "raw_url": "https://github.com/apache/cloudstack/raw/5bf1d737d1224b05b6986641f08c643932d0b5fa/engine/storage/datamotion/src/test/java/org/apache/cloudstack/storage/motion/KvmNonManagedStorageSystemDataMotionTest.java",
    "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/datamotion/src/test/java/org/apache/cloudstack/storage/motion/KvmNonManagedStorageSystemDataMotionTest.java?ref=5bf1d737d1224b05b6986641f08c643932d0b5fa",
    "patch": "@@ -75,6 +75,10 @@\n import com.cloud.storage.dao.VMTemplatePoolDao;\n import com.cloud.utils.exception.CloudRuntimeException;\n import com.cloud.vm.VirtualMachineManager;\n+import java.util.HashSet;\n+import java.util.Set;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n @RunWith(MockitoJUnitRunner.class)\n public class KvmNonManagedStorageSystemDataMotionTest {\n@@ -159,13 +163,23 @@ private void canHandleExpectCannotHandle(HypervisorType hypervisorType, int time\n         Assert.assertEquals(expectedStrategyPriority, strategyPriority);\n     }\n \n+    public Boolean supportStoragePoolType(StoragePoolType storagePoolType) {\n+        Set<StoragePoolType> supportedTypes = new HashSet<>();\n+        supportedTypes.add(StoragePoolType.Filesystem);\n+        supportedTypes.add(StoragePoolType.NetworkFilesystem);\n+        supportedTypes.add(StoragePoolType.SharedMountPoint);\n+\n+        return supportedTypes.contains(storagePoolType);\n+    }\n+\n     @Test\n     public void internalCanHandleTestNonManaged() {\n         StoragePoolType[] storagePoolTypeArray = StoragePoolType.values();\n         for (int i = 0; i < storagePoolTypeArray.length; i++) {\n             Map<VolumeInfo, DataStore> volumeMap = configureTestInternalCanHandle(false, storagePoolTypeArray[i]);\n             StrategyPriority strategyPriority = kvmNonManagedStorageDataMotionStrategy.internalCanHandle(volumeMap, new HostVO(\"sourceHostUuid\"), new HostVO(\"destHostUuid\"));\n-            if (storagePoolTypeArray[i] == StoragePoolType.Filesystem || storagePoolTypeArray[i] == StoragePoolType.NetworkFilesystem) {\n+\n+            if (supportStoragePoolType(storagePoolTypeArray[i])) {\n                 Assert.assertEquals(StrategyPriority.HYPERVISOR, strategyPriority);\n             } else {\n                 Assert.assertEquals(StrategyPriority.CANT_HANDLE, strategyPriority);\n@@ -243,7 +257,7 @@ public void shouldMigrateVolumeTest() {\n         for (int i = 0; i < storagePoolTypes.length; i++) {\n             Mockito.doReturn(storagePoolTypes[i]).when(sourceStoragePool).getPoolType();\n             boolean result = kvmNonManagedStorageDataMotionStrategy.shouldMigrateVolume(sourceStoragePool, destHost, destStoragePool);\n-            if (storagePoolTypes[i] == StoragePoolType.Filesystem || storagePoolTypes[i] == StoragePoolType.NetworkFilesystem) {\n+            if (supportStoragePoolType(storagePoolTypes[i])) {\n                 Assert.assertTrue(result);\n             } else {\n                 Assert.assertFalse(result);\n@@ -472,4 +486,22 @@ public void testVerifyLiveMigrationMapForKVMMixedManagedUnmagedStorage() {\n         lenient().when(pool2.isManaged()).thenReturn(false);\n         kvmNonManagedStorageDataMotionStrategy.verifyLiveMigrationForKVM(migrationMap, host2);\n     }\n+\n+    @Test\n+    public void validateSupportStoragePoolType() {\n+        Set<StoragePoolType> supportedTypes = new HashSet<>();\n+        supportedTypes.add(StoragePoolType.Filesystem);\n+        supportedTypes.add(StoragePoolType.NetworkFilesystem);\n+        supportedTypes.add(StoragePoolType.SharedMountPoint);\n+\n+        for (StoragePoolType poolType : StoragePoolType.values()) {\n+            boolean isSupported = kvmNonManagedStorageDataMotionStrategy.supportStoragePoolType(poolType);\n+            if (supportedTypes.contains(poolType)) {\n+                assertTrue(isSupported);\n+            } else {\n+                assertFalse(isSupported);\n+            }\n+        }\n+    }\n+\n }"
  },
  {
    "sha": "3793a795077729b8544cc6ca05337b63c1b3c616",
    "filename": "engine/storage/datamotion/src/test/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategyTest.java",
    "status": "modified",
    "additions": 57,
    "deletions": 0,
    "changes": 57,
    "blob_url": "https://github.com/apache/cloudstack/blob/5bf1d737d1224b05b6986641f08c643932d0b5fa/engine/storage/datamotion/src/test/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategyTest.java",
    "raw_url": "https://github.com/apache/cloudstack/raw/5bf1d737d1224b05b6986641f08c643932d0b5fa/engine/storage/datamotion/src/test/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategyTest.java",
    "contents_url": "https://api.github.com/repos/apache/cloudstack/contents/engine/storage/datamotion/src/test/java/org/apache/cloudstack/storage/motion/StorageSystemDataMotionStrategyTest.java?ref=5bf1d737d1224b05b6986641f08c643932d0b5fa",
    "patch": "@@ -19,6 +19,7 @@\n package org.apache.cloudstack.storage.motion;\n \n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.lenient;\n import static org.mockito.Mockito.mock;\n@@ -56,6 +57,8 @@\n import com.cloud.storage.Volume;\n import com.cloud.storage.VolumeVO;\n import java.util.AbstractMap;\n+import java.util.HashSet;\n+import java.util.Set;\n \n @RunWith(MockitoJUnitRunner.class)\n public class StorageSystemDataMotionStrategyTest {\n@@ -288,4 +291,58 @@ public void formatEntryOfVolumesAndStoragesAsJsonToDisplayOnLogValidateFormat(){\n \n         Assert.assertEquals(String.format(\"{volume: \\\"%s\\\", from: \\\"%s\\\", to:\\\"%s\\\"}\", volume, from, to), strategy.formatEntryOfVolumesAndStoragesAsJsonToDisplayOnLog(new AbstractMap.SimpleEntry<>(volumeInfo, dataStore)));\n     }\n+\n+    @Test\n+    public void validateSupportStoragePoolTypeDefaultValues() {\n+        Set<StoragePoolType> supportedTypes = new HashSet<>();\n+        supportedTypes.add(StoragePoolType.NetworkFilesystem);\n+        supportedTypes.add(StoragePoolType.SharedMountPoint);\n+\n+        for (StoragePoolType poolType : StoragePoolType.values()) {\n+            boolean isSupported = strategy.supportStoragePoolType(poolType);\n+            if (supportedTypes.contains(poolType)) {\n+                assertTrue(isSupported);\n+            } else {\n+                assertFalse(isSupported);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void validateSupportStoragePoolTypeExtraValues() {\n+        Set<StoragePoolType> supportedTypes = new HashSet<>();\n+        supportedTypes.add(StoragePoolType.NetworkFilesystem);\n+        supportedTypes.add(StoragePoolType.SharedMountPoint);\n+        supportedTypes.add(StoragePoolType.Iscsi);\n+        supportedTypes.add(StoragePoolType.CLVM);\n+\n+        for (StoragePoolType poolType : StoragePoolType.values()) {\n+            boolean isSupported = strategy.supportStoragePoolType(poolType, StoragePoolType.Iscsi, StoragePoolType.CLVM);\n+            if (supportedTypes.contains(poolType)) {\n+                assertTrue(isSupported);\n+            } else {\n+                assertFalse(isSupported);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void validateIsStoragePoolTypeInListReturnsTrue() {\n+        StoragePoolType[] listTypes = new StoragePoolType[3];\n+        listTypes[0] = StoragePoolType.LVM;\n+        listTypes[1] = StoragePoolType.NetworkFilesystem;\n+        listTypes[2] = StoragePoolType.SharedMountPoint;\n+\n+        assertTrue(strategy.isStoragePoolTypeInList(StoragePoolType.SharedMountPoint, listTypes));\n+    }\n+\n+    @Test\n+    public void validateIsStoragePoolTypeInListReturnsFalse() {\n+        StoragePoolType[] listTypes = new StoragePoolType[3];\n+        listTypes[0] = StoragePoolType.LVM;\n+        listTypes[1] = StoragePoolType.NetworkFilesystem;\n+        listTypes[2] = StoragePoolType.RBD;\n+\n+        assertFalse(strategy.isStoragePoolTypeInList(StoragePoolType.SharedMountPoint, listTypes));\n+    }\n }\n\\ No newline at end of file"
  }
]
