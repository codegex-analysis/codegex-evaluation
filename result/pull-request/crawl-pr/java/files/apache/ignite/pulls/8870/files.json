[
  {
    "sha": "81ae64f9b11ae6f7b8c400175316bd62e2817da3",
    "filename": "modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java",
    "status": "modified",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -21,6 +21,8 @@\n import java.lang.management.ManagementFactory;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ForkJoinPool;\n import java.util.zip.Deflater;\n import javax.cache.configuration.Factory;\n import javax.cache.event.CacheEntryListener;\n@@ -607,6 +609,9 @@\n     /** SQL configuration. */\n     private SqlConfiguration sqlCfg = new SqlConfiguration();\n \n+    /** Executor for async operations continuations. */\n+    private Executor asyncContinuationExecutor;\n+\n     /** Shutdown policy for cluster. */\n     public ShutdownPolicy shutdown = DFLT_SHUTDOWN_POLICY;\n \n@@ -3641,6 +3646,37 @@ public IgniteConfiguration setSqlConfiguration(SqlConfiguration sqlCfg) {\n         return this;\n     }\n \n+    /**\n+     * Gets the continuation executor for Cache and Compute async APIs.\n+     * <p />\n+     * When <code>null</code> (default), {@link ForkJoinPool#commonPool()} is used.\n+     * <p />\n+     * When async client operation completes, corresponding {@link org.apache.ignite.lang.IgniteFuture} listeners\n+     * will be invoked using this executor.\n+     *\n+     * @return Executor for async continuations.\n+     */\n+    public Executor getAsyncContinuationExecutor() {\n+        return asyncContinuationExecutor;\n+    }\n+\n+    /**\n+     * Sets the continuation executor for Cache and Compute async APIs.\n+     * <p />\n+     * When <code>null</code> (default), {@link ForkJoinPool#commonPool()} is used.\n+     * <p />\n+     * When async operation completes, corresponding {@link org.apache.ignite.lang.IgniteFuture} listeners\n+     * will be invoked using this executor.\n+     *\n+     * @param asyncContinuationExecutor Executor for async continuations.\n+     * @return {@code this} for chaining.\n+     */\n+    public IgniteConfiguration setAsyncContinuationExecutor(Executor asyncContinuationExecutor) {\n+        this.asyncContinuationExecutor = asyncContinuationExecutor;\n+\n+        return this;\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public String toString() {\n         return S.toString(IgniteConfiguration.class, this);"
  },
  {
    "sha": "a37d2fcfa97fec4565a7e01d0546c3232174868c",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/ComputeTaskInternalFuture.java",
    "status": "modified",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/ComputeTaskInternalFuture.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/ComputeTaskInternalFuture.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/ComputeTaskInternalFuture.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -22,6 +22,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.concurrent.Executor;\n+\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.IgniteLogger;\n@@ -71,7 +73,7 @@ public ComputeTaskInternalFuture(ComputeTaskSession ses, GridKernalContext ctx)\n         this.ses = ses;\n         this.ctx = ctx;\n \n-        userFut = new ComputeFuture<>(this);\n+        userFut = new ComputeFuture<>(this, ctx.getAsyncContinuationExecutor());\n \n         log = ctx.log(ComputeTaskInternalFuture.class);\n     }\n@@ -261,9 +263,10 @@ public ComputeTaskSession getTaskSession() {\n     private static class ComputeFuture<R> extends IgniteFutureImpl<R> implements ComputeTaskFuture<R> {\n         /**\n          * @param fut Future.\n+         * @param defaultExecutor Default continuation executor.\n          */\n-        private ComputeFuture(ComputeTaskInternalFuture<R> fut) {\n-            super(fut);\n+        private ComputeFuture(ComputeTaskInternalFuture<R> fut, Executor defaultExecutor) {\n+            super(fut, defaultExecutor);\n         }\n \n         /** {@inheritDoc} */"
  },
  {
    "sha": "54d114a9382847138985ee090459eb37d139bd12",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/GridKernalContext.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContext.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -20,6 +20,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.concurrent.Executor;\n import java.util.concurrent.ExecutorService;\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.configuration.IgniteConfiguration;\n@@ -776,4 +777,11 @@\n      * @return Performance statistics processor.\n      */\n     public PerformanceStatisticsProcessor performanceStatistics();\n+\n+    /**\n+     * Executor that is in charge of processing user async continuations.\n+     *\n+     * @return Executor that is in charge of processing user async continuations.\n+     */\n+    public Executor getAsyncContinuationExecutor();\n }"
  },
  {
    "sha": "f16be6c70869ca2f3c6c86ab509faceee6fe18d0",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java",
    "status": "modified",
    "additions": 10,
    "deletions": 0,
    "changes": 10,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -30,7 +30,10 @@\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.concurrent.Executor;\n import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ForkJoinPool;\n+\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.IgniteLogger;\n@@ -1321,4 +1324,11 @@ public void recoveryMode(boolean recoveryMode) {\n     @Override public PerformanceStatisticsProcessor performanceStatistics() {\n         return perfStatProc;\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override public Executor getAsyncContinuationExecutor() {\n+        return config().getAsyncContinuationExecutor() == null\n+                ? ForkJoinPool.commonPool()\n+                : config().getAsyncContinuationExecutor();\n+    }\n }"
  },
  {
    "sha": "e95325f36bad1e85b0ea5795781f57deeea568e6",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -188,7 +188,7 @@ public GridTaskSessionImpl(\n         this.subjId = subjId;\n         this.execName = execName;\n \n-        mapFut = new IgniteFutureImpl(new GridFutureAdapter());\n+        mapFut = new IgniteFutureImpl(new GridFutureAdapter(), ctx.getAsyncContinuationExecutor());\n     }\n \n     /** {@inheritDoc} */"
  },
  {
    "sha": "ead77df11cfa96d1c5266ca85921ae61613890f1",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheFutureImpl.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheFutureImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheFutureImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheFutureImpl.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -38,18 +38,20 @@\n      *\n      * @param fut Internal future.\n      */\n-    public IgniteCacheFutureImpl(IgniteInternalFuture<V> fut) {\n-        super(fut);\n+    public IgniteCacheFutureImpl(IgniteInternalFuture<V> fut, Executor defaultExecutor) {\n+        super(fut, defaultExecutor);\n+\n+        assert defaultExecutor != null;\n     }\n \n     /** {@inheritDoc} */\n     @Override public <T> IgniteFuture<T> chain(IgniteClosure<? super IgniteFuture<V>, T> doneCb) {\n-        return new IgniteCacheFutureImpl<>(chainInternal(doneCb, null));\n+        return new IgniteCacheFutureImpl<>(chainInternal(doneCb, null), defaultExecutor);\n     }\n \n     /** {@inheritDoc} */\n     @Override public <T> IgniteFuture<T> chainAsync(IgniteClosure<? super IgniteFuture<V>, T> doneCb, Executor exec) {\n-        return new IgniteCacheFutureImpl<>(chainInternal(doneCb, exec));\n+        return new IgniteCacheFutureImpl<>(chainInternal(doneCb, exec), defaultExecutor);\n     }\n \n     /** {@inheritDoc} */"
  },
  {
    "sha": "c4814504e89d489bb5f364cff75555e466a68677",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxyImpl.java",
    "status": "modified",
    "additions": 17,
    "deletions": 9,
    "changes": 26,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxyImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxyImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxyImpl.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -31,6 +31,7 @@\n import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.concurrent.locks.Lock;\n@@ -1906,7 +1907,7 @@ public void setCacheManager(CacheManager cacheMgr) {\n     @Override public IgniteFuture<?> destroyAsync() {\n         GridCacheContext<K, V> ctx = getContextSafe();\n \n-        return new IgniteFutureImpl<>(ctx.kernalContext().cache().dynamicDestroyCache(cacheName, false, true, false, null));\n+        return new IgniteFutureImpl<>(ctx.kernalContext().cache().dynamicDestroyCache(cacheName, false, true, false, null), exec());\n     }\n \n     /** {@inheritDoc} */\n@@ -1918,7 +1919,7 @@ public void setCacheManager(CacheManager cacheMgr) {\n     @Override public IgniteFuture<?> closeAsync() {\n         GridCacheContext<K, V> ctx = getContextSafe();\n \n-        return new IgniteFutureImpl<>(ctx.kernalContext().cache().dynamicCloseCache(cacheName));\n+        return new IgniteFutureImpl<>(ctx.kernalContext().cache().dynamicCloseCache(cacheName), exec());\n     }\n \n     /** {@inheritDoc} */\n@@ -2064,15 +2065,15 @@ private RuntimeException cacheException(Exception e) {\n \n                 assert restartFut != null;\n \n-                throw new IgniteCacheRestartingException(new IgniteFutureImpl<>(restartFut), cacheName);\n+                throw new IgniteCacheRestartingException(new IgniteFutureImpl<>(restartFut, exec()), cacheName);\n             }\n             else\n                 throw restartingException;\n         }\n \n         if (restartFut != null) {\n             if (X.hasCause(e, CacheStoppedException.class) || X.hasSuppressed(e, CacheStoppedException.class))\n-                throw new IgniteCacheRestartingException(new IgniteFutureImpl<>(restartFut), \"Cache is restarting: \" +\n+                throw new IgniteCacheRestartingException(new IgniteFutureImpl<>(restartFut, exec()), \"Cache is restarting: \" +\n                         cacheName, e);\n         }\n \n@@ -2100,7 +2101,7 @@ private RuntimeException cacheException(Exception e) {\n \n     /** {@inheritDoc} */\n     @Override protected <R> IgniteFuture<R> createFuture(IgniteInternalFuture<R> fut) {\n-        return new IgniteCacheFutureImpl<>(fut);\n+        return new IgniteCacheFutureImpl<>(fut, exec());\n     }\n \n     /**\n@@ -2216,7 +2217,7 @@ private RuntimeException cacheException(Exception e) {\n     @Override public IgniteFuture<Boolean> rebalance() {\n         GridCacheContext<K, V> ctx = getContextSafe();\n \n-        return new IgniteFutureImpl<>(ctx.preloader().forceRebalance());\n+        return new IgniteFutureImpl<>(ctx.preloader().forceRebalance(), exec());\n     }\n \n     /** {@inheritDoc} */\n@@ -2228,7 +2229,7 @@ private RuntimeException cacheException(Exception e) {\n         if (fut == null)\n             return new IgniteFinishedFutureImpl<>();\n \n-        return new IgniteFutureImpl<>(fut);\n+        return new IgniteFutureImpl<>(fut, exec());\n     }\n \n     /**\n@@ -2256,7 +2257,7 @@ public void checkRestart(boolean noWait) {\n                 //do nothing\n             }\n \n-            throw new IgniteCacheRestartingException(new IgniteFutureImpl<>(currentFut), cacheName);\n+            throw new IgniteCacheRestartingException(new IgniteFutureImpl<>(currentFut, exec()), cacheName);\n         }\n     }\n \n@@ -2362,6 +2363,13 @@ public void onRestarted(GridCacheContext ctx, IgniteInternalCache delegate) {\n                 \"ctx.name=\" + ctx.name() + \", delegate.name=\" + delegate.name() + \", cacheName=\" + cacheName;\n     }\n \n+    /**\n+     * Async continuation executor.\n+     */\n+    private Executor exec() {\n+        return context().kernalContext().getAsyncContinuationExecutor();\n+    }\n+\n     /**\n      *\n      */\n@@ -2395,7 +2403,7 @@ void checkRestartOrAwait() {\n             }\n \n             throw new IgniteCacheRestartingException(\n-                new IgniteFutureImpl<>(this),\n+                new IgniteFutureImpl<>(this, exec()),\n                 \"Cache is restarting: \" + name\n             );\n         }"
  },
  {
    "sha": "f515811055dbc36038a7f7ef70994ae7e2770652",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteFinishedCacheFutureImpl.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteFinishedCacheFutureImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteFinishedCacheFutureImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteFinishedCacheFutureImpl.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -27,6 +27,6 @@\n      * @param err Error.\n      */\n     public IgniteFinishedCacheFutureImpl(Throwable err) {\n-        super(new GridFinishedFuture<V>(err));\n+        super(new GridFinishedFuture<V>(err), null);\n     }\n }"
  },
  {
    "sha": "a09eb63c05c1be15d9a1eb20a56d44a56452a1fb",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/reader/StandaloneGridKernalContext.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/reader/StandaloneGridKernalContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/reader/StandaloneGridKernalContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/reader/StandaloneGridKernalContext.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -23,6 +23,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import java.util.concurrent.Executor;\n import java.util.concurrent.ExecutorService;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteLogger;\n@@ -740,4 +741,9 @@ protected IgniteConfiguration prepareIgniteConfiguration() {\n     @Override public PerformanceStatisticsProcessor performanceStatistics() {\n         return null;\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override public Executor getAsyncContinuationExecutor() {\n+        return null;\n+    }\n }"
  },
  {
    "sha": "05916139b25c476a5fe4187849095ea121ecf046",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -370,7 +370,7 @@ else if (log.isDebugEnabled())\n \n         fut = new DataStreamerFuture(this);\n \n-        publicFut = new IgniteCacheFutureImpl<>(fut);\n+        publicFut = new IgniteCacheFutureImpl<>(fut, ctx.getAsyncContinuationExecutor());\n \n         GridCacheAdapter cache = ctx.cache().internalCache(cacheName);\n \n@@ -708,7 +708,7 @@ else if (autoFlushFreq == 0)\n     @NotNull protected IgniteCacheFutureImpl createDataLoadFuture() {\n         GridFutureAdapter internalFut0 = new GridFutureAdapter();\n \n-        IgniteCacheFutureImpl fut = new IgniteCacheFutureImpl(internalFut0);\n+        IgniteCacheFutureImpl fut = new IgniteCacheFutureImpl(internalFut0, ctx.getAsyncContinuationExecutor());\n \n         internalFut0.listen(rmvActiveFut);\n "
  },
  {
    "sha": "025f4f4b07481fd8593eb1b2e9572e811c1d6f4f",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java",
    "status": "modified",
    "additions": 25,
    "deletions": 4,
    "changes": 29,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -38,13 +38,25 @@\n     /** */\n     protected final IgniteInternalFuture<V> fut;\n \n+    /** */\n+    protected final Executor defaultExecutor;\n+\n     /**\n      * @param fut Future.\n      */\n     public IgniteFutureImpl(IgniteInternalFuture<V> fut) {\n+        this(fut, null);\n+    }\n+\n+    /**\n+     * @param fut Future.\n+     * @param defaultExecutor Default executor.\n+     */\n+    public IgniteFutureImpl(IgniteInternalFuture<V> fut, @Nullable Executor defaultExecutor) {\n         assert fut != null;\n \n         this.fut = fut;\n+        this.defaultExecutor = defaultExecutor;\n     }\n \n     /**\n@@ -68,20 +80,26 @@ public IgniteFutureImpl(IgniteInternalFuture<V> fut) {\n     @Override public void listen(IgniteInClosure<? super IgniteFuture<V>> lsnr) {\n         A.notNull(lsnr, \"lsnr\");\n \n-        fut.listen(new InternalFutureListener(lsnr));\n+        if (defaultExecutor != null)\n+            listenAsync(lsnr, defaultExecutor);\n+        else\n+            fut.listen(new InternalFutureListener(lsnr));\n     }\n \n     /** {@inheritDoc} */\n     @Override public void listenAsync(IgniteInClosure<? super IgniteFuture<V>> lsnr, Executor exec) {\n         A.notNull(lsnr, \"lsnr\");\n         A.notNull(exec, \"exec\");\n \n-        fut.listen(new InternalFutureListener(new AsyncFutureListener<>(lsnr, exec)));\n+        if (isDone())\n+            fut.listen(new InternalFutureListener(lsnr));\n+        else\n+            fut.listen(new InternalFutureListener(new AsyncFutureListener<>(lsnr, exec)));\n     }\n \n     /** {@inheritDoc} */\n     @Override public <T> IgniteFuture<T> chain(final IgniteClosure<? super IgniteFuture<V>, T> doneCb) {\n-        return new IgniteFutureImpl<>(chainInternal(doneCb, null));\n+        return new IgniteFutureImpl<>(chainInternal(doneCb, null), defaultExecutor);\n     }\n \n     /** {@inheritDoc} */\n@@ -90,7 +108,7 @@ public IgniteFutureImpl(IgniteInternalFuture<V> fut) {\n         A.notNull(doneCb, \"doneCb\");\n         A.notNull(exec, \"exec\");\n \n-        return new IgniteFutureImpl<>(chainInternal(doneCb, exec));\n+        return new IgniteFutureImpl<>(chainInternal(doneCb, exec), defaultExecutor);\n     }\n \n     /**\n@@ -115,6 +133,9 @@ public IgniteFutureImpl(IgniteInternalFuture<V> fut) {\n         if (exec != null)\n             return fut.chain(clos, exec);\n \n+        if (defaultExecutor != null)\n+            return fut.chain(clos, exec);\n+\n         return fut.chain(clos);\n     }\n "
  },
  {
    "sha": "2684fb5c0a356c75fbbc6b0dc259daaec4c85655",
    "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/CacheAsyncContinuationExecutorTest.java",
    "status": "added",
    "additions": 81,
    "deletions": 0,
    "changes": 81,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/CacheAsyncContinuationExecutorTest.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/CacheAsyncContinuationExecutorTest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/CacheAsyncContinuationExecutorTest.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache;\n+\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.CacheAtomicityMode;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * Tests {@link IgniteConfiguration#setAsyncContinuationExecutor(Executor)}\n+ */\n+public class CacheAsyncContinuationExecutorTest extends GridCacheAbstractSelfTest {\n+    /** {@inheritDoc} */\n+    @Override protected int gridCount() {\n+        return 2;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected CacheAtomicityMode atomicityMode() {\n+        return CacheAtomicityMode.ATOMIC;\n+    }\n+\n+    /**\n+     * Tests future listen with default executor.\n+     *\n+     * This test would hang before {@link IgniteConfiguration#setAsyncContinuationExecutor(Executor)}\n+     * was introduced, or if we set {@link Runnable#run()} as the executor.\n+     */\n+    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n+    @Test\n+    public void testListenDefaultConfig() throws Exception {\n+        Optional<String> keyOpt = IntStream.range(0, 1000)\n+                .mapToObj(String::valueOf)\n+                .filter(x -> belongs(x, 1))\n+                .findFirst();\n+\n+        final String key = keyOpt.get();\n+\n+        IgniteCache<String, Integer> cache = jcache(0);\n+        CyclicBarrier barrier = new CyclicBarrier(2);\n+        AtomicReference<String> asyncThreadName = new AtomicReference<>(\"\");\n+\n+        cache.putAsync(key, 1).listen(f -> {\n+            asyncThreadName.set(Thread.currentThread().getName());\n+            cache.replace(key, 2);\n+\n+            try {\n+                barrier.await(5, TimeUnit.SECONDS);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        });\n+\n+        barrier.await(5, TimeUnit.SECONDS);\n+        assertEquals(2, cache.get(key).intValue());\n+        assertTrue(asyncThreadName.get(), asyncThreadName.get().startsWith(\"ForkJoinPool.commonPool-worker\"));\n+    }\n+}"
  },
  {
    "sha": "b74a7fefe4316d7ff9440b2dbba77779a7241c13",
    "filename": "modules/core/src/test/java/org/apache/ignite/internal/util/future/IgniteCacheFutureImplTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/test/java/org/apache/ignite/internal/util/future/IgniteCacheFutureImplTest.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/test/java/org/apache/ignite/internal/util/future/IgniteCacheFutureImplTest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/util/future/IgniteCacheFutureImplTest.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -28,7 +28,7 @@\n public class IgniteCacheFutureImplTest extends IgniteFutureImplTest {\n     /** {@inheritDoc} */\n     @Override protected <V> IgniteFutureImpl<V> createFuture(IgniteInternalFuture<V> fut) {\n-        return new IgniteCacheFutureImpl<>(fut);\n+        return new IgniteCacheFutureImpl<>(fut, Runnable::run);\n     }\n \n     /** {@inheritDoc} */"
  },
  {
    "sha": "b60ebeb35f6f77d8202627f69c5d445c9960fcb3",
    "filename": "modules/core/src/test/java/org/apache/ignite/platform/PlatformThreadUtils.java",
    "status": "modified",
    "additions": 9,
    "deletions": 0,
    "changes": 9,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/test/java/org/apache/ignite/platform/PlatformThreadUtils.java",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/core/src/test/java/org/apache/ignite/platform/PlatformThreadUtils.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/platform/PlatformThreadUtils.java?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -48,4 +48,13 @@ public static void resume(String name) {\n             }\n         }\n     }\n+\n+    /**\n+     * Gets the thread name.\n+     *\n+     * @return Thread name.\n+     */\n+    public static String getThreadName() {\n+        return Thread.currentThread().getName();\n+    }\n }"
  },
  {
    "sha": "42d145e5993ad23b60b7ceefc409d3916709eb6a",
    "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheTestAsyncAwait.cs",
    "status": "added",
    "additions": 66,
    "deletions": 0,
    "changes": 66,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheTestAsyncAwait.cs",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheTestAsyncAwait.cs",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheTestAsyncAwait.cs?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Cache\n+{\n+    using System.Threading;\n+    using System.Threading.Tasks;\n+    using NUnit.Framework;\n+\n+    /// <summary>\n+    /// Tests thick cache operations with async/await.\n+    /// </summary>\n+    public class CacheTestAsyncAwait : TestBase\n+    {\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"CacheTestAsyncAwait\"/> class.\n+        /// </summary>\n+        public CacheTestAsyncAwait() : base(2)\n+        {\n+            // No-op.\n+        }\n+\n+        /// <summary>\n+        /// Tests that async continuations are executed on a ThreadPool thread, not on response handler thread.\n+        /// </summary>\n+        [Test]\n+        public async Task TestAsyncAwaitContinuationIsExecutedWithConfiguredExecutor()\n+        {\n+            var cache = Ignite.GetOrCreateCache<int, int>(TestUtils.TestName);\n+            var key = TestUtils.GetPrimaryKey(Ignite2, cache.Name);\n+\n+            // This causes deadlock if async continuation is executed on the striped thread.\n+            await cache.PutAsync(key, 1);\n+            cache.Replace(key, 2);\n+\n+            Assert.AreEqual(2, cache.Get(key));\n+            StringAssert.StartsWith(\"ForkJoinPool.commonPool-worker-\", TestUtilsJni.GetJavaThreadName());\n+        }\n+\n+        [Test]\n+        public async Task TestLocalOperationExecutesSynchronously()\n+        {\n+            var cache = Ignite.GetOrCreateCache<int, int>(TestUtils.TestName);\n+            var key = TestUtils.GetPrimaryKey(Ignite, cache.Name);\n+            var origThread = Thread.CurrentThread;\n+\n+            await cache.PutAsync(key, key);\n+            \n+            Assert.AreEqual(origThread.ManagedThreadId, Thread.CurrentThread.ManagedThreadId);\n+        }\n+    }\n+}"
  },
  {
    "sha": "e254fc87fad61c6cb254977e53cfb29f14429aba",
    "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTestAsyncAwait.cs",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTestAsyncAwait.cs",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTestAsyncAwait.cs",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTestAsyncAwait.cs?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -22,7 +22,7 @@ namespace Apache.Ignite.Core.Tests.Client.Cache\n     using NUnit.Framework;\n \n     /// <summary>\n-    /// Tests cache operations with async/await.\n+    /// Tests thin cache operations with async/await.\n     /// </summary>\n     public class CacheTestAsyncAwait : ClientTestBase\n     {"
  },
  {
    "sha": "ada1461a3add9b1b9a864c3e8ee87d0c52a8903d",
    "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/ComputeTestAsyncAwait.cs",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/ComputeTestAsyncAwait.cs",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/ComputeTestAsyncAwait.cs",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/ComputeTestAsyncAwait.cs?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Compute\n+{\n+    using System.Threading.Tasks;\n+    using NUnit.Framework;\n+\n+    /// <summary>\n+    /// Tests compute async continuation behavior.\n+    /// </summary>\n+    public class ComputeTestAsyncAwait : TestBase\n+    {\n+        /// <summary>\n+        /// TODO\n+        /// </summary>\n+        [Test]\n+        public async Task TestComputeAsyncContinuation()\n+        {\n+            // TODO: Test local and remote execution - where do we end up?\n+            // Test Tasks and Funcs.\n+            var compute = Ignite.GetCompute();\n+\n+            // TODO: Most of the Compute goes through PlatformAbstractTask.reduce, except for Affinity* overloads\n+            // - test them separately.\n+            await compute.RunAsync(new ComputeAction());\n+\n+            // TODO: More problems: here we hold the pub- thread that called PlatformAbstractTask.reduce,\n+            // so reducing never completes and there is a resource leak.\n+            StringAssert.StartsWith(\"ForkJoinPool.commonPool-worker-\", TestUtilsJni.GetJavaThreadName());\n+        }\n+\n+        /// <summary>\n+        /// TODO\n+        /// </summary>\n+        [Test]\n+        public async Task TestAffinityAsyncContinuation()\n+        {\n+            // TODO: Test local and remote execution.\n+            var compute = Ignite.GetCompute();\n+            var cache = Ignite.GetOrCreateCache<int, int>(\"c\");\n+\n+            await compute.AffinityRunAsync(new[] {cache.Name}, 1, new ComputeAction());\n+\n+            StringAssert.StartsWith(\"ForkJoinPool.commonPool-worker-\", TestUtilsJni.GetJavaThreadName());\n+        }\n+    }\n+}"
  },
  {
    "sha": "d76c9e03f45d7596b9691fb9aceb3ea0be1d3875",
    "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtilsJni.cs",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtilsJni.cs",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtilsJni.cs",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtilsJni.cs?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -95,6 +95,15 @@ public static void DestroyProcess()\n             CallVoidMethod(ClassPlatformProcessUtils, \"destroyProcess\", \"()V\");\n         }\n \n+        /// <summary>\n+        /// Gets the Java thread name.\n+        /// </summary>\n+        /// <returns></returns>\n+        public static string GetJavaThreadName()\n+        {\n+            return CallStringMethod(ClassPlatformThreadUtils, \"getThreadName\", \"()Ljava/lang/String;\");\n+        }\n+\n         /** */\n         private static unsafe void CallStringMethod(string className, string methodName, string methodSig, string arg)\n         {\n@@ -122,5 +131,17 @@ private static unsafe void CallVoidMethod(string className, string methodName, s\n                 env.CallStaticVoidMethod(cls, methodId);\n             }\n         }\n+\n+        /** */\n+        private static unsafe string CallStringMethod(string className, string methodName, string methodSig)\n+        {\n+            var env = Jvm.Get().AttachCurrentThread();\n+            using (var cls = env.FindClass(className))\n+            {\n+                var methodId = env.GetStaticMethodId(cls, methodName, methodSig);\n+                var res = env.CallStaticObjectMethod(cls, methodId);\n+                return env.JStringToString(res.Target);\n+            }\n+        }\n     }\n }"
  },
  {
    "sha": "0b5b71e770c36349bc213266fdbf251a57f05bdd",
    "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Compute/ComputeTaskHolder.cs",
    "status": "modified",
    "additions": 9,
    "deletions": 8,
    "changes": 17,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Compute/ComputeTaskHolder.cs",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Compute/ComputeTaskHolder.cs",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Compute/ComputeTaskHolder.cs?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -59,7 +59,7 @@ internal interface IComputeTaskHolder\n         /// <param name=\"stream\">Stream.</param>\n         /// <returns>Policy.</returns>\n         int JobResultRemote(ComputeJobHolder jobId, PlatformMemoryStream stream);\n-        \n+\n         /// <summary>\n         /// Perform task reduce.\n         /// </summary>\n@@ -70,7 +70,7 @@ internal interface IComputeTaskHolder\n         /// </summary>\n         /// <param name=\"taskHandle\">Task handle.</param>\n         void Complete(long taskHandle);\n-        \n+\n         /// <summary>\n         /// Complete task with error.\n         /// </summary>\n@@ -85,7 +85,7 @@ internal interface IComputeTaskHolder\n     internal class ComputeTaskHolder<TA, T, TR> : IComputeTaskHolder\n     {\n         /** Empty results. */\n-        private static readonly IList<IComputeJobResult<T>> EmptyRes =     \n+        private static readonly IList<IComputeJobResult<T>> EmptyRes =\n             new ReadOnlyCollection<IComputeJobResult<T>>(new List<IComputeJobResult<T>>());\n \n         /** Compute instance. */\n@@ -102,7 +102,7 @@ internal class ComputeTaskHolder<TA, T, TR> : IComputeTaskHolder\n \n         /** Task future. */\n         private readonly Future<TR> _fut = new Future<TR>();\n-                \n+\n         /** Jobs whose results are cached. */\n         private ISet<object> _resJobs;\n \n@@ -111,7 +111,7 @@ internal class ComputeTaskHolder<TA, T, TR> : IComputeTaskHolder\n \n         /** Handles for jobs which are not serialized right away. */\n         private volatile List<long> _jobHandles;\n-        \n+\n         /// <summary>\n         /// Constructor.\n         /// </summary>\n@@ -241,7 +241,7 @@ public void Map(PlatformMemoryStream stream)\n                 Finish(default(TR), e);\n \n                 stream.Reset();\n-                \n+\n                 writer.WriteBoolean(false); // Map failed.\n                 writer.WriteString(e.Message); // Write error message.\n             }\n@@ -345,7 +345,7 @@ public int JobResultRemote(ComputeJobHolder job, PlatformMemoryStream stream)\n                 throw;\n             }\n         }\n-        \n+\n         /** <inheritDoc /> */\n         public void Reduce()\n         {\n@@ -489,6 +489,7 @@ private ComputeJobResultPolicy JobResult0(IComputeJobResult<object> res)\n         /// <param name=\"err\">Error.</param>\n         private void Finish(TR res, Exception err)\n         {\n+            // TODO: Always call this on the ThreadPool to avoid capturing public pool thread.\n             _fut.OnDone(res, err);\n         }\n \n@@ -503,7 +504,7 @@ private void Clean(long taskHandle)\n             var handleRegistry = _compute.Marshaller.Ignite.HandleRegistry;\n \n             if (handles != null)\n-                foreach (var handle in handles) \n+                foreach (var handle in handles)\n                     handleRegistry.Release(handle, true);\n \n             handleRegistry.Release(taskHandle, true);"
  },
  {
    "sha": "86515c2efef17e6282ec7d59a6a9e2eff7955b47",
    "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/Env.cs",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/Env.cs",
    "raw_url": "https://github.com/apache/ignite/raw/49c873eced3ce55840060b58faa0254fb531f53a/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/Env.cs",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/Env.cs?ref=49c873eced3ce55840060b58faa0254fb531f53a",
    "patch": "@@ -230,7 +230,7 @@ public void CallVoidMethod(GlobalRef obj, IntPtr methodId, long* argsPtr = null)\n         /// <summary>\n         /// Calls the static object method.\n         /// </summary>\n-        private GlobalRef CallStaticObjectMethod(GlobalRef cls, IntPtr methodId, long* argsPtr = null)\n+        public GlobalRef CallStaticObjectMethod(GlobalRef cls, IntPtr methodId, long* argsPtr = null)\n         {\n             var res = _callStaticObjectMethod(_envPtr, cls.Target, methodId, argsPtr);\n "
  }
]
