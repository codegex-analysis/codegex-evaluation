[
  {
    "sha": "6ecc2e158d7b90b4ec1620cc1dfe319b056899f7",
    "filename": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAuthenticationAbstractTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAuthenticationAbstractTest.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAuthenticationAbstractTest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAuthenticationAbstractTest.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -23,12 +23,12 @@\n import org.apache.ignite.configuration.DataStorageConfiguration;\n import org.apache.ignite.configuration.IgniteConfiguration;\n import org.apache.ignite.internal.processors.authentication.IgniteAccessControlException;\n-import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.util.typedef.internal.U;\n import org.apache.ignite.testframework.GridTestUtils;\n import org.junit.Test;\n \n import static org.apache.ignite.configuration.WALMode.NONE;\n+import static org.apache.ignite.internal.processors.authentication.AuthenticationProcessorSelfTest.authenticate;\n \n /**\n  * Test REST with enabled authentication.\n@@ -112,9 +112,7 @@ public void testAddUpdateRemoveUser() throws Exception {\n \n         assertTrue(res.asBoolean());\n \n-        IgniteAuthenticationProcessor auth = grid(0).context().authentication();\n-\n-        assertNotNull(auth.authenticate(\"user1\", \"password1\"));\n+        assertNotNull(authenticate(grid(0), \"user1\", \"password1\"));\n \n         // Update user password.\n         ret = content(null, GridRestCommand.UPDATE_USER,\n@@ -125,7 +123,7 @@ public void testAddUpdateRemoveUser() throws Exception {\n \n         assertTrue(res.asBoolean());\n \n-        assertNotNull(auth.authenticate(\"user1\", \"password2\"));\n+        assertNotNull(authenticate(grid(0), \"user1\", \"password2\"));\n \n         // Remove user.\n         ret = content(null, GridRestCommand.REMOVE_USER,\n@@ -137,7 +135,7 @@ public void testAddUpdateRemoveUser() throws Exception {\n \n         GridTestUtils.assertThrows(log, new Callable<Object>() {\n             @Override public Object call() throws Exception {\n-                grid(0).context().authentication().authenticate(\"user1\", \"password1\");\n+                authenticate(grid(0), \"user1\", \"password1\");\n \n                 return null;\n             }"
  },
  {
    "sha": "598f201402d6a3deeb9ca1d165512776f3548c14",
    "filename": "modules/clients/src/test/java/org/apache/ignite/jdbc/thin/JdbcThinAuthenticateConnectionSelfTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/clients/src/test/java/org/apache/ignite/jdbc/thin/JdbcThinAuthenticateConnectionSelfTest.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/clients/src/test/java/org/apache/ignite/jdbc/thin/JdbcThinAuthenticateConnectionSelfTest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/jdbc/thin/JdbcThinAuthenticateConnectionSelfTest.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -25,11 +25,14 @@\n import org.apache.ignite.configuration.DataStorageConfiguration;\n import org.apache.ignite.configuration.IgniteConfiguration;\n import org.apache.ignite.internal.binary.BinaryMarshaller;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n+import org.apache.ignite.internal.processors.security.SecurityContext;\n import org.apache.ignite.internal.util.typedef.internal.U;\n import org.apache.ignite.testframework.GridTestUtils;\n import org.junit.Test;\n \n+import static org.apache.ignite.internal.processors.authentication.AuthenticationProcessorSelfTest.authenticate;\n+import static org.apache.ignite.internal.processors.authentication.AuthenticationProcessorSelfTest.createUser;\n+\n /**\n  * Tests for authenticated an non authenticated JDBC thin connection.\n  */\n@@ -67,11 +70,9 @@\n \n         grid(0).cluster().active(true);\n \n-        AuthorizationContext.context(grid(0).context().authentication().authenticate(\"ignite\", \"ignite\"));\n-\n-        grid(0).context().authentication().addUser(\"another_user\", \"passwd\");\n+        SecurityContext secCtx = authenticate(grid(0), \"ignite\", \"ignite\");\n \n-        AuthorizationContext.clear();\n+        createUser(grid(0), secCtx, \"another_user\", \"passwd\");\n     }\n \n     /** {@inheritDoc} */\n@@ -94,7 +95,7 @@ public void testConnection() throws Exception {\n      */\n     @Test\n     public void testInvalidUserPassword() {\n-        String err = \"Unauthenticated sessions are prohibited\";\n+        String err = \"The user name or password is incorrect [userName=null]\";\n         checkInvalidUserPassword(URL, null, null, err);\n \n         err = \"The user name or password is incorrect\";"
  },
  {
    "sha": "e9190e9881814c59864830888dbc36e3e04c0db8",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/GridKernalContext.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContext.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -35,7 +35,6 @@\n import org.apache.ignite.internal.managers.loadbalancer.GridLoadBalancerManager;\n import org.apache.ignite.internal.managers.systemview.GridSystemViewManager;\n import org.apache.ignite.internal.processors.affinity.GridAffinityProcessor;\n-import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.cache.GridCacheProcessor;\n import org.apache.ignite.internal.processors.cache.mvcc.MvccProcessor;\n import org.apache.ignite.internal.processors.cache.persistence.defragmentation.IgniteDefragmentation;\n@@ -308,13 +307,6 @@\n      */\n     public <K, V> DataStreamProcessor<K, V> dataStream();\n \n-    /**\n-     * Gets authentication processor.\n-     *\n-     * @return Authentication processor.\n-     */\n-    public IgniteAuthenticationProcessor authentication();\n-\n     /**\n      * Gets event continuous processor.\n      *"
  },
  {
    "sha": "a88bbddf4135b488d9507269c179a236babb62d3",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java",
    "status": "modified",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -52,7 +52,6 @@\n import org.apache.ignite.internal.managers.systemview.GridSystemViewManager;\n import org.apache.ignite.internal.managers.tracing.GridTracingManager;\n import org.apache.ignite.internal.processors.affinity.GridAffinityProcessor;\n-import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.cache.CacheConflictResolutionManager;\n import org.apache.ignite.internal.processors.cache.GridCacheProcessor;\n import org.apache.ignite.internal.processors.cache.binary.CacheObjectBinaryProcessorImpl;\n@@ -321,10 +320,6 @@\n     @GridToStringExclude\n     private MvccProcessor coordProc;\n \n-    /** */\n-    @GridToStringExclude\n-    private IgniteAuthenticationProcessor authProc;\n-\n     /** Diagnostic processor. */\n     @GridToStringInclude\n     private DiagnosticProcessor diagnosticProcessor;\n@@ -704,8 +699,6 @@ else if (comp instanceof PdsFoldersResolver)\n             pdsFolderRslvr = (PdsFoldersResolver)comp;\n         else if (comp instanceof GridInternalSubscriptionProcessor)\n             internalSubscriptionProc = (GridInternalSubscriptionProcessor)comp;\n-        else if (comp instanceof IgniteAuthenticationProcessor)\n-            authProc = (IgniteAuthenticationProcessor)comp;\n         else if (comp instanceof IgniteSecurity)\n             security = (IgniteSecurity)comp;\n         else if (comp instanceof CompressionProcessor)\n@@ -1000,11 +993,6 @@ public void addHelper(Object helper) {\n         return coordProc;\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public IgniteAuthenticationProcessor authentication() {\n-        return authProc;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public IgniteLogger log(String ctgr) {\n         return config().getGridLogger().getLogger(ctgr);"
  },
  {
    "sha": "6d1095c5cc0a0e87336745999429c5b1ca6463e8",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -1250,7 +1250,6 @@ public void start(\n                 startTimer.finishGlobalStage(\"Configure binary metadata\");\n \n                 startProcessor(createComponent(IGridClusterStateProcessor.class, ctx));\n-                startProcessor(new IgniteAuthenticationProcessor(ctx));\n                 startProcessor(new GridCacheProcessor(ctx));\n                 startProcessor(new GridQueryProcessor(ctx));\n                 startProcessor(new ClientListenerProcessor(ctx));\n@@ -1567,6 +1566,11 @@ private static DecimalFormat doubleFormat() {\n     private GridProcessor securityProcessor() throws IgniteCheckedException {\n         GridSecurityProcessor prc = createComponent(GridSecurityProcessor.class, ctx);\n \n+        if (cfg.isAuthenticationEnabled() && !(prc instanceof IgniteAuthenticationProcessor)) {\n+            throw new IgniteCheckedException(\"Invalid security configuration: both authentication is enabled\" +\n+                \" and security plugin is provided.\");\n+        }\n+\n         return prc != null && prc.enabled()\n             ? new IgniteSecurityProcessor(ctx, prc)\n             : new NoOpIgniteSecurityProcessor(ctx);\n@@ -4349,7 +4353,7 @@ public void onReconnected(final boolean clusterRestarted) {\n             return (T)new GridClusterStateProcessor(ctx);\n \n         if (cls.equals(GridSecurityProcessor.class))\n-            return null;\n+            return ctx.config().isAuthenticationEnabled() ? (T)new IgniteAuthenticationProcessor(ctx) : null;\n \n         if (cls.equals(IgniteRestProcessor.class))\n             return (T)new GridRestProcessor(ctx);"
  },
  {
    "sha": "c636cd5759caf4469211275061a9f66ce943c764",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgniteNodeAttributes.java",
    "status": "modified",
    "additions": 0,
    "deletions": 3,
    "changes": 3,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/IgniteNodeAttributes.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/IgniteNodeAttributes.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgniteNodeAttributes.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -187,9 +187,6 @@\n     /** Data storage configuration. */\n     public static final String ATTR_DATA_STORAGE_CONFIG = ATTR_PREFIX + \".data.storage.config\";\n \n-    /** User authentication enabled flag. */\n-    public static final String ATTR_AUTHENTICATION_ENABLED = ATTR_PREFIX + \".authentication.enabled\";\n-\n     /** Rebalance thread pool size. */\n     public static final String ATTR_REBALANCE_POOL_SIZE = ATTR_PREFIX + \".rebalance.pool.size\";\n "
  },
  {
    "sha": "57b50d56bac748a2e687f50e8c5990a725d94388",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -75,6 +75,7 @@\n import org.apache.ignite.internal.managers.eventstorage.GridLocalEventListener;\n import org.apache.ignite.internal.managers.systemview.walker.ClusterNodeViewWalker;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n+import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.cache.CacheGroupDescriptor;\n import org.apache.ignite.internal.processors.cache.ClientCacheChangeDummyDiscoveryMessage;\n import org.apache.ignite.internal.processors.cache.DynamicCacheChangeBatch;\n@@ -170,6 +171,7 @@\n import static org.apache.ignite.internal.IgniteVersionUtils.VER;\n import static org.apache.ignite.internal.events.DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT;\n import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.metricName;\n+import static org.apache.ignite.internal.processors.security.SecurityUtils.ifAuthenticationEnabled;\n import static org.apache.ignite.internal.processors.security.SecurityUtils.isSecurityCompatibilityMode;\n import static org.apache.ignite.plugin.segmentation.SegmentationPolicy.NOOP;\n \n@@ -767,7 +769,7 @@ else if (customMsg instanceof ChangeGlobalStateMessage) {\n \n                         ctx.service().onLocalJoin(discoEvt, discoCache);\n \n-                        ctx.authentication().onLocalJoin();\n+                        ifAuthenticationEnabled(ctx, IgniteAuthenticationProcessor::onLocalJoin);\n \n                         ctx.encryption().onLocalJoin();\n "
  },
  {
    "sha": "551f7f7653f16e01b8aa62f04ff892a311e93270",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/AuthorizationContext.java",
    "status": "removed",
    "additions": 0,
    "deletions": 89,
    "changes": 89,
    "blob_url": "https://github.com/apache/ignite/blob/ba2e717ba192f3512393c392d3470011ad6b8e66/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/AuthorizationContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/ba2e717ba192f3512393c392d3470011ad6b8e66/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/AuthorizationContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/AuthorizationContext.java?ref=ba2e717ba192f3512393c392d3470011ad6b8e66",
    "patch": "@@ -1,89 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.ignite.internal.processors.authentication;\n-\n-/**\n- * Ignite authentication context.\n- */\n-public class AuthorizationContext {\n-    /** User. */\n-    private final User user;\n-\n-    /** Current authorization context. */\n-    private static ThreadLocal<AuthorizationContext> actx = new ThreadLocal<>();\n-\n-    /**\n-     * Creates authentication context.\n-     *\n-     * @param user Authorized user.\n-     */\n-    public AuthorizationContext(User user) {\n-        assert user != null;\n-\n-        this.user = user;\n-    }\n-\n-    /**\n-     * @return Authorized user.\n-     */\n-    public String userName() {\n-        return user.name();\n-    }\n-\n-    /**\n-     * @param op User operation to check.\n-     * @throws IgniteAccessControlException If operation check fails: user hasn't permissions for user management\n-     *      or try to remove default user.\n-     */\n-    public void checkUserOperation(UserManagementOperation op) throws IgniteAccessControlException {\n-        assert op != null;\n-\n-        if (user == null)\n-            throw new IgniteAccessControlException(\"Operation not allowed: authorized context is empty.\");\n-\n-        if (!User.DFAULT_USER_NAME.equals(user.name())\n-            && !(UserManagementOperation.OperationType.UPDATE == op.type() && user.name().equals(op.user().name())))\n-            throw new IgniteAccessControlException(\"User management operations are not allowed for user. \" +\n-                \"[curUser=\" + user.name() + ']');\n-\n-        if (op.type() == UserManagementOperation.OperationType.REMOVE\n-            && User.DFAULT_USER_NAME.equals(op.user().name()))\n-            throw new IgniteAccessControlException(\"Default user cannot be removed.\");\n-    }\n-\n-    /**\n-     * @param actx Authorization context to set.\n-     */\n-    public static void context(AuthorizationContext actx) {\n-        AuthorizationContext.actx.set(actx);\n-    }\n-\n-    /**\n-     * Clear authentication context.\n-     */\n-    public static void clear() {\n-        actx.set(null);\n-    }\n-\n-    /**\n-     * @return Current authorization context.\n-     */\n-    public static AuthorizationContext context() {\n-        return actx.get();\n-    }\n-}"
  },
  {
    "sha": "2794c6f9cf60b8b554d4a7ffcc3b632e3fe9b2d7",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
    "status": "modified",
    "additions": 255,
    "deletions": 208,
    "changes": 463,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -18,13 +18,15 @@\n package org.apache.ignite.internal.processors.authentication;\n \n import java.io.Serializable;\n+import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -37,7 +39,6 @@\n import org.apache.ignite.internal.GridTopic;\n import org.apache.ignite.internal.IgniteInternalFuture;\n import org.apache.ignite.internal.IgniteInterruptedCheckedException;\n-import org.apache.ignite.internal.IgniteNodeAttributes;\n import org.apache.ignite.internal.managers.communication.GridIoManager;\n import org.apache.ignite.internal.managers.communication.GridIoPolicy;\n import org.apache.ignite.internal.managers.communication.GridMessageListener;\n@@ -52,6 +53,9 @@\n import org.apache.ignite.internal.processors.cache.persistence.metastorage.MetastorageTree;\n import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadOnlyMetastorage;\n import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadWriteMetastorage;\n+import org.apache.ignite.internal.processors.security.GridSecurityProcessor;\n+import org.apache.ignite.internal.processors.security.SecurityContext;\n+import org.apache.ignite.internal.processors.security.UserOptions;\n import org.apache.ignite.internal.util.future.GridFutureAdapter;\n import org.apache.ignite.internal.util.tostring.GridToStringExclude;\n import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n@@ -62,7 +66,13 @@\n import org.apache.ignite.lang.IgniteFuture;\n import org.apache.ignite.lang.IgniteFutureCancelledException;\n import org.apache.ignite.lang.IgniteUuid;\n-import org.apache.ignite.spi.IgniteNodeValidationResult;\n+import org.apache.ignite.plugin.security.AuthenticationContext;\n+import org.apache.ignite.plugin.security.SecurityCredentials;\n+import org.apache.ignite.plugin.security.SecurityException;\n+import org.apache.ignite.plugin.security.SecurityPermission;\n+import org.apache.ignite.plugin.security.SecurityPermissionSet;\n+import org.apache.ignite.plugin.security.SecuritySubject;\n+import org.apache.ignite.plugin.security.SecuritySubjectType;\n import org.apache.ignite.spi.discovery.DiscoveryDataBag;\n import org.apache.ignite.spi.discovery.DiscoverySpi;\n import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n@@ -73,11 +83,17 @@\n import static org.apache.ignite.events.EventType.EVT_NODE_JOINED;\n import static org.apache.ignite.events.EventType.EVT_NODE_LEFT;\n import static org.apache.ignite.internal.GridComponent.DiscoveryDataExchangeType.AUTH_PROC;\n+import static org.apache.ignite.internal.GridTopic.TOPIC_AUTH;\n+import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_SECURITY_CREDENTIALS;\n+import static org.apache.ignite.internal.processors.authentication.User.DFAULT_USER_NAME;\n+import static org.apache.ignite.internal.processors.authentication.UserManagementOperation.OperationType.ADD;\n+import static org.apache.ignite.internal.processors.authentication.UserManagementOperation.OperationType.REMOVE;\n+import static org.apache.ignite.internal.processors.authentication.UserManagementOperation.OperationType.UPDATE;\n \n /**\n  *\n  */\n-public class IgniteAuthenticationProcessor extends GridProcessorAdapter implements MetastorageLifecycleListener {\n+public class IgniteAuthenticationProcessor extends GridProcessorAdapter implements GridSecurityProcessor, MetastorageLifecycleListener {\n     /** Store user prefix. */\n     private static final String STORE_USER_PREFIX = \"user.\";\n \n@@ -90,7 +106,7 @@\n     /** Futures prepared user map. Authentication message ID -> public future. */\n     private final ConcurrentMap<IgniteUuid, AuthenticateFuture> authFuts = new ConcurrentHashMap<>();\n \n-    /** Whan the future is done the node is ready for authentication. */\n+    /** When the future is done the node is ready for authentication. */\n     private final GridFutureAdapter<Void> readyForAuthFut = new GridFutureAdapter<>();\n \n     /** Operation mutex. */\n@@ -115,9 +131,6 @@\n     /** Coordinator node. */\n     private ClusterNode crdNode;\n \n-    /** Is authentication enabled. */\n-    private boolean isEnabled;\n-\n     /** Disconnected flag. */\n     private volatile boolean disconnected;\n \n@@ -136,9 +149,6 @@\n     /** Node activate future. */\n     private final GridFutureAdapter<Void> activateFut = new GridFutureAdapter<>();\n \n-    /** Validate error. */\n-    private String validateErr;\n-\n     /**\n      * @param ctx Kernal context.\n      */\n@@ -150,18 +160,59 @@ public IgniteAuthenticationProcessor(GridKernalContext ctx) {\n     @Override public void start() throws IgniteCheckedException {\n         super.start();\n \n-        isEnabled = ctx.config().isAuthenticationEnabled();\n-\n-        if (isEnabled && !GridCacheUtils.isPersistenceEnabled(ctx.config())) {\n-            isEnabled = false;\n-\n+        if (!GridCacheUtils.isPersistenceEnabled(ctx.config())) {\n             throw new IgniteCheckedException(\"Authentication can be enabled only for cluster with enabled persistence.\"\n                 + \" Check the DataRegionConfiguration\");\n         }\n \n         ctx.internalSubscriptionProcessor().registerMetastorageListener(this);\n \n-        ctx.addNodeAttribute(IgniteNodeAttributes.ATTR_AUTHENTICATION_ENABLED, isEnabled);\n+        ctx.addNodeAttribute(ATTR_SECURITY_CREDENTIALS, new SecurityCredentials(null, null));\n+\n+        exec = new IgniteThreadPoolExecutor(\n+            \"auth\",\n+            ctx.config().getIgniteInstanceName(),\n+            1,\n+            1,\n+            0,\n+            new LinkedBlockingQueue<>());\n+    }\n+\n+    /**\n+     * On cache processor started.\n+     */\n+    public void cacheProcessorStarted() {\n+        sharedCtx = ctx.cache().context();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void stop(boolean cancel) throws IgniteCheckedException {\n+        if (ioLsnr != null)\n+            ctx.io().removeMessageListener(TOPIC_AUTH, ioLsnr);\n+\n+        if (discoLsnr != null)\n+            ctx.event().removeDiscoveryEventListener(discoLsnr, DISCO_EVT_TYPES);\n+\n+        cancelFutures(\"Node stopped\");\n+\n+        if (exec != null) {\n+            if (!cancel)\n+                exec.shutdown();\n+            else\n+                exec.shutdownNow();\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void onKernalStop(boolean cancel) {\n+        synchronized (mux) {\n+            cancelFutures(\"Kernal stopped.\");\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void onKernalStart(boolean active) throws IgniteCheckedException {\n+        super.onKernalStart(active);\n \n         GridDiscoveryManager discoMgr = ctx.discovery();\n \n@@ -172,7 +223,7 @@ public IgniteAuthenticationProcessor(GridKernalContext ctx) {\n         discoMgr.setCustomEventListener(UserAcceptedMessage.class, new UserAcceptedListener());\n \n         discoLsnr = (evt, discoCache) -> {\n-            if (!isEnabled || ctx.isStopping())\n+            if (ctx.isStopping())\n                 return;\n \n             switch (evt.type()) {\n@@ -190,7 +241,7 @@ public IgniteAuthenticationProcessor(GridKernalContext ctx) {\n         ctx.event().addDiscoveryEventListener(discoLsnr, DISCO_EVT_TYPES);\n \n         ioLsnr = (nodeId, msg, plc) -> {\n-            if (!isEnabled || ctx.isStopping())\n+            if (ctx.isStopping())\n                 return;\n \n             if (msg instanceof UserManagementOperationFinishedMessage)\n@@ -201,64 +252,11 @@ else if (msg instanceof UserAuthenticateResponseMessage)\n                 onAuthenticateResponseMessage((UserAuthenticateResponseMessage)msg);\n         };\n \n-        ioMgr.addMessageListener(GridTopic.TOPIC_AUTH, ioLsnr);\n-\n-        exec = new IgniteThreadPoolExecutor(\n-            \"auth\",\n-            ctx.config().getIgniteInstanceName(),\n-            1,\n-            1,\n-            0,\n-            new LinkedBlockingQueue<>());\n-    }\n-\n-    /**\n-     * On cache processor started.\n-     */\n-    public void cacheProcessorStarted() {\n-        sharedCtx = ctx.cache().context();\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override public void stop(boolean cancel) throws IgniteCheckedException {\n-        if (!isEnabled)\n-            return;\n-\n-        ctx.io().removeMessageListener(GridTopic.TOPIC_AUTH, ioLsnr);\n-\n-        ctx.event().removeDiscoveryEventListener(discoLsnr, DISCO_EVT_TYPES);\n-\n-        cancelFutures(\"Node stopped\");\n-\n-        if (!cancel)\n-            exec.shutdown();\n-        else\n-            exec.shutdownNow();\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override public void onKernalStop(boolean cancel) {\n-        if (!isEnabled)\n-            return;\n-\n-        synchronized (mux) {\n-            cancelFutures(\"Kernal stopped.\");\n-        }\n-    }\n-\n-    /** {@inheritDoc} */\n-    @Override public void onKernalStart(boolean active) throws IgniteCheckedException {\n-        super.onKernalStart(active);\n-\n-        if (validateErr != null)\n-            throw new IgniteCheckedException(validateErr);\n+        ioMgr.addMessageListener(TOPIC_AUTH, ioLsnr);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void onDisconnected(IgniteFuture reconnectFut) {\n-        if (!isEnabled)\n-            return;\n-\n         synchronized (mux) {\n             assert !disconnected;\n \n@@ -270,9 +268,6 @@ public void cacheProcessorStarted() {\n \n     /** {@inheritDoc} */\n     @Override public IgniteInternalFuture<?> onReconnected(boolean active) {\n-        if (!isEnabled)\n-            return null;\n-\n         synchronized (mux) {\n             assert disconnected;\n \n@@ -282,25 +277,21 @@ public void cacheProcessorStarted() {\n         }\n     }\n \n-    /**\n-     * Authenticate user.\n-     *\n-     * @param login User's login.\n-     * @param passwd Plain text password.\n-     * @return User object on successful authenticate. Otherwise returns {@code null}.\n-     * @throws IgniteCheckedException On error.\n-     * @throws IgniteAccessControlException On authentication error.\n-     */\n-    public AuthorizationContext authenticate(String login, String passwd) throws IgniteCheckedException {\n-        checkEnabled();\n+    /** {@inheritDoc} */\n+    @Override public SecurityContext authenticate(AuthenticationContext authCtx) throws IgniteCheckedException {\n+        SecurityCredentials creds = authCtx.credentials();\n+\n+        String login = (String)creds.getLogin();\n \n         if (F.isEmpty(login))\n             throw new IgniteAccessControlException(\"The user name or password is incorrect [userName=\" + login + ']');\n \n+        String passwd = (String)creds.getPassword();\n+\n         if (ctx.clientNode()) {\n-            while (true) {\n-                AuthenticateFuture fut;\n+            AuthenticateFuture fut;\n \n+            do {\n                 synchronized (mux) {\n                     ClusterNode rndNode = U.randomServerNode(ctx);\n \n@@ -310,19 +301,16 @@ public AuthorizationContext authenticate(String login, String passwd) throws Ign\n \n                     authFuts.put(msg.id(), fut);\n \n-                    ctx.io().sendToGridTopic(rndNode, GridTopic.TOPIC_AUTH, msg, GridIoPolicy.SYSTEM_POOL);\n+                    ctx.io().sendToGridTopic(rndNode, TOPIC_AUTH, msg, GridIoPolicy.SYSTEM_POOL);\n                 }\n \n                 fut.get();\n-\n-                if (fut.retry())\n-                    continue;\n-\n-                return new AuthorizationContext(User.create(login));\n-            }\n+            } while (fut.retry());\n         }\n         else\n-            return new AuthorizationContext(authenticateOnServer(login, passwd));\n+            authenticateOnServer(login, passwd);\n+\n+        return new SecurityContextImpl(authCtx.subjectId(), login);\n     }\n \n     /**\n@@ -342,41 +330,27 @@ public static void validate(String login, String passwd) throws UserManagementEx\n                 \"The user name length must be less then 60 bytes in UTF8\");\n     }\n \n-    /**\n-     * Adds new user.\n-     *\n-     * @param login User's login.\n-     * @param passwd Plain text password.\n-     * @throws IgniteCheckedException On error.\n-     */\n-    public void addUser(String login, String passwd) throws IgniteCheckedException {\n-        validate(login, passwd);\n+    /** {@inheritDoc} */\n+    @Override public void createUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        String pwd = opts.password();\n+\n+        validate(login, pwd);\n \n-        UserManagementOperation op = new UserManagementOperation(User.create(login, passwd),\n-            UserManagementOperation.OperationType.ADD);\n+        UserManagementOperation op = new UserManagementOperation(User.create(login, pwd), ADD);\n \n         execUserOperation(op).get();\n     }\n \n-    /**\n-     * @param login User name.\n-     * @throws IgniteCheckedException On error.\n-     */\n-    public void removeUser(String login) throws IgniteCheckedException {\n-        UserManagementOperation op = new UserManagementOperation(User.create(login),\n-            UserManagementOperation.OperationType.REMOVE);\n+    /** {@inheritDoc} */\n+    @Override public void dropUser(String login) throws IgniteCheckedException {\n+        UserManagementOperation op = new UserManagementOperation(User.create(login), REMOVE);\n \n         execUserOperation(op).get();\n     }\n \n-    /**\n-     * @param login User name.\n-     * @param passwd User password.\n-     * @throws IgniteCheckedException On error.\n-     */\n-    public void updateUser(String login, String passwd) throws IgniteCheckedException {\n-        UserManagementOperation op = new UserManagementOperation(User.create(login, passwd),\n-            UserManagementOperation.OperationType.UPDATE);\n+    /** {@inheritDoc} */\n+    @Override public void alterUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        UserManagementOperation op = new UserManagementOperation(User.create(login, opts.password()), UPDATE);\n \n         execUserOperation(op).get();\n     }\n@@ -409,25 +383,11 @@ public void updateUser(String login, String passwd) throws IgniteCheckedExceptio\n         return DiscoveryDataExchangeType.AUTH_PROC;\n     }\n \n-    /** {@inheritDoc} */\n-    @Nullable @Override public IgniteNodeValidationResult validateNode(ClusterNode node) {\n-        Boolean rmtEnabled = node.attribute(IgniteNodeAttributes.ATTR_AUTHENTICATION_ENABLED);\n-\n-        if (isEnabled && rmtEnabled == null) {\n-            String errMsg = \"Failed to add node to topology because user authentication is enabled on cluster and \" +\n-                \"the node doesn't support user authentication [nodeId=\" + node.id() + ']';\n-\n-            return new IgniteNodeValidationResult(node.id(), errMsg);\n-        }\n-\n-        return null;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void collectGridNodeData(DiscoveryDataBag dataBag) {\n         // 1. Collect users info only on coordinator\n         // 2. Doesn't collect users info to send on client node due to security reason.\n-        if (!isEnabled || !isLocalNodeCoordinator() || dataBag.isJoiningNodeClient())\n+        if (!isLocalNodeCoordinator() || dataBag.isJoiningNodeClient())\n             return;\n \n         synchronized (mux) {\n@@ -462,11 +422,9 @@ private boolean isLocalNodeCoordinator() {\n         initUsrs = (InitialUsersData)data.commonData();\n     }\n \n-    /**\n-     * @return {@code true} if authentication is enabled, {@code false} if not.\n-     */\n-    public boolean enabled() {\n-        return isEnabled;\n+    /** {@inheritDoc} */\n+    @Override public boolean enabled() {\n+        return true;\n     }\n \n     /**\n@@ -480,16 +438,6 @@ private void checkActivate() {\n         }\n     }\n \n-    /**\n-     *\n-     */\n-    private void checkEnabled() {\n-        if (!isEnabled) {\n-            throw new IgniteException(\"Can not perform the operation because the authentication\" +\n-                \" is not enabled for the cluster.\");\n-        }\n-    }\n-\n     /**\n      */\n     private void addDefaultUser() {\n@@ -509,24 +457,16 @@ private void addDefaultUser() {\n      *\n      * @param login User's login.\n      * @param passwd Plain text password.\n-     * @return User object on successful authenticate. Otherwise returns {@code null}.\n      * @throws IgniteCheckedException On authentication error.\n      */\n-    private User authenticateOnServer(String login, String passwd) throws IgniteCheckedException {\n+    private void authenticateOnServer(String login, String passwd) throws IgniteCheckedException {\n         assert !ctx.clientNode() : \"Must be used on server node\";\n \n         readyForAuthFut.get();\n \n-        User usr;\n+        User usr = users.get(login);\n \n-        usr = users.get(login);\n-\n-        if (usr == null)\n-            throw new IgniteAccessControlException(\"The user name or password is incorrect [userName=\" + login + ']');\n-\n-        if (usr.authorize(passwd))\n-            return usr;\n-        else\n+        if (usr == null || !usr.authorize(passwd))\n             throw new IgniteAccessControlException(\"The user name or password is incorrect [userName=\" + login + ']');\n     }\n \n@@ -537,20 +477,14 @@ private User authenticateOnServer(String login, String passwd) throws IgniteChec\n      */\n     private UserOperationFinishFuture execUserOperation(UserManagementOperation op) throws IgniteCheckedException {\n         checkActivate();\n-        checkEnabled();\n \n         synchronized (mux) {\n             if (disconnected) {\n                 throw new UserManagementException(\"Failed to initiate user management operation because \"\n                     + \"client node is disconnected.\");\n             }\n \n-            AuthorizationContext actx = AuthorizationContext.context();\n-\n-            if (actx == null)\n-                throw new IgniteAccessControlException(\"Operation not allowed: authorized context is empty.\");\n-\n-            actx.checkUserOperation(op);\n+            checkUserOperation(op);\n \n             UserOperationFinishFuture fut = new UserOperationFinishFuture(op.id());\n \n@@ -677,8 +611,6 @@ private ClusterNode coordinator() {\n                     U.warn(log, \"Cannot find the server coordinator node. \"\n                         + \"Possible a client is started with forceServerMode=true. \" +\n                         \"Security warning: user authentication will be disabled on the client.\");\n-\n-                    isEnabled = false;\n                 }\n                 else\n                     assert res != null;\n@@ -803,7 +735,7 @@ private void onFinishOperation(IgniteUuid opId, IgniteCheckedException err) {\n     private void onAuthenticateRequestMessage(UUID nodeId, UserAuthenticateRequestMessage msg) {\n         UserAuthenticateResponseMessage respMsg;\n         try {\n-            User u = authenticateOnServer(msg.name(), msg.password());\n+            authenticateOnServer(msg.name(), msg.password());\n \n             respMsg = new UserAuthenticateResponseMessage(msg.id(), null);\n         }\n@@ -841,9 +773,6 @@ public void onLocalJoin() {\n             return;\n \n         if (F.eq(coordinator().id(), ctx.localNodeId())) {\n-            if (!isEnabled)\n-                return;\n-\n             assert initUsrs == null;\n \n             // Creates default user on coordinator if it is the first start of PDS cluster\n@@ -852,35 +781,6 @@ public void onLocalJoin() {\n                 addDefaultUser();\n         }\n         else {\n-            Boolean rmtEnabled = coordinator().attribute(IgniteNodeAttributes.ATTR_AUTHENTICATION_ENABLED);\n-\n-            // The cluster doesn't support authentication (ver < 2.5)\n-            if (rmtEnabled == null)\n-                rmtEnabled = false;\n-\n-            if (isEnabled != rmtEnabled) {\n-                if (rmtEnabled)\n-                    U.warn(log, \"User authentication is enabled on cluster. Enables on local node\");\n-                else {\n-                    validateErr = \"User authentication is disabled on cluster\";\n-\n-                    return;\n-                }\n-            }\n-\n-            isEnabled = rmtEnabled;\n-\n-            if (!isEnabled) {\n-                try {\n-                    stop(false);\n-                }\n-                catch (IgniteCheckedException e) {\n-                    U.warn(log, \"Unexpected exception on stopped authentication processor\", e);\n-                }\n-\n-                return;\n-            }\n-\n             if (ctx.clientNode())\n                 return;\n \n@@ -971,6 +871,63 @@ private static boolean isNodeHoldsUsers(ClusterNode n) {\n         return !n.isClient() && !n.isDaemon();\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public SecurityContext authenticateNode(ClusterNode node, SecurityCredentials cred) throws IgniteCheckedException {\n+        return new SecurityContextImpl(node.id(), null);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public SecuritySubject authenticatedSubject(UUID subjId) throws IgniteCheckedException {\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<SecuritySubject> authenticatedSubjects() throws IgniteCheckedException {\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean isGlobalNodeAuthentication() {\n+        return false;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void authorize(String name, SecurityPermission perm, SecurityContext securityCtx) throws SecurityException {\n+        // No-op.\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void onSessionExpired(UUID subjId) {\n+        // No-op.\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public SecurityContext securityContext(UUID subjId) {\n+        return new SecurityContextImpl(subjId, null);\n+    }\n+\n+    /**\n+     * @param op User operation to check.\n+     * @throws IgniteAccessControlException If operation check fails: user hasn't permissions for user management\n+     *      or try to remove default user.\n+     */\n+    private void checkUserOperation(UserManagementOperation op) throws IgniteAccessControlException {\n+        assert op != null;\n+\n+        Object login = ctx.security().securityContext().subject().login();\n+\n+        if (login == null)\n+            throw new IgniteAccessControlException(\"Operation not allowed: security context is empty.\");\n+\n+        if (!DFAULT_USER_NAME.equals(login) && !(UPDATE == op.type() && Objects.equals(login, op.user().name()))) {\n+            throw new IgniteAccessControlException(\"User management operations are not allowed for user\" +\n+                \" [curUser=\" + login + ']');\n+        }\n+\n+        if (op.type() == REMOVE && DFAULT_USER_NAME.equals(op.user().name()))\n+            throw new IgniteAccessControlException(\"Default user cannot be removed.\");\n+    }\n+\n     /**\n      * Initial data is collected on coordinator to send to join node.\n      */\n@@ -1008,7 +965,7 @@ private static boolean isNodeHoldsUsers(ClusterNode n) {\n         /** {@inheritDoc} */\n         @Override public void onCustomEvent(AffinityTopologyVersion topVer, ClusterNode snd,\n             final UserProposedMessage msg) {\n-            if (!isEnabled || ctx.isStopping() || ctx.clientNode())\n+            if (ctx.isStopping() || ctx.clientNode())\n                 return;\n \n             if (log.isDebugEnabled())\n@@ -1024,7 +981,7 @@ private static boolean isNodeHoldsUsers(ClusterNode n) {\n     private final class UserAcceptedListener implements CustomEventListener<UserAcceptedMessage> {\n         /** {@inheritDoc} */\n         @Override public void onCustomEvent(AffinityTopologyVersion topVer, ClusterNode snd, UserAcceptedMessage msg) {\n-            if (!isEnabled || ctx.isStopping())\n+            if (ctx.isStopping())\n                 return;\n \n             if (log.isDebugEnabled())\n@@ -1197,7 +1154,7 @@ UUID nodeId() {\n         }\n \n         /**\n-         * @return {@code true} if need retry (aftyer node left).\n+         * @return {@code true} if need retry (after node left).\n          */\n         boolean retry() {\n             return retry;\n@@ -1335,4 +1292,94 @@ private RefreshUsersStorageWorker(ArrayList<User> usrs) {\n             }\n         }\n     }\n+\n+    /** */\n+    private static class SecuritySubjectImpl implements SecuritySubject {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /** */\n+        private final UUID id;\n+\n+        /**  */\n+        private final Object login;\n+\n+        /** */\n+        public SecuritySubjectImpl(UUID id, Object login) {\n+            this.id = id;\n+            this.login = login;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public UUID id() {\n+            return id;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public SecuritySubjectType type() {\n+            return null;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public Object login() {\n+            return login;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public InetSocketAddress address() {\n+            return null;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public SecurityPermissionSet permissions() {\n+            return null;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public String toString() {\n+            return S.toString(SecuritySubjectImpl.class, this);\n+        }\n+    }\n+\n+    /** */\n+    private static class SecurityContextImpl implements SecurityContext, Serializable {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /** */\n+        private final SecuritySubject subj;\n+\n+        /** */\n+        public SecurityContextImpl(UUID subjId, String login) {\n+            subj = new SecuritySubjectImpl(subjId, login);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public SecuritySubject subject() {\n+            return subj;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean taskOperationAllowed(String taskClsName, SecurityPermission perm) {\n+            return false;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean cacheOperationAllowed(String cacheName, SecurityPermission perm) {\n+            return false;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean serviceOperationAllowed(String srvcName, SecurityPermission perm) {\n+            return false;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean systemOperationAllowed(SecurityPermission perm) {\n+            // This is the only permission check that is not orphaned and is used when a new node joins the cluster.\n+            // Since the current implementation of the security processor always trusts the server nodes,\n+            // we return {@code true} here.\n+            return true;\n+        }\n+    }\n }"
  },
  {
    "sha": "8e2e13822ced7296326f1913b6965c7d6201e00c",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -90,6 +90,7 @@\n import org.apache.ignite.internal.processors.GridProcessorAdapter;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.processors.affinity.GridAffinityAssignmentCache;\n+import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.cache.binary.CacheObjectBinaryProcessorImpl;\n import org.apache.ignite.internal.processors.cache.datastructures.CacheDataStructuresManager;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCache;\n@@ -219,6 +220,7 @@\n import static org.apache.ignite.internal.processors.cache.GridCacheUtils.isPersistentCache;\n import static org.apache.ignite.internal.processors.cache.ValidationOnNodeJoinUtils.validateHashIdResolvers;\n import static org.apache.ignite.internal.processors.cache.distributed.dht.topology.GridDhtLocalPartition.DFLT_CACHE_REMOVE_ENTRIES_TTL;\n+import static org.apache.ignite.internal.processors.security.SecurityUtils.ifAuthenticationEnabled;\n import static org.apache.ignite.internal.util.IgniteUtils.doInParallel;\n \n /**\n@@ -628,7 +630,7 @@ private void cleanup(CacheConfiguration cfg, @Nullable Object rsrc, boolean near\n             log.debug(\"Started cache processor.\");\n \n         ctx.state().cacheProcessorStarted();\n-        ctx.authentication().cacheProcessorStarted();\n+        ifAuthenticationEnabled(ctx, IgniteAuthenticationProcessor::cacheProcessorStarted);\n \n         ctx.systemView().registerFiltrableView(\n             CACHE_GRP_PAGE_LIST_VIEW,"
  },
  {
    "sha": "1235112de20c1c98b0b2fddf6805f9073facb712",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -72,6 +72,7 @@\n import org.apache.ignite.internal.pagemem.wal.record.ExchangeRecord;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.processors.affinity.GridAffinityAssignmentCache;\n+import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.cache.CacheAffinityChangeMessage;\n import org.apache.ignite.internal.processors.cache.CacheGroupContext;\n import org.apache.ignite.internal.processors.cache.CacheGroupDescriptor;\n@@ -151,6 +152,7 @@\n import static org.apache.ignite.internal.processors.cache.ExchangeDiscoveryEvents.serverLeftEvent;\n import static org.apache.ignite.internal.processors.cache.distributed.dht.preloader.CachePartitionPartialCountersMap.PARTIAL_COUNTERS_MAP_SINCE;\n import static org.apache.ignite.internal.processors.cache.persistence.snapshot.IgniteSnapshotManager.isSnapshotOperation;\n+import static org.apache.ignite.internal.processors.security.SecurityUtils.ifAuthenticationEnabled;\n import static org.apache.ignite.internal.util.IgniteUtils.doInParallel;\n import static org.apache.ignite.internal.util.IgniteUtils.doInParallelUninterruptibly;\n \n@@ -2547,7 +2549,7 @@ private String exchangeTimingsLogMessage(String header, List<String> timings) {\n             // Create and destroy caches and cache proxies.\n             cctx.cache().onExchangeDone(initialVersion(), exchActions, err);\n \n-            cctx.kernalContext().authentication().onActivate();\n+            ifAuthenticationEnabled(cctx.kernalContext(), IgniteAuthenticationProcessor::onActivate);\n \n             Map<T2<Integer, Integer>, Long> localReserved = partHistSuppliers.getReservations(cctx.localNodeId());\n "
  },
  {
    "sha": "ceea3db697cb9a3afa23340ebca1ac7f30364a23",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/reader/StandaloneGridKernalContext.java",
    "status": "modified",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/reader/StandaloneGridKernalContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/reader/StandaloneGridKernalContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/reader/StandaloneGridKernalContext.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -50,7 +50,6 @@\n import org.apache.ignite.internal.managers.systemview.GridSystemViewManager;\n import org.apache.ignite.internal.managers.systemview.JmxSystemViewExporterSpi;\n import org.apache.ignite.internal.processors.affinity.GridAffinityProcessor;\n-import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.cache.GridCacheProcessor;\n import org.apache.ignite.internal.processors.cache.binary.CacheObjectBinaryProcessorImpl;\n import org.apache.ignite.internal.processors.cache.mvcc.MvccProcessor;\n@@ -387,11 +386,6 @@ protected IgniteConfiguration prepareIgniteConfiguration() {\n         return null;\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public IgniteAuthenticationProcessor authentication() {\n-        return null;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public GridContinuousProcessor continuous() {\n         return null;"
  },
  {
    "sha": "87af44dbd948de62a9bf4296f9415a0842d62885",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerAbstractConnectionContext.java",
    "status": "modified",
    "additions": 3,
    "deletions": 35,
    "changes": 38,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerAbstractConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerAbstractConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerAbstractConnectionContext.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -22,7 +22,6 @@\n import java.util.UUID;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.internal.GridKernalContext;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.authentication.IgniteAccessControlException;\n import org.apache.ignite.internal.processors.security.SecurityContext;\n import org.apache.ignite.internal.util.nio.GridNioSession;\n@@ -46,9 +45,6 @@\n     /** Connection ID. */\n     private long connId;\n \n-    /** Authorization context. */\n-    private AuthorizationContext authCtx;\n-\n     /** User attributes. */\n     protected Map<String, String> userAttrs;\n \n@@ -75,11 +71,6 @@ public GridKernalContext kernalContext() {\n         return secCtx;\n     }\n \n-    /** {@inheritDoc} */\n-    @Nullable @Override public AuthorizationContext authorizationContext() {\n-        return authCtx;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public long connectionId() {\n         return connId;\n@@ -88,33 +79,12 @@ public GridKernalContext kernalContext() {\n     /**\n      * Perform authentication.\n      *\n-     * @return Auth context.\n      * @throws IgniteCheckedException If failed.\n      */\n-    protected AuthorizationContext authenticate(GridNioSession ses, String user, String pwd)\n-        throws IgniteCheckedException {\n-        if (ctx.security().enabled())\n-            authCtx = authenticateExternal(ses, user, pwd).authorizationContext();\n-        else if (ctx.authentication().enabled()) {\n-            if (F.isEmpty(user))\n-                throw new IgniteAccessControlException(\"Unauthenticated sessions are prohibited.\");\n-\n-            authCtx = ctx.authentication().authenticate(user, pwd);\n+    protected void authenticate(GridNioSession ses, String user, String pwd) throws IgniteCheckedException {\n+        if (!ctx.security().enabled())\n+            return;\n \n-            if (authCtx == null)\n-                throw new IgniteAccessControlException(\"Unknown authentication error.\");\n-        }\n-        else\n-            authCtx = null;\n-\n-        return authCtx;\n-    }\n-\n-    /**\n-     * Do 3-rd party authentication.\n-     */\n-    private AuthenticationContext authenticateExternal(GridNioSession ses, String user, String pwd)\n-        throws IgniteCheckedException {\n         SecurityCredentials cred = new SecurityCredentials(user, pwd);\n \n         AuthenticationContext authCtx = new AuthenticationContext();\n@@ -133,8 +103,6 @@ private AuthenticationContext authenticateExternal(GridNioSession ses, String us\n                 String.format(\"The user name or password is incorrect [userName=%s]\", user)\n             );\n         }\n-\n-        return authCtx;\n     }\n \n     /** {@inheritDoc} */"
  },
  {
    "sha": "a541a059ae923837b884f8e4508449f6fa1575e7",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerConnectionContext.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerConnectionContext.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -19,7 +19,6 @@\n \n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.internal.binary.BinaryReaderExImpl;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.security.SecurityContext;\n import org.apache.ignite.internal.util.nio.GridNioSession;\n import org.jetbrains.annotations.Nullable;\n@@ -74,13 +73,6 @@ void initializeFromHandshake(GridNioSession ses, ClientListenerProtocolVersion v\n      */\n     void onDisconnected();\n \n-    /**\n-     * Return connection authorization context.\n-     *\n-     * @return authorization context.\n-     */\n-    @Nullable AuthorizationContext authorizationContext();\n-\n     /**\n      * @return Security context.\n      */"
  },
  {
    "sha": "484019537e57228360b48e5b3ec4754e93a61a88",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerNioListener.java",
    "status": "modified",
    "additions": 0,
    "deletions": 10,
    "changes": 10,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerNioListener.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerNioListener.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerNioListener.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -35,7 +35,6 @@\n import org.apache.ignite.internal.binary.BinaryWriterExImpl;\n import org.apache.ignite.internal.binary.streams.BinaryHeapInputStream;\n import org.apache.ignite.internal.binary.streams.BinaryHeapOutputStream;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.authentication.IgniteAccessControlException;\n import org.apache.ignite.internal.processors.odbc.jdbc.JdbcConnectionContext;\n import org.apache.ignite.internal.processors.odbc.odbc.OdbcConnectionContext;\n@@ -193,18 +192,9 @@ public ClientListenerNioListener(GridKernalContext ctx, GridSpinBusyLock busyLoc\n \n             ClientListenerResponse resp;\n \n-            AuthorizationContext authCtx = connCtx.authorizationContext();\n-\n-            if (authCtx != null)\n-                AuthorizationContext.context(authCtx);\n-\n             try (OperationSecurityContext s = ctx.security().withContext(connCtx.securityContext())) {\n                 resp = handler.handle(req);\n             }\n-            finally {\n-                if (authCtx != null)\n-                    AuthorizationContext.clear();\n-            }\n \n             if (resp != null) {\n                 if (log.isDebugEnabled()) {"
  },
  {
    "sha": "e25512a064b711bfc3918b777c18c8ea3a0f5116",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerProcessor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 11,
    "changes": 12,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerProcessor.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -39,7 +39,6 @@\n import org.apache.ignite.internal.managers.communication.GridIoPolicy;\n import org.apache.ignite.internal.managers.systemview.walker.ClientConnectionViewWalker;\n import org.apache.ignite.internal.processors.GridProcessorAdapter;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.jdbc.JdbcConnectionContext;\n import org.apache.ignite.internal.processors.odbc.odbc.OdbcConnectionContext;\n import org.apache.ignite.internal.util.GridSpinBusyLock;\n@@ -412,8 +411,6 @@ private static String clientConnectionDescription(\n         GridNioSession ses,\n         ClientListenerConnectionContext ctx\n     ) {\n-        AuthorizationContext authCtx = ctx.authorizationContext();\n-\n         StringBuilder sb = new StringBuilder();\n \n         if (ctx instanceof JdbcConnectionContext)\n@@ -432,14 +429,7 @@ else if (ctx instanceof OdbcConnectionContext)\n         String rmtAddrStr = rmtAddr.getHostString() + \":\" + rmtAddr.getPort();\n         String locAddrStr = locAddr.getHostString() + \":\" + locAddr.getPort();\n \n-        String login;\n-\n-        if (authCtx != null)\n-            login = authCtx.userName();\n-        else if (ctx.securityContext() != null)\n-            login = \"@\" + ctx.securityContext().subject().login();\n-        else\n-            login = \"<anonymous>\";\n+        String login = ctx.securityContext() == null ? \"<anonymous>\" : \"@\" + ctx.securityContext().subject().login();\n \n         sb.append(\"id=\" + ctx.connectionId());\n         sb.append(\", user=\").append(login);"
  },
  {
    "sha": "a209a09bc8a4637daeb0642be769c32dbcd435d6",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcConnectionContext.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcConnectionContext.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -26,7 +26,6 @@\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.binary.BinaryReaderExImpl;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerAbstractConnectionContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerMessageParser;\n import org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\n@@ -150,7 +149,6 @@ public JdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n         boolean skipReducerOnUpdate = false;\n \n         NestedTxMode nestedTxMode = NestedTxMode.DEFAULT;\n-        AuthorizationContext actx = null;\n \n         if (ver.compareTo(VER_2_1_5) >= 0)\n             lazyExec = reader.readBoolean();\n@@ -203,7 +201,7 @@ public JdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n                 throw new IgniteCheckedException(\"Handshake error: \" + e.getMessage(), e);\n             }\n \n-            actx = authenticate(ses, user, passwd);\n+            authenticate(ses, user, passwd);\n         }\n \n         protoCtx = new JdbcProtocolContext(ver, features, true);\n@@ -223,7 +221,7 @@ public JdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n \n         handler = new JdbcRequestHandler(busyLock, sender, maxCursors, distributedJoins, enforceJoinOrder,\n             collocated, replicatedOnly, autoCloseCursors, lazyExec, skipReducerOnUpdate, nestedTxMode,\n-            dataPageScanEnabled, updateBatchSize, actx, ver, this);\n+            dataPageScanEnabled, updateBatchSize, ver, this);\n \n         handler.start();\n     }"
  },
  {
    "sha": "970c602ad6c14c919f7e9e32d768af647445ab46",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcRequestHandler.java",
    "status": "modified",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcRequestHandler.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcRequestHandler.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcRequestHandler.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -47,7 +47,6 @@\n import org.apache.ignite.internal.jdbc.thin.JdbcThinPartitionAwarenessMappingGroup;\n import org.apache.ignite.internal.processors.affinity.AffinityAssignment;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.bulkload.BulkLoadAckClientParameters;\n import org.apache.ignite.internal.processors.bulkload.BulkLoadProcessor;\n import org.apache.ignite.internal.processors.cache.DynamicCacheDescriptor;\n@@ -162,9 +161,6 @@\n     /** Protocol version. */\n     private final ClientListenerProtocolVersion protocolVer;\n \n-    /** Authentication context */\n-    private AuthorizationContext actx;\n-\n     /** Facade that hides transformations internal cache api entities -> jdbc metadata. */\n     private final JdbcMetadataInfo meta;\n \n@@ -185,7 +181,6 @@\n      * @param skipReducerOnUpdate Skip reducer on update flag.\n      * @param dataPageScanEnabled Enable scan data page mode.\n      * @param updateBatchSize Size of internal batch for DML queries.\n-     * @param actx Authentication context.\n      * @param protocolVer Protocol version.\n      * @param connCtx Jdbc connection context.\n      */\n@@ -203,7 +198,6 @@ public JdbcRequestHandler(\n         NestedTxMode nestedTxMode,\n         @Nullable Boolean dataPageScanEnabled,\n         @Nullable Integer updateBatchSize,\n-        AuthorizationContext actx,\n         ClientListenerProtocolVersion protocolVer,\n         JdbcConnectionContext connCtx\n     ) {\n@@ -236,7 +230,6 @@ public JdbcRequestHandler(\n         this.autoCloseCursors = autoCloseCursors;\n         this.nestedTxMode = nestedTxMode;\n         this.protocolVer = protocolVer;\n-        this.actx = actx;\n \n         log = connCtx.kernalContext().log(getClass());\n \n@@ -310,9 +303,6 @@ JdbcResponse doHandle(JdbcRequest req) {\n             return new JdbcResponse(IgniteQueryErrorCode.UNKNOWN,\n                 \"Failed to handle JDBC request because node is stopping.\");\n \n-        if (actx != null)\n-            AuthorizationContext.context(actx);\n-\n         JdbcResponse resp;\n         try {\n             switch (req.type()) {\n@@ -403,8 +393,6 @@ JdbcResponse doHandle(JdbcRequest req) {\n             return resp;\n         }\n         finally {\n-            AuthorizationContext.clear();\n-\n             busyLock.leaveBusy();\n         }\n     }"
  },
  {
    "sha": "dfc943c12345ed913ccda430f0c8898de12eda92",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcConnectionContext.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcConnectionContext.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -23,7 +23,6 @@\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.binary.BinaryReaderExImpl;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerAbstractConnectionContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerMessageParser;\n import org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\n@@ -153,7 +152,7 @@ public OdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n             nestedTxMode = NestedTxMode.fromByte(nestedTxModeVal);\n         }\n \n-        AuthorizationContext actx = authenticate(ses, user, passwd);\n+        authenticate(ses, user, passwd);\n \n         ClientListenerResponseSender sender = new ClientListenerResponseSender() {\n             @Override public void send(ClientListenerResponse resp) {\n@@ -167,7 +166,7 @@ public OdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n         };\n \n         handler = new OdbcRequestHandler(ctx, busyLock, sender, maxCursors, distributedJoins, enforceJoinOrder,\n-            replicatedOnly, collocated, lazy, skipReducerOnUpdate, actx, nestedTxMode, ver);\n+            replicatedOnly, collocated, lazy, skipReducerOnUpdate, nestedTxMode, ver);\n \n         parser = new OdbcMessageParser(ctx, ver);\n "
  },
  {
    "sha": "878834aa59023bd7f599f97b2d236bd4ece031e0",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcRequestHandler.java",
    "status": "modified",
    "additions": 3,
    "deletions": 13,
    "changes": 16,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcRequestHandler.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcRequestHandler.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcRequestHandler.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -28,7 +28,6 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n import javax.cache.configuration.Factory;\n-\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.IgniteLogger;\n@@ -38,7 +37,6 @@\n import org.apache.ignite.internal.IgniteInterruptedCheckedException;\n import org.apache.ignite.internal.binary.BinaryWriterExImpl;\n import org.apache.ignite.internal.binary.GridBinaryMarshaller;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.cache.mvcc.MvccUtils;\n import org.apache.ignite.internal.processors.cache.query.IgniteQueryErrorCode;\n import org.apache.ignite.internal.processors.cache.query.SqlFieldsQueryEx;\n@@ -113,9 +111,6 @@\n     /** Nested transaction behaviour. */\n     private final NestedTxMode nestedTxMode;\n \n-    /** Authentication context */\n-    private final AuthorizationContext actx;\n-\n     /** Client version. */\n     private ClientListenerProtocolVersion ver;\n \n@@ -141,7 +136,6 @@\n      * @param lazy Lazy flag.\n      * @param skipReducerOnUpdate Skip reducer on update flag.\n      * @param nestedTxMode Nested transaction mode.\n-     * @param actx Authentication context.\n      * @param ver Client protocol version.\n      */\n     public OdbcRequestHandler(\n@@ -155,7 +149,9 @@ public OdbcRequestHandler(\n         boolean collocated,\n         boolean lazy,\n         boolean skipReducerOnUpdate,\n-        AuthorizationContext actx, NestedTxMode nestedTxMode, ClientListenerProtocolVersion ver) {\n+        NestedTxMode nestedTxMode,\n+        ClientListenerProtocolVersion ver\n+    ) {\n         this.ctx = ctx;\n \n         Factory<GridWorker> orderedFactory = new Factory<GridWorker>() {\n@@ -180,7 +176,6 @@ public OdbcRequestHandler(\n         this.busyLock = busyLock;\n         this.sender = sender;\n         this.maxCursors = maxCursors;\n-        this.actx = actx;\n         this.nestedTxMode = nestedTxMode;\n         this.ver = ver;\n \n@@ -230,9 +225,6 @@ public ClientListenerResponse doHandle(OdbcRequest req) {\n             return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN,\n                 \"Failed to handle ODBC request because node is stopping: \" + req);\n \n-        if (actx != null)\n-            AuthorizationContext.context(actx);\n-\n         try {\n             switch (req.command()) {\n                 case QRY_EXEC:\n@@ -269,8 +261,6 @@ public ClientListenerResponse doHandle(OdbcRequest req) {\n             return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN, \"Unsupported ODBC request: \" + req);\n         }\n         finally {\n-            AuthorizationContext.clear();\n-\n             busyLock.leaveBusy();\n         }\n     }"
  },
  {
    "sha": "0f6212baa2339a7647b2a39f4912b732acff53bc",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -31,7 +31,6 @@\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.binary.BinaryReaderExImpl;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerAbstractConnectionContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerMessageParser;\n import org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\n@@ -214,9 +213,9 @@ public ClientProtocolContext currentProtocolContext() {\n             }\n         }\n \n-        AuthorizationContext authCtx = authenticate(ses, user, pwd);\n+        authenticate(ses, user, pwd);\n \n-        handler = new ClientRequestHandler(this, authCtx, currentProtocolContext);\n+        handler = new ClientRequestHandler(this, currentProtocolContext);\n         parser = new ClientMessageParser(this, currentProtocolContext);\n \n         this.ses = ses;"
  },
  {
    "sha": "e8a4068831d7a74737defbc0f90404f0e46d1ace",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientRequestHandler.java",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientRequestHandler.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientRequestHandler.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientRequestHandler.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -20,7 +20,6 @@\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.internal.binary.BinaryWriterExImpl;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\n import org.apache.ignite.internal.processors.odbc.ClientListenerRequest;\n import org.apache.ignite.internal.processors.odbc.ClientListenerRequestHandler;\n@@ -39,9 +38,6 @@\n     /** Client context. */\n     private final ClientConnectionContext ctx;\n \n-    /** Auth context. */\n-    private final AuthorizationContext authCtx;\n-\n     /** Protocol context. */\n     private ClientProtocolContext protocolCtx;\n \n@@ -52,14 +48,12 @@\n      * Constructor.\n      *\n      * @param ctx Kernal context.\n-     * @param authCtx Authentication context.\n      * @param protocolCtx Protocol context.\n      */\n-    ClientRequestHandler(ClientConnectionContext ctx, AuthorizationContext authCtx, ClientProtocolContext protocolCtx) {\n+    ClientRequestHandler(ClientConnectionContext ctx, ClientProtocolContext protocolCtx) {\n         assert ctx != null;\n \n         this.ctx = ctx;\n-        this.authCtx = authCtx;\n         this.protocolCtx = protocolCtx;\n         log = ctx.kernalContext().log(getClass());\n     }"
  },
  {
    "sha": "b91551819f5407278b31c322caed22bff58c8fd8",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java",
    "status": "modified",
    "additions": 15,
    "deletions": 51,
    "changes": 66,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -43,7 +43,6 @@\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.IgniteInternalFuture;\n import org.apache.ignite.internal.processors.GridProcessorAdapter;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.rest.client.message.GridClientTaskResultBean;\n import org.apache.ignite.internal.processors.rest.handlers.GridRestCommandHandler;\n import org.apache.ignite.internal.processors.rest.handlers.auth.AuthenticationCommandHandler;\n@@ -250,10 +249,9 @@ else if (!(req instanceof GridRestAuthenticationRequest) && startLatch.getCount(\n         if (log.isDebugEnabled())\n             log.debug(\"Received request from client: \" + req);\n \n-        boolean authenticationEnabled = ctx.authentication().enabled();\n         boolean securityEnabled = ctx.security().enabled();\n \n-        if (authenticationEnabled || securityEnabled) {\n+        if (securityEnabled) {\n             Session ses;\n \n             try {\n@@ -275,54 +273,23 @@ else if (!(req instanceof GridRestAuthenticationRequest) && startLatch.getCount(\n                 log.debug(\"Next clientId and sessionToken were extracted according to request: \" +\n                     \"[clientId=\" + req.clientId() + \", sesTok=\" + Arrays.toString(req.sessionToken()) + \"]\");\n \n-            if (securityEnabled) {\n-                SecurityContext secCtx0 = ses.secCtx;\n+            SecurityContext secCtx0 = ses.secCtx;\n \n-                try {\n-                    if (secCtx0 == null || ses.isTokenExpired(sesTokTtl))\n-                        ses.secCtx = secCtx0 = authenticate(req, ses);\n-\n-                    try (OperationSecurityContext s = ctx.security().withContext(secCtx0)) {\n-                        authorize(req);\n-                    }\n-                }\n-                catch (SecurityException e) {\n-                    assert secCtx0 != null;\n+            try {\n+                if (secCtx0 == null || ses.isTokenExpired(sesTokTtl))\n+                    ses.secCtx = secCtx0 = authenticate(req, ses);\n \n-                    return new GridFinishedFuture<>(new GridRestResponse(STATUS_SECURITY_CHECK_FAILED, e.getMessage()));\n-                }\n-                catch (IgniteCheckedException e) {\n-                    return new GridFinishedFuture<>(new GridRestResponse(STATUS_AUTH_FAILED, e.getMessage()));\n+                try (OperationSecurityContext s = ctx.security().withContext(secCtx0)) {\n+                    authorize(req);\n                 }\n             }\n-            else {\n-                AuthorizationContext authCtx0 = ses.authCtx;\n-\n-                try {\n-                    if (authCtx0 == null) {\n-                        SecurityCredentials creds = credentials(req);\n-\n-                        String login = null;\n-\n-                        if (creds.getLogin() instanceof String)\n-                            login = (String)creds.getLogin();\n-\n-                        String pwd = null;\n+            catch (SecurityException e) {\n+                assert secCtx0 != null;\n \n-                        if (creds.getPassword() instanceof String)\n-                            pwd = (String)creds.getPassword();\n-\n-                        if (F.isEmpty(login) || F.isEmpty(pwd))\n-                            throw new IgniteAuthenticationException(\"The user name or password is incorrect\");\n-\n-                        ses.authCtx = ctx.authentication().authenticate(login, pwd);\n-                    }\n-\n-                    req.authorizationContext(ses.authCtx);\n-                }\n-                catch (IgniteCheckedException e) {\n-                    return new GridFinishedFuture<>(new GridRestResponse(STATUS_AUTH_FAILED, e.getMessage()));\n-                }\n+                return new GridFinishedFuture<>(new GridRestResponse(STATUS_SECURITY_CHECK_FAILED, e.getMessage()));\n+            }\n+            catch (IgniteCheckedException e) {\n+                return new GridFinishedFuture<>(new GridRestResponse(STATUS_AUTH_FAILED, e.getMessage()));\n             }\n         }\n \n@@ -384,7 +351,7 @@ else if (!(req instanceof GridRestAuthenticationRequest) && startLatch.getCount(\n \n                 assert res != null;\n \n-                if ((authenticationEnabled || securityEnabled) && !failed)\n+                if (securityEnabled && !failed)\n                     res.sessionTokenBytes(req.sessionToken());\n \n                 interceptResponse(res, req);\n@@ -421,7 +388,7 @@ private Session session(final GridRestRequest req) throws IgniteCheckedException\n         while (true) {\n             if (F.isEmpty(sesTok) && clientId == null) {\n                 // TODO: In IGNITE 3.0 we should check credentials only for AUTHENTICATE command.\n-                if (ctx.authentication().enabled() && req.command() != AUTHENTICATE && req.credentials() == null)\n+                if (ctx.security().enabled() && req.command() != AUTHENTICATE && req.credentials() == null)\n                     throw new IgniteAuthenticationException(\"Failed to handle request - session token not found or invalid\");\n \n                 Session ses = Session.random();\n@@ -1079,9 +1046,6 @@ private void startProtocol(GridRestProtocol proto) throws IgniteCheckedException\n         /** Security context. */\n         private volatile SecurityContext secCtx;\n \n-        /** Authorization context. */\n-        private volatile AuthorizationContext authCtx;\n-\n         /** Credentials that can be used for security token invalidation.*/\n         private volatile SecurityCredentials creds;\n "
  },
  {
    "sha": "20df0e8cd984cce4edddb20fad13d5cec194c192",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/user/UserActionCommandHandler.java",
    "status": "modified",
    "additions": 5,
    "deletions": 8,
    "changes": 13,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/user/UserActionCommandHandler.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/user/UserActionCommandHandler.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/user/UserActionCommandHandler.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -20,13 +20,12 @@\n import java.util.Collection;\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.IgniteInternalFuture;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n-import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.rest.GridRestCommand;\n import org.apache.ignite.internal.processors.rest.GridRestResponse;\n import org.apache.ignite.internal.processors.rest.handlers.GridRestCommandHandlerAdapter;\n import org.apache.ignite.internal.processors.rest.request.GridRestRequest;\n import org.apache.ignite.internal.processors.rest.request.RestUserActionRequest;\n+import org.apache.ignite.internal.processors.security.IgniteSecurity;\n import org.apache.ignite.internal.util.future.GridFinishedFuture;\n import org.apache.ignite.internal.util.typedef.internal.U;\n \n@@ -65,21 +64,19 @@ public UserActionCommandHandler(GridKernalContext ctx) {\n         try {\n             GridRestCommand cmd = req.command();\n \n-            IgniteAuthenticationProcessor authentication = ctx.authentication();\n-\n-            AuthorizationContext.context(req.authorizationContext());\n+            IgniteSecurity security = ctx.security();\n \n             switch (cmd) {\n                 case ADD_USER:\n-                    authentication.addUser(req0.user(), req0.password());\n+                    security.createUser(req0.user(), req0.userOptions());\n                     break;\n \n                 case REMOVE_USER:\n-                    authentication.removeUser(req0.user());\n+                    security.dropUser(req0.user());\n                     break;\n \n                 case UPDATE_USER:\n-                    authentication.updateUser(req0.user(), req0.password());\n+                    security.alterUser(req0.user(), req0.userOptions());\n                     break;\n             }\n "
  },
  {
    "sha": "b484d223931d9cacdb6a153cf543622dc252803c",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/GridRestRequest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/GridRestRequest.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/GridRestRequest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/GridRestRequest.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -21,11 +21,9 @@\n import java.security.cert.Certificate;\n import java.util.Map;\n import java.util.UUID;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.rest.GridRestCommand;\n import org.apache.ignite.internal.util.tostring.GridToStringExclude;\n import org.apache.ignite.internal.util.typedef.internal.S;\n-import org.jetbrains.annotations.Nullable;\n \n /**\n  * Grid command request.\n@@ -50,9 +48,6 @@\n     /** Command. */\n     private GridRestCommand cmd;\n \n-    /** */\n-    private AuthorizationContext authCtx;\n-\n     /** User attributes. */\n     Map<String, String> userAttrs;\n \n@@ -155,20 +150,6 @@ public void address(InetSocketAddress addr) {\n         this.addr = addr;\n     }\n \n-    /**\n-     * @return Authorization context.\n-     */\n-    @Nullable public AuthorizationContext authorizationContext() {\n-        return authCtx;\n-    }\n-\n-    /**\n-     * @param authCtx Authorization context.\n-     */\n-    public void authorizationContext(AuthorizationContext authCtx) {\n-        this.authCtx = authCtx;\n-    }\n-\n     /**\n      * Gets user attributes.\n      *"
  },
  {
    "sha": "0853dfa6e17f2aac1a99541610f38bd8d0a30e17",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/RestUserActionRequest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 12,
    "changes": 23,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/RestUserActionRequest.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/RestUserActionRequest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/RestUserActionRequest.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -17,6 +17,8 @@\n \n package org.apache.ignite.internal.processors.rest.request;\n \n+import org.apache.ignite.internal.processors.security.UserOptions;\n+import org.apache.ignite.internal.util.tostring.GridToStringExclude;\n import org.apache.ignite.internal.util.typedef.internal.S;\n \n /**\n@@ -26,8 +28,9 @@\n     /** User name. */\n     private String user;\n \n-    /** Password. */\n-    private String pwd;\n+    /** User options. */\n+    @GridToStringExclude\n+    private UserOptions opts;\n \n     /**\n      * @param user User name.\n@@ -43,18 +46,14 @@ public String user() {\n         return user;\n     }\n \n-    /**\n-     * @param pwd User password.\n-     */\n-    public void password(String pwd) {\n-        this.pwd = pwd;\n+    /** Sets user options. */\n+    public void userOptions(UserOptions opts) {\n+        this.opts = opts;\n     }\n \n-    /**\n-     * @return User password.\n-     */\n-    public String password() {\n-        return pwd;\n+    /** Gets user options. */\n+    public UserOptions userOptions() {\n+        return opts;\n     }\n \n     /** {@inheritDoc} */"
  },
  {
    "sha": "bd261484de3d6841bb443d006044510853cc5a02",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/GridSecurityProcessor.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/security/GridSecurityProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/security/GridSecurityProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/security/GridSecurityProcessor.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -133,4 +133,36 @@ public void authorize(String name, SecurityPermission perm, SecurityContext secu\n     public default boolean sandboxEnabled() {\n         return false;\n     }\n+\n+    /**\n+     * Creates user with the specified login and options.\n+     *\n+     * @param login Login of the user to be created.\n+     * @param opts User options.\n+     * @throws IgniteCheckedException If error occurred.\n+     */\n+    public default void createUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Alters specified options of user with the specified login.\n+     *\n+     * @param login Login of the user which options should be altered.\n+     * @param opts User options.\n+     * @throws IgniteCheckedException If error occurred.\n+     */\n+    public default void alterUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Drops user with the specified login.\n+     *\n+     * @param login Login of the user to be dropped.\n+     * @throws IgniteCheckedException If error occurred.\n+     */\n+    public default void dropUser(String login) throws IgniteCheckedException {\n+        throw new UnsupportedOperationException();\n+    }\n }"
  },
  {
    "sha": "35198a2af20b20b1933855958cf629e4de6746da",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurity.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurity.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurity.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurity.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -126,4 +126,36 @@ public default void authorize(SecurityPermission perm) throws SecurityException\n      * false if it's used a default NoOp implementation.\n      */\n     public boolean enabled();\n+\n+    /**\n+     * Creates user with the specified login and options.\n+     *\n+     * @param login Login of the user to be created.\n+     * @param opts User options.\n+     * @throws IgniteCheckedException If error occurred.\n+     */\n+    public default void createUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Alters specified options of user with the specified login.\n+     *\n+     * @param login Login of the user which options should be altered.\n+     * @param opts User options.\n+     * @throws IgniteCheckedException If error occurred.\n+     */\n+    public default void alterUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Drops user with the specified login.\n+     *\n+     * @param login Login of the user to be dropped.\n+     * @throws IgniteCheckedException If error occurred.\n+     */\n+    public default void dropUser(String login) throws IgniteCheckedException {\n+        throw new UnsupportedOperationException();\n+    }\n }"
  },
  {
    "sha": "d23c44e06607d3b4522fc693f2d2bf8b3168b1d0",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/security/IgniteSecurityProcessor.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -352,6 +352,21 @@ else if (packAccess.contains(',' + IGNITE_INTERNAL_PACKAGE))\n         return secPrc.onReconnected(clusterRestarted);\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public void createUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        secPrc.createUser(login, opts);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void alterUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        secPrc.alterUser(login, opts);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void dropUser(String login) throws IgniteCheckedException {\n+        secPrc.dropUser(login);\n+    }\n+\n     /**\n      * Getting local node's security context.\n      *\n@@ -379,4 +394,9 @@ private IgniteNodeValidationResult validateSecProcClass(ClusterNode node) {\n \n         return null;\n     }\n+\n+    /** Gets the security processor to which the current security facade delegates operations. */\n+    public GridSecurityProcessor securityProcessor() {\n+        return secPrc;\n+    }\n }"
  },
  {
    "sha": "1cc6086cf3e5b4f6ba6de8c3632414e4f15c75b7",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/NoOpIgniteSecurityProcessor.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/apache/ignite/blob/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/security/NoOpIgniteSecurityProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/9dc71b9edf0b81306b41637f6bd637fcb68ed854/modules/core/src/main/java/org/apache/ignite/internal/processors/security/NoOpIgniteSecurityProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/security/NoOpIgniteSecurityProcessor.java?ref=9dc71b9edf0b81306b41637f6bd637fcb68ed854",
    "patch": "@@ -19,6 +19,7 @@\n \n import java.util.Collection;\n import java.util.UUID;\n+import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.processors.GridProcessorAdapter;\n@@ -40,6 +41,9 @@\n  * No operation IgniteSecurity.\n  */\n public class NoOpIgniteSecurityProcessor extends GridProcessorAdapter implements IgniteSecurity {\n+    /** Error message that occurs when trying to perform security operations if security is disabled. */\n+    public static final String SECURITY_DISABLED_ERROR_MSG = \"Operation cannot be performed: security is disabled.\";\n+\n     /** No operation security context. */\n     private final OperationSecurityContext opSecCtx = new OperationSecurityContext(this, null);\n \n@@ -145,4 +149,19 @@ private IgniteNodeValidationResult validateSecProcClass(ClusterNode node) {\n \n         return null;\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override public void createUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        throw new IgniteCheckedException(SECURITY_DISABLED_ERROR_MSG);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void alterUser(String login, UserOptions opts) throws IgniteCheckedException {\n+        throw new IgniteCheckedException(SECURITY_DISABLED_ERROR_MSG);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void dropUser(String login) throws IgniteCheckedException {\n+        throw new IgniteCheckedException(SECURITY_DISABLED_ERROR_MSG);\n+    }\n }"
  }
]
