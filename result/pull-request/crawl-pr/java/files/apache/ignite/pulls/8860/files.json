[
  {
    "sha": "9a02ab84e6c8d96fdc994dc347fe4fc0696cb0ef",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/AbstractSystemView.java",
    "status": "modified",
    "additions": 43,
    "deletions": 1,
    "changes": 44,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/AbstractSystemView.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/AbstractSystemView.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/AbstractSystemView.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -17,9 +17,15 @@\n \n package org.apache.ignite.internal.managers.systemview;\n \n+import java.util.Iterator;\n+import org.apache.ignite.internal.processors.security.IgniteSecurity;\n import org.apache.ignite.internal.util.typedef.internal.A;\n+import org.apache.ignite.plugin.security.SecurityPermission;\n import org.apache.ignite.spi.systemview.view.SystemView;\n import org.apache.ignite.spi.systemview.view.SystemViewRowAttributeWalker;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static org.apache.ignite.plugin.security.SecurityPermission.SYSTEM_VIEW_READ;\n \n /** Abstract system view. */\n abstract class AbstractSystemView<R> implements SystemView<R> {\n@@ -29,6 +35,9 @@\n     /** Description of the view. */\n     private final String desc;\n \n+    /** {@link IgniteSecurity} for data access authorization. */\n+    private final IgniteSecurity security;\n+\n     /**\n      * Row attribute walker.\n      *\n@@ -41,12 +50,13 @@\n      * @param desc Description.\n      * @param walker Walker.\n      */\n-    AbstractSystemView(String name, String desc, SystemViewRowAttributeWalker<R> walker) {\n+    AbstractSystemView(String name, String desc, SystemViewRowAttributeWalker<R> walker, IgniteSecurity security) {\n         A.notNull(walker, \"walker\");\n \n         this.name = name;\n         this.desc = desc;\n         this.walker = walker;\n+        this.security = security;\n     }\n \n     /** {@inheritDoc} */\n@@ -63,4 +73,36 @@\n     @Override public SystemViewRowAttributeWalker<R> walker() {\n         return walker;\n     }\n+\n+    /** {@inheritDoc} */\n+    @NotNull @Override public final Iterator<R> iterator() {\n+        authorize();\n+\n+        return iteratorNoAuth();\n+    }\n+\n+    /**\n+     * {@link Iterable#iterator()} implementation without authorization.\n+     */\n+    @NotNull protected abstract Iterator<R> iteratorNoAuth();\n+\n+    /** {@inheritDoc} */\n+    @Override public final int size() {\n+        authorize();\n+\n+        return sizeNoAuth();\n+    }\n+\n+    /**\n+     * {@link SystemView#size()} implementation without authorization.\n+     */\n+    protected abstract int sizeNoAuth();\n+\n+    /**\n+     * Authorizes {@link SecurityPermission#SYSTEM_VIEW_READ} permission.\n+     */\n+    protected final void authorize() {\n+        if (security != null)\n+            security.authorize(SYSTEM_VIEW_READ);\n+    }\n }"
  },
  {
    "sha": "6a9dc7251f81cb2bba5feca9b76bed1fdab5e74e",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/FiltrableSystemViewAdapter.java",
    "status": "modified",
    "additions": 8,
    "deletions": 4,
    "changes": 12,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/FiltrableSystemViewAdapter.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/FiltrableSystemViewAdapter.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/FiltrableSystemViewAdapter.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -21,6 +21,7 @@\n import java.util.Iterator;\n import java.util.Map;\n import java.util.function.Function;\n+import org.apache.ignite.internal.processors.security.IgniteSecurity;\n import org.apache.ignite.internal.util.typedef.F;\n import org.apache.ignite.internal.util.typedef.internal.A;\n import org.apache.ignite.spi.systemview.view.FiltrableSystemView;\n@@ -43,10 +44,11 @@\n      * @param walker Walker.\n      * @param dataSupplier Data supplier.\n      * @param rowFunc Row function.\n+     * @param security Security processor.\n      */\n     public FiltrableSystemViewAdapter(String name, String desc, SystemViewRowAttributeWalker<R> walker,\n-        Function<Map<String, Object>, Iterable<D>> dataSupplier, Function<D, R> rowFunc) {\n-        super(name, desc, walker);\n+        Function<Map<String, Object>, Iterable<D>> dataSupplier, Function<D, R> rowFunc, IgniteSecurity security) {\n+        super(name, desc, walker, security);\n \n         A.notNull(dataSupplier, \"dataSupplier\");\n \n@@ -56,19 +58,21 @@ public FiltrableSystemViewAdapter(String name, String desc, SystemViewRowAttribu\n \n     /** {@inheritDoc} */\n     @NotNull @Override public Iterator<R> iterator(Map<String, Object> filter) {\n+        authorize();\n+\n         if (filter == null)\n             filter = Collections.emptyMap();\n \n         return F.iterator(dataSupplier.apply(filter), rowFunc::apply, true);\n     }\n \n     /** {@inheritDoc} */\n-    @NotNull @Override public Iterator<R> iterator() {\n+    @NotNull @Override public Iterator<R> iteratorNoAuth() {\n         return iterator(Collections.emptyMap());\n     }\n \n     /** {@inheritDoc} */\n-    @Override public int size() {\n+    @Override public int sizeNoAuth() {\n         return F.size(dataSupplier.apply(Collections.emptyMap()).iterator());\n     }\n }"
  },
  {
    "sha": "42c1bbe2db623a5251798b97fa82aec2fb5489b5",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/GridSystemViewManager.java",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/GridSystemViewManager.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/GridSystemViewManager.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/GridSystemViewManager.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -145,7 +145,8 @@ public void registerThreadPools(StripedExecutor stripedExecSvc, StripedExecutor\n             desc,\n             walker,\n             data,\n-            rowFunc));\n+            rowFunc,\n+            ctx.security()));\n     }\n \n     /**\n@@ -168,7 +169,8 @@ public void registerThreadPools(StripedExecutor stripedExecSvc, StripedExecutor\n             walker,\n             container,\n             dataExtractor,\n-            rowFunc));\n+            rowFunc,\n+            ctx.security()));\n     }\n \n     /**\n@@ -191,7 +193,8 @@ public void registerThreadPools(StripedExecutor stripedExecSvc, StripedExecutor\n             walker,\n             container,\n             c -> Arrays.asList(dataExtractor.apply(c)),\n-            rowFunc));\n+            rowFunc,\n+            ctx.security()));\n     }\n \n     /**\n@@ -211,7 +214,8 @@ public void registerThreadPools(StripedExecutor stripedExecSvc, StripedExecutor\n             desc,\n             walker,\n             dataSupplier,\n-            rowFunc));\n+            rowFunc,\n+            ctx.security()));\n     }\n \n     /**\n@@ -231,7 +235,8 @@ public void registerThreadPools(StripedExecutor stripedExecSvc, StripedExecutor\n             desc,\n             walker,\n             dataSupplier,\n-            rowFunc));\n+            rowFunc,\n+            ctx.security()));\n     }\n \n     /**"
  },
  {
    "sha": "9df5707c11cc2c9e284efc49f0712919ab519c45",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/ScanQuerySystemView.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/ScanQuerySystemView.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/ScanQuerySystemView.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/ScanQuerySystemView.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -29,6 +29,7 @@\n import org.apache.ignite.internal.processors.cache.GridCacheContext;\n import org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager;\n import org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.ScanQueryIterator;\n+import org.apache.ignite.internal.processors.security.IgniteSecurity;\n import org.apache.ignite.internal.util.future.GridFutureAdapter;\n import org.apache.ignite.lang.IgniteBiTuple;\n import org.apache.ignite.spi.IgniteSpiCloseableIterator;\n@@ -58,15 +59,16 @@\n \n     /**\n      * @param cctxs Cache data.\n+     * @param security Security processor.\n      */\n-    public ScanQuerySystemView(Collection<GridCacheContext<K, V>> cctxs) {\n-        super(SCAN_QRY_SYS_VIEW, SCAN_QRY_SYS_VIEW_DESC, new ScanQueryViewWalker());\n+    public ScanQuerySystemView(Collection<GridCacheContext<K, V>> cctxs, IgniteSecurity security) {\n+        super(SCAN_QRY_SYS_VIEW, SCAN_QRY_SYS_VIEW_DESC, new ScanQueryViewWalker(), security);\n \n         this.cctxs = cctxs;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public int size() {\n+    @Override public int sizeNoAuth() {\n         int sz = 0;\n \n         QueryDataIterator iter = new QueryDataIterator();\n@@ -79,7 +81,7 @@ public ScanQuerySystemView(Collection<GridCacheContext<K, V>> cctxs) {\n     }\n \n     /** {@inheritDoc} */\n-    @NotNull @Override public Iterator<ScanQueryView> iterator() {\n+    @NotNull @Override public Iterator<ScanQueryView> iteratorNoAuth() {\n         return new QueryDataIterator();\n     }\n "
  },
  {
    "sha": "a53937ad4e7481db50a42ee67f181d7bcea20b7f",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewAdapter.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewAdapter.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewAdapter.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewAdapter.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -21,6 +21,7 @@\n import java.util.Iterator;\n import java.util.function.Function;\n import java.util.function.Supplier;\n+import org.apache.ignite.internal.processors.security.IgniteSecurity;\n import org.apache.ignite.internal.util.typedef.internal.A;\n import org.apache.ignite.spi.systemview.view.SystemViewRowAttributeWalker;\n import org.jetbrains.annotations.NotNull;\n@@ -44,10 +45,11 @@\n      * @param walker Walker.\n      * @param data Data.\n      * @param rowFunc Row function.\n+     * @param security Security processor.\n      */\n     public SystemViewAdapter(String name, String desc, SystemViewRowAttributeWalker<R> walker, Collection<D> data,\n-        Function<D, R> rowFunc) {\n-        super(name, desc, walker);\n+        Function<D, R> rowFunc, IgniteSecurity security) {\n+        super(name, desc, walker, security);\n \n         A.notNull(data, \"data\");\n \n@@ -61,10 +63,11 @@ public SystemViewAdapter(String name, String desc, SystemViewRowAttributeWalker<\n      * @param walker Walker.\n      * @param dataSupplier Data supplier.\n      * @param rowFunc Row function.\n+     * @param security Security processor.\n      */\n     public SystemViewAdapter(String name, String desc, SystemViewRowAttributeWalker<R> walker,\n-        Supplier<Collection<D>> dataSupplier, Function<D, R> rowFunc) {\n-        super(name, desc, walker);\n+        Supplier<Collection<D>> dataSupplier, Function<D, R> rowFunc, IgniteSecurity security) {\n+        super(name, desc, walker, security);\n \n         A.notNull(dataSupplier, \"dataSupplier\");\n \n@@ -73,7 +76,7 @@ public SystemViewAdapter(String name, String desc, SystemViewRowAttributeWalker<\n     }\n \n     /** {@inheritDoc} */\n-    @NotNull @Override public Iterator<R> iterator() {\n+    @NotNull @Override public Iterator<R> iteratorNoAuth() {\n         Iterator<D> dataIter;\n \n         if (data != null)\n@@ -93,7 +96,7 @@ public SystemViewAdapter(String name, String desc, SystemViewRowAttributeWalker<\n     }\n \n     /** {@inheritDoc} */\n-    @Override public int size() {\n+    @Override public int sizeNoAuth() {\n         return data == null ? dataSupplier.get().size() : data.size();\n     }\n }"
  },
  {
    "sha": "4bac3e8bfd117ce53836a4566a785c60377af075",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewInnerCollectionsAdapter.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewInnerCollectionsAdapter.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewInnerCollectionsAdapter.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewInnerCollectionsAdapter.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -21,6 +21,7 @@\n import java.util.Iterator;\n import java.util.function.BiFunction;\n import java.util.function.Function;\n+import org.apache.ignite.internal.processors.security.IgniteSecurity;\n import org.apache.ignite.internal.util.typedef.F;\n import org.apache.ignite.spi.systemview.view.SystemView;\n import org.apache.ignite.spi.systemview.view.SystemViewRowAttributeWalker;\n@@ -49,21 +50,23 @@\n      * @param containers Container of data.\n      * @param dataExtractor Data extractor function.\n      * @param rowFunc Row function.\n+     * @param security Security processor.\n      */\n     public SystemViewInnerCollectionsAdapter(String name, String desc,\n         SystemViewRowAttributeWalker<R> walker,\n         Iterable<C> containers,\n         Function<C, Collection<D>> dataExtractor,\n-        BiFunction<C, D, R> rowFunc) {\n-        super(name, desc, walker);\n+        BiFunction<C, D, R> rowFunc,\n+        IgniteSecurity security) {\n+        super(name, desc, walker, security);\n \n         this.containers = containers;\n         this.dataExtractor = dataExtractor;\n         this.rowFunc = rowFunc;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public int size() {\n+    @Override public int sizeNoAuth() {\n         int sz = 0;\n \n         for (C c : containers)\n@@ -73,7 +76,7 @@ public SystemViewInnerCollectionsAdapter(String name, String desc,\n     }\n \n     /** {@inheritDoc} */\n-    @NotNull @Override public Iterator<R> iterator() {\n+    @NotNull @Override public Iterator<R> iteratorNoAuth() {\n         return F.concat(F.iterator(containers,\n                 c -> F.iterator(dataExtractor.apply(c).iterator(),\n                     d -> rowFunc.apply(c, d), true), true));"
  },
  {
    "sha": "316a78cad7e425fa8e7c1f11d3065b312f3a71a0",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -268,7 +268,7 @@ public GridCacheSharedContext(\n \n         ctxMap = new ConcurrentHashMap<>();\n \n-        kernalCtx.systemView().registerView(new ScanQuerySystemView<>(ctxMap.values()));\n+        kernalCtx.systemView().registerView(new ScanQuerySystemView<>(ctxMap.values(), kernalCtx.security()));\n \n         locStoreCnt = new AtomicInteger();\n "
  },
  {
    "sha": "ae27e337bcfda17289947a0334fb7016bea7c5aa",
    "filename": "modules/core/src/main/java/org/apache/ignite/plugin/security/SecurityPermission.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/plugin/security/SecurityPermission.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/plugin/security/SecurityPermission.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/plugin/security/SecurityPermission.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -85,7 +85,10 @@\n     ADMIN_WRITE_DISTRIBUTED_PROPERTY,\n \n     /** Administration operation with cluster snapshots (CREATE, CANCEL). */\n-    ADMIN_SNAPSHOT;\n+    ADMIN_SNAPSHOT,\n+\n+    /** System view read permission. */\n+    SYSTEM_VIEW_READ;\n \n     /** Enumerated values. */\n     private static final SecurityPermission[] VALS = values();"
  },
  {
    "sha": "f6675c2de2b17af33713756e9ecffccdd42fc713",
    "filename": "modules/core/src/main/java/org/apache/ignite/plugin/security/SecurityPermissionSetBuilder.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/plugin/security/SecurityPermissionSetBuilder.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/main/java/org/apache/ignite/plugin/security/SecurityPermissionSetBuilder.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/plugin/security/SecurityPermissionSetBuilder.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -143,7 +143,8 @@ public SecurityPermissionSetBuilder appendCachePermissions(String name, Security\n      * @return {@link SecurityPermissionSetBuilder} refer to same permission builder.\n      */\n     public SecurityPermissionSetBuilder appendSystemPermissions(SecurityPermission... perms) {\n-        validate(toCollection(\"EVENTS_\", \"ADMIN_\", \"CACHE_CREATE\", \"CACHE_DESTROY\", \"JOIN_AS_SERVER\"), perms);\n+        validate(toCollection(\"EVENTS_\", \"ADMIN_\", \"CACHE_CREATE\", \"CACHE_DESTROY\", \"JOIN_AS_SERVER\", \"SYSTEM_VIEW_\"),\n+            perms);\n \n         sysPerms.addAll(toCollection(perms));\n "
  },
  {
    "sha": "06bc823f138136de82b047955fe9e2a4896ee6c9",
    "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityContext.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityContext.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -70,6 +70,7 @@ public boolean operationAllowed(String opName, SecurityPermission perm) {\n             case ADMIN_OPS:\n             case ADMIN_SNAPSHOT:\n             case JOIN_AS_SERVER:\n+            case SYSTEM_VIEW_READ:\n                 return systemOperationAllowed(perm);\n \n             default:"
  },
  {
    "sha": "0708c8783da668c50de89c2164605093cdf9fbc7",
    "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/security/systemview/SystemViewAuthorizationTest.java",
    "status": "added",
    "additions": 138,
    "deletions": 0,
    "changes": 138,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/test/java/org/apache/ignite/internal/processors/security/systemview/SystemViewAuthorizationTest.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/test/java/org/apache/ignite/internal/processors/security/systemview/SystemViewAuthorizationTest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/security/systemview/SystemViewAuthorizationTest.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.security.systemview;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.stream.StreamSupport;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.security.AbstractSecurityTest;\n+import org.apache.ignite.internal.util.tostring.GridToStringBuilder;\n+import org.apache.ignite.plugin.security.SecurityException;\n+import org.apache.ignite.plugin.security.SecurityPermissionSet;\n+import org.apache.ignite.plugin.security.SecurityPermissionSetBuilder;\n+import org.apache.ignite.spi.systemview.view.ClusterNodeView;\n+import org.apache.ignite.spi.systemview.view.FiltrableSystemView;\n+import org.apache.ignite.spi.systemview.view.PartitionStateView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.managers.discovery.GridDiscoveryManager.NODES_SYS_VIEW;\n+import static org.apache.ignite.internal.processors.cache.GridCacheProcessor.PART_STATES_VIEW;\n+import static org.apache.ignite.plugin.security.SecurityPermission.SYSTEM_VIEW_READ;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsWithCause;\n+\n+/**\n+ * Tests authorized access to {@link SystemView}s.\n+ */\n+public class SystemViewAuthorizationTest extends AbstractSecurityTest {\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testNodesCanStartWithoutPermission() throws Exception {\n+        SecurityPermissionSet permSet = new SecurityPermissionSetBuilder().build();\n+\n+        Ignite srv = startGrid(\"server\", permSet, false);\n+        startGrid(\"client\", permSet, true);\n+\n+        assertEquals(2, srv.cluster().nodes().size());\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testCanReadViewWhenPermitted() throws Exception {\n+        SecurityPermissionSet permSet = new SecurityPermissionSetBuilder()\n+            .appendSystemPermissions(SYSTEM_VIEW_READ)\n+            .build();\n+\n+        IgniteEx server = startGrid(\"server\", permSet, false);\n+        IgniteEx client = startGrid(\"client\", permSet, true);\n+\n+        checkReadNodesViewSuceeds(server, 2);\n+        checkReadNodesViewSuceeds(client, 2);\n+\n+        checkReadPartitionsViewSucceeds(server);\n+        checkReadPartitionsViewSucceeds(client);\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testCannotReadViewWithoutPermission() throws Exception {\n+        SecurityPermissionSet permSet = new SecurityPermissionSetBuilder().build();\n+\n+        IgniteEx server = startGrid(\"server\", permSet, false);\n+        IgniteEx client = startGrid(\"client\", permSet, true);\n+\n+        checkReadNodesViewFails(server);\n+        checkReadNodesViewFails(client);\n+\n+        checkReadPartitionsViewFails(server);\n+        checkReadPartitionsViewFails(client);\n+    }\n+\n+    /** */\n+    @Override public void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids();\n+        cleanPersistenceDir();\n+    }\n+\n+    /** */\n+    private static void checkReadNodesViewSuceeds(IgniteEx ignite, int expectedNodeCnt) {\n+        SystemView<ClusterNodeView> view = ignite.context().systemView().view(NODES_SYS_VIEW);\n+\n+        assertEquals(expectedNodeCnt, view.size());\n+\n+        log.info(String.format(\"View [name=%s, desc=%s, size=%d]\", view.name(), view.description(), view.size()));\n+\n+        assertEquals(expectedNodeCnt, StreamSupport.stream(view.spliterator(), false).count());\n+    }\n+\n+    /** */\n+    private static void checkReadPartitionsViewSucceeds(IgniteEx ignite) {\n+        SystemView<PartitionStateView> v = ignite.context().systemView().view(PART_STATES_VIEW);\n+\n+        FiltrableSystemView<PartitionStateView> view = (FiltrableSystemView<PartitionStateView>)v;\n+\n+        log.info(String.format(\"View [name=%s, desc=%s, size=%d]\", view.name(), view.description(), view.size()));\n+\n+        for (Iterator<PartitionStateView> iter = view.iterator(Collections.emptyMap()); iter.hasNext(); )\n+            log.info(GridToStringBuilder.toString(PartitionStateView.class, iter.next()));\n+    }\n+\n+    /** */\n+    @SuppressWarnings(\"ThrowableNotThrown\")\n+    private static void checkReadNodesViewFails(IgniteEx ignite) {\n+        SystemView<ClusterNodeView> view = ignite.context().systemView().view(NODES_SYS_VIEW);\n+\n+        assertThrowsWithCause(view::size, SecurityException.class);\n+        assertThrowsWithCause(view::iterator, SecurityException.class);\n+    }\n+\n+    /** */\n+    @SuppressWarnings(\"ThrowableNotThrown\")\n+    private static void checkReadPartitionsViewFails(IgniteEx ignite) {\n+        SystemView<PartitionStateView> v = ignite.context().systemView().view(PART_STATES_VIEW);\n+\n+        FiltrableSystemView<PartitionStateView> view = (FiltrableSystemView<PartitionStateView>)v;\n+\n+        assertThrowsWithCause(view::size, SecurityException.class);\n+        assertThrowsWithCause(() -> view.iterator(Collections.emptyMap()), SecurityException.class);\n+    }\n+}"
  },
  {
    "sha": "bc204d08574b9606ad749ceac53e3cfd4d1e5f6b",
    "filename": "modules/core/src/test/java/org/apache/ignite/plugin/security/SecurityPermissionSetBuilderTest.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/test/java/org/apache/ignite/plugin/security/SecurityPermissionSetBuilderTest.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/test/java/org/apache/ignite/plugin/security/SecurityPermissionSetBuilderTest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/plugin/security/SecurityPermissionSetBuilderTest.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -37,6 +37,7 @@\n import static org.apache.ignite.plugin.security.SecurityPermission.JOIN_AS_SERVER;\n import static org.apache.ignite.plugin.security.SecurityPermission.SERVICE_DEPLOY;\n import static org.apache.ignite.plugin.security.SecurityPermission.SERVICE_INVOKE;\n+import static org.apache.ignite.plugin.security.SecurityPermission.SYSTEM_VIEW_READ;\n import static org.apache.ignite.plugin.security.SecurityPermission.TASK_CANCEL;\n import static org.apache.ignite.plugin.security.SecurityPermission.TASK_EXECUTE;\n import static org.apache.ignite.testframework.GridTestUtils.assertThrows;\n@@ -70,7 +71,8 @@ public void testPermissionBuilder() {\n \n         exp.setServicePermissions(permSrvc);\n \n-        exp.setSystemPermissions(permissions(ADMIN_VIEW, EVENTS_ENABLE, JOIN_AS_SERVER, CACHE_CREATE, CACHE_DESTROY));\n+        exp.setSystemPermissions(\n+            permissions(ADMIN_VIEW, EVENTS_ENABLE, JOIN_AS_SERVER, CACHE_CREATE, CACHE_DESTROY, SYSTEM_VIEW_READ));\n \n         final SecurityPermissionSetBuilder permsBuilder = new SecurityPermissionSetBuilder();\n \n@@ -99,7 +101,7 @@ public void testPermissionBuilder() {\n                     }\n                 }, IgniteException.class,\n                 \"you can assign permission only start with [EVENTS_, ADMIN_, CACHE_CREATE, CACHE_DESTROY, \" +\n-                    \"JOIN_AS_SERVER], but you try TASK_EXECUTE\"\n+                    \"JOIN_AS_SERVER, SYSTEM_VIEW_], but you try TASK_EXECUTE\"\n         );\n \n         assertThrows(log, new Callable<Object>() {\n@@ -109,7 +111,7 @@ public void testPermissionBuilder() {\n                 }\n             }, IgniteException.class,\n             \"you can assign permission only start with [EVENTS_, ADMIN_, CACHE_CREATE, CACHE_DESTROY, \" +\n-                \"JOIN_AS_SERVER], but you try SERVICE_INVOKE\"\n+                \"JOIN_AS_SERVER, SYSTEM_VIEW_], but you try SERVICE_INVOKE\"\n         );\n \n         permsBuilder\n@@ -126,7 +128,8 @@ public void testPermissionBuilder() {\n             .appendSystemPermissions(ADMIN_VIEW)\n             .appendSystemPermissions(ADMIN_VIEW, EVENTS_ENABLE)\n             .appendSystemPermissions(JOIN_AS_SERVER)\n-            .appendSystemPermissions(CACHE_CREATE, CACHE_DESTROY);\n+            .appendSystemPermissions(CACHE_CREATE, CACHE_DESTROY)\n+            .appendSystemPermissions(SYSTEM_VIEW_READ);\n \n         SecurityPermissionSet actual = permsBuilder.build();\n "
  },
  {
    "sha": "30bfc526a5a155c3d14617fe201505003341ca1d",
    "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/SecurityTestSuite.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/test/java/org/apache/ignite/testsuites/SecurityTestSuite.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/core/src/test/java/org/apache/ignite/testsuites/SecurityTestSuite.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/SecurityTestSuite.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -62,6 +62,7 @@\n import org.apache.ignite.internal.processors.security.sandbox.SecuritySubjectPermissionsTest;\n import org.apache.ignite.internal.processors.security.scheduler.SchedulerRemoteSecurityContextCheckTest;\n import org.apache.ignite.internal.processors.security.snapshot.SnapshotPermissionCheckTest;\n+import org.apache.ignite.internal.processors.security.systemview.SystemViewAuthorizationTest;\n import org.apache.ignite.ssl.MultipleSSLContextsTest;\n import org.apache.ignite.tools.junit.JUnitTeamcityReporter;\n import org.junit.BeforeClass;\n@@ -84,6 +85,7 @@\n     ContinuousQueryPermissionCheckTest.class,\n     IgniteClientContainSubjectAddressTest.class,\n     SnapshotPermissionCheckTest.class,\n+    SystemViewAuthorizationTest.class,\n \n     DistributedClosureRemoteSecurityContextCheckTest.class,\n     ComputeTaskRemoteSecurityContextCheckTest.class,"
  },
  {
    "sha": "c5de5d982a7628d9a52bcf87ec18eb4be8c8e67b",
    "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewLocal.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewLocal.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewLocal.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/managers/systemview/SystemViewLocal.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -141,7 +141,7 @@ public SystemViewLocal(GridKernalContext ctx, SystemView<R> sysView) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {\n+    @Override protected Iterator<Row> getRowsNoAuth(Session ses, SearchRow first, SearchRow last) {\n         Iterator<R> rows = viewIterator(first, last);\n \n         return new Iterator<Row>() {\n@@ -222,12 +222,12 @@ public SystemViewLocal(GridKernalContext ctx, SystemView<R> sysView) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public long getRowCount() {\n+    @Override public long getRowCountNoAuth() {\n         return sysView.size();\n     }\n \n     /** {@inheritDoc} */\n-    @Override public long getRowCountApproximation() {\n+    @Override public long getRowCountApproximationNoAuth() {\n         // getRowCount() method is not really fast, for some system views it's required to iterate over elements to\n         // calculate size, so it's more safe to use constant here.\n         return DEFAULT_ROW_COUNT_APPROXIMATION;"
  },
  {
    "sha": "0cf0c1286a8a9aeedef37521abf323ccb48004c1",
    "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/metric/sql/MetricRegistryLocalSystemView.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/metric/sql/MetricRegistryLocalSystemView.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/metric/sql/MetricRegistryLocalSystemView.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/metric/sql/MetricRegistryLocalSystemView.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -51,7 +51,7 @@\n     }\n \n     /** {@inheritDoc} */\n-    @Override public Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {\n+    @Override public Iterator<Row> getRowsNoAuth(Session ses, SearchRow first, SearchRow last) {\n         return new Iterator<Row>() {\n             /** */\n             private Iterator<ReadOnlyMetricRegistry> grps = mreg.iterator();"
  },
  {
    "sha": "ca4ebbe252b3732f25c53c91b191e07f07dd1a7b",
    "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlAbstractSystemView.java",
    "status": "modified",
    "additions": 51,
    "deletions": 3,
    "changes": 54,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlAbstractSystemView.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlAbstractSystemView.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlAbstractSystemView.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -17,11 +17,19 @@\n \n package org.apache.ignite.internal.processors.query.h2.sys.view;\n \n+import java.util.Iterator;\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.internal.GridKernalContext;\n+import org.apache.ignite.internal.processors.security.IgniteSecurity;\n+import org.apache.ignite.plugin.security.SecurityPermission;\n+import org.h2.engine.Session;\n+import org.h2.result.Row;\n+import org.h2.result.SearchRow;\n import org.h2.table.Column;\n import org.h2.value.Value;\n \n+import static org.apache.ignite.plugin.security.SecurityPermission.SYSTEM_VIEW_READ;\n+\n /**\n  * Meta view base class.\n  */\n@@ -100,13 +108,43 @@ protected static Column newColumn(String name, int type) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public long getRowCount() {\n+    @Override public final Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {\n+        authorize();\n+\n+        return getRowsNoAuth(ses, first, last);\n+    }\n+\n+    /**\n+     * {@link SqlSystemView#getRows(Session, SearchRow, SearchRow)} implementation without authorization.\n+     */\n+    protected abstract Iterator<Row> getRowsNoAuth(Session ses, SearchRow first, SearchRow last);\n+\n+    /** {@inheritDoc} */\n+    @Override public final long getRowCount() {\n+        authorize();\n+\n+        return getRowCountNoAuth();\n+    }\n+\n+    /**\n+     * {@link SqlSystemView#getRowCount()} implementation without authorization.\n+     */\n+    protected long getRowCountNoAuth() {\n         return DEFAULT_ROW_COUNT_APPROXIMATION;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public long getRowCountApproximation() {\n-        return getRowCount();\n+    @Override public final long getRowCountApproximation() {\n+        authorize();\n+\n+        return getRowCountNoAuth();\n+    }\n+\n+    /**\n+     * {@link SqlSystemView#getRowCountApproximation()} implementation without authorization.\n+     */\n+    protected long getRowCountApproximationNoAuth() {\n+        return DEFAULT_ROW_COUNT_APPROXIMATION;\n     }\n \n     /** {@inheritDoc} */\n@@ -136,4 +174,14 @@ protected static Column newColumn(String name, int type) {\n \n         return sql.toString();\n     }\n+\n+    /**\n+     * Authorizes {@link SecurityPermission#SYSTEM_VIEW_READ} permission.\n+     */\n+    private void authorize() {\n+        IgniteSecurity security = ctx.security();\n+\n+        if (security != null)\n+            security.authorize(SYSTEM_VIEW_READ);\n+    }\n }"
  },
  {
    "sha": "b8bbfa7f9cc46047b8eef6aea9ab9820f76fb4e8",
    "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewBaselineNodes.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewBaselineNodes.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewBaselineNodes.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewBaselineNodes.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -47,7 +47,7 @@ public SqlSystemViewBaselineNodes(GridKernalContext ctx) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {\n+    @Override public Iterator<Row> getRowsNoAuth(Session ses, SearchRow first, SearchRow last) {\n         List<Row> rows = new ArrayList<>();\n \n         BaselineTopology blt = ctx.state().clusterState().baselineTopology();\n@@ -80,7 +80,7 @@ public SqlSystemViewBaselineNodes(GridKernalContext ctx) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public long getRowCount() {\n+    @Override public long getRowCountNoAuth() {\n         BaselineTopology blt = ctx.state().clusterState().baselineTopology();\n \n         return blt == null ? 0 : blt.consistentIds().size();"
  },
  {
    "sha": "058065882679f66942238bda01220a7d26c40888",
    "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewCacheGroupsIOStatistics.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewCacheGroupsIOStatistics.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewCacheGroupsIOStatistics.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewCacheGroupsIOStatistics.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -57,7 +57,7 @@ public SqlSystemViewCacheGroupsIOStatistics(GridKernalContext ctx) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {\n+    @Override public Iterator<Row> getRowsNoAuth(Session ses, SearchRow first, SearchRow last) {\n         SqlSystemViewColumnCondition nameCond = conditionForColumn(\"CACHE_GROUP_NAME\", first, last);\n \n         if (nameCond.isEquality()) {\n@@ -118,7 +118,7 @@ private Row toRow(Session ses, int grpId, String grpName, MetricRegistry mreg) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public long getRowCount() {\n+    @Override public long getRowCountNoAuth() {\n         return ctx.cache().cacheGroups().size();\n     }\n }"
  },
  {
    "sha": "cd9b72c5476157c87a2edb5c39d50f478c832d74",
    "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewNodeAttributes.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewNodeAttributes.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewNodeAttributes.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewNodeAttributes.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -47,8 +47,7 @@ public SqlSystemViewNodeAttributes(GridKernalContext ctx) {\n     }\n \n     /** {@inheritDoc} */\n-    @SuppressWarnings(\"unchecked\")\n-    @Override public Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {\n+    @Override public Iterator<Row> getRowsNoAuth(Session ses, SearchRow first, SearchRow last) {\n         Collection<ClusterNode> nodes;\n \n         SqlSystemViewColumnCondition idCond = conditionForColumn(\"NODE_ID\", first, last);"
  },
  {
    "sha": "5799e7626c135dd918c5a111b9ea03f6aeb2c123",
    "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewNodeMetrics.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewNodeMetrics.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewNodeMetrics.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sys/view/SqlSystemViewNodeMetrics.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -102,7 +102,7 @@ public SqlSystemViewNodeMetrics(GridKernalContext ctx) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {\n+    @Override public Iterator<Row> getRowsNoAuth(Session ses, SearchRow first, SearchRow last) {\n         List<Row> rows = new ArrayList<>();\n \n         Collection<ClusterNode> nodes;\n@@ -205,7 +205,7 @@ public SqlSystemViewNodeMetrics(GridKernalContext ctx) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public long getRowCount() {\n+    @Override public long getRowCountNoAuth() {\n         return F.concat(false, ctx.discovery().allNodes(), ctx.discovery().daemonNodes()).size();\n     }\n }"
  },
  {
    "sha": "8ff0641d40980ffb123511c800a4b4a5e26f4bb1",
    "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlSystemViewAuthorizationTest.java",
    "status": "added",
    "additions": 104,
    "deletions": 0,
    "changes": 104,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlSystemViewAuthorizationTest.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlSystemViewAuthorizationTest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlSystemViewAuthorizationTest.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.query.SqlFieldsQuery;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.query.h2.sys.view.SqlSystemView;\n+import org.apache.ignite.internal.processors.security.AbstractSecurityTest;\n+import org.apache.ignite.plugin.security.SecurityException;\n+import org.apache.ignite.plugin.security.SecurityPermissionSet;\n+import org.apache.ignite.plugin.security.SecurityPermissionSetBuilder;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.query.h2.SchemaManager.SQL_VIEWS_VIEW;\n+import static org.apache.ignite.plugin.security.SecurityPermission.CACHE_CREATE;\n+import static org.apache.ignite.plugin.security.SecurityPermission.CACHE_READ;\n+import static org.apache.ignite.plugin.security.SecurityPermission.SYSTEM_VIEW_READ;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsWithCause;\n+\n+/**\n+ * Tests authorized access to {@link SqlSystemView}s.\n+ */\n+public class SqlSystemViewAuthorizationTest extends AbstractSecurityTest {\n+    /** */\n+    private static final SqlFieldsQuery QUERY_ALL = new SqlFieldsQuery(\"SELECT * FROM SYS.\" + SQL_VIEWS_VIEW);\n+\n+    /** */\n+    private static final SqlFieldsQuery QUERY_COUNT = new SqlFieldsQuery(\"SELECT count(*) FROM SYS.\" + SQL_VIEWS_VIEW);\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testCanReadViewWhenPermitted() throws Exception {\n+        SecurityPermissionSet permSet = new SecurityPermissionSetBuilder()\n+            .appendSystemPermissions(SYSTEM_VIEW_READ)\n+            .appendCachePermissions(DEFAULT_CACHE_NAME, CACHE_CREATE, CACHE_READ)\n+            .build();\n+\n+        IgniteEx server = startGrid(\"server\", permSet, false);\n+        IgniteEx client = startGrid(\"client\", permSet, true);\n+\n+        checkReadViewSuceeds(server);\n+        checkReadViewSuceeds(client);\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testCannotReadViewWithoutPermission() throws Exception {\n+        SecurityPermissionSet permSet = new SecurityPermissionSetBuilder()\n+            .appendCachePermissions(DEFAULT_CACHE_NAME, CACHE_CREATE, CACHE_READ)\n+            .build();\n+\n+        IgniteEx server = startGrid(\"server\", permSet, false);\n+        IgniteEx client = startGrid(\"client\", permSet, true);\n+\n+        checkReadViewFails(server);\n+        checkReadViewFails(client);\n+    }\n+\n+    /** */\n+    @Override public void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids();\n+        cleanPersistenceDir();\n+    }\n+\n+    /** */\n+    private static void checkReadViewSuceeds(Ignite ignite) {\n+        IgniteCache<String, String> cache = ignite.getOrCreateCache(DEFAULT_CACHE_NAME);\n+\n+        for (List<?> row : cache.query(QUERY_ALL).getAll())\n+            log.info(row.stream().map(Object::toString).collect(Collectors.joining(\"|\")));\n+\n+        log.info(cache.query(QUERY_COUNT).iterator().next().get(0).toString());\n+    }\n+\n+    /** */\n+    @SuppressWarnings(\"ThrowableNotThrown\")\n+    private static void checkReadViewFails(Ignite ignite) {\n+        IgniteCache<String, String> cache = ignite.getOrCreateCache(DEFAULT_CACHE_NAME);\n+\n+        assertThrowsWithCause(() -> cache.query(QUERY_ALL).getAll(), SecurityException.class);\n+        assertThrowsWithCause(() -> cache.query(QUERY_COUNT).iterator().next().get(0), SecurityException.class);\n+    }\n+}"
  },
  {
    "sha": "8a3b0f67fb2b1b01b45fcabcae4dde3ac4964449",
    "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteBinaryCacheQueryTestSuite.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteBinaryCacheQueryTestSuite.java",
    "raw_url": "https://github.com/apache/ignite/raw/b1ae4ced9a05592f788f6c903af2e310d96a414f/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteBinaryCacheQueryTestSuite.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteBinaryCacheQueryTestSuite.java?ref=b1ae4ced9a05592f788f6c903af2e310d96a414f",
    "patch": "@@ -240,6 +240,7 @@\n import org.apache.ignite.internal.processors.query.SqlQueryHistorySelfTest;\n import org.apache.ignite.internal.processors.query.SqlResultSetMetaSelfTest;\n import org.apache.ignite.internal.processors.query.SqlSchemaSelfTest;\n+import org.apache.ignite.internal.processors.query.SqlSystemViewAuthorizationTest;\n import org.apache.ignite.internal.processors.query.SqlSystemViewsSelfTest;\n import org.apache.ignite.internal.processors.query.h2.GridIndexRebuildSelfTest;\n import org.apache.ignite.internal.processors.query.h2.GridIndexRebuildTest;\n@@ -552,6 +553,7 @@\n     IgniteCheckClusterStateBeforeExecuteQueryTest.class,\n     OptimizedMarshallerIndexNameTest.class,\n     SqlSystemViewsSelfTest.class,\n+    SqlSystemViewAuthorizationTest.class,\n     ScanQueryConcurrentUpdatesTest.class,\n     ScanQueryConcurrentSqlUpdatesTest.class,\n "
  }
]
