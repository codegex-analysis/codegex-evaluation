[
  {
    "sha": "9dd6bced32673131e2cb6d3885bab7e4d2058f4b",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java",
    "status": "modified",
    "additions": 2,
    "deletions": 7,
    "changes": 9,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -90,6 +90,7 @@\n import org.apache.ignite.internal.processors.rest.IgniteRestProcessor;\n import org.apache.ignite.internal.processors.schedule.IgniteScheduleProcessorAdapter;\n import org.apache.ignite.internal.processors.security.IgniteSecurity;\n+import org.apache.ignite.internal.processors.security.SecurityUtils;\n import org.apache.ignite.internal.processors.segmentation.GridSegmentationProcessor;\n import org.apache.ignite.internal.processors.service.ServiceProcessorAdapter;\n import org.apache.ignite.internal.processors.session.GridTaskSessionProcessor;\n@@ -321,10 +322,6 @@\n     @GridToStringExclude\n     private MvccProcessor coordProc;\n \n-    /** */\n-    @GridToStringExclude\n-    private IgniteAuthenticationProcessor authProc;\n-\n     /** Diagnostic processor. */\n     @GridToStringInclude\n     private DiagnosticProcessor diagnosticProcessor;\n@@ -704,8 +701,6 @@ else if (comp instanceof PdsFoldersResolver)\n             pdsFolderRslvr = (PdsFoldersResolver)comp;\n         else if (comp instanceof GridInternalSubscriptionProcessor)\n             internalSubscriptionProc = (GridInternalSubscriptionProcessor)comp;\n-        else if (comp instanceof IgniteAuthenticationProcessor)\n-            authProc = (IgniteAuthenticationProcessor)comp;\n         else if (comp instanceof IgniteSecurity)\n             security = (IgniteSecurity)comp;\n         else if (comp instanceof CompressionProcessor)\n@@ -1002,7 +997,7 @@ public void addHelper(Object helper) {\n \n     /** {@inheritDoc} */\n     @Override public IgniteAuthenticationProcessor authentication() {\n-        return authProc;\n+        return SecurityUtils.internalSecurity(this);\n     }\n \n     /** {@inheritDoc} */"
  },
  {
    "sha": "e4cd7d46f10df042d8c2000683aad1ccd8b3a994",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -183,7 +183,7 @@\n import org.apache.ignite.internal.processors.security.GridSecurityProcessor;\n import org.apache.ignite.internal.processors.security.IgniteSecurity;\n import org.apache.ignite.internal.processors.security.IgniteSecurityProcessor;\n-import org.apache.ignite.internal.processors.security.NoOpIgniteSecurityProcessor;\n+import org.apache.ignite.internal.processors.security.SecurityUtils;\n import org.apache.ignite.internal.processors.segmentation.GridSegmentationProcessor;\n import org.apache.ignite.internal.processors.service.GridServiceProcessor;\n import org.apache.ignite.internal.processors.service.IgniteServiceProcessor;\n@@ -1250,7 +1250,6 @@ public void start(\n                 startTimer.finishGlobalStage(\"Configure binary metadata\");\n \n                 startProcessor(createComponent(IGridClusterStateProcessor.class, ctx));\n-                startProcessor(new IgniteAuthenticationProcessor(ctx));\n                 startProcessor(new GridCacheProcessor(ctx));\n                 startProcessor(new GridQueryProcessor(ctx));\n                 startProcessor(new ClientListenerProcessor(ctx));\n@@ -1569,7 +1568,7 @@ private GridProcessor securityProcessor() throws IgniteCheckedException {\n \n         return prc != null && prc.enabled()\n             ? new IgniteSecurityProcessor(ctx, prc)\n-            : new NoOpIgniteSecurityProcessor(ctx);\n+            : new IgniteAuthenticationProcessor(ctx);\n     }\n \n     /**"
  },
  {
    "sha": "967b30dabb66eab5d8d21343bc2536a01033c4dd",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -75,6 +75,7 @@\n import org.apache.ignite.internal.managers.eventstorage.GridLocalEventListener;\n import org.apache.ignite.internal.managers.systemview.walker.ClusterNodeViewWalker;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n+import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.cache.CacheGroupDescriptor;\n import org.apache.ignite.internal.processors.cache.ClientCacheChangeDummyDiscoveryMessage;\n import org.apache.ignite.internal.processors.cache.DynamicCacheChangeBatch;\n@@ -170,6 +171,7 @@\n import static org.apache.ignite.internal.IgniteVersionUtils.VER;\n import static org.apache.ignite.internal.events.DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT;\n import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.metricName;\n+import static org.apache.ignite.internal.processors.security.SecurityUtils.ifInternalSecurity;\n import static org.apache.ignite.internal.processors.security.SecurityUtils.isSecurityCompatibilityMode;\n import static org.apache.ignite.plugin.segmentation.SegmentationPolicy.NOOP;\n \n@@ -767,7 +769,7 @@ else if (customMsg instanceof ChangeGlobalStateMessage) {\n \n                         ctx.service().onLocalJoin(discoEvt, discoCache);\n \n-                        ctx.authentication().onLocalJoin();\n+                        ifInternalSecurity(ctx, IgniteAuthenticationProcessor::onLocalJoin);\n \n                         ctx.encryption().onLocalJoin();\n "
  },
  {
    "sha": "3604fb95b2f68902663e6c301b169bbca368e5c4",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/AuthorizationContext.java",
    "status": "modified",
    "additions": 45,
    "deletions": 3,
    "changes": 48,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/AuthorizationContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/AuthorizationContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/AuthorizationContext.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -17,13 +17,25 @@\n \n package org.apache.ignite.internal.processors.authentication;\n \n+import java.io.Serializable;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.security.SecurityContext;\n+import org.apache.ignite.plugin.security.SecurityPermission;\n+import org.apache.ignite.plugin.security.SecuritySubject;\n+\n /**\n  * Ignite authentication context.\n  */\n-public class AuthorizationContext {\n+public class AuthorizationContext implements SecurityContext, Serializable {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n     /** User. */\n     private final User user;\n \n+    /** */\n+    private SecuritySubject subj;\n+\n     /** Current authorization context. */\n     private static ThreadLocal<AuthorizationContext> actx = new ThreadLocal<>();\n \n@@ -33,16 +45,21 @@\n      * @param user Authorized user.\n      */\n     public AuthorizationContext(User user) {\n-        assert user != null;\n+        this.user = user;\n+    }\n \n+    /** */\n+    public AuthorizationContext(UUID id, User user) {\n         this.user = user;\n+\n+        subj = new IgniteSecuritySubject(id, null, user == null ? null : user.name(), null, null);\n     }\n \n     /**\n      * @return Authorized user.\n      */\n     public String userName() {\n-        return user.name();\n+        return user == null ? null : user.name();\n     }\n \n     /**\n@@ -86,4 +103,29 @@ public static void clear() {\n     public static AuthorizationContext context() {\n         return actx.get();\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override public SecuritySubject subject() {\n+        return subj;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean taskOperationAllowed(String taskClsName, SecurityPermission perm) {\n+        return false;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean cacheOperationAllowed(String cacheName, SecurityPermission perm) {\n+        return false;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean serviceOperationAllowed(String srvcName, SecurityPermission perm) {\n+        return false;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean systemOperationAllowed(SecurityPermission perm) {\n+        return true;\n+    }\n }"
  },
  {
    "sha": "ea8b87ecd2200f7d0e23e147aa903a83f70a3478",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
    "status": "modified",
    "additions": 190,
    "deletions": 59,
    "changes": 249,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -37,7 +37,6 @@\n import org.apache.ignite.internal.GridTopic;\n import org.apache.ignite.internal.IgniteInternalFuture;\n import org.apache.ignite.internal.IgniteInterruptedCheckedException;\n-import org.apache.ignite.internal.IgniteNodeAttributes;\n import org.apache.ignite.internal.managers.communication.GridIoManager;\n import org.apache.ignite.internal.managers.communication.GridIoPolicy;\n import org.apache.ignite.internal.managers.communication.GridMessageListener;\n@@ -52,6 +51,11 @@\n import org.apache.ignite.internal.processors.cache.persistence.metastorage.MetastorageTree;\n import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadOnlyMetastorage;\n import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadWriteMetastorage;\n+import org.apache.ignite.internal.processors.security.IgniteSecurity;\n+import org.apache.ignite.internal.processors.security.OperationSecurityContext;\n+import org.apache.ignite.internal.processors.security.SecurityContext;\n+import org.apache.ignite.internal.processors.security.sandbox.IgniteSandbox;\n+import org.apache.ignite.internal.processors.security.sandbox.NoOpSandbox;\n import org.apache.ignite.internal.util.future.GridFutureAdapter;\n import org.apache.ignite.internal.util.tostring.GridToStringExclude;\n import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n@@ -62,6 +66,14 @@\n import org.apache.ignite.lang.IgniteFuture;\n import org.apache.ignite.lang.IgniteFutureCancelledException;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.marshaller.MarshallerUtils;\n+import org.apache.ignite.marshaller.jdk.JdkMarshaller;\n+import org.apache.ignite.plugin.security.AuthenticationContext;\n+import org.apache.ignite.plugin.security.SecurityBasicPermissionSet;\n+import org.apache.ignite.plugin.security.SecurityCredentials;\n+import org.apache.ignite.plugin.security.SecurityException;\n+import org.apache.ignite.plugin.security.SecurityPermission;\n+import org.apache.ignite.plugin.security.SecuritySubject;\n import org.apache.ignite.spi.IgniteNodeValidationResult;\n import org.apache.ignite.spi.discovery.DiscoveryDataBag;\n import org.apache.ignite.spi.discovery.DiscoverySpi;\n@@ -73,11 +85,17 @@\n import static org.apache.ignite.events.EventType.EVT_NODE_JOINED;\n import static org.apache.ignite.events.EventType.EVT_NODE_LEFT;\n import static org.apache.ignite.internal.GridComponent.DiscoveryDataExchangeType.AUTH_PROC;\n+import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_AUTHENTICATION_ENABLED;\n+import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_SECURITY_CREDENTIALS;\n+import static org.apache.ignite.internal.processors.security.SecurityUtils.nodeSecurityContext;\n+import static org.apache.ignite.plugin.security.SecurityPermission.JOIN_AS_SERVER;\n \n /**\n  *\n  */\n-public class IgniteAuthenticationProcessor extends GridProcessorAdapter implements MetastorageLifecycleListener {\n+public class IgniteAuthenticationProcessor extends GridProcessorAdapter implements IgniteSecurity,\n+    MetastorageLifecycleListener\n+{\n     /** Store user prefix. */\n     private static final String STORE_USER_PREFIX = \"user.\";\n \n@@ -139,11 +157,31 @@\n     /** Validate error. */\n     private String validateErr;\n \n+    /** Instance of {@link IgniteSandbox}. */\n+    private final IgniteSandbox sandbox = new NoOpSandbox();\n+\n+    /** No-op security context. */\n+    private final OperationSecurityContext noOpSecCtx = new OperationSecurityContext(this, null);\n+\n+    /** Must use JDK marshaller for Security Subject. */\n+    private final JdkMarshaller marsh;\n+\n     /**\n      * @param ctx Kernal context.\n      */\n     public IgniteAuthenticationProcessor(GridKernalContext ctx) {\n         super(ctx);\n+\n+        marsh = MarshallerUtils.jdkMarshaller(ctx.igniteInstanceName());\n+    }\n+\n+    /**\n+     * Getting local node's security context.\n+     *\n+     * @return Security context of local node.\n+     */\n+    private AuthorizationContext localSecurityContext() {\n+        return (AuthorizationContext)nodeSecurityContext(marsh, U.resolveClassLoader(ctx.config()), ctx.discovery().localNode());\n     }\n \n     /** {@inheritDoc} */\n@@ -161,47 +199,8 @@ public IgniteAuthenticationProcessor(GridKernalContext ctx) {\n \n         ctx.internalSubscriptionProcessor().registerMetastorageListener(this);\n \n-        ctx.addNodeAttribute(IgniteNodeAttributes.ATTR_AUTHENTICATION_ENABLED, isEnabled);\n-\n-        GridDiscoveryManager discoMgr = ctx.discovery();\n-\n-        GridIoManager ioMgr = ctx.io();\n-\n-        discoMgr.setCustomEventListener(UserProposedMessage.class, new UserProposedListener());\n-\n-        discoMgr.setCustomEventListener(UserAcceptedMessage.class, new UserAcceptedListener());\n-\n-        discoLsnr = (evt, discoCache) -> {\n-            if (!isEnabled || ctx.isStopping())\n-                return;\n-\n-            switch (evt.type()) {\n-                case EVT_NODE_LEFT:\n-                case EVT_NODE_FAILED:\n-                    onNodeLeft(evt.eventNode().id());\n-                    break;\n-\n-                case EVT_NODE_JOINED:\n-                    onNodeJoin(evt.eventNode());\n-                    break;\n-            }\n-        };\n-\n-        ctx.event().addDiscoveryEventListener(discoLsnr, DISCO_EVT_TYPES);\n-\n-        ioLsnr = (nodeId, msg, plc) -> {\n-            if (!isEnabled || ctx.isStopping())\n-                return;\n-\n-            if (msg instanceof UserManagementOperationFinishedMessage)\n-                onFinishMessage(nodeId, (UserManagementOperationFinishedMessage)msg);\n-            else if (msg instanceof UserAuthenticateRequestMessage)\n-                onAuthenticateRequestMessage(nodeId, (UserAuthenticateRequestMessage)msg);\n-            else if (msg instanceof UserAuthenticateResponseMessage)\n-                onAuthenticateResponseMessage((UserAuthenticateResponseMessage)msg);\n-        };\n-\n-        ioMgr.addMessageListener(GridTopic.TOPIC_AUTH, ioLsnr);\n+        ctx.addNodeAttribute(ATTR_AUTHENTICATION_ENABLED, isEnabled);\n+        ctx.addNodeAttribute(ATTR_SECURITY_CREDENTIALS, new SecurityCredentials(null, null));\n \n         exec = new IgniteThreadPoolExecutor(\n             \"auth\",\n@@ -250,6 +249,47 @@ public void cacheProcessorStarted() {\n     @Override public void onKernalStart(boolean active) throws IgniteCheckedException {\n         super.onKernalStart(active);\n \n+        GridDiscoveryManager discoMgr = ctx.discovery();\n+\n+        GridIoManager ioMgr = ctx.io();\n+\n+        discoMgr.setCustomEventListener(UserProposedMessage.class, new UserProposedListener());\n+\n+        discoMgr.setCustomEventListener(UserAcceptedMessage.class, new UserAcceptedListener());\n+\n+        discoLsnr = (evt, discoCache) -> {\n+            if (!isEnabled || ctx.isStopping())\n+                return;\n+\n+            switch (evt.type()) {\n+                case EVT_NODE_LEFT:\n+                case EVT_NODE_FAILED:\n+                    onNodeLeft(evt.eventNode().id());\n+                    break;\n+\n+                case EVT_NODE_JOINED:\n+                    onNodeJoin(evt.eventNode());\n+                    break;\n+            }\n+        };\n+\n+        ctx.event().addDiscoveryEventListener(discoLsnr, DISCO_EVT_TYPES);\n+\n+        ioLsnr = (nodeId, msg, plc) -> {\n+            if (!isEnabled || ctx.isStopping())\n+                return;\n+\n+            if (msg instanceof UserManagementOperationFinishedMessage)\n+                onFinishMessage(nodeId, (UserManagementOperationFinishedMessage)msg);\n+            else if (msg instanceof UserAuthenticateRequestMessage)\n+                onAuthenticateRequestMessage(nodeId, (UserAuthenticateRequestMessage)msg);\n+            else if (msg instanceof UserAuthenticateResponseMessage)\n+                onAuthenticateResponseMessage((UserAuthenticateResponseMessage)msg);\n+        };\n+\n+        ioMgr.addMessageListener(GridTopic.TOPIC_AUTH, ioLsnr);\n+\n+\n         if (validateErr != null)\n             throw new IgniteCheckedException(validateErr);\n     }\n@@ -292,15 +332,33 @@ public void cacheProcessorStarted() {\n      * @throws IgniteAccessControlException On authentication error.\n      */\n     public AuthorizationContext authenticate(String login, String passwd) throws IgniteCheckedException {\n+        AuthenticationContext authCtx = new AuthenticationContext();\n+\n+        authCtx.subjectId(UUID.randomUUID());\n+        authCtx.credentials(new SecurityCredentials(login, passwd));\n+\n+        return authenticate(authCtx);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public AuthorizationContext authenticate(AuthenticationContext authCtx) throws IgniteCheckedException {\n         checkEnabled();\n \n+        SecurityCredentials creds = authCtx.credentials();\n+\n+        String login = (String)creds.getLogin();\n+\n         if (F.isEmpty(login))\n-            throw new IgniteAccessControlException(\"The user name or password is incorrect [userName=\" + login + ']');\n+            throw new IgniteAccessControlException(\"Unauthenticated sessions are prohibited\");\n+\n+        String passwd = (String)creds.getPassword();\n+\n+        User user;\n \n         if (ctx.clientNode()) {\n-            while (true) {\n-                AuthenticateFuture fut;\n+            AuthenticateFuture fut;\n \n+            do {\n                 synchronized (mux) {\n                     ClusterNode rndNode = U.randomServerNode(ctx);\n \n@@ -314,15 +372,14 @@ public AuthorizationContext authenticate(String login, String passwd) throws Ign\n                 }\n \n                 fut.get();\n+            } while (fut.retry());\n \n-                if (fut.retry())\n-                    continue;\n-\n-                return new AuthorizationContext(User.create(login));\n-            }\n+            user = User.create(login);\n         }\n         else\n-            return new AuthorizationContext(authenticateOnServer(login, passwd));\n+            user = authenticateOnServer(login, passwd);\n+\n+        return new AuthorizationContext(authCtx.subjectId(), user);\n     }\n \n     /**\n@@ -411,7 +468,7 @@ public void updateUser(String login, String passwd) throws IgniteCheckedExceptio\n \n     /** {@inheritDoc} */\n     @Nullable @Override public IgniteNodeValidationResult validateNode(ClusterNode node) {\n-        Boolean rmtEnabled = node.attribute(IgniteNodeAttributes.ATTR_AUTHENTICATION_ENABLED);\n+        Boolean rmtEnabled = node.attribute(ATTR_AUTHENTICATION_ENABLED);\n \n         if (isEnabled && rmtEnabled == null) {\n             String errMsg = \"Failed to add node to topology because user authentication is enabled on cluster and \" +\n@@ -462,10 +519,84 @@ private boolean isLocalNodeCoordinator() {\n         initUsrs = (InitialUsersData)data.commonData();\n     }\n \n-    /**\n-     * @return {@code true} if authentication is enabled, {@code false} if not.\n-     */\n-    public boolean enabled() {\n+    /** {@inheritDoc} */\n+    @Override public OperationSecurityContext withContext(SecurityContext secCtx) {\n+        if (!isEnabled)\n+            return noOpSecCtx;\n+\n+        AuthorizationContext old = securityContext();\n+\n+        AuthorizationContext.context((AuthorizationContext)secCtx);\n+\n+        return new OperationSecurityContext(this, old);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public OperationSecurityContext withContext(UUID nodeId) {\n+        if (!isEnabled)\n+            return noOpSecCtx;\n+\n+        return withContext(new AuthorizationContext(nodeId, null));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public AuthorizationContext securityContext() {\n+        AuthorizationContext authCtx = AuthorizationContext.context();\n+\n+        if (authCtx == null) {\n+            authCtx = localSecurityContext();\n+\n+            AuthorizationContext.context(authCtx);\n+        }\n+\n+        return authCtx;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public SecurityContext authenticateNode(ClusterNode node, SecurityCredentials cred)\n+        throws IgniteCheckedException\n+    {\n+        checkEnabled();\n+\n+        SecurityBasicPermissionSet perms = new SecurityBasicPermissionSet();\n+\n+        perms.setSystemPermissions(Collections.singletonList(JOIN_AS_SERVER));\n+\n+        return new AuthorizationContext(node.id(), null);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean isGlobalNodeAuthentication() {\n+        return false;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<SecuritySubject> authenticatedSubjects() throws IgniteCheckedException {\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public SecuritySubject authenticatedSubject(UUID subjId) throws IgniteCheckedException {\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void onSessionExpired(UUID subjId) {\n+        // No-op.\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void authorize(String name, SecurityPermission perm) throws SecurityException {\n+        // No-op.\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public IgniteSandbox sandbox() {\n+        return sandbox;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean enabled() {\n         return isEnabled;\n     }\n \n@@ -545,7 +676,7 @@ private UserOperationFinishFuture execUserOperation(UserManagementOperation op)\n                     + \"client node is disconnected.\");\n             }\n \n-            AuthorizationContext actx = AuthorizationContext.context();\n+            AuthorizationContext actx = securityContext();\n \n             if (actx == null)\n                 throw new IgniteAccessControlException(\"Operation not allowed: authorized context is empty.\");\n@@ -852,7 +983,7 @@ public void onLocalJoin() {\n                 addDefaultUser();\n         }\n         else {\n-            Boolean rmtEnabled = coordinator().attribute(IgniteNodeAttributes.ATTR_AUTHENTICATION_ENABLED);\n+            Boolean rmtEnabled = coordinator().attribute(ATTR_AUTHENTICATION_ENABLED);\n \n             // The cluster doesn't support authentication (ver < 2.5)\n             if (rmtEnabled == null)"
  },
  {
    "sha": "afbf112f203c86a62c1d4117d28d06fce8cc093f",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteSecuritySubject.java",
    "status": "added",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteSecuritySubject.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteSecuritySubject.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteSecuritySubject.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -0,0 +1,83 @@\n+package org.apache.ignite.internal.processors.authentication;\n+\n+import java.net.InetSocketAddress;\n+import java.util.UUID;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.plugin.security.SecurityPermissionSet;\n+import org.apache.ignite.plugin.security.SecuritySubject;\n+import org.apache.ignite.plugin.security.SecuritySubjectType;\n+\n+/**\n+ * {@link SecuritySubject} implementation that contains description of Ignite node/remote client\n+ * and associated security data.\n+ */\n+public class IgniteSecuritySubject implements SecuritySubject {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Id. */\n+    private final UUID id;\n+\n+    /** Type. */\n+    private final SecuritySubjectType type;\n+\n+    /** Login. */\n+    private final Object login;\n+\n+    /** Address. */\n+    private final InetSocketAddress addr;\n+\n+    /** User permissions. */\n+    private final SecurityPermissionSet perms;\n+\n+    /**\n+     * @param id Id.\n+     * @param type Type.\n+     * @param login Login.\n+     * @param addr Address.\n+     * @param perms Permissions.\n+     */\n+    public IgniteSecuritySubject(\n+        UUID id,\n+        SecuritySubjectType type,\n+        Object login,\n+        InetSocketAddress addr,\n+        SecurityPermissionSet perms\n+    ) {\n+        this.id = id;\n+        this.type = type;\n+        this.login = login;\n+        this.addr = addr;\n+        this.perms = perms;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public UUID id() {\n+        return id;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public SecuritySubjectType type() {\n+        return type;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Object login() {\n+        return login;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public InetSocketAddress address() {\n+        return addr;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public SecurityPermissionSet permissions() {\n+        return perms;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public String toString() {\n+        return S.toString(IgniteSecuritySubject.class, this);\n+    }\n+}"
  },
  {
    "sha": "d10b1f0d1b5aad0e2f78e9d959abbfb2002ef9d7",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -90,6 +90,7 @@\n import org.apache.ignite.internal.processors.GridProcessorAdapter;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.processors.affinity.GridAffinityAssignmentCache;\n+import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.cache.binary.CacheObjectBinaryProcessorImpl;\n import org.apache.ignite.internal.processors.cache.datastructures.CacheDataStructuresManager;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCache;\n@@ -219,6 +220,7 @@\n import static org.apache.ignite.internal.processors.cache.GridCacheUtils.isPersistentCache;\n import static org.apache.ignite.internal.processors.cache.ValidationOnNodeJoinUtils.validateHashIdResolvers;\n import static org.apache.ignite.internal.processors.cache.distributed.dht.topology.GridDhtLocalPartition.DFLT_CACHE_REMOVE_ENTRIES_TTL;\n+import static org.apache.ignite.internal.processors.security.SecurityUtils.ifInternalSecurity;\n import static org.apache.ignite.internal.util.IgniteUtils.doInParallel;\n \n /**\n@@ -628,7 +630,7 @@ private void cleanup(CacheConfiguration cfg, @Nullable Object rsrc, boolean near\n             log.debug(\"Started cache processor.\");\n \n         ctx.state().cacheProcessorStarted();\n-        ctx.authentication().cacheProcessorStarted();\n+        ifInternalSecurity(ctx, IgniteAuthenticationProcessor::cacheProcessorStarted);\n \n         ctx.systemView().registerFiltrableView(\n             CACHE_GRP_PAGE_LIST_VIEW,"
  },
  {
    "sha": "101fc5651201733d5e1d58a6715c51b9f209eb36",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -72,6 +72,7 @@\n import org.apache.ignite.internal.pagemem.wal.record.ExchangeRecord;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.processors.affinity.GridAffinityAssignmentCache;\n+import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.cache.CacheAffinityChangeMessage;\n import org.apache.ignite.internal.processors.cache.CacheGroupContext;\n import org.apache.ignite.internal.processors.cache.CacheGroupDescriptor;\n@@ -151,6 +152,7 @@\n import static org.apache.ignite.internal.processors.cache.ExchangeDiscoveryEvents.serverLeftEvent;\n import static org.apache.ignite.internal.processors.cache.distributed.dht.preloader.CachePartitionPartialCountersMap.PARTIAL_COUNTERS_MAP_SINCE;\n import static org.apache.ignite.internal.processors.cache.persistence.snapshot.IgniteSnapshotManager.isSnapshotOperation;\n+import static org.apache.ignite.internal.processors.security.SecurityUtils.ifInternalSecurity;\n import static org.apache.ignite.internal.util.IgniteUtils.doInParallel;\n import static org.apache.ignite.internal.util.IgniteUtils.doInParallelUninterruptibly;\n \n@@ -2547,7 +2549,7 @@ private String exchangeTimingsLogMessage(String header, List<String> timings) {\n             // Create and destroy caches and cache proxies.\n             cctx.cache().onExchangeDone(initialVersion(), exchActions, err);\n \n-            cctx.kernalContext().authentication().onActivate();\n+            ifInternalSecurity(cctx.kernalContext(), IgniteAuthenticationProcessor::onActivate);\n \n             Map<T2<Integer, Integer>, Long> localReserved = partHistSuppliers.getReservations(cctx.localNodeId());\n "
  },
  {
    "sha": "87af44dbd948de62a9bf4296f9415a0842d62885",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerAbstractConnectionContext.java",
    "status": "modified",
    "additions": 3,
    "deletions": 35,
    "changes": 38,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerAbstractConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerAbstractConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerAbstractConnectionContext.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -22,7 +22,6 @@\n import java.util.UUID;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.internal.GridKernalContext;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.authentication.IgniteAccessControlException;\n import org.apache.ignite.internal.processors.security.SecurityContext;\n import org.apache.ignite.internal.util.nio.GridNioSession;\n@@ -46,9 +45,6 @@\n     /** Connection ID. */\n     private long connId;\n \n-    /** Authorization context. */\n-    private AuthorizationContext authCtx;\n-\n     /** User attributes. */\n     protected Map<String, String> userAttrs;\n \n@@ -75,11 +71,6 @@ public GridKernalContext kernalContext() {\n         return secCtx;\n     }\n \n-    /** {@inheritDoc} */\n-    @Nullable @Override public AuthorizationContext authorizationContext() {\n-        return authCtx;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public long connectionId() {\n         return connId;\n@@ -88,33 +79,12 @@ public GridKernalContext kernalContext() {\n     /**\n      * Perform authentication.\n      *\n-     * @return Auth context.\n      * @throws IgniteCheckedException If failed.\n      */\n-    protected AuthorizationContext authenticate(GridNioSession ses, String user, String pwd)\n-        throws IgniteCheckedException {\n-        if (ctx.security().enabled())\n-            authCtx = authenticateExternal(ses, user, pwd).authorizationContext();\n-        else if (ctx.authentication().enabled()) {\n-            if (F.isEmpty(user))\n-                throw new IgniteAccessControlException(\"Unauthenticated sessions are prohibited.\");\n-\n-            authCtx = ctx.authentication().authenticate(user, pwd);\n+    protected void authenticate(GridNioSession ses, String user, String pwd) throws IgniteCheckedException {\n+        if (!ctx.security().enabled())\n+            return;\n \n-            if (authCtx == null)\n-                throw new IgniteAccessControlException(\"Unknown authentication error.\");\n-        }\n-        else\n-            authCtx = null;\n-\n-        return authCtx;\n-    }\n-\n-    /**\n-     * Do 3-rd party authentication.\n-     */\n-    private AuthenticationContext authenticateExternal(GridNioSession ses, String user, String pwd)\n-        throws IgniteCheckedException {\n         SecurityCredentials cred = new SecurityCredentials(user, pwd);\n \n         AuthenticationContext authCtx = new AuthenticationContext();\n@@ -133,8 +103,6 @@ private AuthenticationContext authenticateExternal(GridNioSession ses, String us\n                 String.format(\"The user name or password is incorrect [userName=%s]\", user)\n             );\n         }\n-\n-        return authCtx;\n     }\n \n     /** {@inheritDoc} */"
  },
  {
    "sha": "a541a059ae923837b884f8e4508449f6fa1575e7",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerConnectionContext.java",
    "status": "modified",
    "additions": 0,
    "deletions": 8,
    "changes": 8,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerConnectionContext.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -19,7 +19,6 @@\n \n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.internal.binary.BinaryReaderExImpl;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.security.SecurityContext;\n import org.apache.ignite.internal.util.nio.GridNioSession;\n import org.jetbrains.annotations.Nullable;\n@@ -74,13 +73,6 @@ void initializeFromHandshake(GridNioSession ses, ClientListenerProtocolVersion v\n      */\n     void onDisconnected();\n \n-    /**\n-     * Return connection authorization context.\n-     *\n-     * @return authorization context.\n-     */\n-    @Nullable AuthorizationContext authorizationContext();\n-\n     /**\n      * @return Security context.\n      */"
  },
  {
    "sha": "484019537e57228360b48e5b3ec4754e93a61a88",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerNioListener.java",
    "status": "modified",
    "additions": 0,
    "deletions": 10,
    "changes": 10,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerNioListener.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerNioListener.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerNioListener.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -35,7 +35,6 @@\n import org.apache.ignite.internal.binary.BinaryWriterExImpl;\n import org.apache.ignite.internal.binary.streams.BinaryHeapInputStream;\n import org.apache.ignite.internal.binary.streams.BinaryHeapOutputStream;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.authentication.IgniteAccessControlException;\n import org.apache.ignite.internal.processors.odbc.jdbc.JdbcConnectionContext;\n import org.apache.ignite.internal.processors.odbc.odbc.OdbcConnectionContext;\n@@ -193,18 +192,9 @@ public ClientListenerNioListener(GridKernalContext ctx, GridSpinBusyLock busyLoc\n \n             ClientListenerResponse resp;\n \n-            AuthorizationContext authCtx = connCtx.authorizationContext();\n-\n-            if (authCtx != null)\n-                AuthorizationContext.context(authCtx);\n-\n             try (OperationSecurityContext s = ctx.security().withContext(connCtx.securityContext())) {\n                 resp = handler.handle(req);\n             }\n-            finally {\n-                if (authCtx != null)\n-                    AuthorizationContext.clear();\n-            }\n \n             if (resp != null) {\n                 if (log.isDebugEnabled()) {"
  },
  {
    "sha": "e3b4516f693e1f5cde4f8dcec51d19b0bc8a62e7",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerProcessor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 6,
    "changes": 7,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/ClientListenerProcessor.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -39,7 +39,6 @@\n import org.apache.ignite.internal.managers.communication.GridIoPolicy;\n import org.apache.ignite.internal.managers.systemview.walker.ClientConnectionViewWalker;\n import org.apache.ignite.internal.processors.GridProcessorAdapter;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.jdbc.JdbcConnectionContext;\n import org.apache.ignite.internal.processors.odbc.odbc.OdbcConnectionContext;\n import org.apache.ignite.internal.util.GridSpinBusyLock;\n@@ -412,8 +411,6 @@ private static String clientConnectionDescription(\n         GridNioSession ses,\n         ClientListenerConnectionContext ctx\n     ) {\n-        AuthorizationContext authCtx = ctx.authorizationContext();\n-\n         StringBuilder sb = new StringBuilder();\n \n         if (ctx instanceof JdbcConnectionContext)\n@@ -434,9 +431,7 @@ else if (ctx instanceof OdbcConnectionContext)\n \n         String login;\n \n-        if (authCtx != null)\n-            login = authCtx.userName();\n-        else if (ctx.securityContext() != null)\n+        if (ctx.securityContext() != null)\n             login = \"@\" + ctx.securityContext().subject().login();\n         else\n             login = \"<anonymous>\";"
  },
  {
    "sha": "a209a09bc8a4637daeb0642be769c32dbcd435d6",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcConnectionContext.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcConnectionContext.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -26,7 +26,6 @@\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.binary.BinaryReaderExImpl;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerAbstractConnectionContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerMessageParser;\n import org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\n@@ -150,7 +149,6 @@ public JdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n         boolean skipReducerOnUpdate = false;\n \n         NestedTxMode nestedTxMode = NestedTxMode.DEFAULT;\n-        AuthorizationContext actx = null;\n \n         if (ver.compareTo(VER_2_1_5) >= 0)\n             lazyExec = reader.readBoolean();\n@@ -203,7 +201,7 @@ public JdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n                 throw new IgniteCheckedException(\"Handshake error: \" + e.getMessage(), e);\n             }\n \n-            actx = authenticate(ses, user, passwd);\n+            authenticate(ses, user, passwd);\n         }\n \n         protoCtx = new JdbcProtocolContext(ver, features, true);\n@@ -223,7 +221,7 @@ public JdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n \n         handler = new JdbcRequestHandler(busyLock, sender, maxCursors, distributedJoins, enforceJoinOrder,\n             collocated, replicatedOnly, autoCloseCursors, lazyExec, skipReducerOnUpdate, nestedTxMode,\n-            dataPageScanEnabled, updateBatchSize, actx, ver, this);\n+            dataPageScanEnabled, updateBatchSize, ver, this);\n \n         handler.start();\n     }"
  },
  {
    "sha": "970c602ad6c14c919f7e9e32d768af647445ab46",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcRequestHandler.java",
    "status": "modified",
    "additions": 0,
    "deletions": 12,
    "changes": 12,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcRequestHandler.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcRequestHandler.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/jdbc/JdbcRequestHandler.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -47,7 +47,6 @@\n import org.apache.ignite.internal.jdbc.thin.JdbcThinPartitionAwarenessMappingGroup;\n import org.apache.ignite.internal.processors.affinity.AffinityAssignment;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.bulkload.BulkLoadAckClientParameters;\n import org.apache.ignite.internal.processors.bulkload.BulkLoadProcessor;\n import org.apache.ignite.internal.processors.cache.DynamicCacheDescriptor;\n@@ -162,9 +161,6 @@\n     /** Protocol version. */\n     private final ClientListenerProtocolVersion protocolVer;\n \n-    /** Authentication context */\n-    private AuthorizationContext actx;\n-\n     /** Facade that hides transformations internal cache api entities -> jdbc metadata. */\n     private final JdbcMetadataInfo meta;\n \n@@ -185,7 +181,6 @@\n      * @param skipReducerOnUpdate Skip reducer on update flag.\n      * @param dataPageScanEnabled Enable scan data page mode.\n      * @param updateBatchSize Size of internal batch for DML queries.\n-     * @param actx Authentication context.\n      * @param protocolVer Protocol version.\n      * @param connCtx Jdbc connection context.\n      */\n@@ -203,7 +198,6 @@ public JdbcRequestHandler(\n         NestedTxMode nestedTxMode,\n         @Nullable Boolean dataPageScanEnabled,\n         @Nullable Integer updateBatchSize,\n-        AuthorizationContext actx,\n         ClientListenerProtocolVersion protocolVer,\n         JdbcConnectionContext connCtx\n     ) {\n@@ -236,7 +230,6 @@ public JdbcRequestHandler(\n         this.autoCloseCursors = autoCloseCursors;\n         this.nestedTxMode = nestedTxMode;\n         this.protocolVer = protocolVer;\n-        this.actx = actx;\n \n         log = connCtx.kernalContext().log(getClass());\n \n@@ -310,9 +303,6 @@ JdbcResponse doHandle(JdbcRequest req) {\n             return new JdbcResponse(IgniteQueryErrorCode.UNKNOWN,\n                 \"Failed to handle JDBC request because node is stopping.\");\n \n-        if (actx != null)\n-            AuthorizationContext.context(actx);\n-\n         JdbcResponse resp;\n         try {\n             switch (req.type()) {\n@@ -403,8 +393,6 @@ JdbcResponse doHandle(JdbcRequest req) {\n             return resp;\n         }\n         finally {\n-            AuthorizationContext.clear();\n-\n             busyLock.leaveBusy();\n         }\n     }"
  },
  {
    "sha": "dfc943c12345ed913ccda430f0c8898de12eda92",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcConnectionContext.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcConnectionContext.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -23,7 +23,6 @@\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.binary.BinaryReaderExImpl;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerAbstractConnectionContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerMessageParser;\n import org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\n@@ -153,7 +152,7 @@ public OdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n             nestedTxMode = NestedTxMode.fromByte(nestedTxModeVal);\n         }\n \n-        AuthorizationContext actx = authenticate(ses, user, passwd);\n+        authenticate(ses, user, passwd);\n \n         ClientListenerResponseSender sender = new ClientListenerResponseSender() {\n             @Override public void send(ClientListenerResponse resp) {\n@@ -167,7 +166,7 @@ public OdbcConnectionContext(GridKernalContext ctx, GridSpinBusyLock busyLock, l\n         };\n \n         handler = new OdbcRequestHandler(ctx, busyLock, sender, maxCursors, distributedJoins, enforceJoinOrder,\n-            replicatedOnly, collocated, lazy, skipReducerOnUpdate, actx, nestedTxMode, ver);\n+            replicatedOnly, collocated, lazy, skipReducerOnUpdate, nestedTxMode, ver);\n \n         parser = new OdbcMessageParser(ctx, ver);\n "
  },
  {
    "sha": "878834aa59023bd7f599f97b2d236bd4ece031e0",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcRequestHandler.java",
    "status": "modified",
    "additions": 3,
    "deletions": 13,
    "changes": 16,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcRequestHandler.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcRequestHandler.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/odbc/OdbcRequestHandler.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -28,7 +28,6 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n import javax.cache.configuration.Factory;\n-\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.IgniteLogger;\n@@ -38,7 +37,6 @@\n import org.apache.ignite.internal.IgniteInterruptedCheckedException;\n import org.apache.ignite.internal.binary.BinaryWriterExImpl;\n import org.apache.ignite.internal.binary.GridBinaryMarshaller;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.cache.mvcc.MvccUtils;\n import org.apache.ignite.internal.processors.cache.query.IgniteQueryErrorCode;\n import org.apache.ignite.internal.processors.cache.query.SqlFieldsQueryEx;\n@@ -113,9 +111,6 @@\n     /** Nested transaction behaviour. */\n     private final NestedTxMode nestedTxMode;\n \n-    /** Authentication context */\n-    private final AuthorizationContext actx;\n-\n     /** Client version. */\n     private ClientListenerProtocolVersion ver;\n \n@@ -141,7 +136,6 @@\n      * @param lazy Lazy flag.\n      * @param skipReducerOnUpdate Skip reducer on update flag.\n      * @param nestedTxMode Nested transaction mode.\n-     * @param actx Authentication context.\n      * @param ver Client protocol version.\n      */\n     public OdbcRequestHandler(\n@@ -155,7 +149,9 @@ public OdbcRequestHandler(\n         boolean collocated,\n         boolean lazy,\n         boolean skipReducerOnUpdate,\n-        AuthorizationContext actx, NestedTxMode nestedTxMode, ClientListenerProtocolVersion ver) {\n+        NestedTxMode nestedTxMode,\n+        ClientListenerProtocolVersion ver\n+    ) {\n         this.ctx = ctx;\n \n         Factory<GridWorker> orderedFactory = new Factory<GridWorker>() {\n@@ -180,7 +176,6 @@ public OdbcRequestHandler(\n         this.busyLock = busyLock;\n         this.sender = sender;\n         this.maxCursors = maxCursors;\n-        this.actx = actx;\n         this.nestedTxMode = nestedTxMode;\n         this.ver = ver;\n \n@@ -230,9 +225,6 @@ public ClientListenerResponse doHandle(OdbcRequest req) {\n             return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN,\n                 \"Failed to handle ODBC request because node is stopping: \" + req);\n \n-        if (actx != null)\n-            AuthorizationContext.context(actx);\n-\n         try {\n             switch (req.command()) {\n                 case QRY_EXEC:\n@@ -269,8 +261,6 @@ public ClientListenerResponse doHandle(OdbcRequest req) {\n             return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN, \"Unsupported ODBC request: \" + req);\n         }\n         finally {\n-            AuthorizationContext.clear();\n-\n             busyLock.leaveBusy();\n         }\n     }"
  },
  {
    "sha": "0f6212baa2339a7647b2a39f4912b732acff53bc",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -31,7 +31,6 @@\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.binary.BinaryReaderExImpl;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerAbstractConnectionContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerMessageParser;\n import org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\n@@ -214,9 +213,9 @@ public ClientProtocolContext currentProtocolContext() {\n             }\n         }\n \n-        AuthorizationContext authCtx = authenticate(ses, user, pwd);\n+        authenticate(ses, user, pwd);\n \n-        handler = new ClientRequestHandler(this, authCtx, currentProtocolContext);\n+        handler = new ClientRequestHandler(this, currentProtocolContext);\n         parser = new ClientMessageParser(this, currentProtocolContext);\n \n         this.ses = ses;"
  },
  {
    "sha": "e8a4068831d7a74737defbc0f90404f0e46d1ace",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientRequestHandler.java",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientRequestHandler.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientRequestHandler.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientRequestHandler.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -20,7 +20,6 @@\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.internal.binary.BinaryWriterExImpl;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\n import org.apache.ignite.internal.processors.odbc.ClientListenerRequest;\n import org.apache.ignite.internal.processors.odbc.ClientListenerRequestHandler;\n@@ -39,9 +38,6 @@\n     /** Client context. */\n     private final ClientConnectionContext ctx;\n \n-    /** Auth context. */\n-    private final AuthorizationContext authCtx;\n-\n     /** Protocol context. */\n     private ClientProtocolContext protocolCtx;\n \n@@ -52,14 +48,12 @@\n      * Constructor.\n      *\n      * @param ctx Kernal context.\n-     * @param authCtx Authentication context.\n      * @param protocolCtx Protocol context.\n      */\n-    ClientRequestHandler(ClientConnectionContext ctx, AuthorizationContext authCtx, ClientProtocolContext protocolCtx) {\n+    ClientRequestHandler(ClientConnectionContext ctx, ClientProtocolContext protocolCtx) {\n         assert ctx != null;\n \n         this.ctx = ctx;\n-        this.authCtx = authCtx;\n         this.protocolCtx = protocolCtx;\n         log = ctx.kernalContext().log(getClass());\n     }"
  },
  {
    "sha": "d0746aeac722c720bf7fc0f86a14a431168efa8a",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java",
    "status": "modified",
    "additions": 22,
    "deletions": 52,
    "changes": 74,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -43,7 +43,6 @@\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.IgniteInternalFuture;\n import org.apache.ignite.internal.processors.GridProcessorAdapter;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.rest.client.message.GridClientTaskResultBean;\n import org.apache.ignite.internal.processors.rest.handlers.GridRestCommandHandler;\n import org.apache.ignite.internal.processors.rest.handlers.auth.AuthenticationCommandHandler;\n@@ -250,10 +249,11 @@ else if (!(req instanceof GridRestAuthenticationRequest) && startLatch.getCount(\n         if (log.isDebugEnabled())\n             log.debug(\"Received request from client: \" + req);\n \n-        boolean authenticationEnabled = ctx.authentication().enabled();\n+        SecurityContext secCtx = null;\n+\n         boolean securityEnabled = ctx.security().enabled();\n \n-        if (authenticationEnabled || securityEnabled) {\n+        if (securityEnabled) {\n             Session ses;\n \n             try {\n@@ -275,62 +275,35 @@ else if (!(req instanceof GridRestAuthenticationRequest) && startLatch.getCount(\n                 log.debug(\"Next clientId and sessionToken were extracted according to request: \" +\n                     \"[clientId=\" + req.clientId() + \", sesTok=\" + Arrays.toString(req.sessionToken()) + \"]\");\n \n-            if (securityEnabled) {\n-                SecurityContext secCtx0 = ses.secCtx;\n-\n-                try {\n-                    if (secCtx0 == null || ses.isTokenExpired(sesTokTtl))\n-                        ses.secCtx = secCtx0 = authenticate(req, ses);\n+            secCtx = ses.secCtx;\n \n-                    try (OperationSecurityContext s = ctx.security().withContext(secCtx0)) {\n-                        authorize(req);\n-                    }\n-                }\n-                catch (SecurityException e) {\n-                    assert secCtx0 != null;\n+            try {\n+                if (secCtx == null || ses.isTokenExpired(sesTokTtl))\n+                    ses.secCtx = secCtx = authenticate(req, ses);\n \n-                    return new GridFinishedFuture<>(new GridRestResponse(STATUS_SECURITY_CHECK_FAILED, e.getMessage()));\n-                }\n-                catch (IgniteCheckedException e) {\n-                    return new GridFinishedFuture<>(new GridRestResponse(STATUS_AUTH_FAILED, e.getMessage()));\n+                try (OperationSecurityContext s = ctx.security().withContext(secCtx)) {\n+                    authorize(req);\n                 }\n             }\n-            else {\n-                AuthorizationContext authCtx0 = ses.authCtx;\n-\n-                try {\n-                    if (authCtx0 == null) {\n-                        SecurityCredentials creds = credentials(req);\n-\n-                        String login = null;\n-\n-                        if (creds.getLogin() instanceof String)\n-                            login = (String)creds.getLogin();\n-\n-                        String pwd = null;\n+            catch (SecurityException e) {\n+                assert secCtx != null;\n \n-                        if (creds.getPassword() instanceof String)\n-                            pwd = (String)creds.getPassword();\n-\n-                        if (F.isEmpty(login) || F.isEmpty(pwd))\n-                            throw new IgniteAuthenticationException(\"The user name or password is incorrect\");\n-\n-                        ses.authCtx = ctx.authentication().authenticate(login, pwd);\n-                    }\n-\n-                    req.authorizationContext(ses.authCtx);\n-                }\n-                catch (IgniteCheckedException e) {\n-                    return new GridFinishedFuture<>(new GridRestResponse(STATUS_AUTH_FAILED, e.getMessage()));\n-                }\n+                return new GridFinishedFuture<>(new GridRestResponse(STATUS_SECURITY_CHECK_FAILED, e.getMessage()));\n+            }\n+            catch (IgniteCheckedException e) {\n+                return new GridFinishedFuture<>(new GridRestResponse(STATUS_AUTH_FAILED, e.getMessage()));\n             }\n         }\n \n         interceptRequest(req);\n \n         GridRestCommandHandler hnd = handlers.get(req.command());\n \n-        IgniteInternalFuture<GridRestResponse> res = hnd == null ? null : hnd.handleAsync(req);\n+        IgniteInternalFuture<GridRestResponse> res;\n+\n+        try (OperationSecurityContext s = ctx.security().withContext(secCtx)) {\n+            res = hnd == null ? null : hnd.handleAsync(req);\n+        }\n \n         if (res == null)\n             return new GridFinishedFuture<>(\n@@ -384,7 +357,7 @@ else if (!(req instanceof GridRestAuthenticationRequest) && startLatch.getCount(\n \n                 assert res != null;\n \n-                if ((authenticationEnabled || securityEnabled) && !failed)\n+                if (securityEnabled && !failed)\n                     res.sessionTokenBytes(req.sessionToken());\n \n                 interceptResponse(res, req);\n@@ -421,7 +394,7 @@ private Session session(final GridRestRequest req) throws IgniteCheckedException\n         while (true) {\n             if (F.isEmpty(sesTok) && clientId == null) {\n                 // TODO: In IGNITE 3.0 we should check credentials only for AUTHENTICATE command.\n-                if (ctx.authentication().enabled() && req.command() != AUTHENTICATE && req.credentials() == null)\n+                if (ctx.security().enabled() && req.command() != AUTHENTICATE && req.credentials() == null)\n                     throw new IgniteAuthenticationException(\"Failed to handle request - session token not found or invalid\");\n \n                 Session ses = Session.random();\n@@ -1079,9 +1052,6 @@ private void startProtocol(GridRestProtocol proto) throws IgniteCheckedException\n         /** Security context. */\n         private volatile SecurityContext secCtx;\n \n-        /** Authorization context. */\n-        private volatile AuthorizationContext authCtx;\n-\n         /** Credentials that can be used for security token invalidation.*/\n         private volatile SecurityCredentials creds;\n "
  },
  {
    "sha": "12ab16ad3c214766012c723edd82b8f165d5a3f3",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/user/UserActionCommandHandler.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/user/UserActionCommandHandler.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/user/UserActionCommandHandler.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/user/UserActionCommandHandler.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -20,13 +20,13 @@\n import java.util.Collection;\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.IgniteInternalFuture;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.rest.GridRestCommand;\n import org.apache.ignite.internal.processors.rest.GridRestResponse;\n import org.apache.ignite.internal.processors.rest.handlers.GridRestCommandHandlerAdapter;\n import org.apache.ignite.internal.processors.rest.request.GridRestRequest;\n import org.apache.ignite.internal.processors.rest.request.RestUserActionRequest;\n+import org.apache.ignite.internal.processors.security.SecurityUtils;\n import org.apache.ignite.internal.util.future.GridFinishedFuture;\n import org.apache.ignite.internal.util.typedef.internal.U;\n \n@@ -65,9 +65,7 @@ public UserActionCommandHandler(GridKernalContext ctx) {\n         try {\n             GridRestCommand cmd = req.command();\n \n-            IgniteAuthenticationProcessor authentication = ctx.authentication();\n-\n-            AuthorizationContext.context(req.authorizationContext());\n+            IgniteAuthenticationProcessor authentication = SecurityUtils.internalSecurity(ctx);\n \n             switch (cmd) {\n                 case ADD_USER:"
  },
  {
    "sha": "b484d223931d9cacdb6a153cf543622dc252803c",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/GridRestRequest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 19,
    "changes": 19,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/GridRestRequest.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/GridRestRequest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/GridRestRequest.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -21,11 +21,9 @@\n import java.security.cert.Certificate;\n import java.util.Map;\n import java.util.UUID;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.rest.GridRestCommand;\n import org.apache.ignite.internal.util.tostring.GridToStringExclude;\n import org.apache.ignite.internal.util.typedef.internal.S;\n-import org.jetbrains.annotations.Nullable;\n \n /**\n  * Grid command request.\n@@ -50,9 +48,6 @@\n     /** Command. */\n     private GridRestCommand cmd;\n \n-    /** */\n-    private AuthorizationContext authCtx;\n-\n     /** User attributes. */\n     Map<String, String> userAttrs;\n \n@@ -155,20 +150,6 @@ public void address(InetSocketAddress addr) {\n         this.addr = addr;\n     }\n \n-    /**\n-     * @return Authorization context.\n-     */\n-    @Nullable public AuthorizationContext authorizationContext() {\n-        return authCtx;\n-    }\n-\n-    /**\n-     * @param authCtx Authorization context.\n-     */\n-    public void authorizationContext(AuthorizationContext authCtx) {\n-        this.authCtx = authCtx;\n-    }\n-\n     /**\n      * Gets user attributes.\n      *"
  },
  {
    "sha": "6b57cad4bb195dcc3bd46eb6bf51fd331eec19e7",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/OperationSecurityContext.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/security/OperationSecurityContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/security/OperationSecurityContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/security/OperationSecurityContext.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -31,7 +31,7 @@\n      * @param proc Ignite Security.\n      * @param secCtx Security context.\n      */\n-    OperationSecurityContext(IgniteSecurity proc, SecurityContext secCtx) {\n+    public OperationSecurityContext(IgniteSecurity proc, SecurityContext secCtx) {\n         assert proc != null;\n         assert secCtx != null || !proc.enabled();\n "
  },
  {
    "sha": "6b5142bc7115093455d69b6eedf3bf8a3bedd23f",
    "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/security/SecurityUtils.java",
    "status": "modified",
    "additions": 20,
    "deletions": 0,
    "changes": 20,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/security/SecurityUtils.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/internal/processors/security/SecurityUtils.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/security/SecurityUtils.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -38,13 +38,15 @@\n import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Consumer;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.IgniteSystemProperties;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.internal.GridInternalWrapper;\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.IgniteNodeAttributes;\n+import org.apache.ignite.internal.processors.authentication.IgniteAuthenticationProcessor;\n import org.apache.ignite.internal.processors.security.sandbox.IgniteDomainCombiner;\n import org.apache.ignite.internal.processors.security.sandbox.IgniteSandbox;\n import org.apache.ignite.internal.util.typedef.F;\n@@ -285,4 +287,22 @@ public SandboxInvocationHandler(IgniteSandbox sandbox, Object original) {\n             });\n         }\n     }\n+\n+    /** */\n+    public static void ifInternalSecurity(GridKernalContext ctx, Consumer<IgniteAuthenticationProcessor> consumer) {\n+        IgniteSecurity security = ctx.security();\n+\n+        if (security instanceof IgniteAuthenticationProcessor)\n+            consumer.accept((IgniteAuthenticationProcessor)security);\n+    }\n+\n+    /** */\n+    public static IgniteAuthenticationProcessor internalSecurity(GridKernalContext ctx) {\n+        IgniteSecurity security = ctx.security();\n+\n+        if (!(security instanceof IgniteAuthenticationProcessor))\n+            throw new IgniteException();\n+\n+        return (IgniteAuthenticationProcessor)security;\n+    }\n }"
  },
  {
    "sha": "e8b96561d4dcc7414769059f50c62456cbf805bf",
    "filename": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ClientConnectionView.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ClientConnectionView.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ClientConnectionView.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ClientConnectionView.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -18,13 +18,13 @@\n package org.apache.ignite.spi.systemview.view;\n \n import java.net.InetSocketAddress;\n-import org.apache.ignite.internal.processors.authentication.AuthorizationContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerConnectionContext;\n import org.apache.ignite.internal.processors.odbc.ClientListenerProtocolVersion;\n import org.apache.ignite.internal.processors.odbc.ClientListenerRequestHandler;\n import org.apache.ignite.internal.processors.odbc.jdbc.JdbcConnectionContext;\n import org.apache.ignite.internal.processors.odbc.odbc.OdbcConnectionContext;\n import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.security.SecurityContext;\n import org.apache.ignite.internal.util.nio.GridNioSession;\n import org.jetbrains.annotations.Nullable;\n \n@@ -84,9 +84,9 @@ public String user() {\n         if (ctx == null)\n             return null;\n \n-        AuthorizationContext authCtx = ctx.authorizationContext();\n+        SecurityContext secCtx = ctx.securityContext();\n \n-        return authCtx == null ? null : authCtx.userName();\n+        return secCtx == null ? null : (String)secCtx.subject().login();\n     }\n \n     /** @return Protocol version. */"
  },
  {
    "sha": "db1ada798e77c08f6b618fb6c6a22d623c7f28c9",
    "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/CommandProcessor.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/apache/ignite/blob/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/CommandProcessor.java",
    "raw_url": "https://github.com/apache/ignite/raw/8e869899e94d14195fe5b03f5530eb3d749018f7/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/CommandProcessor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/CommandProcessor.java?ref=8e869899e94d14195fe5b03f5530eb3d749018f7",
    "patch": "@@ -136,6 +136,7 @@\n import static org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.tx;\n import static org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.txStart;\n import static org.apache.ignite.internal.processors.query.h2.sql.GridSqlQueryParser.PARAM_WRAP_VALUE;\n+import static org.apache.ignite.internal.processors.security.SecurityUtils.internalSecurity;\n \n /**\n  * Processor responsible for execution of all non-SELECT and non-DML commands.\n@@ -657,17 +658,17 @@ else if (cmd instanceof SqlAlterTableCommand) {\n             else if (cmd instanceof SqlCreateUserCommand) {\n                 SqlCreateUserCommand addCmd = (SqlCreateUserCommand)cmd;\n \n-                ctx.authentication().addUser(addCmd.userName(), addCmd.password());\n+                internalSecurity(ctx).addUser(addCmd.userName(), addCmd.password());\n             }\n             else if (cmd instanceof SqlAlterUserCommand) {\n                 SqlAlterUserCommand altCmd = (SqlAlterUserCommand)cmd;\n \n-                ctx.authentication().updateUser(altCmd.userName(), altCmd.password());\n+                internalSecurity(ctx).updateUser(altCmd.userName(), altCmd.password());\n             }\n             else if (cmd instanceof SqlDropUserCommand) {\n                 SqlDropUserCommand dropCmd = (SqlDropUserCommand)cmd;\n \n-                ctx.authentication().removeUser(dropCmd.userName());\n+                internalSecurity(ctx).removeUser(dropCmd.userName());\n             }\n             else\n                 throw new IgniteSQLException(\"Unsupported DDL operation: \" + sql,"
  }
]
