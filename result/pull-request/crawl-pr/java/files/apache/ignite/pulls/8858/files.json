[
  {
    "sha": "de98cb48414ba0245a90549c5164da07fc24139b",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExchangeServiceImpl.java",
    "status": "modified",
    "additions": 69,
    "deletions": 12,
    "changes": 81,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExchangeServiceImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExchangeServiceImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExchangeServiceImpl.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -17,10 +17,15 @@\n \n package org.apache.ignite.internal.processors.query.calcite.exec;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Set;\n import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n import com.google.common.collect.ImmutableMap;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n@@ -40,6 +45,7 @@\n import org.apache.ignite.internal.processors.query.calcite.util.AbstractService;\n import org.apache.ignite.internal.processors.query.calcite.util.Commons;\n import org.apache.ignite.internal.util.typedef.F;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n \n /**\n  *\n@@ -116,12 +122,18 @@ public MessageService messageService() {\n \n     /** {@inheritDoc} */\n     @Override public void closeOutbox(UUID nodeId, UUID qryId, long fragmentId, long exchangeId) throws IgniteCheckedException {\n-        messageService().send(nodeId, new OutboxCloseMessage(qryId, fragmentId, exchangeId));\n+        if (messageService().localNode().equals(nodeId))\n+            onMessage(nodeId, new OutboxCloseMessage(qryId, fragmentId, exchangeId));\n+        else\n+            messageService().send(nodeId, new OutboxCloseMessage(qryId, fragmentId, exchangeId));\n     }\n \n     /** {@inheritDoc} */\n     @Override public void closeInbox(UUID nodeId, UUID qryId, long fragmentId, long exchangeId) throws IgniteCheckedException {\n-        messageService().send(nodeId, new InboxCloseMessage(qryId, fragmentId, exchangeId));\n+        if (messageService().localNode().equals(nodeId))\n+            onMessage(nodeId, new InboxCloseMessage(qryId, fragmentId, exchangeId));\n+        else\n+            messageService().send(nodeId, new InboxCloseMessage(qryId, fragmentId, exchangeId));\n     }\n \n     /** {@inheritDoc} */\n@@ -157,13 +169,31 @@ public MessageService messageService() {\n     /** */\n     protected void onMessage(UUID nodeId, InboxCloseMessage msg) {\n         Collection<Inbox<?>> inboxes = mailboxRegistry().inboxes(msg.queryId(), msg.fragmentId(), msg.exchangeId());\n-        if (!F.isEmpty(inboxes)) {\n-            for (Inbox<?> inbox : inboxes) {\n-                inbox.context().cancel();\n-                inbox.context().execute(inbox::close, inbox::onError);\n+\n+        List<Future<?>> futs = new ArrayList<>(inboxes.size());\n+\n+        Set<ExecutionContext<?>> ctxs = new HashSet<>();\n+\n+        for (Inbox<?> inbox : inboxes) {\n+            Future<?> fut = inbox.context().submit(inbox::close, inbox::onError);\n+\n+            futs.add(fut);\n+\n+            ctxs.add(inbox.context());\n+        }\n+\n+        for (Future<?> fut : futs) {\n+            try {\n+                fut.get();\n+            }\n+            catch (InterruptedException | ExecutionException e) {\n+                Thread.currentThread().interrupt();\n+\n+                U.warn(log, e);\n             }\n         }\n-        else if (log.isDebugEnabled()) {\n+\n+        if (log.isDebugEnabled() && F.isEmpty(inboxes)) {\n             log.debug(\"Stale inbox cancel message received: [\" +\n                 \"nodeId=\" + nodeId + \", \" +\n                 \"queryId=\" + msg.queryId() + \", \" +\n@@ -175,13 +205,40 @@ else if (log.isDebugEnabled()) {\n     /** */\n     protected void onMessage(UUID nodeId, OutboxCloseMessage msg) {\n         Collection<Outbox<?>> outboxes = mailboxRegistry().outboxes(msg.queryId(), msg.fragmentId(), msg.exchangeId());\n-        if (!F.isEmpty(outboxes)) {\n-            for (Outbox<?> outbox : outboxes) {\n-                outbox.context().cancel();\n-                outbox.context().execute(outbox::close, outbox::onError);\n+\n+        List<Future<?>> futs = new ArrayList<>(outboxes.size());\n+\n+        Set<ExecutionContext<?>> ctxs = new HashSet<>();\n+\n+        for (Outbox<?> outbox : outboxes) {\n+            Future<?> fut = outbox.context().submit(outbox::close, outbox::onError);\n+\n+            futs.add(fut);\n+\n+            ctxs.add(outbox.context());\n+        }\n+\n+        for (Future<?> fut : futs) {\n+            try {\n+                fut.get();\n+            }\n+            catch (InterruptedException | ExecutionException e) {\n+                Thread.currentThread().interrupt();\n+\n+                U.warn(log, e);\n             }\n         }\n-        else if (log.isDebugEnabled()) {\n+\n+        try {\n+            closeInbox(nodeId, msg.queryId(), msg.fragmentId(), msg.exchangeId());\n+        }\n+        catch (IgniteCheckedException e) {\n+            U.warn(log, \"Failed to send cancel message.\", e);\n+        }\n+\n+        ctxs.forEach(ExecutionContext::cancel);\n+\n+        if (log.isDebugEnabled() && F.isEmpty(outboxes)) {\n             log.debug(\"Stale oubox cancel message received: [\" +\n                 \"nodeId=\" + nodeId + \", \" +\n                 \"queryId=\" + msg.queryId() + \", \" +"
  },
  {
    "sha": "01df36c4801c3a373385dc4a070426f342495b7d",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExecutionContext.java",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExecutionContext.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExecutionContext.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExecutionContext.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -21,6 +21,7 @@\n import java.util.Map;\n import java.util.TimeZone;\n import java.util.UUID;\n+import java.util.concurrent.Future;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Consumer;\n \n@@ -242,6 +243,25 @@ public void execute(RunnableX task, Consumer<Throwable> onError) {\n         });\n     }\n \n+    /**\n+     * Submits a Runnable task for execution and returns a Future\n+     * representing that task. The Future's {@code get} method will\n+     * return {@code null} upon <em>successful</em> completion.\n+     *\n+     * @param task the task to submit.\n+     * @return a Future representing pending task\n+     */\n+    public Future<?> submit(RunnableX task, Consumer<Throwable> onError) {\n+        return executor.submit(qryId, fragmentId(), () -> {\n+            try {\n+                task.run();\n+            }\n+            catch (Throwable t) {\n+                onError.accept(t);\n+            }\n+        });\n+    }\n+\n     /** */\n     @FunctionalInterface\n     public interface RunnableX {\n@@ -258,6 +278,7 @@ public boolean cancel() {\n         return !cancelFlag.get() && cancelFlag.compareAndSet(false, true);\n     }\n \n+    /** */\n     public boolean isCancelled() {\n         return cancelFlag.get();\n     }"
  },
  {
    "sha": "9cd26ffac096b7bbb37489b186440b17b68e7fe7",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExecutionServiceImpl.java",
    "status": "modified",
    "additions": 16,
    "deletions": 6,
    "changes": 22,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExecutionServiceImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExecutionServiceImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/ExecutionServiceImpl.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -951,7 +951,7 @@ private RemoteFragmentKey(UUID nodeId, long fragmentId) {\n         private final Set<RemoteFragmentKey> waiting;\n \n         /** */\n-        private QueryState state;\n+        private volatile QueryState state;\n \n         /** */\n         private QueryInfo(ExecutionContext<Row> ctx, MultiStepPlan plan, Node<Row> root) {\n@@ -1001,23 +1001,21 @@ private void tryClose() {\n                 if (state == QueryState.RUNNING)\n                     state0 = state = QueryState.CLOSING;\n \n-                // 1) Cancel local fragment\n-                ctx.cancel();\n-\n-                // 2) close local fragment\n+                // 1) close local fragment\n                 root.closeInternal();\n \n                 if (state == QueryState.CLOSING && waiting.isEmpty())\n                     state0 = state = QueryState.CLOSED;\n             }\n \n             if (state0 == QueryState.CLOSED) {\n-                // 3) unregister runing query\n+                // 2) unregister runing query\n                 running.remove(ctx.queryId());\n \n                 // 4) close remote fragments\n                 IgniteException wrpEx = null;\n \n+                // 3) close remote fragments\n                 for (UUID nodeId : remotes) {\n                     try {\n                         exchangeService().closeOutbox(nodeId, ctx.queryId(), -1, -1);\n@@ -1030,6 +1028,18 @@ private void tryClose() {\n                     }\n                 }\n \n+                if (!remotes.contains(messageService().localNode())) {\n+                    try {\n+                        exchangeService().closeInbox(messageService().localNode(), ctx.queryId(), -1, -1);\n+                    }\n+                    catch (IgniteCheckedException e) {\n+                        U.warn(log, \"Failed to send cancel message. [nodeId=\" + messageService().localNode() + ']', e);\n+                    }\n+                }\n+\n+                // 4) Cancel local fragment\n+                ctx.cancel();\n+\n                 if (wrpEx != null)\n                     throw wrpEx;\n             }"
  },
  {
    "sha": "aa03ea508376ec4ef0185c832ba18b401adcc503",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/MailboxRegistryImpl.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/MailboxRegistryImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/MailboxRegistryImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/MailboxRegistryImpl.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -33,6 +33,7 @@\n import org.apache.ignite.internal.processors.query.calcite.exec.rel.Mailbox;\n import org.apache.ignite.internal.processors.query.calcite.exec.rel.Outbox;\n import org.apache.ignite.internal.processors.query.calcite.util.AbstractService;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n import org.jetbrains.annotations.Nullable;\n \n /**\n@@ -121,6 +122,7 @@ public MailboxRegistryImpl(GridKernalContext ctx) {\n     @Override public Collection<Inbox<?>> inboxes(@Nullable UUID qryId, long fragmentId, long exchangeId) {\n         return remotes.values().stream()\n             .filter(makeFilter(qryId, fragmentId, exchangeId))\n+            .filter(node -> !node.isClosed())\n             .collect(Collectors.toList());\n     }\n \n@@ -198,5 +200,10 @@ private MailboxKey(UUID qryId, long exchangeId) {\n             res = 31 * res + (int) (exchangeId ^ (exchangeId >>> 32));\n             return res;\n         }\n+\n+        /** {@inheritDoc} */\n+        @Override public String toString() {\n+            return S.toString(MailboxKey.class, this);\n+        }\n     }\n }"
  },
  {
    "sha": "bc06d0f5d4b446b3258b54ad07a5e1671b0bb206",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/QueryTaskExecutor.java",
    "status": "modified",
    "additions": 13,
    "deletions": 0,
    "changes": 13,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/QueryTaskExecutor.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/QueryTaskExecutor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/QueryTaskExecutor.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -18,6 +18,7 @@\n package org.apache.ignite.internal.processors.query.calcite.exec;\n \n import java.util.UUID;\n+import java.util.concurrent.Future;\n \n import org.apache.ignite.internal.processors.query.calcite.util.Service;\n \n@@ -33,4 +34,16 @@\n      * @param qryTask Query task.\n      */\n     void execute(UUID qryId, long fragmentId, Runnable qryTask);\n+\n+    /**\n+     * Submits a Runnable task for execution and returns a Future\n+     * representing that task. The Future's {@code get} method will\n+     * return {@code null} upon <em>successful</em> completion.\n+     *\n+     * @param qryId query Id.\n+     * @param fragmentId  fragment Id.\n+     * @param qryTask the task to submit.\n+     * @return a Future representing pending task\n+     */\n+    Future<?> submit(UUID qryId, long fragmentId, Runnable qryTask);\n }"
  },
  {
    "sha": "7569db70e8c9cd2a6ca9f222e3fff34a42f4cf8a",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/QueryTaskExecutorImpl.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/QueryTaskExecutorImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/QueryTaskExecutorImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/QueryTaskExecutorImpl.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -19,6 +19,7 @@\n \n import java.util.Objects;\n import java.util.UUID;\n+import java.util.concurrent.Future;\n \n import org.apache.ignite.failure.FailureContext;\n import org.apache.ignite.failure.FailureType;\n@@ -84,6 +85,11 @@ public void exceptionHandler(Thread.UncaughtExceptionHandler eHnd) {\n         );\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public Future<?> submit(UUID qryId, long fragmentId, Runnable qryTask) {\n+        return stripedThreadPoolExecutor.submit(qryTask, hash(qryId, fragmentId));\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public void onStart(GridKernalContext ctx) {\n         exceptionHandler(ctx.uncaughtExceptionHandler());"
  },
  {
    "sha": "4896e1815a3b889878e45948136c569b6a99e5d2",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/AbstractNode.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/AbstractNode.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/AbstractNode.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/AbstractNode.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -173,7 +173,7 @@ protected void onErrorInternal(Throwable e) {\n     /**\n      * @return {@code true} if the subtree is canceled.\n      */\n-    protected boolean isClosed() {\n+    public boolean isClosed() {\n         return closed;\n     }\n "
  },
  {
    "sha": "f7342f831c82a8663ac90fce71f2f2c26785efe3",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/Inbox.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/Inbox.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/Inbox.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/Inbox.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.ignite.internal.processors.query.calcite.exec.rel;\n \n+import java.nio.Buffer;\n import java.util.Collection;\n import java.util.Comparator;\n import java.util.HashMap;\n@@ -32,6 +33,7 @@\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.internal.cluster.ClusterTopologyCheckedException;\n import org.apache.ignite.internal.processors.query.calcite.exec.ExchangeService;\n+import org.apache.ignite.internal.processors.query.calcite.exec.ExecutionCancelledException;\n import org.apache.ignite.internal.processors.query.calcite.exec.ExecutionContext;\n import org.apache.ignite.internal.processors.query.calcite.exec.MailboxRegistry;\n import org.jetbrains.annotations.NotNull;"
  },
  {
    "sha": "c86af1c7ab16029eebf6c0b9cc5022d966f163ee",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/Outbox.java",
    "status": "modified",
    "additions": 13,
    "deletions": 2,
    "changes": 15,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/Outbox.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/Outbox.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/Outbox.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.ignite.internal.processors.query.calcite.exec.rel;\n \n+import java.nio.Buffer;\n import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -36,6 +37,7 @@\n import org.apache.ignite.internal.util.typedef.F;\n import org.apache.ignite.internal.util.typedef.X;\n import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * A part of exchange.\n@@ -174,8 +176,12 @@ public void init() {\n         registry.unregister(this);\n \n         // Send cancel message for the Inbox to close Inboxes created by batch message race.\n-        for (UUID node : dest.targets())\n-            getOrCreateBuffer(node).close();\n+        for (UUID node : dest.targets()) {\n+            Buffer buf = getBuffer(node);\n+\n+            if (buf != null)\n+                buf.close();\n+        }\n     }\n \n     /** {@inheritDoc} */\n@@ -221,6 +227,11 @@ private Buffer getOrCreateBuffer(UUID nodeId) {\n         return nodeBuffers.computeIfAbsent(nodeId, this::createBuffer);\n     }\n \n+    /** */\n+    private @Nullable Buffer getBuffer(UUID nodeId) {\n+        return nodeBuffers.get(nodeId);\n+    }\n+\n     /** */\n     private Buffer createBuffer(UUID nodeId) {\n         return new Buffer(nodeId);"
  },
  {
    "sha": "1169a054c72bd866af729e798a5c6bf22dc890a4",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/RootNode.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/RootNode.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/RootNode.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/RootNode.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -115,7 +115,7 @@ public UUID queryId() {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected boolean isClosed() {\n+    @Override public boolean isClosed() {\n         return closed;\n     }\n "
  },
  {
    "sha": "17690c3e0bd080f867e60f29171d7b8ea34031d0",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/ScanNode.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/ScanNode.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/ScanNode.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/ScanNode.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -125,6 +125,7 @@ private void push() throws Exception {\n             it = null;\n \n             requested = 0;\n+\n             downstream().end();\n         }\n     }"
  },
  {
    "sha": "06ee1a2f19a431a3bdbdcad948a8c10851278cd3",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/SortNode.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/SortNode.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/SortNode.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/exec/rel/SortNode.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -20,6 +20,7 @@\n import java.util.PriorityQueue;\n \n import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.ignite.internal.processors.query.calcite.exec.ExecutionCancelledException;\n import org.apache.ignite.internal.processors.query.calcite.exec.ExecutionContext;\n import org.apache.ignite.internal.util.typedef.F;\n \n@@ -115,7 +116,7 @@ private void flush() throws Exception {\n \n         inLoop = true;\n         try {\n-            while (requested > 0 && !rows.isEmpty()) {\n+            while (requested > 0 && !rows.isEmpty() && !isClosed()) {\n                 checkState();\n \n                 requested--;"
  },
  {
    "sha": "251589cb50cb4a442ba4b39f7e216dff632d8374",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/message/MessageService.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/message/MessageService.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/message/MessageService.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/message/MessageService.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -48,4 +48,9 @@\n      * @param type Message type.\n      */\n     void register(MessageListener lsnr, MessageType type);\n+\n+    /**\n+     * @return Local node Id.\n+     */\n+    UUID localNode();\n }"
  },
  {
    "sha": "95061ca6ef90424fbde806e40a70e04820b6ba6e",
    "filename": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/message/MessageServiceImpl.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/message/MessageServiceImpl.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/message/MessageServiceImpl.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/message/MessageServiceImpl.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -213,6 +213,11 @@ public FailureProcessor failureProcessor() {\n         assert old == null : old;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public UUID localNode() {\n+        return localNodeId;\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public boolean alive(UUID nodeId) {\n         try {"
  },
  {
    "sha": "b57b9cb4a69b18adc9df2bf28ed34e3854496630",
    "filename": "modules/calcite/src/test/java/org/apache/ignite/internal/processors/query/calcite/CalciteQueryProcessorTest.java",
    "status": "modified",
    "additions": 53,
    "deletions": 4,
    "changes": 57,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/test/java/org/apache/ignite/internal/processors/query/calcite/CalciteQueryProcessorTest.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/test/java/org/apache/ignite/internal/processors/query/calcite/CalciteQueryProcessorTest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/test/java/org/apache/ignite/internal/processors/query/calcite/CalciteQueryProcessorTest.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -25,6 +25,7 @@\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+import static org.apache.ignite.testframework.GridTestUtils.waitForCondition;\n import com.google.common.collect.ImmutableMap;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n@@ -36,11 +37,19 @@\n import org.apache.ignite.cache.query.SqlFieldsQuery;\n import org.apache.ignite.cache.query.annotations.QuerySqlField;\n import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.IgniteInterruptedCheckedException;\n import org.apache.ignite.internal.processors.query.QueryEngine;\n+import org.apache.ignite.internal.processors.query.calcite.exec.MailboxRegistryImpl;\n+import org.apache.ignite.internal.processors.query.calcite.exec.rel.Inbox;\n+import org.apache.ignite.internal.processors.query.calcite.exec.rel.Outbox;\n import org.apache.ignite.internal.processors.query.calcite.util.Commons;\n import org.apache.ignite.internal.util.typedef.F;\n import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.ListeningTestLogger;\n+import org.apache.ignite.testframework.LogListener;\n import org.apache.ignite.testframework.junits.WithSystemProperty;\n import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n import org.junit.Test;\n@@ -53,6 +62,19 @@\n     /** */\n     private static IgniteEx client;\n \n+    private ListeningTestLogger listeningLog = new ListeningTestLogger(log);\n+\n+    static LogListener lsnr = LogListener.matches(s ->\n+        s.contains(\"Execution is cancelled\") ||\n+        s.contains(\"NullPointer\") ||\n+        s.contains(\"AssertionError\")).build();\n+\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        listeningLog.registerListener(lsnr);\n+\n+        return super.getConfiguration(igniteInstanceName).setGridLogger(listeningLog);\n+    }\n+\n     /** {@inheritDoc} */\n     @Override protected void beforeTestsStarted() throws Exception {\n         startGrids(5);\n@@ -131,9 +153,11 @@ public void testCountWithJoin() throws Exception {\n             .setCacheMode(CacheMode.REPLICATED)\n         );\n \n-        Map<Integer, RISK> mRisk = new HashMap<>(65000);\n+        int numRiskRows = 65_000;\n \n-        for (int i = 0; i < 65000; i++)\n+        Map<Integer, RISK> mRisk = new HashMap<>(numRiskRows);\n+\n+        for (int i = 0; i < numRiskRows; i++)\n             mRisk.put(i, new RISK(i));\n \n         RISK.putAll(mRisk);\n@@ -182,6 +206,29 @@ public void testCountWithJoin() throws Exception {\n                 assertEquals(40L, res.get(0).get(0));\n             }\n         }\n+\n+        assertFalse(lsnr.check());\n+\n+        listeningLog.clearListeners();\n+    }\n+\n+    /**\n+     * Checks all grids execution contexts are closed or registered (Out|In)boxes are present.\n+     */\n+    private void checkContextCancelled() throws IgniteInterruptedCheckedException {\n+        for (Ignite instance : G.allGrids()) {\n+            QueryEngine engineCli = Commons.lookupComponent(((IgniteEx)instance).context(), QueryEngine.class);\n+\n+            MailboxRegistryImpl mailReg = GridTestUtils.getFieldValue(engineCli, CalciteQueryProcessor.class, \"mailboxRegistry\");\n+\n+            Map<Object, Inbox<?>> remotes = GridTestUtils.getFieldValue(mailReg, MailboxRegistryImpl.class, \"remotes\");\n+\n+            Map<Object, Outbox<?>> locals = GridTestUtils.getFieldValue(mailReg, MailboxRegistryImpl.class, \"locals\");\n+\n+            waitForCondition(() -> remotes.isEmpty() || remotes.values().stream().allMatch(s -> s.context().isCancelled()), 5_000);\n+\n+            waitForCondition(() -> locals.isEmpty() || locals.values().stream().allMatch(s -> s.context().isCancelled()), 5_000);\n+        }\n     }\n \n     /** */\n@@ -840,8 +887,8 @@ public void testThroughput() {\n     }\n \n     /** */\n-    private List<List<?>> sql(String sql) {\n-        QueryEngine engineSrv = Commons.lookupComponent(grid(1).context(), QueryEngine.class);\n+    private List<List<?>> sql(String sql) throws IgniteInterruptedCheckedException {\n+        QueryEngine engineSrv = Commons.lookupComponent(grid(0).context(), QueryEngine.class);\n \n         assertTrue(client.configuration().isClientMode());\n \n@@ -857,6 +904,8 @@ public void testThroughput() {\n             allSrv = srvCursor.getAll();\n \n             assertEquals(allSrv.size(), cliCursor.getAll().size());\n+\n+            checkContextCancelled();\n         }\n \n         return allSrv;"
  },
  {
    "sha": "9dc5667d930993d84856168c3d22af47d60284b3",
    "filename": "modules/calcite/src/test/java/org/apache/ignite/internal/processors/query/calcite/CancelTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/test/java/org/apache/ignite/internal/processors/query/calcite/CancelTest.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/calcite/src/test/java/org/apache/ignite/internal/processors/query/calcite/CancelTest.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/calcite/src/test/java/org/apache/ignite/internal/processors/query/calcite/CancelTest.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -41,6 +41,7 @@\n import org.apache.ignite.internal.util.typedef.X;\n import org.apache.ignite.testframework.GridTestUtils;\n import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import static java.util.Collections.singletonList;\n@@ -121,6 +122,7 @@ public void testCancel() throws Exception {\n     /**\n      *\n      */\n+    @Ignore(\"https://issues.apache.org/jira/browse/IGNITE-14289\")\n     @Test\n     public void testNotOriginatorNodeStop() throws Exception {\n         QueryEngine engine = Commons.lookupComponent(grid(0).context(), QueryEngine.class);"
  },
  {
    "sha": "01e98e0c55013ae969fc6235586dd2f3c0e0f155",
    "filename": "modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java",
    "status": "modified",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://github.com/apache/ignite/blob/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java",
    "raw_url": "https://github.com/apache/ignite/raw/3dfa52227235a4c47b7a749547b46ca54a4fe316/modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java",
    "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java?ref=3dfa52227235a4c47b7a749547b46ca54a4fe316",
    "patch": "@@ -89,6 +89,20 @@ public void execute(Runnable task, int idx) {\n         execs[threadId(idx)].execute(task);\n     }\n \n+    /**\n+     * Submits a Runnable task for execution and returns a Future representing that task.\n+     * The command with the same {@code index} will be executed in the same thread.\n+     *\n+     * @param task the task to submit\n+     * @return a Future representing pending completion of the task\n+     * @throws RejectedExecutionException if the task cannot be\n+     *         scheduled for execution\n+     * @throws NullPointerException if the task is null\n+     */\n+    public Future<?> submit(Runnable task, int idx) {\n+        return execs[threadId(idx)].submit(task);\n+    }\n+\n     /**\n      * @param idx Index.\n      * @return Stripped thread ID."
  }
]
