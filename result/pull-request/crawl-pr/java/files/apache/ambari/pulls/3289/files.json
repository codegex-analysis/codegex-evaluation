[
  {
    "sha": "8013a917632881b9bb583a6c3664c0d652696335",
    "filename": "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/ambari/blob/18ae09e792f92910ea3058f1b26b05b5d80d306d/ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
    "raw_url": "https://github.com/apache/ambari/raw/18ae09e792f92910ea3058f1b26b05b5d80d306d/ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java",
    "contents_url": "https://api.github.com/repos/apache/ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java?ref=18ae09e792f92910ea3058f1b26b05b5d80d306d",
    "patch": "@@ -158,7 +158,7 @@ protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrinci\n     CommandReport commandReport = null;\n     String message = null;\n \n-    Set<ResolvedKerberosKeytab> keytabsToCreate = kerberosKeytabController.getFromPrincipal(resolvedPrincipal);\n+    Set<ResolvedKerberosKeytab> keytabsToCreate = kerberosKeytabController.getFromPrincipalExceptServiceMapping(resolvedPrincipal);\n \n     try {\n       String dataDirectory = getDataDirectoryPath();"
  },
  {
    "sha": "9dd05d3b4d77ae58c86d5953cf30a4e91be6e894",
    "filename": "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
    "status": "modified",
    "additions": 21,
    "deletions": 13,
    "changes": 34,
    "blob_url": "https://github.com/apache/ambari/blob/18ae09e792f92910ea3058f1b26b05b5d80d306d/ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
    "raw_url": "https://github.com/apache/ambari/raw/18ae09e792f92910ea3058f1b26b05b5d80d306d/ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java",
    "contents_url": "https://api.github.com/repos/apache/ambari/contents/ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java?ref=18ae09e792f92910ea3058f1b26b05b5d80d306d",
    "patch": "@@ -88,7 +88,7 @@ public ResolvedKerberosKeytab getKeytabByFile(String file) {\n    * @return found keytab or null\n    */\n   public ResolvedKerberosKeytab getKeytabByFile(String file, boolean resolvePrincipals) {\n-    return fromKeytabEntity(kerberosKeytabDAO.find(file), resolvePrincipals);\n+    return fromKeytabEntity(kerberosKeytabDAO.find(file), resolvePrincipals, false);\n   }\n \n   /**\n@@ -97,7 +97,7 @@ public ResolvedKerberosKeytab getKeytabByFile(String file, boolean resolvePrinci\n    * @return all keytabs\n    */\n   public Set<ResolvedKerberosKeytab> getAllKeytabs() {\n-    return fromKeytabEntities(kerberosKeytabDAO.findAll());\n+    return fromKeytabEntities(kerberosKeytabDAO.findAll(), false);\n   }\n \n   /**\n@@ -107,10 +107,17 @@ public ResolvedKerberosKeytab getKeytabByFile(String file, boolean resolvePrinci\n    * @return set of keytabs found\n    */\n   public Set<ResolvedKerberosKeytab> getFromPrincipal(ResolvedKerberosPrincipal rkp) {\n-    List<KerberosKeytabEntity> keytabs = kerberosKeytabDAO.findByPrincipalAndHost(\n-        rkp.getPrincipal(), rkp.getHostId());\n+    return fromKeytabEntities(kerberosKeytabDAO.findByPrincipalAndHost(rkp.getPrincipal(), rkp.getHostId()), false);\n+  }\n \n-    return fromKeytabEntities(keytabs);\n+  /**\n+   * Returns all keytabs that contains given principal without service mapping.\n+   *\n+   * @param rkp principal to filter keytabs by\n+   * @return set of keytabs found\n+   */\n+  public Set<ResolvedKerberosKeytab> getFromPrincipalExceptServiceMapping(ResolvedKerberosPrincipal rkp) {\n+    return fromKeytabEntities(kerberosKeytabDAO.findByPrincipalAndHost(rkp.getPrincipal(), rkp.getHostId()), true);\n   }\n \n   /**\n@@ -132,7 +139,7 @@ public ResolvedKerberosKeytab getKeytabByFile(String file, boolean resolvePrinci\n       filter.setPrincipals(identityFilter);\n     }\n \n-    Set<ResolvedKerberosPrincipal> filteredPrincipals = fromPrincipalEntities(kerberosKeytabPrincipalDAO.findByFilters(filters));\n+    Set<ResolvedKerberosPrincipal> filteredPrincipals = fromPrincipalEntities(kerberosKeytabPrincipalDAO.findByFilters(filters), false);\n     HashMap<String, ResolvedKerberosKeytab> resultMap = new HashMap<>();\n     for (ResolvedKerberosPrincipal principal : filteredPrincipals) {\n       if (!resultMap.containsKey(principal.getKeytabPath())) {\n@@ -204,8 +211,9 @@ public ResolvedKerberosKeytab getKeytabByFile(String file, boolean resolvePrinci\n     return Lists.newArrayList(KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter.createEmptyFilter());\n   }\n \n-  private ResolvedKerberosKeytab fromKeytabEntity(KerberosKeytabEntity kke, boolean resolvePrincipals) {\n-    Set<ResolvedKerberosPrincipal> principals = resolvePrincipals ? fromPrincipalEntities(kke.getKerberosKeytabPrincipalEntities()) : new HashSet<>();\n+  private ResolvedKerberosKeytab fromKeytabEntity(KerberosKeytabEntity kke, boolean resolvePrincipals, boolean exceptServiceMapping) {\n+    Set<ResolvedKerberosPrincipal> principals = resolvePrincipals ?\n+        fromPrincipalEntities(kke.getKerberosKeytabPrincipalEntities(), exceptServiceMapping) : new HashSet<>();\n     return new ResolvedKerberosKeytab(\n       kke.getKeytabPath(),\n       kke.getOwnerName(),\n@@ -219,18 +227,18 @@ private ResolvedKerberosKeytab fromKeytabEntity(KerberosKeytabEntity kke, boolea\n   }\n \n   private ResolvedKerberosKeytab fromKeytabEntity(KerberosKeytabEntity kke) {\n-    return fromKeytabEntity(kke, true);\n+    return fromKeytabEntity(kke, true, false);\n   }\n \n-  private Set<ResolvedKerberosKeytab> fromKeytabEntities(Collection<KerberosKeytabEntity> keytabEntities) {\n+  private Set<ResolvedKerberosKeytab> fromKeytabEntities(Collection<KerberosKeytabEntity> keytabEntities, boolean exceptServiceMapping) {\n     ImmutableSet.Builder<ResolvedKerberosKeytab> builder = ImmutableSet.builder();\n     for (KerberosKeytabEntity kkpe : keytabEntities) {\n-      builder.add(fromKeytabEntity(kkpe));\n+      builder.add(fromKeytabEntity(kkpe, true, exceptServiceMapping));\n     }\n     return builder.build();\n   }\n \n-  private Set<ResolvedKerberosPrincipal> fromPrincipalEntities(Collection<KerberosKeytabPrincipalEntity> principalEntities) {\n+  private Set<ResolvedKerberosPrincipal> fromPrincipalEntities(Collection<KerberosKeytabPrincipalEntity> principalEntities, boolean exceptServiceMapping) {\n     ImmutableSet.Builder<ResolvedKerberosPrincipal> builder = ImmutableSet.builder();\n     for (KerberosKeytabPrincipalEntity kkpe : principalEntities) {\n       KerberosPrincipalEntity kpe = kkpe.getKerberosPrincipalEntity();\n@@ -243,7 +251,7 @@ private ResolvedKerberosKeytab fromKeytabEntity(KerberosKeytabEntity kke) {\n             kpe.isService(),\n             kpe.getCachedKeytabPath(),\n             kkpe.getKeytabPath(),\n-            kkpe.getServiceMappingAsMultimap());\n+            exceptServiceMapping ? null : kkpe.getServiceMappingAsMultimap());\n         builder.add(rkp);\n       }\n     }"
  }
]
