[
  {
    "sha": "224977992b4411018b65d62f69be5a85fae8aed5",
    "filename": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java",
    "status": "modified",
    "additions": 16,
    "deletions": 48,
    "changes": 64,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -98,7 +98,6 @@\n import org.apache.hadoop.hbase.master.MasterRpcServices.BalanceSwitchMode;\n import org.apache.hadoop.hbase.master.assignment.AssignmentManager;\n import org.apache.hadoop.hbase.master.assignment.MergeTableRegionsProcedure;\n-import org.apache.hadoop.hbase.master.assignment.RegionStateNode;\n import org.apache.hadoop.hbase.master.assignment.RegionStates;\n import org.apache.hadoop.hbase.master.assignment.TransitRegionStateProcedure;\n import org.apache.hadoop.hbase.master.balancer.BalancerChore;\n@@ -185,6 +184,7 @@\n import org.apache.hadoop.hbase.replication.regionserver.ReplicationStatus;\n import org.apache.hadoop.hbase.rsgroup.RSGroupAdminEndpoint;\n import org.apache.hadoop.hbase.rsgroup.RSGroupBasedLoadBalancer;\n+import org.apache.hadoop.hbase.rsgroup.RSGroupInfo;\n import org.apache.hadoop.hbase.rsgroup.RSGroupInfoManager;\n import org.apache.hadoop.hbase.rsgroup.RSGroupUtil;\n import org.apache.hadoop.hbase.security.AccessDeniedException;\n@@ -1421,6 +1421,9 @@ protected void stopServiceThreads() {\n       cleanerPool.shutdownNow();\n       cleanerPool = null;\n     }\n+    if (this.balancer != null) {\n+      this.balancer.stop(\"normal stop\");\n+    }\n \n     LOG.debug(\"Stopping service threads\");\n \n@@ -1675,31 +1678,7 @@ public boolean balance(boolean force) throws IOException {\n       return false;\n     }\n \n-    synchronized (this.balancer) {\n-        // Only allow one balance run at at time.\n-      if (this.assignmentManager.hasRegionsInTransition()) {\n-        List<RegionStateNode> regionsInTransition = assignmentManager.getRegionsInTransition();\n-        // if hbase:meta region is in transition, result of assignment cannot be recorded\n-        // ignore the force flag in that case\n-        boolean metaInTransition = assignmentManager.isMetaRegionInTransition();\n-        String prefix = force && !metaInTransition ? \"R\" : \"Not r\";\n-        List<RegionStateNode> toPrint = regionsInTransition;\n-        int max = 5;\n-        boolean truncated = false;\n-        if (regionsInTransition.size() > max) {\n-          toPrint = regionsInTransition.subList(0, max);\n-          truncated = true;\n-        }\n-        LOG.info(prefix + \" not running balancer because \" + regionsInTransition.size() +\n-          \" region(s) in transition: \" + toPrint + (truncated? \"(truncated list)\": \"\"));\n-        if (!force || metaInTransition) return false;\n-      }\n-      if (this.serverManager.areDeadServersInProgress()) {\n-        LOG.info(\"Not running balancer because processing dead regionserver(s): \" +\n-          this.serverManager.getDeadServers());\n-        return false;\n-      }\n-\n+    try {\n       if (this.cpHost != null) {\n         try {\n           if (this.cpHost.preBalance()) {\n@@ -1711,37 +1690,26 @@ public boolean balance(boolean force) throws IOException {\n           return false;\n         }\n       }\n-\n-      Map<TableName, Map<ServerName, List<RegionInfo>>> assignments =\n-        this.assignmentManager.getRegionStates()\n-          .getAssignmentsForBalancer(tableStateManager, this.serverManager.getOnlineServersList());\n-      for (Map<ServerName, List<RegionInfo>> serverMap : assignments.values()) {\n-        serverMap.keySet().removeAll(this.serverManager.getDrainingServersList());\n-      }\n-\n-      //Give the balancer the current cluster state.\n-      this.balancer.setClusterMetrics(getClusterMetricsWithoutCoprocessor());\n-\n-      List<RegionPlan> plans = this.balancer.balanceCluster(assignments);\n-\n-      if (skipRegionManagementAction(\"balancer\")) {\n-        // make one last check that the cluster isn't shutting down before proceeding.\n-        return false;\n+      List<RegionPlan> sucPlans = Collections.emptyList();\n+      try {\n+        //Give the balancer the current cluster state.\n+        this.balancer.setClusterMetrics(getClusterMetricsWithoutCoprocessor());\n+        sucPlans = balancer.balance(force).get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.error(\"Balance groups error\", e);\n       }\n-\n-      List<RegionPlan> sucRPs = executeRegionPlansWithThrottling(plans);\n-\n       if (this.cpHost != null) {\n         try {\n-          this.cpHost.postBalance(sucRPs);\n+          this.cpHost.postBalance(sucPlans);\n         } catch (IOException ioe) {\n           // balancing already succeeded so don't change the result\n           LOG.error(\"Error invoking master coprocessor postBalance()\", ioe);\n         }\n       }\n+\n+    } catch (IOException e) {\n+      LOG.error(\"Balance cluster error\", e);\n     }\n-    // If LoadBalancer did not generate any plans, it means the cluster is already balanced.\n-    // Return true indicating a success.\n     return true;\n   }\n "
  },
  {
    "sha": "a3aead9aab82d7ff98266b87db874f8dc782ffaa",
    "filename": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -93,8 +93,8 @@\n   void setMasterServices(MasterServices masterServices);\n \n   /**\n-   * Perform the major balance operation for cluster, will invoke {@link #balanceTable} to do actual\n-   * balance. Normally not need override this method, except\n+   * Perform the major balance operation for cluster, will invoke {@link #balanceTable} to do\n+   * actual balance. Normally not need override this method, except\n    * {@link org.apache.hadoop.hbase.master.balancer.SimpleLoadBalancer} and\n    * {@link org.apache.hadoop.hbase.rsgroup.RSGroupBasedLoadBalancer}\n    * @param loadOfAllTable region load of servers for all table"
  },
  {
    "sha": "8765c392603a3a01e4db5312a33001e03be3a869",
    "filename": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -1706,8 +1706,8 @@ private void roundRobinAssignment(Cluster cluster, List<RegionInfo> regions,\n       Map<ServerName, List<RegionInfo>> loadOfOneTable);\n \n   @Override\n-  public List<RegionPlan>\n-      balanceCluster(Map<TableName, Map<ServerName, List<RegionInfo>>> loadOfAllTable) {\n+  public List<RegionPlan> balanceCluster(Map<TableName, Map<ServerName,\n+    List<RegionInfo>>> loadOfAllTable) {\n     if (isByTable) {\n       List<RegionPlan> result = new ArrayList<>();\n       loadOfAllTable.forEach((tableName, loadOfOneTable) -> {"
  },
  {
    "sha": "d0c72c2b9d9768e5b93e06c36c1a83d3851b89fd",
    "filename": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/CandidateGenerator.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/CandidateGenerator.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/CandidateGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/CandidateGenerator.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -37,8 +37,8 @@\n \n   /**\n    * From a list of regions pick a random one. Null can be returned which\n-   * {@link StochasticLoadBalancer#balanceCluster(Map)} recognize as signal to try a region move\n-   * rather than swap.\n+   * {@link StochasticLoadBalancer#balanceCluster(Map)} recognize as signal to try a region\n+   * move rather than swap.\n    *\n    * @param cluster The state of the cluster\n    * @param server index of the server"
  },
  {
    "sha": "930eb572188b4f8203f497cc20f9d6f9beab7527",
    "filename": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/FavoredStochasticBalancer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/FavoredStochasticBalancer.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/FavoredStochasticBalancer.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/FavoredStochasticBalancer.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -737,7 +737,8 @@ private int pickMostLoadedServer(final Cluster cluster) {\n         }\n       }\n       LOG.debug(\"Found misplaced regions: \" + misplacedRegions + \", not on favored nodes.\");\n-      List<RegionPlan> regionPlansFromBalance = super.balanceTable(tableName, correctAssignments);\n+      List<RegionPlan> regionPlansFromBalance = super.balanceTable(tableName,\n+        correctAssignments);\n       if (regionPlansFromBalance != null) {\n         regionPlans.addAll(regionPlansFromBalance);\n       }"
  },
  {
    "sha": "a22f65b833d0a4618ee1a9445e8e30231bc01fd4",
    "filename": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/SimpleLoadBalancer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/SimpleLoadBalancer.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/SimpleLoadBalancer.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/SimpleLoadBalancer.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -604,8 +604,8 @@ private void addRegionPlan(final MinMaxPriorityQueue<RegionPlan> regionsToMove,\n    * on every server to achieve overall balanced\n    */\n   @Override\n-  public synchronized List<RegionPlan>\n-      balanceCluster(Map<TableName, Map<ServerName, List<RegionInfo>>> loadOfAllTable) {\n+  public synchronized List<RegionPlan> balanceCluster(Map<TableName, Map<ServerName,\n+    List<RegionInfo>>> loadOfAllTable) {\n     setClusterLoad(loadOfAllTable);\n     return super.balanceCluster(loadOfAllTable);\n   }"
  },
  {
    "sha": "e259767d05f8589d0025f02310654d636020dda0",
    "filename": "hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java",
    "status": "modified",
    "additions": 142,
    "deletions": 1,
    "changes": 143,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -22,10 +22,17 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeMap;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hbase.ClusterMetrics;\n import org.apache.hadoop.hbase.HBaseIOException;\n@@ -39,8 +46,12 @@\n import org.apache.hadoop.hbase.master.LoadBalancer;\n import org.apache.hadoop.hbase.master.MasterServices;\n import org.apache.hadoop.hbase.master.RegionPlan;\n+import org.apache.hadoop.hbase.master.RegionState;\n+import org.apache.hadoop.hbase.master.assignment.RegionStateNode;\n import org.apache.hadoop.hbase.master.balancer.LoadBalancerFactory;\n import org.apache.hadoop.hbase.net.Address;\n+import org.apache.hadoop.hbase.util.IdReadWriteLock;\n+import org.apache.hadoop.hbase.util.IdReadWriteLockWithObjectPool;\n import org.apache.hadoop.hbase.util.Pair;\n import org.apache.hadoop.hbase.util.ReflectionUtils;\n import org.apache.yetus.audience.InterfaceAudience;\n@@ -51,6 +62,7 @@\n import org.apache.hbase.thirdparty.com.google.common.collect.ListMultimap;\n import org.apache.hbase.thirdparty.com.google.common.collect.Lists;\n import org.apache.hbase.thirdparty.com.google.common.collect.Maps;\n+import org.apache.hbase.thirdparty.com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n /**\n  * GroupBasedLoadBalancer, used when Region Server Grouping is configured (HBase-6721) It does\n@@ -75,6 +87,9 @@\n   private FavoredNodesManager favoredNodesManager;\n   private volatile RSGroupInfoManager rsGroupInfoManager;\n   private LoadBalancer internalBalancer;\n+  private final IdReadWriteLock<String> groupLocks = new IdReadWriteLockWithObjectPool<>();\n+  private ExecutorService balancerPool;\n+  private boolean stopped = false;\n \n   /**\n    * Set this key to {@code true} to allow region fallback.\n@@ -84,6 +99,7 @@\n    * regions\n    */\n   public static final String FALLBACK_GROUP_ENABLE_KEY = \"hbase.rsgroup.fallback.enable\";\n+  public static final String CONF_RSGROUP_BALANCE_THREADS = \"hbase.rsgroup.balance.threads\";\n \n   private boolean fallbackEnabled = false;\n \n@@ -373,6 +389,9 @@ public void initialize() throws IOException {\n     internalBalancer.initialize();\n     // init fallback groups\n     this.fallbackEnabled = config.getBoolean(FALLBACK_GROUP_ENABLE_KEY, false);\n+    this.balancerPool = Executors.newFixedThreadPool(\n+      config.getInt(CONF_RSGROUP_BALANCE_THREADS, 10),\n+      new ThreadFactoryBuilder().setNameFormat(\"RSGroup-balancer-%d\").setDaemon(true).build());\n   }\n \n   public boolean isOnline() {\n@@ -407,11 +426,18 @@ public void onConfigurationChange(Configuration conf) {\n \n   @Override\n   public void stop(String why) {\n+    if(stopped){\n+      return;\n+    }\n+    if (this.balancerPool != null) {\n+      this.balancerPool.shutdownNow();\n+    }\n+    stopped = true;\n   }\n \n   @Override\n   public boolean isStopped() {\n-    return false;\n+    return stopped;\n   }\n \n   public void setRsGroupInfoManager(RSGroupInfoManager rsGroupInfoManager) {\n@@ -469,6 +495,121 @@ public void updateBalancerStatus(boolean status) {\n     return regionPlans;\n   }\n \n+  public CompletableFuture<List<RegionPlan>> balance(boolean force) throws IOException{\n+    List<RSGroupInfo> groups = rsGroupInfoManager.listRSGroups();\n+    return balanceRSGroupsParallel(groups, force);\n+  }\n+\n+  private CompletableFuture<List<RegionPlan>> balanceRSGroupsParallel(List<RSGroupInfo> groups,\n+    boolean force) {\n+    return CompletableFuture\n+      .supplyAsync(() -> groups.stream().map(groupInfo -> CompletableFuture.supplyAsync(() -> {\n+        try {\n+          return balanceRSGroup(groupInfo.getName(), force);\n+        } catch (IOException e) {\n+          LOG.error(\"Balance RSGroup {} error\", groupInfo.getName(), e);\n+        }\n+        return new ArrayList<RegionPlan>();\n+      }, balancerPool)).map(CompletableFuture::join).flatMap(List::stream)\n+        .collect(Collectors.toList()), balancerPool);\n+  }\n+\n+  public List<RegionPlan> balanceRSGroup(String groupName, boolean force) throws IOException {\n+    List<RegionPlan> balancedPlans = new ArrayList<>();\n+    if (masterServices == null || masterServices.skipRegionManagementAction(\"balancer\")) {\n+      LOG.warn(\"Master service is null or master has not initialized, skip balance RSGroup {}\",\n+        groupName);\n+      return balancedPlans;\n+    }\n+    // If balance not true, don't run balancer.\n+    if (!masterServices.isBalancerOn()) {\n+      return balancedPlans;\n+    }\n+    RSGroupInfo groupInfo = rsGroupInfoManager.getRSGroup(groupName);\n+    if (groupInfo == null) {\n+      throw new ConstraintException(\"RSGroup \" + groupName + \" does not exist\");\n+    }\n+    ReadWriteLock groupBalanceLock = groupLocks.getLock(groupInfo.getName());\n+    if (groupBalanceLock.writeLock().tryLock()) {\n+      try {\n+        if (masterServices.getAssignmentManager().isMetaRegionInTransition()) {\n+          LOG.info(\"Not running balancer for RSGroup {} because meta regions in transition\",\n+            groupName);\n+          return balancedPlans;\n+        }\n+        if (masterServices.getServerManager().areDeadServersInProgress()) {\n+          LOG.debug(\"Not running balancer for RSGroup {}, \"\n+              + \"because processing dead regionserver(s): {}\", groupName,\n+            masterServices.getServerManager().getDeadServers());\n+          return balancedPlans;\n+        }\n+        Map<String, RegionState> groupRIT = rsGroupGetRegionsInTransition(groupName);\n+        if (groupRIT.size() > 0 && !force) {\n+          LOG.debug(\"Not running balancer for RSGroup {}, because {} region(s) in transition: {}\",\n+            groupName, groupRIT.size(), StringUtils.abbreviate(\n+              masterServices.getAssignmentManager().getRegionStates().getRegionsInTransition()\n+                .toString(), 256));\n+          return balancedPlans;\n+        }\n+        // We balance per group instead of per table\n+        Map<TableName, Map<ServerName, List<RegionInfo>>> assignmentsByTable =\n+          getRSGroupAssignmentsByTable(groupName);\n+        List<RegionPlan> plans = balanceCluster(assignmentsByTable);\n+        if (!plans.isEmpty()) {\n+          LOG.info(\"Balance RSGroup {}, starting {} balance plans\", groupName, plans.size());\n+          balancedPlans = masterServices.executeRegionPlansWithThrottling(plans);\n+          LOG.info(\"Balance RSGroup {} completed\", groupName);\n+        }\n+      } finally {\n+        groupBalanceLock.writeLock().unlock();\n+      }\n+    }\n+    return balancedPlans;\n+  }\n+\n+  private Map<String, RegionState> rsGroupGetRegionsInTransition(String groupName)\n+    throws IOException {\n+    Map<String, RegionState> rit = Maps.newTreeMap();\n+    Set<TableName> tablesInGroup = new HashSet<>();\n+    for (RegionStateNode regionNode : masterServices.getAssignmentManager()\n+      .getRegionsInTransition()) {\n+      TableName tn = regionNode.getTable();\n+      if (tablesInGroup.contains(tn) || RSGroupUtil\n+        .getRSGroupInfo(masterServices, rsGroupInfoManager, tn).map(RSGroupInfo::getName)\n+        .orElse(RSGroupInfo.DEFAULT_GROUP).equals(groupName)) {\n+        tablesInGroup.add(tn);\n+        rit.put(regionNode.getRegionInfo().getEncodedName(), regionNode.toRegionState());\n+      }\n+    }\n+    return rit;\n+  }\n+\n+  /**\n+   * This is an EXPENSIVE clone. Cloning though is the safest thing to do. Can't let out original\n+   * since it can change and at least the load balancer wants to iterate this exported list. Load\n+   * balancer should iterate over this list because cloned list will ignore disabled table and split\n+   * parent region cases. This method is invoked by {@link #balanceRSGroup}\n+   * @return A clone of current assignments for this group.\n+   */\n+  Map<TableName, Map<ServerName, List<RegionInfo>>> getRSGroupAssignmentsByTable(String groupName)\n+    throws IOException {\n+    Map<TableName, Map<ServerName, List<RegionInfo>>> assignments =\n+      masterServices.getAssignmentManager().getRegionStates()\n+        .getAssignmentsForBalancer(masterServices.getTableStateManager(),\n+          masterServices.getServerManager().getOnlineServersList());\n+    for (Map<ServerName, List<RegionInfo>> serverMap : assignments.values()) {\n+      serverMap.keySet().removeAll(masterServices.getServerManager().getDrainingServersList());\n+    }\n+    Map<TableName, Map<ServerName, List<RegionInfo>>> result = Maps.newHashMap();\n+    for (Map.Entry<TableName, Map<ServerName, List<RegionInfo>>> entry : assignments.entrySet()) {\n+      if (RSGroupUtil.getRSGroupInfo(masterServices, rsGroupInfoManager, entry.getKey())\n+        .map(RSGroupInfo::getName).orElse(RSGroupInfo.DEFAULT_GROUP).equals(groupName)) {\n+        result.putIfAbsent(entry.getKey(), entry.getValue());\n+      }\n+    }\n+    return result;\n+  }\n+\n   private List<ServerName> getFallBackCandidates(List<ServerName> servers) {\n     List<ServerName> serverNames = null;\n     try {"
  },
  {
    "sha": "78aae4d7d7dbe215744854118f0fc0cdab2d280d",
    "filename": "hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java",
    "status": "modified",
    "additions": 4,
    "deletions": 107,
    "changes": 111,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupInfoManagerImpl.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -57,16 +57,12 @@\n import org.apache.hadoop.hbase.client.ResultScanner;\n import org.apache.hadoop.hbase.client.TableDescriptor;\n import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n-import org.apache.hadoop.hbase.client.TableState;\n import org.apache.hadoop.hbase.constraint.ConstraintException;\n import org.apache.hadoop.hbase.coprocessor.MultiRowMutationEndpoint;\n import org.apache.hadoop.hbase.exceptions.DeserializationException;\n-import org.apache.hadoop.hbase.master.LoadBalancer;\n import org.apache.hadoop.hbase.master.MasterServices;\n import org.apache.hadoop.hbase.master.RegionPlan;\n-import org.apache.hadoop.hbase.master.RegionState;\n import org.apache.hadoop.hbase.master.ServerListener;\n-import org.apache.hadoop.hbase.master.ServerManager;\n import org.apache.hadoop.hbase.master.TableStateManager;\n import org.apache.hadoop.hbase.master.assignment.RegionStateNode;\n import org.apache.hadoop.hbase.master.procedure.CreateTableProcedure;\n@@ -1078,111 +1074,12 @@ private void waitForRegionMovement(List<Pair<RegionInfo, Future<byte[]>>> region\n     }\n   }\n \n-  private boolean isTableInGroup(TableName tableName, String groupName,\n-      Set<TableName> tablesInGroupCache) throws IOException {\n-    if (tablesInGroupCache.contains(tableName)) {\n-      return true;\n-    }\n-    if (RSGroupUtil.getRSGroupInfo(masterServices, this, tableName)\n-        .map(RSGroupInfo::getName)\n-        .orElse(RSGroupInfo.DEFAULT_GROUP).equals(groupName)) {\n-      tablesInGroupCache.add(tableName);\n-      return true;\n-    }\n-    return false;\n-  }\n-\n-  private Map<String, RegionState> rsGroupGetRegionsInTransition(String groupName)\n-      throws IOException {\n-    Map<String, RegionState> rit = Maps.newTreeMap();\n-    Set<TableName> tablesInGroupCache = new HashSet<>();\n-    for (RegionStateNode regionNode :\n-        masterServices.getAssignmentManager().getRegionsInTransition()) {\n-      TableName tn = regionNode.getTable();\n-      if (isTableInGroup(tn, groupName, tablesInGroupCache)) {\n-        rit.put(regionNode.getRegionInfo().getEncodedName(), regionNode.toRegionState());\n-      }\n-    }\n-    return rit;\n-  }\n-\n-  /**\n-   * This is an EXPENSIVE clone. Cloning though is the safest thing to do. Can't let out original\n-   * since it can change and at least the load balancer wants to iterate this exported list. Load\n-   * balancer should iterate over this list because cloned list will ignore disabled table and split\n-   * parent region cases. This method is invoked by {@link #balanceRSGroup}\n-   * @return A clone of current assignments for this group.\n-   */\n-  Map<TableName, Map<ServerName, List<RegionInfo>>> getRSGroupAssignmentsByTable(\n-    TableStateManager tableStateManager, String groupName) throws IOException {\n-    Map<TableName, Map<ServerName, List<RegionInfo>>> result = Maps.newHashMap();\n-    Set<TableName> tablesInGroupCache = new HashSet<>();\n-    for (Map.Entry<RegionInfo, ServerName> entry : masterServices.getAssignmentManager()\n-      .getRegionStates().getRegionAssignments().entrySet()) {\n-      RegionInfo region = entry.getKey();\n-      TableName tn = region.getTable();\n-      ServerName server = entry.getValue();\n-      if (isTableInGroup(tn, groupName, tablesInGroupCache)) {\n-        if (tableStateManager\n-          .isTableState(tn, TableState.State.DISABLED, TableState.State.DISABLING)) {\n-          continue;\n-        }\n-        if (region.isSplitParent()) {\n-          continue;\n-        }\n-        result.computeIfAbsent(tn, k -> new HashMap<>())\n-          .computeIfAbsent(server, k -> new ArrayList<>()).add(region);\n-      }\n-    }\n-    RSGroupInfo rsGroupInfo = getRSGroupInfo(groupName);\n-    for (ServerName serverName : masterServices.getServerManager().getOnlineServers().keySet()) {\n-      if (rsGroupInfo.containsServer(serverName.getAddress())) {\n-        for (Map<ServerName, List<RegionInfo>> map : result.values()) {\n-          map.computeIfAbsent(serverName, k -> Collections.emptyList());\n-        }\n-      }\n-    }\n-    return result;\n-  }\n-\n   @Override\n   public boolean balanceRSGroup(String groupName) throws IOException {\n-    ServerManager serverManager = masterServices.getServerManager();\n-    LoadBalancer balancer = masterServices.getLoadBalancer();\n-    getRSGroupInfo(groupName);\n-\n-    synchronized (balancer) {\n-      // If balance not true, don't run balancer.\n-      if (!masterServices.isBalancerOn()) {\n-        return false;\n-      }\n-      // Only allow one balance run at at time.\n-      Map<String, RegionState> groupRIT = rsGroupGetRegionsInTransition(groupName);\n-      if (groupRIT.size() > 0) {\n-        LOG.debug(\"Not running balancer because {} region(s) in transition: {}\", groupRIT.size(),\n-            StringUtils.abbreviate(masterServices.getAssignmentManager().getRegionStates()\n-                    .getRegionsInTransition().toString(),\n-                256));\n-        return false;\n-      }\n-      if (serverManager.areDeadServersInProgress()) {\n-        LOG.debug(\"Not running balancer because processing dead regionserver(s): {}\",\n-            serverManager.getDeadServers());\n-        return false;\n-      }\n-\n-      // We balance per group instead of per table\n-      Map<TableName, Map<ServerName, List<RegionInfo>>> assignmentsByTable =\n-          getRSGroupAssignmentsByTable(masterServices.getTableStateManager(), groupName);\n-      List<RegionPlan> plans = balancer.balanceCluster(assignmentsByTable);\n-      boolean balancerRan = !plans.isEmpty();\n-      if (balancerRan) {\n-        LOG.info(\"RSGroup balance {} starting with plan count: {}\", groupName, plans.size());\n-        masterServices.executeRegionPlansWithThrottling(plans);\n-        LOG.info(\"RSGroup balance \" + groupName + \" completed\");\n-      }\n-      return balancerRan;\n-    }\n+    RSGroupBasedLoadBalancer balancer = (RSGroupBasedLoadBalancer) masterServices.getLoadBalancer();\n+    List<RegionPlan> sucPlans =\n+      balancer.balanceRSGroup(groupName, true);\n+    return sucPlans != null && !sucPlans.isEmpty();\n   }\n \n   private void moveTablesAndWait(Set<TableName> tables, String targetGroup) throws IOException {"
  },
  {
    "sha": "3ecc50f3db4e409a1e3e0a805a2e7e3c7bb4ef7d",
    "filename": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestBaseLoadBalancer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestBaseLoadBalancer.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestBaseLoadBalancer.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestBaseLoadBalancer.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -117,8 +117,8 @@ public static void beforeAllTests() throws Exception {\n \n   public static class MockBalancer extends BaseLoadBalancer {\n     @Override\n-    public List<RegionPlan>\n-        balanceCluster(Map<TableName, Map<ServerName, List<RegionInfo>>> loadOfAllTable) {\n+    public List<RegionPlan> balanceCluster(Map<TableName, Map<ServerName,\n+      List<RegionInfo>>> loadOfAllTable) {\n       return null;\n     }\n "
  },
  {
    "sha": "eb6863437519a7f98572e2b6809f4b6d3b2b48da",
    "filename": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestStochasticLoadBalancer.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestStochasticLoadBalancer.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestStochasticLoadBalancer.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestStochasticLoadBalancer.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -486,7 +486,8 @@ public void testLosingRs() throws Exception {\n     List<ServerAndLoad> list = convertToList(serverMap);\n \n \n-    List<RegionPlan> plans = loadBalancer.balanceTable(HConstants.ENSEMBLE_TABLE_NAME, serverMap);\n+    List<RegionPlan> plans = loadBalancer.balanceTable(HConstants.ENSEMBLE_TABLE_NAME,\n+      serverMap);\n     assertNotNull(plans);\n \n     // Apply the plan to the mock cluster."
  },
  {
    "sha": "766a230d3ecb538f506a2930b1a15a4e053d58e8",
    "filename": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestStochasticLoadBalancerHeterogeneousCost.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestStochasticLoadBalancerHeterogeneousCost.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestStochasticLoadBalancerHeterogeneousCost.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestStochasticLoadBalancerHeterogeneousCost.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -187,8 +187,8 @@ protected void testWithCluster(final Map<ServerName, List<RegionInfo>> serverMap\n       LOG.info(\"Mock Balanced cluster : \" + this.printMock(balancedCluster));\n \n       if (assertFullyBalanced) {\n-        final List<RegionPlan> secondPlans =\n-            BalancerTestBase.loadBalancer.balanceTable(HConstants.ENSEMBLE_TABLE_NAME, serverMap);\n+        final List<RegionPlan> secondPlans = BalancerTestBase.loadBalancer.balanceTable(\n+          HConstants.ENSEMBLE_TABLE_NAME, serverMap);\n         assertNull(secondPlans);\n \n         // create external cost function to retrieve limit"
  },
  {
    "sha": "777e7543655e1c1a656c340b1ce6615ead398ada",
    "filename": "hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsBalance.java",
    "status": "modified",
    "additions": 40,
    "deletions": 6,
    "changes": 46,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsBalance.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsBalance.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsBalance.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -153,14 +153,47 @@ public boolean evaluate() throws Exception {\n     ADMIN.balancerSwitch(false, true);\n   }\n \n+  @Test\n+  public void testMisplacedRegionsByBalanceCluster() throws Exception {\n+    String namespace = TABLE_PREFIX + \"_\" + getNameWithoutIndex(name.getMethodName());\n+    TEST_UTIL.getAdmin().createNamespace(NamespaceDescriptor.create(namespace).build());\n+    final TableName tableName = TableName.valueOf(namespace, TABLE_PREFIX + \"_\" +\n+      getNameWithoutIndex(name.getMethodName()));\n+\n+    final RSGroupInfo rsGroupInfo =\n+      addGroup(getGroupName(name.getMethodName()), 1);\n+\n+    TEST_UTIL.createMultiRegionTable(tableName, new byte[] { 'f' }, 15);\n+    TEST_UTIL.waitUntilAllRegionsAssigned(tableName);\n+    TEST_UTIL.getAdmin().modifyNamespace(NamespaceDescriptor.create(namespace)\n+      .addConfiguration(RSGroupInfo.NAMESPACE_DESC_PROP_GROUP, rsGroupInfo.getName()).build());\n+\n+    for(RSGroupInfo info : ADMIN.listRSGroups()){\n+      System.out.println(\"group:\" + info.getName());\n+    }\n+\n+    assertEquals(3, ADMIN.listRSGroups().size());\n+    ADMIN.balancerSwitch(true, true);\n+    ADMIN.balance();\n+    TEST_UTIL.waitFor(60000, new Predicate<Exception>() {\n+      @Override\n+      public boolean evaluate() throws Exception {\n+        ServerName serverName =\n+          ServerName.valueOf(rsGroupInfo.getServers().iterator().next().toString(), 1);\n+        return ADMIN.getConnection().getAdmin().getRegions(serverName).size() == 15;\n+      }\n+    });\n+  }\n+\n   @Test\n   public void testMisplacedRegions() throws Exception {\n     String namespace = TABLE_PREFIX + \"_\" + getNameWithoutIndex(name.getMethodName());\n     TEST_UTIL.getAdmin().createNamespace(NamespaceDescriptor.create(namespace).build());\n-    final TableName tableName =\n-      TableName.valueOf(namespace, TABLE_PREFIX + \"_\" + getNameWithoutIndex(name.getMethodName()));\n+    final TableName tableName = TableName.valueOf(namespace, TABLE_PREFIX + \"_\" +\n+        getNameWithoutIndex(name.getMethodName()));\n \n-    final RSGroupInfo rsGroupInfo = addGroup(getGroupName(name.getMethodName()), 1);\n+    final RSGroupInfo rsGroupInfo =\n+      addGroup(getGroupName(name.getMethodName()), 1);\n \n     TEST_UTIL.createMultiRegionTable(tableName, new byte[] { 'f' }, 15);\n     TEST_UTIL.waitUntilAllRegionsAssigned(tableName);\n@@ -183,7 +216,8 @@ public boolean evaluate() throws Exception {\n     });\n   }\n \n-  @Test public void testGetRSGroupAssignmentsByTable() throws Exception {\n+  @Test\n+  public void testGetRSGroupAssignmentsByTable() throws Exception {\n     final TableName tableName = TableName.valueOf(name.getMethodName());\n     TEST_UTIL.createMultiRegionTable(tableName, HConstants.CATALOG_FAMILY, 10);\n     // disable table\n@@ -192,9 +226,9 @@ public boolean evaluate() throws Exception {\n     TEST_UTIL.getAdmin().disableTable(disableTableName);\n \n     HMaster master = TEST_UTIL.getMiniHBaseCluster().getMaster();\n-    RSGroupInfoManagerImpl gm = (RSGroupInfoManagerImpl) master.getRSGroupInfoManager();\n+    RSGroupBasedLoadBalancer balancer = master.getLoadBalancer();\n     Map<TableName, Map<ServerName, List<RegionInfo>>> assignments =\n-      gm.getRSGroupAssignmentsByTable(master.getTableStateManager(), RSGroupInfo.DEFAULT_GROUP);\n+      balancer.getRSGroupAssignmentsByTable(RSGroupInfo.DEFAULT_GROUP);\n     assertFalse(assignments.containsKey(disableTableName));\n     assertTrue(assignments.containsKey(tableName));\n   }"
  },
  {
    "sha": "9767c39be57b125c8a14a4244f25e739dc8767e6",
    "filename": "hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsFallback.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsFallback.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsFallback.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsFallback.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -135,7 +135,8 @@ private void crashRsInGroup(String groupName) throws Exception {\n     for (Address server : ADMIN.getRSGroup(groupName).getServers()) {\n       AssignmentTestingUtil.crashRs(TEST_UTIL, getServerName(server), true);\n     }\n-    Threads.sleep(1000);\n+    TEST_UTIL.waitFor(30000, () -> !TEST_UTIL.getHBaseCluster().getMaster()\n+      .getServerManager().areDeadServersInProgress());\n     TEST_UTIL.waitUntilNoRegionsInTransition(60000);\n   }\n }"
  },
  {
    "sha": "bd458b920bb772894c9214e216103614af6d6b86",
    "filename": "hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsWithACL.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/hbase/blob/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsWithACL.java",
    "raw_url": "https://github.com/apache/hbase/raw/51fdfa3d5e795d3ef651228113a67e9f95d4f7fe/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsWithACL.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroupsWithACL.java?ref=51fdfa3d5e795d3ef651228113a67e9f95d4f7fe",
    "patch": "@@ -112,6 +112,7 @@ public static void setupBeforeClass() throws Exception {\n     TEST_UTIL.startMiniCluster();\n     // Wait for the ACL table to become available\n     TEST_UTIL.waitUntilAllRegionsAssigned(PermissionStorage.ACL_TABLE_NAME);\n+    TEST_UTIL.waitUntilNoRegionsInTransition(60000);\n \n     // create a set of test users\n     SUPERUSER = User.createUserForTesting(conf, \"admin\", new String[] { \"supergroup\" });"
  }
]
