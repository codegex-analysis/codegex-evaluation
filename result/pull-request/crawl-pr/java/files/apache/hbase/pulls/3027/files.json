[
  {
    "sha": "a36437c59f1220591d92f88f2ccf24d0cddcfe79",
    "filename": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/master/ReplicationLogCleaner.java",
    "status": "modified",
    "additions": 20,
    "deletions": 2,
    "changes": 22,
    "blob_url": "https://github.com/apache/hbase/blob/8d669ab6ef730581af9af15620e97eabdea3d566/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/master/ReplicationLogCleaner.java",
    "raw_url": "https://github.com/apache/hbase/raw/8d669ab6ef730581af9af15620e97eabdea3d566/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/master/ReplicationLogCleaner.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/master/ReplicationLogCleaner.java?ref=8d669ab6ef730581af9af15620e97eabdea3d566",
    "patch": "@@ -31,8 +31,10 @@\n import org.apache.hadoop.hbase.replication.ReplicationStorageFactory;\n import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n import org.apache.hadoop.hbase.zookeeper.ZKWatcher;\n+import org.apache.hbase.thirdparty.com.google.common.base.Preconditions;\n import org.apache.hbase.thirdparty.org.apache.commons.collections4.MapUtils;\n import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -52,6 +54,7 @@\n   private boolean stopped = false;\n   private Set<String> wals;\n   private long readZKTimestamp = 0;\n+  private HMaster master = null;\n \n   @Override\n   public void preClean() {\n@@ -61,11 +64,23 @@ public void preClean() {\n       // but they won't be deleted because they're not in the checking set.\n       wals = queueStorage.getAllWALs();\n     } catch (ReplicationException e) {\n-      LOG.warn(\"Failed to read zookeeper, skipping checking deletable files\");\n+      LOG.warn(\"Failed to read zookeeper, skipping checking deletable files\", e);\n+      handleSessionExpiredException(e);\n       wals = null;\n     }\n   }\n \n+  /*\n+    If preClean call encounters SessionExpiredException then we should abort HMaster.\n+   */\n+  private void handleSessionExpiredException(ReplicationException e) {\n+    if (e.getCause() != null && e.getCause() instanceof KeeperException.SessionExpiredException) {\n+      // Abort hmaster\n+      String msg = \"ReplicationLogCleaner encountered SessionExpiredException\";\n+      master.abort(msg, e.getCause());\n+    }\n+  }\n+\n   @Override\n   public Iterable<FileStatus> getDeletableFiles(Iterable<FileStatus> files) {\n     // all members of this class are null if replication is disabled,\n@@ -102,10 +117,12 @@ public void init(Map<String, Object> params) {\n       if (MapUtils.isNotEmpty(params)) {\n         Object master = params.get(HMaster.MASTER);\n         if (master != null && master instanceof HMaster) {\n+          this.master = (HMaster) master;\n           zkw = ((HMaster) master).getZooKeeper();\n           shareZK = true;\n         }\n       }\n+      Preconditions.checkNotNull(this.master);\n       if (zkw == null) {\n         zkw = new ZKWatcher(getConf(), \"replicationLogCleaner\", null);\n       }\n@@ -128,10 +145,11 @@ public void setConf(Configuration conf, ZKWatcher zk) {\n \n   @InterfaceAudience.Private\n   public void setConf(Configuration conf, ZKWatcher zk,\n-      ReplicationQueueStorage replicationQueueStorage) {\n+      ReplicationQueueStorage replicationQueueStorage, HMaster master) {\n     super.setConf(conf);\n     this.zkw = zk;\n     this.queueStorage = replicationQueueStorage;\n+    this.master = master;\n   }\n \n   @Override"
  },
  {
    "sha": "17ce52087597913aa17b8611c1bd685c1877a0b5",
    "filename": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestLogsCleaner.java",
    "status": "modified",
    "additions": 63,
    "deletions": 2,
    "changes": 65,
    "blob_url": "https://github.com/apache/hbase/blob/8d669ab6ef730581af9af15620e97eabdea3d566/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestLogsCleaner.java",
    "raw_url": "https://github.com/apache/hbase/raw/8d669ab6ef730581af9af15620e97eabdea3d566/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestLogsCleaner.java",
    "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestLogsCleaner.java?ref=8d669ab6ef730581af9af15620e97eabdea3d566",
    "patch": "@@ -21,15 +21,21 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n \n import java.io.IOException;\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.ThreadLocalRandom;\n import java.util.concurrent.atomic.AtomicBoolean;\n import org.apache.commons.io.FileUtils;\n@@ -61,12 +67,14 @@\n import org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper;\n import org.apache.hadoop.hbase.zookeeper.ZKWatcher;\n import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.data.Stat;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n+import org.mockito.Mockito;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n import org.slf4j.Logger;\n@@ -205,7 +213,9 @@ public void testLogCleaning() throws Exception {\n     // 10 procedure WALs\n     assertEquals(10, fs.listStatus(OLD_PROCEDURE_WALS_DIR).length);\n \n-    LogCleaner cleaner = new LogCleaner(1000, server, conf, fs, OLD_WALS_DIR, POOL, null);\n+    Map<String, Object> params = new HashMap<>();\n+    params.put(HMaster.MASTER, mock(HMaster.class));\n+    LogCleaner cleaner = new LogCleaner(1000, server, conf, fs, OLD_WALS_DIR, POOL, params);\n     cleaner.chore();\n \n     // In oldWALs we end up with the current WAL, a newer WAL, the 3 old WALs which\n@@ -255,7 +265,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {\n         }\n       }).when(queueStorage).getAllWALs();\n \n-      cleaner.setConf(conf, faultyZK, queueStorage);\n+      cleaner.setConf(conf, faultyZK, queueStorage, null);\n       // should keep all files due to a ConnectionLossException getting the queues znodes\n       cleaner.preClean();\n       Iterable<FileStatus> toDelete = cleaner.getDeletableFiles(dummyFiles);\n@@ -451,4 +461,55 @@ public RecoverableZooKeeper getRecoverableZooKeeper() {\n       return zk;\n     }\n   }\n+\n+  /*\n+    First throw SessionExpiredException and then ConnectionLossException.\n+   */\n+  static class SessionExpiredZooKeeperWatcher extends ZKWatcher {\n+    private RecoverableZooKeeper zk;\n+\n+    public SessionExpiredZooKeeperWatcher(Configuration conf, String identifier,\n+        Abortable abortable) throws IOException {\n+      super(conf, identifier, abortable);\n+    }\n+\n+    public void init() throws Exception {\n+      this.zk = spy(super.getRecoverableZooKeeper());\n+      doThrow(new KeeperException.SessionExpiredException())\n+        .doThrow(new KeeperException.ConnectionLossException())\n+        .when(zk).getData(Mockito.anyString(), Mockito.any(), Mockito.any(Stat.class));\n+    }\n+\n+    @Override\n+    public RecoverableZooKeeper getRecoverableZooKeeper() {\n+      return zk;\n+    }\n+  }\n+\n+  /*\n+    Tests that HMaster#abort will be called if ReplicationLogCleaner\n+     encounters SessionExpiredException which is unrecoverable.\n+   */\n+  @Test\n+  public void testZookeeperSessionExpired() throws Exception {\n+    try(SessionExpiredZooKeeperWatcher sessionExpiredZK =\n+            new SessionExpiredZooKeeperWatcher(conf, \"testSessionExpiredZk-faulty\", null)) {\n+      sessionExpiredZK.init();\n+      ReplicationQueueStorage queueStorage =\n+          ReplicationStorageFactory.getReplicationQueueStorage(sessionExpiredZK, conf);\n+      ReplicationLogCleaner cleaner = new ReplicationLogCleaner();\n+      HMaster master = mock(HMaster.class);\n+      doNothing().when(master).abort(Mockito.anyString(), Mockito.any(Throwable.class));\n+      cleaner.setConf(conf, sessionExpiredZK, queueStorage, master);\n+      // This will throw SessionExpiredException\n+      cleaner.preClean();\n+      // make sure that HMaster#abort was called.\n+      verify(master, times(1))\n+          .abort(Mockito.anyString(), Mockito.any(Throwable.class));\n+      cleaner.preClean();\n+      // tests that HMaster#abort is not called if any non SessionExpiredException is caught.\n+      verify(master, times(1))\n+        .abort(Mockito.anyString(), Mockito.any(Throwable.class));\n+    }\n+  }\n }"
  }
]
