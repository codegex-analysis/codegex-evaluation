[
  {
    "sha": "1af96dd71300cf610ee1aa2bd59554523806747c",
    "filename": "parquet/src/main/java/org/apache/iceberg/data/parquet/BaseParquetReaders.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/apache/iceberg/blob/2baeea50ce8327b3a7e45e6a87c937b9acbd7cab/parquet/src/main/java/org/apache/iceberg/data/parquet/BaseParquetReaders.java",
    "raw_url": "https://github.com/apache/iceberg/raw/2baeea50ce8327b3a7e45e6a87c937b9acbd7cab/parquet/src/main/java/org/apache/iceberg/data/parquet/BaseParquetReaders.java",
    "contents_url": "https://api.github.com/repos/apache/iceberg/contents/parquet/src/main/java/org/apache/iceberg/data/parquet/BaseParquetReaders.java?ref=2baeea50ce8327b3a7e45e6a87c937b9acbd7cab",
    "patch": "@@ -239,10 +239,10 @@ private ReadBuilder(MessageType type, Map<Integer, ?> idToConstant) {\n             if (expected.typeId() == org.apache.iceberg.types.Type.TypeID.LONG) {\n               return new ParquetValueReaders.IntAsLongReader(desc);\n             } else {\n-              return new ParquetValueReaders.UnboxedReader<>(desc);\n+              return new ParquetValueReaders.IntReader(desc);\n             }\n           case INT_64:\n-            return new ParquetValueReaders.UnboxedReader<>(desc);\n+            return new ParquetValueReaders.LongReader(desc);\n           case DATE:\n             return new DateReader(desc);\n           case TIMESTAMP_MICROS:\n@@ -294,18 +294,20 @@ private ReadBuilder(MessageType type, Map<Integer, ?> idToConstant) {\n           if (expected != null && expected.typeId() == org.apache.iceberg.types.Type.TypeID.LONG) {\n             return new ParquetValueReaders.IntAsLongReader(desc);\n           } else {\n-            return new ParquetValueReaders.UnboxedReader<>(desc);\n+            return new ParquetValueReaders.IntReader(desc);\n           }\n         case FLOAT:\n           if (expected != null && expected.typeId() == org.apache.iceberg.types.Type.TypeID.DOUBLE) {\n             return new ParquetValueReaders.FloatAsDoubleReader(desc);\n           } else {\n-            return new ParquetValueReaders.UnboxedReader<>(desc);\n+            return new ParquetValueReaders.FloatReader(desc);\n           }\n         case BOOLEAN:\n+          return new ParquetValueReaders.BooleanReader(desc);\n         case INT64:\n+          return new ParquetValueReaders.LongReader(desc);\n         case DOUBLE:\n-          return new ParquetValueReaders.UnboxedReader<>(desc);\n+          return new ParquetValueReaders.DoubleReader(desc);\n         case INT96:\n           // Impala & Spark used to write timestamps as INT96 without a logical type. For backwards\n           // compatibility we try to read INT96 as timestamps."
  },
  {
    "sha": "8fd05c9530d00336291b91e84b5eac27db88423d",
    "filename": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReader.java",
    "status": "modified",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://github.com/apache/iceberg/blob/2baeea50ce8327b3a7e45e6a87c937b9acbd7cab/parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReader.java",
    "raw_url": "https://github.com/apache/iceberg/raw/2baeea50ce8327b3a7e45e6a87c937b9acbd7cab/parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReader.java",
    "contents_url": "https://api.github.com/repos/apache/iceberg/contents/parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReader.java?ref=2baeea50ce8327b3a7e45e6a87c937b9acbd7cab",
    "patch": "@@ -30,4 +30,49 @@\n   List<TripleIterator<?>> columns();\n \n   void setPageSource(PageReadStore pageStore, long rowPosition);\n+\n+  interface OfBoolean extends ParquetValueReader<Boolean> {\n+    @Override\n+    default Boolean read(Boolean ignored) {\n+      return readBoolean();\n+    }\n+\n+    boolean readBoolean();\n+  }\n+\n+  interface OfInt extends ParquetValueReader<Integer> {\n+    @Override\n+    default Integer read(Integer ignored) {\n+      return readInteger();\n+    }\n+\n+    int readInteger();\n+  }\n+\n+  interface OfLong extends ParquetValueReader<Long> {\n+    @Override\n+    default Long read(Long ignored) {\n+      return readLong();\n+    }\n+\n+    long readLong();\n+  }\n+\n+  interface OfFloat extends ParquetValueReader<Float> {\n+    @Override\n+    default Float read(Float ignored) {\n+      return readFloat();\n+    }\n+\n+    float readFloat();\n+  }\n+\n+  interface OfDouble extends ParquetValueReader<Double> {\n+    @Override\n+    default Double read(Double ignored) {\n+      return readDouble();\n+    }\n+\n+    double readDouble();\n+  }\n }"
  },
  {
    "sha": "4dee0f3061359cb2e9750635a5c0126f7668c21c",
    "filename": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReaders.java",
    "status": "modified",
    "additions": 77,
    "deletions": 58,
    "changes": 135,
    "blob_url": "https://github.com/apache/iceberg/blob/2baeea50ce8327b3a7e45e6a87c937b9acbd7cab/parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReaders.java",
    "raw_url": "https://github.com/apache/iceberg/raw/2baeea50ce8327b3a7e45e6a87c937b9acbd7cab/parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReaders.java",
    "contents_url": "https://api.github.com/repos/apache/iceberg/contents/parquet/src/main/java/org/apache/iceberg/parquet/ParquetValueReaders.java?ref=2baeea50ce8327b3a7e45e6a87c937b9acbd7cab",
    "patch": "@@ -196,6 +196,65 @@ public void setPageSource(PageReadStore pageStore, long rowPosition) {\n     }\n   }\n \n+  public static class BooleanReader extends PrimitiveReader<Boolean> implements ParquetValueReader.OfBoolean {\n+\n+    public BooleanReader(ColumnDescriptor desc) {\n+      super(desc);\n+    }\n+\n+    @Override\n+    public boolean readBoolean() {\n+      return column.nextBoolean();\n+    }\n+  }\n+\n+  public static class IntReader extends PrimitiveReader<Integer> implements ParquetValueReader.OfInt {\n+    public IntReader(ColumnDescriptor desc) {\n+      super(desc);\n+    }\n+\n+    @Override\n+    public int readInteger() {\n+      return column.nextInteger();\n+    }\n+  }\n+\n+  public static class LongReader extends PrimitiveReader<Long> implements ParquetValueReader.OfLong {\n+\n+    public LongReader(ColumnDescriptor desc) {\n+      super(desc);\n+    }\n+\n+    @Override\n+    public long readLong() {\n+      return column.nextLong();\n+    }\n+  }\n+\n+  public static class FloatReader extends PrimitiveReader<Float> implements ParquetValueReader.OfFloat {\n+\n+    public FloatReader(ColumnDescriptor desc) {\n+      super(desc);\n+    }\n+\n+    @Override\n+    public float readFloat() {\n+      return column.nextFloat();\n+    }\n+  }\n+\n+  public static class DoubleReader extends PrimitiveReader<Double> implements ParquetValueReader.OfDouble {\n+\n+    public DoubleReader(ColumnDescriptor desc) {\n+      super(desc);\n+    }\n+\n+    @Override\n+    public double readDouble() {\n+      return column.nextDouble();\n+    }\n+  }\n+\n   public static class UnboxedReader<T> extends PrimitiveReader<T> {\n     public UnboxedReader(ColumnDescriptor desc) {\n       super(desc);\n@@ -243,35 +302,25 @@ public String read(String reuse) {\n     }\n   }\n \n-  public static class IntAsLongReader extends UnboxedReader<Long> {\n+  public static class IntAsLongReader extends LongReader {\n     public IntAsLongReader(ColumnDescriptor desc) {\n       super(desc);\n     }\n \n-    @Override\n-    public Long read(Long ignored) {\n-      return readLong();\n-    }\n-\n     @Override\n     public long readLong() {\n-      return super.readInteger();\n+      return column.nextInteger();\n     }\n   }\n \n-  public static class FloatAsDoubleReader extends UnboxedReader<Double> {\n+  public static class FloatAsDoubleReader extends DoubleReader {\n     public FloatAsDoubleReader(ColumnDescriptor desc) {\n       super(desc);\n     }\n \n-    @Override\n-    public Double read(Double ignored) {\n-      return readDouble();\n-    }\n-\n     @Override\n     public double readDouble() {\n-      return super.readFloat();\n+      return column.nextFloat();\n     }\n   }\n \n@@ -651,27 +700,20 @@ public V setValue(V newValue) {\n   }\n \n   public abstract static class StructReader<T, I> implements ParquetValueReader<T> {\n-    private interface Setter<R> {\n-      void set(R record, int pos, Object reuse);\n-    }\n-\n     private final ParquetValueReader<?>[] readers;\n     private final TripleIterator<?> column;\n     private final List<TripleIterator<?>> children;\n \n-    @SuppressWarnings(\"unchecked\")\n     protected StructReader(List<Type> types, List<ParquetValueReader<?>> readers) {\n       this.readers = (ParquetValueReader<?>[]) Array.newInstance(\n           ParquetValueReader.class, readers.size());\n       TripleIterator<?>[] columns = (TripleIterator<?>[]) Array.newInstance(TripleIterator.class, readers.size());\n-      Setter<I>[] setters = (Setter<I>[]) Array.newInstance(Setter.class, readers.size());\n \n       ImmutableList.Builder<TripleIterator<?>> columnsBuilder = ImmutableList.builder();\n       for (int i = 0; i < readers.size(); i += 1) {\n         ParquetValueReader<?> reader = readers.get(i);\n         this.readers[i] = readers.get(i);\n         columns[i] = reader.column();\n-        setters[i] = newSetter(reader, types.get(i));\n         columnsBuilder.addAll(reader.columns());\n       }\n \n@@ -696,8 +738,20 @@ public final T read(T reuse) {\n       I intermediate = newStructData(reuse);\n \n       for (int i = 0; i < readers.length; i += 1) {\n-        set(intermediate, i, readers[i].read(get(intermediate, i)));\n-        // setters[i].set(intermediate, i, get(intermediate, i));\n+        final ParquetValueReader<?> reader = readers[i];\n+        if (reader instanceof ParquetValueReader.OfBoolean) {\n+          setBoolean(intermediate, i, ((OfBoolean) reader).readBoolean());\n+        } else if (reader instanceof ParquetValueReader.OfInt) {\n+          setInteger(intermediate, i, ((OfInt) reader).readInteger());\n+        } else if (reader instanceof ParquetValueReader.OfLong) {\n+          setLong(intermediate, i, ((OfLong) reader).readLong());\n+        } else if (reader instanceof ParquetValueReader.OfFloat) {\n+          setFloat(intermediate, i, ((OfFloat) reader).readFloat());\n+        } else if (reader instanceof ParquetValueReader.OfDouble) {\n+          setDouble(intermediate, i, ((OfDouble) reader).readDouble());\n+        } else {\n+          set(intermediate, i, reader.read(get(intermediate, i)));\n+        }\n       }\n \n       return buildStruct(intermediate);\n@@ -708,41 +762,6 @@ public final T read(T reuse) {\n       return children;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private <E> Setter<I> newSetter(ParquetValueReader<E> reader, Type type) {\n-      if (reader instanceof UnboxedReader && type.isPrimitive()) {\n-        UnboxedReader<?> unboxed  = (UnboxedReader<?>) reader;\n-        switch (type.asPrimitiveType().getPrimitiveTypeName()) {\n-          case BOOLEAN:\n-            return (record, pos, ignored) -> setBoolean(record, pos, unboxed.readBoolean());\n-          case INT32:\n-            return (record, pos, ignored) -> setInteger(record, pos, unboxed.readInteger());\n-          case INT64:\n-            return (record, pos, ignored) -> setLong(record, pos, unboxed.readLong());\n-          case FLOAT:\n-            return (record, pos, ignored) -> setFloat(record, pos, unboxed.readFloat());\n-          case DOUBLE:\n-            return (record, pos, ignored) -> setDouble(record, pos, unboxed.readDouble());\n-          case INT96:\n-          case FIXED_LEN_BYTE_ARRAY:\n-          case BINARY:\n-            return (record, pos, ignored) -> set(record, pos, unboxed.readBinary());\n-          default:\n-            throw new UnsupportedOperationException(\"Unsupported type: \" + type);\n-        }\n-      }\n-\n-      // TODO: Add support for options to avoid the null check\n-      return (record, pos, reuse) -> {\n-        Object obj = reader.read((E) reuse);\n-        if (obj != null) {\n-          set(record, pos, obj);\n-        } else {\n-          setNull(record, pos);\n-        }\n-      };\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n     private <E> E get(I intermediate, int pos) {\n       return (E) getField(intermediate, pos);"
  }
]
