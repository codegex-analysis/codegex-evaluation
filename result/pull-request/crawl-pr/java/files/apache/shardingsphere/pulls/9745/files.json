[
  {
    "sha": "4e4d4376424e8b081888b62a108c106536a4d872",
    "filename": "docs/document/content/features/sharding/use-norms/pagination.cn.md",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/shardingsphere/blob/00186243003e64d184c68b50709b6e2fb7605961/docs/document/content/features/sharding/use-norms/pagination.cn.md",
    "raw_url": "https://github.com/apache/shardingsphere/raw/00186243003e64d184c68b50709b6e2fb7605961/docs/document/content/features/sharding/use-norms/pagination.cn.md",
    "contents_url": "https://api.github.com/repos/apache/shardingsphere/contents/docs/document/content/features/sharding/use-norms/pagination.cn.md?ref=00186243003e64d184c68b50709b6e2fb7605961",
    "patch": "@@ -32,7 +32,7 @@ ShardingSphere进行了2个方面的优化。\n 首先，采用流式处理 + 归并排序的方式来避免内存的过量占用。由于SQL改写不可避免的占用了额外的带宽，但并不会导致内存暴涨。\n 与直觉不同，大多数人认为ShardingSphere会将`1,000,010 * 2`记录全部加载至内存，进而占用大量内存而导致内存溢出。\n 但由于每个结果集的记录是有序的，因此ShardingSphere每次比较仅获取各个分片的当前结果集记录，驻留在内存中的记录仅为当前路由到的分片的结果集的当前游标指向而已。\n-对于本身即有序的待排序对象，归并排序的时间复杂度仅为`O(n)`，性能损耗很小。\n+对于本身即有序的待排序对象，归并排序的时间复杂度仅为`O(nlogn)`，性能损耗很小。\n \n 其次，ShardingSphere对仅落至单分片的查询进行进一步优化。\n 落至单分片查询的请求并不需要改写SQL也可以保证记录的正确性，因此在此种情况下，ShardingSphere并未进行SQL改写，从而达到节省带宽的目的。"
  }
]
