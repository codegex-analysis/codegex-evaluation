[
  {
    "sha": "2f88f7c5dcb1f45436b576e99265b9164475c1c8",
    "filename": "test/unit/org/apache/cassandra/cql3/CQLTester.java",
    "status": "modified",
    "additions": 11,
    "deletions": 3,
    "changes": 14,
    "blob_url": "https://github.com/apache/cassandra/blob/87073f72b5221180d2f9705bb00a1370723aee90/test/unit/org/apache/cassandra/cql3/CQLTester.java",
    "raw_url": "https://github.com/apache/cassandra/raw/87073f72b5221180d2f9705bb00a1370723aee90/test/unit/org/apache/cassandra/cql3/CQLTester.java",
    "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/cql3/CQLTester.java?ref=87073f72b5221180d2f9705bb00a1370723aee90",
    "patch": "@@ -422,10 +422,15 @@ protected static void requireNetwork(Consumer<Server.Builder> decorator) throws\n         VirtualKeyspaceRegistry.instance.register(VirtualSchemaKeyspace.instance);\n         StorageService.instance.initServer();\n         SchemaLoader.startGossiper();\n-        initializeNetwork(decorator);\n+        initializeNetwork(decorator, null);\n     }\n \n     protected static void reinitializeNetwork()\n+    {\n+        reinitializeNetwork(null);\n+    }\n+\n+    protected static void reinitializeNetwork(Consumer<Cluster.Builder> clusterConfigurator)\n     {\n         if (server != null && server.isRunning())\n         {\n@@ -441,10 +446,10 @@ protected static void reinitializeNetwork()\n         clusters.clear();\n         sessions.clear();\n \n-        initializeNetwork(server -> {});\n+        initializeNetwork(server -> {}, clusterConfigurator);\n     }\n \n-    private static void initializeNetwork(Consumer<Server.Builder> decorator)\n+    private static void initializeNetwork(Consumer<Server.Builder> decorator, Consumer<Cluster.Builder> clusterConfigurator)\n     {\n         Server.Builder serverBuilder = new Server.Builder().withHost(nativeAddr).withPort(nativePort);\n         decorator.accept(serverBuilder);\n@@ -470,6 +475,9 @@ private static void initializeNetwork(Consumer<Server.Builder> decorator)\n                                              .withPort(nativePort)\n                                              .withSocketOptions(socketOptions);\n \n+            if (clusterConfigurator != null)\n+                clusterConfigurator.accept(builder);\n+\n             if (version.isBeta())\n                 builder = builder.allowBetaProtocolVersion();\n             else"
  },
  {
    "sha": "1f2f771e5c41b01eb08e4334f1265c7a733e4604",
    "filename": "test/unit/org/apache/cassandra/metrics/ClientRequestSizeMetricsTest.java",
    "status": "modified",
    "additions": 30,
    "deletions": 20,
    "changes": 50,
    "blob_url": "https://github.com/apache/cassandra/blob/87073f72b5221180d2f9705bb00a1370723aee90/test/unit/org/apache/cassandra/metrics/ClientRequestSizeMetricsTest.java",
    "raw_url": "https://github.com/apache/cassandra/raw/87073f72b5221180d2f9705bb00a1370723aee90/test/unit/org/apache/cassandra/metrics/ClientRequestSizeMetricsTest.java",
    "contents_url": "https://api.github.com/repos/apache/cassandra/contents/test/unit/org/apache/cassandra/metrics/ClientRequestSizeMetricsTest.java?ref=87073f72b5221180d2f9705bb00a1370723aee90",
    "patch": "@@ -29,7 +29,7 @@\n import com.codahale.metrics.Counter;\n import com.codahale.metrics.Histogram;\n import com.codahale.metrics.Snapshot;\n-\n+import com.datastax.driver.core.QueryOptions;\n import org.apache.cassandra.cql3.CQLTester;\n import org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir.EstimatedHistogramReservoirSnapshot;\n import org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir.Range;\n@@ -52,7 +52,7 @@\n     public static Collection<Object[]> versions()\n     {\n         return ProtocolVersion.SUPPORTED.stream()\n-                                        .map(v -> new Object[]{v})\n+                                        .map(v -> new Object[]{ v })\n                                         .collect(Collectors.toList());\n     }\n \n@@ -65,24 +65,34 @@ public static void setUp()\n     @Test\n     public void testReadAndWriteMetricsAreRecordedDuringNativeRequests() throws Throwable\n     {\n-        // We want to ignore all the messages sent by the driver upon connection as well as\n-        // the event sent upon schema updates\n-        clearMetrics();\n-\n-        executeNet(version, \"SELECT * from system.peers\");\n-\n-        long requestLength = ClientMessageSizeMetrics.bytesReceived.getCount();\n-        long responseLength = ClientMessageSizeMetrics.bytesSent.getCount();\n-\n-        assertThat(requestLength).isGreaterThan(0);\n-        assertThat(responseLength).isGreaterThan(0);\n-\n-        checkMetrics(1, requestLength, responseLength);\n-\n-        // Let's fire the same request again and test that the changes are the same that previously\n-        executeNet(version, \"SELECT * from system.peers\");\n-\n-        checkMetrics(2, requestLength, responseLength);\n+        // It may happen that the schema refreshment is done in the middle of the test which can pollute the results\n+        // We explicitly disable scheme fetching to avoid that effect\n+        try\n+        {\n+            reinitializeNetwork(builder -> builder.withQueryOptions(new QueryOptions().setMetadataEnabled(false)));\n+            // We want to ignore all the messages sent by the driver upon connection as well as\n+            // the event sent upon schema updates\n+            clearMetrics();\n+\n+            executeNet(version, \"SELECT * from system.peers\");\n+\n+            long requestLength = ClientMessageSizeMetrics.bytesReceived.getCount();\n+            long responseLength = ClientMessageSizeMetrics.bytesSent.getCount();\n+\n+            assertThat(requestLength).isGreaterThan(0);\n+            assertThat(responseLength).isGreaterThan(0);\n+\n+            checkMetrics(1, requestLength, responseLength);\n+\n+            // Let's fire the same request again and test that the changes are the same that previously\n+            executeNet(version, \"SELECT * from system.peers\");\n+\n+            checkMetrics(2, requestLength, responseLength);\n+        }\n+        finally\n+        {\n+            reinitializeNetwork();\n+        }\n     }\n \n     private void checkMetrics(int numberOfRequests, long requestLength, long responseLength)"
  }
]
