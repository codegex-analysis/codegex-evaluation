[
  {
    "sha": "358db351513307f8c0737584881dc309defcebb6",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/pulsar/blob/e7f6592fece5621a0cc2914c64e5e28288413d5e/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
    "raw_url": "https://github.com/apache/pulsar/raw/e7f6592fece5621a0cc2914c64e5e28288413d5e/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/admin/impl/NamespacesBase.java?ref=e7f6592fece5621a0cc2914c64e5e28288413d5e",
    "patch": "@@ -2549,8 +2549,8 @@ protected void internalSetMaxTopicsPerNamespace(Integer maxTopicsPerNamespace) {\n    private void updatePolicies(String path, Function<Policies, Policies> updateFunction) {\n        try {\n            // Force to read the data s.t. the watch to the cache content is setup.\n-           namespaceResources().set(path(POLICIES, namespaceName.toString()), updateFunction);\n-           log.info(\"[{}] Successfully updated the on namespace {}\", clientAppId(), path, namespaceName);\n+           namespaceResources().set(path, updateFunction);\n+           log.info(\"[{}] Successfully updated the {} on namespace {}\", clientAppId(), path, namespaceName);\n        } catch (NotFoundException e) {\n            log.warn(\"[{}] Namespace {}: does not exist\", clientAppId(), namespaceName);\n            throw new RestException(Status.NOT_FOUND, \"Namespace does not exist\");"
  },
  {
    "sha": "c9a4284a109f4aee1f554653e851b06cdd105689",
    "filename": "pulsar-metadata/src/main/java/org/apache/pulsar/metadata/cache/impl/MetadataCacheImpl.java",
    "status": "modified",
    "additions": 11,
    "deletions": 2,
    "changes": 13,
    "blob_url": "https://github.com/apache/pulsar/blob/e7f6592fece5621a0cc2914c64e5e28288413d5e/pulsar-metadata/src/main/java/org/apache/pulsar/metadata/cache/impl/MetadataCacheImpl.java",
    "raw_url": "https://github.com/apache/pulsar/raw/e7f6592fece5621a0cc2914c64e5e28288413d5e/pulsar-metadata/src/main/java/org/apache/pulsar/metadata/cache/impl/MetadataCacheImpl.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-metadata/src/main/java/org/apache/pulsar/metadata/cache/impl/MetadataCacheImpl.java?ref=e7f6592fece5621a0cc2914c64e5e28288413d5e",
    "patch": "@@ -24,6 +24,7 @@\n import com.github.benmanes.caffeine.cache.AsyncLoadingCache;\n import com.github.benmanes.caffeine.cache.Caffeine;\n import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n import java.util.AbstractMap.SimpleImmutableEntry;\n import java.util.List;\n import java.util.Map;\n@@ -46,7 +47,6 @@\n import org.apache.pulsar.metadata.api.MetadataStoreException.NotFoundException;\n import org.apache.pulsar.metadata.api.Notification;\n import org.apache.pulsar.metadata.api.Stat;\n-import org.checkerframework.checker.nullness.Opt;\n \n public class MetadataCacheImpl<T> implements MetadataCache<T>, Consumer<Notification> {\n \n@@ -127,7 +127,14 @@ private MetadataCacheImpl(MetadataStore store, MetadataSerde<T> serde) {\n                     long expectedVersion;\n \n                     if (optEntry.isPresent()) {\n-                        currentValue = Optional.of(optEntry.get().getKey());\n+                        T clone;\n+                        try {\n+                            // Use clone and CAS zk to ensure thread safety\n+                            clone = serde.deserialize(serde.serialize(optEntry.get().getKey()));\n+                        } catch (IOException e) {\n+                            return FutureUtils.exception(e);\n+                        }\n+                        currentValue = Optional.of(clone);\n                         expectedVersion = optEntry.get().getValue().getVersion();\n                     } else {\n                         currentValue = Optional.empty();\n@@ -166,6 +173,8 @@ private MetadataCacheImpl(MetadataStore store, MetadataSerde<T> serde) {\n                     T newValueObj;\n                     byte[] newValue;\n                     try {\n+                        // Use clone and CAS zk to ensure thread safety\n+                        currentValue = serde.deserialize(serde.serialize(currentValue));\n                         newValueObj = modifyFunction.apply(currentValue);\n                         newValue = serde.serialize(newValueObj);\n                     } catch (Throwable t) {"
  },
  {
    "sha": "5c68cfb85b9ae698485995fd2fdf99264561d25e",
    "filename": "pulsar-metadata/src/test/java/org/apache/pulsar/metadata/MetadataCacheTest.java",
    "status": "modified",
    "additions": 83,
    "deletions": 0,
    "changes": 83,
    "blob_url": "https://github.com/apache/pulsar/blob/e7f6592fece5621a0cc2914c64e5e28288413d5e/pulsar-metadata/src/test/java/org/apache/pulsar/metadata/MetadataCacheTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/e7f6592fece5621a0cc2914c64e5e28288413d5e/pulsar-metadata/src/test/java/org/apache/pulsar/metadata/MetadataCacheTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-metadata/src/test/java/org/apache/pulsar/metadata/MetadataCacheTest.java?ref=e7f6592fece5621a0cc2914c64e5e28288413d5e",
    "patch": "@@ -19,6 +19,9 @@\n package org.apache.pulsar.metadata;\n \n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertNotSame;\n+import static org.testng.Assert.assertSame;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n@@ -27,10 +30,13 @@\n import java.util.Optional;\n import java.util.TreeMap;\n import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n import lombok.AllArgsConstructor;\n import lombok.Cleanup;\n import lombok.Data;\n import lombok.NoArgsConstructor;\n+import org.apache.pulsar.common.policies.data.Policies;\n import org.apache.pulsar.common.util.ObjectMapperFactory;\n import org.apache.pulsar.metadata.api.MetadataCache;\n import org.apache.pulsar.metadata.api.MetadataStore;\n@@ -189,6 +195,83 @@ public void invalidJsonContent(String provider, String url) throws Exception {\n         assertEquals(objCache.getIfCached(key1), Optional.empty());\n     }\n \n+    @Test(dataProvider = \"impl\")\n+    public void testReadCloned(String provider, String url) throws Exception {\n+        @Cleanup\n+        MetadataStore store = MetadataStoreFactory.create(url, MetadataStoreConfig.builder().build());\n+\n+        MetadataCache<Policies> objCache = store.getMetadataCache(Policies.class);\n+        String path = \"/testReadCloned-policies\";\n+        // init cache\n+        Policies policies = new Policies();\n+        policies.max_unacked_messages_per_consumer = 100;\n+        policies.replication_clusters.add(\"1\");\n+        objCache.create(path, policies).get();\n+\n+        Policies tempPolicies = objCache.get(path).get().get();\n+        assertSame(tempPolicies, objCache.get(path).get().get());\n+        AtomicReference<Policies> reference = new AtomicReference<>(new Policies());\n+        AtomicReference<Policies> reference2 = new AtomicReference<>(new Policies());\n+\n+        objCache.readModifyUpdate(path, (policies1) -> {\n+            assertNotSame(policies1, tempPolicies);\n+            reference.set(policies1);\n+            policies1.max_unacked_messages_per_consumer = 200;\n+            return policies1;\n+        }).get();\n+        objCache.readModifyUpdate(path, (policies1) -> {\n+            assertNotSame(policies1, tempPolicies);\n+            reference2.set(policies1);\n+            policies1.max_unacked_messages_per_consumer = 300;\n+            return policies1;\n+        }).get();\n+        //The original object should not be modified\n+        assertEquals(tempPolicies.max_unacked_messages_per_consumer.intValue(), 100);\n+        assertNotSame(reference.get(), reference2.get());\n+        assertNotEquals(reference.get().max_unacked_messages_per_consumer\n+                , reference2.get().max_unacked_messages_per_consumer);\n+\n+    }\n+\n+    @Test(dataProvider = \"impl\")\n+    public void testCloneInReadModifyUpdateOrCreate(String provider, String url) throws Exception {\n+        @Cleanup\n+        MetadataStore store = MetadataStoreFactory.create(url, MetadataStoreConfig.builder().build());\n+\n+        MetadataCache<Policies> objCache = store.getMetadataCache(Policies.class);\n+        String path = \"/testCloneInReadModifyUpdateOrCreate-policies\";\n+        // init cache\n+        Policies policies = new Policies();\n+        policies.max_unacked_messages_per_consumer = 100;\n+        objCache.create(path, policies).get();\n+\n+        Policies tempPolicies = objCache.get(path).get().get();\n+        assertSame(tempPolicies, objCache.get(path).get().get());\n+        AtomicReference<Policies> reference = new AtomicReference<>(new Policies());\n+        AtomicReference<Policies> reference2 = new AtomicReference<>(new Policies());\n+\n+        objCache.readModifyUpdateOrCreate(path, (policies1) -> {\n+            Policies policiesRef = policies1.get();\n+            assertNotSame(policiesRef, tempPolicies);\n+            reference.set(policiesRef);\n+            policiesRef.max_unacked_messages_per_consumer = 200;\n+            return policiesRef;\n+        }).get();\n+        objCache.readModifyUpdateOrCreate(path, (policies1) -> {\n+            Policies policiesRef = policies1.get();\n+            assertNotSame(policiesRef, tempPolicies);\n+            reference2.set(policiesRef);\n+            policiesRef.max_unacked_messages_per_consumer = 300;\n+            return policiesRef;\n+        }).get();\n+        //The original object should not be modified\n+        assertEquals(tempPolicies.max_unacked_messages_per_consumer.intValue(), 100);\n+        assertNotSame(reference.get(), reference2.get());\n+        assertNotEquals(reference.get().max_unacked_messages_per_consumer\n+                , reference2.get().max_unacked_messages_per_consumer);\n+\n+    }\n+\n     @Test(dataProvider = \"impl\")\n     public void readModifyUpdate(String provider, String url) throws Exception {\n         @Cleanup"
  }
]
