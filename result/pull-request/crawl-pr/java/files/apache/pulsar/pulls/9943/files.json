[
  {
    "sha": "f2c51474ff143289baed42788904f2d017de6396",
    "filename": "pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/SourceConfigUtils.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/apache/pulsar/blob/6ed41928e8efd1db9affdaa6cb335cbd02de5490/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/SourceConfigUtils.java",
    "raw_url": "https://github.com/apache/pulsar/raw/6ed41928e8efd1db9affdaa6cb335cbd02de5490/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/SourceConfigUtils.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/utils/src/main/java/org/apache/pulsar/functions/utils/SourceConfigUtils.java?ref=6ed41928e8efd1db9affdaa6cb335cbd02de5490",
    "patch": "@@ -148,6 +148,8 @@ public static FunctionDetails convert(SourceConfig sourceConfig, ExtractedSource\n             sinkSpecBuilder.setProducerSpec(ProducerConfigUtils.convert(sourceConfig.getProducerConfig()));\n         }\n \n+        sinkSpecBuilder.setForwardSourceMessageProperty(true);\n+\n         functionDetailsBuilder.setSink(sinkSpecBuilder);\n \n         // use default resources if resources not set"
  },
  {
    "sha": "245929b8c9c9ea1406210566b6e4046d3e394589",
    "filename": "tests/docker-images/java-test-functions/src/main/java/org/apache/pulsar/tests/integration/io/TestPropertySource.java",
    "status": "added",
    "additions": 63,
    "deletions": 0,
    "changes": 63,
    "blob_url": "https://github.com/apache/pulsar/blob/6ed41928e8efd1db9affdaa6cb335cbd02de5490/tests/docker-images/java-test-functions/src/main/java/org/apache/pulsar/tests/integration/io/TestPropertySource.java",
    "raw_url": "https://github.com/apache/pulsar/raw/6ed41928e8efd1db9affdaa6cb335cbd02de5490/tests/docker-images/java-test-functions/src/main/java/org/apache/pulsar/tests/integration/io/TestPropertySource.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/docker-images/java-test-functions/src/main/java/org/apache/pulsar/tests/integration/io/TestPropertySource.java?ref=6ed41928e8efd1db9affdaa6cb335cbd02de5490",
    "patch": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.tests.integration.io;\n+\n+import org.apache.pulsar.functions.api.Record;\n+import org.apache.pulsar.io.core.Source;\n+import org.apache.pulsar.io.core.SourceContext;\n+\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class TestPropertySource implements Source<String> {\n+\n+    @Override\n+    public void open(Map<String, Object> config, SourceContext sourceContext) throws Exception {\n+    }\n+\n+    @Override\n+    public Record<String> read() throws Exception {\n+        Thread.sleep(50);\n+        return new Record<String>() {\n+            @Override\n+            public Optional<String> getKey() {\n+                return Optional.empty();\n+            }\n+\n+            @Override\n+            public String getValue() {\n+                return \"property\";\n+            }\n+            @Override\n+            public Map<String, String> getProperties() {\n+                HashMap<String, String> props = new HashMap<String, String>();\n+                props.put(\"hello\", \"world\");\n+                props.put(\"foo\", \"bar\");\n+                return props;\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+\n+    }\n+}"
  },
  {
    "sha": "70452d4211495b59c93c48013c86868b5f16401a",
    "filename": "tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/PulsarSourcePropertyTest.java",
    "status": "added",
    "additions": 170,
    "deletions": 0,
    "changes": 170,
    "blob_url": "https://github.com/apache/pulsar/blob/6ed41928e8efd1db9affdaa6cb335cbd02de5490/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/PulsarSourcePropertyTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/6ed41928e8efd1db9affdaa6cb335cbd02de5490/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/PulsarSourcePropertyTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/PulsarSourcePropertyTest.java?ref=6ed41928e8efd1db9affdaa6cb335cbd02de5490",
    "patch": "@@ -0,0 +1,170 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.tests.integration.io;\n+\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pulsar.client.admin.PulsarAdmin;\n+import org.apache.pulsar.client.admin.PulsarAdminException;\n+import org.apache.pulsar.client.api.Consumer;\n+import org.apache.pulsar.client.api.Message;\n+import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.api.Schema;\n+import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.common.functions.FunctionState;\n+import org.apache.pulsar.common.policies.data.SinkStatus;\n+import org.apache.pulsar.common.policies.data.SourceStatus;\n+import org.apache.pulsar.tests.integration.docker.ContainerExecException;\n+import org.apache.pulsar.tests.integration.docker.ContainerExecResult;\n+import org.apache.pulsar.tests.integration.functions.utils.CommandGenerator;\n+import org.apache.pulsar.tests.integration.functions.utils.CommandGenerator.Runtime;\n+import org.apache.pulsar.tests.integration.suites.PulsarStandaloneTestSuite;\n+import org.apache.pulsar.tests.integration.topologies.PulsarCluster;\n+import org.awaitility.Awaitility;\n+import org.testng.annotations.Test;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.apache.pulsar.tests.integration.functions.utils.CommandGenerator.JAVAJAR;\n+import static org.apache.pulsar.tests.integration.suites.PulsarTestSuite.retryStrategically;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+/**\n+ * Source Property related test cases.\n+ */\n+@Slf4j\n+public class PulsarSourcePropertyTest extends PulsarStandaloneTestSuite {\n+    @Test(groups = {\"source\"})\n+    public void testSourceProperty() throws Exception {\n+        String outputTopicName = \"test-source-property-input-\" + randomName(8);\n+        String sourceName = \"test-source-property-\" + randomName(8);\n+        submitSourceConnector(sourceName, outputTopicName, \"org.apache.pulsar.tests.integration.io.TestPropertySource\",  JAVAJAR);\n+\n+        // get source info\n+        getSourceInfoSuccess(sourceName);\n+\n+        // get source status\n+        getSourceStatus(sourceName);\n+\n+        try (PulsarAdmin admin = PulsarAdmin.builder().serviceHttpUrl(container.getHttpServiceUrl()).build()) {\n+\n+            Awaitility.await().ignoreExceptions().untilAsserted(() -> {\n+                SourceStatus status = admin.sources().getSourceStatus(\"public\", \"default\", sourceName);\n+                assertEquals(status.getInstances().size(), 1);\n+                assertTrue(status.getInstances().get(0).getStatus().numWritten > 0);\n+            });\n+        }\n+\n+        @Cleanup PulsarClient client = PulsarClient.builder()\n+                .serviceUrl(container.getPlainTextServiceUrl())\n+                .build();\n+        @Cleanup Consumer<String> consumer = client.newConsumer(Schema.STRING)\n+                .topic(outputTopicName)\n+                .subscriptionType(SubscriptionType.Exclusive)\n+                .subscriptionName(\"test-sub\")\n+                .subscribe();\n+\n+        for (int i = 0; i < 10; i++) {\n+            Message<String> msg = consumer.receive();\n+            assertEquals(msg.getValue(), \"property\");\n+            assertEquals(msg.getProperty(\"hello\"), \"world\");\n+            assertEquals(msg.getProperty(\"foo\"), \"bar\");\n+        }\n+\n+        // delete source\n+        deleteSource(sourceName);\n+\n+        getSourceInfoNotFound(sourceName);\n+    }\n+\n+    private void submitSourceConnector(String sourceName,\n+                                       String outputTopicName,\n+                                       String className,\n+                                       String archive) throws Exception {\n+        String[] commands = {\n+                PulsarCluster.ADMIN_SCRIPT,\n+                \"sources\", \"create\",\n+                \"--name\", sourceName,\n+                \"--destinationTopicName\", outputTopicName,\n+                \"--archive\", archive,\n+                \"--classname\", className\n+        };\n+        log.info(\"Run command : {}\", StringUtils.join(commands, ' '));\n+        ContainerExecResult result = container.execCmd(commands);\n+        assertTrue(\n+                result.getStdout().contains(\"\\\"Created successfully\\\"\"),\n+                result.getStdout());\n+    }\n+\n+    private void getSourceInfoSuccess(String sourceName) throws Exception {\n+        ContainerExecResult result = container.execCmd(\n+                PulsarCluster.ADMIN_SCRIPT,\n+                \"sources\",\n+                \"get\",\n+                \"--tenant\", \"public\",\n+                \"--namespace\", \"default\",\n+                \"--name\", sourceName\n+        );\n+        assertTrue(result.getStdout().contains(\"\\\"name\\\": \\\"\" + sourceName + \"\\\"\"));\n+    }\n+\n+    private void getSourceStatus(String sourceName) throws Exception {\n+        ContainerExecResult result = container.execCmd(\n+                PulsarCluster.ADMIN_SCRIPT,\n+                \"sources\",\n+                \"status\",\n+                \"--tenant\", \"public\",\n+                \"--namespace\", \"default\",\n+                \"--name\", sourceName\n+        );\n+        assertTrue(result.getStdout().contains(\"\\\"running\\\" : true\"));\n+    }\n+\n+    private void deleteSource(String sourceName) throws Exception {\n+        ContainerExecResult result = container.execCmd(\n+                PulsarCluster.ADMIN_SCRIPT,\n+                \"sources\",\n+                \"delete\",\n+                \"--tenant\", \"public\",\n+                \"--namespace\", \"default\",\n+                \"--name\", sourceName\n+        );\n+        assertTrue(result.getStdout().contains(\"Delete source successfully\"));\n+        result.assertNoStderr();\n+    }\n+\n+    private void getSourceInfoNotFound(String sourceName) throws Exception {\n+        try {\n+            container.execCmd(\n+                    PulsarCluster.ADMIN_SCRIPT,\n+                    \"sources\",\n+                    \"get\",\n+                    \"--tenant\", \"public\",\n+                    \"--namespace\", \"default\",\n+                    \"--name\", sourceName);\n+            fail(\"Command should have exited with non-zero\");\n+        } catch (ContainerExecException e) {\n+            assertTrue(e.getResult().getStderr().contains(\"Reason: Source \" + sourceName + \" doesn't exist\"));\n+        }\n+    }\n+}\n+"
  },
  {
    "sha": "8da058d26cc3cdc1d8df58d9df8eb70892c2de2f",
    "filename": "tests/integration/src/test/resources/pulsar-function.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/6ed41928e8efd1db9affdaa6cb335cbd02de5490/tests/integration/src/test/resources/pulsar-function.xml",
    "raw_url": "https://github.com/apache/pulsar/raw/6ed41928e8efd1db9affdaa6cb335cbd02de5490/tests/integration/src/test/resources/pulsar-function.xml",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/tests/integration/src/test/resources/pulsar-function.xml?ref=6ed41928e8efd1db9affdaa6cb335cbd02de5490",
    "patch": "@@ -24,6 +24,7 @@\n         <classes>\n             <class name=\"org.apache.pulsar.tests.integration.functions.PulsarStateTest\" />\n             <class name=\"org.apache.pulsar.tests.integration.io.GenericRecordSourceTest\" />\n+            <class name=\"org.apache.pulsar.tests.integration.io.PulsarSourcePropertyTest\"/>\n         </classes>\n     </test>\n </suite>"
  }
]
