[
  {
    "sha": "d3176bbc6b7628ce932c2dd8d0bf5b0fdfba1833",
    "filename": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/LoadManagerReportResources.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/LoadManagerReportResources.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/LoadManagerReportResources.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/LoadManagerReportResources.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.resources;\n+\n+import org.apache.pulsar.metadata.api.extended.MetadataStoreExtended;\n+import org.apache.pulsar.policies.data.loadbalancer.LoadManagerReport;\n+\n+public class LoadManagerReportResources extends BaseResources<LoadManagerReport> {\n+\n+    public LoadManagerReportResources(MetadataStoreExtended configurationStore, int operationTimeoutSec) {\n+        super(configurationStore, LoadManagerReport.class, operationTimeoutSec);\n+    }\n+}"
  },
  {
    "sha": "862d3c1712daa36c63175fccf26a02c1b0311c6a",
    "filename": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/MetadataStoreCacheLoader.java",
    "status": "renamed",
    "additions": 43,
    "deletions": 57,
    "changes": 100,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/MetadataStoreCacheLoader.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/MetadataStoreCacheLoader.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/MetadataStoreCacheLoader.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -16,107 +16,93 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.pulsar.proxy.server.util;\n+package org.apache.pulsar.broker.resources;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.common.util.OrderedScheduler;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.pulsar.common.util.FutureUtil;\n-import org.apache.pulsar.common.util.ObjectMapperFactory;\n+import org.apache.pulsar.metadata.api.NotificationType;\n import org.apache.pulsar.policies.data.loadbalancer.LoadManagerReport;\n-import org.apache.pulsar.zookeeper.LocalZooKeeperCache;\n-import org.apache.pulsar.zookeeper.ZooKeeperCache;\n-import org.apache.pulsar.zookeeper.ZooKeeperChildrenCache;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory.SessionType;\n-import org.apache.pulsar.zookeeper.ZooKeeperDataCache;\n-import org.apache.zookeeper.KeeperException.NoNodeException;\n-import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- * Connects with ZooKeeper and sets watch to listen changes for active broker list.\n+ * Connects with MetadataStore and sets watch to listen changes for active broker list.\n  *\n  */\n-public class ZookeeperCacheLoader implements Closeable {\n+public class MetadataStoreCacheLoader implements Closeable {\n \n-    private final ZooKeeper zkClient;\n-    private final ZooKeeperCache localZkCache;\n-    private final ZooKeeperDataCache<LoadManagerReport> brokerInfo;\n-    private final ZooKeeperChildrenCache availableBrokersCache;\n+    private final LoadManagerReportResources loadReportResources;\n+    private final int operationTimeoutMs;\n \n     private volatile List<LoadManagerReport> availableBrokers;\n \n     private final OrderedScheduler orderedExecutor = OrderedScheduler.newSchedulerBuilder().numThreads(8)\n-            .name(\"pulsar-proxy-ordered-cache\").build();\n+            .name(\"pulsar-metadata-cache-loader-ordered-cache\").build();\n \n     public static final String LOADBALANCE_BROKERS_ROOT = \"/loadbalance/brokers\";\n \n+    public MetadataStoreCacheLoader(PulsarResources pulsarResources, int operationTimeoutMs) throws Exception {\n+        this.loadReportResources = pulsarResources.getLoadReportResources();\n+        this.operationTimeoutMs = operationTimeoutMs;\n+        init();\n+    }\n+\n     /**\n      * Initialize ZooKeeper session and creates broker cache list\n      *\n      * @param zookeeperServers\n      * @throws Exception\n      */\n-    public ZookeeperCacheLoader(ZooKeeperClientFactory factory, String zookeeperServers, int zookeeperSessionTimeoutMs) throws Exception {\n-        this.zkClient = factory.create(zookeeperServers, SessionType.AllowReadOnly, zookeeperSessionTimeoutMs).get();\n-        int zkOperationTimeoutSeconds = (int) TimeUnit.MILLISECONDS.toSeconds(zookeeperSessionTimeoutMs);\n-        this.localZkCache = new LocalZooKeeperCache(zkClient, zkOperationTimeoutSeconds, this.orderedExecutor);\n-\n-        this.brokerInfo = new ZooKeeperDataCache<LoadManagerReport>(localZkCache) {\n-            @Override\n-            public LoadManagerReport deserialize(String key, byte[] content) throws Exception {\n-                return ObjectMapperFactory.getThreadLocal().readValue(content, LoadManagerReport.class);\n+    public void init() throws Exception {\n+       \n+        loadReportResources.getStore().registerListener((n) -> {\n+            if(LOADBALANCE_BROKERS_ROOT.equals(n.getPath()) && NotificationType.ChildrenChanged.equals(n.getType())) {\n+                loadReportResources.getChildrenAsync(LOADBALANCE_BROKERS_ROOT).thenApplyAsync((brokerNodes)->{\n+                    updateBrokerList(brokerNodes).thenRun(() -> {\n+                        log.info(\"Successfully updated broker info {}\", brokerNodes);\n+                    }).exceptionally(ex -> {\n+                        log.warn(\"Error updating broker info after broker list changed\", ex);\n+                        return null;\n+                    });\n+                    return null;\n+                }).exceptionally(ex -> {\n+                    log.warn(\"Error updating broker info after broker list changed\", ex);\n+                    return null;\n+                });\n             }\n-        };\n-\n-        this.availableBrokersCache = new ZooKeeperChildrenCache(getLocalZkCache(), LOADBALANCE_BROKERS_ROOT);\n-        this.availableBrokersCache.registerListener((path, brokerNodes, stat) -> {\n-            updateBrokerList(brokerNodes).thenRun(() -> {\n-                log.info(\"Successfully updated broker info {}\", brokerNodes);\n-            }).exceptionally(ex -> {\n-                log.warn(\"Error updating broker info after broker list changed\", ex);\n-                return null;\n-            });\n         });\n \n         // Do initial fetch of brokers list\n-        try {\n-            updateBrokerList(availableBrokersCache.get()).get(zkOperationTimeoutSeconds, TimeUnit.SECONDS);\n-        } catch (NoNodeException nne) { // can happen if no broker started yet\n-            updateBrokerList(Collections.emptySet()).get(zkOperationTimeoutSeconds, TimeUnit.SECONDS);\n-        }\n+        updateBrokerList(loadReportResources.getChildren(LOADBALANCE_BROKERS_ROOT)).get(operationTimeoutMs,\n+                TimeUnit.SECONDS);\n     }\n \n     public List<LoadManagerReport> getAvailableBrokers() {\n+        if (CollectionUtils.isEmpty(availableBrokers)) {\n+            try {\n+                updateBrokerList(loadReportResources.getChildren(LOADBALANCE_BROKERS_ROOT));\n+            } catch (Exception e) {\n+                log.warn(\"Error updating broker from zookeeper.\", e);\n+            }\n+        }\n         return availableBrokers;\n     }\n \n-    public ZooKeeperCache getLocalZkCache() {\n-        return localZkCache;\n-    }\n-\n     @Override\n     public void close() throws IOException {\n-        try {\n-            zkClient.close();\n-        } catch (InterruptedException e) {\n-            Thread.interrupted();\n-            throw new IOException(e);\n-        }\n         orderedExecutor.shutdown();\n     }\n \n-    private CompletableFuture<Void> updateBrokerList(Set<String> brokerNodes) {\n+    private CompletableFuture<Void> updateBrokerList(List<String> brokerNodes) {\n         CompletableFuture<Void> future = new CompletableFuture<>();\n \n         if (brokerNodes.isEmpty()) {\n@@ -127,7 +113,7 @@ public void close() throws IOException {\n \n         List<CompletableFuture<Optional<LoadManagerReport>>> loadReportFutureList = new ArrayList<>();\n         for (String broker : brokerNodes) {\n-            loadReportFutureList.add(brokerInfo.getAsync(LOADBALANCE_BROKERS_ROOT + '/' + broker));\n+            loadReportFutureList.add(loadReportResources.getAsync(LOADBALANCE_BROKERS_ROOT + '/' + broker));\n         }\n \n         FutureUtil.waitForAll(loadReportFutureList).thenRun(() -> {\n@@ -155,6 +141,6 @@ public void close() throws IOException {\n         return future;\n     }\n \n-    private static final Logger log = LoggerFactory.getLogger(ZookeeperCacheLoader.class);\n+    private static final Logger log = LoggerFactory.getLogger(MetadataStoreCacheLoader.class);\n \n-}\n+}\n\\ No newline at end of file",
    "previous_filename": "pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/util/ZookeeperCacheLoader.java"
  },
  {
    "sha": "894e33f9ae8a471ea1923da5ceba93902308629d",
    "filename": "pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/PulsarResources.java",
    "status": "modified",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/PulsarResources.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/PulsarResources.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker-common/src/main/java/org/apache/pulsar/broker/resources/PulsarResources.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -36,6 +36,7 @@\n     private NamespaceResources namespaceResources;\n     private DynamicConfigurationResources dynamicConfigResources;\n     private LocalPoliciesResources localPolicies;\n+    private LoadManagerReportResources loadReportResources;\n     private Optional<MetadataStoreExtended> localMetadataStore;\n     private Optional<MetadataStoreExtended> configurationMetadataStore;\n \n@@ -52,6 +53,7 @@ public PulsarResources(MetadataStoreExtended localMetadataStore, MetadataStoreEx\n         if (localMetadataStore != null) {\n             dynamicConfigResources = new DynamicConfigurationResources(localMetadataStore, operationTimeoutSec);\n             localPolicies = new LocalPoliciesResources(localMetadataStore, operationTimeoutSec);\n+            loadReportResources = new LoadManagerReportResources(localMetadataStore, operationTimeoutSec);\n         }\n         this.localMetadataStore = Optional.ofNullable(localMetadataStore);\n         this.configurationMetadataStore = Optional.ofNullable(configurationMetadataStore);"
  },
  {
    "sha": "ae89a552bf69f3f48b87f0f6ad9d23071ba5b241",
    "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/BrokerServiceLookupTest.java",
    "status": "modified",
    "additions": 18,
    "deletions": 25,
    "changes": 43,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker/src/test/java/org/apache/pulsar/client/api/BrokerServiceLookupTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker/src/test/java/org/apache/pulsar/client/api/BrokerServiceLookupTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/api/BrokerServiceLookupTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -81,6 +81,7 @@\n import org.apache.pulsar.common.util.SecurityUtility;\n import org.apache.pulsar.discovery.service.DiscoveryService;\n import org.apache.pulsar.discovery.service.server.ServiceConfig;\n+import org.apache.pulsar.metadata.api.extended.MetadataStoreExtended;\n import org.apache.pulsar.metadata.impl.ZKMetadataStore;\n import org.asynchttpclient.AsyncCompletionHandler;\n import org.asynchttpclient.AsyncHttpClient;\n@@ -477,11 +478,7 @@ public void testDiscoveryLookup() throws Exception {\n         config.setBindOnLocalhost(true);\n \n         @Cleanup\n-        DiscoveryService discoveryService = spy(new DiscoveryService(config));\n-        doReturn(mockZooKeeperClientFactory).when(discoveryService).getZooKeeperClientFactory();\n-        doReturn(new ZKMetadataStore(mockZooKeeper)).when(discoveryService).createLocalMetadataStore();\n-        doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(discoveryService).createConfigurationMetadataStore();\n-        discoveryService.start();\n+        DiscoveryService discoveryService = createAndStartDiscoveryService(config);\n \n         // (2) lookup using discovery service\n         final String discoverySvcUrl = discoveryService.getServiceUrl();\n@@ -548,11 +545,7 @@ public void testDiscoveryLookupTls() throws Exception {\n         config.setTlsKeyFilePath(TLS_SERVER_KEY_FILE_PATH);\n \n         @Cleanup\n-        DiscoveryService discoveryService = spy(new DiscoveryService(config));\n-        doReturn(mockZooKeeperClientFactory).when(discoveryService).getZooKeeperClientFactory();\n-        doReturn(new ZKMetadataStore(mockZooKeeper)).when(discoveryService).createLocalMetadataStore();\n-        doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(discoveryService).createConfigurationMetadataStore();\n-        discoveryService.start();\n+        DiscoveryService discoveryService = createAndStartDiscoveryService(config);\n \n         // (3) lookup using discovery service\n         final String discoverySvcUrl = discoveryService.getServiceUrlTls();\n@@ -610,11 +603,7 @@ public void testDiscoveryLookupAuthAndAuthSuccess() throws Exception {\n         config.setConfigurationStoreServers(\"localhost:3181\");\n \n         @Cleanup\n-        DiscoveryService discoveryService = spy(new DiscoveryService(config));\n-        doReturn(mockZooKeeperClientFactory).when(discoveryService).getZooKeeperClientFactory();\n-        doReturn(new ZKMetadataStore(mockZooKeeper)).when(discoveryService).createLocalMetadataStore();\n-        doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(discoveryService).createConfigurationMetadataStore();\n-        discoveryService.start();\n+        DiscoveryService discoveryService = createAndStartDiscoveryService(config);\n \n         // (2) lookup using discovery service\n         final String discoverySvcUrl = discoveryService.getServiceUrl();\n@@ -688,11 +677,7 @@ public void testDiscoveryLookupAuthenticationFailure() throws Exception {\n         config.setAuthorizationEnabled(true);\n \n         @Cleanup\n-        DiscoveryService discoveryService = spy(new DiscoveryService(config));\n-        doReturn(mockZooKeeperClientFactory).when(discoveryService).getZooKeeperClientFactory();\n-        doReturn(new ZKMetadataStore(mockZooKeeper)).when(discoveryService).createLocalMetadataStore();\n-        doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(discoveryService).createConfigurationMetadataStore();\n-        discoveryService.start();\n+        DiscoveryService discoveryService = createAndStartDiscoveryService(config);\n         // (2) lookup using discovery service\n         final String discoverySvcUrl = discoveryService.getServiceUrl();\n \n@@ -752,11 +737,7 @@ public void testDiscoveryLookupAuthorizationFailure() throws Exception {\n         config.setAuthorizationEnabled(true);\n \n         @Cleanup\n-        DiscoveryService discoveryService = spy(new DiscoveryService(config));\n-        doReturn(mockZooKeeperClientFactory).when(discoveryService).getZooKeeperClientFactory();\n-        doReturn(new ZKMetadataStore(mockZooKeeper)).when(discoveryService).createLocalMetadataStore();\n-        doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(discoveryService).createConfigurationMetadataStore();\n-        discoveryService.start();\n+        DiscoveryService discoveryService = createAndStartDiscoveryService(config);\n         // (2) lookup using discovery service\n         final String discoverySvcUrl = discoveryService.getServiceUrl();\n \n@@ -1211,4 +1192,16 @@ public String authenticate(AuthenticationDataSource authData) throws Authenticat\n             return \"invalid\";\n         }\n     }\n+\n+    private DiscoveryService createAndStartDiscoveryService(ServiceConfig config) throws Exception {\n+        MetadataStoreExtended localMetadatastore = new ZKMetadataStore(mockZooKeeper);\n+        MetadataStoreExtended configMetadatastore = new ZKMetadataStore(mockZooKeeperGlobal);\n+        DiscoveryService discoveryService = spy(new DiscoveryService(config));\n+        doReturn(localMetadatastore).when(discoveryService).createLocalMetadataStore();\n+        doReturn(configMetadatastore).when(discoveryService).createConfigurationMetadataStore();\n+        doReturn(localMetadatastore).when(discoveryService).createLocalMetadataStore();\n+        doReturn(configMetadatastore).when(discoveryService).createConfigurationMetadataStore();\n+        discoveryService.start();\n+        return discoveryService;\n+    }\n }"
  },
  {
    "sha": "9928faf30b286ccbdc16b1cecf348d47c9f1e924",
    "filename": "pulsar-broker/src/test/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceWebTest.java",
    "status": "modified",
    "additions": 22,
    "deletions": 24,
    "changes": 46,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker/src/test/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceWebTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-broker/src/test/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceWebTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceWebTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -22,14 +22,14 @@\n import static org.testng.Assert.fail;\n \n import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n import com.google.gson.Gson;\n import com.google.gson.JsonObject;\n import com.google.gson.JsonParseException;\n \n import java.util.Map;\n import java.util.Optional;\n import java.util.TreeMap;\n-import java.util.concurrent.CompletableFuture;\n \n import javax.ws.rs.HttpMethod;\n import javax.ws.rs.client.Client;\n@@ -44,8 +44,8 @@\n import org.apache.pulsar.common.policies.data.BundlesData;\n import org.apache.pulsar.discovery.service.server.ServerManager;\n import org.apache.pulsar.discovery.service.server.ServiceConfig;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n-import org.apache.zookeeper.ZooKeeper;\n+import org.apache.pulsar.metadata.api.MetadataStoreException;\n+import org.apache.pulsar.metadata.api.extended.MetadataStoreExtended;\n import org.glassfish.jersey.client.ClientConfig;\n import org.glassfish.jersey.logging.LoggingFeature;\n import org.testng.annotations.AfterMethod;\n@@ -56,6 +56,10 @@\n public class DiscoveryServiceWebTest extends ProducerConsumerBase {\n \n     private final Client client = ClientBuilder.newClient(new ClientConfig().register(LoggingFeature.class));\n+    // DiscoveryServiceServlet gets initialized by a server and this map will help to retrieve ZK while mocking\n+    // DiscoveryServiceServlet\n+    private static final Map<String, MetadataStoreExtended> metadataStoreInstanceCache = Maps.newConcurrentMap();\n+    private ServerManager server;\n \n     @BeforeMethod\n     @Override\n@@ -64,12 +68,24 @@ protected void setup() throws Exception {\n         super.producerBaseSetup();\n         super.conf.setAuthorizationEnabled(true);\n         super.conf.setAuthenticationEnabled(true);\n+\n+        // start server\n+        ServiceConfig config = new ServiceConfig();\n+        config.setWebServicePort(Optional.of(0));\n+        server = new ServerManager(config);\n+        Map<String, String> params = new TreeMap<>();\n+        String zkServerUrl = \"mockZkServerUrl\";\n+        metadataStoreInstanceCache.put(zkServerUrl, pulsar.createLocalMetadataStore());\n+        params.put(\"zookeeperServers\", zkServerUrl);\n+        server.addServlet(\"/\", DiscoveryServiceServletTest.class, params);\n+        server.start();\n     }\n \n     @AfterMethod(alwaysRun = true)\n     @Override\n     protected void cleanup() throws Exception {\n         super.internalCleanup();\n+        server.stop();\n     }\n \n     /**\n@@ -80,17 +96,6 @@ protected void cleanup() throws Exception {\n      */\n     @Test\n     public void testRedirectUrlWithServerStarted() throws Exception {\n-        // 1. start server\n-        ServiceConfig config = new ServiceConfig();\n-        config.setWebServicePort(Optional.of(0));\n-        ServerManager server = new ServerManager(config);\n-        DiscoveryZooKeeperClientFactoryImpl.zk = mockZooKeeper;\n-        Map<String, String> params = new TreeMap<>();\n-        params.put(\"zookeeperServers\", \"\");\n-        params.put(\"zookeeperClientFactoryClass\", DiscoveryZooKeeperClientFactoryImpl.class.getName());\n-        server.addServlet(\"/\", DiscoveryServiceServlet.class, params);\n-        server.start();\n-\n         String serviceUrl = server.getServiceUri().toString();\n         String putRequestUrl = serviceUrl + \"admin/v2/namespaces/p1/n1\";\n         String postRequestUrl = serviceUrl + \"admin/v2/namespaces/p1/n1/replication\";\n@@ -105,9 +110,6 @@ public void testRedirectUrlWithServerStarted() throws Exception {\n                 \"Need to authenticate to perform the request\");\n         assertEquals(hitBrokerService(HttpMethod.PUT, putRequestUrl, new BundlesData(1)), \"Need to authenticate to perform the request\");\n         assertEquals(hitBrokerService(HttpMethod.GET, getRequestUrl, null), \"Need to authenticate to perform the request\");\n-\n-        server.stop();\n-\n     }\n \n     public String hitBrokerService(String method, String url, Object data) throws JsonParseException {\n@@ -134,14 +136,10 @@ public String hitBrokerService(String method, String url, Object data) throws Js\n         return jsonObject.get(\"reason\").getAsString();\n     }\n \n-    static class DiscoveryZooKeeperClientFactoryImpl implements ZooKeeperClientFactory {\n-        static ZooKeeper zk;\n-\n+    public static class DiscoveryServiceServletTest extends DiscoveryServiceServlet {\n         @Override\n-        public CompletableFuture<ZooKeeper> create(String serverList, SessionType sessionType,\n-                int zkSessionTimeoutMillis) {\n-            return CompletableFuture.completedFuture(zk);\n+        public MetadataStoreExtended createLocalMetadataStore(String zookeeperServers, int operationimeoutMs) throws MetadataStoreException {\n+            return metadataStoreInstanceCache.get(zookeeperServers);\n         }\n     }\n-\n }"
  },
  {
    "sha": "f895792d134e40100458f3f3dadbe3de3241c0b0",
    "filename": "pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/BrokerDiscoveryProvider.java",
    "status": "modified",
    "additions": 10,
    "deletions": 11,
    "changes": 21,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/BrokerDiscoveryProvider.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/BrokerDiscoveryProvider.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/BrokerDiscoveryProvider.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -31,17 +31,15 @@\n \n import org.apache.bookkeeper.common.util.OrderedScheduler;\n import org.apache.pulsar.broker.authentication.AuthenticationDataSource;\n+import org.apache.pulsar.broker.resources.MetadataStoreCacheLoader;\n import org.apache.pulsar.broker.resources.PulsarResources;\n import org.apache.pulsar.broker.PulsarServerException;\n import org.apache.pulsar.common.naming.TopicName;\n import org.apache.pulsar.common.partition.PartitionedTopicMetadata;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.apache.pulsar.discovery.service.server.ServiceConfig;\n-import org.apache.pulsar.discovery.service.web.ZookeeperCacheLoader;\n import org.apache.pulsar.metadata.api.MetadataStoreException.NotFoundException;\n import org.apache.pulsar.policies.data.loadbalancer.LoadManagerReport;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n-import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -55,7 +53,7 @@\n  */\n public class BrokerDiscoveryProvider implements Closeable {\n \n-    final ZookeeperCacheLoader localZkCache;\n+    final MetadataStoreCacheLoader metadataStoreCacheLoader;\n     private final AtomicInteger counter = new AtomicInteger();\n     private PulsarResources pulsarResources;\n \n@@ -66,11 +64,10 @@\n \n     private static final String PARTITIONED_TOPIC_PATH_ZNODE = \"partitioned-topics\";\n \n-    public BrokerDiscoveryProvider(ServiceConfig config, ZooKeeperClientFactory zkClientFactory,\n-            PulsarResources pulsarResources) throws PulsarServerException {\n+    public BrokerDiscoveryProvider(ServiceConfig config, PulsarResources pulsarResources) throws PulsarServerException {\n         try {\n             this.pulsarResources = pulsarResources;\n-            localZkCache = new ZookeeperCacheLoader(zkClientFactory, config.getZookeeperServers(),\n+            this.metadataStoreCacheLoader = new MetadataStoreCacheLoader(pulsarResources,\n                     config.getZookeeperSessionTimeoutMs());\n         } catch (Exception e) {\n             LOG.error(\"Failed to start ZooKeeper {}\", e.getMessage(), e);\n@@ -97,7 +94,7 @@ LoadManagerReport nextBroker() throws PulsarServerException {\n     }\n \n     List<LoadManagerReport> getAvailableBrokers() {\n-        List<LoadManagerReport> availableBrokers = localZkCache.getAvailableBrokers();\n+        List<LoadManagerReport> availableBrokers = metadataStoreCacheLoader.getAvailableBrokers();\n         return availableBrokers;\n     }\n \n@@ -110,7 +107,8 @@ LoadManagerReport nextBroker() throws PulsarServerException {\n             final String path = path(PARTITIONED_TOPIC_PATH_ZNODE,\n                     topicName.getNamespaceObject().toString(), \"persistent\", topicName.getEncodedLocalName());\n             // gets the number of partitions from the zk cache\n-            pulsarResources.getNamespaceResources().getPartitionedTopicResources().getAsync(path).thenAccept(metadata -> {\n+            pulsarResources.getNamespaceResources().getPartitionedTopicResources().getAsync(path)\n+                    .thenAccept(metadata -> {\n                 // if the partitioned topic is not found in zk, then the topic\n                 // is not partitioned\n                 if (metadata.isPresent()) {\n@@ -153,7 +151,8 @@ protected static void checkAuthorization(DiscoveryService service, TopicName top\n                 throw new IllegalAccessException(String.format(\"Failed to get property %s admin data due to %s\",\n                         topicName.getTenant(), e.getMessage()));\n             }\n-            if (!service.getAuthorizationService().isTenantAdmin(topicName.getTenant(), role, tenantInfo, authenticationData).get()) {\n+            if (!service.getAuthorizationService()\n+                    .isTenantAdmin(topicName.getTenant(), role, tenantInfo, authenticationData).get()) {\n                 throw new IllegalAccessException(\"Don't have permission to administrate resources on this property\");\n             }\n         }\n@@ -171,7 +170,7 @@ public static String path(String... parts) {\n \n     @Override\n     public void close() throws IOException {\n-        localZkCache.close();\n+        metadataStoreCacheLoader.close();\n         orderedExecutor.shutdown();\n         scheduledExecutorScheduler.shutdownNow();\n     }"
  },
  {
    "sha": "6430da1931c49181229cb396fad636ca64d46d0f",
    "filename": "pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/DiscoveryService.java",
    "status": "modified",
    "additions": 3,
    "deletions": 14,
    "changes": 17,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/DiscoveryService.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/DiscoveryService.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/DiscoveryService.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -48,8 +48,6 @@\n import org.apache.pulsar.discovery.service.server.ServiceConfig;\n import org.apache.pulsar.metadata.api.MetadataStoreException;\n import org.apache.pulsar.metadata.api.extended.MetadataStoreExtended;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n-import org.apache.pulsar.zookeeper.ZookeeperClientFactoryImpl;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -66,7 +64,6 @@\n     private ConfigurationMetadataCacheService configurationCacheService;\n     private AuthenticationService authenticationService;\n     private AuthorizationService authorizationService;\n-    private ZooKeeperClientFactory zkClientFactory = null;\n     private BrokerDiscoveryProvider discoveryProvider;\n     private final EventLoopGroup acceptorGroup;\n     private MetadataStoreExtended localMetadataStore;\n@@ -98,7 +95,7 @@ public void start() throws Exception {\n         localMetadataStore = createLocalMetadataStore();\n         configMetadataStore = createConfigurationMetadataStore();\n         pulsarResources = new PulsarResources(localMetadataStore, configMetadataStore);\n-        discoveryProvider = new BrokerDiscoveryProvider(this.config, getZooKeeperClientFactory(), pulsarResources);\n+        discoveryProvider = new BrokerDiscoveryProvider(this.config, pulsarResources);\n         this.configurationCacheService = new ConfigurationMetadataCacheService(pulsarResources, null);\n         ServiceConfiguration serviceConfiguration = PulsarConfigurationLoader.convertFrom(config);\n         authenticationService = new AuthenticationService(serviceConfiguration);\n@@ -145,14 +142,6 @@ public void startServer() throws Exception {\n         this.serviceUrlTls = serviceUrlTls();\n     }\n \n-    public ZooKeeperClientFactory getZooKeeperClientFactory() {\n-        if (zkClientFactory == null) {\n-            zkClientFactory = new ZookeeperClientFactoryImpl();\n-        }\n-        // Return default factory\n-        return zkClientFactory;\n-    }\n-\n     public BrokerDiscoveryProvider getDiscoveryProvider() {\n         return discoveryProvider;\n     }\n@@ -235,8 +224,6 @@ public void setConfigurationCacheService(ConfigurationMetadataCacheService confi\n         this.configurationCacheService = configurationCacheService;\n     }\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DiscoveryService.class);\n-\n     public MetadataStoreExtended createLocalMetadataStore() throws MetadataStoreException {\n         return PulsarResources.createMetadataStore(config.getZookeeperServers(), config.getZookeeperSessionTimeoutMs());\n     }\n@@ -245,4 +232,6 @@ public MetadataStoreExtended createConfigurationMetadataStore() throws MetadataS\n         return PulsarResources.createMetadataStore(config.getConfigurationStoreServers(),\n                 config.getZookeeperSessionTimeoutMs());\n     }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DiscoveryService.class);\n }"
  },
  {
    "sha": "ebe2639b2c29c8de94d05fe9672bfe457aaa65ef",
    "filename": "pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/ServerConnection.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/ServerConnection.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/ServerConnection.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/ServerConnection.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -152,11 +152,13 @@ private void sendPartitionMetadataResponse(CommandPartitionedTopicMetadata parti\n                 .getPartitionedTopicMetadata(service, topicName, authRole, authenticationData)\n                 .thenAccept(metadata -> {\n             if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"[{}] Total number of partitions for topic {} is {}\", authRole, topicName, metadata.partitions);\n+                        LOG.debug(\"[{}] Total number of partitions for topic {} is {}\", authRole, topicName,\n+                                metadata.partitions);\n             }\n             ctx.writeAndFlush(Commands.newPartitionMetadataResponse(metadata.partitions, requestId));\n         }).exceptionally(ex -> {\n-            LOG.warn(\"[{}] Failed to get partitioned metadata for topic {} {}\", remoteAddress, topicName, ex.getMessage(), ex);\n+                    LOG.warn(\"[{}] Failed to get partitioned metadata for topic {} {}\", remoteAddress, topicName,\n+                            ex.getMessage(), ex);\n             ctx.writeAndFlush(\n                     Commands.newPartitionMetadataResponse(ServerError.ServiceNotReady, ex.getMessage(), requestId));\n             return null;"
  },
  {
    "sha": "3c75d95dfa3f562d4ec6ef4caef0d9b537fe5fcd",
    "filename": "pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceServlet.java",
    "status": "modified",
    "additions": 24,
    "deletions": 17,
    "changes": 41,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceServlet.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceServlet.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceServlet.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -33,10 +33,12 @@\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.core.Response.Status;\n \n+import org.apache.pulsar.broker.resources.MetadataStoreCacheLoader;\n+import org.apache.pulsar.broker.resources.PulsarResources;\n import org.apache.pulsar.common.util.RestException;\n+import org.apache.pulsar.metadata.api.MetadataStoreException;\n+import org.apache.pulsar.metadata.api.extended.MetadataStoreExtended;\n import org.apache.pulsar.policies.data.loadbalancer.LoadManagerReport;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n-import org.apache.pulsar.zookeeper.ZookeeperClientFactoryImpl;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -54,7 +56,10 @@\n \n     private final AtomicInteger counter = new AtomicInteger();\n \n-    private ZookeeperCacheLoader zkCache;\n+    private MetadataStoreExtended localMetadataStore;\n+    private MetadataStoreExtended configMetadataStore;\n+    private PulsarResources pulsarResources;\n+    private MetadataStoreCacheLoader metadataStoreCacheLoader;\n \n     @Override\n     public void init(ServletConfig config) throws ServletException {\n@@ -66,19 +71,12 @@ public void init(ServletConfig config) throws ServletException {\n                 ? Integer.valueOf(zookeeperSessionTimeoutMsStr)\n                 : 30_000;\n \n-        String zookeeperClientFactoryClassName = config.getInitParameter(\"zookeeperClientFactoryClass\");\n-        if (zookeeperClientFactoryClassName == null) {\n-            zookeeperClientFactoryClassName = ZookeeperClientFactoryImpl.class.getName();\n-        }\n-\n-        log.info(\"zookeeperServers={} zookeeperClientFactoryClass={}\", zookeeperServers,\n-                zookeeperClientFactoryClassName);\n+        log.info(\"zookeeperServers={}\", zookeeperServers);\n \n         try {\n-            ZooKeeperClientFactory zkClientFactory = (ZooKeeperClientFactory) Class\n-                    .forName(zookeeperClientFactoryClassName).newInstance();\n-\n-            zkCache = new ZookeeperCacheLoader(zkClientFactory, zookeeperServers, zookeeperSessionTimeoutMs);\n+            localMetadataStore = createLocalMetadataStore(zookeeperServers, zookeeperSessionTimeoutMs);\n+            pulsarResources = new PulsarResources(localMetadataStore, configMetadataStore);\n+            metadataStoreCacheLoader = new MetadataStoreCacheLoader(pulsarResources, zookeeperSessionTimeoutMs);\n         } catch (Throwable t) {\n             throw new ServletException(t);\n         }\n@@ -87,9 +85,14 @@ public void init(ServletConfig config) throws ServletException {\n     @Override\n     public void destroy() {\n         try {\n-            zkCache.close();\n+            localMetadataStore.close();\n+        } catch (Exception e) {\n+            log.warn(\"Failed to close the metadata-store {}\", e.getMessage());\n+        }\n+        try {\n+            metadataStoreCacheLoader.close();\n         } catch (IOException e) {\n-            e.printStackTrace();\n+            log.warn(\"Failed to close the metadataStore-cache {}\", e.getMessage());\n         }\n     }\n \n@@ -166,7 +169,7 @@ private void redirect(HttpServletRequest request, HttpServletResponse response)\n      * @return\n      */\n     LoadManagerReport nextBroker() {\n-        List<LoadManagerReport> availableBrokers = zkCache.getAvailableBrokers();\n+        List<LoadManagerReport> availableBrokers = metadataStoreCacheLoader.getAvailableBrokers();\n \n         if (availableBrokers.isEmpty()) {\n             throw new RestException(Status.SERVICE_UNAVAILABLE, \"No active broker is available\");\n@@ -177,5 +180,9 @@ LoadManagerReport nextBroker() {\n         }\n     }\n \n+    public MetadataStoreExtended createLocalMetadataStore(String zookeeperServers, int operationimeoutMs) throws MetadataStoreException {\n+        return PulsarResources.createMetadataStore(zookeeperServers, operationimeoutMs);\n+    }\n+\n     private static final Logger log = LoggerFactory.getLogger(DiscoveryServiceServlet.class);\n }"
  },
  {
    "sha": "1a6944a2cc6bfeb561f47df53df19e4e47f8aa46",
    "filename": "pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/web/ZookeeperCacheLoader.java",
    "status": "removed",
    "additions": 0,
    "deletions": 190,
    "changes": 190,
    "blob_url": "https://github.com/apache/pulsar/blob/bbe072f2aa591385b11891bbbc88bef28878e163/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/web/ZookeeperCacheLoader.java",
    "raw_url": "https://github.com/apache/pulsar/raw/bbe072f2aa591385b11891bbbc88bef28878e163/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/web/ZookeeperCacheLoader.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/main/java/org/apache/pulsar/discovery/service/web/ZookeeperCacheLoader.java?ref=bbe072f2aa591385b11891bbbc88bef28878e163",
    "patch": "@@ -1,190 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.pulsar.discovery.service.web;\n-\n-import java.io.Closeable;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.apache.bookkeeper.common.util.OrderedScheduler;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.pulsar.common.util.FutureUtil;\n-import org.apache.pulsar.common.util.ObjectMapperFactory;\n-import org.apache.pulsar.policies.data.loadbalancer.LoadManagerReport;\n-import org.apache.pulsar.zookeeper.LocalZooKeeperCache;\n-import org.apache.pulsar.zookeeper.LocalZooKeeperConnectionService;\n-import org.apache.pulsar.zookeeper.ZooKeeperCache;\n-import org.apache.pulsar.zookeeper.ZooKeeperChildrenCache;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n-import org.apache.pulsar.zookeeper.ZooKeeperDataCache;\n-import org.apache.pulsar.zookeeper.ZooKeeperSessionWatcher;\n-import org.apache.pulsar.zookeeper.ZookeeperSessionExpiredHandler;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Connects with ZooKeeper and sets watch to listen changes for active broker list.\n- *\n- */\n-public class ZookeeperCacheLoader implements Closeable {\n-\n-    private final ZooKeeperCache localZkCache;\n-    private final LocalZooKeeperConnectionService localZkConnectionSvc;\n-\n-    private final ZooKeeperDataCache<LoadManagerReport> brokerInfo;\n-    private final ZooKeeperChildrenCache availableBrokersCache;\n-\n-    private volatile List<LoadManagerReport> availableBrokers;\n-\n-    private final OrderedScheduler orderedExecutor = OrderedScheduler.newSchedulerBuilder().numThreads(8)\n-            .name(\"pulsar-discovery-ordered-cache\").build();\n-\n-    public static final String LOADBALANCE_BROKERS_ROOT = \"/loadbalance/brokers\";\n-\n-    /**\n-     * Initialize ZooKeeper session and creates broker cache list\n-     *\n-     * @param zookeeperServers\n-     * @throws Exception\n-     */\n-    public ZookeeperCacheLoader(ZooKeeperClientFactory zkClientFactory, String zookeeperServers,\n-            int zookeeperSessionTimeoutMs) throws Exception {\n-        localZkConnectionSvc = new LocalZooKeeperConnectionService(zkClientFactory, zookeeperServers,\n-                zookeeperSessionTimeoutMs);\n-        localZkConnectionSvc.start(new ZookeeperSessionExpiredHandler() {\n-            @Override\n-            public void onSessionExpired() {\n-                log.error(\"Shutting down ZK sessions: {}\", -1);\n-            }\n-\n-            @Override\n-            public void setWatcher(ZooKeeperSessionWatcher watcher) {\n-\n-            }\n-        });\n-\n-        int zkOperationTimeoutSeconds = (int) TimeUnit.MILLISECONDS.toSeconds(zookeeperSessionTimeoutMs);\n-        this.localZkCache = new LocalZooKeeperCache(localZkConnectionSvc.getLocalZooKeeper(), zkOperationTimeoutSeconds,\n-                this.orderedExecutor);\n-        localZkConnectionSvc.start(new ZookeeperSessionExpiredHandler() {\n-            @Override\n-            public void onSessionExpired() {\n-                try {\n-                    localZkCache.getZooKeeper().close();\n-                } catch (InterruptedException e) {\n-                    log.warn(\"Failed to shutdown ZooKeeper gracefully {}\", e.getMessage(), e);\n-                }\n-            }\n-\n-            @Override\n-            public void setWatcher(ZooKeeperSessionWatcher watcher) {\n-\n-            }\n-        });\n-\n-        this.brokerInfo = new ZooKeeperDataCache<LoadManagerReport>(localZkCache) {\n-            @Override\n-            public LoadManagerReport deserialize(String key, byte[] content) throws Exception {\n-                return ObjectMapperFactory.getThreadLocal().readValue(content, LoadManagerReport.class);\n-            }\n-        };\n-\n-        this.availableBrokersCache = new ZooKeeperChildrenCache(getLocalZkCache(), LOADBALANCE_BROKERS_ROOT);\n-        this.availableBrokersCache.registerListener((path, brokerNodes, stat) -> {\n-            updateBrokerList(brokerNodes).thenRun(() -> {\n-                log.info(\"Successfully updated broker info {}\", brokerNodes);\n-            }).exceptionally(ex -> {\n-                log.warn(\"Error updating broker info after broker list changed\", ex);\n-                return null;\n-            });\n-        });\n-\n-        // Do initial fetch of brokers list\n-        updateBrokerList(availableBrokersCache.get()).get(zkOperationTimeoutSeconds, TimeUnit.SECONDS);\n-    }\n-\n-    public List<LoadManagerReport> getAvailableBrokers() {\n-        if (CollectionUtils.isEmpty(availableBrokers)) {\n-            try {\n-                updateBrokerList(availableBrokersCache.get());\n-            } catch (Exception e) {\n-                log.warn(\"Error updating broker from zookeeper.\", e);\n-            }\n-        }\n-        return availableBrokers;\n-    }\n-\n-    public ZooKeeperCache getLocalZkCache() {\n-        return localZkCache;\n-    }\n-\n-    @Override\n-    public void close() throws IOException {\n-        localZkCache.stop();\n-        localZkConnectionSvc.close();\n-        orderedExecutor.shutdown();\n-    }\n-\n-    private CompletableFuture<Void> updateBrokerList(Set<String> brokerNodes) {\n-        CompletableFuture<Void> future = new CompletableFuture<>();\n-\n-        if (brokerNodes.isEmpty()) {\n-            availableBrokers = new ArrayList<>();\n-            future.complete(null);\n-            return future;\n-        }\n-\n-        List<CompletableFuture<Optional<LoadManagerReport>>> loadReportFutureList = new ArrayList<>();\n-        for (String broker : brokerNodes) {\n-            loadReportFutureList.add(brokerInfo.getAsync(LOADBALANCE_BROKERS_ROOT + '/' + broker));\n-        }\n-\n-        FutureUtil.waitForAll(loadReportFutureList).thenRun(() -> {\n-            List<LoadManagerReport> newAvailableBrokers = new ArrayList<>(brokerNodes.size());\n-\n-            for (CompletableFuture<Optional<LoadManagerReport>> loadReportFuture : loadReportFutureList) {\n-                try {\n-                    Optional<LoadManagerReport> loadReport = loadReportFuture.get();\n-                    if (loadReport.isPresent()) {\n-                        newAvailableBrokers.add(loadReport.get());\n-                    }\n-                } catch (Exception e) {\n-                    future.completeExceptionally(e);\n-                    return;\n-                }\n-            }\n-\n-            availableBrokers = newAvailableBrokers;\n-            future.complete(null);\n-        }).exceptionally(ex -> {\n-            future.completeExceptionally(ex);\n-            return null;\n-        });\n-\n-        return future;\n-    }\n-\n-    private static final Logger log = LoggerFactory.getLogger(ZookeeperCacheLoader.class);\n-\n-}"
  },
  {
    "sha": "8a0bd00d96ed3cdf19a70f546d58d4241d72895c",
    "filename": "pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/BaseDiscoveryTestSetup.java",
    "status": "modified",
    "additions": 16,
    "deletions": 24,
    "changes": 40,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/BaseDiscoveryTestSetup.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/BaseDiscoveryTestSetup.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/BaseDiscoveryTestSetup.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -18,31 +18,28 @@\n  */\n package org.apache.pulsar.discovery.service;\n \n-import static org.apache.pulsar.discovery.service.web.ZookeeperCacheLoader.LOADBALANCE_BROKERS_ROOT;\n+import static org.apache.pulsar.broker.resources.MetadataStoreCacheLoader.LOADBALANCE_BROKERS_ROOT;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.spy;\n \n import com.google.common.util.concurrent.MoreExecutors;\n \n+import java.nio.charset.StandardCharsets;\n import java.util.Optional;\n-import java.util.concurrent.CompletableFuture;\n \n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.pulsar.discovery.service.server.ServiceConfig;\n+import org.apache.pulsar.metadata.api.extended.MetadataStoreExtended;\n import org.apache.pulsar.metadata.impl.ZKMetadataStore;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n-import org.apache.pulsar.zookeeper.ZookeeperClientFactoryImpl;\n-import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.MockZooKeeper;\n-import org.apache.zookeeper.ZooDefs;\n-import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.KeeperException.Code;\n \n \n public class BaseDiscoveryTestSetup {\n \n     protected ServiceConfig config;\n     protected DiscoveryService service;\n-    protected MockZooKeeper mockZooKeeper;\n+    private MockZooKeeper mockZooKeeper;\n+    protected MetadataStoreExtended zkStore;\n     private final String TLS_SERVER_CERT_FILE_PATH = \"./src/test/resources/certificate/server.crt\";\n     private final String TLS_SERVER_KEY_FILE_PATH = \"./src/test/resources/certificate/server.key\";\n \n@@ -56,8 +53,10 @@ protected void setup() throws Exception {\n         config.setTlsKeyFilePath(TLS_SERVER_KEY_FILE_PATH);\n \n         mockZooKeeper = createMockZooKeeper();\n+        zkStore = new ZKMetadataStore(mockZooKeeper);\n+        zkStore.put(LOADBALANCE_BROKERS_ROOT, \"\".getBytes(StandardCharsets.UTF_8),\n+                Optional.of(-1L));\n         service = spy(new DiscoveryService(config));\n-        doReturn(mockZooKeeperClientFactory).when(service).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(service).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(service).createConfigurationMetadataStore();\n         service.start();\n@@ -66,26 +65,19 @@ protected void setup() throws Exception {\n \n     protected void cleanup() throws Exception {\n         mockZooKeeper.shutdown();\n+        zkStore.close();\n         service.close();\n     }\n \n     protected MockZooKeeper createMockZooKeeper() throws Exception {\n         MockZooKeeper zk = MockZooKeeper.newInstance(MoreExecutors.newDirectExecutorService());\n-\n-        ZkUtils.createFullPathOptimistic(zk, LOADBALANCE_BROKERS_ROOT,\n-                \"\".getBytes(ZookeeperClientFactoryImpl.ENCODING_SCHEME), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                CreateMode.PERSISTENT);\n         return zk;\n     }\n \n-    protected ZooKeeperClientFactory mockZooKeeperClientFactory = new ZooKeeperClientFactory() {\n-\n-        @Override\n-        public CompletableFuture<ZooKeeper> create(String serverList, SessionType sessionType,\n-                int zkSessionTimeoutMillis) {\n-            // Always return the same instance (so that we don't loose the mock ZK content on broker restart\n-            return CompletableFuture.completedFuture(mockZooKeeper);\n-        }\n-    };\n-\n+    protected void simulateStoreError(String string, Code sessionexpired) {\n+        mockZooKeeper.failConditional(Code.SESSIONEXPIRED, (op, path) -> {\n+            return op == MockZooKeeper.Op.GET\n+                && path.equals(\"/admin/partitioned-topics/test/local/ns/persistent/my-topic-2\");\n+        });\n+    }\n }"
  },
  {
    "sha": "73b3c41c38c61b7651a7d58d4fae7949ffe02c32",
    "filename": "pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/DiscoveryServiceTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 23,
    "changes": 29,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/DiscoveryServiceTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/DiscoveryServiceTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/DiscoveryServiceTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -18,37 +18,31 @@\n  */\n package org.apache.pulsar.discovery.service;\n \n-import static org.apache.pulsar.discovery.service.web.ZookeeperCacheLoader.LOADBALANCE_BROKERS_ROOT;\n+import static org.apache.pulsar.broker.resources.MetadataStoreCacheLoader.LOADBALANCE_BROKERS_ROOT;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotEquals;\n import static org.testng.Assert.fail;\n \n-import java.lang.reflect.Field;\n import java.net.InetSocketAddress;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n import java.security.PrivateKey;\n import java.security.cert.X509Certificate;\n+import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.pulsar.common.protocol.Commands;\n import org.apache.pulsar.common.api.proto.BaseCommand;\n import org.apache.pulsar.common.naming.TopicName;\n import org.apache.pulsar.common.partition.PartitionedTopicMetadata;\n import org.apache.pulsar.common.util.ObjectMapperFactory;\n import org.apache.pulsar.common.util.SecurityUtility;\n-import org.apache.pulsar.discovery.service.web.ZookeeperCacheLoader;\n import org.apache.pulsar.metadata.api.MetadataStoreException;\n import org.apache.pulsar.policies.data.loadbalancer.LoadReport;\n-import org.apache.pulsar.zookeeper.ZooKeeperChildrenCache;\n-import org.apache.pulsar.zookeeper.ZookeeperClientFactoryImpl;\n-import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException.Code;\n-import org.apache.zookeeper.MockZooKeeper;\n-import org.apache.zookeeper.ZooDefs;\n import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n@@ -108,10 +102,7 @@ public void testGetPartitionsMetadata() throws Exception {\n         assertEquals(m.partitions, 0);\n \n         // Simulate ZK error\n-        mockZooKeeper.failConditional(Code.SESSIONEXPIRED, (op, path) -> {\n-                return op == MockZooKeeper.Op.GET\n-                    && path.equals(\"/admin/partitioned-topics/test/local/ns/persistent/my-topic-2\");\n-            });\n+        simulateStoreError(\"/admin/partitioned-topics/test/local/ns/persistent/my-topic-2\", Code.SESSIONEXPIRED);\n         TopicName topic2 = TopicName.get(\"persistent://test/local/ns/my-topic-2\");\n         CompletableFuture<PartitionedTopicMetadata> future = service.getDiscoveryProvider()\n                 .getPartitionedTopicMetadata(service, topic2, \"role\", null);\n@@ -236,18 +227,10 @@ private void addBrokerToZk(int number) throws Exception {\n         for (int i = 0; i < number; i++) {\n             LoadReport report = new LoadReport(null, null, \"pulsar://broker-:15000\" + i, null);\n             String reportData = ObjectMapperFactory.getThreadLocal().writeValueAsString(report);\n-            ZkUtils.createFullPathOptimistic(mockZooKeeper, LOADBALANCE_BROKERS_ROOT + \"/\" + \"broker-\" + i,\n-                    reportData.getBytes(ZookeeperClientFactoryImpl.ENCODING_SCHEME), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                    CreateMode.PERSISTENT);\n+            zkStore.put(LOADBALANCE_BROKERS_ROOT + \"/\" + \"broker-\" + i,\n+                    reportData.getBytes(StandardCharsets.UTF_8), Optional.of(-1L)).get();\n         }\n \n-        // sometimes test-environment takes longer time to trigger async mockZK-watch: so reload cache explicitly\n-        Field field = ZookeeperCacheLoader.class.getDeclaredField(\"availableBrokersCache\");\n-        field.setAccessible(true);\n-        ZooKeeperChildrenCache availableBrokersCache = (ZooKeeperChildrenCache) field\n-                .get(service.getDiscoveryProvider().localZkCache);\n-        availableBrokersCache.reloadCache(LOADBALANCE_BROKERS_ROOT);\n-\n         Awaitility.await().until(()\n                 -> service.getDiscoveryProvider().getAvailableBrokers().size() == number);\n     }"
  },
  {
    "sha": "0d2a0a81caf0f2eb1d5d5777b8fd18322a3bc4cc",
    "filename": "pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/BaseZKStarterTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 23,
    "changes": 33,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/BaseZKStarterTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/BaseZKStarterTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/BaseZKStarterTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -18,30 +18,31 @@\n  */\n package org.apache.pulsar.discovery.service.web;\n \n-import static org.apache.pulsar.discovery.service.web.ZookeeperCacheLoader.LOADBALANCE_BROKERS_ROOT;\n+import static org.apache.pulsar.broker.resources.MetadataStoreCacheLoader.LOADBALANCE_BROKERS_ROOT;\n \n-import java.util.concurrent.CompletableFuture;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n \n-import org.apache.bookkeeper.util.ZkUtils;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n-import org.apache.pulsar.zookeeper.ZookeeperClientFactoryImpl;\n-import org.apache.zookeeper.CreateMode;\n+import org.apache.pulsar.metadata.api.extended.MetadataStoreExtended;\n+import org.apache.pulsar.metadata.impl.ZKMetadataStore;\n import org.apache.zookeeper.MockZooKeeper;\n-import org.apache.zookeeper.ZooDefs;\n-import org.apache.zookeeper.ZooKeeper;\n \n import com.google.common.util.concurrent.MoreExecutors;\n \n public class BaseZKStarterTest {\n \n-    protected MockZooKeeper mockZooKeeper;\n+    private MockZooKeeper mockZooKeeper;\n+    protected MetadataStoreExtended zkStore;\n \n     protected void start() throws Exception {\n         mockZooKeeper = createMockZooKeeper();\n+        zkStore = new ZKMetadataStore(mockZooKeeper);\n+        zkStore.put(LOADBALANCE_BROKERS_ROOT, \"\".getBytes(StandardCharsets.UTF_8), Optional.of(-1L)).get();\n     }\n \n     protected void close() throws Exception {\n         mockZooKeeper.shutdown();\n+        zkStore.close();\n     }\n \n     /**\n@@ -51,21 +52,7 @@ protected void close() throws Exception {\n      */\n     protected MockZooKeeper createMockZooKeeper() throws Exception {\n         MockZooKeeper zk = MockZooKeeper.newInstance(MoreExecutors.newDirectExecutorService());\n-\n-        ZkUtils.createFullPathOptimistic(zk, LOADBALANCE_BROKERS_ROOT,\n-                \"\".getBytes(ZookeeperClientFactoryImpl.ENCODING_SCHEME), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                CreateMode.PERSISTENT);\n         return zk;\n     }\n \n-    protected static class DiscoveryZooKeeperClientFactoryImpl implements ZooKeeperClientFactory {\n-        static ZooKeeper zk;\n-\n-        @Override\n-        public CompletableFuture<ZooKeeper> create(String serverList, SessionType sessionType,\n-                int zkSessionTimeoutMillis) {\n-            return CompletableFuture.completedFuture(zk);\n-        }\n-    }\n-\n }"
  },
  {
    "sha": "50fd63db0cdc27d09c728291ce4f3fb1a7ba62b9",
    "filename": "pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceWebTest.java",
    "status": "modified",
    "additions": 66,
    "deletions": 55,
    "changes": 121,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceWebTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceWebTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/DiscoveryServiceWebTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -19,26 +19,27 @@\n package org.apache.pulsar.discovery.service.web;\n \n import static javax.ws.rs.core.Response.Status.BAD_GATEWAY;\n-import static javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR;\n-import static org.apache.pulsar.discovery.service.web.ZookeeperCacheLoader.LOADBALANCE_BROKERS_ROOT;\n+import static org.apache.pulsar.broker.resources.MetadataStoreCacheLoader.LOADBALANCE_BROKERS_ROOT;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n \n import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n \n import java.io.InputStream;\n import java.lang.reflect.Field;\n import java.net.URL;\n import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n import java.security.SecureRandom;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.TreeMap;\n+import java.util.concurrent.ExecutionException;\n import java.util.stream.Collectors;\n \n import javax.net.ssl.HttpsURLConnection;\n@@ -53,19 +54,21 @@\n import javax.ws.rs.client.WebTarget;\n import javax.ws.rs.core.MediaType;\n \n-import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.pulsar.broker.resources.MetadataStoreCacheLoader;\n+import org.apache.pulsar.broker.resources.PulsarResources;\n import org.apache.pulsar.common.policies.data.BundlesData;\n import org.apache.pulsar.common.util.ObjectMapperFactory;\n import org.apache.pulsar.common.util.RestException;\n import org.apache.pulsar.discovery.service.server.ServerManager;\n import org.apache.pulsar.discovery.service.server.ServiceConfig;\n+import org.apache.pulsar.metadata.api.MetadataStoreException;\n+import org.apache.pulsar.metadata.api.MetadataStoreException.AlreadyExistsException;\n+import org.apache.pulsar.metadata.api.extended.MetadataStoreExtended;\n import org.apache.pulsar.policies.data.loadbalancer.LoadReport;\n-import org.apache.pulsar.zookeeper.ZookeeperClientFactoryImpl;\n-import org.apache.zookeeper.CreateMode;\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.ZooDefs;\n import org.glassfish.jersey.client.ClientConfig;\n import org.glassfish.jersey.logging.LoggingFeature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n@@ -78,10 +81,14 @@\n  */\n public class DiscoveryServiceWebTest extends BaseZKStarterTest{\n \n+    private static final Logger log = LoggerFactory.getLogger(DiscoveryServiceWebTest.class);\n+\n     private Client client = ClientBuilder.newClient(new ClientConfig().register(LoggingFeature.class));\n     private static final String TLS_SERVER_CERT_FILE_PATH = \"./src/test/resources/certificate/server.crt\";\n     private static final String TLS_SERVER_KEY_FILE_PATH = \"./src/test/resources/certificate/server.key\";\n-\n+    // DiscoveryServiceServlet gets initialized by a server and this map will help to retrieve ZK while mocking\n+    // DiscoveryServiceServlet\n+    private static final Map<String, MetadataStoreExtended> metadataStoreInstanceCache = Maps.newConcurrentMap();\n \n     @BeforeMethod\n     private void init() throws Exception {\n@@ -91,39 +98,41 @@ private void init() throws Exception {\n     @AfterMethod(alwaysRun = true)\n     private void cleanup() throws Exception {\n         close();\n+        metadataStoreInstanceCache.clear();\n     }\n \n     @Test\n     public void testNextBroker() throws Exception {\n \n+        PulsarResources resources = new PulsarResources(zkStore, null);\n+\n         // 1. create znode for each broker\n         List<String> brokers = Lists.newArrayList(\"broker-1\", \"broker-2\", \"broker-3\");\n         brokers.stream().forEach(broker -> {\n+            String path = LOADBALANCE_BROKERS_ROOT + \"/\" + broker;\n             try {\n                 LoadReport report = new LoadReport(broker, null, null, null);\n                 String reportData = ObjectMapperFactory.getThreadLocal().writeValueAsString(report);\n-                ZkUtils.createFullPathOptimistic(mockZooKeeper, LOADBALANCE_BROKERS_ROOT + \"/\" + broker,\n-                        reportData.getBytes(ZookeeperClientFactoryImpl.ENCODING_SCHEME), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                        CreateMode.PERSISTENT);\n-            } catch (KeeperException.NodeExistsException ne) {\n+                zkStore.put(path, reportData.getBytes(StandardCharsets.UTF_8), Optional.of(-1L))\n+                        .get();\n+            } catch (ExecutionException ne) {\n                 // Ok\n-            } catch (KeeperException | InterruptedException e) {\n-                e.printStackTrace();\n-                fail(\"failed while creating broker znodes\");\n-            } catch (JsonProcessingException e) {\n-                e.printStackTrace();\n-                fail(\"failed while creating broker znodes\");\n+            } catch (Exception e) {\n+                if (e instanceof ExecutionException && (e.getCause()) instanceof AlreadyExistsException) {\n+                    // Ok\n+                } else {\n+                    log.warn(\"Failed to write to metadata-store {}\", path, e);\n+                    fail(\"failed while creating broker znodes\");\n+                }\n             }\n         });\n \n         // 2. Setup discovery-zkcache\n         DiscoveryServiceServlet discovery = new DiscoveryServiceServlet();\n-        DiscoveryZooKeeperClientFactoryImpl.zk = mockZooKeeper;\n-        Field zkCacheField = DiscoveryServiceServlet.class.getDeclaredField(\"zkCache\");\n+        Field zkCacheField = DiscoveryServiceServlet.class.getDeclaredField(\"metadataStoreCacheLoader\");\n         zkCacheField.setAccessible(true);\n-        ZookeeperCacheLoader zkCache = new ZookeeperCacheLoader(new DiscoveryZooKeeperClientFactoryImpl(),\n-                \"zk-test-servers\", 30_000);\n-        zkCacheField.set(discovery, zkCache);\n+        MetadataStoreCacheLoader metadataCacheLoader = new MetadataStoreCacheLoader(resources, 30_000);\n+        zkCacheField.set(discovery, metadataCacheLoader);\n \n         // 3. verify nextBroker functionality : round-robin in broker list\n         for (String broker : brokers) {\n@@ -138,11 +147,11 @@ public void testRiderectUrlWithServerStarted() throws Exception {\n         ServiceConfig config = new ServiceConfig();\n         config.setWebServicePort(Optional.of(0));\n         ServerManager server = new ServerManager(config);\n-        DiscoveryZooKeeperClientFactoryImpl.zk = mockZooKeeper;\n         Map<String, String> params = new TreeMap<>();\n-        params.put(\"zookeeperServers\", \"dummy-value\");\n-        params.put(\"zookeeperClientFactoryClass\", DiscoveryZooKeeperClientFactoryImpl.class.getName());\n-        server.addServlet(\"/\", DiscoveryServiceServlet.class, params);\n+        String zkServerUrl = \"mockZkServer\";\n+        metadataStoreInstanceCache.put(zkServerUrl, zkStore);\n+        params.put(\"zookeeperServers\", zkServerUrl);\n+        server.addServlet(\"/\", DiscoveryServiceServletTest.class, params);\n         server.start();\n \n         // 2. create znode for each broker\n@@ -152,17 +161,15 @@ public void testRiderectUrlWithServerStarted() throws Exception {\n                 final String broker = b + \":15000\";\n                 LoadReport report = new LoadReport(\"http://\" + broker, null, null, null);\n                 String reportData = ObjectMapperFactory.getThreadLocal().writeValueAsString(report);\n-                ZkUtils.createFullPathOptimistic(mockZooKeeper, LOADBALANCE_BROKERS_ROOT + \"/\" + broker,\n-                        reportData.getBytes(ZookeeperClientFactoryImpl.ENCODING_SCHEME), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                        CreateMode.PERSISTENT);\n-            } catch (KeeperException.NodeExistsException ne) {\n-                // Ok\n-            } catch (KeeperException | InterruptedException e) {\n-                e.printStackTrace();\n-                fail(\"failed while creating broker znodes\");\n-            } catch (JsonProcessingException e) {\n-                e.printStackTrace();\n-                fail(\"failed while creating broker znodes\");\n+                zkStore.put(LOADBALANCE_BROKERS_ROOT + \"/\" + broker,\n+                        reportData.getBytes(StandardCharsets.UTF_8), Optional.of(-1L)).get();\n+            }  catch (Exception e) {\n+                if (e instanceof ExecutionException && (e.getCause()) instanceof AlreadyExistsException) {\n+                    // Ok\n+                } else {\n+                    log.warn(\"Failed to write to metadata-store\", e);\n+                    fail(\"failed while creating broker znodes\");\n+                }\n             }\n         });\n \n@@ -195,12 +202,11 @@ public void testTlsEnable() throws Exception {\n         config.setTlsCertificateFilePath(TLS_SERVER_CERT_FILE_PATH);\n         config.setTlsKeyFilePath(TLS_SERVER_KEY_FILE_PATH);\n         ServerManager server = new ServerManager(config);\n-        DiscoveryZooKeeperClientFactoryImpl.zk = mockZooKeeper;\n         Map<String, String> params = new TreeMap<>();\n-        params.put(\"zookeeperServers\", \"dummy-value\");\n-        params.put(\"zookeeperClientFactoryClass\", DiscoveryZooKeeperClientFactoryImpl.class.getName());\n-        server.addServlet(\"/\", DiscoveryServiceServlet.class, params);\n-        server.start();\n+        String zkServerUrl = \"mockZkServer\";\n+        metadataStoreInstanceCache.put(zkServerUrl, zkStore);\n+        params.put(\"zookeeperServers\", zkServerUrl);\n+        server.addServlet(\"/\", DiscoveryServiceServletTest.class, params);\n \n         // 2. get ZookeeperCacheLoader to add more brokers\n         final String redirect_broker_host = \"broker-1\";\n@@ -212,17 +218,15 @@ public void testTlsEnable() throws Exception {\n \n                 LoadReport report = new LoadReport(\"http://\" + brokerUrl, \"https://\" + brokerUrlTls, null, null);\n                 String reportData = ObjectMapperFactory.getThreadLocal().writeValueAsString(report);\n-                ZkUtils.createFullPathOptimistic(mockZooKeeper, LOADBALANCE_BROKERS_ROOT + \"/\" + brokerUrl,\n-                        reportData.getBytes(ZookeeperClientFactoryImpl.ENCODING_SCHEME), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                        CreateMode.PERSISTENT);\n-            } catch (KeeperException.NodeExistsException ne) {\n-                // Ok\n-            } catch (KeeperException | InterruptedException e) {\n-                e.printStackTrace();\n-                fail(\"failed while creating broker znodes\");\n-            } catch (JsonProcessingException e) {\n-                e.printStackTrace();\n-                fail(\"failed while creating broker znodes\");\n+                zkStore.put(LOADBALANCE_BROKERS_ROOT + \"/\" + brokerUrl,\n+                        reportData.getBytes(StandardCharsets.UTF_8), Optional.of(-1L)).get();\n+            }  catch (Exception e) {\n+                if (e instanceof ExecutionException && (e.getCause()) instanceof AlreadyExistsException) {\n+                    // Ok\n+                } else {\n+                    log.warn(\"Failed to write to metadata-store\", e);\n+                    fail(\"failed while creating broker znodes\");\n+                }\n             }\n         });\n \n@@ -290,4 +294,11 @@ public void testException() {\n         return redirectBrokers;\n     }\n \n+    \n+    public static class DiscoveryServiceServletTest extends DiscoveryServiceServlet {\n+        @Override\n+        public MetadataStoreExtended createLocalMetadataStore(String zookeeperServers, int operationimeoutMs) throws MetadataStoreException {\n+            return metadataStoreInstanceCache.get(zookeeperServers);\n+        }\n+    }\n }"
  },
  {
    "sha": "a0691e34b696d1edfc37b8ead9c9e37790724162",
    "filename": "pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/MetadataStoreCacheLoaderTest.java",
    "status": "renamed",
    "additions": 11,
    "deletions": 13,
    "changes": 24,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/MetadataStoreCacheLoaderTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/MetadataStoreCacheLoaderTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/MetadataStoreCacheLoaderTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -18,29 +18,30 @@\n  */\n package org.apache.pulsar.discovery.service.web;\n \n-import static org.apache.pulsar.discovery.service.web.ZookeeperCacheLoader.LOADBALANCE_BROKERS_ROOT;\n+import static org.apache.pulsar.broker.resources.MetadataStoreCacheLoader.LOADBALANCE_BROKERS_ROOT;\n import static org.testng.Assert.fail;\n \n import java.io.IOException;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import org.apache.pulsar.broker.resources.MetadataStoreCacheLoader;\n+import org.apache.pulsar.broker.resources.PulsarResources;\n import org.apache.pulsar.common.util.ObjectMapperFactory;\n import org.apache.pulsar.policies.data.loadbalancer.LoadManagerReport;\n import org.apache.pulsar.policies.data.loadbalancer.LoadReport;\n import org.apache.pulsar.policies.data.loadbalancer.LocalBrokerData;\n-import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.ZooDefs;\n import org.testng.Assert;\n import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import com.google.common.collect.Lists;\n \n-public class ZookeeperCacheLoaderTest extends BaseZKStarterTest {\n+public class MetadataStoreCacheLoaderTest extends BaseZKStarterTest {\n \n     @BeforeMethod\n     private void init() throws Exception {\n@@ -62,19 +63,17 @@ private void cleanup() throws Exception {\n     @Test\n     public void testZookeeperCacheLoader() throws InterruptedException, KeeperException, Exception {\n \n-        DiscoveryZooKeeperClientFactoryImpl.zk = mockZooKeeper;\n-\n+        PulsarResources resources = new PulsarResources(zkStore, null);\n         @SuppressWarnings(\"resource\")\n-        ZookeeperCacheLoader zkLoader = new ZookeeperCacheLoader(new DiscoveryZooKeeperClientFactoryImpl(), \"\", 30_000);\n+        MetadataStoreCacheLoader zkLoader = new MetadataStoreCacheLoader(resources, 30_000);\n \n         List<String> brokers = Lists.newArrayList(\"broker-1:15000\", \"broker-2:15000\", \"broker-3:15000\");\n         for (int i = 0; i < brokers.size(); i++) {\n             try {\n                 LoadManagerReport report = i % 2 == 0 ? getSimpleLoadManagerLoadReport(brokers.get(i))\n                         : getModularLoadManagerLoadReport(brokers.get(i));\n-                zkLoader.getLocalZkCache().getZooKeeper().create(LOADBALANCE_BROKERS_ROOT + \"/\" + brokers.get(i),\n-                        ObjectMapperFactory.getThreadLocal().writeValueAsBytes(report), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                        CreateMode.PERSISTENT);\n+                zkStore.put(LOADBALANCE_BROKERS_ROOT + \"/\" + brokers.get(i),\n+                        ObjectMapperFactory.getThreadLocal().writeValueAsBytes(report), Optional.of(-1L));\n             } catch (Exception e) {\n                 fail(\"failed while creating broker znodes\");\n             }\n@@ -100,9 +99,8 @@ public void testZookeeperCacheLoader() throws InterruptedException, KeeperExcept\n         // 4.a add new broker\n         final String newBroker = \"broker-4:15000\";\n         LoadManagerReport report = getSimpleLoadManagerLoadReport(newBroker);\n-        zkLoader.getLocalZkCache().getZooKeeper().create(LOADBALANCE_BROKERS_ROOT + \"/\" + newBroker,\n-                ObjectMapperFactory.getThreadLocal().writeValueAsBytes(report), ZooDefs.Ids.OPEN_ACL_UNSAFE,\n-                CreateMode.PERSISTENT);\n+        zkStore.put(LOADBALANCE_BROKERS_ROOT + \"/\" + newBroker,\n+                ObjectMapperFactory.getThreadLocal().writeValueAsBytes(report), Optional.of(-1L));\n         brokers.add(newBroker);\n \n         Thread.sleep(100); // wait for 100 msec: to get cache updated",
    "previous_filename": "pulsar-discovery-service/src/test/java/org/apache/pulsar/discovery/service/web/ZookeeperCacheLoaderTest.java"
  },
  {
    "sha": "8fcc3e06d4e59a772c65b3a066fcdf4e95210290",
    "filename": "pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/BrokerDiscoveryProvider.java",
    "status": "modified",
    "additions": 7,
    "deletions": 9,
    "changes": 16,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/BrokerDiscoveryProvider.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/BrokerDiscoveryProvider.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/BrokerDiscoveryProvider.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -32,13 +32,12 @@\n import org.apache.bookkeeper.common.util.OrderedScheduler;\n import org.apache.pulsar.broker.PulsarServerException;\n import org.apache.pulsar.broker.authentication.AuthenticationDataSource;\n+import org.apache.pulsar.broker.resources.MetadataStoreCacheLoader;\n import org.apache.pulsar.broker.resources.PulsarResources;\n import org.apache.pulsar.common.naming.TopicName;\n import org.apache.pulsar.common.partition.PartitionedTopicMetadata;\n import org.apache.pulsar.common.policies.data.TenantInfo;\n import org.apache.pulsar.policies.data.loadbalancer.LoadManagerReport;\n-import org.apache.pulsar.proxy.server.util.ZookeeperCacheLoader;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -53,7 +52,7 @@\n  */\n public class BrokerDiscoveryProvider implements Closeable {\n \n-    final ZookeeperCacheLoader localZkCache;\n+    final MetadataStoreCacheLoader metadataStoreCacheLoader;\n     final PulsarResources pulsarResources;\n \n     private final AtomicInteger counter = new AtomicInteger();\n@@ -65,13 +64,12 @@\n \n     private static final String PARTITIONED_TOPIC_PATH_ZNODE = \"partitioned-topics\";\n \n-    public BrokerDiscoveryProvider(ProxyConfiguration config, ZooKeeperClientFactory zkClientFactory,\n-            PulsarResources pulsarResources)\n+    public BrokerDiscoveryProvider(ProxyConfiguration config, PulsarResources pulsarResources)\n             throws PulsarServerException {\n         try {\n-            localZkCache = new ZookeeperCacheLoader(zkClientFactory, config.getZookeeperServers(),\n-                    config.getZookeeperSessionTimeoutMs());\n             this.pulsarResources = pulsarResources;\n+            this.metadataStoreCacheLoader = new MetadataStoreCacheLoader(pulsarResources,\n+                    config.getZookeeperSessionTimeoutMs());\n         } catch (Exception e) {\n             LOG.error(\"Failed to start ZooKeeper {}\", e.getMessage(), e);\n             throw new PulsarServerException(\"Failed to start zookeeper :\" + e.getMessage(), e);\n@@ -85,7 +83,7 @@ public BrokerDiscoveryProvider(ProxyConfiguration config, ZooKeeperClientFactory\n      * @throws PulsarServerException\n      */\n     LoadManagerReport nextBroker() throws PulsarServerException {\n-        List<LoadManagerReport> availableBrokers = localZkCache.getAvailableBrokers();\n+        List<LoadManagerReport> availableBrokers = metadataStoreCacheLoader.getAvailableBrokers();\n \n         if (availableBrokers.isEmpty()) {\n             throw new PulsarServerException(\"No active broker is available\");\n@@ -165,7 +163,7 @@ public static String path(String... parts) {\n \n     @Override\n     public void close() throws IOException {\n-        localZkCache.close();\n+        metadataStoreCacheLoader.close();\n         orderedExecutor.shutdown();\n         scheduledExecutorScheduler.shutdownNow();\n     }"
  },
  {
    "sha": "b3b6aea74056e30cc68368931ff7a064461d64d5",
    "filename": "pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/ProxyService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 13,
    "changes": 14,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/ProxyService.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/ProxyService.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/ProxyService.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -57,8 +57,6 @@\n import org.apache.pulsar.metadata.api.extended.MetadataStoreExtended;\n import org.apache.pulsar.broker.web.plugin.servlet.AdditionalServlets;\n import org.apache.pulsar.proxy.stats.TopicStats;\n-import org.apache.pulsar.zookeeper.ZooKeeperClientFactory;\n-import org.apache.pulsar.zookeeper.ZookeeperClientFactoryImpl;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -76,7 +74,6 @@\n     private ConfigurationMetadataCacheService configurationCacheService;\n     private final AuthenticationService authenticationService;\n     private AuthorizationService authorizationService;\n-    private ZooKeeperClientFactory zkClientFactory = null;\n     private MetadataStoreExtended localMetadataStore;\n     private MetadataStoreExtended configMetadataStore;\n     private PulsarResources pulsarResources;\n@@ -172,8 +169,7 @@ public void start() throws Exception {\n             localMetadataStore = createLocalMetadataStore();\n             configMetadataStore = createConfigurationMetadataStore();\n             pulsarResources = new PulsarResources(localMetadataStore, configMetadataStore);\n-            discoveryProvider = new BrokerDiscoveryProvider(this.proxyConfig, getZooKeeperClientFactory(),\n-                    pulsarResources);\n+            discoveryProvider = new BrokerDiscoveryProvider(this.proxyConfig, pulsarResources);\n             this.configurationCacheService = new ConfigurationMetadataCacheService(pulsarResources, null);\n             authorizationService = new AuthorizationService(PulsarConfigurationLoader.convertFrom(proxyConfig),\n                                                             configurationCacheService);\n@@ -223,14 +219,6 @@ public void start() throws Exception {\n         }\n     }\n \n-    public ZooKeeperClientFactory getZooKeeperClientFactory() {\n-        if (zkClientFactory == null) {\n-            zkClientFactory = new ZookeeperClientFactoryImpl();\n-        }\n-        // Return default factory\n-        return zkClientFactory;\n-    }\n-\n     public BrokerDiscoveryProvider getDiscoveryProvider() {\n         return discoveryProvider;\n     }"
  },
  {
    "sha": "fb2057a997d0bbba3363f277b6c1f98de1b9426c",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/AuthedAdminProxyHandlerTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/AuthedAdminProxyHandlerTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/AuthedAdminProxyHandlerTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/AuthedAdminProxyHandlerTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -103,7 +103,7 @@ protected void setup() throws Exception {\n                 new ZKMetadataStore(mockZooKeeperGlobal));\n         webServer = new WebServer(proxyConfig, new AuthenticationService(\n                                           PulsarConfigurationLoader.convertFrom(proxyConfig)));\n-        discoveryProvider = spy(new BrokerDiscoveryProvider(proxyConfig, mockZooKeeperClientFactory, resource));\n+        discoveryProvider = spy(new BrokerDiscoveryProvider(proxyConfig, resource));\n         LoadManagerReport report = new LoadReport(brokerUrl.toString(), brokerUrlTls.toString(), null, null);\n         doReturn(report).when(discoveryProvider).nextBroker();\n "
  },
  {
    "sha": "a909a9ff3b818271d0385e4e2cad079a8947b1d7",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyAdditionalServletTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyAdditionalServletTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyAdditionalServletTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyAdditionalServletTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -83,7 +83,6 @@ protected void setup() throws Exception {\n \n         proxyService = Mockito.spy(new ProxyService(proxyConfig,\n                 new AuthenticationService(PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  },
  {
    "sha": "ba4b1107e878ace8ddad4df5a0a241198ab7e60e",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyAuthenticatedProducerConsumerTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyAuthenticatedProducerConsumerTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyAuthenticatedProducerConsumerTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyAuthenticatedProducerConsumerTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -125,7 +125,6 @@ protected void setup() throws Exception {\n \n         proxyService = Mockito.spy(new ProxyService(proxyConfig, new AuthenticationService(\n                                                             PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n         proxyService.start();"
  },
  {
    "sha": "062db184e06826c571fbee713e073cd97c9eb847",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyConnectionThrottlingTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyConnectionThrottlingTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyConnectionThrottlingTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyConnectionThrottlingTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -59,7 +59,6 @@ protected void setup() throws Exception {\n         proxyConfig.setMaxConcurrentInboundConnections(NUM_CONCURRENT_INBOUND_CONNECTION);\n         proxyService = Mockito.spy(new ProxyService(proxyConfig, new AuthenticationService(\n                                                             PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  },
  {
    "sha": "4691a37f02cc0a70c085b9578de4f20817729b36",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyEnableHAProxyProtocolTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyEnableHAProxyProtocolTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyEnableHAProxyProtocolTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyEnableHAProxyProtocolTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -62,7 +62,6 @@ protected void setup() throws Exception {\n \n         proxyService = Mockito.spy(new ProxyService(proxyConfig, new AuthenticationService(\n                 PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  },
  {
    "sha": "fe6b4b867f0a3bf082d38661a71963d045fbaa7c",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyIsAHttpProxyTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyIsAHttpProxyTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyIsAHttpProxyTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyIsAHttpProxyTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -187,7 +187,7 @@ public void testSingleRedirect() throws Exception {\n \n         WebServer webServer = new WebServer(proxyConfig, authService);\n         ProxyServiceStarter.addWebServerHandlers(webServer, proxyConfig, null,\n-                new BrokerDiscoveryProvider(proxyConfig, mockZooKeeperClientFactory, resource));\n+                new BrokerDiscoveryProvider(proxyConfig, resource));\n         webServer.start();\n         try {\n             Response r = client.target(webServer.getServiceUri()).path(\"/ui/foobar\").request().get();\n@@ -216,7 +216,7 @@ public void testMultipleRedirect() throws Exception {\n \n         WebServer webServer = new WebServer(proxyConfig, authService);\n         ProxyServiceStarter.addWebServerHandlers(webServer, proxyConfig, null,\n-                new BrokerDiscoveryProvider(proxyConfig, mockZooKeeperClientFactory, resource));\n+                new BrokerDiscoveryProvider(proxyConfig, resource));\n         webServer.start();\n         try {\n             Response r1 = client.target(webServer.getServiceUri()).path(\"/server1/foobar\").request().get();\n@@ -247,7 +247,7 @@ public void testTryingToUseExistingPath() throws Exception {\n \n         WebServer webServer = new WebServer(proxyConfig, authService);\n         ProxyServiceStarter.addWebServerHandlers(webServer, proxyConfig, null,\n-                new BrokerDiscoveryProvider(proxyConfig, mockZooKeeperClientFactory, resource));\n+                new BrokerDiscoveryProvider(proxyConfig, resource));\n \n     }\n \n@@ -266,7 +266,7 @@ public void testLongPathInProxyTo() throws Exception {\n \n         WebServer webServer = new WebServer(proxyConfig, authService);\n         ProxyServiceStarter.addWebServerHandlers(webServer, proxyConfig, null,\n-                new BrokerDiscoveryProvider(proxyConfig, mockZooKeeperClientFactory, resource));\n+                new BrokerDiscoveryProvider(proxyConfig, resource));\n         webServer.start();\n         try {\n             Response r = client.target(webServer.getServiceUri()).path(\"/ui/foobar\").request().get();\n@@ -293,7 +293,7 @@ public void testProxyToEndsInSlash() throws Exception {\n \n         WebServer webServer = new WebServer(proxyConfig, authService);\n         ProxyServiceStarter.addWebServerHandlers(webServer, proxyConfig, null,\n-                new BrokerDiscoveryProvider(proxyConfig, mockZooKeeperClientFactory, resource));\n+                new BrokerDiscoveryProvider(proxyConfig, resource));\n         webServer.start();\n         try {\n             Response r = client.target(webServer.getServiceUri()).path(\"/ui/foobar\").request().get();\n@@ -319,7 +319,7 @@ public void testLongPath() throws Exception {\n \n         WebServer webServer = new WebServer(proxyConfig, authService);\n         ProxyServiceStarter.addWebServerHandlers(webServer, proxyConfig, null,\n-                new BrokerDiscoveryProvider(proxyConfig, mockZooKeeperClientFactory, resource));\n+                new BrokerDiscoveryProvider(proxyConfig, resource));\n         webServer.start();\n         try {\n             Response r = client.target(webServer.getServiceUri()).path(\"/foo/bar/blah/foobar\").request().get();\n@@ -344,7 +344,7 @@ public void testPathEndsInSlash() throws Exception {\n \n         WebServer webServer = new WebServer(proxyConfig, authService);\n         ProxyServiceStarter.addWebServerHandlers(webServer, proxyConfig, null,\n-                new BrokerDiscoveryProvider(proxyConfig, mockZooKeeperClientFactory, resource));\n+                new BrokerDiscoveryProvider(proxyConfig, resource));\n         webServer.start();\n         try {\n             Response r = client.target(webServer.getServiceUri()).path(\"/ui/foobar\").request().get();\n@@ -376,7 +376,7 @@ public void testStreaming() throws Exception {\n \n         WebServer webServer = new WebServer(proxyConfig, authService);\n         ProxyServiceStarter.addWebServerHandlers(webServer, proxyConfig, null,\n-                new BrokerDiscoveryProvider(proxyConfig, mockZooKeeperClientFactory, resource));\n+                new BrokerDiscoveryProvider(proxyConfig, resource));\n         webServer.start();\n \n         HttpClient httpClient = new HttpClient();"
  },
  {
    "sha": "ec5d45bd1cb77b8ba5393ea7de41ee313b732b57",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyKeyStoreTlsTestWithAuth.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyKeyStoreTlsTestWithAuth.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyKeyStoreTlsTestWithAuth.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyKeyStoreTlsTestWithAuth.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -106,7 +106,6 @@ protected void setup() throws Exception {\n         proxyService = Mockito.spy(new ProxyService(proxyConfig,\n                                                     new AuthenticationService(\n                                                             PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  },
  {
    "sha": "3e6f7ac5296a081101c299716e184a91814089f1",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyKeyStoreTlsTestWithoutAuth.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyKeyStoreTlsTestWithoutAuth.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyKeyStoreTlsTestWithoutAuth.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyKeyStoreTlsTestWithoutAuth.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -92,7 +92,6 @@ protected void setup() throws Exception {\n \n         proxyService = Mockito.spy(new ProxyService(proxyConfig, new AuthenticationService(\n                                                             PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  },
  {
    "sha": "f7f3fff34c0376f71179327119d7b5a7e2a3b6c4",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyLookupThrottlingTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyLookupThrottlingTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyLookupThrottlingTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyLookupThrottlingTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -60,7 +60,6 @@ protected void setup() throws Exception {\n         AuthenticationService authenticationService = new AuthenticationService(\n                 PulsarConfigurationLoader.convertFrom(proxyConfig));\n         proxyService = Mockito.spy(new ProxyService(proxyConfig, authenticationService));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  },
  {
    "sha": "33c1ed63475ef91eecf44fd279d72bc5e626bfc9",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyParserTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyParserTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyParserTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyParserTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -78,7 +78,6 @@ protected void setup() throws Exception {\n \n         proxyService = Mockito.spy(new ProxyService(proxyConfig, new AuthenticationService(\n                                                             PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  },
  {
    "sha": "936f17055d779f50d9b0770d0eabfaedaaf99dd3",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyStatsTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyStatsTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyStatsTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyStatsTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -74,7 +74,6 @@ protected void setup() throws Exception {\n \n         proxyService = Mockito.spy(new ProxyService(proxyConfig,\n                 new AuthenticationService(PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  },
  {
    "sha": "e491d640b01ab2b9f1a3e60e15db2d9cdd11a852",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -96,7 +96,6 @@ protected void setup() throws Exception {\n \n         proxyService = Mockito.spy(new ProxyService(proxyConfig, new AuthenticationService(\n                                                             PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  },
  {
    "sha": "e844661fb3111f206e70bf0873576d972300fe9a",
    "filename": "pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyTlsTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/pulsar/blob/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyTlsTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/ee60d05f88838c1e9c14359f5e1d7895db9e9ded/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyTlsTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-proxy/src/test/java/org/apache/pulsar/proxy/server/ProxyTlsTest.java?ref=ee60d05f88838c1e9c14359f5e1d7895db9e9ded",
    "patch": "@@ -66,7 +66,6 @@ protected void setup() throws Exception {\n \n         proxyService = Mockito.spy(new ProxyService(proxyConfig, new AuthenticationService(\n                                                             PulsarConfigurationLoader.convertFrom(proxyConfig))));\n-        doReturn(mockZooKeeperClientFactory).when(proxyService).getZooKeeperClientFactory();\n         doReturn(new ZKMetadataStore(mockZooKeeper)).when(proxyService).createLocalMetadataStore();\n         doReturn(new ZKMetadataStore(mockZooKeeperGlobal)).when(proxyService).createConfigurationMetadataStore();\n "
  }
]
