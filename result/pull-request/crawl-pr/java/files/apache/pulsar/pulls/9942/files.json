[
  {
    "sha": "9825d07e3b4ce0e13f214c94c5ae4b25c8587968",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/TransactionMetadataStoreService.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -129,7 +129,7 @@ public boolean test(NamespaceBundle namespaceBundle) {\n \n     public void addTransactionMetadataStore(TransactionCoordinatorID tcId) {\n         pulsarService.getBrokerService()\n-                .getManagedLedgerConfig(TopicName.get(MLTransactionLogImpl.TRANSACTION_LOG_PREFIX + tcId))\n+                .getManagedLedgerConfig(TopicName.get(MLTransactionLogImpl.TRANSACTION_LOG_PREFIX + tcId.getId()))\n                 .whenComplete((v, e) -> {\n                     if (e != null) {\n                         LOG.error(\"Add transaction metadata store with id {} error\", tcId.getId(), e);"
  },
  {
    "sha": "5545068336382d716796abc9d771cbe912acb0f3",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -101,6 +101,7 @@\n import org.apache.pulsar.broker.stats.ReplicationMetrics;\n import org.apache.pulsar.broker.transaction.buffer.TransactionBuffer;\n import org.apache.pulsar.broker.transaction.buffer.impl.TransactionBufferDisable;\n+import org.apache.pulsar.broker.transaction.buffer.impl.TransactionBufferStats;\n import org.apache.pulsar.client.admin.LongRunningProcessStatus;\n import org.apache.pulsar.client.admin.OffloadProcessStatus;\n import org.apache.pulsar.client.api.MessageId;\n@@ -1741,6 +1742,13 @@ public TopicStats getStats(boolean getPreciseBacklog, boolean subscriptionBacklo\n         stats.deduplicationStatus = messageDeduplication.getStatus().toString();\n         stats.topicEpoch = topicEpoch.orElse(null);\n         stats.offloadedStorageSize = ledger.getOffloadedSize();\n+        TransactionBufferStats transactionBufferStats = transactionBuffer.getTransactionBufferStats();\n+        stats.activeTransactions = transactionBufferStats.activeTransactions;\n+        stats.commitTransactionCount = transactionBufferStats.commitTransactionCount;\n+        stats.abortTransactionCount = transactionBufferStats.abortTransactionCount;\n+        stats.registeredTransactionCount = transactionBufferStats.registeredTransactionCount;\n+        stats.publishTxnMessageCount = transactionBufferStats.publishTxnMessageCount;\n+        stats.existedAbortTransactions = transactionBufferStats.existedAbortTransactions;\n         return stats;\n     }\n "
  },
  {
    "sha": "09e8a8e60562ef7434595db6e9ba2367c15d2890",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/stats/prometheus/NamespaceStatsAggregator.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/stats/prometheus/NamespaceStatsAggregator.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/stats/prometheus/NamespaceStatsAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/stats/prometheus/NamespaceStatsAggregator.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -117,6 +117,12 @@ private static void getTopicStats(Topic topic, TopicStats stats, boolean include\n         stats.bytesInCounter = tStatus.bytesInCounter;\n         stats.msgOutCounter = tStatus.msgOutCounter;\n         stats.bytesOutCounter = tStatus.bytesOutCounter;\n+        stats.activeTransactions = tStatus.activeTransactions;\n+        stats.commitTransactionCount = tStatus.commitTransactionCount;\n+        stats.abortTransactionCount = tStatus.abortTransactionCount;\n+        stats.registeredTransactionCount = tStatus.registeredTransactionCount;\n+        stats.publishTxnMessageCount = tStatus.publishTxnMessageCount;\n+        stats.existedAbortTransactions = tStatus.existedAbortTransactions;\n \n         stats.producersCount = 0;\n         topic.getProducers().values().forEach(producer -> {"
  },
  {
    "sha": "484ebfd42af7a23e49b0315d905d24f0c0ac1d18",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/stats/prometheus/TopicStats.java",
    "status": "modified",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/stats/prometheus/TopicStats.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/stats/prometheus/TopicStats.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/stats/prometheus/TopicStats.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -59,6 +59,15 @@\n     // Used for tracking duplicate TYPE definitions\n     static Map<String, String> metricWithTypeDefinition = new HashMap<>();\n \n+    // Transaction buffer stats\n+    long activeTransactions;\n+    long commitTransactionCount;\n+    long abortTransactionCount;\n+    long registeredTransactionCount;\n+    long publishTxnMessageCount;\n+    long existedAbortTransactions;\n+\n+\n \n     public void reset() {\n         subscriptionsCount = 0;\n@@ -87,6 +96,13 @@ public void reset() {\n         storageWriteLatencyBuckets.reset();\n         storageLedgerWriteLatencyBuckets.reset();\n         entrySizeBuckets.reset();\n+\n+        activeTransactions = 0;\n+        commitTransactionCount = 0;\n+        abortTransactionCount = 0;\n+        registeredTransactionCount = 0;\n+        publishTxnMessageCount = 0;\n+        existedAbortTransactions = 0;\n     }\n \n     static void resetTypes() {\n@@ -249,6 +265,19 @@ static void printTopicStats(SimpleTextOutputStream stream, String cluster, Strin\n \n         metric(stream, cluster, namespace, topic, \"pulsar_in_bytes_total\", stats.bytesInCounter);\n         metric(stream, cluster, namespace, topic, \"pulsar_in_messages_total\", stats.msgInCounter);\n+\n+        metric(stream, cluster, namespace, topic, \"pulsar_transaction_buffer_active_transactions\",\n+                stats.activeTransactions);\n+        metric(stream, cluster, namespace, topic, \"pulsar_transaction_buffer_commit_transaction_count\",\n+                stats.commitTransactionCount);\n+        metric(stream, cluster, namespace, topic, \"pulsar_transaction_buffer_abort_transaction_count\",\n+                stats.abortTransactionCount);\n+        metric(stream, cluster, namespace, topic, \"pulsar_transaction_buffer_registered_transaction_count\",\n+                stats.registeredTransactionCount);\n+        metric(stream, cluster, namespace, topic, \"pulsar_transaction_buffer_existed_abort_transactions\",\n+                stats.existedAbortTransactions);\n+        metric(stream, cluster, namespace, topic, \"pulsar_transaction_buffer_publish_message_count\",\n+                stats.publishTxnMessageCount);\n     }\n \n     static void metricType(SimpleTextOutputStream stream, String name) {"
  },
  {
    "sha": "136151ecc360b31c4ff56706e8e76dcd9aac957a",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/TransactionBuffer.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/TransactionBuffer.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/TransactionBuffer.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/TransactionBuffer.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -24,6 +24,7 @@\n import java.util.concurrent.CompletableFuture;\n import org.apache.bookkeeper.mledger.Position;\n import org.apache.bookkeeper.mledger.impl.PositionImpl;\n+import org.apache.pulsar.broker.transaction.buffer.impl.TransactionBufferStats;\n import org.apache.pulsar.client.api.transaction.TxnID;\n \n /**\n@@ -147,4 +148,10 @@\n      * @return the stable position.\n      */\n     PositionImpl getMaxReadPosition();\n+\n+    /**\n+     * Get the transaction buffer stats.\n+     * @return the transaction buffer stats.\n+     */\n+    TransactionBufferStats getTransactionBufferStats();\n }"
  },
  {
    "sha": "8a52b40f7c4aabc6e13f4c74ea271f79bcaeef2f",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBuffer.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBuffer.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBuffer.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/InMemTransactionBuffer.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -364,4 +364,9 @@ public PositionImpl getMaxReadPosition() {\n         return PositionImpl.latest;\n     }\n \n+    @Override\n+    public TransactionBufferStats getTransactionBufferStats() {\n+        return new TransactionBufferStats();\n+    }\n+\n }"
  },
  {
    "sha": "c7b841ebc48f7bdbfa481516435c05993a821071",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java",
    "status": "modified",
    "additions": 28,
    "deletions": 2,
    "changes": 30,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TopicTransactionBuffer.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -27,6 +27,7 @@\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.LongAdder;\n import lombok.SneakyThrows;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.bookkeeper.mledger.AsyncCallbacks;\n@@ -86,12 +87,21 @@\n \n     private final int takeSnapshotIntervalTime;\n \n-    private final CompletableFuture<Void> transactionBufferFuture;\n+    private final LongAdder publishTxnMessageCount;\n+\n+    private final LongAdder commitTransactionCount;\n+\n+    private final LongAdder abortTransactionCount;\n+\n+    private final LongAdder registeredTransactionCount;\n \n     public TopicTransactionBuffer(PersistentTopic topic, CompletableFuture<Void> transactionBufferFuture) {\n         super(State.None);\n+        this.publishTxnMessageCount = new LongAdder();\n+        this.commitTransactionCount = new LongAdder();\n+        this.abortTransactionCount = new LongAdder();\n+        this.registeredTransactionCount = new LongAdder();\n         this.topic = topic;\n-        this.transactionBufferFuture = transactionBufferFuture;\n         this.changeToInitializingState();\n         this.takeSnapshotWriter = this.topic.getBrokerService().getPulsar()\n                 .getTransactionBufferSnapshotService().createWriter(TopicName.get(topic.getName()));\n@@ -166,6 +176,7 @@ public void recoverExceptionally(Exception e) {\n             public void addComplete(Position position, ByteBuf entryData, Object ctx) {\n                 synchronized (TopicTransactionBuffer.this) {\n                     handleTransactionMessage(txnId, position);\n+                    publishTxnMessageCount.increment();\n                 }\n                 completableFuture.complete(position);\n             }\n@@ -185,6 +196,7 @@ private void handleTransactionMessage(TxnID txnId, Position position) {\n             PositionImpl firstPosition = ongoingTxns.get(ongoingTxns.firstKey());\n             //max read position is less than first ongoing transaction message position, so entryId -1\n             maxReadPosition = PositionImpl.get(firstPosition.getLedgerId(), firstPosition.getEntryId() - 1);\n+            registeredTransactionCount.increment();\n         }\n     }\n \n@@ -210,6 +222,7 @@ public void addComplete(Position position, ByteBuf entryData, Object ctx) {\n                     updateMaxReadPosition(txnID);\n                     handleLowWaterMark(txnID, lowWaterMark);\n                     takeSnapshotByChangeTimes();\n+                    commitTransactionCount.increment();\n                 }\n                 completableFuture.complete(null);\n             }\n@@ -240,6 +253,7 @@ public void addComplete(Position position, ByteBuf entryData, Object ctx) {\n                     handleLowWaterMark(txnID, lowWaterMark);\n                     changeMaxReadPositionAndAddAbortTimes.getAndIncrement();\n                     takeSnapshotByChangeTimes();\n+                    abortTransactionCount.increment();\n                 }\n                 completableFuture.complete(null);\n             }\n@@ -375,6 +389,18 @@ public PositionImpl getMaxReadPosition() {\n         }\n     }\n \n+    @Override\n+    public TransactionBufferStats getTransactionBufferStats() {\n+        TransactionBufferStats transactionBufferStats = new TransactionBufferStats();\n+        transactionBufferStats.abortTransactionCount = this.abortTransactionCount.longValue();\n+        transactionBufferStats.commitTransactionCount = this.commitTransactionCount.longValue();\n+        transactionBufferStats.registeredTransactionCount = this.registeredTransactionCount.longValue();\n+        transactionBufferStats.publishTxnMessageCount = this.publishTxnMessageCount.longValue();\n+        transactionBufferStats.existedAbortTransactions = this.aborts.size();\n+        transactionBufferStats.activeTransactions = this.ongoingTxns.size();\n+        return transactionBufferStats;\n+    }\n+\n     @Override\n     public void run(Timeout timeout) {\n         if (checkIfReady()) {"
  },
  {
    "sha": "66b6f5fb31051e5ac078f356db36e403ec7fc227",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferDisable.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferDisable.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferDisable.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferDisable.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -85,4 +85,9 @@ public void syncMaxReadPositionForNormalPublish(PositionImpl position) {\n     public PositionImpl getMaxReadPosition() {\n         return PositionImpl.latest;\n     }\n+\n+    @Override\n+    public TransactionBufferStats getTransactionBufferStats() {\n+        return new TransactionBufferStats();\n+    }\n }"
  },
  {
    "sha": "b4f21cc340c32b71de89af372f2a83c08a453b6f",
    "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferStats.java",
    "status": "added",
    "additions": 40,
    "deletions": 0,
    "changes": 40,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferStats.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferStats.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/buffer/impl/TransactionBufferStats.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pulsar.broker.transaction.buffer.impl;\n+\n+public class TransactionBufferStats {\n+\n+    /** The active transactions. */\n+    public long activeTransactions;\n+\n+    /** The commit transaction count of this transaction buffer. */\n+    public long commitTransactionCount;\n+\n+    /** The abort transaction count of this transaction buffer. */\n+    public long abortTransactionCount;\n+\n+    /** The registered transaction count of this transaction buffer. */\n+    public long registeredTransactionCount;\n+\n+    /** The public transaction message count of this transaction buffer. */\n+    public long publishTxnMessageCount;\n+\n+    /** The existed abort transactions of this transaction buffer. */\n+    public long existedAbortTransactions;\n+}"
  },
  {
    "sha": "4aedc3b3c00bfd9ffd1c64f3ea2b3cd3577f079c",
    "filename": "pulsar-broker/src/test/java/org/apache/pulsar/broker/stats/PrometheusMetricsTest.java",
    "status": "modified",
    "additions": 121,
    "deletions": 1,
    "changes": 122,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/test/java/org/apache/pulsar/broker/stats/PrometheusMetricsTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-broker/src/test/java/org/apache/pulsar/broker/stats/PrometheusMetricsTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/broker/stats/PrometheusMetricsTest.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -27,6 +27,7 @@\n import com.google.common.base.Splitter;\n import com.google.common.collect.ArrayListMultimap;\n import com.google.common.collect.Multimap;\n+import com.google.common.collect.Sets;\n import io.jsonwebtoken.SignatureAlgorithm;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n@@ -61,9 +62,18 @@\n import org.apache.pulsar.broker.stats.prometheus.PrometheusMetricsGenerator;\n import org.apache.pulsar.client.api.Consumer;\n import org.apache.pulsar.client.api.Producer;\n+import org.apache.pulsar.client.api.ProducerBuilder;\n import org.apache.pulsar.client.api.PulsarClient;\n import org.apache.pulsar.client.api.PulsarClientException;\n import org.apache.pulsar.client.api.SubscriptionType;\n+import org.apache.pulsar.client.api.transaction.Transaction;\n+import org.apache.pulsar.client.api.transaction.TxnID;\n+import org.apache.pulsar.common.naming.NamespaceName;\n+import org.apache.pulsar.common.naming.TopicName;\n+import org.apache.pulsar.common.policies.data.TenantInfo;\n+import org.apache.pulsar.transaction.coordinator.TransactionCoordinatorID;\n+import org.apache.pulsar.transaction.coordinator.TransactionMetadataStoreState;\n+import org.apache.pulsar.transaction.coordinator.impl.MLTransactionMetadataStore;\n import org.awaitility.Awaitility;\n import org.testng.Assert;\n import org.testng.annotations.AfterMethod;\n@@ -75,7 +85,9 @@\n     @BeforeMethod\n     @Override\n     protected void setup() throws Exception {\n-        super.baseSetup();\n+        ServiceConfiguration configuration = getDefaultConf();\n+        configuration.setTransactionCoordinatorEnabled(true);\n+        super.baseSetup(configuration);\n     }\n \n     @AfterMethod(alwaysRun = true)\n@@ -891,6 +903,114 @@ public String getCommandData() {\n         provider.close();\n     }\n \n+    @Test\n+    public void testTransactionBufferMetrics() throws Exception{\n+\n+        admin.tenants().createTenant(NamespaceName.SYSTEM_NAMESPACE.getTenant(),\n+                new TenantInfo(Sets.newHashSet(\"appid1\"), Sets.newHashSet(\"test\")));\n+        admin.namespaces().createNamespace(NamespaceName.SYSTEM_NAMESPACE.toString());\n+        admin.topics().createPartitionedTopic(TopicName.TRANSACTION_COORDINATOR_ASSIGN.toString(), 1);\n+\n+        pulsar.getTransactionMetadataStoreService().addTransactionMetadataStore(TransactionCoordinatorID.get(0));\n+        Awaitility.await().atMost(3, TimeUnit.SECONDS).until(() -> {\n+            MLTransactionMetadataStore store = ((MLTransactionMetadataStore) getPulsar()\n+                    .getTransactionMetadataStoreService().getStores().get(TransactionCoordinatorID.get(0)));\n+            return store != null && store.getState() == TransactionMetadataStoreState.State.Ready;\n+        });\n+        String ns1 = \"prop/ns-abc1\";\n+        admin.namespaces().createNamespace(ns1);\n+        String topic = \"persistent://\" + ns1 + \"/test_coordinator_metrics\";\n+\n+        PulsarClient pulsarClient = PulsarClient.builder()\n+                .serviceUrl(lookupUrl.toString()).enableTransaction(true).build();\n+        Producer<byte[]> producer= pulsarClient\n+                .newProducer()\n+                .topic(topic)\n+                .sendTimeout(0, TimeUnit.SECONDS)\n+                .create();\n+\n+        byte[] value = \"Hello Pulsar !\".getBytes();\n+        // test registered transaction and publish txn message count\n+        Transaction txn = pulsarClient.newTransaction().build().get();\n+        producer.newMessage(txn).value(value).sendAsync().get();\n+        producer.newMessage(txn).value(value).sendAsync().get();\n+        txn.commit().get();\n+\n+        // test abort\n+        txn = pulsarClient.newTransaction().build().get();\n+        producer.newMessage(txn).value(value).sendAsync().get();\n+        txn.abort().get();\n+\n+        txn = pulsarClient.newTransaction().withTransactionTimeout(20, TimeUnit.SECONDS).build().get();\n+        producer.newMessage(txn).value(value).sendAsync().get();\n+        txn.abort().get();\n+\n+        // test active transaction\n+        txn = pulsarClient.newTransaction().build().get();\n+        producer.newMessage(txn).value(value).sendAsync().get();\n+\n+        pulsar.getBrokerService().updateRates();\n+\n+        ByteArrayOutputStream statsOut = new ByteArrayOutputStream();\n+        PrometheusMetricsGenerator.generate(pulsar, true, false, false, statsOut);\n+        String metricsStr = statsOut.toString();\n+        Multimap<String, PrometheusMetricsTest.Metric> metrics = parseMetrics(metricsStr);\n+\n+        Collection<PrometheusMetricsTest.Metric> metric = metrics.get(\"pulsar_transaction_buffer_active_transactions\");\n+        metric.forEach(m -> {\n+            if (m.tags.containsValue(topic)) {\n+                assertEquals(m.value, 1);\n+            } else {\n+                assertEquals(m.value, 0);\n+            }\n+        });\n+\n+        metric = metrics.get(\"pulsar_transaction_buffer_commit_transaction_count\");\n+        metric.forEach(m -> {\n+            if (m.tags.containsValue(topic)) {\n+                assertEquals(m.value, 1);\n+            } else {\n+                assertEquals(m.value, 0);\n+            }\n+        });\n+\n+        metric = metrics.get(\"pulsar_transaction_buffer_abort_transaction_count\");\n+        metric.forEach(m -> {\n+            if (m.tags.containsValue(topic)) {\n+                assertEquals(m.value, 2);\n+            } else {\n+                assertEquals(m.value, 0);\n+            }\n+        });\n+\n+        metric = metrics.get(\"pulsar_transaction_buffer_registered_transaction_count\");\n+        metric.forEach(m -> {\n+            if (m.tags.containsValue(topic)) {\n+                assertEquals(m.value, 4);\n+            } else {\n+                assertEquals(m.value, 0);\n+            }\n+        });\n+\n+        metric = metrics.get(\"pulsar_transaction_buffer_existed_abort_transactions\");\n+        metric.forEach(m -> {\n+            if (m.tags.containsValue(topic)) {\n+                assertEquals(m.value, 2);\n+            } else {\n+                assertEquals(m.value, 0);\n+            }\n+        });\n+\n+        metric = metrics.get(\"pulsar_transaction_buffer_publish_message_count\");\n+        metric.forEach(m -> {\n+            if (m.tags.containsValue(topic)) {\n+                assertEquals(m.value, 5);\n+            } else {\n+                assertEquals(m.value, 0);\n+            }\n+        });\n+    }\n+\n     @Test\n     public void testExpiringTokenMetrics() throws Exception {\n         SecretKey secretKey = AuthTokenUtils.createSecretKey(SignatureAlgorithm.HS256);"
  },
  {
    "sha": "313f9be1c8fd7ad51cff575e2262b593d9812cef",
    "filename": "pulsar-common/src/main/java/org/apache/pulsar/common/policies/data/TopicStats.java",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-common/src/main/java/org/apache/pulsar/common/policies/data/TopicStats.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-common/src/main/java/org/apache/pulsar/common/policies/data/TopicStats.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-common/src/main/java/org/apache/pulsar/common/policies/data/TopicStats.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -91,6 +91,24 @@\n     /** The serialized size of non-contiguous deleted messages ranges. */\n     public int nonContiguousDeletedMessagesRangesSerializedSize;\n \n+    /** The active transactions. */\n+    public long activeTransactions;\n+\n+    /** The commit transaction count of this transaction buffer. */\n+    public long commitTransactionCount;\n+\n+    /** The abort transaction count of this transaction buffer. */\n+    public long abortTransactionCount;\n+\n+    /** The registered transaction count of this transaction buffer. */\n+    public long registeredTransactionCount;\n+\n+    /** The public transaction message count of this transaction buffer. */\n+    public long publishTxnMessageCount;\n+\n+    /** The existed abort transactions of this transaction buffer. */\n+    public long existedAbortTransactions;\n+\n     public TopicStats() {\n         this.publishers = Lists.newArrayList();\n         this.subscriptions = Maps.newHashMap();\n@@ -119,6 +137,12 @@ public void reset() {\n         this.nonContiguousDeletedMessagesRanges = 0;\n         this.nonContiguousDeletedMessagesRangesSerializedSize = 0;\n         this.offloadedStorageSize = 0;\n+        this.activeTransactions = 0;\n+        this.commitTransactionCount = 0;\n+        this.abortTransactionCount = 0;\n+        this.registeredTransactionCount = 0;\n+        this.publishTxnMessageCount = 0;\n+        this.existedAbortTransactions = 0;\n     }\n \n     // if the stats are added for the 1st time, we will need to make a copy of these stats and add it to the current"
  },
  {
    "sha": "9404d433ce91f22e3e5928b7987a619091f8862d",
    "filename": "pulsar-transaction/coordinator/src/main/java/org/apache/pulsar/transaction/coordinator/impl/MLTransactionLogImpl.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/apache/pulsar/blob/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-transaction/coordinator/src/main/java/org/apache/pulsar/transaction/coordinator/impl/MLTransactionLogImpl.java",
    "raw_url": "https://github.com/apache/pulsar/raw/2a1d542429faa370ae6dda48117a974c93cd5240/pulsar-transaction/coordinator/src/main/java/org/apache/pulsar/transaction/coordinator/impl/MLTransactionLogImpl.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-transaction/coordinator/src/main/java/org/apache/pulsar/transaction/coordinator/impl/MLTransactionLogImpl.java?ref=2a1d542429faa370ae6dda48117a974c93cd5240",
    "patch": "@@ -34,6 +34,8 @@\n import org.apache.pulsar.common.allocator.PulsarByteBufAllocator;\n import org.apache.pulsar.common.api.proto.CommandSubscribe;\n import org.apache.pulsar.common.naming.NamespaceName;\n+import org.apache.pulsar.common.naming.TopicDomain;\n+import org.apache.pulsar.common.naming.TopicName;\n import org.apache.pulsar.transaction.coordinator.TransactionCoordinatorID;\n import org.apache.pulsar.transaction.coordinator.TransactionLog;\n import org.apache.pulsar.transaction.coordinator.TransactionLogReplayCallback;\n@@ -49,7 +51,7 @@\n \n     private final ManagedLedger managedLedger;\n \n-    public final static String TRANSACTION_LOG_PREFIX = NamespaceName.SYSTEM_NAMESPACE + \"/transaction-log-\";\n+    public final static String TRANSACTION_LOG_PREFIX = \"transaction_log_\";\n \n     private final ManagedCursor cursor;\n \n@@ -64,14 +66,15 @@\n \n     private final long tcId;\n \n-    private final String topicName;\n+    private final TopicName topicName;\n \n     public MLTransactionLogImpl(TransactionCoordinatorID tcID,\n                                 ManagedLedgerFactory managedLedgerFactory,\n                                 ManagedLedgerConfig managedLedgerConfig) throws Exception {\n-        this.topicName = TRANSACTION_LOG_PREFIX + tcID;\n+        this.topicName = TopicName.get(TopicDomain.persistent.value(),\n+                NamespaceName.SYSTEM_NAMESPACE, \"transaction_log_\" + tcID.getId());\n         this.tcId = tcID.getId();\n-        this.managedLedger = managedLedgerFactory.open(topicName, managedLedgerConfig);\n+        this.managedLedger = managedLedgerFactory.open(topicName.getPersistenceNamingEncoding(), managedLedgerConfig);\n         this.cursor =  managedLedger.openCursor(TRANSACTION_SUBSCRIPTION_NAME,\n                 CommandSubscribe.InitialPosition.Earliest);\n         this.currentLoadPosition = (PositionImpl) this.cursor.getMarkDeletedPosition();"
  }
]
