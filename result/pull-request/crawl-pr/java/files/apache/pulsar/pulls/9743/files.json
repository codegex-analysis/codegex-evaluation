[
  {
    "sha": "cd89fcc00f36974a9e43ad693e7ece9d1bbc1b9a",
    "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/api/RetryTopicTest.java",
    "status": "modified",
    "additions": 70,
    "deletions": 29,
    "changes": 99,
    "blob_url": "https://github.com/apache/pulsar/blob/89b7326950cf4c3aa45a566e13141257bcc67e95/pulsar-broker/src/test/java/org/apache/pulsar/client/api/RetryTopicTest.java",
    "raw_url": "https://github.com/apache/pulsar/raw/89b7326950cf4c3aa45a566e13141257bcc67e95/pulsar-broker/src/test/java/org/apache/pulsar/client/api/RetryTopicTest.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/api/RetryTopicTest.java?ref=89b7326950cf4c3aa45a566e13141257bcc67e95",
    "patch": "@@ -27,6 +27,7 @@\n import java.util.concurrent.TimeUnit;\n \n import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.assertTrue;\n \n public class RetryTopicTest extends ProducerConsumerBase {\n \n@@ -65,7 +66,7 @@ public void testRetryTopic() throws Exception {\n \n         PulsarClient newPulsarClient = newPulsarClient(lookupUrl.toString(), 0);// Creates new client connection\n         Consumer<byte[]> deadLetterConsumer = newPulsarClient.newConsumer(Schema.BYTES)\n-                .topic(\"persistent://my-property/my-ns/my-subscription-DLQ\")\n+                .topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\")\n                 .subscriptionName(\"my-subscription\")\n                 .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n                 .subscribe();\n@@ -82,7 +83,7 @@ public void testRetryTopic() throws Exception {\n \n         int totalReceived = 0;\n         do {\n-            Message<byte[]> message = consumer.receive();\n+            Message<byte[]> message = consumer.receive(3, TimeUnit.SECONDS);\n             log.info(\"consumer received message : {} {}\", message.getMessageId(), new String(message.getData()));\n             consumer.reconsumeLater(message, 1 , TimeUnit.SECONDS);\n             totalReceived++;\n@@ -122,16 +123,27 @@ public void testRetryTopic() throws Exception {\n      */\n     @Test\n     public void testRetryTopicWithMultiTopic() throws Exception {\n-        final String topic1 = \"persistent://my-property/my-ns/retry-topic-1\";\n-        final String topic2 = \"persistent://my-property/my-ns/retry-topic-2\";\n+        final String topic1 = \"persistent://my-property/my-ns/topic-1\";\n+        final String topic2 = \"persistent://my-property/my-ns/topic-2\";\n \n         final int maxRedeliveryCount = 2;\n \n-        int sendMessages = 100;\n+        int sendMessages = 10;\n \n         // subscribe to the original topics before publish\n-        Consumer<byte[]> consumer = pulsarClient.newConsumer(Schema.BYTES)\n-                .topic(topic1, topic2)\n+        Consumer<byte[]> consumer1 = pulsarClient.newConsumer(Schema.BYTES)\n+                .topic(topic1)\n+                .subscriptionName(\"my-subscription\")\n+                .subscriptionType(SubscriptionType.Shared)\n+                .enableRetry(true)\n+                .ackTimeout(1, TimeUnit.SECONDS)\n+                .deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(maxRedeliveryCount).build())\n+                .receiverQueueSize(100)\n+                .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+                .subscribe();\n+\n+        Consumer<byte[]> consumer2 = pulsarClient.newConsumer(Schema.BYTES)\n+                .topic(topic2)\n                 .subscriptionName(\"my-subscription\")\n                 .subscriptionType(SubscriptionType.Shared)\n                 .enableRetry(true)\n@@ -142,8 +154,15 @@ public void testRetryTopicWithMultiTopic() throws Exception {\n                 .subscribe();\n \n         // subscribe to the DLQ topics before consuming original topics\n-        Consumer<byte[]> deadLetterConsumer = pulsarClient.newConsumer(Schema.BYTES)\n-                .topic(\"persistent://my-property/my-ns/my-subscription-DLQ\")\n+        Consumer<byte[]> deadLetterConsumer1 = pulsarClient.newConsumer(Schema.BYTES)\n+                .topic(\"persistent://my-property/my-ns/topic-1-my-subscription-DLQ\")\n+                .subscriptionName(\"my-subscription\")\n+                .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n+                .subscribe();\n+\n+        // subscribe to the DLQ topics before consuming original topics\n+        Consumer<byte[]> deadLetterConsumer2 = pulsarClient.newConsumer(Schema.BYTES)\n+                .topic(\"persistent://my-property/my-ns/topic-2-my-subscription-DLQ\")\n                 .subscriptionName(\"my-subscription\")\n                 .subscriptionInitialPosition(SubscriptionInitialPosition.Earliest)\n                 .subscribe();\n@@ -157,32 +176,51 @@ public void testRetryTopicWithMultiTopic() throws Exception {\n                 .create();\n \n         for (int i = 0; i < sendMessages; i++) {\n-            producer1.send(String.format(\"Hello Pulsar [%d]\", i).getBytes());\n-            producer2.send(String.format(\"Hello Pulsar [%d]\", i).getBytes());\n+            producer1.send(String.format(\"Producer1 Hello Pulsar [%d]\", i).getBytes());\n+            producer2.send(String.format(\"Producer2 Hello Pulsar [%d]\", i).getBytes());\n         }\n \n-        sendMessages = sendMessages * 2;\n-\n         producer1.close();\n         producer2.close();\n \n-        int totalReceived = 0;\n+        int totalReceivedConsumer1 = 0;\n         do {\n-            Message<byte[]> message = consumer.receive();\n-            log.info(\"consumer received message : {} {} - total = {}\",\n-                message.getMessageId(), new String(message.getData()), ++totalReceived);\n-        } while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n+            Message<byte[]> message = consumer1.receive(3, TimeUnit.SECONDS);\n+            log.info(\"consumer1 received message : {} {} - total = {}\",\n+                    message.getMessageId(), new String(message.getData()), ++totalReceivedConsumer1);\n+        } while (totalReceivedConsumer1 < sendMessages * (maxRedeliveryCount + 1));\n \n-        int totalInDeadLetter = 0;\n+        int totalReceivedConsumer2 = 0;\n         do {\n-            Message message = deadLetterConsumer.receive();\n-            log.info(\"dead letter consumer received message : {} {}\", message.getMessageId(), new String(message.getData()));\n-            deadLetterConsumer.acknowledge(message);\n-            totalInDeadLetter++;\n-        } while (totalInDeadLetter < sendMessages);\n+            Message<byte[]> message = consumer2.receive(3, TimeUnit.SECONDS);\n+            log.info(\"consumer2 received message : {} {} - total = {}\",\n+                    message.getMessageId(), new String(message.getData()), ++totalReceivedConsumer2);\n+        } while (totalReceivedConsumer2 < sendMessages * (maxRedeliveryCount + 1));\n \n-        deadLetterConsumer.close();\n-        consumer.close();\n+        int totalInDeadLetter1 = 0;\n+        do {\n+            Message message = deadLetterConsumer1.receive(3, TimeUnit.SECONDS);\n+            log.info(\"dead letter consumer1 received message : {} {}\", message.getMessageId(), new String(message.getData()));\n+            // only receive message publish by producer1\n+            assertTrue(new String(message.getData()).startsWith(\"Producer1\"));\n+            deadLetterConsumer1.acknowledge(message);\n+            totalInDeadLetter1++;\n+        } while (totalInDeadLetter1 < sendMessages);\n+\n+        int totalInDeadLetter2 = 0;\n+        do {\n+            Message message = deadLetterConsumer2.receive(3, TimeUnit.SECONDS);\n+            log.info(\"dead letter consumer2 received message : {} {}\", message.getMessageId(), new String(message.getData()));\n+            // only receive message publish by producer2\n+            assertTrue(new String(message.getData()).startsWith(\"Producer2\"));\n+            deadLetterConsumer2.acknowledge(message);\n+            totalInDeadLetter2++;\n+        } while (totalInDeadLetter2 < sendMessages);\n+\n+        deadLetterConsumer1.close();\n+        deadLetterConsumer2.close();\n+        consumer1.close();\n+        consumer2.close();\n \n         Consumer<byte[]> checkConsumer = pulsarClient.newConsumer(Schema.BYTES)\n                 .topic(topic1, topic2)\n@@ -221,7 +259,7 @@ public void testRetryTopicByCustomTopicName() throws Exception {\n                 .subscribe();\n         PulsarClient newPulsarClient = newPulsarClient(lookupUrl.toString(), 0);// Creates new client connection\n         Consumer<byte[]> deadLetterConsumer = newPulsarClient.newConsumer(Schema.BYTES)\n-                .topic(\"persistent://my-property/my-ns/my-subscription-DLQ\")\n+                .topic(\"persistent://my-property/my-ns/retry-topic-my-subscription-DLQ\")\n                 .subscriptionName(\"my-subscription\")\n                 .subscribe();\n \n@@ -235,20 +273,23 @@ public void testRetryTopicByCustomTopicName() throws Exception {\n \n         int totalReceived = 0;\n         do {\n-            Message<byte[]> message = consumer.receive();\n+            Message<byte[]> message = consumer.receive(3, TimeUnit.SECONDS);\n             log.info(\"consumer received message : {} {}\", message.getMessageId(), new String(message.getData()));\n             consumer.reconsumeLater(message, 1 , TimeUnit.SECONDS);\n             totalReceived++;\n         } while (totalReceived < sendMessages * (maxRedeliveryCount + 1));\n+\n         int totalInDeadLetter = 0;\n         do {\n-            Message message = deadLetterConsumer.receive();\n+            Message message = deadLetterConsumer.receive(3, TimeUnit.SECONDS);\n             log.info(\"dead letter consumer received message : {} {}\", message.getMessageId(), new String(message.getData()));\n             deadLetterConsumer.acknowledge(message);\n             totalInDeadLetter++;\n         } while (totalInDeadLetter < sendMessages);\n+\n         deadLetterConsumer.close();\n         consumer.close();\n+\n         PulsarClient newPulsarClient1 = newPulsarClient(lookupUrl.toString(), 0);// Creates new client connection\n         Consumer<byte[]> checkConsumer = newPulsarClient1.newConsumer(Schema.BYTES)\n                 .topic(topic)"
  },
  {
    "sha": "0128a45cbd84521273b02ad53ecd36c71d80866d",
    "filename": "pulsar-client-api/src/main/java/org/apache/pulsar/client/api/ConsumerBuilder.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/apache/pulsar/blob/89b7326950cf4c3aa45a566e13141257bcc67e95/pulsar-client-api/src/main/java/org/apache/pulsar/client/api/ConsumerBuilder.java",
    "raw_url": "https://github.com/apache/pulsar/raw/89b7326950cf4c3aa45a566e13141257bcc67e95/pulsar-client-api/src/main/java/org/apache/pulsar/client/api/ConsumerBuilder.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-api/src/main/java/org/apache/pulsar/client/api/ConsumerBuilder.java?ref=89b7326950cf4c3aa45a566e13141257bcc67e95",
    "patch": "@@ -358,7 +358,7 @@\n      * will be more efficient at the expense of a slight increase in message re-deliveries after a failure.\n      *\n      * @param delay\n-     *            the max amount of time an acknowledgemnt can be delayed\n+     *            the max amount of time an acknowledgement can be delayed\n      * @param unit\n      *            the time unit for the delay\n      * @return the consumer builder instance\n@@ -372,7 +372,7 @@\n     ConsumerBuilder<T> replicateSubscriptionState(boolean replicateSubscriptionState);\n \n     /**\n-     * Set the max total receiver queue size across partitons.\n+     * Set the max total receiver queue size across partitions.\n      *\n      * <p>This setting will be used to reduce the receiver queue size for individual partitions\n      * {@link #receiverQueueSize(int)} if the total exceeds this value (default: 50000).\n@@ -389,7 +389,7 @@\n     /**\n      * Set the consumer name.\n      *\n-     * <p>Consumer name is informative and it can be used to indentify a particular consumer\n+     * <p>Consumer name is informative and it can be used to identify a particular consumer\n      * instance from the topic stats.\n      *\n      * @param consumerName\n@@ -648,7 +648,7 @@\n \n     /**\n      * If enabled, the consumer will auto retry message.\n-     * default unabled.\n+     * default disabled.\n      *\n      * @param retryEnable\n      *            whether to auto retry message"
  },
  {
    "sha": "554543e7471899616e5c9ffab20eb3deed901522",
    "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBuilderImpl.java",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/apache/pulsar/blob/89b7326950cf4c3aa45a566e13141257bcc67e95/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBuilderImpl.java",
    "raw_url": "https://github.com/apache/pulsar/raw/89b7326950cf4c3aa45a566e13141257bcc67e95/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBuilderImpl.java",
    "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerBuilderImpl.java?ref=89b7326950cf4c3aa45a566e13141257bcc67e95",
    "patch": "@@ -119,10 +119,12 @@ public ConsumerBuilderImpl(PulsarClientImpl client, Schema<T> schema) {\n             return FutureUtil.failedFuture(\n                     new InvalidConfigurationException(\"KeySharedPolicy must set with KeyShared subscription\"));\n         }\n-        if(conf.isRetryEnable() && conf.getTopicNames().size() > 0 ) {\n-            TopicName topicFirst = TopicName.get(conf.getTopicNames().iterator().next());\n-            String retryLetterTopic = topicFirst.getNamespace() + \"/\" + conf.getSubscriptionName() + RetryMessageUtil.RETRY_GROUP_TOPIC_SUFFIX;\n-            String deadLetterTopic = topicFirst.getNamespace() + \"/\" + conf.getSubscriptionName() + RetryMessageUtil.DLQ_GROUP_TOPIC_SUFFIX;\n+        if (conf.isRetryEnable() && conf.getTopicNames().size() > 0 ) {\n+            String topicName = TopicName.get(conf.getTopicNames().iterator().next()).getPartitionedTopicName();\n+            String retryLetterTopic = topicName + \"-\" + conf.getSubscriptionName()\n+                    + RetryMessageUtil.RETRY_GROUP_TOPIC_SUFFIX;\n+            String deadLetterTopic = topicName + \"-\" + conf.getSubscriptionName()\n+                    + RetryMessageUtil.DLQ_GROUP_TOPIC_SUFFIX;\n             if(conf.getDeadLetterPolicy() == null) {\n                 conf.setDeadLetterPolicy(DeadLetterPolicy.builder()\n                                         .maxRedeliverCount(RetryMessageUtil.MAX_RECONSUMETIMES)"
  }
]
