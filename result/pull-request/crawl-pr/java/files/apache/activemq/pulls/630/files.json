[
  {
    "sha": "d89cfe51c34b4125fea79f1b616f0516aa9aded0",
    "filename": "activemq-client/pom.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 35,
    "changes": 35,
    "blob_url": "https://github.com/apache/activemq/blob/b5200939e570213d48e64563030f286f15f8b721/activemq-client/pom.xml",
    "raw_url": "https://github.com/apache/activemq/raw/b5200939e570213d48e64563030f286f15f8b721/activemq-client/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/pom.xml?ref=b5200939e570213d48e64563030f286f15f8b721",
    "patch": "@@ -298,41 +298,6 @@\n   </build>\n \n   <profiles>\n-    <!-- Execute with: mvn -P openwire-generate antrun:run -->\n-    <profile>\n-      <id>openwire-generate</id>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-antrun-plugin</artifactId>\n-            <executions>\n-              <execution>\n-                <id>default</id>\n-                <phase>generate-sources</phase>\n-                <goals>\n-                  <goal>run</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-            <configuration>\n-              <tasks>\n-                <echo>Running OpenWire Generator</echo>\n-                <taskdef name=\"generate\" classname=\"org.apache.activemq.openwire.tool.JavaGeneratorTask\" classpathref=\"maven.compile.classpath\" />\n-                <generate version=\"12\" basedir=\"${basedir}\" generateTests=\"false\" />\n-              </tasks>\n-            </configuration>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>org.apache.activemq</groupId>\n-                    <artifactId>activemq-openwire-generator</artifactId>\n-                    <version>${project.version}</version>\n-                </dependency>\n-            </dependencies>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n     <profile>\n       <id>activemq.tests-sanity</id>\n       <activation>"
  },
  {
    "sha": "d9c398d2628a598be126f18e7e8dba52cb80542b",
    "filename": "activemq-openwire-generator/pom.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 85,
    "changes": 85,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/pom.xml",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/pom.xml?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,85 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-  Licensed to the Apache Software Foundation (ASF) under one or more\n-  contributor license agreements.  See the NOTICE file distributed with\n-  this work for additional information regarding copyright ownership.\n-  The ASF licenses this file to You under the Apache License, Version 2.0\n-  (the \"License\"); you may not use this file except in compliance with\n-  the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing, software\n-  distributed under the License is distributed on an \"AS IS\" BASIS,\n-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-  See the License for the specific language governing permissions and\n-  limitations under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.activemq</groupId>\n-    <artifactId>activemq-parent</artifactId>\n-    <version>5.17.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <artifactId>activemq-openwire-generator</artifactId>\n-  <name>ActiveMQ :: Openwire Generator</name>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>groovy</groupId>\n-      <artifactId>gram</artifactId>\n-      <version>1.1</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>groovy</groupId>\n-      <artifactId>groovy-all</artifactId>\n-      <version>1.0-jsr-03</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>annogen</groupId>\n-      <artifactId>annogen</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>ant</groupId>\n-      <artifactId>ant</artifactId>\n-      <version>1.6.2</version>\n-    </dependency>\n-  </dependencies>\n-\n-  <profiles>\n-    <profile>\n-      <id>default-tools.jar</id>\n-      <activation>\n-        <property>\n-          <name>java.vendor</name>\n-          <value>Oracle Corporation</value>\n-        </property>\n-      </activation>\n-      <dependencies>\n-        <dependency>\n-          <groupId>com.sun</groupId>\n-          <artifactId>tools</artifactId>\n-          <version>1.5</version>\n-          <scope>system</scope>\n-          <systemPath>${java.home}/../lib/tools.jar</systemPath>\n-        </dependency>\n-      </dependencies>\n-    </profile>\n-  </profiles>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <artifactId>maven-surefire-plugin</artifactId>\n-        <configuration>\n-          <skip>true</skip>\n-        </configuration>\n-      </plugin>\n-    </plugins>\n-  </build>\n-\n-</project>"
  },
  {
    "sha": "c503fa65b12e038f7d82cd6a80a92a845893a0a7",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CGeneratorTask.java",
    "status": "removed",
    "additions": 0,
    "deletions": 118,
    "changes": 118,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CGeneratorTask.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CGeneratorTask.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CGeneratorTask.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,118 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-\n-import org.apache.tools.ant.BuildException;\n-import org.apache.tools.ant.Project;\n-import org.apache.tools.ant.Task;\n-import org.codehaus.jam.JamService;\n-import org.codehaus.jam.JamServiceFactory;\n-import org.codehaus.jam.JamServiceParams;\n-\n-/**\n- * \n- */\n-public class CGeneratorTask extends Task {\n-\n-    int version = 2;\n-    File source = new File(\".\");\n-    File target = new File(\".\");\n-\n-    public static void main(String[] args) {\n-\n-        Project project = new Project();\n-        project.init();\n-        CGeneratorTask generator = new CGeneratorTask();\n-        generator.setProject(project);\n-\n-        if (args.length > 0) {\n-            generator.version = Integer.parseInt(args[0]);\n-        }\n-\n-        if (args.length > 1) {\n-            generator.source = new File(args[1]);\n-        }\n-\n-        if (args.length > 2) {\n-            generator.target = new File(args[2]);\n-        }\n-\n-        generator.execute();\n-    }\n-\n-    public void execute() throws BuildException {\n-        try {\n-\n-            String sourceDir = source + \"/src/main/java\";\n-\n-            System.out.println(\"Parsing source files in: \" + sourceDir);\n-\n-            JamServiceFactory jamServiceFactory = JamServiceFactory.getInstance();\n-            JamServiceParams params = jamServiceFactory.createServiceParams();\n-            File[] dirs = new File[] {\n-                new File(sourceDir)\n-            };\n-            params.includeSourcePattern(dirs, \"**/*.java\");\n-            JamService jam = jamServiceFactory.createService(params);\n-\n-            {\n-                CHeadersGenerator script = new CHeadersGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(target + \"/src/libopenwire\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-            {\n-                CSourcesGenerator script = new CSourcesGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(target + \"/src/libopenwire\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-\n-        } catch (Exception e) {\n-            throw new BuildException(e);\n-        }\n-    }\n-\n-    public int getVersion() {\n-        return version;\n-    }\n-\n-    public void setVersion(int version) {\n-        this.version = version;\n-    }\n-\n-    public File getSource() {\n-        return source;\n-    }\n-\n-    public void setSource(File basedir) {\n-        this.source = basedir;\n-    }\n-\n-    public File getTarget() {\n-        return target;\n-    }\n-\n-    public void setTarget(File target) {\n-        this.target = target;\n-    }\n-\n-}"
  },
  {
    "sha": "627481926ca8bb1d4625f212ad3ae172286f31b9",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CHeadersGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 258,
    "changes": 258,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CHeadersGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CHeadersGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CHeadersGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,258 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-\n-import org.codehaus.jam.JAnnotation;\n-import org.codehaus.jam.JAnnotationValue;\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JProperty;\n-\n-/**\n- * \n- */\n-public class CHeadersGenerator extends SingleSourceGenerator {\n-\n-    protected String targetDir = \"./src/lib/openwire\";\n-\n-    public Object run() {\n-        filePostFix = \".h\";\n-        if (destFile == null) {\n-            destFile = new File(targetDir + \"/ow_commands_v\" + getOpenwireVersion() + \".h\");\n-        }\n-        return super.run();\n-    }\n-\n-    public String getTargetDir() {\n-        return targetDir;\n-    }\n-\n-    public void setTargetDir(String targetDir) {\n-        this.targetDir = targetDir;\n-    }\n-\n-    protected void generateLicence(PrintWriter out) {\n-        out.println(\"/**\");\n-        out.println(\" * Licensed to the Apache Software Foundation (ASF) under one or more\");\n-        out.println(\" * contributor license agreements.  See the NOTICE file distributed with\");\n-        out.println(\" * this work for additional information regarding copyright ownership.\");\n-        out.println(\" * The ASF licenses this file to You under the Apache License, Version 2.0\");\n-        out.println(\" * (the \\\"License\\\"); you may not use this file except in compliance with\");\n-        out.println(\" * the License.  You may obtain a copy of the License at\");\n-        out.println(\" *\");\n-        out.println(\" *      http://www.apache.org/licenses/LICENSE-2.0\");\n-        out.println(\" *\");\n-        out.println(\" * Unless required by applicable law or agreed to in writing, software\");\n-        out.println(\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\");\n-        out.println(\" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\");\n-        out.println(\" * See the License for the specific language governing permissions and\");\n-        out.println(\" * limitations under the License.\");\n-        out.println(\" */\");\n-    }\n-\n-    String changeCase(String value) {\n-        StringBuffer b = new StringBuffer();\n-        char[] cs = value.toCharArray();\n-        for (int i = 0; i < cs.length; i++) {\n-            char c = cs[i];\n-            if (Character.isUpperCase((char)c)) {\n-                b.append('_');\n-                b.append(Character.toLowerCase((char)c));\n-            } else {\n-                b.append(c);\n-            }\n-        }\n-        return b.toString();\n-    }\n-\n-    String toPropertyCase(String value) {\n-        return value.substring(0, 1).toLowerCase() + value.substring(1);\n-    }\n-\n-    /**\n-     * Sort the class list so that base classes come up first.\n-     */\n-    protected List<JClass> sort(List<JClass> source) {\n-        LinkedHashMap<JClass, JClass> rc = new LinkedHashMap<JClass, JClass>();\n-        ArrayList<JClass> classes = new ArrayList<JClass>(source);\n-        Collections.sort(classes, new Comparator<JClass>() {\n-            public int compare(JClass c1, JClass c2) {\n-                return c1.getSimpleName().compareTo(c2.getSimpleName());\n-            }\n-        });\n-\n-        // lets make a map of all the class names\n-        HashMap<JClass, JClass> classNames = new HashMap<JClass, JClass>();\n-        for (Iterator iter = classes.iterator(); iter.hasNext();) {\n-            JClass c = (JClass)iter.next();\n-            classNames.put(c, c);\n-        }\n-\n-        // Add all classes that have no parent first\n-        for (Iterator iter = classes.iterator(); iter.hasNext();) {\n-            JClass c = (JClass)iter.next();\n-            if (!classNames.containsKey(c.getSuperclass())) {\n-                rc.put(c, c);\n-            }\n-        }\n-\n-        // now lets add the rest\n-        for (Iterator iter = classes.iterator(); iter.hasNext();) {\n-            JClass c = (JClass)iter.next();\n-            if (!rc.containsKey(c)) {\n-                rc.put(c, c);\n-            }\n-        }\n-\n-        return new ArrayList<JClass>(rc.keySet());\n-    }\n-\n-    void generateFields(PrintWriter out, JClass jclass) {\n-\n-        if (jclass.getSuperclass() == null || jclass.getSuperclass().getSimpleName().equals(\"Object\")) {\n-            out.println(\"\");\n-            out.println(\"   ow_byte structType;\");\n-        } else {\n-            generateFields(out, jclass.getSuperclass());\n-        }\n-\n-        ArrayList<JProperty> properties = new ArrayList<JProperty>();\n-        jclass.getDeclaredProperties();\n-        for (int i = 0; i < jclass.getDeclaredProperties().length; i++) {\n-            JProperty p = jclass.getDeclaredProperties()[i];\n-            if (isValidProperty(p)) {\n-                properties.add(p);\n-            }\n-        }\n-        for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = iter.next();\n-            JAnnotation annotation = property.getGetter().getAnnotation(\"openwire:property\");\n-//            JAnnotationValue size = annotation.getValue(\"size\");\n-            String name = toPropertyCase(property.getSimpleName());\n-//            boolean cached = isCachedProperty(property);\n-\n-            String type = property.getType().getQualifiedName();\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"   ow_\" + type + \" \" + name + \";\");\n-            } else if (type.equals(\"byte\")) {\n-                out.println(\"   ow_\" + type + \" \" + name + \";\");\n-            } else if (type.equals(\"char\")) {\n-                out.println(\"   ow_\" + type + \" \" + name + \";\");\n-            } else if (type.equals(\"short\")) {\n-                out.println(\"   ow_\" + type + \" \" + name + \";\");\n-            } else if (type.equals(\"int\")) {\n-                out.println(\"   ow_\" + type + \" \" + name + \";\");\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"   ow_\" + type + \" \" + name + \";\");\n-            } else if (type.equals(\"byte[]\")) {\n-                out.println(\"   ow_byte_array *\" + name + \";\");\n-            } else if (type.equals(\"org.apache.activeio.packet.ByteSequence\")) {\n-                out.println(\"   ow_byte_array *\" + name + \";\");\n-            } else if (type.equals(\"org.apache.activeio.packet.ByteSequence\")) {\n-                out.println(\"   ow_byte_array *\" + name + \";\");\n-            } else if (type.equals(\"java.lang.String\")) {\n-                out.println(\"   ow_string *\" + name + \";\");\n-            } else {\n-                if (property.getType().isArrayType()) {\n-                    out.println(\"   ow_DataStructure_array *\" + name + \";\");\n-                } else if (isThrowable(property.getType())) {\n-                    out.println(\"   ow_throwable *\" + name + \";\");\n-                } else {\n-                    out.println(\"   struct ow_\" + property.getType().getSimpleName() + \" *\" + name + \";\");\n-                }\n-            }\n-        }\n-    }\n-\n-    protected void generateSetup(PrintWriter out) {\n-        generateLicence(out);\n-        out.println(\"\");\n-        out.println(\"/*****************************************************************************************\");\n-        out.println(\" *  \");\n-        out.println(\" * NOTE!: This file is auto generated - do not modify!\");\n-        out.println(\" *        if you need to make a change, please see the modify the groovy scripts in the\");\n-        out.println(\" *        under src/gram/script and then use maven openwire:generate to regenerate \");\n-        out.println(\" *        this file.\");\n-        out.println(\" *  \");\n-        out.println(\" *****************************************************************************************/\");\n-        out.println(\" \");\n-        out.println(\"#ifndef OW_COMMANDS_V\" + openwireVersion + \"_H\");\n-        out.println(\"#define OW_COMMANDS_V\" + openwireVersion + \"_H\");\n-        out.println(\"\");\n-        out.println(\"#include \\\"ow.h\\\"\");\n-        out.println(\"\");\n-        out.println(\"#ifdef __cplusplus\");\n-        out.println(\"extern \\\"C\\\" {\");\n-        out.println(\"#endif /* __cplusplus */\");\n-        out.println(\"      \");\n-        out.println(\"#define OW_WIREFORMAT_VERSION \" + openwireVersion + \"\");\n-\n-        out.println(\"#define OW_WIREFORMAT_STACK_TRACE_MASK     0x00000001;\");\n-        out.println(\"#define OW_WIREFORMAT_TCP_NO_DELAY_MASK    0x00000002;\");\n-        out.println(\"#define OW_WIREFORMAT_CACHE_MASK           0x00000004;\");\n-        out.println(\"#define OW_WIREFORMAT_COMPRESSION_MASK     0x00000008;\");\n-\n-        for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {\n-            JClass jclass = (JClass)iterator.next();\n-            String name = jclass.getSimpleName();\n-            String type = (\"ow_\" + name).toUpperCase() + \"_TYPE\";\n-            if (!isAbstract(jclass)) {\n-                out.println(\"#define \" + type + \" \" + getOpenWireOpCode(jclass));\n-            }\n-        }\n-\n-        out.println(\"      \");\n-        out.println(\"apr_status_t ow_bitmarshall(ow_bit_buffer *buffer, ow_DataStructure *object);\");\n-        out.println(\"apr_status_t ow_marshall(ow_byte_buffer *buffer, ow_DataStructure *object);\");\n-    }\n-\n-    protected void generateFile(PrintWriter out) throws Exception {\n-\n-        String structName = jclass.getSimpleName();\n-\n-        out.println(\"\");\n-        out.println(\"typedef struct ow_\" + structName + \" {\");\n-\n-        // This recusivly generates the field definitions of the class and it's\n-        // supper classes.\n-        generateFields(out, jclass);\n-\n-        out.println(\"\");\n-        out.println(\"} ow_\" + structName + \";\");\n-        out.println(\"ow_\" + structName + \" *ow_\" + structName + \"_create(apr_pool_t *pool);\");\n-        out.println(\"ow_boolean ow_is_a_\" + structName + \"(ow_DataStructure *object);\");\n-\n-    }\n-\n-    protected void generateTearDown(PrintWriter out) {\n-        out.println(\"\");\n-        out.println(\"#ifdef __cplusplus\");\n-        out.println(\"}\");\n-        out.println(\"#endif\");\n-        out.println(\"\");\n-        out.println(\"#endif  /* ! OW_COMMANDS_V\" + openwireVersion + \"_H */\");\n-    }\n-}"
  },
  {
    "sha": "a5960848219138457d9bf4387d8a628c61bac371",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpClassesGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 216,
    "changes": 216,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpClassesGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpClassesGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpClassesGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,216 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JProperty;\n-\n-/**\n- * \n- */\n-public class CSharpClassesGenerator extends MultiSourceGenerator {\n-\n-    protected String targetDir = \"./src/main/csharp\";\n-\n-    public Object run() {\n-        filePostFix = \".cs\";\n-        if (destDir == null) {\n-            destDir = new File(targetDir + \"/ActiveMQ/Commands\");\n-        }\n-        return super.run();\n-    }\n-\n-    public String makeHashCodeBody() throws Exception {\n-        if (simpleName.endsWith(\"Id\")) {\n-            StringWriter buffer = new StringWriter();\n-            PrintWriter out = new PrintWriter(buffer);\n-            out.println(\"            int answer = 0;\");\n-            Iterator iter = getProperties().iterator();\n-            while (iter.hasNext()) {\n-                JProperty property = (JProperty)iter.next();\n-                out.println(\"            answer = (answer * 37) + HashCode(\" + property.getSimpleName() + \");\");\n-            }\n-            out.println(\"            return answer;\");\n-            return buffer.toString();\n-        }\n-        return null;\n-    }\n-\n-    public String makeEqualsBody() throws Exception {\n-        if (simpleName.endsWith(\"Id\")) {\n-            StringWriter buffer = new StringWriter();\n-            PrintWriter out = new PrintWriter(buffer);\n-\n-            Iterator iter = getProperties().iterator();\n-            while (iter.hasNext()) {\n-                JProperty property = (JProperty)iter.next();\n-                String name = property.getSimpleName();\n-                out.println(\"            if (! Equals(this.\" + name + \", that.\" + name + \")) return false;\");\n-            }\n-            out.println(\"            return true;\");\n-            return buffer.toString();\n-        }\n-        return null;\n-    }\n-\n-    public String makeToStringBody() throws Exception {\n-        StringWriter buffer = new StringWriter();\n-        PrintWriter out = new PrintWriter(buffer);\n-        out.println(\"            return GetType().Name + \\\"[\\\"\");\n-        Iterator iter = getProperties().iterator();\n-        while (iter.hasNext()) {\n-            JProperty property = (JProperty)iter.next();\n-            String name = property.getSimpleName();\n-            out.println(\"                + \\\" \" + name + \"=\\\" + \" + name);\n-        }\n-        out.println(\"                + \\\" ]\\\";\");\n-        return buffer.toString();\n-    }\n-\n-    private void generateLicence(PrintWriter out) {\n-        out.println(\"/*\");\n-        out.println(\" * Licensed to the Apache Software Foundation (ASF) under one or more\");\n-        out.println(\" * contributor license agreements.  See the NOTICE file distributed with\");\n-        out.println(\" * this work for additional information regarding copyright ownership.\");\n-        out.println(\" * The ASF licenses this file to You under the Apache License, Version 2.0\");\n-        out.println(\" * (the \\\"License\\\"); you may not use this file except in compliance with\");\n-        out.println(\" * the License.  You may obtain a copy of the License at\");\n-        out.println(\" *\");\n-        out.println(\" * http://www.apache.org/licenses/LICENSE-2.0\");\n-        out.println(\" *\");\n-        out.println(\" * Unless required by applicable law or agreed to in writing, software\");\n-        out.println(\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\");\n-        out.println(\" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\");\n-        out.println(\" * See the License for the specific language governing permissions and\");\n-        out.println(\" * limitations under the License.\");\n-        out.println(\" */\");\n-    }\n-\n-    protected void generateFile(PrintWriter out) throws Exception {\n-        generateLicence(out);\n-\n-        out.println(\"//\");\n-        out.println(\"//  NOTE!: This file is autogenerated - do not modify!\");\n-        out.println(\"//         if you need to make a change, please see the Groovy scripts in the\");\n-        out.println(\"//         activemq-core module\");\n-        out.println(\"//\");\n-        out.println(\"\");\n-        out.println(\"using System;\");\n-        out.println(\"using System.Collections;\");\n-        out.println(\"\");\n-        out.println(\"using ActiveMQ.OpenWire;\");\n-        out.println(\"using ActiveMQ.Commands;\");\n-        out.println(\"\");\n-        out.println(\"namespace ActiveMQ.Commands\");\n-        out.println(\"{\");\n-        out.println(\"    /// <summary>\");\n-        out.println(\"    ///  The ActiveMQ \" + jclass.getSimpleName() + \" Command\");\n-        out.println(\"    /// </summary>\");\n-        out.print(\"    public class \" + jclass.getSimpleName() + \" : \" + baseClass);\n-\n-        for (int i = 0; i < jclass.getInterfaces().length; i++) {\n-            JClass intf = jclass.getInterfaces()[i];\n-            out.print(\", \" + intf.getSimpleName());\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    {\");\n-        out.println(\"        public const byte ID_\" + jclass.getSimpleName() + \" = \" + getOpenWireOpCode(jclass) + \";\");\n-        out.println(\"                \");\n-\n-        List properties = getProperties();\n-        String type;\n-        Object name;\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            type = toCSharpType(property.getType());\n-            name = decapitalize(property.getSimpleName());\n-            out.println(\"        \" + type + \" \" + name + \";\");\n-        }\n-\n-        String text = makeHashCodeBody();\n-        if (text != null) {\n-            out.println(\"\");\n-            out.println(\"        public override int GetHashCode() {\");\n-            out.println(\"\" + text + \"\");\n-            out.println(\"        }\");\n-        }\n-\n-        text = makeEqualsBody();\n-        if (text != null) {\n-            out.println(\"\");\n-            out.println(\"        public override bool Equals(object that) {\");\n-            out.println(\"            if (that is \" + className + \") {\");\n-            out.println(\"                return Equals((\" + className + \") that);\");\n-            out.println(\"            }\");\n-            out.println(\"            return false;\");\n-            out.println(\"        }\");\n-            out.println(\"\");\n-            out.println(\"        public virtual bool Equals(\" + className + \" that) {\");\n-            out.println(\"\" + text + \"\");\n-            out.println(\"        }\");\n-        }\n-\n-        text = makeToStringBody();\n-        if (text != null) {\n-            out.println(\"\");\n-            out.println(\"        public override string ToString() {\");\n-            out.println(\"\" + text + \"\");\n-            out.println(\"        }\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"        public override byte GetDataStructureType() {\");\n-        out.println(\"            return ID_\" + jclass.getSimpleName() + \";\");\n-        out.println(\"        }\");\n-        out.println(\"\");\n-        out.println(\"\");\n-        out.println(\"        // Properties\");\n-\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            type = toCSharpType(property.getType());\n-            name = decapitalize(property.getSimpleName());\n-            String propertyName = property.getSimpleName();\n-\n-            out.println(\"\");\n-            out.println(\"        public \" + type + \" \" + propertyName + \"\");\n-            out.println(\"        {\");\n-            out.println(\"            get { return \" + name + \"; }\");\n-            out.println(\"            set { this.\" + name + \" = value; }            \");\n-            out.println(\"        }\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    }\");\n-        out.println(\"}\");\n-    }\n-\n-    public String getTargetDir() {\n-        return targetDir;\n-    }\n-\n-    public void setTargetDir(String targetDir) {\n-        this.targetDir = targetDir;\n-    }\n-}"
  },
  {
    "sha": "5341f61675a6d958c1f12ee891a3355374d4f2aa",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpGeneratorTask.java",
    "status": "removed",
    "additions": 0,
    "deletions": 118,
    "changes": 118,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpGeneratorTask.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpGeneratorTask.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpGeneratorTask.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,118 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-\n-import org.apache.tools.ant.BuildException;\n-import org.apache.tools.ant.Project;\n-import org.apache.tools.ant.Task;\n-import org.codehaus.jam.JamService;\n-import org.codehaus.jam.JamServiceFactory;\n-import org.codehaus.jam.JamServiceParams;\n-\n-/**\n- * \n- */\n-public class CSharpGeneratorTask extends Task {\n-\n-    int version = 2;\n-    File source = new File(\".\");\n-    File target = new File(\".\");\n-\n-    public static void main(String[] args) {\n-\n-        Project project = new Project();\n-        project.init();\n-        CSharpGeneratorTask generator = new CSharpGeneratorTask();\n-        generator.setProject(project);\n-\n-        if (args.length > 0) {\n-            generator.version = Integer.parseInt(args[0]);\n-        }\n-\n-        if (args.length > 1) {\n-            generator.source = new File(args[1]);\n-        }\n-\n-        if (args.length > 2) {\n-            generator.target = new File(args[2]);\n-        }\n-\n-        generator.execute();\n-    }\n-\n-    public void execute() throws BuildException {\n-        try {\n-\n-            String sourceDir = source + \"/src/main/java\";\n-\n-            System.out.println(\"Parsing source files in: \" + sourceDir);\n-\n-            JamServiceFactory jamServiceFactory = JamServiceFactory.getInstance();\n-            JamServiceParams params = jamServiceFactory.createServiceParams();\n-            File[] dirs = new File[] {\n-                new File(sourceDir)\n-            };\n-            params.includeSourcePattern(dirs, \"**/*.java\");\n-            JamService jam = jamServiceFactory.createService(params);\n-\n-            {\n-                CSharpClassesGenerator script = new CSharpClassesGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(target + \"/src/main/csharp\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-            {\n-                CSharpMarshallingGenerator script = new CSharpMarshallingGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(target + \"/src/main/csharp\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-\n-        } catch (Exception e) {\n-            throw new BuildException(e);\n-        }\n-    }\n-\n-    public int getVersion() {\n-        return version;\n-    }\n-\n-    public void setVersion(int version) {\n-        this.version = version;\n-    }\n-\n-    public File getSource() {\n-        return source;\n-    }\n-\n-    public void setSource(File basedir) {\n-        this.source = basedir;\n-    }\n-\n-    public File getTarget() {\n-        return target;\n-    }\n-\n-    public void setTarget(File target) {\n-        this.target = target;\n-    }\n-\n-}"
  },
  {
    "sha": "93596290809604856dae7f01dcd427ead349febf",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpMarshallingGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 579,
    "changes": 579,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpMarshallingGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpMarshallingGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSharpMarshallingGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,579 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.codehaus.jam.JAnnotation;\n-import org.codehaus.jam.JAnnotationValue;\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JProperty;\n-\n-/**\n- * \n- */\n-public class CSharpMarshallingGenerator extends JavaMarshallingGenerator {\n-\n-    protected String targetDir = \"./src/main/csharp\";\n-\n-    public Object run() {\n-        filePostFix = \".cs\";\n-        if (destDir == null) {\n-            destDir = new File(targetDir + \"/ActiveMQ/OpenWire/V\" + getOpenwireVersion());\n-        }\n-        return super.run();\n-    }\n-\n-    // ////////////////////////////////////////////////////////////////////////////////////\n-    // This section is for the tight wire format encoding generator\n-    // ////////////////////////////////////////////////////////////////////////////////////\n-\n-    protected void generateTightUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-\n-        String propertyName = property.getSimpleName();\n-        String type = property.getType().getSimpleName();\n-\n-        if (type.equals(\"boolean\")) {\n-            out.println(\"        info.\" + propertyName + \" = bs.ReadBoolean();\");\n-        } else if (type.equals(\"byte\")) {\n-            out.println(\"        info.\" + propertyName + \" = dataIn.ReadByte();\");\n-        } else if (type.equals(\"char\")) {\n-            out.println(\"        info.\" + propertyName + \" = dataIn.ReadChar();\");\n-        } else if (type.equals(\"short\")) {\n-            out.println(\"        info.\" + propertyName + \" = dataIn.ReadInt16();\");\n-        } else if (type.equals(\"int\")) {\n-            out.println(\"        info.\" + propertyName + \" = dataIn.ReadInt32();\");\n-        } else if (type.equals(\"long\")) {\n-            out.println(\"        info.\" + propertyName + \" = TightUnmarshalLong(wireFormat, dataIn, bs);\");\n-        } else if (type.equals(\"String\")) {\n-            out.println(\"        info.\" + propertyName + \" = TightUnmarshalString(dataIn, bs);\");\n-        } else if (type.equals(\"byte[]\") || type.equals(\"ByteSequence\")) {\n-            if (size != null) {\n-                out.println(\"        info.\" + propertyName + \" = ReadBytes(dataIn, \" + size.asInt() + \");\");\n-            } else {\n-                out.println(\"        info.\" + propertyName + \" = ReadBytes(dataIn, bs.ReadBoolean());\");\n-            }\n-        } else if (isThrowable(property.getType())) {\n-            out.println(\"        info.\" + propertyName + \" = TightUnmarshalBrokerError(wireFormat, dataIn, bs);\");\n-        } else if (isCachedProperty(property)) {\n-            out.println(\"        info.\" + propertyName + \" = (\" + type + \") TightUnmarshalCachedObject(wireFormat, dataIn, bs);\");\n-        } else {\n-            out.println(\"        info.\" + propertyName + \" = (\" + type + \") TightUnmarshalNestedObject(wireFormat, dataIn, bs);\");\n-        }\n-    }\n-\n-    protected void generateTightUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-        JClass propertyType = property.getType();\n-        String arrayType = propertyType.getArrayComponentType().getSimpleName();\n-        String propertyName = property.getSimpleName();\n-        out.println();\n-        if (size != null) {\n-            out.println(\"        {\");\n-            out.println(\"            \" + arrayType + \"[] value = new \" + arrayType + \"[\" + size.asInt() + \"];\");\n-            out.println(\"            \" + \"for( int i=0; i < \" + size.asInt() + \"; i++ ) {\");\n-            out.println(\"                value[i] = (\" + arrayType + \") TightUnmarshalNestedObject(wireFormat,dataIn, bs);\");\n-            out.println(\"            }\");\n-            out.println(\"            info.\" + propertyName + \" = value;\");\n-            out.println(\"        }\");\n-        } else {\n-            out.println(\"        if (bs.ReadBoolean()) {\");\n-            out.println(\"            short size = dataIn.ReadInt16();\");\n-            out.println(\"            \" + arrayType + \"[] value = new \" + arrayType + \"[size];\");\n-            out.println(\"            for( int i=0; i < size; i++ ) {\");\n-            out.println(\"                value[i] = (\" + arrayType + \") TightUnmarshalNestedObject(wireFormat,dataIn, bs);\");\n-            out.println(\"            }\");\n-            out.println(\"            info.\" + propertyName + \" = value;\");\n-            out.println(\"        }\");\n-            out.println(\"        else {\");\n-            out.println(\"            info.\" + propertyName + \" = null;\");\n-            out.println(\"        }\");\n-        }\n-    }\n-\n-    protected int generateTightMarshal1Body(PrintWriter out) {\n-        List properties = getProperties();\n-        int baseSize = 0;\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String type = propertyType.getSimpleName();\n-            String getter = \"info.\" + property.getSimpleName();\n-\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"        bs.WriteBoolean(\" + getter + \");\");\n-            } else if (type.equals(\"byte\")) {\n-                baseSize += 1;\n-            } else if (type.equals(\"char\")) {\n-                baseSize += 2;\n-            } else if (type.equals(\"short\")) {\n-                baseSize += 2;\n-            } else if (type.equals(\"int\")) {\n-                baseSize += 4;\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"        rc += TightMarshalLong1(wireFormat, \" + getter + \", bs);\");\n-            } else if (type.equals(\"String\")) {\n-                out.print(\"\");\n-                out.println(\"        rc += TightMarshalString1(\" + getter + \", bs);\");\n-            } else if (type.equals(\"byte[]\") || type.equals(\"ByteSequence\")) {\n-                if (size == null) {\n-                    out.println(\"        bs.WriteBoolean(\" + getter + \"!=null);\");\n-                    out.println(\"        rc += \" + getter + \"==null ? 0 : \" + getter + \".Length+4;\");\n-                } else {\n-                    baseSize += size.asInt();\n-                }\n-            } else if (propertyType.isArrayType()) {\n-                if (size != null) {\n-                    out.println(\"        rc += TightMarshalObjectArrayConstSize1(wireFormat, \" + getter + \", bs, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        rc += TightMarshalObjectArray1(wireFormat, \" + getter + \", bs);\");\n-                }\n-            } else if (isThrowable(propertyType)) {\n-                out.println(\"        rc += TightMarshalBrokerError1(wireFormat, \" + getter + \", bs);\");\n-            } else {\n-                if (isCachedProperty(property)) {\n-                    out.println(\"        rc += TightMarshalCachedObject1(wireFormat, (DataStructure)\" + getter + \", bs);\");\n-                } else {\n-                    out.println(\"        rc += TightMarshalNestedObject1(wireFormat, (DataStructure)\" + getter + \", bs);\");\n-                }\n-            }\n-        }\n-        return baseSize;\n-    }\n-\n-    protected void generateTightMarshal2Body(PrintWriter out) {\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String type = propertyType.getSimpleName();\n-            String getter = \"info.\" + property.getSimpleName();\n-\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"        bs.ReadBoolean();\");\n-            } else if (type.equals(\"byte\")) {\n-                out.println(\"        dataOut.Write(\" + getter + \");\");\n-            } else if (type.equals(\"char\")) {\n-                out.println(\"        dataOut.Write(\" + getter + \");\");\n-            } else if (type.equals(\"short\")) {\n-                out.println(\"        dataOut.Write(\" + getter + \");\");\n-            } else if (type.equals(\"int\")) {\n-                out.println(\"        dataOut.Write(\" + getter + \");\");\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"        TightMarshalLong2(wireFormat, \" + getter + \", dataOut, bs);\");\n-            } else if (type.equals(\"String\")) {\n-                out.println(\"        TightMarshalString2(\" + getter + \", dataOut, bs);\");\n-            } else if (type.equals(\"byte[]\") || type.equals(\"ByteSequence\")) {\n-                if (size != null) {\n-                    out.println(\"        dataOut.Write(\" + getter + \", 0, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        if(bs.ReadBoolean()) {\");\n-                    out.println(\"           dataOut.Write(\" + getter + \".Length);\");\n-                    out.println(\"           dataOut.Write(\" + getter + \");\");\n-                    out.println(\"        }\");\n-                }\n-            } else if (propertyType.isArrayType()) {\n-                if (size != null) {\n-                    out.println(\"        TightMarshalObjectArrayConstSize2(wireFormat, \" + getter + \", dataOut, bs, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        TightMarshalObjectArray2(wireFormat, \" + getter + \", dataOut, bs);\");\n-                }\n-            } else if (isThrowable(propertyType)) {\n-                out.println(\"        TightMarshalBrokerError2(wireFormat, \" + getter + \", dataOut, bs);\");\n-            } else {\n-                if (isCachedProperty(property)) {\n-                    out.println(\"        TightMarshalCachedObject2(wireFormat, (DataStructure)\" + getter + \", dataOut, bs);\");\n-                } else {\n-                    out.println(\"        TightMarshalNestedObject2(wireFormat, (DataStructure)\" + getter + \", dataOut, bs);\");\n-                }\n-            }\n-        }\n-    }\n-\n-    // ////////////////////////////////////////////////////////////////////////////////////\n-    // This section is for the loose wire format encoding generator\n-    // ////////////////////////////////////////////////////////////////////////////////////\n-\n-    protected void generateLooseUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-\n-        String propertyName = property.getSimpleName();\n-        String type = property.getType().getSimpleName();\n-\n-        if (type.equals(\"boolean\")) {\n-            out.println(\"        info.\" + propertyName + \" = dataIn.ReadBoolean();\");\n-        } else if (type.equals(\"byte\")) {\n-            out.println(\"        info.\" + propertyName + \" = dataIn.ReadByte();\");\n-        } else if (type.equals(\"char\")) {\n-            out.println(\"        info.\" + propertyName + \" = dataIn.ReadChar();\");\n-        } else if (type.equals(\"short\")) {\n-            out.println(\"        info.\" + propertyName + \" = dataIn.ReadInt16();\");\n-        } else if (type.equals(\"int\")) {\n-            out.println(\"        info.\" + propertyName + \" = dataIn.ReadInt32();\");\n-        } else if (type.equals(\"long\")) {\n-            out.println(\"        info.\" + propertyName + \" = LooseUnmarshalLong(wireFormat, dataIn);\");\n-        } else if (type.equals(\"String\")) {\n-            out.println(\"        info.\" + propertyName + \" = LooseUnmarshalString(dataIn);\");\n-        } else if (type.equals(\"byte[]\") || type.equals(\"ByteSequence\")) {\n-            if (size != null) {\n-                out.println(\"        info.\" + propertyName + \" = ReadBytes(dataIn, \" + size.asInt() + \");\");\n-            } else {\n-                out.println(\"        info.\" + propertyName + \" = ReadBytes(dataIn, dataIn.ReadBoolean());\");\n-            }\n-        } else if (isThrowable(property.getType())) {\n-            out.println(\"        info.\" + propertyName + \" = LooseUnmarshalBrokerError(wireFormat, dataIn);\");\n-        } else if (isCachedProperty(property)) {\n-            out.println(\"        info.\" + propertyName + \" = (\" + type + \") LooseUnmarshalCachedObject(wireFormat, dataIn);\");\n-        } else {\n-            out.println(\"        info.\" + propertyName + \" = (\" + type + \") LooseUnmarshalNestedObject(wireFormat, dataIn);\");\n-        }\n-    }\n-\n-    protected void generateLooseUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-        JClass propertyType = property.getType();\n-        String arrayType = propertyType.getArrayComponentType().getSimpleName();\n-        String propertyName = property.getSimpleName();\n-        out.println();\n-        if (size != null) {\n-            out.println(\"        {\");\n-            out.println(\"            \" + arrayType + \"[] value = new \" + arrayType + \"[\" + size.asInt() + \"];\");\n-            out.println(\"            \" + \"for( int i=0; i < \" + size.asInt() + \"; i++ ) {\");\n-            out.println(\"                value[i] = (\" + arrayType + \") LooseUnmarshalNestedObject(wireFormat,dataIn);\");\n-            out.println(\"            }\");\n-            out.println(\"            info.\" + propertyName + \" = value;\");\n-            out.println(\"        }\");\n-        } else {\n-            out.println(\"        if (dataIn.ReadBoolean()) {\");\n-            out.println(\"            short size = dataIn.ReadInt16();\");\n-            out.println(\"            \" + arrayType + \"[] value = new \" + arrayType + \"[size];\");\n-            out.println(\"            for( int i=0; i < size; i++ ) {\");\n-            out.println(\"                value[i] = (\" + arrayType + \") LooseUnmarshalNestedObject(wireFormat,dataIn);\");\n-            out.println(\"            }\");\n-            out.println(\"            info.\" + propertyName + \" = value;\");\n-            out.println(\"        }\");\n-            out.println(\"        else {\");\n-            out.println(\"            info.\" + propertyName + \" = null;\");\n-            out.println(\"        }\");\n-        }\n-    }\n-\n-    protected void generateLooseMarshalBody(PrintWriter out) {\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String type = propertyType.getSimpleName();\n-            String getter = \"info.\" + property.getSimpleName();\n-\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"        dataOut.Write(\" + getter + \");\");\n-            } else if (type.equals(\"byte\")) {\n-                out.println(\"        dataOut.Write(\" + getter + \");\");\n-            } else if (type.equals(\"char\")) {\n-                out.println(\"        dataOut.Write(\" + getter + \");\");\n-            } else if (type.equals(\"short\")) {\n-                out.println(\"        dataOut.Write(\" + getter + \");\");\n-            } else if (type.equals(\"int\")) {\n-                out.println(\"        dataOut.Write(\" + getter + \");\");\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"        LooseMarshalLong(wireFormat, \" + getter + \", dataOut);\");\n-            } else if (type.equals(\"String\")) {\n-                out.println(\"        LooseMarshalString(\" + getter + \", dataOut);\");\n-            } else if (type.equals(\"byte[]\") || type.equals(\"ByteSequence\")) {\n-                if (size != null) {\n-                    out.println(\"        dataOut.Write(\" + getter + \", 0, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        dataOut.Write(\" + getter + \"!=null);\");\n-                    out.println(\"        if(\" + getter + \"!=null) {\");\n-                    out.println(\"           dataOut.Write(\" + getter + \".Length);\");\n-                    out.println(\"           dataOut.Write(\" + getter + \");\");\n-                    out.println(\"        }\");\n-                }\n-            } else if (propertyType.isArrayType()) {\n-                if (size != null) {\n-                    out.println(\"        LooseMarshalObjectArrayConstSize(wireFormat, \" + getter + \", dataOut, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        LooseMarshalObjectArray(wireFormat, \" + getter + \", dataOut);\");\n-                }\n-            } else if (isThrowable(propertyType)) {\n-                out.println(\"        LooseMarshalBrokerError(wireFormat, \" + getter + \", dataOut);\");\n-            } else {\n-                if (isCachedProperty(property)) {\n-                    out.println(\"        LooseMarshalCachedObject(wireFormat, (DataStructure)\" + getter + \", dataOut);\");\n-                } else {\n-                    out.println(\"        LooseMarshalNestedObject(wireFormat, (DataStructure)\" + getter + \", dataOut);\");\n-                }\n-            }\n-        }\n-    }\n-\n-    public String getTargetDir() {\n-        return targetDir;\n-    }\n-\n-    public void setTargetDir(String targetDir) {\n-        this.targetDir = targetDir;\n-    }\n-\n-    private void generateLicence(PrintWriter out) {\n-        out.println(\"/**\");\n-        out.println(\" * Licensed to the Apache Software Foundation (ASF) under one or more\");\n-        out.println(\" * contributor license agreements.  See the NOTICE file distributed with\");\n-        out.println(\" * this work for additional information regarding copyright ownership.\");\n-        out.println(\" * The ASF licenses this file to You under the Apache License, Version 2.0\");\n-        out.println(\" * (the \\\"License\\\"); you may not use this file except in compliance with\");\n-        out.println(\" * the License.  You may obtain a copy of the License at\");\n-        out.println(\" *\");\n-        out.println(\" *      http://www.apache.org/licenses/LICENSE-2.0\");\n-        out.println(\" *\");\n-        out.println(\" * Unless required by applicable law or agreed to in writing, software\");\n-        out.println(\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\");\n-        out.println(\" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\");\n-        out.println(\" * See the License for the specific language governing permissions and\");\n-        out.println(\" * limitations under the License.\");\n-        out.println(\" */\");\n-    }\n-\n-    protected void generateFile(PrintWriter out) throws Exception {\n-        generateLicence(out);\n-        out.println(\"\");\n-        out.println(\"//\");\n-        out.println(\"// NOTE!: This file is autogenerated - do not modify!\");\n-        out.println(\"//        if you need to make a change, please see the Groovy scripts in the\");\n-        out.println(\"//        activemq-core module\");\n-        out.println(\"//\");\n-        out.println(\"\");\n-        out.println(\"using System;\");\n-        out.println(\"using System.Collections;\");\n-        out.println(\"using System.IO;\");\n-        out.println(\"\");\n-        out.println(\"using ActiveMQ.Commands;\");\n-        out.println(\"using ActiveMQ.OpenWire;\");\n-        out.println(\"using ActiveMQ.OpenWire.V\" + getOpenwireVersion() + \";\");\n-        out.println(\"\");\n-        out.println(\"namespace ActiveMQ.OpenWire.V\" + getOpenwireVersion() + \"\");\n-        out.println(\"{\");\n-        out.println(\"  /// <summary>\");\n-        out.println(\"  ///  Marshalling code for Open Wire Format for \" + jclass.getSimpleName() + \"\");\n-        out.println(\"  /// </summary>\");\n-        out.println(\"  \" + getAbstractClassText() + \"class \" + getClassName() + \" : \" + getBaseClass() + \"\");\n-        out.println(\"  {\");\n-\n-        if (!isAbstractClass()) {\n-            out.println(\"\");\n-            out.println(\"\");\n-            out.println(\"    public override DataStructure CreateObject() \");\n-            out.println(\"    {\");\n-            out.println(\"        return new \" + jclass.getSimpleName() + \"();\");\n-            out.println(\"    }\");\n-            out.println(\"\");\n-            out.println(\"    public override byte GetDataStructureType() \");\n-            out.println(\"    {\");\n-            out.println(\"        return \" + jclass.getSimpleName() + \".ID_\" + jclass.getSimpleName() + \";\");\n-            out.println(\"    }\");\n-        }\n-\n-        /*\n-         * Generate the tight encoding marshallers\n-         */\n-        out.println(\"\");\n-        out.println(\"    // \");\n-        out.println(\"    // Un-marshal an object instance from the data input stream\");\n-        out.println(\"    // \");\n-        out.println(\"    public override void TightUnmarshal(OpenWireFormat wireFormat, Object o, BinaryReader dataIn, BooleanStream bs) \");\n-        out.println(\"    {\");\n-        out.println(\"        base.TightUnmarshal(wireFormat, o, dataIn, bs);\");\n-\n-        if (!getProperties().isEmpty() || isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        \" + jclass.getSimpleName() + \" info = (\" + jclass.getSimpleName() + \")o;\");\n-        }\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.BeforeUnmarshall(wireFormat);\");\n-            out.println(\"\");\n-        }\n-\n-        generateTightUnmarshalBody(out);\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.AfterUnmarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    }\");\n-        out.println(\"\");\n-        out.println(\"    //\");\n-        out.println(\"    // Write the booleans that this object uses to a BooleanStream\");\n-        out.println(\"    //\");\n-        out.println(\"    public override int TightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) {\");\n-        out.println(\"        \" + jclass.getSimpleName() + \" info = (\" + jclass.getSimpleName() + \")o;\");\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.BeforeMarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"        int rc = base.TightMarshal1(wireFormat, info, bs);\");\n-\n-        int baseSize = generateTightMarshal1Body(out);\n-\n-        out.println(\"\");\n-        out.println(\"        return rc + \" + baseSize + \";\");\n-        out.println(\"    }\");\n-        out.println(\"\");\n-        out.println(\"    // \");\n-        out.println(\"    // Write a object instance to data output stream\");\n-        out.println(\"    //\");\n-        out.println(\"    public override void TightMarshal2(OpenWireFormat wireFormat, Object o, BinaryWriter dataOut, BooleanStream bs) {\");\n-        out.println(\"        base.TightMarshal2(wireFormat, o, dataOut, bs);\");\n-\n-        if (!getProperties().isEmpty() || isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        \" + jclass.getSimpleName() + \" info = (\" + jclass.getSimpleName() + \")o;\");\n-        }\n-\n-        generateTightMarshal2Body(out);\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.AfterMarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    }\");\n-\n-        out.println(\"\");\n-        out.println(\"    // \");\n-        out.println(\"    // Un-marshal an object instance from the data input stream\");\n-        out.println(\"    // \");\n-        out.println(\"    public override void LooseUnmarshal(OpenWireFormat wireFormat, Object o, BinaryReader dataIn) \");\n-        out.println(\"    {\");\n-        out.println(\"        base.LooseUnmarshal(wireFormat, o, dataIn);\");\n-\n-        if (!getProperties().isEmpty() || isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        \" + jclass.getSimpleName() + \" info = (\" + jclass.getSimpleName() + \")o;\");\n-        }\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.BeforeUnmarshall(wireFormat);\");\n-            out.println(\"\");\n-        }\n-\n-        generateLooseUnmarshalBody(out);\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.AfterUnmarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    }\");\n-        out.println(\"\");\n-        out.println(\"    // \");\n-        out.println(\"    // Write a object instance to data output stream\");\n-        out.println(\"    //\");\n-        out.println(\"    public override void LooseMarshal(OpenWireFormat wireFormat, Object o, BinaryWriter dataOut) {\");\n-\n-        if (!getProperties().isEmpty() || isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        \" + jclass.getSimpleName() + \" info = (\" + jclass.getSimpleName() + \")o;\");\n-        }\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.BeforeMarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"        base.LooseMarshal(wireFormat, o, dataOut);\");\n-\n-        generateLooseMarshalBody(out);\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.AfterMarshall(wireFormat);\");\n-        }\n-        out.println(\"\");\n-        out.println(\"    }\");\n-        out.println(\"  }\");\n-        out.println(\"}\");\n-\n-    }\n-\n-    public void generateFactory(PrintWriter out) {\n-        generateLicence(out);\n-        out.println(\"\");\n-        out.println(\"//\");\n-        out.println(\"// NOTE!: This file is autogenerated - do not modify!\");\n-        out.println(\"//        if you need to make a change, please see the Groovy scripts in the\");\n-        out.println(\"//        activemq-core module\");\n-        out.println(\"//\");\n-        out.println(\"\");\n-        out.println(\"using System;\");\n-        out.println(\"using System.Collections;\");\n-        out.println(\"using System.IO;\");\n-        out.println(\"\");\n-        out.println(\"using ActiveMQ.Commands;\");\n-        out.println(\"using ActiveMQ.OpenWire;\");\n-        out.println(\"using ActiveMQ.OpenWire.V\" + getOpenwireVersion() + \";\");\n-        out.println(\"\");\n-        out.println(\"namespace ActiveMQ.OpenWire.V\" + getOpenwireVersion() + \"\");\n-        out.println(\"{\");\n-        out.println(\"    /// <summary>\");\n-        out.println(\"    /// Used to create marshallers for a specific version of the wire protocol\");\n-        out.println(\"    /// </summary>\");\n-        out.println(\"    public class MarshallerFactory : IMarshallerFactory\");\n-        out.println(\"    {\");\n-        out.println(\"        public void configure(OpenWireFormat format) \");\n-        out.println(\"        {\");\n-        out.println(\"            format.clearMarshallers();\");\n-\n-        List<JClass> list = new ArrayList<JClass>(getConcreteClasses());\n-        Collections.sort(list, new Comparator<JClass>() {\n-            public int compare(JClass c1, JClass c2) {\n-                return c1.getSimpleName().compareTo(c2.getSimpleName());\n-            }\n-        });\n-\n-        for (Iterator iter = list.iterator(); iter.hasNext();) {\n-            JClass jclass = (JClass)iter.next();\n-            out.println(\"            format.addMarshaller(new \" + jclass.getSimpleName() + \"Marshaller());\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"        }\");\n-        out.println(\"    }\");\n-        out.println(\"}\");\n-\n-    }\n-}"
  },
  {
    "sha": "ae2188b94a884e15c16eb8855f142f6208304f7f",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSourcesGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 378,
    "changes": 378,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSourcesGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSourcesGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CSourcesGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,378 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.codehaus.jam.JAnnotation;\n-import org.codehaus.jam.JAnnotationValue;\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JProperty;\n-\n-/**\n- * \n- */\n-public class CSourcesGenerator extends CHeadersGenerator {\n-\n-    public Object run() {\n-        filePostFix = \".c\";\n-        if (destFile == null) {\n-            destFile = new File(targetDir + \"/ow_commands_v\" + getOpenwireVersion() + \".c\");\n-        }\n-        return super.run();\n-    }\n-\n-    protected List<JClass> sort(List<JClass> source) {\n-        return source;\n-    }\n-\n-    protected void generateSetup(PrintWriter out) {\n-        generateLicence(out);\n-        out.println(\"\");\n-        out.println(\"/*****************************************************************************************\");\n-        out.println(\" *  \");\n-        out.println(\" * NOTE!: This file is auto generated - do not modify!\");\n-        out.println(\" *        if you need to make a change, please see the modify the groovy scripts in the\");\n-        out.println(\" *        under src/gram/script and then use maven openwire:generate to regenerate \");\n-        out.println(\" *        this file.\");\n-        out.println(\" *  \");\n-        out.println(\" *****************************************************************************************/\");\n-        out.println(\"\");\n-        out.println(\"\");\n-        out.println(\"#include \\\"ow_commands_v\" + openwireVersion + \".h\\\"\");\n-        out.println(\"\");\n-        out.println(\"#define SUCCESS_CHECK( f ) { apr_status_t rc=f; if(rc!=APR_SUCCESS) return rc; }\");\n-        out.println(\"\");\n-    }\n-\n-    protected void generateFile(PrintWriter out) throws Exception {\n-\n-        ArrayList<JProperty> properties = new ArrayList<JProperty>();\n-        jclass.getDeclaredProperties();\n-        for (int i = 0; i < jclass.getDeclaredProperties().length; i++) {\n-            JProperty p = jclass.getDeclaredProperties()[i];\n-            if (isValidProperty(p)) {\n-                properties.add(p);\n-            }\n-        }\n-\n-        String name = jclass.getSimpleName();\n-        String type = (\"ow_\" + name).toUpperCase() + \"_TYPE\";\n-        String baseName = \"DataStructure\";\n-        JClass superclass = jclass.getSuperclass();\n-        while (superclass.getSuperclass() != null) {\n-            if (sortedClasses.contains(superclass)) {\n-                baseName = superclass.getSimpleName();\n-                break;\n-            } else {\n-                superclass = superclass.getSuperclass();\n-            }\n-        }\n-\n-        out.println(\"ow_boolean ow_is_a_\" + name + \"(ow_DataStructure *object) {\");\n-        out.println(\"   if( object == 0 )\");\n-        out.println(\"      return 0;\");\n-        out.println(\"      \");\n-        out.println(\"   switch(object->structType) {\");\n-\n-        for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {\n-            JClass sub = (JClass)iterator.next();\n-            String subtype = \"OW_\" + sub.getSimpleName().toUpperCase() + \"_TYPE\";\n-            if (jclass.isAssignableFrom(sub) && !isAbstract(sub)) {\n-                out.println(\"\");\n-                out.println(\"   case \" + subtype + \":\");\n-            }\n-        }\n-        out.println(\"\");\n-        out.println(\"      return 1;\");\n-        out.println(\"   }\");\n-        out.println(\"   return 0;\");\n-        out.println(\"}\");\n-\n-        if (!isAbstract(jclass)) {\n-            out.println(\"\");\n-            out.println(\"\");\n-            out.println(\"ow_\" + name + \" *ow_\" + name + \"_create(apr_pool_t *pool) \");\n-            out.println(\"{\");\n-            out.println(\"   ow_\" + name + \" *value = apr_pcalloc(pool,sizeof(ow_\" + name + \"));\");\n-            out.println(\"   if( value!=0 ) {\");\n-            out.println(\"      ((ow_DataStructure*)value)->structType = \" + type + \";\");\n-            out.println(\"   }\");\n-            out.println(\"   return value;\");\n-            out.println(\"}\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"\");\n-        out.println(\"apr_status_t ow_marshal1_\" + name + \"(ow_bit_buffer *buffer, ow_\" + name + \" *object)\");\n-        out.println(\"{\");\n-        out.println(\"   ow_marshal1_\" + baseName + \"(buffer, (ow_\" + baseName + \"*)object);\");\n-\n-        for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = iter.next();\n-            String propname = toPropertyCase(property.getSimpleName());\n-            boolean cached = isCachedProperty(property);\n-            JAnnotation annotation = property.getGetter().getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-\n-            type = property.getType().getQualifiedName();\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"   ow_bit_buffer_append(buffer, object->\" + propname + \");\");\n-            } else if (type.equals(\"byte\")) {\n-            } else if (type.equals(\"char\")) {\n-            } else if (type.equals(\"short\")) {\n-            } else if (type.equals(\"int\")) {\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"   ow_marshal1_long(buffer, object->\" + propname + \");\");\n-            } else if (type.equals(\"byte[]\")) {\n-                if (size == null) {\n-                    out.println(\"   ow_bit_buffer_append(buffer,  object->\" + propname + \"!=0 );\");\n-                }\n-            } else if (type.equals(\"org.apache.activeio.packet.ByteSequence\")) {\n-                if (size == null) {\n-                    out.println(\"   ow_bit_buffer_append(buffer,  object->\" + propname + \"!=0 );\");\n-                }\n-            } else if (type.equals(\"java.lang.String\")) {\n-                out.println(\"   ow_marshal1_string(buffer, object->\" + propname + \");\");\n-            } else {\n-                if (property.getType().isArrayType()) {\n-                    if (size != null) {\n-                        out.println(\"   SUCCESS_CHECK(ow_marshal1_DataStructure_array_const_size(buffer, object->\" + propname + \", \" + size.asInt() + \"));\");\n-                    } else {\n-                        out.println(\"   SUCCESS_CHECK(ow_marshal1_DataStructure_array(buffer, object->\" + propname + \"));\");\n-                    }\n-                } else if (isThrowable(property.getType())) {\n-                    out.println(\"   SUCCESS_CHECK(ow_marshal1_throwable(buffer, object->\" + propname + \"));\");\n-                } else {\n-                    if (cached) {\n-                        out.println(\"   SUCCESS_CHECK(ow_marshal1_cached_object(buffer, (ow_DataStructure*)object->\" + propname + \"));\");\n-                    } else {\n-                        out.println(\"   SUCCESS_CHECK(ow_marshal1_nested_object(buffer, (ow_DataStructure*)object->\" + propname + \"));\");\n-                    }\n-                }\n-            }\n-            out.println(\"\");\n-        }\n-\n-        out.println(\"   \");\n-        out.println(\"   return APR_SUCCESS;\");\n-        out.println(\"}\");\n-        out.println(\"apr_status_t ow_marshal2_\" + name + \"(ow_byte_buffer *buffer, ow_bit_buffer *bitbuffer, ow_\" + name + \" *object)\");\n-        out.println(\"{\");\n-        out.println(\"   ow_marshal2_\" + baseName + \"(buffer, bitbuffer, (ow_\" + baseName + \"*)object);   \");\n-\n-        for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = iter.next();\n-            JAnnotation annotation = property.getGetter().getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            Object propname = toPropertyCase(property.getSimpleName());\n-            boolean cached = isCachedProperty(property);\n-\n-            type = property.getType().getQualifiedName();\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"   ow_bit_buffer_read(bitbuffer);\");\n-            } else if (type.equals(\"byte\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_byte_buffer_append_\" + type + \"(buffer, object->\" + propname + \"));\");\n-            } else if (type.equals(\"char\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_byte_buffer_append_\" + type + \"(buffer, object->\" + propname + \"));\");\n-            } else if (type.equals(\"short\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_byte_buffer_append_\" + type + \"(buffer, object->\" + propname + \"));\");\n-            } else if (type.equals(\"int\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_byte_buffer_append_\" + type + \"(buffer, object->\" + propname + \"));\");\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_marshal2_long(buffer, bitbuffer, object->\" + propname + \"));\");\n-            } else if (type.equals(\"byte[]\")) {\n-                if (size != null) {\n-                    out.println(\"   SUCCESS_CHECK(ow_marshal2_byte_array_const_size(buffer, object->\" + propname + \", \" + size.asInt() + \"));\");\n-                } else {\n-                    out.println(\"   SUCCESS_CHECK(ow_marshal2_byte_array(buffer, bitbuffer, object->\" + propname + \"));\");\n-                }\n-            } else if (type.equals(\"org.apache.activeio.packet.ByteSequence\")) {\n-                if (size != null) {\n-                    out.println(\"   SUCCESS_CHECK(ow_marshal2_byte_array_const_size(buffer, object->\" + propname + \", \" + size.asInt() + \"));\");\n-                } else {\n-                    out.println(\"   SUCCESS_CHECK(ow_marshal2_byte_array(buffer, bitbuffer, object->\" + propname + \"));\");\n-                }\n-            } else if (type.equals(\"java.lang.String\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_marshal2_string(buffer, bitbuffer, object->\" + propname + \"));\");\n-            } else {\n-                if (property.getType().isArrayType()) {\n-                    if (size != null) {\n-                        out.println(\"   SUCCESS_CHECK(ow_marshal2_DataStructure_array_const_size(buffer, bitbuffer, object->\" + propname + \", \" + size.asInt() + \"));\");\n-                    } else {\n-                        out.println(\"   SUCCESS_CHECK(ow_marshal2_DataStructure_array(buffer, bitbuffer, object->\" + propname + \"));\");\n-                    }\n-                } else if (isThrowable(property.getType())) {\n-                    out.println(\"   SUCCESS_CHECK(ow_marshal2_throwable(buffer, bitbuffer, object->\" + propname + \"));\");\n-                } else {\n-                    if (cached) {\n-                        out.println(\"   SUCCESS_CHECK(ow_marshal2_cached_object(buffer, bitbuffer, (ow_DataStructure*)object->\" + propname + \"));\");\n-                    } else {\n-                        out.println(\"   SUCCESS_CHECK(ow_marshal2_nested_object(buffer, bitbuffer, (ow_DataStructure*)object->\" + propname + \"));\");\n-                    }\n-                }\n-            }\n-            out.println(\"\");\n-        }\n-\n-        out.println(\"   \");\n-        out.println(\"   return APR_SUCCESS;\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"apr_status_t ow_unmarshal_\" + name + \"(ow_byte_array *buffer, ow_bit_buffer *bitbuffer, ow_\" + name + \" *object, apr_pool_t *pool)\");\n-        out.println(\"{\");\n-        out.println(\"   ow_unmarshal_\" + baseName + \"(buffer, bitbuffer, (ow_\" + baseName + \"*)object, pool);   \");\n-\n-        for (Iterator<JProperty> iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = iter.next();\n-            JAnnotation annotation = property.getGetter().getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            String propname = toPropertyCase(property.getSimpleName());\n-            boolean cached = isCachedProperty(property);\n-\n-            type = property.getType().getQualifiedName();\n-\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"   object->\" + propname + \" = ow_bit_buffer_read(bitbuffer);\");\n-            } else if (type.equals(\"byte\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_byte_array_read_\" + type + \"(buffer, &object->\" + propname + \"));\");\n-            } else if (type.equals(\"char\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_byte_array_read_\" + type + \"(buffer, &object->\" + propname + \"));\");\n-            } else if (type.equals(\"short\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_byte_array_read_\" + type + \"(buffer, &object->\" + propname + \"));\");\n-            } else if (type.equals(\"int\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_byte_array_read_\" + type + \"(buffer, &object->\" + propname + \"));\");\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_unmarshal_long(buffer, bitbuffer, &object->\" + propname + \", pool));\");\n-            } else if (type.equals(\"byte[]\")) {\n-                if (size != null) {\n-                    out.println(\"   SUCCESS_CHECK(ow_unmarshal_byte_array_const_size(buffer, &object->\" + propname + \", \" + size.asInt() + \", pool));\");\n-                } else {\n-                    out.println(\"   SUCCESS_CHECK(ow_unmarshal_byte_array(buffer, bitbuffer, &object->\" + propname + \", pool));\");\n-                }\n-            } else if (type.equals(\"org.apache.activeio.packet.ByteSequence\")) {\n-                if (size != null) {\n-                    out.println(\"   SUCCESS_CHECK(ow_unmarshal_byte_array_const_size(buffer, &object->\" + propname + \", \" + size.asInt() + \", pool));\");\n-                } else {\n-                    out.println(\"   SUCCESS_CHECK(ow_unmarshal_byte_array(buffer, bitbuffer, &object->\" + propname + \", pool));\");\n-                }\n-            } else if (type.equals(\"java.lang.String\")) {\n-                out.println(\"   SUCCESS_CHECK(ow_unmarshal_string(buffer, bitbuffer, &object->\" + propname + \", pool));\");\n-            } else {\n-                if (property.getType().isArrayType()) {\n-                    if (size != null) {\n-                        out.println(\"   SUCCESS_CHECK(ow_unmarshal_DataStructure_array_const_size(buffer, bitbuffer, &object->\" + propname + \", \" + size.asInt() + \", pool));\");\n-                    } else {\n-                        out.println(\"   SUCCESS_CHECK(ow_unmarshal_DataStructure_array(buffer, bitbuffer, &object->\" + propname + \", pool));\");\n-                    }\n-                } else if (isThrowable(property.getType())) {\n-                    out.println(\"   SUCCESS_CHECK(ow_unmarshal_throwable(buffer, bitbuffer, &object->\" + propname + \", pool));\");\n-                } else {\n-                    if (cached) {\n-                        out.println(\"   SUCCESS_CHECK(ow_unmarshal_cached_object(buffer, bitbuffer, (ow_DataStructure**)&object->\" + propname + \", pool));\");\n-                    } else {\n-                        out.println(\"   SUCCESS_CHECK(ow_unmarshal_nested_object(buffer, bitbuffer, (ow_DataStructure**)&object->\" + propname + \", pool));\");\n-                    }\n-                }\n-            }\n-            out.println(\"\");\n-        }\n-\n-        out.println(\"   \");\n-        out.println(\"   return APR_SUCCESS;\");\n-        out.println(\"}\");\n-    }\n-\n-    protected void generateTearDown(PrintWriter out) {\n-        out.println(\"\");\n-        out.println(\"ow_DataStructure *ow_create_object(ow_byte type, apr_pool_t *pool)\");\n-        out.println(\"{\");\n-        out.println(\"   switch( type ) {\");\n-        for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {\n-            JClass jclass = (JClass)iterator.next();\n-            String name = jclass.getSimpleName();\n-            String type = (\"ow_\" + name).toUpperCase() + \"_TYPE\";\n-            if (!isAbstract(jclass)) {\n-                out.println(\"      case \" + type + \": return (ow_DataStructure *)ow_\" + name + \"_create(pool);\");\n-            }\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"   }\");\n-        out.println(\"   return 0;\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"apr_status_t ow_marshal1_object(ow_bit_buffer *buffer, ow_DataStructure *object)\");\n-        out.println(\"{\");\n-        out.println(\"   switch( object->structType ) {\");\n-\n-        for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {\n-            JClass jclass = (JClass)iterator.next();\n-            String name = jclass.getSimpleName();\n-            String type = (\"ow_\" + name).toUpperCase() + \"_TYPE\";\n-            if (!isAbstract(jclass)) {\n-                out.println(\"      case \" + type + \": return ow_marshal1_\" + name + \"(buffer, (ow_\" + name + \"*)object);\");\n-            }\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"   }\");\n-        out.println(\"   return APR_EGENERAL;\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"apr_status_t ow_marshal2_object(ow_byte_buffer *buffer, ow_bit_buffer *bitbuffer, ow_DataStructure *object)\");\n-        out.println(\"{\");\n-        out.println(\"   switch( object->structType ) {\");\n-\n-        for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {\n-            JClass jclass = (JClass)iterator.next();\n-            String name = jclass.getSimpleName();\n-            String type = (\"ow_\" + name).toUpperCase() + \"_TYPE\";\n-            if (!isAbstract(jclass)) {\n-                out.println(\"      case \" + type + \": return ow_marshal2_\" + name + \"(buffer, bitbuffer, (ow_\" + name + \"*)object);\");\n-            }\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"   }\");\n-        out.println(\"   return APR_EGENERAL;\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"apr_status_t ow_unmarshal_object(ow_byte_array *buffer, ow_bit_buffer *bitbuffer, ow_DataStructure *object, apr_pool_t *pool)\");\n-        out.println(\"{\");\n-        out.println(\"   switch( object->structType ) {\");\n-\n-        for (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {\n-            JClass jclass = (JClass)iterator.next();\n-            String name = jclass.getSimpleName();\n-            String type = (\"ow_\" + name).toUpperCase() + \"_TYPE\";\n-            if (!isAbstract(jclass)) {\n-                out.println(\"      case \" + type + \": return ow_unmarshal_\" + name + \"(buffer, bitbuffer, (ow_\" + name + \"*)object, pool);\");\n-            }\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"   }\");\n-        out.println(\"   return APR_EGENERAL;\");\n-        out.println(\"}\");\n-\n-    }\n-}"
  },
  {
    "sha": "43a496671478b99b33aa2f9812aeb43e6d45943a",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppClassesGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 291,
    "changes": 291,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppClassesGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppClassesGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppClassesGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,291 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.PrintWriter;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JProperty;\n-\n-/**\n- * \n- */\n-public class CppClassesGenerator extends MultiSourceGenerator {\n-\n-    protected String targetDir = \"./src/main/cpp\";\n-\n-    public Object run() {\n-        filePostFix = getFilePostFix();\n-        if (destDir == null) {\n-            destDir = new File(targetDir + \"/activemq/command\");\n-        }\n-        return super.run();\n-    }\n-\n-    protected String getFilePostFix() {\n-        return \".cpp\";\n-    }\n-\n-    /**\n-     * Converts the Java type to a C++ type name\n-     */\n-    public String toCppType(JClass type) {\n-        String name = type.getSimpleName();\n-        if (name.equals(\"String\")) {\n-            return \"p<string>\";\n-        } else if (type.isArrayType()) {\n-            if (name.equals(\"byte[]\")) {\n-                name = \"char[]\";\n-            } else if (name.equals(\"DataStructure[]\")) {\n-                name = \"IDataStructure[]\";\n-            }\n-            return \"array<\" + name.substring(0, name.length() - 2) + \">\";\n-        } else if (name.equals(\"Throwable\") || name.equals(\"Exception\")) {\n-            return \"p<BrokerError>\";\n-        } else if (name.equals(\"ByteSequence\")) {\n-            return \"array<char>\";\n-        } else if (name.equals(\"boolean\")) {\n-            return \"bool\";\n-        } else if (name.equals(\"long\")) {\n-            return \"long long\";\n-        } else if (name.equals(\"byte\")) {\n-            return \"char\";\n-        } else if (name.equals(\"Command\") || name.equals(\"DataStructure\")) {\n-            return \"p<I\" + name + \">\";\n-        } else if (!type.isPrimitiveType()) {\n-            return \"p<\" + name + \">\";\n-        } else {\n-            return name;\n-        }\n-    }\n-\n-    /**\n-     * Converts the Java type to a C++ default value\n-     */\n-    public String toCppDefaultValue(JClass type) {\n-        String name = type.getSimpleName();\n-\n-        if (name.equals(\"boolean\")) {\n-            return \"false\";\n-        } else if (!type.isPrimitiveType()) {\n-            return \"NULL\";\n-        } else {\n-            return \"0\";\n-        }\n-    }\n-\n-    /**\n-     * Converts the Java type to the name of the C++ marshal method to be used\n-     */\n-    public String toMarshalMethodName(JClass type) {\n-        String name = type.getSimpleName();\n-        if (name.equals(\"String\")) {\n-            return \"marshalString\";\n-        } else if (type.isArrayType()) {\n-            if (type.getArrayComponentType().isPrimitiveType() && name.equals(\"byte[]\")) {\n-                return \"marshalByteArray\";\n-            } else {\n-                return \"marshalObjectArray\";\n-            }\n-        } else if (name.equals(\"ByteSequence\")) {\n-            return \"marshalByteArray\";\n-        } else if (name.equals(\"short\")) {\n-            return \"marshalShort\";\n-        } else if (name.equals(\"int\")) {\n-            return \"marshalInt\";\n-        } else if (name.equals(\"long\")) {\n-            return \"marshalLong\";\n-        } else if (name.equals(\"byte\")) {\n-            return \"marshalByte\";\n-        } else if (name.equals(\"double\")) {\n-            return \"marshalDouble\";\n-        } else if (name.equals(\"float\")) {\n-            return \"marshalFloat\";\n-        } else if (name.equals(\"boolean\")) {\n-            return \"marshalBoolean\";\n-        } else if (!type.isPrimitiveType()) {\n-            return \"marshalObject\";\n-        } else {\n-            return name;\n-        }\n-    }\n-\n-    /**\n-     * Converts the Java type to the name of the C++ unmarshal method to be used\n-     */\n-    public String toUnmarshalMethodName(JClass type) {\n-        String name = type.getSimpleName();\n-        if (name.equals(\"String\")) {\n-            return \"unmarshalString\";\n-        } else if (type.isArrayType()) {\n-            if (type.getArrayComponentType().isPrimitiveType() && name.equals(\"byte[]\")) {\n-                return \"unmarshalByteArray\";\n-            } else {\n-                return \"unmarshalObjectArray\";\n-            }\n-        } else if (name.equals(\"ByteSequence\")) {\n-            return \"unmarshalByteArray\";\n-        } else if (name.equals(\"short\")) {\n-            return \"unmarshalShort\";\n-        } else if (name.equals(\"int\")) {\n-            return \"unmarshalInt\";\n-        } else if (name.equals(\"long\")) {\n-            return \"unmarshalLong\";\n-        } else if (name.equals(\"byte\")) {\n-            return \"unmarshalByte\";\n-        } else if (name.equals(\"double\")) {\n-            return \"unmarshalDouble\";\n-        } else if (name.equals(\"float\")) {\n-            return \"unmarshalFloat\";\n-        } else if (name.equals(\"boolean\")) {\n-            return \"unmarshalBoolean\";\n-        } else if (!type.isPrimitiveType()) {\n-            return \"unmarshalObject\";\n-        } else {\n-            return name;\n-        }\n-    }\n-\n-    /**\n-     * Converts the Java type to a C++ pointer cast\n-     */\n-    public String toUnmarshalCast(JClass type) {\n-        String name = toCppType(type);\n-\n-        if (name.startsWith(\"p<\")) {\n-            return \"p_cast<\" + name.substring(2);\n-        } else if (name.startsWith(\"array<\") && (type.isArrayType() && !type.getArrayComponentType().isPrimitiveType()) && !type.getSimpleName().equals(\"ByteSequence\")) {\n-            return \"array_cast<\" + name.substring(6);\n-        } else {\n-            return \"\";\n-        }\n-    }\n-\n-    protected void generateLicence(PrintWriter out) {\n-        out.println(\"/**\");\n-        out.println(\" * Licensed to the Apache Software Foundation (ASF) under one or more\");\n-        out.println(\" * contributor license agreements.  See the NOTICE file distributed with\");\n-        out.println(\" * this work for additional information regarding copyright ownership.\");\n-        out.println(\" * The ASF licenses this file to You under the Apache License, Version 2.0\");\n-        out.println(\" * (the \\\"License\\\"); you may not use this file except in compliance with\");\n-        out.println(\" * the License.  You may obtain a copy of the License at\");\n-        out.println(\" *\");\n-        out.println(\" *      http://www.apache.org/licenses/LICENSE-2.0\");\n-        out.println(\" *\");\n-        out.println(\" * Unless required by applicable law or agreed to in writing, software\");\n-        out.println(\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\");\n-        out.println(\" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\");\n-        out.println(\" * See the License for the specific language governing permissions and\");\n-        out.println(\" * limitations under the License.\");\n-        out.println(\" */\");\n-    }\n-\n-    protected void generateFile(PrintWriter out) throws Exception {\n-        generateLicence(out);\n-        out.println(\"#include \\\"activemq/command/\" + className + \".hpp\\\"\");\n-        out.println(\"\");\n-        out.println(\"using namespace apache::activemq::command;\");\n-        out.println(\"\");\n-        out.println(\"/*\");\n-        out.println(\" *\");\n-        out.println(\" *  Command and marshalling code for OpenWire format for \" + className + \"\");\n-        out.println(\" *\");\n-        out.println(\" *\");\n-        out.println(\" *  NOTE!: This file is autogenerated - do not modify!\");\n-        out.println(\" *         if you need to make a change, please see the Groovy scripts in the\");\n-        out.println(\" *         activemq-core module\");\n-        out.println(\" *\");\n-        out.println(\" */\");\n-        out.println(\"\" + className + \"::\" + className + \"()\");\n-        out.println(\"{\");\n-\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            String value = toCppDefaultValue(property.getType());\n-            String propertyName = property.getSimpleName();\n-            String parameterName = decapitalize(propertyName);\n-            out.println(\"    this->\" + parameterName + \" = \" + value + \" ;\");\n-        }\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"\" + className + \"::~\" + className + \"()\");\n-        out.println(\"{\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"unsigned char \" + className + \"::getDataStructureType()\");\n-        out.println(\"{\");\n-        out.println(\"    return \" + className + \"::TYPE ; \");\n-        out.println(\"}\");\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            String type = toCppType(property.getType());\n-            String propertyName = property.getSimpleName();\n-            String parameterName = decapitalize(propertyName);\n-            out.println(\"\");\n-            out.println(\"        \");\n-            out.println(\"\" + type + \" \" + className + \"::get\" + propertyName + \"()\");\n-            out.println(\"{\");\n-            out.println(\"    return \" + parameterName + \" ;\");\n-            out.println(\"}\");\n-            out.println(\"\");\n-            out.println(\"void \" + className + \"::set\" + propertyName + \"(\" + type + \" \" + parameterName + \")\");\n-            out.println(\"{\");\n-            out.println(\"    this->\" + parameterName + \" = \" + parameterName + \" ;\");\n-            out.println(\"}\");\n-        }\n-        out.println(\"\");\n-        out.println(\"int \" + className + \"::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException)\");\n-        out.println(\"{\");\n-        out.println(\"    int size = 0 ;\");\n-        out.println(\"\");\n-        out.println(\"    size += \" + baseClass + \"::marshal(marshaller, mode, ostream) ; \");\n-\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            String marshalMethod = toMarshalMethodName(property.getType());\n-            String propertyName = decapitalize(property.getSimpleName());\n-            out.println(\"    size += marshaller->\" + marshalMethod + \"(\" + propertyName + \", mode, ostream) ; \");\n-        }\n-        out.println(\"    return size ;\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"void \" + className + \"::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException)\");\n-        out.println(\"{\");\n-        out.println(\"    \" + baseClass + \"::unmarshal(marshaller, mode, istream) ; \");\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            String cast = toUnmarshalCast(property.getType());\n-            String unmarshalMethod = toUnmarshalMethodName(property.getType());\n-            String propertyName = decapitalize(property.getSimpleName());\n-            out.println(\"    \" + propertyName + \" = \" + cast + \"(marshaller->\" + unmarshalMethod + \"(mode, istream)) ; \");\n-        }\n-        out.println(\"}\");\n-    }\n-\n-    public String getTargetDir() {\n-        return targetDir;\n-    }\n-\n-    public void setTargetDir(String targetDir) {\n-        this.targetDir = targetDir;\n-    }\n-\n-}"
  },
  {
    "sha": "437c66b6ecd1ba0933f6d16f9be3ec1269717958",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppGeneratorTask.java",
    "status": "removed",
    "additions": 0,
    "deletions": 132,
    "changes": 132,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppGeneratorTask.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppGeneratorTask.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppGeneratorTask.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,132 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-\n-import org.apache.tools.ant.BuildException;\n-import org.apache.tools.ant.Project;\n-import org.apache.tools.ant.Task;\n-import org.codehaus.jam.JamService;\n-import org.codehaus.jam.JamServiceFactory;\n-import org.codehaus.jam.JamServiceParams;\n-\n-/**\n- * \n- */\n-public class CppGeneratorTask extends Task {\n-\n-    int version = 2;\n-    File source = new File(\".\");\n-    File target = new File(\".\");\n-\n-    public static void main(String[] args) {\n-\n-        Project project = new Project();\n-        project.init();\n-        CppGeneratorTask generator = new CppGeneratorTask();\n-        generator.setProject(project);\n-\n-        if (args.length > 0) {\n-            generator.version = Integer.parseInt(args[0]);\n-        }\n-\n-        if (args.length > 1) {\n-            generator.source = new File(args[1]);\n-        }\n-\n-        if (args.length > 2) {\n-            generator.target = new File(args[2]);\n-        }\n-\n-        generator.execute();\n-    }\n-\n-    public void execute() throws BuildException {\n-        try {\n-\n-            String sourceDir = source + \"/src/main/java\";\n-\n-            System.out.println(\"Parsing source files in: \" + sourceDir);\n-\n-            JamServiceFactory jamServiceFactory = JamServiceFactory.getInstance();\n-            JamServiceParams params = jamServiceFactory.createServiceParams();\n-            File[] dirs = new File[] {\n-                new File(sourceDir)\n-            };\n-            params.includeSourcePattern(dirs, \"**/*.java\");\n-            JamService jam = jamServiceFactory.createService(params);\n-\n-            {\n-                CppClassesGenerator script = new CppClassesGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(target + \"/src/main/cpp\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-            {\n-                CppHeadersGenerator script = new CppHeadersGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(target + \"/src/main/cpp\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-            {\n-                CppMarshallingHeadersGenerator script = new CppMarshallingHeadersGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(target + \"/src\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-            {\n-                CppMarshallingClassesGenerator script = new CppMarshallingClassesGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(target + \"/src\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-\n-        } catch (Exception e) {\n-            throw new BuildException(e);\n-        }\n-    }\n-\n-    public int getVersion() {\n-        return version;\n-    }\n-\n-    public void setVersion(int version) {\n-        this.version = version;\n-    }\n-\n-    public File getSource() {\n-        return source;\n-    }\n-\n-    public void setSource(File basedir) {\n-        this.source = basedir;\n-    }\n-\n-    public File getTarget() {\n-        return target;\n-    }\n-\n-    public void setTarget(File target) {\n-        this.target = target;\n-    }\n-\n-}"
  },
  {
    "sha": "9099e4eb0b1638bed5d1a8b41cc4b8edb5de2c5d",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppHeadersGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 144,
    "changes": 144,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppHeadersGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppHeadersGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppHeadersGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,144 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.PrintWriter;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JProperty;\n-\n-/**\n- * \n- */\n-public class CppHeadersGenerator extends CppClassesGenerator {\n-\n-    protected String getFilePostFix() {\n-        return \".hpp\";\n-    }\n-\n-    protected void generateFile(PrintWriter out) {\n-        generateLicence(out);\n-\n-        out.println(\"#ifndef ActiveMQ_\" + className + \"_hpp_\");\n-        out.println(\"#define ActiveMQ_\" + className + \"_hpp_\");\n-        out.println(\"\");\n-        out.println(\"// Turn off warning message for ignored exception specification\");\n-        out.println(\"#ifdef _MSC_VER\");\n-        out.println(\"#pragma warning( disable : 4290 )\");\n-        out.println(\"#endif\");\n-        out.println(\"\");\n-        out.println(\"#include <string>\");\n-        out.println(\"#include \\\"activemq/command/\" + baseClass + \".hpp\\\"\");\n-\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            if (!property.getType().isPrimitiveType() && !property.getType().getSimpleName().equals(\"String\") && !property.getType().getSimpleName().equals(\"ByteSequence\")) {\n-                String includeName = toCppType(property.getType());\n-                if (property.getType().isArrayType()) {\n-                    JClass arrayType = property.getType().getArrayComponentType();\n-                    if (arrayType.isPrimitiveType()) {\n-                        continue;\n-                    }\n-                }\n-                if (includeName.startsWith(\"array<\")) {\n-                    includeName = includeName.substring(6, includeName.length() - 1);\n-                } else if (includeName.startsWith(\"p<\")) {\n-                    includeName = includeName.substring(2, includeName.length() - 1);\n-                }\n-                if (includeName.equals(\"IDataStructure\")) {\n-                    out.println(\"#include \\\"activemq/\" + includeName + \".hpp\\\"\");\n-                } else {\n-                    out.println(\"#include \\\"activemq/command/\" + includeName + \".hpp\\\"\");\n-                }\n-            }\n-        }\n-        out.println(\"\");\n-        out.println(\"#include \\\"activemq/protocol/IMarshaller.hpp\\\"\");\n-        out.println(\"#include \\\"ppr/io/IOutputStream.hpp\\\"\");\n-        out.println(\"#include \\\"ppr/io/IInputStream.hpp\\\"\");\n-        out.println(\"#include \\\"ppr/io/IOException.hpp\\\"\");\n-        out.println(\"#include \\\"ppr/util/ifr/array\\\"\");\n-        out.println(\"#include \\\"ppr/util/ifr/p\\\"\");\n-        out.println(\"\");\n-        out.println(\"namespace apache\");\n-        out.println(\"{\");\n-        out.println(\"  namespace activemq\");\n-        out.println(\"  {\");\n-        out.println(\"    namespace command\");\n-        out.println(\"    {\");\n-        out.println(\"      using namespace ifr;\");\n-        out.println(\"      using namespace std;\");\n-        out.println(\"      using namespace apache::activemq;\");\n-        out.println(\"      using namespace apache::activemq::protocol;\");\n-        out.println(\"      using namespace apache::ppr::io;\");\n-        out.println(\"\");\n-        out.println(\"/*\");\n-        out.println(\" *\");\n-        out.println(\" *  Command and marshalling code for OpenWire format for \" + className + \"\");\n-        out.println(\" *\");\n-        out.println(\" *\");\n-        out.println(\" *  NOTE!: This file is autogenerated - do not modify!\");\n-        out.println(\" *         if you need to make a change, please see the Groovy scripts in the\");\n-        out.println(\" *         activemq-core module\");\n-        out.println(\" *\");\n-        out.println(\" */\");\n-        out.println(\"class \" + className + \" : public \" + baseClass + \"\");\n-        out.println(\"{\");\n-        out.println(\"protected:\");\n-\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            String type = toCppType(property.getType());\n-            String name = decapitalize(property.getSimpleName());\n-            out.println(\"    \" + type + \" \" + name + \" ;\");\n-        }\n-        out.println(\"\");\n-        out.println(\"public:\");\n-        out.println(\"    const static unsigned char TYPE = \" + getOpenWireOpCode(jclass) + \";\");\n-        out.println(\"\");\n-        out.println(\"public:\");\n-        out.println(\"    \" + className + \"() ;\");\n-        out.println(\"    virtual ~\" + className + \"() ;\");\n-        out.println(\"\");\n-        out.println(\"    virtual unsigned char getDataStructureType() ;\");\n-\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            String type = toCppType(property.getType());\n-            String propertyName = property.getSimpleName();\n-            String parameterName = decapitalize(propertyName);\n-            out.println(\"\");\n-            out.println(\"    virtual \" + type + \" get\" + propertyName + \"() ;\");\n-            out.println(\"    virtual void set\" + propertyName + \"(\" + type + \" \" + parameterName + \") ;\");\n-        }\n-        out.println(\"\");\n-        out.println(\"    virtual int marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException) ;\");\n-        out.println(\"    virtual void unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException) ;\");\n-        out.println(\"} ;\");\n-        out.println(\"\");\n-        out.println(\"/* namespace */\");\n-        out.println(\"    }\");\n-        out.println(\"  }\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"#endif /*ActiveMQ_\" + className + \"_hpp_*/\");\n-    }\n-\n-}"
  },
  {
    "sha": "62769341aa96b62e82ea9223c1b8cc7798e27e48",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppMarshallingClassesGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 366,
    "changes": 366,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppMarshallingClassesGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppMarshallingClassesGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppMarshallingClassesGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,366 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.codehaus.jam.JAnnotation;\n-import org.codehaus.jam.JAnnotationValue;\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JProperty;\n-\n-/**\n- * \n- */\n-public class CppMarshallingClassesGenerator extends CppMarshallingHeadersGenerator {\n-\n-    protected String getFilePostFix() {\n-        return \".cpp\";\n-    }\n-\n-    protected void generateUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-        out.print(\"    \");\n-        String setter = property.getSetter().getSimpleName();\n-        String type = property.getType().getSimpleName();\n-\n-        if (type.equals(\"boolean\")) {\n-            out.println(\"info.\" + setter + \"( bs.readBoolean() );\");\n-        } else if (type.equals(\"byte\")) {\n-            out.println(\"info.\" + setter + \"( DataStreamMarshaller.readByte(dataIn) );\");\n-        } else if (type.equals(\"char\")) {\n-            out.println(\"info.\" + setter + \"( DataStreamMarshaller.readChar(dataIn) );\");\n-        } else if (type.equals(\"short\")) {\n-            out.println(\"info.\" + setter + \"( DataStreamMarshaller.readShort(dataIn) );\");\n-        } else if (type.equals(\"int\")) {\n-            out.println(\"info.\" + setter + \"( DataStreamMarshaller.readInt(dataIn) );\");\n-        } else if (type.equals(\"long\")) {\n-            out.println(\"info.\" + setter + \"( UnmarshalLong(wireFormat, dataIn, bs) );\");\n-        } else if (type.equals(\"String\")) {\n-            out.println(\"info.\" + setter + \"( readString(dataIn, bs) );\");\n-        } else if (type.equals(\"byte[]\") || type.equals(\"ByteSequence\")) {\n-            if (size != null) {\n-                out.println(\"info.\" + setter + \"( readBytes(dataIn, \" + size.asInt() + \") );\");\n-            } else {\n-                out.println(\"info.\" + setter + \"( readBytes(dataIn, bs.readBoolean()) );\");\n-            }\n-        } else if (isThrowable(property.getType())) {\n-            out.println(\"info.\" + setter + \"( unmarshalBrokerError(wireFormat, dataIn, bs) );\");\n-        } else if (isCachedProperty(property)) {\n-            out.println(\"info.\" + setter + \"( (\" + type + \") unmarshalCachedObject(wireFormat, dataIn, bs) );\");\n-        } else {\n-            out.println(\"info.\" + setter + \"( (\" + type + \") unmarshalNestedObject(wireFormat, dataIn, bs) );\");\n-        }\n-    }\n-\n-    protected void generateUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-        JClass propertyType = property.getType();\n-        String arrayType = propertyType.getArrayComponentType().getSimpleName();\n-        String setter = property.getGetter().getSimpleName();\n-        out.println();\n-        if (size != null) {\n-            out.println(\"    {\");\n-            out.println(\"        \" + arrayType + \"[] value = new \" + arrayType + \"[\" + size.asInt() + \"];\");\n-            out.println(\"        \" + \"for( int i=0; i < \" + size.asInt() + \"; i++ ) {\");\n-            out.println(\"            value[i] = (\" + arrayType + \") unmarshalNestedObject(wireFormat,dataIn, bs);\");\n-            out.println(\"        }\");\n-            out.println(\"        info.\" + setter + \"( value );\");\n-            out.println(\"    }\");\n-        } else {\n-            out.println(\"    if (bs.readBoolean()) {\");\n-            out.println(\"        short size = DataStreamMarshaller.readShort(dataIn);\");\n-            out.println(\"        \" + arrayType + \"[] value = new \" + arrayType + \"[size];\");\n-            out.println(\"        for( int i=0; i < size; i++ ) {\");\n-            out.println(\"            value[i] = (\" + arrayType + \") unmarshalNestedObject(wireFormat,dataIn, bs);\");\n-            out.println(\"        }\");\n-            out.println(\"        info.\" + setter + \"( value );\");\n-            out.println(\"    }\");\n-            out.println(\"    else {\");\n-            out.println(\"        info.\" + setter + \"( null );\");\n-            out.println(\"    }\");\n-        }\n-    }\n-\n-    protected int generateMarshal1Body(PrintWriter out) {\n-        List properties = getProperties();\n-        int baseSize = 0;\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String type = propertyType.getSimpleName();\n-            String getter = \"info.\" + property.getGetter().getSimpleName() + \"()\";\n-\n-            out.print(indent);\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"bs.writeBoolean(\" + getter + \");\");\n-            } else if (type.equals(\"byte\")) {\n-                baseSize += 1;\n-            } else if (type.equals(\"char\")) {\n-                baseSize += 1;\n-            } else if (type.equals(\"short\")) {\n-                baseSize += 1;\n-            } else if (type.equals(\"int\")) {\n-                baseSize += 1;\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"rc += marshal1Long(wireFormat, \" + getter + \", bs);\");\n-            } else if (type.equals(\"String\")) {\n-                out.println(\"rc += writeString(\" + getter + \", bs);\");\n-            } else if (type.equals(\"byte[]\") || type.equals(\"ByteSequence\")) {\n-                if (size == null) {\n-                    out.println(\"bs.writeBoolean(\" + getter + \"!=null);\");\n-                    out.println(\"    rc += \" + getter + \"==null ? 0 : \" + getter + \".Length+4;\");\n-                } else {\n-                    baseSize += size.asInt();\n-                }\n-            } else if (propertyType.isArrayType()) {\n-                if (size != null) {\n-                    out.println(\"rc += marshalObjectArrayConstSize(wireFormat, \" + getter + \", bs, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"rc += marshalObjectArray(wireFormat, \" + getter + \", bs);\");\n-                }\n-            } else if (isThrowable(propertyType)) {\n-                out.println(\"rc += marshalBrokerError(wireFormat, \" + getter + \", bs);\");\n-            } else {\n-                if (isCachedProperty(property)) {\n-                    out.println(\"rc += marshal1CachedObject(wireFormat, \" + getter + \", bs);\");\n-                } else {\n-                    out.println(\"rc += marshal1NestedObject(wireFormat, \" + getter + \", bs);\");\n-                }\n-            }\n-        }\n-        return baseSize;\n-    }\n-\n-    protected void generateMarshal2Body(PrintWriter out) {\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String type = propertyType.getSimpleName();\n-            String getter = \"info.\" + property.getGetter().getSimpleName() + \"()\";\n-\n-            out.print(indent);\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"bs.readBoolean();\");\n-            } else if (type.equals(\"byte\")) {\n-                out.println(\"DataStreamMarshaller.writeByte(\" + getter + \", dataOut);\");\n-            } else if (type.equals(\"char\")) {\n-                out.println(\"DataStreamMarshaller.writeChar(\" + getter + \", dataOut);\");\n-            } else if (type.equals(\"short\")) {\n-                out.println(\"DataStreamMarshaller.writeShort(\" + getter + \", dataOut);\");\n-            } else if (type.equals(\"int\")) {\n-                out.println(\"DataStreamMarshaller.writeInt(\" + getter + \", dataOut);\");\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"marshal2Long(wireFormat, \" + getter + \", dataOut, bs);\");\n-            } else if (type.equals(\"String\")) {\n-                out.println(\"writeString(\" + getter + \", dataOut, bs);\");\n-            } else if (type.equals(\"byte[]\") || type.equals(\"ByteSequence\")) {\n-                if (size != null) {\n-                    out.println(\"dataOut.write(\" + getter + \", 0, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"if(bs.readBoolean()) {\");\n-                    out.println(\"       DataStreamMarshaller.writeInt(\" + getter + \".Length, dataOut);\");\n-                    out.println(\"       dataOut.write(\" + getter + \");\");\n-                    out.println(\"    }\");\n-                }\n-            } else if (propertyType.isArrayType()) {\n-                if (size != null) {\n-                    out.println(\"marshalObjectArrayConstSize(wireFormat, \" + getter + \", dataOut, bs, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"marshalObjectArray(wireFormat, \" + getter + \", dataOut, bs);\");\n-                }\n-            } else if (isThrowable(propertyType)) {\n-                out.println(\"marshalBrokerError(wireFormat, \" + getter + \", dataOut, bs);\");\n-            } else {\n-                if (isCachedProperty(property)) {\n-                    out.println(\"marshal2CachedObject(wireFormat, \" + getter + \", dataOut, bs);\");\n-                } else {\n-                    out.println(\"marshal2NestedObject(wireFormat, \" + getter + \", dataOut, bs);\");\n-                }\n-            }\n-        }\n-    }\n-\n-    protected void generateFile(PrintWriter out) throws Exception {\n-        generateLicence(out);\n-\n-        out.println(\"#include \\\"marshal/\" + className + \".hpp\\\"\");\n-        out.println(\"\");\n-        out.println(\"using namespace apache::activemq::client::marshal;\");\n-        out.println(\"\");\n-        out.println(\"/*\");\n-        out.println(\" *  Marshalling code for Open Wire Format for \" + jclass.getSimpleName() + \"\");\n-        out.println(\" *\");\n-        out.println(\" * NOTE!: This file is autogenerated - do not modify!\");\n-        out.println(\" *        if you need to make a change, please see the Groovy scripts in the\");\n-        out.println(\" *        activemq-core module\");\n-        out.println(\" */\");\n-        out.println(\"\");\n-        out.println(\"\" + className + \"::\" + className + \"()\");\n-        out.println(\"{\");\n-        out.println(\"    // no-op\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"\" + className + \"::~\" + className + \"()\");\n-        out.println(\"{\");\n-        out.println(\"    // no-op\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-\n-        if (!isAbstractClass()) {\n-            out.println(\"\");\n-            out.println(\"\");\n-            out.println(\"IDataStructure* \" + className + \"::createObject() \");\n-            out.println(\"{\");\n-            out.println(\"    return new \" + jclass.getSimpleName() + \"();\");\n-            out.println(\"}\");\n-            out.println(\"\");\n-            out.println(\"char \" + className + \"::getDataStructureType() \");\n-            out.println(\"{\");\n-            out.println(\"    return \" + jclass.getSimpleName() + \".ID_\" + jclass.getSimpleName() + \";\");\n-            out.println(\"}\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    /* \");\n-        out.println(\"     * Un-marshal an object instance from the data input stream\");\n-        out.println(\"     */ \");\n-        out.println(\"void \" + className + \"::unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) \");\n-        out.println(\"{\");\n-        out.println(\"    base.unmarshal(wireFormat, o, dataIn, bs);\");\n-\n-        List properties = getProperties();\n-        boolean marshallerAware = isMarshallerAware();\n-        if (!properties.isEmpty() || marshallerAware) {\n-            out.println(\"\");\n-            out.println(\"    \" + jclass.getSimpleName() + \"& info = (\" + jclass.getSimpleName() + \"&) o;\");\n-        }\n-\n-        if (marshallerAware) {\n-            out.println(\"\");\n-            out.println(\"    info.beforeUnmarshall(wireFormat);\");\n-            out.println(\"        \");\n-        }\n-\n-        generateTightUnmarshalBody(out);\n-\n-        if (marshallerAware) {\n-            out.println(\"\");\n-            out.println(\"    info.afterUnmarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"\");\n-        out.println(\"/*\");\n-        out.println(\" * Write the booleans that this object uses to a BooleanStream\");\n-        out.println(\" */\");\n-        out.println(\"int \" + className + \"::marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) {\");\n-        out.println(\"    \" + jclass.getSimpleName() + \"& info = (\" + jclass.getSimpleName() + \"&) o;\");\n-\n-        if (marshallerAware) {\n-            out.println(\"\");\n-            out.println(\"    info.beforeMarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    int rc = base.marshal1(wireFormat, info, bs);\");\n-\n-        int baseSize = generateMarshal1Body(out);\n-\n-        out.println(\"\");\n-        out.println(\"    return rc + \" + baseSize + \";\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"/* \");\n-        out.println(\" * Write a object instance to data output stream\");\n-        out.println(\" */\");\n-        out.println(\"void \" + className + \"::marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) {\");\n-        out.println(\"    base.marshal2(wireFormat, o, dataOut, bs);\");\n-\n-        if (!properties.isEmpty() || marshallerAware) {\n-            out.println(\"\");\n-            out.println(\"    \" + jclass.getSimpleName() + \"& info = (\" + jclass.getSimpleName() + \"&) o;\");\n-        }\n-\n-        generateMarshal2Body(out);\n-\n-        if (marshallerAware) {\n-            out.println(\"\");\n-            out.println(\"    info.afterMarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"}\");\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void generateFactory(PrintWriter out) {\n-        generateLicence(out);\n-        out.println(\"\");\n-        out.println(\"// Marshalling code for Open Wire Format\");\n-        out.println(\"//\");\n-        out.println(\"//\");\n-        out.println(\"// NOTE!: This file is autogenerated - do not modify!\");\n-        out.println(\"//        if you need to make a change, please see the Groovy scripts in the\");\n-        out.println(\"//        activemq-openwire module\");\n-        out.println(\"//\");\n-        out.println(\"\");\n-        out.println(\"#include \\\"marshal/\" + className + \".hpp\\\"\");\n-        out.println(\"\");\n-\n-        List list = new ArrayList(getConcreteClasses());\n-        Collections.sort(list, new Comparator() {\n-            public int compare(Object o1, Object o2) {\n-                JClass c1 = (JClass)o1;\n-                JClass c2 = (JClass)o2;\n-                return c1.getSimpleName().compareTo(c2.getSimpleName());\n-            }\n-        });\n-\n-        for (Iterator iter = list.iterator(); iter.hasNext();) {\n-            JClass jclass = (JClass)iter.next();\n-            out.println(\"#include \\\"marshal/\" + jclass.getSimpleName() + \"Marshaller.hpp\\\"\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"\");\n-        out.println(\"using namespace apache::activemq::client::marshal;\");\n-        out.println(\"\");\n-        out.println(\"\");\n-        out.println(\"void MarshallerFactory::configure(ProtocolFormat& format) \");\n-        out.println(\"{\");\n-\n-        for (Iterator iter = list.iterator(); iter.hasNext();) {\n-            JClass jclass = (JClass)iter.next();\n-            out.println(\"    format.addMarshaller(new \" + jclass.getSimpleName() + \"Marshaller());\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"}\");\n-\n-    }\n-}"
  },
  {
    "sha": "2af6bc08a2e57bdf8ee4de9b3e5076f90c0fb193",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppMarshallingHeadersGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 181,
    "changes": 181,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppMarshallingHeadersGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppMarshallingHeadersGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/CppMarshallingHeadersGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,181 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.PrintWriter;\n-\n-/**\n- * \n- */\n-public class CppMarshallingHeadersGenerator extends JavaMarshallingGenerator {\n-\n-    protected String targetDir = \"./src\";\n-\n-    public Object run() {\n-        filePostFix = getFilePostFix();\n-        if (destDir == null) {\n-            destDir = new File(targetDir + \"/marshal\");\n-        }\n-        return super.run();\n-    }\n-\n-    protected String getFilePostFix() {\n-        return \".hpp\";\n-    }\n-\n-    protected void generateLicence(PrintWriter out) {\n-        out.println(\"/**\");\n-        out.println(\" * Licensed to the Apache Software Foundation (ASF) under one or more\");\n-        out.println(\" * contributor license agreements.  See the NOTICE file distributed with\");\n-        out.println(\" * this work for additional information regarding copyright ownership.\");\n-        out.println(\" * The ASF licenses this file to You under the Apache License, Version 2.0\");\n-        out.println(\" * (the \\\"License\\\"); you may not use this file except in compliance with\");\n-        out.println(\" * the License.  You may obtain a copy of the License at\");\n-        out.println(\" *\");\n-        out.println(\" *      http://www.apache.org/licenses/LICENSE-2.0\");\n-        out.println(\" *\");\n-        out.println(\" * Unless required by applicable law or agreed to in writing, software\");\n-        out.println(\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\");\n-        out.println(\" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\");\n-        out.println(\" * See the License for the specific language governing permissions and\");\n-        out.println(\" * limitations under the License.\");\n-        out.println(\" */\");\n-    }\n-\n-    protected void generateFile(PrintWriter out) throws Exception {\n-        generateLicence(out);\n-\n-        out.println(\"#ifndef \" + className + \"_hpp_\");\n-        out.println(\"#define \" + className + \"_hpp_\");\n-        out.println(\"\");\n-        out.println(\"#include <string>\");\n-        out.println(\"\");\n-        out.println(\"#include \\\"command/IDataStructure.hpp\\\"\");\n-        out.println(\"\");\n-        out.println(\"/* we could cut this down  - for now include all possible headers */\");\n-        out.println(\"#include \\\"command/BrokerId.hpp\\\"\");\n-        out.println(\"#include \\\"command/ConnectionId.hpp\\\"\");\n-        out.println(\"#include \\\"command/ConsumerId.hpp\\\"\");\n-        out.println(\"#include \\\"command/ProducerId.hpp\\\"\");\n-        out.println(\"#include \\\"command/SessionId.hpp\\\"\");\n-        out.println(\"\");\n-        out.println(\"#include \\\"io/BinaryReader.hpp\\\"\");\n-        out.println(\"#include \\\"io/BinaryWriter.hpp\\\"\");\n-        out.println(\"\");\n-        out.println(\"#include \\\"command/\" + baseClass + \".hpp\\\"\");\n-        out.println(\"#include \\\"util/ifr/p.hpp\\\"\");\n-        out.println(\"\");\n-        out.println(\"#include \\\"protocol/ProtocolFormat.hpp\\\"\");\n-        out.println(\"\");\n-        out.println(\"namespace apache\");\n-        out.println(\"{\");\n-        out.println(\"  namespace activemq\");\n-        out.println(\"  {\");\n-        out.println(\"    namespace client\");\n-        out.println(\"    {\");\n-        out.println(\"      namespace marshal\");\n-        out.println(\"      {\");\n-        out.println(\"        using namespace ifr ;\");\n-        out.println(\"        using namespace apache::activemq::client::command;\");\n-        out.println(\"        using namespace apache::activemq::client::io;\");\n-        out.println(\"        using namespace apache::activemq::client::protocol;\");\n-        out.println(\"\");\n-        out.println(\"/*\");\n-        out.println(\" *\");\n-        out.println(\" */\");\n-        out.println(\"class \" + className + \" : public \" + baseClass + \"\");\n-        out.println(\"{\");\n-        out.println(\"public:\");\n-        out.println(\"    \" + className + \"() ;\");\n-        out.println(\"    virtual ~\" + className + \"() ;\");\n-        out.println(\"\");\n-        out.println(\"    virtual IDataStructure* createCommand() ;\");\n-        out.println(\"    virtual char getDataStructureType() ;\");\n-        out.println(\"    \");\n-        out.println(\"    virtual void unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) ;\");\n-        out.println(\"    virtual int marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) ;\");\n-        out.println(\"    virtual void marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) ;\");\n-        out.println(\"} ;\");\n-        out.println(\"\");\n-        out.println(\"/* namespace */\");\n-        out.println(\"     }\");\n-        out.println(\"    }\");\n-        out.println(\"  }\");\n-        out.println(\"}\");\n-        out.println(\"#endif /*\" + className + \"_hpp_*/\");\n-    }\n-\n-    public void generateFactory(PrintWriter out) {\n-        generateLicence(out);\n-        out.println(\"\");\n-        out.println(\"// Marshalling code for Open Wire Format \");\n-        out.println(\"//\");\n-        out.println(\"//\");\n-        out.println(\"// NOTE!: This file is autogenerated - do not modify!\");\n-        out.println(\"//        if you need to make a change, please see the Groovy scripts in the\");\n-        out.println(\"//        activemq-openwire module\");\n-        out.println(\"//\");\n-        out.println(\"\");\n-        out.println(\"#ifndef MarshallerFactory_hpp_\");\n-        out.println(\"#define MarshallerFactory_hpp_\");\n-        out.println(\"\");\n-        out.println(\"\");\n-        out.println(\"namespace apache\");\n-        out.println(\"{\");\n-        out.println(\"  namespace activemq\");\n-        out.println(\"  {\");\n-        out.println(\"    namespace client\");\n-        out.println(\"    {\");\n-        out.println(\"      namespace marshal\");\n-        out.println(\"      {\");\n-        out.println(\"        using namespace ifr ;\");\n-        out.println(\"        using namespace std ;\");\n-        out.println(\"        using namespace apache::activemq::client;\");\n-        out.println(\"        using namespace apache::activemq::client::command;\");\n-        out.println(\"        using namespace apache::activemq::client::io;\");\n-        out.println(\"\");\n-        out.println(\"/*\");\n-        out.println(\" * \");\n-        out.println(\" */\");\n-        out.println(\"class MarshallerFactory\");\n-        out.println(\"{\");\n-        out.println(\"public:\");\n-        out.println(\"    MarshallerFactory() ;\");\n-        out.println(\"    virtual ~MarshallerFactory() ;\");\n-        out.println(\"\");\n-        out.println(\"    virtual void configure(ProtocolFormat& format) ;\");\n-        out.println(\"} ;\");\n-        out.println(\"\");\n-        out.println(\"/* namespace */\");\n-        out.println(\"      }\");\n-        out.println(\"    }\");\n-        out.println(\"  }\");\n-        out.println(\"}\");\n-        out.println(\"\");\n-        out.println(\"#endif /*MarshallerFactory_hpp_*/\");\n-        out.println(\"\");\n-    }\n-\n-    public String getTargetDir() {\n-        return targetDir;\n-    }\n-\n-    public void setTargetDir(String targetDir) {\n-        this.targetDir = targetDir;\n-    }\n-}"
  },
  {
    "sha": "63eb987fb0a5ccb40666308951c4a5adad14f7a6",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaGeneratorTask.java",
    "status": "removed",
    "additions": 0,
    "deletions": 135,
    "changes": 135,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaGeneratorTask.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaGeneratorTask.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaGeneratorTask.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,135 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-\n-import org.apache.tools.ant.BuildException;\n-import org.apache.tools.ant.Project;\n-import org.apache.tools.ant.Task;\n-import org.codehaus.jam.JamService;\n-import org.codehaus.jam.JamServiceFactory;\n-import org.codehaus.jam.JamServiceParams;\n-\n-/**\n- *\n- */\n-public class JavaGeneratorTask extends Task {\n-\n-    int version = 2;\n-    File basedir = new File(\".\");\n-    File outputdir = null;\n-    boolean generateMarshalers = true;\n-    boolean generateTests = true;\n-\n-    public static void main(String[] args) {\n-\n-        Project project = new Project();\n-        project.init();\n-        JavaGeneratorTask generator = new JavaGeneratorTask();\n-        generator.setProject(project);\n-\n-        if (args.length > 0) {\n-            generator.version = Integer.parseInt(args[0]);\n-        }\n-\n-        if (args.length > 1) {\n-            generator.basedir = new File(args[1]);\n-        }\n-\n-        generator.execute();\n-    }\n-\n-    @Override\n-    public void execute() throws BuildException {\n-        try {\n-\n-            String sourceDir = basedir + \"/src/main/java\";\n-\n-            System.out.println(\"Parsing source files in: \" + sourceDir);\n-\n-            JamServiceFactory jamServiceFactory = JamServiceFactory.getInstance();\n-            JamServiceParams params = jamServiceFactory.createServiceParams();\n-            File[] dirs = new File[] {\n-                new File(sourceDir)\n-            };\n-            params.includeSourcePattern(dirs, \"**/*.java\");\n-            JamService jam = jamServiceFactory.createService(params);\n-\n-            File outputBase = outputdir != null ? outputdir : basedir;\n-\n-            if (generateMarshalers) {\n-                JavaMarshallingGenerator script = new JavaMarshallingGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(outputBase + \"/src/main/java\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-\n-            if (generateTests) {\n-                JavaTestsGenerator script = new JavaTestsGenerator();\n-                script.setJam(jam);\n-                script.setTargetDir(outputBase + \"/src/test/java\");\n-                script.setOpenwireVersion(version);\n-                script.run();\n-            }\n-\n-        } catch (Exception e) {\n-            throw new BuildException(e);\n-        }\n-    }\n-\n-    public int getVersion() {\n-        return version;\n-    }\n-\n-    public void setVersion(int version) {\n-        this.version = version;\n-    }\n-\n-    public File getBasedir() {\n-        return basedir;\n-    }\n-\n-    public void setBasedir(File basedir) {\n-        this.basedir = basedir;\n-    }\n-\n-    public File getOutputdir() {\n-        return outputdir;\n-    }\n-\n-    public void setOutputdir(File outputdir) {\n-        this.outputdir = outputdir;\n-    }\n-\n-    public boolean isGenerateMarshalers() {\n-        return generateMarshalers;\n-    }\n-\n-    public void setGenerateMarshalers(boolean generateMarshalers) {\n-        this.generateMarshalers = generateMarshalers;\n-    }\n-\n-    public boolean isGenerateTests() {\n-        return generateTests;\n-    }\n-\n-    public void setGenerateTests(boolean generateTests) {\n-        this.generateTests = generateTests;\n-    }\n-}"
  },
  {
    "sha": "6ffaf61d550f23b38a0fcc7ce8f78aea4665f3eb",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaMarshallingGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 729,
    "changes": 729,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaMarshallingGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaMarshallingGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaMarshallingGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,729 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.codehaus.jam.JAnnotation;\n-import org.codehaus.jam.JAnnotationValue;\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JPackage;\n-import org.codehaus.jam.JProperty;\n-\n-/**\n- * \n- */\n-public class JavaMarshallingGenerator extends MultiSourceGenerator {\n-\n-    protected List<JClass> concreteClasses = new ArrayList<JClass>();\n-    protected File factoryFile;\n-    protected String factoryFileName = \"MarshallerFactory\";\n-    protected String indent = \"    \";\n-    protected String targetDir = \"src/main/java\";\n-\n-    public Object run() {\n-        if (destDir == null) {\n-            destDir = new File(targetDir + \"/org/apache/activemq/openwire/v\" + getOpenwireVersion());\n-        }\n-        Object answer = super.run();\n-        processFactory();\n-        return answer;\n-    }\n-\n-    protected void generateFile(PrintWriter out) throws Exception {\n-\n-        generateLicence(out);\n-        out.println(\"\");\n-        out.println(\"package org.apache.activemq.openwire.v\" + getOpenwireVersion() + \";\");\n-        out.println(\"\");\n-        out.println(\"import java.io.DataInput;\");\n-        out.println(\"import java.io.DataOutput;\");\n-        out.println(\"import java.io.IOException;\");\n-        out.println(\"\");\n-        out.println(\"import org.apache.activemq.openwire.*;\");\n-        out.println(\"import org.apache.activemq.command.*;\");\n-        out.println(\"\");\n-        out.println(\"\");\n-        for (int i = 0; i < getJclass().getImportedPackages().length; i++) {\n-            JPackage pkg = getJclass().getImportedPackages()[i];\n-            for (int j = 0; j < pkg.getClasses().length; j++) {\n-                JClass clazz = pkg.getClasses()[j];\n-                out.println(\"import \" + clazz.getQualifiedName() + \";\");\n-            }\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"/**\");\n-        out.println(\" * Marshalling code for Open Wire Format for \" + getClassName() + \"\");\n-        out.println(\" *\");\n-        out.println(\" *\");\n-        out.println(\" * NOTE!: This file is auto generated - do not modify!\");\n-        out.println(\" *        if you need to make a change, please see the modify the groovy scripts in the\");\n-        out.println(\" *        under src/gram/script and then use maven openwire:generate to regenerate \");\n-        out.println(\" *        this file.\");\n-        out.println(\" *\");\n-        out.println(\" * \");\n-        out.println(\" */\");\n-        out.println(\"public \" + getAbstractClassText() + \"class \" + getClassName() + \" extends \" + getBaseClass() + \" {\");\n-        out.println(\"\");\n-\n-        if (!isAbstractClass()) {\n-\n-            out.println(\"    /**\");\n-            out.println(\"     * Return the type of Data Structure we marshal\");\n-            out.println(\"     * @return short representation of the type data structure\");\n-            out.println(\"     */\");\n-            out.println(\"    public byte getDataStructureType() {\");\n-            out.println(\"        return \" + getJclass().getSimpleName() + \".DATA_STRUCTURE_TYPE;\");\n-            out.println(\"    }\");\n-            out.println(\"    \");\n-            out.println(\"    /**\");\n-            out.println(\"     * @return a new object instance\");\n-            out.println(\"     */\");\n-            out.println(\"    public DataStructure createObject() {\");\n-            out.println(\"        return new \" + getJclass().getSimpleName() + \"();\");\n-            out.println(\"    }\");\n-            out.println(\"\");\n-        }\n-\n-        out.println(\"    /**\");\n-        out.println(\"     * Un-marshal an object instance from the data input stream\");\n-        out.println(\"     *\");\n-        out.println(\"     * @param o the object to un-marshal\");\n-        out.println(\"     * @param dataIn the data input stream to build the object from\");\n-        out.println(\"     * @throws IOException\");\n-        out.println(\"     */\");\n-        out.println(\"    public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {\");\n-        out.println(\"        super.tightUnmarshal(wireFormat, o, dataIn, bs);\");\n-\n-        if (!getProperties().isEmpty()) {\n-            out.println(\"\");\n-            out.println(\"        \" + getJclass().getSimpleName() + \" info = (\" + getJclass().getSimpleName() + \")o;\");\n-        }\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.beforeUnmarshall(wireFormat);\");\n-            out.println(\"        \");\n-        }\n-\n-        generateTightUnmarshalBody(out);\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.afterUnmarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    }\");\n-        out.println(\"\");\n-        out.println(\"\");\n-        out.println(\"    /**\");\n-        out.println(\"     * Write the booleans that this object uses to a BooleanStream\");\n-        out.println(\"     */\");\n-        out.println(\"    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {\");\n-\n-        if (!getProperties().isEmpty()) {\n-            out.println(\"\");\n-            out.println(\"        \" + getJclass().getSimpleName() + \" info = (\" + getJclass().getSimpleName() + \")o;\");\n-        }\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.beforeMarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"        int rc = super.tightMarshal1(wireFormat, o, bs);\");\n-        int baseSize = generateTightMarshal1Body(out);\n-\n-        out.println(\"\");\n-        out.println(\"        return rc + \" + baseSize + \";\");\n-        out.println(\"    }\");\n-        out.println(\"\");\n-        out.println(\"    /**\");\n-        out.println(\"     * Write a object instance to data output stream\");\n-        out.println(\"     *\");\n-        out.println(\"     * @param o the instance to be marshaled\");\n-        out.println(\"     * @param dataOut the output stream\");\n-        out.println(\"     * @throws IOException thrown if an error occurs\");\n-        out.println(\"     */\");\n-        out.println(\"    public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {\");\n-        out.println(\"        super.tightMarshal2(wireFormat, o, dataOut, bs);\");\n-        if (!getProperties().isEmpty()) {\n-            out.println(\"\");\n-            out.println(\"        \" + getJclass().getSimpleName() + \" info = (\" + getJclass().getSimpleName() + \")o;\");\n-        }\n-\n-        generateTightMarshal2Body(out);\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.afterMarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    }\");\n-        out.println(\"\");\n-        out.println(\"    /**\");\n-        out.println(\"     * Un-marshal an object instance from the data input stream\");\n-        out.println(\"     *\");\n-        out.println(\"     * @param o the object to un-marshal\");\n-        out.println(\"     * @param dataIn the data input stream to build the object from\");\n-        out.println(\"     * @throws IOException\");\n-        out.println(\"     */\");\n-        out.println(\"    public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {\");\n-        out.println(\"        super.looseUnmarshal(wireFormat, o, dataIn);\");\n-\n-        if (!getProperties().isEmpty()) {\n-            out.println(\"\");\n-            out.println(\"        \" + getJclass().getSimpleName() + \" info = (\" + getJclass().getSimpleName() + \")o;\");\n-        }\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.beforeUnmarshall(wireFormat);\");\n-            out.println(\"        \");\n-        }\n-\n-        generateLooseUnmarshalBody(out);\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.afterUnmarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    }\");\n-        out.println(\"\");\n-        out.println(\"\");\n-        out.println(\"    /**\");\n-        out.println(\"     * Write the booleans that this object uses to a BooleanStream\");\n-        out.println(\"     */\");\n-        out.println(\"    public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {\");\n-\n-        if (!getProperties().isEmpty()) {\n-            out.println(\"\");\n-            out.println(\"        \" + getJclass().getSimpleName() + \" info = (\" + getJclass().getSimpleName() + \")o;\");\n-        }\n-\n-        if (isMarshallerAware()) {\n-            out.println(\"\");\n-            out.println(\"        info.beforeMarshall(wireFormat);\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"        super.looseMarshal(wireFormat, o, dataOut);\");\n-\n-        generateLooseMarshalBody(out);\n-\n-        out.println(\"\");\n-        out.println(\"    }\");\n-        out.println(\"}\");\n-    }\n-\n-    private void generateLicence(PrintWriter out) {\n-        out.println(\"/**\");\n-        out.println(\" *\");\n-        out.println(\" * Licensed to the Apache Software Foundation (ASF) under one or more\");\n-        out.println(\" * contributor license agreements.  See the NOTICE file distributed with\");\n-        out.println(\" * this work for additional information regarding copyright ownership.\");\n-        out.println(\" * The ASF licenses this file to You under the Apache License, Version 2.0\");\n-        out.println(\" * (the \\\"License\\\"); you may not use this file except in compliance with\");\n-        out.println(\" * the License.  You may obtain a copy of the License at\");\n-        out.println(\" *\");\n-        out.println(\" * http://www.apache.org/licenses/LICENSE-2.0\");\n-        out.println(\" *\");\n-        out.println(\" * Unless required by applicable law or agreed to in writing, software\");\n-        out.println(\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\");\n-        out.println(\" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\");\n-        out.println(\" * See the License for the specific language governing permissions and\");\n-        out.println(\" * limitations under the License.\");\n-        out.println(\" */\");\n-    }\n-\n-    protected void processFactory() {\n-        if (factoryFile == null) {\n-            factoryFile = new File(destDir, factoryFileName + filePostFix);\n-        }\n-        PrintWriter out = null;\n-        try {\n-            out = new PrintWriter(new FileWriter(factoryFile));\n-            generateFactory(out);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-            if (out != null) {\n-                out.close();\n-            }\n-        }\n-    }\n-\n-    protected void generateFactory(PrintWriter out) {\n-        generateLicence(out);\n-        out.println(\"\");\n-        out.println(\"package org.apache.activemq.openwire.v\" + getOpenwireVersion() + \";\");\n-        out.println(\"\");\n-        out.println(\"import org.apache.activemq.openwire.DataStreamMarshaller;\");\n-        out.println(\"import org.apache.activemq.openwire.OpenWireFormat;\");\n-        out.println(\"\");\n-        out.println(\"/**\");\n-        out.println(\" * MarshallerFactory for Open Wire Format.\");\n-        out.println(\" *\");\n-        out.println(\" *\");\n-        out.println(\" * NOTE!: This file is auto generated - do not modify!\");\n-        out.println(\" *        if you need to make a change, please see the modify the groovy scripts in the\");\n-        out.println(\" *        under src/gram/script and then use maven openwire:generate to regenerate \");\n-        out.println(\" *        this file.\");\n-        out.println(\" *\");\n-        out.println(\" * \");\n-        out.println(\" */\");\n-        out.println(\"public class MarshallerFactory {\");\n-        out.println(\"\");\n-        out.println(\"    /**\");\n-        out.println(\"     * Creates a Map of command type -> Marshallers\");\n-        out.println(\"     */\");\n-        out.println(\"    static final private DataStreamMarshaller marshaller[] = new DataStreamMarshaller[256];\");\n-        out.println(\"    static {\");\n-        out.println(\"\");\n-\n-        List<JClass> list = new ArrayList<JClass>(getConcreteClasses());\n-        Collections.sort(list, new Comparator<JClass>() {\n-            public int compare(JClass c1, JClass c2) {\n-                return c1.getSimpleName().compareTo(c2.getSimpleName());\n-            }\n-        });\n-\n-        for (Iterator<JClass> iter = list.iterator(); iter.hasNext();) {\n-            JClass jclass = iter.next();\n-            out.println(\"        add(new \" + jclass.getSimpleName() + \"Marshaller());\");\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"    }\");\n-        out.println(\"\");\n-        out.println(\"    static private void add(DataStreamMarshaller dsm) {\");\n-        out.println(\"        marshaller[dsm.getDataStructureType()] = dsm;\");\n-        out.println(\"    }\");\n-        out.println(\"    \");\n-        out.println(\"    static public DataStreamMarshaller[] createMarshallerMap(OpenWireFormat wireFormat) {\");\n-        out.println(\"        return marshaller;\");\n-        out.println(\"    }\");\n-        out.println(\"}\");\n-    }\n-\n-    protected void processClass(JClass jclass) {\n-        super.processClass(jclass);\n-\n-        if (!jclass.isAbstract()) {\n-            concreteClasses.add(jclass);\n-        }\n-    }\n-\n-    protected String getClassName(JClass jclass) {\n-        return super.getClassName(jclass) + \"Marshaller\";\n-    }\n-\n-    protected String getBaseClassName(JClass jclass) {\n-        String answer = \"BaseDataStreamMarshaller\";\n-        JClass superclass = jclass.getSuperclass();\n-        if (superclass != null) {\n-            String superName = superclass.getSimpleName();\n-            if (!superName.equals(\"Object\") && !superName.equals(\"JNDIBaseStorable\") && !superName.equals(\"DataStructureSupport\")) {\n-                answer = superName + \"Marshaller\";\n-            }\n-        }\n-        return answer;\n-    }\n-\n-    protected void initialiseManuallyMaintainedClasses() {\n-    }\n-\n-    protected void generateTightUnmarshalBody(PrintWriter out) {\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String propertyTypeName = propertyType.getSimpleName();\n-\n-            if (propertyType.isArrayType() && !propertyTypeName.equals(\"byte[]\")) {\n-                generateTightUnmarshalBodyForArrayProperty(out, property, size);\n-            } else {\n-                generateTightUnmarshalBodyForProperty(out, property, size);\n-            }\n-        }\n-    }\n-\n-    protected void generateTightUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-        String setter = property.getSetter().getSimpleName();\n-        String type = property.getType().getSimpleName();\n-\n-        if (type.equals(\"boolean\")) {\n-            out.println(\"        info.\" + setter + \"(bs.readBoolean());\");\n-        } else if (type.equals(\"byte\")) {\n-            out.println(\"        info.\" + setter + \"(dataIn.readByte());\");\n-        } else if (type.equals(\"char\")) {\n-            out.println(\"        info.\" + setter + \"(dataIn.readChar());\");\n-        } else if (type.equals(\"short\")) {\n-            out.println(\"        info.\" + setter + \"(dataIn.readShort());\");\n-        } else if (type.equals(\"int\")) {\n-            out.println(\"        info.\" + setter + \"(dataIn.readInt());\");\n-        } else if (type.equals(\"long\")) {\n-            out.println(\"        info.\" + setter + \"(tightUnmarshalLong(wireFormat, dataIn, bs));\");\n-        } else if (type.equals(\"String\")) {\n-            out.println(\"        info.\" + setter + \"(tightUnmarshalString(dataIn, bs));\");\n-        } else if (type.equals(\"byte[]\")) {\n-            if (size != null) {\n-                out.println(\"        info.\" + setter + \"(tightUnmarshalConstByteArray(dataIn, bs, \" + size.asInt() + \"));\");\n-            } else {\n-                out.println(\"        info.\" + setter + \"(tightUnmarshalByteArray(dataIn, bs));\");\n-            }\n-        } else if (type.equals(\"ByteSequence\")) {\n-            out.println(\"        info.\" + setter + \"(tightUnmarshalByteSequence(dataIn, bs));\");\n-        } else if (isThrowable(property.getType())) {\n-            out.println(\"        info.\" + setter + \"((\" + property.getType().getQualifiedName() + \") tightUnmarsalThrowable(wireFormat, dataIn, bs));\");\n-        } else if (isCachedProperty(property)) {\n-            out.println(\"        info.\" + setter + \"((\" + property.getType().getQualifiedName() + \") tightUnmarsalCachedObject(wireFormat, dataIn, bs));\");\n-        } else {\n-            out.println(\"        info.\" + setter + \"((\" + property.getType().getQualifiedName() + \") tightUnmarsalNestedObject(wireFormat, dataIn, bs));\");\n-        }\n-    }\n-\n-    protected void generateTightUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-        JClass propertyType = property.getType();\n-        String arrayType = propertyType.getArrayComponentType().getQualifiedName();\n-        String setter = property.getSetter().getSimpleName();\n-        out.println();\n-        if (size != null) {\n-            out.println(\"        {\");\n-            out.println(\"            \" + arrayType + \" value[] = new \" + arrayType + \"[\" + size.asInt() + \"];\");\n-            out.println(\"            \" + \"for( int i=0; i < \" + size.asInt() + \"; i++ ) {\");\n-            out.println(\"                value[i] = (\" + arrayType + \") tightUnmarsalNestedObject(wireFormat,dataIn, bs);\");\n-            out.println(\"            }\");\n-            out.println(\"            info.\" + setter + \"(value);\");\n-            out.println(\"        }\");\n-        } else {\n-            out.println(\"        if (bs.readBoolean()) {\");\n-            out.println(\"            short size = dataIn.readShort();\");\n-            out.println(\"            \" + arrayType + \" value[] = new \" + arrayType + \"[size];\");\n-            out.println(\"            for( int i=0; i < size; i++ ) {\");\n-            out.println(\"                value[i] = (\" + arrayType + \") tightUnmarsalNestedObject(wireFormat,dataIn, bs);\");\n-            out.println(\"            }\");\n-            out.println(\"            info.\" + setter + \"(value);\");\n-            out.println(\"        }\");\n-            out.println(\"        else {\");\n-            out.println(\"            info.\" + setter + \"(null);\");\n-            out.println(\"        }\");\n-        }\n-    }\n-\n-    protected int generateTightMarshal1Body(PrintWriter out) {\n-        List properties = getProperties();\n-        int baseSize = 0;\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String type = propertyType.getSimpleName();\n-            String getter = \"info.\" + property.getGetter().getSimpleName() + \"()\";\n-\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"        bs.writeBoolean(\" + getter + \");\");\n-            } else if (type.equals(\"byte\")) {\n-                baseSize += 1;\n-            } else if (type.equals(\"char\")) {\n-                baseSize += 2;\n-            } else if (type.equals(\"short\")) {\n-                baseSize += 2;\n-            } else if (type.equals(\"int\")) {\n-                baseSize += 4;\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"        rc+=tightMarshalLong1(wireFormat, \" + getter + \", bs);\");\n-            } else if (type.equals(\"String\")) {\n-                out.println(\"        rc += tightMarshalString1(\" + getter + \", bs);\");\n-            } else if (type.equals(\"byte[]\")) {\n-                if (size == null) {\n-                    out.println(\"        rc += tightMarshalByteArray1(\" + getter + \", bs);\");\n-                } else {\n-                    out.println(\"        rc += tightMarshalConstByteArray1(\" + getter + \", bs, \" + size.asInt() + \");\");\n-                }\n-            } else if (type.equals(\"ByteSequence\")) {\n-                out.println(\"        rc += tightMarshalByteSequence1(\" + getter + \", bs);\");\n-            } else if (propertyType.isArrayType()) {\n-                if (size != null) {\n-                    out.println(\"        rc += tightMarshalObjectArrayConstSize1(wireFormat, \" + getter + \", bs, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        rc += tightMarshalObjectArray1(wireFormat, \" + getter + \", bs);\");\n-                }\n-            } else if (isThrowable(propertyType)) {\n-                out.println(\"        rc += tightMarshalThrowable1(wireFormat, \" + getter + \", bs);\");\n-            } else {\n-                if (isCachedProperty(property)) {\n-                    out.println(\"        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)\" + getter + \", bs);\");\n-                } else {\n-                    out.println(\"        rc += tightMarshalNestedObject1(wireFormat, (DataStructure)\" + getter + \", bs);\");\n-                }\n-            }\n-        }\n-        return baseSize;\n-    }\n-\n-    protected void generateTightMarshal2Body(PrintWriter out) {\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String type = propertyType.getSimpleName();\n-            String getter = \"info.\" + property.getGetter().getSimpleName() + \"()\";\n-\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"        bs.readBoolean();\");\n-            } else if (type.equals(\"byte\")) {\n-                out.println(\"        dataOut.writeByte(\" + getter + \");\");\n-            } else if (type.equals(\"char\")) {\n-                out.println(\"        dataOut.writeChar(\" + getter + \");\");\n-            } else if (type.equals(\"short\")) {\n-                out.println(\"        dataOut.writeShort(\" + getter + \");\");\n-            } else if (type.equals(\"int\")) {\n-                out.println(\"        dataOut.writeInt(\" + getter + \");\");\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"        tightMarshalLong2(wireFormat, \" + getter + \", dataOut, bs);\");\n-            } else if (type.equals(\"String\")) {\n-                out.println(\"        tightMarshalString2(\" + getter + \", dataOut, bs);\");\n-            } else if (type.equals(\"byte[]\")) {\n-                if (size != null) {\n-                    out.println(\"        tightMarshalConstByteArray2(\" + getter + \", dataOut, bs, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        tightMarshalByteArray2(\" + getter + \", dataOut, bs);\");\n-                }\n-            } else if (type.equals(\"ByteSequence\")) {\n-                out.println(\"        tightMarshalByteSequence2(\" + getter + \", dataOut, bs);\");\n-            } else if (propertyType.isArrayType()) {\n-                if (size != null) {\n-                    out.println(\"        tightMarshalObjectArrayConstSize2(wireFormat, \" + getter + \", dataOut, bs, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        tightMarshalObjectArray2(wireFormat, \" + getter + \", dataOut, bs);\");\n-                }\n-            } else if (isThrowable(propertyType)) {\n-                out.println(\"        tightMarshalThrowable2(wireFormat, \" + getter + \", dataOut, bs);\");\n-            } else {\n-                if (isCachedProperty(property)) {\n-                    out.println(\"        tightMarshalCachedObject2(wireFormat, (DataStructure)\" + getter + \", dataOut, bs);\");\n-                } else {\n-                    out.println(\"        tightMarshalNestedObject2(wireFormat, (DataStructure)\" + getter + \", dataOut, bs);\");\n-                }\n-            }\n-        }\n-    }\n-\n-    protected void generateLooseMarshalBody(PrintWriter out) {\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String type = propertyType.getSimpleName();\n-            String getter = \"info.\" + property.getGetter().getSimpleName() + \"()\";\n-\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"        dataOut.writeBoolean(\" + getter + \");\");\n-            } else if (type.equals(\"byte\")) {\n-                out.println(\"        dataOut.writeByte(\" + getter + \");\");\n-            } else if (type.equals(\"char\")) {\n-                out.println(\"        dataOut.writeChar(\" + getter + \");\");\n-            } else if (type.equals(\"short\")) {\n-                out.println(\"        dataOut.writeShort(\" + getter + \");\");\n-            } else if (type.equals(\"int\")) {\n-                out.println(\"        dataOut.writeInt(\" + getter + \");\");\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"        looseMarshalLong(wireFormat, \" + getter + \", dataOut);\");\n-            } else if (type.equals(\"String\")) {\n-                out.println(\"        looseMarshalString(\" + getter + \", dataOut);\");\n-            } else if (type.equals(\"byte[]\")) {\n-                if (size != null) {\n-                    out.println(\"        looseMarshalConstByteArray(wireFormat, \" + getter + \", dataOut, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        looseMarshalByteArray(wireFormat, \" + getter + \", dataOut);\");\n-                }\n-            } else if (type.equals(\"ByteSequence\")) {\n-                out.println(\"        looseMarshalByteSequence(wireFormat, \" + getter + \", dataOut);\");\n-            } else if (propertyType.isArrayType()) {\n-                if (size != null) {\n-                    out.println(\"        looseMarshalObjectArrayConstSize(wireFormat, \" + getter + \", dataOut, \" + size.asInt() + \");\");\n-                } else {\n-                    out.println(\"        looseMarshalObjectArray(wireFormat, \" + getter + \", dataOut);\");\n-                }\n-            } else if (isThrowable(propertyType)) {\n-                out.println(\"        looseMarshalThrowable(wireFormat, \" + getter + \", dataOut);\");\n-            } else {\n-                if (isCachedProperty(property)) {\n-                    out.println(\"        looseMarshalCachedObject(wireFormat, (DataStructure)\" + getter + \", dataOut);\");\n-                } else {\n-                    out.println(\"        looseMarshalNestedObject(wireFormat, (DataStructure)\" + getter + \", dataOut);\");\n-                }\n-            }\n-        }\n-    }\n-\n-    protected void generateLooseUnmarshalBody(PrintWriter out) {\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            JAnnotationValue size = annotation.getValue(\"size\");\n-            JClass propertyType = property.getType();\n-            String propertyTypeName = propertyType.getSimpleName();\n-\n-            if (propertyType.isArrayType() && !propertyTypeName.equals(\"byte[]\")) {\n-                generateLooseUnmarshalBodyForArrayProperty(out, property, size);\n-            } else {\n-                generateLooseUnmarshalBodyForProperty(out, property, size);\n-            }\n-        }\n-    }\n-\n-    protected void generateLooseUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-        String setter = property.getSetter().getSimpleName();\n-        String type = property.getType().getSimpleName();\n-\n-        if (type.equals(\"boolean\")) {\n-            out.println(\"        info.\" + setter + \"(dataIn.readBoolean());\");\n-        } else if (type.equals(\"byte\")) {\n-            out.println(\"        info.\" + setter + \"(dataIn.readByte());\");\n-        } else if (type.equals(\"char\")) {\n-            out.println(\"        info.\" + setter + \"(dataIn.readChar());\");\n-        } else if (type.equals(\"short\")) {\n-            out.println(\"        info.\" + setter + \"(dataIn.readShort());\");\n-        } else if (type.equals(\"int\")) {\n-            out.println(\"        info.\" + setter + \"(dataIn.readInt());\");\n-        } else if (type.equals(\"long\")) {\n-            out.println(\"        info.\" + setter + \"(looseUnmarshalLong(wireFormat, dataIn));\");\n-        } else if (type.equals(\"String\")) {\n-            out.println(\"        info.\" + setter + \"(looseUnmarshalString(dataIn));\");\n-        } else if (type.equals(\"byte[]\")) {\n-            if (size != null) {\n-                out.println(\"        info.\" + setter + \"(looseUnmarshalConstByteArray(dataIn, \" + size.asInt() + \"));\");\n-            } else {\n-                out.println(\"        info.\" + setter + \"(looseUnmarshalByteArray(dataIn));\");\n-            }\n-        } else if (type.equals(\"ByteSequence\")) {\n-            out.println(\"        info.\" + setter + \"(looseUnmarshalByteSequence(dataIn));\");\n-        } else if (isThrowable(property.getType())) {\n-            out.println(\"        info.\" + setter + \"((\" + property.getType().getQualifiedName() + \") looseUnmarsalThrowable(wireFormat, dataIn));\");\n-        } else if (isCachedProperty(property)) {\n-            out.println(\"        info.\" + setter + \"((\" + property.getType().getQualifiedName() + \") looseUnmarsalCachedObject(wireFormat, dataIn));\");\n-        } else {\n-            out.println(\"        info.\" + setter + \"((\" + property.getType().getQualifiedName() + \") looseUnmarsalNestedObject(wireFormat, dataIn));\");\n-        }\n-    }\n-\n-    protected void generateLooseUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) {\n-        JClass propertyType = property.getType();\n-        String arrayType = propertyType.getArrayComponentType().getQualifiedName();\n-        String setter = property.getSetter().getSimpleName();\n-        out.println();\n-        if (size != null) {\n-            out.println(\"        {\");\n-            out.println(\"            \" + arrayType + \" value[] = new \" + arrayType + \"[\" + size.asInt() + \"];\");\n-            out.println(\"            \" + \"for( int i=0; i < \" + size.asInt() + \"; i++ ) {\");\n-            out.println(\"                value[i] = (\" + arrayType + \") looseUnmarsalNestedObject(wireFormat,dataIn);\");\n-            out.println(\"            }\");\n-            out.println(\"            info.\" + setter + \"(value);\");\n-            out.println(\"        }\");\n-        } else {\n-            out.println(\"        if (dataIn.readBoolean()) {\");\n-            out.println(\"            short size = dataIn.readShort();\");\n-            out.println(\"            \" + arrayType + \" value[] = new \" + arrayType + \"[size];\");\n-            out.println(\"            for( int i=0; i < size; i++ ) {\");\n-            out.println(\"                value[i] = (\" + arrayType + \") looseUnmarsalNestedObject(wireFormat,dataIn);\");\n-            out.println(\"            }\");\n-            out.println(\"            info.\" + setter + \"(value);\");\n-            out.println(\"        }\");\n-            out.println(\"        else {\");\n-            out.println(\"            info.\" + setter + \"(null);\");\n-            out.println(\"        }\");\n-        }\n-    }\n-\n-    /**\n-     * Returns whether or not the given annotation has a mandatory flag on it or\n-     * not\n-     */\n-    protected String getMandatoryFlag(JAnnotation annotation) {\n-        JAnnotationValue value = annotation.getValue(\"mandatory\");\n-        if (value != null) {\n-            String text = value.asString();\n-            if (text != null && text.equalsIgnoreCase(\"true\")) {\n-                return \"true\";\n-            }\n-        }\n-        return \"false\";\n-    }\n-\n-    public List<JClass> getConcreteClasses() {\n-        return concreteClasses;\n-    }\n-\n-    public void setConcreteClasses(List<JClass> concreteClasses) {\n-        this.concreteClasses = concreteClasses;\n-    }\n-\n-    public File getFactoryFile() {\n-        return factoryFile;\n-    }\n-\n-    public void setFactoryFile(File factoryFile) {\n-        this.factoryFile = factoryFile;\n-    }\n-\n-    public String getFactoryFileName() {\n-        return factoryFileName;\n-    }\n-\n-    public void setFactoryFileName(String factoryFileName) {\n-        this.factoryFileName = factoryFileName;\n-    }\n-\n-    public String getIndent() {\n-        return indent;\n-    }\n-\n-    public void setIndent(String indent) {\n-        this.indent = indent;\n-    }\n-\n-    public String getTargetDir() {\n-        return targetDir;\n-    }\n-\n-    public void setTargetDir(String sourceDir) {\n-        this.targetDir = sourceDir;\n-    }\n-}"
  },
  {
    "sha": "bbbb9636cc2ec1f00c4976d42d34f487400e7d7b",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaTestsGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 210,
    "changes": 210,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaTestsGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaTestsGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/JavaTestsGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,210 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.PrintWriter;\n-import java.util.Iterator;\n-import java.util.List;\n-\n-import org.codehaus.jam.JAnnotation;\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JPackage;\n-import org.codehaus.jam.JProperty;\n-\n-/**\n- * \n- */\n-public class JavaTestsGenerator extends MultiSourceGenerator {\n-\n-    protected String targetDir = \"src/test/java\";\n-\n-    public Object run() {\n-        if (destDir == null) {\n-            destDir = new File(targetDir + \"/org/apache/activemq/openwire/v\" + getOpenwireVersion());\n-        }\n-        return super.run();\n-    }\n-\n-    protected String getClassName(JClass jclass) {\n-        if (isAbstract(jclass)) {\n-            return super.getClassName(jclass) + \"TestSupport\";\n-        } else {\n-            return super.getClassName(jclass) + \"Test\";\n-        }\n-    }\n-\n-    protected String getBaseClassName(JClass jclass) {\n-        String answer = \"DataFileGeneratorTestSupport\";\n-        if (superclass != null) {\n-            String name = superclass.getSimpleName();\n-            if (name != null && !name.equals(\"JNDIBaseStorable\") && !name.equals(\"DataStructureSupport\") && !name.equals(\"Object\")) {\n-                answer = name + \"Test\";\n-                if (isAbstract(getJclass().getSuperclass())) {\n-                    answer += \"Support\";\n-                }\n-            }\n-        }\n-        return answer;\n-    }\n-\n-    private void generateLicence(PrintWriter out) {\n-        out.println(\"/**\");\n-        out.println(\" *\");\n-        out.println(\" * Licensed to the Apache Software Foundation (ASF) under one or more\");\n-        out.println(\" * contributor license agreements.  See the NOTICE file distributed with\");\n-        out.println(\" * this work for additional information regarding copyright ownership.\");\n-        out.println(\" * The ASF licenses this file to You under the Apache License, Version 2.0\");\n-        out.println(\" * (the \\\"License\\\"); you may not use this file except in compliance with\");\n-        out.println(\" * the License.  You may obtain a copy of the License at\");\n-        out.println(\" *\");\n-        out.println(\" * http://www.apache.org/licenses/LICENSE-2.0\");\n-        out.println(\" *\");\n-        out.println(\" * Unless required by applicable law or agreed to in writing, software\");\n-        out.println(\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\");\n-        out.println(\" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\");\n-        out.println(\" * See the License for the specific language governing permissions and\");\n-        out.println(\" * limitations under the License.\");\n-        out.println(\" */\");\n-    }\n-\n-    protected void generateFile(PrintWriter out) {\n-\n-        generateLicence(out);\n-\n-        out.println(\"package org.apache.activemq.openwire.v\" + openwireVersion + \";\");\n-        out.println(\"\");\n-        out.println(\"import java.io.DataInputStream;\");\n-        out.println(\"import java.io.DataOutputStream;\");\n-        out.println(\"import java.io.IOException;\");\n-        out.println(\"\");\n-        out.println(\"import org.apache.activemq.openwire.*;\");\n-        out.println(\"import org.apache.activemq.command.*;\");\n-        out.println(\"\");\n-        for (int i = 0; i < getJclass().getImportedPackages().length; i++) {\n-            JPackage pkg = getJclass().getImportedPackages()[i];\n-            for (int j = 0; j < pkg.getClasses().length; j++) {\n-                JClass clazz = pkg.getClasses()[j];\n-                out.println(\"import \" + clazz.getQualifiedName() + \";\");\n-            }\n-        }\n-\n-        out.println(\"\");\n-        out.println(\"/**\");\n-        out.println(\" * Test case for the OpenWire marshalling for \" + jclass.getSimpleName() + \"\");\n-        out.println(\" *\");\n-        out.println(\" *\");\n-        out.println(\" * NOTE!: This file is auto generated - do not modify!\");\n-        out.println(\" *        if you need to make a change, please see the modify the groovy scripts in the\");\n-        out.println(\" *        under src/gram/script and then use maven openwire:generate to regenerate \");\n-        out.println(\" *        this file.\");\n-        out.println(\" *\");\n-        out.println(\" * \");\n-        out.println(\" */\");\n-        out.println(\"public \" + getAbstractClassText() + \"class \" + className + \" extends \" + baseClass + \" {\");\n-        out.println(\"\");\n-        if (!isAbstractClass()) {\n-            out.println(\"\");\n-            out.println(\"    public static \" + jclass.getSimpleName() + \"Test SINGLETON = new \" + jclass.getSimpleName() + \"Test();\");\n-            out.println(\"\");\n-            out.println(\"    public Object createObject() throws Exception {\");\n-            out.println(\"        \" + jclass.getSimpleName() + \" info = new \" + jclass.getSimpleName() + \"();\");\n-            out.println(\"        populateObject(info);\");\n-            out.println(\"        return info;\");\n-            out.println(\"    }\");\n-        }\n-        out.println(\"\");\n-        out.println(\"    protected void populateObject(Object object) throws Exception {\");\n-        out.println(\"        super.populateObject(object);\");\n-        out.println(\"        \" + getJclass().getSimpleName() + \" info = (\" + getJclass().getSimpleName() + \") object;\");\n-        out.println(\"\");\n-\n-        TestDataGenerator generator = new TestDataGenerator();\n-\n-        List properties = getProperties();\n-        for (Iterator iter = properties.iterator(); iter.hasNext();) {\n-            JProperty property = (JProperty)iter.next();\n-\n-            JAnnotation annotation = property.getAnnotation(\"openwire:property\");\n-            String size = stringValue(annotation, \"size\");\n-            String testSize = stringValue(annotation, \"testSize\");\n-            String type = property.getType().getSimpleName();\n-//            boolean cached = isCachedProperty(property);\n-            String propertyName = property.getSimpleName();\n-            if (\"-1\".equals(testSize)) {\n-                continue;\n-            }\n-\n-            String setterName = property.getSetter().getSimpleName();\n-\n-            if (type.equals(\"boolean\")) {\n-                out.println(\"        info.\" + setterName + \"(\" + generator.createBool() + \");\");\n-            } else if (type.equals(\"byte\")) {\n-                out.println(\"        info.\" + setterName + \"(\" + generator.createByte() + \");\");\n-            } else if (type.equals(\"char\")) {\n-                out.println(\"        info.\" + setterName + \"(\" + generator.createChar() + \");\");\n-            } else if (type.equals(\"short\")) {\n-                out.println(\"        info.\" + setterName + \"(\" + generator.createShort() + \");\");\n-            } else if (type.equals(\"int\")) {\n-                out.println(\"        info.\" + setterName + \"(\" + generator.createInt() + \");\");\n-            } else if (type.equals(\"long\")) {\n-                out.println(\"        info.\" + setterName + \"(\" + generator.createLong() + \");\");\n-            } else if (type.equals(\"byte[]\")) {\n-                out.println(\"        info.\" + setterName + \"(\" + generator.createByteArray(propertyName) + \");\");\n-            } else if (type.equals(\"String\")) {\n-                out.println(\"        info.\" + setterName + \"(\\\"\" + generator.createString(propertyName) + \"\\\");\");\n-            } else if (type.equals(\"ByteSequence\")) {\n-                out.println(\"        {\");\n-                out.println(\"            byte data[] = \" + generator.createByteArray(propertyName) + \";\");\n-                out.println(\"            info.\" + setterName + \"(new org.apache.activemq.util.ByteSequence(data,0,data.length));\");\n-                out.println(\"}\");\n-            } else if (type.equals(\"Throwable\")) {\n-                out.println(\"        info.\" + setterName + \"(createThrowable(\\\"\" + generator.createString(propertyName) + \"\\\"));\");\n-            } else {\n-                if (property.getType().isArrayType()) {\n-                    String arrayType = property.getType().getArrayComponentType().getSimpleName();\n-                    if (size == null) {\n-                        size = \"2\";\n-                    }\n-                    if (arrayType == jclass.getSimpleName()) {\n-                        size = \"0\";\n-                    }\n-                    out.println(\"        {\");\n-                    out.println(\"            \" + arrayType + \" value[] = new \" + arrayType + \"[\" + size + \"];\");\n-                    out.println(\"            for( int i=0; i < \" + size + \"; i++ ) {\");\n-                    out.println(\"                value[i] = create\" + arrayType + \"(\\\"\" + generator.createString(propertyName) + \"\\\");\");\n-                    out.println(\"            }\");\n-                    out.println(\"            info.\" + setterName + \"(value);\");\n-                    out.println(\"        }\");\n-                } else {\n-                    out.println(\"        info.\" + setterName + \"(create\" + type + \"(\\\"\" + generator.createString(propertyName) + \"\\\"));\");\n-                }\n-            }\n-        }\n-\n-        out.println(\"    }\");\n-        out.println(\"}\");\n-    }\n-\n-    public String getTargetDir() {\n-        return targetDir;\n-    }\n-\n-    public void setTargetDir(String targetDir) {\n-        this.targetDir = targetDir;\n-    }\n-}"
  },
  {
    "sha": "050361c3ce3f181fddd51cd626fe6940eeaaafd5",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/MultiSourceGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 236,
    "changes": 236,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/MultiSourceGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/MultiSourceGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/MultiSourceGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,236 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.tools.ant.Project;\n-import org.apache.tools.ant.taskdefs.FixCRLF;\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JProperty;\n-import org.codehaus.jam.JamClassIterator;\n-\n-/**\n- * \n- */\n-public abstract class MultiSourceGenerator extends OpenWireGenerator {\n-    protected Set<String> manuallyMaintainedClasses = new HashSet<String>();\n-    protected File destDir;\n-    protected File destFile;\n-\n-    protected JClass jclass;\n-    protected JClass superclass;\n-    protected String simpleName;\n-    protected String className;\n-    protected String baseClass;\n-    protected StringBuffer buffer;\n-\n-    public MultiSourceGenerator() {\n-        initialiseManuallyMaintainedClasses();\n-    }\n-\n-    public Object run() {\n-        if (destDir == null) {\n-            throw new IllegalArgumentException(\"No destDir defined!\");\n-        }\n-        System.out.println(getClass().getName() + \" generating files in: \" + destDir);\n-        destDir.mkdirs();\n-        buffer = new StringBuffer();\n-\n-        JamClassIterator iter = getClasses();\n-        while (iter.hasNext()) {\n-            try {\n-                jclass = iter.nextClass();\n-                if (isValidClass(jclass)) {\n-                    processClass(jclass);\n-                }\n-            } catch (Exception e) {\n-                System.err.println(\"Unable to process: \" + jclass);\n-                e.printStackTrace();\n-            }\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Returns all the valid properties available on the current class\n-     */\n-    public List<JProperty> getProperties() {\n-        List<JProperty> answer = new ArrayList<JProperty>();\n-        JProperty[] properties = jclass.getDeclaredProperties();\n-        for (int i = 0; i < properties.length; i++) {\n-            JProperty property = properties[i];\n-            if (isValidProperty(property)) {\n-                answer.add(property);\n-            }\n-        }\n-        return answer;\n-    }\n-\n-    protected boolean isValidClass(JClass jclass) {\n-        if (jclass.getAnnotation(\"openwire:marshaller\") == null) {\n-            return false;\n-        }\n-        return !manuallyMaintainedClasses.contains(jclass.getSimpleName());\n-    }\n-\n-    protected void processClass(JClass jclass) {\n-        simpleName = jclass.getSimpleName();\n-        superclass = jclass.getSuperclass();\n-\n-        System.out.println(getClass().getName() + \" processing class: \" + simpleName);\n-\n-        className = getClassName(jclass);\n-\n-        destFile = new File(destDir, className + filePostFix);\n-\n-        baseClass = getBaseClassName(jclass);\n-\n-        PrintWriter out = null;\n-        try {\n-            out = new PrintWriter(new FileWriter(destFile));\n-            generateFile(out);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-            if (out != null) {\n-                out.close();\n-            }\n-        }\n-\n-        // Use the FixCRLF Ant Task to make sure the file has consistent\n-        // newlines\n-        // so that SVN does not complain on checkin.\n-        Project project = new Project();\n-        project.init();\n-        FixCRLF fixCRLF = new FixCRLF();\n-        fixCRLF.setProject(project);\n-        fixCRLF.setSrcdir(destFile.getParentFile());\n-        fixCRLF.setIncludes(destFile.getName());\n-        fixCRLF.execute();\n-    }\n-\n-    protected abstract void generateFile(PrintWriter out) throws Exception;\n-\n-    protected String getBaseClassName(JClass jclass) {\n-        String answer = \"BaseDataStructure\";\n-        if (superclass != null) {\n-            String name = superclass.getSimpleName();\n-            if (name != null && !name.equals(\"Object\")) {\n-                answer = name;\n-            }\n-        }\n-        return answer;\n-    }\n-\n-    protected String getClassName(JClass jclass) {\n-        return jclass.getSimpleName();\n-    }\n-\n-    public boolean isAbstractClass() {\n-        return jclass != null && jclass.isAbstract();\n-    }\n-\n-    public String getAbstractClassText() {\n-        return isAbstractClass() ? \"abstract \" : \"\";\n-    }\n-\n-    public boolean isMarshallerAware() {\n-        return isMarshallAware(jclass);\n-    }\n-\n-    protected void initialiseManuallyMaintainedClasses() {\n-        String[] names = {\n-            \"ActiveMQDestination\", \"ActiveMQTempDestination\", \"ActiveMQQueue\", \"ActiveMQTopic\", \"ActiveMQTempQueue\", \"ActiveMQTempTopic\", \"BaseCommand\", \"ActiveMQMessage\", \"ActiveMQTextMessage\",\n-            \"ActiveMQMapMessage\", \"ActiveMQBytesMessage\", \"ActiveMQStreamMessage\", \"ActiveMQBlobMessage\", \"DataStructureSupport\", \"WireFormatInfo\", \"ActiveMQObjectMessage\"\n-        };\n-\n-        for (int i = 0; i < names.length; i++) {\n-            manuallyMaintainedClasses.add(names[i]);\n-        }\n-    }\n-\n-    public String getBaseClass() {\n-        return baseClass;\n-    }\n-\n-    public void setBaseClass(String baseClass) {\n-        this.baseClass = baseClass;\n-    }\n-\n-    public String getClassName() {\n-        return className;\n-    }\n-\n-    public void setClassName(String className) {\n-        this.className = className;\n-    }\n-\n-    public File getDestDir() {\n-        return destDir;\n-    }\n-\n-    public void setDestDir(File destDir) {\n-        this.destDir = destDir;\n-    }\n-\n-    public File getDestFile() {\n-        return destFile;\n-    }\n-\n-    public void setDestFile(File destFile) {\n-        this.destFile = destFile;\n-    }\n-\n-    public JClass getJclass() {\n-        return jclass;\n-    }\n-\n-    public void setJclass(JClass jclass) {\n-        this.jclass = jclass;\n-    }\n-\n-    public Set<String> getManuallyMaintainedClasses() {\n-        return manuallyMaintainedClasses;\n-    }\n-\n-    public void setManuallyMaintainedClasses(Set<String> manuallyMaintainedClasses) {\n-        this.manuallyMaintainedClasses = manuallyMaintainedClasses;\n-    }\n-\n-    public String getSimpleName() {\n-        return simpleName;\n-    }\n-\n-    public void setSimpleName(String simpleName) {\n-        this.simpleName = simpleName;\n-    }\n-\n-    public JClass getSuperclass() {\n-        return superclass;\n-    }\n-\n-    public void setSuperclass(JClass superclass) {\n-        this.superclass = superclass;\n-    }\n-\n-}"
  },
  {
    "sha": "6e4db90ccad727116339feb9d5956ab13054c86d",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/OpenWireGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 163,
    "changes": 163,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/OpenWireGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/OpenWireGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/OpenWireGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,163 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import org.codehaus.jam.JAnnotation;\n-import org.codehaus.jam.JAnnotationValue;\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JField;\n-import org.codehaus.jam.JMethod;\n-import org.codehaus.jam.JProperty;\n-import org.codehaus.jam.JamClassIterator;\n-import org.codehaus.jam.JamService;\n-\n-/**\n- * \n- */\n-public abstract class OpenWireGenerator {\n-\n-    protected int openwireVersion;\n-    protected String filePostFix = \".java\";\n-    protected JamService jam;\n-\n-    public boolean isValidProperty(JProperty it) {\n-        JMethod getter = it.getGetter();\n-        return getter != null && it.getSetter() != null && !getter.isStatic() && getter.getAnnotation(\"openwire:property\") != null;\n-    }\n-\n-    public boolean isCachedProperty(JProperty it) {\n-        JMethod getter = it.getGetter();\n-        if (!isValidProperty(it)) {\n-            return false;\n-        }\n-        JAnnotationValue value = getter.getAnnotation(\"openwire:property\").getValue(\"cache\");\n-        return value != null && value.asBoolean();\n-    }\n-\n-    public boolean isAbstract(JClass j) {\n-        JField[] fields = j.getFields();\n-        for (int i = 0; i < fields.length; i++) {\n-            JField field = fields[i];\n-            if (field.isStatic() && field.isPublic() && field.isFinal() && field.getSimpleName().equals(\"DATA_STRUCTURE_TYPE\")) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    public boolean isThrowable(JClass j) {\n-        if (j.getQualifiedName().equals(Throwable.class.getName())) {\n-            return true;\n-        }\n-        return j.getSuperclass() != null && isThrowable(j.getSuperclass());\n-    }\n-\n-    public boolean isMarshallAware(JClass j) {\n-        if (filePostFix.endsWith(\"java\")) {\n-            JClass[] interfaces = j.getInterfaces();\n-            for (int i = 0; i < interfaces.length; i++) {\n-                if (interfaces[i].getQualifiedName().equals(\"org.apache.activemq.command.MarshallAware\")) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        } else {\n-            String simpleName = j.getSimpleName();\n-            return simpleName.equals(\"ActiveMQMessage\") || simpleName.equals(\"WireFormatInfo\");\n-        }\n-        /*\n-         * else { // is it a message type String simpleName = j.getSimpleName();\n-         * JClass superclass = j.getSuperclass(); return\n-         * simpleName.equals(\"ActiveMQMessage\") || (superclass != null &&\n-         * superclass.getSimpleName().equals(\"ActiveMQMessage\")); }\n-         */\n-    }\n-\n-    public JamService getJam() {\n-        return jam;\n-    }\n-\n-    public JamClassIterator getClasses() {\n-        return getJam().getClasses();\n-    }\n-\n-    public int getOpenwireVersion() {\n-        return openwireVersion;\n-    }\n-\n-    public void setOpenwireVersion(int openwireVersion) {\n-        this.openwireVersion = openwireVersion;\n-    }\n-\n-    /**\n-     * Converts the Java type to a C# type name\n-     */\n-    public String toCSharpType(JClass type) {\n-        String name = type.getSimpleName();\n-        if (name.equals(\"String\")) {\n-            return \"string\";\n-        } else if (name.equals(\"Throwable\") || name.equals(\"Exception\")) {\n-            return \"BrokerError\";\n-        } else if (name.equals(\"ByteSequence\")) {\n-            return \"byte[]\";\n-        } else if (name.equals(\"boolean\")) {\n-            return \"bool\";\n-        } else {\n-            return name;\n-        }\n-    }\n-\n-    public String getOpenWireOpCode(JClass element) {\n-        if (element != null) {\n-            JAnnotation annotation = element.getAnnotation(\"openwire:marshaller\");\n-            return stringValue(annotation, \"code\", \"0\");\n-        }\n-        return \"0\";\n-    }\n-\n-    protected String stringValue(JAnnotation annotation, String name) {\n-        return stringValue(annotation, name, null);\n-    }\n-\n-    protected String stringValue(JAnnotation annotation, String name, String defaultValue) {\n-        if (annotation != null) {\n-            JAnnotationValue value = annotation.getValue(name);\n-            if (value != null) {\n-                return value.asString();\n-            }\n-        }\n-        return defaultValue;\n-    }\n-\n-    public void setJam(JamService jam) {\n-        this.jam = jam;\n-    }\n-\n-    public String decapitalize(String text) {\n-        if (text == null) {\n-            return null;\n-        }\n-        return text.substring(0, 1).toLowerCase() + text.substring(1);\n-    }\n-\n-    public String capitalize(String text) {\n-        if (text == null) {\n-            return null;\n-        }\n-        return text.substring(0, 1).toUpperCase() + text.substring(1);\n-    }\n-}"
  },
  {
    "sha": "696b9bb7582a67f26a71dfd5eaa7a3bc3cd37670",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/SingleSourceGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 237,
    "changes": 237,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/SingleSourceGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/SingleSourceGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/SingleSourceGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,237 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.PrintWriter;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-\n-import org.apache.tools.ant.Project;\n-import org.apache.tools.ant.taskdefs.FixCRLF;\n-import org.codehaus.jam.JClass;\n-import org.codehaus.jam.JProperty;\n-import org.codehaus.jam.JamClassIterator;\n-\n-/**\n- * \n- */\n-public abstract class SingleSourceGenerator extends OpenWireGenerator {\n-\n-    protected Set<String> manuallyMaintainedClasses = new HashSet<String>();\n-    protected File destFile;\n-\n-    protected JClass jclass;\n-    protected JClass superclass;\n-    protected String simpleName;\n-    protected String className;\n-    protected String baseClass;\n-    protected List<JClass> sortedClasses;\n-\n-    public SingleSourceGenerator() {\n-        initialiseManuallyMaintainedClasses();\n-    }\n-\n-    public Object run() {\n-\n-        if (destFile == null) {\n-            throw new IllegalArgumentException(\"No destFile defined!\");\n-        }\n-        destFile.getParentFile().mkdirs();\n-\n-        PrintWriter out = null;\n-        try {\n-            out = new PrintWriter(new FileWriter(destFile));\n-\n-            ArrayList<JClass> classes = new ArrayList<JClass>();\n-            JamClassIterator iter = getClasses();\n-            while (iter.hasNext()) {\n-                jclass = iter.nextClass();\n-                if (isValidClass(jclass)) {\n-                    classes.add(jclass);\n-                }\n-            }\n-            sortedClasses = sort(classes);\n-\n-            generateSetup(out);\n-            for (Iterator<JClass> iterator = sortedClasses.iterator(); iterator.hasNext();) {\n-                jclass = iterator.next();\n-                simpleName = jclass.getSimpleName();\n-                superclass = jclass.getSuperclass();\n-                className = getClassName(jclass);\n-                baseClass = getBaseClassName(jclass);\n-\n-                System.out.println(getClass().getName() + \" processing class: \" + simpleName);\n-                generateFile(out);\n-            }\n-            generateTearDown(out);\n-\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-            if (out != null) {\n-                out.close();\n-            }\n-        }\n-\n-        // Use the FixCRLF Ant Task to make sure the file has consistent\n-        // newlines\n-        // so that SVN does not complain on checkin.\n-        Project project = new Project();\n-        project.init();\n-        FixCRLF fixCRLF = new FixCRLF();\n-        fixCRLF.setProject(project);\n-        fixCRLF.setSrcdir(destFile.getParentFile());\n-        fixCRLF.setIncludes(destFile.getName());\n-        fixCRLF.execute();\n-        return null;\n-    }\n-\n-    protected List<JClass> sort(List<JClass> classes) {\n-        return classes;\n-    }\n-\n-    protected void generateTearDown(PrintWriter out) {\n-    }\n-\n-    protected void generateSetup(PrintWriter out) {\n-    }\n-\n-    /**\n-     * Returns all the valid properties available on the current class\n-     */\n-    public List<JProperty> getProperties() {\n-        List<JProperty> answer = new ArrayList<JProperty>();\n-        JProperty[] properties = jclass.getDeclaredProperties();\n-        for (int i = 0; i < properties.length; i++) {\n-            JProperty property = properties[i];\n-            if (isValidProperty(property)) {\n-                answer.add(property);\n-            }\n-        }\n-        return answer;\n-    }\n-\n-    protected boolean isValidClass(JClass jclass) {\n-        if (jclass == null || jclass.getAnnotation(\"openwire:marshaller\") == null) {\n-            return false;\n-        }\n-        return true;\n-        // return !manuallyMaintainedClasses.contains(jclass.getSimpleName());\n-    }\n-\n-    protected abstract void generateFile(PrintWriter out) throws Exception;\n-\n-    protected String getBaseClassName(JClass jclass) {\n-        String answer = \"BaseDataStructure\";\n-        if (superclass != null) {\n-            String name = superclass.getSimpleName();\n-            if (name != null && !name.equals(\"Object\")) {\n-                answer = name;\n-            }\n-        }\n-        return answer;\n-    }\n-\n-    protected String getClassName(JClass jclass) {\n-        return jclass.getSimpleName();\n-    }\n-\n-    public boolean isAbstractClass() {\n-        return jclass != null && jclass.isAbstract();\n-    }\n-\n-    public String getAbstractClassText() {\n-        return isAbstractClass() ? \"abstract \" : \"\";\n-    }\n-\n-    public boolean isMarshallerAware() {\n-        return isMarshallAware(jclass);\n-    }\n-\n-    protected void initialiseManuallyMaintainedClasses() {\n-        String[] names = {\n-            \"ActiveMQDestination\", \"ActiveMQTempDestination\", \"ActiveMQQueue\", \"ActiveMQTopic\", \"ActiveMQTempQueue\", \"ActiveMQTempTopic\", \"BaseCommand\", \"ActiveMQMessage\", \"ActiveMQTextMessage\",\n-            \"ActiveMQMapMessage\", \"ActiveMQBytesMessage\", \"ActiveMQStreamMessage\", \"ActiveMQStreamMessage\", \"DataStructureSupport\", \"WireFormatInfo\", \"ActiveMQObjectMessage\"\n-        };\n-\n-        for (int i = 0; i < names.length; i++) {\n-            manuallyMaintainedClasses.add(names[i]);\n-        }\n-    }\n-\n-    public String getBaseClass() {\n-        return baseClass;\n-    }\n-\n-    public void setBaseClass(String baseClass) {\n-        this.baseClass = baseClass;\n-    }\n-\n-    public String getClassName() {\n-        return className;\n-    }\n-\n-    public void setClassName(String className) {\n-        this.className = className;\n-    }\n-\n-    public File getDestFile() {\n-        return destFile;\n-    }\n-\n-    public void setDestFile(File destFile) {\n-        this.destFile = destFile;\n-    }\n-\n-    public JClass getJclass() {\n-        return jclass;\n-    }\n-\n-    public void setJclass(JClass jclass) {\n-        this.jclass = jclass;\n-    }\n-\n-    public Set<String> getManuallyMaintainedClasses() {\n-        return manuallyMaintainedClasses;\n-    }\n-\n-    public void setManuallyMaintainedClasses(Set<String> manuallyMaintainedClasses) {\n-        this.manuallyMaintainedClasses = manuallyMaintainedClasses;\n-    }\n-\n-    public String getSimpleName() {\n-        return simpleName;\n-    }\n-\n-    public void setSimpleName(String simpleName) {\n-        this.simpleName = simpleName;\n-    }\n-\n-    public JClass getSuperclass() {\n-        return superclass;\n-    }\n-\n-    public void setSuperclass(JClass superclass) {\n-        this.superclass = superclass;\n-    }\n-\n-}"
  },
  {
    "sha": "835863005cdffd2761596360ff01911abfeb3de6",
    "filename": "activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/TestDataGenerator.java",
    "status": "removed",
    "additions": 0,
    "deletions": 66,
    "changes": 66,
    "blob_url": "https://github.com/apache/activemq/blob/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/TestDataGenerator.java",
    "raw_url": "https://github.com/apache/activemq/raw/ed84a10b7139fa13d0790b9a4554c21330dd6f3a/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/TestDataGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-openwire-generator/src/main/java/org/apache/activemq/openwire/tool/TestDataGenerator.java?ref=ed84a10b7139fa13d0790b9a4554c21330dd6f3a",
    "patch": "@@ -1,66 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.openwire.tool;\n-\n-/**\n- * A simple helper class to help auto-generate test data when code generating test cases\n- * \n- * \n- */\n-public class TestDataGenerator {\n-    private int stringCounter;\n-\n-    private boolean boolCounter;\n-    private byte byteCounter;\n-    private char charCounter = 'a';\n-    private short shortCounter;\n-    private int intCounter;\n-    private long longCounter;\n-    \n-    public String createByte() {\n-        return \"(byte) \" + (++byteCounter);\n-    }\n-    \n-    public String createChar() {\n-        return \"'\" + (charCounter++) + \"'\";\n-    }\n-    \n-    public String createShort() {\n-        return \"(short) \" + (++shortCounter);\n-    }\n-\n-    public int createInt() {\n-        return ++intCounter;\n-    }\n-\n-    public long createLong() {\n-        return ++longCounter;\n-    }\n-\n-    public String createString(String property) {\n-        return property + \":\" + (++stringCounter);\n-    }\n-\n-    public boolean createBool() {\n-        boolCounter = !boolCounter;\n-        return boolCounter;\n-    }\n-    \n-    public String createByteArray(String property) {\n-        return \"\\\"\" + createString(property) + \"\\\".getBytes()\";\n-    }\n-}"
  },
  {
    "sha": "3beb187735e563d12a7f99b5bc7efc997e6a2de1",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 0,
    "deletions": 6,
    "changes": 6,
    "blob_url": "https://github.com/apache/activemq/blob/b5200939e570213d48e64563030f286f15f8b721/pom.xml",
    "raw_url": "https://github.com/apache/activemq/raw/b5200939e570213d48e64563030f286f15f8b721/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/activemq/contents/pom.xml?ref=b5200939e570213d48e64563030f286f15f8b721",
    "patch": "@@ -208,7 +208,6 @@\n   </distributionManagement>\n \n   <modules>\n-    <module>activemq-openwire-generator</module>\n     <module>activemq-client</module>\n     <module>activemq-openwire-legacy</module>\n     <module>activemq-broker</module>\n@@ -440,11 +439,6 @@\n         <type>test-jar</type>\n         <scope>test</scope>\n       </dependency>\n-      <dependency>\n-        <groupId>org.apache.activemq</groupId>\n-        <artifactId>activemq-openwire-generator</artifactId>\n-        <version>${project.version}</version>\n-      </dependency>\n      <dependency>\n         <groupId>org.apache.activemq</groupId>\n         <artifactId>activemq-karaf</artifactId>"
  }
]
