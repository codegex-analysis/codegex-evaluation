[
  {
    "sha": "639c1551525c353f3fba3381c82f3e32dffa6e46",
    "filename": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -506,9 +506,8 @@ public String translateRestrictionCoderId(SdkComponents newComponents) {\n     }\n \n     @Setup\n-    public void setup() {\n-      invoker = DoFnInvokers.invokerFor(fn);\n-      invoker.invokeSetup();\n+    public void setup(PipelineOptions options) {\n+      invoker = DoFnInvokers.tryInvokeSetupFor(fn, options);\n     }\n \n     @ProcessElement\n@@ -571,9 +570,8 @@ public void tearDown() {\n     }\n \n     @Setup\n-    public void setup() {\n-      invoker = DoFnInvokers.invokerFor(splittableFn);\n-      invoker.invokeSetup();\n+    public void setup(PipelineOptions options) {\n+      invoker = DoFnInvokers.tryInvokeSetupFor(splittableFn, options);\n     }\n \n     @ProcessElement"
  },
  {
    "sha": "4949491ee9f382c99e56f4c208532c8d9c611b6e",
    "filename": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDoNaiveBounded.java",
    "status": "modified",
    "additions": 13,
    "deletions": 3,
    "changes": 16,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDoNaiveBounded.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDoNaiveBounded.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDoNaiveBounded.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -134,9 +134,20 @@ public PCollectionTuple expand(PCollection<KV<byte[], KV<InputT, RestrictionT>>>\n     }\n \n     @Setup\n-    public void setup() {\n+    public void setup(PipelineOptions options) {\n       this.invoker = DoFnInvokers.invokerFor(fn);\n-      invoker.invokeSetup();\n+      invoker.invokeSetup(\n+          new BaseArgumentProvider<InputT, OutputT>() {\n+            @Override\n+            public PipelineOptions pipelineOptions() {\n+              return options;\n+            }\n+\n+            @Override\n+            public String getErrorContext() {\n+              return \"SplittableParDoNaiveBounded/Setup\";\n+            }\n+          });\n     }\n \n     @StartBundle\n@@ -574,7 +585,6 @@ public Object watermarkEstimatorState() {\n       }\n \n       // ----------- Unsupported methods --------------------\n-\n       @Override\n       public DoFn<InputT, OutputT>.StartBundleContext startBundleContext(\n           DoFn<InputT, OutputT> doFn) {"
  },
  {
    "sha": "54561e7a34cb9b718f82a07e2701cf2ed07e1400",
    "filename": "runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableParDoViaKeyedWorkItems.java",
    "status": "modified",
    "additions": 17,
    "deletions": 2,
    "changes": 19,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableParDoViaKeyedWorkItems.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableParDoViaKeyedWorkItems.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-java/src/main/java/org/apache/beam/runners/core/SplittableParDoViaKeyedWorkItems.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -319,9 +319,9 @@ public void setProcessElementInvoker(\n     }\n \n     @Setup\n-    public void setup() throws Exception {\n+    public void setup(PipelineOptions options) throws Exception {\n       invoker = DoFnInvokers.invokerFor(fn);\n-      invoker.invokeSetup();\n+      invoker.invokeSetup(wrapOptionsAsSetup(options));\n     }\n \n     @Teardown\n@@ -548,6 +548,21 @@ public String getErrorContext() {\n               stateNamespace, wakeupTime, wakeupTime, TimeDomain.PROCESSING_TIME));\n     }\n \n+    private DoFnInvoker.ArgumentProvider<InputT, OutputT> wrapOptionsAsSetup(\n+        final PipelineOptions options) {\n+      return new BaseArgumentProvider<InputT, OutputT>() {\n+        @Override\n+        public PipelineOptions pipelineOptions() {\n+          return options;\n+        }\n+\n+        @Override\n+        public String getErrorContext() {\n+          return \"SplittableParDoViaKeyedWorkItems/Setup\";\n+        }\n+      };\n+    }\n+\n     private DoFnInvoker.ArgumentProvider<InputT, OutputT> wrapContextAsStartBundle(\n         final StartBundleContext baseContext) {\n       return new BaseArgumentProvider<InputT, OutputT>() {"
  },
  {
    "sha": "fdd46673a459d4f9c9a6c57b019b3db5a27ee1cd",
    "filename": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DoFnLifecycleManager.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/main/java/org/apache/beam/runners/direct/DoFnLifecycleManager.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/main/java/org/apache/beam/runners/direct/DoFnLifecycleManager.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/direct-java/src/main/java/org/apache/beam/runners/direct/DoFnLifecycleManager.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -21,6 +21,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.PipelineOptions;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.DoFn.Setup;\n import org.apache.beam.sdk.transforms.DoFn.Teardown;\n@@ -41,18 +42,18 @@\n  * clearing all cached {@link DoFn DoFns}.\n  */\n class DoFnLifecycleManager {\n-  public static DoFnLifecycleManager of(DoFn<?, ?> original) {\n-    return new DoFnLifecycleManager(original);\n+  public static DoFnLifecycleManager of(DoFn<?, ?> original, PipelineOptions options) {\n+    return new DoFnLifecycleManager(original, options);\n   }\n \n   private final LoadingCache<Thread, DoFn<?, ?>> outstanding;\n   private final ConcurrentMap<Thread, Exception> thrownOnTeardown;\n \n-  private DoFnLifecycleManager(DoFn<?, ?> original) {\n+  private DoFnLifecycleManager(DoFn<?, ?> original, PipelineOptions options) {\n     this.outstanding =\n         CacheBuilder.newBuilder()\n             .removalListener(new TeardownRemovedFnListener())\n-            .build(new DeserializingCacheLoader(original));\n+            .build(new DeserializingCacheLoader(original, options));\n     thrownOnTeardown = new ConcurrentHashMap<>();\n   }\n \n@@ -90,9 +91,11 @@ public void remove() throws Exception {\n \n   private static class DeserializingCacheLoader extends CacheLoader<Thread, DoFn<?, ?>> {\n     private final byte[] original;\n+    private final PipelineOptions options;\n \n-    public DeserializingCacheLoader(DoFn<?, ?> original) {\n+    public DeserializingCacheLoader(DoFn<?, ?> original, PipelineOptions options) {\n       this.original = SerializableUtils.serializeToByteArray(original);\n+      this.options = options;\n     }\n \n     @Override\n@@ -101,7 +104,7 @@ public DeserializingCacheLoader(DoFn<?, ?> original) {\n           (DoFn<?, ?>)\n               SerializableUtils.deserializeFromByteArray(\n                   original, \"DoFn Copy in thread \" + key.getName());\n-      DoFnInvokers.tryInvokeSetupFor(fn);\n+      DoFnInvokers.tryInvokeSetupFor(fn, options);\n       return fn;\n     }\n   }"
  },
  {
    "sha": "1ae6c07457d6bcb1e14f55818b2efc76b3ff4a0c",
    "filename": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/ParDoEvaluatorFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/main/java/org/apache/beam/runners/direct/ParDoEvaluatorFactory.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/main/java/org/apache/beam/runners/direct/ParDoEvaluatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/direct-java/src/main/java/org/apache/beam/runners/direct/ParDoEvaluatorFactory.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -65,7 +65,8 @@\n     return new CacheLoader<AppliedPTransform<?, ?, ?>, DoFnLifecycleManager>() {\n       @Override\n       public DoFnLifecycleManager load(AppliedPTransform<?, ?, ?> application) throws Exception {\n-        return DoFnLifecycleManager.of(ParDoTranslation.getDoFn(application));\n+        return DoFnLifecycleManager.of(\n+            ParDoTranslation.getDoFn(application), application.getPipeline().getOptions());\n       }\n     };\n   }"
  },
  {
    "sha": "e3852f640b4fc1e793e7ddd199cdb1bd703381ab",
    "filename": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/SplittableProcessElementsEvaluatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/main/java/org/apache/beam/runners/direct/SplittableProcessElementsEvaluatorFactory.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/main/java/org/apache/beam/runners/direct/SplittableProcessElementsEvaluatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/direct-java/src/main/java/org/apache/beam/runners/direct/SplittableProcessElementsEvaluatorFactory.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -80,7 +80,7 @@ public DoFnLifecycleManager load(final AppliedPTransform<?, ?, ?> application) {\n                         (ProcessElements<\n                                 InputT, OutputT, RestrictionT, PositionT, WatermarkEstimatorStateT>)\n                             application.getTransform();\n-                return DoFnLifecycleManager.of(transform.newProcessFn(transform.getFn()));\n+                return DoFnLifecycleManager.of(transform.newProcessFn(transform.getFn()), options);\n               }\n             },\n             options);"
  },
  {
    "sha": "40442521c3ebec4f294c504ed8bde39dac06a045",
    "filename": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/StatefulParDoEvaluatorFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/main/java/org/apache/beam/runners/direct/StatefulParDoEvaluatorFactory.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/main/java/org/apache/beam/runners/direct/StatefulParDoEvaluatorFactory.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/direct-java/src/main/java/org/apache/beam/runners/direct/StatefulParDoEvaluatorFactory.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -73,7 +73,7 @@ public DoFnLifecycleManager load(AppliedPTransform<?, ?, ?> appliedStatefulParDo\n                 // do not go through the portability translation layers\n                 StatefulParDo<?, ?, ?> statefulParDo =\n                     (StatefulParDo<?, ?, ?>) appliedStatefulParDo.getTransform();\n-                return DoFnLifecycleManager.of(statefulParDo.getDoFn());\n+                return DoFnLifecycleManager.of(statefulParDo.getDoFn(), options);\n               }\n             },\n             options);"
  },
  {
    "sha": "e042fc7df82e6a127e9ec98d4abf34e25cb38d5a",
    "filename": "runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagerRemovingTransformEvaluatorTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagerRemovingTransformEvaluatorTest.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagerRemovingTransformEvaluatorTest.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagerRemovingTransformEvaluatorTest.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -28,6 +28,7 @@\n \n import org.apache.beam.runners.core.StateNamespaces;\n import org.apache.beam.runners.core.TimerInternals.TimerData;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.state.TimeDomain;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n@@ -47,7 +48,7 @@\n \n   @Before\n   public void setup() {\n-    lifecycleManager = DoFnLifecycleManager.of(new TestFn());\n+    lifecycleManager = DoFnLifecycleManager.of(new TestFn(), PipelineOptionsFactory.create());\n   }\n \n   @Test"
  },
  {
    "sha": "61e62bd42e70501643dba1ba0747322f3337821a",
    "filename": "runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagerTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagerTest.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagerTest.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagerTest.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -33,6 +33,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.util.UserCodeException;\n import org.hamcrest.Matchers;\n@@ -48,7 +49,7 @@\n   @Rule public ExpectedException thrown = ExpectedException.none();\n \n   private TestFn fn = new TestFn();\n-  private DoFnLifecycleManager mgr = DoFnLifecycleManager.of(fn);\n+  private DoFnLifecycleManager mgr = DoFnLifecycleManager.of(fn, PipelineOptionsFactory.create());\n \n   @Test\n   public void setupOnGet() throws Exception {"
  },
  {
    "sha": "a47ed55430d0b034001646ebb045f23035e4cffe",
    "filename": "runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagersTest.java",
    "status": "modified",
    "additions": 10,
    "deletions": 6,
    "changes": 16,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagersTest.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagersTest.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/direct-java/src/test/java/org/apache/beam/runners/direct/DoFnLifecycleManagersTest.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -23,6 +23,8 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.util.UserCodeException;\n import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n@@ -43,9 +45,10 @@\n \n   @Test\n   public void removeAllWhenManagersThrowSuppressesAndThrows() throws Exception {\n-    DoFnLifecycleManager first = DoFnLifecycleManager.of(new ThrowsInCleanupFn(\"foo\"));\n-    DoFnLifecycleManager second = DoFnLifecycleManager.of(new ThrowsInCleanupFn(\"bar\"));\n-    DoFnLifecycleManager third = DoFnLifecycleManager.of(new ThrowsInCleanupFn(\"baz\"));\n+    PipelineOptions options = PipelineOptionsFactory.create();\n+    DoFnLifecycleManager first = DoFnLifecycleManager.of(new ThrowsInCleanupFn(\"foo\"), options);\n+    DoFnLifecycleManager second = DoFnLifecycleManager.of(new ThrowsInCleanupFn(\"bar\"), options);\n+    DoFnLifecycleManager third = DoFnLifecycleManager.of(new ThrowsInCleanupFn(\"baz\"), options);\n     first.get();\n     second.get();\n     third.get();\n@@ -89,9 +92,10 @@ public boolean matches(Object item) {\n \n   @Test\n   public void whenManagersSucceedSucceeds() throws Exception {\n-    DoFnLifecycleManager first = DoFnLifecycleManager.of(new EmptyFn());\n-    DoFnLifecycleManager second = DoFnLifecycleManager.of(new EmptyFn());\n-    DoFnLifecycleManager third = DoFnLifecycleManager.of(new EmptyFn());\n+    PipelineOptions options = PipelineOptionsFactory.create();\n+    DoFnLifecycleManager first = DoFnLifecycleManager.of(new EmptyFn(), options);\n+    DoFnLifecycleManager second = DoFnLifecycleManager.of(new EmptyFn(), options);\n+    DoFnLifecycleManager third = DoFnLifecycleManager.of(new EmptyFn(), options);\n     first.get();\n     second.get();\n     third.get();"
  },
  {
    "sha": "18cff3c186e8167e66891b278dd821225fc40cb0",
    "filename": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkDoFnFunction.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkDoFnFunction.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkDoFnFunction.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkDoFnFunction.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -141,8 +141,9 @@ public void open(Configuration parameters) {\n     // Note that the SerializablePipelineOptions already initialize FileSystems in the readObject()\n     // deserialization method. However, this is a hack, and we want to properly initialize the\n     // options where they are needed.\n-    FileSystems.setDefaultPipelineOptions(serializedOptions.get());\n-    doFnInvoker = DoFnInvokers.tryInvokeSetupFor(doFn);\n+    PipelineOptions options = serializedOptions.get();\n+    FileSystems.setDefaultPipelineOptions(options);\n+    doFnInvoker = DoFnInvokers.tryInvokeSetupFor(doFn, options);\n     metricContainer = new FlinkMetricContainer(getRuntimeContext());\n \n     // setup DoFnRunner\n@@ -159,7 +160,7 @@ public void open(Configuration parameters) {\n \n     DoFnRunner<InputT, OutputT> doFnRunner =\n         DoFnRunners.simpleRunner(\n-            serializedOptions.get(),\n+            options,\n             doFn,\n             new FlinkSideInputReader(sideInputs, runtimeContext),\n             outputManager,"
  },
  {
    "sha": "d007ce1dc6a1b690986a7c711e7f49060b9b4e70",
    "filename": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkStatefulDoFnFunction.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkStatefulDoFnFunction.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkStatefulDoFnFunction.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkStatefulDoFnFunction.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -236,9 +236,10 @@ public void open(Configuration parameters) {\n     // Note that the SerializablePipelineOptions already initialize FileSystems in the readObject()\n     // deserialization method. However, this is a hack, and we want to properly initialize the\n     // options where they are needed.\n-    FileSystems.setDefaultPipelineOptions(serializedOptions.get());\n+    PipelineOptions options = serializedOptions.get();\n+    FileSystems.setDefaultPipelineOptions(options);\n     metricContainer = new FlinkMetricContainer(getRuntimeContext());\n-    doFnInvoker = DoFnInvokers.tryInvokeSetupFor(dofn);\n+    doFnInvoker = DoFnInvokers.tryInvokeSetupFor(dofn, options);\n   }\n \n   @Override"
  },
  {
    "sha": "7f3dc0b45f64cc150913521345045d558a5727e0",
    "filename": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -465,10 +465,10 @@ public void open() throws Exception {\n     // So must wait StateInternals and TimerInternals ready.\n     // This will be called after initializeState()\n     this.doFn = getDoFn();\n-    doFnInvoker = DoFnInvokers.invokerFor(doFn);\n-    doFnInvoker.invokeSetup();\n \n     FlinkPipelineOptions options = serializedOptions.get().as(FlinkPipelineOptions.class);\n+    doFnInvoker = DoFnInvokers.tryInvokeSetupFor(doFn, options);\n+\n     StepContext stepContext = new FlinkStepContext();\n     doFnRunner =\n         DoFnRunners.simpleRunner("
  },
  {
    "sha": "b6689930a9eff1b4d0880531e191ee4b1eb7adc8",
    "filename": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/BatchStatefulParDoOverrides.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/BatchStatefulParDoOverrides.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/BatchStatefulParDoOverrides.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/BatchStatefulParDoOverrides.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -310,8 +310,8 @@ public void processElement(final ProcessContext c, final BoundedWindow window) {\n     }\n \n     @Setup\n-    public void setup() {\n-      DoFnInvokers.invokerFor(underlyingDoFn).invokeSetup();\n+    public void setup(final SetupContext c) {\n+      DoFnInvokers.tryInvokeSetupFor(underlyingDoFn, c.getPipelineOptions());\n     }\n \n     @ProcessElement"
  },
  {
    "sha": "175bcefd46b673e9b4c35b9e9ddfeea23561919e",
    "filename": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DoFnInstanceManagers.java",
    "status": "modified",
    "additions": 8,
    "deletions": 5,
    "changes": 13,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DoFnInstanceManagers.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DoFnInstanceManagers.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DoFnInstanceManagers.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -18,6 +18,7 @@\n package org.apache.beam.runners.dataflow.worker;\n \n import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.apache.beam.sdk.options.PipelineOptions;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.reflect.DoFnInvokers;\n import org.apache.beam.sdk.util.DoFnInfo;\n@@ -33,8 +34,8 @@\n    * deserializing the provided bytes. {@link DoFnInstanceManager} will call {@link DoFn.Setup} as\n    * required before returning the {@link DoFnInfo}, and {@link DoFn.Teardown} as appropriate.\n    */\n-  public static DoFnInstanceManager cloningPool(DoFnInfo<?, ?> info) {\n-    return new ConcurrentQueueInstanceManager(info);\n+  public static DoFnInstanceManager cloningPool(DoFnInfo<?, ?> info, PipelineOptions options) {\n+    return new ConcurrentQueueInstanceManager(info, options);\n   }\n \n   /**\n@@ -52,10 +53,12 @@ public static DoFnInstanceManager singleInstance(DoFnInfo<?, ?> info) {\n   private static class ConcurrentQueueInstanceManager implements DoFnInstanceManager {\n     private final byte[] serializedFnInfo;\n     private final ConcurrentLinkedQueue<DoFnInfo<?, ?>> fns;\n+    private final PipelineOptions options;\n \n-    private ConcurrentQueueInstanceManager(DoFnInfo<?, ?> info) {\n+    private ConcurrentQueueInstanceManager(DoFnInfo<?, ?> info, PipelineOptions options) {\n       this.serializedFnInfo = SerializableUtils.serializeToByteArray(info);\n-      fns = new ConcurrentLinkedQueue<>();\n+      this.fns = new ConcurrentLinkedQueue<>();\n+      this.options = options;\n     }\n \n     @Override\n@@ -80,7 +83,7 @@ private ConcurrentQueueInstanceManager(DoFnInfo<?, ?> info) {\n     private DoFnInfo<?, ?> deserializeCopy() throws Exception {\n       DoFnInfo<?, ?> fn;\n       fn = (DoFnInfo<?, ?>) SerializableUtils.deserializeFromByteArray(serializedFnInfo, null);\n-      DoFnInvokers.invokerFor(fn.getDoFn()).invokeSetup();\n+      DoFnInvokers.tryInvokeSetupFor(fn.getDoFn(), options);\n       return fn;\n     }\n "
  },
  {
    "sha": "58760ac35952ff0dbff5003db34ee5f258459401",
    "filename": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/UserParDoFnFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/UserParDoFnFactory.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/UserParDoFnFactory.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/UserParDoFnFactory.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -94,7 +94,8 @@ public ParDoFn create(\n     DoFnInstanceManager instanceManager =\n         fnCache.get(\n             operationContext.nameContext().systemName(),\n-            () -> DoFnInstanceManagers.cloningPool(doFnExtractor.getDoFnInfo(cloudUserFn)));\n+            () ->\n+                DoFnInstanceManagers.cloningPool(doFnExtractor.getDoFnInfo(cloudUserFn), options));\n \n     DoFnInfo<?, ?> doFnInfo = instanceManager.peek();\n "
  },
  {
    "sha": "7e53b1550263ea66abb90a8a197b62433a1e800e",
    "filename": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/DoFnInstanceManagersTest.java",
    "status": "modified",
    "additions": 6,
    "deletions": 3,
    "changes": 9,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/DoFnInstanceManagersTest.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/DoFnInstanceManagersTest.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/DoFnInstanceManagersTest.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -25,6 +25,8 @@\n \n import java.util.Collections;\n import org.apache.beam.runners.dataflow.util.PropertyNames;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsFactory;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.DoFnSchemaInformation;\n import org.apache.beam.sdk.util.DoFnInfo;\n@@ -58,6 +60,7 @@ public void teardown() throws Exception {\n   }\n \n   private DoFn<?, ?> initialFn = new TestFn();\n+  private PipelineOptions options = PipelineOptionsFactory.create();\n \n   @Test\n   public void testInstanceReturnsInstance() throws Exception {\n@@ -114,7 +117,7 @@ public void testCloningPoolReusesAfterComplete() throws Exception {\n             DoFnSchemaInformation.create(),\n             Collections.emptyMap());\n \n-    DoFnInstanceManager mgr = DoFnInstanceManagers.cloningPool(info);\n+    DoFnInstanceManager mgr = DoFnInstanceManagers.cloningPool(info, options);\n     DoFnInfo<?, ?> retrievedInfo = mgr.get();\n     assertThat(retrievedInfo, not(Matchers.<DoFnInfo<?, ?>>theInstance(info)));\n     assertThat(retrievedInfo.getDoFn(), not(theInstance(info.getDoFn())));\n@@ -137,7 +140,7 @@ public void testCloningPoolTearsDownAfterAbort() throws Exception {\n             DoFnSchemaInformation.create(),\n             Collections.emptyMap());\n \n-    DoFnInstanceManager mgr = DoFnInstanceManagers.cloningPool(info);\n+    DoFnInstanceManager mgr = DoFnInstanceManagers.cloningPool(info, options);\n     DoFnInfo<?, ?> retrievedInfo = mgr.get();\n \n     mgr.abort(retrievedInfo);\n@@ -162,7 +165,7 @@ public void testCloningPoolMultipleOutstanding() throws Exception {\n             DoFnSchemaInformation.create(),\n             Collections.emptyMap());\n \n-    DoFnInstanceManager mgr = DoFnInstanceManagers.cloningPool(info);\n+    DoFnInstanceManager mgr = DoFnInstanceManagers.cloningPool(info, options);\n \n     DoFnInfo<?, ?> firstInfo = mgr.get();\n     DoFnInfo<?, ?> secondInfo = mgr.get();"
  },
  {
    "sha": "d798bd71864643a14287935d3d9880b755ddf86b",
    "filename": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFnTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFnTest.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFnTest.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/SimpleParDoFnTest.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -215,7 +215,7 @@ public void testOutputReceivers() throws Exception {\n     ParDoFn userParDoFn =\n         new SimpleParDoFn<>(\n             options,\n-            DoFnInstanceManagers.cloningPool(fnInfo),\n+            DoFnInstanceManagers.cloningPool(fnInfo, options),\n             new EmptySideInputReader(),\n             MAIN_OUTPUT,\n             ImmutableMap.of(\n@@ -437,7 +437,7 @@ public void testUndeclaredSideOutputs() throws Exception {\n     ParDoFn userParDoFn =\n         new SimpleParDoFn<>(\n             options,\n-            DoFnInstanceManagers.cloningPool(fnInfo),\n+            DoFnInstanceManagers.cloningPool(fnInfo, options),\n             NullSideInputReader.empty(),\n             MAIN_OUTPUT,\n             ImmutableMap.of(MAIN_OUTPUT, 0, new TupleTag<String>(\"declared\"), 1),"
  },
  {
    "sha": "c5df5a6fa3b0f8fd290309c3b614b65057e8b32e",
    "filename": "runners/jet/src/main/java/org/apache/beam/runners/jet/processors/AbstractParDoP.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/jet/src/main/java/org/apache/beam/runners/jet/processors/AbstractParDoP.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/jet/src/main/java/org/apache/beam/runners/jet/processors/AbstractParDoP.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/jet/src/main/java/org/apache/beam/runners/jet/processors/AbstractParDoP.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -148,8 +148,7 @@ public void init(@Nonnull Outbox outbox, @Nonnull Context context) {\n     this.outbox = outbox;\n     this.metricsContainer = new JetMetricsContainer(stepId, ownerId, context);\n \n-    doFnInvoker = DoFnInvokers.invokerFor(doFn);\n-    doFnInvoker.invokeSetup();\n+    doFnInvoker = DoFnInvokers.tryInvokeSetupFor(doFn, pipelineOptions.get());\n \n     if (ordinalToSideInput.isEmpty()) {\n       sideInputReader = NullSideInputReader.of(Collections.emptyList());"
  },
  {
    "sha": "ac8212111e7e49e33880547adde67498aaab51ad",
    "filename": "runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/DoFnOp.java",
    "status": "modified",
    "additions": 3,
    "deletions": 4,
    "changes": 7,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/DoFnOp.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/DoFnOp.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/DoFnOp.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -257,12 +257,11 @@ public void open(\n         ServiceLoader.load(SamzaDoFnInvokerRegistrar.class).iterator();\n     if (!invokerReg.hasNext()) {\n       // use the default invoker here\n-      doFnInvoker = DoFnInvokers.invokerFor(doFn);\n+      doFnInvoker = DoFnInvokers.tryInvokeSetupFor(doFn, samzaPipelineOptions);\n     } else {\n-      doFnInvoker = Iterators.getOnlyElement(invokerReg).invokerFor(doFn, context);\n+      doFnInvoker =\n+          Iterators.getOnlyElement(invokerReg).invokerSetupFor(doFn, samzaPipelineOptions, context);\n     }\n-\n-    doFnInvoker.invokeSetup();\n   }\n \n   /*package private*/ FutureCollector<OutT> createFutureCollector() {"
  },
  {
    "sha": "c0536161cb79739751c558cb0814f4ee43b4923a",
    "filename": "runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SamzaDoFnInvokerRegistrar.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SamzaDoFnInvokerRegistrar.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SamzaDoFnInvokerRegistrar.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SamzaDoFnInvokerRegistrar.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -18,6 +18,7 @@\n package org.apache.beam.runners.samza.runtime;\n \n import java.util.Map;\n+import org.apache.beam.sdk.options.PipelineOptions;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.reflect.DoFnInvoker;\n import org.apache.samza.context.Context;\n@@ -26,8 +27,8 @@\n public interface SamzaDoFnInvokerRegistrar {\n \n   /** Returns the invoker for a {@link DoFn}. */\n-  <InputT, OutputT> DoFnInvoker<InputT, OutputT> invokerFor(\n-      DoFn<InputT, OutputT> fn, Context context);\n+  <InputT, OutputT> DoFnInvoker<InputT, OutputT> invokerSetupFor(\n+      DoFn<InputT, OutputT> fn, PipelineOptions options, Context context);\n \n   /** Returns the configs for a {@link DoFn}. */\n   <InputT, OutputT> Map<String, String> configFor(DoFn<InputT, OutputT> fn);"
  },
  {
    "sha": "cb926ef8620f4ec3e871ce69c5066115199bafbd",
    "filename": "runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SplittableParDoProcessKeyedElementsOp.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SplittableParDoProcessKeyedElementsOp.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SplittableParDoProcessKeyedElementsOp.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/samza/src/main/java/org/apache/beam/runners/samza/runtime/SplittableParDoProcessKeyedElementsOp.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -145,7 +145,7 @@ public void open(\n     SplittableParDoViaKeyedWorkItems.ProcessFn<\n             InputT, OutputT, RestrictionT, PositionT, WatermarkEstimatorStateT>\n         processFn = processElements.newProcessFn(processElements.getFn());\n-    DoFnInvokers.tryInvokeSetupFor(processFn);\n+    DoFnInvokers.tryInvokeSetupFor(processFn, pipelineOptions);\n     processFn.setStateInternalsFactory(stateInternalsFactory);\n     processFn.setTimerInternalsFactory(timerInternalsFactory);\n     processFn.setProcessElementInvoker("
  },
  {
    "sha": "ccddf62cf4639a8fede7a661253d39f0f21f2762",
    "filename": "runners/spark/2/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/DoFnFunction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/spark/2/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/DoFnFunction.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/spark/2/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/DoFnFunction.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/spark/2/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/DoFnFunction.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -106,7 +106,7 @@ public DoFnFunction(\n   public Iterator<Tuple2<TupleTag<?>, WindowedValue<?>>> call(Iterator<WindowedValue<InputT>> iter)\n       throws Exception {\n     if (!wasSetupCalled && iter.hasNext()) {\n-      DoFnInvokers.tryInvokeSetupFor(doFn);\n+      DoFnInvokers.tryInvokeSetupFor(doFn, serializableOptions.get());\n       wasSetupCalled = true;\n     }\n "
  },
  {
    "sha": "f19369cc4de5e643aed8f7fc0ffe7bb56cb989a4",
    "filename": "runners/spark/src/main/java/org/apache/beam/runners/spark/translation/MultiDoFnFunction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/spark/src/main/java/org/apache/beam/runners/spark/translation/MultiDoFnFunction.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/spark/src/main/java/org/apache/beam/runners/spark/translation/MultiDoFnFunction.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/spark/src/main/java/org/apache/beam/runners/spark/translation/MultiDoFnFunction.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -126,7 +126,7 @@ public MultiDoFnFunction(\n   public Iterator<Tuple2<TupleTag<?>, WindowedValue<?>>> call(Iterator<WindowedValue<InputT>> iter)\n       throws Exception {\n     if (!wasSetupCalled && iter.hasNext()) {\n-      DoFnInvokers.tryInvokeSetupFor(doFn);\n+      DoFnInvokers.tryInvokeSetupFor(doFn, options.get());\n       wasSetupCalled = true;\n     }\n "
  },
  {
    "sha": "12577450a78fc8f24f28e223d2ec8a654a0438af",
    "filename": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/translators/functions/DoFnFunction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/twister2/src/main/java/org/apache/beam/runners/twister2/translators/functions/DoFnFunction.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/runners/twister2/src/main/java/org/apache/beam/runners/twister2/translators/functions/DoFnFunction.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/twister2/src/main/java/org/apache/beam/runners/twister2/translators/functions/DoFnFunction.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -163,7 +163,7 @@ public void prepare(TSetContext context) {\n     initTransient();\n     sideInputReader = new Twister2SideInputReader(sideInputs, context);\n     outputManager.setup(mainOutput, sideOutputs);\n-    doFnInvoker = DoFnInvokers.tryInvokeSetupFor(doFn);\n+    doFnInvoker = DoFnInvokers.tryInvokeSetupFor(doFn, pipelineOptions);\n \n     doFnRunner =\n         DoFnRunners.simpleRunner("
  },
  {
    "sha": "e1acb0dba0a3fb4922cb7e1845ff43666874e0e0",
    "filename": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFnTester.java",
    "status": "modified",
    "additions": 13,
    "deletions": 1,
    "changes": 14,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFnTester.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFnTester.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFnTester.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -723,7 +723,19 @@ private void initializeState() throws Exception {\n                   SerializableUtils.serializeToByteArray(origFn), origFn.toString());\n     }\n     fnInvoker = DoFnInvokers.invokerFor(fn);\n-    fnInvoker.invokeSetup();\n+    fnInvoker.invokeSetup(new TestSetupArgumentProvider());\n+  }\n+\n+  private class TestSetupArgumentProvider extends BaseArgumentProvider<InputT, OutputT> {\n+    @Override\n+    public PipelineOptions pipelineOptions() {\n+      return options;\n+    }\n+\n+    @Override\n+    public String getErrorContext() {\n+      return \"DoFnTester/Setup\";\n+    }\n   }\n \n   private Map getOutputs() {"
  },
  {
    "sha": "8c77254e5393e4566bdbd3a85a7fb216fdf4af9e",
    "filename": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/ByteBuddyDoFnInvokerFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/ByteBuddyDoFnInvokerFactory.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/ByteBuddyDoFnInvokerFactory.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/ByteBuddyDoFnInvokerFactory.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -115,6 +115,7 @@\n })\n class ByteBuddyDoFnInvokerFactory implements DoFnInvokerFactory {\n \n+  public static final String SETUP_CONTEXT_PARAMETER_METHOD = \"setupContext\";\n   public static final String START_BUNDLE_CONTEXT_PARAMETER_METHOD = \"startBundleContext\";\n   public static final String FINISH_BUNDLE_CONTEXT_PARAMETER_METHOD = \"finishBundleContext\";\n   public static final String PROCESS_CONTEXT_PARAMETER_METHOD = \"processContext\";\n@@ -468,7 +469,7 @@ public WatermarkEstimatorStateT getState() {\n             .intercept(\n                 delegateMethodWithExtraParametersOrNoop(clazzDescription, signature.finishBundle()))\n             .method(ElementMatchers.named(\"invokeSetup\"))\n-            .intercept(delegateOrNoop(clazzDescription, signature.setup()))\n+            .intercept(delegateMethodWithExtraParametersOrNoop(clazzDescription, signature.setup()))\n             .method(ElementMatchers.named(\"invokeTeardown\"))\n             .intercept(delegateOrNoop(clazzDescription, signature.teardown()))\n             .method(ElementMatchers.named(\"invokeOnWindowExpiration\"))\n@@ -861,7 +862,6 @@ static StackManipulation getExtraContextParameter(\n \n     return parameter.match(\n         new Cases<StackManipulation>() {\n-\n           @Override\n           public StackManipulation dispatch(StartBundleContextParameter p) {\n             return new StackManipulation.Compound("
  },
  {
    "sha": "a1ab7762791f4c4d5733aafd13bd08b3676bf22b",
    "filename": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvoker.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvoker.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvoker.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvoker.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -54,7 +54,7 @@\n @Internal\n public interface DoFnInvoker<InputT, OutputT> {\n   /** Invoke the {@link DoFn.Setup} method on the bound {@link DoFn}. */\n-  void invokeSetup();\n+  void invokeSetup(ArgumentProvider<InputT, OutputT> arguments);\n \n   /** Invoke the {@link DoFn.StartBundle} method on the bound {@link DoFn}. */\n   void invokeStartBundle(ArgumentProvider<InputT, OutputT> arguments);"
  },
  {
    "sha": "bd82db3a04061167f6846e1e243230da83442de3",
    "filename": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvokers.java",
    "status": "modified",
    "additions": 25,
    "deletions": 2,
    "changes": 27,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvokers.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvokers.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnInvokers.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -18,6 +18,7 @@\n package org.apache.beam.sdk.transforms.reflect;\n \n import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.options.PipelineOptions;\n import org.apache.beam.sdk.transforms.DoFn;\n \n /** Static utilities for working with {@link DoFnInvoker}. */\n@@ -46,10 +47,10 @@ private DoFnInvokers() {}\n    * <p>On success returns an {@link DoFnInvoker} for the given {@link DoFn}.\n    */\n   public static <InputT, OutputT> DoFnInvoker<InputT, OutputT> tryInvokeSetupFor(\n-      DoFn<InputT, OutputT> fn) {\n+      DoFn<InputT, OutputT> fn, PipelineOptions options) {\n     DoFnInvoker<InputT, OutputT> doFnInvoker = invokerFor(fn);\n     try {\n-      doFnInvoker.invokeSetup();\n+      doFnInvoker.invokeSetup(new DoFnSetupArgumentProvider<>(fn, options));\n     } catch (Exception e) {\n       try {\n         doFnInvoker.invokeTeardown();\n@@ -60,4 +61,26 @@ private DoFnInvokers() {}\n     }\n     return doFnInvoker;\n   }\n+\n+  /** An {@link DoFnInvoker.ArgumentProvider} for {@link DoFn.Setup @Setup}. */\n+  private static class DoFnSetupArgumentProvider<InputT, OutputT>\n+      extends DoFnInvoker.BaseArgumentProvider<InputT, OutputT> {\n+    private final DoFn fn;\n+    private final PipelineOptions options;\n+\n+    private DoFnSetupArgumentProvider(DoFn fn, PipelineOptions options) {\n+      this.fn = fn;\n+      this.options = options;\n+    }\n+\n+    @Override\n+    public PipelineOptions pipelineOptions() {\n+      return options;\n+    }\n+\n+    @Override\n+    public String getErrorContext() {\n+      return \"SimpleDoFnRunner/Setup\";\n+    }\n+  }\n }"
  },
  {
    "sha": "6b59fa223d93deffc120a3f1a7caf9afa3e9f4ce",
    "filename": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignature.java",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://github.com/apache/beam/blob/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignature.java",
    "raw_url": "https://github.com/apache/beam/raw/7206a0a274099b783f8d10418154a97dd9b0c6cc/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignature.java",
    "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignature.java?ref=7206a0a274099b783f8d10418154a97dd9b0c6cc",
    "patch": "@@ -1248,13 +1248,17 @@ static FieldAccessDeclaration create(String id, Field field) {\n \n   /** Describes a {@link DoFn.Setup} or {@link DoFn.Teardown} method. */\n   @AutoValue\n-  public abstract static class LifecycleMethod implements DoFnMethod {\n+  public abstract static class LifecycleMethod implements MethodWithExtraParameters {\n     /** The annotated method itself. */\n     @Override\n     public abstract Method targetMethod();\n \n-    static LifecycleMethod create(Method targetMethod) {\n-      return new AutoValue_DoFnSignature_LifecycleMethod(targetMethod);\n+    /** Types of optional parameters of the annotated method, in the order they appear. */\n+    @Override\n+    public abstract List<Parameter> extraParameters();\n+\n+    static LifecycleMethod create(Method targetMethod, List<Parameter> extraParameters) {\n+      return new AutoValue_DoFnSignature_LifecycleMethod(null, targetMethod, extraParameters);\n     }\n   }\n "
  }
]
