[
  {
    "sha": "bf90e29fd0100810aa8b85068debd4f14f916b0f",
    "filename": "java/org/apache/catalina/core/LocalStrings.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/tomcat/blob/897d6275fddb2f022f6f89e46fdf0a2d3846e2fd/java/org/apache/catalina/core/LocalStrings.properties",
    "raw_url": "https://github.com/apache/tomcat/raw/897d6275fddb2f022f6f89e46fdf0a2d3846e2fd/java/org/apache/catalina/core/LocalStrings.properties",
    "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/LocalStrings.properties?ref=897d6275fddb2f022f6f89e46fdf0a2d3846e2fd",
    "patch": "@@ -231,6 +231,7 @@ standardContext.suspiciousUrl=Suspicious URL pattern: [{0}] in context [{1}], se\n standardContext.threadBindingListenerError=An error occurred in the thread binding listener configured for Context [{0}]\n standardContext.urlPattern.patternWarning=WARNING: URL pattern [{0}] must start with a ''/'' in Servlet 2.4\n standardContext.webappClassLoader.missingProperty=Unable to set the web application class loader property [{0}] to [{1}] as the property does not exist.\n+standardContext.webappClassLoader.skippingClassLoaderConfiguration=Skipping classloader configuration.\n standardContext.workCreateException=Failed to determine absolute work directory from directory [{0}] and CATALINA_HOME [{1}] for context [{2}]\n standardContext.workCreateFail=Failed to create work directory [{0}] for context [{1}]\n standardContext.workPath=Exception obtaining work path for context [{0}]"
  },
  {
    "sha": "dcc2d188857d6a9a8d223d44cd833a4382f636b0",
    "filename": "java/org/apache/catalina/core/StandardContext.java",
    "status": "modified",
    "additions": 34,
    "deletions": 16,
    "changes": 50,
    "blob_url": "https://github.com/apache/tomcat/blob/897d6275fddb2f022f6f89e46fdf0a2d3846e2fd/java/org/apache/catalina/core/StandardContext.java",
    "raw_url": "https://github.com/apache/tomcat/raw/897d6275fddb2f022f6f89e46fdf0a2d3846e2fd/java/org/apache/catalina/core/StandardContext.java",
    "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=897d6275fddb2f022f6f89e46fdf0a2d3846e2fd",
    "patch": "@@ -21,6 +21,7 @@\n import java.io.InputStream;\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.net.URLClassLoader;\n import java.nio.charset.StandardCharsets;\n import java.security.AccessController;\n import java.security.PrivilegedAction;\n@@ -4977,22 +4978,28 @@ protected synchronized void startInternal() throws LifecycleException {\n                     ((Lifecycle) loader).start();\n                 }\n \n-                // since the loader just started, the webapp classloader is now\n-                // created.\n-                setClassLoaderProperty(\"clearReferencesRmiTargets\",\n-                        getClearReferencesRmiTargets());\n-                setClassLoaderProperty(\"clearReferencesStopThreads\",\n-                        getClearReferencesStopThreads());\n-                setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n-                        getClearReferencesStopTimerThreads());\n-                setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n-                        getClearReferencesHttpClientKeepAliveThread());\n-                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n-                        getClearReferencesObjectStreamClassCaches());\n-                setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n-                        getClearReferencesObjectStreamClassCaches());\n-                setClassLoaderProperty(\"clearReferencesThreadLocals\",\n-                        getClearReferencesThreadLocals());\n+                ClassLoader cl = getLoader().getClassLoader();\n+                if (isConfigurableClassLoader(cl)) {\n+                    // since the loader just started, the webapp classloader is now\n+                    // created.\n+                    setClassLoaderProperty(\"clearReferencesRmiTargets\",\n+                            getClearReferencesRmiTargets());\n+                    setClassLoaderProperty(\"clearReferencesStopThreads\",\n+                            getClearReferencesStopThreads());\n+                    setClassLoaderProperty(\"clearReferencesStopTimerThreads\",\n+                            getClearReferencesStopTimerThreads());\n+                    setClassLoaderProperty(\"clearReferencesHttpClientKeepAliveThread\",\n+                            getClearReferencesHttpClientKeepAliveThread());\n+                    setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n+                            getClearReferencesObjectStreamClassCaches());\n+                    setClassLoaderProperty(\"clearReferencesObjectStreamClassCaches\",\n+                            getClearReferencesObjectStreamClassCaches());\n+                    setClassLoaderProperty(\"clearReferencesThreadLocals\",\n+                            getClearReferencesThreadLocals());\n+                } else {\n+                    log.debug(sm.getString(\n+                            \"standardContext.webappClassLoader.skippingClassLoaderConfiguration\"));\n+                }\n \n                 // By calling unbindThread and bindThread in a row, we setup the\n                 // current Thread CCL to be the webapp classloader\n@@ -5208,6 +5215,17 @@ public String mutate(String inputCredentials) {\n         }\n     }\n \n+    // simplified heuristic but protected so can be extended\n+    // if we have one of these two classloader in a standard tomcat it means\n+    // instance loader so clean up will happen with the jvm so let's ignore \"cant set clearX\"\n+    // messages which are warnings and bothering for no real reason\n+    //\n+    // note that children can add more classloader types but should also\n+    // check if it means missing some checks/not respecting the configuration and if so\n+    // logging a message.\n+    protected boolean isConfigurableClassLoader(final ClassLoader cl) {\n+        return cl != ClassLoader.getSystemClassLoader() && URLClassLoader.class != cl.getClass();\n+    }\n \n     private void checkConstraintsForUncoveredMethods(\n             SecurityConstraint[] constraints) {"
  },
  {
    "sha": "3cb7fe95931bd21c3fb024529958f4cf3ed0c449",
    "filename": "test/org/apache/catalina/core/TestStandardContext.java",
    "status": "modified",
    "additions": 126,
    "deletions": 11,
    "changes": 137,
    "blob_url": "https://github.com/apache/tomcat/blob/897d6275fddb2f022f6f89e46fdf0a2d3846e2fd/test/org/apache/catalina/core/TestStandardContext.java",
    "raw_url": "https://github.com/apache/tomcat/raw/897d6275fddb2f022f6f89e46fdf0a2d3846e2fd/test/org/apache/catalina/core/TestStandardContext.java",
    "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestStandardContext.java?ref=897d6275fddb2f022f6f89e46fdf0a2d3846e2fd",
    "patch": "@@ -16,12 +16,15 @@\n  */\n package org.apache.catalina.core;\n \n+import java.beans.PropertyChangeListener;\n import java.io.File;\n import java.io.IOException;\n import java.io.PrintWriter;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.*;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n \n import jakarta.servlet.FilterChain;\n import jakarta.servlet.GenericFilter;\n@@ -45,20 +48,13 @@\n import jakarta.servlet.http.HttpServletRequest;\n import jakarta.servlet.http.HttpServletResponse;\n \n+import org.apache.catalina.*;\n import org.hamcrest.CoreMatchers;\n import org.hamcrest.MatcherAssert;\n \n import org.junit.Assert;\n import org.junit.Test;\n \n-import org.apache.catalina.Context;\n-import org.apache.catalina.Host;\n-import org.apache.catalina.Lifecycle;\n-import org.apache.catalina.LifecycleEvent;\n-import org.apache.catalina.LifecycleException;\n-import org.apache.catalina.LifecycleListener;\n-import org.apache.catalina.LifecycleState;\n-import org.apache.catalina.Wrapper;\n import org.apache.catalina.authenticator.BasicAuthenticator;\n import org.apache.catalina.loader.WebappLoader;\n import org.apache.catalina.startup.SimpleHttpClient;\n@@ -72,6 +68,10 @@\n import org.apache.tomcat.util.descriptor.web.FilterMap;\n import org.apache.tomcat.util.descriptor.web.LoginConfig;\n \n+import static java.lang.ClassLoader.getSystemClassLoader;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n \n public class TestStandardContext extends TomcatBaseTest {\n \n@@ -1041,4 +1041,119 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n             resp.getWriter().print(\"OK\");\n         }\n     }\n+\n+    @Test\n+    public void testNoWarningForNotConfigurableClassLoader() throws Exception {\n+        final Logger logger = Logger.getLogger(\"org.apache.catalina.core.StandardContext\");\n+        final Level level = logger.getLevel();\n+\n+        {   // standard case\n+            final InMemoryLogBuffer buffer = new InMemoryLogBuffer();\n+            logger.addHandler(buffer);\n+\n+            final Tomcat tomcat = getTomcatInstance();\n+            tomcat.addContext(\"/test\", null);\n+            tomcat.start();\n+            tearDown();\n+            logger.removeHandler(buffer);\n+            assertTrue(buffer.debug.toString(), buffer.records.isEmpty());\n+        }\n+        setUp();\n+        {   // inaccurate classloader for tomcat\n+            final InMemoryLogBuffer buffer = new InMemoryLogBuffer();\n+            logger.addHandler(buffer);\n+            logger.setLevel(Level.FINEST);\n+            final Tomcat tomcat = getTomcatInstance();\n+            final Context ctx = new StandardContext();\n+            ctx.setName(\"test\");\n+            ctx.setPath(\"/test\");\n+            ctx.setDocBase(null);\n+            ctx.addLifecycleListener(new Tomcat.FixContextListener());\n+            ctx.setLoader(new Loader() { // maybe we should have a BaseLoader\n+                private Context context;\n+                @Override\n+                public void backgroundProcess() {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public ClassLoader getClassLoader() {\n+                    return getSystemClassLoader();\n+                }\n+\n+                @Override\n+                public Context getContext() {\n+                    return context;\n+                }\n+\n+                @Override\n+                public void setContext(final Context context) {\n+                    this.context = context;\n+                }\n+\n+                @Override\n+                public boolean getDelegate() {\n+                    return false;\n+                }\n+\n+                @Override\n+                public void setDelegate(final boolean delegate) {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public void addPropertyChangeListener(final PropertyChangeListener listener) {\n+                    // no-op\n+                }\n+\n+                @Override\n+                public boolean modified() {\n+                    return false;\n+                }\n+\n+                @Override\n+                public void removePropertyChangeListener(final PropertyChangeListener listener) {\n+                    // no-op\n+                }\n+            });\n+            tomcat.getHost().addChild(ctx);\n+            tomcat.start();\n+            logger.removeHandler(buffer);\n+            assertEquals(buffer.debug.toString(), 6, buffer.records.size());\n+            /*\n+            Starting test\n+            Configuring default Resources\n+            Processing standard container startup\n+            Skipping classloader configuration. <<--- this is the message we care in this test\n+            Configuring application event listeners\n+            Starting completed\n+             */\n+        }\n+\n+        logger.setLevel(level);\n+    }\n+\n+    private static class InMemoryLogBuffer extends Handler {\n+        private final Collection<LogRecord> records = new ArrayList<>();\n+        private final StringBuilder debug = new StringBuilder();\n+\n+        @Override\n+        public void publish(final LogRecord record) {\n+            records.add(record);\n+            debug.append(record.getLevel().getName())\n+                    .append(\": \")\n+                    .append(record.getMessage())\n+                    .append(\"\\n\");\n+        }\n+\n+        @Override\n+        public void flush() {\n+            // no-op\n+        }\n+\n+        @Override\n+        public void close() throws SecurityException {\n+            flush();\n+        }\n+    }\n }"
  }
]
