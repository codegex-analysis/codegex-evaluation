[
  {
    "sha": "bfe24508a8090555eb51e8ccb48739847da2e267",
    "filename": "ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/ddl/ShowUtils.java?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -221,7 +221,7 @@ public static String convertToString(org.apache.hadoop.hive.metastore.api.Timest\n       return \"\";\n     }\n \n-    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getSecondsSinceEpoch()));\n+    TimestampWritableV2 writableValue = new TimestampWritableV2(Timestamp.ofEpochSecond(val.getMicrosecondsSinceEpoch()));\n     return writableValue.toString();\n   }\n "
  },
  {
    "sha": "e3d5d903e2dd9ffa42ca9023b81c1318eb8a0c03",
    "filename": "ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -883,9 +883,9 @@ public static ColStatistics getColStatistics(ColumnStatisticsObj cso, String tab\n       cs.setAvgColLen(JavaDataModel.get().lengthOfTimestamp());\n       cs.setNumNulls(csd.getTimestampStats().getNumNulls());\n       Long lowVal = (csd.getTimestampStats().getLowValue() != null) ? csd.getTimestampStats().getLowValue()\n-          .getSecondsSinceEpoch() : null;\n+          .getMicrosecondsSinceEpoch() : null;\n       Long highVal = (csd.getTimestampStats().getHighValue() != null) ? csd.getTimestampStats().getHighValue()\n-          .getSecondsSinceEpoch() : null;\n+          .getMicrosecondsSinceEpoch() : null;\n       cs.setRange(lowVal, highVal);\n     } else if (colTypeLowerCase.equals(serdeConstants.TIMESTAMPLOCALTZ_TYPE_NAME)) {\n       cs.setAvgColLen(JavaDataModel.get().lengthOfTimestamp());"
  },
  {
    "sha": "0202c8b58648b2b59c17815f54070bbea2687eed",
    "filename": "standalone-metastore/metastore-common/src/gen/thrift/gen-cpp/hive_metastore_types.cpp",
    "status": "modified",
    "additions": 12,
    "deletions": 12,
    "changes": 24,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-cpp/hive_metastore_types.cpp",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-cpp/hive_metastore_types.cpp",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-common/src/gen/thrift/gen-cpp/hive_metastore_types.cpp?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -9502,8 +9502,8 @@ Timestamp::~Timestamp() noexcept {\n }\n \n \n-void Timestamp::__set_secondsSinceEpoch(const int64_t val) {\n-  this->secondsSinceEpoch = val;\n+void Timestamp::__set_microsecondsSinceEpoch(const int64_t val) {\n+  this->microsecondsSinceEpoch = val;\n }\n std::ostream& operator<<(std::ostream& out, const Timestamp& obj)\n {\n@@ -9524,7 +9524,7 @@ uint32_t Timestamp::read(::apache::thrift::protocol::TProtocol* iprot) {\n \n   using ::apache::thrift::protocol::TProtocolException;\n \n-  bool isset_secondsSinceEpoch = false;\n+  bool isset_microsecondsSinceEpoch = false;\n \n   while (true)\n   {\n@@ -9536,8 +9536,8 @@ uint32_t Timestamp::read(::apache::thrift::protocol::TProtocol* iprot) {\n     {\n       case 1:\n         if (ftype == ::apache::thrift::protocol::T_I64) {\n-          xfer += iprot->readI64(this->secondsSinceEpoch);\n-          isset_secondsSinceEpoch = true;\n+          xfer += iprot->readI64(this->microsecondsSinceEpoch);\n+          isset_microsecondsSinceEpoch = true;\n         } else {\n           xfer += iprot->skip(ftype);\n         }\n@@ -9551,7 +9551,7 @@ uint32_t Timestamp::read(::apache::thrift::protocol::TProtocol* iprot) {\n \n   xfer += iprot->readStructEnd();\n \n-  if (!isset_secondsSinceEpoch)\n+  if (!isset_microsecondsSinceEpoch)\n     throw TProtocolException(TProtocolException::INVALID_DATA);\n   return xfer;\n }\n@@ -9561,8 +9561,8 @@ uint32_t Timestamp::write(::apache::thrift::protocol::TProtocol* oprot) const {\n   ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);\n   xfer += oprot->writeStructBegin(\"Timestamp\");\n \n-  xfer += oprot->writeFieldBegin(\"secondsSinceEpoch\", ::apache::thrift::protocol::T_I64, 1);\n-  xfer += oprot->writeI64(this->secondsSinceEpoch);\n+  xfer += oprot->writeFieldBegin(\"microsecondsSinceEpoch\", ::apache::thrift::protocol::T_I64, 1);\n+  xfer += oprot->writeI64(this->microsecondsSinceEpoch);\n   xfer += oprot->writeFieldEnd();\n \n   xfer += oprot->writeFieldStop();\n@@ -9572,20 +9572,20 @@ uint32_t Timestamp::write(::apache::thrift::protocol::TProtocol* oprot) const {\n \n void swap(Timestamp &a, Timestamp &b) {\n   using ::std::swap;\n-  swap(a.secondsSinceEpoch, b.secondsSinceEpoch);\n+  swap(a.microsecondsSinceEpoch, b.microsecondsSinceEpoch);\n }\n \n Timestamp::Timestamp(const Timestamp& other311) {\n-  secondsSinceEpoch = other311.secondsSinceEpoch;\n+  microsecondsSinceEpoch = other311.microsecondsSinceEpoch;\n }\n Timestamp& Timestamp::operator=(const Timestamp& other312) {\n-  secondsSinceEpoch = other312.secondsSinceEpoch;\n+  microsecondsSinceEpoch = other312.microsecondsSinceEpoch;\n   return *this;\n }\n void Timestamp::printTo(std::ostream& out) const {\n   using ::apache::thrift::to_string;\n   out << \"Timestamp(\";\n-  out << \"secondsSinceEpoch=\" << to_string(secondsSinceEpoch);\n+  out << \"microsecondsSinceEpoch=\" << to_string(microsecondsSinceEpoch);\n   out << \")\";\n }\n "
  },
  {
    "sha": "98addb1e2e4ce7ceda2f6f155566819022046984",
    "filename": "standalone-metastore/metastore-common/src/gen/thrift/gen-cpp/hive_metastore_types.h",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-cpp/hive_metastore_types.h",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-cpp/hive_metastore_types.h",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-common/src/gen/thrift/gen-cpp/hive_metastore_types.h?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -4079,17 +4079,17 @@ class Timestamp : public virtual ::apache::thrift::TBase {\n \n   Timestamp(const Timestamp&);\n   Timestamp& operator=(const Timestamp&);\n-  Timestamp() : secondsSinceEpoch(0) {\n+  Timestamp() : microsecondsSinceEpoch(0) {\n   }\n \n   virtual ~Timestamp() noexcept;\n-  int64_t secondsSinceEpoch;\n+  int64_t microsecondsSinceEpoch;\n \n-  void __set_secondsSinceEpoch(const int64_t val);\n+  void __set_microsecondsSinceEpoch(const int64_t val);\n \n   bool operator == (const Timestamp & rhs) const\n   {\n-    if (!(secondsSinceEpoch == rhs.secondsSinceEpoch))\n+    if (!(microsecondsSinceEpoch == rhs.microsecondsSinceEpoch))\n       return false;\n     return true;\n   }"
  },
  {
    "sha": "c04b74eb4a1fe02e0e6a557703f03dbde4274aec",
    "filename": "standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Timestamp.java",
    "status": "modified",
    "additions": 53,
    "deletions": 53,
    "changes": 106,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Timestamp.java",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Timestamp.java",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Timestamp.java?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -11,16 +11,16 @@\n @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class Timestamp implements org.apache.thrift.TBase<Timestamp, Timestamp._Fields>, java.io.Serializable, Cloneable, Comparable<Timestamp> {\n   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"Timestamp\");\n \n-  private static final org.apache.thrift.protocol.TField SECONDS_SINCE_EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField(\"secondsSinceEpoch\", org.apache.thrift.protocol.TType.I64, (short)1);\n+  private static final org.apache.thrift.protocol.TField MICROSECONDS_SINCE_EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField(\"microsecondsSinceEpoch\", org.apache.thrift.protocol.TType.I64, (short)1);\n \n   private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimestampStandardSchemeFactory();\n   private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimestampTupleSchemeFactory();\n \n-  private long secondsSinceEpoch; // required\n+  private long microsecondsSinceEpoch; // required\n \n   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n   public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n-    SECONDS_SINCE_EPOCH((short)1, \"secondsSinceEpoch\");\n+    MICROSECONDS_SINCE_EPOCH((short)1, \"microsecondsSinceEpoch\");\n \n     private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n \n@@ -36,8 +36,8 @@\n     @org.apache.thrift.annotation.Nullable\n     public static _Fields findByThriftId(int fieldId) {\n       switch(fieldId) {\n-        case 1: // SECONDS_SINCE_EPOCH\n-          return SECONDS_SINCE_EPOCH;\n+        case 1: // MICROSECONDS_SINCE_EPOCH\n+          return MICROSECONDS_SINCE_EPOCH;\n         default:\n           return null;\n       }\n@@ -79,12 +79,12 @@ public short getThriftFieldId() {\n   }\n \n   // isset id assignments\n-  private static final int __SECONDSSINCEEPOCH_ISSET_ID = 0;\n+  private static final int __MICROSECONDSSINCEEPOCH_ISSET_ID = 0;\n   private byte __isset_bitfield = 0;\n   public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n   static {\n     java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n-    tmpMap.put(_Fields.SECONDS_SINCE_EPOCH, new org.apache.thrift.meta_data.FieldMetaData(\"secondsSinceEpoch\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n+    tmpMap.put(_Fields.MICROSECONDS_SINCE_EPOCH, new org.apache.thrift.meta_data.FieldMetaData(\"microsecondsSinceEpoch\", org.apache.thrift.TFieldRequirementType.REQUIRED, \n         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n     metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Timestamp.class, metaDataMap);\n@@ -94,19 +94,19 @@ public Timestamp() {\n   }\n \n   public Timestamp(\n-    long secondsSinceEpoch)\n+    long microsecondsSinceEpoch)\n   {\n     this();\n-    this.secondsSinceEpoch = secondsSinceEpoch;\n-    setSecondsSinceEpochIsSet(true);\n+    this.microsecondsSinceEpoch = microsecondsSinceEpoch;\n+    setMicrosecondsSinceEpochIsSet(true);\n   }\n \n   /**\n    * Performs a deep copy on <i>other</i>.\n    */\n   public Timestamp(Timestamp other) {\n     __isset_bitfield = other.__isset_bitfield;\n-    this.secondsSinceEpoch = other.secondsSinceEpoch;\n+    this.microsecondsSinceEpoch = other.microsecondsSinceEpoch;\n   }\n \n   public Timestamp deepCopy() {\n@@ -115,39 +115,39 @@ public Timestamp deepCopy() {\n \n   @Override\n   public void clear() {\n-    setSecondsSinceEpochIsSet(false);\n-    this.secondsSinceEpoch = 0;\n+    setMicrosecondsSinceEpochIsSet(false);\n+    this.microsecondsSinceEpoch = 0;\n   }\n \n-  public long getSecondsSinceEpoch() {\n-    return this.secondsSinceEpoch;\n+  public long getMicrosecondsSinceEpoch() {\n+    return this.microsecondsSinceEpoch;\n   }\n \n-  public void setSecondsSinceEpoch(long secondsSinceEpoch) {\n-    this.secondsSinceEpoch = secondsSinceEpoch;\n-    setSecondsSinceEpochIsSet(true);\n+  public void setMicrosecondsSinceEpoch(long microsecondsSinceEpoch) {\n+    this.microsecondsSinceEpoch = microsecondsSinceEpoch;\n+    setMicrosecondsSinceEpochIsSet(true);\n   }\n \n-  public void unsetSecondsSinceEpoch() {\n-    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SECONDSSINCEEPOCH_ISSET_ID);\n+  public void unsetMicrosecondsSinceEpoch() {\n+    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MICROSECONDSSINCEEPOCH_ISSET_ID);\n   }\n \n-  /** Returns true if field secondsSinceEpoch is set (has been assigned a value) and false otherwise */\n-  public boolean isSetSecondsSinceEpoch() {\n-    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SECONDSSINCEEPOCH_ISSET_ID);\n+  /** Returns true if field microsecondsSinceEpoch is set (has been assigned a value) and false otherwise */\n+  public boolean isSetMicrosecondsSinceEpoch() {\n+    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MICROSECONDSSINCEEPOCH_ISSET_ID);\n   }\n \n-  public void setSecondsSinceEpochIsSet(boolean value) {\n-    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SECONDSSINCEEPOCH_ISSET_ID, value);\n+  public void setMicrosecondsSinceEpochIsSet(boolean value) {\n+    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MICROSECONDSSINCEEPOCH_ISSET_ID, value);\n   }\n \n   public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {\n     switch (field) {\n-    case SECONDS_SINCE_EPOCH:\n+    case MICROSECONDS_SINCE_EPOCH:\n       if (value == null) {\n-        unsetSecondsSinceEpoch();\n+        unsetMicrosecondsSinceEpoch();\n       } else {\n-        setSecondsSinceEpoch((java.lang.Long)value);\n+        setMicrosecondsSinceEpoch((java.lang.Long)value);\n       }\n       break;\n \n@@ -157,8 +157,8 @@ public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable\n   @org.apache.thrift.annotation.Nullable\n   public java.lang.Object getFieldValue(_Fields field) {\n     switch (field) {\n-    case SECONDS_SINCE_EPOCH:\n-      return getSecondsSinceEpoch();\n+    case MICROSECONDS_SINCE_EPOCH:\n+      return getMicrosecondsSinceEpoch();\n \n     }\n     throw new java.lang.IllegalStateException();\n@@ -171,8 +171,8 @@ public boolean isSet(_Fields field) {\n     }\n \n     switch (field) {\n-    case SECONDS_SINCE_EPOCH:\n-      return isSetSecondsSinceEpoch();\n+    case MICROSECONDS_SINCE_EPOCH:\n+      return isSetMicrosecondsSinceEpoch();\n     }\n     throw new java.lang.IllegalStateException();\n   }\n@@ -192,12 +192,12 @@ public boolean equals(Timestamp that) {\n     if (this == that)\n       return true;\n \n-    boolean this_present_secondsSinceEpoch = true;\n-    boolean that_present_secondsSinceEpoch = true;\n-    if (this_present_secondsSinceEpoch || that_present_secondsSinceEpoch) {\n-      if (!(this_present_secondsSinceEpoch && that_present_secondsSinceEpoch))\n+    boolean this_present_microsecondsSinceEpoch = true;\n+    boolean that_present_microsecondsSinceEpoch = true;\n+    if (this_present_microsecondsSinceEpoch || that_present_microsecondsSinceEpoch) {\n+      if (!(this_present_microsecondsSinceEpoch && that_present_microsecondsSinceEpoch))\n         return false;\n-      if (this.secondsSinceEpoch != that.secondsSinceEpoch)\n+      if (this.microsecondsSinceEpoch != that.microsecondsSinceEpoch)\n         return false;\n     }\n \n@@ -208,7 +208,7 @@ public boolean equals(Timestamp that) {\n   public int hashCode() {\n     int hashCode = 1;\n \n-    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(secondsSinceEpoch);\n+    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(microsecondsSinceEpoch);\n \n     return hashCode;\n   }\n@@ -221,12 +221,12 @@ public int compareTo(Timestamp other) {\n \n     int lastComparison = 0;\n \n-    lastComparison = java.lang.Boolean.valueOf(isSetSecondsSinceEpoch()).compareTo(other.isSetSecondsSinceEpoch());\n+    lastComparison = java.lang.Boolean.valueOf(isSetMicrosecondsSinceEpoch()).compareTo(other.isSetMicrosecondsSinceEpoch());\n     if (lastComparison != 0) {\n       return lastComparison;\n     }\n-    if (isSetSecondsSinceEpoch()) {\n-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondsSinceEpoch, other.secondsSinceEpoch);\n+    if (isSetMicrosecondsSinceEpoch()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.microsecondsSinceEpoch, other.microsecondsSinceEpoch);\n       if (lastComparison != 0) {\n         return lastComparison;\n       }\n@@ -252,17 +252,17 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.\n     java.lang.StringBuilder sb = new java.lang.StringBuilder(\"Timestamp(\");\n     boolean first = true;\n \n-    sb.append(\"secondsSinceEpoch:\");\n-    sb.append(this.secondsSinceEpoch);\n+    sb.append(\"microsecondsSinceEpoch:\");\n+    sb.append(this.microsecondsSinceEpoch);\n     first = false;\n     sb.append(\")\");\n     return sb.toString();\n   }\n \n   public void validate() throws org.apache.thrift.TException {\n     // check for required fields\n-    if (!isSetSecondsSinceEpoch()) {\n-      throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'secondsSinceEpoch' is unset! Struct:\" + toString());\n+    if (!isSetMicrosecondsSinceEpoch()) {\n+      throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'microsecondsSinceEpoch' is unset! Struct:\" + toString());\n     }\n \n     // check for sub-struct validity\n@@ -304,10 +304,10 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, Timestamp struct) t\n           break;\n         }\n         switch (schemeField.id) {\n-          case 1: // SECONDS_SINCE_EPOCH\n+          case 1: // MICROSECONDS_SINCE_EPOCH\n             if (schemeField.type == org.apache.thrift.protocol.TType.I64) {\n-              struct.secondsSinceEpoch = iprot.readI64();\n-              struct.setSecondsSinceEpochIsSet(true);\n+              struct.microsecondsSinceEpoch = iprot.readI64();\n+              struct.setMicrosecondsSinceEpochIsSet(true);\n             } else { \n               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n             }\n@@ -325,8 +325,8 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, Timestamp struct)\n       struct.validate();\n \n       oprot.writeStructBegin(STRUCT_DESC);\n-      oprot.writeFieldBegin(SECONDS_SINCE_EPOCH_FIELD_DESC);\n-      oprot.writeI64(struct.secondsSinceEpoch);\n+      oprot.writeFieldBegin(MICROSECONDS_SINCE_EPOCH_FIELD_DESC);\n+      oprot.writeI64(struct.microsecondsSinceEpoch);\n       oprot.writeFieldEnd();\n       oprot.writeFieldStop();\n       oprot.writeStructEnd();\n@@ -345,14 +345,14 @@ public TimestampTupleScheme getScheme() {\n     @Override\n     public void write(org.apache.thrift.protocol.TProtocol prot, Timestamp struct) throws org.apache.thrift.TException {\n       org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n-      oprot.writeI64(struct.secondsSinceEpoch);\n+      oprot.writeI64(struct.microsecondsSinceEpoch);\n     }\n \n     @Override\n     public void read(org.apache.thrift.protocol.TProtocol prot, Timestamp struct) throws org.apache.thrift.TException {\n       org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;\n-      struct.secondsSinceEpoch = iprot.readI64();\n-      struct.setSecondsSinceEpochIsSet(true);\n+      struct.microsecondsSinceEpoch = iprot.readI64();\n+      struct.setMicrosecondsSinceEpochIsSet(true);\n     }\n   }\n "
  },
  {
    "sha": "25561e9b97d7dda45b36f022b3273267522f35b3",
    "filename": "standalone-metastore/metastore-common/src/gen/thrift/gen-php/metastore/Timestamp.php",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-php/metastore/Timestamp.php",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-php/metastore/Timestamp.php",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-common/src/gen/thrift/gen-php/metastore/Timestamp.php?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -22,7 +22,7 @@ class Timestamp\n \n     static public $_TSPEC = array(\n         1 => array(\n-            'var' => 'secondsSinceEpoch',\n+            'var' => 'microsecondsSinceEpoch',\n             'isRequired' => true,\n             'type' => TType::I64,\n         ),\n@@ -31,13 +31,13 @@ class Timestamp\n     /**\n      * @var int\n      */\n-    public $secondsSinceEpoch = null;\n+    public $microsecondsSinceEpoch = null;\n \n     public function __construct($vals = null)\n     {\n         if (is_array($vals)) {\n-            if (isset($vals['secondsSinceEpoch'])) {\n-                $this->secondsSinceEpoch = $vals['secondsSinceEpoch'];\n+            if (isset($vals['microsecondsSinceEpoch'])) {\n+                $this->microsecondsSinceEpoch = $vals['microsecondsSinceEpoch'];\n             }\n         }\n     }\n@@ -63,7 +63,7 @@ public function read($input)\n             switch ($fid) {\n                 case 1:\n                     if ($ftype == TType::I64) {\n-                        $xfer += $input->readI64($this->secondsSinceEpoch);\n+                        $xfer += $input->readI64($this->microsecondsSinceEpoch);\n                     } else {\n                         $xfer += $input->skip($ftype);\n                     }\n@@ -82,9 +82,9 @@ public function write($output)\n     {\n         $xfer = 0;\n         $xfer += $output->writeStructBegin('Timestamp');\n-        if ($this->secondsSinceEpoch !== null) {\n-            $xfer += $output->writeFieldBegin('secondsSinceEpoch', TType::I64, 1);\n-            $xfer += $output->writeI64($this->secondsSinceEpoch);\n+        if ($this->microsecondsSinceEpoch !== null) {\n+            $xfer += $output->writeFieldBegin('microsecondsSinceEpoch', TType::I64, 1);\n+            $xfer += $output->writeI64($this->microsecondsSinceEpoch);\n             $xfer += $output->writeFieldEnd();\n         }\n         $xfer += $output->writeFieldStop();"
  },
  {
    "sha": "c722c97716e143c4902e06b38aec68209a9b369a",
    "filename": "standalone-metastore/metastore-common/src/gen/thrift/gen-py/hive_metastore/ttypes.py",
    "status": "modified",
    "additions": 10,
    "deletions": 10,
    "changes": 20,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-py/hive_metastore/ttypes.py",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-py/hive_metastore/ttypes.py",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-common/src/gen/thrift/gen-py/hive_metastore/ttypes.py?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -5463,13 +5463,13 @@ def __ne__(self, other):\n class Timestamp(object):\n     \"\"\"\n     Attributes:\n-     - secondsSinceEpoch\n+     - microsecondsSinceEpoch\n \n     \"\"\"\n \n \n-    def __init__(self, secondsSinceEpoch=None,):\n-        self.secondsSinceEpoch = secondsSinceEpoch\n+    def __init__(self, microsecondsSinceEpoch=None,):\n+        self.microsecondsSinceEpoch = microsecondsSinceEpoch\n \n     def read(self, iprot):\n         if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:\n@@ -5482,7 +5482,7 @@ def read(self, iprot):\n                 break\n             if fid == 1:\n                 if ftype == TType.I64:\n-                    self.secondsSinceEpoch = iprot.readI64()\n+                    self.microsecondsSinceEpoch = iprot.readI64()\n                 else:\n                     iprot.skip(ftype)\n             else:\n@@ -5495,16 +5495,16 @@ def write(self, oprot):\n             oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))\n             return\n         oprot.writeStructBegin('Timestamp')\n-        if self.secondsSinceEpoch is not None:\n-            oprot.writeFieldBegin('secondsSinceEpoch', TType.I64, 1)\n-            oprot.writeI64(self.secondsSinceEpoch)\n+        if self.microsecondsSinceEpoch is not None:\n+            oprot.writeFieldBegin('microsecondsSinceEpoch', TType.I64, 1)\n+            oprot.writeI64(self.microsecondsSinceEpoch)\n             oprot.writeFieldEnd()\n         oprot.writeFieldStop()\n         oprot.writeStructEnd()\n \n     def validate(self):\n-        if self.secondsSinceEpoch is None:\n-            raise TProtocolException(message='Required field secondsSinceEpoch is unset!')\n+        if self.microsecondsSinceEpoch is None:\n+            raise TProtocolException(message='Required field microsecondsSinceEpoch is unset!')\n         return\n \n     def __repr__(self):\n@@ -27742,7 +27742,7 @@ def __ne__(self, other):\n all_structs.append(Timestamp)\n Timestamp.thrift_spec = (\n     None,  # 0\n-    (1, TType.I64, 'secondsSinceEpoch', None, None, ),  # 1\n+    (1, TType.I64, 'microsecondsSinceEpoch', None, None, ),  # 1\n )\n all_structs.append(TimestampColumnStatsData)\n TimestampColumnStatsData.thrift_spec = ("
  },
  {
    "sha": "01f8b738813265d1e22eaedf4996c04911bb48bb",
    "filename": "standalone-metastore/metastore-common/src/gen/thrift/gen-rb/hive_metastore_types.rb",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-rb/hive_metastore_types.rb",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/gen/thrift/gen-rb/hive_metastore_types.rb",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-common/src/gen/thrift/gen-rb/hive_metastore_types.rb?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -2001,16 +2001,16 @@ def validate\n \n class Timestamp\n   include ::Thrift::Struct, ::Thrift::Struct_Union\n-  SECONDSSINCEEPOCH = 1\n+  MICROSECONDSSINCEEPOCH = 1\n \n   FIELDS = {\n-    SECONDSSINCEEPOCH => {:type => ::Thrift::Types::I64, :name => 'secondsSinceEpoch'}\n+    MICROSECONDSSINCEEPOCH => {:type => ::Thrift::Types::I64, :name => 'microsecondsSinceEpoch'}\n   }\n \n   def struct_fields; FIELDS; end\n \n   def validate\n-    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field secondsSinceEpoch is unset!') unless @secondsSinceEpoch\n+    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field microsecondsSinceEpoch is unset!') unless @microsecondsSinceEpoch\n   end\n \n   ::Thrift::Struct.generate_accessors self"
  },
  {
    "sha": "963ba038e714ff4c099d84af6fb9fe1d2d52e477",
    "filename": "standalone-metastore/metastore-common/src/main/thrift/hive_metastore.thrift",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/main/thrift/hive_metastore.thrift",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-common/src/main/thrift/hive_metastore.thrift",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-common/src/main/thrift/hive_metastore.thrift?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -514,7 +514,7 @@ struct DateColumnStatsData {\n }\n \n struct Timestamp {\n-1: required i64 secondsSinceEpoch\n+1: required i64 microsecondsSinceEpoch\n }\n \n struct TimestampColumnStatsData {"
  },
  {
    "sha": "4a6bf15e8b060ff618147cc757fe1159cf12227e",
    "filename": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/StatObjectConverter.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/StatObjectConverter.java",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/StatObjectConverter.java",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/StatObjectConverter.java?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -135,8 +135,8 @@ public static MTableColumnStatistics convertToMTableColumnStatistics(MTable tabl\n            timestampStats.isSetNumNulls() ? timestampStats.getNumNulls() : null,\n            timestampStats.isSetNumDVs() ? timestampStats.getNumDVs() : null,\n            timestampStats.isSetBitVectors() ? timestampStats.getBitVectors() : null,\n-           timestampStats.isSetLowValue() ? timestampStats.getLowValue().getSecondsSinceEpoch() : null,\n-           timestampStats.isSetHighValue() ? timestampStats.getHighValue().getSecondsSinceEpoch() : null);\n+           timestampStats.isSetLowValue() ? timestampStats.getLowValue().getMicrosecondsSinceEpoch() : null,\n+           timestampStats.isSetHighValue() ? timestampStats.getHighValue().getMicrosecondsSinceEpoch() : null);\n      }\n      mColStats.setEngine(engine);\n      return mColStats;\n@@ -424,8 +424,8 @@ public static MPartitionColumnStatistics convertToMPartitionColumnStatistics(\n           timestampStats.isSetNumNulls() ? timestampStats.getNumNulls() : null,\n           timestampStats.isSetNumDVs() ? timestampStats.getNumDVs() : null,\n           timestampStats.isSetBitVectors() ? timestampStats.getBitVectors() : null,\n-          timestampStats.isSetLowValue() ? timestampStats.getLowValue().getSecondsSinceEpoch() : null,\n-          timestampStats.isSetHighValue() ? timestampStats.getHighValue().getSecondsSinceEpoch() : null);\n+          timestampStats.isSetLowValue() ? timestampStats.getLowValue().getMicrosecondsSinceEpoch() : null,\n+          timestampStats.isSetHighValue() ? timestampStats.getHighValue().getMicrosecondsSinceEpoch() : null);\n     }\n     mColStats.setEngine(engine);\n     return mColStats;"
  },
  {
    "sha": "9bd44a2d1234e817228b71b4a35ce03aba3b8f1f",
    "filename": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/columnstats/aggr/TimestampColumnStatsAggregator.java",
    "status": "modified",
    "additions": 5,
    "deletions": 5,
    "changes": 10,
    "blob_url": "https://github.com/apache/hive/blob/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/columnstats/aggr/TimestampColumnStatsAggregator.java",
    "raw_url": "https://github.com/apache/hive/raw/b5d80a38c6083b81745c9a526b08798c1d224fee/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/columnstats/aggr/TimestampColumnStatsAggregator.java",
    "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/columnstats/aggr/TimestampColumnStatsAggregator.java?ref=b5d80a38c6083b81745c9a526b08798c1d224fee",
    "patch": "@@ -240,7 +240,7 @@ public ColumnStatisticsObj aggregate(List<ColStatsObjWithSourceInfo> colStatsWit\n   }\n \n   private long diff(Timestamp d1, Timestamp d2) {\n-    return d1.getSecondsSinceEpoch() - d2.getSecondsSinceEpoch();\n+    return d1.getMicrosecondsSinceEpoch() - d2.getMicrosecondsSinceEpoch();\n   }\n \n   private Timestamp min(Timestamp d1, Timestamp d2) {\n@@ -274,8 +274,8 @@ public int compare(Map.Entry<String, TimestampColumnStatsData> o1,\n     double minInd = adjustedIndexMap.get(list.get(0).getKey());\n     double maxInd = adjustedIndexMap.get(list.get(list.size() - 1).getKey());\n     long lowValue = 0;\n-    long min = list.get(0).getValue().getLowValue().getSecondsSinceEpoch();\n-    long max = list.get(list.size() - 1).getValue().getLowValue().getSecondsSinceEpoch();\n+    long min = list.get(0).getValue().getLowValue().getMicrosecondsSinceEpoch();\n+    long max = list.get(list.size() - 1).getValue().getLowValue().getMicrosecondsSinceEpoch();\n     if (minInd == maxInd) {\n       lowValue = min;\n     } else if (minInd < maxInd) {\n@@ -297,8 +297,8 @@ public int compare(Map.Entry<String, TimestampColumnStatsData> o1,\n     minInd = adjustedIndexMap.get(list.get(0).getKey());\n     maxInd = adjustedIndexMap.get(list.get(list.size() - 1).getKey());\n     long highValue = 0;\n-    min = list.get(0).getValue().getHighValue().getSecondsSinceEpoch();\n-    max = list.get(list.size() - 1).getValue().getHighValue().getSecondsSinceEpoch();\n+    min = list.get(0).getValue().getHighValue().getMicrosecondsSinceEpoch();\n+    max = list.get(list.size() - 1).getValue().getHighValue().getMicrosecondsSinceEpoch();\n     if (minInd == maxInd) {\n       highValue = min;\n     } else if (minInd < maxInd) {"
  }
]
