[
  {
    "sha": "bfb4b7d4317f7aa22c30f50730acc2e73e52f648",
    "filename": ".github/workflows/build.yml",
    "status": "added",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/.github/workflows/build.yml",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/.github/workflows/build.yml",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/.github/workflows/build.yml?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -0,0 +1,36 @@\n+name: Build\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    types: [opened, synchronize, reopened]\n+jobs:\n+  build:\n+    name: Build\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n+      - name: Set up JDK 11\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+      - name: Cache SonarCloud packages\n+        uses: actions/cache@v1\n+        with:\n+          path: ~/.sonar/cache\n+          key: ${{ runner.os }}-sonar\n+          restore-keys: ${{ runner.os }}-sonar\n+      - name: Cache Maven packages\n+        uses: actions/cache@v1\n+        with:\n+          path: ~/.m2\n+          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n+          restore-keys: ${{ runner.os }}-m2\n+      - name: Build and analyze\n+        env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any\n+          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n+        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar\n\\ No newline at end of file"
  },
  {
    "sha": "55f61eda05a09810362a3e72d2fb59bebb3586da",
    "filename": "core/src/main/java/org/apache/cxf/annotations/Logging.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/core/src/main/java/org/apache/cxf/annotations/Logging.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/core/src/main/java/org/apache/cxf/annotations/Logging.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/annotations/Logging.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -56,6 +56,11 @@\n      */\n     boolean pretty() default false;\n \n+    /**\n+     * For XML content, turn on regex printing in the logs\n+     */\n+    boolean regex() default false;\n+\n     /**\n      * Ignore binary payloads by default\n      */"
  },
  {
    "sha": "839f9e86b7447203dac3d79d66da791ee7b70927",
    "filename": "core/src/main/java/org/apache/cxf/feature/LoggingFeature.java",
    "status": "modified",
    "additions": 44,
    "deletions": 5,
    "changes": 49,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/core/src/main/java/org/apache/cxf/feature/LoggingFeature.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/core/src/main/java/org/apache/cxf/feature/LoggingFeature.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/feature/LoggingFeature.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -67,8 +67,12 @@ public LoggingFeature(String in, String out, int lim, boolean p) {\n         super(new Portable(in, out, lim, p));\n     }\n \n-    public LoggingFeature(String in, String out, int lim, boolean p, boolean showBinary) {\n-        super(new Portable(in, out, lim, p, showBinary));\n+    public LoggingFeature(String in, String out, int lim, boolean p, boolean r) {\n+        super(new Portable(in, out, lim, p, r));\n+    }\n+\n+    public LoggingFeature(String in, String out, int lim, boolean p, boolean r, boolean showBinary) {\n+        super(new Portable(in, out, lim, p, r, showBinary));\n     }\n \n     public LoggingFeature(Logging annotation) {\n@@ -87,10 +91,18 @@ public boolean isPrettyLogging() {\n         return delegate.isPrettyLogging();\n     }\n \n+    public boolean isRegexLogging() {\n+        return delegate.isRegexLogging();\n+    }\n+\n     public void setPrettyLogging(boolean prettyLogging) {\n         delegate.setPrettyLogging(prettyLogging);\n     }\n \n+    public void setRegexLogging(boolean regexLogging) {\n+        delegate.setRegexLogging(regexLogging);\n+    }\n+   \n     public static class Portable implements AbstractPortableFeature {\n         private static final int DEFAULT_LIMIT = AbstractLoggingInterceptor.DEFAULT_LIMIT;\n         private static final LoggingInInterceptor IN = new LoggingInInterceptor(DEFAULT_LIMIT);\n@@ -100,6 +112,7 @@ public void setPrettyLogging(boolean prettyLogging) {\n         String inLocation;\n         String outLocation;\n         boolean prettyLogging;\n+        boolean regexLogging;\n         boolean showBinary;\n \n         int limit = DEFAULT_LIMIT;\n@@ -127,8 +140,16 @@ public Portable(String in, String out, int lim, boolean p) {\n             prettyLogging = p;\n         }\n \n-        public Portable(String in, String out, int lim, boolean p, boolean showBinary) {\n-            this(in, out, lim, p);\n+        public Portable(String in, String out, int lim, boolean p, boolean r) {\n+            inLocation = in;\n+            outLocation = out;\n+            limit = lim;\n+            prettyLogging = p;\n+            regexLogging = r;\n+        }\n+\n+        public Portable(String in, String out, int lim, boolean p, boolean r, boolean showBinary) {\n+            this(in, out, lim, p, r);\n             this.showBinary = showBinary;\n         }\n \n@@ -137,13 +158,14 @@ public Portable(Logging annotation) {\n             outLocation = annotation.outLocation();\n             limit = annotation.limit();\n             prettyLogging = annotation.pretty();\n+            regexLogging = annotation.regex();\n             showBinary = annotation.showBinary();\n         }\n \n         @Override\n         public void doInitializeProvider(InterceptorProvider provider, Bus bus) {\n             if (limit == DEFAULT_LIMIT && inLocation == null\n-                    && outLocation == null && !prettyLogging) {\n+                    && outLocation == null && !prettyLogging  && !regexLogging) {\n                 provider.getInInterceptors().add(IN);\n                 provider.getInFaultInterceptors().add(IN);\n                 provider.getOutInterceptors().add(OUT);\n@@ -152,10 +174,12 @@ public void doInitializeProvider(InterceptorProvider provider, Bus bus) {\n                 LoggingInInterceptor in = new LoggingInInterceptor(limit);\n                 in.setOutputLocation(inLocation);\n                 in.setPrettyLogging(prettyLogging);\n+                in.setRegexLogging(regexLogging);\n                 in.setShowBinaryContent(showBinary);\n                 LoggingOutInterceptor out = new LoggingOutInterceptor(limit);\n                 out.setOutputLocation(outLocation);\n                 out.setPrettyLogging(prettyLogging);\n+                out.setRegexLogging(regexLogging);\n                 out.setShowBinaryContent(showBinary);\n \n                 provider.getInInterceptors().add(in);\n@@ -185,12 +209,27 @@ public int getLimit() {\n         public boolean isPrettyLogging() {\n             return prettyLogging;\n         }\n+\n+        /**\n+         */\n+        public boolean isRegexLogging() {\n+            return regexLogging;\n+        }\n+\n         /**\n          * Turn pretty logging of XML content on/off\n          * @param prettyLogging\n          */\n         public void setPrettyLogging(boolean prettyLogging) {\n             this.prettyLogging = prettyLogging;\n         }\n+\n+        /**\n+         * Turn regex logging on/off\n+         * @param regexLogging\n+         */\n+        public void setRegexLogging(boolean regexLogging) {\n+            this.regexLogging = regexLogging;\n+        }\n     }\n }"
  },
  {
    "sha": "bddbc9c1b8b30faec07b403934ed8487b8207fb0",
    "filename": "core/src/main/java/org/apache/cxf/interceptor/AbstractLoggingInterceptor.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/core/src/main/java/org/apache/cxf/interceptor/AbstractLoggingInterceptor.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/core/src/main/java/org/apache/cxf/interceptor/AbstractLoggingInterceptor.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/interceptor/AbstractLoggingInterceptor.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -66,6 +66,7 @@\n     protected long threshold = -1;\n     protected PrintWriter writer;\n     protected boolean prettyLogging;\n+    protected boolean regexLogging;\n     private boolean showBinaryContent;\n     private boolean showMultipartContent = true;\n     private List<String> binaryContentMediaTypes = BINARY_CONTENT_MEDIA_TYPES;\n@@ -148,10 +149,18 @@ public void setPrettyLogging(boolean flag) {\n         prettyLogging = flag;\n     }\n \n+    public void setRegexLogging(boolean flag) {\n+        regexLogging = flag;\n+    }\n+\n     public boolean isPrettyLogging() {\n         return prettyLogging;\n     }\n \n+    public boolean isRegexLogging() {\n+        return regexLogging;\n+    }\n+\n     public void setInMemThreshold(long t) {\n         threshold = t;\n     }\n@@ -164,7 +173,7 @@ protected void writePayload(StringBuilder builder, CachedOutputStream cos,\n                                 String encoding, String contentType, boolean truncated)\n         throws Exception {\n         // Just transform the XML message when the cos has content\n-        if (!truncated && isPrettyLogging() && contentType != null && contentType.contains(\"xml\")\n+        if (!truncated && isPrettyLogging() && isRegexLogging() && contentType != null && contentType.contains(\"xml\")\n             && !contentType.toLowerCase().contains(\"multipart/related\") && cos.size() > 0) {\n \n             StringWriter swriter = new StringWriter();\n@@ -205,6 +214,7 @@ protected void writePayload(StringBuilder builder,\n                                 String contentType)\n         throws Exception {\n         if (isPrettyLogging()\n+            && isRegexLogging()\n             && contentType != null\n             && contentType.contains(\"xml\")\n             && stringWriter.getBuffer().length() > 0) {"
  },
  {
    "sha": "6c62bc0e5ad0c0bb099162327e9b80664c0eee97",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/pom.xml",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/pom.xml?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -46,6 +46,9 @@\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n         <site.deploy.url>scp://people.apache.org/www/cxf.apache.org/maven-site</site.deploy.url>\n         <maven-owasp-plugin-version>6.0.4</maven-owasp-plugin-version>\n+        <sonar.projectKey>ayojava_Software-Engineering-Methodologies</sonar.projectKey>\n+        <sonar.organization>software-engrg-methodologies</sonar.organization>\n+        <sonar.host.url>https://sonarcloud.io</sonar.host.url>\n     </properties>\n     <distributionManagement>\n         <repository>"
  },
  {
    "sha": "38da8b0bd7dd74a623750dde8d506177e5d1e6e2",
    "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -27,6 +27,7 @@\n import org.apache.cxf.ext.logging.event.LogEvent;\n import org.apache.cxf.ext.logging.event.LogEventSender;\n import org.apache.cxf.ext.logging.event.PrettyLoggingFilter;\n+import org.apache.cxf.ext.logging.event.RegexLoggingFilter;\n import org.apache.cxf.interceptor.Fault;\n import org.apache.cxf.message.Exchange;\n import org.apache.cxf.message.Message;\n@@ -93,6 +94,12 @@ public void setPrettyLogging(boolean prettyLogging) {\n         }\n     }\n \n+    public void setRegexLogging(boolean regexLogging) {\n+        if (sender instanceof RegexLoggingFilter) {\n+            ((RegexLoggingFilter)this.sender).setRegexLogging(regexLogging);\n+        }\n+    }\n+\n     protected boolean shouldLogContent(LogEvent event) {\n         return event.isBinaryContent() && logBinary\n             || event.isMultipartContent() && logMultipart"
  },
  {
    "sha": "2b419ad8c54416602a1b0bf183f2d44ccd603d2d",
    "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/Logging.java",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/Logging.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/Logging.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/Logging.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -50,6 +50,11 @@\n      */\n     boolean pretty() default false;\n \n+    /**\n+     * For XML content, turn on regex printing in the logs\n+     */\n+    boolean regex() default false;\n+\n     /**\n      * Log binary payloads by default\n      */"
  },
  {
    "sha": "9f3ecae07657f4b55c2496fe832ad949be48b53f",
    "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingBusLifecycleListener.java",
    "status": "modified",
    "additions": 12,
    "deletions": 1,
    "changes": 13,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingBusLifecycleListener.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingBusLifecycleListener.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingBusLifecycleListener.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -30,14 +30,23 @@\n     \n     static final boolean FORCE_LOGGING;\n     static final boolean FORCE_PRETTY;\n+    static final boolean FORCE_REGEX;\n     static {\n         boolean b = false;\n         boolean pretty = false;\n+        boolean reg = false;\n         try {\n             String prop = System.getProperty(\"org.apache.cxf.logging.enabled\", \"false\");\n-            if (\"pretty\".equals(prop)) {\n+            if ((\"pretty\".equals(prop)) && (\"regex\".equals(prop))) {\n                 b = true;\n                 pretty = true;\n+                reg = true;\n+            } else if (\"pretty\".equals(prop)) {\n+                b = true;\n+                pretty = true;\n+            } else if (\"regex\".equals(prop)) {\n+                b = true;\n+                reg = true;\n             } else {\n                 b = Boolean.parseBoolean(prop);\n                 //treat these all the same\n@@ -51,6 +60,7 @@\n         }\n         FORCE_LOGGING = b;\n         FORCE_PRETTY = pretty;\n+        FORCE_REGEX = reg;\n     }\n \n     private final Bus bus;\n@@ -65,6 +75,7 @@ public void initComplete() {\n         if (FORCE_LOGGING) {\n             LoggingFeature feature = new LoggingFeature();\n             feature.setPrettyLogging(FORCE_PRETTY);\n+            feature.setRegexLogging(FORCE_REGEX);\n             bus.getFeatures().add(feature);\n             feature.initialize(bus);\n         }"
  },
  {
    "sha": "115ad250376c067fa0e00075a47762ff9c5f3554",
    "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFactoryBeanListener.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFactoryBeanListener.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFactoryBeanListener.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFactoryBeanListener.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -64,6 +64,7 @@ private void addLoggingSupport(Endpoint endpoint, Bus bus, Logging annotation) {\n             LoggingFeature lf = new LoggingFeature();\n             lf.setInMemThreshold(annotation.inMemThresHold());\n             lf.setPrettyLogging(annotation.pretty());\n+            lf.setRegexLogging(annotation.regex());\n             lf.setLimit(annotation.limit());\n             lf.setLogBinary(annotation.logBinary());\n             lf.setLogMultipart(annotation.logMultipart());"
  },
  {
    "sha": "f65716e5e67521ebc8421b7b57211c17643cd56b",
    "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFeature.java",
    "status": "modified",
    "additions": 17,
    "deletions": 2,
    "changes": 19,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFeature.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFeature.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFeature.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -26,6 +26,7 @@\n import org.apache.cxf.common.injection.NoJSR250Annotations;\n import org.apache.cxf.ext.logging.event.LogEventSender;\n import org.apache.cxf.ext.logging.event.PrettyLoggingFilter;\n+import org.apache.cxf.ext.logging.event.RegexLoggingFilter;\n import org.apache.cxf.ext.logging.slf4j.Slf4jEventSender;\n import org.apache.cxf.ext.logging.slf4j.Slf4jVerboseEventSender;\n import org.apache.cxf.feature.AbstractPortableFeature;\n@@ -78,6 +79,10 @@ public void setPrettyLogging(boolean prettyLogging) {\n         delegate.setPrettyLogging(prettyLogging);\n     }\n \n+    public void setRegexLogging(boolean regexLogging) {\n+        delegate.setRegexLogging(regexLogging);\n+    }\n+\n     public void setLogBinary(boolean logBinary) {\n         delegate.setLogBinary(logBinary);\n     }\n@@ -172,13 +177,18 @@ public void addSensitiveProtocolHeaderNames(final Set<String> sensitiveProtocolH\n         private LoggingOutInterceptor out;\n         private PrettyLoggingFilter inPrettyFilter;\n         private PrettyLoggingFilter outPrettyFilter;\n+        private RegexLoggingFilter inRegexFilter;\n+        private RegexLoggingFilter outRegexFilter;\n+        \n \n         public Portable() {\n             LogEventSender sender = new Slf4jVerboseEventSender();\n             inPrettyFilter = new PrettyLoggingFilter(sender);\n             outPrettyFilter = new PrettyLoggingFilter(sender);\n-            in = new LoggingInInterceptor(inPrettyFilter);\n-            out = new LoggingOutInterceptor(outPrettyFilter);\n+            inRegexFilter = new RegexLoggingFilter(inPrettyFilter);\n+            outRegexFilter = new RegexLoggingFilter(outPrettyFilter);\n+            in = new LoggingInInterceptor(inRegexFilter);\n+            out = new LoggingOutInterceptor(outRegexFilter);\n         }\n \n         @Override\n@@ -217,6 +227,11 @@ public void setPrettyLogging(boolean prettyLogging) {\n             this.outPrettyFilter.setPrettyLogging(prettyLogging);\n         }\n \n+        public void setRegexLogging(boolean regexLogging) {\n+            this.inRegexFilter.setRegexLogging(regexLogging);\n+            this.outRegexFilter.setRegexLogging(regexLogging);\n+        }\n+\n         /**\n          * Log binary content?\n          * @param logBinary defaults to false"
  },
  {
    "sha": "4ff90427f401cab295e3ddef2e2d61e9c9f81922",
    "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/RegexLoggingFilter.java",
    "status": "added",
    "additions": 89,
    "deletions": 0,
    "changes": 89,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/RegexLoggingFilter.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/RegexLoggingFilter.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/RegexLoggingFilter.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -0,0 +1,89 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.ext.logging.event;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Removes regex matches from the payload.\n+ * Matches the complete payload, including element tags.\n+ */\n+public class RegexLoggingFilter implements LogEventSender {\n+    private LogEventSender next;\n+    private boolean filterLogging;\n+    private Pattern regexPattern;\n+    private String replacer;\n+\n+    public RegexLoggingFilter(LogEventSender next, Pattern regexPattern, String replacer) {\n+        this.next = next;\n+        this.replacer = replacer;\n+        this.regexPattern = regexPattern;\n+    }\n+\n+    public RegexLoggingFilter(LogEventSender next, Pattern regexPattern) {\n+        this.next = next;\n+        this.regexPattern = regexPattern;\n+        this.replacer = \"\";\n+    }\n+\n+    public RegexLoggingFilter(LogEventSender next) {\n+        this.next = next;\n+        this.regexPattern = null;\n+        this.replacer = \"\";\n+    }\n+\n+    @Override\n+    public void send(LogEvent event) {\n+        if (shouldFilter(event)) {\n+            event.setPayload(getRegexFilteredMessage(event));\n+        }\n+        next.send(event);\n+    }\n+\n+    private boolean shouldFilter(LogEvent event) {\n+        String contentType = event.getContentType();\n+        return filterLogging\n+            && regexPattern != null\n+            && contentType != null\n+            && contentType.indexOf(\"xml\") >= 0\n+            && contentType.toLowerCase().indexOf(\"multipart/related\") < 0\n+            && event.getPayload() != null\n+            && event.getPayload().length() > 0;\n+    }\n+\n+    public String getRegexFilteredMessage(LogEvent event) {\n+        String payload = event.getPayload();\n+        Matcher regexMatcher = regexPattern.matcher(payload);\n+\n+        while (regexMatcher.find()) {\n+            String matchString = regexMatcher.group();\n+            payload = payload.replace(matchString, replacer);\n+        }\n+        return payload;\n+    }\n+\n+    public void setNext(LogEventSender next) {\n+        this.next = next;\n+    }\n+\n+    public void setRegexLogging(boolean filterLoggingEnabled) {\n+        this.filterLogging = filterLoggingEnabled;\n+    }\n+}"
  },
  {
    "sha": "3f4f7889b00b144810b76d1984bd62b8f7d3f1c9",
    "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/osgi/Activator.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/osgi/Activator.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/osgi/Activator.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/osgi/Activator.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -67,6 +67,7 @@ public void updated(Dictionary config) throws ConfigurationException {\n             LOG.info(\"CXF message logging feature \" + (enabled ? \"enabled\" : \"disabled\"));\n             Integer limit = Integer.valueOf(getValue(config, \"limit\", \"65536\"));\n             Boolean pretty = Boolean.valueOf(getValue(config, \"pretty\", \"false\"));\n+            Boolean regex = Boolean.valueOf(getValue(config, \"regex\", \"false\"));\n             Boolean verbose = Boolean.valueOf(getValue(config, \"verbose\", \"true\"));\n             Long inMemThreshold = Long.valueOf(getValue(config, \"inMemThresHold\", \"-1\"));\n             Boolean logMultipart = Boolean.valueOf(getValue(config, \"logMultipart\", \"true\"));\n@@ -81,6 +82,9 @@ public void updated(Dictionary config) throws ConfigurationException {\n             if (pretty != null) {\n                 logging.setPrettyLogging(pretty);\n             }\n+            if (regex != null) {\n+                logging.setRegexLogging(pretty);\n+            }\n             \n             if (verbose != null) {\n                 logging.setVerbose(verbose);"
  },
  {
    "sha": "6e278f3191739ff135f25d629f0393df56abdf56",
    "filename": "rt/features/logging/src/test/java/org/apache/cxf/ext/logging/TestRegexLoggingFilter.java",
    "status": "added",
    "additions": 109,
    "deletions": 0,
    "changes": 109,
    "blob_url": "https://github.com/apache/cxf/blob/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/test/java/org/apache/cxf/ext/logging/TestRegexLoggingFilter.java",
    "raw_url": "https://github.com/apache/cxf/raw/88292906ef412c6649ecbea468453c155d35db38/rt/features/logging/src/test/java/org/apache/cxf/ext/logging/TestRegexLoggingFilter.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/test/java/org/apache/cxf/ext/logging/TestRegexLoggingFilter.java?ref=88292906ef412c6649ecbea468453c155d35db38",
    "patch": "@@ -0,0 +1,109 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements. See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership. The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License. You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied. See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.cxf.ext.logging;\r\n+\r\n+import java.util.regex.Pattern;\r\n+\r\n+import org.apache.cxf.ext.logging.event.LogEvent;\r\n+import org.apache.cxf.ext.logging.event.LogEventSender;\r\n+import org.apache.cxf.ext.logging.event.RegexLoggingFilter;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+\r\n+/**\r\n+ *\r\n+ * Test {@linkplain RegexLoggingFilter}} with well-formed and non-well-formed XML payloads.\r\n+ *\r\n+ */\r\n+\r\n+public class TestRegexLoggingFilter {\r\n+\r\n+    @Test\r\n+    public void testWellformedXMLMessage() {\r\n+        String message = \"<parent><child>aa123456aa55555aa7777777</child></parent>\";\r\n+        String expected = \"<parent><child>aaaa55555aa7</child></parent>\";\r\n+        Pattern regex = Pattern.compile(\"\\\\d{6}\");\r\n+        filter(message, expected, regex, false);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testInvalidXMLMessageUnexpectedEndTag() {\r\n+        String message = \"<parentA><child>text</child></parentB>\";\r\n+        Pattern regex = Pattern.compile(\"\");\r\n+        filter(message, message, regex, false);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testInvalidXMLMessageMissingEndTag() {\r\n+        String message = \"<parentA><child>text</child>\";\r\n+        Pattern regex = Pattern.compile(\"\");\r\n+        filter(message, message, regex, false);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testInvalidXMLMessageGarbageStartTag() {\r\n+        String message = \"<a b c><child>text</child>\";\r\n+        Pattern regex = Pattern.compile(\"\");\r\n+        filter(message, message, regex, false);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testInvalidButTruncatedXMLMessageWithMissingEndTag() {\r\n+        String message = \"<parent><child>123text12</child>\";\r\n+        String expected = \"<parent><child>text12</child>\";\r\n+        Pattern regex = Pattern.compile(\"\\\\d{3}\");\r\n+        filter(message, expected, regex, true);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testHtmlEntityTruncated() {\r\n+        String message = \"<element>a&n\";\r\n+        String expected = \"<element>\";\r\n+        Pattern regex = Pattern.compile(\"a&n\");\r\n+        filter(message, expected, regex, true);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testPatternSyntaxException() {\r\n+        String message = \"<element>message</element>\";\r\n+        Pattern regex = Pattern.compile(\"[\");\r\n+        filter(message, null, regex, false);\r\n+    }\r\n+\r\n+    private void filter(String payload, String expected, Pattern regex, boolean truncated) {\r\n+        LogEvent logEvent  = new LogEvent();\r\n+        logEvent.setPayload(payload);\r\n+        logEvent.setContentType(\"text/xml\");\r\n+        logEvent.setTruncated(truncated);\r\n+\r\n+        LogEventSender dummy = new LogEventSender() {\r\n+            public void send(LogEvent event) {\r\n+            }\r\n+        };\r\n+\r\n+        RegexLoggingFilter regexFilter = new RegexLoggingFilter(dummy, regex);\r\n+        regexFilter.setRegexLogging(true);\r\n+        regexFilter.send(logEvent);\r\n+        assertEquals(expected, logEvent.getPayload());\r\n+    }\r\n+\r\n+}\r"
  }
]
