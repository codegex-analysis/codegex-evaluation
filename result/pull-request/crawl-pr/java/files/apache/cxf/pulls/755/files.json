[
  {
    "sha": "7201d494a0c348572d7dfc200413a19bb53f7e52",
    "filename": "core/src/main/java/org/apache/cxf/annotations/Logging.java",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/annotations/Logging.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/annotations/Logging.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/annotations/Logging.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -30,6 +30,7 @@\n \n /**\n  * Enables message Logging\n+ * @deprecated use the logging module rt/features/logging instead\n  */\n @Deprecated\n @Documented"
  },
  {
    "sha": "6e4fa1ac67330748840ab197007c7dc006c316a8",
    "filename": "core/src/main/java/org/apache/cxf/attachment/AttachmentDataSource.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/attachment/AttachmentDataSource.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/attachment/AttachmentDataSource.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/attachment/AttachmentDataSource.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -38,7 +38,7 @@\n     private DelegatingInputStream delegate;\n     private String name;\n \n-    public AttachmentDataSource(String ctParam, InputStream inParam) throws IOException {\n+    public AttachmentDataSource(String ctParam, InputStream inParam) {\n         this.ct = ctParam;\n         ins = inParam;\n     }"
  },
  {
    "sha": "7e2947209568c790b33d126e10cf469ab3c7ce1b",
    "filename": "core/src/main/java/org/apache/cxf/attachment/AttachmentDeserializer.java",
    "status": "modified",
    "additions": 7,
    "deletions": 10,
    "changes": 17,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/attachment/AttachmentDeserializer.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/attachment/AttachmentDeserializer.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/attachment/AttachmentDeserializer.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -23,6 +23,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PushbackInputStream;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -97,8 +98,6 @@\n \n     private byte[] boundary;\n \n-    private String contentType;\n-\n     private LazyAttachmentCollection attachments;\n \n     private Message message;\n@@ -141,7 +140,7 @@ public void initializeAttachments() throws IOException {\n     }\n \n     protected void initializeRootMessage() throws IOException {\n-        contentType = (String) message.get(Message.CONTENT_TYPE);\n+        String contentType = (String) message.get(Message.CONTENT_TYPE);\n \n         if (contentType == null) {\n             throw new IllegalStateException(\"Content-Type can not be empty!\");\n@@ -160,7 +159,7 @@ protected void initializeRootMessage() throws IOException {\n             if (null == boundaryString) {\n                 throw new IOException(\"Couldn't determine the boundary from the message!\");\n             }\n-            boundary = boundaryString.getBytes(\"utf-8\");\n+            boundary = boundaryString.getBytes(StandardCharsets.UTF_8);\n \n             stream = new PushbackInputStream(message.getContent(InputStream.class), PUSHBACK_AMOUNT);\n             if (!readTillFirstBoundary(stream, boundary)) {\n@@ -189,7 +188,7 @@ protected void initializeRootMessage() throws IOException {\n         }\n     }\n \n-    private String findBoundaryFromContentType(String ct) throws IOException {\n+    private String findBoundaryFromContentType(String ct) {\n         // Use regex to get the boundary and return null if it's not found\n         Matcher m = CONTENT_TYPE_BOUNDARY_PATTERN.matcher(ct);\n         return m.find() ? \"--\" + m.group(1) : null;\n@@ -456,11 +455,9 @@ private void addHeaderLine(Map<String, List<String>> heads, StringBuilder line)\n             }\n             value = line.substring(separator);\n         }\n-        List<String> v = heads.get(name);\n-        if (v == null) {\n-            v = new ArrayList<>(1);\n-            heads.put(name, v);\n-        }\n+       \n+        List<String> v = heads.computeIfAbsent(name, k -> new ArrayList<>(1));\n+        heads.put(name, v);\n         v.add(value);\n     }\n "
  },
  {
    "sha": "d5e02b8b1e801d788840d8fc468ceaf03b8ce2d4",
    "filename": "core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java",
    "status": "modified",
    "additions": 13,
    "deletions": 9,
    "changes": 22,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -66,7 +66,9 @@\n \n public final class AttachmentUtil {\n     public static final String BODY_ATTACHMENT_ID = \"root.message@cxf.apache.org\";\n-\n+    \n+    private static final String THE_VALUE_SET = \"The value set as \";\n+    private static final String BINARY = \"binary\";\n     private static final Logger LOG = LogUtils.getL7dLogger(AttachmentUtil.class);\n \n     private static final AtomicInteger COUNTER = new AtomicInteger();\n@@ -173,7 +175,7 @@ public static void setStreamedAttachmentProperties(Message message, CachedOutput\n             } else if (directory instanceof String) {\n                 bos.setOutputDir(new File((String) directory));\n             } else {\n-                throw new IOException(\"The value set as \" + AttachmentDeserializer.ATTACHMENT_DIRECTORY\n+                throw new IOException(THE_VALUE_SET + AttachmentDeserializer.ATTACHMENT_DIRECTORY\n                         + \" should be either an instance of File or String\");\n             }\n         }\n@@ -195,7 +197,7 @@ public static void setStreamedAttachmentProperties(Message message, CachedOutput\n                     throw new IOException(\"Provided threshold String is not a number\", e);\n                 }\n             } else {\n-                throw new IOException(\"The value set as \" + AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD\n+                throw new IOException(THE_VALUE_SET + AttachmentDeserializer.ATTACHMENT_MEMORY_THRESHOLD\n                         + \" should be either an instance of Number or String\");\n             }\n         } else if (!CachedOutputStream.isThresholdSysPropSet()) {\n@@ -219,7 +221,7 @@ public static void setStreamedAttachmentProperties(Message message, CachedOutput\n                     throw new IOException(\"Provided threshold String is not a number\", e);\n                 }\n             } else {\n-                throw new IOException(\"The value set as \" + AttachmentDeserializer.ATTACHMENT_MAX_SIZE\n+                throw new IOException(THE_VALUE_SET + AttachmentDeserializer.ATTACHMENT_MAX_SIZE\n                         + \" should be either an instance of Number or String\");\n             }\n         }\n@@ -277,7 +279,7 @@ public static String getUniqueBoundaryValue() {\n                 dataHandlers = new DHMap(attachments);\n             }\n         }\n-        return dataHandlers == null ? new LinkedHashMap<String, DataHandler>() : dataHandlers;\n+        return dataHandlers == null ? new LinkedHashMap<>() : dataHandlers;\n     }\n \n     static class DHMap extends AbstractMap<String, DataHandler> {\n@@ -313,6 +315,7 @@ public DataHandler setValue(DataHandler value) {\n                                 }\n                             };\n                         }\n+                        @Override\n                         public void remove() {\n                             it.remove();\n                         }\n@@ -325,6 +328,7 @@ public int size() {\n                 }\n             };\n         }\n+        @Override\n         public DataHandler put(String key, DataHandler value) {\n             Iterator<Attachment> i = list.iterator();\n             DataHandler ret = null;\n@@ -360,7 +364,7 @@ public static String cleanContentId(String id) {\n         }\n         if (id == null) {\n             //no Content-ID, set cxf default ID\n-            id = \"root.message@cxf.apache.org\";\n+            id = BODY_ATTACHMENT_ID;\n         }\n         return id;\n     }\n@@ -400,14 +404,14 @@ public static Attachment createAttachment(InputStream stream, Map<String, List<S\n             String name = e.getKey();\n             if (\"Content-Transfer-Encoding\".equalsIgnoreCase(name)) {\n                 encoding = getHeader(headers, name);\n-                if (\"binary\".equalsIgnoreCase(encoding)) {\n+                if (BINARY.equalsIgnoreCase(encoding)) {\n                     att.setXOP(true);\n                 }\n             }\n             att.setHeader(name, getHeaderValue(e.getValue()));\n         }\n         if (encoding == null) {\n-            encoding = \"binary\";\n+            encoding = BINARY;\n         }\n         InputStream ins = decode(stream, encoding);\n         if (ins != stream) {\n@@ -440,7 +444,7 @@ public static InputStream decode(InputStream in, String encoding) throws IOExcep\n         encoding = encoding.toLowerCase();\n \n         // some encodings are just pass-throughs, with no real decoding.\n-        if (\"binary\".equals(encoding)\n+        if (BINARY.equals(encoding)\n             || \"7bit\".equals(encoding)\n             || \"8bit\".equals(encoding)) {\n             return in;"
  },
  {
    "sha": "376f08dda9489c660667b11d6849ae03570ee336",
    "filename": "core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -49,6 +49,10 @@ private synchronized void load() {\n         if (dataSource == null) {\n             for (Attachment a : attachments) {\n                 if (a.getId().equals(id)) {\n+                    if (a.getDataHandler() == null) {\n+                        throw new IllegalStateException(\"Could not get DataHandler for attachment of id \"\n+                                                        + id);\n+                    }\n                     this.dataSource = a.getDataHandler().getDataSource();\n                     if (dataSource == null) {\n                         throw new IllegalStateException(\"Could not get DataSource for \""
  },
  {
    "sha": "41a70e734fc5b56d73cdf048a5a457065e4999e3",
    "filename": "core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/helpers/ServiceUtils.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -215,7 +215,7 @@ public static String getMethodName(Method m) {\n      * the given class name. <p/> For instance, if the given class name is\n      * <code>org.codehaus.xfire.services.Echo</code>, and the protocol is\n      * <code>http</code>, the resulting namespace would be\n-     * <code>http://services.xfire.codehaus.org</code>.\n+     * <code>http://services.xfire.codehaus.org/</code>.\n      *\n      * @param className the class name\n      * @param protocol the protocol (eg. <code>http</code>)"
  },
  {
    "sha": "8348e8fbef19cde315638ed9a50eae5248e6aff9",
    "filename": "core/src/main/java/org/apache/cxf/io/CachedOutputStream.java",
    "status": "modified",
    "additions": 15,
    "deletions": 7,
    "changes": 22,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/io/CachedOutputStream.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/main/java/org/apache/cxf/io/CachedOutputStream.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/io/CachedOutputStream.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -48,7 +48,7 @@\n import org.apache.cxf.helpers.LoadingByteArrayOutputStream;\n \n public class CachedOutputStream extends OutputStream {\n-\n+    private static final String UNKNOWN_FORMAT = \"Unknown format of currentStream\";\n     private static final File DEFAULT_TEMP_DIR;\n     private static int defaultThreshold;\n     private static long defaultMaxSize;\n@@ -167,6 +167,7 @@ protected void doFlush() throws IOException {\n \n     }\n \n+    @Override\n     public void flush() throws IOException {\n         currentStream.flush();\n         if (null != callbacks) {\n@@ -211,6 +212,7 @@ public void lockOutputStream() throws IOException {\n         streamList.remove(currentStream);\n     }\n \n+    @Override\n     public void close() throws IOException {\n         currentStream.flush();\n         outputLocked = true;\n@@ -267,7 +269,7 @@ public void resetOut(OutputStream out, boolean copyOldContent) throws IOExceptio\n                         byteOut.writeTo(out);\n                     }\n                 } else {\n-                    throw new IOException(\"Unknown format of currentStream\");\n+                    throw new IOException(UNKNOWN_FORMAT);\n                 }\n             } else {\n                 // read the file\n@@ -302,7 +304,7 @@ public long size() {\n             if (currentStream instanceof ByteArrayOutputStream) {\n                 return ((ByteArrayOutputStream)currentStream).toByteArray();\n             }\n-            throw new IOException(\"Unknown format of currentStream\");\n+            throw new IOException(UNKNOWN_FORMAT);\n         }\n         // read the file\n         try (InputStream fin = createInputStream(tempFile)) {\n@@ -316,7 +318,7 @@ public void writeCacheTo(OutputStream out) throws IOException {\n             if (currentStream instanceof ByteArrayOutputStream) {\n                 ((ByteArrayOutputStream)currentStream).writeTo(out);\n             } else {\n-                throw new IOException(\"Unknown format of currentStream\");\n+                throw new IOException(UNKNOWN_FORMAT);\n             }\n         } else {\n             // read the file\n@@ -346,7 +348,7 @@ public void writeCacheTo(StringBuilder out, String charsetName, long limit) thro\n                 byte[] bytes = ((ByteArrayOutputStream)currentStream).toByteArray();\n                 out.append(IOUtils.newStringFromBytes(bytes, charsetName, 0, (int)limit));\n             } else {\n-                throw new IOException(\"Unknown format of currentStream\");\n+                throw new IOException(UNKNOWN_FORMAT);\n             }\n         } else {\n             // read the file\n@@ -385,7 +387,7 @@ public void writeCacheTo(StringBuilder out, String charsetName) throws IOExcepti\n                 byte[] bytes = ((ByteArrayOutputStream)currentStream).toByteArray();\n                 out.append(IOUtils.newStringFromBytes(bytes, charsetName));\n             } else {\n-                throw new IOException(\"Unknown format of currentStream\");\n+                throw new IOException(UNKNOWN_FORMAT);\n             }\n         } else {\n             // read the file\n@@ -438,6 +440,7 @@ private void enforceLimits() throws IOException {\n         }\n     }\n \n+    @Override\n     public void write(byte[] b, int off, int len) throws IOException {\n         if (!outputLocked) {\n             onWrite();\n@@ -447,6 +450,7 @@ public void write(byte[] b, int off, int len) throws IOException {\n         }\n     }\n \n+    @Override\n     public void write(byte[] b) throws IOException {\n         if (!outputLocked) {\n             onWrite();\n@@ -515,6 +519,7 @@ public InputStream getInputStream() throws IOException {\n             if (cipherTransformation != null) {\n                 fileInputStream = new CipherInputStream(fileInputStream, ciphers.getDecryptor()) {\n                     boolean closed;\n+                    @Override\n                     public void close() throws IOException {\n                         if (!closed) {\n                             super.close();\n@@ -557,7 +562,7 @@ private boolean maybeDeleteTempFile(Object stream) {\n         return postClosedInvoked;\n     }\n \n-    public void setOutputDir(File outputDir) throws IOException {\n+    public void setOutputDir(File outputDir) {\n         this.outputDir = outputDir;\n     }\n \n@@ -622,6 +627,7 @@ private OutputStream createOutputStream(File file) throws IOException {\n             }\n             out = new CipherOutputStream(out, ciphers.getEncryptor()) {\n                 boolean closed;\n+                @Override\n                 public void close() throws IOException {\n                     if (!closed) {\n                         super.close();\n@@ -638,6 +644,7 @@ private InputStream createInputStream(File file) throws IOException {\n         if (cipherTransformation != null) {\n             in = new CipherInputStream(in, ciphers.getDecryptor()) {\n                 boolean closed;\n+                @Override\n                 public void close() throws IOException {\n                     if (!closed) {\n                         super.close();\n@@ -658,6 +665,7 @@ public void close() throws IOException {\n             this.sourceFile = sourceFile;\n         }\n \n+        @Override\n         public void close() throws IOException {\n             if (!closed) {\n                 super.close();"
  },
  {
    "sha": "16efa597dad57390f53deed8a9601d7116575324",
    "filename": "core/src/test/java/org/apache/cxf/attachment/LazyDataSourceTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 0,
    "changes": 11,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/test/java/org/apache/cxf/attachment/LazyDataSourceTest.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/test/java/org/apache/cxf/attachment/LazyDataSourceTest.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/test/java/org/apache/cxf/attachment/LazyDataSourceTest.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -64,4 +64,15 @@ public void testNoAttachment() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testNoAttachmentSameID() throws Exception {\n+        DataSource ds = new LazyDataSource(ID_2, Collections.singleton(new AttachmentImpl(ID_2)));\n+        try {\n+            ds.getName();\n+            fail();\n+        } catch (IllegalStateException e) {\n+            String message = e.getMessage();\n+            assertTrue(message, message.contains(ID_2));\n+        }\n+    }\n }"
  },
  {
    "sha": "5d2dcc3a786d891942909a9cf34b4b3fe3b11325",
    "filename": "core/src/test/java/org/apache/cxf/helpers/FileUtilsTest.java",
    "status": "modified",
    "additions": 17,
    "deletions": 4,
    "changes": 21,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/test/java/org/apache/cxf/helpers/FileUtilsTest.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/test/java/org/apache/cxf/helpers/FileUtilsTest.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/test/java/org/apache/cxf/helpers/FileUtilsTest.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -35,7 +35,6 @@\n \n public class FileUtilsTest {\n \n-\n     @Test\n     public void testTempIODirExists() throws Exception {\n \n@@ -57,9 +56,9 @@ public void testReadLines() throws Exception {\n             basedir = new File(\".\").getCanonicalPath();\n         }\n \n-        Optional<Path> p =\n-            Files.find(Paths.get(basedir), 20, (path, attrs) -> path.getFileName().endsWith(\"FileUtilsTest.java\"))\n-                .findFirst();\n+        Optional<Path> p = Files\n+            .find(Paths.get(basedir), 20, (path, attrs) -> path.getFileName().endsWith(\"FileUtilsTest.java\"))\n+            .findFirst();\n         assertTrue(p.isPresent());\n \n         List<String> lines = FileUtils.readLines(p.get().toFile());\n@@ -79,4 +78,18 @@ public void testGetFiles() throws URISyntaxException {\n \n         assertEquals(foundFiles, foundFiles2);\n     }\n+\n+    @Test\n+    public void testStripPathWindowStyle() {\n+        String name = \"c:\\\\boo\\foo\\\\file.txt\";\n+        name = FileUtils.stripPath(name);\n+        assertEquals(\"file.txt\", name);\n+    }\n+\n+    @Test\n+    public void testStripPathUnixStyle() {\n+        String name = \"/opt/java/jre/bin/java\";\n+        name = FileUtils.stripPath(name);\n+        assertEquals(\"java\", name);\n+    }\n }"
  },
  {
    "sha": "2d0b966a2f91b42d1d4ba5dc4274fbd4c42ab958",
    "filename": "core/src/test/java/org/apache/cxf/helpers/IOUtilsTest.java",
    "status": "modified",
    "additions": 62,
    "deletions": 7,
    "changes": 69,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/test/java/org/apache/cxf/helpers/IOUtilsTest.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/test/java/org/apache/cxf/helpers/IOUtilsTest.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/test/java/org/apache/cxf/helpers/IOUtilsTest.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -18,9 +18,9 @@\n  */\n package org.apache.cxf.helpers;\n \n-\n-\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.PushbackInputStream;\n \n@@ -29,32 +29,87 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n public class IOUtilsTest {\n \n-\n     @Test\n     public void testIsEmpty() throws Exception {\n-        assertTrue(IOUtils.isEmpty(new ByteArrayInputStream(new byte[]{})));\n+        assertTrue(IOUtils.isEmpty(new ByteArrayInputStream(new byte[] {})));\n     }\n+\n     @Test\n     public void testNonEmpty() throws Exception {\n         InputStream is = new ByteArrayInputStream(\"Hello\".getBytes());\n         assertFalse(IOUtils.isEmpty(is));\n         assertEquals(\"Hello\", IOUtils.toString(is));\n     }\n+\n     @Test\n     public void testNonEmptyWithPushBack() throws Exception {\n-        InputStream is = new PushbackInputStream(\n-                             new ByteArrayInputStream(\"Hello\".getBytes()));\n+        InputStream is = new PushbackInputStream(new ByteArrayInputStream(\"Hello\".getBytes()));\n         assertFalse(IOUtils.isEmpty(is));\n         assertEquals(\"Hello\", IOUtils.toString(is));\n     }\n+\n     @Test\n     public void testInputStreamWithNoMark() throws Exception {\n         String data = \"this is some data\";\n         InputStream is = new UnMarkedInputStream(data.getBytes());\n         assertFalse(IOUtils.isEmpty(is));\n         assertEquals(data, IOUtils.toString(is));\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void testCopy() throws IOException {\n+        byte[] inBytes = \"Foo\".getBytes(IOUtils.UTF8_CHARSET);\n+        ByteArrayInputStream is = new ByteArrayInputStream(inBytes);\n+        ByteArrayOutputStream os = new ByteArrayOutputStream(inBytes.length);\n+        IOUtils.copy(is, os);\n+        byte[] outBytes = os.toByteArray();\n+        String expectedString = new String(outBytes, IOUtils.UTF8_CHARSET);\n+        assertEquals(\"Foo\", expectedString);\n+    }\n+\n+    @Test(expected = IOException.class)\n+    public void testCopyAndCloseInput() throws IOException {\n+        InputStream is = getClass().getResourceAsStream(\"/wsdl/foo.wsdl\");\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        IOUtils.copyAndCloseInput(is, os);\n+        is.read();\n+        fail(\"InputStream should be closed\");\n+    }\n+\n+    @Test\n+    public void testCopyAtLeastGreaterThanStreamSize() throws IOException {\n+        byte[] bytes = \"Foo\".getBytes(IOUtils.UTF8_CHARSET);\n+        ByteArrayInputStream is = new ByteArrayInputStream(bytes);\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        int atLeast = 5; // greater than inputStream length\n+        IOUtils.copyAtLeast(is, os, atLeast);\n+        assertEquals(3, os.toByteArray().length);\n+\n+    }\n+\n+    @Test\n+    public void testCopyAtLeastEqualStreamSize() throws IOException {\n+        byte[] bytes = \"Foo\".getBytes(IOUtils.UTF8_CHARSET);\n+        ByteArrayInputStream is = new ByteArrayInputStream(bytes);\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        int atLeast = 3; // equal than inputStream length\n+        IOUtils.copyAtLeast(is, os, atLeast);\n+        assertEquals(atLeast, os.toByteArray().length);\n+\n+    }\n+\n+    @Test\n+    public void testCopyAtLeastLessThanStreamSize() throws IOException {\n+        byte[] bytes = \"Foo\".getBytes(IOUtils.UTF8_CHARSET);\n+        ByteArrayInputStream is = new ByteArrayInputStream(bytes);\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        int atLeast = 2; // less than inpuStream length\n+        IOUtils.copyAtLeast(is, os, atLeast);\n+        assertEquals(atLeast, os.toByteArray().length);\n+\n+    }\n+}"
  },
  {
    "sha": "75cc642642cf3a9eae9f04085f3f85099504cf98",
    "filename": "core/src/test/java/org/apache/cxf/helpers/ServiceUtilsTest.java",
    "status": "modified",
    "additions": 27,
    "deletions": 3,
    "changes": 30,
    "blob_url": "https://github.com/apache/cxf/blob/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/test/java/org/apache/cxf/helpers/ServiceUtilsTest.java",
    "raw_url": "https://github.com/apache/cxf/raw/9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0/core/src/test/java/org/apache/cxf/helpers/ServiceUtilsTest.java",
    "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/test/java/org/apache/cxf/helpers/ServiceUtilsTest.java?ref=9e969ce4f71be495e2d3fac9a6f2ec1cd9a584e0",
    "patch": "@@ -17,7 +17,6 @@\n  * under the License.\n  */\n \n-\n package org.apache.cxf.helpers;\n \n import org.apache.cxf.annotations.SchemaValidation.SchemaValidationType;\n@@ -49,7 +48,6 @@ public void testmakeNamespaceFromClassName() throws Exception {\n         assertEquals(\"http://ws.example.com/\", tns);\n     }\n \n-\n     @Test\n     public void testRequestResponseTypes() {\n         // lets do server side first\n@@ -173,4 +171,30 @@ private void setupSchemaValidationValue(Object value, boolean isRequestor) {\n \n         control.replay();\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void testMakeNamespaceFromClassNameCaseOne() {\n+        String nameSpace = ServiceUtils.makeNamespaceFromClassName(\"Foo\", \"http\");\n+        assertEquals(\"http://DefaultNamespace\", nameSpace);\n+    }\n+\n+    @Test\n+    public void testMakeNamespaceFromClassNameCaseTwo() {\n+        String nameSpace = ServiceUtils.makeNamespaceFromClassName(this.getClass().getName(), \"http\");\n+        assertEquals(\"http://helpers.cxf.apache.org/\", nameSpace);\n+\n+    }\n+\n+    @Test\n+    public void testMakePackageNameCaseOne() {\n+        String packageName = ServiceUtils.makePackageName(\"http://www.w3.org/TR/html4/\");\n+        assertEquals(\"org.w3.www.TR.html4\", packageName);\n+\n+    }\n+\n+    @Test\n+    public void testMakePackageNameCaseTwo() {\n+        String packageName = ServiceUtils.makePackageName(\"http://www.w3.org\");\n+        assertEquals(\"org.w3.www\", packageName);\n+    }\n+}"
  }
]
