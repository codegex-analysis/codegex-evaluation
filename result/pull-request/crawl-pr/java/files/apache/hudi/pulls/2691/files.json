[
  {
    "sha": "789daf18855781c577351945f075a78b14410707",
    "filename": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java",
    "status": "modified",
    "additions": 16,
    "deletions": 22,
    "changes": 38,
    "blob_url": "https://github.com/apache/hudi/blob/f7cd8044f8400462038c88771e99e5f91ccb1958/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java",
    "raw_url": "https://github.com/apache/hudi/raw/f7cd8044f8400462038c88771e99e5f91ccb1958/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java",
    "contents_url": "https://api.github.com/repos/apache/hudi/contents/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java?ref=f7cd8044f8400462038c88771e99e5f91ccb1958",
    "patch": "@@ -157,7 +157,8 @@ public static long totalNewMessages(OffsetRange[] ranges) {\n \n     private static final String KAFKA_TOPIC_NAME = \"hoodie.deltastreamer.source.kafka.topic\";\n     private static final String MAX_EVENTS_FROM_KAFKA_SOURCE_PROP = \"hoodie.deltastreamer.kafka.source.maxEvents\";\n-    private static final String KAFKA_AUTO_RESET_OFFSETS = \"hoodie.deltastreamer.source.kafka.auto.reset.offsets\";\n+    // \"auto.reset.offsets\" is kafka native config param. Do not change the config param name.\n+    public static final String KAFKA_AUTO_RESET_OFFSETS = \"auto.reset.offsets\";\n     private static final KafkaResetOffsetStrategies DEFAULT_KAFKA_AUTO_RESET_OFFSETS = KafkaResetOffsetStrategies.LATEST;\n     public static final long DEFAULT_MAX_EVENTS_FROM_KAFKA_SOURCE = 5000000;\n     public static long maxEventsFromKafkaSource = DEFAULT_MAX_EVENTS_FROM_KAFKA_SOURCE;\n@@ -206,8 +207,8 @@ public KafkaOffsetGen(TypedProperties props) {\n               .map(x -> new TopicPartition(x.topic(), x.partition())).collect(Collectors.toSet());\n \n       // Determine the offset ranges to read from\n-      if (lastCheckpointStr.isPresent() && !lastCheckpointStr.get().isEmpty()) {\n-        fromOffsets = checkupValidOffsets(consumer, lastCheckpointStr, topicPartitions);\n+      if (lastCheckpointStr.isPresent() && !lastCheckpointStr.get().isEmpty() && checkTopicCheckpoint(lastCheckpointStr)) {\n+        fromOffsets = fetchValidOffsets(consumer, lastCheckpointStr, topicPartitions);\n         metrics.updateDeltaStreamerKafkaDelayCountMetrics(delayOffsetCalculation(lastCheckpointStr, topicPartitions, consumer));\n       } else {\n         switch (autoResetValue) {\n@@ -245,27 +246,20 @@ public KafkaOffsetGen(TypedProperties props) {\n     return CheckpointUtils.computeOffsetRanges(fromOffsets, toOffsets, numEvents);\n   }\n \n-  // check up checkpoint offsets is valid or not, if true, return checkpoint offsets,\n-  // else return earliest offsets\n-  private Map<TopicPartition, Long> checkupValidOffsets(KafkaConsumer consumer,\n+  /**\n+   * Fetch checkpoint offsets for each partition.\n+   * @param consumer instance of {@link KafkaConsumer} to fetch offsets from.\n+   * @param lastCheckpointStr last checkpoint string.\n+   * @param topicPartitions set of topic partitions.\n+   * @return a map of Topic partitions to offsets.\n+   */\n+  private Map<TopicPartition, Long> fetchValidOffsets(KafkaConsumer consumer,\n                                                         Option<String> lastCheckpointStr, Set<TopicPartition> topicPartitions) {\n     Map<TopicPartition, Long> earliestOffsets = consumer.beginningOffsets(topicPartitions);\n-    if (checkTopicCheckpoint(lastCheckpointStr)) {\n-      Map<TopicPartition, Long> checkpointOffsets = CheckpointUtils.strToOffsets(lastCheckpointStr.get());\n-      boolean checkpointOffsetReseter = checkpointOffsets.entrySet().stream()\n-              .anyMatch(offset -> offset.getValue() < earliestOffsets.get(offset.getKey()));\n-      return checkpointOffsetReseter ? earliestOffsets : checkpointOffsets;\n-    }\n-\n-    switch (autoResetValue) {\n-      case EARLIEST:\n-        return earliestOffsets;\n-      case LATEST:\n-        return consumer.endOffsets(topicPartitions);\n-      default:\n-        throw new HoodieNotSupportedException(\"Auto reset value must be one of 'earliest' or 'latest' \");\n-    }\n-\n+    Map<TopicPartition, Long> checkpointOffsets = CheckpointUtils.strToOffsets(lastCheckpointStr.get());\n+    boolean checkpointOffsetReseter = checkpointOffsets.entrySet().stream()\n+        .anyMatch(offset -> offset.getValue() < earliestOffsets.get(offset.getKey()));\n+    return checkpointOffsetReseter ? earliestOffsets : checkpointOffsets;\n   }\n \n   private Long delayOffsetCalculation(Option<String> lastCheckpointStr, Set<TopicPartition> topicPartitions, KafkaConsumer consumer) {"
  },
  {
    "sha": "29dd3ae4db80cb5a505bf0388e3e13a3f874ed15",
    "filename": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamer.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/hudi/blob/f7cd8044f8400462038c88771e99e5f91ccb1958/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamer.java",
    "raw_url": "https://github.com/apache/hudi/raw/f7cd8044f8400462038c88771e99e5f91ccb1958/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamer.java",
    "contents_url": "https://api.github.com/repos/apache/hudi/contents/hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamer.java?ref=f7cd8044f8400462038c88771e99e5f91ccb1958",
    "patch": "@@ -53,6 +53,7 @@\n import org.apache.hudi.utilities.sources.JsonKafkaSource;\n import org.apache.hudi.utilities.sources.ParquetDFSSource;\n import org.apache.hudi.utilities.sources.TestDataSource;\n+import org.apache.hudi.utilities.sources.helpers.KafkaOffsetGen.Config;\n import org.apache.hudi.utilities.testutils.UtilitiesTestBase;\n import org.apache.hudi.utilities.testutils.sources.DistributedTestDataSource;\n import org.apache.hudi.utilities.testutils.sources.config.SourceConfigs;\n@@ -259,7 +260,7 @@ protected static void populateCommonProps(TypedProperties props) {\n   protected static void populateCommonKafkaProps(TypedProperties props) {\n     //Kafka source properties\n     props.setProperty(\"bootstrap.servers\", testUtils.brokerAddress());\n-    props.setProperty(\"hoodie.deltastreamer.source.kafka.auto.reset.offsets\", \"earliest\");\n+    props.setProperty(Config.KAFKA_AUTO_RESET_OFFSETS, \"earliest\");\n     props.setProperty(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n     props.setProperty(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n     props.setProperty(\"hoodie.deltastreamer.kafka.source.maxEvents\", String.valueOf(5000));\n@@ -1344,7 +1345,7 @@ private void prepareJsonKafkaDFSSource(String propsFileName, String autoResetVal\n     props.setProperty(\"hoodie.deltastreamer.source.kafka.topic\",topicName);\n     props.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source_uber.avsc\");\n     props.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target_uber.avsc\");\n-    props.setProperty(\"hoodie.deltastreamer.source.kafka.auto.reset.offsets\", autoResetValue);\n+    props.setProperty(Config.KAFKA_AUTO_RESET_OFFSETS, autoResetValue);\n \n     UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/\" + propsFileName);\n   }"
  },
  {
    "sha": "cf05ae6be3781203dc85a31f854256c6af5f6f52",
    "filename": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestKafkaSource.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/hudi/blob/f7cd8044f8400462038c88771e99e5f91ccb1958/hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestKafkaSource.java",
    "raw_url": "https://github.com/apache/hudi/raw/f7cd8044f8400462038c88771e99e5f91ccb1958/hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestKafkaSource.java",
    "contents_url": "https://api.github.com/repos/apache/hudi/contents/hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestKafkaSource.java?ref=f7cd8044f8400462038c88771e99e5f91ccb1958",
    "patch": "@@ -88,7 +88,7 @@ private TypedProperties createPropsForJsonSource(Long maxEventsToReadFromKafkaSo\n     TypedProperties props = new TypedProperties();\n     props.setProperty(\"hoodie.deltastreamer.source.kafka.topic\", TEST_TOPIC_NAME);\n     props.setProperty(\"bootstrap.servers\", testUtils.brokerAddress());\n-    props.setProperty(\"hoodie.deltastreamer.source.kafka.auto.reset.offsets\", resetStrategy);\n+    props.setProperty(Config.KAFKA_AUTO_RESET_OFFSETS, resetStrategy);\n     props.setProperty(\"hoodie.deltastreamer.kafka.source.maxEvents\",\n         maxEventsToReadFromKafkaSource != null ? String.valueOf(maxEventsToReadFromKafkaSource) :\n             String.valueOf(Config.maxEventsFromKafkaSource));"
  }
]
