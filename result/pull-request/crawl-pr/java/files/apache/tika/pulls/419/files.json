[
  {
    "sha": "7d947c34be1bac366699d407f7e50e653bbe7206",
    "filename": "tika-translate/src/main/java/org/apache/tika/language/translate/RTGTranslator.java",
    "status": "added",
    "additions": 137,
    "deletions": 0,
    "changes": 137,
    "blob_url": "https://github.com/apache/tika/blob/1aa1a2c3bfbb89209d750377cf1d7a908bb22a04/tika-translate/src/main/java/org/apache/tika/language/translate/RTGTranslator.java",
    "raw_url": "https://github.com/apache/tika/raw/1aa1a2c3bfbb89209d750377cf1d7a908bb22a04/tika-translate/src/main/java/org/apache/tika/language/translate/RTGTranslator.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-translate/src/main/java/org/apache/tika/language/translate/RTGTranslator.java?ref=1aa1a2c3bfbb89209d750377cf1d7a908bb22a04",
    "patch": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package org.apache.tika.language.translate;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.tika.exception.TikaException;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+\n+/**\n+ * <p>This translator is designed to work with a TCP-IP available\n+ * RTG translation server, specifically the\n+ * <a href=\"https://isi-nlp.github.io/rtg/#_rtg_serve\">\n+ * REST-based RTG server</a>.</p>\n+ * To get Docker image:\n+ *   https://hub.docker.com/repository/docker/tgowda/rtg-model <br/>\n+ * <pre>\n+ * {code\n+ * # without GPU\n+ *   docker run --rm -i -p 6060:6060 tgowda/rtg-model:500toEng-v1\n+ * # Or, with GPU device 0\n+ *   docker run --rm -i -p 6060:6060 --gpus '\"device=0\"' tgowda/rtg-model:500toEng-v1\n+ * }\n+ * </pre>\n+ *\n+ * <p>If you were to interact with the server via curl a request\n+ * would look as follows</p>\n+ *\n+ * <pre>\n+ * {code\n+ * curl --data \"source=Comment allez-vous?\" \\\n+ *      --data \"source=Bonne journée\" \\\n+ *      http://localhost:6060/translate\n+ * }\n+ * </pre>\n+ *\n+ * RTG requires input to be pre-formatted into sentences, one per line,\n+ * so this translation implementation takes care of that.\n+ */\n+public class RTGTranslator extends AbstractTranslator {\n+\n+    public static final String RTG_TRANSLATE_URL_BASE = \"http://localhost:6060\";\n+    public static final String RTG_PROPS = \"translator.rtg.properties\";\n+    private static final Logger LOG = LoggerFactory.getLogger(RTGTranslator.class);\n+    private WebClient client;\n+    private boolean isAvailable = false;\n+\n+    public RTGTranslator() {\n+        String rtgBaseUrl = RTG_TRANSLATE_URL_BASE;\n+        Properties config = new Properties();\n+        try (InputStream stream = getClass().getResourceAsStream(RTG_PROPS)){\n+            if (stream != null){\n+                config.load(stream);\n+            }\n+            rtgBaseUrl = config.getProperty(\"rtg.base.url\", rtgBaseUrl);\n+        } catch (IOException e) {\n+            LOG.warn(e.getMessage(), e);\n+        }\n+        LOG.info(\"RTG base URL: \" + rtgBaseUrl);\n+        List<Object> providers = new ArrayList<>();\n+        providers.add(new JacksonJsonProvider());\n+        this.client = WebClient.create(rtgBaseUrl, providers);\n+        this.isAvailable = client.head().getStatus() == 200;\n+\n+    }\n+    @Override\n+    public String translate(String text, String sourceLanguage, String targetLanguage)\n+            throws TikaException, IOException {\n+        return this.translate(text);\n+    }\n+\n+    @Override\n+    public String translate(String text, String targetLanguage)\n+            throws TikaException, IOException {\n+        return this.translate(text);\n+    }\n+\n+    public String translate(String text) throws TikaException, IOException {\n+        if (!this.isAvailable) {\n+            return text;\n+        }\n+        Map<String, List<Object>> input = new HashMap<>();\n+        input.put(\"source\", Arrays.asList(text.split(\"(?<=(?<![A-Z])\\\\. )|\\\\n\")));\n+        Response response = client.path(\"translate\")\n+                .type(MediaType.APPLICATION_JSON)\n+                .accept(MediaType.APPLICATION_JSON)\n+                .post(input);\n+        try (InputStreamReader reader = new InputStreamReader(\n+                (InputStream) response.getEntity())) {\n+            JSONParser parser = new JSONParser();\n+            JSONObject obj = (JSONObject) parser.parse(reader);\n+            List<String> sentences = (List<String>) obj.get(\"translation\");\n+            String output = String.join(\"\\n\", sentences);\n+            return output;\n+        } catch (ParseException e){\n+            throw new IOException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isAvailable() {\n+        return this.isAvailable;\n+    }\n+}"
  },
  {
    "sha": "0c18e0eac23cdcb448c4238077d4269900caad47",
    "filename": "tika-translate/src/test/java/org/apache/tika/language/translate/RTGTranslatorTest.java",
    "status": "added",
    "additions": 62,
    "deletions": 0,
    "changes": 62,
    "blob_url": "https://github.com/apache/tika/blob/1aa1a2c3bfbb89209d750377cf1d7a908bb22a04/tika-translate/src/test/java/org/apache/tika/language/translate/RTGTranslatorTest.java",
    "raw_url": "https://github.com/apache/tika/raw/1aa1a2c3bfbb89209d750377cf1d7a908bb22a04/tika-translate/src/test/java/org/apache/tika/language/translate/RTGTranslatorTest.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-translate/src/test/java/org/apache/tika/language/translate/RTGTranslatorTest.java?ref=1aa1a2c3bfbb89209d750377cf1d7a908bb22a04",
    "patch": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.tika.language.translate;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+\n+/**\n+ * Test harness for the {@link RTGTranslator}.\n+ * \n+ */\n+public class RTGTranslatorTest {\n+\n+\tprivate RTGTranslator translator;\n+\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\ttranslator = new RTGTranslator();\n+\t}\n+\n+\t@Test\n+\tpublic void testSimpleTranslate() {\n+\t\tString source = \"hola señor\";\n+\t\tString expected = \"hello sir\";\n+\n+\t\tString result = null;\n+\t\tif (translator.isAvailable()) {\n+\t\t\ttry {\n+\t\t\t\tresult = translator.translate(source);\n+\t\t\t\tassertNotNull(result);\n+\t\t\t\tassertEquals(\"Result: [\" + result\n+\t\t\t\t\t\t+ \"]: not equal to expected: [\" + expected + \"]\",\n+\t\t\t\t\t\texpected, result.toLowerCase());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t\tfail(e.getMessage());\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+}"
  }
]
