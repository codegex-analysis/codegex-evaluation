[
  {
    "sha": "dcfb8a59033f32b9f79d6a98c493ddc64aca84ca",
    "filename": "tika-parent/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-parent/pom.xml",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-parent/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-parent/pom.xml?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -341,6 +341,7 @@\n     <rome.version>1.15.0</rome.version>\n     <sis.version>1.0</sis.version>\n     <slf4j.version>1.7.30</slf4j.version>\n+    <solrj.version>8.8.1</solrj.version>\n     <spring.version>5.3.3</spring.version>\n     <sqlite.version>3.34.0</sqlite.version>\n     <tagsoup.version>1.2.1</tagsoup.version>"
  },
  {
    "sha": "49ed4b40b5796483c5b65702f074a30062d49a6f",
    "filename": "tika-pipes/tika-emitters/tika-emitter-solr/pom.xml",
    "status": "modified",
    "additions": 5,
    "deletions": 0,
    "changes": 5,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-emitters/tika-emitter-solr/pom.xml",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-emitters/tika-emitter-solr/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-emitters/tika-emitter-solr/pom.xml?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -50,6 +50,11 @@\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-log4j12</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.solr</groupId>\n+            <artifactId>solr-solrj</artifactId>\n+            <version>${solrj.version}</version>\n+        </dependency>\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>"
  },
  {
    "sha": "1992a0845be1267bed1233825da087c68131800a",
    "filename": "tika-pipes/tika-emitters/tika-emitter-solr/src/main/java/org/apache/tika/pipes/emitter/solr/SolrEmitter.java",
    "status": "modified",
    "additions": 121,
    "deletions": 118,
    "changes": 239,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-emitters/tika-emitter-solr/src/main/java/org/apache/tika/pipes/emitter/solr/SolrEmitter.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-emitters/tika-emitter-solr/src/main/java/org/apache/tika/pipes/emitter/solr/SolrEmitter.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-emitters/tika-emitter-solr/src/main/java/org/apache/tika/pipes/emitter/solr/SolrEmitter.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -16,36 +16,32 @@\n  */\n package org.apache.tika.pipes.emitter.solr;\n \n-import com.fasterxml.jackson.core.JsonFactory;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import org.apache.http.client.HttpClient;\n+import org.apache.solr.client.solrj.SolrClient;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.impl.CloudSolrClient;\n+import org.apache.solr.client.solrj.impl.LBHttpSolrClient;\n+import org.apache.solr.common.SolrInputDocument;\n import org.apache.tika.client.HttpClientFactory;\n-import org.apache.tika.client.HttpClientUtil;\n-import org.apache.tika.client.TikaClientException;\n import org.apache.tika.config.Field;\n import org.apache.tika.config.Initializable;\n import org.apache.tika.config.InitializableProblemHandler;\n import org.apache.tika.config.Param;\n-import org.apache.tika.pipes.emitter.AbstractEmitter;\n-import org.apache.tika.pipes.emitter.EmitData;\n import org.apache.tika.exception.TikaConfigException;\n import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.pipes.emitter.AbstractEmitter;\n+import org.apache.tika.pipes.emitter.EmitData;\n import org.apache.tika.pipes.emitter.TikaEmitterException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.BufferedOutputStream;\n-import java.io.BufferedWriter;\n-import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n-import java.io.OutputStreamWriter;\n-import java.io.StringWriter;\n-import java.io.Writer;\n-import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.UUID;\n-import java.util.zip.GZIPOutputStream;\n+\n+import static org.apache.tika.config.TikaConfig.mustNotBeEmpty;\n \n public class SolrEmitter extends AbstractEmitter implements Initializable {\n \n@@ -55,91 +51,49 @@\n         PARENT_CHILD,\n         //anything else?\n     }\n-    private static final String ATTACHMENTS = \"attachments\";\n-    private static final String UPDATE_PATH = \"/update\";\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SolrEmitter.class);\n     //one day this will be allowed or can be configured?\n     private final boolean gzipJson = false;\n \n     private AttachmentStrategy attachmentStrategy = AttachmentStrategy.PARENT_CHILD;\n-    private String url;\n+    private String solrCollection;\n+    /**\n+     * You can specify solrUrls, or you can specify solrZkHosts and use use zookeeper to determine the solr server urls.\n+     */\n+    private List<String> solrUrls;\n+    private List<String> solrZkHosts;\n+    private String solrZkChroot;\n     private String contentField = \"content\";\n     private String idField = \"id\";\n-    private int commitWithin = 100;\n-    private HttpClientFactory httpClientFactory;\n-    private HttpClient httpClient;\n+    private int commitWithin = 1000;\n+    private int connectionTimeout = 10000;\n+    private int socketTimeout = 60000;\n+    private final HttpClientFactory httpClientFactory;\n+    private SolrClient solrClient;\n \n     public SolrEmitter() throws TikaConfigException {\n         httpClientFactory = new HttpClientFactory();\n     }\n+\n     @Override\n     public void emit(String emitKey, List<Metadata> metadataList) throws IOException,\n             TikaEmitterException {\n-\n         if (metadataList == null || metadataList.size() == 0) {\n             LOG.warn(\"metadataList is null or empty\");\n             return;\n         }\n-        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-        Writer writer = gzipJson ?\n-                new BufferedWriter(\n-                        new OutputStreamWriter(\n-                                new GZIPOutputStream(bos), StandardCharsets.UTF_8)) :\n-                new BufferedWriter(\n-                        new OutputStreamWriter(bos, StandardCharsets.UTF_8));\n-        try (\n-            JsonGenerator jsonGenerator = new JsonFactory().createGenerator(writer)) {\n-            jsonGenerator.writeStartArray();\n-            jsonify(jsonGenerator, emitKey, metadataList);\n-            jsonGenerator.writeEndArray();\n-        }\n-        LOG.debug(\"emitting json ({})\",\n-                new String(bos.toByteArray(), StandardCharsets.UTF_8));\n-        try {\n-            HttpClientUtil.postJson(httpClient,\n-                    url+UPDATE_PATH+\"?commitWithin=\"+getCommitWithin(), bos.toByteArray(), gzipJson);\n-        } catch (TikaClientException e) {\n-            throw new TikaEmitterException(\"can't post\", e);\n-        }\n+        List<SolrInputDocument> docsToUpdate = new ArrayList<>();\n+        addMetadataAsSolrInputDocuments(emitKey, metadataList, docsToUpdate);\n+        emitSolrBatch(docsToUpdate);\n     }\n \n-    @Override\n-    public void emit(List<EmitData> batch) throws IOException,\n-            TikaEmitterException {\n-        if (batch == null || batch.size() == 0) {\n-            LOG.warn(\"batch is null or empty\");\n-            return;\n-        }\n-        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-        Writer writer = gzipJson ?\n-                new BufferedWriter(\n-                        new OutputStreamWriter(\n-                                new GZIPOutputStream(bos), StandardCharsets.UTF_8)) :\n-            new BufferedWriter(\n-                new OutputStreamWriter(bos, StandardCharsets.UTF_8));\n-        try (JsonGenerator jsonGenerator = new JsonFactory().createGenerator(writer)) {\n-            jsonGenerator.writeStartArray();\n-            for (EmitData d : batch) {\n-                jsonify(jsonGenerator, d.getEmitKey().getKey(), d.getMetadataList());\n-            }\n-            jsonGenerator.writeEndArray();\n-        }\n-        LOG.debug(\"emitting json ({})\",\n-                new String(bos.toByteArray(), StandardCharsets.UTF_8));\n-        try {\n-            HttpClientUtil.postJson(httpClient,\n-                    url+UPDATE_PATH+\"?commitWithin=\"+getCommitWithin(),\n-                    bos.toByteArray(), gzipJson);\n-        } catch (TikaClientException e) {\n-            throw new TikaEmitterException(\"can't post\", e);\n-        }\n-    }\n-\n-    private void jsonify(JsonGenerator jsonGenerator, String emitKey, List<Metadata> metadataList) throws IOException {\n-        metadataList.get(0).set(idField, emitKey);\n+    private void addMetadataAsSolrInputDocuments(String emitKey, List<Metadata> metadataList, List<SolrInputDocument> docsToUpdate) throws IOException, TikaEmitterException {\n+        SolrInputDocument solrInputDocument = new SolrInputDocument();\n+        solrInputDocument.setField(idField, emitKey);\n         if (attachmentStrategy == AttachmentStrategy.SKIP ||\n-            metadataList.size() == 1) {\n-            jsonify(metadataList.get(0), jsonGenerator);\n+                metadataList.size() == 1) {\n+            addMetadataToSolrInputDocument(metadataList.get(0), solrInputDocument);\n         } else if (attachmentStrategy == AttachmentStrategy.CONCATENATE_CONTENT) {\n             //this only handles text for now, not xhtml\n             StringBuilder sb = new StringBuilder();\n@@ -151,47 +105,60 @@ private void jsonify(JsonGenerator jsonGenerator, String emitKey, List<Metadata>\n             }\n             Metadata parent = metadataList.get(0);\n             parent.set(getContentField(), sb.toString());\n-            jsonify(parent, jsonGenerator);\n+            addMetadataToSolrInputDocument(parent, solrInputDocument);\n         } else if (attachmentStrategy == AttachmentStrategy.PARENT_CHILD) {\n-            jsonify(metadataList.get(0), jsonGenerator, false);\n-            jsonGenerator.writeArrayFieldStart(ATTACHMENTS);\n-\n+            addMetadataToSolrInputDocument(metadataList.get(0), solrInputDocument);\n             for (int i = 1; i < metadataList.size(); i++) {\n+                SolrInputDocument childSolrInputDocument = new SolrInputDocument();\n                 Metadata m = metadataList.get(i);\n-                m.set(idField, UUID.randomUUID().toString());\n-                jsonify(m, jsonGenerator);\n+                childSolrInputDocument.setField(idField, UUID.randomUUID().toString());\n+                addMetadataToSolrInputDocument(m, childSolrInputDocument);\n             }\n-            jsonGenerator.writeEndArray();\n-            jsonGenerator.writeEndObject();\n         } else {\n             throw new IllegalArgumentException(\"I don't yet support this attachment strategy: \"\n                     + attachmentStrategy);\n         }\n+        docsToUpdate.add(solrInputDocument);\n+    }\n+\n+    @Override\n+    public void emit(List<EmitData> batch) throws IOException,\n+            TikaEmitterException {\n+        if (batch == null || batch.size() == 0) {\n+            LOG.warn(\"batch is null or empty\");\n+            return;\n+        }\n+        List<SolrInputDocument> docsToUpdate = new ArrayList<>();\n+        for (EmitData d : batch) {\n+            addMetadataAsSolrInputDocuments(d.getEmitKey().getKey(), d.getMetadataList(), docsToUpdate);\n+        }\n+        emitSolrBatch(docsToUpdate);\n     }\n \n-    private void jsonify(Metadata metadata, JsonGenerator jsonGenerator, boolean writeEndObject) throws IOException {\n-        jsonGenerator.writeStartObject();\n+    private void emitSolrBatch(List<SolrInputDocument> docsToUpdate) throws IOException, TikaEmitterException {\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Emitting solr doc batch: {}\", docsToUpdate);\n+        }\n+        if (!docsToUpdate.isEmpty()) {\n+            try {\n+                solrClient.add(solrCollection, docsToUpdate);\n+            } catch (SolrServerException e) {\n+                throw new TikaEmitterException(\"Could not add batch to solr\", e);\n+            }\n+        }\n+    }\n+\n+    private void addMetadataToSolrInputDocument(Metadata metadata, SolrInputDocument solrInputDocument) throws IOException {\n         for (String n : metadata.names()) {\n             String[] vals = metadata.getValues(n);\n             if (vals.length == 0) {\n                 continue;\n             } else if (vals.length == 1) {\n-                jsonGenerator.writeStringField(n, vals[0]);\n+                solrInputDocument.setField(n, vals[0]);\n             } else if (vals.length > 1) {\n-                jsonGenerator.writeArrayFieldStart(n);\n-                for (String val : vals) {\n-                    jsonGenerator.writeString(val);\n-                }\n-                jsonGenerator.writeEndArray();\n+                solrInputDocument.setField(n, vals);\n             }\n         }\n-        if (writeEndObject) {\n-            jsonGenerator.writeEndObject();\n-        }\n-    }\n-\n-    private void jsonify(Metadata metadata, JsonGenerator jsonGenerator) throws IOException {\n-        jsonify(metadata, jsonGenerator, true);\n     }\n \n     /**\n@@ -215,29 +182,28 @@ public void setAttachmentStrategy(String attachmentStrategy) {\n         } else if (attachmentStrategy.equals(\"parent-child\")) {\n             this.attachmentStrategy = AttachmentStrategy.PARENT_CHILD;\n         } else {\n-            throw new IllegalArgumentException(\"Expected 'skip', 'concatenate-content' or \"+\n+            throw new IllegalArgumentException(\"Expected 'skip', 'concatenate-content' or \" +\n                     \"'parent-child'. I regret I do not recognize: \" + attachmentStrategy);\n         }\n     }\n \n-    /**\n-     * Specify the url for Solr\n-     * @param url\n-     */\n     @Field\n-    public void setUrl(String url) {\n-        if (url.endsWith(\"/\")) {\n-            url = url.substring(0, url.length()-1);\n-        }\n-        this.url = url;\n+    public void setConnectionTimeout(int connectionTimeout) {\n+        this.connectionTimeout = connectionTimeout;\n+    }\n+\n+    @Field\n+    public void setSocketTimeout(int socketTimeout) {\n+        this.socketTimeout = socketTimeout;\n     }\n \n     /**\n      * This is the field _after_ metadata mappings have been applied\n      * that contains the \"content\" for each metadata object.\n-     *\n+     * <p>\n      * This is the field that is used if {@link #attachmentStrategy}\n      * is {@link AttachmentStrategy#CONCATENATE_CONTENT}.\n+     *\n      * @param contentField\n      */\n     @Field\n@@ -269,7 +235,27 @@ public void setIdField(String idField) {\n         this.idField = idField;\n     }\n \n-    //TODO -- add other httpclient configurations\n+    @Field\n+    public void setSolrCollection(String solrCollection) {\n+        this.solrCollection = solrCollection;\n+    }\n+\n+    @Field\n+    public void setSolrUrls(List<String> solrUrls) {\n+        this.solrUrls = solrUrls;\n+    }\n+\n+    @Field\n+    public void setSolrZkHosts(List<String> solrZkHosts) {\n+        this.solrZkHosts = solrZkHosts;\n+    }\n+\n+    @Field\n+    public void setSolrZkChroot(String solrZkChroot) {\n+        this.solrZkChroot = solrZkChroot;\n+    }\n+\n+    //TODO -- add other httpclient configurations??\n     @Field\n     public void setUserName(String userName) {\n         httpClientFactory.setUserName(userName);\n@@ -297,13 +283,30 @@ public void setProxyPort(int proxyPort) {\n \n     @Override\n     public void initialize(Map<String, Param> params) throws TikaConfigException {\n-        //TODO: build the client here?\n-        httpClient = httpClientFactory.build();\n+        if (solrUrls == null || solrUrls.isEmpty()) {\n+            solrClient = new CloudSolrClient.Builder(solrZkHosts, Optional.ofNullable(solrZkChroot))\n+                    .withConnectionTimeout(connectionTimeout)\n+                    .withSocketTimeout(socketTimeout)\n+                    .withHttpClient(httpClientFactory.build())\n+                    .build();\n+        } else {\n+            solrClient = new LBHttpSolrClient.Builder()\n+                    .withConnectionTimeout(connectionTimeout)\n+                    .withSocketTimeout(socketTimeout)\n+                    .withHttpClient(httpClientFactory.build())\n+                    .withBaseSolrUrls(solrUrls.toArray(new String[]{})).build();\n+        }\n     }\n \n     @Override\n     public void checkInitialization(InitializableProblemHandler problemHandler) throws TikaConfigException {\n-\n+        mustNotBeEmpty(\"solrCollection\", this.solrCollection);\n+        mustNotBeEmpty(\"urlFieldName\", this.idField);\n+        if ((this.solrUrls == null || this.solrUrls.isEmpty()) && (this.solrZkHosts == null || this.solrZkHosts.isEmpty())) {\n+            throw new IllegalArgumentException(\"expected either param solrUrls or param solrZkHosts, but neither was specified\");\n+        }\n+        if (this.solrUrls != null && !this.solrUrls.isEmpty() && this.solrZkHosts != null && !this.solrZkHosts.isEmpty()) {\n+            throw new IllegalArgumentException(\"expected either param solrUrls or param solrZkHosts, but both were specified\");\n+        }\n     }\n-\n }"
  },
  {
    "sha": "069e7a2f224159e9fa30f380ed15d14fc6f954f8",
    "filename": "tika-pipes/tika-emitters/tika-emitter-solr/src/test/java/org/apache/tika/pipes/emitter/solr/TestBasic.java",
    "status": "removed",
    "additions": 0,
    "deletions": 88,
    "changes": 88,
    "blob_url": "https://github.com/apache/tika/blob/5fd3e67d057e030fc1ecfedcbaee15b5a458431b/tika-pipes/tika-emitters/tika-emitter-solr/src/test/java/org/apache/tika/pipes/emitter/solr/TestBasic.java",
    "raw_url": "https://github.com/apache/tika/raw/5fd3e67d057e030fc1ecfedcbaee15b5a458431b/tika-pipes/tika-emitters/tika-emitter-solr/src/test/java/org/apache/tika/pipes/emitter/solr/TestBasic.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-emitters/tika-emitter-solr/src/test/java/org/apache/tika/pipes/emitter/solr/TestBasic.java?ref=5fd3e67d057e030fc1ecfedcbaee15b5a458431b",
    "patch": "@@ -1,88 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.tika.pipes.emitter.solr;\n-\n-\n-import org.apache.tika.config.TikaConfig;\n-import org.apache.tika.exception.TikaException;\n-import org.apache.tika.pipes.emitter.EmitData;\n-import org.apache.tika.pipes.emitter.EmitKey;\n-import org.apache.tika.pipes.emitter.Emitter;\n-import org.apache.tika.metadata.Metadata;\n-import org.apache.tika.metadata.TikaCoreProperties;\n-import org.apache.tika.metadata.filter.MetadataFilter;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-@Ignore(\"requires solr to be up and running\")\n-public class TestBasic {\n-\n-    @Test\n-    public void testBasic() throws Exception {\n-        TikaConfig tikaConfig = new TikaConfig(\n-                TestBasic.class.getResourceAsStream(\"/tika-config-simple-emitter.xml\"));\n-        Emitter emitter = tikaConfig.getEmitterManager().getEmitter(\"solr1\");\n-        List<Metadata> metadataList = getParentChild(tikaConfig,\n-                \"id1\", 2);\n-\n-        emitter.emit(\"1\", metadataList);\n-    }\n-\n-    @Test\n-    public void testBatch() throws Exception {\n-        TikaConfig tikaConfig = new TikaConfig(\n-                TestBasic.class.getResourceAsStream(\"/tika-config-simple-emitter.xml\"));\n-        Emitter emitter = tikaConfig.getEmitterManager().getEmitter(\"solr2\");\n-        List<EmitData> emitData = new ArrayList<>();\n-        for (int i = 0; i < 100; i++) {\n-            List<Metadata> metadataList = getParentChild(tikaConfig,\n-                    \"batch_\"+i, 4);\n-            emitData.add(new EmitData(\n-                    new EmitKey(emitter.getName(),  \"batch_\"+i),\n-                    metadataList));\n-        }\n-        emitter.emit(emitData);\n-    }\n-\n-    private List<Metadata> getParentChild(TikaConfig tikaConfig,\n-                                          String id, int numChildren) throws TikaException {\n-        List<Metadata> metadataList = new ArrayList<>();\n-        MetadataFilter filter = tikaConfig.getMetadataFilter();\n-\n-        Metadata m1 = new Metadata();\n-        m1.set(\"id\", id);\n-        m1.set(Metadata.CONTENT_LENGTH, \"314159\");\n-        m1.set(TikaCoreProperties.TIKA_CONTENT, \"the quick brown\");\n-        m1.set(TikaCoreProperties.TITLE, \"this is the first title\");\n-        m1.add(TikaCoreProperties.CREATOR, \"firstAuthor\");\n-        m1.add(TikaCoreProperties.CREATOR, \"secondAuthor\");\n-        filter.filter(m1);\n-        metadataList.add(m1);\n-        for (int i = 1; i < numChildren; i++ ) {\n-            Metadata m2 = new Metadata();\n-            m2.set(TikaCoreProperties.EMBEDDED_RESOURCE_PATH, \"/path_to_this.txt\");\n-            m2.set(TikaCoreProperties.TIKA_CONTENT, \"fox jumped over the lazy \" + i);\n-            filter.filter(m2);\n-            metadataList.add(m2);\n-        }\n-        return metadataList;\n-    }\n-\n-}"
  },
  {
    "sha": "92b6d56f3a785708b236010611d938788bda4a3f",
    "filename": "tika-pipes/tika-emitters/tika-emitter-solr/src/test/resources/log4j.properties",
    "status": "removed",
    "additions": 0,
    "deletions": 24,
    "changes": 24,
    "blob_url": "https://github.com/apache/tika/blob/5fd3e67d057e030fc1ecfedcbaee15b5a458431b/tika-pipes/tika-emitters/tika-emitter-solr/src/test/resources/log4j.properties",
    "raw_url": "https://github.com/apache/tika/raw/5fd3e67d057e030fc1ecfedcbaee15b5a458431b/tika-pipes/tika-emitters/tika-emitter-solr/src/test/resources/log4j.properties",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-emitters/tika-emitter-solr/src/test/resources/log4j.properties?ref=5fd3e67d057e030fc1ecfedcbaee15b5a458431b",
    "patch": "@@ -1,24 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one or more\n-# contributor license agreements.  See the NOTICE file distributed with\n-# this work for additional information regarding copyright ownership.\n-# The ASF licenses this file to You under the Apache License, Version 2.0\n-# (the \"License\"); you may not use this file except in compliance with\n-# the License.  You may obtain a copy of the License at\n-#\n-#     http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-\n-#info,debug, error,fatal ...\n-log4j.rootLogger=debug,stderr\n-\n-#console\n-log4j.appender.stderr=org.apache.log4j.ConsoleAppender\n-log4j.appender.stderr.layout=org.apache.log4j.PatternLayout\n-log4j.appender.stderr.Target=System.err\n-\n-log4j.appender.stderr.layout.ConversionPattern= %-5p %m%n"
  },
  {
    "sha": "644f0a4a6dcff403d19da89c87f024ea96fb2d6d",
    "filename": "tika-pipes/tika-emitters/tika-emitter-solr/src/test/resources/tika-config-simple-emitter.xml",
    "status": "removed",
    "additions": 0,
    "deletions": 54,
    "changes": 54,
    "blob_url": "https://github.com/apache/tika/blob/5fd3e67d057e030fc1ecfedcbaee15b5a458431b/tika-pipes/tika-emitters/tika-emitter-solr/src/test/resources/tika-config-simple-emitter.xml",
    "raw_url": "https://github.com/apache/tika/raw/5fd3e67d057e030fc1ecfedcbaee15b5a458431b/tika-pipes/tika-emitters/tika-emitter-solr/src/test/resources/tika-config-simple-emitter.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-emitters/tika-emitter-solr/src/test/resources/tika-config-simple-emitter.xml?ref=5fd3e67d057e030fc1ecfedcbaee15b5a458431b",
    "patch": "@@ -1,54 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n-<!--\n-  Licensed to the Apache Software Foundation (ASF) under one\n-  or more contributor license agreements.  See the NOTICE file\n-  distributed with this work for additional information\n-  regarding copyright ownership.  The ASF licenses this file\n-  to you under the Apache License, Version 2.0 (the\n-  \"License\"); you may not use this file except in compliance\n-  with the License.  You may obtain a copy of the License at\n-\n-    http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing,\n-  software distributed under the License is distributed on an\n-  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-  KIND, either express or implied.  See the License for the\n-  specific language governing permissions and limitations\n-  under the License.\n--->\n-<properties>\n-    <metadataFilters>\n-        <metadataFilter class=\"org.apache.tika.metadata.filter.FieldNameMappingFilter\">\n-            <params>\n-                <param name=\"mappings\" type=\"list\">\n-                    <string>X-TIKA:content->content</string>\n-                    <string>X-TIKA:embedded_resource_path->embedded_path</string>\n-                    <string>Content-Length->length</string>\n-                    <string>dc:creator->creators</string>\n-                    <string>dc:title->title</string>\n-                </param>\n-            </params>\n-        </metadataFilter>\n-    </metadataFilters>\n-    <emitters>\n-        <emitter class=\"org.apache.tika.pipes.emitter.solr.SolrEmitter\">\n-            <params>\n-                <param name=\"name\" type=\"string\">solr1</param>\n-                <param name=\"url\" type=\"string\">http://localhost:8983/solr/tika-test</param>\n-                <param name=\"attachmentStrategy\" type=\"string\">concatenate-content</param>\n-                <param name=\"contentField\" type=\"string\">content</param>\n-                <param name=\"commitWithin\" type=\"int\">10</param>\n-            </params>\n-        </emitter>\n-        <emitter class=\"org.apache.tika.pipes.emitter.solr.SolrEmitter\">\n-            <params>\n-                <param name=\"name\" type=\"string\">solr2</param>\n-                <param name=\"url\" type=\"string\">http://localhost:8983/solr/tika-test</param>\n-                <param name=\"attachmentStrategy\" type=\"string\">parent-child</param>\n-                <param name=\"contentField\" type=\"string\">content</param>\n-                <param name=\"commitWithin\" type=\"int\">10</param>\n-            </params>\n-        </emitter>\n-    </emitters>\n-</properties>\n\\ No newline at end of file"
  },
  {
    "sha": "2ff085140cb06b1533a39934c7293a1aa3ab5733",
    "filename": "tika-pipes/tika-fetch-iterators/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-fetch-iterators/pom.xml",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-fetch-iterators/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-fetch-iterators/pom.xml?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -39,5 +39,6 @@\n         <module>tika-fetch-iterator-csv</module>\n         <module>tika-fetch-iterator-jdbc</module>\n         <module>tika-fetch-iterator-s3</module>\n+        <module>tika-fetch-iterator-solr</module>\n     </modules>\n </project>"
  },
  {
    "sha": "c183788b7a9426f27eadc789111e04a1c4487456",
    "filename": "tika-pipes/tika-fetch-iterators/tika-fetch-iterator-solr/pom.xml",
    "status": "added",
    "additions": 124,
    "deletions": 0,
    "changes": 124,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-fetch-iterators/tika-fetch-iterator-solr/pom.xml",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-fetch-iterators/tika-fetch-iterator-solr/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-fetch-iterators/tika-fetch-iterator-solr/pom.xml?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.apache.tika</groupId>\n+        <artifactId>tika-fetch-iterators</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>tika-fetch-iterator-solr</artifactId>\n+    \n+    <name>Apache Tika Fetch Iterator - Solr</name>\n+    <url>http://tika.apache.org/</url>\n+    \n+    <dependencies>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>tika-core</artifactId>\n+            <version>${project.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.solr</groupId>\n+            <artifactId>solr-solrj</artifactId>\n+            <version>${solrj.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>tika-httpclient-commons</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifestEntries>\n+                            <Automatic-Module-Name>org.apache.tika.pipes.fetchiterator.solr</Automatic-Module-Name>\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>test-jar</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-shade-plugin</artifactId>\n+                <version>${maven.shade.version}</version>\n+                <executions>\n+                    <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>shade</goal>\n+                        </goals>\n+                        <configuration>\n+                            <createDependencyReducedPom>\n+                                false\n+                            </createDependencyReducedPom>\n+                            <!-- <filters> -->\n+                            <filters>\n+                                <filter>\n+                                    <artifact>*:*</artifact>\n+                                    <excludes>\n+                                        <exclude>META-INF/*</exclude>\n+                                        <exclude>LICENSE.txt</exclude>\n+                                        <exclude>NOTICE.txt</exclude>\n+                                    </excludes>\n+                                </filter>\n+                            </filters>\n+                            <transformers>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n+                                    <resource>META-INF/LICENSE</resource>\n+                                    <file>target/classes/META-INF/LICENSE</file>\n+                                </transformer>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n+                                    <resource>META-INF/NOTICE</resource>\n+                                    <file>target/classes/META-INF/NOTICE</file>\n+                                </transformer>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n+                                    <resource>META-INF/DEPENDENCIES</resource>\n+                                    <file>target/classes/META-INF/DEPENDENCIES</file>\n+                                </transformer>\n+                            </transformers>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+        </plugins>\n+    </build>\n+</project>"
  },
  {
    "sha": "d518287e86a5b24be754897d43d6afc99bd57b1e",
    "filename": "tika-pipes/tika-fetch-iterators/tika-fetch-iterator-solr/src/main/java/org/apache/tika/pipes/fetchiterator/solr/SolrFetchIterator.java",
    "status": "added",
    "additions": 257,
    "deletions": 0,
    "changes": 257,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-fetch-iterators/tika-fetch-iterator-solr/src/main/java/org/apache/tika/pipes/fetchiterator/solr/SolrFetchIterator.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-fetch-iterators/tika-fetch-iterator-solr/src/main/java/org/apache/tika/pipes/fetchiterator/solr/SolrFetchIterator.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-fetch-iterators/tika-fetch-iterator-solr/src/main/java/org/apache/tika/pipes/fetchiterator/solr/SolrFetchIterator.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,257 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.tika.pipes.fetchiterator.solr;\n+\n+import org.apache.solr.client.solrj.SolrClient;\n+import org.apache.solr.client.solrj.SolrQuery;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.impl.CloudSolrClient;\n+import org.apache.solr.client.solrj.impl.LBHttpSolrClient;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.apache.solr.common.params.CursorMarkParams;\n+import org.apache.tika.client.HttpClientFactory;\n+import org.apache.tika.config.Field;\n+import org.apache.tika.config.Initializable;\n+import org.apache.tika.config.InitializableProblemHandler;\n+import org.apache.tika.exception.TikaConfigException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.pipes.emitter.EmitKey;\n+import org.apache.tika.pipes.fetcher.FetchKey;\n+import org.apache.tika.pipes.fetchiterator.FetchEmitTuple;\n+import org.apache.tika.pipes.fetchiterator.FetchIterator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.tika.config.TikaConfig.mustNotBeEmpty;\n+\n+/**\n+ * Iterates through results from a Solr query.\n+ */\n+public class SolrFetchIterator extends FetchIterator implements Initializable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SolrFetchIterator.class);\n+\n+    private String solrCollection;\n+    /**\n+     * You can specify solrUrls, or you can specify solrZkHosts and use use zookeeper to determine the solr server urls.\n+     */\n+    private List<String> solrUrls;\n+    private List<String> solrZkHosts;\n+    private String solrZkChroot;\n+    private List<String> filters;\n+    private String idField;\n+    private String parsingIdField;\n+    private String failCountField;\n+    private String sizeFieldName;\n+    private List<String> additionalFields;\n+    private int rows = 5000;\n+    private int connectionTimeout = 10000;\n+    private int socketTimeout = 60000;\n+    private HttpClientFactory httpClientFactory;\n+\n+    public SolrFetchIterator() throws TikaConfigException {\n+        httpClientFactory = new HttpClientFactory();\n+    }\n+\n+    @Field\n+    public void setSolrZkHosts(List<String> solrZkHosts) {\n+        this.solrZkHosts = solrZkHosts;\n+    }\n+\n+    @Field\n+    public void setSolrZkChroot(String solrZkChroot) {\n+        this.solrZkChroot = solrZkChroot;\n+    }\n+\n+    @Field\n+    public void setSolrCollection(String solrCollection) {\n+        this.solrCollection = solrCollection;\n+    }\n+\n+    @Field\n+    public void setSolrUrls(List<String> solrUrls) {\n+        this.solrUrls = solrUrls;\n+    }\n+\n+    @Field\n+    public void setFilters(List<String> filters) {\n+        this.filters = filters;\n+    }\n+\n+    @Field\n+    public void setAdditionalFields(List<String> additionalFields) {\n+        this.additionalFields = additionalFields;\n+    }\n+\n+    @Field\n+    public void setIdField(String idField) {\n+        this.idField = idField;\n+    }\n+\n+    @Field\n+    public void setParsingIdField(String parsingIdField) {\n+        this.parsingIdField = parsingIdField;\n+    }\n+\n+    @Field\n+    public void setFailCountField(String failCountField) {\n+        this.failCountField = failCountField;\n+    }\n+\n+    @Field\n+    public void setSizeFieldName(String sizeFieldName) {\n+        this.sizeFieldName = sizeFieldName;\n+    }\n+\n+    @Field\n+    public void setRows(int rows) {\n+        this.rows = rows;\n+    }\n+\n+    @Field\n+    public void setConnectionTimeout(int connectionTimeout) {\n+        this.connectionTimeout = connectionTimeout;\n+    }\n+\n+    @Field\n+    public void setSocketTimeout(int socketTimeout) {\n+        this.socketTimeout = socketTimeout;\n+    }\n+\n+    //TODO -- add other httpclient configurations??\n+    @Field\n+    public void setUserName(String userName) {\n+        httpClientFactory.setUserName(userName);\n+    }\n+\n+    @Field\n+    public void setPassword(String password) {\n+        httpClientFactory.setPassword(password);\n+    }\n+\n+    @Field\n+    public void setAuthScheme(String authScheme) {\n+        httpClientFactory.setAuthScheme(authScheme);\n+    }\n+\n+    @Field\n+    public void setProxyHost(String proxyHost) {\n+        httpClientFactory.setProxyHost(proxyHost);\n+    }\n+\n+    @Field\n+    public void setProxyPort(int proxyPort) {\n+        httpClientFactory.setProxyPort(proxyPort);\n+    }\n+\n+    @Override\n+    protected void enqueue() throws InterruptedException, IOException, TimeoutException {\n+        String fetcherName = getFetcherName();\n+        String emitterName = getEmitterName();\n+\n+        try (SolrClient solrClient = createSolrClient()) {\n+            int fileCount = 0;\n+\n+            SolrQuery query = new SolrQuery();\n+            query.set(\"q\", \"*:*\");\n+            query.setRows(rows);\n+\n+            Set<String> allFields = new HashSet<>();\n+            allFields.add(\"id\");\n+            allFields.add(idField);\n+            allFields.add(parsingIdField);\n+            allFields.add(failCountField);\n+            allFields.add(sizeFieldName);\n+            allFields.addAll(additionalFields);\n+\n+            query.setFields(allFields.toArray(new String[]{}));\n+            query.setFilterQueries(filters.toArray(new String[]{}));\n+            query.setSort(SolrQuery.SortClause.asc(parsingIdField));\n+            query.addSort(SolrQuery.SortClause.asc(\"id\"));\n+            query.setFilterQueries(filters.toArray(new String[]{}));\n+\n+            String cursorMark = CursorMarkParams.CURSOR_MARK_START;\n+            boolean done = false;\n+            while (!done) {\n+                query.set(CursorMarkParams.CURSOR_MARK_PARAM, cursorMark);\n+                QueryResponse qr = solrClient.query(solrCollection, query);\n+                long totalToFetch = qr.getResults().getNumFound();\n+                String nextCursorMark = qr.getNextCursorMark();\n+                LOGGER.info(\"Query to fetch files to parse collection={}, q={}, onCount={}, totalCount={}\", solrCollection, query, fileCount, totalToFetch);\n+                for (SolrDocument sd : qr.getResults()) {\n+                    ++fileCount;\n+                    String fetchKey = (String) sd.getFieldValue(idField);\n+                    String emitKey = (String) sd.getFieldValue(idField);\n+                    Metadata metadata = new Metadata();\n+                    for (String nextField : allFields) {\n+                        metadata.add(nextField, (String) sd.getFieldValue(nextField));\n+                    }\n+                    tryToAdd(new FetchEmitTuple(\n+                            new FetchKey(fetcherName, fetchKey),\n+                            new EmitKey(emitterName, emitKey), metadata,\n+                            getOnParseException()));\n+                }\n+                if (cursorMark.equals(nextCursorMark)) {\n+                    done = true;\n+                }\n+                cursorMark = nextCursorMark;\n+            }\n+        } catch (SolrServerException | TikaConfigException e) {\n+            LOGGER.error(\"Could not iterate through solr\", e);\n+        }\n+    }\n+\n+    private SolrClient createSolrClient() throws TikaConfigException {\n+        if (solrUrls == null || solrUrls.isEmpty()) {\n+            return new CloudSolrClient.Builder(solrZkHosts, Optional.ofNullable(solrZkChroot))\n+                    .withHttpClient(httpClientFactory.build())\n+                    .withConnectionTimeout(connectionTimeout)\n+                    .withSocketTimeout(socketTimeout)\n+                    .build();\n+        }\n+        return new LBHttpSolrClient.Builder()\n+                .withConnectionTimeout(connectionTimeout)\n+                .withSocketTimeout(socketTimeout)\n+                .withHttpClient(httpClientFactory.build())\n+                .withBaseSolrUrls(solrUrls.toArray(new String[]{})).build();\n+    }\n+\n+    @Override\n+    public void checkInitialization(InitializableProblemHandler problemHandler)\n+            throws TikaConfigException {\n+        super.checkInitialization(problemHandler);\n+        mustNotBeEmpty(\"solrCollection\", this.solrCollection);\n+        mustNotBeEmpty(\"urlFieldName\", this.idField);\n+        mustNotBeEmpty(\"parsingIdField\", this.parsingIdField);\n+        mustNotBeEmpty(\"failCountField\", this.failCountField);\n+        mustNotBeEmpty(\"sizeFieldName\", this.sizeFieldName);\n+        if ((this.solrUrls == null || this.solrUrls.isEmpty()) && (this.solrZkHosts == null || this.solrZkHosts.isEmpty())) {\n+            throw new IllegalArgumentException(\"expected either param solrUrls or param solrZkHosts, but neither was specified\");\n+        }\n+        if (this.solrUrls != null && !this.solrUrls.isEmpty() && this.solrZkHosts != null && !this.solrZkHosts.isEmpty()) {\n+            throw new IllegalArgumentException(\"expected either param solrUrls or param solrZkHosts, but both were specified\");\n+        }\n+    }\n+}"
  },
  {
    "sha": "bbaa408000c643cf4ae3ae7652bf12a3572f08da",
    "filename": "tika-pipes/tika-pipes-integration-tests/pom.xml",
    "status": "modified",
    "additions": 24,
    "deletions": 0,
    "changes": 24,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/pom.xml",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/pom.xml?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -66,11 +66,35 @@\n             <version>${project.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>tika-fetch-iterator-solr</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>${project.groupId}</groupId>\n+            <artifactId>tika-emitter-solr</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>testcontainers</artifactId>\n+            <version>1.15.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.solr</groupId>\n+            <artifactId>solr-solrj</artifactId>\n+            <version>8.8.1</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n \n </project>"
  },
  {
    "sha": "a706c351dbfe960cba71955d1eee996ae5b72f34",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr6EmitterTest.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr6EmitterTest.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr6EmitterTest.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr6EmitterTest.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,29 @@\n+package org.apache.tika.pipes.emitter.solr;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class Solr6EmitterTest extends SolrEmitterTestBase {\n+    @Rule\n+    public GenericContainer<?> solr6 = new GenericContainer<>(DockerImageName.parse(\"solr:6\"))\n+            .withExposedPorts(8983, 9983)\n+            .withCommand(\"-DzkRun\");\n+\n+    @Before\n+    public void setupTest() throws Exception {\n+        setupSolr(solr6);\n+    }\n+\n+    @Test\n+    public void testEmitWithZkHost() throws Exception {\n+        runEmitTestWithZkHost();\n+    }\n+\n+    @Test\n+    public void testEmitWithSolrUrls() throws Exception {\n+        runEmitTestWithSolrUrls();\n+    }\n+}"
  },
  {
    "sha": "2c0b8de4a2d75a96cb541a55a96166599b043589",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr7EmitterTest.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr7EmitterTest.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr7EmitterTest.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr7EmitterTest.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,29 @@\n+package org.apache.tika.pipes.emitter.solr;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class Solr7EmitterTest extends SolrEmitterTestBase {\n+    @Rule\n+    public GenericContainer<?> solr7 = new GenericContainer<>(DockerImageName.parse(\"solr:7\"))\n+            .withExposedPorts(8983, 9983)\n+            .withCommand(\"-DzkRun\");\n+\n+    @Before\n+    public void setupTest() throws Exception {\n+        setupSolr(solr7);\n+    }\n+\n+    @Test\n+    public void testEmitWithZkHost() throws Exception {\n+        runEmitTestWithZkHost();\n+    }\n+\n+    @Test\n+    public void testEmitWithSolrUrls() throws Exception {\n+        runEmitTestWithSolrUrls();\n+    }\n+}"
  },
  {
    "sha": "76ea47f5cb57b882ae9d160b1b0c9d1746d9d865",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr8EmitterTest.java",
    "status": "added",
    "additions": 29,
    "deletions": 0,
    "changes": 29,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr8EmitterTest.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr8EmitterTest.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/Solr8EmitterTest.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,29 @@\n+package org.apache.tika.pipes.emitter.solr;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class Solr8EmitterTest extends SolrEmitterTestBase {\n+    @Rule\n+    public GenericContainer<?> solr8 = new GenericContainer<>(DockerImageName.parse(\"solr:8\"))\n+            .withExposedPorts(8983, 9983)\n+            .withCommand(\"-DzkRun\");\n+\n+    @Before\n+    public void setupTest() throws Exception {\n+        setupSolr(solr8);\n+    }\n+\n+    @Test\n+    public void testEmitWithZkHost() throws Exception {\n+        runEmitTestWithZkHost();\n+    }\n+\n+    @Test\n+    public void testEmitWithSolrUrls() throws Exception {\n+        runEmitTestWithSolrUrls();\n+    }\n+}"
  },
  {
    "sha": "0b704fe19029924853312175585d6578d46df89a",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/SolrEmitterTestBase.java",
    "status": "added",
    "additions": 98,
    "deletions": 0,
    "changes": 98,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/SolrEmitterTestBase.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/SolrEmitterTestBase.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/emitter/solr/SolrEmitterTestBase.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,98 @@\n+package org.apache.tika.pipes.emitter.solr;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.solr.client.solrj.SolrClient;\n+import org.apache.solr.client.solrj.SolrQuery;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.impl.CloudSolrClient;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.apache.tika.config.TikaConfig;\n+import org.apache.tika.exception.TikaException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.metadata.Property;\n+import org.apache.tika.pipes.PipeIntegrationTests;\n+import org.junit.Assert;\n+import org.testcontainers.containers.GenericContainer;\n+import org.xml.sax.SAXException;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public abstract class SolrEmitterTestBase {\n+    private final String collection = \"testcol\";\n+    protected GenericContainer<?> solr;\n+\n+    protected void setupSolr(GenericContainer<?> solr) throws Exception {\n+        this.solr = solr;\n+        solr.execInContainer(\"/opt/solr/bin/solr\", \"create_collection\", \"-c\", collection);\n+    }\n+\n+    protected void runEmitTestWithZkHost() throws Exception {\n+        String solrHost = solr.getHost();\n+        int zkPort = solr.getMappedPort(9983);\n+        int solrPort = solr.getMappedPort(8983);\n+        String solrEndpoint = \"http://\" + solrHost + \":\" + solrPort + \"/solr\";\n+\n+        try (InputStream is =\n+                     PipeIntegrationTests.class.getResourceAsStream(\"/tika-config-solr-emitter-with-zk-host.xml\")) {\n+            String xmlContents = IOUtils.toString(is, StandardCharsets.UTF_8);\n+            xmlContents = xmlContents.replace(\"{ZK_HOST}\", solrHost + \":\" + zkPort);\n+            runTest(solrEndpoint, xmlContents);\n+        }\n+    }\n+\n+    protected void runEmitTestWithSolrUrls() throws Exception {\n+        String solrHost = solr.getHost();\n+        int solrPort = solr.getMappedPort(8983);\n+        String solrEndpoint = \"http://\" + solrHost + \":\" + solrPort + \"/solr\";\n+\n+        try (InputStream is =\n+                     PipeIntegrationTests.class.getResourceAsStream(\"/tika-config-solr-emitter-with-solr-urls.xml\")) {\n+            String xmlContents = IOUtils.toString(is, StandardCharsets.UTF_8);\n+            xmlContents = xmlContents.replace(\"{SOLR_URL}\", solrEndpoint);\n+            runTest(solrEndpoint, xmlContents);\n+        }\n+    }\n+\n+    private void runTest(String solrEndpoint, String xmlContents) throws TikaException, IOException, SAXException, SolrServerException {\n+        TikaConfig tikaConfig = new TikaConfig(new ByteArrayInputStream(xmlContents.getBytes(StandardCharsets.UTF_8)));\n+        SolrEmitter solrEmitter = (SolrEmitter)tikaConfig.getEmitterManager().getEmitter(\"solr-emitter-1\");\n+        List<Metadata> metadataList = new ArrayList<>();\n+        Metadata metadata = new Metadata();\n+        metadata.set(\"CACHE-CONTROL\", \"NO-CACHE\");\n+        metadata.set(\"Content-Encoding\", \"UTF-8\");\n+        metadata.set(\"Content-Type\", \"text/html; charset=UTF-8\");\n+        metadata.set(\"Content-Type-Hint\", \"text/html; charset=UTF-8\");\n+        metadata.set(Property.externalTextBag(\"EXPIRES\"), new String[]{\"-1\", \"-1\"});\n+        metadata.set(Property.externalTextBag(\"PRAGMA\"), new String[]{\"NO-CACHE\", \"NO-CACHE\"});\n+        metadata.set(Property.externalTextBag(\"X-Parsed-By\"), new String[]{\"org.apache.tika.parser.DefaultParser\",\n+                \"org.apache.tika.parser.html.HtmlParser\"});\n+        metadata.set(\"X-TIKA:content\", \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nbody text from the doc here \\n\\n\\n\\n\\n\\n    \");\n+        metadata.set(\"X-TIKA:content_handler\", \"ToTextContentHandler\");\n+        metadata.set(\"X-TIKA:embedded_depth\", \"0\");\n+        metadata.set(\"X-TIKA:parse_time_millis\", \"301\");\n+        metadata.set(\"dc:title\", \"SOME TITLE\");\n+        metadata.set(\"title\", \"SOME TITLE\");\n+        metadataList.add(metadata);\n+        String emitKey = \"http://127.0.0.1/path/to/page1.html\";\n+        solrEmitter.emit(emitKey, metadataList);\n+\n+        try (SolrClient solrClient = new CloudSolrClient.Builder(Collections.singletonList(solrEndpoint))\n+                .withConnectionTimeout(10000)\n+                .withSocketTimeout(60000)\n+                .build()) {\n+            solrClient.commit(collection);\n+            QueryResponse response = solrClient.query(collection, new SolrQuery(\"*:*\"));\n+            Assert.assertEquals(1, response.getResults().size());\n+            SolrDocument solrDocument = response.getResults().get(0);\n+\n+            Assert.assertEquals(emitKey, solrDocument.getFirstValue(\"id\"));\n+        }\n+    }\n+}"
  },
  {
    "sha": "6d62e85f7ae21059387db0c5b1cb009bbac1c352",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr6FetchIteratorTest.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr6FetchIteratorTest.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr6FetchIteratorTest.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr6FetchIteratorTest.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,30 @@\n+package org.apache.tika.pipes.fetchiterator.solr;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class Solr6FetchIteratorTest extends SolrFetchIteratorTestBase {\n+\n+    @Rule\n+    public GenericContainer<?> solr6 = new GenericContainer<>(DockerImageName.parse(\"solr:6\"))\n+            .withExposedPorts(8983, 9983)\n+            .withCommand(\"-DzkRun\");\n+\n+    @Before\n+    public void setupTest() throws Exception {\n+        setupSolr(solr6);\n+    }\n+\n+    @Test\n+    public void testFetchIteratorWithSolrUrls() throws Exception {\n+        runSolrToFsWithSolrUrlsTest();\n+    }\n+\n+    @Test\n+    public void testFetchIteratorWithZkHost() throws Exception {\n+        runSolrToFsWithZkHostTest();\n+    }\n+}"
  },
  {
    "sha": "ad524bcbdcfded58441f5242225846e5d3270c03",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr7FetchIteratorTest.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr7FetchIteratorTest.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr7FetchIteratorTest.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr7FetchIteratorTest.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,30 @@\n+package org.apache.tika.pipes.fetchiterator.solr;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class Solr7FetchIteratorTest extends SolrFetchIteratorTestBase {\n+\n+    @Rule\n+    public GenericContainer<?> solr7 = new GenericContainer<>(DockerImageName.parse(\"solr:7\"))\n+            .withExposedPorts(8983, 9983)\n+            .withCommand(\"-DzkRun\");\n+\n+    @Before\n+    public void setupTest() throws Exception {\n+        setupSolr(solr7);\n+    }\n+\n+    @Test\n+    public void testFetchIteratorWithSolrUrls() throws Exception {\n+        runSolrToFsWithSolrUrlsTest();\n+    }\n+\n+    @Test\n+    public void testFetchIteratorWithZkHost() throws Exception {\n+        runSolrToFsWithZkHostTest();\n+    }\n+}"
  },
  {
    "sha": "1338277ba309c3796703c29ee6f498cc4ece4542",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr8FetchIteratorTest.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr8FetchIteratorTest.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr8FetchIteratorTest.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/Solr8FetchIteratorTest.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,30 @@\n+package org.apache.tika.pipes.fetchiterator.solr;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class Solr8FetchIteratorTest extends SolrFetchIteratorTestBase {\n+\n+    @Rule\n+    public GenericContainer<?> solr8 = new GenericContainer<>(DockerImageName.parse(\"solr:8\"))\n+            .withExposedPorts(8983, 9983)\n+            .withCommand(\"-DzkRun\");\n+\n+    @Before\n+    public void setupTest() throws Exception {\n+        setupSolr(solr8);\n+    }\n+\n+    @Test\n+    public void testFetchIteratorWithSolrUrls() throws Exception {\n+        runSolrToFsWithSolrUrlsTest();\n+    }\n+\n+    @Test\n+    public void testFetchIteratorWithZkHost() throws Exception {\n+        runSolrToFsWithZkHostTest();\n+    }\n+}"
  },
  {
    "sha": "d409f675c5e88fdbc32c6cf80b561e129f66d698",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/SolrFetchIteratorTestBase.java",
    "status": "added",
    "additions": 74,
    "deletions": 0,
    "changes": 74,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/SolrFetchIteratorTestBase.java",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/SolrFetchIteratorTestBase.java",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/java/org/apache/tika/pipes/fetchiterator/solr/SolrFetchIteratorTestBase.java?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,74 @@\n+package org.apache.tika.pipes.fetchiterator.solr;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.solr.client.solrj.SolrClient;\n+import org.apache.solr.client.solrj.impl.LBHttpSolrClient;\n+import org.apache.solr.common.SolrInputDocument;\n+import org.apache.tika.config.TikaConfig;\n+import org.apache.tika.pipes.PipeIntegrationTests;\n+import org.apache.tika.pipes.fetchiterator.FetchIterator;\n+import org.junit.Assert;\n+import org.testcontainers.containers.GenericContainer;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+public abstract class SolrFetchIteratorTestBase {\n+\n+    private final String collection = \"testcol\";\n+    private final int numDocs = 42;\n+\n+    protected GenericContainer<?> solr;\n+\n+    protected void setupSolr(GenericContainer<?> solr) throws Exception {\n+        this.solr = solr;\n+        String solrHost = solr.getHost();\n+        int solrPort = solr.getMappedPort(8983);\n+        String solrEndpoint = \"http://\" + solrHost + \":\" + solrPort + \"/solr\";\n+\n+        solr.execInContainer(\"/opt/solr/bin/solr\", \"create_collection\", \"-c\", collection);\n+\n+        try (SolrClient solrClient = new LBHttpSolrClient.Builder()\n+                .withBaseSolrUrls(solrEndpoint).build()) {\n+\n+            for (int i = 0; i < numDocs; ++i) {\n+                SolrInputDocument solrDoc = new SolrInputDocument();\n+                solrDoc.setField(\"id\", \"test\" + i + \".html\");\n+                solrDoc.setField(\"path\", \"/path/to/my/test\" + i + \".html\");\n+                solrClient.add(collection, solrDoc);\n+            }\n+            solrClient.commit(collection);\n+        }\n+    }\n+\n+    protected void runSolrToFsWithSolrUrlsTest() throws Exception {\n+        String solrHost = solr.getHost();\n+        int solrPort = solr.getMappedPort(8983);\n+        try (InputStream is =\n+                     PipeIntegrationTests.class.getResourceAsStream(\"/tika-config-solr-fetch-iterator-with-solr-urls.xml\")) {\n+            String xmlContents = IOUtils.toString(is, StandardCharsets.UTF_8);\n+            xmlContents = xmlContents.replace(\"{SOLR_URL}\", \"http://\" + solrHost + \":\" + solrPort + \"/solr\");\n+            TikaConfig tikaConfig = new TikaConfig(new ByteArrayInputStream(xmlContents.getBytes(StandardCharsets.UTF_8)));\n+            FetchIterator it = tikaConfig.getFetchIterator();\n+            it.init(1);\n+            int numProcessed = it.call();\n+            Assert.assertEquals(numDocs, numProcessed);\n+        }\n+    }\n+\n+    protected void runSolrToFsWithZkHostTest() throws Exception {\n+        String solrHost = solr.getHost();\n+        int zkPort = solr.getMappedPort(9983);\n+        try (InputStream is =\n+                     PipeIntegrationTests.class.getResourceAsStream(\"/tika-config-solr-fetch-iterator-with-zk-host.xml\")) {\n+            String xmlContents = IOUtils.toString(is, StandardCharsets.UTF_8);\n+            xmlContents = xmlContents.replace(\"{ZK_HOST}\", solrHost + \":\" + zkPort);\n+            TikaConfig tikaConfig = new TikaConfig(new ByteArrayInputStream(xmlContents.getBytes(StandardCharsets.UTF_8)));\n+            FetchIterator it = tikaConfig.getFetchIterator();\n+            it.init(1);\n+            int numProcessed = it.call();\n+            Assert.assertEquals(numDocs, numProcessed);\n+        }\n+    }\n+}"
  },
  {
    "sha": "6d5b8d73c2d05bd27182e3920d3c60068765f4ae",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-emitter-with-solr-urls.xml",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-emitter-with-solr-urls.xml",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-emitter-with-solr-urls.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-emitter-with-solr-urls.xml?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<properties>\n+    <emitters>\n+        <emitter class=\"org.apache.tika.pipes.emitter.solr.SolrEmitter\">\n+            <params>\n+                <param name=\"name\" type=\"string\">solr-emitter-1</param>\n+                <param name=\"solrCollection\" type=\"string\">testcol</param>\n+                <param name=\"solrUrls\" type=\"list\">\n+                    <string>{SOLR_URL}</string>\n+                </param>\n+                <param name=\"idField\" type=\"string\">id</param>\n+                <param name=\"parsingIdField\" type=\"string\">parsing_id_i</param>\n+                <param name=\"failCountField\" type=\"string\">fail_count_i</param>\n+                <param name=\"sizeFieldName\" type=\"string\">size_i</param>\n+                <param name=\"maxParseFailures\" type=\"int\">5</param>\n+                <param name=\"rows\" type=\"int\">10</param>\n+            </params>\n+        </emitter>\n+    </emitters>\n+</properties>\n\\ No newline at end of file"
  },
  {
    "sha": "a5275d6bd9222fcb4b73d02cbc14ac9ba531ea40",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-emitter-with-zk-host.xml",
    "status": "added",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-emitter-with-zk-host.xml",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-emitter-with-zk-host.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-emitter-with-zk-host.xml?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<properties>\n+    <emitters>\n+        <emitter class=\"org.apache.tika.pipes.emitter.solr.SolrEmitter\">\n+            <params>\n+                <param name=\"name\" type=\"string\">solr-emitter-1</param>\n+                <param name=\"solrCollection\" type=\"string\">testcol</param>\n+                <param name=\"solrZkHosts\" type=\"list\">\n+                    <string>{ZK_HOST}</string>\n+                </param>\n+                <param name=\"idField\" type=\"string\">id</param>\n+                <param name=\"parsingIdField\" type=\"string\">parsing_id_i</param>\n+                <param name=\"failCountField\" type=\"string\">fail_count_i</param>\n+                <param name=\"sizeFieldName\" type=\"string\">size_i</param>\n+                <param name=\"maxParseFailures\" type=\"int\">5</param>\n+                <param name=\"rows\" type=\"int\">10</param>\n+            </params>\n+        </emitter>\n+    </emitters>\n+</properties>\n\\ No newline at end of file"
  },
  {
    "sha": "e7e204fe6097235883a1c182e776f0a4f39bc254",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-fetch-iterator-with-solr-urls.xml",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-fetch-iterator-with-solr-urls.xml",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-fetch-iterator-with-solr-urls.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-fetch-iterator-with-solr-urls.xml?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<properties>\n+    <fetchIterators>\n+        <fetchIterator class=\"org.apache.tika.pipes.fetchiterator.solr.SolrFetchIterator\">\n+            <params>\n+                <param name=\"name\" type=\"string\">solr-fetch-iterator-1</param>\n+                <param name=\"solrCollection\" type=\"string\">testcol</param>\n+                <param name=\"solrUrls\" type=\"list\">\n+                    <string>{SOLR_URL}</string>\n+                </param>\n+                <param name=\"filters\" type=\"list\">\n+                </param>\n+                <param name=\"additionalFields\" type=\"list\">\n+                </param>\n+                <param name=\"idField\" type=\"string\">url_s</param>\n+                <param name=\"parsingIdField\" type=\"string\">parsing_id_i</param>\n+                <param name=\"failCountField\" type=\"string\">fail_count_i</param>\n+                <param name=\"sizeFieldName\" type=\"string\">size_i</param>\n+                <param name=\"maxParseFailures\" type=\"int\">5</param>\n+                <param name=\"rows\" type=\"int\">10</param>\n+            </params>\n+        </fetchIterator>\n+    </fetchIterators>\n+</properties>\n\\ No newline at end of file"
  },
  {
    "sha": "4e228e6e612fbccc165c2a0fd5af74fc2a6abc75",
    "filename": "tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-fetch-iterator-with-zk-host.xml",
    "status": "added",
    "additions": 42,
    "deletions": 0,
    "changes": 42,
    "blob_url": "https://github.com/apache/tika/blob/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-fetch-iterator-with-zk-host.xml",
    "raw_url": "https://github.com/apache/tika/raw/8e99335b79db209c9044d9118e560ccf996b793a/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-fetch-iterator-with-zk-host.xml",
    "contents_url": "https://api.github.com/repos/apache/tika/contents/tika-pipes/tika-pipes-integration-tests/src/test/resources/tika-config-solr-fetch-iterator-with-zk-host.xml?ref=8e99335b79db209c9044d9118e560ccf996b793a",
    "patch": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+<properties>\n+    <fetchIterators>\n+        <fetchIterator class=\"org.apache.tika.pipes.fetchiterator.solr.SolrFetchIterator\">\n+            <params>\n+                <param name=\"name\" type=\"string\">solr-fetch-iterator-1</param>\n+                <param name=\"solrCollection\" type=\"string\">testcol</param>\n+                <param name=\"solrZkHosts\" type=\"list\">\n+                    <string>{ZK_HOST}</string>\n+                </param>\n+                <param name=\"filters\" type=\"list\">\n+                </param>\n+                <param name=\"additionalFields\" type=\"list\">\n+                </param>\n+                <param name=\"idField\" type=\"string\">url_s</param>\n+                <param name=\"parsingIdField\" type=\"string\">parsing_id_i</param>\n+                <param name=\"failCountField\" type=\"string\">fail_count_i</param>\n+                <param name=\"sizeFieldName\" type=\"string\">size_i</param>\n+                <param name=\"maxParseFailures\" type=\"int\">5</param>\n+                <param name=\"rows\" type=\"int\">10</param>\n+            </params>\n+        </fetchIterator>\n+    </fetchIterators>\n+</properties>\n\\ No newline at end of file"
  }
]
