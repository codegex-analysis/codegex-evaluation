[
  {
    "sha": "dd7c6e820cefdd1a74813043c7539203e8a1deaf",
    "filename": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java",
    "status": "modified",
    "additions": 21,
    "deletions": 20,
    "changes": 41,
    "blob_url": "https://github.com/apache/dubbo/blob/2339fe8c9e72024d9efacf77355c1b7e064eea4c/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java",
    "raw_url": "https://github.com/apache/dubbo/raw/2339fe8c9e72024d9efacf77355c1b7e064eea4c/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java",
    "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java?ref=2339fe8c9e72024d9efacf77355c1b7e064eea4c",
    "patch": "@@ -54,22 +54,23 @@\n     public ZookeeperClient connect(URL url) {\n         ZookeeperClient zookeeperClient;\n         // address format: {[username:password@]address}\n-        List<String> addressList = getURLBackupAddress(url);\n+        String addressListStr = getURLBackupAddressStr(url);\n+\n         // The field define the zookeeper server , including protocol, host, port, username, password\n-        if ((zookeeperClient = fetchAndUpdateZookeeperClientCache(addressList)) != null && zookeeperClient.isConnected()) {\n+        if ((zookeeperClient = getCachedConnectedClient(addressListStr)) != null) {\n             logger.info(\"find valid zookeeper client from the cache for address: \" + url);\n             return zookeeperClient;\n         }\n-        // avoid creating too many connectionsï¼Œ so add lock\n+        // avoid creating too many connections, so add lock\n         synchronized (zookeeperClientMap) {\n-            if ((zookeeperClient = fetchAndUpdateZookeeperClientCache(addressList)) != null && zookeeperClient.isConnected()) {\n+            if ((zookeeperClient = getCachedConnectedClient(addressListStr)) != null) {\n                 logger.info(\"find valid zookeeper client from the cache for address: \" + url);\n                 return zookeeperClient;\n             }\n \n             zookeeperClient = createZookeeperClient(url);\n             logger.info(\"No valid zookeeper client found from cache, therefore create a new client for url. \" + url);\n-            writeToClientMap(addressList, zookeeperClient);\n+            writeToClientMap(addressListStr, zookeeperClient);\n         }\n         return zookeeperClient;\n     }\n@@ -87,21 +88,23 @@ public ZookeeperClient connect(URL url) {\n      * <p>\n      * It is not private method for unit test.\n      *\n-     * @param addressList\n+     * @param addressListStr\n      * @return\n      */\n-    ZookeeperClient fetchAndUpdateZookeeperClientCache(List<String> addressList) {\n+    ZookeeperClient getCachedConnectedClient(String addressListStr) {\n+\n+        ZookeeperClient zookeeperClient = zookeeperClientMap.get(addressListStr);\n \n-        ZookeeperClient zookeeperClient = null;\n-        for (String address : addressList) {\n-            if ((zookeeperClient = zookeeperClientMap.get(address)) != null && zookeeperClient.isConnected()) {\n-                break;\n-            }\n-        }\n         if (zookeeperClient != null && zookeeperClient.isConnected()) {\n-            writeToClientMap(addressList, zookeeperClient);\n+            return zookeeperClient;\n         }\n-        return zookeeperClient;\n+        return null;\n+    }\n+\n+    String getURLBackupAddressStr(URL url) {\n+        List<String> addressList = getURLBackupAddress(url);\n+        Collections.sort(addressList);\n+        return StringUtils.join(addressList, \",\");\n     }\n \n     /**\n@@ -142,13 +145,11 @@ ZookeeperClient fetchAndUpdateZookeeperClientCache(List<String> addressList) {\n     /**\n      * write address-ZookeeperClient relationship to Map\n      *\n-     * @param addressList\n+     * @param addressListStr\n      * @param zookeeperClient\n      */\n-    void writeToClientMap(List<String> addressList, ZookeeperClient zookeeperClient) {\n-        for (String address : addressList) {\n-            zookeeperClientMap.put(address, zookeeperClient);\n-        }\n+    void writeToClientMap(String addressListStr, ZookeeperClient zookeeperClient) {\n+        zookeeperClientMap.put(addressListStr, zookeeperClient);\n     }\n \n     /**"
  },
  {
    "sha": "7b4488f9b45377e1229d1bb5b7cee551da3710ed",
    "filename": "dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporterTest.java",
    "status": "modified",
    "additions": 51,
    "deletions": 21,
    "changes": 72,
    "blob_url": "https://github.com/apache/dubbo/blob/2339fe8c9e72024d9efacf77355c1b7e064eea4c/dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporterTest.java",
    "raw_url": "https://github.com/apache/dubbo/raw/2339fe8c9e72024d9efacf77355c1b7e064eea4c/dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporterTest.java",
    "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporterTest.java?ref=2339fe8c9e72024d9efacf77355c1b7e064eea4c",
    "patch": "@@ -21,12 +21,14 @@\n import org.apache.dubbo.remoting.zookeeper.ZookeeperClient;\n import org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter;\n \n+import com.google.common.collect.Lists;\n import org.apache.curator.test.TestingServer;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.util.Collections;\n import java.util.List;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n@@ -81,7 +83,7 @@ public void testGetURLBackupAddressNoBack() {\n     }\n \n     @Test\n-    public void testFetchAndUpdateZookeeperClientCache() throws Exception {\n+    public void testGetCachedZookeeperClient() throws Exception {\n         int zkServerPort2 = NetUtils.getAvailablePort();\n         TestingServer zkServer2 = new TestingServer(zkServerPort2, true);\n \n@@ -92,21 +94,27 @@ public void testFetchAndUpdateZookeeperClientCache() throws Exception {\n         ZookeeperClient newZookeeperClient = abstractZookeeperTransporter.connect(url);\n         //just for connected\n         newZookeeperClient.getContent(\"/dubbo/test\");\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 3);\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(\"127.0.0.1:\" + zkServerPort), newZookeeperClient);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 1);\n \n-        URL url2 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort + \"/org.apache.dubbo.metadata.store.MetadataReport?address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n-        checkFetchAndUpdateCacheNotNull(url2);\n-        URL url3 = URL.valueOf(\"zookeeper://127.0.0.1:8778/org.apache.dubbo.metadata.store.MetadataReport?backup=127.0.0.1:\" + zkServerPort3 + \"&address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n-        checkFetchAndUpdateCacheNotNull(url3);\n+        List<Integer> ports = Lists.newArrayList(zkServerPort, zkServerPort2, zkServerPort3);\n+        Collections.sort(ports);\n+\n+        String cacheAddressStr = \"127.0.0.1:\" + ports.get(0) + \",\" + \"127.0.0.1:\" + ports.get(1) + \",\" + \"127.0.0.1:\" + ports.get(2);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(cacheAddressStr), newZookeeperClient);\n+\n+        URL url2 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort3 + \"/org.apache.dubbo.metadata.store.MetadataReport?backup=127.0.0.1:\" + zkServerPort + \",127.0.0.1:\" + zkServerPort2 + \"&address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n+        checkGetCacheConnectedClientNotNull(url2);\n+\n+        URL url3 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort2 + \"/org.apache.dubbo.metadata.store.MetadataReport?backup=127.0.0.1:\" + zkServerPort + \",127.0.0.1:\" + zkServerPort3 + \"&address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n+        checkGetCacheConnectedClientNotNull(url3);\n \n         zkServer2.stop();\n         zkServer3.stop();\n     }\n \n-    private void checkFetchAndUpdateCacheNotNull(URL url) {\n-        List<String> addressList = abstractZookeeperTransporter.getURLBackupAddress(url);\n-        ZookeeperClient zookeeperClient = abstractZookeeperTransporter.fetchAndUpdateZookeeperClientCache(addressList);\n+    private void checkGetCacheConnectedClientNotNull(URL url) {\n+        String addressList = abstractZookeeperTransporter.getURLBackupAddressStr(url);\n+        ZookeeperClient zookeeperClient = abstractZookeeperTransporter.getCachedConnectedClient(addressList);\n         Assertions.assertNotNull(zookeeperClient);\n     }\n \n@@ -135,7 +143,7 @@ public void testNotRepeatConnect() throws Exception {\n         TestingServer zkServer2 = new TestingServer(zkServerPort2, true);\n \n         URL url = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort + \"/org.apache.dubbo.registry.RegistryService?application=metadatareport-local-xml-provider2&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=47418&specVersion=2.7.0-SNAPSHOT&timestamp=1547102428828\");\n-        URL url2 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort2 + \"/org.apache.dubbo.metadata.store.MetadataReport?address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n+        URL url2 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort + \"/org.apache.dubbo.metadata.store.MetadataReport?backup=127.0.0.1:\" + zkServerPort2 + \"&address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n         ZookeeperClient newZookeeperClient = abstractZookeeperTransporter.connect(url);\n         //just for connected\n         newZookeeperClient.getContent(\"/dubbo/test\");\n@@ -147,7 +155,9 @@ public void testNotRepeatConnect() throws Exception {\n         newZookeeperClient2.getContent(\"/dubbo/test\");\n         Assertions.assertNotEquals(newZookeeperClient, newZookeeperClient2);\n         Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 2);\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(\"127.0.0.1:\" + zkServerPort2), newZookeeperClient2);\n+\n+        String cacheAddressStr = \"127.0.0.1:\" + Math.min(zkServerPort, zkServerPort2) + \",\" + \"127.0.0.1:\" + Math.max(zkServerPort, zkServerPort2);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(cacheAddressStr), newZookeeperClient2);\n \n         zkServer2.stop();\n     }\n@@ -161,19 +171,23 @@ public void testRepeatConnectForBackUpAdd() throws Exception {\n         TestingServer zkServer3 = new TestingServer(zkServerPort3, true);\n \n         URL url = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort + \"/org.apache.dubbo.registry.RegistryService?backup=127.0.0.1:\" + zkServerPort2 + \"&application=metadatareport-local-xml-provider2&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=47418&specVersion=2.7.0-SNAPSHOT&timestamp=1547102428828\");\n-        URL url2 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort2 + \"/org.apache.dubbo.metadata.store.MetadataReport?backup=127.0.0.1:\" + zkServerPort3 + \"&address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n+        URL url2 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort2 + \"/org.apache.dubbo.metadata.store.MetadataReport?backup=127.0.0.1:\" + zkServerPort + \"&address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n         ZookeeperClient newZookeeperClient = abstractZookeeperTransporter.connect(url);\n         //just for connected\n         newZookeeperClient.getContent(\"/dubbo/test\");\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 2);\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(\"127.0.0.1:\" + zkServerPort), newZookeeperClient);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 1);\n+\n+        String cacheAddressStr = \"127.0.0.1:\" + Math.min(zkServerPort, zkServerPort2) + \",\" + \"127.0.0.1:\" + Math.max(zkServerPort, zkServerPort2);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(cacheAddressStr), newZookeeperClient);\n \n         ZookeeperClient newZookeeperClient2 = abstractZookeeperTransporter.connect(url2);\n         //just for connected\n         newZookeeperClient2.getContent(\"/dubbo/test\");\n         Assertions.assertEquals(newZookeeperClient, newZookeeperClient2);\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 3);\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(\"127.0.0.1:\" + zkServerPort2), newZookeeperClient2);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 1);\n+\n+        String cacheAddressStr1 = \"127.0.0.1:\" + Math.min(zkServerPort, zkServerPort2) + \",\" + \"127.0.0.1:\" + Math.max(zkServerPort, zkServerPort2);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(cacheAddressStr1), newZookeeperClient2);\n \n         zkServer2.stop();\n         zkServer3.stop();\n@@ -188,18 +202,34 @@ public void testRepeatConnectForNoMatchBackUpAdd() throws Exception {\n         TestingServer zkServer3 = new TestingServer(zkServerPort3, true);\n \n         URL url = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort + \"/org.apache.dubbo.registry.RegistryService?backup=127.0.0.1:\" + zkServerPort3 + \"&application=metadatareport-local-xml-provider2&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=47418&specVersion=2.7.0-SNAPSHOT&timestamp=1547102428828\");\n-        URL url2 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort2 + \"/org.apache.dubbo.metadata.store.MetadataReport?address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n+\n         ZookeeperClient newZookeeperClient = abstractZookeeperTransporter.connect(url);\n         //just for connected\n         newZookeeperClient.getContent(\"/dubbo/test\");\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 2);\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(\"127.0.0.1:\" + zkServerPort), newZookeeperClient);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 1);\n+\n+        //\n+        URL url1 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort3 + \"/org.apache.dubbo.registry.RegistryService?backup=127.0.0.1:\" + zkServerPort + \"&application=metadatareport-local-xml-provider2&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=47418&specVersion=2.7.0-SNAPSHOT&timestamp=1547102428828\");\n+        URL url2 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort2 + \"/org.apache.dubbo.metadata.store.MetadataReport?address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n+\n+        ZookeeperClient newZookeeperClient1 = abstractZookeeperTransporter.connect(url1);\n+        //just for connected\n+        newZookeeperClient1.getContent(\"/dubbo/test\");\n+\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 1);\n+\n+        Assertions.assertEquals(newZookeeperClient, newZookeeperClient1);\n+\n+        String cacheAddressStr = \"127.0.0.1:\" + Math.min(zkServerPort, zkServerPort3) + \",\" + \"127.0.0.1:\" + Math.max(zkServerPort, zkServerPort3);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(cacheAddressStr), newZookeeperClient);\n \n         ZookeeperClient newZookeeperClient2 = abstractZookeeperTransporter.connect(url2);\n         //just for connected\n         newZookeeperClient2.getContent(\"/dubbo/test\");\n+\n         Assertions.assertNotEquals(newZookeeperClient, newZookeeperClient2);\n-        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 3);\n+        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 2);\n+\n         Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(\"127.0.0.1:\" + zkServerPort2), newZookeeperClient2);\n \n         zkServer2.stop();"
  }
]
