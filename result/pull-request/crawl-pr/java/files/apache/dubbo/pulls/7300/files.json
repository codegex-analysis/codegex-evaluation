[
  {
    "sha": "38eb1a776a9896e43d875911cd8b903949e6f6f4",
    "filename": "dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/apache/dubbo/blob/5379154176178e6275f4ba68c716ee156caf3553/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java",
    "raw_url": "https://github.com/apache/dubbo/raw/5379154176178e6275f4ba68c716ee156caf3553/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java",
    "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscovery.java?ref=5379154176178e6275f4ba68c716ee156caf3553",
    "patch": "@@ -193,7 +193,7 @@ protected void registerServiceWatcher(String serviceName, ServiceInstancesChange\n         }\n \n         CuratorWatcher watcher = watcherCaches.computeIfAbsent(path, key ->\n-                new ZookeeperServiceDiscoveryChangeWatcher(this, serviceName, listener));\n+                new ZookeeperServiceDiscoveryChangeWatcher(this, serviceName, path, listener));\n         try {\n             curatorFramework.getChildren().usingWatcher(watcher).forPath(path);\n         } catch (KeeperException.NoNodeException e) {\n@@ -209,4 +209,8 @@ protected void registerServiceWatcher(String serviceName, ServiceInstancesChange\n     private String buildServicePath(String serviceName) {\n         return rootPath + \"/\" + serviceName;\n     }\n+\n+    protected CuratorFramework getCuratorFramework() {\n+        return curatorFramework;\n+    }\n }"
  },
  {
    "sha": "d684d1609dadfb87bdef5574abba08534d95814b",
    "filename": "dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryChangeWatcher.java",
    "status": "modified",
    "additions": 30,
    "deletions": 3,
    "changes": 33,
    "blob_url": "https://github.com/apache/dubbo/blob/5379154176178e6275f4ba68c716ee156caf3553/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryChangeWatcher.java",
    "raw_url": "https://github.com/apache/dubbo/raw/5379154176178e6275f4ba68c716ee156caf3553/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryChangeWatcher.java",
    "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperServiceDiscoveryChangeWatcher.java?ref=5379154176178e6275f4ba68c716ee156caf3553",
    "patch": "@@ -16,14 +16,20 @@\n  */\n package org.apache.dubbo.registry.zookeeper;\n \n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n import org.apache.dubbo.registry.client.ServiceDiscovery;\n+import org.apache.dubbo.registry.client.ServiceInstance;\n import org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent;\n import org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener;\n \n import org.apache.curator.framework.api.CuratorWatcher;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n \n+import java.util.List;\n+\n import static org.apache.zookeeper.Watcher.Event.EventType.NodeChildrenChanged;\n import static org.apache.zookeeper.Watcher.Event.EventType.NodeDataChanged;\n \n@@ -35,19 +41,26 @@\n  * @since 2.7.5\n  */\n public class ZookeeperServiceDiscoveryChangeWatcher implements CuratorWatcher {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n     private ServiceInstancesChangedListener listener;\n \n     private final ZookeeperServiceDiscovery zookeeperServiceDiscovery;\n \n+    private final String path;\n+\n     private boolean keepWatching = true;\n \n     private final String serviceName;\n \n     public ZookeeperServiceDiscoveryChangeWatcher(ZookeeperServiceDiscovery zookeeperServiceDiscovery,\n                                                   String serviceName,\n+                                                  String path,\n                                                   ServiceInstancesChangedListener listener) {\n         this.zookeeperServiceDiscovery = zookeeperServiceDiscovery;\n         this.serviceName = serviceName;\n+        this.path = path;\n         this.listener = listener;\n     }\n \n@@ -58,10 +71,24 @@ public void process(WatchedEvent event) throws Exception {\n \n         if (NodeChildrenChanged.equals(eventType) || NodeDataChanged.equals(eventType)) {\n             if (shouldKeepWatching()) {\n-                listener.onEvent(new ServiceInstancesChangedEvent(serviceName, zookeeperServiceDiscovery.getInstances(serviceName)));\n-                zookeeperServiceDiscovery.registerServiceWatcher(serviceName, listener);\n-                zookeeperServiceDiscovery.dispatchServiceInstancesChangedEvent(serviceName);\n+                List<ServiceInstance> instances = zookeeperServiceDiscovery.getInstances(serviceName);\n+                listener.onEvent(new ServiceInstancesChangedEvent(serviceName, instances));\n+                zookeeperServiceDiscovery.dispatchServiceInstancesChangedEvent(serviceName, instances);\n+                registerSelfWatcher();\n+            }\n+        }\n+    }\n+\n+    private void registerSelfWatcher() {\n+        try {\n+            zookeeperServiceDiscovery.getCuratorFramework().getChildren().usingWatcher(this).forPath(path);\n+        } catch (KeeperException.NoNodeException e) {\n+            // ignored\n+            if (logger.isErrorEnabled()) {\n+                logger.error(e.getMessage());\n             }\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e.getMessage(), e);\n         }\n     }\n "
  }
]
