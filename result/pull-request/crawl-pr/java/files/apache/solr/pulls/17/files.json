[
  {
    "sha": "e2ec3c915554c2af691826b25dc7a6f0c41ffb7e",
    "filename": "solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -84,14 +84,14 @@ public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n       throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Failure auto-creating collection\", e);\n     }\n \n-    // The configSet is read from ZK and populated.  Ignore CD's pre-existing configSet; only populated in standalone\n-    final String configSetName;\n-    try {\n-      configSetName = zkController.getZkStateReader().readConfigName(colName);\n-      cd.setConfigSet(configSetName);\n-    } catch (KeeperException ex) {\n-      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Trouble resolving configSet for collection \" + colName + \": \" + ex.getMessage());\n-    }\n+    // The configSet is read from ZK and populated.\n+    // Ignore CD's pre-existing configSet; only populated in standalone\n+    final String configSetName =\n+        zkController\n+            .getClusterState()\n+            .getCollection(colName)\n+            .getConfigName(zkController.zkStateReader);\n+    cd.setConfigSet(configSetName);\n \n     return new ZkSolrResourceLoader(cd.getInstanceDir(), configSetName, parentLoader.getClassLoader(), zkController);\n   }"
  },
  {
    "sha": "73f927f1c0cc025fe49ff23a2e905a96da20d5df",
    "filename": "solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler.java",
    "status": "modified",
    "additions": 1,
    "deletions": 7,
    "changes": 8,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -366,13 +366,7 @@ private void deleteConfigSet(String configSetName, boolean force) throws IOExcep\n     }\n \n     for (Map.Entry<String, DocCollection> entry : zkStateReader.getClusterState().getCollectionsMap().entrySet()) {\n-      String configName = null;\n-      try {\n-        configName = zkStateReader.readConfigName(entry.getKey());\n-      } catch (KeeperException ex) {\n-        throw new SolrException(ErrorCode.BAD_REQUEST,\n-            \"Can not delete ConfigSet as it is currently being used by collection [\" + entry.getKey() + \"]\");\n-      }\n+      String configName = entry.getValue().getConfigName(zkStateReader);\n       if (configSetName.equals(configName))\n         throw new SolrException(ErrorCode.BAD_REQUEST,\n             \"Can not delete ConfigSet as it is currently being used by collection [\" + entry.getKey() + \"]\");"
  },
  {
    "sha": "e9ee7a6a969b5eca24bb6cb8891e6f3ea48e5ec9",
    "filename": "solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -227,7 +227,7 @@ private ModifiableSolrParams getReplicaParams(ClusterState clusterState, ZkNodeP\n     params.set(CoreAdminParams.CORE_NODE_NAME,\n         CollectionHandlingUtils.waitToSeeReplicasInState(ccc.getZkStateReader(), ccc.getSolrCloudManager().getTimeSource(), collectionName, Collections.singleton(createReplica.coreName)).get(createReplica.coreName).getName());\n \n-    String configName = zkStateReader.readConfigName(collectionName);\n+    String configName = coll.getConfigName(ccc.getZkStateReader());\n     String routeKey = message.getStr(ShardParams._ROUTE_);\n     String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n     String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);"
  },
  {
    "sha": "592ab7ba1282ebe81b8ede8b8f496e52e2171280",
    "filename": "solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/api/collections/BackupCmd.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -81,7 +81,7 @@ public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"ra\n     String backupName = message.getStr(NAME);\n     String repo = message.getStr(CoreAdminParams.BACKUP_REPOSITORY);\n     boolean incremental = message.getBool(CoreAdminParams.BACKUP_INCREMENTAL, true);\n-    String configName = ccc.getZkStateReader().readConfigName(collectionName);\n+    String configName = ccc.getSolrCloudManager().getClusterStateProvider().getCollection(collectionName).getConfigName(ccc.getZkStateReader());\n \n     BackupProperties backupProperties = BackupProperties.create(backupName, collectionName,\n             extCollectionName, configName);"
  },
  {
    "sha": "1e85e8bee41387c6981480543ce5343815308317",
    "filename": "solr/core/src/java/org/apache/solr/cloud/api/collections/CollApiCmds.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/CollApiCmds.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/CollApiCmds.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/api/collections/CollApiCmds.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -226,8 +226,8 @@ public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnin\n \n       final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n       //the rest of the processing is based on writing cluster state properties\n-      //remove the property here to avoid any errors down the pipeline due to this property appearing\n-      String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n+      //configName will be put in collectionProps so that it will appear in state.json\n+      String configName = (String) message.getProperties().get(CollectionAdminParams.COLL_CONF);\n \n       if (configName != null) {\n         CollectionHandlingUtils.validateConfigOrThrowSolrException(ccc.getSolrCloudManager(), configName);"
  },
  {
    "sha": "9a3d632591d58ad19fef36885c8a026b9b80aa4d",
    "filename": "solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -136,6 +136,8 @@ public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnin\n       // this also creates the collection zk node as a side-effect\n       CollectionHandlingUtils.createConfNode(stateManager, configName, collectionName);\n \n+      message.getProperties().put(COLL_CONF, configName);\n+\n       Map<String,String> collectionParams = new HashMap<>();\n       Map<String,Object> collectionProps = message.getProperties();\n       for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n@@ -374,7 +376,7 @@ public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnin\n         log.debug(\"Finished create command on all shards for collection: {}\", collectionName);\n         // Emit a warning about production use of data driven functionality\n         boolean defaultConfigSetUsed = message.getStr(COLL_CONF) == null ||\n-            message.getStr(COLL_CONF).equals(DEFAULT_CONFIGSET_NAME);\n+            message.getStr(COLL_CONF).contains(DEFAULT_CONFIGSET_NAME);\n         if (defaultConfigSetUsed) {\n           results.add(\"warning\", \"Using _default configset. Data driven schema functionality\"\n               + \" is enabled by default, which is NOT RECOMMENDED for production use. To turn it off:\""
  },
  {
    "sha": "79779eda911e2badfbc8735d2f847dc8a9ae1255",
    "filename": "solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd.java",
    "status": "modified",
    "additions": 2,
    "deletions": 7,
    "changes": 9,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteCollectionCmd.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -169,20 +169,15 @@ public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"ra\n       }\n \n       // delete related config set iff: it is auto generated AND not related to any other collection\n-      String configSetName = zkStateReader.readConfigName(collection);\n+      String configSetName = coll.getConfigName(zkStateReader);\n \n       if (ConfigSetsHandler.isAutoGeneratedConfigSet(configSetName)) {\n         boolean configSetIsUsedByOtherCollection = false;\n \n         // make sure the configSet is not shared with other collections\n         // Similar to what happens in: OverseerConfigSetMessageHandler::deleteConfigSet\n         for (Map.Entry<String, DocCollection> entry : zkStateReader.getClusterState().getCollectionsMap().entrySet()) {\n-          String otherConfigSetName = null;\n-          try {\n-            otherConfigSetName = zkStateReader.readConfigName(entry.getKey());\n-          } catch (KeeperException ex) {\n-            // ignore 'no config found' errors\n-          }\n+          String otherConfigSetName = entry.getValue().getConfigName(zkStateReader);\n           if (configSetName.equals(otherConfigSetName)) {\n             configSetIsUsedByOtherCollection = true;\n             break;"
  },
  {
    "sha": "00bd81bcc168b28039e981a4e2d60376f2fd41a0",
    "filename": "solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/api/collections/MigrateCmd.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -231,7 +231,7 @@ private void migrateKey(ClusterState clusterState, DocCollection sourceCollectio\n     Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n \n     // create a temporary collection with just one node on the shard leader\n-    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n+    String configName = sourceCollection.getConfigName(zkStateReader);\n     Map<String, Object> props = makeMap(\n         Overseer.QUEUE_OPERATION, CREATE.toLower(),\n         NAME, tempSourceCollectionName,"
  },
  {
    "sha": "c1a4a8cef496c40298df7669a5a8dc6068f72735",
    "filename": "solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -244,7 +244,7 @@ public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnin\n       router = DocRouter.DEFAULT;\n     }\n \n-    String configName = message.getStr(ZkStateReader.CONFIGNAME_PROP, ccc.getZkStateReader().readConfigName(collection));\n+    String configName = message.getStr(ZkStateReader.CONFIGNAME_PROP, coll.getConfigName(ccc.getZkStateReader()));\n     String targetCollection;\n     int seq = tmpCollectionSeq.getAndIncrement();\n     if (sameTarget) {"
  },
  {
    "sha": "24d5678a3b9fd0fc8499fc377dd440c3f3c77a43",
    "filename": "solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator.java",
    "status": "modified",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -36,6 +36,7 @@\n import org.apache.solr.common.cloud.Slice;\n import org.apache.solr.common.cloud.ZkNodeProps;\n import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.params.CollectionAdminParams;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -105,6 +106,11 @@ public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps me\n     }\n     collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n \n+    //put configName in collectionProps so that it will appear in state.json\n+    if (message.getStr(CollectionAdminParams.COLL_CONF) != null) {\n+      collectionProps.put(ZkStateReader.CONFIGNAME_PROP, message.getStr(CollectionAdminParams.COLL_CONF));\n+    }\n+\n     if (message.getStr(\"fromApi\") == null) {\n       collectionProps.put(\"autoCreated\", \"true\");\n     }"
  },
  {
    "sha": "b66fbdc66a9b733fa3cbfa689b52e7bde8e76100",
    "filename": "solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -26,6 +26,7 @@\n import org.apache.solr.client.solrj.cloud.SolrCloudManager;\n import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n import org.apache.solr.common.cloud.*;\n+import org.apache.solr.common.params.CollectionAdminParams;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -144,6 +145,12 @@ public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodePr\n       return ZkStateWriter.NO_OP;\n     }\n \n+    //put configName in props so that it will appear in state.json\n+    if (message.getStr(CollectionAdminParams.COLL_CONF) != null) {\n+      m.put(ZkStateReader.CONFIGNAME_PROP,  message.getStr(CollectionAdminParams.COLL_CONF));\n+    }\n+\n+\n     DocCollection collection = new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion());\n     if (replicaOps == null){\n       return new ZkWriteCommand(coll.getName(), collection);"
  },
  {
    "sha": "247cb03421ee8ba6cc3b836c949bdfc0afeeb956",
    "filename": "solr/core/src/java/org/apache/solr/handler/admin/ClusterStatus.java",
    "status": "modified",
    "additions": 3,
    "deletions": 8,
    "changes": 11,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/handler/admin/ClusterStatus.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/handler/admin/ClusterStatus.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/handler/admin/ClusterStatus.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -139,14 +139,9 @@ public void getClusterStatus(@SuppressWarnings({\"rawtypes\"})NamedList results)\n       if (collectionVsAliases.containsKey(name) && !collectionVsAliases.get(name).isEmpty()) {\n         collectionStatus.put(\"aliases\", collectionVsAliases.get(name));\n       }\n-      try {\n-        String configName = zkStateReader.readConfigName(name);\n-        collectionStatus.put(\"configName\", configName);\n-        collectionProps.add(name, collectionStatus);\n-      } catch (KeeperException.NoNodeException ex) {\n-        // skip this collection because the configset's znode has been deleted\n-        // which can happen during aggressive collection removal, see SOLR-10720\n-      }\n+      String configName = clusterStateCollection.getConfigName(zkStateReader);;\n+      collectionStatus.put(\"configName\", configName);\n+      collectionProps.add(name, collectionStatus);\n     }\n \n     List<String> liveNodes = zkStateReader.getZkClient().getChildren(ZkStateReader.LIVE_NODES_ZKNODE, null, true);"
  },
  {
    "sha": "042818317a5e086e7e319c39034ea3a2ad2e42dc",
    "filename": "solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -233,7 +233,9 @@ protected int loadElevationConfiguration(SolrCore core) throws Exception {\n       ZkController zkController = core.getCoreContainer().getZkController();\n       if (zkController != null) {\n         // TODO : shouldn't have to keep reading the config name when it has been read before\n-        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n+        configFileExists = zkController.configFileExists(zkController.getZkStateReader()\n+                .getClusterState().getCollection(core.getCoreDescriptor().getCloudDescriptor().getCollectionName())\n+                .getConfigName(zkController.getZkStateReader()), configFileName);\n       } else {\n         File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n         File fD = new File(core.getDataDir(), configFileName);"
  },
  {
    "sha": "d14bfeb8d3ae8dde5933ff28b7a76888f47b17ae",
    "filename": "solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -41,6 +41,7 @@\n import org.apache.solr.common.SolrException;\n import org.apache.solr.common.SolrException.ErrorCode;\n import org.apache.solr.common.cloud.SolrZkClient;\n+import org.apache.solr.common.cloud.ZkStateReader;\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.common.util.Utils;\n import org.apache.solr.core.SolrResourceLoader;\n@@ -90,8 +91,8 @@ public static StorageIO newStorageIO(String collection, SolrResourceLoader resou\n     if (resourceLoader instanceof ZkSolrResourceLoader) {\n       zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n       try {\n-        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n-            getZkStateReader().readConfigName(collection);\n+        final ZkStateReader zkStateReader = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkStateReader();\n+        zkConfigName = zkStateReader.getClusterState().getCollection(collection).getConfigName(zkStateReader);\n       } catch (Exception e) {\n         log.error(\"Failed to get config name due to\", e);\n         throw new SolrException(ErrorCode.SERVER_ERROR,"
  },
  {
    "sha": "1eb7aef6f2854e537a215e4b7f0b2f20e1da59a9",
    "filename": "solr/core/src/java/org/apache/solr/util/SolrCLI.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/util/SolrCLI.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/java/org/apache/solr/util/SolrCLI.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/util/SolrCLI.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -2388,7 +2388,7 @@ protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli\n         throw new IllegalArgumentException(\"Collection \"+collectionName+\" not found!\");\n       }\n \n-      String configName = zkStateReader.readConfigName(collectionName);\n+      String configName = zkStateReader.getClusterState().getCollection(collectionName).getConfigName(zkStateReader);\n       boolean deleteConfig = \"true\".equals(cli.getOptionValue(\"deleteConfig\", \"true\"));\n       if (deleteConfig && configName != null) {\n         if (cli.hasOption(\"forceDeleteConfig\")) {\n@@ -2407,7 +2407,7 @@ protected void deleteCollection(CloudSolrClient cloudSolrClient, CommandLine cli\n             if (collectionName.equals(next))\n               continue; // don't check the collection we're deleting\n \n-            if (configName.equals(zkStateReader.readConfigName(next))) {\n+            if (configName.equals(zkStateReader.getClusterState().getCollection(next).getConfigName(zkStateReader))) {\n               deleteConfig = false;\n               log.warn(\"Configuration directory {} is also being used by {}{}\"\n                   , configName, next"
  },
  {
    "sha": "8cd9917229981aae06a48ce1724cc47d07e6a959",
    "filename": "solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 9,
    "changes": 12,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -17,14 +17,10 @@\n \n package org.apache.solr.cloud;\n \n-import java.util.Map;\n-\n import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n import org.apache.solr.client.solrj.request.GenericSolrRequest;\n import org.apache.solr.common.cloud.ZkStateReader;\n import org.apache.solr.common.params.ModifiableSolrParams;\n-import org.apache.solr.common.util.Utils;\n-import org.apache.zookeeper.KeeperException;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -71,11 +67,9 @@ public void testModifyColl() throws Exception {\n \n   }\n   \n-  private String getConfigNameFromZk(String collName) throws KeeperException, InterruptedException {\n-    byte[] b = zkClient().getData(ZkStateReader.getCollectionPathRoot(collName), null, null, false);\n-    @SuppressWarnings({\"rawtypes\"})\n-    Map confData = (Map) Utils.fromJSON(b);\n-    return (String) confData.get(ZkController.CONFIGNAME_PROP); \n+  private String getConfigNameFromZk(String collName) {\n+    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n+    return zkStateReader.getClusterState().getCollection(collName).getConfigName(zkStateReader);\n   }\n \n }"
  },
  {
    "sha": "eca592d3798db3a7515dbc19ca43ccf2e2485ca8",
    "filename": "solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -109,7 +109,7 @@ public void testDeleteAlsoDeletesAutocreatedConfigSet() throws Exception {\n             // collection exists now\n             assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n \n-            String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n+            String configName = cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getConfigName(cloudClient.getZkStateReader());\n \n             // config for this collection is '.AUTOCREATED', and exists globally\n             assertTrue(configName.endsWith(\".AUTOCREATED\"));\n@@ -137,7 +137,7 @@ public void testDeleteDoesNotDeleteSharedAutocreatedConfigSet() throws Exception\n             // collection exists now\n             assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionNameInitial, false));\n \n-            String configName = cloudClient.getZkStateReader().readConfigName(collectionNameInitial);\n+            String configName = cloudClient.getZkStateReader().getClusterState().getCollection(collectionNameInitial).getConfigName(cloudClient.getZkStateReader());\n \n             // config for this collection is '.AUTOCREATED', and exists globally\n             assertTrue(configName.endsWith(\".AUTOCREATED\"));\n@@ -151,7 +151,7 @@ public void testDeleteDoesNotDeleteSharedAutocreatedConfigSet() throws Exception\n             assertTrue(\"The collection with shared config set should have been created\", requestWithSharedConfig.get(\"success\") != null);\n             assertTrue(\"The new collection should exist after a successful creation\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionNameWithSharedConfig, false));\n \n-            String configNameOfSecondCollection = cloudClient.getZkStateReader().readConfigName(collectionNameWithSharedConfig);\n+            String configNameOfSecondCollection = cloudClient.getZkStateReader().getClusterState().getCollection(collectionNameWithSharedConfig).getConfigName(cloudClient.getZkStateReader());\n \n             assertEquals(\"Both collections should be using the same config\", configName, configNameOfSecondCollection);\n "
  },
  {
    "sha": "13aa202b9037874c5d368b93011e7086a150f721",
    "filename": "solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection.java",
    "status": "modified",
    "additions": 28,
    "deletions": 1,
    "changes": 29,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -30,6 +30,8 @@\n import java.util.function.BiConsumer;\n import java.util.function.BiPredicate;\n \n+import org.apache.solr.common.SolrException;\n+import org.apache.zookeeper.KeeperException;\n import org.noggit.JSONWriter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -39,6 +41,8 @@\n import static org.apache.solr.common.cloud.ZkStateReader.READ_ONLY;\n import static org.apache.solr.common.cloud.ZkStateReader.REPLICATION_FACTOR;\n import static org.apache.solr.common.cloud.ZkStateReader.TLOG_REPLICAS;\n+import static org.apache.solr.common.cloud.ZkStateReader.CONFIGNAME_PROP;\n+import static org.apache.solr.common.cloud.ZkStateReader.COLLECTIONS_ZKNODE;\n import static org.apache.solr.common.util.Utils.toJSONString;\n \n /**\n@@ -55,6 +59,7 @@\n   private final int znodeVersion;\n \n   private final String name;\n+  private final String configName;\n   private final Map<String, Slice> slices;\n   private final Map<String, Slice> activeSlices;\n   private final Slice[] activeSlicesArr;\n@@ -88,7 +93,7 @@ public DocCollection(String name, Map<String, Slice> slices, Map<String, Object>\n     // -1 means any version in ZK CAS, so we choose Integer.MAX_VALUE instead to avoid accidental overwrites\n     this.znodeVersion = zkVersion == -1 ? Integer.MAX_VALUE : zkVersion;\n     this.name = name;\n-\n+    this.configName = (String) props.get(CONFIGNAME_PROP);\n     this.slices = slices;\n     this.activeSlices = new HashMap<>();\n     this.nodeNameLeaderReplicas = new HashMap<>();\n@@ -206,6 +211,28 @@ public String getName() {\n     return name;\n   }\n \n+  /**\n+   * Return config name or null if solr version is 8x or below\n+   */\n+  public String getConfigName() { return configName; }\n+\n+  /**\n+   * Return non-null config name\n+   */\n+  public String getConfigName(ZkStateReader zkStateReader) {\n+    final String configSetName;\n+    if (this.configName != null) {\n+      configSetName = this.configName;\n+    } else {\n+      try {\n+        configSetName = zkStateReader.readConfigName(name);\n+      } catch (KeeperException e) {\n+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No configName data found at \" + COLLECTIONS_ZKNODE + \"/\" + name);\n+      }\n+    }\n+    return configSetName;\n+  }\n+\n   public Slice getSlice(String sliceName) {\n     return slices.get(sliceName);\n   }"
  },
  {
    "sha": "19e872ea6b40fd67e3df49d20efe56fb0adca8ec",
    "filename": "solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -238,7 +238,6 @@ public boolean canBeRemoved() {\n \n   /**\n    * Returns config set name for collection.\n-   * TODO move to DocCollection (state.json).\n    *\n    * @param collection to return config set name for\n    */"
  },
  {
    "sha": "bb0bf75986ffab9c2a5890f3e26021fb4c70cba5",
    "filename": "solr/test-framework/src/java/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/solr/blob/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/test-framework/src/java/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase.java",
    "raw_url": "https://github.com/apache/solr/raw/87fe63ef289a46489b4ebf2e03b610be7df027c2/solr/test-framework/src/java/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/test-framework/src/java/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase.java?ref=87fe63ef289a46489b4ebf2e03b610be7df027c2",
    "patch": "@@ -369,8 +369,7 @@ private void testBackupAndRestore(String collectionName, int backupReplFactor) t\n       assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n     }\n \n-    assertEquals(sameConfig ? \"conf1\" : \"customConfigName\",\n-        cluster.getSolrClient().getZkStateReader().readConfigName(restoreCollectionName));\n+    assertEquals(sameConfig ? \"conf1\" : \"customConfigName\", restoreCollection.getConfigName(client.getZkStateReader()));\n \n     Map<String, Integer> numReplicasByNodeName = new HashMap<>();\n     restoreCollection.getReplicas().forEach(x -> {"
  }
]
