[
  {
    "sha": "15edb91888fcde301da3d1969c977a0eb25cf96b",
    "filename": "solr/solr-ref-guide/src/morelikethis.adoc",
    "status": "modified",
    "additions": 570,
    "deletions": 38,
    "changes": 608,
    "blob_url": "https://github.com/apache/solr/blob/0781d5b1ff0afd4e0af00f761551361e984eb089/solr/solr-ref-guide/src/morelikethis.adoc",
    "raw_url": "https://github.com/apache/solr/raw/0781d5b1ff0afd4e0af00f761551361e984eb089/solr/solr-ref-guide/src/morelikethis.adoc",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solr-ref-guide/src/morelikethis.adoc?ref=0781d5b1ff0afd4e0af00f761551361e984eb089",
    "patch": "@@ -16,97 +16,629 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-The `MoreLikeThis` search component enables users to query for documents similar to a document in their result list.\n+MoreLikeThis enables queries for documents similar to a document in their result list.\n \n It does this by using terms from the original document to find similar documents in the index.\n \n-There are three ways to use MoreLikeThis. The first, and most common, is to use it as a request handler. In this case, you would send text to the MoreLikeThis request handler as needed (as in when a user clicked on a \"similar documents\" link).\n+There are several ways to use MoreLikeThis.\n+The first, and most common, is to use it as a request handler.\n+In this case, you would send text to the MoreLikeThis request handler as needed (as in when a user clicked on a \"similar documents\" link).\n \n-The second is to use it as a search component. This is less desirable since it performs the MoreLikeThis analysis on every document returned. This may slow search results.\n+The second is to use it as a search component.\n+This is less desirable since it performs the MoreLikeThis analysis on every document that matches a user query. This may slow search results.\n \n-The final approach is to use it as a request handler but with externally supplied text. This case, also referred to as the MoreLikeThisHandler, will supply information about similar documents in the index based on the text of the input document.\n+Another approach is to use it as a request handler but with externally supplied text.\n+This case, also referred to as the MoreLikeThisHandler, will supply information about similar documents in the index based on the text of the input document.\n+\n+Finally, the MLT query parser can be used.\n+This operates in much the same way as the request handler but since it is a query parser it can be used in filter queries, boost queries, etc., and results can be paginated or highlighted as needed.\n \n == How MoreLikeThis Works\n \n-`MoreLikeThis` constructs a Lucene query based on terms in a document. It does this by pulling terms from the defined list of fields ( see the `mlt.fl` parameter, below). For best results, the fields should have stored term vectors in `schema.xml`. For example:\n+`MoreLikeThis` constructs a Lucene query based on terms in a document.\n+It does this by pulling terms from the list of fields provided with the request.\n \n-[source,xml]\n-----\n-<field name=\"cat\" ... termVectors=\"true\" />\n-----\n+For best results, the fields should have stored term vectors (`termVectors=true`), which can be <<defining-fields.adoc#,configured in the schema>>.\n+If term vectors are not stored, MoreLikeThis can generate terms from stored fields.\n+The field used for the `uniqueKey` must also be stored in order for MoreLikeThis to work properly.\n+\n+Terms from the original document are filtered using thresholds defined with the MoreLikeThis parameters.\n+Once the terms have been selected, a query is run with any other query parameters as appropriate and a new document set is returned.\n \n-If term vectors are not stored, `MoreLikeThis` will generate terms from stored fields. A `uniqueKey` must also be stored in order for MoreLikeThis to work properly.\n+== MoreLikeThis Handler and Component\n \n-The next phase filters terms from the original document using thresholds defined with the MoreLikeThis parameters. Finally, a query is run with these terms, and any other query parameters that have been defined (see the `mlt.qf` parameter, below) and a new document set is returned.\n+The MoreLikeThis request handler and search component share several parameters, but also have some key differences in response and operation, as described below.\n \n-== Common Parameters for MoreLikeThis\n+=== Common Handler and Component Parameters\n \n-The table below summarizes the `MoreLikeThis` parameters supported by Lucene/Solr. These parameters can be used with any of the three possible MoreLikeThis approaches.\n+The list below summarizes the `MoreLikeThis` parameters supported by Solr.\n+These parameters can be used with the MoreLikeThis search component or request handler.\n \n `mlt.fl`::\n-Specifies the fields to use for similarity. If possible, these should have stored `termVectors`.\n++\n+[%autowidth,frame=none]\n+|===\n+s|Required |Default: none\n+|===\n++\n+Specifies the fields to use for similarity.\n+A list of fields can be provided separated by commas.\n+If possible, the fields should have stored `termVectors`.\n \n `mlt.mintf`::\n-Specifies the Minimum Term Frequency, the frequency below which terms will be ignored in the source document.\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `2`\n+|===\n++\n+Specifies the minimum frequency below which terms will be ignored in the source document.\n \n `mlt.mindf`::\n-Specifies the Minimum Document Frequency, the frequency at which words will be ignored which do not occur in at least this many documents.\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `5`\n+|===\n++\n+Specifies the minimum frequency below which terms will be ignored which do not occur in at least this many documents.\n \n `mlt.maxdf`::\n-Specifies the Maximum Document Frequency, the frequency at which words will be ignored which occur in more than this many documents.\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n+Specifies the maximum frequency above which terms will be ignored which occur in more than this many documents.\n \n `mlt.maxdfpct`::\n-Specifies the Maximum Document Frequency using a relative ratio to the number of documents in the index. The argument must be an integer between 0 and 100. For example 75 means the word will be ignored if it occurs in more than 75 percent of the documents in the index.\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n+Specifies the maximum document frequency using a ratio relative to the number of documents in the index.\n+The value provided must be an integer between `0` and `100`.\n+For example, `mlt.maxdfpct=75` means the word will be ignored if it occurs in more than 75 percent of the documents in the index.\n \n `mlt.minwl`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n Sets the minimum word length below which words will be ignored.\n \n `mlt.maxwl`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n Sets the maximum word length above which words will be ignored.\n \n `mlt.maxqt`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `25`\n+|===\n++\n Sets the maximum number of query terms that will be included in any generated query.\n \n `mlt.maxntp`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `5000`\n+|===\n++\n Sets the maximum number of tokens to parse in each example document field that is not stored with TermVector support.\n \n `mlt.boost`::\n-Specifies if the query will be boosted by the interesting term relevance. It can be either \"true\" or \"false\".\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `false`\n+|===\n++\n+Specifies if the query will be boosted by the interesting term relevance.\n+Possible values are `true` or `false`.\n \n `mlt.qf`::\n-Query fields and their boosts using the same format as that used by the <<the-dismax-query-parser.adoc#,DisMax Query Parser>>. These fields must also be specified in `mlt.fl`.\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n+Query fields and their boosts using the same format used by the <<the-dismax-query-parser.adoc#,DisMax Query Parser>>.\n+These fields must also be specified in `mlt.fl`.\n+\n+`mlt.interestingTerms`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `none`\n+|===\n++\n+Adds a section in the response that shows the top terms (based on TF/IDF) used for the MoreLikeThis query.\n+It supports three possible values:\n++\n+* `list` lists the terms.\n+* `none` lists no terms (the default).\n+* `details` lists the terms along with the boost value used for each term.\n+Unless `mlt.boost=true`, all terms will have `boost=1.0`.\n+\n++\n+To use this parameter with the <<MoreLikeThis Search Component,search component>>, the query cannot be distributed.\n+In order to get interesting terms, the query must be sent to a single shard and limited to that shard only (with the <<distributed-requests.adoc#limiting-which-shards-are-queried,`shards`>> parameter).\n+Multi-shard support is, however, available with the MoreLikeThis request handler.\n+\n+=== MoreLikeThis Request Handler\n+\n+==== Request Handler Configuration\n+\n+The MoreLikeThis request handler is not configured by default and needs to be set up before using it.\n+You can do this by manually editing `solrconfig.xml` or with the Config API:\n+\n+[.dynamic-tabs]\n+--\n+[example.tab-pane#manualconfig]\n+====\n+[.tab-label]*Manual Configuration*\n+\n+[source,xml]\n+----\n+<requestHandler name=\"/mlt\" class=\"solr.MoreLikeThisHandler\">\n+  <str name=\"mlt.fl\">body</str>\n+</requestHandler>\n+----\n+====\n+\n+[example.tab-pane#configapi]\n+====\n+[.tab-label]*Config API*\n+\n+[source,bash]\n+----\n+curl -X POST -H 'Content-type:application/json' -d {\n+  \"add-requesthandler\": {\n+    \"name\": \"/mlt\",\n+    \"class\": \"solr.MoreLikeThisHandler\",\n+    \"defaults\": {\"mlt.fl\": \"body\"}\n+  }\n+} http://localhost:8983/solr/<collection>/config\n+----\n+====\n+--\n+\n+Both of the above examples set the `mlt.fl` parameter to \"body\" for the request handler.\n+This means that all requests to the handler will use that value for the parameter unless specifically overridden in an individual request.\n+\n+For more about request handler configuration in general, see the section <<requesthandlers-and-searchcomponents-in-solrconfig.adoc#default-components,RequestHandlers and SearchComponents in Solrconfig>>.\n+\n+==== Request Handler Parameters\n+\n+The MoreLikeThis request handler supports the following parameters in addition to the <<Common Handler and Component Parameters,common parameters>> above.\n+It supports faceting, paging, and filtering using common query parameters, but does not work well with alternate query parsers.\n+\n+`mlt.match.include`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `false`\n+|===\n++\n+Specifies if the response should include the matched document.\n+If set to `false`, the response will look like a normal select response.\n+\n+`mlt.match.offset`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n+Specifies an offset into the main query search results to locate the document on which the MoreLikeThis query should operate.\n+By default, the query operates on the first result for the `q` parameter.\n+\n+==== Request Handler Query and Response\n+\n+Queries to the MoreLikeThis request handler use the name defined when it was configured (`/mlt` in the above example).\n+\n+The following example query uses a document (`q=id:0553573403`) found in Solr's example document set (`./example/exampledocs`), and asks that the author field be used to find similar documents (`mlt.fl=author`).\n+\n+[source,bash]\n+http://localhost:8983/solr/gettingstarted/mlt?mlt.fl=author&mlt.interestingTerms=details&mlt.match.include=true&mlt.mindf=0&mlt.mintf=0&q=id%3A0553573403\n+\n+This query also requests interesting terms with their boosts (`mlt.interestingTerms=details`) and that the original document also be returned (`mlt.match.include=true`).\n+The minimum term frequency and minimum word document frequency are set to `0`.\n+\n+The response will include a section `match`, which includes the original document.\n+The `response` section includes the similar documents.\n+Finally, the `interestingTerms` section shows the terms from the author field that were used to find the similar documents.\n+Because we did not also specify `mlt.boost`, the boost values shown for the interesting terms all display `1.0`.\n+\n+[source,json]\n+----\n+{\n+  \"match\":{\"numFound\":1,\"start\":0,\"numFoundExact\":true,\n+    \"docs\":[\n+      {\n+        \"id\":\"0553573403\",\n+        \"cat\":[\"book\"],\n+        \"name\":[\"A Game of Thrones\"],\n+        \"price\":[7.99],\n+        \"inStock\":[true],\n+        \"author\":[\"George R.R. Martin\"],\n+        \"series_t\":\"A Song of Ice and Fire\",\n+        \"sequence_i\":1,\n+        \"genre_s\":\"fantasy\",\n+        \"_version_\":1693062911089442816}]\n+  },\n+  \"response\":{\"numFound\":2,\"start\":0,\"numFoundExact\":true,\n+    \"docs\":[\n+      {\n+        \"id\":\"0553579908\",\n+        \"cat\":[\"book\"],\n+        \"name\":[\"A Clash of Kings\"],\n+        \"price\":[7.99],\n+        \"inStock\":[true],\n+        \"author\":[\"George R.R. Martin\"],\n+        \"series_t\":\"A Song of Ice and Fire\",\n+        \"sequence_i\":2,\n+        \"genre_s\":\"fantasy\",\n+        \"_version_\":1693062911094685696},\n+      {\n+        \"id\":\"055357342X\",\n+        \"cat\":[\"book\"],\n+        \"name\":[\"A Storm of Swords\"],\n+        \"price\":[7.99],\n+        \"inStock\":[true],\n+        \"author\":[\"George R.R. Martin\"],\n+        \"series_t\":\"A Song of Ice and Fire\",\n+        \"sequence_i\":3,\n+        \"genre_s\":\"fantasy\",\n+        \"_version_\":1693062911095734272}]\n+  },\n+  \"interestingTerms\":[\n+    \"author:r.r\",1.0,\n+    \"author:george\",1.0,\n+    \"author:martin\",1.0]}\n+----\n+\n+If we had not requested `mlt.match.include=true`, the response would not have included the `match` section.\n+\n+==== Streaming External Content to MoreLikeThis\n+\n+An external document (one not in the index) can be passed to the MoreLikeThis request handler to be used for recommended documents.\n+\n+This is accomplished with the use of <<content-streams.adoc#,Content Streams>>.\n+The body of a document can be passed directly to the request handler with the `stream.body` parameter.\n+Alternatively, if remote streams are enabled, a URL or file could be passed.\n+\n+[source,bash]\n+----\n+http://localhost:8983/solr/mlt?stream.body=electronics%20memory&mlt.fl=manu,cat&mlt.interestingTerms=list&mlt.mintf=0\n+----\n+\n+This query would pass the terms \"electronics memory\" to the request handler instead of using a document already in the index.\n+\n+The response in this case would look similar to the response above that used a document already in the index.\n+\n+=== MoreLikeThis Search Component\n+\n+Using MoreLikeThis as a search component returns similar documents for each document in the response set for another query.\n+It's important to note this could incur a cost to search performance so should only be used when the use case warrants it.\n+\n+==== Search Component Configuration\n+\n+The MoreLikeThis search component is a default search component that works with all search handlers (see also <<requesthandlers-and-searchcomponents-in-solrconfig.adoc#default-components,Default Components>>).\n+\n+Since it is configured already, it doesn't need any additional configuration unless you'd like to set parameters for a particular collection that override the MoreLikeThis defaults.\n+To do this, you could configure it like this:\n+\n+[source,xml]\n+----\n+<searchComponent name=\"mlt\" class=\"solr.MoreLikeThisComponent\">\n+    <str name=\"mlt\">true</str>\n+    <str name=\"mlt.fl\">body</str>\n+</searchComponent>\n+----\n+\n+The above example would always enable MoreLikeThis for all queries and will always use the \"body\" field.\n+This is probably not something you really want!\n+But the example serves to show how you might define whichever parameters you would like to be default for MoreLikeThis.\n+\n+If you gave the search component a name other than \"mlt\" as in the above example, you would need to explicitly add it to a request handler as described in the section <<requesthandlers-and-searchcomponents-in-solrconfig.adoc#referencing-search-components,Referencing Search Components>>.\n+Because the above example uses the same name as the default, the parameters defined there override Solr's default.\n \n-== Parameters for the MoreLikeThisComponent\n+==== Search Component Parameters\n \n-Using MoreLikeThis as a search component returns similar documents for each document in the response set. In addition to the common parameters, these additional options are available:\n+The MoreLikeThis search component supports the following parameters in addition to the <<Common Handler and Component Parameters,common parameters>> above.\n \n `mlt`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n If set to `true`, activates the `MoreLikeThis` component and enables Solr to return `MoreLikeThis` results.\n \n `mlt.count`::\n-Specifies the number of similar documents to be returned for each result. The default value is 5.\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `5`\n+|===\n++\n+Specifies the number of similar documents to be returned for each result.\n \n-`mlt.interestingTerms`:: _Same as defined below for the MLT Handler._\n+==== Search Component Query and Response\n \n-== Parameters for the MoreLikeThisHandler\n+The response when using MoreLikeThis as a search component is different than when using the request handler.\n \n-The table below summarizes parameters accessible through the `MoreLikeThisHandler`. It supports faceting, paging, and filtering using common query parameters, but does not work well with alternate query parsers.\n+In this case, we are using the `/select` request handler and performing a regular query (`q=author:martin`).\n+We've asked for MoreLikeThis to be added to the response (`mlt=true`), but otherwise the parameters are the same as the earlier example (we've asked for interesting terms and set minimum term and document frequencies to `0`).\n \n-`mlt.match.include`::\n-Specifies whether or not the response should include the matched document. If set to false, the response will look like a normal select response.\n+[source,bash]\n+http://localhost:8983/solr/gettingstarted/select?mlt.fl=name&mlt.mindf=0&mlt.mintf=0&mlt=true&q=author%3Amartin\n \n-`mlt.match.offset`::\n-Specifies an offset into the main query search results to locate the document on which the `MoreLikeThis` query should operate. By default, the query operates on the first result for the q parameter.\n+The response includes the results of our query, in this case 3 documents which have the term \"martin\" in the author field.\n+We've changed the field, however, to find documents that are similar to these based on values in the `name` field (`mlt.fl=name`).\n \n-`mlt.interestingTerms`::\n-Controls how the `MoreLikeThis` component presents the \"interesting\" terms (the top TF/IDF terms) for the query.\n-It supports three settings:\n-The setting `list` lists the terms.\n-The setting `none` lists no terms.\n-The setting `details` lists the terms along with the boost value used for each term.\n-Unless `mlt.boost=true`, all terms will have `boost=1.0`.\n+In the response, a `moreLikeThis` section has been added.\n+For each document in the results that match our query, a list of document IDs is returned with score values.\n+Each of these documents are similar to the document in the result list to varying degrees.\n \n+[source,json]\n+----\n+{\n+  \"response\":{\"numFound\":3,\"start\":0,\"maxScore\":0.43659902,\"numFoundExact\":true,  \"docs\":[\n+      {\n+        \"id\":\"0553573403\",\n+        \"cat\":[\"book\"],\n+        \"name\":[\"A Game of Thrones\"],\n+        \"price\":[7.99],\n+        \"inStock\":[true],\n+        \"author\":[\"George R.R. Martin\"],\n+        \"series_t\":\"A Song of Ice and Fire\",\n+        \"sequence_i\":1,\n+        \"genre_s\":\"fantasy\",\n+        \"_version_\":1693062911089442816},\n+      {\n+        \"id\":\"0553579908\",\n+        \"cat\":[\"book\"],\n+        \"name\":[\"A Clash of Kings\"],\n+        \"price\":[7.99],\n+        \"inStock\":[true],\n+        \"author\":[\"George R.R. Martin\"],\n+        \"series_t\":\"A Song of Ice and Fire\",\n+        \"sequence_i\":2,\n+        \"genre_s\":\"fantasy\",\n+        \"_version_\":1693062911094685696},\n+      {\n+        \"id\":\"055357342X\",\n+        \"cat\":[\"book\"],\n+        \"name\":[\"A Storm of Swords\"],\n+        \"price\":[7.99],\n+        \"inStock\":[true],\n+        \"author\":[\"George R.R. Martin\"],\n+        \"series_t\":\"A Song of Ice and Fire\",\n+        \"sequence_i\":3,\n+        \"genre_s\":\"fantasy\",\n+        \"_version_\":1693062911095734272}]\n+  },\n+  \"moreLikeThis\":[\n+    \"0553573403\",{\"numFound\":6,\"start\":0,\"maxScore\":1.6554483,\"numFoundExact\":true,\n+      \"docs\":[\n+        {\n+          \"id\":\"055357342X\",\n+          \"score\":1.6554483},\n+        {\n+          \"id\":\"0553579908\",\n+          \"score\":1.6554483},\n+        {\n+          \"id\":\"0805080481\",\n+          \"score\":1.3422124},\n+        {\n+          \"id\":\"0812550706\",\n+          \"score\":1.284826},\n+        {\n+          \"id\":\"978-1423103349\",\n+          \"score\":0.7652973}]\n+    },\n+    \"0553579908\",{\"numFound\":5,\"start\":0,\"maxScore\":1.6554483,\"numFoundExact\":true,\n+      \"docs\":[\n+        {\n+          \"id\":\"055357342X\",\n+          \"score\":1.6554483},\n+        {\n+          \"id\":\"0553573403\",\n+          \"score\":1.6554483},\n+        {\n+          \"id\":\"0805080481\",\n+          \"score\":1.3422124},\n+        {\n+          \"id\":\"978-1423103349\",\n+          \"score\":0.7652973},\n+        {\n+          \"id\":\"VDBDB1A16\",\n+          \"score\":0.68205893}]\n+    },\n+    \"055357342X\",{\"numFound\":5,\"start\":0,\"maxScore\":1.6554483,\"numFoundExact\":true,\n+      \"docs\":[\n+        {\n+          \"id\":\"0553579908\",\n+          \"score\":1.6554483},\n+        {\n+          \"id\":\"0553573403\",\n+          \"score\":1.6554483},\n+        {\n+          \"id\":\"0805080481\",\n+          \"score\":1.3422124},\n+        {\n+          \"id\":\"978-1423103349\",\n+          \"score\":0.7652973},\n+        {\n+          \"id\":\"VDBDB1A16\",\n+          \"score\":0.68205893}]\n+    }]}\n+----\n \n == MoreLikeThis Query Parser\n \n-The `mlt` query parser provides a mechanism to retrieve documents similar to a given document, like the handler. More information on the usage of the mlt query parser can be found in the section <<other-parsers.adoc#,Other Parsers>>.\n+The `mlt` query parser provides a mechanism to retrieve documents similar to a specific document, like the request handler.\n+\n+It uses Lucene's existing `MoreLikeThis` logic and also works in SolrCloud mode.\n+The document identifier used here is the document's `uniqueKey` value and not the Lucene internal document id.\n+The list of returned documents excludes the queried document.\n+\n+One benefit of the query parser is that it can be used in various places, not only in a standard `q` parameter.\n+This allows MoreLikeThis to be added to boost queries, filter queries, function queries, etc.\n+\n+=== Query Parser Parameters\n+\n+This query parser takes the following parameters:\n+\n+`qf`::\n++\n+[%autowidth,frame=none]\n+|===\n+s|Required |Default: none\n+|===\n++\n+Defines the fields to use as the basis for similarity analysis.\n+\n+`mintf`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `2`\n+|===\n++\n+Defines the minimum frequency below which terms will be ignored in the source document.\n+\n+`mindf`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `5`\n+|===\n++\n+Defines the minimum frequency below which terms will be ignored which do not occur in at least this many documents.\n+\n+`maxdf`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n+Sets the maximum frequency above which terms will be ignored which occur in more than this many documents.\n+\n+`minwl`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n+Sets the minimum word length below which words will be ignored.\n+\n+`maxwl`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: none\n+|===\n++\n+Sets the maximum word length above which words will be ignored.\n+\n+`maxqt`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `25`\n+|===\n++\n+Sets the maximum number of query terms that will be included in any generated query.\n+\n+`maxntp`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `5000`\n+|===\n++\n+Sets the maximum number of tokens to parse in each example document field that is not stored with TermVector support.\n+\n+`boost`::\n++\n+[%autowidth,frame=none]\n+|===\n+|Optional |Default: `false`\n+|===\n++\n+Specifies if the query will be boosted by the interesting term relevance. It can be either `true` or `false`.\n+\n+=== Query Parser Query and Response\n+\n+The structure of a MoreLikeThis query parser request is like a query using <<local-parameters-in-queries.adoc#,local params>>, as in:\n+\n+[source,bash]\n+----\n+{!mlt qf=name}1\n+----\n+\n+This would use the MoreLikeThis query parser to find documents similar to document \"1\", based on the \"name\" field.\n+\n+Additional parameters would be added inside the brackets, for example if we wanted to specify limits for `mintf` and `mindf`:\n+\n+[source,bash]\n+----\n+{!mlt qf=name mintf=2 mindf=3}1\n+----\n+\n+If given a query such as the following based on the example documents provided with Solr:\n+\n+[source,bash]\n+http://localhost:8983/solr/gettingstarted/select?q={!mlt qf=author mintf=1 mindf=1}0553573403\n+\n+The query parser response includes only the similar documents sorted by score:\n+\n+[source,json]\n+----\n+{\n+  \"response\":{\"numFound\":2,\"start\":0,\"maxScore\":1.309797,\"numFoundExact\":true,\n+    \"docs\":[\n+      {\n+        \"id\":\"0553579908\",\n+        \"cat\":[\"book\"],\n+        \"name\":[\"A Clash of Kings\"],\n+        \"price\":[7.99],\n+        \"inStock\":[true],\n+        \"author\":[\"George R.R. Martin\"],\n+        \"series_t\":\"A Song of Ice and Fire\",\n+        \"sequence_i\":2,\n+        \"genre_s\":\"fantasy\",\n+        \"_version_\":1693062911094685696},\n+      {\n+        \"id\":\"055357342X\",\n+        \"cat\":[\"book\"],\n+        \"name\":[\"A Storm of Swords\"],\n+        \"price\":[7.99],\n+        \"inStock\":[true],\n+        \"author\":[\"George R.R. Martin\"],\n+        \"series_t\":\"A Song of Ice and Fire\",\n+        \"sequence_i\":3,\n+        \"genre_s\":\"fantasy\",\n+        \"_version_\":1693062911095734272}]\n+  }}\n+----"
  },
  {
    "sha": "832613eb43775b7c6eb3c52700d98651e31dd164",
    "filename": "solr/solr-ref-guide/src/other-parsers.adoc",
    "status": "modified",
    "additions": 3,
    "deletions": 46,
    "changes": 49,
    "blob_url": "https://github.com/apache/solr/blob/0781d5b1ff0afd4e0af00f761551361e984eb089/solr/solr-ref-guide/src/other-parsers.adoc",
    "raw_url": "https://github.com/apache/solr/raw/0781d5b1ff0afd4e0af00f761551361e984eb089/solr/solr-ref-guide/src/other-parsers.adoc",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solr-ref-guide/src/other-parsers.adoc?ref=0781d5b1ff0afd4e0af00f761551361e984eb089",
    "patch": "@@ -905,52 +905,9 @@ Example:\n \n == More Like This Query Parser\n \n-`MLTQParser` enables retrieving documents that are similar to a given document. It uses Lucene's existing `MoreLikeThis` logic and also works in SolrCloud mode. The document identifier used here is the unique id value and not the Lucene internal document id. The list of returned documents excludes the queried document.\n-\n-This query parser takes the following parameters:\n-\n-`qf`::\n-Specifies the fields to use for similarity.\n-\n-`mintf`::\n-Specifies the Minimum Term Frequency, the frequency below which terms will be ignored in the source document.\n-\n-`mindf`::\n-Specifies the Minimum Document Frequency, the frequency at which words will be ignored when they do not occur in at least this many documents.\n-\n-`maxdf`::\n-Specifies the Maximum Document Frequency, the frequency at which words will be ignored when they occur in more than this many documents.\n-\n-`minwl`::\n-Sets the minimum word length below which words will be ignored.\n-\n-`maxwl`::\n-Sets the maximum word length above which words will be ignored.\n-\n-`maxqt`::\n-Sets the maximum number of query terms that will be included in any generated query.\n-\n-`maxntp`::\n-Sets the maximum number of tokens to parse in each example document field that is not stored with TermVector support.\n-\n-`boost`::\n-Specifies if the query will be boosted by the interesting term relevance. It can be either \"true\" or \"false\".\n-\n-*Examples*\n-\n-Find documents like the document with id=1 and using the `name` field for similarity.\n-\n-[source,text]\n-----\n-{!mlt qf=name}1\n-----\n-\n-Adding more constraints to what qualifies as similar using mintf and mindf.\n-\n-[source,text]\n-----\n-{!mlt qf=name mintf=2 mindf=3}1\n-----\n+The `MLTQParser` enables retrieving documents that are similar to a given document.\n+It uses Lucene's existing `MoreLikeThis` logic and also works in SolrCloud mode.\n+Information about how to use this query parser is with the documentation about MoreLikeThis, in the section <<morelikethis.adoc#morelikethis-query-parser,MoreLikeThis Query Parser>>.\n \n == Nested Query Parser\n "
  }
]
