[
  {
    "sha": "4ad77926918e168be8c8dc408652b9c6d6a92628",
    "filename": "solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/EngineContext.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/EngineContext.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/EngineContext.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/EngineContext.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -33,7 +33,6 @@\n import java.io.UncheckedIOException;\n import java.lang.invoke.MethodHandles;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -70,7 +69,7 @@\n \n     List<Path> resourceLocations = new ArrayList<>();\n \n-    Path configDir = Paths.get(core.getResourceLoader().getConfigDir());\n+    Path configDir = core.getResourceLoader().getConfigPath();\n     if (resourcesPath != null && !resourcesPath.trim().isEmpty()) {\n       configDir = configDir.resolve(resourcesPath);\n       resourceLocations.add(configDir);"
  },
  {
    "sha": "d98f783c4aceea72872c1d91fefe27666f6bd28d",
    "filename": "solr/core/src/java/org/apache/solr/cloud/CloudUtil.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/cloud/CloudUtil.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/cloud/CloudUtil.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/CloudUtil.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -16,7 +16,6 @@\n  */\n package org.apache.solr.cloud;\n \n-import java.io.File;\n import java.io.IOException;\n import java.lang.invoke.MethodHandles;\n import java.util.Collection;\n@@ -125,7 +124,7 @@ public static boolean replicaExists(ClusterState clusterState, String collection\n   public static String unifiedResourcePath(SolrResourceLoader loader) {\n     return (loader instanceof ZkSolrResourceLoader) ?\n             ((ZkSolrResourceLoader) loader).getConfigSetZkPath() + \"/\" :\n-            loader.getConfigDir() + File.separator;\n+            loader.getConfigPath() + \"/\";\n   }\n \n   /**Read the list of public keys from ZK"
  },
  {
    "sha": "0ca1a471cc78b212629ade07ae07961b1246cf45",
    "filename": "solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -731,6 +731,7 @@ public final void doSyncOrReplicateRecovery(SolrCore core) throws Exception {\n   /**\n    * Make sure we can connect to the shard leader as currently defined in ZK\n    * @param ourUrl if the leader url is the same as our url, we will skip trying to connect\n+   * @return the leader replica, or null if closed\n    */\n   private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown)\n       throws Exception {\n@@ -745,12 +746,12 @@ private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean\n         zkController.publish(coreDesc, Replica.State.DOWN);\n       }\n       numTried++;\n-      Replica leaderReplica = null;\n \n       if (isClosed()) {\n-        return leaderReplica;\n+        return null;\n       }\n \n+      Replica leaderReplica;\n       try {\n         leaderReplica = zkStateReader.getLeaderRetry(\n             cloudDesc.getCollectionName(), cloudDesc.getShardId());"
  },
  {
    "sha": "6349aa8c080dd92eeab0a0af847982609a58b4c9",
    "filename": "solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java",
    "status": "modified",
    "additions": 12,
    "deletions": 17,
    "changes": 29,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -26,14 +26,14 @@\n import org.slf4j.LoggerFactory;\n \n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.IOException;\n-import java.io.InputStreamReader;\n+import java.io.Reader;\n import java.lang.invoke.MethodHandles;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n-import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.util.Map;\n import java.util.Properties;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -176,29 +176,24 @@ public void stop() {\n   /**\n    * Parse a ZooKeeper configuration file\n    * @param path the patch of the configuration file\n+   * @throws IllegalArgumentException if a config file does not exist at the given path\n    * @throws ConfigException error processing configuration\n    */\n   public static Properties getProperties(String path) throws ConfigException {\n-    File configFile = new File(path);\n-\n-    log.info(\"Reading configuration from: {}\", configFile);\n+    Path configPath = Path.of(path);\n+    log.info(\"Reading configuration from: {}\", configPath);\n \n     try {\n-      if (!configFile.exists()) {\n-        throw new IllegalArgumentException(configFile.toString()\n+      if (!Files.exists(configPath)) {\n+        throw new IllegalArgumentException(configPath.toString()\n             + \" file is missing\");\n       }\n \n-      Properties cfg = new Properties();\n-      FileInputStream in = new FileInputStream(configFile);\n-      try {\n-        cfg.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n-      } finally {\n-        in.close();\n+      try (Reader reader = Files.newBufferedReader(configPath)) {\n+        Properties cfg = new Properties();\n+        cfg.load(reader);\n+        return cfg;\n       }\n-\n-      return cfg;\n-\n     } catch (IOException | IllegalArgumentException e) {\n       throw new ConfigException(\"Error processing \" + path, e);\n     }"
  },
  {
    "sha": "a0ed7a7eba32854ca3d7cbda4f5cea9b7c99967e",
    "filename": "solr/core/src/java/org/apache/solr/cloud/ZkController.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/cloud/ZkController.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/cloud/ZkController.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/cloud/ZkController.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -1512,14 +1512,14 @@ public String getBaseUrl() {\n     return baseURL;\n   }\n \n-  public void publish(final CoreDescriptor cd, final Replica.State state) throws Exception {\n+  public void publish(final CoreDescriptor cd, final Replica.State state) throws KeeperException, InterruptedException {\n     publish(cd, state, true, false);\n   }\n \n   /**\n    * Publish core state to overseer.\n    */\n-  public void publish(final CoreDescriptor cd, final Replica.State state, boolean updateLastState, boolean forcePublish) throws Exception {\n+  public void publish(final CoreDescriptor cd, final Replica.State state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n     if (!forcePublish) {\n       try (SolrCore core = cc.getCore(cd.getName())) {\n         if (core == null || core.isClosed()) {"
  },
  {
    "sha": "409851a22a33fc41e842ccfb993eb26d099257ff",
    "filename": "solr/core/src/java/org/apache/solr/core/ConfigSetService.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/ConfigSetService.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/ConfigSetService.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/core/ConfigSetService.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -24,7 +24,6 @@\n \n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n \n import com.github.benmanes.caffeine.cache.Cache;\n import com.github.benmanes.caffeine.cache.Caffeine;\n@@ -272,7 +271,7 @@ protected Path locateInstanceDir(CoreDescriptor cd) {\n \n     @Override\n     protected Long getCurrentSchemaModificationVersion(String configSet, SolrConfig solrConfig, String schemaFileName) {\n-      Path schemaFile = Paths.get(solrConfig.getResourceLoader().getConfigDir()).resolve(schemaFileName);\n+      Path schemaFile = solrConfig.getResourceLoader().getConfigPath().resolve(schemaFileName);\n       try {\n         return Files.getLastModifiedTime(schemaFile).toMillis();\n       } catch (FileNotFoundException e) {"
  },
  {
    "sha": "2ccc5923ec2598c9294d1140e786c5e4aa539496",
    "filename": "solr/core/src/java/org/apache/solr/core/DirectoryFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/core/DirectoryFactory.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -266,7 +266,7 @@ public String normalize(String path) throws IOException {\n    */\n   public boolean isAbsolute(String path) {\n     // back compat\n-    return new File(path).isAbsolute();\n+    return Path.of(path).isAbsolute();\n   }\n   \n   public static long sizeOfDirectory(Directory directory) throws IOException {"
  },
  {
    "sha": "a7e7675a5c3a3fe67c43e4a48add8ce40004a674",
    "filename": "solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory.java",
    "status": "modified",
    "additions": 1,
    "deletions": 8,
    "changes": 9,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -15,7 +15,6 @@\n  * limitations under the License.\n  */\n package org.apache.solr.core;\n-import java.io.File;\n import java.io.IOException;\n import java.lang.invoke.MethodHandles;\n import java.nio.file.Path;\n@@ -61,8 +60,7 @@ public void init(NamedList args) {\n \n   @Override\n   protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n-    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n-    MMapDirectory mapDirectory = new MMapDirectory(new File(path).toPath(), lockFactory, maxChunk);\n+    MMapDirectory mapDirectory = new MMapDirectory(Path.of(path), lockFactory, maxChunk);\n     try {\n       mapDirectory.setUseUnmap(unmapHack);\n     } catch (IllegalArgumentException e) {\n@@ -71,9 +69,4 @@ protected Directory create(String path, LockFactory lockFactory, DirContext dirC\n     mapDirectory.setPreload(preload);\n     return mapDirectory;\n   }\n-  \n-  @Override\n-  public boolean isAbsolute(String path) {\n-    return new File(path).isAbsolute();\n-  }\n }"
  },
  {
    "sha": "9e4f9dc33c7aad762cd46a83cd2243e51fc67ee7",
    "filename": "solr/core/src/java/org/apache/solr/core/NIOFSDirectoryFactory.java",
    "status": "modified",
    "additions": 3,
    "deletions": 9,
    "changes": 12,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/NIOFSDirectoryFactory.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/NIOFSDirectoryFactory.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/core/NIOFSDirectoryFactory.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -15,8 +15,9 @@\n  * limitations under the License.\n  */\n package org.apache.solr.core;\n-import java.io.File;\n+\n import java.io.IOException;\n+import java.nio.file.Path;\n \n import org.apache.lucene.store.Directory;\n import org.apache.lucene.store.LockFactory;\n@@ -31,13 +32,6 @@\n \n   @Override\n   protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n-    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n-    return new NIOFSDirectory(new File(path).toPath(), lockFactory);\n-  }\n-  \n-  @Override\n-  public boolean isAbsolute(String path) {\n-    return new File(path).isAbsolute();\n+    return new NIOFSDirectory(Path.of(path), lockFactory);\n   }\n-  \n }"
  },
  {
    "sha": "e260a1161514f78aa0dd4c03484517b2a323c8ee",
    "filename": "solr/core/src/java/org/apache/solr/core/NRTCachingDirectoryFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 9,
    "changes": 11,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/NRTCachingDirectoryFactory.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/NRTCachingDirectoryFactory.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/core/NRTCachingDirectoryFactory.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -16,8 +16,8 @@\n  */\n package org.apache.solr.core;\n \n-import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Path;\n \n import org.apache.lucene.store.Directory;\n import org.apache.lucene.store.FSDirectory;\n@@ -52,13 +52,6 @@ public void init(NamedList args) {\n \n   @Override\n   protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n-    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n-    return new NRTCachingDirectory(FSDirectory.open(new File(path).toPath(), lockFactory), maxMergeSizeMB, maxCachedMB);\n+    return new NRTCachingDirectory(FSDirectory.open(Path.of(path), lockFactory), maxMergeSizeMB, maxCachedMB);\n   }\n-  \n-  @Override\n-  public boolean isAbsolute(String path) {\n-    return new File(path).isAbsolute();\n-  }\n-\n }"
  },
  {
    "sha": "804ceab69732503d9602e3ad22f945013f3fec94",
    "filename": "solr/core/src/java/org/apache/solr/core/SolrConfig.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/SolrConfig.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/SolrConfig.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/core/SolrConfig.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -27,7 +27,6 @@\n import java.net.URL;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -154,7 +153,7 @@ public static SolrConfig readFromResourceLoader(SolrResourceLoader loader, Strin\n       if (loader instanceof ZkSolrResourceLoader) {\n         resource = name;\n       } else {\n-        resource = Paths.get(loader.getConfigDir()).resolve(name).toString();\n+        resource = loader.getConfigPath().resolve(name).toString();\n       }\n       throw new SolrException(ErrorCode.SERVER_ERROR, \"Error loading solr config from \" + resource, e);\n     }"
  },
  {
    "sha": "b779a1c0822701b7fcf398ce0ede2f80f3b60f97",
    "filename": "solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java",
    "status": "modified",
    "additions": 14,
    "deletions": 17,
    "changes": 31,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/core/SolrResourceLoader.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -18,10 +18,8 @@\n \n import java.io.Closeable;\n import java.io.File;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.OutputStream;\n import java.lang.invoke.MethodHandles;\n import java.lang.reflect.Constructor;\n import java.net.MalformedURLException;\n@@ -298,8 +296,16 @@ public boolean accept(Path entry) throws IOException {\n     });\n   }\n \n+  public Path getConfigPath() {\n+    return instanceDir.resolve(\"conf\");\n+  }\n+\n+  /**\n+   * @deprecated use {@link #getConfigPath()}\n+   */\n+  @Deprecated(since=\"9.0.0\")\n   public String getConfigDir() {\n-    return instanceDir.resolve(\"conf\").toString();\n+    return getConfigPath().toString();\n   }\n \n   /**\n@@ -915,27 +921,18 @@ private PackageListeningClassLoader createSchemaLoader() {\n \n   public static void persistConfLocally(SolrResourceLoader loader, String resourceName, byte[] content) {\n     // Persist locally\n-    File confFile = new File(loader.getConfigDir(), resourceName);\n+    Path confFile = loader.getConfigPath().resolve(resourceName);\n     try {\n-      File parentDir = confFile.getParentFile();\n-      if (!parentDir.isDirectory()) {\n-        if (!parentDir.mkdirs()) {\n-          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n-          log.error(msg);\n-          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n-        }\n-      }\n-      try (OutputStream out = new FileOutputStream(confFile);) {\n-        out.write(content);\n-      }\n-      log.info(\"Written confile {}\", resourceName);\n+      Files.createDirectories(confFile.getParent());\n+      Files.write(confFile, content);\n+      log.info(\"Written conf file {}\", resourceName);\n     } catch (IOException e) {\n       final String msg = \"Error persisting conf file \" + resourceName;\n       log.error(msg, e);\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n     } finally {\n       try {\n-        IOUtils.fsync(confFile.toPath(), false);\n+        IOUtils.fsync(confFile, false);\n       } catch (IOException e) {\n         final String msg = \"Error syncing conf file \" + resourceName;\n         log.error(msg, e);"
  },
  {
    "sha": "65b03530d764a6194ae70f56ec7e4298b40b3c85",
    "filename": "solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 5,
    "changes": 7,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -52,8 +52,7 @@\n \n   @Override\n   protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n-    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n-    return FSDirectory.open(new File(path).toPath(), lockFactory);\n+    return FSDirectory.open(Path.of(path), lockFactory);\n   }\n   \n   @Override\n@@ -80,9 +79,7 @@ protected LockFactory createLockFactory(String rawLockType) throws IOException {\n   \n   @Override\n   public String normalize(String path) throws IOException {\n-    String cpath = new File(path).getCanonicalPath();\n-    \n-    return super.normalize(cpath);\n+    return super.normalize(Path.of(path).toRealPath().toString());\n   }\n \n   public boolean isPersistent() {"
  },
  {
    "sha": "6931f9406346e8a475971c520a3a50d6ae36d4ab",
    "filename": "solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool.java",
    "status": "modified",
    "additions": 27,
    "deletions": 29,
    "changes": 56,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -18,15 +18,12 @@\n package org.apache.solr.core.snapshots;\n \n import java.io.Closeable;\n-import java.io.File;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.OutputStreamWriter;\n-import java.io.Writer;\n import java.lang.invoke.MethodHandles;\n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n@@ -183,26 +180,29 @@ public void describeSnapshot(String collectionName, String snapshotName) {\n     }\n   }\n \n-  public Map<String, List<String>> getIndexFilesPathForSnapshot(String collectionName,  String snapshotName, Optional<String> pathPrefix)\n+  /**\n+   * @param pathPrefix optional\n+   */\n+  public Map<String, List<String>> getIndexFilesPathForSnapshot(String collectionName,  String snapshotName, String pathPrefix)\n       throws SolrServerException, IOException {\n     Map<String, List<String>> result = new HashMap<>();\n \n     Collection<CollectionSnapshotMetaData> snaps = listCollectionSnapshots(collectionName);\n-    Optional<CollectionSnapshotMetaData> meta = Optional.empty();\n+    CollectionSnapshotMetaData meta = null;\n     for (CollectionSnapshotMetaData m : snaps) {\n       if (snapshotName.equals(m.getName())) {\n-        meta = Optional.of(m);\n+        meta = m;\n       }\n     }\n \n-    if (!meta.isPresent()) {\n+    if (meta != null) {\n       throw new IllegalArgumentException(\"The snapshot named \" + snapshotName\n           + \" is not found for collection \" + collectionName);\n     }\n \n     DocCollection collectionState = solrClient.getZkStateReader().getClusterState().getCollection(collectionName);\n     for (Slice s : collectionState.getSlices()) {\n-      List<CoreSnapshotMetaData> replicaSnaps = meta.get().getReplicaSnapshotsForShard(s.getName());\n+      List<CoreSnapshotMetaData> replicaSnaps = meta.getReplicaSnapshotsForShard(s.getName());\n       // Prepare a list of *existing* replicas (since one or more replicas could have been deleted after the snapshot creation).\n       List<CoreSnapshotMetaData> availableReplicas = new ArrayList<>();\n       for (CoreSnapshotMetaData m : replicaSnaps) {\n@@ -226,10 +226,9 @@ public void describeSnapshot(String collectionName, String snapshotName) {\n       }\n \n       String indexDirPath = coreSnap.getIndexDirPath();\n-      if (pathPrefix.isPresent()) {\n+      if (pathPrefix != null) {\n         // If the path prefix is specified, rebuild the path to the index directory.\n-        Path t = new Path(coreSnap.getIndexDirPath());\n-        indexDirPath = (new Path(pathPrefix.get(), t.toUri().getPath())).toString();\n+        indexDirPath = new Path(pathPrefix, coreSnap.getIndexDirPath()).toString();\n       }\n \n       List<String> paths = new ArrayList<>();\n@@ -244,20 +243,16 @@ public void describeSnapshot(String collectionName, String snapshotName) {\n     return result;\n   }\n \n-  public void buildCopyListings(String collectionName, String snapshotName, String localFsPath, Optional<String> pathPrefix)\n+  /**\n+   * @param pathPrefix optional\n+   */\n+  public void buildCopyListings(String collectionName, String snapshotName, String localFsPath, String pathPrefix)\n       throws SolrServerException, IOException {\n     Map<String, List<String>> paths = getIndexFilesPathForSnapshot(collectionName, snapshotName, pathPrefix);\n     for (Map.Entry<String,List<String>> entry : paths.entrySet()) {\n-      StringBuilder filesBuilder = new StringBuilder();\n-      for (String filePath : entry.getValue()) {\n-        filesBuilder.append(filePath);\n-        filesBuilder.append(\"\\n\");\n-      }\n-\n-      String files = filesBuilder.toString().trim();\n-      try (Writer w = new OutputStreamWriter(new FileOutputStream(new File(localFsPath, entry.getKey())), StandardCharsets.UTF_8)) {\n-        w.write(files);\n-      }\n+      // TODO: this used to trim - check if that's needed\n+      // Using Paths.get instead of Path.of because of conflict with o.a.hadoop.fs.Path\n+      Files.write(Paths.get(localFsPath, entry.getKey()), entry.getValue());\n     }\n   }\n \n@@ -270,7 +265,10 @@ public void backupCollectionMetaData(String collectionName, String snapshotName,\n     Preconditions.checkState(resp.getStatus() == 0, \"The request failed. The status code is \" + resp.getStatus());\n   }\n \n-  public void prepareForExport(String collectionName, String snapshotName, String localFsPath, Optional<String> pathPrefix, String destPath) {\n+  /**\n+   * @param pathPrefix optional\n+   */\n+  public void prepareForExport(String collectionName, String snapshotName, String localFsPath, String pathPrefix, String destPath) {\n     try {\n       buildCopyListings(collectionName, snapshotName, localFsPath, pathPrefix);\n       CLIO.out(\"Successfully prepared copylisting for the snapshot export.\");\n@@ -376,14 +374,14 @@ public static void main(String[] args) throws IOException {\n           String collectionName = requiredArg(options, cmd, COLLECTION);\n           String localFsDir = requiredArg(options, cmd, TEMP_DIR);\n           String hdfsOpDir = requiredArg(options, cmd, DEST_DIR);\n-          Optional<String> pathPrefix = Optional.ofNullable(cmd.getOptionValue(HDFS_PATH_PREFIX));\n+          String pathPrefix = cmd.getOptionValue(HDFS_PATH_PREFIX);\n \n-          if (pathPrefix.isPresent()) {\n+          if (pathPrefix != null) {\n             try {\n-              new URI(pathPrefix.get());\n+              new URI(pathPrefix);\n             } catch (URISyntaxException e) {\n               CLIO.out(\n-                  \"The specified File system path prefix \" + pathPrefix.get()\n+                  \"The specified File system path prefix \" + pathPrefix\n                       + \" is invalid. The error is \" + e.getLocalizedMessage());\n               System.exit(1);\n             }"
  },
  {
    "sha": "b6e2f43d0fe4eb83047e5de3e287627d56831d9e",
    "filename": "solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.java",
    "status": "modified",
    "additions": 16,
    "deletions": 23,
    "changes": 39,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/filestore/DistribPackageStore.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -20,13 +20,15 @@\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.lang.invoke.MethodHandles;\n import java.nio.ByteBuffer;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Date;\n@@ -93,8 +95,7 @@ private static Path _getRealPath(String path, Path solrHome) {\n     if (!path.isEmpty() && path.charAt(0) != File.separatorChar) {\n       path = File.separator + path;\n     }\n-    return new File(solrHome +\n-            File.separator + PackageStoreAPI.PACKAGESTORE_DIRECTORY + path).toPath();\n+    return solrHome.resolve(PackageStoreAPI.PACKAGESTORE_DIRECTORY).resolve(path);\n   }\n \n   class FileInfo {\n@@ -109,9 +110,7 @@ private static Path _getRealPath(String path, Path solrHome) {\n \n     ByteBuffer getFileData(boolean validate) throws IOException {\n       if (fileData == null) {\n-        try (FileInputStream fis = new FileInputStream(getRealpath(path).toFile())) {\n-          fileData = SimplePostTool.inputStreamToByteArray(fis);\n-        }\n+        fileData = ByteBuffer.wrap(Files.readAllBytes(getRealpath(path)));\n       }\n       return fileData;\n     }\n@@ -138,8 +137,8 @@ private void persistToFile(ByteBuffer data, ByteBuffer meta) throws IOException\n \n \n     public boolean exists(boolean validateContent, boolean fetchMissing) throws IOException {\n-      File file = getRealpath(path).toFile();\n-      if (!file.exists()) {\n+      Path file = getRealpath(path);\n+      if (!Files.exists(file)) {\n         if (fetchMissing) {\n           return fetchFromAnyNode();\n         } else {\n@@ -150,7 +149,7 @@ public boolean exists(boolean validateContent, boolean fetchMissing) throws IOEx\n       if (validateContent) {\n         MetaData metaData = readMetaData();\n         if (metaData == null) return false;\n-        try (InputStream is = new FileInputStream(getRealpath(path).toFile())) {\n+        try (InputStream is = Files.newInputStream(file)) {\n           if (!Objects.equals(DigestUtils.sha512Hex(is), metaData.sha512)) {\n             deleteFile();\n           } else {\n@@ -582,29 +581,23 @@ private static String _getMetapath(String path) {\n    */\n   public static void _persistToFile(Path solrHome, String path, ByteBuffer data, ByteBuffer meta) throws IOException {\n     Path realpath = _getRealPath(path, solrHome);\n-    File file = realpath.toFile();\n-    File parent = file.getParentFile();\n-    if (!parent.exists()) {\n-      parent.mkdirs();\n-    }\n+    Files.createDirectories(realpath.getParent());\n     @SuppressWarnings({\"rawtypes\"})\n     Map m = (Map) Utils.fromJSON(meta.array(), meta.arrayOffset(), meta.limit());\n     if (m == null || m.isEmpty()) {\n       throw new SolrException(SERVER_ERROR, \"invalid metadata , discarding : \" + path);\n     }\n \n-\n-    File metdataFile = _getRealPath(_getMetapath(path), solrHome).toFile();\n-\n-    try (FileOutputStream fos = new FileOutputStream(metdataFile)) {\n-      fos.write(meta.array(), 0, meta.limit());\n+    Path metadataPath = _getRealPath(_getMetapath(path), solrHome);\n+    try (SeekableByteChannel channel = Files.newByteChannel(metadataPath, StandardOpenOption.WRITE)) {\n+      channel.write(meta);\n     }\n-    IOUtils.fsync(metdataFile.toPath(), false);\n+    IOUtils.fsync(metadataPath, false);\n \n-    try (FileOutputStream fos = new FileOutputStream(file)) {\n-      fos.write(data.array(), 0, data.limit());\n+    try (SeekableByteChannel channel = Files.newByteChannel(realpath, StandardOpenOption.WRITE)) {\n+      channel.write(data);\n     }\n-    IOUtils.fsync(file.toPath(), false);\n+    IOUtils.fsync(realpath, false);\n   }\n \n   @Override"
  },
  {
    "sha": "406fdb83f5ee118ad0b42e4b74ad4aa428c4364a",
    "filename": "solr/core/src/java/org/apache/solr/handler/CatStream.java",
    "status": "modified",
    "additions": 4,
    "deletions": 7,
    "changes": 11,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/handler/CatStream.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/handler/CatStream.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/handler/CatStream.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -17,11 +17,10 @@\n \n package org.apache.solr.handler;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.lang.invoke.MethodHandles;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.ArrayList;\n@@ -184,19 +183,17 @@ private boolean advanceToNextFileWithData() throws IOException {\n     while (allFilesToCrawl.hasNext()) {\n       closeCurrentFileIfSet();\n       currentFilePath = allFilesToCrawl.next();\n-      File currentFile = currentFilePath.absolutePath.toFile();\n-      if(currentFile.getName().endsWith(\".gz\")) {\n-        currentFileLines = new LineIterator(new InputStreamReader(new GZIPInputStream(new FileInputStream(currentFile)), \"UTF-8\"));\n+      if(currentFilePath.absolutePath.toString().endsWith(\".gz\")) {\n+        currentFileLines = new LineIterator(new InputStreamReader(new GZIPInputStream(Files.newInputStream(currentFilePath.absolutePath)), StandardCharsets.UTF_8));\n       } else {\n-        currentFileLines = FileUtils.lineIterator(currentFile, \"UTF-8\");\n+        currentFileLines = FileUtils.lineIterator(currentFilePath.absolutePath.toFile(), \"UTF-8\");\n       }\n       if (currentFileLines.hasNext()) return true;\n     }\n \n     return false;\n   }\n \n-  @SuppressWarnings({\"unchecked\"})\n   private Tuple fetchNextLineFromCurrentFile() {\n     linesReturned++;\n "
  },
  {
    "sha": "7f781df7ae1bf4f5aee3a453066688009584828e",
    "filename": "solr/core/src/java/org/apache/solr/handler/IndexFetcher.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/handler/IndexFetcher.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/handler/IndexFetcher.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/handler/IndexFetcher.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -927,7 +927,8 @@ private void reloadCore() {\n   private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestGeneration) throws Exception {\n     log.info(\"Starting download of configuration files from leader: {}\", confFilesToDownload);\n     confFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n-    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n+    Path tmpConfPath = solrCore.getResourceLoader().getConfigPath().resolve(\"conf.\" + getDateAsStr(new Date()));\n+    File tmpconfDir = tmpConfPath.toFile();\n     try {\n       boolean status = tmpconfDir.mkdirs();\n       if (!status) {\n@@ -1296,9 +1297,10 @@ private boolean moveIndexFiles(Directory tmpIdxDir, Directory indexDir) {\n    */\n   private void copyTmpConfFiles2Conf(File tmpconfDir) {\n     boolean status = false;\n-    File confDir = new File(solrCore.getResourceLoader().getConfigDir());\n+    Path confPath = solrCore.getResourceLoader().getConfigPath();\n     for (File file : makeTmpConfDirFileList(tmpconfDir, new ArrayList<>())) {\n-      File oldFile = new File(confDir, file.getPath().substring(tmpconfDir.getPath().length(), file.getPath().length()));\n+      Path oldPath = confPath.resolve(file.getPath().substring(tmpconfDir.getPath().length()));\n+      File oldFile = oldPath.toFile();\n       if (!oldFile.getParentFile().exists()) {\n         status = oldFile.getParentFile().mkdirs();\n         if (!status) {"
  },
  {
    "sha": "c96f79f307ab5f7f71dccb1941e7591c28117fcd",
    "filename": "solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java",
    "status": "modified",
    "additions": 13,
    "deletions": 13,
    "changes": 26,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/handler/PingRequestHandler.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -16,14 +16,14 @@\n  */\n package org.apache.solr.handler;\n \n-import java.io.File;\n import java.io.IOException;\n import java.lang.invoke.MethodHandles;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.time.Instant;\n import java.util.Locale;\n \n-import org.apache.commons.io.FileUtils;\n import org.apache.solr.common.SolrException;\n import org.apache.solr.common.params.CommonParams;\n import org.apache.solr.common.params.ModifiableSolrParams;\n@@ -136,7 +136,7 @@\n   protected enum ACTIONS {STATUS, ENABLE, DISABLE, PING};\n   \n   private String healthFileName = null;\n-  private File healthcheck = null;\n+  private Path healthcheck = null;\n \n   @Override\n   public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n@@ -148,17 +148,17 @@ public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n   @Override\n   public void inform( SolrCore core ) {\n     if (null != healthFileName) {\n-      healthcheck = new File(healthFileName);\n-      if ( ! healthcheck.isAbsolute()) {\n-        healthcheck = new File(core.getDataDir(), healthFileName);\n-        healthcheck = healthcheck.getAbsoluteFile();\n+      healthcheck = Path.of(healthFileName);\n+      if (!healthcheck.isAbsolute()) {\n+        healthcheck = Path.of(core.getDataDir(), healthFileName);\n+        healthcheck = healthcheck.toAbsolutePath();\n       }\n \n-      if ( ! healthcheck.getParentFile().canWrite()) {\n+      if (!Files.isWritable(healthcheck.getParent())) {\n         // this is not fatal, users may not care about enable/disable via \n         // solr request, file might be touched/deleted by an external system\n         log.warn(\"Directory for configured healthcheck file is not writable by solr, PingRequestHandler will not be able to control enable/disable: {}\",\n-                 healthcheck.getParentFile().getAbsolutePath());\n+                 healthcheck.getParent().toAbsolutePath());\n       }\n \n     }\n@@ -171,7 +171,7 @@ public void inform( SolrCore core ) {\n    * returns false. \n    */\n   public boolean isPingDisabled() {\n-    return (null != healthcheck && ! healthcheck.exists() );\n+    return (null != healthcheck && ! Files.exists(healthcheck) );\n   }\n \n   @Override\n@@ -309,18 +309,18 @@ protected void handleEnable(boolean enable) throws SolrException {\n     if ( enable ) {\n       try {\n         // write out when the file was created\n-        FileUtils.write(healthcheck, Instant.now().toString(), \"UTF-8\");\n+        Files.write(healthcheck, Instant.now().toString().getBytes(StandardCharsets.UTF_8));\n       } catch (IOException e) {\n         throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                                 \"Unable to write healthcheck flag file\", e);\n       }\n     } else {\n       try {\n-        Files.deleteIfExists(healthcheck.toPath());\n+        Files.deleteIfExists(healthcheck);\n       } catch (Throwable cause) {\n         throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                                 \"Did not successfully delete healthcheck file: \"\n-                                +healthcheck.getAbsolutePath(), cause);\n+                                +healthcheck.toAbsolutePath(), cause);\n       }\n     }\n   }"
  },
  {
    "sha": "414d3c75897545200f079da97f199fc70a82697b",
    "filename": "solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java",
    "status": "modified",
    "additions": 5,
    "deletions": 6,
    "changes": 11,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/handler/ReplicationHandler.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -771,11 +771,10 @@ private long getMaxVersion(IndexCommit commit) throws IOException {\n                                                      final Map<String, FileInfo> confFileInfoCache) {\n     List<Map<String, Object>> confFiles = new ArrayList<>();\n     synchronized (confFileInfoCache) {\n-      File confDir = new File(core.getResourceLoader().getConfigDir());\n       Checksum checksum = null;\n       for (int i = 0; i < nameAndAlias.size(); i++) {\n         String cf = nameAndAlias.getName(i);\n-        File f = new File(confDir, cf);\n+        File f = new File(core.getResourceLoader().getConfigDir(), cf);\n         if (!f.exists() || f.isDirectory()) continue; //must not happen\n         FileInfo info = confFileInfoCache.get(cf);\n         if (info == null || info.lastmodified != f.lastModified() || info.size != f.length()) {\n@@ -1499,7 +1498,7 @@ public void postSoftCommit() {\n     protected String tlogFileName;\n     protected String sOffset;\n     protected String sLen;\n-    protected String compress;\n+    protected final boolean compress;\n     protected boolean useChecksum;\n \n     protected long offset = -1;\n@@ -1521,7 +1520,7 @@ public DirectoryFileStream(SolrParams solrParams) {\n       \n       sOffset = params.get(OFFSET);\n       sLen = params.get(LEN);\n-      compress = params.get(COMPRESSION);\n+      compress = Boolean.parseBoolean(params.get(COMPRESSION));\n       useChecksum = params.getBool(CHECKSUM, false);\n       indexGen = params.getLong(GENERATION);\n       if (useChecksum) {\n@@ -1565,7 +1564,7 @@ protected void initWrite() throws IOException {\n \n     protected void createOutputStream(OutputStream out) {\n       out = new CloseShieldOutputStream(out); // DeflaterOutputStream requires a close call, but don't close the request outputstream\n-      if (Boolean.parseBoolean(compress)) {\n+      if (compress) {\n         fos = new FastOutputStream(new DeflaterOutputStream(out));\n       } else {\n         fos = new FastOutputStream(out);\n@@ -1726,7 +1725,7 @@ public LocalFsConfFileStream(SolrParams solrParams) {\n \n     protected File initFile() {\n       //if it is a conf file read from config directory\n-      return new File(core.getResourceLoader().getConfigDir(), cfileName);\n+      return core.getResourceLoader().getConfigPath().resolve(cfileName).toFile();\n     }\n \n   }"
  },
  {
    "sha": "49c6351d7254c9fdd14f1116962530eecf9df6a8",
    "filename": "solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 10,
    "changes": 23,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -30,6 +30,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n \n public class AnalysisAfterCoreReloadTest extends SolrTestCaseJ4 {\n   \n@@ -115,24 +120,22 @@ public void testStopwordsAfterCoreReload() throws Exception {\n   \n   private void overwriteStopwords(String stopwords) throws IOException {\n     try (SolrCore core = h.getCoreContainer().getCore(collection)) {\n-      String configDir = core.getResourceLoader().getConfigDir();\n-      FileUtils.moveFile(new File(configDir, \"stopwords.txt\"), new File(configDir, \"stopwords.txt.bak\"));\n-      File file = new File(configDir, \"stopwords.txt\");\n-      FileUtils.writeStringToFile(file, stopwords, \"UTF-8\");\n-     \n+      Path configPath = core.getResourceLoader().getConfigPath();\n+      Files.move(configPath.resolve(\"stopwords.txt\"), configPath.resolve(\"stopwords.txt.bak\"));\n+      Files.write(configPath.resolve(\"stopwords.txt\"), stopwords.getBytes(StandardCharsets.UTF_8));\n     }\n   }\n   \n   @Override\n   public void tearDown() throws Exception {\n-    String configDir;\n+    Path configPath;\n     try (SolrCore core = h.getCoreContainer().getCore(collection)) {\n-      configDir = core.getResourceLoader().getConfigDir();\n+      configPath = core.getResourceLoader().getConfigPath();\n     }\n     super.tearDown();\n-    if (new File(configDir, \"stopwords.txt.bak\").exists()) {\n-      FileUtils.deleteQuietly(new File(configDir, \"stopwords.txt\"));\n-      FileUtils.moveFile(new File(configDir, \"stopwords.txt.bak\"), new File(configDir, \"stopwords.txt\"));\n+    Path backupFile = configPath.resolve(\"stopwords.txt.bak\");\n+    if (Files.exists(backupFile)) {\n+      Files.move(backupFile, configPath.resolve(\"stopwords.txt\"), REPLACE_EXISTING);\n     }\n   }\n "
  },
  {
    "sha": "a7323dc5fd0145ab744dd89b3f8ae469d579153e",
    "filename": "solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/test/org/apache/solr/core/AlternateDirectoryTest.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -16,8 +16,8 @@\n  */\n package org.apache.solr.core;\n \n-import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Path;\n \n import org.apache.lucene.index.DirectoryReader;\n import org.apache.lucene.index.IndexWriter;\n@@ -58,8 +58,7 @@ public void testAltReaderUsed() throws Exception {\n     public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n       openCalled = true;\n \n-      // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n-      return dir = newFSDirectory(new File(path).toPath(), lockFactory);\n+      return dir = newFSDirectory(Path.of(path), lockFactory);\n     }\n \n   }"
  },
  {
    "sha": "0592294f361bb05b246b2441cdff5378ddcadd3e",
    "filename": "solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/apache/solr/blob/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java",
    "raw_url": "https://github.com/apache/solr/raw/95276405b4830ba58547aeda3cd7ed51467df5b3/solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/test-framework/src/java/org/apache/solr/core/MockFSDirectoryFactory.java?ref=95276405b4830ba58547aeda3cd7ed51467df5b3",
    "patch": "@@ -34,8 +34,7 @@\n \n   @Override\n   public Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n-    // we pass NoLockFactory, because the real lock factory is set later by injectLockFactory:\n-    Directory dir = LuceneTestCase.newFSDirectory(new File(path).toPath(), lockFactory);\n+    Directory dir = LuceneTestCase.newFSDirectory(Path.of(path), lockFactory);\n     // we can't currently do this check because of how\n     // Solr has to reboot a new Directory sometimes when replicating\n     // or rolling back - the old directory is closed and the following\n@@ -64,8 +63,7 @@ private Directory reduce(Directory dir) {\n     Directory cdir = dir;\n     if (dir instanceof NRTCachingDirectory) {\n       cdir = ((NRTCachingDirectory)dir).getDelegate();\n-    }\n-    if (cdir instanceof TrackingDirectoryWrapper) {\n+    } else if (dir instanceof TrackingDirectoryWrapper) {\n       cdir = ((TrackingDirectoryWrapper)dir).getDelegate();\n     }\n     return cdir;"
  }
]
