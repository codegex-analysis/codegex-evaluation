[
  {
    "sha": "bed9da006ed56476ef4d9db1ed24f34c0adc2a9d",
    "filename": "solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -18,9 +18,12 @@\n \n import java.io.IOException;\n import java.lang.invoke.MethodHandles;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.NoSuchFileException;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.LinkedList;\n@@ -66,7 +69,6 @@\n import org.apache.solr.common.luke.FieldFlag;\n import org.apache.solr.common.params.CommonParams;\n import org.apache.solr.common.params.SolrParams;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.common.util.SimpleOrderedMap;\n import org.apache.solr.handler.RequestHandlerBase;\n@@ -298,7 +300,7 @@ private static String getFieldFlags( SchemaField f )\n \n       BytesRef bytes = field.binaryValue();\n       if (bytes != null) {\n-        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n+        f.add( \"binary\", new String(Base64.getEncoder().encode(ByteBuffer.wrap(bytes.bytes, bytes.offset, bytes.length)).array(), StandardCharsets.ISO_8859_1));\n       }\n       if (!ftype.isPointField()) {\n         Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());"
  },
  {
    "sha": "64da8490150ef10ae96e0ab1d4f1d92876993de2",
    "filename": "solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -29,6 +29,7 @@\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -75,7 +76,6 @@\n import org.apache.solr.common.params.CommonParams;\n import org.apache.solr.common.params.ModifiableSolrParams;\n import org.apache.solr.common.params.SolrParams;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.ExecutorUtil;\n import org.apache.solr.common.util.JavaBinCodec;\n import org.apache.solr.common.util.NamedList;\n@@ -948,7 +948,7 @@ private void mergeRemoteRes(SolrQueryResponse rsp, NamedList<Object> remoteRes)\n             graph.render(bi.getGraphics());\n             ByteArrayOutputStream baos = new ByteArrayOutputStream();\n             ImageIO.write(bi, \"png\", baos);\n-            values.add(name, Base64.byteArrayToBase64(baos.toByteArray()));\n+            values.add(name, Base64.getEncoder().encodeToString(baos.toByteArray()));\n             break;\n           case STRING:\n             str.setLength(0);"
  },
  {
    "sha": "409a5f2edb2b3fd7618a38db44566ca5a85dfa92",
    "filename": "solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -17,8 +17,11 @@\n package org.apache.solr.handler.component;\n \n import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -39,7 +42,6 @@\n import org.apache.solr.common.params.CommonParams;\n import org.apache.solr.common.params.SolrParams;\n import org.apache.solr.common.params.TermVectorParams;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.core.SolrCore;\n import org.apache.solr.schema.IndexSchema;\n@@ -366,7 +368,7 @@ private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, In\n               thePayloads = new NamedList<>();\n               termInfo.add(\"payloads\", thePayloads);\n             }\n-            thePayloads.add(\"payload\", Base64.byteArrayToBase64(payload.bytes, payload.offset, payload.length));\n+            thePayloads.add(\"payload\", new String(Base64.getEncoder().encode(ByteBuffer.wrap(payload.bytes, payload.offset, payload.length)).array(), StandardCharsets.ISO_8859_1));\n           }\n         }\n       }"
  },
  {
    "sha": "094a219fe1683f82faad947e681aef44edd36efc",
    "filename": "solr/core/src/java/org/apache/solr/schema/BinaryField.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/schema/BinaryField.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/schema/BinaryField.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/schema/BinaryField.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -19,12 +19,13 @@\n import java.io.IOException;\n import java.lang.invoke.MethodHandles;\n import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n \n import org.apache.lucene.index.IndexableField;\n import org.apache.lucene.search.SortField;\n import org.apache.lucene.util.BytesRef;\n import org.apache.solr.common.SolrException;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.response.TextResponseWriter;\n import org.apache.solr.uninverting.UninvertingReader.Type;\n import org.slf4j.Logger;\n@@ -44,7 +45,7 @@ public void checkSchemaField(SchemaField field) {\n   }\n \n   private String toBase64String(ByteBuffer buf) {\n-    return Base64.byteArrayToBase64(buf.array(), buf.position(), buf.limit()-buf.position());\n+    return new String(Base64.getEncoder().encode(buf).array(), StandardCharsets.ISO_8859_1);\n   }\n \n   @Override\n@@ -98,7 +99,7 @@ public IndexableField createField(SchemaField field, Object val) {\n     } else {\n       String strVal = val.toString();\n       //the string has to be a base64 encoded string\n-      buf = Base64.base64ToByteArray(strVal);\n+      buf = Base64.getDecoder().decode(strVal);\n       offset = 0;\n       len = buf.length;\n     }\n@@ -112,7 +113,7 @@ public Object toNativeType(Object val) {\n       return ByteBuffer.wrap((byte[]) val);\n     } else if (val instanceof CharSequence) {\n       final CharSequence valAsCharSequence = (CharSequence) val;\n-      return ByteBuffer.wrap(Base64.base64ToByteArray(valAsCharSequence.toString()));\n+      return ByteBuffer.wrap(Base64.getDecoder().decode(valAsCharSequence.toString()));\n     }\n     return super.toNativeType(val);\n   }"
  },
  {
    "sha": "d6ac6b6c1698f3d6717f99d1d2b5d8221867fc0c",
    "filename": "solr/core/src/java/org/apache/solr/schema/FieldType.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/schema/FieldType.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/schema/FieldType.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/schema/FieldType.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -18,7 +18,10 @@\n \n import java.io.IOException;\n import java.lang.invoke.MethodHandles;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.Base64;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -67,7 +70,6 @@\n import org.apache.solr.common.IteratorWriter;\n import org.apache.solr.common.SolrException;\n import org.apache.solr.common.SolrException.ErrorCode;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.SimpleOrderedMap;\n import org.apache.solr.common.util.StrUtils;\n import org.apache.solr.query.SolrRangeQuery;\n@@ -1327,7 +1329,7 @@ protected static Object marshalBase64SortValue(Object value) {\n       return null;\n     }\n     final BytesRef val = (BytesRef)value;\n-    return Base64.byteArrayToBase64(val.bytes, val.offset, val.length);\n+    return new String(Base64.getEncoder().encode(ByteBuffer.wrap(val.bytes, val.offset, val.length)).array(), StandardCharsets.ISO_8859_1);\n   }\n \n   /**\n@@ -1338,7 +1340,7 @@ protected static Object unmarshalBase64SortValue(Object value) {\n       return null;\n     }\n     final String val = (String)value;\n-    final byte[] bytes = Base64.base64ToByteArray(val);\n+    final byte[] bytes = Base64.getDecoder().decode(val);\n     return new BytesRef(bytes);\n   }\n "
  },
  {
    "sha": "2c68adbdc61fb87e9a6b70ab5bf6ad05a8264b6d",
    "filename": "solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/schema/JsonPreAnalyzedParser.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -19,6 +19,9 @@\n import java.io.IOException;\n import java.io.Reader;\n import java.lang.invoke.MethodHandles;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.LinkedList;\n@@ -40,7 +43,6 @@\n import org.apache.lucene.util.AttributeSource;\n import org.apache.lucene.util.AttributeSource.State;\n import org.apache.lucene.util.BytesRef;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.schema.PreAnalyzedField.ParseResult;\n import org.apache.solr.schema.PreAnalyzedField.PreAnalyzedParser;\n import org.noggit.JSONUtil;\n@@ -100,7 +102,7 @@ public ParseResult parse(Reader reader, AttributeSource parent)\n     res.str = (String)map.get(STRING_KEY);\n     String bin = (String)map.get(BINARY_KEY);\n     if (bin != null) {\n-      byte[] data = Base64.base64ToByteArray(bin);\n+      byte[] data = Base64.getDecoder().decode(bin);\n       res.bin = data;\n     }\n     List<Object> tokens = (List<Object>)map.get(TOKENS_KEY);\n@@ -166,7 +168,7 @@ public ParseResult parse(Reader reader, AttributeSource parent)\n         } else if (key.equals(PAYLOAD_KEY)) {\n           String str = String.valueOf(e.getValue());\n           if (str.length() > 0) {\n-            byte[] data = Base64.base64ToByteArray(str);\n+            byte[] data = Base64.getDecoder().decode(str);\n             PayloadAttribute p = parent.addAttribute(PayloadAttribute.class);\n             if (data != null && data.length > 0) {\n               p.setPayload(new BytesRef(data));\n@@ -216,7 +218,7 @@ public String toFormattedString(Field f) throws IOException {\n       }\n       BytesRef binaryValue = f.binaryValue();\n       if (binaryValue != null) {\n-        map.put(BINARY_KEY, Base64.byteArrayToBase64(binaryValue.bytes, binaryValue.offset, binaryValue.length));\n+        map.put(BINARY_KEY, new String(Base64.getEncoder().encode(ByteBuffer.wrap(binaryValue.bytes, binaryValue.offset, binaryValue.length)).array(), StandardCharsets.ISO_8859_1));\n       }\n     }\n     TokenStream ts = f.tokenStreamValue();\n@@ -248,7 +250,7 @@ public String toFormattedString(Field f) throws IOException {\n             } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n               BytesRef p = ((PayloadAttribute)att).getPayload();\n               if (p != null && p.length > 0) {\n-                tok.put(PAYLOAD_KEY, Base64.byteArrayToBase64(p.bytes, p.offset, p.length));\n+                tok.put(PAYLOAD_KEY, new String(Base64.getEncoder().encode(ByteBuffer.wrap(p.bytes, p.offset, p.length)).array(), StandardCharsets.ISO_8859_1));\n               }\n             } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n               tok.put(POSINCR_KEY, ((PositionIncrementAttribute)att).getPositionIncrement());"
  },
  {
    "sha": "8a64788712f244d880d08a7fef3ef4cb9e1f40cd",
    "filename": "solr/core/src/java/org/apache/solr/search/CursorMark.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/search/CursorMark.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/search/CursorMark.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/search/CursorMark.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -26,12 +26,12 @@\n \n import static org.apache.solr.common.params.CursorMarkParams.*;\n \n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.JavaBinCodec;\n import org.apache.solr.schema.IndexSchema;\n import org.apache.solr.schema.FieldType;\n import org.apache.solr.schema.SchemaField;\n \n+import java.util.Base64;\n import java.util.List;\n import java.util.ArrayList;\n import java.io.ByteArrayOutputStream;\n@@ -183,7 +183,7 @@ public void parseSerializedTotem(final String serialized) {\n \n     List<Object> pieces = null;\n     try {\n-      final byte[] rawData = Base64.base64ToByteArray(serialized);\n+      final byte[] rawData = Base64.getDecoder().decode(serialized);\n       try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayInputStream in = new ByteArrayInputStream(rawData)){\n         pieces = (List<Object>) jbc.unmarshal(in);\n         boolean b = false;\n@@ -260,7 +260,7 @@ public String getSerializedTotem() {\n     try (JavaBinCodec jbc = new JavaBinCodec(); ByteArrayOutputStream out = new ByteArrayOutputStream(256)) {\n       jbc.marshal(marshalledValues, out);\n       byte[] rawData = out.toByteArray();\n-      return Base64.byteArrayToBase64(rawData, 0, rawData.length);\n+      return Base64.getEncoder().encodeToString(rawData);\n     } catch (Exception ex) {\n       throw new SolrException(ErrorCode.SERVER_ERROR,\n                               \"Unable to format search after totem\", ex);"
  },
  {
    "sha": "410a4aa6a4b40cbc0e9354dfd6dad01d9a3de7ed",
    "filename": "solr/core/src/java/org/apache/solr/security/JWTAuthPlugin.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/security/JWTAuthPlugin.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/security/JWTAuthPlugin.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/security/JWTAuthPlugin.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -26,6 +26,7 @@\n import java.time.Instant;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -47,7 +48,6 @@\n import org.apache.solr.common.SolrException;\n import org.apache.solr.common.SpecProvider;\n import org.apache.solr.common.StringUtils;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.CommandOperation;\n import org.apache.solr.common.util.Utils;\n import org.apache.solr.common.util.ValidatingJsonMap;\n@@ -577,7 +577,7 @@ protected String generateAuthDataHeader() {\n     data.put(\"scope\", adminUiScope);\n     data.put(\"redirect_uris\", redirectUris);\n     String headerJson = Utils.toJSONString(data);\n-    return Base64.byteArrayToBase64(headerJson.getBytes(StandardCharsets.UTF_8));\n+    return Base64.getEncoder().encodeToString(headerJson.getBytes(StandardCharsets.UTF_8));\n   }\n \n   /**"
  },
  {
    "sha": "3945d67e13d57e79544ed5d6e6abba73ad6c32a1",
    "filename": "solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -24,6 +24,7 @@\n import java.nio.ByteBuffer;\n import java.security.Principal;\n import java.security.PublicKey;\n+import java.util.Base64;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -42,7 +43,6 @@\n import org.apache.solr.client.solrj.impl.HttpClientUtil;\n import org.apache.solr.client.solrj.impl.HttpListenerFactory;\n import org.apache.solr.client.solrj.impl.SolrHttpClientBuilder;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.ExecutorUtil;\n import org.apache.solr.common.util.StrUtils;\n import org.apache.solr.common.util.SuppressForbidden;\n@@ -161,7 +161,7 @@ private PKIHeaderData decipherHeader(String nodeName, String cipherBase64) {\n   private static  PKIHeaderData parseCipher(String cipher, PublicKey key) {\n     byte[] bytes;\n     try {\n-      bytes = CryptoKeys.decryptRSA(Base64.base64ToByteArray(cipher), key);\n+      bytes = CryptoKeys.decryptRSA(Base64.getDecoder().decode(cipher), key);\n     } catch (Exception e) {\n       log.error(\"Decryption failed , key must be wrong\", e);\n       return null;\n@@ -304,7 +304,7 @@ public void process(HttpRequest httpRequest, HttpContext httpContext) throws Htt\n \n     byte[] payload = s.getBytes(UTF_8);\n     byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n-    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n+    String base64Cipher = Base64.getEncoder().encodeToString(payloadCipher);\n     log.trace(\"generateToken: usr={} token={}\", usr, base64Cipher);\n     return Optional.of(base64Cipher);\n   }"
  },
  {
    "sha": "8e70b906e4fb704d5baa8a19be8360a1e6f24596",
    "filename": "solr/core/src/java/org/apache/solr/util/CryptoKeys.java",
    "status": "modified",
    "additions": 8,
    "deletions": 8,
    "changes": 16,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/util/CryptoKeys.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/java/org/apache/solr/util/CryptoKeys.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/java/org/apache/solr/util/CryptoKeys.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -42,12 +42,12 @@\n import java.security.spec.PKCS8EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.HashMap;\n import java.util.Map;\n \n import com.google.common.collect.ImmutableMap;\n import org.apache.solr.common.SolrException;\n-import org.apache.solr.common.util.Base64;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -76,7 +76,7 @@ public String verify(String sig, ByteBuffer data) {\n     for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n       boolean verified;\n       try {\n-        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n+        verified = CryptoKeys.verify(entry.getValue(), Base64.getDecoder().decode(sig), data);\n         log.debug(\"verified {} \", verified);\n         if (verified) return entry.getKey();\n       } catch (Exception e) {\n@@ -94,7 +94,7 @@ public String verify(String sig, InputStream is) {\n     for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n       boolean verified;\n       try {\n-        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), is);\n+        verified = CryptoKeys.verify(entry.getValue(), Base64.getDecoder().decode(sig), is);\n         log.debug(\"verified {} \", verified);\n         if (verified) return entry.getKey();\n       } catch (Exception e) {\n@@ -258,7 +258,7 @@ public static String decodeAES(String base64CipherTxt, String pwd, final int key\n     final int CIPHERTEXT_OFFSET = SALT_OFFSET + SALT_SIZE;\n \n     try {\n-      byte[] headerSaltAndCipherText = Base64.base64ToByteArray(base64CipherTxt);\n+      byte[] headerSaltAndCipherText = Base64.getDecoder().decode(base64CipherTxt);\n \n       // --- extract salt & encrypted ---\n       // header is \"Salted__\", ASCII encoded, if salt is being used (the default)\n@@ -307,7 +307,7 @@ public static String decodeAES(String base64CipherTxt, String pwd, final int key\n   public static PublicKey deserializeX509PublicKey(String pubKey) {\n     try {\n       KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n-      X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(Base64.base64ToByteArray(pubKey));\n+      X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(Base64.getDecoder().decode(pubKey));\n       return keyFactory.generatePublic(publicKeySpec);\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);\n@@ -349,7 +349,7 @@ public RSAKeyPair() {\n       java.security.KeyPair keyPair = keyGen.genKeyPair();\n       privateKey = keyPair.getPrivate();\n       publicKey = keyPair.getPublic();\n-      pubKeyStr = Base64.byteArrayToBase64(publicKey.getEncoded());\n+      pubKeyStr = Base64.getEncoder().encodeToString(publicKey.getEncoded());\n     }\n \n     /**\n@@ -365,7 +365,7 @@ public RSAKeyPair(URL privateKeyResourceName, URL publicKeyResourceName) throws\n         String privateString = new String(inPrivate.readAllBytes(), StandardCharsets.UTF_8)\n             .replaceAll(\"-----(BEGIN|END) PRIVATE KEY-----\", \"\");\n \n-        PKCS8EncodedKeySpec privateSpec = new PKCS8EncodedKeySpec(java.util.Base64.getMimeDecoder().decode(privateString));\n+        PKCS8EncodedKeySpec privateSpec = new PKCS8EncodedKeySpec(Base64.getMimeDecoder().decode(privateString));\n         KeyFactory rsaFactory = KeyFactory.getInstance(\"RSA\");\n         privateKey = rsaFactory.generatePrivate(privateSpec);\n       } catch (NoSuchAlgorithmException e) {\n@@ -374,7 +374,7 @@ public RSAKeyPair(URL privateKeyResourceName, URL publicKeyResourceName) throws\n \n       try (InputStream inPublic = publicKeyResourceName.openStream()) {\n         publicKey = getX509PublicKey(inPublic.readAllBytes());\n-        pubKeyStr = Base64.byteArrayToBase64(publicKey.getEncoded());\n+        pubKeyStr = Base64.getEncoder().encodeToString(publicKey.getEncoded());\n       }\n     }\n "
  },
  {
    "sha": "8d5c9435b5587e43ddd398be505e78fed69e7b0d",
    "filename": "solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -19,6 +19,7 @@\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.lang.invoke.MethodHandles;\n+import java.util.Base64;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n@@ -33,7 +34,6 @@\n import org.apache.solr.common.params.CollectionAdminParams;\n import org.apache.solr.common.params.CommonParams;\n import org.apache.solr.common.params.SolrParams;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.common.util.SimpleOrderedMap;\n import org.apache.solr.common.util.TimeSource;\n@@ -172,7 +172,7 @@ public void testGet() throws Exception {\n       assertEquals(3, entry.size());\n       entry.forEach((vk, vv) -> {\n         String valString = (String)vv;\n-        byte[] img = Base64.base64ToByteArray(valString);\n+        byte[] img = Base64.getDecoder().decode(valString);\n         try {\n           ImageIO.read(new ByteArrayInputStream(img));\n         } catch (IOException e) {"
  },
  {
    "sha": "41eea09ec5e5b150aca272a976799e5e92699a57",
    "filename": "solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -16,10 +16,12 @@\n  */\n package org.apache.solr.handler.component;\n import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n import java.util.EnumSet;\n@@ -44,7 +46,6 @@\n import org.apache.solr.common.params.MapSolrParams;\n import org.apache.solr.common.params.SolrParams;\n import org.apache.solr.common.params.StatsParams;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.NamedList;\n import org.apache.solr.common.util.StrUtils;\n import org.apache.solr.core.SolrCore;\n@@ -1410,7 +1411,7 @@ public void testIndividualStatLocalParams() throws Exception {\n                         Collections.singletonList(distinctValsXpath));\n     ExpectedStat.createSimple(Stat.countDistinct, \"true\", \"long\", \"10\");\n     final String percentileShardXpath = kpre + \"str[@name='percentiles'][.='\" \n-      + Base64.byteArrayToBase64(tdigestBuf.array(), 0, tdigestBuf.array().length) + \"']\";\n+      + new String(Base64.getEncoder().encode(tdigestBuf.array()), StandardCharsets.ISO_8859_1) + \"']\";\n     final String p90 = \"\" + tdigest.quantile(0.90D);\n     final String p99 = \"\" + tdigest.quantile(0.99D);\n     ExpectedStat.create(Stat.percentiles, \"'90, 99'\",\n@@ -1419,7 +1420,7 @@ public void testIndividualStatLocalParams() throws Exception {\n                                       kpre + \"lst[@name='percentiles']/double[@name='90.0'][.=\"+p90+\"]\",\n                                       kpre + \"lst[@name='percentiles']/double[@name='99.0'][.=\"+p99+\"]\"));\n     final String cardinalityShardXpath = kpre + \"str[@name='cardinality'][.='\" \n-      + Base64.byteArrayToBase64(hllBytes, 0, hllBytes.length) + \"']\";\n+      + new String(Base64.getEncoder().encode(hllBytes),StandardCharsets.ISO_8859_1) + \"']\";\n     final String cardinalityXpath = kpre + \"long[@name='cardinality'][.='10']\"; \n     ExpectedStat.create(Stat.cardinality, \"true\",\n                         Collections.singletonList(cardinalityShardXpath),"
  },
  {
    "sha": "4f198c5cce10e292011920f6092a9bd52f35ca1f",
    "filename": "solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/test/org/apache/solr/security/BasicAuthStandaloneTest.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -22,6 +22,7 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.Base64;\n import java.util.Collections;\n import java.util.Properties;\n \n@@ -36,7 +37,6 @@\n import org.apache.solr.client.solrj.impl.HttpClientUtil;\n import org.apache.solr.client.solrj.impl.HttpSolrClient;\n import org.apache.solr.common.params.MapSolrParams;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.Utils;\n import org.apache.solr.handler.admin.SecurityConfHandler;\n import org.apache.solr.handler.admin.SecurityConfHandlerLocalForTesting;\n@@ -162,7 +162,7 @@ private void doHttpPost(HttpClient cl, String url, String jsonCommand, String ba\n \n   public static void setBasicAuthHeader(AbstractHttpMessage httpMsg, String user, String pwd) {\n     String userPass = user + \":\" + pwd;\n-    String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n+    String encoded = Base64.getEncoder().encodeToString(userPass.getBytes(UTF_8));\n     httpMsg.setHeader(new BasicHeader(\"Authorization\", \"Basic \" + encoded));\n     log.info(\"Added Basic Auth security Header {}\",encoded );\n   }"
  },
  {
    "sha": "9d211b7c21755aa4b5503a3ce6555f27d42c5cc3",
    "filename": "solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -24,6 +24,7 @@\n import java.net.HttpURLConnection;\n import java.net.URL;\n import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n@@ -41,7 +42,6 @@\n import org.apache.solr.SolrTestCaseJ4;\n import org.apache.solr.client.solrj.impl.HttpClientUtil;\n import org.apache.solr.cloud.SolrCloudAuthTestCase;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.Pair;\n import org.apache.solr.common.util.TimeSource;\n import org.apache.solr.common.util.Utils;\n@@ -137,7 +137,7 @@ public void infoRequestValidateXSolrAuthHeaders() throws IOException {\n     Map<String, String> headers = getHeaders(baseUrl + \"/admin/info/system\", null);\n     assertEquals(\"Should have received 401 code\", \"401\", headers.get(\"code\"));\n     assertEquals(\"Bearer realm=\\\"my-solr-jwt\\\"\", headers.get(\"WWW-Authenticate\"));\n-    String authData = new String(Base64.base64ToByteArray(headers.get(\"X-Solr-AuthData\")), UTF_8);\n+    String authData = new String(Base64.getDecoder().decode(headers.get(\"X-Solr-AuthData\")), UTF_8);\n     assertEquals(\"{\\n\" +\n         \"  \\\"scope\\\":\\\"solr:admin\\\",\\n\" +\n         \"  \\\"redirect_uris\\\":[],\\n\" +\n@@ -159,7 +159,7 @@ public void infoRequestValidateXSolrAuthHeadersBlockUnknownFalse() throws Except\n     Map<String, String> headers = getHeaders(baseUrl + \"/admin/info/system\", null);\n     assertEquals(\"Should have received 401 code\", \"401\", headers.get(\"code\"));\n     assertEquals(\"Bearer realm=\\\"my-solr-jwt-blockunknown-false\\\"\", headers.get(\"WWW-Authenticate\"));\n-    String authData = new String(Base64.base64ToByteArray(headers.get(\"X-Solr-AuthData\")), UTF_8);\n+    String authData = new String(Base64.getDecoder().decode(headers.get(\"X-Solr-AuthData\")), UTF_8);\n     assertEquals(\"{\\n\" +\n         \"  \\\"scope\\\":\\\"solr:admin\\\",\\n\" +\n         \"  \\\"redirect_uris\\\":[],\\n\" +"
  },
  {
    "sha": "c42c0e10eb2f73f79226d27fb1dbe39ae24e4126",
    "filename": "solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -22,6 +22,7 @@\n import java.nio.file.Path;\n import java.security.Principal;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -30,7 +31,6 @@\n \n import org.apache.solr.SolrTestCaseJ4;\n import org.apache.solr.common.SolrException;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.Utils;\n import org.jose4j.jwk.RsaJsonWebKey;\n import org.jose4j.jwk.RsaJwkGenerator;\n@@ -442,7 +442,7 @@ public void xSolrAuthDataHeader() {\n     testConfig.put(\"clientId\", \"solr-cluster\");\n     plugin.init(testConfig);\n     String headerBase64 = plugin.generateAuthDataHeader();\n-    String headerJson = new String(Base64.base64ToByteArray(headerBase64), StandardCharsets.UTF_8);\n+    String headerJson = new String(Base64.getDecoder().decode(headerBase64), StandardCharsets.UTF_8);\n     Map<String,String> parsed = (Map<String, String>) Utils.fromJSONString(headerJson);\n     assertEquals(\"solr:admin\", parsed.get(\"scope\"));\n     assertEquals(\"http://acmepaymentscorp/oauth/auz/authorize\", parsed.get(\"authorizationEndpoint\"));"
  },
  {
    "sha": "003bb83b29d9094b76091428eee854a495b86351",
    "filename": "solr/solrj/src/java/org/apache/solr/client/solrj/cloud/VersionedData.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/client/solrj/cloud/VersionedData.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/client/solrj/cloud/VersionedData.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solrj/src/java/org/apache/solr/client/solrj/cloud/VersionedData.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -18,10 +18,10 @@\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Objects;\n \n import org.apache.solr.common.MapWriter;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.Utils;\n import org.apache.zookeeper.CreateMode;\n \n@@ -72,7 +72,7 @@ public void writeMap(EntryWriter ew) throws IOException {\n     }\n     ew.put(\"mode\", mode.toString());\n     if (data != null) {\n-      ew.put(\"data\", Base64.byteArrayToBase64(data));\n+      ew.put(\"data\", Base64.getEncoder().encodeToString(data));\n     }\n   }\n "
  },
  {
    "sha": "f5d93177560294590c80950fbb910bad5b248232",
    "filename": "solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -28,6 +28,7 @@\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n@@ -65,7 +66,6 @@\n import org.apache.solr.common.params.ModifiableSolrParams;\n import org.apache.solr.common.params.SolrParams;\n import org.apache.solr.common.params.UpdateParams;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.ContentStream;\n import org.apache.solr.common.util.ExecutorUtil;\n import org.apache.solr.common.util.NamedList;\n@@ -488,7 +488,7 @@ private void setBasicAuthHeader(@SuppressWarnings({\"rawtypes\"})SolrRequest solrR\n \n   private String basicAuthCredentialsToAuthorizationString(String user, String pass) {\n     String userPass = user + \":\" + pass;\n-    return \"Basic \" + Base64.byteArrayToBase64(userPass.getBytes(FALLBACK_CHARSET));\n+    return \"Basic \" + Base64.getEncoder().encodeToString(userPass.getBytes(FALLBACK_CHARSET));\n   }\n \n   private Request makeRequest(@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest, String collection)"
  },
  {
    "sha": "a2af0b6ab200a7687f339073156542eda0eed921",
    "filename": "solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -29,6 +29,7 @@\n import java.nio.charset.StandardCharsets;\n import java.security.Principal;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n@@ -79,7 +80,6 @@\n import org.apache.solr.common.params.CommonParams;\n import org.apache.solr.common.params.ModifiableSolrParams;\n import org.apache.solr.common.params.SolrParams;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.ContentStream;\n import org.apache.solr.common.util.ExecutorUtil;\n import org.apache.solr.common.util.NamedList;\n@@ -276,7 +276,7 @@ private boolean isV2ApiRequest(@SuppressWarnings({\"rawtypes\"})final SolrRequest\n   private void setBasicAuthHeader(@SuppressWarnings({\"rawtypes\"})SolrRequest request, HttpRequestBase method) throws UnsupportedEncodingException {\n     if (request.getBasicAuthUser() != null && request.getBasicAuthPassword() != null) {\n       String userPass = request.getBasicAuthUser() + \":\" + request.getBasicAuthPassword();\n-      String encoded = Base64.byteArrayToBase64(userPass.getBytes(FALLBACK_CHARSET));\n+      String encoded = Base64.getEncoder().encodeToString(userPass.getBytes(FALLBACK_CHARSET));\n       method.setHeader(new BasicHeader(\"Authorization\", \"Basic \" + encoded));\n     }\n   }"
  },
  {
    "sha": "420f432da4702a99a4302a46ad3e2385db3a7dc5",
    "filename": "solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java",
    "status": "modified",
    "additions": 4,
    "deletions": 3,
    "changes": 7,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -20,7 +20,9 @@\n import java.io.StringWriter;\n import java.io.Writer;\n import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.Base64;\n import java.util.Collection;\n import java.util.Date;\n import java.util.Map;\n@@ -29,7 +31,6 @@\n import org.apache.solr.common.SolrInputDocument;\n import org.apache.solr.common.SolrInputField;\n import org.apache.solr.common.cloud.Slice;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.ContentStream;\n import org.apache.solr.common.util.ContentStreamBase;\n import org.apache.solr.common.util.XML;\n@@ -111,10 +112,10 @@ private static void writeVal(Writer writer, String name, Object v, String update\n       v = ((Date)v).toInstant().toString();\n     } else if (v instanceof byte[]) {\n       byte[] bytes = (byte[]) v;\n-      v = Base64.byteArrayToBase64(bytes, 0, bytes.length);\n+      v = Base64.getEncoder().encodeToString(bytes);\n     } else if (v instanceof ByteBuffer) {\n       ByteBuffer bytes = (ByteBuffer) v;\n-      v = Base64.byteArrayToBase64(bytes.array(), bytes.position(),bytes.limit() - bytes.position());\n+      v = new String(Base64.getEncoder().encode(bytes).array(), StandardCharsets.ISO_8859_1);\n     }\n \n     XML.Writable valWriter = null;"
  },
  {
    "sha": "e470ed94495899dc3d7364b3658509488267e989",
    "filename": "solr/solrj/src/java/org/apache/solr/common/util/Base64.java",
    "status": "removed",
    "additions": 0,
    "deletions": 157,
    "changes": 157,
    "blob_url": "https://github.com/apache/solr/blob/d4f26eb0b128126899187c6a0e3f55a8055a1df0/solr/solrj/src/java/org/apache/solr/common/util/Base64.java",
    "raw_url": "https://github.com/apache/solr/raw/d4f26eb0b128126899187c6a0e3f55a8055a1df0/solr/solrj/src/java/org/apache/solr/common/util/Base64.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solrj/src/java/org/apache/solr/common/util/Base64.java?ref=d4f26eb0b128126899187c6a0e3f55a8055a1df0",
    "patch": "@@ -1,157 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.solr.common.util;\n-\n-/**\n- * Static methods for translating Base64 encoded strings to byte arrays\n- * and vice-versa. \n- */\n-\n-public class Base64 {\n-  /**\n-   * This array is a lookup table that translates 6-bit positive integer\n-   * index values into their \"Base64 Alphabet\" equivalents as specified\n-   * in Table 1 of RFC 2045.\n-   */\n-  private static final char intToBase64[] = {\n-          'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n-          'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n-          'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n-          'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n-          '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n-  };\n-\n-  /**\n-   * This array is a lookup table that translates unicode characters\n-   * drawn from the \"Base64 Alphabet\" (as specified in Table 1 of RFC 2045)\n-   * into their 6-bit positive integer equivalents.  Characters that\n-   * are not in the Base64 alphabet but fall within the bounds of the\n-   * array are translated to -1.\n-   */\n-  private static final byte base64ToInt[] = {\n-          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-          -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54,\n-          55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\n-          5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n-          24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n-          35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n-  };\n-\n-  public static String byteArrayToBase64(byte[] a) {\n-    return byteArrayToBase64(a, 0, a.length);\n-  }\n-\n-  public static String byteArrayToBase64(byte[] a, int offset, int len) {\n-    int aLen = len;\n-    int numFullGroups = aLen / 3;\n-    int numBytesInPartialGroup = aLen - 3 * numFullGroups;\n-    int resultLen = 4 * ((aLen + 2) / 3);\n-    StringBuilder result = new StringBuilder(resultLen);\n-    char[] intToAlpha = intToBase64;\n-\n-    // Translate all full groups from byte array elements to Base64\n-    int inCursor = offset;\n-    for (int i = 0; i < numFullGroups; i++) {\n-      int byte0 = a[inCursor++] & 0xff;\n-      int byte1 = a[inCursor++] & 0xff;\n-      int byte2 = a[inCursor++] & 0xff;\n-      result.append(intToAlpha[byte0 >> 2]);\n-      result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n-      result.append(intToAlpha[(byte1 << 2) & 0x3f | (byte2 >> 6)]);\n-      result.append(intToAlpha[byte2 & 0x3f]);\n-    }\n-\n-    // Translate partial group if present\n-    if (numBytesInPartialGroup != 0) {\n-      int byte0 = a[inCursor++] & 0xff;\n-      result.append(intToAlpha[byte0 >> 2]);\n-      if (numBytesInPartialGroup == 1) {\n-        result.append(intToAlpha[(byte0 << 4) & 0x3f]);\n-        result.append(\"==\");\n-      } else {\n-        // assert numBytesInPartialGroup == 2;\n-        int byte1 = a[inCursor++] & 0xff;\n-        result.append(intToAlpha[(byte0 << 4) & 0x3f | (byte1 >> 4)]);\n-        result.append(intToAlpha[(byte1 << 2) & 0x3f]);\n-        result.append('=');\n-      }\n-    }\n-    return result.toString();\n-  }\n-\n-  public static byte[] base64ToByteArray(String s) {\n-    byte[] alphaToInt = base64ToInt;\n-    int sLen = s.length();\n-    int numGroups = sLen / 4;\n-    if (4 * numGroups != sLen)\n-      throw new IllegalArgumentException(\n-              \"String length must be a multiple of four.\");\n-    int missingBytesInLastGroup = 0;\n-    int numFullGroups = numGroups;\n-    if (sLen != 0) {\n-      if (s.charAt(sLen - 1) == '=') {\n-        missingBytesInLastGroup++;\n-        numFullGroups--;\n-      }\n-      if (s.charAt(sLen - 2) == '=')\n-        missingBytesInLastGroup++;\n-    }\n-    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n-\n-    // Translate all full groups from base64 to byte array elements\n-    int inCursor = 0, outCursor = 0;\n-    for (int i = 0; i < numFullGroups; i++) {\n-      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n-      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n-      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n-      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n-      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n-      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n-      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n-    }\n-\n-    // Translate partial group, if present\n-    if (missingBytesInLastGroup != 0) {\n-      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n-      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n-      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n-\n-      if (missingBytesInLastGroup == 1) {\n-        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n-        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n-      }\n-    }\n-    // assert inCursor == s.length()-missingBytesInLastGroup;\n-    // assert outCursor == result.length;\n-    return result;\n-  }\n-\n-  /**\n-   * Translates the specified character, which is assumed to be in the\n-   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n-   *\n-   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n-   * c is not in the Base64 Alphabet.\n-   */\n-  private static int base64toInt(char c, byte[] alphaToInt) {\n-    int result = alphaToInt[c];\n-    if (result < 0)\n-      throw new IllegalArgumentException(\"Illegal character \" + c);\n-    return result;\n-  }\n-}"
  },
  {
    "sha": "eae0dcacbff2a797e28e1aed022043a9fb2e8305",
    "filename": "solr/solrj/src/java/org/apache/solr/common/util/TextWriter.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/common/util/TextWriter.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/java/org/apache/solr/common/util/TextWriter.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solrj/src/java/org/apache/solr/common/util/TextWriter.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -19,8 +19,11 @@\n \n import java.io.IOException;\n import java.io.Writer;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Path;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Date;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n@@ -164,7 +167,7 @@ default void writeDate(String name, Date val) throws IOException {\n   }\n \n   default void writeByteArr(String name, byte[] buf, int offset, int len) throws IOException {\n-    writeStr(name, Base64.byteArrayToBase64(buf, offset, len), false);\n+    writeStr(name, new String(Base64.getEncoder().encode(ByteBuffer.wrap(buf, offset, len)).array(), StandardCharsets.ISO_8859_1), false);\n   }\n \n   default void writeInt(String name, int val) throws IOException {"
  },
  {
    "sha": "3257a3e0e99f0cc65f9a9c6db27bbaad24fa83ac",
    "filename": "solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest.java",
    "status": "modified",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -29,7 +29,6 @@\n import org.apache.solr.common.SolrInputDocument;\n import org.apache.solr.common.params.CommonParams;\n import org.apache.solr.common.params.MapSolrParams;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.SuppressForbidden;\n import org.eclipse.jetty.client.WWWAuthenticationProtocolHandler;\n import org.eclipse.jetty.http.HttpStatus;\n@@ -41,6 +40,7 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.Base64;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Enumeration;\n@@ -674,7 +674,7 @@ public void testSetCredentialsExplicitly() {\n       assertTrue(DebugServlet.headers.size() > 0);\n       String authorizationHeader = DebugServlet.headers.get(\"authorization\");\n       assertNotNull(\"No authorization information in headers found. Headers: \" + DebugServlet.headers, authorizationHeader);\n-      assertEquals(\"Basic \" + Base64.byteArrayToBase64(\"foo:explicit\".getBytes(StandardCharsets.UTF_8)),  authorizationHeader);\n+      assertEquals(\"Basic \" + Base64.getEncoder().encodeToString(\"foo:explicit\".getBytes(StandardCharsets.UTF_8)),  authorizationHeader);\n     }\n   }\n \n@@ -696,7 +696,7 @@ public void testSetCredentialsWithSysProps() throws IOException, SolrServerExcep\n       assertTrue(DebugServlet.headers.size() > 0);\n       String authorizationHeader = DebugServlet.headers.get(\"authorization\");\n       assertNotNull(\"No authorization information in headers found. Headers: \" + DebugServlet.headers, authorizationHeader);\n-      assertEquals(\"Basic \" + Base64.byteArrayToBase64(\"foo:bar\".getBytes(StandardCharsets.UTF_8)),  authorizationHeader);\n+      assertEquals(\"Basic \" + Base64.getEncoder().encodeToString(\"foo:bar\".getBytes(StandardCharsets.UTF_8)),  authorizationHeader);\n     } finally {\n       System.clearProperty(PreemptiveBasicAuthClientBuilderFactory.SYS_PROP_BASIC_AUTH_CREDENTIALS);\n       System.clearProperty(HttpClientUtil.SYS_PROP_HTTP_CLIENT_BUILDER_FACTORY);\n@@ -720,7 +720,7 @@ public void testPerRequestCredentialsWin() {\n       assertTrue(DebugServlet.headers.size() > 0);\n       String authorizationHeader = DebugServlet.headers.get(\"authorization\");\n       assertNotNull(\"No authorization information in headers found. Headers: \" + DebugServlet.headers, authorizationHeader);\n-      assertEquals(\"Basic \" + Base64.byteArrayToBase64(\"foo3:per-request\".getBytes(StandardCharsets.UTF_8)),  authorizationHeader);\n+      assertEquals(\"Basic \" + Base64.getEncoder().encodeToString(\"foo3:per-request\".getBytes(StandardCharsets.UTF_8)),  authorizationHeader);\n     } finally {\n       System.clearProperty(\"basicauth\");\n     }"
  },
  {
    "sha": "f9185622bf60ca999e209dab8d2daca5cb80495f",
    "filename": "solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/solr/blob/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase.java",
    "raw_url": "https://github.com/apache/solr/raw/227f8618c06b9a6822e5aa1275e47a72e3931838/solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase.java",
    "contents_url": "https://api.github.com/repos/apache/solr/contents/solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase.java?ref=227f8618c06b9a6822e5aa1275e47a72e3931838",
    "patch": "@@ -21,6 +21,7 @@\n import java.lang.invoke.MethodHandles;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -40,7 +41,6 @@\n import org.apache.http.message.BasicHeader;\n import org.apache.http.util.EntityUtils;\n import org.apache.solr.client.solrj.embedded.JettySolrRunner;\n-import org.apache.solr.common.util.Base64;\n import org.apache.solr.common.util.StrUtils;\n import org.apache.solr.common.util.Utils;\n import org.apache.solr.util.TimeOut;\n@@ -239,7 +239,7 @@ private static void verifySecurityStatus(HttpClient cl, String url, String objPa\n \n   protected static String makeBasicAuthHeader(String user, String pwd) {\n     String userPass = user + \":\" + pwd;\n-    return \"Basic \" + Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n+    return \"Basic \" + Base64.getEncoder().encodeToString(userPass.getBytes(UTF_8));\n   }\n \n   static String getBearerAuthHeader(JsonWebSignature jws) throws JoseException {"
  }
]
