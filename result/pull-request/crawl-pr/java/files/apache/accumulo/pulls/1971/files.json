[
  {
    "sha": "eee16b5c09a17dd189861770d84ddd886ad6d02e",
    "filename": "core/src/main/java/org/apache/accumulo/core/clientImpl/ClientContext.java",
    "status": "modified",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/apache/accumulo/blob/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/ClientContext.java",
    "raw_url": "https://github.com/apache/accumulo/raw/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/ClientContext.java",
    "contents_url": "https://api.github.com/repos/apache/accumulo/contents/core/src/main/java/org/apache/accumulo/core/clientImpl/ClientContext.java?ref=c97c5bfc675c879b34e168c5b54b1641802bdefc",
    "patch": "@@ -96,6 +96,7 @@\n   private ClientInfo info;\n   private String instanceId;\n   private final ZooCache zooCache;\n+  private static final String VALID_NAME_REGEX = \"^(\\\\w{1,1024}\\\\.)?(\\\\w{1,1024})$\";\n \n   private Credentials creds;\n   private BatchWriterConfig batchWriterConfig;\n@@ -471,6 +472,9 @@ public ZooCache getZooCache() {\n   }\n \n   TableId getTableId(String tableName) throws TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     TableId tableId = Tables.getTableId(this, tableName);\n     if (Tables.getTableState(this, tableId) == TableState.OFFLINE)\n       throw new TableOfflineException(Tables.getTableOfflineMsg(this, tableId));\n@@ -482,6 +486,9 @@ public BatchScanner createBatchScanner(String tableName, Authorizations authoriz\n       int numQueryThreads) throws TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(authorizations != null, \"authorizations is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     ensureOpen();\n     return new TabletServerBatchReader(this, getTableId(tableName), authorizations,\n         numQueryThreads);\n@@ -509,6 +516,9 @@ public BatchDeleter createBatchDeleter(String tableName, Authorizations authoriz\n       int numQueryThreads, BatchWriterConfig config) throws TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(authorizations != null, \"authorizations is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     ensureOpen();\n     return new TabletServerBatchDeleter(this, getTableId(tableName), authorizations,\n         numQueryThreads, config.merge(getBatchWriterConfig()));\n@@ -525,6 +535,9 @@ public BatchDeleter createBatchDeleter(String tableName, Authorizations authoriz\n   public BatchWriter createBatchWriter(String tableName, BatchWriterConfig config)\n       throws TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     ensureOpen();\n     // we used to allow null inputs for bw config\n     if (config == null) {\n@@ -552,6 +565,9 @@ public MultiTableBatchWriter createMultiTableBatchWriter() {\n   @Override\n   public ConditionalWriter createConditionalWriter(String tableName, ConditionalWriterConfig config)\n       throws TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     ensureOpen();\n     return new ConditionalWriterImpl(this, getTableId(tableName), config);\n   }\n@@ -561,6 +577,9 @@ public Scanner createScanner(String tableName, Authorizations authorizations)\n       throws TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(authorizations != null, \"authorizations is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     ensureOpen();\n     Scanner scanner = new ScannerImpl(this, getTableId(tableName), authorizations);\n     Integer batchSize = ClientProperty.SCANNER_BATCH_SIZE.getInteger(getProperties());"
  },
  {
    "sha": "66ac1546e6fa99b62b5947ccaf5a5cf8c5378f23",
    "filename": "core/src/main/java/org/apache/accumulo/core/clientImpl/ConnectorImpl.java",
    "status": "modified",
    "additions": 7,
    "deletions": 0,
    "changes": 7,
    "blob_url": "https://github.com/apache/accumulo/blob/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/ConnectorImpl.java",
    "raw_url": "https://github.com/apache/accumulo/raw/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/ConnectorImpl.java",
    "contents_url": "https://api.github.com/repos/apache/accumulo/contents/core/src/main/java/org/apache/accumulo/core/clientImpl/ConnectorImpl.java?ref=c97c5bfc675c879b34e168c5b54b1641802bdefc",
    "patch": "@@ -54,6 +54,7 @@\n   private static final String SYSTEM_TOKEN_NAME =\n       \"org.apache.accumulo.server.security.SystemCredentials$SystemToken\";\n   private final ClientContext context;\n+  private static final String VALID_NAME_REGEX = \"^(\\\\w{1,1024}\\\\.)?(\\\\w{1,1024})$\";\n \n   public ConnectorImpl(ClientContext context) throws AccumuloSecurityException, AccumuloException {\n     this.context = context;\n@@ -94,6 +95,9 @@ public BatchDeleter createBatchDeleter(String tableName, Authorizations authoriz\n       throws TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(authorizations != null, \"authorizations is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     return new TabletServerBatchDeleter(context, context.getTableId(tableName), authorizations,\n         numQueryThreads, new BatchWriterConfig().setMaxMemory(maxMemory)\n             .setMaxLatency(maxLatency, TimeUnit.MILLISECONDS).setMaxWriteThreads(maxWriteThreads));\n@@ -109,6 +113,9 @@ public BatchDeleter createBatchDeleter(String tableName, Authorizations authoriz\n   public BatchWriter createBatchWriter(String tableName, long maxMemory, long maxLatency,\n       int maxWriteThreads) throws TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     return new BatchWriterImpl(context, context.getTableId(tableName),\n         new BatchWriterConfig().setMaxMemory(maxMemory)\n             .setMaxLatency(maxLatency, TimeUnit.MILLISECONDS).setMaxWriteThreads(maxWriteThreads));"
  },
  {
    "sha": "568a13227b864e8e48acdf165158b8ec1f5c6d53",
    "filename": "core/src/main/java/org/apache/accumulo/core/clientImpl/NamespaceOperationsImpl.java",
    "status": "modified",
    "additions": 33,
    "deletions": 1,
    "changes": 34,
    "blob_url": "https://github.com/apache/accumulo/blob/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/NamespaceOperationsImpl.java",
    "raw_url": "https://github.com/apache/accumulo/raw/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/NamespaceOperationsImpl.java",
    "contents_url": "https://api.github.com/repos/apache/accumulo/contents/core/src/main/java/org/apache/accumulo/core/clientImpl/NamespaceOperationsImpl.java?ref=c97c5bfc675c879b34e168c5b54b1641802bdefc",
    "patch": "@@ -66,6 +66,7 @@\n   private TableOperationsImpl tableOps;\n \n   private static final Logger log = LoggerFactory.getLogger(TableOperations.class);\n+  private static final String VALID_NAMESPACE_REGEX = \"^\\\\w{0,1024}$\";\n \n   public NamespaceOperationsImpl(ClientContext context, TableOperationsImpl tableOps) {\n     checkArgument(context != null, \"context is null\");\n@@ -97,6 +98,8 @@ public NamespaceOperationsImpl(ClientContext context, TableOperationsImpl tableO\n   @Override\n   public boolean exists(String namespace) {\n     checkArgument(namespace != null, \"namespace is null\");\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n \n     OpTimer timer = null;\n \n@@ -123,6 +126,9 @@ public void create(String namespace)\n     checkArgument(namespace != null, \"namespace is null\");\n     checkArgument(namespace.length() <= MAX_NAMESPACE_LEN,\n         \"Namespace is longer than \" + MAX_NAMESPACE_LEN + \" characters\");\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     try {\n       doNamespaceFateOperation(FateOperation.NAMESPACE_CREATE,\n           Arrays.asList(ByteBuffer.wrap(namespace.getBytes(UTF_8))), Collections.emptyMap(),\n@@ -137,8 +143,10 @@ public void create(String namespace)\n   public void delete(String namespace) throws AccumuloException, AccumuloSecurityException,\n       NamespaceNotFoundException, NamespaceNotEmptyException {\n     checkArgument(namespace != null, \"namespace is null\");\n-    NamespaceId namespaceId = Namespaces.getNamespaceId(context, namespace);\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n \n+    NamespaceId namespaceId = Namespaces.getNamespaceId(context, namespace);\n     if (namespaceId.equals(Namespace.ACCUMULO.id()) || namespaceId.equals(Namespace.DEFAULT.id())) {\n       Credentials credentials = context.getCredentials();\n       log.debug(\"{} attempted to delete the {} namespace\", credentials.getPrincipal(), namespaceId);\n@@ -168,6 +176,9 @@ public void rename(String oldNamespaceName, String newNamespaceName)\n       NamespaceExistsException {\n     checkArgument(newNamespaceName.length() <= MAX_TABLE_NAME_LEN,\n         \"Namespace is longer than \" + MAX_TABLE_NAME_LEN + \" characters\");\n+    checkArgument(newNamespaceName.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(oldNamespaceName.getBytes(UTF_8)),\n         ByteBuffer.wrap(newNamespaceName.getBytes(UTF_8)));\n     Map<String,String> opts = new HashMap<>();\n@@ -180,6 +191,8 @@ public void setProperty(final String namespace, final String property, final Str\n     checkArgument(namespace != null, \"namespace is null\");\n     checkArgument(property != null, \"property is null\");\n     checkArgument(value != null, \"value is null\");\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n \n     ManagerClient.executeNamespace(context,\n         client -> client.setNamespaceProperty(TraceUtil.traceInfo(), context.rpcCreds(), namespace,\n@@ -192,6 +205,8 @@ public void removeProperty(final String namespace, final String property)\n       throws AccumuloException, AccumuloSecurityException, NamespaceNotFoundException {\n     checkArgument(namespace != null, \"namespace is null\");\n     checkArgument(property != null, \"property is null\");\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n \n     ManagerClient.executeNamespace(context, client -> client\n         .removeNamespaceProperty(TraceUtil.traceInfo(), context.rpcCreds(), namespace, property));\n@@ -202,6 +217,9 @@ public void removeProperty(final String namespace, final String property)\n   public Iterable<Entry<String,String>> getProperties(final String namespace)\n       throws AccumuloException, NamespaceNotFoundException {\n     checkArgument(namespace != null, \"namespace is null\");\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     try {\n       return ServerClient.executeRaw(context, client -> client\n           .getNamespaceConfiguration(TraceUtil.traceInfo(), context.rpcCreds(), namespace))\n@@ -237,6 +255,8 @@ public boolean testClassLoad(final String namespace, final String className,\n     checkArgument(namespace != null, \"namespace is null\");\n     checkArgument(className != null, \"className is null\");\n     checkArgument(asTypeName != null, \"asTypeName is null\");\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n \n     try {\n       return ServerClient.executeRaw(context,\n@@ -262,20 +282,29 @@ public boolean testClassLoad(final String namespace, final String className,\n   public void attachIterator(String namespace, IteratorSetting setting,\n       EnumSet<IteratorScope> scopes)\n       throws AccumuloSecurityException, AccumuloException, NamespaceNotFoundException {\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     testClassLoad(namespace, setting.getIteratorClass(), SortedKeyValueIterator.class.getName());\n     super.attachIterator(namespace, setting, scopes);\n   }\n \n   @Override\n   public int addConstraint(String namespace, String constraintClassName)\n       throws AccumuloException, AccumuloSecurityException, NamespaceNotFoundException {\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     testClassLoad(namespace, constraintClassName, Constraint.class.getName());\n     return super.addConstraint(namespace, constraintClassName);\n   }\n \n   private String doNamespaceFateOperation(FateOperation op, List<ByteBuffer> args,\n       Map<String,String> opts, String namespace) throws AccumuloSecurityException,\n       AccumuloException, NamespaceExistsException, NamespaceNotFoundException {\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     try {\n       return tableOps.doFateOperation(op, args, opts, namespace);\n     } catch (TableExistsException | TableNotFoundException e) {\n@@ -286,6 +315,9 @@ private String doNamespaceFateOperation(FateOperation op, List<ByteBuffer> args,\n \n   private void checkLocalityGroups(String namespace, String propChanged)\n       throws AccumuloException, NamespaceNotFoundException {\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     if (LocalityGroupUtil.isLocalityGroupProperty(propChanged)) {\n       Iterable<Entry<String,String>> allProps = getProperties(namespace);\n       try {"
  },
  {
    "sha": "cf37c877684484dbc3d302e9fcdc2da001159e69",
    "filename": "core/src/main/java/org/apache/accumulo/core/clientImpl/Namespaces.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/accumulo/blob/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/Namespaces.java",
    "raw_url": "https://github.com/apache/accumulo/raw/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/Namespaces.java",
    "contents_url": "https://api.github.com/repos/apache/accumulo/contents/core/src/main/java/org/apache/accumulo/core/clientImpl/Namespaces.java?ref=c97c5bfc675c879b34e168c5b54b1641802bdefc",
    "patch": "@@ -40,7 +40,7 @@\n public class Namespaces {\n   private static final Logger log = LoggerFactory.getLogger(Namespaces.class);\n \n-  public static final String VALID_NAME_REGEX = \"^\\\\w*$\";\n+  public static final String VALID_NAME_REGEX = \"^\\\\w{0,1024}$\";\n   public static final Validator<String> VALID_NAME = new Validator<>() {\n     @Override\n     public boolean test(String namespace) {\n@@ -55,7 +55,6 @@ public String invalidMessage(String namespace) {\n           + namespace;\n     }\n   };\n-\n   public static final Validator<String> NOT_DEFAULT = new Validator<>() {\n     @Override\n     public boolean test(String namespace) {"
  },
  {
    "sha": "697755d656db4e6ba8f24baca4da6dad963980d8",
    "filename": "core/src/main/java/org/apache/accumulo/core/clientImpl/SecurityOperationsImpl.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/apache/accumulo/blob/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/SecurityOperationsImpl.java",
    "raw_url": "https://github.com/apache/accumulo/raw/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/SecurityOperationsImpl.java",
    "contents_url": "https://api.github.com/repos/apache/accumulo/contents/core/src/main/java/org/apache/accumulo/core/clientImpl/SecurityOperationsImpl.java?ref=c97c5bfc675c879b34e168c5b54b1641802bdefc",
    "patch": "@@ -49,6 +49,7 @@\n public class SecurityOperationsImpl implements SecurityOperations {\n \n   private final ClientContext context;\n+  private static final String VALID_NAMESPACE_REGEX = \"^\\\\w{0,1024}$\";\n \n   private void executeVoid(ClientExec<ClientService.Client> exec)\n       throws AccumuloException, AccumuloSecurityException {\n@@ -104,6 +105,7 @@ public void createLocalUser(final String principal, final PasswordToken password\n     if (context.getSaslParams() == null) {\n       checkArgument(password != null, \"password is null\");\n     }\n+\n     executeVoid(client -> {\n       if (context.getSaslParams() == null) {\n         client.createLocalUser(TraceUtil.traceInfo(), context.rpcCreds(), principal,\n@@ -119,6 +121,7 @@ public void createLocalUser(final String principal, final PasswordToken password\n   public void dropLocalUser(final String principal)\n       throws AccumuloException, AccumuloSecurityException {\n     checkArgument(principal != null, \"principal is null\");\n+\n     executeVoid(\n         client -> client.dropLocalUser(TraceUtil.traceInfo(), context.rpcCreds(), principal));\n   }\n@@ -128,6 +131,7 @@ public boolean authenticateUser(final String principal, final AuthenticationToke\n       throws AccumuloException, AccumuloSecurityException {\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(token != null, \"token is null\");\n+\n     final Credentials toAuth = new Credentials(principal, token);\n     return execute(client -> client.authenticateUser(TraceUtil.traceInfo(), context.rpcCreds(),\n         toAuth.toThrift(context.getInstanceID())));\n@@ -138,6 +142,7 @@ public void changeLocalUserPassword(final String principal, final PasswordToken\n       throws AccumuloException, AccumuloSecurityException {\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(token != null, \"token is null\");\n+\n     final Credentials toChange = new Credentials(principal, token);\n     executeVoid(client -> client.changeLocalUserPassword(TraceUtil.traceInfo(), context.rpcCreds(),\n         principal, ByteBuffer.wrap(token.getPassword())));\n@@ -151,6 +156,7 @@ public void changeUserAuthorizations(final String principal, final Authorization\n       throws AccumuloException, AccumuloSecurityException {\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(authorizations != null, \"authorizations is null\");\n+\n     executeVoid(client -> client.changeAuthorizations(TraceUtil.traceInfo(), context.rpcCreds(),\n         principal, ByteBufferUtil.toByteBuffers(authorizations.getAuthorizations())));\n   }\n@@ -159,6 +165,7 @@ public void changeUserAuthorizations(final String principal, final Authorization\n   public Authorizations getUserAuthorizations(final String principal)\n       throws AccumuloException, AccumuloSecurityException {\n     checkArgument(principal != null, \"principal is null\");\n+\n     return execute(client -> new Authorizations(\n         client.getUserAuthorizations(TraceUtil.traceInfo(), context.rpcCreds(), principal)));\n   }\n@@ -168,6 +175,7 @@ public boolean hasSystemPermission(final String principal, final SystemPermissio\n       throws AccumuloException, AccumuloSecurityException {\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(perm != null, \"perm is null\");\n+\n     return execute(client -> client.hasSystemPermission(TraceUtil.traceInfo(), context.rpcCreds(),\n         principal, perm.getId()));\n   }\n@@ -178,6 +186,7 @@ public boolean hasTablePermission(final String principal, final String table,\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(table != null, \"table is null\");\n     checkArgument(perm != null, \"perm is null\");\n+\n     try {\n       return execute(client -> client.hasTablePermission(TraceUtil.traceInfo(), context.rpcCreds(),\n           principal, table, perm.getId()));\n@@ -195,6 +204,9 @@ public boolean hasNamespacePermission(final String principal, final String names\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(namespace != null, \"namespace is null\");\n     checkArgument(permission != null, \"permission is null\");\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     return execute(client -> client.hasNamespacePermission(TraceUtil.traceInfo(),\n         context.rpcCreds(), principal, namespace, permission.getId()));\n   }\n@@ -204,6 +216,7 @@ public void grantSystemPermission(final String principal, final SystemPermission\n       throws AccumuloException, AccumuloSecurityException {\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(permission != null, \"permission is null\");\n+\n     executeVoid(client -> client.grantSystemPermission(TraceUtil.traceInfo(), context.rpcCreds(),\n         principal, permission.getId()));\n   }\n@@ -214,6 +227,7 @@ public void grantTablePermission(final String principal, final String table,\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(table != null, \"table is null\");\n     checkArgument(permission != null, \"permission is null\");\n+\n     try {\n       executeVoid(client -> client.grantTablePermission(TraceUtil.traceInfo(), context.rpcCreds(),\n           principal, table, permission.getId()));\n@@ -231,6 +245,9 @@ public void grantNamespacePermission(final String principal, final String namesp\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(namespace != null, \"namespace is null\");\n     checkArgument(permission != null, \"permission is null\");\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     executeVoid(client -> client.grantNamespacePermission(TraceUtil.traceInfo(), context.rpcCreds(),\n         principal, namespace, permission.getId()));\n   }\n@@ -240,6 +257,7 @@ public void revokeSystemPermission(final String principal, final SystemPermissio\n       throws AccumuloException, AccumuloSecurityException {\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(permission != null, \"permission is null\");\n+\n     executeVoid(client -> client.revokeSystemPermission(TraceUtil.traceInfo(), context.rpcCreds(),\n         principal, permission.getId()));\n   }\n@@ -250,6 +268,7 @@ public void revokeTablePermission(final String principal, final String table,\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(table != null, \"table is null\");\n     checkArgument(permission != null, \"permission is null\");\n+\n     try {\n       executeVoid(client -> client.revokeTablePermission(TraceUtil.traceInfo(), context.rpcCreds(),\n           principal, table, permission.getId()));\n@@ -267,6 +286,9 @@ public void revokeNamespacePermission(final String principal, final String names\n     checkArgument(principal != null, \"principal is null\");\n     checkArgument(namespace != null, \"namespace is null\");\n     checkArgument(permission != null, \"permission is null\");\n+    checkArgument(namespace.matches(VALID_NAMESPACE_REGEX),\n+        \"Namespace name must only contain word characters (letters, digits, and underscores)\");\n+\n     executeVoid(client -> client.revokeNamespacePermission(TraceUtil.traceInfo(),\n         context.rpcCreds(), principal, namespace, permission.getId()));\n   }\n@@ -280,6 +302,7 @@ public void revokeNamespacePermission(final String principal, final String names\n   public DelegationToken getDelegationToken(DelegationTokenConfig cfg)\n       throws AccumuloException, AccumuloSecurityException {\n     final TDelegationTokenConfig tConfig;\n+\n     if (cfg != null) {\n       tConfig = DelegationTokenConfigSerializer.serialize(cfg);\n     } else {"
  },
  {
    "sha": "ca03ba90312f2bd4a16ccc3f2124bb413acb4be6",
    "filename": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsHelper.java",
    "status": "modified",
    "additions": 28,
    "deletions": 0,
    "changes": 28,
    "blob_url": "https://github.com/apache/accumulo/blob/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsHelper.java",
    "raw_url": "https://github.com/apache/accumulo/raw/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsHelper.java",
    "contents_url": "https://api.github.com/repos/apache/accumulo/contents/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsHelper.java?ref=c97c5bfc675c879b34e168c5b54b1641802bdefc",
    "patch": "@@ -37,9 +37,13 @@\n \n public abstract class TableOperationsHelper implements TableOperations {\n \n+  public static final String VALID_NAME_REGEX = \"^(\\\\w{1,1024}\\\\.)?(\\\\w{1,1024})$\";\n+\n   @Override\n   public void attachIterator(String tableName, IteratorSetting setting)\n       throws AccumuloSecurityException, AccumuloException, TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n     attachIterator(tableName, setting, EnumSet.allOf(IteratorScope.class));\n   }\n \n@@ -50,7 +54,10 @@ public void attachIterator(String tableName, IteratorSetting setting,\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(setting != null, \"setting is null\");\n     checkArgument(scopes != null, \"scopes is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n     checkIteratorConflicts(tableName, setting, scopes);\n+\n     for (IteratorScope scope : scopes) {\n       String root = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX,\n           scope.name().toLowerCase(), setting.getName());\n@@ -64,6 +71,9 @@ public void attachIterator(String tableName, IteratorSetting setting,\n   @Override\n   public void removeIterator(String tableName, String name, EnumSet<IteratorScope> scopes)\n       throws AccumuloSecurityException, AccumuloException, TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     Map<String,String> copy = new TreeMap<>();\n     for (Entry<String,String> property : this.getProperties(tableName)) {\n       copy.put(property.getKey(), property.getValue());\n@@ -84,6 +94,9 @@ public IteratorSetting getIteratorSetting(String tableName, String name, Iterato\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(name != null, \"name is null\");\n     checkArgument(scope != null, \"scope is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     int priority = -1;\n     String classname = null;\n     Map<String,String> settings = new HashMap<>();\n@@ -112,6 +125,9 @@ public IteratorSetting getIteratorSetting(String tableName, String name, Iterato\n   @Override\n   public Map<String,EnumSet<IteratorScope>> listIterators(String tableName)\n       throws AccumuloException, TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     Map<String,EnumSet<IteratorScope>> result = new TreeMap<>();\n     for (Entry<String,String> property : this.getProperties(tableName)) {\n       String name = property.getKey();\n@@ -171,6 +187,9 @@ public static void checkIteratorConflicts(Map<String,String> props, IteratorSett\n   public void checkIteratorConflicts(String tableName, IteratorSetting setting,\n       EnumSet<IteratorScope> scopes) throws AccumuloException, TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     Map<String,String> iteratorProps = new HashMap<>();\n     for (Entry<String,String> entry : this.getProperties(tableName))\n       iteratorProps.put(entry.getKey(), entry.getValue());\n@@ -180,6 +199,9 @@ public void checkIteratorConflicts(String tableName, IteratorSetting setting,\n   @Override\n   public int addConstraint(String tableName, String constraintClassName)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     TreeSet<Integer> constraintNumbers = new TreeSet<>();\n     TreeMap<String,Integer> constraintClasses = new TreeMap<>();\n     int i;\n@@ -209,12 +231,18 @@ public int addConstraint(String tableName, String constraintClassName)\n   @Override\n   public void removeConstraint(String tableName, int number)\n       throws AccumuloException, AccumuloSecurityException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     this.removeProperty(tableName, Property.TABLE_CONSTRAINT_PREFIX.toString() + number);\n   }\n \n   @Override\n   public Map<String,Integer> listConstraints(String tableName)\n       throws AccumuloException, TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     Map<String,Integer> constraints = new TreeMap<>();\n     for (Entry<String,String> property : this.getProperties(tableName)) {\n       if (property.getKey().startsWith(Property.TABLE_CONSTRAINT_PREFIX.toString())) {"
  },
  {
    "sha": "00a5f2090aaa5296f7254c7b5d0bad15a579a0a1",
    "filename": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java",
    "status": "modified",
    "additions": 121,
    "deletions": 37,
    "changes": 158,
    "blob_url": "https://github.com/apache/accumulo/blob/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java",
    "raw_url": "https://github.com/apache/accumulo/raw/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java",
    "contents_url": "https://api.github.com/repos/apache/accumulo/contents/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java?ref=c97c5bfc675c879b34e168c5b54b1641802bdefc",
    "patch": "@@ -156,6 +156,8 @@\n public class TableOperationsImpl extends TableOperationsHelper {\n \n   public static final String CLONE_EXCLUDE_PREFIX = \"!\";\n+  public static final String VALID_NAME_REGEX = \"^(\\\\w{1,1024}\\\\.)?(\\\\w{1,1024})$\";\n+\n   private static final Logger log = LoggerFactory.getLogger(TableOperations.class);\n   private final ClientContext context;\n \n@@ -188,6 +190,9 @@ public TableOperationsImpl(ClientContext context) {\n   @Override\n   public boolean exists(String tableName) {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     if (tableName.equals(MetadataTable.NAME) || tableName.equals(RootTable.NAME))\n       return true;\n \n@@ -212,6 +217,9 @@ public boolean exists(String tableName) {\n   @Override\n   public void create(String tableName)\n       throws AccumuloException, AccumuloSecurityException, TableExistsException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     create(tableName, new NewTableConfiguration());\n   }\n \n@@ -220,6 +228,8 @@ public void create(String tableName, NewTableConfiguration ntc)\n       throws AccumuloException, AccumuloSecurityException, TableExistsException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(ntc != null, \"ntc is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n     checkArgument(tableName.length() <= MAX_TABLE_NAME_LEN,\n         \"Table name is longer than \" + MAX_TABLE_NAME_LEN + \" characters\");\n \n@@ -269,8 +279,8 @@ private long beginFateOperation() throws ThriftSecurityException, TException {\n     }\n   }\n \n-  // This method is for retrying in the case of network failures; anything else it passes to the\n-  // caller to deal with\n+  // This method is for retrying in the case of network failures;\n+  // anything else it passes to the caller to deal with\n   private void executeFateOperation(long opid, FateOperation op, List<ByteBuffer> args,\n       Map<String,String> opts, boolean autoCleanUp)\n       throws ThriftSecurityException, TException, ThriftTableOperationException {\n@@ -336,6 +346,9 @@ private void finishFateOperation(long opid) throws ThriftSecurityException, TExc\n \n   public String doBulkFateOperation(List<ByteBuffer> args, String tableName)\n       throws AccumuloSecurityException, AccumuloException, TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     try {\n       return doFateOperation(FateOperation.TABLE_BULK_IMPORT2, args, Collections.emptyMap(),\n           tableName);\n@@ -453,9 +466,8 @@ public void run() {\n \n         int mid = splits.size() / 2;\n \n-        // split the middle split point to ensure that child task split different tablets and can\n-        // therefore\n-        // run in parallel\n+        // split the middle split point to ensure that child task split\n+        // different tablets and can therefore run in parallel\n         addSplits(env.tableName, new TreeSet<>(splits.subList(mid, mid + 1)), env.tableId);\n         env.latch.countDown();\n \n@@ -472,13 +484,15 @@ public void run() {\n   @Override\n   public void addSplits(String tableName, SortedSet<Text> partitionKeys)\n       throws TableNotFoundException, AccumuloException, AccumuloSecurityException {\n-    TableId tableId = Tables.getTableId(context, tableName);\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n+    TableId tableId = Tables.getTableId(context, tableName);\n     List<Text> splits = new ArrayList<>(partitionKeys);\n-    // should be sorted because we copied from a sorted set, but that makes assumptions about\n-    // how the copy was done so resort to be sure.\n-    Collections.sort(splits);\n \n+    // should be sorted because we copied from a sorted set, but that makes\n+    // assumptions about how the copy was done so resort to be sure.\n+    Collections.sort(splits);\n     CountDownLatch latch = new CountDownLatch(splits.size());\n     AtomicReference<Exception> exception = new AtomicReference<>(null);\n \n@@ -526,8 +540,10 @@ public void addSplits(String tableName, SortedSet<Text> partitionKeys)\n   private void addSplits(String tableName, SortedSet<Text> partitionKeys, TableId tableId)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException,\n       AccumuloServerException {\n-    TabletLocator tabLocator = TabletLocator.getLocator(context, tableId);\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n+    TabletLocator tabLocator = TabletLocator.getLocator(context, tableId);\n     for (Text split : partitionKeys) {\n       boolean successful = false;\n       int attempt = 0;\n@@ -613,8 +629,10 @@ else if (Tables.getTableState(context, tableId) == TableState.OFFLINE)\n   @Override\n   public void merge(String tableName, Text start, Text end)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     ByteBuffer EMPTY = ByteBuffer.allocate(0);\n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(tableName.getBytes(UTF_8)),\n         start == null ? EMPTY : TextUtil.getByteBuffer(start),\n@@ -632,8 +650,10 @@ public void merge(String tableName, Text start, Text end)\n   @Override\n   public void deleteRows(String tableName, Text start, Text end)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     ByteBuffer EMPTY = ByteBuffer.allocate(0);\n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(tableName.getBytes(UTF_8)),\n         start == null ? EMPTY : TextUtil.getByteBuffer(start),\n@@ -651,17 +671,20 @@ public void deleteRows(String tableName, Text start, Text end)\n   @Override\n   public Collection<Text> listSplits(String tableName)\n       throws TableNotFoundException, AccumuloSecurityException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     return _listSplits(tableName);\n   }\n \n   private List<Text> _listSplits(String tableName)\n       throws TableNotFoundException, AccumuloSecurityException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n     TableId tableId = Tables.getTableId(context, tableName);\n-\n     TreeMap<KeyExtent,String> tabletLocations = new TreeMap<>();\n-\n     while (true) {\n       try {\n         tabletLocations.clear();\n@@ -685,7 +708,6 @@ public void deleteRows(String tableName, Text start, Text end)\n     }\n \n     ArrayList<Text> endRows = new ArrayList<>(tabletLocations.size());\n-\n     for (KeyExtent ke : tabletLocations.keySet())\n       if (ke.endRow() != null)\n         endRows.add(ke.endRow());\n@@ -697,16 +719,16 @@ public void deleteRows(String tableName, Text start, Text end)\n   @Override\n   public Collection<Text> listSplits(String tableName, int maxSplits)\n       throws TableNotFoundException, AccumuloSecurityException {\n-    List<Text> endRows = _listSplits(tableName);\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n+    List<Text> endRows = _listSplits(tableName);\n     if (endRows.size() <= maxSplits)\n       return endRows;\n \n     double r = (maxSplits + 1) / (double) (endRows.size());\n     double pos = 0;\n-\n     ArrayList<Text> subset = new ArrayList<>(maxSplits);\n-\n     int j = 0;\n     for (int i = 0; i < endRows.size() && j < maxSplits; i++) {\n       pos += r;\n@@ -724,10 +746,11 @@ public void deleteRows(String tableName, Text start, Text end)\n   public void delete(String tableName)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(tableName.getBytes(UTF_8)));\n     Map<String,String> opts = new HashMap<>();\n-\n     try {\n       doTableFateOperation(tableName, TableNotFoundException.class, FateOperation.TABLE_DELETE,\n           args, opts);\n@@ -755,6 +778,8 @@ public void clone(String srcTableName, String newTableName, CloneConfiguration c\n \n     checkArgument(srcTableName != null, \"srcTableName is null\");\n     checkArgument(newTableName != null, \"newTableName is null\");\n+    checkArgument(newTableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n     checkArgument(newTableName.length() <= MAX_TABLE_NAME_LEN,\n         \"Table name is longer than \" + MAX_TABLE_NAME_LEN + \" characters\");\n \n@@ -792,8 +817,11 @@ public void clone(String srcTableName, String newTableName, CloneConfiguration c\n   @Override\n   public void rename(String oldTableName, String newTableName) throws AccumuloSecurityException,\n       TableNotFoundException, AccumuloException, TableExistsException {\n+    checkArgument(newTableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n     checkArgument(newTableName.length() <= MAX_TABLE_NAME_LEN,\n         \"Table name is longer than \" + MAX_TABLE_NAME_LEN + \" characters\");\n+\n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(oldTableName.getBytes(UTF_8)),\n         ByteBuffer.wrap(newTableName.getBytes(UTF_8)));\n     Map<String,String> opts = new HashMap<>();\n@@ -803,6 +831,9 @@ public void rename(String oldTableName, String newTableName) throws AccumuloSecu\n \n   @Override\n   public void flush(String tableName) throws AccumuloException, AccumuloSecurityException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     try {\n       flush(tableName, null, null, false);\n     } catch (TableNotFoundException e) {\n@@ -814,6 +845,8 @@ public void flush(String tableName) throws AccumuloException, AccumuloSecurityEx\n   public void flush(String tableName, Text start, Text end, boolean wait)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n     TableId tableId = Tables.getTableId(context, tableName);\n     _flush(tableId, start, end, wait);\n@@ -837,6 +870,8 @@ public void compact(String tableName, Text start, Text end, List<IteratorSetting\n   public void compact(String tableName, CompactionConfig config)\n       throws AccumuloSecurityException, TableNotFoundException, AccumuloException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n     // Ensure compaction iterators exist on a tabletserver\n     final String skviName = SortedKeyValueIterator.class.getName();\n@@ -868,7 +903,6 @@ public void compact(String tableName, CompactionConfig config)\n     }\n \n     TableId tableId = Tables.getTableId(context, tableName);\n-\n     Text start = config.getStartRow();\n     Text end = config.getEndRow();\n \n@@ -877,8 +911,8 @@ public void compact(String tableName, CompactionConfig config)\n \n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(tableId.canonical().getBytes(UTF_8)),\n         ByteBuffer.wrap(UserCompactionUtils.encode(config)));\n-\n     Map<String,String> opts = new HashMap<>();\n+\n     try {\n       doFateOperation(FateOperation.TABLE_COMPACT, args, opts, tableName, config.getWait());\n     } catch (TableExistsException | NamespaceExistsException e) {\n@@ -905,11 +939,13 @@ private void ensureStrategyCanLoad(String tableName, CompactionConfig config)\n   @Override\n   public void cancelCompaction(String tableName)\n       throws AccumuloSecurityException, TableNotFoundException, AccumuloException {\n-    TableId tableId = Tables.getTableId(context, tableName);\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n+    TableId tableId = Tables.getTableId(context, tableName);\n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(tableId.canonical().getBytes(UTF_8)));\n-\n     Map<String,String> opts = new HashMap<>();\n+\n     try {\n       doTableFateOperation(tableName, TableNotFoundException.class,\n           FateOperation.TABLE_CANCEL_COMPACT, args, opts);\n@@ -922,7 +958,6 @@ public void cancelCompaction(String tableName)\n \n   private void _flush(TableId tableId, Text start, Text end, boolean wait)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-\n     try {\n       long flushID;\n \n@@ -994,6 +1029,9 @@ public void setProperty(final String tableName, final String property, final Str\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(property != null, \"property is null\");\n     checkArgument(value != null, \"value is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     try {\n       setPropertyNoChecks(tableName, property, value);\n \n@@ -1015,6 +1053,9 @@ public void removeProperty(final String tableName, final String property)\n       throws AccumuloException, AccumuloSecurityException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(property != null, \"property is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     try {\n       removePropertyNoChecks(tableName, property);\n \n@@ -1051,6 +1092,9 @@ void checkLocalityGroups(String tableName, String propChanged)\n   public Iterable<Entry<String,String>> getProperties(final String tableName)\n       throws AccumuloException, TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     try {\n       return ServerClient.executeRaw(context, client -> client\n           .getTableConfiguration(TraceUtil.traceInfo(), context.rpcCreds(), tableName)).entrySet();\n@@ -1112,10 +1156,11 @@ public void setLocalityGroups(String tableName, Map<String,Set<Text>> groups)\n   @Override\n   public Map<String,Set<Text>> getLocalityGroups(String tableName)\n       throws AccumuloException, TableNotFoundException {\n+\n     AccumuloConfiguration conf = new ConfigurationCopy(this.getProperties(tableName));\n     Map<String,Set<ByteSequence>> groups = LocalityGroupUtil.getLocalityGroups(conf);\n-\n     Map<String,Set<Text>> groups2 = new HashMap<>();\n+\n     for (Entry<String,Set<ByteSequence>> entry : groups.entrySet()) {\n \n       HashSet<Text> colFams = new HashSet<>();\n@@ -1135,6 +1180,9 @@ public void setLocalityGroups(String tableName, Map<String,Set<Text>> groups)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(range != null, \"range is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     if (maxSplits < 1)\n       throw new IllegalArgumentException(\"maximum splits must be >= 1\");\n     if (maxSplits == 1)\n@@ -1226,9 +1274,11 @@ public void importDirectory(String tableName, String dir, String failureDir, boo\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(dir != null, \"dir is null\");\n     checkArgument(failureDir != null, \"failureDir is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     // check for table existence\n     Tables.getTableId(context, tableName);\n-\n     Path dirPath = checkPath(dir, \"Bulk\", \"\");\n     Path failPath = checkPath(failureDir, \"Bulk\", \"failure\");\n \n@@ -1249,12 +1299,10 @@ public void importDirectory(String tableName, String dir, String failureDir, boo\n \n   private void waitForTableStateTransition(TableId tableId, TableState expectedState)\n       throws AccumuloException, TableNotFoundException {\n-\n     Text startRow = null;\n     Text lastRow = null;\n \n     while (true) {\n-\n       if (Tables.getTableState(context, tableId) != expectedState) {\n         Tables.clearCache(context);\n         TableState currentState = Tables.getTableState(context, tableId);\n@@ -1287,7 +1335,6 @@ private void waitForTableStateTransition(TableId tableId, TableState expectedSta\n \n       for (TabletMetadata tablet : tablets) {\n         total++;\n-\n         Location loc = tablet.getLocation();\n \n         if ((expectedState == TableState.ONLINE\n@@ -1353,8 +1400,10 @@ public void offline(String tableName)\n   @Override\n   public void offline(String tableName, boolean wait)\n       throws AccumuloSecurityException, AccumuloException, TableNotFoundException {\n-\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     TableId tableId = Tables.getTableId(context, tableName);\n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(tableId.canonical().getBytes(UTF_8)));\n     Map<String,String> opts = new HashMap<>();\n@@ -1374,9 +1423,10 @@ public void offline(String tableName, boolean wait)\n   @Override\n   public boolean isOnline(String tableName) throws AccumuloException, TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n     TableId tableId = Tables.getTableId(context, tableName);\n-\n     TableState expectedState = Tables.getTableState(context, tableId, true);\n     return expectedState == TableState.ONLINE;\n   }\n@@ -1391,13 +1441,13 @@ public void online(String tableName)\n   public void online(String tableName, boolean wait)\n       throws AccumuloSecurityException, AccumuloException, TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n     TableId tableId = Tables.getTableId(context, tableName);\n-\n     /**\n      * ACCUMULO-4574 if table is already online return without executing fate operation.\n      */\n-\n     if (isOnline(tableName)) {\n       if (wait)\n         waitForTableStateTransition(tableId, TableState.ONLINE);\n@@ -1422,6 +1472,9 @@ public void online(String tableName, boolean wait)\n   @Override\n   public void clearLocatorCache(String tableName) throws TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     TabletLocator tabLocator =\n         TabletLocator.getLocator(context, Tables.getTableId(context, tableName));\n     tabLocator.invalidateCache();\n@@ -1440,6 +1493,9 @@ public Text getMaxRow(String tableName, Authorizations auths, Text startRow,\n       boolean startInclusive, Text endRow, boolean endInclusive) throws TableNotFoundException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(auths != null, \"auths is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     Scanner scanner = context.createScanner(tableName, auths);\n     return FindMax.findMax(scanner, startRow, startInclusive, endRow, endInclusive);\n   }\n@@ -1564,6 +1620,8 @@ public void importTable(String tableName, Set<String> importDirs)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(importDirs != null, \"importDir is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n     checkArgument(tableName.length() <= MAX_TABLE_NAME_LEN,\n         \"Table name is longer than \" + MAX_TABLE_NAME_LEN + \" characters\");\n \n@@ -1624,10 +1682,11 @@ public void exportTable(String tableName, String exportDir)\n       throws TableNotFoundException, AccumuloException, AccumuloSecurityException {\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(exportDir != null, \"exportDir is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(tableName.getBytes(UTF_8)),\n         ByteBuffer.wrap(exportDir.getBytes(UTF_8)));\n-\n     Map<String,String> opts = Collections.emptyMap();\n \n     try {\n@@ -1646,6 +1705,8 @@ public boolean testClassLoad(final String tableName, final String className,\n     checkArgument(tableName != null, \"tableName is null\");\n     checkArgument(className != null, \"className is null\");\n     checkArgument(asTypeName != null, \"asTypeName is null\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n     try {\n       return ServerClient.executeRaw(context,\n@@ -1710,6 +1771,9 @@ private void doTableFateOperation(String tableOrNamespaceName,\n \n   private void clearSamplerOptions(String tableName)\n       throws AccumuloException, TableNotFoundException, AccumuloSecurityException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     String prefix = Property.TABLE_SAMPLER_OPTS.getKey();\n     for (Entry<String,String> entry : getProperties(tableName)) {\n       String property = entry.getKey();\n@@ -1722,8 +1786,10 @@ private void clearSamplerOptions(String tableName)\n   @Override\n   public void setSamplerConfiguration(String tableName, SamplerConfiguration samplerConfiguration)\n       throws AccumuloException, TableNotFoundException, AccumuloSecurityException {\n-    clearSamplerOptions(tableName);\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n+    clearSamplerOptions(tableName);\n     List<Pair<String,String>> props =\n         new SamplerConfigurationImpl(samplerConfiguration).toTableProperties();\n     for (Pair<String,String> pair : props) {\n@@ -1734,13 +1800,19 @@ public void setSamplerConfiguration(String tableName, SamplerConfiguration sampl\n   @Override\n   public void clearSamplerConfiguration(String tableName)\n       throws AccumuloException, TableNotFoundException, AccumuloSecurityException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     removeProperty(tableName, Property.TABLE_SAMPLER.getKey());\n     clearSamplerOptions(tableName);\n   }\n \n   @Override\n   public SamplerConfiguration getSamplerConfiguration(String tableName)\n       throws TableNotFoundException, AccumuloException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     AccumuloConfiguration conf = new ConfigurationCopy(this.getProperties(tableName));\n     SamplerConfigurationImpl sci = SamplerConfigurationImpl.newSamplerConfig(conf);\n     if (sci == null) {\n@@ -1811,6 +1883,8 @@ public String getTabletLocation(TabletId tabletId) {\n   @Override\n   public Locations locate(String tableName, Collection<Range> ranges)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n     requireNonNull(tableName, \"tableName must be non null\");\n     requireNonNull(ranges, \"ranges must be non null\");\n \n@@ -1855,9 +1929,10 @@ public Locations locate(String tableName, Collection<Range> ranges)\n \n   @Override\n   public SummaryRetriever summaries(String tableName) {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n \n     return new SummaryRetriever() {\n-\n       private Text startRow = null;\n       private Text endRow = null;\n       private List<TSummarizerConfiguration> summariesToFetch = Collections.emptyList();\n@@ -1958,12 +2033,14 @@ public SummaryRetriever flush(boolean b) {\n   @Override\n   public void addSummarizers(String tableName, SummarizerConfiguration... newConfigs)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     HashSet<SummarizerConfiguration> currentConfigs =\n         new HashSet<>(SummarizerConfiguration.fromTableProperties(getProperties(tableName)));\n     HashSet<SummarizerConfiguration> newConfigSet = new HashSet<>(Arrays.asList(newConfigs));\n \n     newConfigSet.removeIf(currentConfigs::contains);\n-\n     Set<String> newIds =\n         newConfigSet.stream().map(SummarizerConfiguration::getPropertyId).collect(toSet());\n \n@@ -1983,8 +2060,12 @@ public void addSummarizers(String tableName, SummarizerConfiguration... newConfi\n   @Override\n   public void removeSummarizers(String tableName, Predicate<SummarizerConfiguration> predicate)\n       throws AccumuloException, TableNotFoundException, AccumuloSecurityException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     Collection<SummarizerConfiguration> summarizerConfigs =\n         SummarizerConfiguration.fromTableProperties(getProperties(tableName));\n+\n     for (SummarizerConfiguration sc : summarizerConfigs) {\n       if (predicate.test(sc)) {\n         Set<String> ks = sc.toTableProperties().keySet();\n@@ -1998,6 +2079,9 @@ public void removeSummarizers(String tableName, Predicate<SummarizerConfiguratio\n   @Override\n   public List<SummarizerConfiguration> listSummarizers(String tableName)\n       throws AccumuloException, TableNotFoundException {\n+    checkArgument(tableName.matches(VALID_NAME_REGEX),\n+        \"Table name must only contain word characters (letters, digits, and underscores)\");\n+\n     return new ArrayList<>(SummarizerConfiguration.fromTableProperties(getProperties(tableName)));\n   }\n "
  },
  {
    "sha": "6b511df1f29146325a4d230a40897ec69ae436cd",
    "filename": "core/src/main/java/org/apache/accumulo/core/clientImpl/Tables.java",
    "status": "modified",
    "additions": 13,
    "deletions": 10,
    "changes": 23,
    "blob_url": "https://github.com/apache/accumulo/blob/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/Tables.java",
    "raw_url": "https://github.com/apache/accumulo/raw/c97c5bfc675c879b34e168c5b54b1641802bdefc/core/src/main/java/org/apache/accumulo/core/clientImpl/Tables.java",
    "contents_url": "https://api.github.com/repos/apache/accumulo/contents/core/src/main/java/org/apache/accumulo/core/clientImpl/Tables.java?ref=c97c5bfc675c879b34e168c5b54b1641802bdefc",
    "patch": "@@ -45,12 +45,12 @@\n \n public class Tables {\n \n-  public static final String VALID_NAME_REGEX = \"^(\\\\w+\\\\.)?(\\\\w+)$\";\n+  public static final String VALID_NAME_REGEX = \"^(\\\\w{1,1024}\\\\.)?(\\\\w{1,1024})$\";\n \n   private static final SecurityPermission TABLES_PERMISSION =\n       new SecurityPermission(\"tablesPermission\");\n-  // Per instance cache will expire after 10 minutes in case we encounter an instance not used\n-  // frequently\n+  // Per instance cache will expire after 10 minutes in case we\n+  // encounter an instance not used frequently\n   private static Cache<String,TableMap> instanceToMapCache =\n       CacheBuilder.newBuilder().expireAfterAccess(10, TimeUnit.MINUTES).build();\n \n@@ -114,9 +114,10 @@ private static ZooCache getZooCache(final ClientContext context) {\n   public static TableId _getTableId(ClientContext context, String tableName)\n       throws NamespaceNotFoundException, TableNotFoundException {\n     TableId tableId = getNameToIdMap(context).get(tableName);\n+\n     if (tableId == null) {\n-      // maybe the table exist, but the cache was not updated yet... so try to clear the cache and\n-      // check again\n+      // maybe the table exist, but the cache was not updated yet...\n+      // so try to clear the cache and check again\n       clearCache(context);\n       tableId = getNameToIdMap(context).get(tableName);\n       if (tableId == null) {\n@@ -133,6 +134,7 @@ public static TableId _getTableId(ClientContext context, String tableName)\n   public static String getTableName(ClientContext context, TableId tableId)\n       throws TableNotFoundException {\n     String tableName = getIdToNameMap(context).get(tableId);\n+\n     if (tableName == null)\n       throw new TableNotFoundException(tableId.canonical(), null, null);\n     return tableName;\n@@ -141,6 +143,7 @@ public static String getTableName(ClientContext context, TableId tableId)\n   public static String getTableOfflineMsg(ClientContext context, TableId tableId) {\n     if (tableId == null)\n       return \"Table <unknown table> is offline\";\n+\n     try {\n       String tableName = Tables.getTableName(context, tableId);\n       return \"Table \" + tableName + \" (\" + tableId.canonical() + \") is offline\";\n@@ -163,9 +166,7 @@ public static String getTableOfflineMsg(ClientContext context, TableId tableId)\n    */\n   private static TableMap getTableMap(final ClientContext context) {\n     TableMap map;\n-\n     final ZooCache zc = getZooCache(context);\n-\n     map = getTableMap(context, zc);\n \n     if (!map.isCurrent(zc)) {\n@@ -212,6 +213,7 @@ public static void clearCacheByPath(ClientContext context, final String zooPath)\n \n   public static String getPrintableTableInfoFromId(ClientContext context, TableId tableId) {\n     String tableName = null;\n+\n     try {\n       tableName = getTableName(context, tableId);\n     } catch (TableNotFoundException e) {\n@@ -223,6 +225,7 @@ public static String getPrintableTableInfoFromId(ClientContext context, TableId\n \n   public static String getPrintableTableInfoFromName(ClientContext context, String tableName) {\n     TableId tableId = null;\n+\n     try {\n       tableId = getTableId(context, tableName);\n     } catch (TableNotFoundException e) {\n@@ -250,7 +253,6 @@ public static TableState getTableState(ClientContext context, TableId tableId) {\n    */\n   public static TableState getTableState(ClientContext context, TableId tableId,\n       boolean clearCachedState) {\n-\n     String statePath = context.getZooKeeperRoot() + Constants.ZTABLES + \"/\" + tableId.canonical()\n         + Constants.ZTABLE_STATE;\n \n@@ -273,6 +275,7 @@ public static String qualified(String tableName) {\n \n   public static String qualified(String tableName, String defaultNamespace) {\n     Pair<String,String> qualifiedTableName = qualify(tableName, defaultNamespace);\n+\n     if (Namespace.DEFAULT.name().equals(qualifiedTableName.getFirst()))\n       return qualifiedTableName.getSecond();\n     else\n@@ -284,8 +287,8 @@ public static String qualified(String tableName, String defaultNamespace) {\n   }\n \n   public static Pair<String,String> qualify(String tableName, String defaultNamespace) {\n-    if (!tableName.matches(VALID_NAME_REGEX))\n-      throw new IllegalArgumentException(\"Invalid table name '\" + tableName + \"'\");\n+    checkArgument(tableName.matches(VALID_NAME_REGEX), \"Invalid table name '\" + tableName + \"'\");\n+\n     if (MetadataTable.OLD_NAME.equals(tableName))\n       tableName = MetadataTable.NAME;\n     if (tableName.contains(\".\")) {"
  }
]
