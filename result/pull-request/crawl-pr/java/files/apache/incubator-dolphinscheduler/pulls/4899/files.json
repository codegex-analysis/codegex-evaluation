[
  {
    "sha": "bf9eb841eae016ee43ce89327665bdb3a94130f5",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java",
    "status": "modified",
    "additions": 14,
    "deletions": 3,
    "changes": 17,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -126,7 +126,13 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n \n         logger.info(\"login user {}, create  process definition, project name: {}, process definition name: {}, \"\n                 + \"process_definition_json: {}, desc: {} locations:{}, connects:{}\",\n-            loginUser.getUserName(), projectName, name, json, description, locations, connects);\n+                RegexUtils.escapeNRT(loginUser.getUserName()),\n+                RegexUtils.escapeNRT(projectName),\n+                RegexUtils.escapeNRT(name),\n+                RegexUtils.escapeNRT(json),\n+                RegexUtils.escapeNRT(description),\n+                RegexUtils.escapeNRT(locations),\n+                RegexUtils.escapeNRT(connects));\n         Map<String, Object> result = processDefinitionService.createProcessDefinition(loginUser, projectName, name, json,\n             description, locations, connects);\n         return returnDataList(result);\n@@ -296,8 +302,13 @@ public Result queryProcessDefinitionVersions(@ApiIgnore @RequestAttribute(value\n                                                  @RequestParam(value = \"pageNo\") int pageNo,\n                                                  @RequestParam(value = \"pageSize\") int pageSize,\n                                                  @RequestParam(value = \"processDefinitionId\") int processDefinitionId) {\n-\n-        Map<String, Object> result = processDefinitionVersionService.queryProcessDefinitionVersions(loginUser\n+        logger.info(\"query process definition versions, login user {}, project name: {}, process define id: {}, list paging, pageNo: {}, pageSize: {}\",\n+                loginUser.getUserName(), projectName, processDefinitionId, pageNo, pageSize);\n+        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n+        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n+            return returnDataListPaging(result);\n+        }\n+        result = processDefinitionVersionService.queryProcessDefinitionVersions(loginUser\n             , projectName, pageNo, pageSize, processDefinitionId);\n         return returnDataList(result);\n     }"
  },
  {
    "sha": "cac3431e3f4e76a8677c87189898fe137876fdc9",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -126,8 +126,12 @@ public Result queryProcessInstanceList(@ApiIgnore @RequestAttribute(value = Cons\n                         \"search value:{},executor name:{},state type:{},host:{},start time:{}, end time:{},page number:{}, page size:{}\",\n                 loginUser.getUserName(), projectName, processDefinitionId, searchVal, executorName, stateType, host,\n                 startTime, endTime, pageNo, pageSize);\n+        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n+        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n+            return returnDataListPaging(result);\n+        }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = processInstanceService.queryProcessInstanceList(\n+        result = processInstanceService.queryProcessInstanceList(\n                 loginUser, projectName, processDefinitionId, startTime, endTime, searchVal, executorName, stateType, host, pageNo, pageSize);\n         return returnDataListPaging(result);\n     }"
  },
  {
    "sha": "bdd7d6d7ea049f7b3d2d77d02a91257826b90c2a",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -27,6 +27,7 @@\n import static org.apache.dolphinscheduler.api.enums.Status.QUERY_UNAUTHORIZED_PROJECT_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROJECT_ERROR;\n \n+import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.ProcessDefinitionService;\n import org.apache.dolphinscheduler.api.service.ProjectService;\n@@ -172,8 +173,12 @@ public Result queryProjectListPaging(@ApiIgnore @RequestAttribute(value = Consta\n     ) {\n \n         logger.info(\"login user {}, query project list paging\", loginUser.getUserName());\n+        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n+        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n+            return returnDataListPaging(result);\n+        }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = projectService.queryProjectListPaging(loginUser, pageSize, pageNo, searchVal);\n+        result = projectService.queryProjectListPaging(loginUser, pageSize, pageNo, searchVal);\n         return returnDataListPaging(result);\n     }\n "
  },
  {
    "sha": "f4848d86ed6b59f3196f9ccb9934e7e623be30f2",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -27,10 +27,12 @@\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_SCHEDULE_ERROR;\n import static org.apache.dolphinscheduler.common.Constants.SESSION_USER;\n \n+import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.SchedulerService;\n import org.apache.dolphinscheduler.api.utils.RegexUtils;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.FailureStrategy;\n import org.apache.dolphinscheduler.common.enums.Priority;\n import org.apache.dolphinscheduler.common.enums.ReleaseState;\n@@ -245,8 +247,12 @@ public Result queryScheduleListPaging(@ApiIgnore @RequestAttribute(value = SESSI\n                                           @RequestParam(\"pageSize\") Integer pageSize) {\n         logger.info(\"login user {}, query schedule, project name: {}, process definition id: {}\",\n                 loginUser.getUserName(), projectName, processDefinitionId);\n+        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n+        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n+            return returnDataListPaging(result);\n+        }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = schedulerService.querySchedule(loginUser, projectName, processDefinitionId, searchVal, pageNo, pageSize);\n+        result = schedulerService.querySchedule(loginUser, projectName, processDefinitionId, searchVal, pageNo, pageSize);\n         return returnDataListPaging(result);\n     }\n "
  },
  {
    "sha": "42358bd65f51514bb21c8acf2f69d94cab179640",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -20,6 +20,7 @@\n import static org.apache.dolphinscheduler.api.enums.Status.FORCE_TASK_SUCCESS_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.QUERY_TASK_LIST_PAGING_ERROR;\n \n+import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.TaskInstanceService;\n import org.apache.dolphinscheduler.api.utils.RegexUtils;\n@@ -122,8 +123,13 @@ public Result queryTaskListPaging(@ApiIgnore @RequestAttribute(value = Constants\n                 RegexUtils.escapeNRT(host),\n                 RegexUtils.escapeNRT(startTime),\n                 RegexUtils.escapeNRT(endTime));\n+\n+        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n+        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n+            return returnDataListPaging(result);\n+        }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = taskInstanceService.queryTaskListPaging(\n+        result = taskInstanceService.queryTaskListPaging(\n                 loginUser, projectName, processInstanceId, processInstanceName, taskName, executorName, startTime, endTime, searchVal, stateType, host, pageNo, pageSize);\n         return returnDataListPaging(result);\n     }"
  },
  {
    "sha": "11800fdab99f45fa4574c0d5cb24f43a41a42131",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java",
    "status": "modified",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -19,6 +19,7 @@\n \n import static org.apache.dolphinscheduler.api.enums.Status.QUERY_WORKER_GROUP_FAIL;\n \n+import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.WorkerGroupService;\n import org.apache.dolphinscheduler.api.utils.Result;\n@@ -83,9 +84,12 @@ public Result queryAllWorkerGroupsPaging(@ApiIgnore @RequestAttribute(value = Co\n     ) {\n         logger.info(\"query all worker group paging: login user {}, pageNo:{}, pageSize:{}, searchVal:{}\",\n                 loginUser.getUserName(), pageNo, pageSize, searchVal);\n-\n+        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n+        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n+            return returnDataListPaging(result);\n+        }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = workerGroupService.queryAllGroupPaging(loginUser, pageNo, pageSize, searchVal);\n+        result = workerGroupService.queryAllGroupPaging(loginUser, pageNo, pageSize, searchVal);\n         return returnDataListPaging(result);\n     }\n "
  },
  {
    "sha": "80c7b918d90d95520f6a09fa7cc2c1e0683429f7",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionVersionServiceImpl.java",
    "status": "modified",
    "additions": 0,
    "deletions": 11,
    "changes": 11,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionVersionServiceImpl.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionVersionServiceImpl.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionVersionServiceImpl.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -115,17 +115,6 @@ private long queryMaxVersionByProcessDefinitionId(int processDefinitionId) {\n     @Override\n     public Map<String, Object> queryProcessDefinitionVersions(User loginUser, String projectName, int pageNo, int pageSize, int processDefinitionId) {\n \n-        Map<String, Object> result = new HashMap<>();\n-\n-        // check the if pageNo or pageSize less than 1\n-        if (pageNo <= 0 || pageSize <= 0) {\n-            putMsg(result\n-                    , Status.QUERY_PROCESS_DEFINITION_VERSIONS_PAGE_NO_OR_PAGE_SIZE_LESS_THAN_1_ERROR\n-                    , pageNo\n-                    , pageSize);\n-            return result;\n-        }\n-\n         Project project = projectMapper.queryByName(projectName);\n \n         // check project auth"
  },
  {
    "sha": "794b69b96053010ac17438392782ea52bda0e197",
    "filename": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AbstractControllerTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 2,
    "changes": 3,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AbstractControllerTest.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AbstractControllerTest.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AbstractControllerTest.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -38,7 +38,6 @@\n /**\n  * abstract controller test\n  */\n-@Ignore\n @RunWith(SpringRunner.class)\n @SpringBootTest(classes = ApiApplicationServer.class)\n public class AbstractControllerTest {\n@@ -64,7 +63,7 @@ public void setUp() {\n     }\n \n     @After\n-    public void after(){\n+    public void after() throws Exception {\n         sessionService.signOut(\"127.0.0.1\", user);\n     }\n "
  },
  {
    "sha": "22eb61652db4bf9ab57cb2c96834820cc55702e2",
    "filename": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java",
    "status": "modified",
    "additions": 13,
    "deletions": 35,
    "changes": 48,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -390,22 +390,18 @@ public void testBatchExportProcessDefinitionByIds() throws Exception {\n     @Test\n     public void testQueryProcessDefinitionVersions() {\n         String projectName = \"test\";\n+\n+        Result result = processDefinitionController.queryProcessDefinitionVersions(user, projectName, 1, -10, 1);\n+        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), result.getCode().intValue());\n+\n+        result = processDefinitionController.queryProcessDefinitionVersions(user, projectName, -1, 10, 1);\n+        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), result.getCode().intValue());\n+\n         Map<String, Object> resultMap = new HashMap<>();\n         putMsg(resultMap, Status.SUCCESS);\n         resultMap.put(Constants.DATA_LIST, new PageInfo<ProcessDefinitionVersion>(1, 10));\n-        Mockito.when(processDefinitionVersionService.queryProcessDefinitionVersions(\n-                user\n-                , projectName\n-                , 1\n-                , 10\n-                , 1))\n-                .thenReturn(resultMap);\n-        Result result = processDefinitionController.queryProcessDefinitionVersions(\n-                user\n-                , projectName\n-                , 1\n-                , 10\n-                , 1);\n+        Mockito.when(processDefinitionVersionService.queryProcessDefinitionVersions(user, projectName, 1, 10, 1)).thenReturn(resultMap);\n+        result = processDefinitionController.queryProcessDefinitionVersions(user, projectName, 1, 10, 1);\n \n         Assert.assertEquals(Status.SUCCESS.getCode(), (int) result.getCode());\n     }\n@@ -415,17 +411,8 @@ public void testSwitchProcessDefinitionVersion() {\n         String projectName = \"test\";\n         Map<String, Object> resultMap = new HashMap<>();\n         putMsg(resultMap, Status.SUCCESS);\n-        Mockito.when(processDefinitionService.switchProcessDefinitionVersion(\n-                user\n-                , projectName\n-                , 1\n-                , 10))\n-                .thenReturn(resultMap);\n-        Result result = processDefinitionController.switchProcessDefinitionVersion(\n-                user\n-                , projectName\n-                , 1\n-                , 10);\n+        Mockito.when(processDefinitionService.switchProcessDefinitionVersion(user, projectName, 1, 10)).thenReturn(resultMap);\n+        Result result = processDefinitionController.switchProcessDefinitionVersion(user, projectName, 1, 10);\n \n         Assert.assertEquals(Status.SUCCESS.getCode(), (int) result.getCode());\n     }\n@@ -435,17 +422,8 @@ public void testDeleteProcessDefinitionVersion() {\n         String projectName = \"test\";\n         Map<String, Object> resultMap = new HashMap<>();\n         putMsg(resultMap, Status.SUCCESS);\n-        Mockito.when(processDefinitionVersionService.deleteByProcessDefinitionIdAndVersion(\n-                user\n-                , projectName\n-                , 1\n-                , 10))\n-                .thenReturn(resultMap);\n-        Result result = processDefinitionController.deleteProcessDefinitionVersion(\n-                user\n-                , projectName\n-                , 1\n-                , 10);\n+        Mockito.when(processDefinitionVersionService.deleteByProcessDefinitionIdAndVersion(user, projectName, 1, 10)).thenReturn(resultMap);\n+        Result result = processDefinitionController.deleteProcessDefinitionVersion(user, projectName, 1, 10);\n \n         Assert.assertEquals(Status.SUCCESS.getCode(), (int) result.getCode());\n     }"
  },
  {
    "sha": "7a4a51a9b639306665a04c46190f066f539b038b",
    "filename": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectControllerTest.java",
    "status": "modified",
    "additions": 42,
    "deletions": 28,
    "changes": 70,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectControllerTest.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectControllerTest.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectControllerTest.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -26,7 +26,9 @@\n import org.apache.dolphinscheduler.api.utils.Result;\n import org.apache.dolphinscheduler.common.utils.JSONUtils;\n \n+import org.junit.After;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -36,19 +38,32 @@\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n /**\n  * project controller test\n  */\n-public class ProjectControllerTest extends AbstractControllerTest{\n+public class ProjectControllerTest extends AbstractControllerTest {\n \n     private static Logger logger = LoggerFactory.getLogger(ProjectControllerTest.class);\n \n-    @Test\n-    public void testCreateProject() throws Exception {\n+    private String projectId;\n+\n+    @Before\n+    public void before() throws Exception {\n+        projectId = testCreateProject(\"project_test1\", \"the test project\");\n+    }\n+\n+    @After\n+    public void after() throws Exception {\n+        testDeleteProject(projectId);\n+    }\n+\n+    private String testCreateProject(String projectName, String description) throws Exception {\n \n         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n-        paramsMap.add(\"projectName\",\"project_test1\");\n-        paramsMap.add(\"description\",\"the test project\");\n+        paramsMap.add(\"projectName\",projectName);\n+        paramsMap.add(\"description\",description);\n \n         MvcResult mvcResult = mockMvc.perform(post(\"/projects/create\")\n                 .header(SESSION_ID, sessionId)\n@@ -57,17 +72,19 @@ public void testCreateProject() throws Exception {\n                 .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))\n                 .andReturn();\n \n-        Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n+        Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), new TypeReference<Result<String>>() {});\n         Assert.assertEquals(Status.SUCCESS.getCode(), result.getCode().intValue());\n         Assert.assertNotNull(result.getData());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n+        logger.info(\"create project return result:{}\", mvcResult.getResponse().getContentAsString());\n+\n+        return (String)result.getData();\n     }\n \n     @Test\n     public void testUpdateProject() throws Exception {\n \n         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n-        paramsMap.add(\"projectId\",\"18\");\n+        paramsMap.add(\"projectId\", projectId);\n         paramsMap.add(\"projectName\",\"project_test_update\");\n         paramsMap.add(\"desc\",\"the test project update\");\n \n@@ -80,16 +97,15 @@ public void testUpdateProject() throws Exception {\n \n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n-    }\n-\n+        logger.info(\"update project return result:{}\", mvcResult.getResponse().getContentAsString());\n \n+    }\n \n     @Test\n     public void testQueryProjectById() throws Exception {\n \n         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n-        paramsMap.add(\"projectId\",\"18\");\n+        paramsMap.add(\"projectId\", projectId);\n \n         MvcResult mvcResult = mockMvc.perform(get(\"/projects/query-by-id\")\n                 .header(SESSION_ID, sessionId)\n@@ -99,8 +115,10 @@ public void testQueryProjectById() throws Exception {\n                 .andReturn();\n \n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n-        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n+        Assert.assertEquals(Status.SUCCESS.getCode(), result.getCode().intValue());\n         logger.info(mvcResult.getResponse().getContentAsString());\n+        logger.info(\"query project by id :{}, return result:{}\", projectId, mvcResult.getResponse().getContentAsString());\n+\n     }\n \n     @Test\n@@ -111,7 +129,6 @@ public void testQueryProjectListPaging() throws Exception {\n         paramsMap.add(\"pageSize\",\"2\");\n         paramsMap.add(\"pageNo\",\"2\");\n \n-\n         MvcResult mvcResult = mockMvc.perform(get(\"/projects/list-paging\")\n                 .header(SESSION_ID, sessionId)\n                 .params(paramsMap))\n@@ -121,10 +138,9 @@ public void testQueryProjectListPaging() throws Exception {\n \n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n+        logger.info(\"query list-paging project return result:{}\", mvcResult.getResponse().getContentAsString());\n     }\n \n-\n     @Test\n     public void testQueryUnauthorizedProject() throws Exception {\n \n@@ -140,16 +156,14 @@ public void testQueryUnauthorizedProject() throws Exception {\n \n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n+        logger.info(\"query unauth project return result:{}\", mvcResult.getResponse().getContentAsString());\n     }\n \n-\n-\n     @Test\n     public void testQueryAuthorizedProject() throws Exception {\n \n         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n-        paramsMap.add(\"userId\",\"2\");\n+        paramsMap.add(\"userId\",String.valueOf(user.getId()));\n \n         MvcResult mvcResult = mockMvc.perform(get(\"/projects/authed-project\")\n                 .header(SESSION_ID, sessionId)\n@@ -160,9 +174,9 @@ public void testQueryAuthorizedProject() throws Exception {\n \n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n-    }\n+        logger.info(\"query authed project return result:{}\", mvcResult.getResponse().getContentAsString());\n \n+    }\n \n     @Test\n     public void testQueryAllProjectList() throws Exception {\n@@ -178,7 +192,8 @@ public void testQueryAllProjectList() throws Exception {\n \n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n+        logger.info(\"query all project return result:{}\", mvcResult.getResponse().getContentAsString());\n+\n     }\n \n     @Ignore\n@@ -200,12 +215,10 @@ public void testImportProcessDefinition() throws Exception {\n         logger.info(mvcResult.getResponse().getContentAsString());\n     }\n \n-\n-    @Test\n-    public void testDeleteProject() throws Exception {\n+    private void testDeleteProject(String projectId) throws Exception {\n \n         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n-        paramsMap.add(\"projectId\",\"18\");\n+        paramsMap.add(\"projectId\", projectId);\n \n         MvcResult mvcResult = mockMvc.perform(get(\"/projects/delete\")\n                 .header(SESSION_ID, sessionId)\n@@ -216,6 +229,7 @@ public void testDeleteProject() throws Exception {\n \n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n+        logger.info(\"delete project return result:{}\", mvcResult.getResponse().getContentAsString());\n     }\n+\n }"
  },
  {
    "sha": "e86a5eccf149e19c641daf2477f40bc765a4226f",
    "filename": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/QueueControllerTest.java",
    "status": "modified",
    "additions": 33,
    "deletions": 18,
    "changes": 51,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/QueueControllerTest.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/QueueControllerTest.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/QueueControllerTest.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -38,10 +38,12 @@\n /**\n  * queue controller test\n  */\n-public class QueueControllerTest extends AbstractControllerTest{\n+public class QueueControllerTest extends AbstractControllerTest {\n \n     private static Logger logger = LoggerFactory.getLogger(QueueControllerTest.class);\n \n+    private static final String QUEUE_CREATE_STRING = \"queue1\";\n+\n     @Test\n     public void testQueryList() throws Exception {\n \n@@ -53,14 +55,13 @@ public void testQueryList() throws Exception {\n \n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n+        logger.info(\"query list queue return result:{}\", mvcResult.getResponse().getContentAsString());\n     }\n \n     @Test\n     public void testQueryQueueListPaging() throws Exception {\n \n         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n-        //paramsMap.add(\"processInstanceId\",\"1380\");\n         paramsMap.add(\"searchVal\",\"\");\n         paramsMap.add(\"pageNo\",\"1\");\n         paramsMap.add(\"pageSize\",\"20\");\n@@ -73,18 +74,16 @@ public void testQueryQueueListPaging() throws Exception {\n                 .andReturn();\n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n         Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n-    }\n-\n-\n+        logger.info(\"query list-paging queue return result:{}\", mvcResult.getResponse().getContentAsString());\n \n+    }\n \n     @Test\n     public void testCreateQueue() throws Exception {\n \n         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n-        paramsMap.add(\"queue\",\"ait\");\n-        paramsMap.add(\"queueName\",\"ait\");\n+        paramsMap.add(\"queue\", QUEUE_CREATE_STRING);\n+        paramsMap.add(\"queueName\",\"root.queue1\");\n \n         MvcResult mvcResult = mockMvc.perform(post(\"/queue/create\")\n                 .header(SESSION_ID, sessionId)\n@@ -93,17 +92,17 @@ public void testCreateQueue() throws Exception {\n                 .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))\n                 .andReturn();\n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n-//        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n+        Assert.assertEquals(Status.SUCCESS.getCode(), result.getCode().intValue());\n+        logger.info(\"create queue return result:{}\", mvcResult.getResponse().getContentAsString());\n     }\n \n     @Test\n     public void testUpdateQueue() throws Exception {\n \n         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n         paramsMap.add(\"id\",\"2\");\n-        paramsMap.add(\"queue\",\"ait12\");\n-        paramsMap.add(\"queueName\",\"aitName\");\n+        paramsMap.add(\"queue\",\"queue2\");\n+        paramsMap.add(\"queueName\",\"root.queue2\");\n \n         MvcResult mvcResult = mockMvc.perform(post(\"/queue/update\")\n                 .header(SESSION_ID, sessionId)\n@@ -112,16 +111,17 @@ public void testUpdateQueue() throws Exception {\n                 .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))\n                 .andReturn();\n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n-        //Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n-        logger.info(mvcResult.getResponse().getContentAsString());\n+        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n+        logger.info(\"update queue return result:{}\", mvcResult.getResponse().getContentAsString());\n     }\n \n     @Test\n     public void testVerifyQueue() throws Exception {\n \n+        // queue value exist\n         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\n-        paramsMap.add(\"queue\",\"ait123\");\n-        paramsMap.add(\"queueName\",\"aitName\");\n+        paramsMap.add(\"queue\",QUEUE_CREATE_STRING);\n+        paramsMap.add(\"queueName\",\"queue.name\");\n \n         MvcResult mvcResult = mockMvc.perform(post(\"/queue/verify-queue\")\n                 .header(SESSION_ID, sessionId)\n@@ -130,7 +130,22 @@ public void testVerifyQueue() throws Exception {\n                 .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))\n                 .andReturn();\n         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n-        //Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n+        Assert.assertEquals(Status.QUEUE_VALUE_EXIST.getCode(),result.getCode().intValue());\n+\n+        // success\n+        paramsMap.clear();\n+        paramsMap.add(\"queue\",\"ait123\");\n+        paramsMap.add(\"queueName\",\"aitName\");\n+\n+        mvcResult = mockMvc.perform(post(\"/queue/verify-queue\")\n+                .header(SESSION_ID, sessionId)\n+                .params(paramsMap))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))\n+                .andReturn();\n+        result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);\n+        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());\n         logger.info(mvcResult.getResponse().getContentAsString());\n+        logger.info(\"verify queue return result:{}\", mvcResult.getResponse().getContentAsString());\n     }\n }"
  },
  {
    "sha": "b499c2f2455a94db305cae9ab8ff1aa0da7ea08c",
    "filename": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionServiceTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 20,
    "changes": 20,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionServiceTest.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionServiceTest.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionServiceTest.java?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -88,26 +88,6 @@ public void testQueryProcessDefinitionVersions() {\n         User loginUser = new User();\n         loginUser.setId(-1);\n         loginUser.setUserType(UserType.GENERAL_USER);\n-        Map<String, Object> resultMap1 = processDefinitionVersionService.queryProcessDefinitionVersions(\n-                loginUser\n-                , projectName\n-                , pageNo\n-                , pageSize\n-                , processDefinitionId);\n-        Assert.assertEquals(Status.QUERY_PROCESS_DEFINITION_VERSIONS_PAGE_NO_OR_PAGE_SIZE_LESS_THAN_1_ERROR\n-                , resultMap1.get(Constants.STATUS));\n-\n-        // pageSize <= 0\n-        pageNo = 1;\n-        pageSize = -1;\n-        Map<String, Object> resultMap2 = processDefinitionVersionService.queryProcessDefinitionVersions(\n-                loginUser\n-                , projectName\n-                , pageNo\n-                , pageSize\n-                , processDefinitionId);\n-        Assert.assertEquals(Status.QUERY_PROCESS_DEFINITION_VERSIONS_PAGE_NO_OR_PAGE_SIZE_LESS_THAN_1_ERROR\n-                , resultMap2.get(Constants.STATUS));\n \n         Map<String, Object> res = new HashMap<>();\n         putMsg(res, Status.PROJECT_NOT_FOUNT);"
  },
  {
    "sha": "d8af2a2312de243a043433bf157f5985a34e0e77",
    "filename": "pom.xml",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/dd9ce6f033b909180c5786b8a84418d6dbf6f696/pom.xml",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/dd9ce6f033b909180c5786b8a84418d6dbf6f696/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/pom.xml?ref=dd9ce6f033b909180c5786b8a84418d6dbf6f696",
    "patch": "@@ -795,6 +795,8 @@\n                 <version>${maven-surefire-plugin.version}</version>\n                 <configuration>\n                     <includes>\n+                        <include>**/api/controller/ProjectControllerTest.java</include>\n+                        <include>**/api/controller/QueueControllerTest.java</include>\n                         <include>**/api/controller/ProcessDefinitionControllerTest.java</include>\n                         <include>**/api/controller/TenantControllerTest.java</include>\n                         <include>**/api/dto/resources/filter/ResourceFilterTest.java</include>\n@@ -839,6 +841,7 @@\n                         <include>**/api/controller/ProcessDefinitionControllerTest.java</include>\n                         <include>**/api/controller/TaskInstanceControllerTest.java</include>\n                         <include>**/api/controller/WorkFlowLineageControllerTest.java</include>\n+                        <include>**/api/controller/ProcessInstanceControllerTest.java</include>\n                         <include>**/api/utils/exportprocess/DataSourceParamTest.java</include>\n                         <include>**/api/utils/exportprocess/DependentParamTest.java</include>\n                         <include>**/api/utils/CheckUtilsTest.java</include>"
  }
]
