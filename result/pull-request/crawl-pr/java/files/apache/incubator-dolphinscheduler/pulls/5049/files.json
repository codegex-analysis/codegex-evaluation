[
  {
    "sha": "c51d8ea5030f41e00f293a58e4e77b21a08804e1",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java",
    "status": "modified",
    "additions": 19,
    "deletions": 23,
    "changes": 42,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -23,16 +23,17 @@\n import static org.apache.dolphinscheduler.api.enums.Status.QUERY_ACCESSTOKEN_LIST_PAGING_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_ACCESS_TOKEN_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.AccessTokenService;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n+import org.apache.dolphinscheduler.dao.entity.AccessToken;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -79,15 +80,14 @@\n     @PostMapping(value = \"/create\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(CREATE_ACCESS_TOKEN_ERROR)\n-    public Result createToken(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> createToken(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                               @RequestParam(value = \"userId\") int userId,\n                               @RequestParam(value = \"expireTime\") String expireTime,\n                               @RequestParam(value = \"token\") String token) {\n         logger.info(\"login user {}, create token , userId : {} , token expire time : {} , token : {}\", loginUser.getUserName(),\n                 userId, expireTime, token);\n \n-        Map<String, Object> result = accessTokenService.createToken(loginUser, userId, expireTime, token);\n-        return returnDataList(result);\n+        return accessTokenService.createToken(loginUser, userId, expireTime, token);\n     }\n \n     /**\n@@ -102,12 +102,11 @@ public Result createToken(@ApiIgnore @RequestAttribute(value = Constants.SESSION\n     @PostMapping(value = \"/generate\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(GENERATE_TOKEN_ERROR)\n-    public Result generateToken(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<String> generateToken(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                 @RequestParam(value = \"userId\") int userId,\n                                 @RequestParam(value = \"expireTime\") String expireTime) {\n         logger.info(\"login user {}, generate token , userId : {} , token expire time : {}\", loginUser, userId, expireTime);\n-        Map<String, Object> result = accessTokenService.generateToken(loginUser, userId, expireTime);\n-        return returnDataList(result);\n+        return accessTokenService.generateToken(loginUser, userId, expireTime);\n     }\n \n     /**\n@@ -128,20 +127,19 @@ public Result generateToken(@RequestAttribute(value = Constants.SESSION_USER) Us\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_ACCESSTOKEN_LIST_PAGING_ERROR)\n-    public Result queryAccessTokenList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                       @RequestParam(\"pageNo\") Integer pageNo,\n-                                       @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                       @RequestParam(\"pageSize\") Integer pageSize) {\n+    public Result<PageListVO<AccessToken>> queryAccessTokenList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                @RequestParam(\"pageNo\") Integer pageNo,\n+                                                                @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+                                                                @RequestParam(\"pageSize\") Integer pageSize) {\n         logger.info(\"login user {}, list access token paging, pageNo: {}, searchVal: {}, pageSize: {}\",\n                 loginUser.getUserName(), pageNo, searchVal, pageSize);\n \n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+        CheckParamResult result = checkPageParams(pageNo, pageSize);\n+        if (result.getStatus() != Status.SUCCESS) {\n+            return error(result);\n         }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        result = accessTokenService.queryAccessTokenList(loginUser, searchVal, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return accessTokenService.queryAccessTokenList(loginUser, searchVal, pageNo, pageSize);\n     }\n \n     /**\n@@ -155,11 +153,10 @@ public Result queryAccessTokenList(@ApiIgnore @RequestAttribute(value = Constant\n     @PostMapping(value = \"/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_ACCESS_TOKEN_ERROR)\n-    public Result delAccessTokenById(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> delAccessTokenById(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                      @RequestParam(value = \"id\") int id) {\n         logger.info(\"login user {}, delete access token, id: {},\", loginUser.getUserName(), id);\n-        Map<String, Object> result = accessTokenService.delAccessTokenById(loginUser, id);\n-        return returnDataList(result);\n+        return accessTokenService.delAccessTokenById(loginUser, id);\n     }\n \n \n@@ -177,16 +174,15 @@ public Result delAccessTokenById(@RequestAttribute(value = Constants.SESSION_USE\n     @PostMapping(value = \"/update\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_ACCESS_TOKEN_ERROR)\n-    public Result updateToken(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> updateToken(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                               @RequestParam(value = \"id\") int id,\n                               @RequestParam(value = \"userId\") int userId,\n                               @RequestParam(value = \"expireTime\") String expireTime,\n                               @RequestParam(value = \"token\") String token) {\n         logger.info(\"login user {}, update token , userId : {} , token expire time : {} , token : {}\", loginUser.getUserName(),\n                 userId, expireTime, token);\n \n-        Map<String, Object> result = accessTokenService.updateToken(loginUser, id, userId, expireTime, token);\n-        return returnDataList(result);\n+        return accessTokenService.updateToken(loginUser, id, userId, expireTime, token);\n     }\n \n }"
  },
  {
    "sha": "740d9bce484f1d37dc5637339a79a44841d72fa2",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java",
    "status": "modified",
    "additions": 28,
    "deletions": 30,
    "changes": 58,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -23,16 +23,19 @@\n import static org.apache.dolphinscheduler.api.enums.Status.QUERY_ALL_ALERTGROUP_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_ALERT_GROUP_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.AlertGroupService;\n import org.apache.dolphinscheduler.api.utils.RegexUtils;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n+import org.apache.dolphinscheduler.dao.entity.AlertGroup;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n+import java.util.List;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -83,15 +86,14 @@\n     @PostMapping(value = \"/create\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(CREATE_ALERT_GROUP_ERROR)\n-    public Result createAlertgroup(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                   @RequestParam(value = \"groupName\") String groupName,\n-                                   @RequestParam(value = \"description\", required = false) String description,\n-                                   @RequestParam(value = \"alertInstanceIds\") String alertInstanceIds) {\n+    public Result<?> createAlertgroup(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                      @RequestParam(value = \"groupName\") String groupName,\n+                                      @RequestParam(value = \"description\", required = false) String description,\n+                                      @RequestParam(value = \"alertInstanceIds\") String alertInstanceIds) {\n         logger.info(\"loginUser user {}, create alert group, groupName: {}, desc: {},alertInstanceIds:{}\",\n                 RegexUtils.escapeNRT(loginUser.getUserName()), RegexUtils.escapeNRT(groupName),\n                 RegexUtils.escapeNRT(description), RegexUtils.escapeNRT(alertInstanceIds));\n-        Map<String, Object> result = alertGroupService.createAlertgroup(loginUser, groupName, description, alertInstanceIds);\n-        return returnDataList(result);\n+        return alertGroupService.createAlertgroup(loginUser, groupName, description, alertInstanceIds);\n     }\n \n     /**\n@@ -104,11 +106,10 @@ public Result createAlertgroup(@ApiIgnore @RequestAttribute(value = Constants.SE\n     @GetMapping(value = \"/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_ALL_ALERTGROUP_ERROR)\n-    public Result list(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<AlertGroup>> list(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login  user {}, query all alertGroup\",\n                 loginUser.getUserName());\n-        Map<String, Object> result = alertGroupService.queryAlertgroup();\n-        return returnDataList(result);\n+        return alertGroupService.queryAlertgroup();\n     }\n \n     /**\n@@ -129,20 +130,19 @@ public Result list(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER)\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(LIST_PAGING_ALERT_GROUP_ERROR)\n-    public Result listPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                             @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                             @RequestParam(\"pageNo\") Integer pageNo,\n-                             @RequestParam(\"pageSize\") Integer pageSize) {\n+    public Result<PageListVO<AlertGroup>> listPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                     @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+                                                     @RequestParam(\"pageNo\") Integer pageNo,\n+                                                     @RequestParam(\"pageSize\") Integer pageSize) {\n         logger.info(\"login  user {}, list paging, pageNo: {}, searchVal: {}, pageSize: {}\",\n                 loginUser.getUserName(), pageNo, searchVal, pageSize);\n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+        CheckParamResult result = checkPageParams(pageNo, pageSize);\n+        if (result.getStatus() != Status.SUCCESS) {\n+            return error(result);\n         }\n \n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        result = alertGroupService.listPaging(loginUser, searchVal, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return alertGroupService.listPaging(loginUser, searchVal, pageNo, pageSize);\n     }\n \n     /**\n@@ -164,17 +164,16 @@ public Result listPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_\n     @PostMapping(value = \"/update\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_ALERT_GROUP_ERROR)\n-    public Result updateAlertgroup(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                   @RequestParam(value = \"id\") int id,\n-                                   @RequestParam(value = \"groupName\") String groupName,\n-                                   @RequestParam(value = \"description\", required = false) String description,\n-                                   @RequestParam(value = \"alertInstanceIds\") String alertInstanceIds) {\n+    public Result<Void> updateAlertgroup(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                         @RequestParam(value = \"id\") int id,\n+                                         @RequestParam(value = \"groupName\") String groupName,\n+                                         @RequestParam(value = \"description\", required = false) String description,\n+                                         @RequestParam(value = \"alertInstanceIds\") String alertInstanceIds) {\n         logger.info(\"login  user {}, updateProcessInstance alert group, groupName: {},  desc: {}\",\n                 RegexUtils.escapeNRT(loginUser.getUserName()),\n                 RegexUtils.escapeNRT(groupName),\n                 RegexUtils.escapeNRT(description));\n-        Map<String, Object> result = alertGroupService.updateAlertgroup(loginUser, id, groupName, description, alertInstanceIds);\n-        return returnDataList(result);\n+        return alertGroupService.updateAlertgroup(loginUser, id, groupName, description, alertInstanceIds);\n     }\n \n     /**\n@@ -191,11 +190,10 @@ public Result updateAlertgroup(@ApiIgnore @RequestAttribute(value = Constants.SE\n     @PostMapping(value = \"/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_ALERT_GROUP_ERROR)\n-    public Result delAlertgroupById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                    @RequestParam(value = \"id\") int id) {\n+    public Result<Void> delAlertgroupById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                          @RequestParam(value = \"id\") int id) {\n         logger.info(\"login user {}, delete AlertGroup, id: {},\", loginUser.getUserName(), id);\n-        Map<String, Object> result = alertGroupService.delAlertgroupById(loginUser, id);\n-        return returnDataList(result);\n+        return alertGroupService.delAlertgroupById(loginUser, id);\n     }\n \n "
  },
  {
    "sha": "e7a77c8b62bda4a0d0f912a0858fc794622e85e8",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertPluginInstanceController.java",
    "status": "modified",
    "additions": 23,
    "deletions": 25,
    "changes": 48,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertPluginInstanceController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertPluginInstanceController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertPluginInstanceController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -24,15 +24,19 @@\n import static org.apache.dolphinscheduler.api.enums.Status.QUERY_ALL_ALERT_PLUGIN_INSTANCE_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_ALERT_PLUGIN_INSTANCE_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.AlertPluginInstanceService;\n import org.apache.dolphinscheduler.api.utils.RegexUtils;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.AlertPluginInstanceVO;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n+import org.apache.dolphinscheduler.dao.entity.AlertPluginInstance;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n+import java.util.List;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -84,15 +88,14 @@\n     @PostMapping(value = \"/create\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(CREATE_ALERT_PLUGIN_INSTANCE_ERROR)\n-    public Result createAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> createAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                             @RequestParam(value = \"pluginDefineId\") int pluginDefineId,\n                                             @RequestParam(value = \"instanceName\") String instanceName,\n                                             @RequestParam(value = \"pluginInstanceParams\") String pluginInstanceParams) {\n         logger.info(\"login user {},create alert plugin instance, instanceName:{} \",\n                 RegexUtils.escapeNRT(loginUser.getUserName()),\n                 RegexUtils.escapeNRT(instanceName));\n-        Map<String, Object> result = alertPluginInstanceService.create(loginUser, pluginDefineId, instanceName, pluginInstanceParams);\n-        return returnDataList(result);\n+        return alertPluginInstanceService.create(loginUser, pluginDefineId, instanceName, pluginInstanceParams);\n     }\n \n     /**\n@@ -113,13 +116,12 @@ public Result createAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Con\n     @GetMapping(value = \"/update\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_ALERT_PLUGIN_INSTANCE_ERROR)\n-    public Result updateAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> updateAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                             @RequestParam(value = \"alertPluginInstanceId\") int alertPluginInstanceId,\n                                             @RequestParam(value = \"instanceName\") String instanceName,\n                                             @RequestParam(value = \"pluginInstanceParams\") String pluginInstanceParams) {\n         logger.info(\"login user {},update alert plugin instance id {}\", RegexUtils.escapeNRT(loginUser.getUserName()), alertPluginInstanceId);\n-        Map<String, Object> result = alertPluginInstanceService.update(loginUser, alertPluginInstanceId, instanceName, pluginInstanceParams);\n-        return returnDataList(result);\n+        return alertPluginInstanceService.update(loginUser, alertPluginInstanceId, instanceName, pluginInstanceParams);\n     }\n \n     /**\n@@ -136,12 +138,11 @@ public Result updateAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Con\n     @GetMapping(value = \"/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_ALERT_PLUGIN_INSTANCE_ERROR)\n-    public Result deleteAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> deleteAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                             @RequestParam(value = \"id\") int id) {\n         logger.info(\"login user {},delete alert plugin instance id {}\", RegexUtils.escapeNRT(loginUser.getUserName()), id);\n \n-        Map<String, Object> result = alertPluginInstanceService.delete(loginUser, id);\n-        return returnDataList(result);\n+        return alertPluginInstanceService.delete(loginUser, id);\n     }\n \n     /**\n@@ -155,11 +156,10 @@ public Result deleteAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Con\n     @PostMapping(value = \"/get\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(GET_ALERT_PLUGIN_INSTANCE_ERROR)\n-    public Result getAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                         @RequestParam(value = \"id\") int id) {\n+    public Result<AlertPluginInstance> getAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                              @RequestParam(value = \"id\") int id) {\n         logger.info(\"login user {},get alert plugin instance, id {}\", RegexUtils.escapeNRT(loginUser.getUserName()), id);\n-        Map<String, Object> result = alertPluginInstanceService.get(loginUser, id);\n-        return returnDataList(result);\n+        return alertPluginInstanceService.get(loginUser, id);\n     }\n \n     /**\n@@ -172,10 +172,9 @@ public Result getAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Consta\n     @PostMapping(value = \"/queryAll\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_ALL_ALERT_PLUGIN_INSTANCE_ERROR)\n-    public Result getAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<AlertPluginInstanceVO>> getAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user {}, query all alert plugin instance\", RegexUtils.escapeNRT(loginUser.getUserName()));\n-        Map<String, Object> result = alertPluginInstanceService.queryAll();\n-        return returnDataList(result);\n+        return alertPluginInstanceService.queryAll();\n     }\n \n     /**\n@@ -224,17 +223,16 @@ public Result verifyGroupName(@ApiIgnore @RequestAttribute(value = Constants.SES\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(LIST_PAGING_ALERT_PLUGIN_INSTANCE_ERROR)\n-    public Result listPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                             @RequestParam(\"pageNo\") Integer pageNo,\n-                             @RequestParam(\"pageSize\") Integer pageSize) {\n+    public Result<PageListVO<AlertPluginInstanceVO>> listPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                @RequestParam(\"pageNo\") Integer pageNo,\n+                                                                @RequestParam(\"pageSize\") Integer pageSize) {\n         logger.info(\"login user {}, list paging, pageNo: {}, pageSize: {}\", RegexUtils.escapeNRT(loginUser.getUserName()), pageNo, pageSize);\n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+        CheckParamResult result = checkPageParams(pageNo, pageSize);\n+        if (result.getStatus() != Status.SUCCESS) {\n+            return error(result);\n         }\n \n-        result = alertPluginInstanceService.queryPluginPage(pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return alertPluginInstanceService.queryPluginPage(pageNo, pageSize);\n     }\n \n }"
  },
  {
    "sha": "84f4f0e3d6f2da1cf1041c190ffa29684f05068c",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/BaseController.java",
    "status": "modified",
    "additions": 17,
    "deletions": 47,
    "changes": 64,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/BaseController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/BaseController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/BaseController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -22,15 +22,15 @@\n import static org.apache.dolphinscheduler.common.Constants.HTTP_X_FORWARDED_FOR;\n import static org.apache.dolphinscheduler.common.Constants.HTTP_X_REAL_IP;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.utils.PageInfo;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.utils.StringUtils;\n-import org.apache.dolphinscheduler.dao.entity.Resource;\n \n import java.text.MessageFormat;\n-import java.util.HashMap;\n import java.util.Map;\n \n import javax.servlet.http.HttpServletRequest;\n@@ -47,8 +47,7 @@\n      * @param pageSize page size\n      * @return check result code\n      */\n-    public Map<String, Object> checkPageParams(int pageNo, int pageSize) {\n-        Map<String, Object> result = new HashMap<>(4);\n+    public CheckParamResult checkPageParams(int pageNo, int pageSize) {\n         Status resultEnum = Status.SUCCESS;\n         String msg = Status.SUCCESS.getMsg();\n         if (pageNo <= 0) {\n@@ -58,9 +57,7 @@\n             resultEnum = Status.REQUEST_PARAMS_NOT_VALID_ERROR;\n             msg = MessageFormat.format(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getMsg(), Constants.PAGE_SIZE);\n         }\n-        result.put(Constants.STATUS, resultEnum);\n-        result.put(Constants.MSG, msg);\n-        return result;\n+        return new CheckParamResult(resultEnum, msg);\n     }\n \n     /**\n@@ -110,21 +107,12 @@ public Result returnDataList(Map<String, Object> result) {\n \n     /**\n      * return data list with paging\n-     * @param result result code\n-     * @return result code\n+     * @param pageInfo pageInfo\n+     * @return result\n      */\n-    public Result returnDataListPaging(Map<String, Object> result) {\n-        Status status = (Status) result.get(Constants.STATUS);\n-        if (status == Status.SUCCESS) {\n-            result.put(Constants.MSG, Status.SUCCESS.getMsg());\n-            PageInfo<Resource> pageInfo = (PageInfo<Resource>) result.get(Constants.DATA_LIST);\n-            return success(pageInfo.getLists(), pageInfo.getCurrentPage(), pageInfo.getTotalCount(),\n-                    pageInfo.getTotalPage());\n-        } else {\n-            Integer code = status.getCode();\n-            String msg = (String) result.get(Constants.MSG);\n-            return error(code, msg);\n-        }\n+    public <T> Result<PageListVO<T>> returnDataListPaging(PageInfo<T> pageInfo) {\n+        PageListVO<T> pageListVO = new PageListVO<>(pageInfo);\n+        return Result.success(pageListVO);\n     }\n \n     /**\n@@ -187,44 +175,26 @@ public Result success(String msg, Map<String, Object> object) {\n         return getResult(msg, object);\n     }\n \n-    /**\n-     * return data with paging\n-     *\n-     * @param totalList success object list\n-     * @param currentPage current page\n-     * @param total total\n-     * @param totalPage  total page\n-     * @return success result code\n-     */\n-    public Result success(Object totalList, Integer currentPage,\n-                                                  Integer total, Integer totalPage) {\n-        Result result = new Result();\n-        result.setCode(Status.SUCCESS.getCode());\n-        result.setMsg(Status.SUCCESS.getMsg());\n-\n-        Map<String, Object> map = new HashMap<>(8);\n-        map.put(Constants.TOTAL_LIST, totalList);\n-        map.put(Constants.CURRENT_PAGE, currentPage);\n-        map.put(Constants.TOTAL_PAGE, totalPage);\n-        map.put(Constants.TOTAL, total);\n-        result.setData(map);\n-        return result;\n-    }\n-\n     /**\n      * error handle\n      *\n      * @param code result code\n      * @param msg result message\n      * @return error result code\n      */\n-    public Result error(Integer code, String msg) {\n-        Result result = new Result();\n+    public <T> Result<T> error(Integer code, String msg) {\n+        Result<T> result = new Result<>();\n         result.setCode(code);\n         result.setMsg(msg);\n         return result;\n     }\n \n+    public <T> Result<T> error(CheckParamResult result) {\n+        int errorCode = result.getStatus().getCode();\n+        String errorMsg = result.getMsg();\n+        return error(errorCode, errorMsg);\n+    }\n+\n     /**\n      * put message to map\n      *"
  },
  {
    "sha": "f61337995cf0f236437996b11a7f8c6dca0df571",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataAnalysisController.java",
    "status": "modified",
    "additions": 21,
    "deletions": 22,
    "changes": 43,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataAnalysisController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataAnalysisController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataAnalysisController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -23,12 +23,16 @@\n import static org.apache.dolphinscheduler.api.enums.Status.QUEUE_COUNT_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.TASK_INSTANCE_STATE_COUNT_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.CommandStateCount;\n+import org.apache.dolphinscheduler.api.dto.DefineUserDto;\n+import org.apache.dolphinscheduler.api.dto.TaskCountDto;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.DataAnalysisService;\n import org.apache.dolphinscheduler.api.utils.Result;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n+import java.util.List;\n import java.util.Map;\n \n import org.slf4j.Logger;\n@@ -80,14 +84,13 @@\n     @GetMapping(value = \"/task-state-count\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(TASK_INSTANCE_STATE_COUNT_ERROR)\n-    public Result countTaskState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<TaskCountDto> countTaskState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                  @RequestParam(value = \"startDate\", required = false) String startDate,\n                                  @RequestParam(value = \"endDate\", required = false) String endDate,\n                                  @RequestParam(value = \"projectId\", required = false, defaultValue = \"0\") int projectId) {\n         logger.info(\"count task state, user:{}, start date: {}, end date:{}, project id {}\",\n                 loginUser.getUserName(), startDate, endDate, projectId);\n-        Map<String, Object> result = dataAnalysisService.countTaskStateByProject(loginUser, projectId, startDate, endDate);\n-        return returnDataList(result);\n+        return dataAnalysisService.countTaskStateByProject(loginUser, projectId, startDate, endDate);\n     }\n \n     /**\n@@ -108,14 +111,13 @@ public Result countTaskState(@ApiIgnore @RequestAttribute(value = Constants.SESS\n     @GetMapping(value = \"/process-state-count\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(COUNT_PROCESS_INSTANCE_STATE_ERROR)\n-    public Result countProcessInstanceState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                            @RequestParam(value = \"startDate\", required = false) String startDate,\n-                                            @RequestParam(value = \"endDate\", required = false) String endDate,\n-                                            @RequestParam(value = \"projectId\", required = false, defaultValue = \"0\") int projectId) {\n+    public Result<TaskCountDto> countProcessInstanceState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                          @RequestParam(value = \"startDate\", required = false) String startDate,\n+                                                          @RequestParam(value = \"endDate\", required = false) String endDate,\n+                                                          @RequestParam(value = \"projectId\", required = false, defaultValue = \"0\") int projectId) {\n         logger.info(\"count process instance state, user:{}, start date: {}, end date:{}, project id:{}\",\n                 loginUser.getUserName(), startDate, endDate, projectId);\n-        Map<String, Object> result = dataAnalysisService.countProcessInstanceStateByProject(loginUser, projectId, startDate, endDate);\n-        return returnDataList(result);\n+        return dataAnalysisService.countProcessInstanceStateByProject(loginUser, projectId, startDate, endDate);\n     }\n \n     /**\n@@ -132,12 +134,11 @@ public Result countProcessInstanceState(@ApiIgnore @RequestAttribute(value = Con\n     @GetMapping(value = \"/define-user-count\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(COUNT_PROCESS_DEFINITION_USER_ERROR)\n-    public Result countDefinitionByUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @RequestParam(value = \"projectId\", required = false, defaultValue = \"0\") int projectId) {\n+    public Result<DefineUserDto> countDefinitionByUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                       @RequestParam(value = \"projectId\", required = false, defaultValue = \"0\") int projectId) {\n         logger.info(\"count process definition , user:{}, project id:{}\",\n                 loginUser.getUserName(), projectId);\n-        Map<String, Object> result = dataAnalysisService.countDefinitionByUser(loginUser, projectId);\n-        return returnDataList(result);\n+        return dataAnalysisService.countDefinitionByUser(loginUser, projectId);\n     }\n \n \n@@ -159,14 +160,13 @@ public Result countDefinitionByUser(@ApiIgnore @RequestAttribute(value = Constan\n     @GetMapping(value = \"/command-state-count\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(COMMAND_STATE_COUNT_ERROR)\n-    public Result countCommandState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                    @RequestParam(value = \"startDate\", required = false) String startDate,\n-                                    @RequestParam(value = \"endDate\", required = false) String endDate,\n-                                    @RequestParam(value = \"projectId\", required = false, defaultValue = \"0\") int projectId) {\n+    public Result<List<CommandStateCount>> countCommandState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                             @RequestParam(value = \"startDate\", required = false) String startDate,\n+                                                             @RequestParam(value = \"endDate\", required = false) String endDate,\n+                                                             @RequestParam(value = \"projectId\", required = false, defaultValue = \"0\") int projectId) {\n         logger.info(\"count command state, user:{}, start date: {}, end date:{}, project id {}\",\n                 loginUser.getUserName(), startDate, endDate, projectId);\n-        Map<String, Object> result = dataAnalysisService.countCommandState(loginUser, projectId, startDate, endDate);\n-        return returnDataList(result);\n+        return dataAnalysisService.countCommandState(loginUser, projectId, startDate, endDate);\n     }\n \n     /**\n@@ -183,12 +183,11 @@ public Result countCommandState(@ApiIgnore @RequestAttribute(value = Constants.S\n     @GetMapping(value = \"/queue-count\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUEUE_COUNT_ERROR)\n-    public Result countQueueState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Map<String, Integer>> countQueueState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                   @RequestParam(value = \"projectId\", required = false, defaultValue = \"0\") int projectId) {\n         logger.info(\"count command state, user:{}, project id {}\",\n                 loginUser.getUserName(), projectId);\n-        Map<String, Object> result = dataAnalysisService.countQueueState(loginUser, projectId);\n-        return returnDataList(result);\n+        return dataAnalysisService.countQueueState(loginUser, projectId);\n     }\n \n "
  },
  {
    "sha": "576ac4dd47e3f6007e2cb61ed9a1490534b2c8ae",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java",
    "status": "modified",
    "additions": 20,
    "deletions": 22,
    "changes": 42,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -28,18 +28,21 @@\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_DATASOURCE_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.VERIFY_DATASOURCE_NAME_FAILURE;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.DataSourceService;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.DbConnectType;\n import org.apache.dolphinscheduler.common.enums.DbType;\n import org.apache.dolphinscheduler.common.utils.CommonUtils;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n+import org.apache.dolphinscheduler.dao.entity.DataSource;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n+import java.util.List;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -211,8 +214,7 @@ public Result queryDataSource(@ApiIgnore @RequestAttribute(value = Constants.SES\n                                   @RequestParam(\"id\") int id) {\n         logger.info(\"login user {}, query datasource: {}\",\n                 loginUser.getUserName(), id);\n-        Map<String, Object> result = dataSourceService.queryDataSource(id);\n-        return returnDataList(result);\n+        return dataSourceService.queryDataSource(id);\n     }\n \n     /**\n@@ -229,10 +231,9 @@ public Result queryDataSource(@ApiIgnore @RequestAttribute(value = Constants.SES\n     @GetMapping(value = \"/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_DATASOURCE_ERROR)\n-    public Result queryDataSourceList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<List<DataSource>> queryDataSourceList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                       @RequestParam(\"type\") DbType type) {\n-        Map<String, Object> result = dataSourceService.queryDataSourceList(loginUser, type.ordinal());\n-        return returnDataList(result);\n+        return dataSourceService.queryDataSourceList(loginUser, type.ordinal());\n     }\n \n     /**\n@@ -253,17 +254,16 @@ public Result queryDataSourceList(@ApiIgnore @RequestAttribute(value = Constants\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_DATASOURCE_ERROR)\n-    public Result queryDataSourceListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                            @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                            @RequestParam(\"pageNo\") Integer pageNo,\n-                                            @RequestParam(\"pageSize\") Integer pageSize) {\n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+    public Result<PageListVO<DataSource>> queryDataSourceListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                    @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+                                                                    @RequestParam(\"pageNo\") Integer pageNo,\n+                                                                    @RequestParam(\"pageSize\") Integer pageSize) {\n+        CheckParamResult result = checkPageParams(pageNo, pageSize);\n+        if (result.getStatus() != Status.SUCCESS) {\n+            return error(result);\n         }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        result = dataSourceService.queryDataSourceListPaging(loginUser, searchVal, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return dataSourceService.queryDataSourceListPaging(loginUser, searchVal, pageNo, pageSize);\n     }\n \n     /**\n@@ -402,12 +402,11 @@ public Result verifyDataSourceName(@ApiIgnore @RequestAttribute(value = Constant\n     @GetMapping(value = \"/unauth-datasource\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UNAUTHORIZED_DATASOURCE)\n-    public Result unauthDatasource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                   @RequestParam(\"userId\") Integer userId) {\n+    public Result<List<DataSource>> unauthDatasource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                     @RequestParam(\"userId\") Integer userId) {\n         logger.info(\"unauthorized datasource, login user:{}, unauthorized userId:{}\",\n                 loginUser.getUserName(), userId);\n-        Map<String, Object> result = dataSourceService.unauthDatasource(loginUser, userId);\n-        return returnDataList(result);\n+        return dataSourceService.unauthDatasource(loginUser, userId);\n     }\n \n \n@@ -425,12 +424,11 @@ public Result unauthDatasource(@ApiIgnore @RequestAttribute(value = Constants.SE\n     @GetMapping(value = \"/authed-datasource\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(AUTHORIZED_DATA_SOURCE)\n-    public Result authedDatasource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<List<DataSource>> authedDatasource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                    @RequestParam(\"userId\") Integer userId) {\n         logger.info(\"authorized data source, login user:{}, authorized useId:{}\",\n                 loginUser.getUserName(), userId);\n-        Map<String, Object> result = dataSourceService.authedDatasource(loginUser, userId);\n-        return returnDataList(result);\n+        return dataSourceService.authedDatasource(loginUser, userId);\n     }\n \n     /**"
  },
  {
    "sha": "f8b4ce768bac7b92e768448fdae52cca26ca85e7",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java",
    "status": "modified",
    "additions": 6,
    "deletions": 9,
    "changes": 15,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -106,7 +106,7 @@\n     @PostMapping(value = \"start-process-instance\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(START_PROCESS_INSTANCE_ERROR)\n-    public Result startProcessInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> startProcessInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                        @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                                        @RequestParam(value = \"processDefinitionId\") int processDefinitionId,\n                                        @RequestParam(value = \"scheduleTime\", required = false) String scheduleTime,\n@@ -135,10 +135,9 @@ public Result startProcessInstance(@ApiIgnore @RequestAttribute(value = Constant\n         if (startParams != null) {\n             startParamMap = JSONUtils.toMap(startParams);\n         }\n-        Map<String, Object> result = execService.execProcessInstance(loginUser, projectName, processDefinitionId, scheduleTime, execType, failureStrategy,\n+        return execService.execProcessInstance(loginUser, projectName, processDefinitionId, scheduleTime, execType, failureStrategy,\n                 startNodeList, taskDependType, warningType,\n                 warningGroupId, runMode, processInstancePriority, workerGroup, timeout, startParamMap);\n-        return returnDataList(result);\n     }\n \n \n@@ -159,15 +158,14 @@ public Result startProcessInstance(@ApiIgnore @RequestAttribute(value = Constant\n     @PostMapping(value = \"/execute\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(EXECUTE_PROCESS_INSTANCE_ERROR)\n-    public Result execute(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> execute(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                           @RequestParam(\"processInstanceId\") Integer processInstanceId,\n                           @RequestParam(\"executeType\") ExecuteType executeType\n     ) {\n         logger.info(\"execute command, login user: {}, project:{}, process instance id:{}, execute type:{}\",\n                 loginUser.getUserName(), projectName, processInstanceId, executeType);\n-        Map<String, Object> result = execService.execute(loginUser, projectName, processInstanceId, executeType);\n-        return returnDataList(result);\n+        return execService.execute(loginUser, projectName, processInstanceId, executeType);\n     }\n \n     /**\n@@ -184,10 +182,9 @@ public Result execute(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USE\n     @PostMapping(value = \"/start-check\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(CHECK_PROCESS_DEFINITION_ERROR)\n-    public Result startCheckProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> startCheckProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                               @RequestParam(value = \"processDefinitionId\") int processDefinitionId) {\n         logger.info(\"login user {}, check process definition {}\", loginUser.getUserName(), processDefinitionId);\n-        Map<String, Object> result = execService.startCheckByProcessDefinedId(processDefinitionId);\n-        return returnDataList(result);\n+        return execService.startCheckByProcessDefinedId(processDefinitionId);\n     }\n }"
  },
  {
    "sha": "6554cecc318a087ffce26c553084e2a513324652",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoggerController.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoggerController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoggerController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoggerController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -102,7 +102,7 @@\n     @GetMapping(value = \"/download-log\")\n     @ResponseBody\n     @ApiException(DOWNLOAD_TASK_INSTANCE_LOG_FILE_ERROR)\n-    public ResponseEntity downloadTaskLog(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public ResponseEntity<byte[]> downloadTaskLog(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                           @RequestParam(value = \"taskInstanceId\") int taskInstanceId) {\n         byte[] logBytes = loggerService.getLogBytes(taskInstanceId);\n         return ResponseEntity"
  },
  {
    "sha": "cb841d539f11e75e631e8a9eda94dd4ab3c86c62",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/MonitorController.java",
    "status": "modified",
    "additions": 14,
    "deletions": 12,
    "changes": 26,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/MonitorController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/MonitorController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/MonitorController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -26,8 +26,14 @@\n import org.apache.dolphinscheduler.api.service.MonitorService;\n import org.apache.dolphinscheduler.api.utils.Result;\n import org.apache.dolphinscheduler.common.Constants;\n+import org.apache.dolphinscheduler.common.model.Server;\n+import org.apache.dolphinscheduler.common.model.WorkerServerModel;\n+import org.apache.dolphinscheduler.dao.entity.MonitorRecord;\n import org.apache.dolphinscheduler.dao.entity.User;\n+import org.apache.dolphinscheduler.dao.entity.ZookeeperRecord;\n \n+import java.util.Collection;\n+import java.util.List;\n import java.util.Map;\n \n import org.slf4j.Logger;\n@@ -67,11 +73,10 @@\n     @GetMapping(value = \"/master/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(LIST_MASTERS_ERROR)\n-    public Result listMaster(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<Server>> listMaster(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user: {}, query all master\", loginUser.getUserName());\n         logger.info(\"list master, user:{}\", loginUser.getUserName());\n-        Map<String, Object> result = monitorService.queryMaster(loginUser);\n-        return returnDataList(result);\n+        return monitorService.queryMaster(loginUser);\n     }\n \n     /**\n@@ -84,10 +89,9 @@ public Result listMaster(@ApiIgnore @RequestAttribute(value = Constants.SESSION_\n     @GetMapping(value = \"/worker/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(LIST_WORKERS_ERROR)\n-    public Result listWorker(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<Collection<WorkerServerModel>> listWorker(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user: {}, query all workers\", loginUser.getUserName());\n-        Map<String, Object> result = monitorService.queryWorker(loginUser);\n-        return returnDataList(result);\n+        return monitorService.queryWorker(loginUser);\n     }\n \n     /**\n@@ -100,10 +104,9 @@ public Result listWorker(@ApiIgnore @RequestAttribute(value = Constants.SESSION_\n     @GetMapping(value = \"/database\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_DATABASE_STATE_ERROR)\n-    public Result queryDatabaseState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<MonitorRecord>> queryDatabaseState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user: {}, query database state\", loginUser.getUserName());\n-        Map<String, Object> result = monitorService.queryDatabaseState(loginUser);\n-        return returnDataList(result);\n+        return monitorService.queryDatabaseState(loginUser);\n     }\n \n     /**\n@@ -116,10 +119,9 @@ public Result queryDatabaseState(@ApiIgnore @RequestAttribute(value = Constants.\n     @GetMapping(value = \"/zookeeper/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_ZOOKEEPER_STATE_ERROR)\n-    public Result queryZookeeperState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<ZookeeperRecord>> queryZookeeperState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user: {}, query zookeeper state\", loginUser.getUserName());\n-        Map<String, Object> result = monitorService.queryZookeeperState(loginUser);\n-        return returnDataList(result);\n+        return monitorService.queryZookeeperState(loginUser);\n     }\n \n }"
  },
  {
    "sha": "88769779980dca6d8c72a2d89b00583e527d536b",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java",
    "status": "modified",
    "additions": 158,
    "deletions": 168,
    "changes": 326,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -34,21 +34,25 @@\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROCESS_DEFINITION_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n+import org.apache.dolphinscheduler.api.dto.treeview.TreeViewDto;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.ProcessDefinitionService;\n import org.apache.dolphinscheduler.api.service.ProcessDefinitionVersionService;\n import org.apache.dolphinscheduler.api.utils.RegexUtils;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.ReleaseState;\n+import org.apache.dolphinscheduler.common.model.TaskNode;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n import org.apache.dolphinscheduler.common.utils.StringUtils;\n import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;\n+import org.apache.dolphinscheduler.dao.entity.ProcessDefinitionVersion;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -107,29 +111,28 @@\n      */\n     @ApiOperation(value = \"save\", notes = \"CREATE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"name\", value = \"PROCESS_DEFINITION_NAME\", required = true, type = \"String\"),\n-        @ApiImplicitParam(name = \"processDefinitionJson\", value = \"PROCESS_DEFINITION_JSON\", required = true, type = \"String\"),\n-        @ApiImplicitParam(name = \"locations\", value = \"PROCESS_DEFINITION_LOCATIONS\", required = true, type = \"String\"),\n-        @ApiImplicitParam(name = \"connects\", value = \"PROCESS_DEFINITION_CONNECTS\", required = true, type = \"String\"),\n-        @ApiImplicitParam(name = \"description\", value = \"PROCESS_DEFINITION_DESC\", required = false, type = \"String\"),\n+            @ApiImplicitParam(name = \"name\", value = \"PROCESS_DEFINITION_NAME\", required = true, type = \"String\"),\n+            @ApiImplicitParam(name = \"processDefinitionJson\", value = \"PROCESS_DEFINITION_JSON\", required = true, type = \"String\"),\n+            @ApiImplicitParam(name = \"locations\", value = \"PROCESS_DEFINITION_LOCATIONS\", required = true, type = \"String\"),\n+            @ApiImplicitParam(name = \"connects\", value = \"PROCESS_DEFINITION_CONNECTS\", required = true, type = \"String\"),\n+            @ApiImplicitParam(name = \"description\", value = \"PROCESS_DEFINITION_DESC\", required = false, type = \"String\"),\n     })\n     @PostMapping(value = \"/save\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(CREATE_PROCESS_DEFINITION)\n-    public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                          @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                          @RequestParam(value = \"name\", required = true) String name,\n-                                          @RequestParam(value = \"processDefinitionJson\", required = true) String json,\n-                                          @RequestParam(value = \"locations\", required = true) String locations,\n-                                          @RequestParam(value = \"connects\", required = true) String connects,\n-                                          @RequestParam(value = \"description\", required = false) String description) throws JsonProcessingException {\n+    public Result<Integer> createProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                   @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                   @RequestParam(value = \"name\", required = true) String name,\n+                                                   @RequestParam(value = \"processDefinitionJson\", required = true) String json,\n+                                                   @RequestParam(value = \"locations\", required = true) String locations,\n+                                                   @RequestParam(value = \"connects\", required = true) String connects,\n+                                                   @RequestParam(value = \"description\", required = false) String description) throws JsonProcessingException {\n \n         logger.info(\"login user {}, create  process definition, project name: {}, process definition name: {}, \"\n-                + \"process_definition_json: {}, desc: {} locations:{}, connects:{}\",\n-            loginUser.getUserName(), projectName, name, json, description, locations, connects);\n-        Map<String, Object> result = processDefinitionService.createProcessDefinition(loginUser, projectName, name, json,\n-            description, locations, connects);\n-        return returnDataList(result);\n+                        + \"process_definition_json: {}, desc: {} locations:{}, connects:{}\",\n+                loginUser.getUserName(), projectName, name, json, description, locations, connects);\n+        return processDefinitionService.createProcessDefinition(loginUser, projectName, name, json,\n+                description, locations, connects);\n     }\n \n     /**\n@@ -149,18 +152,17 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     @PostMapping(value = \"/copy\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(BATCH_COPY_PROCESS_DEFINITION_ERROR)\n-    public Result copyProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> copyProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                                         @RequestParam(value = \"processDefinitionIds\", required = true) String processDefinitionIds,\n                                         @RequestParam(value = \"targetProjectId\", required = true) int targetProjectId) {\n         logger.info(\"batch copy process definition, login user:{}, project name:{}, process definition ids:{}，target project id:{}\",\n-            RegexUtils.escapeNRT(loginUser.getUserName()),\n-            RegexUtils.escapeNRT(projectName),\n-            RegexUtils.escapeNRT(processDefinitionIds),\n-            RegexUtils.escapeNRT(String.valueOf(targetProjectId)));\n+                RegexUtils.escapeNRT(loginUser.getUserName()),\n+                RegexUtils.escapeNRT(projectName),\n+                RegexUtils.escapeNRT(processDefinitionIds),\n+                RegexUtils.escapeNRT(String.valueOf(targetProjectId)));\n \n-        return returnDataList(\n-            processDefinitionService.batchCopyProcessDefinition(loginUser, projectName, processDefinitionIds, targetProjectId));\n+        return processDefinitionService.batchCopyProcessDefinition(loginUser, projectName, processDefinitionIds, targetProjectId);\n     }\n \n     /**\n@@ -174,24 +176,23 @@ public Result copyProcessDefinition(@ApiIgnore @RequestAttribute(value = Constan\n      */\n     @ApiOperation(value = \"moveProcessDefinition\", notes = \"MOVE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", required = true, dataType = \"String\", example = \"3,4\"),\n-        @ApiImplicitParam(name = \"targetProjectId\", value = \"TARGET_PROJECT_ID\", required = true, dataType = \"Int\", example = \"10\")\n+            @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", required = true, dataType = \"String\", example = \"3,4\"),\n+            @ApiImplicitParam(name = \"targetProjectId\", value = \"TARGET_PROJECT_ID\", required = true, dataType = \"Int\", example = \"10\")\n     })\n     @PostMapping(value = \"/move\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(BATCH_MOVE_PROCESS_DEFINITION_ERROR)\n-    public Result moveProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                        @RequestParam(value = \"processDefinitionIds\", required = true) String processDefinitionIds,\n-                                        @RequestParam(value = \"targetProjectId\", required = true) int targetProjectId) {\n+    public Result<Void> moveProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                              @RequestParam(value = \"processDefinitionIds\", required = true) String processDefinitionIds,\n+                                              @RequestParam(value = \"targetProjectId\", required = true) int targetProjectId) {\n         logger.info(\"batch move process definition, login user:{}, project name:{}, process definition ids:{}，target project id:{}\",\n-            RegexUtils.escapeNRT(loginUser.getUserName()),\n-            RegexUtils.escapeNRT(projectName),\n-            RegexUtils.escapeNRT(processDefinitionIds),\n-            RegexUtils.escapeNRT(String.valueOf(targetProjectId)));\n+                RegexUtils.escapeNRT(loginUser.getUserName()),\n+                RegexUtils.escapeNRT(projectName),\n+                RegexUtils.escapeNRT(processDefinitionIds),\n+                RegexUtils.escapeNRT(String.valueOf(targetProjectId)));\n \n-        return returnDataList(\n-            processDefinitionService.batchMoveProcessDefinition(loginUser, projectName, processDefinitionIds, targetProjectId));\n+        return processDefinitionService.batchMoveProcessDefinition(loginUser, projectName, processDefinitionIds, targetProjectId);\n     }\n \n     /**\n@@ -204,18 +205,18 @@ public Result moveProcessDefinition(@ApiIgnore @RequestAttribute(value = Constan\n      */\n     @ApiOperation(value = \"verify-name\", notes = \"VERIFY_PROCESS_DEFINITION_NAME_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"name\", value = \"PROCESS_DEFINITION_NAME\", required = true, type = \"String\")\n+            @ApiImplicitParam(name = \"name\", value = \"PROCESS_DEFINITION_NAME\", required = true, type = \"String\")\n     })\n     @GetMapping(value = \"/verify-name\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR)\n-    public Result verifyProcessDefinitionName(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                              @RequestParam(value = \"name\", required = true) String name) {\n+    public Result<Void> verifyProcessDefinitionName(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                    @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                    @RequestParam(value = \"name\", required = true) String name) {\n         logger.info(\"verify process definition name unique, user:{}, project name:{}, process definition name:{}\",\n-            loginUser.getUserName(), projectName, name);\n-        Map<String, Object> result = processDefinitionService.verifyProcessDefinitionName(loginUser, projectName, name);\n-        return returnDataList(result);\n+                loginUser.getUserName(), projectName, name);\n+        CheckParamResult checkParamResult = processDefinitionService.verifyProcessDefinitionName(loginUser, projectName, name);\n+        return new Result<>(checkParamResult.getStatus().getCode(), checkParamResult.getMsg());\n     }\n \n     /**\n@@ -234,42 +235,42 @@ public Result verifyProcessDefinitionName(@ApiIgnore @RequestAttribute(value = C\n \n     @ApiOperation(value = \"updateProcessDefinition\", notes = \"UPDATE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"name\", value = \"PROCESS_DEFINITION_NAME\", required = true, type = \"String\"),\n-        @ApiImplicitParam(name = \"id\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\"),\n-        @ApiImplicitParam(name = \"processDefinitionJson\", value = \"PROCESS_DEFINITION_JSON\", required = true, type = \"String\"),\n-        @ApiImplicitParam(name = \"locations\", value = \"PROCESS_DEFINITION_LOCATIONS\", required = true, type = \"String\"),\n-        @ApiImplicitParam(name = \"connects\", value = \"PROCESS_DEFINITION_CONNECTS\", required = true, type = \"String\"),\n-        @ApiImplicitParam(name = \"description\", value = \"PROCESS_DEFINITION_DESC\", required = false, type = \"String\"),\n-        @ApiImplicitParam(name = \"releaseState\", value = \"RELEASE_PROCESS_DEFINITION_NOTES\", required = false, dataType = \"ReleaseState\")\n+            @ApiImplicitParam(name = \"name\", value = \"PROCESS_DEFINITION_NAME\", required = true, type = \"String\"),\n+            @ApiImplicitParam(name = \"id\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\"),\n+            @ApiImplicitParam(name = \"processDefinitionJson\", value = \"PROCESS_DEFINITION_JSON\", required = true, type = \"String\"),\n+            @ApiImplicitParam(name = \"locations\", value = \"PROCESS_DEFINITION_LOCATIONS\", required = true, type = \"String\"),\n+            @ApiImplicitParam(name = \"connects\", value = \"PROCESS_DEFINITION_CONNECTS\", required = true, type = \"String\"),\n+            @ApiImplicitParam(name = \"description\", value = \"PROCESS_DEFINITION_DESC\", required = false, type = \"String\"),\n+            @ApiImplicitParam(name = \"releaseState\", value = \"RELEASE_PROCESS_DEFINITION_NOTES\", required = false, dataType = \"ReleaseState\")\n     })\n     @PostMapping(value = \"/update\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_PROCESS_DEFINITION_ERROR)\n-    public Result updateProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                          @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                          @RequestParam(value = \"name\", required = true) String name,\n-                                          @RequestParam(value = \"id\", required = true) int id,\n-                                          @RequestParam(value = \"processDefinitionJson\", required = true) String processDefinitionJson,\n-                                          @RequestParam(value = \"locations\", required = false) String locations,\n-                                          @RequestParam(value = \"connects\", required = false) String connects,\n-                                          @RequestParam(value = \"description\", required = false) String description,\n-                                          @RequestParam(value = \"releaseState\", required = false, defaultValue = \"OFFLINE\") ReleaseState releaseState) {\n+    public Result<ProcessDefinition> updateProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                             @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                             @RequestParam(value = \"name\", required = true) String name,\n+                                                             @RequestParam(value = \"id\", required = true) int id,\n+                                                             @RequestParam(value = \"processDefinitionJson\", required = true) String processDefinitionJson,\n+                                                             @RequestParam(value = \"locations\", required = false) String locations,\n+                                                             @RequestParam(value = \"connects\", required = false) String connects,\n+                                                             @RequestParam(value = \"description\", required = false) String description,\n+                                                             @RequestParam(value = \"releaseState\", required = false, defaultValue = \"OFFLINE\") ReleaseState releaseState) {\n \n         logger.info(\"login user {}, update process define, project name: {}, process define name: {}, \"\n-                + \"process_definition_json: {}, desc: {}, locations:{}, connects:{}\",\n-            loginUser.getUserName(), projectName, name, processDefinitionJson, description, locations, connects);\n-        Map<String, Object> result = processDefinitionService.updateProcessDefinition(loginUser, projectName, id, name,\n-            processDefinitionJson, description, locations, connects);\n+                        + \"process_definition_json: {}, desc: {}, locations:{}, connects:{}\",\n+                loginUser.getUserName(), projectName, name, processDefinitionJson, description, locations, connects);\n+        Result<ProcessDefinition> result = processDefinitionService.updateProcessDefinition(loginUser, projectName, id, name,\n+                processDefinitionJson, description, locations, connects);\n         //  If the update fails, the result will be returned directly\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataList(result);\n+        if (Status.SUCCESS.getCode() != result.getCode()) {\n+            return result;\n         }\n \n         //  Judge whether to go online after editing,0 means offline, 1 means online\n         if (releaseState == ReleaseState.ONLINE) {\n             result = processDefinitionService.releaseProcessDefinition(loginUser, projectName, id, releaseState);\n         }\n-        return returnDataList(result);\n+        return result;\n     }\n \n     /**\n@@ -284,22 +285,22 @@ public Result updateProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n      */\n     @ApiOperation(value = \"queryProcessDefinitionVersions\", notes = \"QUERY_PROCESS_DEFINITION_VERSIONS_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"pageNo\", value = \"PAGE_NO\", required = true, dataType = \"Int\", example = \"100\"),\n-        @ApiImplicitParam(name = \"pageSize\", value = \"PAGE_SIZE\", required = true, dataType = \"Int\", example = \"100\"),\n-        @ApiImplicitParam(name = \"processDefinitionId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"pageNo\", value = \"PAGE_NO\", required = true, dataType = \"Int\", example = \"100\"),\n+            @ApiImplicitParam(name = \"pageSize\", value = \"PAGE_SIZE\", required = true, dataType = \"Int\", example = \"100\"),\n+            @ApiImplicitParam(name = \"processDefinitionId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n     })\n     @GetMapping(value = \"/versions\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PROCESS_DEFINITION_VERSIONS_ERROR)\n-    public Result queryProcessDefinitionVersions(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                                 @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                                 @RequestParam(value = \"pageNo\") int pageNo,\n-                                                 @RequestParam(value = \"pageSize\") int pageSize,\n-                                                 @RequestParam(value = \"processDefinitionId\") int processDefinitionId) {\n-\n-        Map<String, Object> result = processDefinitionVersionService.queryProcessDefinitionVersions(loginUser\n-            , projectName, pageNo, pageSize, processDefinitionId);\n-        return returnDataList(result);\n+    public Result<PageListVO<ProcessDefinitionVersion>> queryProcessDefinitionVersions(\n+            @ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+            @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+            @RequestParam(value = \"pageNo\") int pageNo,\n+            @RequestParam(value = \"pageSize\") int pageSize,\n+            @RequestParam(value = \"processDefinitionId\") int processDefinitionId) {\n+\n+        return processDefinitionVersionService.queryProcessDefinitionVersions(loginUser\n+                , projectName, pageNo, pageSize, processDefinitionId);\n     }\n \n     /**\n@@ -313,20 +314,19 @@ public Result queryProcessDefinitionVersions(@ApiIgnore @RequestAttribute(value\n      */\n     @ApiOperation(value = \"switchProcessDefinitionVersion\", notes = \"SWITCH_PROCESS_DEFINITION_VERSION_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"processDefinitionId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\"),\n-        @ApiImplicitParam(name = \"version\", value = \"VERSION\", required = true, dataType = \"Long\", example = \"100\")\n+            @ApiImplicitParam(name = \"processDefinitionId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\"),\n+            @ApiImplicitParam(name = \"version\", value = \"VERSION\", required = true, dataType = \"Long\", example = \"100\")\n     })\n     @GetMapping(value = \"/version/switch\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(SWITCH_PROCESS_DEFINITION_VERSION_ERROR)\n-    public Result switchProcessDefinitionVersion(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                                 @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                                 @RequestParam(value = \"processDefinitionId\") int processDefinitionId,\n-                                                 @RequestParam(value = \"version\") long version) {\n+    public Result<Void> switchProcessDefinitionVersion(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                       @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                       @RequestParam(value = \"processDefinitionId\") int processDefinitionId,\n+                                                       @RequestParam(value = \"version\") long version) {\n \n-        Map<String, Object> result = processDefinitionService.switchProcessDefinitionVersion(loginUser, projectName\n-            , processDefinitionId, version);\n-        return returnDataList(result);\n+        return processDefinitionService.switchProcessDefinitionVersion(loginUser, projectName\n+                , processDefinitionId, version);\n     }\n \n     /**\n@@ -346,13 +346,12 @@ public Result switchProcessDefinitionVersion(@ApiIgnore @RequestAttribute(value\n     @GetMapping(value = \"/version/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_PROCESS_DEFINITION_VERSION_ERROR)\n-    public Result deleteProcessDefinitionVersion(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> deleteProcessDefinitionVersion(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                  @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                                                  @RequestParam(value = \"processDefinitionId\") int processDefinitionId,\n                                                  @RequestParam(value = \"version\") long version) {\n \n-        Map<String, Object> result = processDefinitionVersionService.deleteByProcessDefinitionIdAndVersion(loginUser, projectName, processDefinitionId, version);\n-        return returnDataList(result);\n+        return processDefinitionVersionService.deleteByProcessDefinitionIdAndVersion(loginUser, projectName, processDefinitionId, version);\n     }\n \n     /**\n@@ -366,22 +365,21 @@ public Result deleteProcessDefinitionVersion(@ApiIgnore @RequestAttribute(value\n      */\n     @ApiOperation(value = \"releaseProcessDefinition\", notes = \"RELEASE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"name\", value = \"PROCESS_DEFINITION_NAME\", required = true, type = \"String\"),\n-        @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\"),\n-        @ApiImplicitParam(name = \"releaseState\", value = \"PROCESS_DEFINITION_CONNECTS\", required = true, dataType = \"ReleaseState\"),\n+            @ApiImplicitParam(name = \"name\", value = \"PROCESS_DEFINITION_NAME\", required = true, type = \"String\"),\n+            @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\"),\n+            @ApiImplicitParam(name = \"releaseState\", value = \"PROCESS_DEFINITION_CONNECTS\", required = true, dataType = \"ReleaseState\"),\n     })\n     @PostMapping(value = \"/release\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(RELEASE_PROCESS_DEFINITION_ERROR)\n-    public Result releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                           @RequestParam(value = \"processId\", required = true) int processId,\n-                                           @RequestParam(value = \"releaseState\", required = true) ReleaseState releaseState) {\n+    public Result<ProcessDefinition> releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                              @RequestParam(value = \"processId\", required = true) int processId,\n+                                                              @RequestParam(value = \"releaseState\", required = true) ReleaseState releaseState) {\n \n         logger.info(\"login user {}, release process definition, project name: {}, release state: {}\",\n-            loginUser.getUserName(), projectName, releaseState);\n-        Map<String, Object> result = processDefinitionService.releaseProcessDefinition(loginUser, projectName, processId, releaseState);\n-        return returnDataList(result);\n+                loginUser.getUserName(), projectName, releaseState);\n+        return processDefinitionService.releaseProcessDefinition(loginUser, projectName, processId, releaseState);\n     }\n \n     /**\n@@ -394,19 +392,18 @@ public Result releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Cons\n      */\n     @ApiOperation(value = \"queryProcessDefinitionById\", notes = \"QUERY_PROCESS_DEFINITION_BY_ID_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n     })\n     @GetMapping(value = \"/select-by-id\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR)\n-    public Result queryProcessDefinitionById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                             @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                             @RequestParam(\"processId\") Integer processId\n+    public Result<ProcessDefinition> queryProcessDefinitionById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                                @RequestParam(\"processId\") Integer processId\n     ) {\n         logger.info(\"query detail of process definition, login user:{}, project name:{}, process definition id:{}\",\n-            loginUser.getUserName(), projectName, processId);\n-        Map<String, Object> result = processDefinitionService.queryProcessDefinitionById(loginUser, projectName, processId);\n-        return returnDataList(result);\n+                loginUser.getUserName(), projectName, processId);\n+        return processDefinitionService.queryProcessDefinitionById(loginUser, projectName, processId);\n     }\n \n     /**\n@@ -428,8 +425,7 @@ public Result queryProcessDefinitionById(@ApiIgnore @RequestAttribute(value = Co\n                                                                   @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                                                                   @RequestParam(\"processDefinitionName\") String processDefinitionName\n     ) {\n-        Map<String, Object> result = processDefinitionService.queryProcessDefinitionByName(loginUser, projectName, processDefinitionName);\n-        return returnDataList(result);\n+        return processDefinitionService.queryProcessDefinitionByName(loginUser, projectName, processDefinitionName);\n     }\n \n     /**\n@@ -443,13 +439,12 @@ public Result queryProcessDefinitionById(@ApiIgnore @RequestAttribute(value = Co\n     @GetMapping(value = \"/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PROCESS_DEFINITION_LIST)\n-    public Result queryProcessDefinitionList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                             @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName\n+    public Result<List<ProcessDefinition>> queryProcessDefinitionList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                      @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName\n     ) {\n         logger.info(\"query process definition list, login user:{}, project name:{}\",\n-            loginUser.getUserName(), projectName);\n-        Map<String, Object> result = processDefinitionService.queryProcessDefinitionList(loginUser, projectName);\n-        return returnDataList(result);\n+                loginUser.getUserName(), projectName);\n+        return processDefinitionService.queryProcessDefinitionList(loginUser, projectName);\n     }\n \n     /**\n@@ -465,28 +460,28 @@ public Result queryProcessDefinitionList(@ApiIgnore @RequestAttribute(value = Co\n      */\n     @ApiOperation(value = \"queryProcessDefinitionListPaging\", notes = \"QUERY_PROCESS_DEFINITION_LIST_PAGING_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"pageNo\", value = \"PAGE_NO\", required = true, dataType = \"Int\", example = \"100\"),\n-        @ApiImplicitParam(name = \"searchVal\", value = \"SEARCH_VAL\", required = false, type = \"String\"),\n-        @ApiImplicitParam(name = \"userId\", value = \"USER_ID\", required = false, dataType = \"Int\", example = \"100\"),\n-        @ApiImplicitParam(name = \"pageSize\", value = \"PAGE_SIZE\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"pageNo\", value = \"PAGE_NO\", required = true, dataType = \"Int\", example = \"100\"),\n+            @ApiImplicitParam(name = \"searchVal\", value = \"SEARCH_VAL\", required = false, type = \"String\"),\n+            @ApiImplicitParam(name = \"userId\", value = \"USER_ID\", required = false, dataType = \"Int\", example = \"100\"),\n+            @ApiImplicitParam(name = \"pageSize\", value = \"PAGE_SIZE\", required = true, dataType = \"Int\", example = \"100\")\n     })\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PROCESS_DEFINITION_LIST_PAGING_ERROR)\n-    public Result queryProcessDefinitionListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                                   @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                                   @RequestParam(\"pageNo\") Integer pageNo,\n-                                                   @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                                   @RequestParam(value = \"userId\", required = false, defaultValue = \"0\") Integer userId,\n-                                                   @RequestParam(\"pageSize\") Integer pageSize) {\n+    public Result<PageListVO<ProcessDefinition>> queryProcessDefinitionListPaging(\n+            @ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+            @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+            @RequestParam(\"pageNo\") Integer pageNo,\n+            @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+            @RequestParam(value = \"userId\", required = false, defaultValue = \"0\") Integer userId,\n+            @RequestParam(\"pageSize\") Integer pageSize) {\n         logger.info(\"query process definition list paging, login user:{}, project name:{}\", loginUser.getUserName(), projectName);\n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+        CheckParamResult result = checkPageParams(pageNo, pageSize);\n+        if (result.getStatus() != Status.SUCCESS) {\n+            return error(result);\n         }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        result = processDefinitionService.queryProcessDefinitionListPaging(loginUser, projectName, searchVal, pageNo, pageSize, userId);\n-        return returnDataListPaging(result);\n+        return processDefinitionService.queryProcessDefinitionListPaging(loginUser, projectName, searchVal, pageNo, pageSize, userId);\n     }\n \n     /**\n@@ -506,12 +501,11 @@ public Result queryProcessDefinitionListPaging(@ApiIgnore @RequestAttribute(valu\n     @GetMapping(value = \"/view-tree\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(ENCAPSULATION_TREEVIEW_STRUCTURE_ERROR)\n-    public Result viewTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                           @RequestParam(\"processId\") Integer id,\n-                           @RequestParam(\"limit\") Integer limit) throws Exception {\n-        Map<String, Object> result = processDefinitionService.viewTree(id, limit);\n-        return returnDataList(result);\n+    public Result<TreeViewDto> viewTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                        @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                        @RequestParam(\"processId\") Integer id,\n+                                        @RequestParam(\"limit\") Integer limit) throws Exception {\n+        return processDefinitionService.viewTree(id, limit);\n     }\n \n     /**\n@@ -524,19 +518,18 @@ public Result viewTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_US\n      */\n     @ApiOperation(value = \"getNodeListByDefinitionId\", notes = \"GET_NODE_LIST_BY_DEFINITION_ID_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"processDefinitionId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"processDefinitionId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n     })\n     @GetMapping(value = \"gen-task-list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(GET_TASKS_LIST_BY_PROCESS_DEFINITION_ID_ERROR)\n-    public Result getNodeListByDefinitionId(\n-        @ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-        @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-        @RequestParam(\"processDefinitionId\") Integer processDefinitionId) throws Exception {\n+    public Result<List<TaskNode>> getNodeListByDefinitionId(\n+            @ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+            @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+            @RequestParam(\"processDefinitionId\") Integer processDefinitionId) throws Exception {\n         logger.info(\"query task node name list by definitionId, login user:{}, project name:{}, id : {}\",\n-            loginUser.getUserName(), projectName, processDefinitionId);\n-        Map<String, Object> result = processDefinitionService.getTaskNodeListByDefinitionId(processDefinitionId);\n-        return returnDataList(result);\n+                loginUser.getUserName(), projectName, processDefinitionId);\n+        return processDefinitionService.getTaskNodeListByDefinitionId(processDefinitionId);\n     }\n \n     /**\n@@ -554,15 +547,14 @@ public Result getNodeListByDefinitionId(\n     @GetMapping(value = \"get-task-list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(GET_TASKS_LIST_BY_PROCESS_DEFINITION_ID_ERROR)\n-    public Result getNodeListByDefinitionIdList(\n+    public Result<Map<Integer, List<TaskNode>>> getNodeListByDefinitionIdList(\n         @ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n         @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n         @RequestParam(\"processDefinitionIdList\") String processDefinitionIdList) {\n \n         logger.info(\"query task node name list by definitionId list, login user:{}, project name:{}, id list: {}\",\n             loginUser.getUserName(), projectName, processDefinitionIdList);\n-        Map<String, Object> result = processDefinitionService.getTaskNodeListByDefinitionIdList(processDefinitionIdList);\n-        return returnDataList(result);\n+        return processDefinitionService.getTaskNodeListByDefinitionIdList(processDefinitionIdList);\n     }\n \n     /**\n@@ -575,19 +567,18 @@ public Result getNodeListByDefinitionIdList(\n      */\n     @ApiOperation(value = \"deleteProcessDefinitionById\", notes = \"DELETE_PROCESS_DEFINITION_BY_ID_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"processDefinitionId\", value = \"PROCESS_DEFINITION_ID\", dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"processDefinitionId\", value = \"PROCESS_DEFINITION_ID\", dataType = \"Int\", example = \"100\")\n     })\n     @GetMapping(value = \"/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_PROCESS_DEFINE_BY_ID_ERROR)\n-    public Result deleteProcessDefinitionById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                              @RequestParam(\"processDefinitionId\") Integer processDefinitionId\n+    public Result<Void> deleteProcessDefinitionById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                    @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                    @RequestParam(\"processDefinitionId\") Integer processDefinitionId\n     ) {\n         logger.info(\"delete process definition by id, login user:{}, project name:{}, process definition id:{}\",\n-            loginUser.getUserName(), projectName, processDefinitionId);\n-        Map<String, Object> result = processDefinitionService.deleteProcessDefinitionById(loginUser, projectName, processDefinitionId);\n-        return returnDataList(result);\n+                loginUser.getUserName(), projectName, processDefinitionId);\n+        return processDefinitionService.deleteProcessDefinitionById(loginUser, projectName, processDefinitionId);\n     }\n \n     /**\n@@ -600,30 +591,29 @@ public Result deleteProcessDefinitionById(@ApiIgnore @RequestAttribute(value = C\n      */\n     @ApiOperation(value = \"batchDeleteProcessDefinitionByIds\", notes = \"BATCH_DELETE_PROCESS_DEFINITION_BY_IDS_NOTES\")\n     @ApiImplicitParams({\n-        @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", type = \"String\")\n+            @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", type = \"String\")\n     })\n     @GetMapping(value = \"/batch-delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(BATCH_DELETE_PROCESS_DEFINE_BY_IDS_ERROR)\n-    public Result batchDeleteProcessDefinitionByIds(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                                    @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                                    @RequestParam(\"processDefinitionIds\") String processDefinitionIds\n+    public Result<Void> batchDeleteProcessDefinitionByIds(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                          @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                          @RequestParam(\"processDefinitionIds\") String processDefinitionIds\n     ) {\n         logger.info(\"delete process definition by ids, login user:{}, project name:{}, process definition ids:{}\",\n-            loginUser.getUserName(), projectName, processDefinitionIds);\n+                loginUser.getUserName(), projectName, processDefinitionIds);\n \n-        Map<String, Object> result = new HashMap<>();\n         List<String> deleteFailedIdList = new ArrayList<>();\n         if (StringUtils.isNotEmpty(processDefinitionIds)) {\n             String[] processDefinitionIdArray = processDefinitionIds.split(\",\");\n \n             for (String strProcessDefinitionId : processDefinitionIdArray) {\n                 int processDefinitionId = Integer.parseInt(strProcessDefinitionId);\n                 try {\n-                    Map<String, Object> deleteResult = processDefinitionService.deleteProcessDefinitionById(loginUser, projectName, processDefinitionId);\n-                    if (!Status.SUCCESS.equals(deleteResult.get(Constants.STATUS))) {\n+                    Result<Void> deleteResult = processDefinitionService.deleteProcessDefinitionById(loginUser, projectName, processDefinitionId);\n+                    if (Status.SUCCESS.getCode() != deleteResult.getCode()) {\n                         deleteFailedIdList.add(strProcessDefinitionId);\n-                        logger.error((String) deleteResult.get(Constants.MSG));\n+                        logger.error(deleteResult.getMsg());\n                     }\n                 } catch (Exception e) {\n                     deleteFailedIdList.add(strProcessDefinitionId);\n@@ -632,12 +622,13 @@ public Result batchDeleteProcessDefinitionByIds(@ApiIgnore @RequestAttribute(val\n         }\n \n         if (!deleteFailedIdList.isEmpty()) {\n+            Result<Void> result = new Result<>();\n             putMsg(result, Status.BATCH_DELETE_PROCESS_DEFINE_BY_IDS_ERROR, String.join(\",\", deleteFailedIdList));\n+            return result;\n         } else {\n-            putMsg(result, Status.SUCCESS);\n+            return Result.success(null);\n         }\n \n-        return returnDataList(result);\n     }\n \n     /**\n@@ -679,12 +670,11 @@ public void batchExportProcessDefinitionByIds(@ApiIgnore @RequestAttribute(value\n     @GetMapping(value = \"/queryProcessDefinitionAllByProjectId\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PROCESS_DEFINITION_LIST)\n-    public Result queryProcessDefinitionAllByProjectId(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<List<ProcessDefinition>> queryProcessDefinitionAllByProjectId(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                        @RequestParam(\"projectId\") Integer projectId) {\n         logger.info(\"query process definition list, login user:{}, project id:{}\",\n             loginUser.getUserName(), projectId);\n-        Map<String, Object> result = processDefinitionService.queryProcessDefinitionAllByProjectId(projectId);\n-        return returnDataList(result);\n+        return processDefinitionService.queryProcessDefinitionAllByProjectId(projectId);\n     }\n \n }"
  },
  {
    "sha": "ad70d913ba0453707baf4d53ecd6e14cba171dc8",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java",
    "status": "modified",
    "additions": 73,
    "deletions": 84,
    "changes": 157,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -28,10 +28,12 @@\n import static org.apache.dolphinscheduler.api.enums.Status.QUERY_TASK_LIST_BY_PROCESS_INSTANCE_ID_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROCESS_INSTANCE_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.gantt.GanttDto;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.ProcessInstanceService;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.ExecutionStatus;\n import org.apache.dolphinscheduler.common.enums.Flag;\n@@ -43,7 +45,6 @@\n import java.io.IOException;\n import java.text.ParseException;\n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -111,25 +112,25 @@\n     @GetMapping(value = \"list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PROCESS_INSTANCE_LIST_PAGING_ERROR)\n-    public Result queryProcessInstanceList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                           @RequestParam(value = \"processDefinitionId\", required = false, defaultValue = \"0\") Integer processDefinitionId,\n-                                           @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                           @RequestParam(value = \"executorName\", required = false) String executorName,\n-                                           @RequestParam(value = \"stateType\", required = false) ExecutionStatus stateType,\n-                                           @RequestParam(value = \"host\", required = false) String host,\n-                                           @RequestParam(value = \"startDate\", required = false) String startTime,\n-                                           @RequestParam(value = \"endDate\", required = false) String endTime,\n-                                           @RequestParam(\"pageNo\") Integer pageNo,\n-                                           @RequestParam(\"pageSize\") Integer pageSize) {\n-        logger.info(\"query all process instance list, login user:{},project name:{}, define id:{},\" +\n-                        \"search value:{},executor name:{},state type:{},host:{},start time:{}, end time:{},page number:{}, page size:{}\",\n+    public Result<PageListVO<ProcessInstance>> queryProcessInstanceList(\n+            @ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+            @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+            @RequestParam(value = \"processDefinitionId\", required = false, defaultValue = \"0\") Integer processDefinitionId,\n+            @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+            @RequestParam(value = \"executorName\", required = false) String executorName,\n+            @RequestParam(value = \"stateType\", required = false) ExecutionStatus stateType,\n+            @RequestParam(value = \"host\", required = false) String host,\n+            @RequestParam(value = \"startDate\", required = false) String startTime,\n+            @RequestParam(value = \"endDate\", required = false) String endTime,\n+            @RequestParam(\"pageNo\") Integer pageNo,\n+            @RequestParam(\"pageSize\") Integer pageSize) {\n+        logger.info(\"query all process instance list, login user:{},project name:{}, define id:{},\"\n+                        + \"search value:{},executor name:{},state type:{},host:{},start time:{}, end time:{},page number:{}, page size:{}\",\n                 loginUser.getUserName(), projectName, processDefinitionId, searchVal, executorName, stateType, host,\n                 startTime, endTime, pageNo, pageSize);\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = processInstanceService.queryProcessInstanceList(\n+        return processInstanceService.queryProcessInstanceList(\n                 loginUser, projectName, processDefinitionId, startTime, endTime, searchVal, executorName, stateType, host, pageNo, pageSize);\n-        return returnDataListPaging(result);\n     }\n \n     /**\n@@ -147,14 +148,13 @@ public Result queryProcessInstanceList(@ApiIgnore @RequestAttribute(value = Cons\n     @GetMapping(value = \"/task-list-by-process-id\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_TASK_LIST_BY_PROCESS_INSTANCE_ID_ERROR)\n-    public Result queryTaskListByProcessId(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                           @RequestParam(\"processInstanceId\") Integer processInstanceId\n+    public Result<Map<String, Object>> queryTaskListByProcessId(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                                @RequestParam(\"processInstanceId\") Integer processInstanceId\n     ) throws IOException {\n         logger.info(\"query task instance list by process instance id, login user:{}, project name:{}, process instance id:{}\",\n                 loginUser.getUserName(), projectName, processInstanceId);\n-        Map<String, Object> result = processInstanceService.queryTaskListByProcessId(loginUser, projectName, processInstanceId);\n-        return returnDataList(result);\n+        return processInstanceService.queryTaskListByProcessId(loginUser, projectName, processInstanceId);\n     }\n \n     /**\n@@ -184,23 +184,22 @@ public Result queryTaskListByProcessId(@ApiIgnore @RequestAttribute(value = Cons\n     @PostMapping(value = \"/update\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_PROCESS_INSTANCE_ERROR)\n-    public Result updateProcessInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                        @RequestParam(value = \"processInstanceJson\", required = false) String processInstanceJson,\n-                                        @RequestParam(value = \"processInstanceId\") Integer processInstanceId,\n-                                        @RequestParam(value = \"scheduleTime\", required = false) String scheduleTime,\n-                                        @RequestParam(value = \"syncDefine\", required = true) Boolean syncDefine,\n-                                        @RequestParam(value = \"locations\", required = false) String locations,\n-                                        @RequestParam(value = \"connects\", required = false) String connects,\n-                                        @RequestParam(value = \"flag\", required = false) Flag flag\n+    public Result<Void> updateProcessInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                              @RequestParam(value = \"processInstanceJson\", required = false) String processInstanceJson,\n+                                              @RequestParam(value = \"processInstanceId\") Integer processInstanceId,\n+                                              @RequestParam(value = \"scheduleTime\", required = false) String scheduleTime,\n+                                              @RequestParam(value = \"syncDefine\", required = true) Boolean syncDefine,\n+                                              @RequestParam(value = \"locations\", required = false) String locations,\n+                                              @RequestParam(value = \"connects\", required = false) String connects,\n+                                              @RequestParam(value = \"flag\", required = false) Flag flag\n     ) throws ParseException {\n-        logger.info(\"updateProcessInstance process instance, login user:{}, project name:{}, process instance json:{},\" +\n-                        \"process instance id:{}, schedule time:{}, sync define:{}, flag:{}, locations:{}, connects:{}\",\n+        logger.info(\"updateProcessInstance process instance, login user:{}, project name:{}, process instance json:{},\"\n+                        + \"process instance id:{}, schedule time:{}, sync define:{}, flag:{}, locations:{}, connects:{}\",\n                 loginUser.getUserName(), projectName, processInstanceJson, processInstanceId, scheduleTime,\n                 syncDefine, flag, locations, connects);\n-        Map<String, Object> result = processInstanceService.updateProcessInstance(loginUser, projectName,\n+        return processInstanceService.updateProcessInstance(loginUser, projectName,\n                 processInstanceId, processInstanceJson, scheduleTime, syncDefine, flag, locations, connects);\n-        return returnDataList(result);\n     }\n \n     /**\n@@ -218,14 +217,13 @@ public Result updateProcessInstance(@ApiIgnore @RequestAttribute(value = Constan\n     @GetMapping(value = \"/select-by-id\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PROCESS_INSTANCE_BY_ID_ERROR)\n-    public Result queryProcessInstanceById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                           @RequestParam(\"processInstanceId\") Integer processInstanceId\n+    public Result<ProcessInstance> queryProcessInstanceById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                            @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                            @RequestParam(\"processInstanceId\") Integer processInstanceId\n     ) {\n         logger.info(\"query process instance detail by id, login user:{},project name:{}, process instance id:{}\",\n                 loginUser.getUserName(), projectName, processInstanceId);\n-        Map<String, Object> result = processInstanceService.queryProcessInstanceById(loginUser, projectName, processInstanceId);\n-        return returnDataList(result);\n+        return processInstanceService.queryProcessInstanceById(loginUser, projectName, processInstanceId);\n     }\n \n     /**\n@@ -247,18 +245,17 @@ public Result queryProcessInstanceById(@ApiIgnore @RequestAttribute(value = Cons\n     @GetMapping(value = \"/top-n\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PROCESS_INSTANCE_BY_ID_ERROR)\n-    public Result<ProcessInstance> queryTopNLongestRunningProcessInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                                         @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                                         @RequestParam(\"size\") Integer size,\n-                                                         @RequestParam(value = \"startTime\",required = true) String startTime,\n-                                                         @RequestParam(value = \"endTime\",required = true) String endTime\n+    public Result<List<ProcessInstance>> queryTopNLongestRunningProcessInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                                @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                                                @RequestParam(\"size\") Integer size,\n+                                                                                @RequestParam(value = \"startTime\", required = true) String startTime,\n+                                                                                @RequestParam(value = \"endTime\", required = true) String endTime\n \n     ) {\n-        projectName=ParameterUtils.handleEscapes(projectName);\n-        logger.info(\"query top {} SUCCESS process instance order by running time whprojectNameich started between {} and {} ,login user:{},project name:{}\", size, startTime, endTime,\n-                loginUser.getUserName(), projectName);\n-        Map<String,Object> result=processInstanceService.queryTopNLongestRunningProcessInstance(loginUser, projectName, size, startTime, endTime);\n-        return returnDataList(result);\n+        projectName = ParameterUtils.handleEscapes(projectName);\n+        logger.info(\"query top {} SUCCESS process instance order by running time whprojectNameich started between {} and {} ,login user:{},project name:{}\",\n+                size, startTime, endTime, loginUser.getUserName(), projectName);\n+        return processInstanceService.queryTopNLongestRunningProcessInstance(loginUser, projectName, size, startTime, endTime);\n     }\n \n     /**\n@@ -277,15 +274,14 @@ public Result queryProcessInstanceById(@ApiIgnore @RequestAttribute(value = Cons\n     @GetMapping(value = \"/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_PROCESS_INSTANCE_BY_ID_ERROR)\n-    public Result<ProcessInstance> deleteProcessInstanceById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                                             @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                                             @RequestParam(\"processInstanceId\") Integer processInstanceId\n+    public Result<Void> deleteProcessInstanceById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                  @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                  @RequestParam(\"processInstanceId\") Integer processInstanceId\n     ) {\n         logger.info(\"delete process instance by id, login user:{}, project name:{}, process instance id:{}\",\n                 loginUser.getUserName(), projectName, processInstanceId);\n         // task queue\n-        Map<String, Object> result = processInstanceService.deleteProcessInstanceById(loginUser, projectName, processInstanceId);\n-        return returnDataList(result);\n+        return processInstanceService.deleteProcessInstanceById(loginUser, projectName, processInstanceId);\n     }\n \n     /**\n@@ -303,11 +299,10 @@ public Result queryProcessInstanceById(@ApiIgnore @RequestAttribute(value = Cons\n     @GetMapping(value = \"/select-sub-process\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_SUB_PROCESS_INSTANCE_DETAIL_INFO_BY_TASK_ID_ERROR)\n-    public Result querySubProcessInstanceByTaskId(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                                  @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                                  @RequestParam(\"taskId\") Integer taskId) {\n-        Map<String, Object> result = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, taskId);\n-        return returnDataList(result);\n+    public Result<Map<String, Object>> querySubProcessInstanceByTaskId(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                       @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                                       @RequestParam(\"taskId\") Integer taskId) {\n+        return processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, taskId);\n     }\n \n     /**\n@@ -325,11 +320,10 @@ public Result querySubProcessInstanceByTaskId(@ApiIgnore @RequestAttribute(value\n     @GetMapping(value = \"/select-parent-process\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PARENT_PROCESS_INSTANCE_DETAIL_INFO_BY_SUB_PROCESS_INSTANCE_ID_ERROR)\n-    public Result queryParentInstanceBySubId(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                             @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                             @RequestParam(\"subId\") Integer subId) {\n-        Map<String, Object> result = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, subId);\n-        return returnDataList(result);\n+    public Result<Map<String, Object>> queryParentInstanceBySubId(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                  @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                                  @RequestParam(\"subId\") Integer subId) {\n+        return processInstanceService.queryParentInstanceBySubId(loginUser, projectName, subId);\n     }\n \n     /**\n@@ -346,10 +340,9 @@ public Result queryParentInstanceBySubId(@ApiIgnore @RequestAttribute(value = Co\n     @GetMapping(value = \"/view-variables\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PROCESS_INSTANCE_ALL_VARIABLES_ERROR)\n-    public Result viewVariables(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                @RequestParam(\"processInstanceId\") Integer processInstanceId) throws Exception {\n-        Map<String, Object> result = processInstanceService.viewVariables(processInstanceId);\n-        return returnDataList(result);\n+    public Result<Map<String, Object>> viewVariables(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                     @RequestParam(\"processInstanceId\") Integer processInstanceId) throws Exception {\n+        return processInstanceService.viewVariables(processInstanceId);\n     }\n \n     /**\n@@ -367,11 +360,10 @@ public Result viewVariables(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @GetMapping(value = \"/view-gantt\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(ENCAPSULATION_PROCESS_INSTANCE_GANTT_STRUCTURE_ERROR)\n-    public Result viewTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                           @RequestParam(\"processInstanceId\") Integer processInstanceId) throws Exception {\n-        Map<String, Object> result = processInstanceService.viewGantt(processInstanceId);\n-        return returnDataList(result);\n+    public Result<GanttDto> viewTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                     @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                     @RequestParam(\"processInstanceId\") Integer processInstanceId) throws Exception {\n+        return processInstanceService.viewGantt(processInstanceId);\n     }\n \n     /**\n@@ -386,37 +378,34 @@ public Result viewTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_US\n     @GetMapping(value = \"/batch-delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(BATCH_DELETE_PROCESS_INSTANCE_BY_IDS_ERROR)\n-    public Result batchDeleteProcessInstanceByIds(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                                  @PathVariable String projectName,\n-                                                  @RequestParam(\"processInstanceIds\") String processInstanceIds\n+    public Result<Void> batchDeleteProcessInstanceByIds(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                        @PathVariable String projectName,\n+                                                        @RequestParam(\"processInstanceIds\") String processInstanceIds\n     ) {\n         logger.info(\"delete process instance by ids, login user:{}, project name:{}, process instance ids :{}\",\n                 loginUser.getUserName(), projectName, processInstanceIds);\n         // task queue\n-        Map<String, Object> result = new HashMap<>();\n         List<String> deleteFailedIdList = new ArrayList<>();\n         if (StringUtils.isNotEmpty(processInstanceIds)) {\n             String[] processInstanceIdArray = processInstanceIds.split(\",\");\n \n             for (String strProcessInstanceId : processInstanceIdArray) {\n                 int processInstanceId = Integer.parseInt(strProcessInstanceId);\n                 try {\n-                    Map<String, Object> deleteResult = processInstanceService.deleteProcessInstanceById(loginUser, projectName, processInstanceId);\n-                    if (!Status.SUCCESS.equals(deleteResult.get(Constants.STATUS))) {\n+                    Result<Void> deleteResult = processInstanceService.deleteProcessInstanceById(loginUser, projectName, processInstanceId);\n+                    if (Status.SUCCESS.getCode() != (deleteResult.getCode())) {\n                         deleteFailedIdList.add(strProcessInstanceId);\n-                        logger.error((String) deleteResult.get(Constants.MSG));\n+                        logger.error(deleteResult.getMsg());\n                     }\n                 } catch (Exception e) {\n                     deleteFailedIdList.add(strProcessInstanceId);\n                 }\n             }\n         }\n         if (!deleteFailedIdList.isEmpty()) {\n-            putMsg(result, Status.BATCH_DELETE_PROCESS_INSTANCE_BY_IDS_ERROR, String.join(\",\", deleteFailedIdList));\n+            return Result.errorWithArgs(Status.BATCH_DELETE_PROCESS_INSTANCE_BY_IDS_ERROR, String.join(\",\", deleteFailedIdList));\n         } else {\n-            putMsg(result, Status.SUCCESS);\n+            return Result.success(null);\n         }\n-\n-        return returnDataList(result);\n     }\n }"
  },
  {
    "sha": "0c2ce463dbc73c53e8cfec7db3ad7b2db580a7b9",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java",
    "status": "modified",
    "additions": 38,
    "deletions": 46,
    "changes": 84,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -32,11 +32,13 @@\n import org.apache.dolphinscheduler.api.service.ProjectService;\n import org.apache.dolphinscheduler.api.utils.RegexUtils;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n+import org.apache.dolphinscheduler.dao.entity.Project;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n+import java.util.List;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -89,13 +91,12 @@\n     @PostMapping(value = \"/create\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(CREATE_PROJECT_ERROR)\n-    public Result createProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                @RequestParam(\"projectName\") String projectName,\n-                                @RequestParam(value = \"description\", required = false) String description) {\n+    public Result<Integer> createProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                         @RequestParam(\"projectName\") String projectName,\n+                                         @RequestParam(value = \"description\", required = false) String description) {\n \n         logger.info(\"login user {}, create project name: {}, desc: {}\", loginUser.getUserName(), projectName, description);\n-        Map<String, Object> result = projectService.createProject(loginUser, projectName, description);\n-        return returnDataList(result);\n+        return projectService.createProject(loginUser, projectName, description);\n     }\n \n     /**\n@@ -116,13 +117,12 @@ public Result createProject(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @PostMapping(value = \"/update\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_PROJECT_ERROR)\n-    public Result updateProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                @RequestParam(\"projectId\") Integer projectId,\n-                                @RequestParam(\"projectName\") String projectName,\n-                                @RequestParam(value = \"description\", required = false) String description) {\n+    public Result<Void> updateProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                      @RequestParam(\"projectId\") Integer projectId,\n+                                      @RequestParam(\"projectName\") String projectName,\n+                                      @RequestParam(value = \"description\", required = false) String description) {\n         logger.info(\"login user {} , updateProcessInstance project name: {}, desc: {}\", loginUser.getUserName(), projectName, description);\n-        Map<String, Object> result = projectService.update(loginUser, projectId, projectName, description);\n-        return returnDataList(result);\n+        return projectService.update(loginUser, projectId, projectName, description);\n     }\n \n     /**\n@@ -139,12 +139,11 @@ public Result updateProject(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @GetMapping(value = \"/query-by-id\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_PROJECT_DETAILS_BY_ID_ERROR)\n-    public Result queryProjectById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                   @RequestParam(\"projectId\") Integer projectId) {\n+    public Result<Project> queryProjectById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                            @RequestParam(\"projectId\") Integer projectId) {\n         logger.info(\"login user {}, query project by id: {}\", loginUser.getUserName(), projectId);\n \n-        Map<String, Object> result = projectService.queryById(projectId);\n-        return returnDataList(result);\n+        return projectService.queryById(projectId);\n     }\n \n     /**\n@@ -165,16 +164,15 @@ public Result queryProjectById(@ApiIgnore @RequestAttribute(value = Constants.SE\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(LOGIN_USER_QUERY_PROJECT_LIST_PAGING_ERROR)\n-    public Result queryProjectListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                         @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                         @RequestParam(\"pageSize\") Integer pageSize,\n-                                         @RequestParam(\"pageNo\") Integer pageNo\n+    public Result<PageListVO<Project>> queryProjectListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                              @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+                                                              @RequestParam(\"pageSize\") Integer pageSize,\n+                                                              @RequestParam(\"pageNo\") Integer pageNo\n     ) {\n \n         logger.info(\"login user {}, query project list paging\", loginUser.getUserName());\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = projectService.queryProjectListPaging(loginUser, pageSize, pageNo, searchVal);\n-        return returnDataListPaging(result);\n+        return projectService.queryProjectListPaging(loginUser, pageSize, pageNo, searchVal);\n     }\n \n     /**\n@@ -191,13 +189,12 @@ public Result queryProjectListPaging(@ApiIgnore @RequestAttribute(value = Consta\n     @GetMapping(value = \"/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_PROJECT_ERROR)\n-    public Result deleteProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                @RequestParam(\"projectId\") Integer projectId\n+    public Result<Void> deleteProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                      @RequestParam(\"projectId\") Integer projectId\n     ) {\n \n         logger.info(\"login user {}, delete project: {}.\", loginUser.getUserName(), projectId);\n-        Map<String, Object> result = projectService.deleteProject(loginUser, projectId);\n-        return returnDataList(result);\n+        return projectService.deleteProject(loginUser, projectId);\n     }\n \n     /**\n@@ -214,11 +211,10 @@ public Result deleteProject(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @GetMapping(value = \"/unauth-project\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_UNAUTHORIZED_PROJECT_ERROR)\n-    public Result queryUnauthorizedProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                           @RequestParam(\"userId\") Integer userId) {\n+    public Result<List<Project>> queryUnauthorizedProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                          @RequestParam(\"userId\") Integer userId) {\n         logger.info(\"login user {}, query unauthorized project by user id: {}.\", loginUser.getUserName(), userId);\n-        Map<String, Object> result = projectService.queryUnauthorizedProject(loginUser, userId);\n-        return returnDataList(result);\n+        return projectService.queryUnauthorizedProject(loginUser, userId);\n     }\n \n \n@@ -236,11 +232,10 @@ public Result queryUnauthorizedProject(@ApiIgnore @RequestAttribute(value = Cons\n     @GetMapping(value = \"/authed-project\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_AUTHORIZED_PROJECT)\n-    public Result queryAuthorizedProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                         @RequestParam(\"userId\") Integer userId) {\n+    public Result<List<Project>> queryAuthorizedProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                        @RequestParam(\"userId\") Integer userId) {\n         logger.info(\"login user {}, query authorized project by user id: {}.\", loginUser.getUserName(), userId);\n-        Map<String, Object> result = projectService.queryAuthorizedProject(loginUser, userId);\n-        return returnDataList(result);\n+        return projectService.queryAuthorizedProject(loginUser, userId);\n     }\n \n     /**\n@@ -253,12 +248,11 @@ public Result queryAuthorizedProject(@ApiIgnore @RequestAttribute(value = Consta\n     @GetMapping(value = \"/created-and-authorized-project\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_AUTHORIZED_AND_USER_CREATED_PROJECT_ERROR)\n-    public Result queryProjectCreatedAndAuthorizedByUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<Project>> queryProjectCreatedAndAuthorizedByUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user {}, query authorized and user created project by user id: {}.\",\n                 RegexUtils.escapeNRT(loginUser.getUserName()),\n                 RegexUtils.escapeNRT(String.valueOf(loginUser.getId())));\n-        Map<String, Object> result = projectService.queryProjectCreatedAndAuthorizedByUser(loginUser);\n-        return returnDataList(result);\n+        return projectService.queryProjectCreatedAndAuthorizedByUser(loginUser);\n     }\n \n     /**\n@@ -270,19 +264,18 @@ public Result queryProjectCreatedAndAuthorizedByUser(@ApiIgnore @RequestAttribut\n      * @return import result code\n      */\n \n-    @ApiOperation(value = \"importProcessDefinition\", notes= \"EXPORT_PROCESS_DEFINITION_NOTES\")\n+    @ApiOperation(value = \"importProcessDefinition\", notes = \"EXPORT_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n             @ApiImplicitParam(name = \"file\", value = \"RESOURCE_FILE\", required = true, dataType = \"MultipartFile\")\n     })\n     @PostMapping(value = \"/import-definition\")\n     @ApiException(IMPORT_PROCESS_DEFINE_ERROR)\n-    public Result importProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                          @RequestParam(\"file\") MultipartFile file,\n-                                          @RequestParam(\"projectName\") String projectName) {\n+    public Result<Void> importProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                @RequestParam(\"file\") MultipartFile file,\n+                                                @RequestParam(\"projectName\") String projectName) {\n         logger.info(\"import process definition by id, login user:{}, project: {}\",\n                 loginUser.getUserName(), projectName);\n-        Map<String, Object> result = processDefinitionService.importProcessDefinition(loginUser, file, projectName);\n-        return returnDataList(result);\n+        return processDefinitionService.importProcessDefinition(loginUser, file, projectName);\n     }\n \n     /**\n@@ -295,10 +288,9 @@ public Result importProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     @GetMapping(value = \"/query-project-list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(LOGIN_USER_QUERY_PROJECT_LIST_PAGING_ERROR)\n-    public Result queryAllProjectList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<Project>> queryAllProjectList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user {}, query all project list\", loginUser.getUserName());\n-        Map<String, Object> result = projectService.queryAllProjectList();\n-        return returnDataList(result);\n+        return projectService.queryAllProjectList();\n     }\n \n "
  },
  {
    "sha": "3b023a7e90dfe4ce2b32aac396548ee2e5d20c2f",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/QueueController.java",
    "status": "modified",
    "additions": 21,
    "deletions": 23,
    "changes": 44,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/QueueController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/QueueController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/QueueController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -22,15 +22,17 @@\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_QUEUE_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.VERIFY_QUEUE_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.QueueService;\n import org.apache.dolphinscheduler.api.utils.Result;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n+import org.apache.dolphinscheduler.dao.entity.Queue;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n+import java.util.List;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -74,10 +76,9 @@\n     @GetMapping(value = \"/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_QUEUE_LIST_ERROR)\n-    public Result queryList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<Queue>> queryList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user {}, query queue list\", loginUser.getUserName());\n-        Map<String, Object> result = queueService.queryList(loginUser);\n-        return returnDataList(result);\n+        return queueService.queryList(loginUser);\n     }\n \n     /**\n@@ -103,14 +104,13 @@ public Result queryQueueListPaging(@ApiIgnore @RequestAttribute(value = Constant\n                                        @RequestParam(value = \"searchVal\", required = false) String searchVal,\n                                        @RequestParam(\"pageSize\") Integer pageSize) {\n         logger.info(\"login user {}, query queue list,search value:{}\", loginUser.getUserName(), searchVal);\n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+        CheckParamResult checkResult = checkPageParams(pageNo, pageSize);\n+        if (!Status.SUCCESS.equals(checkResult.getStatus())) {\n+            return Result.error(checkResult);\n         }\n \n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        result = queueService.queryList(loginUser, searchVal, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return queueService.queryList(loginUser, searchVal, pageNo, pageSize);\n     }\n \n     /**\n@@ -129,13 +129,12 @@ public Result queryQueueListPaging(@ApiIgnore @RequestAttribute(value = Constant\n     @PostMapping(value = \"/create\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(CREATE_QUEUE_ERROR)\n-    public Result createQueue(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                              @RequestParam(value = \"queue\") String queue,\n-                              @RequestParam(value = \"queueName\") String queueName) {\n+    public Result<Void> createQueue(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                    @RequestParam(value = \"queue\") String queue,\n+                                    @RequestParam(value = \"queueName\") String queueName) {\n         logger.info(\"login user {}, create queue, queue: {}, queueName: {}\",\n                 loginUser.getUserName(), queue, queueName);\n-        Map<String, Object> result = queueService.createQueue(loginUser, queue, queueName);\n-        return returnDataList(result);\n+        return queueService.createQueue(loginUser, queue, queueName);\n     }\n \n     /**\n@@ -156,14 +155,13 @@ public Result createQueue(@ApiIgnore @RequestAttribute(value = Constants.SESSION\n     @PostMapping(value = \"/update\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(UPDATE_QUEUE_ERROR)\n-    public Result updateQueue(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                              @RequestParam(value = \"id\") int id,\n-                              @RequestParam(value = \"queue\") String queue,\n-                              @RequestParam(value = \"queueName\") String queueName) {\n+    public Result<Void> updateQueue(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                    @RequestParam(value = \"id\") int id,\n+                                    @RequestParam(value = \"queue\") String queue,\n+                                    @RequestParam(value = \"queueName\") String queueName) {\n         logger.info(\"login user {}, update queue, id: {}, queue: {}, queueName: {}\",\n                 loginUser.getUserName(), id, queue, queueName);\n-        Map<String, Object> result = queueService.updateQueue(loginUser, id, queue, queueName);\n-        return returnDataList(result);\n+        return queueService.updateQueue(loginUser, id, queue, queueName);\n     }\n \n     /**\n@@ -183,9 +181,9 @@ public Result updateQueue(@ApiIgnore @RequestAttribute(value = Constants.SESSION\n     @PostMapping(value = \"/verify-queue\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(VERIFY_QUEUE_ERROR)\n-    public Result verifyQueue(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                              @RequestParam(value = \"queue\") String queue,\n-                              @RequestParam(value = \"queueName\") String queueName\n+    public Result<Void> verifyQueue(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                    @RequestParam(value = \"queue\") String queue,\n+                                    @RequestParam(value = \"queueName\") String queueName\n     ) {\n \n         logger.info(\"login user {}, verfiy queue: {} queue name: {}\","
  },
  {
    "sha": "214d443c640780e6e55c6a2c2a0da43d508fcc3a",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java",
    "status": "modified",
    "additions": 60,
    "deletions": 67,
    "changes": 127,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -41,25 +41,29 @@\n import static org.apache.dolphinscheduler.api.enums.Status.VIEW_RESOURCE_FILE_ON_LINE_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.VIEW_UDF_FUNCTION_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n+import org.apache.dolphinscheduler.api.dto.resources.ResourceComponent;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.ResourcesService;\n import org.apache.dolphinscheduler.api.service.UdfFuncService;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.ProgramType;\n import org.apache.dolphinscheduler.common.enums.ResourceType;\n import org.apache.dolphinscheduler.common.enums.UdfType;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n import org.apache.dolphinscheduler.common.utils.StringUtils;\n+import org.apache.dolphinscheduler.dao.entity.Resource;\n+import org.apache.dolphinscheduler.dao.entity.UdfFunc;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n+import java.util.List;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.Resource;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n@@ -205,12 +209,11 @@ public Result updateResource(@ApiIgnore @RequestAttribute(value = Constants.SESS\n     @GetMapping(value = \"/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_RESOURCES_LIST_ERROR)\n-    public Result queryResourceList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                    @RequestParam(value = \"type\") ResourceType type\n+    public Result<List<ResourceComponent>> queryResourceList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                             @RequestParam(value = \"type\") ResourceType type\n     ) {\n         logger.info(\"query resource list, login user:{}, resource type:{}\", loginUser.getUserName(), type);\n-        Map<String, Object> result = resourceService.queryResourceList(loginUser, type);\n-        return returnDataList(result);\n+        return resourceService.queryResourceList(loginUser, type);\n     }\n \n     /**\n@@ -234,23 +237,22 @@ public Result queryResourceList(@ApiIgnore @RequestAttribute(value = Constants.S\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_RESOURCES_LIST_PAGING)\n-    public Result queryResourceListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                          @RequestParam(value = \"type\") ResourceType type,\n-                                          @RequestParam(value = \"id\") int id,\n-                                          @RequestParam(\"pageNo\") Integer pageNo,\n-                                          @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                          @RequestParam(\"pageSize\") Integer pageSize\n+    public Result<PageListVO<Resource>> queryResourceListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                @RequestParam(value = \"type\") ResourceType type,\n+                                                                @RequestParam(value = \"id\") int id,\n+                                                                @RequestParam(\"pageNo\") Integer pageNo,\n+                                                                @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+                                                                @RequestParam(\"pageSize\") Integer pageSize\n     ) {\n         logger.info(\"query resource list, login user:{}, resource type:{}, search value:{}\",\n                 loginUser.getUserName(), type, searchVal);\n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+        CheckParamResult checkResult = checkPageParams(pageNo, pageSize);\n+        if (checkResult.getStatus() != Status.SUCCESS) {\n+            return Result.error(checkResult);\n         }\n \n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        result = resourceService.queryResourceListPaging(loginUser, id, type, searchVal, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return resourceService.queryResourceListPaging(loginUser, id, type, searchVal, pageNo, pageSize);\n     }\n \n \n@@ -317,14 +319,13 @@ public Result verifyResourceName(@ApiIgnore @RequestAttribute(value = Constants.\n     @GetMapping(value = \"/list/jar\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_RESOURCES_LIST_ERROR)\n-    public Result queryResourceJarList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                       @RequestParam(value = \"type\") ResourceType type,\n-                                       @RequestParam(value = \"programType\",required = false) ProgramType programType\n+    public Result<List<ResourceComponent>> queryResourceJarList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                @RequestParam(value = \"type\") ResourceType type,\n+                                                                @RequestParam(value = \"programType\", required = false) ProgramType programType\n     ) {\n         String programTypeName = programType == null ? \"\" : programType.name();\n         logger.info(\"query resource list, resource type:{}, program type:{}\", type, programTypeName);\n-        Map<String, Object> result = resourceService.queryResourceByProgramType(loginUser, type,programType);\n-        return returnDataList(result);\n+        return resourceService.queryResourceByProgramType(loginUser, type, programType);\n     }\n \n     /**\n@@ -472,7 +473,7 @@ public ResponseEntity downloadResource(@ApiIgnore @RequestAttribute(value = Cons\n                                            @RequestParam(value = \"id\") int resourceId) throws Exception {\n         logger.info(\"login user {}, download resource : {}\",\n                 loginUser.getUserName(), resourceId);\n-        Resource file = resourceService.downloadResource(resourceId);\n+        org.springframework.core.io.Resource file = resourceService.downloadResource(resourceId);\n         if (file == null) {\n             return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Status.RESOURCE_NOT_EXIST.getMsg());\n         }\n@@ -538,12 +539,11 @@ public Result createUdfFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @GetMapping(value = \"/udf-func/update-ui\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(VIEW_UDF_FUNCTION_ERROR)\n-    public Result viewUIUdfFunction(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                    @RequestParam(\"id\") int id) {\n+    public Result<UdfFunc> viewUIUdfFunction(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                             @RequestParam(\"id\") int id) {\n         logger.info(\"login user {}, query udf{}\",\n                 loginUser.getUserName(), id);\n-        Map<String, Object> map = udfFuncService.queryUdfFuncDetail(id);\n-        return returnDataList(map);\n+        return udfFuncService.queryUdfFuncDetail(id);\n     }\n \n     /**\n@@ -574,19 +574,18 @@ public Result viewUIUdfFunction(@ApiIgnore @RequestAttribute(value = Constants.S\n     })\n     @PostMapping(value = \"/udf-func/update\")\n     @ApiException(UPDATE_UDF_FUNCTION_ERROR)\n-    public Result updateUdfFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                @RequestParam(value = \"id\") int udfFuncId,\n-                                @RequestParam(value = \"type\") UdfType type,\n-                                @RequestParam(value = \"funcName\") String funcName,\n-                                @RequestParam(value = \"className\") String className,\n-                                @RequestParam(value = \"argTypes\", required = false) String argTypes,\n-                                @RequestParam(value = \"database\", required = false) String database,\n-                                @RequestParam(value = \"description\", required = false) String description,\n-                                @RequestParam(value = \"resourceId\") int resourceId) {\n+    public Result<Void> updateUdfFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                      @RequestParam(value = \"id\") int udfFuncId,\n+                                      @RequestParam(value = \"type\") UdfType type,\n+                                      @RequestParam(value = \"funcName\") String funcName,\n+                                      @RequestParam(value = \"className\") String className,\n+                                      @RequestParam(value = \"argTypes\", required = false) String argTypes,\n+                                      @RequestParam(value = \"database\", required = false) String database,\n+                                      @RequestParam(value = \"description\", required = false) String description,\n+                                      @RequestParam(value = \"resourceId\") int resourceId) {\n         logger.info(\"login user {}, updateProcessInstance udf function id: {},type: {},  funcName: {},argTypes: {} ,database: {},desc: {},resourceId: {}\",\n                 loginUser.getUserName(), udfFuncId, type, funcName, argTypes, database, description, resourceId);\n-        Map<String, Object> result = udfFuncService.updateUdfFunc(udfFuncId, funcName, className, argTypes, database, description, type, resourceId);\n-        return returnDataList(result);\n+        return udfFuncService.updateUdfFunc(udfFuncId, funcName, className, argTypes, database, description, type, resourceId);\n     }\n \n     /**\n@@ -607,20 +606,19 @@ public Result updateUdfFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @GetMapping(value = \"/udf-func/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_UDF_FUNCTION_LIST_PAGING_ERROR)\n-    public Result<Object> queryUdfFuncListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                   @RequestParam(\"pageNo\") Integer pageNo,\n-                                   @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                   @RequestParam(\"pageSize\") Integer pageSize\n+    public Result<PageListVO<UdfFunc>> queryUdfFuncListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                              @RequestParam(\"pageNo\") Integer pageNo,\n+                                                              @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+                                                              @RequestParam(\"pageSize\") Integer pageSize\n     ) {\n         logger.info(\"query udf functions list, login user:{},search value:{}\",\n                 loginUser.getUserName(), searchVal);\n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+        CheckParamResult checkResult = checkPageParams(pageNo, pageSize);\n+        if (checkResult.getStatus() != Status.SUCCESS) {\n+            return Result.error(checkResult);\n         }\n \n-        result = udfFuncService.queryUdfFuncListPaging(loginUser, searchVal, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return udfFuncService.queryUdfFuncListPaging(loginUser, searchVal, pageNo, pageSize);\n     }\n \n     /**\n@@ -637,11 +635,10 @@ public Result updateUdfFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @GetMapping(value = \"/udf-func/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_DATASOURCE_BY_TYPE_ERROR)\n-    public Result<Object> queryUdfFuncList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                    @RequestParam(\"type\") UdfType type) {\n+    public Result<List<UdfFunc>> queryUdfFuncList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                  @RequestParam(\"type\") UdfType type) {\n         logger.info(\"query udf func list, type:{}\", type);\n-        Map<String, Object> result = udfFuncService.queryUdfFuncList(loginUser, type.ordinal());\n-        return returnDataList(result);\n+        return udfFuncService.queryUdfFuncList(loginUser, type.ordinal());\n     }\n \n     /**\n@@ -703,11 +700,10 @@ public Result deleteUdfFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @GetMapping(value = \"/authed-file\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(AUTHORIZED_FILE_RESOURCE_ERROR)\n-    public Result authorizedFile(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                 @RequestParam(\"userId\") Integer userId) {\n+    public Result<List<ResourceComponent>> authorizedFile(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                          @RequestParam(\"userId\") Integer userId) {\n         logger.info(\"authorized file resource, user: {}, user id:{}\", loginUser.getUserName(), userId);\n-        Map<String, Object> result = resourceService.authorizedFile(loginUser, userId);\n-        return returnDataList(result);\n+        return resourceService.authorizedFile(loginUser, userId);\n     }\n \n \n@@ -725,11 +721,10 @@ public Result authorizedFile(@ApiIgnore @RequestAttribute(value = Constants.SESS\n     @GetMapping(value = \"/authorize-resource-tree\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(AUTHORIZE_RESOURCE_TREE)\n-    public Result authorizeResourceTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @RequestParam(\"userId\") Integer userId) {\n+    public Result<List<ResourceComponent>> authorizeResourceTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                 @RequestParam(\"userId\") Integer userId) {\n         logger.info(\"all resource file, user:{}, user id:{}\", loginUser.getUserName(), userId);\n-        Map<String, Object> result = resourceService.authorizeResourceTree(loginUser, userId);\n-        return returnDataList(result);\n+        return resourceService.authorizeResourceTree(loginUser, userId);\n     }\n \n \n@@ -747,12 +742,11 @@ public Result authorizeResourceTree(@ApiIgnore @RequestAttribute(value = Constan\n     @GetMapping(value = \"/unauth-udf-func\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(UNAUTHORIZED_UDF_FUNCTION_ERROR)\n-    public Result unauthUDFFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                @RequestParam(\"userId\") Integer userId) {\n+    public Result<List<UdfFunc>> unauthUDFFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                               @RequestParam(\"userId\") Integer userId) {\n         logger.info(\"unauthorized udf function, login user:{}, unauthorized user id:{}\", loginUser.getUserName(), userId);\n \n-        Map<String, Object> result = resourceService.unauthorizedUDFFunction(loginUser, userId);\n-        return returnDataList(result);\n+        return resourceService.unauthorizedUDFFunction(loginUser, userId);\n     }\n \n \n@@ -770,10 +764,9 @@ public Result unauthUDFFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @GetMapping(value = \"/authed-udf-func\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(AUTHORIZED_UDF_FUNCTION_ERROR)\n-    public Result authorizedUDFFunction(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @RequestParam(\"userId\") Integer userId) {\n+    public Result<List<UdfFunc>> authorizedUDFFunction(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                       @RequestParam(\"userId\") Integer userId) {\n         logger.info(\"auth udf function, login user:{}, auth user id:{}\", loginUser.getUserName(), userId);\n-        Map<String, Object> result = resourceService.authorizedUDFFunction(loginUser, userId);\n-        return returnDataList(result);\n+        return resourceService.authorizedUDFFunction(loginUser, userId);\n     }\n }\n\\ No newline at end of file"
  },
  {
    "sha": "0ecb2a7d4b85aa84fbfb0bddcbb66183eda04994",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java",
    "status": "modified",
    "additions": 27,
    "deletions": 33,
    "changes": 60,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -31,13 +31,16 @@\n import org.apache.dolphinscheduler.api.service.SchedulerService;\n import org.apache.dolphinscheduler.api.utils.RegexUtils;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.enums.FailureStrategy;\n import org.apache.dolphinscheduler.common.enums.Priority;\n import org.apache.dolphinscheduler.common.enums.ReleaseState;\n import org.apache.dolphinscheduler.common.enums.WarningType;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n+import org.apache.dolphinscheduler.dao.entity.Schedule;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n+import java.util.List;\n import java.util.Map;\n \n import org.slf4j.Logger;\n@@ -105,7 +108,7 @@\n     @PostMapping(\"/create\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(CREATE_SCHEDULE_ERROR)\n-    public Result createSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n+    public Result<Schedule> createSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n                                  @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                                  @RequestParam(value = \"processDefinitionId\") Integer processDefinitionId,\n                                  @RequestParam(value = \"schedule\") String schedule,\n@@ -118,10 +121,8 @@ public Result createSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)\n                         + \"failure policy: {},processInstancePriority : {}, workGroupId:{}\",\n                 RegexUtils.escapeNRT(loginUser.getUserName()), RegexUtils.escapeNRT(projectName), processDefinitionId, schedule, warningType, warningGroupId,\n                 failureStrategy, processInstancePriority, workerGroup);\n-        Map<String, Object> result = schedulerService.insertSchedule(loginUser, projectName, processDefinitionId, schedule,\n+        return schedulerService.insertSchedule(loginUser, projectName, processDefinitionId, schedule,\n                 warningType, warningGroupId, failureStrategy, processInstancePriority, workerGroup);\n-\n-        return returnDataList(result);\n     }\n \n     /**\n@@ -150,7 +151,7 @@ public Result createSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)\n     })\n     @PostMapping(\"/update\")\n     @ApiException(UPDATE_SCHEDULE_ERROR)\n-    public Result updateSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n+    public Result<Void> updateSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n                                  @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                                  @RequestParam(value = \"id\") Integer id,\n                                  @RequestParam(value = \"schedule\") String schedule,\n@@ -164,9 +165,8 @@ public Result updateSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)\n                 RegexUtils.escapeNRT(loginUser.getUserName()), RegexUtils.escapeNRT(projectName), id, schedule, warningType, warningGroupId, failureStrategy,\n                 processInstancePriority, workerGroup);\n \n-        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectName, id, schedule,\n+        return schedulerService.updateSchedule(loginUser, projectName, id, schedule,\n                 warningType, warningGroupId, failureStrategy, null, processInstancePriority, workerGroup);\n-        return returnDataList(result);\n     }\n \n     /**\n@@ -183,13 +183,12 @@ public Result updateSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)\n     })\n     @PostMapping(\"/online\")\n     @ApiException(PUBLISH_SCHEDULE_ONLINE_ERROR)\n-    public Result online(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n+    public Result<Void> online(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n                          @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                          @RequestParam(\"id\") Integer id) {\n         logger.info(\"login user {}, schedule setScheduleState, project name: {}, id: {}\",\n                 loginUser.getUserName(), projectName, id);\n-        Map<String, Object> result = schedulerService.setScheduleState(loginUser, projectName, id, ReleaseState.ONLINE);\n-        return returnDataList(result);\n+        return schedulerService.setScheduleState(loginUser, projectName, id, ReleaseState.ONLINE);\n     }\n \n     /**\n@@ -206,14 +205,13 @@ public Result online(@ApiIgnore @RequestAttribute(value = SESSION_USER) User log\n     })\n     @PostMapping(\"/offline\")\n     @ApiException(OFFLINE_SCHEDULE_ERROR)\n-    public Result offline(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n+    public Result<Void> offline(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                           @RequestParam(\"id\") Integer id) {\n         logger.info(\"login user {}, schedule offline, project name: {}, process definition id: {}\",\n                 loginUser.getUserName(), projectName, id);\n \n-        Map<String, Object> result = schedulerService.setScheduleState(loginUser, projectName, id, ReleaseState.OFFLINE);\n-        return returnDataList(result);\n+        return schedulerService.setScheduleState(loginUser, projectName, id, ReleaseState.OFFLINE);\n     }\n \n     /**\n@@ -237,17 +235,16 @@ public Result offline(@ApiIgnore @RequestAttribute(value = SESSION_USER) User lo\n     })\n     @GetMapping(\"/list-paging\")\n     @ApiException(QUERY_SCHEDULE_LIST_PAGING_ERROR)\n-    public Result queryScheduleListPaging(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n-                                          @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                          @RequestParam Integer processDefinitionId,\n-                                          @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                          @RequestParam(\"pageNo\") Integer pageNo,\n-                                          @RequestParam(\"pageSize\") Integer pageSize) {\n+    public Result<PageListVO<Schedule>> queryScheduleListPaging(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n+                                                                @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                                @RequestParam Integer processDefinitionId,\n+                                                                @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+                                                                @RequestParam(\"pageNo\") Integer pageNo,\n+                                                                @RequestParam(\"pageSize\") Integer pageSize) {\n         logger.info(\"login user {}, query schedule, project name: {}, process definition id: {}\",\n                 loginUser.getUserName(), projectName, processDefinitionId);\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = schedulerService.querySchedule(loginUser, projectName, processDefinitionId, searchVal, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return schedulerService.querySchedule(loginUser, projectName, processDefinitionId, searchVal, pageNo, pageSize);\n     }\n \n     /**\n@@ -265,14 +262,13 @@ public Result queryScheduleListPaging(@ApiIgnore @RequestAttribute(value = SESSI\n     @GetMapping(value = \"/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_SCHEDULE_CRON_BY_ID_ERROR)\n-    public Result deleteScheduleById(@RequestAttribute(value = SESSION_USER) User loginUser,\n+    public Result<Void> deleteScheduleById(@RequestAttribute(value = SESSION_USER) User loginUser,\n                                      @PathVariable String projectName,\n                                      @RequestParam(\"scheduleId\") Integer scheduleId\n     ) {\n         logger.info(\"delete schedule by id, login user:{}, project name:{}, schedule id:{}\",\n                 loginUser.getUserName(), projectName, scheduleId);\n-        Map<String, Object> result = schedulerService.deleteScheduleById(loginUser, projectName, scheduleId);\n-        return returnDataList(result);\n+        return schedulerService.deleteScheduleById(loginUser, projectName, scheduleId);\n     }\n \n     /**\n@@ -285,12 +281,11 @@ public Result deleteScheduleById(@RequestAttribute(value = SESSION_USER) User lo\n     @ApiOperation(value = \"queryScheduleList\", notes = \"QUERY_SCHEDULE_LIST_NOTES\")\n     @PostMapping(\"/list\")\n     @ApiException(QUERY_SCHEDULE_LIST_ERROR)\n-    public Result queryScheduleList(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n-                                    @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName) {\n+    public Result<List<Schedule>> queryScheduleList(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n+                                                    @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName) {\n         logger.info(\"login user {}, query schedule list, project name: {}\",\n                 loginUser.getUserName(), projectName);\n-        Map<String, Object> result = schedulerService.queryScheduleList(loginUser, projectName);\n-        return returnDataList(result);\n+        return schedulerService.queryScheduleList(loginUser, projectName);\n     }\n \n     /**\n@@ -308,13 +303,12 @@ public Result queryScheduleList(@ApiIgnore @RequestAttribute(value = SESSION_USE\n     @PostMapping(\"/preview\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(PREVIEW_SCHEDULE_ERROR)\n-    public Result previewSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n-                                  @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                  @RequestParam(value = \"schedule\") String schedule\n+    public Result<List<String>> previewSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,\n+                                                @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                                @RequestParam(value = \"schedule\") String schedule\n     ) {\n         logger.info(\"login user {}, project name: {}, preview schedule: {}\",\n                 loginUser.getUserName(), projectName, schedule);\n-        Map<String, Object> result = schedulerService.previewSchedule(loginUser, projectName, schedule);\n-        return returnDataList(result);\n+        return schedulerService.previewSchedule(loginUser, projectName, schedule);\n     }\n }"
  },
  {
    "sha": "1c4aea0121c6a1f84bf09654b7a8fae19a865470",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java",
    "status": "modified",
    "additions": 18,
    "deletions": 18,
    "changes": 36,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -24,6 +24,7 @@\n import org.apache.dolphinscheduler.api.service.TaskInstanceService;\n import org.apache.dolphinscheduler.api.utils.RegexUtils;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.ExecutionStatus;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n@@ -97,19 +98,20 @@\n     @GetMapping(\"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_TASK_LIST_PAGING_ERROR)\n-    public Result queryTaskListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                      @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                      @RequestParam(value = \"processInstanceId\", required = false, defaultValue = \"0\") Integer processInstanceId,\n-                                      @RequestParam(value = \"processInstanceName\", required = false) String processInstanceName,\n-                                      @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                      @RequestParam(value = \"taskName\", required = false) String taskName,\n-                                      @RequestParam(value = \"executorName\", required = false) String executorName,\n-                                      @RequestParam(value = \"stateType\", required = false) ExecutionStatus stateType,\n-                                      @RequestParam(value = \"host\", required = false) String host,\n-                                      @RequestParam(value = \"startDate\", required = false) String startTime,\n-                                      @RequestParam(value = \"endDate\", required = false) String endTime,\n-                                      @RequestParam(\"pageNo\") Integer pageNo,\n-                                      @RequestParam(\"pageSize\") Integer pageSize) {\n+    public Result<PageListVO<Map<String, Object>>> queryTaskListPaging(\n+            @ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+            @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+            @RequestParam(value = \"processInstanceId\", required = false, defaultValue = \"0\") Integer processInstanceId,\n+            @RequestParam(value = \"processInstanceName\", required = false) String processInstanceName,\n+            @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+            @RequestParam(value = \"taskName\", required = false) String taskName,\n+            @RequestParam(value = \"executorName\", required = false) String executorName,\n+            @RequestParam(value = \"stateType\", required = false) ExecutionStatus stateType,\n+            @RequestParam(value = \"host\", required = false) String host,\n+            @RequestParam(value = \"startDate\", required = false) String startTime,\n+            @RequestParam(value = \"endDate\", required = false) String endTime,\n+            @RequestParam(\"pageNo\") Integer pageNo,\n+            @RequestParam(\"pageSize\") Integer pageSize) {\n \n         logger.info(\"query task instance list, projectName:{}, processInstanceId:{}, processInstanceName:{}, search value:{}, taskName:{}, executorName: {}, stateType:{}, host:{}, start:{}, end:{}\",\n                 RegexUtils.escapeNRT(projectName),\n@@ -123,9 +125,8 @@ public Result queryTaskListPaging(@ApiIgnore @RequestAttribute(value = Constants\n                 RegexUtils.escapeNRT(startTime),\n                 RegexUtils.escapeNRT(endTime));\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = taskInstanceService.queryTaskListPaging(\n+        return taskInstanceService.queryTaskListPaging(\n                 loginUser, projectName, processInstanceId, processInstanceName, taskName, executorName, startTime, endTime, searchVal, stateType, host, pageNo, pageSize);\n-        return returnDataListPaging(result);\n     }\n \n     /**\n@@ -143,12 +144,11 @@ public Result queryTaskListPaging(@ApiIgnore @RequestAttribute(value = Constants\n     @PostMapping(value = \"/force-success\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(FORCE_TASK_SUCCESS_ERROR)\n-    public Result<Object> forceTaskSuccess(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> forceTaskSuccess(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                            @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n                                            @RequestParam(value = \"taskInstanceId\") Integer taskInstanceId) {\n         logger.info(\"force task success, project: {}, task instance id: {}\", projectName, taskInstanceId);\n-        Map<String, Object> result = taskInstanceService.forceTaskSuccess(loginUser, projectName, taskInstanceId);\n-        return returnDataList(result);\n+        return taskInstanceService.forceTaskSuccess(loginUser, projectName, taskInstanceId);\n     }\n \n }"
  },
  {
    "sha": "1eff47a16137387fc0e0a0764da4e15db4808e4d",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskRecordController.java",
    "status": "modified",
    "additions": 27,
    "deletions": 24,
    "changes": 51,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskRecordController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskRecordController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskRecordController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -22,7 +22,9 @@\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.TaskRecordService;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n+import org.apache.dolphinscheduler.dao.entity.TaskRecord;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n import java.util.Map;\n@@ -73,22 +75,23 @@\n     @GetMapping(\"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_TASK_RECORD_LIST_PAGING_ERROR)\n-    public Result queryTaskRecordListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                            @RequestParam(value = \"taskName\", required = false) String taskName,\n-                                            @RequestParam(value = \"state\", required = false) String state,\n-                                            @RequestParam(value = \"sourceTable\", required = false) String sourceTable,\n-                                            @RequestParam(value = \"destTable\", required = false) String destTable,\n-                                            @RequestParam(value = \"taskDate\", required = false) String taskDate,\n-                                            @RequestParam(value = \"startDate\", required = false) String startTime,\n-                                            @RequestParam(value = \"endDate\", required = false) String endTime,\n-                                            @RequestParam(\"pageNo\") Integer pageNo,\n-                                            @RequestParam(\"pageSize\") Integer pageSize\n+    public Result<PageListVO<TaskRecord>> queryTaskRecordListPaging(\n+            @ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+            @RequestParam(value = \"taskName\", required = false) String taskName,\n+            @RequestParam(value = \"state\", required = false) String state,\n+            @RequestParam(value = \"sourceTable\", required = false) String sourceTable,\n+            @RequestParam(value = \"destTable\", required = false) String destTable,\n+            @RequestParam(value = \"taskDate\", required = false) String taskDate,\n+            @RequestParam(value = \"startDate\", required = false) String startTime,\n+            @RequestParam(value = \"endDate\", required = false) String endTime,\n+            @RequestParam(\"pageNo\") Integer pageNo,\n+            @RequestParam(\"pageSize\") Integer pageSize\n     ) {\n \n         logger.info(\"query task record list, task name:{}, state :{}, taskDate: {}, start:{}, end:{}\",\n                 taskName, state, taskDate, startTime, endTime);\n-        Map<String, Object> result = taskRecordService.queryTaskRecordListPaging(false, taskName, startTime, taskDate, sourceTable, destTable, endTime, state, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return taskRecordService.queryTaskRecordListPaging(false, taskName, startTime, taskDate, sourceTable,\n+                destTable, endTime, state, pageNo, pageSize);\n     }\n \n     /**\n@@ -109,22 +112,22 @@ public Result queryTaskRecordListPaging(@ApiIgnore @RequestAttribute(value = Con\n     @GetMapping(\"/history-list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_TASK_RECORD_LIST_PAGING_ERROR)\n-    public Result queryHistoryTaskRecordListPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                                   @RequestParam(value = \"taskName\", required = false) String taskName,\n-                                                   @RequestParam(value = \"state\", required = false) String state,\n-                                                   @RequestParam(value = \"sourceTable\", required = false) String sourceTable,\n-                                                   @RequestParam(value = \"destTable\", required = false) String destTable,\n-                                                   @RequestParam(value = \"taskDate\", required = false) String taskDate,\n-                                                   @RequestParam(value = \"startDate\", required = false) String startTime,\n-                                                   @RequestParam(value = \"endDate\", required = false) String endTime,\n-                                                   @RequestParam(\"pageNo\") Integer pageNo,\n-                                                   @RequestParam(\"pageSize\") Integer pageSize\n+    public Result<PageListVO<TaskRecord>> queryHistoryTaskRecordListPaging(\n+            @ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+            @RequestParam(value = \"taskName\", required = false) String taskName,\n+            @RequestParam(value = \"state\", required = false) String state,\n+            @RequestParam(value = \"sourceTable\", required = false) String sourceTable,\n+            @RequestParam(value = \"destTable\", required = false) String destTable,\n+            @RequestParam(value = \"taskDate\", required = false) String taskDate,\n+            @RequestParam(value = \"startDate\", required = false) String startTime,\n+            @RequestParam(value = \"endDate\", required = false) String endTime,\n+            @RequestParam(\"pageNo\") Integer pageNo,\n+            @RequestParam(\"pageSize\") Integer pageSize\n     ) {\n \n         logger.info(\"query hisotry task record list, task name:{}, state :{}, taskDate: {}, start:{}, end:{}\",\n                 taskName, state, taskDate, startTime, endTime);\n-        Map<String, Object> result = taskRecordService.queryTaskRecordListPaging(true, taskName, startTime, taskDate, sourceTable, destTable, endTime, state, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return taskRecordService.queryTaskRecordListPaging(true, taskName, startTime, taskDate, sourceTable, destTable, endTime, state, pageNo, pageSize);\n     }\n \n }"
  },
  {
    "sha": "409921f5f4611fb494c5e6ca3136435d061b8d9e",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java",
    "status": "modified",
    "additions": 28,
    "deletions": 30,
    "changes": 58,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -24,16 +24,19 @@\n import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_TENANT_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.VERIFY_OS_TENANT_CODE_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.TenantService;\n import org.apache.dolphinscheduler.api.utils.RegexUtils;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n+import org.apache.dolphinscheduler.dao.entity.Tenant;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n+import java.util.List;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -85,15 +88,14 @@\n     @PostMapping(value = \"/create\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(CREATE_TENANT_ERROR)\n-    public Result createTenant(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                               @RequestParam(value = \"tenantCode\") String tenantCode,\n-                               @RequestParam(value = \"queueId\") int queueId,\n-                               @RequestParam(value = \"description\", required = false) String description) throws Exception {\n+    public Result<Void> createTenant(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                     @RequestParam(value = \"tenantCode\") String tenantCode,\n+                                     @RequestParam(value = \"queueId\") int queueId,\n+                                     @RequestParam(value = \"description\", required = false) String description) throws Exception {\n         logger.info(\"login user {}, create tenant, tenantCode: {}, queueId: {}, desc: {}\",\n                 RegexUtils.escapeNRT(loginUser.getUserName()), RegexUtils.escapeNRT(tenantCode),\n                 queueId, RegexUtils.escapeNRT(description));\n-        Map<String, Object> result = tenantService.createTenant(loginUser, tenantCode, queueId, description);\n-        return returnDataList(result);\n+        return tenantService.createTenant(loginUser, tenantCode, queueId, description);\n     }\n \n     /**\n@@ -114,19 +116,18 @@ public Result createTenant(@ApiIgnore @RequestAttribute(value = Constants.SESSIO\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_TENANT_LIST_PAGING_ERROR)\n-    public Result queryTenantlistPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                        @RequestParam(\"pageNo\") Integer pageNo,\n-                                        @RequestParam(\"pageSize\") Integer pageSize) {\n+    public Result<PageListVO<Tenant>> queryTenantlistPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                            @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+                                                            @RequestParam(\"pageNo\") Integer pageNo,\n+                                                            @RequestParam(\"pageSize\") Integer pageSize) {\n         logger.info(\"login user {}, list paging, pageNo: {}, searchVal: {}, pageSize: {}\",\n                 loginUser.getUserName(), pageNo, searchVal, pageSize);\n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+        CheckParamResult checkResult = checkPageParams(pageNo, pageSize);\n+        if (checkResult.getStatus() != Status.SUCCESS) {\n+            return Result.error(checkResult);\n         }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        result = tenantService.queryTenantList(loginUser, searchVal, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return tenantService.queryTenantList(loginUser, searchVal, pageNo, pageSize);\n     }\n \n \n@@ -140,10 +141,9 @@ public Result queryTenantlistPaging(@ApiIgnore @RequestAttribute(value = Constan\n     @GetMapping(value = \"/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_TENANT_LIST_ERROR)\n-    public Result queryTenantlist(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<Tenant>> queryTenantlist(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user {}, query tenant list\", loginUser.getUserName());\n-        Map<String, Object> result = tenantService.queryTenantList(loginUser);\n-        return returnDataList(result);\n+        return tenantService.queryTenantList(loginUser);\n     }\n \n \n@@ -168,17 +168,16 @@ public Result queryTenantlist(@ApiIgnore @RequestAttribute(value = Constants.SES\n     @PostMapping(value = \"/update\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_TENANT_ERROR)\n-    public Result updateTenant(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                               @RequestParam(value = \"id\") int id,\n-                               @RequestParam(value = \"tenantCode\") String tenantCode,\n-                               @RequestParam(value = \"queueId\") int queueId,\n-                               @RequestParam(value = \"description\", required = false) String description) throws Exception {\n+    public Result<Void> updateTenant(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                     @RequestParam(value = \"id\") int id,\n+                                     @RequestParam(value = \"tenantCode\") String tenantCode,\n+                                     @RequestParam(value = \"queueId\") int queueId,\n+                                     @RequestParam(value = \"description\", required = false) String description) throws Exception {\n         String userReplace = RegexUtils.escapeNRT(loginUser.getUserName());\n         String tenantCodeReplace = RegexUtils.escapeNRT(tenantCode);\n         String descReplace = RegexUtils.escapeNRT(description);\n         logger.info(\"login user {}, create tenant, tenantCode: {}, queueId: {}, desc: {}\", userReplace, tenantCodeReplace, queueId, descReplace);\n-        Map<String, Object> result = tenantService.updateTenant(loginUser, id, tenantCode, queueId, description);\n-        return returnDataList(result);\n+        return tenantService.updateTenant(loginUser, id, tenantCode, queueId, description);\n     }\n \n     /**\n@@ -196,11 +195,10 @@ public Result updateTenant(@ApiIgnore @RequestAttribute(value = Constants.SESSIO\n     @PostMapping(value = \"/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_TENANT_BY_ID_ERROR)\n-    public Result deleteTenantById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                   @RequestParam(value = \"id\") int id) throws Exception {\n+    public Result<Void> deleteTenantById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                         @RequestParam(value = \"id\") int id) throws Exception {\n         logger.info(\"login user {}, delete tenant, tenantId: {},\", loginUser.getUserName(), id);\n-        Map<String, Object> result = tenantService.deleteTenantById(loginUser, id);\n-        return returnDataList(result);\n+        return tenantService.deleteTenantById(loginUser, id);\n     }\n \n     /**"
  },
  {
    "sha": "3d142c35a7df894bc19cf71310a5831a825ac91e",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java",
    "status": "modified",
    "additions": 7,
    "deletions": 7,
    "changes": 14,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -24,8 +24,10 @@\n import org.apache.dolphinscheduler.api.utils.Result;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.enums.PluginType;\n+import org.apache.dolphinscheduler.dao.entity.PluginDefine;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n+import java.util.List;\n import java.util.Map;\n \n import org.slf4j.Logger;\n@@ -68,12 +70,11 @@\n     @PostMapping(value = \"/queryUiPluginsByType\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(QUERY_PLUGINS_ERROR)\n-    public Result queryUiPluginsByType(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                       @RequestParam(value = \"pluginType\") PluginType pluginType) {\n+    public Result<List<PluginDefine>> queryUiPluginsByType(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                           @RequestParam(value = \"pluginType\") PluginType pluginType) {\n \n         logger.info(\"query plugins by type , pluginType: {}\", pluginType);\n-        Map<String, Object> result = uiPluginService.queryUiPluginsByType(pluginType);\n-        return returnDataList(result);\n+        return uiPluginService.queryUiPluginsByType(pluginType);\n     }\n \n     @ApiOperation(value = \"queryUiPluginDetailById\", notes = \"QUERY_UI_PLUGIN_DETAIL_BY_ID\")\n@@ -83,11 +84,10 @@ public Result queryUiPluginsByType(@ApiIgnore @RequestAttribute(value = Constant\n     @PostMapping(value = \"/queryUiPluginDetailById\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(QUERY_PLUGINS_ERROR)\n-    public Result queryUiPluginDetailById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<PluginDefine> queryUiPluginDetailById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                           @RequestParam(\"pluginId\") Integer pluginId) {\n \n         logger.info(\"query plugin detail by id , pluginId: {}\", pluginId);\n-        Map<String, Object> result = uiPluginService.queryUiPluginDetailById(pluginId);\n-        return returnDataList(result);\n+        return uiPluginService.queryUiPluginDetailById(pluginId);\n     }\n }"
  },
  {
    "sha": "d72718f217b37d5531af15be1949494d4adb869a",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java",
    "status": "modified",
    "additions": 62,
    "deletions": 76,
    "changes": 138,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -31,10 +31,12 @@\n import static org.apache.dolphinscheduler.api.enums.Status.USER_LIST_ERROR;\n import static org.apache.dolphinscheduler.api.enums.Status.VERIFY_USERNAME_ERROR;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.UsersService;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n import org.apache.dolphinscheduler.dao.entity.User;\n@@ -100,7 +102,7 @@\n     @PostMapping(value = \"/create\")\n     @ResponseStatus(HttpStatus.CREATED)\n     @ApiException(CREATE_USER_ERROR)\n-    public Result createUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> createUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                              @RequestParam(value = \"userName\") String userName,\n                              @RequestParam(value = \"userPassword\") String userPassword,\n                              @RequestParam(value = \"tenantId\") int tenantId,\n@@ -110,8 +112,7 @@ public Result createUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_\n                              @RequestParam(value = \"state\", required = false) int state) throws Exception {\n         logger.info(\"login user {}, create user, userName: {}, email: {}, tenantId: {}, userPassword: {}, phone: {}, user queue: {}, state: {}\",\n                 loginUser.getUserName(), userName, email, tenantId, Constants.PASSWORD_DEFAULT, phone, queue, state);\n-        Map<String, Object> result = usersService.createUser(loginUser, userName, userPassword, email, tenantId, phone, queue, state);\n-        return returnDataList(result);\n+        return usersService.createUser(loginUser, userName, userPassword, email, tenantId, phone, queue, state);\n     }\n \n     /**\n@@ -132,19 +133,18 @@ public Result createUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_USER_LIST_PAGING_ERROR)\n-    public Result queryUserList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                @RequestParam(\"pageNo\") Integer pageNo,\n-                                @RequestParam(\"pageSize\") Integer pageSize,\n-                                @RequestParam(value = \"searchVal\", required = false) String searchVal) {\n+    public Result<PageListVO<User>> queryUserList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                  @RequestParam(\"pageNo\") Integer pageNo,\n+                                                  @RequestParam(\"pageSize\") Integer pageSize,\n+                                                  @RequestParam(value = \"searchVal\", required = false) String searchVal) {\n         logger.info(\"login user {}, list user paging, pageNo: {}, searchVal: {}, pageSize: {}\",\n                 loginUser.getUserName(), pageNo, searchVal, pageSize);\n-        Map<String, Object> result = checkPageParams(pageNo, pageSize);\n-        if (result.get(Constants.STATUS) != Status.SUCCESS) {\n-            return returnDataListPaging(result);\n+        CheckParamResult result = checkPageParams(pageNo, pageSize);\n+        if (result.getStatus() != Status.SUCCESS) {\n+            return error(result);\n         }\n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        result = usersService.queryUserList(loginUser, searchVal, pageNo, pageSize);\n-        return returnDataListPaging(result);\n+        return usersService.queryUserList(loginUser, searchVal, pageNo, pageSize);\n     }\n \n \n@@ -175,19 +175,18 @@ public Result queryUserList(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @PostMapping(value = \"/update\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_USER_ERROR)\n-    public Result updateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                             @RequestParam(value = \"id\") int id,\n-                             @RequestParam(value = \"userName\") String userName,\n-                             @RequestParam(value = \"userPassword\") String userPassword,\n-                             @RequestParam(value = \"queue\", required = false, defaultValue = \"\") String queue,\n-                             @RequestParam(value = \"email\") String email,\n-                             @RequestParam(value = \"tenantId\") int tenantId,\n-                             @RequestParam(value = \"phone\", required = false) String phone,\n-                             @RequestParam(value = \"state\", required = false) int state) throws Exception {\n+    public Result<Void> updateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                   @RequestParam(value = \"id\") int id,\n+                                   @RequestParam(value = \"userName\") String userName,\n+                                   @RequestParam(value = \"userPassword\") String userPassword,\n+                                   @RequestParam(value = \"queue\", required = false, defaultValue = \"\") String queue,\n+                                   @RequestParam(value = \"email\") String email,\n+                                   @RequestParam(value = \"tenantId\") int tenantId,\n+                                   @RequestParam(value = \"phone\", required = false) String phone,\n+                                   @RequestParam(value = \"state\", required = false) int state) throws Exception {\n         logger.info(\"login user {}, updateProcessInstance user, userName: {}, email: {}, tenantId: {}, userPassword: {}, phone: {}, user queue: {}, state: {}\",\n                 loginUser.getUserName(), userName, email, tenantId, Constants.PASSWORD_DEFAULT, phone, queue, state);\n-        Map<String, Object> result = usersService.updateUser(loginUser, id, userName, userPassword, email, tenantId, phone, queue, state);\n-        return returnDataList(result);\n+        return usersService.updateUser(loginUser, id, userName, userPassword, email, tenantId, phone, queue, state);\n     }\n \n     /**\n@@ -204,11 +203,10 @@ public Result updateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_\n     @PostMapping(value = \"/delete\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(DELETE_USER_BY_ID_ERROR)\n-    public Result delUserById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                              @RequestParam(value = \"id\") int id) throws Exception {\n+    public Result<Void> delUserById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                    @RequestParam(value = \"id\") int id) throws Exception {\n         logger.info(\"login user {}, delete user, userId: {},\", loginUser.getUserName(), id);\n-        Map<String, Object> result = usersService.deleteUserById(loginUser, id);\n-        return returnDataList(result);\n+        return usersService.deleteUserById(loginUser, id);\n     }\n \n     /**\n@@ -227,12 +225,11 @@ public Result delUserById(@ApiIgnore @RequestAttribute(value = Constants.SESSION\n     @PostMapping(value = \"/grant-project\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(GRANT_PROJECT_ERROR)\n-    public Result grantProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                               @RequestParam(value = \"userId\") int userId,\n-                               @RequestParam(value = \"projectIds\") String projectIds) {\n+    public Result<Void> grantProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                     @RequestParam(value = \"userId\") int userId,\n+                                     @RequestParam(value = \"projectIds\") String projectIds) {\n         logger.info(\"login user {}, grant project, userId: {},projectIds : {}\", loginUser.getUserName(), userId, projectIds);\n-        Map<String, Object> result = usersService.grantProject(loginUser, userId, projectIds);\n-        return returnDataList(result);\n+        return usersService.grantProject(loginUser, userId, projectIds);\n     }\n \n     /**\n@@ -251,12 +248,11 @@ public Result grantProject(@ApiIgnore @RequestAttribute(value = Constants.SESSIO\n     @PostMapping(value = \"/grant-file\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(GRANT_RESOURCE_ERROR)\n-    public Result grantResource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                @RequestParam(value = \"userId\") int userId,\n-                                @RequestParam(value = \"resourceIds\") String resourceIds) {\n+    public Result<Void> grantResource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                      @RequestParam(value = \"userId\") int userId,\n+                                      @RequestParam(value = \"resourceIds\") String resourceIds) {\n         logger.info(\"login user {}, grant project, userId: {},resourceIds : {}\", loginUser.getUserName(), userId, resourceIds);\n-        Map<String, Object> result = usersService.grantResources(loginUser, userId, resourceIds);\n-        return returnDataList(result);\n+        return usersService.grantResources(loginUser, userId, resourceIds);\n     }\n \n \n@@ -276,12 +272,11 @@ public Result grantResource(@ApiIgnore @RequestAttribute(value = Constants.SESSI\n     @PostMapping(value = \"/grant-udf-func\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(GRANT_UDF_FUNCTION_ERROR)\n-    public Result grantUDFFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> grantUDFFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                @RequestParam(value = \"userId\") int userId,\n                                @RequestParam(value = \"udfIds\") String udfIds) {\n         logger.info(\"login user {}, grant project, userId: {},resourceIds : {}\", loginUser.getUserName(), userId, udfIds);\n-        Map<String, Object> result = usersService.grantUDFFunction(loginUser, userId, udfIds);\n-        return returnDataList(result);\n+        return usersService.grantUDFFunction(loginUser, userId, udfIds);\n     }\n \n \n@@ -301,12 +296,11 @@ public Result grantUDFFunc(@ApiIgnore @RequestAttribute(value = Constants.SESSIO\n     @PostMapping(value = \"/grant-datasource\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(GRANT_DATASOURCE_ERROR)\n-    public Result grantDataSource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<Void> grantDataSource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                   @RequestParam(value = \"userId\") int userId,\n                                   @RequestParam(value = \"datasourceIds\") String datasourceIds) {\n         logger.info(\"login user {}, grant project, userId: {},projectIds : {}\", loginUser.getUserName(), userId, datasourceIds);\n-        Map<String, Object> result = usersService.grantDataSource(loginUser, userId, datasourceIds);\n-        return returnDataList(result);\n+        return usersService.grantDataSource(loginUser, userId, datasourceIds);\n     }\n \n \n@@ -320,10 +314,9 @@ public Result grantDataSource(@ApiIgnore @RequestAttribute(value = Constants.SES\n     @GetMapping(value = \"/get-user-info\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(GET_USER_INFO_ERROR)\n-    public Result getUserInfo(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<User> getUserInfo(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user {},get user info\", loginUser.getUserName());\n-        Map<String, Object> result = usersService.getUserInfo(loginUser);\n-        return returnDataList(result);\n+        return usersService.getUserInfo(loginUser);\n     }\n \n     /**\n@@ -336,10 +329,9 @@ public Result getUserInfo(@ApiIgnore @RequestAttribute(value = Constants.SESSION\n     @GetMapping(value = \"/list\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(USER_LIST_ERROR)\n-    public Result listUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<User>> listUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user {}, user list\", loginUser.getUserName());\n-        Map<String, Object> result = usersService.queryAllGeneralUsers(loginUser);\n-        return returnDataList(result);\n+        return usersService.queryAllGeneralUsers(loginUser);\n     }\n \n \n@@ -352,10 +344,9 @@ public Result listUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_US\n     @GetMapping(value = \"/list-all\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(USER_LIST_ERROR)\n-    public Result listAll(@RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+    public Result<List<User>> listAll(@RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n         logger.info(\"login user {}, user list\", loginUser.getUserName());\n-        Map<String, Object> result = usersService.queryUserList(loginUser);\n-        return returnDataList(result);\n+        return usersService.queryUserList(loginUser);\n     }\n \n \n@@ -396,12 +387,11 @@ public Result verifyUserName(@ApiIgnore @RequestAttribute(value = Constants.SESS\n     @GetMapping(value = \"/unauth-user\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UNAUTHORIZED_USER_ERROR)\n-    public Result unauthorizedUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<List<User>> unauthorizedUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                    @RequestParam(\"alertgroupId\") Integer alertgroupId) {\n         logger.info(\"unauthorized user, login user:{}, alert group id:{}\",\n                 loginUser.getUserName(), alertgroupId);\n-        Map<String, Object> result = usersService.unauthorizedUser(loginUser, alertgroupId);\n-        return returnDataList(result);\n+        return usersService.unauthorizedUser(loginUser, alertgroupId);\n     }\n \n \n@@ -419,16 +409,15 @@ public Result unauthorizedUser(@ApiIgnore @RequestAttribute(value = Constants.SE\n     @GetMapping(value = \"/authed-user\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(AUTHORIZED_USER_ERROR)\n-    public Result authorizedUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+    public Result<List<User>> authorizedUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                  @RequestParam(\"alertgroupId\") Integer alertgroupId) {\n         try {\n             logger.info(\"authorized user , login user:{}, alert group id:{}\",\n                     loginUser.getUserName(), alertgroupId);\n-            Map<String, Object> result = usersService.authorizedUser(loginUser, alertgroupId);\n-            return returnDataList(result);\n+            return usersService.authorizedUser(loginUser, alertgroupId);\n         } catch (Exception e) {\n             logger.error(Status.AUTHORIZED_USER_ERROR.getMsg(), e);\n-            return error(Status.AUTHORIZED_USER_ERROR.getCode(), Status.AUTHORIZED_USER_ERROR.getMsg());\n+            return Result.error(Status.AUTHORIZED_USER_ERROR);\n         }\n     }\n \n@@ -440,7 +429,7 @@ public Result authorizedUser(@ApiIgnore @RequestAttribute(value = Constants.SESS\n      * @param repeatPassword repeat password\n      * @param email          user email\n      */\n-    @ApiOperation(value=\"registerUser\",notes = \"REGISTER_USER_NOTES\")\n+    @ApiOperation(value = \"registerUser\", notes = \"REGISTER_USER_NOTES\")\n     @ApiImplicitParams({\n             @ApiImplicitParam(name = \"userName\", value = \"USER_NAME\", type = \"String\"),\n             @ApiImplicitParam(name = \"userPassword\", value = \"USER_PASSWORD\", type = \"String\"),\n@@ -450,58 +439,55 @@ public Result authorizedUser(@ApiIgnore @RequestAttribute(value = Constants.SESS\n     @PostMapping(\"/register\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(CREATE_USER_ERROR)\n-    public Result<Object> registerUser(@RequestParam(value = \"userName\") String userName,\n-                               @RequestParam(value = \"userPassword\") String userPassword,\n-                               @RequestParam(value = \"repeatPassword\") String repeatPassword,\n-                               @RequestParam(value = \"email\") String email) throws Exception {\n+    public Result<User> registerUser(@RequestParam(value = \"userName\") String userName,\n+                                     @RequestParam(value = \"userPassword\") String userPassword,\n+                                     @RequestParam(value = \"repeatPassword\") String repeatPassword,\n+                                     @RequestParam(value = \"email\") String email) throws Exception {\n         userName = ParameterUtils.handleEscapes(userName);\n         userPassword = ParameterUtils.handleEscapes(userPassword);\n         repeatPassword = ParameterUtils.handleEscapes(repeatPassword);\n         email = ParameterUtils.handleEscapes(email);\n         logger.info(\"user self-register, userName: {}, userPassword {}, repeatPassword {}, eamil {}\",\n                 userName, Constants.PASSWORD_DEFAULT, Constants.PASSWORD_DEFAULT, email);\n-        Map<String, Object> result = usersService.registerUser(userName, userPassword, repeatPassword, email);\n-        return returnDataList(result);\n+        return usersService.registerUser(userName, userPassword, repeatPassword, email);\n     }\n \n     /**\n      * user activate\n      *\n      * @param userName       user name\n      */\n-    @ApiOperation(value=\"activateUser\",notes = \"ACTIVATE_USER_NOTES\")\n+    @ApiOperation(value = \"activateUser\", notes = \"ACTIVATE_USER_NOTES\")\n     @ApiImplicitParams({\n             @ApiImplicitParam(name = \"userName\", value = \"USER_NAME\", type = \"String\"),\n     })\n     @PostMapping(\"/activate\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_USER_ERROR)\n-    public Result<Object> activateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                       @RequestParam(value = \"userName\") String userName) {\n+    public Result<User> activateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                     @RequestParam(value = \"userName\") String userName) {\n         userName = ParameterUtils.handleEscapes(userName);\n         logger.info(\"login user {}, activate user, userName: {}\",\n                 loginUser.getUserName(), userName);\n-        Map<String, Object> result = usersService.activateUser(loginUser, userName);\n-        return returnDataList(result);\n+        return usersService.activateUser(loginUser, userName);\n     }\n \n     /**\n      * user batch activate\n      *\n      * @param  userNames       user names\n      */\n-    @ApiOperation(value = \"batchActivateUser\",notes = \"BATCH_ACTIVATE_USER_NOTES\")\n+    @ApiOperation(value = \"batchActivateUser\", notes = \"BATCH_ACTIVATE_USER_NOTES\")\n     @ApiImplicitParams({\n             @ApiImplicitParam(name = \"userNames\", value = \"USER_NAMES\", type = \"String\"),\n     })\n     @PostMapping(\"/batch/activate\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(UPDATE_USER_ERROR)\n-    public Result<Object> batchActivateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                       @RequestBody List<String> userNames) {\n+    public Result<Map<String, Object>> batchActivateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                         @RequestBody List<String> userNames) {\n         List<String> formatUserNames = userNames.stream().map(ParameterUtils::handleEscapes).collect(Collectors.toList());\n         logger.info(\" activate userNames: {}\", formatUserNames);\n-        Map<String, Object> result = usersService.batchActivateUser(loginUser, formatUserNames);\n-        return returnDataList(result);\n+        return usersService.batchActivateUser(loginUser, formatUserNames);\n     }\n }"
  },
  {
    "sha": "81b33eb0fb849abc10851b9fb635022e0031f7db",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -66,11 +66,10 @@\n                                                                     @ApiIgnore @RequestParam(value = \"searchVal\", required = false) String searchVal) {\n         try {\n             searchVal = ParameterUtils.handleEscapes(searchVal);\n-            Map<String, Object> result = workFlowLineageService.queryWorkFlowLineageByName(searchVal,projectId);\n-            return returnDataList(result);\n+            return workFlowLineageService.queryWorkFlowLineageByName(searchVal, projectId);\n         } catch (Exception e) {\n             logger.error(QUERY_WORKFLOW_LINEAGE_ERROR.getMsg(),e);\n-            return error(QUERY_WORKFLOW_LINEAGE_ERROR.getCode(), QUERY_WORKFLOW_LINEAGE_ERROR.getMsg());\n+            return Result.error(QUERY_WORKFLOW_LINEAGE_ERROR);\n         }\n     }\n \n@@ -89,11 +88,10 @@\n                 }\n             }\n \n-            Map<String, Object> result = workFlowLineageService.queryWorkFlowLineageByIds(idsSet, projectId);\n-            return returnDataList(result);\n+            return workFlowLineageService.queryWorkFlowLineageByIds(idsSet, projectId);\n         } catch (Exception e) {\n             logger.error(QUERY_WORKFLOW_LINEAGE_ERROR.getMsg(),e);\n-            return error(QUERY_WORKFLOW_LINEAGE_ERROR.getCode(), QUERY_WORKFLOW_LINEAGE_ERROR.getMsg());\n+            return Result.error(QUERY_WORKFLOW_LINEAGE_ERROR);\n         }\n     }\n }"
  },
  {
    "sha": "8e9230a2287d029092603f6ee19ef7772966617e",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java",
    "status": "modified",
    "additions": 10,
    "deletions": 9,
    "changes": 19,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -22,11 +22,14 @@\n import org.apache.dolphinscheduler.api.exceptions.ApiException;\n import org.apache.dolphinscheduler.api.service.WorkerGroupService;\n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.Constants;\n import org.apache.dolphinscheduler.common.utils.ParameterUtils;\n import org.apache.dolphinscheduler.dao.entity.User;\n+import org.apache.dolphinscheduler.dao.entity.WorkerGroup;\n \n import java.util.Map;\n+import java.util.Set;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -76,17 +79,16 @@\n     @GetMapping(value = \"/list-paging\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_WORKER_GROUP_FAIL)\n-    public Result queryAllWorkerGroupsPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                             @RequestParam(\"pageNo\") Integer pageNo,\n-                                             @RequestParam(value = \"searchVal\", required = false) String searchVal,\n-                                             @RequestParam(\"pageSize\") Integer pageSize\n+    public Result<PageListVO<WorkerGroup>> queryAllWorkerGroupsPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                                                      @RequestParam(\"pageNo\") Integer pageNo,\n+                                                                      @RequestParam(value = \"searchVal\", required = false) String searchVal,\n+                                                                      @RequestParam(\"pageSize\") Integer pageSize\n     ) {\n         logger.info(\"query all worker group paging: login user {}, pageNo:{}, pageSize:{}, searchVal:{}\",\n                 loginUser.getUserName(), pageNo, pageSize, searchVal);\n \n         searchVal = ParameterUtils.handleEscapes(searchVal);\n-        Map<String, Object> result = workerGroupService.queryAllGroupPaging(loginUser, pageNo, pageSize, searchVal);\n-        return returnDataListPaging(result);\n+        return workerGroupService.queryAllGroupPaging(loginUser, pageNo, pageSize, searchVal);\n     }\n \n     /**\n@@ -99,13 +101,12 @@ public Result queryAllWorkerGroupsPaging(@ApiIgnore @RequestAttribute(value = Co\n     @GetMapping(value = \"/all-groups\")\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_WORKER_GROUP_FAIL)\n-    public Result queryAllWorkerGroups(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser\n+    public Result<Set<String>> queryAllWorkerGroups(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser\n     ) {\n         logger.info(\"query all worker group: login user {}\",\n                 loginUser.getUserName());\n \n-        Map<String, Object> result = workerGroupService.queryAllGroup();\n-        return returnDataList(result);\n+        return workerGroupService.queryAllGroup();\n     }\n \n "
  },
  {
    "sha": "e7e1991cbb59f34a77549af9c802f4bf58eb7ac0",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CheckParamResult.java",
    "status": "added",
    "additions": 60,
    "deletions": 0,
    "changes": 60,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CheckParamResult.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CheckParamResult.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CheckParamResult.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.api.dto;\n+\n+import org.apache.dolphinscheduler.api.enums.Status;\n+\n+import java.io.Serializable;\n+\n+public class CheckParamResult implements Serializable {\n+\n+    private Status status;\n+\n+    private String msg;\n+\n+    public CheckParamResult() {\n+\n+    }\n+\n+    public CheckParamResult(Status status) {\n+        this.status = status;\n+        this.msg = status.getMsg();\n+    }\n+\n+    public CheckParamResult(Status status, String mes) {\n+        this.status = status;\n+        this.msg = mes;\n+    }\n+\n+    public Status getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+\n+    public String getMsg() {\n+        return msg;\n+    }\n+\n+    public void setMsg(String msg) {\n+        this.msg = msg;\n+    }\n+\n+}"
  },
  {
    "sha": "79057c53d59d6d1e4e9c1ad3bd94528c96dc52fa",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CheckParamResultWithInfo.java",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CheckParamResultWithInfo.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CheckParamResultWithInfo.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CheckParamResultWithInfo.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.api.dto;\n+\n+public class CheckParamResultWithInfo<T> extends CheckParamResult {\n+    private T info;\n+\n+    public void setInfo(T info) {\n+        this.info = info;\n+    }\n+\n+    public T getInfo() {\n+        return info;\n+    }\n+}"
  },
  {
    "sha": "9fb38f20d64ed6cb6a964d875e15c23d7079eee2",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 7,
    "changes": 15,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -17,10 +17,11 @@\n \n package org.apache.dolphinscheduler.api.service;\n \n+import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n+import org.apache.dolphinscheduler.dao.entity.AccessToken;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n-\n /**\n  * access token service\n  */\n@@ -35,7 +36,7 @@\n      * @param pageSize page size\n      * @return token list for page number and page size\n      */\n-    Map<String, Object> queryAccessTokenList(User loginUser, String searchVal, Integer pageNo, Integer pageSize);\n+    Result<PageListVO<AccessToken>> queryAccessTokenList(User loginUser, String searchVal, Integer pageNo, Integer pageSize);\n \n     /**\n      * create token\n@@ -45,7 +46,7 @@\n      * @param token token string\n      * @return create result code\n      */\n-    Map<String, Object> createToken(User loginUser, int userId, String expireTime, String token);\n+    Result<Void> createToken(User loginUser, int userId, String expireTime, String token);\n \n \n     /**\n@@ -55,7 +56,7 @@\n      * @param expireTime token expire time\n      * @return token string\n      */\n-    Map<String, Object> generateToken(User loginUser, int userId, String expireTime);\n+    Result<String> generateToken(User loginUser, int userId, String expireTime);\n \n     /**\n      * delete access token\n@@ -64,7 +65,7 @@\n      * @param id token id\n      * @return delete result code\n      */\n-    Map<String, Object> delAccessTokenById(User loginUser, int id);\n+    Result<Void> delAccessTokenById(User loginUser, int id);\n \n     /**\n      * update token by id\n@@ -75,5 +76,5 @@\n      * @param token token string\n      * @return update result code\n      */\n-    Map<String, Object> updateToken(User loginUser, int id, int userId, String expireTime, String token);\n+    Result<Void> updateToken(User loginUser, int id, int userId, String expireTime, String token);\n }"
  },
  {
    "sha": "5e6d1e58ba204cf4c2d8e6f19494b96225a205b1",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java",
    "status": "modified",
    "additions": 9,
    "deletions": 6,
    "changes": 15,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -17,9 +17,12 @@\n \n package org.apache.dolphinscheduler.api.service;\n \n+import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n+import org.apache.dolphinscheduler.dao.entity.AlertGroup;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n-import java.util.Map;\n+import java.util.List;\n \n /**\n  * alert group service\n@@ -31,7 +34,7 @@\n      *\n      * @return alert group list\n      */\n-    Map<String, Object> queryAlertgroup();\n+    Result<List<AlertGroup>> queryAlertgroup();\n \n     /**\n      * paging query alarm group list\n@@ -42,7 +45,7 @@\n      * @param pageSize page size\n      * @return alert group list page\n      */\n-    Map<String, Object> listPaging(User loginUser, String searchVal, Integer pageNo, Integer pageSize);\n+    Result<PageListVO<AlertGroup>> listPaging(User loginUser, String searchVal, Integer pageNo, Integer pageSize);\n \n     /**\n      * create alert group\n@@ -53,7 +56,7 @@\n      * @param alertInstanceIds alertInstanceIds\n      * @return create result code\n      */\n-    Map<String, Object> createAlertgroup(User loginUser, String groupName, String desc, String alertInstanceIds);\n+    Result<Void> createAlertgroup(User loginUser, String groupName, String desc, String alertInstanceIds);\n \n     /**\n      * updateProcessInstance alert group\n@@ -65,7 +68,7 @@\n      * @param alertInstanceIds alertInstanceIds\n      * @return update result code\n      */\n-    Map<String, Object> updateAlertgroup(User loginUser, int id, String groupName, String desc, String alertInstanceIds);\n+    Result<Void> updateAlertgroup(User loginUser, int id, String groupName, String desc, String alertInstanceIds);\n \n     /**\n      * delete alert group by id\n@@ -74,7 +77,7 @@\n      * @param id alert group id\n      * @return delete result code\n      */\n-    Map<String, Object> delAlertgroupById(User loginUser, int id);\n+    Result<Void> delAlertgroupById(User loginUser, int id);\n \n     /**\n      * verify group name exists"
  },
  {
    "sha": "88bf75f189c766290954b67bdd08ffea2b184cb6",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceService.java",
    "status": "modified",
    "additions": 13,
    "deletions": 7,
    "changes": 20,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceService.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceService.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceService.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -17,8 +17,13 @@\n \n package org.apache.dolphinscheduler.api.service;\n \n+import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.AlertPluginInstanceVO;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n+import org.apache.dolphinscheduler.dao.entity.AlertPluginInstance;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n+import java.util.List;\n import java.util.Map;\n \n /**\n@@ -35,7 +40,7 @@\n      * @param pluginInstanceParams plugin instance params\n      * @return result\n      */\n-    Map<String, Object> create(User loginUser,int pluginDefineId,String instanceName,String pluginInstanceParams);\n+    Result<Void> create(User loginUser,int pluginDefineId,String instanceName,String pluginInstanceParams);\n \n     /**\n      * update\n@@ -45,7 +50,7 @@\n      * @param pluginInstanceParams plugin instance params\n      * @return result\n      */\n-    Map<String, Object> update(User loginUser, int alertPluginInstanceId,String instanceName,String pluginInstanceParams);\n+    Result<Void> update(User loginUser, int alertPluginInstanceId,String instanceName,String pluginInstanceParams);\n \n     /**\n      * delete alert plugin instance\n@@ -54,7 +59,7 @@\n      * @param id id\n      * @return result\n      */\n-    Map<String, Object> delete(User loginUser, int id);\n+    Result<Void> delete(User loginUser, int id);\n \n     /**\n      * get alert plugin instance\n@@ -63,14 +68,14 @@\n      * @param id get id\n      * @return alert plugin\n      */\n-    Map<String, Object> get(User loginUser, int id);\n+    Result<AlertPluginInstance> get(User loginUser, int id);\n \n     /**\n      * queryAll\n      *\n      * @return alert plugins\n      */\n-    Map<String, Object> queryAll();\n+    Result<List<AlertPluginInstanceVO>> queryAll();\n \n     /**\n      * checkExistPluginInstanceName\n@@ -81,9 +86,10 @@\n \n     /**\n      * queryPluginPage\n+     *\n      * @param pageIndex page index\n-     * @param pageSize  page size\n+     * @param pageSize page size\n      * @return plugins\n      */\n-    Map<String, Object> queryPluginPage(int pageIndex,int pageSize);\n+    Result<PageListVO<AlertPluginInstanceVO>> queryPluginPage(int pageIndex, int pageSize);\n }"
  },
  {
    "sha": "2bf8f4c57cba4787b5c790246b141dd3a1e08b8b",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java",
    "status": "modified",
    "additions": 8,
    "deletions": 6,
    "changes": 14,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -17,11 +17,14 @@\n \n package org.apache.dolphinscheduler.api.service;\n \n+import org.apache.dolphinscheduler.api.dto.CheckParamResult;\n+import org.apache.dolphinscheduler.api.dto.CheckParamResultWithInfo;\n import org.apache.dolphinscheduler.api.enums.Status;\n import org.apache.dolphinscheduler.api.utils.Result;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n import java.io.IOException;\n+import java.util.Date;\n import java.util.Map;\n \n /**\n@@ -41,19 +44,18 @@\n      * isNotAdmin\n      *\n      * @param loginUser login user\n-     * @param result result code\n      * @return true if not administrator, otherwise false\n      */\n-    boolean isNotAdmin(User loginUser, Map<String, Object> result);\n+    boolean isNotAdmin(User loginUser);\n \n     /**\n      * put message to map\n      *\n-     * @param result result code\n+     * @param checkParamResult result code\n      * @param status status\n      * @param statusParams status message\n      */\n-    void putMsg(Map<String, Object> result, Status status, Object... statusParams);\n+    void putMsg(CheckParamResult checkParamResult, Status status, Object... statusParams);\n \n     /**\n      * put message to result object\n@@ -95,7 +97,7 @@\n      *\n      * @param startDateStr start date string\n      * @param endDateStr end date string\n-     * @return map<status,startDate,endDate>\n+     * @return map<status, startDate, endDate>\n      */\n-    Map<String, Object> checkAndParseDateParameters(String startDateStr, String endDateStr);\n+    CheckParamResultWithInfo<Map<String, Date>> checkAndParseDateParameters(String startDateStr, String endDateStr);\n }"
  },
  {
    "sha": "a2d0c449d02512a10d5fc0343b661299aba877e9",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java",
    "status": "modified",
    "additions": 10,
    "deletions": 5,
    "changes": 15,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -17,8 +17,13 @@\n \n package org.apache.dolphinscheduler.api.service;\n \n+import org.apache.dolphinscheduler.api.dto.CommandStateCount;\n+import org.apache.dolphinscheduler.api.dto.DefineUserDto;\n+import org.apache.dolphinscheduler.api.dto.TaskCountDto;\n+import org.apache.dolphinscheduler.api.utils.Result;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n+import java.util.List;\n import java.util.Map;\n \n /**\n@@ -35,7 +40,7 @@\n      * @param endDate end date\n      * @return task state count data\n      */\n-    Map<String, Object> countTaskStateByProject(User loginUser, int projectId, String startDate, String endDate);\n+    Result<TaskCountDto> countTaskStateByProject(User loginUser, int projectId, String startDate, String endDate);\n \n     /**\n      * statistical process instance status data\n@@ -46,7 +51,7 @@\n      * @param endDate end date\n      * @return process instance state count data\n      */\n-    Map<String, Object> countProcessInstanceStateByProject(User loginUser, int projectId, String startDate, String endDate);\n+    Result<TaskCountDto> countProcessInstanceStateByProject(User loginUser, int projectId, String startDate, String endDate);\n \n     /**\n      * statistics the process definition quantities of certain person\n@@ -55,7 +60,7 @@\n      * @param projectId project id\n      * @return definition count data\n      */\n-    Map<String, Object> countDefinitionByUser(User loginUser, int projectId);\n+    Result<DefineUserDto> countDefinitionByUser(User loginUser, int projectId);\n \n     /**\n      * statistical command status data\n@@ -66,7 +71,7 @@\n      * @param endDate end date\n      * @return command state count data\n      */\n-    Map<String, Object> countCommandState(User loginUser, int projectId, String startDate, String endDate);\n+    Result<List<CommandStateCount>> countCommandState(User loginUser, int projectId, String startDate, String endDate);\n \n     /**\n      * count queue state\n@@ -75,6 +80,6 @@\n      * @param projectId project id\n      * @return queue state count data\n      */\n-    Map<String, Object> countQueueState(User loginUser, int projectId);\n+    Result<Map<String, Integer>> countQueueState(User loginUser, int projectId);\n \n }"
  },
  {
    "sha": "d89f2753e55c1a5a4f051adec57a4781ccdd3d8d",
    "filename": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java",
    "status": "modified",
    "additions": 18,
    "deletions": 15,
    "changes": 33,
    "blob_url": "https://github.com/apache/incubator-dolphinscheduler/blob/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java",
    "raw_url": "https://github.com/apache/incubator-dolphinscheduler/raw/8bee4a9c593b483ad2affc0196107168faa50820/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java",
    "contents_url": "https://api.github.com/repos/apache/incubator-dolphinscheduler/contents/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java?ref=8bee4a9c593b483ad2affc0196107168faa50820",
    "patch": "@@ -18,10 +18,13 @@\n package org.apache.dolphinscheduler.api.service;\n \n import org.apache.dolphinscheduler.api.utils.Result;\n+import org.apache.dolphinscheduler.api.vo.PageListVO;\n import org.apache.dolphinscheduler.common.enums.DbConnectType;\n import org.apache.dolphinscheduler.common.enums.DbType;\n+import org.apache.dolphinscheduler.dao.entity.DataSource;\n import org.apache.dolphinscheduler.dao.entity.User;\n \n+import java.util.List;\n import java.util.Map;\n \n /**\n@@ -33,13 +36,13 @@\n      * create data source\n      *\n      * @param loginUser login user\n-     * @param name      data source name\n-     * @param desc      data source description\n-     * @param type      data source type\n+     * @param name data source name\n+     * @param desc data source description\n+     * @param type data source type\n      * @param parameter datasource parameters\n      * @return create result code\n      */\n-    Result<Object> createDataSource(User loginUser, String name, String desc, DbType type, String parameter);\n+    Result<Void> createDataSource(User loginUser, String name, String desc, DbType type, String parameter);\n \n     /**\n      * updateProcessInstance datasource\n@@ -52,35 +55,35 @@\n      * @param id        data source id\n      * @return update result code\n      */\n-    Result<Object> updateDataSource(int id, User loginUser, String name, String desc, DbType type, String parameter);\n+    Result<Void> updateDataSource(int id, User loginUser, String name, String desc, DbType type, String parameter);\n \n     /**\n      * updateProcessInstance datasource\n      *\n      * @param id datasource id\n      * @return data source detail\n      */\n-    Map<String, Object> queryDataSource(int id);\n+    Result<Map<String, Object>> queryDataSource(int id);\n \n     /**\n      * query datasource list by keyword\n      *\n      * @param loginUser login user\n      * @param searchVal search value\n-     * @param pageNo    page number\n-     * @param pageSize  page size\n+     * @param pageNo page number\n+     * @param pageSize page size\n      * @return data source list page\n      */\n-    Map<String, Object> queryDataSourceListPaging(User loginUser, String searchVal, Integer pageNo, Integer pageSize);\n+    Result<PageListVO<DataSource>> queryDataSourceListPaging(User loginUser, String searchVal, Integer pageNo, Integer pageSize);\n \n     /**\n      * query data resource list\n      *\n      * @param loginUser login user\n-     * @param type      data source type\n+     * @param type data source type\n      * @return data source list page\n      */\n-    Map<String, Object> queryDataSourceList(User loginUser, Integer type);\n+    Result<List<DataSource>> queryDataSourceList(User loginUser, Integer type);\n \n     /**\n      * verify datasource exists\n@@ -97,15 +100,15 @@\n      * @param parameter data source parameters\n      * @return true if connect successfully, otherwise false\n      */\n-    Result<Object> checkConnection(DbType type, String parameter);\n+    Result<Void> checkConnection(DbType type, String parameter);\n \n     /**\n      * test connection\n      *\n      * @param id datasource id\n      * @return connect result code\n      */\n-    Result<Object> connectionTest(int id);\n+    Result<Void> connectionTest(int id);\n \n     /**\n      * build paramters\n@@ -141,7 +144,7 @@ String buildParameter(DbType type, String host,\n      * @param userId    user id\n      * @return unauthed data source result code\n      */\n-    Map<String, Object> unauthDatasource(User loginUser, Integer userId);\n+    Result<List<DataSource>> unauthDatasource(User loginUser, Integer userId);\n \n     /**\n      * authorized datasource\n@@ -150,5 +153,5 @@ String buildParameter(DbType type, String host,\n      * @param userId    user id\n      * @return authorized result code\n      */\n-    Map<String, Object> authedDatasource(User loginUser, Integer userId);\n+    Result<List<DataSource>> authedDatasource(User loginUser, Integer userId);\n }"
  }
]
