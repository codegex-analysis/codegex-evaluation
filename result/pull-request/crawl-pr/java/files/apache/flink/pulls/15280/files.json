[
  {
    "sha": "6d7f59772c2202486523753a12b857e73ef6d5e3",
    "filename": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/ConnectorCatalogTable.java",
    "status": "modified",
    "additions": 5,
    "deletions": 2,
    "changes": 7,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/ConnectorCatalogTable.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/ConnectorCatalogTable.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/ConnectorCatalogTable.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -28,6 +28,7 @@\n import org.apache.flink.table.sources.TableSource;\n import org.apache.flink.table.types.AtomicDataType;\n import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.TimestampKind;\n import org.apache.flink.table.types.logical.TimestampType;\n \n@@ -166,8 +167,10 @@ private static void updateProctimeIndicator(\n             if (fieldNames[i].equals(proctimeAttribute)) {\n                 // bridged to timestamp for compatible flink-planner\n                 types[i] =\n-                        new AtomicDataType(new TimestampType(true, TimestampKind.PROCTIME, 3))\n-                                .bridgedTo(java.sql.Timestamp.class);\n+                        new AtomicDataType(\n+                                        new LocalZonedTimestampType(\n+                                                true, TimestampKind.PROCTIME, 3))\n+                                .bridgedTo(java.time.Instant.class);\n                 break;\n             }\n         }"
  },
  {
    "sha": "bf9c0cda18c41e617f5674f7417824ab40dc4f6a",
    "filename": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/DefaultSchemaResolver.java",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/DefaultSchemaResolver.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/DefaultSchemaResolver.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/DefaultSchemaResolver.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -235,7 +235,8 @@ private void validateTimeColumn(String columnName, List<Column> columns) {\n                             columns.stream().map(Column::getName).collect(Collectors.toList())));\n         }\n         final LogicalType timeFieldType = timeColumn.get().getDataType().getLogicalType();\n-        if (!hasRoot(timeFieldType, LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)\n+        if (!(hasRoot(timeFieldType, LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)\n+                        || hasRoot(timeFieldType, LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE))\n                 || getPrecision(timeFieldType) != 3) {\n             throw new ValidationException(\n                     \"Invalid data type of time field for watermark definition. \""
  },
  {
    "sha": "fde2ebdb0b3405d8598cf3faae175798771dd73b",
    "filename": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/functions/TemporalTableFunctionImpl.java",
    "status": "modified",
    "additions": 6,
    "deletions": 1,
    "changes": 7,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/functions/TemporalTableFunctionImpl.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/functions/TemporalTableFunctionImpl.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/functions/TemporalTableFunctionImpl.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -75,7 +75,12 @@ public TypeInference getTypeInference(DataTypeFactory typeFactory) {\n         final TableSchema tableSchema =\n                 TableSchema.fromResolvedSchema(underlyingHistoryTable.getResolvedSchema());\n         return TypeInference.newBuilder()\n-                .inputTypeStrategy(InputTypeStrategies.explicitSequence(DataTypes.TIMESTAMP(3)))\n+                .inputTypeStrategy(\n+                        InputTypeStrategies.or(\n+                                InputTypeStrategies.sequence(\n+                                        InputTypeStrategies.explicit(DataTypes.TIMESTAMP(3))),\n+                                InputTypeStrategies.sequence(\n+                                        InputTypeStrategies.explicit(DataTypes.TIMESTAMP_LTZ(3)))))\n                 .outputTypeStrategy(TypeStrategies.explicit(tableSchema.toRowDataType()))\n                 .build();\n     }"
  },
  {
    "sha": "02ba915cd1ed1de3bf56dc31de5e017cb5a2f8f3",
    "filename": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/operations/utils/AggregateOperationFactory.java",
    "status": "modified",
    "additions": 4,
    "deletions": 1,
    "changes": 5,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/operations/utils/AggregateOperationFactory.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/operations/utils/AggregateOperationFactory.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/operations/utils/AggregateOperationFactory.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -77,6 +77,7 @@\n import static org.apache.flink.table.types.logical.LogicalTypeRoot.BIGINT;\n import static org.apache.flink.table.types.logical.LogicalTypeRoot.INTERVAL_DAY_TIME;\n import static org.apache.flink.table.types.logical.LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE;\n+import static org.apache.flink.table.types.logical.LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE;\n import static org.apache.flink.table.types.logical.utils.LogicalTypeChecks.getFieldCount;\n import static org.apache.flink.table.types.logical.utils.LogicalTypeChecks.hasRoot;\n import static org.apache.flink.table.types.logical.utils.LogicalTypeChecks.isRowtimeAttribute;\n@@ -313,6 +314,7 @@ private void validateTimeAttributeType(LogicalType timeFieldType) {\n \n     private void validateBatchTimeAttribute(LogicalType timeFieldType) {\n         if (!(hasRoot(timeFieldType, TIMESTAMP_WITHOUT_TIME_ZONE)\n+                || hasRoot(timeFieldType, TIMESTAMP_WITH_LOCAL_TIME_ZONE)\n                 || hasRoot(timeFieldType, BIGINT))) {\n             throw new ValidationException(\n                     \"A group window expects a time attribute for grouping \"\n@@ -321,7 +323,8 @@ private void validateBatchTimeAttribute(LogicalType timeFieldType) {\n     }\n \n     private void validateStreamTimeAttribute(LogicalType timeFieldType) {\n-        if (!hasRoot(timeFieldType, TIMESTAMP_WITHOUT_TIME_ZONE)\n+        if (!(hasRoot(timeFieldType, TIMESTAMP_WITHOUT_TIME_ZONE)\n+                        || hasRoot(timeFieldType, TIMESTAMP_WITH_LOCAL_TIME_ZONE))\n                 || !isTimeAttribute(timeFieldType)) {\n             throw new ValidationException(\n                     \"A group window expects a time attribute for grouping \""
  },
  {
    "sha": "2c20b9568f1a5b2f98fdbc787b1d97e4b1bdac1d",
    "filename": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/typeutils/FieldInfoUtils.java",
    "status": "modified",
    "additions": 8,
    "deletions": 2,
    "changes": 10,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/typeutils/FieldInfoUtils.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/typeutils/FieldInfoUtils.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/typeutils/FieldInfoUtils.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -40,6 +40,7 @@\n import org.apache.flink.table.types.AtomicDataType;\n import org.apache.flink.table.types.DataType;\n import org.apache.flink.table.types.DataTypeQueryable;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalType;\n import org.apache.flink.table.types.logical.LogicalTypeRoot;\n import org.apache.flink.table.types.logical.TimestampKind;\n@@ -820,8 +821,13 @@ private static UnresolvedReferenceExpression getChildAsReference(Expression expr\n     }\n \n     private static DataType createTimeIndicatorType(TimestampKind kind) {\n-        return new AtomicDataType(new TimestampType(true, kind, 3))\n-                .bridgedTo(java.sql.Timestamp.class);\n+        if (kind == TimestampKind.PROCTIME) {\n+            return new AtomicDataType(new LocalZonedTimestampType(true, kind, 3))\n+                    .bridgedTo(java.time.Instant.class);\n+        } else {\n+            return new AtomicDataType(new TimestampType(true, kind, 3))\n+                    .bridgedTo(java.sql.Timestamp.class);\n+        }\n     }\n \n     private FieldInfoUtils() {}"
  },
  {
    "sha": "82ee99844ceb7560a45f82c2b9177fdb080ca733",
    "filename": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/catalog/SchemaResolutionTest.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/catalog/SchemaResolutionTest.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/catalog/SchemaResolutionTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/catalog/SchemaResolutionTest.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -25,9 +25,9 @@\n import org.apache.flink.table.expressions.ResolvedExpression;\n import org.apache.flink.table.expressions.utils.ResolvedExpressionMock;\n import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalType;\n import org.apache.flink.table.types.logical.TimestampKind;\n-import org.apache.flink.table.types.logical.TimestampType;\n import org.apache.flink.table.types.utils.DataTypeFactoryMock;\n import org.apache.flink.table.utils.ExpressionResolverMocks;\n \n@@ -64,7 +64,8 @@\n \n     private static final ResolvedExpression PROCTIME_RESOLVED =\n             new ResolvedExpressionMock(\n-                    fromLogicalToDataType(new TimestampType(false, TimestampKind.PROCTIME, 3)),\n+                    fromLogicalToDataType(\n+                            new LocalZonedTimestampType(false, TimestampKind.PROCTIME, 3)),\n                     () -> PROCTIME_SQL);\n \n     private static final Schema SCHEMA ="
  },
  {
    "sha": "427cdf4c7fccdb2b62c7150082e73a734e333099",
    "filename": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/api/TableSchema.java",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-common/src/main/java/org/apache/flink/table/api/TableSchema.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-common/src/main/java/org/apache/flink/table/api/TableSchema.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-common/src/main/java/org/apache/flink/table/api/TableSchema.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -55,6 +55,7 @@\n import static org.apache.flink.table.api.DataTypes.Field;\n import static org.apache.flink.table.api.DataTypes.ROW;\n import static org.apache.flink.table.types.logical.LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE;\n+import static org.apache.flink.table.types.logical.LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE;\n import static org.apache.flink.table.types.logical.utils.LogicalTypeChecks.isCompositeType;\n import static org.apache.flink.table.types.utils.TypeConversions.fromDataTypeToLegacyInfo;\n import static org.apache.flink.table.types.utils.TypeConversions.fromLegacyInfoToDataType;\n@@ -519,18 +520,20 @@ private static void validateColumnsAndWatermarkSpecs(\n                                                     String.format(\n                                                             \"Rowtime attribute '%s' is not defined in schema.\",\n                                                             rowtimeAttribute)));\n-            if (rowtimeType.getTypeRoot() != TIMESTAMP_WITHOUT_TIME_ZONE) {\n+            if (!(rowtimeType.getTypeRoot() == TIMESTAMP_WITHOUT_TIME_ZONE\n+                    || rowtimeType.getTypeRoot() == TIMESTAMP_WITH_LOCAL_TIME_ZONE)) {\n                 throw new ValidationException(\n                         String.format(\n-                                \"Rowtime attribute '%s' must be of type TIMESTAMP but is of type '%s'.\",\n+                                \"Rowtime attribute '%s' must be of type TIMESTAMP or TIMESTAMP_LTZ but is of type '%s'.\",\n                                 rowtimeAttribute, rowtimeType));\n             }\n             LogicalType watermarkOutputType =\n                     watermark.getWatermarkExprOutputType().getLogicalType();\n-            if (watermarkOutputType.getTypeRoot() != TIMESTAMP_WITHOUT_TIME_ZONE) {\n+            if (!(watermarkOutputType.getTypeRoot() == TIMESTAMP_WITHOUT_TIME_ZONE\n+                    || watermarkOutputType.getTypeRoot() == TIMESTAMP_WITH_LOCAL_TIME_ZONE)) {\n                 throw new ValidationException(\n                         String.format(\n-                                \"Watermark strategy %s must be of type TIMESTAMP but is of type '%s'.\",\n+                                \"Watermark strategy %s must be of type TIMESTAMP or TIMESTAMP_LTZ but is of type '%s'.\",\n                                 watermark.getWatermarkExpr(),\n                                 watermarkOutputType.asSummaryString()));\n             }"
  },
  {
    "sha": "f86ae2c427f65c222fa62b2c1049f064067ca7af",
    "filename": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java",
    "status": "modified",
    "additions": 21,
    "deletions": 12,
    "changes": 33,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -39,6 +39,7 @@\n import org.apache.flink.table.types.FieldsDataType;\n import org.apache.flink.table.types.KeyValueDataType;\n import org.apache.flink.table.types.logical.LegacyTypeInformationType;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalType;\n import org.apache.flink.table.types.logical.LogicalTypeRoot;\n import org.apache.flink.table.types.logical.RowType;\n@@ -188,7 +189,7 @@ public static DataType toDataType(TypeInformation<?> typeInfo) {\n     public static TypeInformation<?> toLegacyTypeInfo(DataType dataType) {\n         // time indicators first as their hashCode/equals is shared with those of regular timestamps\n         if (canConvertToTimeAttributeTypeInfo(dataType)) {\n-            return convertToTimeAttributeTypeInfo((TimestampType) dataType.getLogicalType());\n+            return convertToTimeAttributeTypeInfo(dataType.getLogicalType());\n         }\n \n         // check in the map but relax the nullability constraint as every not null data type can be\n@@ -260,25 +261,33 @@ private static DataType createLegacyType(\n \n     private static DataType convertToTimeAttributeType(\n             TimeIndicatorTypeInfo timeIndicatorTypeInfo) {\n-        final TimestampKind kind;\n         if (timeIndicatorTypeInfo.isEventTime()) {\n-            kind = TimestampKind.ROWTIME;\n+            return new AtomicDataType(new TimestampType(true, TimestampKind.ROWTIME, 3))\n+                    .bridgedTo(java.sql.Timestamp.class);\n         } else {\n-            kind = TimestampKind.PROCTIME;\n+            return new AtomicDataType(new LocalZonedTimestampType(true, TimestampKind.PROCTIME, 3))\n+                    .bridgedTo(java.time.Instant.class);\n         }\n-        return new AtomicDataType(new TimestampType(true, kind, 3))\n-                .bridgedTo(java.sql.Timestamp.class);\n     }\n \n     private static boolean canConvertToTimeAttributeTypeInfo(DataType dataType) {\n-        return hasRoot(dataType.getLogicalType(), LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)\n-                && dataTypeTypeInfoMap.containsKey(dataType.nullable())\n-                && // checks precision and conversion and ignore nullable\n-                ((TimestampType) dataType.getLogicalType()).getKind() != TimestampKind.REGULAR;\n+        if (dataTypeTypeInfoMap.containsKey(dataType.nullable())\n+                && hasRoot(\n+                        dataType.getLogicalType(), LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE)) {\n+            return ((TimestampType) dataType.getLogicalType()).getKind() != TimestampKind.REGULAR;\n+        } else if (dataTypeTypeInfoMap.containsKey(dataType.nullable())\n+                && hasRoot(\n+                        dataType.getLogicalType(),\n+                        LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE)) {\n+            return ((LocalZonedTimestampType) dataType.getLogicalType()).getKind()\n+                    != TimestampKind.REGULAR;\n+        } else {\n+            return false;\n+        }\n     }\n \n-    private static TypeInformation<?> convertToTimeAttributeTypeInfo(TimestampType timestampType) {\n-        if (isRowtimeAttribute(timestampType)) {\n+    private static TypeInformation<?> convertToTimeAttributeTypeInfo(LogicalType type) {\n+        if (isRowtimeAttribute(type)) {\n             return TimeIndicatorTypeInfo.ROWTIME_INDICATOR;\n         } else {\n             return TimeIndicatorTypeInfo.PROCTIME_INDICATOR;"
  },
  {
    "sha": "b2ff70bf1fb8e7ae365e1610d869c3bb35c30654",
    "filename": "flink-table/flink-table-common/src/test/java/org/apache/flink/table/types/LegacyTypeInfoDataTypeConverterTest.java",
    "status": "modified",
    "additions": 8,
    "deletions": 0,
    "changes": 8,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-common/src/test/java/org/apache/flink/table/types/LegacyTypeInfoDataTypeConverterTest.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-common/src/test/java/org/apache/flink/table/types/LegacyTypeInfoDataTypeConverterTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-common/src/test/java/org/apache/flink/table/types/LegacyTypeInfoDataTypeConverterTest.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -24,6 +24,7 @@\n import org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;\n import org.apache.flink.table.api.DataTypes;\n import org.apache.flink.table.types.logical.LegacyTypeInformationType;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalTypeRoot;\n import org.apache.flink.table.types.logical.TimestampKind;\n import org.apache.flink.table.types.logical.TimestampType;\n@@ -114,6 +115,13 @@\n                         TimeIndicatorTypeInfo.ROWTIME_INDICATOR,\n                         new AtomicDataType(new TimestampType(true, TimestampKind.ROWTIME, 3))\n                                 .bridgedTo(java.sql.Timestamp.class)\n+                    },\n+                    {\n+                        TimeIndicatorTypeInfo.PROCTIME_INDICATOR,\n+                        new AtomicDataType(\n+                                        new LocalZonedTimestampType(\n+                                                true, TimestampKind.PROCTIME, 3))\n+                                .bridgedTo(java.time.Instant.class)\n                     }\n                 });\n     }"
  },
  {
    "sha": "4f5a023d81c5374438352cabe2b51a56b9e6b28c",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/calcite/rel/logical/LogicalSnapshot.java",
    "status": "added",
    "additions": 95,
    "deletions": 0,
    "changes": 95,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/calcite/rel/logical/LogicalSnapshot.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/calcite/rel/logical/LogicalSnapshot.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/calcite/rel/logical/LogicalSnapshot.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.calcite.rel.logical;\n+\n+import org.apache.calcite.plan.Convention;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.rel.RelCollationTraitDef;\n+import org.apache.calcite.rel.RelDistributionTraitDef;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Snapshot;\n+import org.apache.calcite.rel.metadata.RelMdCollation;\n+import org.apache.calcite.rel.metadata.RelMdDistribution;\n+import org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.calcite.util.Litmus;\n+\n+/**\n+ * Sub-class of {@link org.apache.calcite.rel.core.Snapshot} not targeted at any particular engine\n+ * or calling convention.\n+ *\n+ * <p>Line 80 ~ 91: Calcite only supports timestamp type as period type, but Flink supports both\n+ * Timestamp and TimestampLtz. Should be removed once calcite support TimestampLtz as period type.\n+ */\n+public class LogicalSnapshot extends Snapshot {\n+\n+    // ~ Constructors -----------------------------------------------------------\n+\n+    /**\n+     * Creates a LogicalSnapshot.\n+     *\n+     * <p>Use {@link #create} unless you know what you're doing.\n+     *\n+     * @param cluster Cluster that this relational expression belongs to\n+     * @param traitSet The traits of this relational expression\n+     * @param input Input relational expression\n+     * @param period Timestamp expression which as the table was at the given time in the past\n+     */\n+    public LogicalSnapshot(\n+            RelOptCluster cluster, RelTraitSet traitSet, RelNode input, RexNode period) {\n+        super(cluster, traitSet, input, period);\n+    }\n+\n+    @Override\n+    public Snapshot copy(RelTraitSet traitSet, RelNode input, RexNode period) {\n+        return new LogicalSnapshot(getCluster(), traitSet, input, period);\n+    }\n+\n+    /** Creates a LogicalSnapshot. */\n+    public static LogicalSnapshot create(RelNode input, RexNode period) {\n+        final RelOptCluster cluster = input.getCluster();\n+        final RelMetadataQuery mq = cluster.getMetadataQuery();\n+        final RelTraitSet traitSet =\n+                cluster.traitSet()\n+                        .replace(Convention.NONE)\n+                        .replaceIfs(\n+                                RelCollationTraitDef.INSTANCE,\n+                                () -> RelMdCollation.snapshot(mq, input))\n+                        .replaceIf(\n+                                RelDistributionTraitDef.INSTANCE,\n+                                () -> RelMdDistribution.snapshot(mq, input));\n+        return new LogicalSnapshot(cluster, traitSet, input, period);\n+    }\n+\n+    @Override\n+    public boolean isValid(Litmus litmus, Context context) {\n+        SqlTypeName periodTypeName = getPeriod().getType().getSqlTypeName();\n+\n+        if (!(periodTypeName == SqlTypeName.TIMESTAMP\n+                || periodTypeName == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE)) {\n+            return litmus.fail(\n+                    \"The system time period specification expects Timestamp or TimestampLtz type but is '\"\n+                            + periodTypeName\n+                            + \"'\");\n+        }\n+        return litmus.succeed();\n+    }\n+}"
  },
  {
    "sha": "293cd3c41924674e285d6b2920ed1caa59f0b93a",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java",
    "status": "added",
    "additions": 6550,
    "deletions": 0,
    "changes": 6550,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e"
  },
  {
    "sha": "02f4e4bf7eb1434cf63d12c14068f55b5aecc7fe",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/calcite/FlinkRexBuilder.java",
    "status": "modified",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/calcite/FlinkRexBuilder.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/calcite/FlinkRexBuilder.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/calcite/FlinkRexBuilder.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -18,9 +18,11 @@\n \n package org.apache.flink.table.planner.calcite;\n \n+import org.apache.calcite.rel.type.RelDataType;\n import org.apache.calcite.rel.type.RelDataTypeFactory;\n import org.apache.calcite.rex.RexBuilder;\n import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.util.TimestampString;\n \n /** A slim extension over a {@link RexBuilder}. See the overridden methods for more explanation. */\n public final class FlinkRexBuilder extends RexBuilder {\n@@ -63,4 +65,34 @@ public RexNode makeFieldAccess(RexNode expr, int i) {\n \n         return field;\n     }\n+\n+    /**\n+     * Creates a literal of the default value for the given type.\n+     *\n+     * <p>This value is:\n+     *\n+     * <ul>\n+     *   <li>0 for numeric types;\n+     *   <li>FALSE for BOOLEAN;\n+     *   <li>The epoch for TIMESTAMP and DATE;\n+     *   <li>Midnight for TIME;\n+     *   <li>The empty string for string types (CHAR, BINARY, VARCHAR, VARBINARY).\n+     * </ul>\n+     *\n+     * <p>Uses '19-70-01-01 00:00:00'(epoch 0 second) as zero value for TIMESTAMP_LTZ, the zero\n+     * value '0000-00-00 00:00:00' in Calcite is an invalid time whose month and day is invalid, we\n+     * workaround here. Stop override once Calcite fix this issue.\n+     *\n+     * @param type Type\n+     * @return Simple literal, or cast simple literal\n+     */\n+    @Override\n+    public RexNode makeZeroLiteral(RelDataType type) {\n+        switch (type.getSqlTypeName()) {\n+            case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n+                return makeLiteral(new TimestampString(1970, 1, 1, 0, 0, 0), type, false);\n+            default:\n+                return super.makeZeroLiteral(type);\n+        }\n+    }\n }"
  },
  {
    "sha": "117822c8cf5440a85db0f419fa9c4c4eb437d27b",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerProctimeAttribute.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerProctimeAttribute.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerProctimeAttribute.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerProctimeAttribute.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -18,9 +18,9 @@\n \n package org.apache.flink.table.planner.expressions;\n \n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalType;\n import org.apache.flink.table.types.logical.TimestampKind;\n-import org.apache.flink.table.types.logical.TimestampType;\n \n import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\n@@ -38,7 +38,7 @@ public PlannerProctimeAttribute(\n \n     @Override\n     public LogicalType getResultType() {\n-        return new TimestampType(true, TimestampKind.PROCTIME, 3);\n+        return new LocalZonedTimestampType(true, TimestampKind.PROCTIME, 3);\n     }\n \n     @Override"
  },
  {
    "sha": "10d1b782e2e89f96c85399d43fe9f90639e1338e",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerWindowEnd.java",
    "status": "modified",
    "additions": 9,
    "deletions": 1,
    "changes": 10,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerWindowEnd.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerWindowEnd.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerWindowEnd.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -18,7 +18,9 @@\n \n package org.apache.flink.table.planner.expressions;\n \n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.LogicalTypeRoot;\n import org.apache.flink.table.types.logical.TimestampType;\n \n import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n@@ -36,7 +38,13 @@ public PlannerWindowEnd(@JsonProperty(FIELD_NAME_REFERENCE) PlannerWindowReferen\n \n     @Override\n     public LogicalType getResultType() {\n-        return new TimestampType(3);\n+        if (reference.getType().isPresent()\n+                && reference.getType().get().getTypeRoot()\n+                        == LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n+            return new LocalZonedTimestampType(true, 3);\n+        } else {\n+            return new TimestampType(true, 3);\n+        }\n     }\n \n     @Override"
  },
  {
    "sha": "baaa03d8d9310b8c0d3f7dea229fbd6ec5297c2e",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerWindowStart.java",
    "status": "modified",
    "additions": 9,
    "deletions": 1,
    "changes": 10,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerWindowStart.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerWindowStart.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/expressions/PlannerWindowStart.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -18,7 +18,9 @@\n \n package org.apache.flink.table.planner.expressions;\n \n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.LogicalTypeRoot;\n import org.apache.flink.table.types.logical.TimestampType;\n \n import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n@@ -37,7 +39,13 @@ public PlannerWindowStart(\n \n     @Override\n     public LogicalType getResultType() {\n-        return new TimestampType(3);\n+        if (reference.getType().isPresent()\n+                && reference.getType().get().getTypeRoot()\n+                        == LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n+            return new LocalZonedTimestampType(true, 3);\n+        } else {\n+            return new TimestampType(true, 3);\n+        }\n     }\n \n     @Override"
  },
  {
    "sha": "3cdab56ba0c073a67eedc01e6f55a9124b5ab048",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/MaxAggFunction.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/MaxAggFunction.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/MaxAggFunction.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/MaxAggFunction.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -23,6 +23,7 @@\n import org.apache.flink.table.expressions.UnresolvedReferenceExpression;\n import org.apache.flink.table.types.DataType;\n import org.apache.flink.table.types.logical.DecimalType;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.TimeType;\n import org.apache.flink.table.types.logical.TimestampType;\n \n@@ -205,4 +206,19 @@ public DataType getResultType() {\n             return DataTypes.TIMESTAMP(type.getPrecision());\n         }\n     }\n+\n+    /** Built-in TimestampLtz Max aggregate function. */\n+    public static class TimestampLtzMaxAggFunction extends MaxAggFunction {\n+\n+        private final LocalZonedTimestampType type;\n+\n+        public TimestampLtzMaxAggFunction(LocalZonedTimestampType type) {\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public DataType getResultType() {\n+            return DataTypes.TIMESTAMP_LTZ(type.getPrecision());\n+        }\n+    }\n }"
  },
  {
    "sha": "356b563568d11b60ae990e17b8155d76ea109ffc",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/MinAggFunction.java",
    "status": "modified",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/MinAggFunction.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/MinAggFunction.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/MinAggFunction.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -23,6 +23,7 @@\n import org.apache.flink.table.expressions.UnresolvedReferenceExpression;\n import org.apache.flink.table.types.DataType;\n import org.apache.flink.table.types.logical.DecimalType;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.TimeType;\n import org.apache.flink.table.types.logical.TimestampType;\n \n@@ -204,4 +205,19 @@ public DataType getResultType() {\n             return DataTypes.TIMESTAMP(type.getPrecision());\n         }\n     }\n+\n+    /** Built-in TimestampLtz Min aggregate function. */\n+    public static class TimestampLtzMinAggFunction extends MinAggFunction {\n+\n+        private final LocalZonedTimestampType type;\n+\n+        public TimestampLtzMinAggFunction(LocalZonedTimestampType type) {\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public DataType getResultType() {\n+            return DataTypes.TIMESTAMP_LTZ(type.getPrecision());\n+        }\n+    }\n }"
  },
  {
    "sha": "59b48a895e6e18081f856aaa5f1f108a68c1bd79",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/SingleValueAggFunction.java",
    "status": "modified",
    "additions": 18,
    "deletions": 0,
    "changes": 18,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/SingleValueAggFunction.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/SingleValueAggFunction.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/aggfunctions/SingleValueAggFunction.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -24,6 +24,7 @@\n import org.apache.flink.table.expressions.UnresolvedReferenceExpression;\n import org.apache.flink.table.types.DataType;\n import org.apache.flink.table.types.logical.DecimalType;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.TimeType;\n import org.apache.flink.table.types.logical.TimestampType;\n \n@@ -276,4 +277,21 @@ public DataType getResultType() {\n             return DataTypes.TIMESTAMP(type.getPrecision());\n         }\n     }\n+\n+    /** Built-in timestampLtz single value aggregate function. */\n+    public static final class TimestampLtzSingleValueAggFunction extends SingleValueAggFunction {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final LocalZonedTimestampType type;\n+\n+        public TimestampLtzSingleValueAggFunction(LocalZonedTimestampType type) {\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public DataType getResultType() {\n+            return DataTypes.TIMESTAMP_LTZ(type.getPrecision());\n+        }\n+    }\n }"
  },
  {
    "sha": "92274c5a0ff2d058d5656244c8fc22af6269ce2b",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/ProctimeMaterializeSqlFunction.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/ProctimeMaterializeSqlFunction.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/ProctimeMaterializeSqlFunction.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/ProctimeMaterializeSqlFunction.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -42,7 +42,7 @@ public ProctimeMaterializeSqlFunction() {\n                 \"PROCTIME_MATERIALIZE\",\n                 SqlKind.OTHER_FUNCTION,\n                 ReturnTypes.cascade(\n-                        ReturnTypes.explicit(SqlTypeName.TIMESTAMP, 3),\n+                        ReturnTypes.explicit(SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE, 3),\n                         SqlTypeTransforms.TO_NULLABLE),\n                 InferTypes.RETURN_TYPE,\n                 OperandTypes.family(SqlTypeFamily.TIMESTAMP),"
  },
  {
    "sha": "7dc91f5efe2deb0c708b1141d0b9bb5b3c4b3bec",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/SqlWindowTableFunction.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/SqlWindowTableFunction.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/SqlWindowTableFunction.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/SqlWindowTableFunction.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -163,8 +163,8 @@ public static RelDataType inferRowType(\n                 .builder()\n                 .kind(inputRowType.getStructKind())\n                 .addAll(inputRowType.getFieldList())\n-                .add(\"window_start\", SqlTypeName.TIMESTAMP, 3)\n-                .add(\"window_end\", SqlTypeName.TIMESTAMP, 3)\n+                .add(\"window_start\", timeAttributeType.getSqlTypeName(), 3)\n+                .add(\"window_end\", timeAttributeType.getSqlTypeName(), 3)\n                 .add(\"window_time\", typeFactory.createTypeWithNullability(timeAttributeType, false))\n                 .build();\n     }"
  },
  {
    "sha": "f2baf4d92a3b79cf657319b2d503d5dd2e5863cc",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecGroupWindowAggregate.java",
    "status": "modified",
    "additions": 23,
    "deletions": 8,
    "changes": 31,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecGroupWindowAggregate.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecGroupWindowAggregate.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecGroupWindowAggregate.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -58,6 +58,7 @@\n import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n import org.apache.flink.table.types.DataType;\n import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.LogicalTypeRoot;\n import org.apache.flink.table.types.logical.RowType;\n \n import org.apache.calcite.rel.core.AggregateCall;\n@@ -70,6 +71,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.TimeZone;\n \n import static org.apache.flink.table.planner.plan.utils.AggregateUtil.hasRowIntervalType;\n import static org.apache.flink.table.planner.plan.utils.AggregateUtil.hasTimeIntervalType;\n@@ -190,6 +192,15 @@ public StreamExecGroupWindowAggregate(\n \n         final LogicalType[] aggValueTypes = extractLogicalTypes(aggInfoList.getActualValueTypes());\n         final LogicalType[] accTypes = extractLogicalTypes(aggInfoList.getAccTypes());\n+\n+        // assign window based on the local time zone if time attribute type is TIMESTAMP_LTZ\n+        final boolean needLocalTimeZone =\n+                window.timeAttribute().getOutputDataType().getLogicalType().getTypeRoot()\n+                        == LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE;\n+        final TimeZone timeZoneOfWindow =\n+                needLocalTimeZone\n+                        ? TimeZone.getTimeZone(config.getLocalTimeZone())\n+                        : TimeZone.getTimeZone(\"UTC\");\n         final WindowOperator<?, ?> operator =\n                 createWindowOperator(\n                         aggCodeGenerator,\n@@ -198,7 +209,8 @@ public StreamExecGroupWindowAggregate(\n                         windowPropertyTypes,\n                         aggValueTypes,\n                         inputRowType.getChildren().toArray(new LogicalType[0]),\n-                        inputTimeFieldIndex);\n+                        inputTimeFieldIndex,\n+                        timeZoneOfWindow);\n \n         final OneInputTransformation<RowData, RowData> transform =\n                 new OneInputTransformation<>(\n@@ -288,7 +300,8 @@ public StreamExecGroupWindowAggregate(\n             LogicalType[] windowPropertyTypes,\n             LogicalType[] aggValueTypes,\n             LogicalType[] inputFields,\n-            int timeFieldIndex) {\n+            int timeFieldIndex,\n+            TimeZone timeZone) {\n         WindowOperatorBuilder builder =\n                 WindowOperatorBuilder.builder().withInputFields(inputFields);\n \n@@ -297,9 +310,9 @@ public StreamExecGroupWindowAggregate(\n             FieldReferenceExpression timeField = tumblingWindow.timeField();\n             ValueLiteralExpression size = tumblingWindow.size();\n             if (isProctimeAttribute(timeField) && hasTimeIntervalType(size)) {\n-                builder = builder.tumble(toDuration(size)).withProcessingTime();\n+                builder = builder.tumble(toDuration(size), timeZone).withProcessingTime();\n             } else if (isRowtimeAttribute(timeField) && hasTimeIntervalType(size)) {\n-                builder = builder.tumble(toDuration(size)).withEventTime(timeFieldIndex);\n+                builder = builder.tumble(toDuration(size), timeZone).withEventTime(timeFieldIndex);\n             } else if (isProctimeAttribute(timeField) && hasRowIntervalType(size)) {\n                 builder = builder.countWindow(toLong(size));\n             } else {\n@@ -315,10 +328,12 @@ public StreamExecGroupWindowAggregate(\n             ValueLiteralExpression size = slidingWindow.size();\n             ValueLiteralExpression slide = slidingWindow.slide();\n             if (isProctimeAttribute(timeField) && hasTimeIntervalType(size)) {\n-                builder = builder.sliding(toDuration(size), toDuration(slide)).withProcessingTime();\n+                builder =\n+                        builder.sliding(toDuration(size), toDuration(slide), timeZone)\n+                                .withProcessingTime();\n             } else if (isRowtimeAttribute(timeField) && hasTimeIntervalType(size)) {\n                 builder =\n-                        builder.sliding(toDuration(size), toDuration(slide))\n+                        builder.sliding(toDuration(size), toDuration(slide), timeZone)\n                                 .withEventTime(timeFieldIndex);\n             } else if (isProctimeAttribute(timeField) && hasRowIntervalType(size)) {\n                 builder = builder.countWindow(toLong(size), toLong(slide));\n@@ -334,9 +349,9 @@ public StreamExecGroupWindowAggregate(\n             FieldReferenceExpression timeField = sessionWindow.timeField();\n             ValueLiteralExpression gap = sessionWindow.gap();\n             if (isProctimeAttribute(timeField)) {\n-                builder = builder.session(toDuration(gap)).withProcessingTime();\n+                builder = builder.session(toDuration(gap), timeZone).withProcessingTime();\n             } else if (isRowtimeAttribute(timeField)) {\n-                builder = builder.session(toDuration(gap)).withEventTime(timeFieldIndex);\n+                builder = builder.session(toDuration(gap), timeZone).withEventTime(timeFieldIndex);\n             } else {\n                 throw new UnsupportedOperationException(\"This should not happen.\");\n             }"
  },
  {
    "sha": "c222195be2965e338b1818e49c003ffd55f8aa9f",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecOverAggregate.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecOverAggregate.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecOverAggregate.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecOverAggregate.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -51,6 +51,7 @@\n import org.apache.flink.table.runtime.operators.over.RowTimeRowsUnboundedPrecedingFunction;\n import org.apache.flink.table.runtime.types.LogicalTypeDataTypeConverter;\n import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalType;\n import org.apache.flink.table.types.logical.RowType;\n import org.apache.flink.table.types.logical.TimestampKind;\n@@ -124,8 +125,8 @@ public StreamExecOverAggregate(\n         if (orderKeyType instanceof TimestampType\n                 && ((TimestampType) orderKeyType).getKind() == TimestampKind.ROWTIME) {\n             rowTimeIdx = orderKey;\n-        } else if (orderKeyType instanceof TimestampType\n-                && ((TimestampType) orderKeyType).getKind() == TimestampKind.PROCTIME) {\n+        } else if (orderKeyType instanceof LocalZonedTimestampType\n+                && ((LocalZonedTimestampType) orderKeyType).getKind() == TimestampKind.PROCTIME) {\n             rowTimeIdx = -1;\n         } else {\n             throw new TableException("
  },
  {
    "sha": "900260ed90dad009e73a159f29ac2634f03a5811",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecPythonGroupWindowAggregate.java",
    "status": "modified",
    "additions": 23,
    "deletions": 8,
    "changes": 31,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecPythonGroupWindowAggregate.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecPythonGroupWindowAggregate.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecPythonGroupWindowAggregate.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -63,6 +63,7 @@\n import org.apache.flink.table.runtime.operators.window.triggers.ProcessingTimeTriggers;\n import org.apache.flink.table.runtime.operators.window.triggers.Trigger;\n import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.types.logical.LogicalTypeRoot;\n import org.apache.flink.table.types.logical.RowType;\n \n import org.apache.calcite.rel.core.AggregateCall;\n@@ -73,6 +74,7 @@\n import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.TimeZone;\n \n import static org.apache.flink.table.planner.plan.utils.AggregateUtil.hasRowIntervalType;\n import static org.apache.flink.table.planner.plan.utils.AggregateUtil.hasTimeIntervalType;\n@@ -172,8 +174,17 @@ public StreamExecPythonGroupWindowAggregate(\n         } else {\n             inputTimeFieldIndex = -1;\n         }\n+        // assign window based on the local time zone if time attribute type is TIMESTAMP_LTZ\n+        final boolean needLocalTimeZone =\n+                window.timeAttribute().getOutputDataType().getLogicalType().getTypeRoot()\n+                        == LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE;\n+        final TimeZone timeZoneOfWindow =\n+                needLocalTimeZone\n+                        ? TimeZone.getTimeZone(tableConfig.getLocalTimeZone())\n+                        : TimeZone.getTimeZone(\"UTC\");\n+\n         Tuple2<WindowAssigner<?>, Trigger<?>> windowAssignerAndTrigger =\n-                generateWindowAssignerAndTrigger();\n+                generateWindowAssignerAndTrigger(timeZoneOfWindow);\n         WindowAssigner<?> windowAssigner = windowAssignerAndTrigger.f0;\n         Trigger<?> trigger = windowAssignerAndTrigger.f1;\n         Configuration config = CommonPythonUtil.getMergedConfig(planner.getExecEnv(), tableConfig);\n@@ -226,18 +237,21 @@ public StreamExecPythonGroupWindowAggregate(\n         return transform;\n     }\n \n-    private Tuple2<WindowAssigner<?>, Trigger<?>> generateWindowAssignerAndTrigger() {\n+    private Tuple2<WindowAssigner<?>, Trigger<?>> generateWindowAssignerAndTrigger(\n+            TimeZone timeZone) {\n         WindowAssigner<?> windowAssiger;\n         Trigger<?> trigger;\n         if (window instanceof TumblingGroupWindow) {\n             TumblingGroupWindow tumblingWindow = (TumblingGroupWindow) window;\n             FieldReferenceExpression timeField = tumblingWindow.timeField();\n             ValueLiteralExpression size = tumblingWindow.size();\n             if (isProctimeAttribute(timeField) && hasTimeIntervalType(size)) {\n-                windowAssiger = TumblingWindowAssigner.of(toDuration(size)).withProcessingTime();\n+                windowAssiger =\n+                        TumblingWindowAssigner.of(toDuration(size), timeZone).withProcessingTime();\n                 trigger = ProcessingTimeTriggers.afterEndOfWindow();\n             } else if (isRowtimeAttribute(timeField) && hasTimeIntervalType(size)) {\n-                windowAssiger = TumblingWindowAssigner.of(toDuration(size)).withEventTime();\n+                windowAssiger =\n+                        TumblingWindowAssigner.of(toDuration(size), timeZone).withEventTime();\n                 trigger = EventTimeTriggers.afterEndOfWindow();\n             } else if (isProctimeAttribute(timeField) && hasRowIntervalType(size)) {\n                 windowAssiger = CountTumblingWindowAssigner.of(toLong(size));\n@@ -256,11 +270,12 @@ public StreamExecPythonGroupWindowAggregate(\n             ValueLiteralExpression slide = slidingWindow.slide();\n             if (isProctimeAttribute(timeField) && hasTimeIntervalType(size)) {\n                 windowAssiger =\n-                        SlidingWindowAssigner.of(toDuration(size), toDuration(slide))\n+                        SlidingWindowAssigner.of(toDuration(size), toDuration(slide), timeZone)\n                                 .withProcessingTime();\n                 trigger = ProcessingTimeTriggers.afterEndOfWindow();\n             } else if (isRowtimeAttribute(timeField) && hasTimeIntervalType(size)) {\n-                windowAssiger = SlidingWindowAssigner.of(toDuration(size), toDuration(slide));\n+                windowAssiger =\n+                        SlidingWindowAssigner.of(toDuration(size), toDuration(slide), timeZone);\n                 trigger = EventTimeTriggers.afterEndOfWindow();\n             } else if (isProctimeAttribute(timeField) && hasRowIntervalType(size)) {\n                 windowAssiger = CountSlidingWindowAssigner.of(toLong(size), toLong(slide));\n@@ -277,10 +292,10 @@ public StreamExecPythonGroupWindowAggregate(\n             FieldReferenceExpression timeField = sessionWindow.timeField();\n             ValueLiteralExpression gap = sessionWindow.gap();\n             if (isProctimeAttribute(timeField)) {\n-                windowAssiger = SessionWindowAssigner.withGap(toDuration(gap));\n+                windowAssiger = SessionWindowAssigner.withGap(toDuration(gap), timeZone);\n                 trigger = ProcessingTimeTriggers.afterEndOfWindow();\n             } else if (isRowtimeAttribute(timeField)) {\n-                windowAssiger = SessionWindowAssigner.withGap(toDuration(gap));\n+                windowAssiger = SessionWindowAssigner.withGap(toDuration(gap), timeZone);\n                 trigger = EventTimeTriggers.afterEndOfWindow();\n             } else {\n                 throw new UnsupportedOperationException(\"This should not happen.\");"
  },
  {
    "sha": "246734afd1b7cb1d2b9a23930d7e2694367ebfeb",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecPythonOverAggregate.java",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecPythonOverAggregate.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecPythonOverAggregate.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecPythonOverAggregate.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -40,6 +40,7 @@\n import org.apache.flink.table.planner.plan.utils.OverAggregateUtil;\n import org.apache.flink.table.runtime.keyselector.RowDataKeySelector;\n import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalType;\n import org.apache.flink.table.types.logical.RowType;\n import org.apache.flink.table.types.logical.TimestampKind;\n@@ -126,8 +127,8 @@ public StreamExecPythonOverAggregate(\n         if (orderKeyType instanceof TimestampType\n                 && ((TimestampType) orderKeyType).getKind() == TimestampKind.ROWTIME) {\n             rowTimeIdx = orderKey;\n-        } else if (orderKeyType instanceof TimestampType\n-                && ((TimestampType) orderKeyType).getKind() == TimestampKind.PROCTIME) {\n+        } else if (orderKeyType instanceof LocalZonedTimestampType\n+                && ((LocalZonedTimestampType) orderKeyType).getKind() == TimestampKind.PROCTIME) {\n             rowTimeIdx = -1;\n         } else {\n             throw new TableException("
  },
  {
    "sha": "f34ea330db651932a1ce6e1975404cb057b7ecf6",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecTemporalSort.java",
    "status": "modified",
    "additions": 7,
    "deletions": 1,
    "changes": 8,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecTemporalSort.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecTemporalSort.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecTemporalSort.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -35,6 +35,7 @@\n import org.apache.flink.table.runtime.operators.sort.ProcTimeSortOperator;\n import org.apache.flink.table.runtime.operators.sort.RowTimeSortOperator;\n import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.types.logical.LocalZonedTimestampType;\n import org.apache.flink.table.types.logical.LogicalType;\n import org.apache.flink.table.types.logical.RowType;\n import org.apache.flink.table.types.logical.TimestampKind;\n@@ -78,10 +79,15 @@ public StreamExecTemporalSort(\n             TimestampType keyType = (TimestampType) timeType;\n             if (keyType.getKind() == TimestampKind.ROWTIME) {\n                 return createSortRowTime(inputType, inputTransform, config);\n-            } else if (keyType.getKind() == TimestampKind.PROCTIME) {\n+            }\n+        }\n+        if (timeType instanceof LocalZonedTimestampType) {\n+            LocalZonedTimestampType keyType = (LocalZonedTimestampType) timeType;\n+            if (keyType.getKind() == TimestampKind.PROCTIME) {\n                 return createSortProcTime(inputType, inputTransform, config);\n             }\n         }\n+\n         throw new TableException(\n                 String.format(\n                         \"Sort: Internal Error\\n\""
  },
  {
    "sha": "fcdbfe4c4f76f512ee2086c3cb1fbf968441db5f",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecWindowAggregate.java",
    "status": "modified",
    "additions": 22,
    "deletions": 8,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecWindowAggregate.java",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecWindowAggregate.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecWindowAggregate.java?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -57,6 +57,7 @@\n import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n import org.apache.flink.table.types.DataType;\n import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.LogicalTypeRoot;\n import org.apache.flink.table.types.logical.RowType;\n \n import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n@@ -69,6 +70,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.TimeZone;\n \n import static org.apache.flink.util.Preconditions.checkArgument;\n import static org.apache.flink.util.Preconditions.checkNotNull;\n@@ -150,7 +152,17 @@ public StreamExecWindowAggregate(\n         final RowType inputRowType = (RowType) inputEdge.getOutputType();\n \n         final TableConfig config = planner.getTableConfig();\n-        final SliceAssigner sliceAssigner = createSliceAssigner(windowing);\n+\n+        // assign window based on the local time zone if time attribute type is TIMESTAMP_LTZ\n+        final boolean needLocalTimeZone =\n+                windowing.getTimeAttributeType().getTypeRoot()\n+                        == LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE;\n+        final TimeZone timeZoneOfWindow =\n+                needLocalTimeZone\n+                        ? TimeZone.getTimeZone(config.getLocalTimeZone())\n+                        : TimeZone.getTimeZone(\"UTC\");\n+\n+        final SliceAssigner sliceAssigner = createSliceAssigner(windowing, timeZoneOfWindow);\n \n         // Hopping window requires additional COUNT(*) to determine whether to register next timer\n         // through whether the current fired window is empty, see SliceSharedWindowAggProcessor.\n@@ -241,13 +253,15 @@ public StreamExecWindowAggregate(\n     // Utilities\n     // ------------------------------------------------------------------------------------------\n \n-    private static SliceAssigner createSliceAssigner(WindowingStrategy windowingStrategy) {\n+    private static SliceAssigner createSliceAssigner(\n+            WindowingStrategy windowingStrategy, TimeZone timeZoneOfWindow) {\n         WindowSpec windowSpec = windowingStrategy.getWindow();\n         if (windowingStrategy instanceof WindowAttachedWindowingStrategy) {\n             int windowEndIndex =\n                     ((WindowAttachedWindowingStrategy) windowingStrategy).getWindowEnd();\n             // we don't need time attribute to assign windows, use a magic value in this case\n-            SliceAssigner innerAssigner = createSliceAssigner(windowSpec, Integer.MAX_VALUE);\n+            SliceAssigner innerAssigner =\n+                    createSliceAssigner(windowSpec, Integer.MAX_VALUE, timeZoneOfWindow);\n             return SliceAssigners.windowed(windowEndIndex, innerAssigner);\n \n         } else if (windowingStrategy instanceof TimeAttributeWindowingStrategy) {\n@@ -259,18 +273,18 @@ private static SliceAssigner createSliceAssigner(WindowingStrategy windowingStra\n             } else {\n                 timeAttributeIndex = -1;\n             }\n-            return createSliceAssigner(windowSpec, timeAttributeIndex);\n+            return createSliceAssigner(windowSpec, timeAttributeIndex, timeZoneOfWindow);\n \n         } else {\n             throw new UnsupportedOperationException(windowingStrategy + \" is not supported yet.\");\n         }\n     }\n \n     private static SliceAssigner createSliceAssigner(\n-            WindowSpec windowSpec, int timeAttributeIndex) {\n+            WindowSpec windowSpec, int timeAttributeIndex, TimeZone timeZoneOfWindow) {\n         if (windowSpec instanceof TumblingWindowSpec) {\n             Duration size = ((TumblingWindowSpec) windowSpec).getSize();\n-            return SliceAssigners.tumbling(timeAttributeIndex, size);\n+            return SliceAssigners.tumbling(timeAttributeIndex, timeZoneOfWindow, size);\n \n         } else if (windowSpec instanceof HoppingWindowSpec) {\n             Duration size = ((HoppingWindowSpec) windowSpec).getSize();\n@@ -282,7 +296,7 @@ private static SliceAssigner createSliceAssigner(\n                                         + \"integral multiple of slide, but got size %s ms and slide %s ms\",\n                                 size.toMillis(), slide.toMillis()));\n             }\n-            return SliceAssigners.hopping(timeAttributeIndex, size, slide);\n+            return SliceAssigners.hopping(timeAttributeIndex, timeZoneOfWindow, size, slide);\n \n         } else if (windowSpec instanceof CumulativeWindowSpec) {\n             Duration maxSize = ((CumulativeWindowSpec) windowSpec).getMaxSize();\n@@ -294,7 +308,7 @@ private static SliceAssigner createSliceAssigner(\n                                         + \"integral multiple of step, but got maxSize %s ms and step %s ms\",\n                                 maxSize.toMillis(), step.toMillis()));\n             }\n-            return SliceAssigners.cumulative(timeAttributeIndex, maxSize, step);\n+            return SliceAssigners.cumulative(timeAttributeIndex, timeZoneOfWindow, maxSize, step);\n \n         } else {\n             throw new UnsupportedOperationException(windowSpec + \" is not supported yet.\");"
  },
  {
    "sha": "b8b2d656caa86a628c736d16cc326677c93d537d",
    "filename": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkTypeFactory.scala",
    "status": "modified",
    "additions": 33,
    "deletions": 7,
    "changes": 40,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkTypeFactory.scala",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkTypeFactory.scala",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkTypeFactory.scala?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -80,9 +80,6 @@ class FlinkTypeFactory(typeSystem: RelDataTypeSystem)\n       // temporal types\n       case LogicalTypeRoot.DATE => createSqlType(DATE)\n       case LogicalTypeRoot.TIME_WITHOUT_TIME_ZONE => createSqlType(TIME)\n-      case LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE =>\n-        val lzTs = t.asInstanceOf[LocalZonedTimestampType]\n-        createSqlType(TIMESTAMP_WITH_LOCAL_TIME_ZONE, lzTs.getPrecision)\n \n       // interval types\n       case LogicalTypeRoot.INTERVAL_YEAR_MONTH =>\n@@ -157,9 +154,19 @@ class FlinkTypeFactory(typeSystem: RelDataTypeSystem)\n       case LogicalTypeRoot.TIMESTAMP_WITHOUT_TIME_ZONE =>\n         val timestampType = t.asInstanceOf[TimestampType]\n         timestampType.getKind match {\n-          case TimestampKind.PROCTIME => createProctimeIndicatorType(true)\n           case TimestampKind.ROWTIME => createRowtimeIndicatorType(true)\n           case TimestampKind.REGULAR => createSqlType(TIMESTAMP, timestampType.getPrecision)\n+          case TimestampKind.PROCTIME => throw new TableException(\n+            s\"Processing time indicator only supports\" +\n+              s\" LocalZonedTimestampType, but actual is TimestampType.\" +\n+              s\" This is a bug in planner, please file an issue.\")\n+        }\n+      case LogicalTypeRoot.TIMESTAMP_WITH_LOCAL_TIME_ZONE =>\n+        val lzTs = t.asInstanceOf[LocalZonedTimestampType]\n+        lzTs.getKind match {\n+          case TimestampKind.PROCTIME => createProctimeIndicatorType(true)\n+          case TimestampKind.REGULAR =>\n+            createSqlType(TIMESTAMP_WITH_LOCAL_TIME_ZONE, lzTs.getPrecision)\n         }\n       case _ =>\n         seenTypes.get(t) match {\n@@ -178,7 +185,7 @@ class FlinkTypeFactory(typeSystem: RelDataTypeSystem)\n     * Creates a indicator type for processing-time, but with similar properties as SQL timestamp.\n     */\n   def createProctimeIndicatorType(isNullable: Boolean): RelDataType = {\n-    val originalType = createFieldTypeFromLogicalType(new TimestampType(isNullable, 3))\n+    val originalType = createFieldTypeFromLogicalType(new LocalZonedTimestampType(isNullable, 3))\n     canonize(new TimeIndicatorRelDataType(\n       getTypeSystem,\n       originalType.asInstanceOf[BasicSqlType],\n@@ -445,7 +452,9 @@ object FlinkTypeFactory {\n \n   def isTimeIndicatorType(t: LogicalType): Boolean = t match {\n     case t: TimestampType\n-      if t.getKind == TimestampKind.ROWTIME || t.getKind == TimestampKind.PROCTIME => true\n+      if t.getKind == TimestampKind.ROWTIME => true\n+    case ltz: LocalZonedTimestampType\n+      if ltz.getKind == TimestampKind.PROCTIME => true\n     case _ => false\n   }\n \n@@ -464,6 +473,12 @@ object FlinkTypeFactory {\n     case _ => false\n   }\n \n+  def isTimestampLtzIndicatorType(relDataType: RelDataType): Boolean =\n+    relDataType.getSqlTypeName match {\n+    case SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE => true\n+    case _ => false\n+  }\n+\n   @Deprecated\n   def isProctimeIndicatorType(typeInfo: TypeInformation[_]): Boolean = typeInfo match {\n     case ti: TimeIndicatorTypeInfo if !ti.isEventTime => true\n@@ -523,7 +538,18 @@ object FlinkTypeFactory {\n         if (indicator.isEventTime) {\n           new TimestampType(true, TimestampKind.ROWTIME, 3)\n         } else {\n-          new TimestampType(true, TimestampKind.PROCTIME, 3)\n+          throw new TableException(s\"Processing time indicator only supports\" +\n+            s\" LocalZonedTimestampType, but actual is TimestampType.\" +\n+            s\" This is a bug in planner, please file an issue.\")\n+        }\n+      case TIMESTAMP_WITH_LOCAL_TIME_ZONE if relDataType.isInstanceOf[TimeIndicatorRelDataType] =>\n+        val indicator = relDataType.asInstanceOf[TimeIndicatorRelDataType]\n+        if (indicator.isEventTime) {\n+          throw new TableException(s\"Event time indicator only supports\" +\n+            s\" TimestampType now, but actual is LocalZonedTimestampType.\" +\n+            s\" This is a bug in planner, please file an issue.\")\n+        } else {\n+          new LocalZonedTimestampType(true, TimestampKind.PROCTIME, 3)\n         }\n \n       // temporal types"
  },
  {
    "sha": "f17ab883e1ba0208c5320e66ec7044ff020c95f0",
    "filename": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/RelTimeIndicatorConverter.scala",
    "status": "modified",
    "additions": 61,
    "deletions": 30,
    "changes": 91,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/RelTimeIndicatorConverter.scala",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/RelTimeIndicatorConverter.scala",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/RelTimeIndicatorConverter.scala?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -18,15 +18,7 @@\n \n package org.apache.flink.table.planner.calcite\n \n-import org.apache.flink.table.api.{TableException, ValidationException}\n-import org.apache.flink.table.planner.calcite.FlinkTypeFactory._\n-import org.apache.flink.table.planner.functions.sql.FlinkSqlOperatorTable\n-import org.apache.flink.table.planner.plan.metadata.FlinkRelMetadataQuery\n-import org.apache.flink.table.planner.plan.nodes.calcite._\n-import org.apache.flink.table.planner.plan.schema.TimeIndicatorRelDataType\n-import org.apache.flink.table.planner.plan.utils.TemporalJoinUtil\n-import org.apache.flink.table.planner.plan.utils.WindowUtil.groupingContainsWindowStartEnd\n-import org.apache.flink.table.types.logical.TimestampType\n+import java.util.{Collections => JCollections}\n \n import org.apache.calcite.rel.`type`.RelDataType\n import org.apache.calcite.rel.core._\n@@ -37,8 +29,15 @@ import org.apache.calcite.rex._\n import org.apache.calcite.sql.`type`.SqlTypeName\n import org.apache.calcite.sql.fun.SqlStdOperatorTable\n import org.apache.calcite.sql.fun.SqlStdOperatorTable.FINAL\n-\n-import java.util.{Collections => JCollections}\n+import org.apache.flink.table.api.{TableException, ValidationException}\n+import org.apache.flink.table.planner.calcite.FlinkTypeFactory._\n+import org.apache.flink.table.planner.functions.sql.FlinkSqlOperatorTable\n+import org.apache.flink.table.planner.plan.metadata.FlinkRelMetadataQuery\n+import org.apache.flink.table.planner.plan.nodes.calcite._\n+import org.apache.flink.table.planner.plan.schema.TimeIndicatorRelDataType\n+import org.apache.flink.table.planner.plan.utils.TemporalJoinUtil\n+import org.apache.flink.table.planner.plan.utils.WindowUtil.groupingContainsWindowStartEnd\n+import org.apache.flink.table.types.logical.{LocalZonedTimestampType, TimestampType}\n \n import scala.collection.JavaConversions._\n import scala.collection.JavaConverters._\n@@ -51,10 +50,18 @@ import scala.collection.mutable\n   */\n class RelTimeIndicatorConverter(rexBuilder: RexBuilder) extends RelShuttle {\n \n-  private def timestamp(isNullable: Boolean): RelDataType = rexBuilder\n-    .getTypeFactory\n-    .asInstanceOf[FlinkTypeFactory]\n-    .createFieldTypeFromLogicalType(new TimestampType(isNullable, 3))\n+  private def timestamp(isNullable: Boolean, isTimestampLtz: Boolean = false)\n+  : RelDataType = {\n+    rexBuilder\n+      .getTypeFactory\n+      .asInstanceOf[FlinkTypeFactory]\n+      .createFieldTypeFromLogicalType(\n+        if (isTimestampLtz) {\n+          new LocalZonedTimestampType(isNullable, 3)\n+        } else {\n+          new TimestampType(isNullable, 3)\n+        })\n+  }\n \n   val materializerUtils = new RexTimeIndicatorMaterializerUtils(rexBuilder)\n \n@@ -433,7 +440,9 @@ class RelTimeIndicatorConverter(rexBuilder: RexBuilder) extends RelShuttle {\n             if (isTimeIndicatorType(expr.getType) && refIndices.contains(idx)) {\n               if (isRowtimeIndicatorType(expr.getType)) {\n                 // cast rowtime indicator to regular timestamp\n-                rexBuilder.makeAbstractCast(timestamp(expr.getType.isNullable), expr)\n+                rexBuilder.makeAbstractCast(\n+                  timestamp(expr.getType.isNullable, isTimestampLtzIndicatorType(expr.getType)),\n+                  expr)\n               } else {\n                 // generate proctime access\n                 rexBuilder.makeCall(FlinkSqlOperatorTable.PROCTIME_MATERIALIZE, expr)\n@@ -456,7 +465,7 @@ class RelTimeIndicatorConverter(rexBuilder: RexBuilder) extends RelShuttle {\n               if (isRowtimeIndicatorType(field.getType)) {\n                 // cast rowtime indicator to regular timestamp\n                 rexBuilder.makeAbstractCast(\n-                  timestamp(field.getType.isNullable),\n+                  timestamp(field.getType.isNullable, isTimestampLtzIndicatorType(field.getType)),\n                   new RexInputRef(field.getIndex, field.getType))\n               } else {\n                 // generate proctime access\n@@ -483,7 +492,7 @@ class RelTimeIndicatorConverter(rexBuilder: RexBuilder) extends RelShuttle {\n     // remove time indicator type as agg call return type\n     val updatedAggCalls = aggregate.getAggCallList.map { call =>\n       val callType = if (isTimeIndicatorType(call.getType)) {\n-        timestamp(call.getType.isNullable)\n+        timestamp(call.getType.isNullable, isTimestampLtzIndicatorType(call.getType))\n       } else {\n         call.getType\n       }\n@@ -599,10 +608,17 @@ class RexTimeIndicatorMaterializer(\n     private val input: Seq[RelDataType])\n   extends RexShuttle {\n \n-  private def timestamp(isNullable: Boolean): RelDataType = rexBuilder\n-    .getTypeFactory\n-    .asInstanceOf[FlinkTypeFactory]\n-    .createFieldTypeFromLogicalType(new TimestampType(isNullable, 3))\n+  private def timestamp(isNullable: Boolean, isTimestampLtz: Boolean = false): RelDataType = {\n+    rexBuilder\n+      .getTypeFactory\n+      .asInstanceOf[FlinkTypeFactory]\n+      .createFieldTypeFromLogicalType(\n+        if (isTimestampLtz) {\n+          new LocalZonedTimestampType(isNullable, 3)\n+        } else {\n+          new TimestampType(isNullable, 3)\n+        })\n+  }\n \n   override def visitInputRef(inputRef: RexInputRef): RexNode = {\n     // reference is interesting\n@@ -650,7 +666,8 @@ class RexTimeIndicatorMaterializer(\n           if (isTimeIndicatorType(o.getType)) {\n             if (isRowtimeIndicatorType(o.getType)) {\n               // cast rowtime indicator to regular timestamp\n-              rexBuilder.makeAbstractCast(timestamp(o.getType.isNullable), o)\n+              rexBuilder.makeAbstractCast(\n+                timestamp(o.getType.isNullable, isTimestampLtzIndicatorType(o.getType)), o)\n             } else {\n               // generate proctime access\n               rexBuilder.makeCall(FlinkSqlOperatorTable.PROCTIME_MATERIALIZE, o)\n@@ -694,7 +711,11 @@ class RexTimeIndicatorMaterializer(\n         if (updatedCall.getOperator == FlinkSqlOperatorTable.PROCTIME) {\n           updatedCall\n         } else {\n-          updatedCall.clone(timestamp(updatedCall.getType.isNullable), materializedOperands)\n+          updatedCall.clone(\n+            timestamp(\n+              updatedCall.getType.isNullable,\n+              isTimestampLtzIndicatorType(updatedCall.getType)),\n+            materializedOperands)\n         }\n \n       // materialize function's operands only\n@@ -711,10 +732,16 @@ class RexTimeIndicatorMaterializer(\n   */\n class RexTimeIndicatorMaterializerUtils(rexBuilder: RexBuilder) {\n \n-  private def timestamp(isNullable: Boolean): RelDataType = rexBuilder\n-    .getTypeFactory\n-    .asInstanceOf[FlinkTypeFactory]\n-    .createFieldTypeFromLogicalType(new TimestampType(isNullable, 3))\n+  private def timestamp(isNullable: Boolean, isTimestampLtz: Boolean = false): RelDataType =\n+    rexBuilder\n+      .getTypeFactory\n+      .asInstanceOf[FlinkTypeFactory]\n+      .createFieldTypeFromLogicalType(\n+        if (isTimestampLtz) {\n+          new LocalZonedTimestampType(isNullable, 3)\n+        } else {\n+          new TimestampType(isNullable, 3)\n+        })\n \n   def projectAndMaterializeFields(input: RelNode, indicesToMaterialize: Set[Int]): RelNode = {\n     val projects = input.getRowType.getFieldList.map { field =>\n@@ -741,7 +768,9 @@ class RexTimeIndicatorMaterializerUtils(rexBuilder: RexBuilder) {\n \n     relType.getFieldList.asScala.zipWithIndex.foreach { case (field, idx) =>\n       if (isTimeIndicatorType(field.getType) && shouldMaterialize(field.getName)) {\n-        outputTypeBuilder.add(field.getName, timestamp(field.getType.isNullable))\n+        outputTypeBuilder.add(\n+          field.getName,\n+          timestamp(field.getType.isNullable, isTimestampLtzIndicatorType(field.getType)))\n       } else {\n         outputTypeBuilder.add(field.getName, field.getType)\n       }\n@@ -762,7 +791,9 @@ class RexTimeIndicatorMaterializerUtils(rexBuilder: RexBuilder) {\n     if (isTimeIndicatorType(expr.getType)) {\n       if (isRowtimeIndicatorType(expr.getType)) {\n         // cast rowtime indicator to regular timestamp\n-        rexBuilder.makeAbstractCast(timestamp(expr.getType.isNullable), expr)\n+        rexBuilder.makeAbstractCast(\n+          timestamp(expr.getType.isNullable, isTimestampLtzIndicatorType(expr.getType)),\n+          expr)\n       } else {\n         // generate proctime access\n         rexBuilder.makeCall(FlinkSqlOperatorTable.PROCTIME_MATERIALIZE, expr)"
  },
  {
    "sha": "87f2f758dbfb4c3f34f988a9aa67d67f9a2458bb",
    "filename": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/ExprCodeGenerator.scala",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/ExprCodeGenerator.scala",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/ExprCodeGenerator.scala",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/ExprCodeGenerator.scala?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -189,7 +189,7 @@ class ExprCodeGenerator(ctx: CodeGeneratorContext, nullableInput: Boolean)\n         // attribute is proctime indicator.\n         // we use a null literal and generate a timestamp when we need it.\n         generateNullLiteral(\n-          new TimestampType(true, TimestampKind.PROCTIME, 3),\n+          new LocalZonedTimestampType(true, TimestampKind.PROCTIME, 3),\n           ctx.nullCheck)\n       case TimeIndicatorTypeInfo.PROCTIME_BATCH_MARKER =>\n         // attribute is proctime field in a batch query.\n@@ -797,7 +797,7 @@ class ExprCodeGenerator(ctx: CodeGeneratorContext, nullableInput: Boolean)\n         // attribute is proctime indicator.\n         // We use a null literal and generate a timestamp when we need it.\n         generateNullLiteral(\n-          new TimestampType(true, TimestampKind.PROCTIME, 3),\n+          new LocalZonedTimestampType(true, TimestampKind.PROCTIME, 3),\n           ctx.nullCheck)\n \n       case PROCTIME_MATERIALIZE =>"
  },
  {
    "sha": "21b45fe65d007a01920576baca82f2c7cf5c643c",
    "filename": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/GenerateUtils.scala",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/flink/blob/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/GenerateUtils.scala",
    "raw_url": "https://github.com/apache/flink/raw/8ac618f619498a75a87d2fe1690ed5ae85faab1e/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/GenerateUtils.scala",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/GenerateUtils.scala?ref=8ac618f619498a75a87d2fe1690ed5ae85faab1e",
    "patch": "@@ -490,7 +490,7 @@ object GenerateUtils {\n   def generateProctimeTimestamp(\n       ctx: CodeGeneratorContext,\n       contextTerm: String): GeneratedExpression = {\n-    val resultType = new TimestampType(3)\n+    val resultType = new LocalZonedTimestampType(3)\n     val resultTypeTerm = primitiveTypeTermForType(resultType)\n     val resultTerm = ctx.addReusableLocalVariable(resultTypeTerm, \"result\")\n     val resultCode =\n@@ -504,7 +504,7 @@ object GenerateUtils {\n \n   def generateCurrentTimestamp(\n       ctx: CodeGeneratorContext): GeneratedExpression = {\n-    new CurrentTimePointCallGen(false).generate(ctx, Seq(), new TimestampType(3))\n+    new CurrentTimePointCallGen(false).generate(ctx, Seq(), new LocalZonedTimestampType(3))\n   }\n \n   def generateRowtimeAccess("
  }
]
