[
  {
    "sha": "a1b40024ee6455deda538799a55e2fdf02af708b",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/common/CommonExecCorrelate.java",
    "status": "modified",
    "additions": 44,
    "deletions": 4,
    "changes": 48,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/common/CommonExecCorrelate.java",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/common/CommonExecCorrelate.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/common/CommonExecCorrelate.java?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -32,22 +32,40 @@\n import org.apache.flink.table.runtime.operators.join.FlinkJoinType;\n import org.apache.flink.table.types.logical.RowType;\n \n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\n+\n import org.apache.calcite.rex.RexCall;\n import org.apache.calcite.rex.RexNode;\n \n import javax.annotation.Nullable;\n \n import java.util.Collections;\n+import java.util.List;\n import java.util.Optional;\n \n /** Base {@link ExecNode} which matches along with join a Java/Scala user defined table function. */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public abstract class CommonExecCorrelate extends ExecNodeBase<RowData>\n         implements SingleTransformationTranslator<RowData> {\n+\n+    public static final String FIELD_NAME_JOIN_TYPE = \"joinType\";\n+    public static final String FIELD_NAME_FUNCTION_CALL = \"functionCall\";\n+    public static final String FIELD_NAME_CONDITION = \"condition\";\n+\n+    @JsonProperty(FIELD_NAME_JOIN_TYPE)\n     private final FlinkJoinType joinType;\n+\n+    @JsonProperty(FIELD_NAME_FUNCTION_CALL)\n     private final RexCall invocation;\n-    @Nullable private final RexNode condition;\n-    private final Class<?> operatorBaseClass;\n-    private final boolean retainHeader;\n+\n+    @JsonProperty(FIELD_NAME_CONDITION)\n+    @Nullable\n+    private final RexNode condition;\n+\n+    @JsonIgnore private final Class<?> operatorBaseClass;\n+    @JsonIgnore private final boolean retainHeader;\n \n     public CommonExecCorrelate(\n             FlinkJoinType joinType,\n@@ -58,7 +76,29 @@ public CommonExecCorrelate(\n             InputProperty inputProperty,\n             RowType outputType,\n             String description) {\n-        super(Collections.singletonList(inputProperty), outputType, description);\n+        this(\n+                joinType,\n+                invocation,\n+                condition,\n+                operatorBaseClass,\n+                retainHeader,\n+                getNewNodeId(),\n+                Collections.singletonList(inputProperty),\n+                outputType,\n+                description);\n+    }\n+\n+    public CommonExecCorrelate(\n+            FlinkJoinType joinType,\n+            RexCall invocation,\n+            @Nullable RexNode condition,\n+            Class<?> operatorBaseClass,\n+            boolean retainHeader,\n+            int id,\n+            List<InputProperty> inputProperties,\n+            RowType outputType,\n+            String description) {\n+        super(id, inputProperties, outputType, description);\n         this.joinType = joinType;\n         this.invocation = invocation;\n         this.condition = condition;"
  },
  {
    "sha": "b3456ed1dee1e5b4265aa3ac3a24af8f8ee9659b",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecCorrelate.java",
    "status": "modified",
    "additions": 30,
    "deletions": 2,
    "changes": 32,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecCorrelate.java",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecCorrelate.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecCorrelate.java?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -26,14 +26,22 @@\n import org.apache.flink.table.runtime.operators.join.FlinkJoinType;\n import org.apache.flink.table.types.logical.RowType;\n \n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\n+\n import org.apache.calcite.rex.RexCall;\n import org.apache.calcite.rex.RexNode;\n \n import javax.annotation.Nullable;\n \n+import java.util.Collections;\n+import java.util.List;\n+\n /**\n  * Stream {@link ExecNode} which matches along with join a Java/Scala user defined table function.\n  */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class StreamExecCorrelate extends CommonExecCorrelate implements StreamExecNode<RowData> {\n \n     public StreamExecCorrelate(\n@@ -43,13 +51,33 @@ public StreamExecCorrelate(\n             InputProperty inputProperty,\n             RowType outputType,\n             String description) {\n-        super(\n+        this(\n                 joinType,\n                 invocation,\n                 condition,\n+                getNewNodeId(),\n+                Collections.singletonList(inputProperty),\n+                outputType,\n+                description);\n+    }\n+\n+    @JsonCreator\n+    public StreamExecCorrelate(\n+            @JsonProperty(FIELD_NAME_JOIN_TYPE) FlinkJoinType joinType,\n+            @JsonProperty(FIELD_NAME_FUNCTION_CALL) RexNode invocation,\n+            @JsonProperty(FIELD_NAME_CONDITION) @Nullable RexNode condition,\n+            @JsonProperty(FIELD_NAME_ID) int id,\n+            @JsonProperty(FIELD_NAME_INPUT_PROPERTIES) List<InputProperty> inputProperties,\n+            @JsonProperty(FIELD_NAME_OUTPUT_TYPE) RowType outputType,\n+            @JsonProperty(FIELD_NAME_DESCRIPTION) String description) {\n+        super(\n+                joinType,\n+                (RexCall) invocation,\n+                condition,\n                 TableStreamOperator.class,\n                 true, // retainHeader\n-                inputProperty,\n+                id,\n+                inputProperties,\n                 outputType,\n                 description);\n     }"
  },
  {
    "sha": "811b756b83bb69d761446be76b2cf18712caa778",
    "filename": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest.java",
    "status": "added",
    "additions": 144,
    "deletions": 0,
    "changes": 144,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest.java",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest.java?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec.stream;\n+\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.table.api.TableConfig;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.planner.utils.StreamTableTestUtil;\n+import org.apache.flink.table.planner.utils.TableFunc1;\n+import org.apache.flink.table.planner.utils.TableTestBase;\n+\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/** Tests for function calls in plan json. */\n+public class CorrelateJsonPlanTest extends TableTestBase {\n+    private StreamTableTestUtil util;\n+    private TableEnvironment tEnv;\n+\n+    @Before\n+    public void setup() {\n+        util = streamTestUtil(TableConfig.getDefault());\n+        tEnv = util.getTableEnv();\n+\n+        String srcTableDdl =\n+                \"CREATE TABLE MyTable (\\n\"\n+                        + \"  a bigint,\\n\"\n+                        + \"  b int not null,\\n\"\n+                        + \"  c varchar,\\n\"\n+                        + \"  d timestamp(3)\\n\"\n+                        + \") with (\\n\"\n+                        + \"  'connector' = 'values',\\n\"\n+                        + \"  'bounded' = 'false')\";\n+        tEnv.executeSql(srcTableDdl);\n+    }\n+\n+    @Test\n+    public void testCrossJoin() {\n+        String sinkTableDdl =\n+                \"CREATE TABLE MySink (\\n\"\n+                        + \"  a varchar,\\n\"\n+                        + \"  b varchar\\n\"\n+                        + \") with (\\n\"\n+                        + \"  'connector' = 'values',\\n\"\n+                        + \"  'table-sink-class' = 'DEFAULT')\";\n+        tEnv.executeSql(sinkTableDdl);\n+\n+        TableFunc1 func1 = new TableFunc1();\n+        util.addFunction(\"func1\", func1, Types.STRING);\n+        String sqlQuery =\n+                \"insert into MySink SELECT c, s FROM MyTable, LATERAL TABLE(func1(c)) AS T(s)\";\n+        util.verifyJsonPlan(sqlQuery);\n+    }\n+\n+    @Test\n+    @Ignore(\"the case is ignored because of FLINK-21870\")\n+    public void testRegisterByClass() {\n+        String sinkTableDdl =\n+                \"CREATE TABLE MySink (\\n\"\n+                        + \"  a varchar,\\n\"\n+                        + \"  b varchar\\n\"\n+                        + \") with (\\n\"\n+                        + \"  'connector' = 'values',\\n\"\n+                        + \"  'table-sink-class' = 'DEFAULT')\";\n+        tEnv.executeSql(sinkTableDdl);\n+\n+        tEnv.createTemporaryFunction(\"func1\", TableFunc1.class);\n+        String sqlQuery =\n+                \"insert into MySink SELECT c, s FROM MyTable, LATERAL TABLE(func1(c)) AS T(s)\";\n+        util.verifyJsonPlan(sqlQuery);\n+    }\n+\n+    @Test\n+    public void testCrossJoinOverrideParameters() {\n+        String sinkTableDdl =\n+                \"CREATE TABLE MySink (\\n\"\n+                        + \"  a varchar,\\n\"\n+                        + \"  b varchar\\n\"\n+                        + \") with (\\n\"\n+                        + \"  'connector' = 'values',\\n\"\n+                        + \"  'table-sink-class' = 'DEFAULT')\";\n+        tEnv.executeSql(sinkTableDdl);\n+\n+        TableFunc1 func1 = new TableFunc1();\n+        util.addFunction(\"func1\", func1, Types.STRING);\n+        String sqlQuery =\n+                \"insert into MySink SELECT c, s FROM MyTable, LATERAL TABLE(func1(c, '$')) AS T(s)\";\n+        util.verifyJsonPlan(sqlQuery);\n+    }\n+\n+    @Test\n+    public void testLeftOuterJoinWithLiteralTrue() {\n+        String sinkTableDdl =\n+                \"CREATE TABLE MySink (\\n\"\n+                        + \"  a varchar,\\n\"\n+                        + \"  b varchar\\n\"\n+                        + \") with (\\n\"\n+                        + \"  'connector' = 'values',\\n\"\n+                        + \"  'table-sink-class' = 'DEFAULT')\";\n+        tEnv.executeSql(sinkTableDdl);\n+\n+        TableFunc1 func1 = new TableFunc1();\n+        util.addFunction(\"func1\", func1, Types.STRING);\n+        String sqlQuery =\n+                \"insert into MySink SELECT c, s FROM MyTable LEFT JOIN LATERAL TABLE(func1(c)) AS T(s) ON TRUE\";\n+        util.verifyJsonPlan(sqlQuery);\n+    }\n+\n+    @Test\n+    public void testJoinWithFilter() {\n+        String sinkTableDdl =\n+                \"CREATE TABLE MySink (\\n\"\n+                        + \"  a varchar,\\n\"\n+                        + \"  b varchar\\n\"\n+                        + \") with (\\n\"\n+                        + \"  'connector' = 'values',\\n\"\n+                        + \"  'table-sink-class' = 'DEFAULT')\";\n+        tEnv.executeSql(sinkTableDdl);\n+\n+        TableFunc1 func1 = new TableFunc1();\n+        util.addFunction(\"func1\", func1, Types.STRING);\n+        String sqlQuery =\n+                \"insert into MySink \"\n+                        + \"select * from (SELECT c, s FROM MyTable, LATERAL TABLE(func1(c)) AS T(s)) as T2 where c = s\";\n+        util.verifyJsonPlan(sqlQuery);\n+    }\n+}"
  },
  {
    "sha": "8d4859f3d36d4d29ded63dfb4fa40ee1f3e9f0f9",
    "filename": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/JsonSerdeCoverageTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/JsonSerdeCoverageTest.java",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/JsonSerdeCoverageTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/JsonSerdeCoverageTest.java?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -57,7 +57,6 @@\n                     \"StreamExecPythonGroupTableAggregate\",\n                     \"StreamExecOverAggregate\",\n                     \"StreamExecPythonOverAggregate\",\n-                    \"StreamExecCorrelate\",\n                     \"StreamExecPythonCorrelate\",\n                     \"StreamExecRank\",\n                     \"StreamExecPythonCalc\","
  },
  {
    "sha": "018e261356a0dada5b79b600bd07a874fc9d274a",
    "filename": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/jsonplan/CorrelatePlanJsonITCase.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/jsonplan/CorrelatePlanJsonITCase.java",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/jsonplan/CorrelatePlanJsonITCase.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/jsonplan/CorrelatePlanJsonITCase.java?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.runtime.stream.jsonplan;\n+\n+import org.apache.flink.table.planner.factories.TestValuesTableFactory;\n+import org.apache.flink.table.planner.runtime.utils.JavaUserDefinedTableFunctions;\n+import org.apache.flink.table.planner.utils.JsonPlanTestBase;\n+import org.apache.flink.types.Row;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+/** Integration tests for correlate. */\n+public class CorrelatePlanJsonITCase extends JsonPlanTestBase {\n+\n+    @Before\n+    public void before() {\n+        List<Row> data = Arrays.asList(Row.of(\"1,1,hi\"));\n+        createTestValuesSourceTable(\"MyTable\", data, \"a varchar\");\n+    }\n+\n+    @Test\n+    public void testSystemFuncByObject()\n+            throws ExecutionException, InterruptedException, IOException {\n+        tableEnv.createTemporarySystemFunction(\n+                \"STRING_SPLIT\", new JavaUserDefinedTableFunctions.StringSplit());\n+        createTestValuesSinkTable(\"MySink\", \"a STRING\", \"b STRING\");\n+        String query =\n+                \"insert into MySink SELECT a, v FROM MyTable, lateral table(STRING_SPLIT(a, ',')) as T(v)\";\n+        executeSqlWithJsonPlanVerified(query).await();\n+        List<String> expected = Arrays.asList(\"+I[1,1,hi, 1]\", \"+I[1,1,hi, 1]\", \"+I[1,1,hi, hi]\");\n+        assertResult(expected, TestValuesTableFactory.getResults(\"MySink\"));\n+    }\n+\n+    @Test\n+    public void testSystemFuncByClass()\n+            throws ExecutionException, InterruptedException, IOException {\n+        tableEnv.createTemporarySystemFunction(\n+                \"STRING_SPLIT\", JavaUserDefinedTableFunctions.StringSplit.class);\n+        createTestValuesSinkTable(\"MySink\", \"a STRING\", \"b STRING\");\n+        String query =\n+                \"insert into MySink SELECT a, v FROM MyTable, lateral table(STRING_SPLIT(a, ',')) as T(v)\";\n+        executeSqlWithJsonPlanVerified(query).await();\n+        List<String> expected = Arrays.asList(\"+I[1,1,hi, 1]\", \"+I[1,1,hi, 1]\", \"+I[1,1,hi, hi]\");\n+        assertResult(expected, TestValuesTableFactory.getResults(\"MySink\"));\n+    }\n+\n+    @Test\n+    public void testTemporaryFuncByObject()\n+            throws ExecutionException, InterruptedException, IOException {\n+        tableEnv.createTemporaryFunction(\n+                \"STRING_SPLIT\", new JavaUserDefinedTableFunctions.StringSplit());\n+        createTestValuesSinkTable(\"MySink\", \"a STRING\", \"b STRING\");\n+        String query =\n+                \"insert into MySink SELECT a, v FROM MyTable, lateral table(STRING_SPLIT(a, ',')) as T(v)\";\n+        executeSqlWithJsonPlanVerified(query).await();\n+        List<String> expected = Arrays.asList(\"+I[1,1,hi, 1]\", \"+I[1,1,hi, 1]\", \"+I[1,1,hi, hi]\");\n+        assertResult(expected, TestValuesTableFactory.getResults(\"MySink\"));\n+    }\n+\n+    @Test\n+    public void testTemporaryFuncByClass()\n+            throws ExecutionException, InterruptedException, IOException {\n+        tableEnv.createTemporaryFunction(\n+                \"STRING_SPLIT\", JavaUserDefinedTableFunctions.StringSplit.class);\n+        createTestValuesSinkTable(\"MySink\", \"a STRING\", \"b STRING\");\n+        String query =\n+                \"insert into MySink SELECT a, v FROM MyTable, lateral table(STRING_SPLIT(a, ',')) as T(v)\";\n+        executeSqlWithJsonPlanVerified(query).await();\n+        List<String> expected = Arrays.asList(\"+I[1,1,hi, 1]\", \"+I[1,1,hi, 1]\", \"+I[1,1,hi, hi]\");\n+        assertResult(expected, TestValuesTableFactory.getResults(\"MySink\"));\n+    }\n+\n+    @Test\n+    public void testFilter() throws ExecutionException, InterruptedException, IOException {\n+        tableEnv.createTemporarySystemFunction(\n+                \"STRING_SPLIT\", new JavaUserDefinedTableFunctions.StringSplit());\n+        createTestValuesSinkTable(\"MySink\", \"a STRING\", \"b STRING\");\n+        String query =\n+                \"insert into MySink SELECT a, v FROM MyTable, lateral table(STRING_SPLIT(a, ',')) as T(v) where cast(v as int) > 0\";\n+        executeSqlWithJsonPlanVerified(query).await();\n+        List<String> expected = Arrays.asList(\"+I[1,1,hi, 1]\", \"+I[1,1,hi, 1]\");\n+        assertResult(expected, TestValuesTableFactory.getResults(\"MySink\"));\n+    }\n+}"
  },
  {
    "sha": "762ed4d602b2f64713980cf28a7f0ad5c59f43a8",
    "filename": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testCrossJoin.out",
    "status": "added",
    "additions": 229,
    "deletions": 0,
    "changes": 229,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testCrossJoin.out",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testCrossJoin.out",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testCrossJoin.out?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -0,0 +1,229 @@\n+{\n+  \"flinkVersion\" : \"\",\n+  \"nodes\" : [ {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan\",\n+    \"scanTableSource\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MyTable\"\n+      },\n+      \"catalogTable\" : {\n+        \"schema.3.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.2.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.3.name\" : \"d\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"BIGINT\",\n+        \"schema.2.name\" : \"c\",\n+        \"schema.1.name\" : \"b\",\n+        \"bounded\" : \"false\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"INT NOT NULL\"\n+      }\n+    },\n+    \"id\" : 17,\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d])\",\n+    \"inputProperties\" : [ ]\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCorrelate\",\n+    \"joinType\" : \"INNER\",\n+    \"functionCall\" : {\n+      \"kind\" : \"REX_CALL\",\n+      \"operator\" : {\n+        \"name\" : \"func1\",\n+        \"kind\" : \"OTHER_FUNCTION\",\n+        \"syntax\" : \"FUNCTION\"\n+      },\n+      \"operands\" : [ {\n+        \"kind\" : \"FIELD_ACCESS\",\n+        \"name\" : \"c\",\n+        \"expr\" : {\n+          \"kind\" : \"CORREL_VARIABLE\",\n+          \"correl\" : \"$cor0\",\n+          \"type\" : {\n+            \"structKind\" : \"FULLY_QUALIFIED\",\n+            \"nullable\" : false,\n+            \"fields\" : [ {\n+              \"typeName\" : \"BIGINT\",\n+              \"nullable\" : true,\n+              \"fieldName\" : \"a\"\n+            }, {\n+              \"typeName\" : \"INTEGER\",\n+              \"nullable\" : false,\n+              \"fieldName\" : \"b\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"c\"\n+            }, {\n+              \"typeName\" : \"TIMESTAMP\",\n+              \"nullable\" : true,\n+              \"precision\" : 3,\n+              \"fieldName\" : \"d\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"s\"\n+            } ]\n+          }\n+        }\n+      } ],\n+      \"type\" : {\n+        \"structKind\" : \"FULLY_QUALIFIED\",\n+        \"nullable\" : false,\n+        \"fields\" : [ {\n+          \"typeName\" : \"VARCHAR\",\n+          \"nullable\" : true,\n+          \"precision\" : 2147483647,\n+          \"fieldName\" : \"f0\"\n+        } ]\n+      }\n+    },\n+    \"condition\" : null,\n+    \"id\" : 18,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      }, {\n+        \"f0\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Correlate(invocation=[func1($cor0.c)], correlate=[table(func1($cor0.c))], select=[a,b,c,d,f0], rowType=[RecordType(BIGINT a, INTEGER b, VARCHAR(2147483647) c, TIMESTAMP(3) d, VARCHAR(2147483647) f0)], joinType=[INNER])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc\",\n+    \"projection\" : [ {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 2,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    }, {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 4,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    } ],\n+    \"condition\" : null,\n+    \"id\" : 19,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"s\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Calc(select=[c, f0 AS s])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecSink\",\n+    \"dynamicTableSink\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MySink\"\n+      },\n+      \"catalogTable\" : {\n+        \"table-sink-class\" : \"DEFAULT\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.1.name\" : \"b\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"VARCHAR(2147483647)\"\n+      }\n+    },\n+    \"inputChangelogMode\" : [ \"INSERT\" ],\n+    \"id\" : 20,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"s\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Sink(table=[default_catalog.default_database.MySink], fields=[c, s])\"\n+  } ],\n+  \"edges\" : [ {\n+    \"source\" : 17,\n+    \"target\" : 18,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 18,\n+    \"target\" : 19,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 19,\n+    \"target\" : 20,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  } ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "6d0538a30fe4d84406891e0da94a605244fc223a",
    "filename": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testCrossJoinOverrideParameters.out",
    "status": "added",
    "additions": 237,
    "deletions": 0,
    "changes": 237,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testCrossJoinOverrideParameters.out",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testCrossJoinOverrideParameters.out",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testCrossJoinOverrideParameters.out?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -0,0 +1,237 @@\n+{\n+  \"flinkVersion\" : \"\",\n+  \"nodes\" : [ {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan\",\n+    \"scanTableSource\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MyTable\"\n+      },\n+      \"catalogTable\" : {\n+        \"schema.3.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.2.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.3.name\" : \"d\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"BIGINT\",\n+        \"schema.2.name\" : \"c\",\n+        \"schema.1.name\" : \"b\",\n+        \"bounded\" : \"false\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"INT NOT NULL\"\n+      }\n+    },\n+    \"id\" : 13,\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d])\",\n+    \"inputProperties\" : [ ]\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCorrelate\",\n+    \"joinType\" : \"INNER\",\n+    \"functionCall\" : {\n+      \"kind\" : \"REX_CALL\",\n+      \"operator\" : {\n+        \"name\" : \"func1\",\n+        \"kind\" : \"OTHER_FUNCTION\",\n+        \"syntax\" : \"FUNCTION\"\n+      },\n+      \"operands\" : [ {\n+        \"kind\" : \"FIELD_ACCESS\",\n+        \"name\" : \"c\",\n+        \"expr\" : {\n+          \"kind\" : \"CORREL_VARIABLE\",\n+          \"correl\" : \"$cor0\",\n+          \"type\" : {\n+            \"structKind\" : \"FULLY_QUALIFIED\",\n+            \"nullable\" : false,\n+            \"fields\" : [ {\n+              \"typeName\" : \"BIGINT\",\n+              \"nullable\" : true,\n+              \"fieldName\" : \"a\"\n+            }, {\n+              \"typeName\" : \"INTEGER\",\n+              \"nullable\" : false,\n+              \"fieldName\" : \"b\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"c\"\n+            }, {\n+              \"typeName\" : \"TIMESTAMP\",\n+              \"nullable\" : true,\n+              \"precision\" : 3,\n+              \"fieldName\" : \"d\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"s\"\n+            } ]\n+          }\n+        }\n+      }, {\n+        \"kind\" : \"LITERAL\",\n+        \"value\" : \"$\",\n+        \"type\" : {\n+          \"typeName\" : \"CHAR\",\n+          \"nullable\" : false,\n+          \"precision\" : 1\n+        }\n+      } ],\n+      \"type\" : {\n+        \"structKind\" : \"FULLY_QUALIFIED\",\n+        \"nullable\" : false,\n+        \"fields\" : [ {\n+          \"typeName\" : \"VARCHAR\",\n+          \"nullable\" : true,\n+          \"precision\" : 2147483647,\n+          \"fieldName\" : \"f0\"\n+        } ]\n+      }\n+    },\n+    \"condition\" : null,\n+    \"id\" : 14,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      }, {\n+        \"f0\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Correlate(invocation=[func1($cor0.c, _UTF-16LE'$')], correlate=[table(func1($cor0.c,_UTF-16LE'$'))], select=[a,b,c,d,f0], rowType=[RecordType(BIGINT a, INTEGER b, VARCHAR(2147483647) c, TIMESTAMP(3) d, VARCHAR(2147483647) f0)], joinType=[INNER])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc\",\n+    \"projection\" : [ {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 2,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    }, {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 4,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    } ],\n+    \"condition\" : null,\n+    \"id\" : 15,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"s\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Calc(select=[c, f0 AS s])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecSink\",\n+    \"dynamicTableSink\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MySink\"\n+      },\n+      \"catalogTable\" : {\n+        \"table-sink-class\" : \"DEFAULT\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.1.name\" : \"b\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"VARCHAR(2147483647)\"\n+      }\n+    },\n+    \"inputChangelogMode\" : [ \"INSERT\" ],\n+    \"id\" : 16,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"s\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Sink(table=[default_catalog.default_database.MySink], fields=[c, s])\"\n+  } ],\n+  \"edges\" : [ {\n+    \"source\" : 13,\n+    \"target\" : 14,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 14,\n+    \"target\" : 15,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 15,\n+    \"target\" : 16,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  } ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "a8f082edfc4df92d367134c060d9a24901910782",
    "filename": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testJoinWithFilter.out",
    "status": "added",
    "additions": 257,
    "deletions": 0,
    "changes": 257,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testJoinWithFilter.out",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testJoinWithFilter.out",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testJoinWithFilter.out?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -0,0 +1,257 @@\n+{\n+  \"flinkVersion\" : \"\",\n+  \"nodes\" : [ {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan\",\n+    \"scanTableSource\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MyTable\"\n+      },\n+      \"catalogTable\" : {\n+        \"schema.3.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.2.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.3.name\" : \"d\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"BIGINT\",\n+        \"schema.2.name\" : \"c\",\n+        \"schema.1.name\" : \"b\",\n+        \"bounded\" : \"false\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"INT NOT NULL\"\n+      }\n+    },\n+    \"id\" : 1,\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d])\",\n+    \"inputProperties\" : [ ]\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCorrelate\",\n+    \"joinType\" : \"INNER\",\n+    \"functionCall\" : {\n+      \"kind\" : \"REX_CALL\",\n+      \"operator\" : {\n+        \"name\" : \"func1\",\n+        \"kind\" : \"OTHER_FUNCTION\",\n+        \"syntax\" : \"FUNCTION\"\n+      },\n+      \"operands\" : [ {\n+        \"kind\" : \"FIELD_ACCESS\",\n+        \"name\" : \"c\",\n+        \"expr\" : {\n+          \"kind\" : \"CORREL_VARIABLE\",\n+          \"correl\" : \"$cor0\",\n+          \"type\" : {\n+            \"structKind\" : \"FULLY_QUALIFIED\",\n+            \"nullable\" : false,\n+            \"fields\" : [ {\n+              \"typeName\" : \"BIGINT\",\n+              \"nullable\" : true,\n+              \"fieldName\" : \"a\"\n+            }, {\n+              \"typeName\" : \"INTEGER\",\n+              \"nullable\" : false,\n+              \"fieldName\" : \"b\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"c\"\n+            }, {\n+              \"typeName\" : \"TIMESTAMP\",\n+              \"nullable\" : true,\n+              \"precision\" : 3,\n+              \"fieldName\" : \"d\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"s\"\n+            } ]\n+          }\n+        }\n+      } ],\n+      \"type\" : {\n+        \"structKind\" : \"FULLY_QUALIFIED\",\n+        \"nullable\" : false,\n+        \"fields\" : [ {\n+          \"typeName\" : \"VARCHAR\",\n+          \"nullable\" : true,\n+          \"precision\" : 2147483647,\n+          \"fieldName\" : \"f0\"\n+        } ]\n+      }\n+    },\n+    \"condition\" : null,\n+    \"id\" : 2,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      }, {\n+        \"f0\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Correlate(invocation=[func1($cor0.c)], correlate=[table(func1($cor0.c))], select=[a,b,c,d,f0], rowType=[RecordType(BIGINT a, INTEGER b, VARCHAR(2147483647) c, TIMESTAMP(3) d, VARCHAR(2147483647) f0)], joinType=[INNER])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc\",\n+    \"projection\" : [ {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 2,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    }, {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 4,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    } ],\n+    \"condition\" : {\n+      \"kind\" : \"REX_CALL\",\n+      \"operator\" : {\n+        \"name\" : \"=\",\n+        \"kind\" : \"EQUALS\",\n+        \"syntax\" : \"BINARY\"\n+      },\n+      \"operands\" : [ {\n+        \"kind\" : \"INPUT_REF\",\n+        \"inputIndex\" : 2,\n+        \"type\" : {\n+          \"typeName\" : \"VARCHAR\",\n+          \"nullable\" : true,\n+          \"precision\" : 2147483647\n+        }\n+      }, {\n+        \"kind\" : \"INPUT_REF\",\n+        \"inputIndex\" : 4,\n+        \"type\" : {\n+          \"typeName\" : \"VARCHAR\",\n+          \"nullable\" : true,\n+          \"precision\" : 2147483647\n+        }\n+      } ],\n+      \"type\" : {\n+        \"typeName\" : \"BOOLEAN\",\n+        \"nullable\" : true\n+      }\n+    },\n+    \"id\" : 3,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"f0\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Calc(select=[c, f0], where=[(c = f0)])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecSink\",\n+    \"dynamicTableSink\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MySink\"\n+      },\n+      \"catalogTable\" : {\n+        \"table-sink-class\" : \"DEFAULT\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.1.name\" : \"b\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"VARCHAR(2147483647)\"\n+      }\n+    },\n+    \"inputChangelogMode\" : [ \"INSERT\" ],\n+    \"id\" : 4,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"f0\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Sink(table=[default_catalog.default_database.MySink], fields=[c, f0])\"\n+  } ],\n+  \"edges\" : [ {\n+    \"source\" : 1,\n+    \"target\" : 2,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 2,\n+    \"target\" : 3,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 3,\n+    \"target\" : 4,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  } ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "ae36e5806971b5a3795265b39d055d6f37c73902",
    "filename": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testLeftOuterJoinWithLiteralTrue.out",
    "status": "added",
    "additions": 229,
    "deletions": 0,
    "changes": 229,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testLeftOuterJoinWithLiteralTrue.out",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testLeftOuterJoinWithLiteralTrue.out",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testLeftOuterJoinWithLiteralTrue.out?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -0,0 +1,229 @@\n+{\n+  \"flinkVersion\" : \"\",\n+  \"nodes\" : [ {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan\",\n+    \"scanTableSource\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MyTable\"\n+      },\n+      \"catalogTable\" : {\n+        \"schema.3.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.2.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.3.name\" : \"d\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"BIGINT\",\n+        \"schema.2.name\" : \"c\",\n+        \"schema.1.name\" : \"b\",\n+        \"bounded\" : \"false\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"INT NOT NULL\"\n+      }\n+    },\n+    \"id\" : 9,\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d])\",\n+    \"inputProperties\" : [ ]\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCorrelate\",\n+    \"joinType\" : \"LEFT\",\n+    \"functionCall\" : {\n+      \"kind\" : \"REX_CALL\",\n+      \"operator\" : {\n+        \"name\" : \"func1\",\n+        \"kind\" : \"OTHER_FUNCTION\",\n+        \"syntax\" : \"FUNCTION\"\n+      },\n+      \"operands\" : [ {\n+        \"kind\" : \"FIELD_ACCESS\",\n+        \"name\" : \"c\",\n+        \"expr\" : {\n+          \"kind\" : \"CORREL_VARIABLE\",\n+          \"correl\" : \"$cor0\",\n+          \"type\" : {\n+            \"structKind\" : \"FULLY_QUALIFIED\",\n+            \"nullable\" : false,\n+            \"fields\" : [ {\n+              \"typeName\" : \"BIGINT\",\n+              \"nullable\" : true,\n+              \"fieldName\" : \"a\"\n+            }, {\n+              \"typeName\" : \"INTEGER\",\n+              \"nullable\" : false,\n+              \"fieldName\" : \"b\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"c\"\n+            }, {\n+              \"typeName\" : \"TIMESTAMP\",\n+              \"nullable\" : true,\n+              \"precision\" : 3,\n+              \"fieldName\" : \"d\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"s\"\n+            } ]\n+          }\n+        }\n+      } ],\n+      \"type\" : {\n+        \"structKind\" : \"FULLY_QUALIFIED\",\n+        \"nullable\" : false,\n+        \"fields\" : [ {\n+          \"typeName\" : \"VARCHAR\",\n+          \"nullable\" : true,\n+          \"precision\" : 2147483647,\n+          \"fieldName\" : \"f0\"\n+        } ]\n+      }\n+    },\n+    \"condition\" : null,\n+    \"id\" : 10,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      }, {\n+        \"f0\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Correlate(invocation=[func1($cor0.c)], correlate=[table(func1($cor0.c))], select=[a,b,c,d,f0], rowType=[RecordType(BIGINT a, INTEGER b, VARCHAR(2147483647) c, TIMESTAMP(3) d, VARCHAR(2147483647) f0)], joinType=[LEFT])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc\",\n+    \"projection\" : [ {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 2,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    }, {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 4,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    } ],\n+    \"condition\" : null,\n+    \"id\" : 11,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"s\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Calc(select=[c, f0 AS s])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecSink\",\n+    \"dynamicTableSink\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MySink\"\n+      },\n+      \"catalogTable\" : {\n+        \"table-sink-class\" : \"DEFAULT\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.1.name\" : \"b\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"VARCHAR(2147483647)\"\n+      }\n+    },\n+    \"inputChangelogMode\" : [ \"INSERT\" ],\n+    \"id\" : 12,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"s\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Sink(table=[default_catalog.default_database.MySink], fields=[c, s])\"\n+  } ],\n+  \"edges\" : [ {\n+    \"source\" : 9,\n+    \"target\" : 10,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 10,\n+    \"target\" : 11,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 11,\n+    \"target\" : 12,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  } ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "08612d29407b8c18c26ef5bf8ee524add4620db6",
    "filename": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testRegisterByClass.out",
    "status": "added",
    "additions": 232,
    "deletions": 0,
    "changes": 232,
    "blob_url": "https://github.com/apache/flink/blob/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testRegisterByClass.out",
    "raw_url": "https://github.com/apache/flink/raw/f122b5d03f71129cc762b98d79c8c030f8f1a12d/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testRegisterByClass.out",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/CorrelateJsonPlanTest_jsonplan/testRegisterByClass.out?ref=f122b5d03f71129cc762b98d79c8c030f8f1a12d",
    "patch": "@@ -0,0 +1,232 @@\n+{\n+  \"flinkVersion\" : \"\",\n+  \"nodes\" : [ {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan\",\n+    \"scanTableSource\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MyTable\"\n+      },\n+      \"catalogTable\" : {\n+        \"schema.3.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.2.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.3.name\" : \"d\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"BIGINT\",\n+        \"schema.2.name\" : \"c\",\n+        \"schema.1.name\" : \"b\",\n+        \"bounded\" : \"false\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"INT NOT NULL\"\n+      }\n+    },\n+    \"id\" : 5,\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, d])\",\n+    \"inputProperties\" : [ ]\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCorrelate\",\n+    \"joinType\" : \"INNER\",\n+    \"functionCall\" : {\n+      \"kind\" : \"REX_CALL\",\n+      \"operator\" : {\n+        \"name\" : \"func1\",\n+        \"kind\" : \"OTHER_FUNCTION\",\n+        \"syntax\" : \"FUNCTION\",\n+        \"functionKind\" : \"TABLE\",\n+        \"instance\" : \"rO0ABXNyAC9vcmcuYXBhY2hlLmZsaW5rLnRhYmxlLnBsYW5uZXIudXRpbHMuVGFibGVGdW5jMQAAAAAAAAABAgAAeHIALm9yZy5hcGFjaGUuZmxpbmsudGFibGUuZnVuY3Rpb25zLlRhYmxlRnVuY3Rpb24uAzXHlnpSxwIAAUwACWNvbGxlY3RvcnQAIUxvcmcvYXBhY2hlL2ZsaW5rL3V0aWwvQ29sbGVjdG9yO3hyADRvcmcuYXBhY2hlLmZsaW5rLnRhYmxlLmZ1bmN0aW9ucy5Vc2VyRGVmaW5lZEZ1bmN0aW9uWWgLCLtDDxYCAAB4cHA\",\n+        \"bridging\" : true\n+      },\n+      \"operands\" : [ {\n+        \"kind\" : \"FIELD_ACCESS\",\n+        \"name\" : \"c\",\n+        \"expr\" : {\n+          \"kind\" : \"CORREL_VARIABLE\",\n+          \"correl\" : \"$cor0\",\n+          \"type\" : {\n+            \"structKind\" : \"FULLY_QUALIFIED\",\n+            \"nullable\" : false,\n+            \"fields\" : [ {\n+              \"typeName\" : \"BIGINT\",\n+              \"nullable\" : true,\n+              \"fieldName\" : \"a\"\n+            }, {\n+              \"typeName\" : \"INTEGER\",\n+              \"nullable\" : false,\n+              \"fieldName\" : \"b\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"c\"\n+            }, {\n+              \"typeName\" : \"TIMESTAMP\",\n+              \"nullable\" : true,\n+              \"precision\" : 3,\n+              \"fieldName\" : \"d\"\n+            }, {\n+              \"typeName\" : \"VARCHAR\",\n+              \"nullable\" : true,\n+              \"precision\" : 2147483647,\n+              \"fieldName\" : \"s\"\n+            } ]\n+          }\n+        }\n+      } ],\n+      \"type\" : {\n+        \"structKind\" : \"NONE\",\n+        \"nullable\" : false,\n+        \"fields\" : [ {\n+          \"typeName\" : \"VARCHAR\",\n+          \"nullable\" : true,\n+          \"precision\" : 2147483647,\n+          \"fieldName\" : \"EXPR$0\"\n+        } ]\n+      }\n+    },\n+    \"condition\" : null,\n+    \"id\" : 6,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"a\" : \"BIGINT\"\n+      }, {\n+        \"b\" : \"INT NOT NULL\"\n+      }, {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"d\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      }, {\n+        \"EXPR$0\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Correlate(invocation=[func1($cor0.c)], correlate=[table(func1($cor0.c))], select=[a,b,c,d,EXPR$0], rowType=[RecordType(BIGINT a, INTEGER b, VARCHAR(2147483647) c, TIMESTAMP(3) d, VARCHAR(2147483647) EXPR$0)], joinType=[INNER])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc\",\n+    \"projection\" : [ {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 2,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    }, {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 4,\n+      \"type\" : {\n+        \"typeName\" : \"VARCHAR\",\n+        \"nullable\" : true,\n+        \"precision\" : 2147483647\n+      }\n+    } ],\n+    \"condition\" : null,\n+    \"id\" : 7,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"s\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Calc(select=[c, EXPR$0 AS s])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecSink\",\n+    \"dynamicTableSink\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MySink\"\n+      },\n+      \"catalogTable\" : {\n+        \"table-sink-class\" : \"DEFAULT\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.1.name\" : \"b\",\n+        \"schema.0.name\" : \"a\",\n+        \"schema.1.data-type\" : \"VARCHAR(2147483647)\"\n+      }\n+    },\n+    \"inputChangelogMode\" : [ \"INSERT\" ],\n+    \"id\" : 8,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"c\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"s\" : \"VARCHAR(2147483647)\"\n+      } ]\n+    },\n+    \"description\" : \"Sink(table=[default_catalog.default_database.MySink], fields=[c, s])\"\n+  } ],\n+  \"edges\" : [ {\n+    \"source\" : 5,\n+    \"target\" : 6,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 6,\n+    \"target\" : 7,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 7,\n+    \"target\" : 8,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  } ]\n+}\n\\ No newline at end of file"
  }
]
