[
  {
    "sha": "4eacf09101b6c5edc77fe08b443e31a2bf36402a",
    "filename": "flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java",
    "raw_url": "https://github.com/apache/flink/raw/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java?ref=f1edd8148ee94d5a45b1f2842549f81ec6fec234",
    "patch": "@@ -180,31 +180,16 @@ public MetricGroup getMetricGroup() {\n      */\n     public static class DummyMetricGroup implements MetricGroup {\n \n-        @Override\n-        public Counter counter(int name) {\n-            return null;\n-        }\n-\n         @Override\n         public Counter counter(String name) {\n             return null;\n         }\n \n-        @Override\n-        public <C extends Counter> C counter(int name, C counter) {\n-            return null;\n-        }\n-\n         @Override\n         public <C extends Counter> C counter(String name, C counter) {\n             return null;\n         }\n \n-        @Override\n-        public <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-            return null;\n-        }\n-\n         @Override\n         public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n             return null;\n@@ -215,26 +200,11 @@ public Counter counter(String name) {\n             return null;\n         }\n \n-        @Override\n-        public <H extends Histogram> H histogram(int name, H histogram) {\n-            return null;\n-        }\n-\n         @Override\n         public <M extends Meter> M meter(String name, M meter) {\n             return null;\n         }\n \n-        @Override\n-        public <M extends Meter> M meter(int name, M meter) {\n-            return null;\n-        }\n-\n-        @Override\n-        public MetricGroup addGroup(int name) {\n-            return null;\n-        }\n-\n         @Override\n         public MetricGroup addGroup(String name) {\n             return null;"
  },
  {
    "sha": "8268ca92269fbc5a44da848b6579efe980c9f1a4",
    "filename": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java",
    "status": "modified",
    "additions": 18,
    "deletions": 6,
    "changes": 24,
    "blob_url": "https://github.com/apache/flink/blob/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java?ref=f1edd8148ee94d5a45b1f2842549f81ec6fec234",
    "patch": "@@ -40,7 +40,9 @@\n      * @param name name of the counter\n      * @return the created counter\n      */\n-    Counter counter(int name);\n+    default Counter counter(int name) {\n+        return counter(String.valueOf(name));\n+    }\n \n     /**\n      * Creates and registers a new {@link org.apache.flink.metrics.Counter} with Flink.\n@@ -58,7 +60,9 @@\n      * @param <C> counter type\n      * @return the given counter\n      */\n-    <C extends Counter> C counter(int name, C counter);\n+    default <C extends Counter> C counter(int name, C counter) {\n+        return counter(String.valueOf(name), counter);\n+    }\n \n     /**\n      * Registers a {@link org.apache.flink.metrics.Counter} with Flink.\n@@ -78,7 +82,9 @@\n      * @param <T> return type of the gauge\n      * @return the given gauge\n      */\n-    <T, G extends Gauge<T>> G gauge(int name, G gauge);\n+    default <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n+        return gauge(String.valueOf(name), gauge);\n+    }\n \n     /**\n      * Registers a new {@link org.apache.flink.metrics.Gauge} with Flink.\n@@ -108,7 +114,9 @@\n      * @param <H> histogram type\n      * @return the registered histogram\n      */\n-    <H extends Histogram> H histogram(int name, H histogram);\n+    default <H extends Histogram> H histogram(int name, H histogram) {\n+        return histogram(String.valueOf(name), histogram);\n+    }\n \n     /**\n      * Registers a new {@link Meter} with Flink.\n@@ -128,7 +136,9 @@\n      * @param <M> meter type\n      * @return the registered meter\n      */\n-    <M extends Meter> M meter(int name, M meter);\n+    default <M extends Meter> M meter(int name, M meter) {\n+        return meter(String.valueOf(name), meter);\n+    }\n \n     // ------------------------------------------------------------------------\n     // Groups\n@@ -140,7 +150,9 @@\n      * @param name name of the group\n      * @return the created group\n      */\n-    MetricGroup addGroup(int name);\n+    default MetricGroup addGroup(int name) {\n+        return addGroup(String.valueOf(name));\n+    }\n \n     /**\n      * Creates a new MetricGroup and adds it to this groups sub-groups."
  },
  {
    "sha": "c60d58696becb32ed295d3bcf06c02663ae460f0",
    "filename": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java?ref=f1edd8148ee94d5a45b1f2842549f81ec6fec234",
    "patch": "@@ -35,61 +35,31 @@\n  */\n public class UnregisteredMetricsGroup implements MetricGroup {\n \n-    @Override\n-    public Counter counter(int name) {\n-        return new SimpleCounter();\n-    }\n-\n     @Override\n     public Counter counter(String name) {\n         return new SimpleCounter();\n     }\n \n-    @Override\n-    public <C extends Counter> C counter(int name, C counter) {\n-        return counter;\n-    }\n-\n     @Override\n     public <C extends Counter> C counter(String name, C counter) {\n         return counter;\n     }\n \n-    @Override\n-    public <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-        return gauge;\n-    }\n-\n     @Override\n     public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n         return gauge;\n     }\n \n-    @Override\n-    public <H extends Histogram> H histogram(int name, H histogram) {\n-        return histogram;\n-    }\n-\n     @Override\n     public <M extends Meter> M meter(String name, M meter) {\n         return meter;\n     }\n \n-    @Override\n-    public <M extends Meter> M meter(int name, M meter) {\n-        return meter;\n-    }\n-\n     @Override\n     public <H extends Histogram> H histogram(String name, H histogram) {\n         return histogram;\n     }\n \n-    @Override\n-    public MetricGroup addGroup(int name) {\n-        return addGroup(String.valueOf(name));\n-    }\n-\n     @Override\n     public MetricGroup addGroup(String name) {\n         return new UnregisteredMetricsGroup();"
  },
  {
    "sha": "c2621a7f16242353b04dcc520d60d733107a2e9d",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java?ref=f1edd8148ee94d5a45b1f2842549f81ec6fec234",
    "patch": "@@ -345,54 +345,29 @@ public final boolean isClosed() {\n     //  Metrics\n     // -----------------------------------------------------------------------------------------------------------------\n \n-    @Override\n-    public Counter counter(int name) {\n-        return counter(String.valueOf(name));\n-    }\n-\n     @Override\n     public Counter counter(String name) {\n         return counter(name, new SimpleCounter());\n     }\n \n-    @Override\n-    public <C extends Counter> C counter(int name, C counter) {\n-        return counter(String.valueOf(name), counter);\n-    }\n-\n     @Override\n     public <C extends Counter> C counter(String name, C counter) {\n         addMetric(name, counter);\n         return counter;\n     }\n \n-    @Override\n-    public <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-        return gauge(String.valueOf(name), gauge);\n-    }\n-\n     @Override\n     public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n         addMetric(name, gauge);\n         return gauge;\n     }\n \n-    @Override\n-    public <H extends Histogram> H histogram(int name, H histogram) {\n-        return histogram(String.valueOf(name), histogram);\n-    }\n-\n     @Override\n     public <H extends Histogram> H histogram(String name, H histogram) {\n         addMetric(name, histogram);\n         return histogram;\n     }\n \n-    @Override\n-    public <M extends Meter> M meter(int name, M meter) {\n-        return meter(String.valueOf(name), meter);\n-    }\n-\n     @Override\n     public <M extends Meter> M meter(String name, M meter) {\n         addMetric(name, meter);\n@@ -458,11 +433,6 @@ protected void addMetric(String name, Metric metric) {\n     //  Groups\n     // ------------------------------------------------------------------------\n \n-    @Override\n-    public MetricGroup addGroup(int name) {\n-        return addGroup(String.valueOf(name), ChildType.GENERIC);\n-    }\n-\n     @Override\n     public MetricGroup addGroup(String name) {\n         return addGroup(name, ChildType.GENERIC);"
  },
  {
    "sha": "0ca34cf756f6fff9ea0b545e767848d20fbc4b55",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/f1edd8148ee94d5a45b1f2842549f81ec6fec234/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java?ref=f1edd8148ee94d5a45b1f2842549f81ec6fec234",
    "patch": "@@ -42,31 +42,16 @@ public ProxyMetricGroup(P parentMetricGroup) {\n         this.parentMetricGroup = checkNotNull(parentMetricGroup);\n     }\n \n-    @Override\n-    public final Counter counter(int name) {\n-        return parentMetricGroup.counter(name);\n-    }\n-\n     @Override\n     public final Counter counter(String name) {\n         return parentMetricGroup.counter(name);\n     }\n \n-    @Override\n-    public final <C extends Counter> C counter(int name, C counter) {\n-        return parentMetricGroup.counter(name, counter);\n-    }\n-\n     @Override\n     public final <C extends Counter> C counter(String name, C counter) {\n         return parentMetricGroup.counter(name, counter);\n     }\n \n-    @Override\n-    public final <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-        return parentMetricGroup.gauge(name, gauge);\n-    }\n-\n     @Override\n     public final <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n         return parentMetricGroup.gauge(name, gauge);\n@@ -77,26 +62,11 @@ public final Counter counter(String name) {\n         return parentMetricGroup.histogram(name, histogram);\n     }\n \n-    @Override\n-    public final <H extends Histogram> H histogram(int name, H histogram) {\n-        return parentMetricGroup.histogram(name, histogram);\n-    }\n-\n     @Override\n     public <M extends Meter> M meter(String name, M meter) {\n         return parentMetricGroup.meter(name, meter);\n     }\n \n-    @Override\n-    public <M extends Meter> M meter(int name, M meter) {\n-        return parentMetricGroup.meter(name, meter);\n-    }\n-\n-    @Override\n-    public final MetricGroup addGroup(int name) {\n-        return parentMetricGroup.addGroup(name);\n-    }\n-\n     @Override\n     public final MetricGroup addGroup(String name) {\n         return parentMetricGroup.addGroup(name);"
  }
]
