[
  {
    "sha": "21316959ee899b222daebb058adcd9da28ff9130",
    "filename": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecTemporalJoin.java",
    "status": "modified",
    "additions": 40,
    "deletions": 3,
    "changes": 43,
    "blob_url": "https://github.com/apache/flink/blob/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecTemporalJoin.java",
    "raw_url": "https://github.com/apache/flink/raw/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecTemporalJoin.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/stream/StreamExecTemporalJoin.java?ref=c97e2afbfbee681d86632b52c0a347170701159f",
    "patch": "@@ -49,8 +49,12 @@\n import org.apache.flink.table.types.logical.RowType;\n import org.apache.flink.util.Preconditions;\n \n-import org.apache.flink.shaded.guava18.com.google.common.collect.Lists;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\n \n+import java.util.Arrays;\n+import java.util.List;\n import java.util.Optional;\n import java.util.stream.IntStream;\n \n@@ -61,14 +65,26 @@\n  * <p>The legacy temporal table function join is the subset of temporal table join, the only\n  * difference is the validation, we reuse most same logic here.\n  */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n public class StreamExecTemporalJoin extends ExecNodeBase<RowData>\n         implements StreamExecNode<RowData>, SingleTransformationTranslator<RowData> {\n \n+    public static final String FIELD_NAME_JOIN_SPEC = \"joinSpec\";\n+    public static final String FIELD_NAME_IS_TEMPORAL_FUNCTION_JOIN = \"isTemporalFunctionJoin\";\n+    public static final String FIELD_NAME_LEFT_TIME_ATTRIBUTE_INDEX = \"leftTimeAttributeIndex\";\n+    public static final String FIELD_NAME_RIGHT_TIME_ATTRIBUTE_INDEX = \"rightTimeAttributeIndex\";\n     public static final int FIELD_INDEX_FOR_PROC_TIME_ATTRIBUTE = -1;\n \n+    @JsonProperty(FIELD_NAME_JOIN_SPEC)\n     private final JoinSpec joinSpec;\n+\n+    @JsonProperty(FIELD_NAME_IS_TEMPORAL_FUNCTION_JOIN)\n     private final boolean isTemporalFunctionJoin;\n+\n+    @JsonProperty(FIELD_NAME_LEFT_TIME_ATTRIBUTE_INDEX)\n     private final int leftTimeAttributeIndex;\n+\n+    @JsonProperty(FIELD_NAME_RIGHT_TIME_ATTRIBUTE_INDEX)\n     private final int rightTimeAttributeIndex;\n \n     public StreamExecTemporalJoin(\n@@ -80,11 +96,32 @@ public StreamExecTemporalJoin(\n             InputProperty rightInputProperty,\n             RowType outputType,\n             String description) {\n-        super(Lists.newArrayList(leftInputProperty, rightInputProperty), outputType, description);\n+        this(\n+                joinSpec,\n+                isTemporalTableFunctionJoin,\n+                leftTimeAttributeIndex,\n+                rightTimeAttributeIndex,\n+                getNewNodeId(),\n+                Arrays.asList(leftInputProperty, rightInputProperty),\n+                outputType,\n+                description);\n+    }\n+\n+    @JsonCreator\n+    public StreamExecTemporalJoin(\n+            @JsonProperty(FIELD_NAME_JOIN_SPEC) JoinSpec joinSpec,\n+            @JsonProperty(FIELD_NAME_IS_TEMPORAL_FUNCTION_JOIN) boolean isTemporalTableFunctionJoin,\n+            @JsonProperty(FIELD_NAME_LEFT_TIME_ATTRIBUTE_INDEX) int leftTimeAttributeIndex,\n+            @JsonProperty(FIELD_NAME_RIGHT_TIME_ATTRIBUTE_INDEX) int rightTimeAttributeIndex,\n+            @JsonProperty(FIELD_NAME_ID) int id,\n+            @JsonProperty(FIELD_NAME_INPUT_PROPERTIES) List<InputProperty> inputProperties,\n+            @JsonProperty(FIELD_NAME_OUTPUT_TYPE) RowType outputType,\n+            @JsonProperty(FIELD_NAME_DESCRIPTION) String description) {\n+        super(id, inputProperties, outputType, description);\n         Preconditions.checkArgument(\n                 rightTimeAttributeIndex == FIELD_INDEX_FOR_PROC_TIME_ATTRIBUTE\n                         || rightTimeAttributeIndex >= 0);\n-        this.joinSpec = joinSpec;\n+        this.joinSpec = Preconditions.checkNotNull(joinSpec);\n         this.isTemporalFunctionJoin = isTemporalTableFunctionJoin;\n         this.leftTimeAttributeIndex = leftTimeAttributeIndex;\n         this.rightTimeAttributeIndex = rightTimeAttributeIndex;"
  },
  {
    "sha": "7d1457aedc4158d225c25bf2b4bd55e39fc5c2dc",
    "filename": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/JsonSerdeCoverageTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/apache/flink/blob/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/JsonSerdeCoverageTest.java",
    "raw_url": "https://github.com/apache/flink/raw/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/JsonSerdeCoverageTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/JsonSerdeCoverageTest.java?ref=c97e2afbfbee681d86632b52c0a347170701159f",
    "patch": "@@ -44,7 +44,6 @@\n                     \"StreamExecLegacySink\",\n                     \"StreamExecIntervalJoin\",\n                     \"StreamExecLookupJoin\",\n-                    \"StreamExecTemporalJoin\",\n                     \"StreamExecPythonGroupAggregate\",\n                     \"StreamExecIncrementalGroupAggregate\",\n                     \"StreamExecWindowTableFunction\","
  },
  {
    "sha": "605273da69a965ea094a0e9d5b819c537a03b408",
    "filename": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest.java",
    "status": "added",
    "additions": 99,
    "deletions": 0,
    "changes": 99,
    "blob_url": "https://github.com/apache/flink/blob/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest.java",
    "raw_url": "https://github.com/apache/flink/raw/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest.java?ref=c97e2afbfbee681d86632b52c0a347170701159f",
    "patch": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec.stream;\n+\n+import org.apache.flink.table.api.TableConfig;\n+import org.apache.flink.table.api.TableEnvironment;\n+import org.apache.flink.table.functions.TemporalTableFunction;\n+import org.apache.flink.table.planner.utils.StreamTableTestUtil;\n+import org.apache.flink.table.planner.utils.TableTestBase;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/** Test json serialization/deserialization for TemporalJoin. */\n+public class TemporalJoinJsonPlanTest extends TableTestBase {\n+\n+    private StreamTableTestUtil util;\n+    private TableEnvironment tEnv;\n+\n+    @Before\n+    public void setup() {\n+        util = streamTestUtil(TableConfig.getDefault());\n+        tEnv = util.getTableEnv();\n+\n+        tEnv.executeSql(\n+                \"CREATE TABLE Orders (\\n\"\n+                        + \" amount INT,\\n\"\n+                        + \" currency STRING,\\n\"\n+                        + \" rowtime TIMESTAMP(3),\\n\"\n+                        + \" proctime AS PROCTIME(),\\n\"\n+                        + \" WATERMARK FOR rowtime AS rowtime\\n\"\n+                        + \") WITH (\\n\"\n+                        + \" 'connector' = 'values'\\n\"\n+                        + \")\");\n+        tEnv.executeSql(\n+                \"CREATE TABLE RatesHistory (\\n\"\n+                        + \" currency STRING,\\n\"\n+                        + \" rate INT,\\n\"\n+                        + \" rowtime TIMESTAMP(3),\\n\"\n+                        + \" WATERMARK FOR rowtime AS rowtime,\\n\"\n+                        + \" PRIMARY KEY(currency) NOT ENFORCED\\n\"\n+                        + \") WITH (\\n\"\n+                        + \" 'connector' = 'values'\\n\"\n+                        + \")\");\n+        TemporalTableFunction ratesHistory =\n+                tEnv.from(\"RatesHistory\").createTemporalTableFunction(\"rowtime\", \"currency\");\n+        tEnv.createTemporarySystemFunction(\"Rates\", ratesHistory);\n+    }\n+\n+    @Test\n+    public void testJoinTemporalFunction() {\n+        String sinkTableDdl =\n+                \"CREATE TABLE MySink (\\n\"\n+                        + \"  a int\\n\"\n+                        + \") with (\\n\"\n+                        + \"  'connector' = 'values',\\n\"\n+                        + \"  'table-sink-class' = 'DEFAULT')\";\n+        tEnv.executeSql(sinkTableDdl);\n+        util.verifyJsonPlan(\n+                \"INSERT INTO MySink \"\n+                        + \"SELECT amount * r.rate \"\n+                        + \"FROM Orders AS o,  \"\n+                        + \"LATERAL TABLE (Rates(o.rowtime)) AS r \"\n+                        + \"WHERE o.currency = r.currency \");\n+    }\n+\n+    @Test\n+    public void testTemporalTableJoin() {\n+        String sinkTableDdl =\n+                \"CREATE TABLE MySink (\\n\"\n+                        + \"  a int\\n\"\n+                        + \") with (\\n\"\n+                        + \"  'connector' = 'values',\\n\"\n+                        + \"  'table-sink-class' = 'DEFAULT')\";\n+        tEnv.executeSql(sinkTableDdl);\n+        util.verifyJsonPlan(\n+                \"INSERT INTO MySink \"\n+                        + \"SELECT amount * r.rate \"\n+                        + \"FROM Orders AS o  \"\n+                        + \"JOIN RatesHistory  FOR SYSTEM_TIME AS OF o.rowtime AS r \"\n+                        + \"ON o.currency = r.currency \");\n+    }\n+}"
  },
  {
    "sha": "0334dc9d2cbc36d103109aa207561637081416bd",
    "filename": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/jsonplan/TemporalJoinJsonPlanITCase.java",
    "status": "added",
    "additions": 106,
    "deletions": 0,
    "changes": 106,
    "blob_url": "https://github.com/apache/flink/blob/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/jsonplan/TemporalJoinJsonPlanITCase.java",
    "raw_url": "https://github.com/apache/flink/raw/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/jsonplan/TemporalJoinJsonPlanITCase.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/jsonplan/TemporalJoinJsonPlanITCase.java?ref=c97e2afbfbee681d86632b52c0a347170701159f",
    "patch": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.runtime.stream.jsonplan;\n+\n+import org.apache.flink.table.functions.TemporalTableFunction;\n+import org.apache.flink.table.planner.factories.TestValuesTableFactory;\n+import org.apache.flink.table.planner.utils.JsonPlanTestBase;\n+import org.apache.flink.types.Row;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** Test for TemporalJoin json plan. */\n+public class TemporalJoinJsonPlanITCase extends JsonPlanTestBase {\n+\n+    @Override\n+    public void setup() throws Exception {\n+        super.setup();\n+        List<Row> orders =\n+                Arrays.asList(\n+                        Row.of(2L, \"Euro\", 2L),\n+                        Row.of(1L, \"US Dollar\", 3L),\n+                        Row.of(50L, \"Yen\", 4L),\n+                        Row.of(3L, \"Euro\", 5L));\n+        createTestValuesSourceTable(\n+                \"Orders\",\n+                orders,\n+                \"amount bigint\",\n+                \"currency STRING\",\n+                \"order_time bigint\",\n+                \"rowtime as TO_TIMESTAMP(FROM_UNIXTIME(order_time)) \",\n+                \"proctime as PROCTIME()\",\n+                \"WATERMARK FOR rowtime AS rowtime\");\n+        List<Row> ratesHistory =\n+                Arrays.asList(\n+                        Row.of(\"US Dollar\", 102L, 1L),\n+                        Row.of(\"Euro\", 114L, 1L),\n+                        Row.of(\"Yen\", 1L, 1L),\n+                        Row.of(\"Euro\", 116L, 5L),\n+                        Row.of(\"Euro\", 119L, 7L));\n+        createTestValuesSourceTable(\n+                \"RatesHistory\",\n+                ratesHistory,\n+                \"currency STRING\",\n+                \"rate bigint\",\n+                \"rate_time bigint\",\n+                \"rowtime as TO_TIMESTAMP(FROM_UNIXTIME(rate_time)) \",\n+                \"proctime as PROCTIME()\",\n+                \"WATERMARK FOR rowtime AS rowtime\",\n+                \"PRIMARY KEY(currency) NOT ENFORCED\");\n+\n+        TemporalTableFunction temporalTableFunction =\n+                tableEnv.from(\"RatesHistory\").createTemporalTableFunction(\"rowtime\", \"currency\");\n+        tableEnv.createTemporarySystemFunction(\"Rates\", temporalTableFunction);\n+        createTestValuesSinkTable(\"MySink\", \"amount bigint\");\n+    }\n+\n+    /** test process time inner join. * */\n+    @Test\n+    public void testJoinTemporalFunction() throws Exception {\n+\n+        String jsonPlan =\n+                tableEnv.getJsonPlan(\n+                        \"INSERT INTO MySink \"\n+                                + \"SELECT amount * r.rate \"\n+                                + \"FROM Orders AS o,  \"\n+                                + \"LATERAL TABLE (Rates(o.rowtime)) AS r \"\n+                                + \"WHERE o.currency = r.currency \");\n+        tableEnv.executeJsonPlan(jsonPlan).await();\n+        List<String> expected = Arrays.asList(\"+I[102]\", \"+I[228]\", \"+I[348]\", \"+I[50]\");\n+        assertResult(expected, TestValuesTableFactory.getResults(\"MySink\"));\n+    }\n+\n+    @Test\n+    public void testTemporalTableJoin() throws Exception {\n+\n+        String jsonPlan =\n+                tableEnv.getJsonPlan(\n+                        \"INSERT INTO MySink \"\n+                                + \"SELECT amount * r.rate \"\n+                                + \"FROM Orders AS o  \"\n+                                + \"JOIN RatesHistory  FOR SYSTEM_TIME AS OF o.rowtime AS r \"\n+                                + \"ON o.currency = r.currency \");\n+        tableEnv.executeJsonPlan(jsonPlan).await();\n+        List<String> expected = Arrays.asList(\"+I[102]\", \"+I[228]\", \"+I[348]\", \"+I[50]\");\n+        assertResult(expected, TestValuesTableFactory.getResults(\"MySink\"));\n+    }\n+}"
  },
  {
    "sha": "0d3314a8b5cd01c1d3aee5d194ca352ea17666d9",
    "filename": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest_jsonplan/testJoinTemporalFunction.out",
    "status": "added",
    "additions": 408,
    "deletions": 0,
    "changes": 408,
    "blob_url": "https://github.com/apache/flink/blob/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest_jsonplan/testJoinTemporalFunction.out",
    "raw_url": "https://github.com/apache/flink/raw/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest_jsonplan/testJoinTemporalFunction.out",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest_jsonplan/testJoinTemporalFunction.out?ref=c97e2afbfbee681d86632b52c0a347170701159f",
    "patch": "@@ -0,0 +1,408 @@\n+{\n+  \"flinkVersion\" : \"\",\n+  \"nodes\" : [ {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan\",\n+    \"scanTableSource\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"Orders\"\n+      },\n+      \"catalogTable\" : {\n+        \"schema.watermark.0.strategy.expr\" : \"`rowtime`\",\n+        \"schema.0.data-type\" : \"INT\",\n+        \"schema.2.name\" : \"rowtime\",\n+        \"schema.1.name\" : \"currency\",\n+        \"schema.1.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.3.data-type\" : \"TIMESTAMP(3) NOT NULL\",\n+        \"schema.2.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.3.name\" : \"proctime\",\n+        \"connector\" : \"values\",\n+        \"schema.watermark.0.rowtime\" : \"rowtime\",\n+        \"schema.watermark.0.strategy.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.3.expr\" : \"PROCTIME()\",\n+        \"schema.0.name\" : \"amount\"\n+      }\n+    },\n+    \"id\" : 1,\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"amount\" : \"INT\"\n+      }, {\n+        \"currency\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, Orders]], fields=[amount, currency, rowtime])\",\n+    \"inputProperties\" : [ ]\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecWatermarkAssigner\",\n+    \"watermarkExpr\" : {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 2,\n+      \"type\" : {\n+        \"typeName\" : \"TIMESTAMP\",\n+        \"nullable\" : true,\n+        \"precision\" : 3\n+      }\n+    },\n+    \"rowtimeFieldIndex\" : 2,\n+    \"id\" : 2,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"amount\" : \"INT\"\n+      }, {\n+        \"currency\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecExchange\",\n+    \"id\" : 3,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"HASH\",\n+        \"keys\" : [ 1 ]\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"amount\" : \"INT\"\n+      }, {\n+        \"currency\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"Exchange(distribution=[hash[currency]])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan\",\n+    \"scanTableSource\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"RatesHistory\"\n+      },\n+      \"catalogTable\" : {\n+        \"schema.watermark.0.strategy.expr\" : \"`rowtime`\",\n+        \"schema.2.data-type\" : \"TIMESTAMP(3)\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"VARCHAR(2147483647) NOT NULL\",\n+        \"schema.watermark.0.rowtime\" : \"rowtime\",\n+        \"schema.watermark.0.strategy.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.2.name\" : \"rowtime\",\n+        \"schema.primary-key.name\" : \"PK_575402032\",\n+        \"schema.primary-key.columns\" : \"currency\",\n+        \"schema.1.name\" : \"rate\",\n+        \"schema.0.name\" : \"currency\",\n+        \"schema.1.data-type\" : \"INT\"\n+      }\n+    },\n+    \"id\" : 4,\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"currency\" : \"VARCHAR(2147483647) NOT NULL\"\n+      }, {\n+        \"rate\" : \"INT\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, RatesHistory]], fields=[currency, rate, rowtime])\",\n+    \"inputProperties\" : [ ]\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecWatermarkAssigner\",\n+    \"watermarkExpr\" : {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 2,\n+      \"type\" : {\n+        \"typeName\" : \"TIMESTAMP\",\n+        \"nullable\" : true,\n+        \"precision\" : 3\n+      }\n+    },\n+    \"rowtimeFieldIndex\" : 2,\n+    \"id\" : 5,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"currency\" : \"VARCHAR(2147483647) NOT NULL\"\n+      }, {\n+        \"rate\" : \"INT\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecExchange\",\n+    \"id\" : 6,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"HASH\",\n+        \"keys\" : [ 0 ]\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"currency\" : \"VARCHAR(2147483647) NOT NULL\"\n+      }, {\n+        \"rate\" : \"INT\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"Exchange(distribution=[hash[currency]])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTemporalJoin\",\n+    \"joinSpec\" : {\n+      \"joinType\" : \"INNER\",\n+      \"leftKeys\" : [ 1 ],\n+      \"rightKeys\" : [ 0 ],\n+      \"filterNulls\" : [ true ],\n+      \"nonEquiCondition\" : null\n+    },\n+    \"isTemporalFunctionJoin\" : true,\n+    \"leftTimeAttributeIndex\" : 2,\n+    \"rightTimeAttributeIndex\" : 2,\n+    \"id\" : 7,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    }, {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"amount\" : \"INT\"\n+      }, {\n+        \"currency\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      }, {\n+        \"currency0\" : \"VARCHAR(2147483647) NOT NULL\"\n+      }, {\n+        \"rate\" : \"INT\"\n+      }, {\n+        \"rowtime0\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TemporalJoin(joinType=[InnerJoin], where=[(__TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(currency0)) AND (currency = currency0))], select=[amount, currency, rowtime, currency0, rate, rowtime0])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc\",\n+    \"projection\" : [ {\n+      \"kind\" : \"REX_CALL\",\n+      \"operator\" : {\n+        \"name\" : \"*\",\n+        \"kind\" : \"TIMES\",\n+        \"syntax\" : \"BINARY\"\n+      },\n+      \"operands\" : [ {\n+        \"kind\" : \"INPUT_REF\",\n+        \"inputIndex\" : 0,\n+        \"type\" : {\n+          \"typeName\" : \"INTEGER\",\n+          \"nullable\" : true\n+        }\n+      }, {\n+        \"kind\" : \"INPUT_REF\",\n+        \"inputIndex\" : 4,\n+        \"type\" : {\n+          \"typeName\" : \"INTEGER\",\n+          \"nullable\" : true\n+        }\n+      } ],\n+      \"type\" : {\n+        \"typeName\" : \"INTEGER\",\n+        \"nullable\" : true\n+      }\n+    } ],\n+    \"condition\" : null,\n+    \"id\" : 8,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"EXPR$0\" : \"INT\"\n+      } ]\n+    },\n+    \"description\" : \"Calc(select=[(amount * rate) AS EXPR$0])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecSink\",\n+    \"dynamicTableSink\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MySink\"\n+      },\n+      \"catalogTable\" : {\n+        \"table-sink-class\" : \"DEFAULT\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"INT\",\n+        \"schema.0.name\" : \"a\"\n+      }\n+    },\n+    \"inputChangelogMode\" : [ \"INSERT\" ],\n+    \"id\" : 9,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"EXPR$0\" : \"INT\"\n+      } ]\n+    },\n+    \"description\" : \"Sink(table=[default_catalog.default_database.MySink], fields=[EXPR$0])\"\n+  } ],\n+  \"edges\" : [ {\n+    \"source\" : 1,\n+    \"target\" : 2,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 2,\n+    \"target\" : 3,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 4,\n+    \"target\" : 5,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 5,\n+    \"target\" : 6,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 3,\n+    \"target\" : 7,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 6,\n+    \"target\" : 7,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 7,\n+    \"target\" : 8,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 8,\n+    \"target\" : 9,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  } ]\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "b646fac7c7dfcc2facfb7919888c6fd543bc976d",
    "filename": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest_jsonplan/testTemporalTableJoin.out",
    "status": "added",
    "additions": 408,
    "deletions": 0,
    "changes": 408,
    "blob_url": "https://github.com/apache/flink/blob/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest_jsonplan/testTemporalTableJoin.out",
    "raw_url": "https://github.com/apache/flink/raw/c97e2afbfbee681d86632b52c0a347170701159f/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest_jsonplan/testTemporalTableJoin.out",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/nodes/exec/stream/TemporalJoinJsonPlanTest_jsonplan/testTemporalTableJoin.out?ref=c97e2afbfbee681d86632b52c0a347170701159f",
    "patch": "@@ -0,0 +1,408 @@\n+{\n+  \"flinkVersion\" : \"\",\n+  \"nodes\" : [ {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan\",\n+    \"scanTableSource\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"Orders\"\n+      },\n+      \"catalogTable\" : {\n+        \"schema.watermark.0.strategy.expr\" : \"`rowtime`\",\n+        \"schema.0.data-type\" : \"INT\",\n+        \"schema.2.name\" : \"rowtime\",\n+        \"schema.1.name\" : \"currency\",\n+        \"schema.1.data-type\" : \"VARCHAR(2147483647)\",\n+        \"schema.3.data-type\" : \"TIMESTAMP(3) NOT NULL\",\n+        \"schema.2.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.3.name\" : \"proctime\",\n+        \"connector\" : \"values\",\n+        \"schema.watermark.0.rowtime\" : \"rowtime\",\n+        \"schema.watermark.0.strategy.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.3.expr\" : \"PROCTIME()\",\n+        \"schema.0.name\" : \"amount\"\n+      }\n+    },\n+    \"id\" : 1,\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"amount\" : \"INT\"\n+      }, {\n+        \"currency\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, Orders]], fields=[amount, currency, rowtime])\",\n+    \"inputProperties\" : [ ]\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecWatermarkAssigner\",\n+    \"watermarkExpr\" : {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 2,\n+      \"type\" : {\n+        \"typeName\" : \"TIMESTAMP\",\n+        \"nullable\" : true,\n+        \"precision\" : 3\n+      }\n+    },\n+    \"rowtimeFieldIndex\" : 2,\n+    \"id\" : 2,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"amount\" : \"INT\"\n+      }, {\n+        \"currency\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecExchange\",\n+    \"id\" : 3,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"HASH\",\n+        \"keys\" : [ 1 ]\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"amount\" : \"INT\"\n+      }, {\n+        \"currency\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"Exchange(distribution=[hash[currency]])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTableSourceScan\",\n+    \"scanTableSource\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"RatesHistory\"\n+      },\n+      \"catalogTable\" : {\n+        \"schema.watermark.0.strategy.expr\" : \"`rowtime`\",\n+        \"schema.2.data-type\" : \"TIMESTAMP(3)\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"VARCHAR(2147483647) NOT NULL\",\n+        \"schema.watermark.0.rowtime\" : \"rowtime\",\n+        \"schema.watermark.0.strategy.data-type\" : \"TIMESTAMP(3)\",\n+        \"schema.2.name\" : \"rowtime\",\n+        \"schema.primary-key.name\" : \"PK_575402032\",\n+        \"schema.primary-key.columns\" : \"currency\",\n+        \"schema.1.name\" : \"rate\",\n+        \"schema.0.name\" : \"currency\",\n+        \"schema.1.data-type\" : \"INT\"\n+      }\n+    },\n+    \"id\" : 4,\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"currency\" : \"VARCHAR(2147483647) NOT NULL\"\n+      }, {\n+        \"rate\" : \"INT\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"REGULAR\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TableSourceScan(table=[[default_catalog, default_database, RatesHistory]], fields=[currency, rate, rowtime])\",\n+    \"inputProperties\" : [ ]\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecWatermarkAssigner\",\n+    \"watermarkExpr\" : {\n+      \"kind\" : \"INPUT_REF\",\n+      \"inputIndex\" : 2,\n+      \"type\" : {\n+        \"typeName\" : \"TIMESTAMP\",\n+        \"nullable\" : true,\n+        \"precision\" : 3\n+      }\n+    },\n+    \"rowtimeFieldIndex\" : 2,\n+    \"id\" : 5,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"currency\" : \"VARCHAR(2147483647) NOT NULL\"\n+      }, {\n+        \"rate\" : \"INT\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecExchange\",\n+    \"id\" : 6,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"HASH\",\n+        \"keys\" : [ 0 ]\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"currency\" : \"VARCHAR(2147483647) NOT NULL\"\n+      }, {\n+        \"rate\" : \"INT\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"Exchange(distribution=[hash[currency]])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecTemporalJoin\",\n+    \"joinSpec\" : {\n+      \"joinType\" : \"INNER\",\n+      \"leftKeys\" : [ 1 ],\n+      \"rightKeys\" : [ 0 ],\n+      \"filterNulls\" : [ true ],\n+      \"nonEquiCondition\" : null\n+    },\n+    \"isTemporalFunctionJoin\" : false,\n+    \"leftTimeAttributeIndex\" : 2,\n+    \"rightTimeAttributeIndex\" : 2,\n+    \"id\" : 7,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    }, {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"amount\" : \"INT\"\n+      }, {\n+        \"currency\" : \"VARCHAR(2147483647)\"\n+      }, {\n+        \"rowtime\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      }, {\n+        \"currency0\" : \"VARCHAR(2147483647) NOT NULL\"\n+      }, {\n+        \"rate\" : \"INT\"\n+      }, {\n+        \"rowtime0\" : {\n+          \"type\" : \"TIMESTAMP_WITHOUT_TIME_ZONE\",\n+          \"nullable\" : true,\n+          \"precision\" : 3,\n+          \"kind\" : \"ROWTIME\"\n+        }\n+      } ]\n+    },\n+    \"description\" : \"TemporalJoin(joinType=[InnerJoin], where=[((currency = currency0) AND __TEMPORAL_JOIN_CONDITION(rowtime, rowtime0, __TEMPORAL_JOIN_CONDITION_PRIMARY_KEY(currency0), __TEMPORAL_JOIN_LEFT_KEY(currency), __TEMPORAL_JOIN_RIGHT_KEY(currency0)))], select=[amount, currency, rowtime, currency0, rate, rowtime0])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecCalc\",\n+    \"projection\" : [ {\n+      \"kind\" : \"REX_CALL\",\n+      \"operator\" : {\n+        \"name\" : \"*\",\n+        \"kind\" : \"TIMES\",\n+        \"syntax\" : \"BINARY\"\n+      },\n+      \"operands\" : [ {\n+        \"kind\" : \"INPUT_REF\",\n+        \"inputIndex\" : 0,\n+        \"type\" : {\n+          \"typeName\" : \"INTEGER\",\n+          \"nullable\" : true\n+        }\n+      }, {\n+        \"kind\" : \"INPUT_REF\",\n+        \"inputIndex\" : 4,\n+        \"type\" : {\n+          \"typeName\" : \"INTEGER\",\n+          \"nullable\" : true\n+        }\n+      } ],\n+      \"type\" : {\n+        \"typeName\" : \"INTEGER\",\n+        \"nullable\" : true\n+      }\n+    } ],\n+    \"condition\" : null,\n+    \"id\" : 8,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"EXPR$0\" : \"INT\"\n+      } ]\n+    },\n+    \"description\" : \"Calc(select=[(amount * rate) AS EXPR$0])\"\n+  }, {\n+    \"class\" : \"org.apache.flink.table.planner.plan.nodes.exec.stream.StreamExecSink\",\n+    \"dynamicTableSink\" : {\n+      \"identifier\" : {\n+        \"catalogName\" : \"default_catalog\",\n+        \"databaseName\" : \"default_database\",\n+        \"tableName\" : \"MySink\"\n+      },\n+      \"catalogTable\" : {\n+        \"table-sink-class\" : \"DEFAULT\",\n+        \"connector\" : \"values\",\n+        \"schema.0.data-type\" : \"INT\",\n+        \"schema.0.name\" : \"a\"\n+      }\n+    },\n+    \"inputChangelogMode\" : [ \"INSERT\" ],\n+    \"id\" : 9,\n+    \"inputProperties\" : [ {\n+      \"requiredDistribution\" : {\n+        \"type\" : \"UNKNOWN\"\n+      },\n+      \"damBehavior\" : \"PIPELINED\",\n+      \"priority\" : 0\n+    } ],\n+    \"outputType\" : {\n+      \"type\" : \"ROW\",\n+      \"nullable\" : true,\n+      \"fields\" : [ {\n+        \"EXPR$0\" : \"INT\"\n+      } ]\n+    },\n+    \"description\" : \"Sink(table=[default_catalog.default_database.MySink], fields=[EXPR$0])\"\n+  } ],\n+  \"edges\" : [ {\n+    \"source\" : 1,\n+    \"target\" : 2,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 2,\n+    \"target\" : 3,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 4,\n+    \"target\" : 5,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 5,\n+    \"target\" : 6,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 3,\n+    \"target\" : 7,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 6,\n+    \"target\" : 7,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 7,\n+    \"target\" : 8,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  }, {\n+    \"source\" : 8,\n+    \"target\" : 9,\n+    \"shuffle\" : {\n+      \"type\" : \"FORWARD\"\n+    },\n+    \"shuffleMode\" : \"PIPELINED\"\n+  } ]\n+}\n\\ No newline at end of file"
  }
]
