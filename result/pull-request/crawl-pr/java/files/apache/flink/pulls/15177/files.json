[
  {
    "sha": "4eacf09101b6c5edc77fe08b443e31a2bf36402a",
    "filename": "flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -180,31 +180,16 @@ public MetricGroup getMetricGroup() {\n      */\n     public static class DummyMetricGroup implements MetricGroup {\n \n-        @Override\n-        public Counter counter(int name) {\n-            return null;\n-        }\n-\n         @Override\n         public Counter counter(String name) {\n             return null;\n         }\n \n-        @Override\n-        public <C extends Counter> C counter(int name, C counter) {\n-            return null;\n-        }\n-\n         @Override\n         public <C extends Counter> C counter(String name, C counter) {\n             return null;\n         }\n \n-        @Override\n-        public <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-            return null;\n-        }\n-\n         @Override\n         public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n             return null;\n@@ -215,26 +200,11 @@ public Counter counter(String name) {\n             return null;\n         }\n \n-        @Override\n-        public <H extends Histogram> H histogram(int name, H histogram) {\n-            return null;\n-        }\n-\n         @Override\n         public <M extends Meter> M meter(String name, M meter) {\n             return null;\n         }\n \n-        @Override\n-        public <M extends Meter> M meter(int name, M meter) {\n-            return null;\n-        }\n-\n-        @Override\n-        public MetricGroup addGroup(int name) {\n-            return null;\n-        }\n-\n         @Override\n         public MetricGroup addGroup(String name) {\n             return null;"
  },
  {
    "sha": "1a04d8a6eca97673a7e4fa3c719e95ea8b93256b",
    "filename": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/LogicalScopeProvider.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/LogicalScopeProvider.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/LogicalScopeProvider.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/LogicalScopeProvider.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.metrics;\n+\n+/** Extension for metric groups that support logical scopes. */\n+public interface LogicalScopeProvider {\n+    String getLogicalScope(CharacterFilter filter);\n+\n+    String getLogicalScope(CharacterFilter filter, char delimiter);\n+}"
  },
  {
    "sha": "8268ca92269fbc5a44da848b6579efe980c9f1a4",
    "filename": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java",
    "status": "modified",
    "additions": 18,
    "deletions": 6,
    "changes": 24,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -40,7 +40,9 @@\n      * @param name name of the counter\n      * @return the created counter\n      */\n-    Counter counter(int name);\n+    default Counter counter(int name) {\n+        return counter(String.valueOf(name));\n+    }\n \n     /**\n      * Creates and registers a new {@link org.apache.flink.metrics.Counter} with Flink.\n@@ -58,7 +60,9 @@\n      * @param <C> counter type\n      * @return the given counter\n      */\n-    <C extends Counter> C counter(int name, C counter);\n+    default <C extends Counter> C counter(int name, C counter) {\n+        return counter(String.valueOf(name), counter);\n+    }\n \n     /**\n      * Registers a {@link org.apache.flink.metrics.Counter} with Flink.\n@@ -78,7 +82,9 @@\n      * @param <T> return type of the gauge\n      * @return the given gauge\n      */\n-    <T, G extends Gauge<T>> G gauge(int name, G gauge);\n+    default <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n+        return gauge(String.valueOf(name), gauge);\n+    }\n \n     /**\n      * Registers a new {@link org.apache.flink.metrics.Gauge} with Flink.\n@@ -108,7 +114,9 @@\n      * @param <H> histogram type\n      * @return the registered histogram\n      */\n-    <H extends Histogram> H histogram(int name, H histogram);\n+    default <H extends Histogram> H histogram(int name, H histogram) {\n+        return histogram(String.valueOf(name), histogram);\n+    }\n \n     /**\n      * Registers a new {@link Meter} with Flink.\n@@ -128,7 +136,9 @@\n      * @param <M> meter type\n      * @return the registered meter\n      */\n-    <M extends Meter> M meter(int name, M meter);\n+    default <M extends Meter> M meter(int name, M meter) {\n+        return meter(String.valueOf(name), meter);\n+    }\n \n     // ------------------------------------------------------------------------\n     // Groups\n@@ -140,7 +150,9 @@\n      * @param name name of the group\n      * @return the created group\n      */\n-    MetricGroup addGroup(int name);\n+    default MetricGroup addGroup(int name) {\n+        return addGroup(String.valueOf(name));\n+    }\n \n     /**\n      * Creates a new MetricGroup and adds it to this groups sub-groups."
  },
  {
    "sha": "c60d58696becb32ed295d3bcf06c02663ae460f0",
    "filename": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -35,61 +35,31 @@\n  */\n public class UnregisteredMetricsGroup implements MetricGroup {\n \n-    @Override\n-    public Counter counter(int name) {\n-        return new SimpleCounter();\n-    }\n-\n     @Override\n     public Counter counter(String name) {\n         return new SimpleCounter();\n     }\n \n-    @Override\n-    public <C extends Counter> C counter(int name, C counter) {\n-        return counter;\n-    }\n-\n     @Override\n     public <C extends Counter> C counter(String name, C counter) {\n         return counter;\n     }\n \n-    @Override\n-    public <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-        return gauge;\n-    }\n-\n     @Override\n     public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n         return gauge;\n     }\n \n-    @Override\n-    public <H extends Histogram> H histogram(int name, H histogram) {\n-        return histogram;\n-    }\n-\n     @Override\n     public <M extends Meter> M meter(String name, M meter) {\n         return meter;\n     }\n \n-    @Override\n-    public <M extends Meter> M meter(int name, M meter) {\n-        return meter;\n-    }\n-\n     @Override\n     public <H extends Histogram> H histogram(String name, H histogram) {\n         return histogram;\n     }\n \n-    @Override\n-    public MetricGroup addGroup(int name) {\n-        return addGroup(String.valueOf(name));\n-    }\n-\n     @Override\n     public MetricGroup addGroup(String name) {\n         return new UnregisteredMetricsGroup();"
  },
  {
    "sha": "23033248dbbba37ff76b1b3ff66b10750da26aff",
    "filename": "flink-metrics/flink-metrics-core/src/test/java/org/apache/flink/metrics/util/TestMetricGroup.java",
    "status": "added",
    "additions": 159,
    "deletions": 0,
    "changes": 159,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-core/src/test/java/org/apache/flink/metrics/util/TestMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-core/src/test/java/org/apache/flink/metrics/util/TestMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/test/java/org/apache/flink/metrics/util/TestMetricGroup.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.metrics.util;\n+\n+import org.apache.flink.metrics.CharacterFilter;\n+import org.apache.flink.metrics.Counter;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.Histogram;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n+import org.apache.flink.metrics.Meter;\n+import org.apache.flink.metrics.MetricGroup;\n+import org.apache.flink.metrics.SimpleCounter;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+\n+/** A customizable test {@link MetricGroup} implementation. */\n+public class TestMetricGroup implements MetricGroup, LogicalScopeProvider {\n+\n+    private final String[] scopeComponents;\n+    private final Map<String, String> variables;\n+    private final BiFunction<String, Optional<CharacterFilter>, String> metricIdentifierFunction;\n+    private final BiFunction<CharacterFilter, Optional<Character>, String> logicalScopeFunction;\n+\n+    public TestMetricGroup(\n+            String[] scopeComponents,\n+            Map<String, String> variables,\n+            BiFunction<String, Optional<CharacterFilter>, String> metricIdentifierFunction,\n+            BiFunction<CharacterFilter, Optional<Character>, String> logicalScopeFunction) {\n+        this.scopeComponents = scopeComponents;\n+        this.variables = variables;\n+        this.metricIdentifierFunction = metricIdentifierFunction;\n+        this.logicalScopeFunction = logicalScopeFunction;\n+    }\n+\n+    public static TestMetricGroupBuilder newBuilder() {\n+        return new TestMetricGroupBuilder();\n+    }\n+\n+    /** Builder for {@link TestMetricGroup}. */\n+    public static final class TestMetricGroupBuilder {\n+        private String[] scopeComponents = new String[] {};\n+        private Map<String, String> variables = Collections.emptyMap();\n+        private BiFunction<String, Optional<CharacterFilter>, String> metricIdentifierFunction =\n+                (name, filter) -> filter.map(f -> f.filterCharacters(name)).orElse(name);\n+\n+        private BiFunction<CharacterFilter, Optional<Character>, String> logicalScopeFunction =\n+                (characterFilter, character) -> \"logicalScope\";\n+\n+        public TestMetricGroupBuilder setScopeComponents(String[] scopeComponents) {\n+            this.scopeComponents = scopeComponents;\n+            return this;\n+        }\n+\n+        public TestMetricGroupBuilder setVariables(Map<String, String> variables) {\n+            this.variables = variables;\n+            return this;\n+        }\n+\n+        public TestMetricGroupBuilder setMetricIdentifierFunction(\n+                BiFunction<String, Optional<CharacterFilter>, String> metricIdentifierFunction) {\n+            this.metricIdentifierFunction = metricIdentifierFunction;\n+            return this;\n+        }\n+\n+        public TestMetricGroupBuilder setLogicalScopeFunction(\n+                BiFunction<CharacterFilter, Optional<Character>, String> logicalScopeFunction) {\n+            this.logicalScopeFunction = logicalScopeFunction;\n+            return this;\n+        }\n+\n+        public TestMetricGroup build() {\n+            return new TestMetricGroup(\n+                    scopeComponents, variables, metricIdentifierFunction, logicalScopeFunction);\n+        }\n+    }\n+\n+    @Override\n+    public Counter counter(String name) {\n+        return new SimpleCounter();\n+    }\n+\n+    @Override\n+    public <C extends Counter> C counter(String name, C counter) {\n+        return counter;\n+    }\n+\n+    @Override\n+    public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n+        return gauge;\n+    }\n+\n+    @Override\n+    public <H extends Histogram> H histogram(String name, H histogram) {\n+        return histogram;\n+    }\n+\n+    @Override\n+    public <M extends Meter> M meter(String name, M meter) {\n+        return meter;\n+    }\n+\n+    @Override\n+    public MetricGroup addGroup(String name) {\n+        return this;\n+    }\n+\n+    @Override\n+    public MetricGroup addGroup(String key, String value) {\n+        return this;\n+    }\n+\n+    @Override\n+    public String[] getScopeComponents() {\n+        return scopeComponents;\n+    }\n+\n+    @Override\n+    public Map<String, String> getAllVariables() {\n+        return variables;\n+    }\n+\n+    @Override\n+    public String getMetricIdentifier(String metricName) {\n+        return metricIdentifierFunction.apply(metricName, Optional.empty());\n+    }\n+\n+    @Override\n+    public String getMetricIdentifier(String metricName, CharacterFilter filter) {\n+        return metricIdentifierFunction.apply(metricName, Optional.of(filter));\n+    }\n+\n+    @Override\n+    public String getLogicalScope(CharacterFilter filter) {\n+        return logicalScopeFunction.apply(filter, Optional.empty());\n+    }\n+\n+    @Override\n+    public String getLogicalScope(CharacterFilter filter, char delimiter) {\n+        return logicalScopeFunction.apply(filter, Optional.of(delimiter));\n+    }\n+}"
  },
  {
    "sha": "db462a42b486f9d50085410d94ed867ae41b3d58",
    "filename": "flink-metrics/flink-metrics-influxdb/src/main/java/org/apache/flink/metrics/influxdb/MeasurementInfoProvider.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-influxdb/src/main/java/org/apache/flink/metrics/influxdb/MeasurementInfoProvider.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-influxdb/src/main/java/org/apache/flink/metrics/influxdb/MeasurementInfoProvider.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-influxdb/src/main/java/org/apache/flink/metrics/influxdb/MeasurementInfoProvider.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -20,9 +20,8 @@\n \n import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.metrics.CharacterFilter;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n import org.apache.flink.metrics.MetricGroup;\n-import org.apache.flink.runtime.metrics.groups.AbstractMetricGroup;\n-import org.apache.flink.runtime.metrics.groups.FrontMetricGroup;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -63,7 +62,6 @@ private static String getScopedName(String metricName, MetricGroup group) {\n     }\n \n     private static String getLogicalScope(MetricGroup group) {\n-        return ((FrontMetricGroup<AbstractMetricGroup<?>>) group)\n-                .getLogicalScope(CHARACTER_FILTER, SCOPE_SEPARATOR);\n+        return ((LogicalScopeProvider) group).getLogicalScope(CHARACTER_FILTER, SCOPE_SEPARATOR);\n     }\n }"
  },
  {
    "sha": "e91884a753271ab1a7535487e770bb86048b100a",
    "filename": "flink-metrics/flink-metrics-jmx/src/main/java/org/apache/flink/metrics/jmx/JMXReporter.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-jmx/src/main/java/org/apache/flink/metrics/jmx/JMXReporter.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-jmx/src/main/java/org/apache/flink/metrics/jmx/JMXReporter.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-jmx/src/main/java/org/apache/flink/metrics/jmx/JMXReporter.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -23,15 +23,14 @@\n import org.apache.flink.metrics.Counter;\n import org.apache.flink.metrics.Gauge;\n import org.apache.flink.metrics.Histogram;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n import org.apache.flink.metrics.Meter;\n import org.apache.flink.metrics.Metric;\n import org.apache.flink.metrics.MetricConfig;\n import org.apache.flink.metrics.MetricGroup;\n import org.apache.flink.metrics.reporter.InstantiateViaFactory;\n import org.apache.flink.metrics.reporter.MetricReporter;\n import org.apache.flink.runtime.management.JMXService;\n-import org.apache.flink.runtime.metrics.groups.AbstractMetricGroup;\n-import org.apache.flink.runtime.metrics.groups.FrontMetricGroup;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -198,8 +197,7 @@ public void notifyOfRemovedMetric(Metric metric, String metricName, MetricGroup\n \n     static String generateJmxDomain(String metricName, MetricGroup group) {\n         return JMX_DOMAIN_PREFIX\n-                + ((FrontMetricGroup<AbstractMetricGroup<?>>) group)\n-                        .getLogicalScope(CHARACTER_FILTER, '.')\n+                + ((LogicalScopeProvider) group).getLogicalScope(CHARACTER_FILTER, '.')\n                 + '.'\n                 + metricName;\n     }"
  },
  {
    "sha": "2328b6298b428dba47e0e7933b079a4fef29637b",
    "filename": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/AbstractPrometheusReporter.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/AbstractPrometheusReporter.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/AbstractPrometheusReporter.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/AbstractPrometheusReporter.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -25,13 +25,12 @@\n import org.apache.flink.metrics.Gauge;\n import org.apache.flink.metrics.Histogram;\n import org.apache.flink.metrics.HistogramStatistics;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n import org.apache.flink.metrics.Meter;\n import org.apache.flink.metrics.Metric;\n import org.apache.flink.metrics.MetricConfig;\n import org.apache.flink.metrics.MetricGroup;\n import org.apache.flink.metrics.reporter.MetricReporter;\n-import org.apache.flink.runtime.metrics.groups.AbstractMetricGroup;\n-import org.apache.flink.runtime.metrics.groups.FrontMetricGroup;\n \n import io.prometheus.client.Collector;\n import io.prometheus.client.CollectorRegistry;\n@@ -251,8 +250,7 @@ public void notifyOfRemovedMetric(\n \n     @SuppressWarnings(\"unchecked\")\n     private static String getLogicalScope(MetricGroup group) {\n-        return ((FrontMetricGroup<AbstractMetricGroup<?>>) group)\n-                .getLogicalScope(CHARACTER_FILTER, SCOPE_SEPARATOR);\n+        return ((LogicalScopeProvider) group).getLogicalScope(CHARACTER_FILTER, SCOPE_SEPARATOR);\n     }\n \n     @VisibleForTesting"
  },
  {
    "sha": "c2621a7f16242353b04dcc520d60d733107a2e9d",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -345,54 +345,29 @@ public final boolean isClosed() {\n     //  Metrics\n     // -----------------------------------------------------------------------------------------------------------------\n \n-    @Override\n-    public Counter counter(int name) {\n-        return counter(String.valueOf(name));\n-    }\n-\n     @Override\n     public Counter counter(String name) {\n         return counter(name, new SimpleCounter());\n     }\n \n-    @Override\n-    public <C extends Counter> C counter(int name, C counter) {\n-        return counter(String.valueOf(name), counter);\n-    }\n-\n     @Override\n     public <C extends Counter> C counter(String name, C counter) {\n         addMetric(name, counter);\n         return counter;\n     }\n \n-    @Override\n-    public <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-        return gauge(String.valueOf(name), gauge);\n-    }\n-\n     @Override\n     public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n         addMetric(name, gauge);\n         return gauge;\n     }\n \n-    @Override\n-    public <H extends Histogram> H histogram(int name, H histogram) {\n-        return histogram(String.valueOf(name), histogram);\n-    }\n-\n     @Override\n     public <H extends Histogram> H histogram(String name, H histogram) {\n         addMetric(name, histogram);\n         return histogram;\n     }\n \n-    @Override\n-    public <M extends Meter> M meter(int name, M meter) {\n-        return meter(String.valueOf(name), meter);\n-    }\n-\n     @Override\n     public <M extends Meter> M meter(String name, M meter) {\n         addMetric(name, meter);\n@@ -458,11 +433,6 @@ protected void addMetric(String name, Metric metric) {\n     //  Groups\n     // ------------------------------------------------------------------------\n \n-    @Override\n-    public MetricGroup addGroup(int name) {\n-        return addGroup(String.valueOf(name), ChildType.GENERIC);\n-    }\n-\n     @Override\n     public MetricGroup addGroup(String name) {\n         return addGroup(name, ChildType.GENERIC);"
  },
  {
    "sha": "6776c6c3e9760fab7473bfbd55f3637bb5b8663a",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/FrontMetricGroup.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/FrontMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/FrontMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/FrontMetricGroup.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.metrics.CharacterFilter;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n \n import java.util.Map;\n \n@@ -32,7 +33,8 @@\n  *\n  * @param <P> parentMetricGroup to {@link AbstractMetricGroup AbstractMetricGroup}\n  */\n-public class FrontMetricGroup<P extends AbstractMetricGroup<?>> extends ProxyMetricGroup<P> {\n+public class FrontMetricGroup<P extends AbstractMetricGroup<?>> extends ProxyMetricGroup<P>\n+        implements LogicalScopeProvider {\n \n     @VisibleForTesting static final char DEFAULT_REPLACEMENT = '_';\n     @VisibleForTesting static final char DEFAULT_REPLACEMENT_ALTERNATIVE = '-';\n@@ -68,11 +70,13 @@ public String getMetricIdentifier(String metricName, CharacterFilter filter) {\n                 this.settings.getReporterIndex(), this.settings.getExcludedVariables());\n     }\n \n+    @Override\n     public String getLogicalScope(CharacterFilter filter) {\n         return parentMetricGroup.getLogicalScope(\n                 getDelimiterFilter(this.settings, filter), this.settings.getDelimiter());\n     }\n \n+    @Override\n     public String getLogicalScope(CharacterFilter filter, char delimiter) {\n         return parentMetricGroup.getLogicalScope(\n                 getDelimiterFilter(this.settings, filter),"
  },
  {
    "sha": "0ca34cf756f6fff9ea0b545e767848d20fbc4b55",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/e3c6775999035e893e0e0360eaa7862e5d967f5d/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java?ref=e3c6775999035e893e0e0360eaa7862e5d967f5d",
    "patch": "@@ -42,31 +42,16 @@ public ProxyMetricGroup(P parentMetricGroup) {\n         this.parentMetricGroup = checkNotNull(parentMetricGroup);\n     }\n \n-    @Override\n-    public final Counter counter(int name) {\n-        return parentMetricGroup.counter(name);\n-    }\n-\n     @Override\n     public final Counter counter(String name) {\n         return parentMetricGroup.counter(name);\n     }\n \n-    @Override\n-    public final <C extends Counter> C counter(int name, C counter) {\n-        return parentMetricGroup.counter(name, counter);\n-    }\n-\n     @Override\n     public final <C extends Counter> C counter(String name, C counter) {\n         return parentMetricGroup.counter(name, counter);\n     }\n \n-    @Override\n-    public final <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-        return parentMetricGroup.gauge(name, gauge);\n-    }\n-\n     @Override\n     public final <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n         return parentMetricGroup.gauge(name, gauge);\n@@ -77,26 +62,11 @@ public final Counter counter(String name) {\n         return parentMetricGroup.histogram(name, histogram);\n     }\n \n-    @Override\n-    public final <H extends Histogram> H histogram(int name, H histogram) {\n-        return parentMetricGroup.histogram(name, histogram);\n-    }\n-\n     @Override\n     public <M extends Meter> M meter(String name, M meter) {\n         return parentMetricGroup.meter(name, meter);\n     }\n \n-    @Override\n-    public <M extends Meter> M meter(int name, M meter) {\n-        return parentMetricGroup.meter(name, meter);\n-    }\n-\n-    @Override\n-    public final MetricGroup addGroup(int name) {\n-        return parentMetricGroup.addGroup(name);\n-    }\n-\n     @Override\n     public final MetricGroup addGroup(String name) {\n         return parentMetricGroup.addGroup(name);"
  }
]
