[
  {
    "sha": "dccf1335e456f4faf02a87d55d20650dcea8e5b8",
    "filename": "flink-connectors/flink-connector-kafka/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-connectors/flink-connector-kafka/pom.xml",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-connectors/flink-connector-kafka/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-connectors/flink-connector-kafka/pom.xml?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -153,7 +153,7 @@ under the License.\n \n \t\t<dependency>\n \t\t\t<groupId>org.apache.flink</groupId>\n-\t\t\t<artifactId>flink-metrics-jmx_${scala.binary.version}</artifactId>\n+\t\t\t<artifactId>flink-metrics-jmx</artifactId>\n \t\t\t<version>${project.version}</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>"
  },
  {
    "sha": "7e2e76d14c204d5a45a6fa26b235dace539c7d68",
    "filename": "flink-core/src/main/java/org/apache/flink/management/jmx/JMXServer.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/main/java/org/apache/flink/management/jmx/JMXServer.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/main/java/org/apache/flink/management/jmx/JMXServer.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-core/src/main/java/org/apache/flink/management/jmx/JMXServer.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.flink.runtime.management;\n+package org.apache.flink.management.jmx;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;",
    "previous_filename": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXServer.java"
  },
  {
    "sha": "ec0a63383e274ac2faafdf1b54ce8a56d418ac6c",
    "filename": "flink-core/src/main/java/org/apache/flink/management/jmx/JMXService.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/main/java/org/apache/flink/management/jmx/JMXService.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/main/java/org/apache/flink/management/jmx/JMXService.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-core/src/main/java/org/apache/flink/management/jmx/JMXService.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.flink.runtime.management;\n+package org.apache.flink.management.jmx;\n \n import org.apache.flink.util.NetUtils;\n ",
    "previous_filename": "flink-runtime/src/main/java/org/apache/flink/runtime/management/JMXService.java"
  },
  {
    "sha": "4eacf09101b6c5edc77fe08b443e31a2bf36402a",
    "filename": "flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-core/src/test/java/org/apache/flink/api/common/eventtime/WatermarkStrategyTest.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -180,31 +180,16 @@ public MetricGroup getMetricGroup() {\n      */\n     public static class DummyMetricGroup implements MetricGroup {\n \n-        @Override\n-        public Counter counter(int name) {\n-            return null;\n-        }\n-\n         @Override\n         public Counter counter(String name) {\n             return null;\n         }\n \n-        @Override\n-        public <C extends Counter> C counter(int name, C counter) {\n-            return null;\n-        }\n-\n         @Override\n         public <C extends Counter> C counter(String name, C counter) {\n             return null;\n         }\n \n-        @Override\n-        public <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-            return null;\n-        }\n-\n         @Override\n         public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n             return null;\n@@ -215,26 +200,11 @@ public Counter counter(String name) {\n             return null;\n         }\n \n-        @Override\n-        public <H extends Histogram> H histogram(int name, H histogram) {\n-            return null;\n-        }\n-\n         @Override\n         public <M extends Meter> M meter(String name, M meter) {\n             return null;\n         }\n \n-        @Override\n-        public <M extends Meter> M meter(int name, M meter) {\n-            return null;\n-        }\n-\n-        @Override\n-        public MetricGroup addGroup(int name) {\n-            return null;\n-        }\n-\n         @Override\n         public MetricGroup addGroup(String name) {\n             return null;"
  },
  {
    "sha": "5778178ba19c6e500eb7b83769738b786b6d872d",
    "filename": "flink-core/src/test/java/org/apache/flink/management/jmx/JMXServerTest.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/test/java/org/apache/flink/management/jmx/JMXServerTest.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/test/java/org/apache/flink/management/jmx/JMXServerTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-core/src/test/java/org/apache/flink/management/jmx/JMXServerTest.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.flink.runtime.management;\n+package org.apache.flink.management.jmx;\n \n import org.junit.After;\n import org.junit.Before;",
    "previous_filename": "flink-runtime/src/test/java/org/apache/flink/runtime/management/JMXServerTest.java"
  },
  {
    "sha": "04bc85e1f04fe10e4c14d1162070f3cadf4a8c56",
    "filename": "flink-core/src/test/java/org/apache/flink/management/jmx/JMXServiceTest.java",
    "status": "renamed",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/test/java/org/apache/flink/management/jmx/JMXServiceTest.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-core/src/test/java/org/apache/flink/management/jmx/JMXServiceTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-core/src/test/java/org/apache/flink/management/jmx/JMXServiceTest.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.flink.runtime.management;\n+package org.apache.flink.management.jmx;\n \n import org.junit.Test;\n ",
    "previous_filename": "flink-runtime/src/test/java/org/apache/flink/runtime/management/JMXServiceTest.java"
  },
  {
    "sha": "8c7475f797f28661fd1eb70c3277f21af94bb17c",
    "filename": "flink-dist/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-dist/pom.xml",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-dist/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-dist/pom.xml?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -274,7 +274,7 @@ under the License.\n \n \t\t<dependency>\n \t\t\t<groupId>org.apache.flink</groupId>\n-\t\t\t<artifactId>flink-metrics-jmx_${scala.binary.version}</artifactId>\n+\t\t\t<artifactId>flink-metrics-jmx</artifactId>\n \t\t\t<version>${project.version}</version>\n \t\t\t<scope>provided</scope>\n \t\t</dependency>"
  },
  {
    "sha": "30ce5b687c7f3bd7fb7bf7a645df92920053209d",
    "filename": "flink-dist/src/main/assemblies/plugins.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-dist/src/main/assemblies/plugins.xml",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-dist/src/main/assemblies/plugins.xml",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-dist/src/main/assemblies/plugins.xml?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -32,7 +32,7 @@\n \t\t<!-- Metrics -->\n \n \t\t<file>\n-\t\t\t<source>../flink-metrics/flink-metrics-jmx/target/flink-metrics-jmx_${scala.binary.version}-${project.version}.jar</source>\n+\t\t\t<source>../flink-metrics/flink-metrics-jmx/target/flink-metrics-jmx-${project.version}.jar</source>\n \t\t\t<outputDirectory>plugins/metrics-jmx/</outputDirectory>\n \t\t\t<destName>flink-metrics-jmx-${project.version}.jar</destName>\n \t\t\t<fileMode>0644</fileMode>"
  },
  {
    "sha": "1a04d8a6eca97673a7e4fa3c719e95ea8b93256b",
    "filename": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/LogicalScopeProvider.java",
    "status": "added",
    "additions": 25,
    "deletions": 0,
    "changes": 25,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/LogicalScopeProvider.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/LogicalScopeProvider.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/LogicalScopeProvider.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.metrics;\n+\n+/** Extension for metric groups that support logical scopes. */\n+public interface LogicalScopeProvider {\n+    String getLogicalScope(CharacterFilter filter);\n+\n+    String getLogicalScope(CharacterFilter filter, char delimiter);\n+}"
  },
  {
    "sha": "8268ca92269fbc5a44da848b6579efe980c9f1a4",
    "filename": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java",
    "status": "modified",
    "additions": 18,
    "deletions": 6,
    "changes": 24,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -40,7 +40,9 @@\n      * @param name name of the counter\n      * @return the created counter\n      */\n-    Counter counter(int name);\n+    default Counter counter(int name) {\n+        return counter(String.valueOf(name));\n+    }\n \n     /**\n      * Creates and registers a new {@link org.apache.flink.metrics.Counter} with Flink.\n@@ -58,7 +60,9 @@\n      * @param <C> counter type\n      * @return the given counter\n      */\n-    <C extends Counter> C counter(int name, C counter);\n+    default <C extends Counter> C counter(int name, C counter) {\n+        return counter(String.valueOf(name), counter);\n+    }\n \n     /**\n      * Registers a {@link org.apache.flink.metrics.Counter} with Flink.\n@@ -78,7 +82,9 @@\n      * @param <T> return type of the gauge\n      * @return the given gauge\n      */\n-    <T, G extends Gauge<T>> G gauge(int name, G gauge);\n+    default <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n+        return gauge(String.valueOf(name), gauge);\n+    }\n \n     /**\n      * Registers a new {@link org.apache.flink.metrics.Gauge} with Flink.\n@@ -108,7 +114,9 @@\n      * @param <H> histogram type\n      * @return the registered histogram\n      */\n-    <H extends Histogram> H histogram(int name, H histogram);\n+    default <H extends Histogram> H histogram(int name, H histogram) {\n+        return histogram(String.valueOf(name), histogram);\n+    }\n \n     /**\n      * Registers a new {@link Meter} with Flink.\n@@ -128,7 +136,9 @@\n      * @param <M> meter type\n      * @return the registered meter\n      */\n-    <M extends Meter> M meter(int name, M meter);\n+    default <M extends Meter> M meter(int name, M meter) {\n+        return meter(String.valueOf(name), meter);\n+    }\n \n     // ------------------------------------------------------------------------\n     // Groups\n@@ -140,7 +150,9 @@\n      * @param name name of the group\n      * @return the created group\n      */\n-    MetricGroup addGroup(int name);\n+    default MetricGroup addGroup(int name) {\n+        return addGroup(String.valueOf(name));\n+    }\n \n     /**\n      * Creates a new MetricGroup and adds it to this groups sub-groups."
  },
  {
    "sha": "c60d58696becb32ed295d3bcf06c02663ae460f0",
    "filename": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/groups/UnregisteredMetricsGroup.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -35,61 +35,31 @@\n  */\n public class UnregisteredMetricsGroup implements MetricGroup {\n \n-    @Override\n-    public Counter counter(int name) {\n-        return new SimpleCounter();\n-    }\n-\n     @Override\n     public Counter counter(String name) {\n         return new SimpleCounter();\n     }\n \n-    @Override\n-    public <C extends Counter> C counter(int name, C counter) {\n-        return counter;\n-    }\n-\n     @Override\n     public <C extends Counter> C counter(String name, C counter) {\n         return counter;\n     }\n \n-    @Override\n-    public <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-        return gauge;\n-    }\n-\n     @Override\n     public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n         return gauge;\n     }\n \n-    @Override\n-    public <H extends Histogram> H histogram(int name, H histogram) {\n-        return histogram;\n-    }\n-\n     @Override\n     public <M extends Meter> M meter(String name, M meter) {\n         return meter;\n     }\n \n-    @Override\n-    public <M extends Meter> M meter(int name, M meter) {\n-        return meter;\n-    }\n-\n     @Override\n     public <H extends Histogram> H histogram(String name, H histogram) {\n         return histogram;\n     }\n \n-    @Override\n-    public MetricGroup addGroup(int name) {\n-        return addGroup(String.valueOf(name));\n-    }\n-\n     @Override\n     public MetricGroup addGroup(String name) {\n         return new UnregisteredMetricsGroup();"
  },
  {
    "sha": "23033248dbbba37ff76b1b3ff66b10750da26aff",
    "filename": "flink-metrics/flink-metrics-core/src/test/java/org/apache/flink/metrics/util/TestMetricGroup.java",
    "status": "added",
    "additions": 159,
    "deletions": 0,
    "changes": 159,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-core/src/test/java/org/apache/flink/metrics/util/TestMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-core/src/test/java/org/apache/flink/metrics/util/TestMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-core/src/test/java/org/apache/flink/metrics/util/TestMetricGroup.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.metrics.util;\n+\n+import org.apache.flink.metrics.CharacterFilter;\n+import org.apache.flink.metrics.Counter;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.Histogram;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n+import org.apache.flink.metrics.Meter;\n+import org.apache.flink.metrics.MetricGroup;\n+import org.apache.flink.metrics.SimpleCounter;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+\n+/** A customizable test {@link MetricGroup} implementation. */\n+public class TestMetricGroup implements MetricGroup, LogicalScopeProvider {\n+\n+    private final String[] scopeComponents;\n+    private final Map<String, String> variables;\n+    private final BiFunction<String, Optional<CharacterFilter>, String> metricIdentifierFunction;\n+    private final BiFunction<CharacterFilter, Optional<Character>, String> logicalScopeFunction;\n+\n+    public TestMetricGroup(\n+            String[] scopeComponents,\n+            Map<String, String> variables,\n+            BiFunction<String, Optional<CharacterFilter>, String> metricIdentifierFunction,\n+            BiFunction<CharacterFilter, Optional<Character>, String> logicalScopeFunction) {\n+        this.scopeComponents = scopeComponents;\n+        this.variables = variables;\n+        this.metricIdentifierFunction = metricIdentifierFunction;\n+        this.logicalScopeFunction = logicalScopeFunction;\n+    }\n+\n+    public static TestMetricGroupBuilder newBuilder() {\n+        return new TestMetricGroupBuilder();\n+    }\n+\n+    /** Builder for {@link TestMetricGroup}. */\n+    public static final class TestMetricGroupBuilder {\n+        private String[] scopeComponents = new String[] {};\n+        private Map<String, String> variables = Collections.emptyMap();\n+        private BiFunction<String, Optional<CharacterFilter>, String> metricIdentifierFunction =\n+                (name, filter) -> filter.map(f -> f.filterCharacters(name)).orElse(name);\n+\n+        private BiFunction<CharacterFilter, Optional<Character>, String> logicalScopeFunction =\n+                (characterFilter, character) -> \"logicalScope\";\n+\n+        public TestMetricGroupBuilder setScopeComponents(String[] scopeComponents) {\n+            this.scopeComponents = scopeComponents;\n+            return this;\n+        }\n+\n+        public TestMetricGroupBuilder setVariables(Map<String, String> variables) {\n+            this.variables = variables;\n+            return this;\n+        }\n+\n+        public TestMetricGroupBuilder setMetricIdentifierFunction(\n+                BiFunction<String, Optional<CharacterFilter>, String> metricIdentifierFunction) {\n+            this.metricIdentifierFunction = metricIdentifierFunction;\n+            return this;\n+        }\n+\n+        public TestMetricGroupBuilder setLogicalScopeFunction(\n+                BiFunction<CharacterFilter, Optional<Character>, String> logicalScopeFunction) {\n+            this.logicalScopeFunction = logicalScopeFunction;\n+            return this;\n+        }\n+\n+        public TestMetricGroup build() {\n+            return new TestMetricGroup(\n+                    scopeComponents, variables, metricIdentifierFunction, logicalScopeFunction);\n+        }\n+    }\n+\n+    @Override\n+    public Counter counter(String name) {\n+        return new SimpleCounter();\n+    }\n+\n+    @Override\n+    public <C extends Counter> C counter(String name, C counter) {\n+        return counter;\n+    }\n+\n+    @Override\n+    public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n+        return gauge;\n+    }\n+\n+    @Override\n+    public <H extends Histogram> H histogram(String name, H histogram) {\n+        return histogram;\n+    }\n+\n+    @Override\n+    public <M extends Meter> M meter(String name, M meter) {\n+        return meter;\n+    }\n+\n+    @Override\n+    public MetricGroup addGroup(String name) {\n+        return this;\n+    }\n+\n+    @Override\n+    public MetricGroup addGroup(String key, String value) {\n+        return this;\n+    }\n+\n+    @Override\n+    public String[] getScopeComponents() {\n+        return scopeComponents;\n+    }\n+\n+    @Override\n+    public Map<String, String> getAllVariables() {\n+        return variables;\n+    }\n+\n+    @Override\n+    public String getMetricIdentifier(String metricName) {\n+        return metricIdentifierFunction.apply(metricName, Optional.empty());\n+    }\n+\n+    @Override\n+    public String getMetricIdentifier(String metricName, CharacterFilter filter) {\n+        return metricIdentifierFunction.apply(metricName, Optional.of(filter));\n+    }\n+\n+    @Override\n+    public String getLogicalScope(CharacterFilter filter) {\n+        return logicalScopeFunction.apply(filter, Optional.empty());\n+    }\n+\n+    @Override\n+    public String getLogicalScope(CharacterFilter filter, char delimiter) {\n+        return logicalScopeFunction.apply(filter, Optional.of(delimiter));\n+    }\n+}"
  },
  {
    "sha": "db462a42b486f9d50085410d94ed867ae41b3d58",
    "filename": "flink-metrics/flink-metrics-influxdb/src/main/java/org/apache/flink/metrics/influxdb/MeasurementInfoProvider.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-influxdb/src/main/java/org/apache/flink/metrics/influxdb/MeasurementInfoProvider.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-influxdb/src/main/java/org/apache/flink/metrics/influxdb/MeasurementInfoProvider.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-influxdb/src/main/java/org/apache/flink/metrics/influxdb/MeasurementInfoProvider.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -20,9 +20,8 @@\n \n import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.metrics.CharacterFilter;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n import org.apache.flink.metrics.MetricGroup;\n-import org.apache.flink.runtime.metrics.groups.AbstractMetricGroup;\n-import org.apache.flink.runtime.metrics.groups.FrontMetricGroup;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -63,7 +62,6 @@ private static String getScopedName(String metricName, MetricGroup group) {\n     }\n \n     private static String getLogicalScope(MetricGroup group) {\n-        return ((FrontMetricGroup<AbstractMetricGroup<?>>) group)\n-                .getLogicalScope(CHARACTER_FILTER, SCOPE_SEPARATOR);\n+        return ((LogicalScopeProvider) group).getLogicalScope(CHARACTER_FILTER, SCOPE_SEPARATOR);\n     }\n }"
  },
  {
    "sha": "e5a4764d4c1930842b89d880c3958b9d05492d0d",
    "filename": "flink-metrics/flink-metrics-jmx/pom.xml",
    "status": "modified",
    "additions": 1,
    "deletions": 22,
    "changes": 23,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-jmx/pom.xml",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-jmx/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-jmx/pom.xml?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -29,7 +29,7 @@ under the License.\n \t\t<relativePath>..</relativePath>\n \t</parent>\n \n-\t<artifactId>flink-metrics-jmx_${scala.binary.version}</artifactId>\n+\t<artifactId>flink-metrics-jmx</artifactId>\n \t<name>Flink : Metrics : JMX</name>\n \n \t<dependencies>\n@@ -47,13 +47,6 @@ under the License.\n \t\t\t<scope>provided</scope>\n \t\t</dependency>\n \n-\t\t<dependency>\n-\t\t\t<groupId>org.apache.flink</groupId>\n-\t\t\t<artifactId>flink-runtime_${scala.binary.version}</artifactId>\n-\t\t\t<version>${project.version}</version>\n-\t\t\t<scope>provided</scope>\n-\t\t</dependency>\n-\n \t\t<dependency>\n \t\t\t<groupId>org.apache.flink</groupId>\n \t\t\t<artifactId>flink-metrics-core</artifactId>\n@@ -71,23 +64,9 @@ under the License.\n \t\t\t<type>test-jar</type>\n \t\t</dependency>\n \n-\t\t<dependency>\n-\t\t\t<groupId>org.apache.flink</groupId>\n-\t\t\t<artifactId>flink-runtime_${scala.binary.version}</artifactId>\n-\t\t\t<version>${project.version}</version>\n-\t\t\t<scope>test</scope>\n-\t\t\t<type>test-jar</type>\n-\t\t</dependency>\n-\n \t\t<dependency>\n \t\t\t<groupId>org.apache.flink</groupId>\n \t\t\t<artifactId>flink-test-utils-junit</artifactId>\n \t\t</dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>org.apache.flink</groupId>\n-\t\t\t<artifactId>flink-test-utils_${scala.binary.version}</artifactId>\n-\t\t\t<version>${project.version}</version>\n-\t\t\t<scope>test</scope>\n-\t\t</dependency>\n \t</dependencies>\n </project>"
  },
  {
    "sha": "783c661a93c91d9709637c8cae9bd83a1d556215",
    "filename": "flink-metrics/flink-metrics-jmx/src/main/java/org/apache/flink/metrics/jmx/JMXReporter.java",
    "status": "modified",
    "additions": 3,
    "deletions": 5,
    "changes": 8,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-jmx/src/main/java/org/apache/flink/metrics/jmx/JMXReporter.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-jmx/src/main/java/org/apache/flink/metrics/jmx/JMXReporter.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-jmx/src/main/java/org/apache/flink/metrics/jmx/JMXReporter.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -19,19 +19,18 @@\n package org.apache.flink.metrics.jmx;\n \n import org.apache.flink.configuration.JMXServerOptions;\n+import org.apache.flink.management.jmx.JMXService;\n import org.apache.flink.metrics.CharacterFilter;\n import org.apache.flink.metrics.Counter;\n import org.apache.flink.metrics.Gauge;\n import org.apache.flink.metrics.Histogram;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n import org.apache.flink.metrics.Meter;\n import org.apache.flink.metrics.Metric;\n import org.apache.flink.metrics.MetricConfig;\n import org.apache.flink.metrics.MetricGroup;\n import org.apache.flink.metrics.reporter.InstantiateViaFactory;\n import org.apache.flink.metrics.reporter.MetricReporter;\n-import org.apache.flink.runtime.management.JMXService;\n-import org.apache.flink.runtime.metrics.groups.AbstractMetricGroup;\n-import org.apache.flink.runtime.metrics.groups.FrontMetricGroup;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -198,8 +197,7 @@ public void notifyOfRemovedMetric(Metric metric, String metricName, MetricGroup\n \n     static String generateJmxDomain(String metricName, MetricGroup group) {\n         return JMX_DOMAIN_PREFIX\n-                + ((FrontMetricGroup<AbstractMetricGroup<?>>) group)\n-                        .getLogicalScope(CHARACTER_FILTER, '.')\n+                + ((LogicalScopeProvider) group).getLogicalScope(CHARACTER_FILTER, '.')\n                 + '.'\n                 + metricName;\n     }"
  },
  {
    "sha": "3b16d9023a72a98e0205d3e43af3d3ced7cb1e9b",
    "filename": "flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/metrics/jmx/JMXReporterFactoryTest.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/metrics/jmx/JMXReporterFactoryTest.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/metrics/jmx/JMXReporterFactoryTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/metrics/jmx/JMXReporterFactoryTest.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -17,8 +17,8 @@\n \n package org.apache.flink.metrics.jmx;\n \n+import org.apache.flink.management.jmx.JMXService;\n import org.apache.flink.metrics.util.MetricReporterTestUtils;\n-import org.apache.flink.runtime.management.JMXService;\n import org.apache.flink.util.TestLogger;\n \n import org.junit.After;"
  },
  {
    "sha": "4e47c5f53659ad57272218a8e4cc5a687383f607",
    "filename": "flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/metrics/jmx/JMXReporterTest.java",
    "status": "modified",
    "additions": 91,
    "deletions": 187,
    "changes": 278,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/metrics/jmx/JMXReporterTest.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/metrics/jmx/JMXReporterTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/metrics/jmx/JMXReporterTest.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -18,18 +18,14 @@\n \n package org.apache.flink.metrics.jmx;\n \n+import org.apache.flink.management.jmx.JMXService;\n import org.apache.flink.metrics.Gauge;\n import org.apache.flink.metrics.HistogramStatistics;\n+import org.apache.flink.metrics.MetricGroup;\n import org.apache.flink.metrics.reporter.MetricReporter;\n import org.apache.flink.metrics.util.TestHistogram;\n import org.apache.flink.metrics.util.TestMeter;\n-import org.apache.flink.runtime.management.JMXService;\n-import org.apache.flink.runtime.metrics.MetricRegistryConfiguration;\n-import org.apache.flink.runtime.metrics.MetricRegistryImpl;\n-import org.apache.flink.runtime.metrics.ReporterSetup;\n-import org.apache.flink.runtime.metrics.groups.FrontMetricGroup;\n-import org.apache.flink.runtime.metrics.groups.ReporterScopedSettings;\n-import org.apache.flink.runtime.metrics.groups.TaskManagerMetricGroup;\n+import org.apache.flink.metrics.util.TestMetricGroup;\n import org.apache.flink.util.TestLogger;\n \n import org.junit.After;\n@@ -46,20 +42,30 @@\n \n import java.io.IOException;\n import java.lang.management.ManagementFactory;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.Hashtable;\n-import java.util.List;\n import java.util.Map;\n \n import static org.apache.flink.metrics.jmx.JMXReporter.JMX_DOMAIN_PREFIX;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n \n /** Tests for the JMXReporter. */\n public class JMXReporterTest extends TestLogger {\n \n+    private static final Map<String, String> variables;\n+    private static final MetricGroup metricGroup;\n+\n+    static {\n+        variables = new HashMap<>();\n+        variables.put(\"<host>\", \"localhost\");\n+\n+        metricGroup =\n+                TestMetricGroup.newBuilder()\n+                        .setLogicalScopeFunction((characterFilter, character) -> \"taskmanager\")\n+                        .setVariables(variables)\n+                        .build();\n+    }\n+\n     @After\n     public void shutdownService() throws IOException {\n         JMXService.stopInstance();\n@@ -105,64 +111,31 @@ public void testGenerateTable() {\n      */\n     @Test\n     public void testPortConflictHandling() throws Exception {\n-        ReporterSetup reporterSetup1 =\n-                ReporterSetup.forReporter(\"test1\", new JMXReporter(\"9020-9035\"));\n-        ReporterSetup reporterSetup2 =\n-                ReporterSetup.forReporter(\"test2\", new JMXReporter(\"9020-9035\"));\n-\n-        MetricRegistryImpl reg =\n-                new MetricRegistryImpl(\n-                        MetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n-                        Arrays.asList(reporterSetup1, reporterSetup2));\n-\n-        TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, \"host\", \"tm\");\n-\n-        List<MetricReporter> reporters = reg.getReporters();\n-\n-        assertTrue(reporters.size() == 2);\n-\n-        MetricReporter rep1 = reporters.get(0);\n-        MetricReporter rep2 = reporters.get(1);\n-\n-        Gauge<Integer> g1 =\n-                new Gauge<Integer>() {\n-                    @Override\n-                    public Integer getValue() {\n-                        return 1;\n-                    }\n-                };\n-        Gauge<Integer> g2 =\n-                new Gauge<Integer>() {\n-                    @Override\n-                    public Integer getValue() {\n-                        return 2;\n-                    }\n-                };\n-\n-        rep1.notifyOfAddedMetric(\n-                g1, \"rep1\", new FrontMetricGroup<>(createReporterScopedSettings(0), mg));\n-        rep2.notifyOfAddedMetric(\n-                g2, \"rep2\", new FrontMetricGroup<>(createReporterScopedSettings(0), mg));\n+        final MetricReporter rep1 = new JMXReporter(\"9020-9035\");\n+        final MetricReporter rep2 = new JMXReporter(\"9020-9035\");\n+\n+        Gauge<Integer> g1 = () -> 1;\n+        Gauge<Integer> g2 = () -> 2;\n+\n+        rep1.notifyOfAddedMetric(g1, \"rep1\", metricGroup);\n+        rep2.notifyOfAddedMetric(g2, \"rep2\", metricGroup);\n \n         MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n \n         ObjectName objectName1 =\n                 new ObjectName(\n                         JMX_DOMAIN_PREFIX + \"taskmanager.rep1\",\n-                        JMXReporter.generateJmxTable(mg.getAllVariables()));\n+                        JMXReporter.generateJmxTable(metricGroup.getAllVariables()));\n         ObjectName objectName2 =\n                 new ObjectName(\n                         JMX_DOMAIN_PREFIX + \"taskmanager.rep2\",\n-                        JMXReporter.generateJmxTable(mg.getAllVariables()));\n+                        JMXReporter.generateJmxTable(metricGroup.getAllVariables()));\n \n         assertEquals(1, mBeanServer.getAttribute(objectName1, \"Value\"));\n         assertEquals(2, mBeanServer.getAttribute(objectName2, \"Value\"));\n \n         rep1.notifyOfRemovedMetric(g1, \"rep1\", null);\n         rep1.notifyOfRemovedMetric(g2, \"rep2\", null);\n-\n-        mg.close();\n-        reg.shutdown().get();\n     }\n \n     /**\n@@ -172,54 +145,23 @@ public Integer getValue() {\n      */\n     @Test\n     public void testJMXAvailability() throws Exception {\n-        ReporterSetup reporterSetup1 =\n-                ReporterSetup.forReporter(\"test1\", new JMXReporter(\"9040-9055\"));\n-        ReporterSetup reporterSetup2 =\n-                ReporterSetup.forReporter(\"test2\", new JMXReporter(\"9040-9055\"));\n-\n-        MetricRegistryImpl reg =\n-                new MetricRegistryImpl(\n-                        MetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n-                        Arrays.asList(reporterSetup1, reporterSetup2));\n-\n-        TaskManagerMetricGroup mg = new TaskManagerMetricGroup(reg, \"host\", \"tm\");\n-\n-        List<MetricReporter> reporters = reg.getReporters();\n-\n-        assertTrue(reporters.size() == 2);\n-\n-        MetricReporter rep1 = reporters.get(0);\n-        MetricReporter rep2 = reporters.get(1);\n-\n-        Gauge<Integer> g1 =\n-                new Gauge<Integer>() {\n-                    @Override\n-                    public Integer getValue() {\n-                        return 1;\n-                    }\n-                };\n-        Gauge<Integer> g2 =\n-                new Gauge<Integer>() {\n-                    @Override\n-                    public Integer getValue() {\n-                        return 2;\n-                    }\n-                };\n-\n-        rep1.notifyOfAddedMetric(\n-                g1, \"rep1\", new FrontMetricGroup<>(createReporterScopedSettings(0), mg));\n-\n-        rep2.notifyOfAddedMetric(\n-                g2, \"rep2\", new FrontMetricGroup<>(createReporterScopedSettings(1), mg));\n+        final MetricReporter rep1 = new JMXReporter(\"9040-9055\");\n+        final MetricReporter rep2 = new JMXReporter(\"9040-9055\");\n+\n+        Gauge<Integer> g1 = () -> 1;\n+        Gauge<Integer> g2 = () -> 2;\n+\n+        rep1.notifyOfAddedMetric(g1, \"rep1\", metricGroup);\n+        rep2.notifyOfAddedMetric(g2, \"rep2\", metricGroup);\n \n         ObjectName objectName1 =\n                 new ObjectName(\n                         JMX_DOMAIN_PREFIX + \"taskmanager.rep1\",\n-                        JMXReporter.generateJmxTable(mg.getAllVariables()));\n+                        JMXReporter.generateJmxTable(metricGroup.getAllVariables()));\n         ObjectName objectName2 =\n                 new ObjectName(\n                         JMX_DOMAIN_PREFIX + \"taskmanager.rep2\",\n-                        JMXReporter.generateJmxTable(mg.getAllVariables()));\n+                        JMXReporter.generateJmxTable(metricGroup.getAllVariables()));\n \n         JMXServiceURL url1 =\n                 new JMXServiceURL(\n@@ -259,118 +201,80 @@ public Integer getValue() {\n \n         rep1.close();\n         rep2.close();\n-        mg.close();\n-        reg.shutdown().get();\n     }\n \n     /** Tests that histograms are properly reported via the JMXReporter. */\n     @Test\n     public void testHistogramReporting() throws Exception {\n-        MetricRegistryImpl registry = null;\n         String histogramName = \"histogram\";\n \n-        try {\n-            registry =\n-                    new MetricRegistryImpl(\n-                            MetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n-                            Collections.singletonList(\n-                                    ReporterSetup.forReporter(\"test\", new JMXReporter(null))));\n-\n-            TaskManagerMetricGroup metricGroup =\n-                    new TaskManagerMetricGroup(registry, \"localhost\", \"tmId\");\n-\n-            TestHistogram histogram = new TestHistogram();\n-\n-            metricGroup.histogram(histogramName, histogram);\n-\n-            MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n-\n-            ObjectName objectName =\n-                    new ObjectName(\n-                            JMX_DOMAIN_PREFIX + \"taskmanager.\" + histogramName,\n-                            JMXReporter.generateJmxTable(metricGroup.getAllVariables()));\n-\n-            MBeanInfo info = mBeanServer.getMBeanInfo(objectName);\n-\n-            MBeanAttributeInfo[] attributeInfos = info.getAttributes();\n-\n-            assertEquals(11, attributeInfos.length);\n-\n-            assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, \"Count\"));\n-            HistogramStatistics statistics = histogram.getStatistics();\n-            assertEquals(statistics.getMean(), mBeanServer.getAttribute(objectName, \"Mean\"));\n-            assertEquals(statistics.getStdDev(), mBeanServer.getAttribute(objectName, \"StdDev\"));\n-            assertEquals(statistics.getMax(), mBeanServer.getAttribute(objectName, \"Max\"));\n-            assertEquals(statistics.getMin(), mBeanServer.getAttribute(objectName, \"Min\"));\n-            assertEquals(\n-                    statistics.getQuantile(0.5), mBeanServer.getAttribute(objectName, \"Median\"));\n-            assertEquals(\n-                    statistics.getQuantile(0.75),\n-                    mBeanServer.getAttribute(objectName, \"75thPercentile\"));\n-            assertEquals(\n-                    statistics.getQuantile(0.95),\n-                    mBeanServer.getAttribute(objectName, \"95thPercentile\"));\n-            assertEquals(\n-                    statistics.getQuantile(0.98),\n-                    mBeanServer.getAttribute(objectName, \"98thPercentile\"));\n-            assertEquals(\n-                    statistics.getQuantile(0.99),\n-                    mBeanServer.getAttribute(objectName, \"99thPercentile\"));\n-            assertEquals(\n-                    statistics.getQuantile(0.999),\n-                    mBeanServer.getAttribute(objectName, \"999thPercentile\"));\n-\n-        } finally {\n-            if (registry != null) {\n-                registry.shutdown().get();\n-            }\n-        }\n+        final JMXReporter reporter = new JMXReporter(null);\n+\n+        TestHistogram histogram = new TestHistogram();\n+\n+        reporter.notifyOfAddedMetric(histogram, histogramName, metricGroup);\n+\n+        MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+\n+        ObjectName objectName =\n+                new ObjectName(\n+                        JMX_DOMAIN_PREFIX + \"taskmanager.\" + histogramName,\n+                        JMXReporter.generateJmxTable(metricGroup.getAllVariables()));\n+\n+        MBeanInfo info = mBeanServer.getMBeanInfo(objectName);\n+\n+        MBeanAttributeInfo[] attributeInfos = info.getAttributes();\n+\n+        assertEquals(11, attributeInfos.length);\n+\n+        assertEquals(histogram.getCount(), mBeanServer.getAttribute(objectName, \"Count\"));\n+        HistogramStatistics statistics = histogram.getStatistics();\n+        assertEquals(statistics.getMean(), mBeanServer.getAttribute(objectName, \"Mean\"));\n+        assertEquals(statistics.getStdDev(), mBeanServer.getAttribute(objectName, \"StdDev\"));\n+        assertEquals(statistics.getMax(), mBeanServer.getAttribute(objectName, \"Max\"));\n+        assertEquals(statistics.getMin(), mBeanServer.getAttribute(objectName, \"Min\"));\n+        assertEquals(statistics.getQuantile(0.5), mBeanServer.getAttribute(objectName, \"Median\"));\n+        assertEquals(\n+                statistics.getQuantile(0.75),\n+                mBeanServer.getAttribute(objectName, \"75thPercentile\"));\n+        assertEquals(\n+                statistics.getQuantile(0.95),\n+                mBeanServer.getAttribute(objectName, \"95thPercentile\"));\n+        assertEquals(\n+                statistics.getQuantile(0.98),\n+                mBeanServer.getAttribute(objectName, \"98thPercentile\"));\n+        assertEquals(\n+                statistics.getQuantile(0.99),\n+                mBeanServer.getAttribute(objectName, \"99thPercentile\"));\n+        assertEquals(\n+                statistics.getQuantile(0.999),\n+                mBeanServer.getAttribute(objectName, \"999thPercentile\"));\n     }\n \n     /** Tests that meters are properly reported via the JMXReporter. */\n     @Test\n     public void testMeterReporting() throws Exception {\n-        MetricRegistryImpl registry = null;\n         String meterName = \"meter\";\n \n-        try {\n-            registry =\n-                    new MetricRegistryImpl(\n-                            MetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n-                            Collections.singletonList(\n-                                    ReporterSetup.forReporter(\"test\", new JMXReporter(null))));\n-\n-            TaskManagerMetricGroup metricGroup =\n-                    new TaskManagerMetricGroup(registry, \"localhost\", \"tmId\");\n-\n-            TestMeter meter = new TestMeter();\n+        final JMXReporter reporter = new JMXReporter(null);\n \n-            metricGroup.meter(meterName, meter);\n+        TestMeter meter = new TestMeter();\n+        reporter.notifyOfAddedMetric(meter, meterName, metricGroup);\n \n-            MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n-\n-            ObjectName objectName =\n-                    new ObjectName(\n-                            JMX_DOMAIN_PREFIX + \"taskmanager.\" + meterName,\n-                            JMXReporter.generateJmxTable(metricGroup.getAllVariables()));\n-\n-            MBeanInfo info = mBeanServer.getMBeanInfo(objectName);\n+        MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n \n-            MBeanAttributeInfo[] attributeInfos = info.getAttributes();\n+        ObjectName objectName =\n+                new ObjectName(\n+                        JMX_DOMAIN_PREFIX + \"taskmanager.\" + meterName,\n+                        JMXReporter.generateJmxTable(metricGroup.getAllVariables()));\n \n-            assertEquals(2, attributeInfos.length);\n+        MBeanInfo info = mBeanServer.getMBeanInfo(objectName);\n \n-            assertEquals(meter.getRate(), mBeanServer.getAttribute(objectName, \"Rate\"));\n-            assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, \"Count\"));\n+        MBeanAttributeInfo[] attributeInfos = info.getAttributes();\n \n-        } finally {\n-            if (registry != null) {\n-                registry.shutdown().get();\n-            }\n-        }\n-    }\n+        assertEquals(2, attributeInfos.length);\n \n-    private static ReporterScopedSettings createReporterScopedSettings(int reporterIndex) {\n-        return new ReporterScopedSettings(reporterIndex, ',', Collections.emptySet());\n+        assertEquals(meter.getRate(), mBeanServer.getAttribute(objectName, \"Rate\"));\n+        assertEquals(meter.getCount(), mBeanServer.getAttribute(objectName, \"Count\"));\n     }\n }"
  },
  {
    "sha": "f9c193b8b04b38da2f6371528aee074e270f65b7",
    "filename": "flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/runtime/jobmanager/JMXJobManagerMetricTest.java",
    "status": "removed",
    "additions": 0,
    "deletions": 157,
    "changes": 157,
    "blob_url": "https://github.com/apache/flink/blob/bebf3b5a105dd4bc21882116570c6d71299269a6/flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/runtime/jobmanager/JMXJobManagerMetricTest.java",
    "raw_url": "https://github.com/apache/flink/raw/bebf3b5a105dd4bc21882116570c6d71299269a6/flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/runtime/jobmanager/JMXJobManagerMetricTest.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-jmx/src/test/java/org/apache/flink/runtime/jobmanager/JMXJobManagerMetricTest.java?ref=bebf3b5a105dd4bc21882116570c6d71299269a6",
    "patch": "@@ -1,157 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.jobmanager;\n-\n-import org.apache.flink.api.common.JobStatus;\n-import org.apache.flink.api.common.time.Deadline;\n-import org.apache.flink.api.common.time.Time;\n-import org.apache.flink.client.program.ClusterClient;\n-import org.apache.flink.configuration.ConfigConstants;\n-import org.apache.flink.configuration.Configuration;\n-import org.apache.flink.configuration.MetricOptions;\n-import org.apache.flink.core.testutils.OneShotLatch;\n-import org.apache.flink.metrics.jmx.JMXReporter;\n-import org.apache.flink.runtime.checkpoint.CheckpointRetentionPolicy;\n-import org.apache.flink.runtime.concurrent.FutureUtils;\n-import org.apache.flink.runtime.execution.Environment;\n-import org.apache.flink.runtime.jobgraph.JobGraph;\n-import org.apache.flink.runtime.jobgraph.JobGraphBuilder;\n-import org.apache.flink.runtime.jobgraph.JobVertex;\n-import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n-import org.apache.flink.runtime.jobgraph.tasks.CheckpointCoordinatorConfiguration;\n-import org.apache.flink.runtime.jobgraph.tasks.JobCheckpointingSettings;\n-import org.apache.flink.runtime.testingUtils.TestingUtils;\n-import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;\n-import org.apache.flink.test.util.MiniClusterWithClientResource;\n-import org.apache.flink.util.TestLogger;\n-\n-import org.junit.Assert;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n-\n-import javax.management.MBeanServer;\n-import javax.management.ObjectName;\n-\n-import java.lang.management.ManagementFactory;\n-import java.time.Duration;\n-import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-/** Tests to verify JMX reporter functionality on the JobManager. */\n-public class JMXJobManagerMetricTest extends TestLogger {\n-\n-    @ClassRule\n-    public static final MiniClusterWithClientResource MINI_CLUSTER_RESOURCE =\n-            new MiniClusterWithClientResource(\n-                    new MiniClusterResourceConfiguration.Builder()\n-                            .setConfiguration(getConfiguration())\n-                            .setNumberSlotsPerTaskManager(1)\n-                            .setNumberTaskManagers(1)\n-                            .build());\n-\n-    private static Configuration getConfiguration() {\n-        Configuration flinkConfiguration = new Configuration();\n-\n-        flinkConfiguration.setString(\n-                ConfigConstants.METRICS_REPORTER_PREFIX\n-                        + \"test.\"\n-                        + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX,\n-                JMXReporter.class.getName());\n-        flinkConfiguration.setString(MetricOptions.SCOPE_NAMING_JM_JOB, \"jobmanager.<job_name>\");\n-\n-        return flinkConfiguration;\n-    }\n-\n-    /** Tests that metrics registered on the JobManager are actually accessible via JMX. */\n-    @Test\n-    public void testJobManagerJMXMetricAccess() throws Exception {\n-        Deadline deadline = Deadline.now().plus(Duration.ofMinutes(2));\n-\n-        try {\n-            JobVertex sourceJobVertex = new JobVertex(\"Source\");\n-            sourceJobVertex.setInvokableClass(BlockingInvokable.class);\n-\n-            final JobCheckpointingSettings jobCheckpointingSettings =\n-                    new JobCheckpointingSettings(\n-                            new CheckpointCoordinatorConfiguration(\n-                                    500,\n-                                    500,\n-                                    50,\n-                                    5,\n-                                    CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,\n-                                    true,\n-                                    false,\n-                                    false,\n-                                    0),\n-                            null);\n-\n-            final JobGraph jobGraph =\n-                    JobGraphBuilder.newStreamingJobGraphBuilder()\n-                            .setJobName(\"TestingJob\")\n-                            .addJobVertex(sourceJobVertex)\n-                            .setJobCheckpointingSettings(jobCheckpointingSettings)\n-                            .build();\n-\n-            ClusterClient<?> client = MINI_CLUSTER_RESOURCE.getClusterClient();\n-            client.submitJob(jobGraph).get();\n-\n-            FutureUtils.retrySuccessfulWithDelay(\n-                            () -> client.getJobStatus(jobGraph.getJobID()),\n-                            Time.milliseconds(10),\n-                            deadline,\n-                            status -> status == JobStatus.RUNNING,\n-                            TestingUtils.defaultScheduledExecutor())\n-                    .get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n-\n-            MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n-            Set<ObjectName> nameSet =\n-                    mBeanServer.queryNames(\n-                            new ObjectName(\n-                                    \"org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*\"),\n-                            null);\n-            Assert.assertEquals(1, nameSet.size());\n-            assertEquals(-1L, mBeanServer.getAttribute(nameSet.iterator().next(), \"Value\"));\n-\n-            BlockingInvokable.unblock();\n-        } finally {\n-            BlockingInvokable.unblock();\n-        }\n-    }\n-\n-    /** Utility to block/unblock a task. */\n-    public static class BlockingInvokable extends AbstractInvokable {\n-\n-        private static final OneShotLatch LATCH = new OneShotLatch();\n-\n-        public BlockingInvokable(Environment environment) {\n-            super(environment);\n-        }\n-\n-        @Override\n-        public void invoke() throws Exception {\n-            LATCH.await();\n-        }\n-\n-        public static void unblock() {\n-            LATCH.trigger();\n-        }\n-    }\n-}"
  },
  {
    "sha": "2328b6298b428dba47e0e7933b079a4fef29637b",
    "filename": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/AbstractPrometheusReporter.java",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/AbstractPrometheusReporter.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/AbstractPrometheusReporter.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/AbstractPrometheusReporter.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -25,13 +25,12 @@\n import org.apache.flink.metrics.Gauge;\n import org.apache.flink.metrics.Histogram;\n import org.apache.flink.metrics.HistogramStatistics;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n import org.apache.flink.metrics.Meter;\n import org.apache.flink.metrics.Metric;\n import org.apache.flink.metrics.MetricConfig;\n import org.apache.flink.metrics.MetricGroup;\n import org.apache.flink.metrics.reporter.MetricReporter;\n-import org.apache.flink.runtime.metrics.groups.AbstractMetricGroup;\n-import org.apache.flink.runtime.metrics.groups.FrontMetricGroup;\n \n import io.prometheus.client.Collector;\n import io.prometheus.client.CollectorRegistry;\n@@ -251,8 +250,7 @@ public void notifyOfRemovedMetric(\n \n     @SuppressWarnings(\"unchecked\")\n     private static String getLogicalScope(MetricGroup group) {\n-        return ((FrontMetricGroup<AbstractMetricGroup<?>>) group)\n-                .getLogicalScope(CHARACTER_FILTER, SCOPE_SEPARATOR);\n+        return ((LogicalScopeProvider) group).getLogicalScope(CHARACTER_FILTER, SCOPE_SEPARATOR);\n     }\n \n     @VisibleForTesting"
  },
  {
    "sha": "681049cb9eff4c9d80b6f65e913350765f539504",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -35,6 +35,7 @@\n import org.apache.flink.core.fs.FileSystem;\n import org.apache.flink.core.plugin.PluginManager;\n import org.apache.flink.core.plugin.PluginUtils;\n+import org.apache.flink.management.jmx.JMXService;\n import org.apache.flink.runtime.blob.BlobServer;\n import org.apache.flink.runtime.clusterframework.ApplicationStatus;\n import org.apache.flink.runtime.concurrent.FutureUtils;\n@@ -47,7 +48,6 @@\n import org.apache.flink.runtime.heartbeat.HeartbeatServices;\n import org.apache.flink.runtime.highavailability.HighAvailabilityServices;\n import org.apache.flink.runtime.highavailability.HighAvailabilityServicesUtils;\n-import org.apache.flink.runtime.management.JMXService;\n import org.apache.flink.runtime.metrics.MetricRegistryConfiguration;\n import org.apache.flink.runtime.metrics.MetricRegistryImpl;\n import org.apache.flink.runtime.metrics.ReporterSetup;"
  },
  {
    "sha": "c2621a7f16242353b04dcc520d60d733107a2e9d",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -345,54 +345,29 @@ public final boolean isClosed() {\n     //  Metrics\n     // -----------------------------------------------------------------------------------------------------------------\n \n-    @Override\n-    public Counter counter(int name) {\n-        return counter(String.valueOf(name));\n-    }\n-\n     @Override\n     public Counter counter(String name) {\n         return counter(name, new SimpleCounter());\n     }\n \n-    @Override\n-    public <C extends Counter> C counter(int name, C counter) {\n-        return counter(String.valueOf(name), counter);\n-    }\n-\n     @Override\n     public <C extends Counter> C counter(String name, C counter) {\n         addMetric(name, counter);\n         return counter;\n     }\n \n-    @Override\n-    public <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-        return gauge(String.valueOf(name), gauge);\n-    }\n-\n     @Override\n     public <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n         addMetric(name, gauge);\n         return gauge;\n     }\n \n-    @Override\n-    public <H extends Histogram> H histogram(int name, H histogram) {\n-        return histogram(String.valueOf(name), histogram);\n-    }\n-\n     @Override\n     public <H extends Histogram> H histogram(String name, H histogram) {\n         addMetric(name, histogram);\n         return histogram;\n     }\n \n-    @Override\n-    public <M extends Meter> M meter(int name, M meter) {\n-        return meter(String.valueOf(name), meter);\n-    }\n-\n     @Override\n     public <M extends Meter> M meter(String name, M meter) {\n         addMetric(name, meter);\n@@ -458,11 +433,6 @@ protected void addMetric(String name, Metric metric) {\n     //  Groups\n     // ------------------------------------------------------------------------\n \n-    @Override\n-    public MetricGroup addGroup(int name) {\n-        return addGroup(String.valueOf(name), ChildType.GENERIC);\n-    }\n-\n     @Override\n     public MetricGroup addGroup(String name) {\n         return addGroup(name, ChildType.GENERIC);"
  },
  {
    "sha": "6776c6c3e9760fab7473bfbd55f3637bb5b8663a",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/FrontMetricGroup.java",
    "status": "modified",
    "additions": 5,
    "deletions": 1,
    "changes": 6,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/FrontMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/FrontMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/FrontMetricGroup.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.metrics.CharacterFilter;\n+import org.apache.flink.metrics.LogicalScopeProvider;\n \n import java.util.Map;\n \n@@ -32,7 +33,8 @@\n  *\n  * @param <P> parentMetricGroup to {@link AbstractMetricGroup AbstractMetricGroup}\n  */\n-public class FrontMetricGroup<P extends AbstractMetricGroup<?>> extends ProxyMetricGroup<P> {\n+public class FrontMetricGroup<P extends AbstractMetricGroup<?>> extends ProxyMetricGroup<P>\n+        implements LogicalScopeProvider {\n \n     @VisibleForTesting static final char DEFAULT_REPLACEMENT = '_';\n     @VisibleForTesting static final char DEFAULT_REPLACEMENT_ALTERNATIVE = '-';\n@@ -68,11 +70,13 @@ public String getMetricIdentifier(String metricName, CharacterFilter filter) {\n                 this.settings.getReporterIndex(), this.settings.getExcludedVariables());\n     }\n \n+    @Override\n     public String getLogicalScope(CharacterFilter filter) {\n         return parentMetricGroup.getLogicalScope(\n                 getDelimiterFilter(this.settings, filter), this.settings.getDelimiter());\n     }\n \n+    @Override\n     public String getLogicalScope(CharacterFilter filter, char delimiter) {\n         return parentMetricGroup.getLogicalScope(\n                 getDelimiterFilter(this.settings, filter),"
  },
  {
    "sha": "0ca34cf756f6fff9ea0b545e767848d20fbc4b55",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java",
    "status": "modified",
    "additions": 0,
    "deletions": 30,
    "changes": 30,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/ProxyMetricGroup.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -42,31 +42,16 @@ public ProxyMetricGroup(P parentMetricGroup) {\n         this.parentMetricGroup = checkNotNull(parentMetricGroup);\n     }\n \n-    @Override\n-    public final Counter counter(int name) {\n-        return parentMetricGroup.counter(name);\n-    }\n-\n     @Override\n     public final Counter counter(String name) {\n         return parentMetricGroup.counter(name);\n     }\n \n-    @Override\n-    public final <C extends Counter> C counter(int name, C counter) {\n-        return parentMetricGroup.counter(name, counter);\n-    }\n-\n     @Override\n     public final <C extends Counter> C counter(String name, C counter) {\n         return parentMetricGroup.counter(name, counter);\n     }\n \n-    @Override\n-    public final <T, G extends Gauge<T>> G gauge(int name, G gauge) {\n-        return parentMetricGroup.gauge(name, gauge);\n-    }\n-\n     @Override\n     public final <T, G extends Gauge<T>> G gauge(String name, G gauge) {\n         return parentMetricGroup.gauge(name, gauge);\n@@ -77,26 +62,11 @@ public final Counter counter(String name) {\n         return parentMetricGroup.histogram(name, histogram);\n     }\n \n-    @Override\n-    public final <H extends Histogram> H histogram(int name, H histogram) {\n-        return parentMetricGroup.histogram(name, histogram);\n-    }\n-\n     @Override\n     public <M extends Meter> M meter(String name, M meter) {\n         return parentMetricGroup.meter(name, meter);\n     }\n \n-    @Override\n-    public <M extends Meter> M meter(int name, M meter) {\n-        return parentMetricGroup.meter(name, meter);\n-    }\n-\n-    @Override\n-    public final MetricGroup addGroup(int name) {\n-        return parentMetricGroup.addGroup(name);\n-    }\n-\n     @Override\n     public final MetricGroup addGroup(String name) {\n         return parentMetricGroup.addGroup(name);"
  },
  {
    "sha": "65710197e88506f1c87813df75ff5cad1af37f9d",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskExecutor.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskExecutor.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskExecutor.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskExecutor.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -21,6 +21,7 @@\n import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.api.common.JobID;\n import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.management.jmx.JMXService;\n import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n import org.apache.flink.runtime.blob.BlobCacheService;\n import org.apache.flink.runtime.blob.PermanentBlobCache;\n@@ -72,7 +73,6 @@\n import org.apache.flink.runtime.jobmaster.ResourceManagerAddress;\n import org.apache.flink.runtime.leaderretrieval.LeaderRetrievalListener;\n import org.apache.flink.runtime.leaderretrieval.LeaderRetrievalService;\n-import org.apache.flink.runtime.management.JMXService;\n import org.apache.flink.runtime.memory.MemoryManager;\n import org.apache.flink.runtime.messages.Acknowledge;\n import org.apache.flink.runtime.metrics.MetricNames;"
  },
  {
    "sha": "123d6844d4980393ea1e052a2ebed5e62b57974c",
    "filename": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/flink/blob/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java",
    "raw_url": "https://github.com/apache/flink/raw/6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java",
    "contents_url": "https://api.github.com/repos/apache/flink/contents/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java?ref=6e7942b9c3bb252df92eda86ec0bbef38dc2a3d2",
    "patch": "@@ -28,6 +28,7 @@\n import org.apache.flink.core.fs.FileSystem;\n import org.apache.flink.core.plugin.PluginManager;\n import org.apache.flink.core.plugin.PluginUtils;\n+import org.apache.flink.management.jmx.JMXService;\n import org.apache.flink.metrics.MetricGroup;\n import org.apache.flink.runtime.akka.AkkaUtils;\n import org.apache.flink.runtime.blob.BlobCacheService;\n@@ -41,7 +42,6 @@\n import org.apache.flink.runtime.highavailability.HighAvailabilityServicesUtils;\n import org.apache.flink.runtime.io.network.partition.TaskExecutorPartitionTrackerImpl;\n import org.apache.flink.runtime.leaderretrieval.LeaderRetrievalException;\n-import org.apache.flink.runtime.management.JMXService;\n import org.apache.flink.runtime.metrics.MetricRegistry;\n import org.apache.flink.runtime.metrics.MetricRegistryConfiguration;\n import org.apache.flink.runtime.metrics.MetricRegistryImpl;"
  }
]
