[
  {
    "sha": "51c5b5f7c671ec1ced5a93da8e75ebf6bea6e5f1",
    "filename": "server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java",
    "status": "modified",
    "additions": 32,
    "deletions": 41,
    "changes": 73,
    "blob_url": "https://github.com/apache/calcite/blob/d0f34286a4ced5ef397dc90f73e14d2606207705/server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java",
    "raw_url": "https://github.com/apache/calcite/raw/d0f34286a4ced5ef397dc90f73e14d2606207705/server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java?ref=d0f34286a4ced5ef397dc90f73e14d2606207705",
    "patch": "@@ -47,6 +47,7 @@\n import org.apache.calcite.sql.SqlCall;\n import org.apache.calcite.sql.SqlDataTypeSpec;\n import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlKind;\n import org.apache.calcite.sql.SqlLiteral;\n import org.apache.calcite.sql.SqlNode;\n import org.apache.calcite.sql.SqlNodeList;\n@@ -62,7 +63,6 @@\n import org.apache.calcite.sql.ddl.SqlCreateTable;\n import org.apache.calcite.sql.ddl.SqlCreateType;\n import org.apache.calcite.sql.ddl.SqlCreateView;\n-import org.apache.calcite.sql.ddl.SqlDropMaterializedView;\n import org.apache.calcite.sql.ddl.SqlDropObject;\n import org.apache.calcite.sql.ddl.SqlDropSchema;\n import org.apache.calcite.sql.dialect.CalciteSqlDialect;\n@@ -281,41 +281,54 @@ public void execute(SqlCreateFunction create,\n    * {@code DROP VIEW} commands. */\n   public void execute(SqlDropObject drop,\n       CalcitePrepare.Context context) {\n-    final List<String> path = context.getDefaultSchemaPath();\n-    CalciteSchema schema = context.getRootSchema();\n-    for (String p : path) {\n-      schema = schema.getSubSchema(p, true);\n-    }\n-    final boolean existed;\n+    final Pair<CalciteSchema, String> pair = schema(context, false, drop.name);\n+    CalciteSchema schema = pair.left;\n+    String objectName = pair.right;\n+    assert objectName != null;\n+\n+    boolean schemaExists = schema != null;\n+\n+    boolean existed;\n     switch (drop.getKind()) {\n     case DROP_TABLE:\n     case DROP_MATERIALIZED_VIEW:\n-      existed = schema.removeTable(drop.name.getSimple());\n-      if (!existed && !drop.ifExists) {\n+      Table materializedView = schemaExists && drop.getKind() == SqlKind.DROP_MATERIALIZED_VIEW\n+          ? schema.plus().getTable(objectName) : null;\n+\n+      existed = schemaExists && schema.removeTable(objectName);\n+      if (existed) {\n+        if (materializedView instanceof Wrapper) {\n+          ((Wrapper) materializedView).maybeUnwrap(MaterializationKey.class)\n+              .ifPresent(materializationKey -> {\n+                MaterializationService.instance()\n+                    .removeMaterialization(materializationKey);\n+              });\n+        }\n+      } else if (!drop.ifExists) {\n         throw SqlUtil.newContextException(drop.name.getParserPosition(),\n-            RESOURCE.tableNotFound(drop.name.getSimple()));\n+            RESOURCE.tableNotFound(objectName));\n       }\n       break;\n     case DROP_VIEW:\n       // Not quite right: removes any other functions with the same name\n-      existed = schema.removeFunction(drop.name.getSimple());\n+      existed = schemaExists && schema.removeFunction(objectName);\n       if (!existed && !drop.ifExists) {\n         throw SqlUtil.newContextException(drop.name.getParserPosition(),\n-            RESOURCE.viewNotFound(drop.name.getSimple()));\n+            RESOURCE.viewNotFound(objectName));\n       }\n       break;\n     case DROP_TYPE:\n-      existed = schema.removeType(drop.name.getSimple());\n+      existed = schemaExists && schema.removeType(objectName);\n       if (!existed && !drop.ifExists) {\n         throw SqlUtil.newContextException(drop.name.getParserPosition(),\n-            RESOURCE.typeNotFound(drop.name.getSimple()));\n+            RESOURCE.typeNotFound(objectName));\n       }\n       break;\n     case DROP_FUNCTION:\n-      existed = schema.removeFunction(drop.name.getSimple());\n+      existed = schemaExists && schema.removeFunction(objectName);\n       if (!existed && !drop.ifExists) {\n         throw SqlUtil.newContextException(drop.name.getParserPosition(),\n-            RESOURCE.functionNotFound(drop.name.getSimple()));\n+            RESOURCE.functionNotFound(objectName));\n       }\n       break;\n     case OTHER_DDL:\n@@ -356,24 +369,6 @@ public void execute(SqlCreateMaterializedView create,\n             sql, schemaPath, pair.right, true, true);\n   }\n \n-  /** Executes a {@code DROP MATERIALIZED VIEW} command. */\n-  public void execute(SqlDropMaterializedView drop,\n-      CalcitePrepare.Context context) {\n-    final Pair<CalciteSchema, String> pair = schema(context, true, drop.name);\n-    final Table table = pair.left.plus().getTable(pair.right);\n-    if (table != null) {\n-      // Materialized view exists.\n-      execute((SqlDropObject) drop, context);\n-      if (table instanceof Wrapper) {\n-        ((Wrapper) table).maybeUnwrap(MaterializationKey.class)\n-            .ifPresent(materializationKey -> {\n-              MaterializationService.instance()\n-                  .removeMaterialization(materializationKey);\n-            });\n-      }\n-    }\n-  }\n-\n   /** Executes a {@code CREATE SCHEMA} command. */\n   public void execute(SqlCreateSchema create,\n       CalcitePrepare.Context context) {\n@@ -395,15 +390,11 @@ public void execute(SqlCreateSchema create,\n   /** Executes a {@code DROP SCHEMA} command. */\n   public void execute(SqlDropSchema drop,\n       CalcitePrepare.Context context) {\n-    final List<String> path = context.getDefaultSchemaPath();\n-    CalciteSchema schema = context.getRootSchema();\n-    for (String p : path) {\n-      schema = schema.getSubSchema(p, true);\n-    }\n-    final boolean existed = schema.removeSubSchema(drop.name.getSimple());\n+    final Pair<CalciteSchema, String> pair = schema(context, false, drop.name);\n+    final boolean existed = pair.left != null && pair.left.removeSubSchema(pair.right);\n     if (!existed && !drop.ifExists) {\n       throw SqlUtil.newContextException(drop.name.getParserPosition(),\n-          RESOURCE.schemaNotFound(drop.name.getSimple()));\n+          RESOURCE.schemaNotFound(pair.right));\n     }\n   }\n "
  },
  {
    "sha": "43fa8c9e82ae45e8515f4e6994d74a34e446e24d",
    "filename": "server/src/test/java/org/apache/calcite/test/ServerTest.java",
    "status": "modified",
    "additions": 23,
    "deletions": 0,
    "changes": 23,
    "blob_url": "https://github.com/apache/calcite/blob/d0f34286a4ced5ef397dc90f73e14d2606207705/server/src/test/java/org/apache/calcite/test/ServerTest.java",
    "raw_url": "https://github.com/apache/calcite/raw/d0f34286a4ced5ef397dc90f73e14d2606207705/server/src/test/java/org/apache/calcite/test/ServerTest.java",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/server/src/test/java/org/apache/calcite/test/ServerTest.java?ref=d0f34286a4ced5ef397dc90f73e14d2606207705",
    "patch": "@@ -57,6 +57,7 @@\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n@@ -532,4 +533,26 @@ static Connection connect() throws SQLException {\n       }\n     }\n   }\n+\n+  @Test public void testDropWithFullyQualifiedNameWhenSchemaDoesntExist() throws Exception {\n+    try (Connection c = connect();\n+         Statement s = c.createStatement()) {\n+      checkDropWithFullyQualifiedNameWhenSchemaDoesntExist(s, \"schema\", \"Schema\");\n+      checkDropWithFullyQualifiedNameWhenSchemaDoesntExist(s, \"table\", \"Table\");\n+      checkDropWithFullyQualifiedNameWhenSchemaDoesntExist(s, \"materialized view\", \"Table\");\n+      checkDropWithFullyQualifiedNameWhenSchemaDoesntExist(s, \"view\", \"View\");\n+      checkDropWithFullyQualifiedNameWhenSchemaDoesntExist(s, \"type\", \"Type\");\n+      checkDropWithFullyQualifiedNameWhenSchemaDoesntExist(s, \"function\", \"Function\");\n+    }\n+  }\n+\n+  private void checkDropWithFullyQualifiedNameWhenSchemaDoesntExist(\n+      Statement statement, String objectType, String objectTypeInErrorMessage) throws Exception {\n+    SQLException e = assertThrows(SQLException.class, () ->\n+        statement.execute(\"drop \" + objectType + \" s.o\"),\n+        \"expected error because the object doesn't exist\");\n+    assertThat(e.getMessage(), containsString(objectTypeInErrorMessage + \" 'O' not found\"));\n+\n+    statement.execute(\"drop \" + objectType + \" if exists s.o\");\n+  }\n }"
  }
]
