[
  {
    "sha": "7fdddc1bff95c1fe7149321a2893b65fd30f3373",
    "filename": "core/src/main/java/org/apache/calcite/runtime/CalciteResource.java",
    "status": "modified",
    "additions": 3,
    "deletions": 0,
    "changes": 3,
    "blob_url": "https://github.com/apache/calcite/blob/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java",
    "raw_url": "https://github.com/apache/calcite/raw/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java?ref=dc0fe002974fa0fece984f82de8ccdfc58c4c6d4",
    "patch": "@@ -958,4 +958,7 @@\n \n   @BaseMessage(\"Different length for bitwise operands: the first: {0,number,#}, the second: {1,number,#}\")\n   ExInst<CalciteException> differentLengthForBitwiseOperands(int l0, int l1);\n+\n+  @BaseMessage(\"Correlated subqueries in on clauses are not supported.\")\n+  ExInst<CalciteException> subqueryInOnClauses();\n }"
  },
  {
    "sha": "df1d5a79d4d0d635cd86717b8587d99bc9ce97b3",
    "filename": "core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java",
    "status": "modified",
    "additions": 56,
    "deletions": 8,
    "changes": 64,
    "blob_url": "https://github.com/apache/calcite/blob/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java",
    "raw_url": "https://github.com/apache/calcite/raw/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java?ref=dc0fe002974fa0fece984f82de8ccdfc58c4c6d4",
    "patch": "@@ -38,6 +38,7 @@\n import org.apache.calcite.rel.SingleRel;\n import org.apache.calcite.rel.core.AggregateCall;\n import org.apache.calcite.rel.core.Collect;\n+import org.apache.calcite.rel.core.Correlate;\n import org.apache.calcite.rel.core.CorrelationId;\n import org.apache.calcite.rel.core.Filter;\n import org.apache.calcite.rel.core.Join;\n@@ -208,7 +209,9 @@\n import java.util.stream.Collectors;\n \n import static org.apache.calcite.linq4j.Nullness.castNonNull;\n+import static org.apache.calcite.sql.SqlUtil.newContextException;\n import static org.apache.calcite.sql.SqlUtil.stripAs;\n+import static org.apache.calcite.util.Static.RESOURCE;\n \n import static java.util.Objects.requireNonNull;\n \n@@ -2841,8 +2844,9 @@ protected RelNode createJoin(\n           .get(topLevelFieldAccess.getField().getIndex() - namespaceOffset);\n       int pos = namespaceOffset + field.getIndex();\n \n-      assert field.getType()\n-          == topLevelFieldAccess.getField().getType();\n+      assert  field.getType()\n+          == topLevelFieldAccess.getField().getType()\n+          : \"field.type is the same as top level access type\";\n \n       assert pos != -1;\n \n@@ -3057,12 +3061,44 @@ private RexNode convertUsingCondition(\n     replaceSubQueries(bb, condition, RelOptUtil.Logic.UNKNOWN_AS_FALSE);\n     final RelNode newRightRel = bb.root == null || bb.registered.size() == 0\n         ? rightRel\n-        : bb.reRegister(rightRel);\n+        : reRegisterEnsuringNoCorrelatedNodes(bb, condition, rightRel);\n     bb.setRoot(ImmutableList.of(leftRel, newRightRel));\n     RexNode conditionExp =  bb.convertExpression(condition);\n     return Pair.of(conditionExp, newRightRel);\n   }\n \n+  private RelNode reRegisterEnsuringNoCorrelatedNodes(\n+      Blackboard bb,\n+      SqlNode sqlCondition,\n+      RelNode base) {\n+    try {\n+      final RelNode top = bb.reRegister(base);\n+      RelNode mTop = top;\n+      while (mTop != base) {\n+        if (mTop instanceof Correlate) {\n+          throw newContextException(\n+              sqlCondition.getParserPosition(),\n+              RESOURCE.subqueryInOnClauses());\n+        }\n+        mTop = mTop.getInput(0);\n+      }\n+      return top;\n+    } catch (AssertionError assertionError) {\n+      String message = assertionError.getMessage();\n+      if (null == message) {\n+        throw assertionError;\n+      } else if (\n+          message.contains(\"All correlation variables should resolve to the same namespace\")\n+          || message.contains(\"field.type is the same as top level access type\")\n+      ) {\n+        throw newContextException(\n+            sqlCondition.getParserPosition(),\n+            RESOURCE.subqueryInOnClauses());\n+      }\n+      throw assertionError;\n+    }\n+  }\n+\n   /**\n    * Returns an expression for matching columns of a USING clause or inferred\n    * from NATURAL JOIN. \"a JOIN b USING (x, y)\" becomes \"a.x = b.x AND a.y =\n@@ -4500,6 +4536,7 @@ private void convertValuesImpl(\n     private List<RegisterArgs> registered = new ArrayList<>();\n \n     private boolean isPatternVarRef = false;\n+    private int scopeOffset = 0;\n \n     final List<RelNode> cursors = new ArrayList<>();\n \n@@ -4589,12 +4626,14 @@ public RexNode register(\n         @Nullable List<RexNode> leftKeys) {\n       requireNonNull(joinType, \"joinType\");\n       registered.add(new RegisterArgs(rel, joinType, leftKeys));\n+      int localScopeOffset = scopeOffset;\n       if (root == null) {\n         assert leftKeys == null : \"leftKeys must be null\";\n         setRoot(rel, false);\n+        this.scopeOffset = localScopeOffset;\n         return rexBuilder.makeRangeReference(\n             root().getRowType(),\n-            0,\n+            localScopeOffset,\n             false);\n       }\n \n@@ -4630,6 +4669,7 @@ public RexNode register(\n         }\n \n         setRoot(newLeftInput, false);\n+        this.scopeOffset = localScopeOffset;\n \n         // right fields appear after the LHS fields.\n         final int rightOffset = root().getRowType().getFieldCount()\n@@ -4644,7 +4684,7 @@ public RexNode register(\n         joinCond = rexBuilder.makeLiteral(true);\n       }\n \n-      int leftFieldCount = root().getRowType().getFieldCount();\n+      final int leftFieldCount = root().getRowType().getFieldCount();\n       final RelNode join =\n           createJoin(\n               this,\n@@ -4654,6 +4694,7 @@ public RexNode register(\n               joinType);\n \n       setRoot(join, false);\n+      this.scopeOffset = localScopeOffset;\n \n       if (leftKeys != null\n           && joinType == JoinRelType.LEFT) {\n@@ -4675,15 +4716,14 @@ public RexNode register(\n                     return rexRangeRefLength;\n                   }\n                 });\n-\n         return rexBuilder.makeRangeReference(\n             returnType,\n-            origLeftInputCount,\n+            origLeftInputCount + localScopeOffset,\n             false);\n       } else {\n         return rexBuilder.makeRangeReference(\n             rel.getRowType(),\n-            leftFieldCount,\n+            leftFieldCount + localScopeOffset,\n             joinType.generatesNullsOnRight());\n       }\n     }\n@@ -4737,6 +4777,14 @@ private void setRoot(\n       if (hasSystemFields) {\n         this.systemFieldList.addAll(getSystemFields());\n       }\n+\n+      if (root == null) {\n+        scopeOffset = inputs.stream()\n+            .mapToInt(rn -> rn.getRowType().getFieldCount())\n+            .sum();\n+      } else {\n+        scopeOffset = 0;\n+      }\n     }\n \n     /**"
  },
  {
    "sha": "42ec4a989a80c4355aeee57fddeb5a339039c7d9",
    "filename": "core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/apache/calcite/blob/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties",
    "raw_url": "https://github.com/apache/calcite/raw/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties?ref=dc0fe002974fa0fece984f82de8ccdfc58c4c6d4",
    "patch": "@@ -313,4 +313,5 @@ InvalidInputForExtractValue=Invalid input for EXTRACTVALUE: xml: ''{0}'', xpath\n InvalidInputForExtractXml=Invalid input for EXTRACT xpath: ''{0}'', namespace: ''{1}''\n InvalidInputForExistsNode=Invalid input for EXISTSNODE xpath: ''{0}'', namespace: ''{1}''\n DifferentLengthForBitwiseOperands=Different length for bitwise operands: the first: {0,number,#}, the second: {1,number,#}\n+SubqueryInOnClauses=Correlated subqueries in on clauses are not supported.\n # End CalciteResource.properties"
  },
  {
    "sha": "76777ec0f106398264dc4840c657b7876c4ebef4",
    "filename": "core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java",
    "status": "modified",
    "additions": 89,
    "deletions": 27,
    "changes": 116,
    "blob_url": "https://github.com/apache/calcite/blob/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java",
    "raw_url": "https://github.com/apache/calcite/raw/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/SqlToRelConverterTest.java?ref=dc0fe002974fa0fece984f82de8ccdfc58c4c6d4",
    "patch": "@@ -41,6 +41,7 @@\n import org.apache.calcite.rel.logical.LogicalTableModify;\n import org.apache.calcite.rel.rules.CoreRules;\n import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.runtime.CalciteContextException;\n import org.apache.calcite.sql.SqlExplainLevel;\n import org.apache.calcite.sql.type.SqlTypeName;\n import org.apache.calcite.sql.validate.SqlConformance;\n@@ -57,6 +58,7 @@\n import com.google.common.collect.ImmutableSet;\n \n import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.hamcrest.CoreMatchers;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n \n@@ -71,6 +73,8 @@\n import java.util.Set;\n import java.util.function.UnaryOperator;\n \n+import static org.apache.calcite.util.Static.RESOURCE;\n+\n import static org.hamcrest.CoreMatchers.notNullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.core.Is.is;\n@@ -4129,25 +4133,92 @@ private Tester getExtendedTester() {\n     sql(sql).trim(true).ok();\n   }\n \n-  @Test void testJoinExpandAndDecorrelation() {\n-    String sql = \"\"\n+  @Test void testJoinDecorrelationWithCorrelatedVariablesFromBothSideOfTheJoin() {\n+    try {\n+      String sql = \"\\n\"\n+          + \"SELECT outerEmp.deptno, outerEmp.sal\\n\"\n+          + \"FROM dept\\n\"\n+          + \"LEFT JOIN emp outerEmp ON outerEmp.sal < (\\n\"\n+          + \"  SELECT AVG(avg_emp.sal)\\n\"\n+          + \"  FROM emp avg_emp\\n\"\n+          + \"  WHERE avg_emp.deptno = dept.deptno\\n\"\n+          + \"    AND avg_emp.deptno = outerEmp.deptno\\n\"\n+          + \")\\n\";\n+      sql(sql)\n+          .withConfig(configBuilder -> configBuilder\n+              .withExpand(true)\n+              .withDecorrelationEnabled(true))\n+          .convertsTo(\"${plan}\");\n+    } catch (CalciteContextException exception) {\n+      String expectedErrorMessage =\n+          RESOURCE.subqueryInOnClauses().str();\n+      assertThat(\n+          exception.getMessage(),\n+          CoreMatchers.containsString(expectedErrorMessage));\n+    }\n+  }\n+\n+  @Test void testJoinDecorrelationWithCorrelatedVariablesFromTheRight() {\n+    try {\n+      String sql = \"\\n\"\n+          + \"SELECT outerEmp.deptno, outerEmp.sal\\n\"\n+          + \"FROM dept\\n\"\n+          + \"LEFT JOIN emp outerEmp ON outerEmp.deptno = dept.deptno AND outerEmp.sal < (\\n\"\n+          + \"  SELECT AVG(avg_emp.sal)\\n\"\n+          + \"  FROM emp avg_emp\\n\"\n+          + \"  WHERE avg_emp.deptno = outerEmp.deptno\\n\"\n+          + \")\\n\";\n+      sql(sql)\n+          .withConfig(configBuilder -> configBuilder\n+              .withExpand(true)\n+              .withDecorrelationEnabled(true))\n+          .convertsTo(\"${plan}\");\n+    } catch (CalciteContextException exception) {\n+      String expectedErrorMessage =\n+          RESOURCE.subqueryInOnClauses().str();\n+      assertThat(\n+          exception.getMessage(),\n+          CoreMatchers.containsString(expectedErrorMessage));\n+    }\n+  }\n+\n+  @Test void testJoinDecorrelationWithCorrelatedVariablesFromTheLeft() {\n+    try {\n+      String sql = \"\\n\"\n+          + \"SELECT outerEmp.deptno, outerEmp.sal\\n\"\n+          + \"FROM dept\\n\"\n+          + \"LEFT JOIN emp outerEmp ON outerEmp.deptno = dept.deptno AND outerEmp.sal < (\\n\"\n+          + \"  SELECT AVG(avg_emp.sal)\\n\"\n+          + \"  FROM emp avg_emp\\n\"\n+          + \"  WHERE avg_emp.deptno = dept.deptno\\n\"\n+          + \")\\n\";\n+      sql(sql).convertsTo(\"${plan}\");\n+    } catch (CalciteContextException exception) {\n+      String expectedErrorMessage =\n+          RESOURCE.subqueryInOnClauses().str();\n+      assertThat(\n+          exception.getMessage(),\n+          CoreMatchers.containsString(expectedErrorMessage));\n+    }\n+  }\n+\n+  @Test void testJoinExpandNestedQuery() {\n+     // Three sub queries are used to ensure the internal state is maintained since the first\n+     // 2 calls are special cases in code.\n+    String sql = \"\\n\"\n         + \"SELECT emp.deptno, emp.sal\\n\"\n         + \"FROM dept\\n\"\n-        + \"JOIN emp ON emp.deptno = dept.deptno AND emp.sal < (\\n\"\n-        + \"  SELECT AVG(emp.sal)\\n\"\n-        + \"  FROM emp\\n\"\n-        + \"  WHERE  emp.deptno = dept.deptno\\n\"\n-        + \")\";\n-    sql(sql)\n-        .withConfig(configBuilder -> configBuilder\n-            .withExpand(true)\n-            .withDecorrelationEnabled(true))\n-        .convertsTo(\"${plan_extended}\");\n-    sql(sql)\n-        .withConfig(configBuilder -> configBuilder\n-            .withExpand(false)\n-            .withDecorrelationEnabled(false))\n-        .convertsTo(\"${plan_not_extended}\");\n+        + \"INNER JOIN emp ON emp.deptno = dept.deptno\\n\"\n+        + \"  AND emp.sal < (\\n\"\n+        + \"    SELECT AVG(avg_emp_sal.sal)\\n\"\n+        + \"    FROM emp avg_emp_sal)\\n\"\n+        + \"  AND emp.sal >= (\\n\"\n+        + \"    SELECT MIN(sal) * 2\\n\"\n+        + \"    FROM emp)\\n\"\n+        + \"  AND emp.sal > (\\n\"\n+        + \"    SELECT AVG(avg_emp_sal.sal) / 2\\n\"\n+        + \"    FROM emp avg_emp_sal)\\n\";\n+    sql(sql).convertsTo(\"${plan}\");\n   }\n \n   @Test void testImplicitJoinExpandAndDecorrelation() {\n@@ -4159,16 +4230,7 @@ private Tester getExtendedTester() {\n         + \"  FROM emp\\n\"\n         + \"  WHERE  emp.deptno = dept.deptno\\n\"\n         + \")\";\n-    sql(sql)\n-        .withConfig(configBuilder -> configBuilder\n-            .withDecorrelationEnabled(true)\n-            .withExpand(true))\n-        .convertsTo(\"${plan_extended}\");\n-    sql(sql)\n-        .withConfig(configBuilder -> configBuilder\n-            .withDecorrelationEnabled(false)\n-            .withExpand(false))\n-        .convertsTo(\"${plan_not_extended}\");\n+    sql(sql).convertsTo(\"${plan}\");\n   }\n \n   /**"
  },
  {
    "sha": "1ccbb0f2425cad3132c4cebab3c3ebf127931230",
    "filename": "core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml",
    "status": "modified",
    "additions": 41,
    "deletions": 52,
    "changes": 93,
    "blob_url": "https://github.com/apache/calcite/blob/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml",
    "raw_url": "https://github.com/apache/calcite/raw/dc0fe002974fa0fece984f82de8ccdfc58c4c6d4/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/resources/org/apache/calcite/test/SqlToRelConverterTest.xml?ref=dc0fe002974fa0fece984f82de8ccdfc58c4c6d4",
    "patch": "@@ -7336,45 +7336,8 @@ LogicalProject(EMPNO=[$0])\n ]]>\n         </Resource>\n     </TestCase>\n-    <TestCase name=\"testJoinExpandAndDecorrelation\">\n-        <Resource name=\"plan_extended\">\n-            <![CDATA[\n-LogicalProject(DEPTNO=[$9], SAL=[$7])\n-  LogicalJoin(condition=[AND(=($9, $0), <($7, $0))], joinType=[inner])\n-    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n-    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], EXPR$0=[$10])\n-      LogicalJoin(condition=[=($0, $9)], joinType=[left])\n-        LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-        LogicalAggregate(group=[{0}], EXPR$0=[AVG($1)])\n-          LogicalProject(DEPTNO=[$7], SAL=[$5])\n-            LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-]]>\n-        </Resource>\n-        <Resource name=\"plan_not_extended\">\n-            <![CDATA[\n-LogicalProject(DEPTNO=[$9], SAL=[$7])\n-  LogicalJoin(condition=[AND(=($9, $0), <($7, $SCALAR_QUERY({\n-LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])\n-  LogicalProject(SAL=[$5])\n-    LogicalFilter(condition=[=($7, $cor0.DEPTNO)])\n-      LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-})))], joinType=[inner])\n-    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n-    LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-]]>\n-        </Resource>\n-        <Resource name=\"sql\">\n-            <![CDATA[SELECT emp.deptno, emp.sal\n-FROM dept\n-JOIN emp ON emp.deptno = dept.deptno AND emp.sal < (\n-  SELECT AVG(emp.sal)\n-  FROM emp\n-  WHERE  emp.deptno = dept.deptno\n-)]]>\n-        </Resource>\n-    </TestCase>\n     <TestCase name=\"testImplicitJoinExpandAndDecorrelation\">\n-        <Resource name=\"plan_extended\">\n+        <Resource name=\"plan\">\n             <![CDATA[\n LogicalProject(DEPTNO=[$9], SAL=[$7])\n   LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[$2], ENAME=[$3], JOB=[$4], MGR=[$5], HIREDATE=[$6], SAL=[$7], COMM=[$8], DEPTNO0=[$9], SLACKER=[$10], DEPTNO1=[CAST($11):INTEGER], EXPR$0=[CAST($12):INTEGER])\n@@ -7385,20 +7348,6 @@ LogicalProject(DEPTNO=[$9], SAL=[$7])\n       LogicalAggregate(group=[{0}], EXPR$0=[AVG($1)])\n         LogicalProject(DEPTNO=[$7], SAL=[$5])\n           LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-]]>\n-        </Resource>\n-        <Resource name=\"plan_not_extended\">\n-            <![CDATA[\n-LogicalProject(DEPTNO=[$9], SAL=[$7])\n-  LogicalFilter(condition=[AND(=($9, $0), <($7, $SCALAR_QUERY({\n-LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])\n-  LogicalProject(SAL=[$5])\n-    LogicalFilter(condition=[=($7, $cor0.DEPTNO)])\n-      LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n-})))], variablesSet=[[$cor0]])\n-    LogicalJoin(condition=[true], joinType=[inner])\n-      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n-      LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n ]]>\n         </Resource>\n         <Resource name=\"sql\">\n@@ -7410,6 +7359,46 @@ FROM dept, emp WHERE emp.deptno = dept.deptno AND emp.sal < (\n )]]>\n         </Resource>\n     </TestCase>\n+    <TestCase name=\"testJoinExpandNestedQuery\">\n+        <Resource name=\"sql\">\n+            <![CDATA[\n+SELECT emp.deptno, emp.sal\n+FROM dept\n+INNER JOIN emp ON emp.deptno = dept.deptno\n+  AND emp.sal < (\n+    SELECT AVG(avg_emp_sal.sal)\n+    FROM emp avg_emp_sal)\n+  AND emp.sal >= (\n+    SELECT MIN(sal) * 2\n+    FROM emp)\n+  AND emp.sal > (\n+    SELECT AVG(avg_emp_sal.sal) / 2\n+    FROM emp avg_emp_sal)\n+]]>\n+        </Resource>\n+        <Resource name=\"plan\">\n+            <![CDATA[\n+LogicalProject(DEPTNO=[$9], SAL=[$7])\n+  LogicalJoin(condition=[AND(=($9, $0), <($7, $11), >=($7, $12), >($7, $13))], joinType=[inner])\n+    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+    LogicalJoin(condition=[true], joinType=[left])\n+      LogicalJoin(condition=[true], joinType=[left])\n+        LogicalJoin(condition=[true], joinType=[left])\n+          LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+          LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])\n+            LogicalProject(SAL=[$5])\n+              LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+        LogicalProject(EXPR$0=[*($0, 2)])\n+          LogicalAggregate(group=[{}], agg#0=[MIN($0)])\n+            LogicalProject(SAL=[$5])\n+              LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+      LogicalProject(EXPR$0=[/($0, 2)])\n+        LogicalAggregate(group=[{}], agg#0=[AVG($0)])\n+          LogicalProject(SAL=[$5])\n+            LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+]]>\n+        </Resource>\n+    </TestCase>\n     <TestCase name=\"testCompositeOfCountRange\">\n         <Resource name=\"sql\">\n             <![CDATA[select COMPOSITE(deptno)"
  }
]
