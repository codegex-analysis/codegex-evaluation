[
  {
    "sha": "58e73fc7236cfaa20d2e0dcd18a54affe0c598ff",
    "filename": "core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java",
    "status": "modified",
    "additions": 134,
    "deletions": 0,
    "changes": 134,
    "blob_url": "https://github.com/apache/calcite/blob/10699f95a05ba27e47df7cf83642207ac8ee6f80/core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java",
    "raw_url": "https://github.com/apache/calcite/raw/10699f95a05ba27e47df7cf83642207ac8ee6f80/core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java?ref=10699f95a05ba27e47df7cf83642207ac8ee6f80",
    "patch": "@@ -43,6 +43,7 @@\n import org.apache.calcite.rel.core.Project;\n import org.apache.calcite.rel.core.RelFactories;\n import org.apache.calcite.rel.core.Sort;\n+import org.apache.calcite.rel.core.Union;\n import org.apache.calcite.rel.core.Values;\n import org.apache.calcite.rel.logical.LogicalAggregate;\n import org.apache.calcite.rel.logical.LogicalCorrelate;\n@@ -51,6 +52,7 @@\n import org.apache.calcite.rel.logical.LogicalProject;\n import org.apache.calcite.rel.logical.LogicalSnapshot;\n import org.apache.calcite.rel.logical.LogicalTableFunctionScan;\n+import org.apache.calcite.rel.logical.LogicalUnion;\n import org.apache.calcite.rel.metadata.RelMdUtil;\n import org.apache.calcite.rel.metadata.RelMetadataQuery;\n import org.apache.calcite.rel.rules.CoreRules;\n@@ -1259,6 +1261,138 @@ private static boolean isWidening(RelDataType type, RelDataType type1) {\n     return register(rel, newJoin, mapOldToNewOutputs, corDefOutputs);\n   }\n \n+  public @Nullable Frame decorrelateRel(LogicalUnion rel, boolean isCorVarDefined) {\n+    return decorrelateRel((Union) rel, isCorVarDefined);\n+  }\n+\n+  public @Nullable Frame decorrelateRel(Union rel, boolean isCorVarDefined) {\n+    assert !cm.mapRefRelToCorRef.containsKey(rel);\n+\n+    final List<RelNode> oldInputs = rel.getInputs();\n+\n+    final List<Frame> inputFrames = new ArrayList<>();\n+    final Set<CorDef> corDefSet = new HashSet<>();\n+\n+    // Decorrelate to collect input frames and collect all\n+    // the corDefOutputs from the frames. Note that the\n+    // corDefOutputs might be different among the frames.\n+    for (RelNode oldInput: oldInputs) {\n+      final Frame frame = getInvoke(oldInput, isCorVarDefined, rel);\n+      if (frame == null) {\n+        return null;\n+      }\n+      inputFrames.add(frame);\n+      corDefSet.addAll(frame.corDefOutputs.keySet());\n+    }\n+\n+    // Note that the corDefOutputs might be different among the\n+    // input frames. Align the correlated variables here.\n+    for (int i = 0; i < inputFrames.size(); i++) {\n+      final Frame newFrame =\n+          maybeAppendCorDefs(oldInputs.get(i), inputFrames.get(i), corDefSet);\n+      inputFrames.set(i, newFrame);\n+    }\n+\n+    final Frame frame0 = inputFrames.get(0);\n+\n+    boolean inputMappingConflict = false;\n+\n+    // Check whether there's mapping conflict from the inputs\n+    for (Frame frame: inputFrames) {\n+      assert frame.corDefOutputs.keySet().equals(frame0.corDefOutputs.keySet());\n+      for (RelDecorrelator.CorDef corDef: frame0.corDefOutputs.keySet()) {\n+        if (frame0.corDefOutputs.get(corDef).intValue()\n+            != frame.corDefOutputs.get(corDef).intValue()) {\n+          inputMappingConflict = true;\n+        }\n+      }\n+      if (!frame.oldToNewOutputs.equals(frame0.oldToNewOutputs)) {\n+        inputMappingConflict = true;\n+      }\n+    }\n+\n+    if (inputMappingConflict) {\n+      // If there's mapping conflict, permute the inputs.\n+      final NavigableMap<CorDef, Integer> newCorDefOutputs = new TreeMap<>();\n+      for (int i = 0; i < inputFrames.size(); i++) {\n+        final Frame frame = inputFrames.get(i);\n+        final List<Integer> projects = permuteMapping(frame, frame0.corDefOutputs.keySet());\n+\n+        RelNode input;\n+        if (Mappings.isIdentity(projects, projects.size())) {\n+          input = frame.r;\n+        } else {\n+          input = relBuilder.push(frame.r)\n+              .project(relBuilder.fields(projects))\n+              .build();\n+        }\n+        relBuilder.push(input);\n+\n+        if (i == 0) {\n+          for (CorDef corDef: frame0.corDefOutputs.keySet()) {\n+            final int newIdx = projects.indexOf(frame0.corDefOutputs.get(corDef));\n+            assert newIdx != -1;\n+            newCorDefOutputs.put(corDef, newIdx);\n+          }\n+        }\n+      }\n+      final RelNode newUnion = relBuilder.union(rel.all).build();\n+      return register(\n+          rel, newUnion, identityMap(frame0.oldToNewOutputs.size()), newCorDefOutputs);\n+    } else {\n+      for (Frame frame: inputFrames) {\n+        relBuilder.push(frame.r);\n+      }\n+      final RelNode newUnion = relBuilder.union(rel.all).build();\n+      return register(rel, newUnion, frame0.oldToNewOutputs, frame0.corDefOutputs);\n+    }\n+  }\n+\n+  private Frame maybeAppendCorDefs(RelNode rel, Frame frame, Set<CorDef> needs) {\n+    final List<CorRef> corRefsNeedToAppend = new ArrayList<>();\n+    needs.forEach(corDef -> {\n+      if (!frame.corDefOutputs.containsKey(corDef)) {\n+        corRefsNeedToAppend.add(new CorRef(corDef.corr, corDef.field, 0));\n+      }\n+    });\n+    // If all needs are satisfied, just return the original frame.\n+    if (corRefsNeedToAppend.isEmpty()) {\n+      return frame;\n+    }\n+\n+    final NavigableMap<CorDef, Integer> corDefOutputs =\n+        new TreeMap<>(frame.corDefOutputs);\n+    final int leftInputOutputCount = frame.r.getRowType().getFieldCount();\n+\n+    // Create value generator, which provides column(s) for needed correlated variable(s).\n+    final RelNode valueGen = requireNonNull(\n+            createValueGenerator(corRefsNeedToAppend, leftInputOutputCount, corDefOutputs),\n+            \"createValueGenerator(...) is null\");\n+\n+\n+    final RelNode join = relBuilder.push(frame.r).push(valueGen)\n+        .join(JoinRelType.INNER, relBuilder.literal(true),\n+            ImmutableSet.of()).build();\n+\n+    return register(rel, join, frame.oldToNewOutputs, corDefOutputs);\n+  }\n+\n+  // Generate mapping for permutation, which provides identity mapping\n+  // for original corresponding relnode of the frame, and followed by\n+  // columns for correlated variables specified in corDefs.\n+  private static List<Integer> permuteMapping(\n+      Frame frame, ImmutableSortedSet<RelDecorrelator.CorDef> corDefs) {\n+    List<Integer> projects = new ArrayList<>();\n+    while (projects.size() < frame.oldToNewOutputs.size()) {\n+      projects.add(frame.oldToNewOutputs.get(projects.size()));\n+    }\n+    for (RelDecorrelator.CorDef corDef: corDefs) {\n+      assert frame.corDefOutputs.containsKey(corDef);\n+      projects.add(frame.corDefOutputs.get(corDef));\n+    }\n+    return projects;\n+  }\n+\n   public @Nullable Frame decorrelateRel(LogicalJoin rel, boolean isCorVarDefined) {\n     return decorrelateRel((Join) rel, isCorVarDefined);\n   }"
  },
  {
    "sha": "8b570623898cb16b76b797a2d60a0f634e45411f",
    "filename": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java",
    "status": "modified",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/apache/calcite/blob/10699f95a05ba27e47df7cf83642207ac8ee6f80/core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java",
    "raw_url": "https://github.com/apache/calcite/raw/10699f95a05ba27e47df7cf83642207ac8ee6f80/core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java?ref=10699f95a05ba27e47df7cf83642207ac8ee6f80",
    "patch": "@@ -6358,6 +6358,67 @@ private Sql spatial(String sql) {\n         .check();\n   }\n \n+  @Test public void testDecorrelateUnion0() {\n+    final String sql = \"\"\n+        + \"SELECT deptno FROM dept where exists\\n\"\n+        + \"(SELECT 1 FROM emp where sal < 100 and emp.deptno=dept.deptno\\n\"\n+        + \"UNION ALL\\n\"\n+        + \"SELECT 1 FROM bonus where bonus.comm=dept.deptno)\";\n+    sql(sql)\n+        .withLateDecorrelation(true)\n+        .withTrim(true)\n+        .with(HepProgram.builder().build())\n+        .check();\n+  }\n+\n+  /**\n+   * Input frames with the same correlated variables and old-new output mappings,\n+   * but correlated variables referenced by different columns.\n+   */\n+  @Test public void testDecorrelateUnion1() {\n+    final String sql = \"SELECT * FROM emp where exists\\n\"\n+        + \"(SELECT 1 FROM dept where deptno = emp.deptno\\n\"\n+        + \"UNION ALL\\n\"\n+        + \"SELECT 1 FROM dept where deptno + 1 = emp.deptno)\";\n+    sql(sql)\n+        .withLateDecorrelation(true)\n+        .withTrim(true)\n+        .with(HepProgram.builder().build())\n+        .check();\n+  }\n+\n+  /**\n+   * Input frames with different correlated variables\n+   * and referenced by different columns.\n+   */\n+  @Test public void testDecorrelateUnion2() {\n+    final String sql = \"SELECT * FROM emp where exists\\n\"\n+        + \"(SELECT 1 FROM dept where deptno = emp.deptno\\n\"\n+        + \"UNION ALL\\n\"\n+        + \"SELECT 1 FROM dept where name = emp.ename)\";\n+    sql(sql)\n+        .withLateDecorrelation(true)\n+        .withTrim(true)\n+        .with(HepProgram.builder().build())\n+        .check();\n+  }\n+\n+  /**\n+   * Input frames with the same correlated variables,\n+   * but different old-new output mappings.\n+   */\n+  @Test public void testDecorrelateUnion3() {\n+    final String sql = \"SELECT * FROM emp A where (deptno, sal) in\\n\"\n+        + \"(SELECT deptno, max(sal) FROM emp B where A.mgr = B.empno group by deptno\\n\"\n+        + \"UNION ALL\\n\"\n+        + \"SELECT deptno, sal FROM emp B where A.mgr = B.empno)\";\n+    sql(sql)\n+        .withLateDecorrelation(true)\n+        .withTrim(true)\n+        .with(HepProgram.builder().build())\n+        .check();\n+  }\n+\n   /** Test case for\n   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-2726\">[CALCITE-2726]\n   * ReduceExpressionRule may oversimplify filter conditions containing nulls</a>."
  },
  {
    "sha": "6cd2b937d412215e8d22bace006203bfd9de5aaa",
    "filename": "core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml",
    "status": "modified",
    "additions": 243,
    "deletions": 0,
    "changes": 243,
    "blob_url": "https://github.com/apache/calcite/blob/10699f95a05ba27e47df7cf83642207ac8ee6f80/core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml",
    "raw_url": "https://github.com/apache/calcite/raw/10699f95a05ba27e47df7cf83642207ac8ee6f80/core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml",
    "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/resources/org/apache/calcite/test/RelOptRulesTest.xml?ref=10699f95a05ba27e47df7cf83642207ac8ee6f80",
    "patch": "@@ -11699,6 +11699,249 @@ LogicalProject(JOB=[$1])\n ]]>\n         </Resource>\n     </TestCase>\n+  <TestCase name=\"testDecorrelateUnion0\">\n+    <Resource name=\"sql\">\n+      <![CDATA[SELECT deptno FROM dept where exists\n+(SELECT 1 FROM emp where sal < 100 and emp.deptno=dept.deptno\n+UNION ALL\n+SELECT 1 FROM bonus where bonus.comm=dept.deptno)\"]]>\n+    </Resource>\n+    <Resource name=\"planBefore\">\n+      <![CDATA[\n+LogicalProject(DEPTNO=[$0])\n+  LogicalFilter(condition=[IS NOT NULL($2)])\n+    LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{0}])\n+      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+      LogicalAggregate(group=[{}], agg#0=[MIN($0)])\n+        LogicalProject($f0=[true])\n+          LogicalUnion(all=[true])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[AND(<($5, 100), =($7, $cor0.DEPTNO))])\n+                LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=($3, $cor0.DEPTNO)])\n+                LogicalTableScan(table=[[CATALOG, SALES, BONUS]])\n+]]>\n+    </Resource>\n+    <Resource name=\"planMid\">\n+      <![CDATA[\n+LogicalProject(DEPTNO=[$0])\n+  LogicalFilter(condition=[IS NOT NULL($2)])\n+    LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{0}])\n+      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+      LogicalAggregate(group=[{}], agg#0=[MIN($0)])\n+        LogicalProject($f0=[true])\n+          LogicalUnion(all=[true])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[AND(<($5, 100), =($7, $cor0.DEPTNO))])\n+                LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=($3, $cor0.DEPTNO)])\n+                LogicalTableScan(table=[[CATALOG, SALES, BONUS]])\n+]]>\n+    </Resource>\n+    <Resource name=\"planAfter\">\n+      <![CDATA[\n+LogicalProject(DEPTNO=[$0])\n+  LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO0=[CAST($2):INTEGER], $f1=[CAST($3):BOOLEAN])\n+    LogicalJoin(condition=[=($0, $2)], joinType=[inner])\n+      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+      LogicalAggregate(group=[{0}], agg#0=[MIN($1)])\n+        LogicalProject(DEPTNO=[$1], $f0=[true])\n+          LogicalUnion(all=[true])\n+            LogicalProject(EXPR$0=[1], DEPTNO=[$7])\n+              LogicalFilter(condition=[<($5, 100)])\n+                LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+            LogicalProject(EXPR$0=[1], COMM=[$3])\n+              LogicalTableScan(table=[[CATALOG, SALES, BONUS]])\n+]]>\n+    </Resource>\n+  </TestCase>\n+  <TestCase name=\"testDecorrelateUnion1\">\n+    <Resource name=\"sql\">\n+      <![CDATA[SELECT * FROM emp where exists\n+(SELECT 1 FROM dept where deptno = emp.deptno\n+UNION ALL\n+SELECT 1 FROM dept where deptno + 1 = emp.deptno)]]>\n+    </Resource>\n+    <Resource name=\"planBefore\">\n+      <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalFilter(condition=[IS NOT NULL($9)])\n+    LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{7}])\n+      LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+      LogicalAggregate(group=[{}], agg#0=[MIN($0)])\n+        LogicalProject($f0=[true])\n+          LogicalUnion(all=[true])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=($0, $cor0.DEPTNO)])\n+                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=(+($0, 1), $cor0.DEPTNO)])\n+                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+]]>\n+    </Resource>\n+    <Resource name=\"planMid\">\n+      <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalFilter(condition=[IS NOT NULL($9)])\n+    LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{7}])\n+      LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+      LogicalAggregate(group=[{}], agg#0=[MIN($0)])\n+        LogicalProject($f0=[true])\n+          LogicalUnion(all=[true])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=($0, $cor0.DEPTNO)])\n+                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=(+($0, 1), $cor0.DEPTNO)])\n+                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+]]>\n+    </Resource>\n+    <Resource name=\"planAfter\">\n+      <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[CAST($9):INTEGER], $f1=[CAST($10):BOOLEAN])\n+    LogicalJoin(condition=[=($7, $9)], joinType=[inner])\n+      LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+      LogicalAggregate(group=[{0}], agg#0=[MIN($1)])\n+        LogicalProject(DEPTNO=[$1], $f0=[true])\n+          LogicalUnion(all=[true])\n+            LogicalProject(EXPR$0=[1], DEPTNO=[$0])\n+              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+            LogicalProject(EXPR$0=[1], $f2=[$2])\n+              LogicalFilter(condition=[=(+($0, 1), $2)])\n+                LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[+($0, 1)])\n+                  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+]]>\n+    </Resource>\n+  </TestCase>\n+  <TestCase name=\"testDecorrelateUnion2\">\n+    <Resource name=\"sql\">\n+      <![CDATA[SELECT * FROM emp where exists\n+(SELECT 1 FROM dept where deptno = emp.deptno\n+UNION ALL\n+SELECT 1 FROM dept where name = emp.ename)]]>\n+    </Resource>\n+    <Resource name=\"planBefore\">\n+      <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalFilter(condition=[IS NOT NULL($9)])\n+    LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{1, 7}])\n+      LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+      LogicalAggregate(group=[{}], agg#0=[MIN($0)])\n+        LogicalProject($f0=[true])\n+          LogicalUnion(all=[true])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=($0, $cor0.DEPTNO)])\n+                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=(CAST($1):VARCHAR(20) NOT NULL, $cor0.ENAME)])\n+                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+]]>\n+    </Resource>\n+    <Resource name=\"planMid\">\n+      <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalFilter(condition=[IS NOT NULL($9)])\n+    LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{1, 7}])\n+      LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+      LogicalAggregate(group=[{}], agg#0=[MIN($0)])\n+        LogicalProject($f0=[true])\n+          LogicalUnion(all=[true])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=($0, $cor0.DEPTNO)])\n+                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+            LogicalProject(EXPR$0=[1])\n+              LogicalFilter(condition=[=(CAST($1):VARCHAR(20) NOT NULL, $cor0.ENAME)])\n+                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+]]>\n+    </Resource>\n+    <Resource name=\"planAfter\">\n+      <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], ENAME0=[CAST($9):VARCHAR(20)], DEPTNO0=[CAST($10):INTEGER], $f2=[CAST($11):BOOLEAN])\n+    LogicalJoin(condition=[AND(=($1, $9), =($7, $10))], joinType=[inner])\n+      LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+      LogicalAggregate(group=[{0, 1}], agg#0=[MIN($2)])\n+        LogicalProject(ENAME=[$1], DEPTNO=[$2], $f0=[true])\n+          LogicalUnion(all=[true])\n+            LogicalProject(EXPR$0=[$0], ENAME=[$2], DEPTNO=[$1])\n+              LogicalJoin(condition=[true], joinType=[inner])\n+                LogicalProject(EXPR$0=[1], DEPTNO=[$0])\n+                  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+                LogicalAggregate(group=[{0}])\n+                  LogicalProject(ENAME=[$1])\n+                    LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+            LogicalJoin(condition=[true], joinType=[inner])\n+              LogicalProject(EXPR$0=[1], NAME0=[$2])\n+                LogicalFilter(condition=[=(CAST($1):VARCHAR(20) NOT NULL, $2)])\n+                  LogicalProject(DEPTNO=[$0], NAME=[$1], NAME0=[CAST($1):VARCHAR(20) NOT NULL])\n+                    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])\n+              LogicalAggregate(group=[{0}])\n+                LogicalProject(DEPTNO=[$7])\n+                  LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+]]>\n+    </Resource>\n+  </TestCase>\n+  <TestCase name=\"testDecorrelateUnion3\">\n+    <Resource name=\"sql\">\n+      <![CDATA[SELECT * FROM emp A where (deptno, sal) in\n+(SELECT deptno, max(sal) FROM emp B where A.mgr = B.empno group by deptno\n+UNION ALL\n+SELECT deptno, sal FROM emp B where A.mgr = B.empno)]]>\n+    </Resource>\n+    <Resource name=\"planBefore\">\n+      <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3, 5, 7}])\n+    LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+    LogicalFilter(condition=[AND(=($cor0.DEPTNO, $0), =($cor0.SAL, $1))])\n+      LogicalAggregate(group=[{0, 1}])\n+        LogicalUnion(all=[true])\n+          LogicalAggregate(group=[{0}], EXPR$1=[MAX($1)])\n+            LogicalProject(DEPTNO=[$7], SAL=[$5])\n+              LogicalFilter(condition=[=($cor0.MGR, $0)])\n+                LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+          LogicalProject(DEPTNO=[$7], SAL=[$5])\n+            LogicalFilter(condition=[=($cor0.MGR, $0)])\n+              LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+]]>\n+    </Resource>\n+    <Resource name=\"planMid\">\n+      <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3, 5, 7}])\n+    LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+    LogicalFilter(condition=[AND(=($cor0.DEPTNO, $0), =($cor0.SAL, $1))])\n+      LogicalAggregate(group=[{0, 1}])\n+        LogicalUnion(all=[true])\n+          LogicalAggregate(group=[{0}], EXPR$1=[MAX($1)])\n+            LogicalProject(DEPTNO=[$7], SAL=[$5])\n+              LogicalFilter(condition=[=($cor0.MGR, $0)])\n+                LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+          LogicalProject(DEPTNO=[$7], SAL=[$5])\n+            LogicalFilter(condition=[=($cor0.MGR, $0)])\n+              LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+]]>\n+    </Resource>\n+    <Resource name=\"planAfter\">\n+      <![CDATA[\n+LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])\n+  LogicalJoin(condition=[AND(=($3, $11), =($5, $10), =($7, $9))], joinType=[inner])\n+    LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+    LogicalAggregate(group=[{0, 1, 2}])\n+      LogicalProject(DEPTNO=[$0], EXPR$1=[$1], EMPNO=[$2])\n+        LogicalUnion(all=[true])\n+          LogicalProject(DEPTNO=[$0], EXPR$1=[$2], EMPNO=[$1])\n+            LogicalAggregate(group=[{0, 1}], EXPR$1=[MAX($2)])\n+              LogicalProject(DEPTNO=[$7], EMPNO=[$0], SAL=[$5])\n+                LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+          LogicalProject(DEPTNO=[$7], SAL=[$5], EMPNO=[$0])\n+            LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+]]>\n+    </Resource>\n+  </TestCase>\n     <TestCase name=\"testAggregateDynamicFunction\">\n         <Resource name=\"sql\">\n             <![CDATA[select hiredate"
  }
]
