[
  {
    "sha": "b6f65693fb870ce759ad8d081c19f0e1601bed03",
    "filename": ".gitignore",
    "status": "added",
    "additions": 48,
    "deletions": 0,
    "changes": 48,
    "blob_url": "https://github.com/apache/flink-statefun-playground/blob/c2380c300c600bd44ce1c74458d8306aceed3928/.gitignore",
    "raw_url": "https://github.com/apache/flink-statefun-playground/raw/c2380c300c600bd44ce1c74458d8306aceed3928/.gitignore",
    "contents_url": "https://api.github.com/repos/apache/flink-statefun-playground/contents/.gitignore?ref=c2380c300c600bd44ce1c74458d8306aceed3928",
    "patch": "@@ -0,0 +1,48 @@\n+# Compiled class file\n+*.class\n+\n+# Log file\n+*.log\n+\n+# BlueJ files\n+*.ctxt\n+\n+# Mobile Tools for Java (J2ME)\n+.mtj.tmp/\n+\n+# Package Files #\n+*.jar\n+*.war\n+*.nar\n+*.ear\n+*.zip\n+*.tar.gz\n+*.rar\n+\n+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\n+hs_err_pid*\n+\n+.DS_Store\n+*.iml\n+.idea\n+\n+# maven shade plugin\n+dependency-reduced-pom.xml\n+target\n+\n+# documentation\n+ /_build/\n+/venv/\n+_build\n+/dist/html/\n+build-linter\n+\n+# temporary release files\n+release/\n+\n+# python\n+venv\n+*pyc\n+dist/\n+*whl\n+__pycache__"
  },
  {
    "sha": "b26c42729f06fbe4b9ffa5030dc698c385f50c35",
    "filename": "java/shopping-cart/Dockerfile",
    "status": "added",
    "additions": 19,
    "deletions": 0,
    "changes": 19,
    "blob_url": "https://github.com/apache/flink-statefun-playground/blob/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/Dockerfile",
    "raw_url": "https://github.com/apache/flink-statefun-playground/raw/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/Dockerfile",
    "contents_url": "https://api.github.com/repos/apache/flink-statefun-playground/contents/java/shopping-cart/Dockerfile?ref=c2380c300c600bd44ce1c74458d8306aceed3928",
    "patch": "@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+FROM flink-statefun:2.3-SNAPSHOT\n+\n+RUN mkdir -p /opt/statefun/modules/statefun-shopping-cart-example\n+COPY target/statefun-shopping-cart-example*jar /opt/statefun/modules/statefun-shopping-cart-example/"
  },
  {
    "sha": "218adb747d1238d0689f3ca1ca9f3779423bd84b",
    "filename": "java/shopping-cart/pom.xml",
    "status": "added",
    "additions": 77,
    "deletions": 0,
    "changes": 77,
    "blob_url": "https://github.com/apache/flink-statefun-playground/blob/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/pom.xml",
    "raw_url": "https://github.com/apache/flink-statefun-playground/raw/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/pom.xml",
    "contents_url": "https://api.github.com/repos/apache/flink-statefun-playground/contents/java/shopping-cart/pom.xml?ref=c2380c300c600bd44ce1c74458d8306aceed3928",
    "patch": "@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+  http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <artifactId>shopping-cart</artifactId>\n+    <groupId>org.apache.flink</groupId>\n+    <modelVersion>4.0.0</modelVersion>\n+    <version>0.1</version>\n+\n+    <properties>\n+        <protoc-jar-maven-plugin.version>3.11.1</protoc-jar-maven-plugin.version>\n+        <statefun.version>2.3-SNAPSHOT</statefun.version>\n+        <untertow.version>2.2.5.Final</untertow.version>\n+        <jackson-databind.version>2.10.1</jackson-databind.version>\n+        <junit.version>4.12</junit.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>statefun-sdk-java</artifactId>\n+            <version>${statefun.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.undertow</groupId>\n+            <artifactId>undertow-core</artifactId>\n+            <version>${untertow.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>${jackson-databind.version}</version>\n+            <scope>compile</scope>\n+        </dependency>\n+\n+\n+        <!-- test -->\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>${junit.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>"
  },
  {
    "sha": "065703034feb76c9952e89ef188714cf90028f85",
    "filename": "java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Expose.java",
    "status": "added",
    "additions": 105,
    "deletions": 0,
    "changes": 105,
    "blob_url": "https://github.com/apache/flink-statefun-playground/blob/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Expose.java",
    "raw_url": "https://github.com/apache/flink-statefun-playground/raw/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Expose.java",
    "contents_url": "https://api.github.com/repos/apache/flink-statefun-playground/contents/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Expose.java?ref=c2380c300c600bd44ce1c74458d8306aceed3928",
    "patch": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.statefun.examples.shoppingcart;\n+\n+import static io.undertow.UndertowOptions.ENABLE_HTTP2;\n+\n+import io.undertow.Undertow;\n+import io.undertow.server.HttpHandler;\n+import io.undertow.server.HttpServerExchange;\n+import io.undertow.util.Headers;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import org.apache.flink.statefun.sdk.java.StatefulFunctionSpec;\n+import org.apache.flink.statefun.sdk.java.StatefulFunctions;\n+import org.apache.flink.statefun.sdk.java.handler.RequestReplyHandler;\n+import org.apache.flink.statefun.sdk.java.slice.Slice;\n+import org.apache.flink.statefun.sdk.java.slice.Slices;\n+\n+public class Expose {\n+\n+  public static void main(String... args) {\n+    StatefulFunctionSpec inventoryFn =\n+        StatefulFunctionSpec.builder(InventoryFn.TYPE)\n+            .withValueSpec(InventoryFn.INVENTORY)\n+            .withSupplier(InventoryFn::new)\n+            .build();\n+\n+    StatefulFunctionSpec userShoppingCartFn =\n+        StatefulFunctionSpec.builder(UserShoppingCartFn.TYPE)\n+            .withValueSpec(UserShoppingCartFn.BASKET)\n+            .withSupplier(UserShoppingCartFn::new)\n+            .build();\n+\n+    StatefulFunctions functions = new StatefulFunctions();\n+    functions.withStatefulFunction(inventoryFn).withStatefulFunction(userShoppingCartFn);\n+    RequestReplyHandler handler = functions.requestReplyHandler();\n+\n+    /* This example uses the Undertow http server, but any HTTP server/framework will work as-well */\n+    Undertow server =\n+        Undertow.builder()\n+            .addHttpListener(8080, \"0.0.0.0\")\n+            .setHandler(new UndertowStateFunHandler(handler))\n+            .setServerOption(ENABLE_HTTP2, true)\n+            .build();\n+\n+    server.start();\n+  }\n+\n+  private static final class UndertowStateFunHandler implements HttpHandler {\n+    private final RequestReplyHandler handler;\n+\n+    UndertowStateFunHandler(RequestReplyHandler handler) {\n+      this.handler = Objects.requireNonNull(handler);\n+    }\n+\n+    @Override\n+    public void handleRequest(HttpServerExchange exchange) {\n+      exchange.getRequestReceiver().receiveFullBytes(this::onRequestBody);\n+    }\n+\n+    private void onRequestBody(HttpServerExchange exchange, byte[] requestBytes) {\n+      try {\n+        CompletableFuture<Slice> future = handler.handle(Slices.wrap(requestBytes));\n+        exchange.dispatch();\n+        future.whenComplete(\n+            (responseBytes, ex) -> {\n+              if (ex != null) {\n+                onException(exchange, ex);\n+              } else {\n+                onSuccess(exchange, responseBytes);\n+              }\n+            });\n+      } catch (Throwable t) {\n+        onException(exchange, t);\n+      }\n+    }\n+\n+    private void onException(HttpServerExchange exchange, Throwable t) {\n+      t.printStackTrace(System.out);\n+      exchange.getResponseHeaders().put(Headers.STATUS, 500);\n+      exchange.endExchange();\n+    }\n+\n+    private void onSuccess(HttpServerExchange exchange, Slice result) {\n+      exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/octet-stream\");\n+      exchange.getResponseSender().send(result.asReadOnlyByteBuffer());\n+    }\n+  }\n+}"
  },
  {
    "sha": "04126e2c82bcb62e8e78c0cc5c7d87f386320df0",
    "filename": "java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Identifiers.java",
    "status": "added",
    "additions": 27,
    "deletions": 0,
    "changes": 27,
    "blob_url": "https://github.com/apache/flink-statefun-playground/blob/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Identifiers.java",
    "raw_url": "https://github.com/apache/flink-statefun-playground/raw/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Identifiers.java",
    "contents_url": "https://api.github.com/repos/apache/flink-statefun-playground/contents/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Identifiers.java?ref=c2380c300c600bd44ce1c74458d8306aceed3928",
    "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.flink.statefun.examples.shoppingcart;\n+\n+import org.apache.flink.statefun.sdk.java.TypeName;\n+\n+final class Identifiers {\n+\n+  private Identifiers() {}\n+\n+  static final TypeName RECEIPT_EGRESS = TypeName.typeNameFromString(\"com.example/receipts\");\n+}"
  },
  {
    "sha": "094f0ca0f9717a6ac0abcd89a9dc20978599c3f6",
    "filename": "java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/InventoryFn.java",
    "status": "added",
    "additions": 73,
    "deletions": 0,
    "changes": 73,
    "blob_url": "https://github.com/apache/flink-statefun-playground/blob/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/InventoryFn.java",
    "raw_url": "https://github.com/apache/flink-statefun-playground/raw/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/InventoryFn.java",
    "contents_url": "https://api.github.com/repos/apache/flink-statefun-playground/contents/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/InventoryFn.java?ref=c2380c300c600bd44ce1c74458d8306aceed3928",
    "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.flink.statefun.examples.shoppingcart;\n+\n+import static org.apache.flink.statefun.examples.shoppingcart.Messages.*;\n+import static org.apache.flink.statefun.examples.shoppingcart.Messages.ItemAvailability.*;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.apache.flink.statefun.sdk.java.Address;\n+import org.apache.flink.statefun.sdk.java.AddressScopedStorage;\n+import org.apache.flink.statefun.sdk.java.Context;\n+import org.apache.flink.statefun.sdk.java.StatefulFunction;\n+import org.apache.flink.statefun.sdk.java.TypeName;\n+import org.apache.flink.statefun.sdk.java.ValueSpec;\n+import org.apache.flink.statefun.sdk.java.message.Message;\n+import org.apache.flink.statefun.sdk.java.message.MessageBuilder;\n+\n+final class InventoryFn implements StatefulFunction {\n+\n+  static final TypeName TYPE = TypeName.typeNameFromString(\"com.example.fns/inventory\");\n+\n+  static final ValueSpec<Integer> INVENTORY = ValueSpec.named(\"inventory\").withIntType();\n+\n+  @Override\n+  public CompletableFuture<Void> apply(Context context, Message message) {\n+    AddressScopedStorage storage = context.storage();\n+    int quantity = storage.get(INVENTORY).orElse(0);\n+    if (message.is(RESTOCK_ITEM_TYPE)) {\n+      RestockItem restock = message.as(RESTOCK_ITEM_TYPE);\n+      int newQuantity = quantity + restock.getQuantity();\n+      storage.set(INVENTORY, newQuantity);\n+    } else if (message.is(REQUEST_ITEM_TYPE)) {\n+      RequestItem request = message.as(REQUEST_ITEM_TYPE);\n+      int requestQuantity = request.getQuantity();\n+\n+      final ItemAvailability itemAvailability;\n+\n+      if (quantity >= requestQuantity) {\n+        storage.set(INVENTORY, quantity - requestQuantity);\n+        itemAvailability = new ItemAvailability(Status.INSTOCK, requestQuantity);\n+      } else {\n+        itemAvailability = new ItemAvailability(Status.OUTOFSTOCK, requestQuantity);\n+      }\n+\n+      context\n+          .caller()\n+          .ifPresent(\n+              caller ->\n+                  context.send(\n+                      MessageBuilder.forAddress(caller)\n+                          .withCustomType(ITEM_AVAILABILITY_TYPE, itemAvailability)\n+                          .build()));\n+    }\n+    return context.done();\n+  }\n+}"
  },
  {
    "sha": "9d1c189d7851aab4cbe85c407b1ede324cf33ff4",
    "filename": "java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Messages.java",
    "status": "added",
    "additions": 246,
    "deletions": 0,
    "changes": 246,
    "blob_url": "https://github.com/apache/flink-statefun-playground/blob/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Messages.java",
    "raw_url": "https://github.com/apache/flink-statefun-playground/raw/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Messages.java",
    "contents_url": "https://api.github.com/repos/apache/flink-statefun-playground/contents/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/Messages.java?ref=c2380c300c600bd44ce1c74458d8306aceed3928",
    "patch": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.statefun.examples.shoppingcart;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.flink.statefun.sdk.java.TypeName;\n+import org.apache.flink.statefun.sdk.java.types.SimpleType;\n+import org.apache.flink.statefun.sdk.java.types.Type;\n+\n+public class Messages {\n+\n+  private static final ObjectMapper mapper = new ObjectMapper();\n+\n+  public static final Type<RestockItem> RESTOCK_ITEM_TYPE =\n+      SimpleType.simpleImmutableTypeFrom(\n+          TypeName.typeNameFromString(\"com.example/RestockItem\"),\n+          mapper::writeValueAsBytes,\n+          bytes -> mapper.readValue(bytes, RestockItem.class));\n+\n+  public static final Type<RequestItem> REQUEST_ITEM_TYPE =\n+      SimpleType.simpleImmutableTypeFrom(\n+          TypeName.typeNameFromString(\"com.example/RequestItem\"),\n+          mapper::writeValueAsBytes,\n+          bytes -> mapper.readValue(bytes, RequestItem.class));\n+\n+  public static final Type<ItemAvailability> ITEM_AVAILABILITY_TYPE =\n+      SimpleType.simpleImmutableTypeFrom(\n+          TypeName.typeNameFromString(\"com.example/ItemAvailability\"),\n+          mapper::writeValueAsBytes,\n+          bytes -> mapper.readValue(bytes, ItemAvailability.class));\n+\n+  public static final Type<AddToCart> ADD_TO_CART =\n+      SimpleType.simpleImmutableTypeFrom(\n+          TypeName.typeNameFromString(\"com.example/AddToCart\"),\n+          mapper::writeValueAsBytes,\n+          bytes -> mapper.readValue(bytes, AddToCart.class));\n+\n+  public static final Type<ClearCart> CLEAR_CART_TYPE =\n+      SimpleType.simpleImmutableTypeFrom(\n+          TypeName.typeNameFromString(\"com.example/ClearCart\"),\n+          mapper::writeValueAsBytes,\n+          bytes -> mapper.readValue(bytes, ClearCart.class));\n+\n+  public static final Type<Checkout> CHECKOUT_TYPE =\n+      SimpleType.simpleImmutableTypeFrom(\n+          TypeName.typeNameFromString(\"com.example/Checkout\"),\n+          mapper::writeValueAsBytes,\n+          bytes -> mapper.readValue(bytes, Checkout.class));\n+\n+  public static final Type<Receipt> RECEIPT_TYPE =\n+      SimpleType.simpleImmutableTypeFrom(\n+          TypeName.typeNameFromString(\"com.example/Receipt\"),\n+          mapper::writeValueAsBytes,\n+          bytes -> mapper.readValue(bytes, Receipt.class));\n+\n+  public static class ClearCart {\n+    private final int userId;\n+\n+    @JsonCreator\n+    public ClearCart(@JsonProperty(\"user_id\") int userId) {\n+      this.userId = userId;\n+    }\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"ClearCart{\" + \"userId=\" + userId + '}';\n+    }\n+  }\n+\n+  public static class Checkout {\n+    private final int userId;\n+\n+    @JsonCreator\n+    public Checkout(@JsonProperty(\"user_id\") int userId) {\n+      this.userId = userId;\n+    }\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"Checkout{\" + \"userId=\" + userId + '}';\n+    }\n+  }\n+\n+  public static class Receipt {\n+    private final int userId;\n+    private final String details;\n+\n+    public Receipt(@JsonProperty(\"user_id\") int userId, String details) {\n+      this.userId = userId;\n+      this.details = details;\n+    }\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    public String getDetails() {\n+      return details;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"Receipt{\" + \"userId=\" + userId + \", details='\" + details + '\\'' + '}';\n+    }\n+  }\n+\n+  public static class RestockItem {\n+    private final String itemId;\n+    private final int quantity;\n+\n+    @JsonCreator\n+    public RestockItem(@JsonProperty(\"item_id\") String itemId, int quantity) {\n+      this.itemId = itemId;\n+      this.quantity = quantity;\n+    }\n+\n+    public String getItemId() {\n+      return itemId;\n+    }\n+\n+    public int getQuantity() {\n+      return quantity;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"RestockItem{\" + \"itemId='\" + itemId + '\\'' + \", quantity=\" + quantity + '}';\n+    }\n+  }\n+\n+  public static class AddToCart {\n+    private final int userId;\n+    private final int itemId;\n+    private final int quantity;\n+\n+    @JsonCreator\n+    public AddToCart(\n+        @JsonProperty(\"user_id\") int userId, @JsonProperty(\"item_id\") int itemId, int quantity) {\n+      this.userId = userId;\n+      this.itemId = itemId;\n+      this.quantity = quantity;\n+    }\n+\n+    public int getUserId() {\n+      return userId;\n+    }\n+\n+    public int getItemId() {\n+      return itemId;\n+    }\n+\n+    public int getQuantity() {\n+      return quantity;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"AddToCart{\"\n+          + \"userId=\"\n+          + userId\n+          + \", itemId=\"\n+          + itemId\n+          + \", quantity=\"\n+          + quantity\n+          + '}';\n+    }\n+  }\n+\n+  // ---------------------------------------------------------------------\n+  // Internal messages\n+  // ---------------------------------------------------------------------\n+\n+  public static class RequestItem {\n+    private final int quantity;\n+\n+    @JsonCreator\n+    public RequestItem(int quantity) {\n+      this.quantity = quantity;\n+    }\n+\n+    public int getQuantity() {\n+      return quantity;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"RequestItem{\" + \"quantity=\" + quantity + '}';\n+    }\n+  }\n+\n+  public static class ItemAvailability {\n+\n+    public enum Status {\n+      INSTOCK,\n+      OUTOFSTOCK\n+    }\n+\n+    private final Status status;\n+    private final int quantity;\n+\n+    @JsonCreator\n+    public ItemAvailability(Status status, int quantity) {\n+      this.status = status;\n+      this.quantity = quantity;\n+    }\n+\n+    public Status getStatus() {\n+      return status;\n+    }\n+\n+    public int getQuantity() {\n+      return quantity;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"ItemAvailability{\" + \"status=\" + status + \", quantity=\" + quantity + '}';\n+    }\n+  }\n+}"
  },
  {
    "sha": "35b2b1a17c98a0fe4f6372c06ff5ee6eba17f534",
    "filename": "java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/UserShoppingCartFn.java",
    "status": "added",
    "additions": 164,
    "deletions": 0,
    "changes": 164,
    "blob_url": "https://github.com/apache/flink-statefun-playground/blob/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/UserShoppingCartFn.java",
    "raw_url": "https://github.com/apache/flink-statefun-playground/raw/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/UserShoppingCartFn.java",
    "contents_url": "https://api.github.com/repos/apache/flink-statefun-playground/contents/java/shopping-cart/src/main/java/org/apache/flink/statefun/examples/shoppingcart/UserShoppingCartFn.java?ref=c2380c300c600bd44ce1c74458d8306aceed3928",
    "patch": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.flink.statefun.examples.shoppingcart;\n+\n+import static org.apache.flink.statefun.examples.shoppingcart.Identifiers.RECEIPT_EGRESS;\n+import static org.apache.flink.statefun.examples.shoppingcart.Messages.*;\n+import static org.apache.flink.statefun.examples.shoppingcart.Messages.ItemAvailability.*;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+import org.apache.flink.statefun.sdk.java.AddressScopedStorage;\n+import org.apache.flink.statefun.sdk.java.Context;\n+import org.apache.flink.statefun.sdk.java.StatefulFunction;\n+import org.apache.flink.statefun.sdk.java.TypeName;\n+import org.apache.flink.statefun.sdk.java.ValueSpec;\n+import org.apache.flink.statefun.sdk.java.io.KafkaEgressMessage;\n+import org.apache.flink.statefun.sdk.java.message.Message;\n+import org.apache.flink.statefun.sdk.java.message.MessageBuilder;\n+import org.apache.flink.statefun.sdk.java.types.SimpleType;\n+import org.apache.flink.statefun.sdk.java.types.Type;\n+\n+final class UserShoppingCartFn implements StatefulFunction {\n+\n+  static final TypeName TYPE = TypeName.typeNameFromString(\"com.example.fns/user-shopping-cart\");\n+\n+  \n+  static final ValueSpec<Basket> BASKET = ValueSpec.named(\"basket\").withCustomType(Basket.TYPE);\n+\n+  @Override\n+  public CompletableFuture<Void> apply(Context context, Message message) {\n+    if (message.is(ADD_TO_CART)) {\n+      AddToCart addToCart = message.as(ADD_TO_CART);\n+\n+      RequestItem requestItem = new RequestItem(addToCart.getQuantity());\n+      Message request =\n+          MessageBuilder.forAddress(InventoryFn.TYPE, Integer.toString(addToCart.getItemId()))\n+              .withCustomType(REQUEST_ITEM_TYPE, requestItem)\n+              .build();\n+      context.send(request);\n+    }\n+\n+    if (message.is(ITEM_AVAILABILITY_TYPE)) {\n+      ItemAvailability availability = message.as(ITEM_AVAILABILITY_TYPE);\n+      if (Status.INSTOCK.equals(availability.getStatus())) {\n+        AddressScopedStorage storage = context.storage();\n+        Basket basket = storage.get(BASKET).orElse(Basket.initEmpty());\n+        // ItemAvailability event comes from the Inventory function and contains the itemId as the\n+        // caller id\n+        context.caller().ifPresent(caller -> basket.add(caller.id(), availability.getQuantity()));\n+      }\n+    }\n+\n+    if (message.is(CLEAR_CART_TYPE)) {\n+      AddressScopedStorage storage = context.storage();\n+      storage\n+          .get(BASKET)\n+          .ifPresent(\n+              basket -> {\n+                for (Map.Entry<String, Integer> entry : basket.getEntries()) {\n+                  RestockItem restockItem = new RestockItem(entry.getKey(), entry.getValue());\n+                  Message restockCommand =\n+                      MessageBuilder.forAddress(InventoryFn.TYPE, entry.getKey())\n+                          .withCustomType(RESTOCK_ITEM_TYPE, restockItem)\n+                          .build();\n+\n+                  context.send(restockCommand);\n+                }\n+                basket.clear();\n+              });\n+    }\n+\n+    if (message.is(CHECKOUT_TYPE)) {\n+      AddressScopedStorage storage = context.storage();\n+      Optional<String> itemsOption =\n+          storage\n+              .get(BASKET)\n+              .map(\n+                  basket ->\n+                      basket.getEntries().stream()\n+                          .map(entry -> entry.getKey() + \": \" + entry.getValue())\n+                          .collect(Collectors.joining(\"\\n\")));\n+\n+      itemsOption.ifPresent(\n+          items -> {\n+            Receipt receipt = new Receipt(Integer.parseInt(context.self().id()), items);\n+            KafkaEgressMessage.forEgress(RECEIPT_EGRESS)\n+                .withTopic(\"receipts\")\n+                .withUtf8Key(context.self().id())\n+                .withValue(RECEIPT_TYPE, receipt)\n+                .build();\n+          });\n+    }\n+    return context.done();\n+  }\n+\n+  private static class Basket {\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static final Type<Basket> TYPE =\n+        SimpleType.simpleImmutableTypeFrom(\n+            TypeName.typeNameFromString(\"com.example/Basket\"),\n+            mapper::writeValueAsBytes,\n+            bytes -> mapper.readValue(bytes, Basket.class));\n+\n+    private final Map<String, Integer> basket;\n+\n+    public static Basket initEmpty() {\n+      return new Basket(new HashMap<>());\n+    }\n+\n+    @JsonCreator\n+    public Basket(Map<String, Integer> basket) {\n+      this.basket = basket;\n+    }\n+\n+    public void add(String itemId, int quantity) {\n+      basket.put(itemId, basket.getOrDefault(itemId, 0) + quantity);\n+    }\n+\n+    public void remove(String itemId, int quantity) {\n+      int remainder = basket.getOrDefault(itemId, 0) - quantity;\n+      if (remainder > 0) {\n+        basket.put(itemId, remainder);\n+      } else {\n+        basket.remove(itemId);\n+      }\n+    }\n+\n+    public Set<Map.Entry<String, Integer>> getEntries() {\n+      return basket.entrySet();\n+    }\n+\n+    public void clear() {\n+      basket.clear();\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"Basket{\" + \"basket=\" + basket + '}';\n+    }\n+  }\n+}"
  },
  {
    "sha": "4073895650084a9c50bc4ce4afadee48088bf6ed",
    "filename": "java/shopping-cart/src/main/statefun-config-sample/module.yaml",
    "status": "added",
    "additions": 71,
    "deletions": 0,
    "changes": 71,
    "blob_url": "https://github.com/apache/flink-statefun-playground/blob/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/statefun-config-sample/module.yaml",
    "raw_url": "https://github.com/apache/flink-statefun-playground/raw/c2380c300c600bd44ce1c74458d8306aceed3928/java/shopping-cart/src/main/statefun-config-sample/module.yaml",
    "contents_url": "https://api.github.com/repos/apache/flink-statefun-playground/contents/java/shopping-cart/src/main/statefun-config-sample/module.yaml?ref=c2380c300c600bd44ce1c74458d8306aceed3928",
    "patch": "@@ -0,0 +1,71 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+version: \"3.0\"\n+module:\n+  meta:\n+    type: remote\n+  spec:\n+    endpoints:\n+      - endpoint:\n+          meta:\n+            kind: http\n+          spec:\n+            typename:\n+              namespace: com.example\n+            urlPathTemplate: http://shopping-cart-service.statefun.svc:8080/statefun\n+            maxNumBatchRequests: 500\n+            timeouts:\n+              call: 2min\n+    ingresses:\n+      - ingress:\n+          meta:\n+            type: statefun.kafka.io/universal-ingress\n+            id: example.com/shopping-cart-updates\n+          spec:\n+            address: cp-cp-kafka.confluent-platform.svc:9092\n+            consumerGroupId: my-group-id\n+            topics:\n+              - topic: shopping-cart-updates\n+                # ? Unclear which type to use if multiple cart-related messages\n+                # (AddToCart/RemoveFromCart/ClearCart) are multiplexed in one topic. THe Python example uses a protobuf\n+                # envelope, but we decided to migrate this example to JSON. Type for generic JSON?\n+                typeUrl: com.example/AddToCart\n+                targets:\n+                  - com.example.fns/user-shopping-cart\n+      - ingress:\n+          meta:\n+            type: statefun.kafka.io/universal-ingress\n+            id: com.example/inventory-updates\n+          spec:\n+            address: cp-cp-kafka.confluent-platform.svc:9092\n+            consumerGroupId: my-group-id\n+            topics:\n+              - topic: inventory-updates\n+                # ? Unclear which type to use if multiple inventory-related messages\n+                # (RestockItem/RemoveItem/ReserveItemExternal) are multiplexed in one topic. The Python example uses a\n+                # protobuf envelope, but we decided to migrate this example to JSON. Type for generic JSON?\n+                typeUrl: com.example/RestockItem\n+                targets:\n+                  - com.example.fns/inventory\n+    egresses:\n+      - egress:\n+          meta:\n+            type: statefun.kafka.io/generic-egress\n+            id: com.example/receipts\n+          spec:\n+            address: cp-cp-kafka.confluent-platform.svc:9092\n+            deliverySemantic:\n+              type: exactly-once\n+              transactionTimeoutMillis: 100000\n\\ No newline at end of file"
  }
]
