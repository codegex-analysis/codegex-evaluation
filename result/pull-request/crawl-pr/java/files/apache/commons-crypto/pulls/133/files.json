[
  {
    "sha": "cf44da2e03f767265d66de136e45cf16613dc04e",
    "filename": "src/main/java/org/apache/commons/crypto/cipher/JceCipher.java",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/apache/commons-crypto/blob/0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java",
    "raw_url": "https://github.com/apache/commons-crypto/raw/0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java",
    "contents_url": "https://api.github.com/repos/apache/commons-crypto/contents/src/main/java/org/apache/commons/crypto/cipher/JceCipher.java?ref=0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb",
    "patch": "@@ -17,6 +17,8 @@\n  */\n package org.apache.commons.crypto.cipher;\n \n+import org.apache.commons.crypto.utils.Utils;\n+\n import java.nio.ByteBuffer;\n import java.security.GeneralSecurityException;\n import java.security.InvalidAlgorithmParameterException;\n@@ -49,7 +51,7 @@\n     public JceCipher(final Properties props, final String transformation)\n             throws GeneralSecurityException {\n         final String provider = props.getProperty(CryptoCipherFactory.JCE_PROVIDER_KEY);\n-        if (provider == null || provider.isEmpty()) {\n+        if (Utils.isEmpty(provider)) {\n             cipher = Cipher.getInstance(transformation);\n         } else {\n             cipher = Cipher.getInstance(transformation, provider);"
  },
  {
    "sha": "88866fe5abcab026e03657973a7ac6625cb751a3",
    "filename": "src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/commons-crypto/blob/0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java",
    "raw_url": "https://github.com/apache/commons-crypto/raw/0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java",
    "contents_url": "https://api.github.com/repos/apache/commons-crypto/contents/src/main/java/org/apache/commons/crypto/stream/CryptoInputStream.java?ref=0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb",
    "patch": "@@ -610,7 +610,7 @@ static void freeDirectBuffer(final ByteBuffer buffer) {\n      * */\n     static int getBufferSize(final Properties props) {\n         final String bufferSizeStr = props.getProperty(CryptoInputStream.STREAM_BUFFER_SIZE_KEY);\n-        if (bufferSizeStr == null || bufferSizeStr.isEmpty()) {\n+        if (Utils.isEmpty(bufferSizeStr)) {\n             return CryptoInputStream.STREAM_BUFFER_SIZE_DEFAULT;\n         }\n         return Integer.parseInt(bufferSizeStr);"
  },
  {
    "sha": "4ddc36ef76f21d3ee2d4fbc7c9cff5e5688926d8",
    "filename": "src/main/java/org/apache/commons/crypto/utils/Utils.java",
    "status": "modified",
    "additions": 19,
    "deletions": 1,
    "changes": 20,
    "blob_url": "https://github.com/apache/commons-crypto/blob/0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb/src/main/java/org/apache/commons/crypto/utils/Utils.java",
    "raw_url": "https://github.com/apache/commons-crypto/raw/0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb/src/main/java/org/apache/commons/crypto/utils/Utils.java",
    "contents_url": "https://api.github.com/repos/apache/commons-crypto/contents/src/main/java/org/apache/commons/crypto/utils/Utils.java?ref=0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb",
    "patch": "@@ -211,7 +211,7 @@ public static void checkState(final boolean expression, final String message) {\n      */\n     public static List<String> splitClassNames(final String clazzNames, final String separator) {\n         final List<String> res = new ArrayList<>();\n-        if (clazzNames == null || clazzNames.isEmpty()) {\n+        if (isEmpty(clazzNames)) {\n             return res;\n         }\n \n@@ -224,4 +224,22 @@ public static void checkState(final boolean expression, final String message) {\n         return res;\n     }\n \n+    /**\n+     * Checks if an String is empty or null.\n+     *\n+     * <pre>\n+     * Utils.isEmpty(null)             = true\n+     * Utils.isEmpty(\"\")               = true\n+     * Utils.isEmpty(\"abg\")            = false\n+     * </pre>\n+     *\n+     * @param str  the {@code String} to test, may be {@code null}\n+     * @return {@code true} if the String is empty or null,\n+     * {@code false} otherwise\n+     * @since 1.1.1\n+     */\n+    public static boolean isEmpty(final String str) {\n+        return str == null || str.isEmpty();\n+    }\n+\n }"
  },
  {
    "sha": "a66df8d86a97c6115119d7fa38283ab6badaa021",
    "filename": "src/test/java/org/apache/commons/crypto/utils/UtilsTest.java",
    "status": "modified",
    "additions": 11,
    "deletions": 1,
    "changes": 12,
    "blob_url": "https://github.com/apache/commons-crypto/blob/0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb/src/test/java/org/apache/commons/crypto/utils/UtilsTest.java",
    "raw_url": "https://github.com/apache/commons-crypto/raw/0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb/src/test/java/org/apache/commons/crypto/utils/UtilsTest.java",
    "contents_url": "https://api.github.com/repos/apache/commons-crypto/contents/src/test/java/org/apache/commons/crypto/utils/UtilsTest.java?ref=0d32ead2aa23fb73e2b4b5e2eb6c074a7062f2bb",
    "patch": "@@ -25,9 +25,11 @@\n import java.util.Properties;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n \n-public class UtilsTest {\n+ public class UtilsTest {\n     @Test\n     public void testSplitOmitEmptyLine() {\n         List<String> clazzNames = Utils.splitClassNames(\"\", \",\");\n@@ -55,4 +57,12 @@ public void testGetProperties() {\n         final Properties allprops = Utils.getProperties(props);\n         assertEquals(allprops.getProperty(\"garbage.in\"), \"out\");\n     }\n+\n+    @Test\n+    public void testIsEmpty() {\n+        assertTrue(Utils.isEmpty(null));\n+        assertTrue(Utils.isEmpty(\"\"));\n+        assertFalse(Utils.isEmpty(\"  \"));\n+        assertFalse(Utils.isEmpty(\"abg\"));\n+    }\n }"
  }
]
