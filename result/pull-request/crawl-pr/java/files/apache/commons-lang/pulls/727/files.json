[
  {
    "sha": "fcfa646bd783abce35eaa162b622d4bbdaacf633",
    "filename": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
    "status": "modified",
    "additions": 50,
    "deletions": 1,
    "changes": 51,
    "blob_url": "https://github.com/apache/commons-lang/blob/4d1292421d3caabd9abe6ee32b71010e6b5c45f1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
    "raw_url": "https://github.com/apache/commons-lang/raw/4d1292421d3caabd9abe6ee32b71010e6b5c45f1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
    "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/math/NumberUtils.java?ref=4d1292421d3caabd9abe6ee32b71010e6b5c45f1",
    "patch": "@@ -69,7 +69,6 @@\n     public static final Float FLOAT_ONE = Float.valueOf(1.0f);\n     /** Reusable Float constant for minus one. */\n     public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n-\n     /**\n      * {@link Integer#MAX_VALUE} as a {@link Long}.\n      *\n@@ -1715,6 +1714,56 @@ public static boolean isCreatable(final String str) {\n         return !allowSigns && foundDigit;\n     }\n \n+    /**\n+     * Checks whether the given String is a hex number.\n+     *\n+     * <p>Valid parameter only include hexadecimal marked with the {@code 0x} or\n+     * {@code 0X} or {@code #} qualifier.</p>\n+     *\n+     * <p>{@code Null} and empty String will return {@code false}.</p>\n+     *\n+     * <pre>\n+     * NumberUtils.isHexNumber(null))                 = false\n+     * NumberUtils.isHexNumber(\"\"))                   = false\n+     * NumberUtils.isHexNumber(\"0x12345678\"))         = true\n+     * NumberUtils.isHexNumber(\"0x7fffffffffffffff\")) = true\n+     * NumberUtils.isHexNumber(\"0x7FFFFFFFFFFFFFFF\")) = true\n+     * NumberUtils.isHexNumber(\"5D0\"))                = false\n+     * NumberUtils.isHexNumber(\"0x\"))                 = false\n+     * NumberUtils.isHexNumber(\"+0xF\"))               = true\n+     * NumberUtils.isHexNumber(\"-0xF\"))               = true\n+     * </pre>\n+     *\n+     * @param str the String to check.\n+     * @return {@code true} if the string is a hex number.\n+     * @since 3.12.1\n+     */\n+    public static boolean isHexNumber(final String str) {\n+        if (StringUtils.isEmpty(str) || str.length() <= 2) {\n+            return false;\n+        }\n+        final char[] chars = str.toCharArray();\n+        final int offset = chars[0] == '-' || chars[0] == '+' ? 1 : 0;\n+        int pfxLen = 0;\n+        final String[] hex_prefixes = {\"0x\", \"0X\", \"#\"};\n+        for (final String pfx : hex_prefixes) {\n+            if (str.startsWith(pfx, offset)) {\n+                pfxLen += pfx.length() + offset;\n+                break;\n+            }\n+        }\n+        if (pfxLen == 0) {\n+            return false;\n+        }\n+        for (; pfxLen < chars.length; pfxLen++) {\n+            if ((chars[pfxLen] < '0' || chars[pfxLen] > '9')\n+                    && (chars[pfxLen] < 'a' || chars[pfxLen] > 'f')\n+                    && (chars[pfxLen] < 'A' || chars[pfxLen] > 'F')) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n     /**\n      * <p>Checks whether the given String is a parsable number.</p>\n      *"
  },
  {
    "sha": "9219c4a9b575e1f7601b4c82170adb22a4cc6b01",
    "filename": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
    "status": "modified",
    "additions": 36,
    "deletions": 0,
    "changes": 36,
    "blob_url": "https://github.com/apache/commons-lang/blob/4d1292421d3caabd9abe6ee32b71010e6b5c45f1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
    "raw_url": "https://github.com/apache/commons-lang/raw/4d1292421d3caabd9abe6ee32b71010e6b5c45f1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
    "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java?ref=4d1292421d3caabd9abe6ee32b71010e6b5c45f1",
    "patch": "@@ -711,6 +711,42 @@ public void testIsDigits() {\n         assertFalse(NumberUtils.isDigits(\"abc\"), \"isDigits(String) neg 4 failed\");\n     }\n \n+    /**\n+     * Test for {@link NumberUtils#isHexNumber(String)}\n+     */\n+    @Test\n+    public void testIsHexNumber() {\n+        assertTrue(NumberUtils.isHexNumber(\"+0xF\"));\n+        assertTrue(NumberUtils.isHexNumber(\"-0xF\"));\n+        assertFalse(NumberUtils.isHexNumber(\"0X\"));\n+        assertTrue(NumberUtils.isHexNumber(\"0X1\"));\n+        assertFalse(NumberUtils.isHexNumber(\"0x\"));\n+        assertFalse(NumberUtils.isHexNumber(\"a\"));\n+        assertFalse(NumberUtils.isHexNumber(\"X\"));\n+        assertFalse(NumberUtils.isHexNumber(null));\n+        assertFalse(NumberUtils.isHexNumber(\"\"));\n+        assertTrue(NumberUtils.isHexNumber(\"0x12345678\"));\n+        assertTrue(NumberUtils.isHexNumber(\"0x123456789\"));\n+        assertTrue(NumberUtils.isHexNumber(\"0x7fffffffffffffff\"));\n+        assertTrue(NumberUtils.isHexNumber(\"0x7FFFFFFFFFFFFFFF\"));\n+        assertFalse(NumberUtils.isHexNumber(\"5D0\"));\n+        assertFalse(NumberUtils.isHexNumber(\"6C370D\"));\n+        assertFalse(NumberUtils.isHexNumber(\"FFE329AC\"));\n+        assertFalse(NumberUtils.isHexNumber(\"130E639\"));\n+        assertTrue(NumberUtils.isHexNumber(\"0xff\"));\n+        assertFalse(NumberUtils.isHexNumber(\"0xffX\"));\n+        assertFalse(NumberUtils.isHexNumber(\"0x\"));\n+        assertTrue(NumberUtils.isHexNumber(\"0x12345678\"));\n+        assertTrue(NumberUtils.isHexNumber(\"0x7fffffffffffffff0\"));\n+        assertFalse(NumberUtils.isHexNumber(\"01777777777777777777777\"));\n+        assertTrue(NumberUtils.isHexNumber(\"-0xABC123\"));\n+        assertTrue(NumberUtils.isHexNumber(\"-0x0\"));\n+        assertTrue(NumberUtils.isHexNumber(\"+#FFFFFFFFFFFFFFFF\"));\n+        assertTrue(NumberUtils.isHexNumber(\"0xFFFFFFFFFFFFFFFF\"));\n+        assertFalse(NumberUtils.isHexNumber(new BigInteger(String.valueOf(Integer.MAX_VALUE), 16).toString()));\n+        assertFalse(NumberUtils.isHexNumber(Integer.toHexString(Integer.MAX_VALUE)));\n+    }\n+\n     /**\n      * Tests isCreatable(String) and tests that createNumber(String) returns a valid number iff isCreatable(String)\n      * returns false."
  }
]
