[
  {
    "sha": "e2440be296ed7529dd5097be711a712931d6aeb3",
    "filename": "hbase-hbck2/src/main/java/org/apache/hbase/HBCK2.java",
    "status": "modified",
    "additions": 11,
    "deletions": 7,
    "changes": 18,
    "blob_url": "https://github.com/apache/hbase-operator-tools/blob/c5c84e6f00e18ed519058a2fbfedcd53ff860017/hbase-hbck2/src/main/java/org/apache/hbase/HBCK2.java",
    "raw_url": "https://github.com/apache/hbase-operator-tools/raw/c5c84e6f00e18ed519058a2fbfedcd53ff860017/hbase-hbck2/src/main/java/org/apache/hbase/HBCK2.java",
    "contents_url": "https://api.github.com/repos/apache/hbase-operator-tools/contents/hbase-hbck2/src/main/java/org/apache/hbase/HBCK2.java?ref=c5c84e6f00e18ed519058a2fbfedcd53ff860017",
    "patch": "@@ -528,7 +528,7 @@ private static void usageFixMeta(PrintWriter writer) {\n   }\n \n   private static void usageGenerateMissingTableInfo(PrintWriter writer) {\n-    writer.println(\" \" + GENERATE_TABLE_INFO + \" <TABLENAME>\");\n+    writer.println(\" \" + GENERATE_TABLE_INFO + \" [OPTIONS] [<TABLENAME>...]\");\n     writer.println(\"   Trying to fix an orphan table by generating a missing table descriptor\");\n     writer.println(\"   file. This command will have no effect if the table folder is missing\");\n     writer.println(\"   or if the .tableinfo is present (we don't override existing table\");\n@@ -546,7 +546,8 @@ private static void usageGenerateMissingTableInfo(PrintWriter writer) {\n     writer.println(\"   This method does not change anything in HBase, only writes the new\");\n     writer.println(\"   .tableinfo file to the file system. Orphan tables can cause e.g.\");\n     writer.println(\"   ServerCrashProcedures to stuck, you might need to fix these still\");\n-    writer.println(\"   after you generated the missing table info files.\");\n+    writer.println(\"   after you generated the missing table info files. If no tables are \");\n+    writer.println(\"   specified, .tableinfo will be genrated for all missing table descriptors.\");\n   }\n \n   private static void usageReplication(PrintWriter writer) {\n@@ -947,13 +948,16 @@ private int doCommandLine(CommandLine commandLine, Options options) throws IOExc\n         break;\n \n       case GENERATE_TABLE_INFO:\n-        if(commands.length != 2) {\n-          showErrorMessage(command + \" takes one table name as argument.\");\n+        List<String> tableNames = Arrays.asList(purgeFirst(commands));\n+        MissingTableDescriptorGenerator tableInfoGenerator =\n+            new MissingTableDescriptorGenerator(getConf());\n+        try (ClusterConnection connection = connect()) {\n+          tableInfoGenerator\n+              .generateTableDescriptorFileIfMissing(connection.getAdmin(), tableNames);\n+        } catch (IOException e) {\n+          showErrorMessage(e.getMessage());\n           return EXIT_FAILURE;\n         }\n-        MissingTableDescriptorGenerator tableInfoGenerator =\n-          new MissingTableDescriptorGenerator(getConf());\n-        tableInfoGenerator.generateTableDescriptorFileIfMissing(commands[1].trim());\n         break;\n \n       default:"
  },
  {
    "sha": "842ec95514e85afbf592cc475a349d488f6b0e18",
    "filename": "hbase-hbck2/src/main/java/org/apache/hbase/MissingTableDescriptorGenerator.java",
    "status": "modified",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/apache/hbase-operator-tools/blob/c5c84e6f00e18ed519058a2fbfedcd53ff860017/hbase-hbck2/src/main/java/org/apache/hbase/MissingTableDescriptorGenerator.java",
    "raw_url": "https://github.com/apache/hbase-operator-tools/raw/c5c84e6f00e18ed519058a2fbfedcd53ff860017/hbase-hbck2/src/main/java/org/apache/hbase/MissingTableDescriptorGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/hbase-operator-tools/contents/hbase-hbck2/src/main/java/org/apache/hbase/MissingTableDescriptorGenerator.java?ref=c5c84e6f00e18ed519058a2fbfedcd53ff860017",
    "patch": "@@ -18,6 +18,7 @@\n package org.apache.hbase;\n \n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n@@ -105,6 +106,20 @@ public void generateTableDescriptorFileIfMissing(String tableNameAsString) {\n \n   }\n \n+  public void generateTableDescriptorFileIfMissing(Admin admin, List<String> tableNamesAsString)\n+      throws IOException {\n+    // if the list is empty, need to check for all tables\n+    if (tableNamesAsString.isEmpty()) {\n+      List<TableName> tableNameList = Arrays.asList(admin.listTableNames());\n+      for (TableName tableName : tableNameList) {\n+        tableNamesAsString.add(tableName.getNameAsString());\n+      }\n+    }\n+    for (String table : tableNamesAsString) {\n+      generateTableDescriptorFileIfMissing(table);\n+    }\n+  }\n+\n   private void assertTableFolderIsPresent(TableName tableName) {\n     final Path tableDir = HBCKFsUtils.getTableDir(rootDir, tableName);\n     try {"
  },
  {
    "sha": "fe92e360c7af38ee2994b29c27ff30a27f452831",
    "filename": "hbase-hbck2/src/test/java/org/apache/hbase/TestMissingTableDescriptorGenerator.java",
    "status": "modified",
    "additions": 71,
    "deletions": 39,
    "changes": 110,
    "blob_url": "https://github.com/apache/hbase-operator-tools/blob/c5c84e6f00e18ed519058a2fbfedcd53ff860017/hbase-hbck2/src/test/java/org/apache/hbase/TestMissingTableDescriptorGenerator.java",
    "raw_url": "https://github.com/apache/hbase-operator-tools/raw/c5c84e6f00e18ed519058a2fbfedcd53ff860017/hbase-hbck2/src/test/java/org/apache/hbase/TestMissingTableDescriptorGenerator.java",
    "contents_url": "https://api.github.com/repos/apache/hbase-operator-tools/contents/hbase-hbck2/src/test/java/org/apache/hbase/TestMissingTableDescriptorGenerator.java?ref=c5c84e6f00e18ed519058a2fbfedcd53ff860017",
    "patch": "@@ -21,6 +21,8 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.hadoop.conf.Configuration;\n@@ -42,7 +44,11 @@\n \n   private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n   private static final String TABLE_NAME_AS_STRING = \"test-1\";\n+  private static final String TABLE_NAME_2_AS_STRING = \"test-2\";\n+  private static final String TABLE_NAME_3_AS_STRING = \"test-3\";\n   private static final TableName TABLE_NAME = TableName.valueOf(TABLE_NAME_AS_STRING);\n+  private static final TableName TABLE_NAME_2 = TableName.valueOf(TABLE_NAME_2_AS_STRING);\n+  private static final TableName TABLE_NAME_3 = TableName.valueOf(TABLE_NAME_3_AS_STRING);\n   private static final byte[] FAMILY_A = Bytes.toBytes(\"familyA\");\n   private static final byte[] FAMILY_B = Bytes.toBytes(\"familyB\");\n   private static final List<ColumnFamilyDescriptor> COLUMN_FAMILIES = asList(\n@@ -54,6 +60,16 @@\n       .setColumnFamilies(COLUMN_FAMILIES)\n       .build();\n \n+  private static final TableDescriptor TABLE_INFO_2_WITH_DEFAULT_PARAMS =\n+      TableDescriptorBuilder.newBuilder(TABLE_NAME_2)\n+          .setColumnFamilies(COLUMN_FAMILIES)\n+          .build();\n+\n+  private static final TableDescriptor TABLE_INFO_3_WITH_DEFAULT_PARAMS =\n+      TableDescriptorBuilder.newBuilder(TABLE_NAME_3)\n+          .setColumnFamilies(COLUMN_FAMILIES)\n+          .build();\n+\n   private static final TableDescriptor TABLE_INFO_WITH_CUSTOM_MAX_FILE_SIZE =\n     TableDescriptorBuilder.newBuilder(TABLE_NAME)\n       .setColumnFamilies(COLUMN_FAMILIES)\n@@ -90,27 +106,10 @@ public void shouldGenerateTableInfoBasedOnCachedTableDescriptor() throws Excepti\n     // remove the .tableinfo file\n     tableDescriptorUtil.deleteTableDescriptorIfExists(TABLE_NAME);\n \n-    // regenerate the .tableinfo file\n-    missingTableDescriptorGenerator.generateTableDescriptorFileIfMissing(TABLE_NAME_AS_STRING);\n-\n-    // verify table info file content (as the table descriptor should be restored based on the\n-    // cache in HBase Master, we expect the maxFileSize to be set to the non-default value)\n-    TableDescriptor descriptor =\n-      HBCKFsTableDescriptors.getTableDescriptorFromFs(fs, rootDir, TABLE_NAME);\n-    assertEquals(TABLE_NAME.getNameAsString(), descriptor.getTableName().getNameAsString());\n-    assertTrue(descriptor.hasColumnFamily(FAMILY_A));\n-    assertTrue(descriptor.hasColumnFamily(FAMILY_B));\n-    assertEquals(CUSTOM_MAX_FILE_SIZE, descriptor.getMaxFileSize());\n-\n-    // restart the cluster (the table descriptor cache should be reinitialized in the HBase Master)\n-    TEST_UTIL.shutdownMiniHBaseCluster();\n-    Thread.sleep(2000);\n-    TEST_UTIL.restartHBaseCluster(1);\n+    List<String> tableNames = new ArrayList<>();\n+    tableNames.add(TABLE_NAME_AS_STRING);\n+    generateAndVerifyTableDescriptor(tableNames, CUSTOM_MAX_FILE_SIZE);\n \n-    // verify the table is working\n-    try(Table table = TEST_UTIL.getConnection().getTable(TABLE_NAME)) {\n-      TEST_UTIL.loadRandomRows(table, FAMILY_A, 10, 10);\n-    }\n   }\n \n   @Test\n@@ -129,27 +128,60 @@ public void shouldGenerateTableInfoBasedOnFileSystem() throws Exception {\n     Thread.sleep(2000);\n     TEST_UTIL.restartHBaseCluster(1);\n \n+    List<String> tableNames = new ArrayList<>();\n+    tableNames.add(TABLE_NAME_AS_STRING);\n+\n     // regenerate the .tableinfo file\n-    missingTableDescriptorGenerator.generateTableDescriptorFileIfMissing(TABLE_NAME_AS_STRING);\n-\n-    // verify table info file content (as the table descriptor should be restored based on the\n-    // file system, we expect the maxFileSize to be set to the default value)\n-    TableDescriptor descriptor =\n-      HBCKFsTableDescriptors.getTableDescriptorFromFs(fs, rootDir, TABLE_NAME);\n-    assertEquals(TABLE_NAME.getNameAsString(), descriptor.getTableName().getNameAsString());\n-    assertTrue(descriptor.hasColumnFamily(FAMILY_A));\n-    assertTrue(descriptor.hasColumnFamily(FAMILY_B));\n-    assertEquals(TABLE_INFO_WITH_DEFAULT_PARAMS.getMaxFileSize(), descriptor.getMaxFileSize());\n-\n-    // restart the cluster again\n-    TEST_UTIL.shutdownMiniHBaseCluster();\n-    Thread.sleep(2000);\n-    TEST_UTIL.restartHBaseCluster(1);\n+    generateAndVerifyTableDescriptor(tableNames, TABLE_INFO_WITH_DEFAULT_PARAMS.getMaxFileSize());\n+  }\n+\n+  @Test\n+  public void testTableinfoGeneratedWhenNoTableSpecified() throws Exception {\n+    TEST_UTIL.createTable(TABLE_INFO_WITH_DEFAULT_PARAMS, null);\n+    TEST_UTIL.createTable(TABLE_INFO_2_WITH_DEFAULT_PARAMS, null);\n+    TEST_UTIL.createTable(TABLE_INFO_3_WITH_DEFAULT_PARAMS, null);\n+\n+    // remove the .tableinfo files\n+    tableDescriptorUtil.deleteTableDescriptorIfExists(TABLE_NAME);\n+    tableDescriptorUtil.deleteTableDescriptorIfExists(TABLE_NAME_2);\n+    tableDescriptorUtil.deleteTableDescriptorIfExists(TABLE_NAME_3);\n+\n+    List<String> tableNames = new ArrayList<>();\n+    // pass empty list and check if all the tables repaired\n+    generateAndVerifyTableDescriptor(tableNames, TABLE_INFO_WITH_DEFAULT_PARAMS.getMaxFileSize());\n \n-    // verify the table is working\n-    try(Table table = TEST_UTIL.getConnection().getTable(TABLE_NAME)) {\n-      TEST_UTIL.loadRandomRows(table, FAMILY_A, 10, 10);\n-    }\n   }\n \n+  private void generateAndVerifyTableDescriptor(List<String> tableNames, long customMaxFileSize)\n+      throws IOException, InterruptedException {\n+    // regenerate the .tableinfo file\n+    missingTableDescriptorGenerator\n+        .generateTableDescriptorFileIfMissing(TEST_UTIL.getAdmin(), tableNames);\n+\n+    // list all the tables\n+    TableName[] tables = TEST_UTIL.getAdmin().listTableNames();\n+\n+    // verify .tableinfo for all tables\n+    for (TableName table : tables) {\n+      // verify table info file content (as the table descriptor should be restored based on the\n+      // cache in HBase Master, we expect the maxFileSize to be set to the non-default value)\n+      TableDescriptor descriptor =\n+          HBCKFsTableDescriptors.getTableDescriptorFromFs(fs, rootDir, table);\n+      assertEquals(table.getNameAsString(), descriptor.getTableName().getNameAsString());\n+      assertTrue(descriptor.hasColumnFamily(FAMILY_A));\n+      assertTrue(descriptor.hasColumnFamily(FAMILY_B));\n+      assertEquals(customMaxFileSize, descriptor.getMaxFileSize());\n+\n+      // restart the cluster (the table descriptor cache should be reinitialized in the HBase\n+      // Master)\n+      TEST_UTIL.shutdownMiniHBaseCluster();\n+      Thread.sleep(2000);\n+      TEST_UTIL.restartHBaseCluster(1);\n+\n+      // verify the table is working\n+      try (Table htable = TEST_UTIL.getConnection().getTable(table)) {\n+        TEST_UTIL.loadRandomRows(htable, FAMILY_A, 10, 10);\n+      }\n+    }\n+  }\n }"
  }
]
