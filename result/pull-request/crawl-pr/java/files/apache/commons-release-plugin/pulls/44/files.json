[
  {
    "sha": "a0447932672e863081307276e1788ef8637400f0",
    "filename": "src/main/java/org/apache/commons/release/plugin/mojos/CommonsDistributionDetachmentMojo.java",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/apache/commons-release-plugin/blob/b3c725d0764f95bad2dffa0af0e266afdbed1719/src/main/java/org/apache/commons/release/plugin/mojos/CommonsDistributionDetachmentMojo.java",
    "raw_url": "https://github.com/apache/commons-release-plugin/raw/b3c725d0764f95bad2dffa0af0e266afdbed1719/src/main/java/org/apache/commons/release/plugin/mojos/CommonsDistributionDetachmentMojo.java",
    "contents_url": "https://api.github.com/repos/apache/commons-release-plugin/contents/src/main/java/org/apache/commons/release/plugin/mojos/CommonsDistributionDetachmentMojo.java?ref=b3c725d0764f95bad2dffa0af0e266afdbed1719",
    "patch": "@@ -17,10 +17,11 @@\n package org.apache.commons.release.plugin.mojos;\n \n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.io.PrintWriter;\n+import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -153,7 +154,7 @@ private void putAttachedArtifactInSha512Map(final Artifact artifact) throws Mojo\n         try {\n             final String artifactKey = getArtifactKey(artifact);\n             if (!artifactKey.endsWith(\".asc\")) { // .asc files don't need hashes\n-                try (FileInputStream fis = new FileInputStream(artifact.getFile())) {\n+                try (InputStream fis = Files.newInputStream(artifact.getFile().toPath())) {\n                     artifactSha512s.put(artifactKey, DigestUtils.sha512Hex(fis));\n                 }\n             }\n@@ -179,7 +180,7 @@ private void putAttachedArtifactInSha512Map(final Artifact artifact) throws Mojo\n     private void writeAllArtifactsInSha512PropertiesFile() throws MojoExecutionException {\n         final File propertiesFile = new File(workingDirectory, \"sha512.properties\");\n         getLog().info(\"Writing \" + propertiesFile);\n-        try (FileOutputStream fileWriter = new FileOutputStream(propertiesFile)) {\n+        try (OutputStream fileWriter = Files.newOutputStream(propertiesFile.toPath())) {\n             artifactSha512s.store(fileWriter, \"Release SHA-512s\");\n         } catch (final IOException e) {\n             throw new MojoExecutionException(\"Failure to write SHA-512's\", e);"
  },
  {
    "sha": "e067e80471c22c6e434f694e7db93faa1a29593b",
    "filename": "src/main/java/org/apache/commons/release/plugin/mojos/CommonsDistributionStagingMojo.java",
    "status": "modified",
    "additions": 5,
    "deletions": 3,
    "changes": 8,
    "blob_url": "https://github.com/apache/commons-release-plugin/blob/b3c725d0764f95bad2dffa0af0e266afdbed1719/src/main/java/org/apache/commons/release/plugin/mojos/CommonsDistributionStagingMojo.java",
    "raw_url": "https://github.com/apache/commons-release-plugin/raw/b3c725d0764f95bad2dffa0af0e266afdbed1719/src/main/java/org/apache/commons/release/plugin/mojos/CommonsDistributionStagingMojo.java",
    "contents_url": "https://api.github.com/repos/apache/commons-release-plugin/contents/src/main/java/org/apache/commons/release/plugin/mojos/CommonsDistributionStagingMojo.java?ref=b3c725d0764f95bad2dffa0af0e266afdbed1719",
    "patch": "@@ -17,11 +17,11 @@\n package org.apache.commons.release.plugin.mojos;\n \n import java.io.File;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.OutputStreamWriter;\n import java.io.Writer;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n@@ -441,7 +441,8 @@ private File copySignatureValidatorScriptToScmDirectory() throws MojoExecutionEx\n         //\n         // HEADER file\n         //\n-        try (Writer headerWriter = new OutputStreamWriter(new FileOutputStream(headerFile), StandardCharsets.UTF_8)) {\n+        try (Writer headerWriter = new OutputStreamWriter(Files.newOutputStream(headerFile.toPath()),\n+                StandardCharsets.UTF_8)) {\n             HeaderHtmlVelocityDelegate.builder().build().render(headerWriter);\n         } catch (final IOException e) {\n             final String message = \"Could not build HEADER html file \" + headerFile;\n@@ -453,7 +454,8 @@ private File copySignatureValidatorScriptToScmDirectory() throws MojoExecutionEx\n         // README file\n         //\n         final File readmeFile = new File(distRcVersionDirectory, README_FILE_NAME);\n-        try (Writer readmeWriter = new OutputStreamWriter(new FileOutputStream(readmeFile), StandardCharsets.UTF_8)) {\n+        try (Writer readmeWriter = new OutputStreamWriter(Files.newOutputStream(readmeFile.toPath()),\n+                StandardCharsets.UTF_8)) {\n             // @formatter:off\n             final ReadmeHtmlVelocityDelegate readmeHtmlVelocityDelegate = ReadmeHtmlVelocityDelegate.builder()\n                     .withArtifactId(project.getArtifactId())"
  },
  {
    "sha": "d7c91d3caf5a8b52bd1f1b49437916a178b98b26",
    "filename": "src/main/java/org/apache/commons/release/plugin/mojos/CommonsSiteCompressionMojo.java",
    "status": "modified",
    "additions": 7,
    "deletions": 5,
    "changes": 12,
    "blob_url": "https://github.com/apache/commons-release-plugin/blob/b3c725d0764f95bad2dffa0af0e266afdbed1719/src/main/java/org/apache/commons/release/plugin/mojos/CommonsSiteCompressionMojo.java",
    "raw_url": "https://github.com/apache/commons-release-plugin/raw/b3c725d0764f95bad2dffa0af0e266afdbed1719/src/main/java/org/apache/commons/release/plugin/mojos/CommonsSiteCompressionMojo.java",
    "contents_url": "https://api.github.com/repos/apache/commons-release-plugin/contents/src/main/java/org/apache/commons/release/plugin/mojos/CommonsSiteCompressionMojo.java?ref=b3c725d0764f95bad2dffa0af0e266afdbed1719",
    "patch": "@@ -17,9 +17,10 @@\n package org.apache.commons.release.plugin.mojos;\n \n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.zip.ZipEntry;\n@@ -147,8 +148,9 @@ private void getAllSiteFiles(final File siteDirectory, final List<File> filesToC\n      */\n     private void writeZipFile(final File outputDirectory, final File directoryToZip, final List<File> fileList)\n             throws IOException {\n-        try (FileOutputStream fos = new FileOutputStream(outputDirectory.getAbsolutePath() + \"/site.zip\");\n-                ZipOutputStream zos = new ZipOutputStream(fos)) {\n+        try (OutputStream fos = Files.newOutputStream(new File(outputDirectory.getAbsolutePath() + \"/site.zip\")\n+                .toPath());\n+             ZipOutputStream zos = new ZipOutputStream(fos)) {\n             for (final File file : fileList) {\n                 if (!file.isDirectory()) { // we only zip files, not directories\n                     addToZip(directoryToZip, file, zos);\n@@ -168,7 +170,7 @@ private void writeZipFile(final File outputDirectory, final File directoryToZip,\n      * @throws IOException if adding the <code>file</code> doesn't work out properly.\n      */\n     private void addToZip(final File directoryToZip, final File file, final ZipOutputStream zos) throws IOException {\n-        try (FileInputStream fis = new FileInputStream(file)) {\n+        try (InputStream fis = Files.newInputStream(file.toPath())) {\n             // we want the zipEntry's path to be a relative path that is relative\n             // to the directory being zipped, so chop off the rest of the path\n             final String zipFilePath = file.getCanonicalPath().substring("
  }
]
