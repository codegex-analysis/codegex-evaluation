[
  {
    "sha": "0728c2e709fb90d936f7c53af19b88e76bd64215",
    "filename": "bin/zkEnv.sh",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/apache/zookeeper/blob/06c69ca2a6960f845204a74709d6f5315684e43a/bin/zkEnv.sh",
    "raw_url": "https://github.com/apache/zookeeper/raw/06c69ca2a6960f845204a74709d6f5315684e43a/bin/zkEnv.sh",
    "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/bin/zkEnv.sh?ref=06c69ca2a6960f845204a74709d6f5315684e43a",
    "patch": "@@ -70,11 +70,6 @@ then\n     ZOO_LOG_DIR=\"$ZOOKEEPER_PREFIX/logs\"\n fi\n \n-if [ \"x${ZOO_LOG4J_PROP}\" = \"x\" ]\n-then\n-    ZOO_LOG4J_PROP=\"INFO,CONSOLE\"\n-fi\n-\n if [[ -n \"$JAVA_HOME\" ]] && [[ -x \"$JAVA_HOME/bin/java\" ]];  then\n     JAVA=\"$JAVA_HOME/bin/java\"\n elif type -p java; then"
  },
  {
    "sha": "702024defca1adbbdb5ef7c89b19843c9a34f1e4",
    "filename": "bin/zkServer.sh",
    "status": "modified",
    "additions": 8,
    "deletions": 7,
    "changes": 15,
    "blob_url": "https://github.com/apache/zookeeper/blob/06c69ca2a6960f845204a74709d6f5315684e43a/bin/zkServer.sh",
    "raw_url": "https://github.com/apache/zookeeper/raw/06c69ca2a6960f845204a74709d6f5315684e43a/bin/zkServer.sh",
    "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/bin/zkServer.sh?ref=06c69ca2a6960f845204a74709d6f5315684e43a",
    "patch": "@@ -152,6 +152,10 @@ fi\n ZOO_LOG_FILE=${ZOO_LOG_FILE:-zookeeper-$USER-server-$HOSTNAME.log}\n _ZOO_DAEMON_OUT=\"$ZOO_LOG_DIR/zookeeper-$USER-server-$HOSTNAME.out\"\n \n+OPTIONAL_CNF=\"-Dzookeeper.log.file=${ZOO_LOG_FILE} -Dzookeeper.log.dir=${ZOO_LOG_DIR}\"\n+if [ \"x${ZOO_LOG4J_PROP}\" != \"x\" ]; then\n+    OPTIONAL_CNF=\"$OPTIONAL_CNF -Dzookeeper.root.logger=${ZOO_LOG4J_PROP}\"\n+fi\n case $1 in\n start)\n     echo  -n \"Starting zookeeper ... \"\n@@ -161,8 +165,7 @@ start)\n          exit 1\n       fi\n     fi\n-    nohup \"$JAVA\" $ZOO_DATADIR_AUTOCREATE \"-Dzookeeper.log.dir=${ZOO_LOG_DIR}\" \\\n-    \"-Dzookeeper.log.file=${ZOO_LOG_FILE}\" \"-Dzookeeper.root.logger=${ZOO_LOG4J_PROP}\" \\\n+    nohup \"$JAVA\" $ZOO_DATADIR_AUTOCREATE $OPTIONAL_CNF \\\n     -XX:+HeapDumpOnOutOfMemoryError -XX:OnOutOfMemoryError='kill -9 %p' \\\n     -cp \"$CLASSPATH\" $JVMFLAGS $ZOOMAIN \"$ZOOCFG\" > \"$_ZOO_DAEMON_OUT\" 2>&1 < /dev/null &\n     if [ $? -eq 0 ]\n@@ -199,14 +202,12 @@ start-foreground)\n     if [ \"${ZOO_NOEXEC}\" != \"\" ]; then\n       ZOO_CMD=(\"$JAVA\")\n     fi\n-    \"${ZOO_CMD[@]}\" $ZOO_DATADIR_AUTOCREATE \"-Dzookeeper.log.dir=${ZOO_LOG_DIR}\" \\\n-    \"-Dzookeeper.log.file=${ZOO_LOG_FILE}\" \"-Dzookeeper.root.logger=${ZOO_LOG4J_PROP}\" \\\n+    \"${ZOO_CMD[@]}\" $ZOO_DATADIR_AUTOCREATE $OPTIONAL_CNF \\\n     -XX:+HeapDumpOnOutOfMemoryError -XX:OnOutOfMemoryError='kill -9 %p' \\\n     -cp \"$CLASSPATH\" $JVMFLAGS $ZOOMAIN \"$ZOOCFG\"\n     ;;\n print-cmd)\n-    echo \"\\\"$JAVA\\\" $ZOO_DATADIR_AUTOCREATE -Dzookeeper.log.dir=\\\"${ZOO_LOG_DIR}\\\" \\\n-    -Dzookeeper.log.file=\\\"${ZOO_LOG_FILE}\\\" -Dzookeeper.root.logger=\\\"${ZOO_LOG4J_PROP}\\\" \\\n+    echo \"\\\"$JAVA\\\" $ZOO_DATADIR_AUTOCREATE $OPTIONAL_CNF \\\n     -XX:+HeapDumpOnOutOfMemoryError -XX:OnOutOfMemoryError='kill -9 %p' \\\n     -cp \\\"$CLASSPATH\\\" $JVMFLAGS $ZOOMAIN \\\"$ZOOCFG\\\" > \\\"$_ZOO_DAEMON_OUT\\\" 2>&1 < /dev/null\"\n     ;;\n@@ -282,7 +283,7 @@ status)\n       fi\n     fi\n     echo \"Client port found: $clientPort. Client address: $clientPortAddress. Client SSL: $isSSL.\"\n-    STAT=`\"$JAVA\" \"-Dzookeeper.log.dir=${ZOO_LOG_DIR}\" \"-Dzookeeper.root.logger=${ZOO_LOG4J_PROP}\" \"-Dzookeeper.log.file=${ZOO_LOG_FILE}\" \\\n+    STAT=`\"$JAVA\" $OPTIONAL_CNF \\\n           -cp \"$CLASSPATH\" $CLIENT_JVMFLAGS $JVMFLAGS org.apache.zookeeper.client.FourLetterWordMain \\\n           $clientPortAddress $clientPort srvr $isSSL 2> /dev/null    \\\n           | $GREP Mode`"
  },
  {
    "sha": "25a1ed9cfb3df227e3847cf6d37d45f75d147302",
    "filename": "zookeeper-docs/src/main/resources/markdown/zookeeperAdmin.md",
    "status": "modified",
    "additions": 21,
    "deletions": 0,
    "changes": 21,
    "blob_url": "https://github.com/apache/zookeeper/blob/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-docs/src/main/resources/markdown/zookeeperAdmin.md",
    "raw_url": "https://github.com/apache/zookeeper/raw/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-docs/src/main/resources/markdown/zookeeperAdmin.md",
    "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-docs/src/main/resources/markdown/zookeeperAdmin.md?ref=06c69ca2a6960f845204a74709d6f5315684e43a",
    "patch": "@@ -1168,6 +1168,27 @@ property, when available, is noted below.\n \n     The default value is false.\n \n+* *log4j.configuration.watch* :\n+  (Java system property: **zookeeper.log4j.configuration.watch**)\n+  **New in 3.8.0:**\n+  By default log4j configuration watcher is disabled. Set \"true\" to enable it.\n+  If enabled ZooKeeper server log levels can be changed without restarting the servers\n+  by just modifying the log4j configuration properties.\n+\n+* *log4j.configuration.watch.interval* :\n+  (Java system property: **zookeeper.log4j.configuration.watch.interval**)\n+  **New in 3.8.0:**\n+  Time interval in milliseconds when log4j configuration file is checked for any change in it.\n+  Default value is 60000\n+\n+* *log4j.configuration* :\n+  (Java system property: **zookeeper.log4j.configuration**)\n+  **New in 3.8.0:**\n+  Specifies the log4j configuration URL. If only file name is specified then file must be available in class path.\n+  Default value is log4j.properties\n+  Config examples:\n+  log4j.configuration=custom-log4j.properties\n+  log4j.configuration=file:/some/path/custom-log4j.properties\n \n <a name=\"sc_clusterOptions\"></a>\n "
  },
  {
    "sha": "712c5836631d1e70bb3f7c4086487d4a45869833",
    "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/log/Log4jConfigWatcher.java",
    "status": "added",
    "additions": 166,
    "deletions": 0,
    "changes": 166,
    "blob_url": "https://github.com/apache/zookeeper/blob/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-server/src/main/java/org/apache/zookeeper/log/Log4jConfigWatcher.java",
    "raw_url": "https://github.com/apache/zookeeper/raw/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-server/src/main/java/org/apache/zookeeper/log/Log4jConfigWatcher.java",
    "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/log/Log4jConfigWatcher.java?ref=06c69ca2a6960f845204a74709d6f5315684e43a",
    "patch": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.log;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Enumeration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Watches log4j configuration file for a change.\n+ * Reloads the configuration into memory whenever there is a change log4j configuration file.\n+ */\n+public class Log4jConfigWatcher {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Log4jConfigWatcher.class);\n+    private static final String DEFAULT_LOG4J_CONFIG = \"log4j.properties\";\n+\n+    // If log4j configuration is already watched then skip starting watch again\n+    private static boolean isWatching = false;\n+    static final String LOG4J_CONFIGURATION_WATCH = \"zookeeper.log4j.configuration.watch\";\n+    static final String LOG4J_CONFIGURATION_WATCH_INTERVAL =\n+        \"zookeeper.log4j.configuration.watch.interval\";\n+    // Default 60 seconds\n+    private static final int LOG4J_CONFIGURATION_WATCH_DEFAULT = 60000;\n+    static final String LOG4J_CONFIGURATION = \"zookeeper.log4j.configuration\";\n+\n+    /**\n+     * Watches log4j configuration file for a change if Log4jConfigWatcher feature is enabled.\n+     * Reloads the configuration into memory whenever there is a change in configuration file.\n+     * This method should be called only once per JVM. One thread\n+     * will be created to watch log4j configuration changes.\n+     */\n+    public static synchronized void watchLog4jConfiguration() {\n+        if (isWatching) {\n+            // Already watching, no need to initialize watcher again\n+            return;\n+        }\n+\n+        // This feature is disabled by default\n+        boolean log4jConfigWatchEnable = Boolean.getBoolean(LOG4J_CONFIGURATION_WATCH);\n+        if (log4jConfigWatchEnable) {\n+            LOGGER.info(\"log4j config watcher is enabled.\");\n+        } else {\n+            LOGGER.info(\"log4j config watcher is disabled.\");\n+            return;\n+        }\n+\n+        URL log4jUrl = getLog4jConfigUrl();\n+        if (log4jUrl == null) {\n+            LOGGER.warn(\"No log4j configuration file found to watch.\");\n+            return;\n+        }\n+\n+        String log4jConfigPath = log4jUrl.getPath();\n+        if (!new File(log4jConfigPath).exists()) {\n+            LOGGER.warn(\"Not watching for log4j config changes as file {} does not exist.\",\n+                log4jConfigPath);\n+            return;\n+        }\n+        int log4jConfigWatchInterval = getLog4jConfigWatchInterval();\n+        try {\n+            if (log4jConfigPath.endsWith(\".xml\")) {\n+                executeConfigureAndWatch(\"org.apache.log4j.xml.DOMConfigurator\", log4jUrl.getPath(),\n+                    log4jConfigWatchInterval);\n+            } else {\n+                executeConfigureAndWatch(\"org.apache.log4j.PropertyConfigurator\",\n+                    log4jUrl.getPath(), log4jConfigWatchInterval);\n+            }\n+            isWatching = true;\n+            LOGGER.info(\"Watching {} for changes with interval {} ms \", log4jConfigPath,\n+                log4jConfigWatchInterval);\n+        } catch (IOException e) {\n+            LOGGER.error(\"Failed to watch log4j configuration {}. error=\",\n+                log4jConfigPath, e);\n+        }\n+    }\n+\n+    private static int getLog4jConfigWatchInterval() {\n+        String intervalProp = getConfig(LOG4J_CONFIGURATION_WATCH_INTERVAL);\n+        if (intervalProp != null) {\n+            try {\n+                return Integer.parseInt(intervalProp);\n+            } catch (NumberFormatException e) {\n+                LOGGER.warn(\"Error while parsing interval property {} to integer.\"\n+                        + \" Default interval {} will be used\", intervalProp,\n+                    LOG4J_CONFIGURATION_WATCH_DEFAULT);\n+            }\n+        }\n+        return LOG4J_CONFIGURATION_WATCH_DEFAULT;\n+    }\n+\n+    private static String getConfig(String configName) {\n+        String property = System.getProperty(configName);\n+        return property == null ? null : property.trim();\n+    }\n+\n+    private static URL getLog4jConfigUrl() {\n+        String log4jConfiguration = getConfig(LOG4J_CONFIGURATION);\n+        if (null != log4jConfiguration && !log4jConfiguration.isEmpty()) {\n+            // Load the configuration if its configured.\n+            try {\n+                return new URL(log4jConfiguration);\n+            } catch (final MalformedURLException e) {\n+                // Ignore it, this happens when only file name is specified\n+                // which should be searched in classpath\n+            }\n+            return getUrl(log4jConfiguration);\n+        } else {\n+            return getUrl(DEFAULT_LOG4J_CONFIG);\n+        }\n+    }\n+\n+    private static URL getUrl(String log4jConfiguration) {\n+        try {\n+            Enumeration<URL> resources =\n+                Log4jConfigWatcher.class.getClassLoader().getResources(log4jConfiguration);\n+            while (resources.hasMoreElements()) {\n+                URL url = resources.nextElement();\n+                if (url.getPath().contains(\".jar\")) {\n+                    // log4j configuration file in jar file can not be watched for modification\n+                    LOGGER.debug(\"Skipping log4j configuration {}\", url.getPath());\n+                    continue;\n+                }\n+                return url;\n+            }\n+        } catch (IOException e) {\n+            LOGGER.warn(\"Error while searching resource {}, error={}\", log4jConfiguration, e);\n+        }\n+        return null;\n+    }\n+\n+    private static void executeConfigureAndWatch(String className, String configFilename,\n+        long delay) throws IOException {\n+        try {\n+            Class<?> log4jConfigMgrClass = Class.forName(className);\n+            // log4j configureAndWatch method\n+            Method configureAndWatchMethod =\n+                log4jConfigMgrClass.getMethod(\"configureAndWatch\", String.class, long.class);\n+            configureAndWatchMethod.invoke(log4jConfigMgrClass, configFilename, delay);\n+        } catch (ClassNotFoundException | NoSuchMethodException\n+            | InvocationTargetException | IllegalAccessException e) {\n+            throw new IOException(e);\n+        }\n+    }\n+}"
  },
  {
    "sha": "106fea762dc1a318c948622f092d7640de1ebbb9",
    "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://github.com/apache/zookeeper/blob/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java",
    "raw_url": "https://github.com/apache/zookeeper/raw/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java",
    "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java?ref=06c69ca2a6960f845204a74709d6f5315684e43a",
    "patch": "@@ -24,6 +24,7 @@\n import org.apache.yetus.audience.InterfaceAudience;\n import org.apache.zookeeper.audit.ZKAuditProvider;\n import org.apache.zookeeper.jmx.ManagedUtil;\n+import org.apache.zookeeper.log.Log4jConfigWatcher;\n import org.apache.zookeeper.metrics.MetricsProvider;\n import org.apache.zookeeper.metrics.MetricsProviderLifeCycleException;\n import org.apache.zookeeper.metrics.impl.MetricsProviderBootstrap;\n@@ -125,6 +126,9 @@ protected void initializeAndRun(String[] args) throws ConfigException, IOExcepti\n             config.parse(args[0]);\n         }\n \n+        // Watch log4j configuration for change if feature is enabled\n+        Log4jConfigWatcher.watchLog4jConfiguration();\n+\n         // Start and schedule the the purge task\n         DatadirCleanupManager purgeMgr = new DatadirCleanupManager(\n             config.getDataDir(),"
  },
  {
    "sha": "e9310debe946b30203ea9517e28ac014159a0640",
    "filename": "zookeeper-server/src/test/java/org/apache/zookeeper/log/Log4jConfigWatcherTest.java",
    "status": "added",
    "additions": 126,
    "deletions": 0,
    "changes": 126,
    "blob_url": "https://github.com/apache/zookeeper/blob/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-server/src/test/java/org/apache/zookeeper/log/Log4jConfigWatcherTest.java",
    "raw_url": "https://github.com/apache/zookeeper/raw/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-server/src/test/java/org/apache/zookeeper/log/Log4jConfigWatcherTest.java",
    "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/test/java/org/apache/zookeeper/log/Log4jConfigWatcherTest.java?ref=06c69ca2a6960f845204a74709d6f5315684e43a",
    "patch": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.log;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.zookeeper.test.ClientBase;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class Log4jConfigWatcherTest {\n+    private static String testLogFilePath;\n+    private static final String zookeeperLogLevel = \"zookeeper.root.logger=\";\n+    private static final String LOG_4_J_WATCHER_LOG_DIR = \"log4j.watcher.log.dir\";\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        File tempDir = ClientBase.createEmptyTestDir();\n+        testLogFilePath = tempDir.getPath() + \"/zookeeper.log\";\n+        System.setProperty(LOG_4_J_WATCHER_LOG_DIR, tempDir.getPath());\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        System.clearProperty(Log4jConfigWatcher.LOG4J_CONFIGURATION_WATCH);\n+        System.clearProperty(Log4jConfigWatcher.LOG4J_CONFIGURATION);\n+        System.clearProperty(Log4jConfigWatcher.LOG4J_CONFIGURATION_WATCH_INTERVAL);\n+        System.clearProperty(LOG_4_J_WATCHER_LOG_DIR);\n+        File dir = new File(testLogFilePath);\n+        dir.delete();\n+    }\n+\n+    @Test\n+    public void testLogLevelChangeWithoutRestartingJVM() throws Exception {\n+        System.setProperty(Log4jConfigWatcher.LOG4J_CONFIGURATION_WATCH, \"true\");\n+        System\n+            .setProperty(Log4jConfigWatcher.LOG4J_CONFIGURATION, \"log4j-watcher-log4j.properties\");\n+        System.setProperty(Log4jConfigWatcher.LOG4J_CONFIGURATION_WATCH_INTERVAL, \"2000\");\n+        Log4jConfigWatcher.watchLog4jConfiguration();\n+\n+        // Changed the log level to WARN\n+        alterLogConfigFile(\"/\" + System.getProperty(Log4jConfigWatcher.LOG4J_CONFIGURATION),\n+            zookeeperLogLevel, zookeeperLogLevel + \"WARN, ROLLINGFILE\");\n+        // Waiting for some time so configuration event is triggered and changes reloaded into memory\n+        Thread.sleep(5000);\n+        Logger LOG = LoggerFactory.getLogger(Log4jConfigWatcherTest.class);\n+        LOG.warn(\"Warn level log is present in initial Configuration\");\n+        LOG.info(\"Info level log is present in initial Configuration\");\n+        Assert.assertTrue(checkTargetInLogFile(testLogFilePath,\n+            \"Warn level log is present in initial Configuration\"));\n+        Assert.assertFalse(checkTargetInLogFile(testLogFilePath,\n+            \"Info level log is present in initial Configuration\"));\n+\n+        // Changed the log level to INFO\n+        alterLogConfigFile(\"/\" + System.getProperty(Log4jConfigWatcher.LOG4J_CONFIGURATION),\n+            zookeeperLogLevel, zookeeperLogLevel + \"INFO, ROLLINGFILE\");\n+        // Waiting for some time so configuration event is triggered and changes reloaded into memory\n+        Thread.sleep(5000);\n+        LOG.info(\"Info level log is present after altering the Configuration\");\n+        Assert.assertTrue(checkTargetInLogFile(testLogFilePath,\n+            \"Info level log is present after altering the Configuration\"));\n+    }\n+\n+    private void alterLogConfigFile(String log4jConfigurationFile, String key, String value)\n+        throws IOException {\n+        InputStream inputStream = null;\n+        BufferedWriter bw = null;\n+        try {\n+            // log4j configuration file is modified from classpath, not from the resource folder\n+            inputStream = getClass().getResourceAsStream(log4jConfigurationFile);\n+            List<String> lines = IOUtils.readLines(inputStream, \"UTF-8\");\n+            FileWriter fileWriter =\n+                new FileWriter(getClass().getResource(log4jConfigurationFile).getPath());\n+            bw = new BufferedWriter(fileWriter);\n+            for (String line : lines) {\n+                if (line.contains(key)) {\n+                    line = value;\n+                }\n+                bw.write(line);\n+                bw.newLine();\n+            }\n+            bw.flush();\n+        } finally {\n+            org.apache.zookeeper.common.IOUtils.closeStream(inputStream);\n+            org.apache.zookeeper.common.IOUtils.closeStream(bw);\n+        }\n+    }\n+\n+    private Boolean checkTargetInLogFile(String fileName, String targetString) throws IOException {\n+        FileInputStream input = new FileInputStream(fileName);\n+        List<String> lines = IOUtils.readLines(input, \"UTF-8\");\n+        for (String line : lines) {\n+            if (line.contains(targetString)) {\n+                return true;\n+            }\n+        }\n+        org.apache.zookeeper.common.IOUtils.closeStream(input);\n+        return false;\n+    }\n+}"
  },
  {
    "sha": "9b70e50f1dc5fb38185931191cb4c5afd6bf9606",
    "filename": "zookeeper-server/src/test/resources/log4j-watcher-log4j.properties",
    "status": "added",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "blob_url": "https://github.com/apache/zookeeper/blob/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-server/src/test/resources/log4j-watcher-log4j.properties",
    "raw_url": "https://github.com/apache/zookeeper/raw/06c69ca2a6960f845204a74709d6f5315684e43a/zookeeper-server/src/test/resources/log4j-watcher-log4j.properties",
    "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/test/resources/log4j-watcher-log4j.properties?ref=06c69ca2a6960f845204a74709d6f5315684e43a",
    "patch": "@@ -0,0 +1,39 @@\n+# Copyright 2012 The Apache Software Foundation\n+# \n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+# Define some default values that can be overridden by system properties\n+zookeeper.root.logger=INFO, ROLLINGFILE\n+        \n+zookeeper.log.dir=${log4j.watcher.log.dir}\n+zookeeper.log.file=zookeeper.log\n+zookeeper.log.threshold=ALL\n+zookeeper.log.maxfilesize=256MB\n+zookeeper.log.maxbackupindex=20\n+\n+log4j.rootLogger=${zookeeper.root.logger}\n+\n+#\n+# Add ROLLINGFILE to rootLogger to get log file output\n+#\n+log4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender\n+log4j.appender.ROLLINGFILE.Threshold=${zookeeper.log.threshold}\n+log4j.appender.ROLLINGFILE.File=${zookeeper.log.dir}/${zookeeper.log.file}\n+log4j.appender.ROLLINGFILE.MaxFileSize=${zookeeper.log.maxfilesize}\n+log4j.appender.ROLLINGFILE.MaxBackupIndex=${zookeeper.log.maxbackupindex}\n+log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\n+log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n\n\\ No newline at end of file"
  }
]
