[
  {
    "sha": "e3ed11c869687843e8df672cfae302b816b54aa8",
    "filename": ".github/workflows/master-build.yml",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/.github/workflows/master-build.yml",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/.github/workflows/master-build.yml",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/.github/workflows/master-build.yml?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -29,7 +29,7 @@ jobs:\n     runs-on: ubuntu-latest\n     strategy:\n       matrix:\n-        java: [ '1.8' ]\n+        java: [ '11' ]\n \n     steps:\n       - uses: actions/checkout@v2"
  },
  {
    "sha": "cf82c8410d69e93b3f837a37323f18e65e3ba872",
    "filename": "default.properties",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/default.properties",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/default.properties",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/default.properties?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -43,7 +43,7 @@ test.junit.output.format = plain\n # Proxy Host and Port to use for building JavaDoc\n javadoc.proxy.host=-J-DproxyHost=\n javadoc.proxy.port=-J-DproxyPort=\n-javadoc.link.java=https://docs.oracle.com/javase/8/docs/api/\n+javadoc.link.java=https://docs.oracle.com/en/java/javase/11/docs/api/\n javadoc.link.hadoop=https://hadoop.apache.org/docs/r3.1.3/api/\n #javadoc.link.lucene.core=https://lucene.apache.org/core/8_4_1/core/\n #javadoc.link.lucene.analyzers-common=https://lucene.apache.org/core/8_4_1/analyzers-common/\n@@ -57,7 +57,7 @@ bin.dist.version.dir=${dist.dir}/${final.name}-bin\n javac.debug=on\n javac.optimize=on\n javac.deprecation=on\n-javac.version=1.8\n+javac.version=11\n \n runtime.dir=./runtime\n runtime.deploy=${runtime.dir}/deploy"
  },
  {
    "sha": "b38b37f6db5a6fb9fbf95ac47df7fdb6ca302a15",
    "filename": "ivy/mvn.template",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/ivy/mvn.template",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/ivy/mvn.template",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/ivy/mvn.template?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -130,8 +130,8 @@\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.8.1</version>\n           <configuration>\n-            <source>1.8</source>\n-            <target>1.8</target>\n+            <source>11</source>\n+            <target>11</target>\n           </configuration>\n         </plugin>\n       </plugins>"
  },
  {
    "sha": "52cc4f9c95d99f665a7d8991fa68ed856d987e08",
    "filename": "src/java/org/apache/nutch/indexer/IndexWriterParams.java",
    "status": "modified",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/indexer/IndexWriterParams.java",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/indexer/IndexWriterParams.java",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/indexer/IndexWriterParams.java?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -24,10 +24,10 @@\n public class IndexWriterParams extends HashMap<String, String> {\n \n   /**\n-   * Constructs a new <tt>HashMap</tt> with the same mappings as the\n-   * specified <tt>Map</tt>.  The <tt>HashMap</tt> is created with\n+   * Constructs a new <code>HashMap</code> with the same mappings as the\n+   * specified <code>Map</code>.  The <code>HashMap</code> is created with\n    * default load factor (0.75) and an initial capacity sufficient to\n-   * hold the mappings in the specified <tt>Map</tt>.\n+   * hold the mappings in the specified <code>Map</code>.\n    *\n    * @param m the map whose mappings are to be placed in this map\n    * @throws NullPointerException if the specified map is null"
  },
  {
    "sha": "254773493b9e6098fa677778a33c864507afe258",
    "filename": "src/java/org/apache/nutch/metadata/MetaWrapper.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/metadata/MetaWrapper.java",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/metadata/MetaWrapper.java",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/metadata/MetaWrapper.java?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -26,7 +26,7 @@\n \n /**\n  * This is a simple decorator that adds metadata to any Writable-s that can be\n- * serialized by <tt>NutchWritable</tt>. This is useful when data needs to be\n+ * serialized by {@link NutchWritable}. This is useful when data needs to be\n  * temporarily enriched during processing, but this temporary metadata doesn't\n  * need to be permanently stored after the job is done.\n  * "
  },
  {
    "sha": "bf947f7f603af69d8c461ec0d090758f2c7f06cc",
    "filename": "src/java/org/apache/nutch/net/URLNormalizers.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/net/URLNormalizers.java",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/net/URLNormalizers.java",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/net/URLNormalizers.java?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -42,7 +42,7 @@\n  * This class uses a \"chained filter\" pattern to run defined normalizers.\n  * Different lists of normalizers may be defined for different \"scopes\", or\n  * contexts where they are used (note however that they need to be activated\n- * first through <tt>plugin.include</tt> property).\n+ * first through <code>plugin.include</code> property).\n  * \n  * <p>\n  * There is one global scope defined by default, which consists of all active\n@@ -82,7 +82,7 @@\n  * executed at the beginning. By default this loop is executed just once - if\n  * you want to ensure that all possible combinations have been applied you may\n  * want to run this loop up to the number of activated normalizers. This loop\n- * count can be configured through <tt>urlnormalizer.loop.count</tt> property.\n+ * count can be configured through <code>urlnormalizer.loop.count</code> property.\n  * As soon as the url is unchanged the loop will stop and return the result.\n  * </p>\n  * "
  },
  {
    "sha": "7b0e76aab3c8baf3ab99227c87b733e1d2f138f6",
    "filename": "src/java/org/apache/nutch/parse/ParserChecker.java",
    "status": "modified",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/parse/ParserChecker.java",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/parse/ParserChecker.java",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/parse/ParserChecker.java?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -43,22 +43,22 @@\n  * to aid debugging. The tool enables us to retrieve the following data from any\n  * url:\n  * <ol>\n- * <li><tt>contentType</tt>: The URL {@link org.apache.nutch.protocol.Content}\n+ * <li><code>contentType</code>: The URL {@link org.apache.nutch.protocol.Content}\n  * type.</li>\n- * <li><tt>signature</tt>: Digest is used to identify pages (like unique ID) and\n+ * <li><code>signature</code>: Digest is used to identify pages (like unique ID) and\n  * is used to remove duplicates during the dedup procedure. It is calculated\n  * using {@link org.apache.nutch.crawl.MD5Signature} or\n  * {@link org.apache.nutch.crawl.TextProfileSignature}.</li>\n- * <li><tt>Version</tt>: From {@link org.apache.nutch.parse.ParseData}.</li>\n- * <li><tt>Status</tt>: From {@link org.apache.nutch.parse.ParseData}.</li>\n- * <li><tt>Title</tt>: of the URL</li>\n- * <li><tt>Outlinks</tt>: associated with the URL</li>\n- * <li><tt>Content Metadata</tt>: such as <i>X-AspNet-Version</i>, <i>Date</i>,\n+ * <li><code>Version</code>: From {@link org.apache.nutch.parse.ParseData}.</li>\n+ * <li><code>Status</code>: From {@link org.apache.nutch.parse.ParseData}.</li>\n+ * <li><code>Title</code>: of the URL</li>\n+ * <li><code>Outlinks</code>: associated with the URL</li>\n+ * <li><code>Content Metadata</code>: such as <i>X-AspNet-Version</i>, <i>Date</i>,\n  * <i>Content-length</i>, <i>servedBy</i>, <i>Content-Type</i>,\n  * <i>Cache-Control</i>, etc.</li>\n- * <li><tt>Parse Metadata</tt>: such as <i>CharEncodingForConversion</i>,\n+ * <li><code>Parse Metadata</code>: such as <i>CharEncodingForConversion</i>,\n  * <i>OriginalCharEncoding</i>, <i>language</i>, etc.</li>\n- * <li><tt>ParseText</tt>: The page parse text which varies in length depdnecing\n+ * <li><code>ParseText</code>: The page parse text which varies in length depdnecing\n  * on <code>content.length</code> configuration.</li>\n  * </ol>\n  * "
  },
  {
    "sha": "c0c72c71b03245b2985badbad36420364d45d275",
    "filename": "src/java/org/apache/nutch/segment/SegmentMergeFilter.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/segment/SegmentMergeFilter.java",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/segment/SegmentMergeFilter.java",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/segment/SegmentMergeFilter.java?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -45,7 +45,7 @@\n    * @param parseData directory and data produced by the parse phase\n    * @param parseText directory and data produced by the parse phase\n    * @param linked all LINKED values from the latest segment\n-   * @return <tt>true</tt> values for this <tt>key</tt> (URL) should be merged\n+   * @return <code>true</code> values for this <code>key</code> (URL) should be merged\n    *         into the new segment.\n    */\n   public boolean filter(Text key, CrawlDatum generateData,"
  },
  {
    "sha": "81262217462a082ab80944ecd823aa2e96dfbd12",
    "filename": "src/java/org/apache/nutch/segment/SegmentMergeFilters.java",
    "status": "modified",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/segment/SegmentMergeFilters.java",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/java/org/apache/nutch/segment/SegmentMergeFilters.java",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/java/org/apache/nutch/segment/SegmentMergeFilters.java?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -36,7 +36,7 @@\n /**\n  * This class wraps all {@link SegmentMergeFilter} extensions in a single object\n  * so it is easier to operate on them. If any of extensions returns\n- * <tt>false</tt> this one will return <tt>false</tt> as well.\n+ * <code>false</code> this one will return <code>false</code> as well.\n  * \n  */\n public class SegmentMergeFilters {\n@@ -71,7 +71,7 @@ public SegmentMergeFilters(Configuration conf) {\n    * @param parseData directory and data produced by the parse phase\n    * @param parseText directory and data produced by the parse phase\n    * @param linked all LINKED values from the latest segment\n-   * @return <tt>true</tt> values for this <tt>key</tt> (URL) should be merged\n+   * @return <code>true</code> values for this <code>key</code> (URL) should be merged\n    *         into the new segment.\n    */\n   public boolean filter(Text key, CrawlDatum generateData,"
  },
  {
    "sha": "885944e5d1535889864a03219a0226237526c0cb",
    "filename": "src/plugin/urlnormalizer-regex/src/java/org/apache/nutch/net/urlnormalizer/regex/RegexURLNormalizer.java",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/apache/nutch/blob/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/plugin/urlnormalizer-regex/src/java/org/apache/nutch/net/urlnormalizer/regex/RegexURLNormalizer.java",
    "raw_url": "https://github.com/apache/nutch/raw/ac724514a8bd7f1b865fbb876079f816e3c7d20c/src/plugin/urlnormalizer-regex/src/java/org/apache/nutch/net/urlnormalizer/regex/RegexURLNormalizer.java",
    "contents_url": "https://api.github.com/repos/apache/nutch/contents/src/plugin/urlnormalizer-regex/src/java/org/apache/nutch/net/urlnormalizer/regex/RegexURLNormalizer.java?ref=ac724514a8bd7f1b865fbb876079f816e3c7d20c",
    "patch": "@@ -52,7 +52,7 @@\n  * which is useful for stripping session IDs from URLs.\n  * \n  * <p>\n- * This class uses the <tt>urlnormalizer.regex.file</tt> property. It should be\n+ * This class uses the <code>urlnormalizer.regex.file</code> property. It should be\n  * set to the file name of an xml file which should contain the patterns and\n  * substitutions to be done on encountered URLs.\n  * </p>"
  }
]
